
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a10c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049e0  0802a1d0  0802a1d0  0002b1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ebb0  0802ebb0  0003043c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ebb0  0802ebb0  0002fbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ebb8  0802ebb8  0003043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ebb8  0802ebb8  0002fbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ebbc  0802ebbc  0002fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802ebc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003338  2000043c  0802effc  0003043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003774  0802effc  00030774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036de9  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d66  00000000  00000000  0006724d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc0  00000000  00000000  00070fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002218  00000000  00000000  00073d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002436f  00000000  00000000  00075f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000467a2  00000000  00000000  0009a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a33ec  00000000  00000000  000e0aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00183e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc24  00000000  00000000  00183f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018fb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0019214d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a1b4 	.word	0x0802a1b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a1b4 	.word	0x0802a1b4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802dc88 	.word	0x0802dc88
 8000ec8:	0802dcc8 	.word	0x0802dcc8
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802dd04 	.word	0x0802dd04
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fcf8 	bl	801454c <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 fccf 	bl	8014560 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f ff47 	bl	8013acc <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a1d0 	.word	0x0802a1d0
 8003c84:	0802a1dc 	.word	0x0802a1dc
 8003c88:	0802a1e0 	.word	0x0802a1e0
 8003c8c:	0802a1ec 	.word	0x0802a1ec
 8003c90:	0802a20c 	.word	0x0802a20c
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 fc54 	bl	8014560 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 fc40 	bl	8014560 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f fed3 	bl	8013acc <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 fc1a 	bl	8014560 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a210 	.word	0x0802a210
 8003d4c:	0802a1dc 	.word	0x0802a1dc
 8003d50:	0802a214 	.word	0x0802a214
 8003d54:	0802a20c 	.word	0x0802a20c

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fbfc 	bl	8014560 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 fbf0 	bl	8014560 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f fe75 	bl	8013acc <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 fbbc 	bl	8014560 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a240 	.word	0x0802a240
 8003e08:	0802a20c 	.word	0x0802a20c

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fb89 	bl	8014560 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f fe02 	bl	8013acc <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f fdc3 	bl	8013acc <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a25c 	.word	0x0802a25c
 8003f5c:	0802a27c 	.word	0x0802a27c
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a280 	.word	0x0802a280
 8003f68:	0802a20c 	.word	0x0802a20c

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f fd9c 	bl	8013acc <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a2b4 	.word	0x0802a2b4
 8003fa8:	0802a20c 	.word	0x0802a20c

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f fd7c 	bl	8013acc <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fabf 	bl	8014560 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 faae 	bl	8014560 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a2c8 	.word	0x0802a2c8
 8004098:	0802a20c 	.word	0x0802a20c
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f fd00 	bl	8013acc <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fa43 	bl	8014560 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 fd83 	bl	8028c40 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 fd5f 	bl	8028c40 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 fd3b 	bl	8028c40 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 fd17 	bl	8028c40 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 fced 	bl	8028c40 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 fcc9 	bl	8028c40 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fca5 	bl	8028c40 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 fc81 	bl	8028c40 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a2e4 	.word	0x0802a2e4
 800437c:	0802a20c 	.word	0x0802a20c
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <ENS_Upkeep+0x340>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fadc 	bl	8013a20 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc9      	ldr	r3, [pc, #804]	@ (800479c <ENS_Upkeep+0x344>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e22e      	b.n	80048da <ENS_Upkeep+0x482>
  }
  switch(ENSState) {
 800447c:	4bc7      	ldr	r3, [pc, #796]	@ (800479c <ENS_Upkeep+0x344>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e210      	b.n	80048a8 <ENS_Upkeep+0x450>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bc5      	ldr	r3, [pc, #788]	@ (80047a0 <ENS_Upkeep+0x348>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4ac4      	ldr	r2, [pc, #784]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004492:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fb18 	bl	8013acc <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 f856 	bl	801454c <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <ENS_Upkeep+0x354>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004798 <ENS_Upkeep+0x340>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bc1      	ldr	r3, [pc, #772]	@ (80047b0 <ENS_Upkeep+0x358>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e203      	b.n	80048c0 <ENS_Upkeep+0x468>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	@ (800479c <ENS_Upkeep+0x344>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1ff      	b.n	80048c0 <ENS_Upkeep+0x468>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fb0c 	bl	800dadc <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1fc      	b.n	80048c4 <ENS_Upkeep+0x46c>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 faf2 	bl	800dab4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bb4      	ldr	r3, [pc, #720]	@ (80047b8 <ENS_Upkeep+0x360>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <ENS_Upkeep+0x364>)
 80044ea:	4ab5      	ldr	r2, [pc, #724]	@ (80047c0 <ENS_Upkeep+0x368>)
 80044ec:	49ae      	ldr	r1, [pc, #696]	@ (80047a8 <ENS_Upkeep+0x350>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f faec 	bl	8013acc <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 f833 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fada 	bl	800dab4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4ba6      	ldr	r3, [pc, #664]	@ (800479c <ENS_Upkeep+0x344>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 f821 	bl	801454c <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <ENS_Upkeep+0x340>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1de      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fae0 	bl	800dadc <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e1d2      	b.n	80048c8 <ENS_Upkeep+0x470>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fac6 	bl	800dab4 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 f814 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fabb 	bl	800dab4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a98      	ldr	r2, [pc, #608]	@ (80047c4 <ENS_Upkeep+0x36c>)
 8004562:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fab0 	bl	8013acc <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a96      	ldr	r2, [pc, #600]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004570:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f faa9 	bl	8013acc <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a93      	ldr	r2, [pc, #588]	@ (80047cc <ENS_Upkeep+0x374>)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f faa2 	bl	8013acc <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f00f ffda 	bl	801454c <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <ENS_Upkeep+0x340>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e197      	b.n	80048d6 <ENS_Upkeep+0x47e>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <ENS_Upkeep+0x344>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e193      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fa95 	bl	800dadc <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fa91 	bl	800dadc <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fa8b 	bl	800dadc <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <ENS_Upkeep+0x378>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <ENS_Upkeep+0x37c>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <ENS_Upkeep+0x380>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <ENS_Upkeep+0x384>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <ENS_Upkeep+0x390>)
 800460a:	4967      	ldr	r1, [pc, #412]	@ (80047a8 <ENS_Upkeep+0x350>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fa5d 	bl	8013acc <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f00f ff9b 	bl	801454c <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b5e      	ldr	r3, [pc, #376]	@ (8004798 <ENS_Upkeep+0x340>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e158      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fa45 	bl	800dab4 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f00f ff85 	bl	801454c <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <ENS_Upkeep+0x340>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f00f ff86 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fa2d 	bl	800dab4 <setSensorLock>
      break;
 800465a:	e13c      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f00f ff7c 	bl	8014560 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f00f ff76 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fa1d 	bl	800dab4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <ENS_Upkeep+0x344>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e129      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <ENS_Upkeep+0x394>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <ENS_Upkeep+0x2aa>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <ENS_Upkeep+0x398>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <ENS_Upkeep+0x39c>)
 800469c:	4956      	ldr	r1, [pc, #344]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fa11 	bl	8013acc <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a53      	ldr	r2, [pc, #332]	@ (8004800 <ENS_Upkeep+0x3a8>)
 80046b4:	4950      	ldr	r1, [pc, #320]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0003      	movs	r3, r0
 80046ba:	2002      	movs	r0, #2
 80046bc:	f00f fa06 	bl	8013acc <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046c0:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c2:	6898      	ldr	r0, [r3, #8]
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004804 <ENS_Upkeep+0x3ac>)
 80046ca:	494b      	ldr	r1, [pc, #300]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0003      	movs	r3, r0
 80046d0:	2002      	movs	r0, #2
 80046d2:	f00f f9fb 	bl	8013acc <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046d6:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <ENS_Upkeep+0x3b0>)
 80046e0:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	2002      	movs	r0, #2
 80046e8:	f00f f9f0 	bl	8013acc <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ee:	6998      	ldr	r0, [r3, #24]
 80046f0:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <ENS_Upkeep+0x3b4>)
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0003      	movs	r3, r0
 80046fc:	2002      	movs	r0, #2
 80046fe:	f00f f9e5 	bl	8013acc <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <ENS_Upkeep+0x394>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d103      	bne.n	8004712 <ENS_Upkeep+0x2ba>
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ENS_Upkeep+0x394>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <ENS_Upkeep+0x2c6>
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <ENS_Upkeep+0x394>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <ENS_Upkeep+0x394>)
 800471c:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004724:	8859      	ldrh	r1, [r3, #2]
 8004726:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 f9e2 	bl	8004af4 <setENS160>
    ENSState = ENS_LOW_POWER;
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <ENS_Upkeep+0x344>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    break;
 8004736:	e0ce      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004738:	f00f ff08 	bl	801454c <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	22fa      	movs	r2, #250	@ 0xfa
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	189a      	adds	r2, r3, r2
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <ENS_Upkeep+0x340>)
 8004746:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <ENS_Upkeep+0x3b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	4053      	eors	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d100      	bne.n	8004758 <ENS_Upkeep+0x300>
 8004756:	e076      	b.n	8004846 <ENS_Upkeep+0x3ee>
 8004758:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ENS_Upkeep+0x3bc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4053      	eors	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <ENS_Upkeep+0x3ee>
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <ENS_Upkeep+0x394>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d96b      	bls.n	8004846 <ENS_Upkeep+0x3ee>
      if (getSensorLock() != FREE) {
 800476e:	f009 f9b5 	bl	800dadc <getSensorLock>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d000      	beq.n	8004778 <ENS_Upkeep+0x320>
 8004776:	e0a9      	b.n	80048cc <ENS_Upkeep+0x474>
        break;
      }
      setSensorLock(ENS160);
 8004778:	2004      	movs	r0, #4
 800477a:	f009 f99b 	bl	800dab4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 800477e:	1cfc      	adds	r4, r7, #3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fb43 	bl	8003e0c <ENS160_setMode>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d042      	beq.n	8004818 <ENS_Upkeep+0x3c0>
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004794:	e041      	b.n	800481a <ENS_Upkeep+0x3c2>
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	2000045c 	.word	0x2000045c
 800479c:	20000000 	.word	0x20000000
 80047a0:	0802dd44 	.word	0x0802dd44
 80047a4:	0802a304 	.word	0x0802a304
 80047a8:	0802a20c 	.word	0x0802a20c
 80047ac:	000be6e0 	.word	0x000be6e0
 80047b0:	20000c96 	.word	0x20000c96
 80047b4:	20000461 	.word	0x20000461
 80047b8:	0802a338 	.word	0x0802a338
 80047bc:	0802a340 	.word	0x0802a340
 80047c0:	0802a348 	.word	0x0802a348
 80047c4:	0802a36c 	.word	0x0802a36c
 80047c8:	0802a384 	.word	0x0802a384
 80047cc:	0802a3a4 	.word	0x0802a3a4
 80047d0:	0802a3bc 	.word	0x0802a3bc
 80047d4:	0802a3c4 	.word	0x0802a3c4
 80047d8:	0802a3cc 	.word	0x0802a3cc
 80047dc:	0802a3d4 	.word	0x0802a3d4
 80047e0:	0802a3dc 	.word	0x0802a3dc
 80047e4:	0802a3e4 	.word	0x0802a3e4
 80047e8:	0802a3ec 	.word	0x0802a3ec
 80047ec:	20000460 	.word	0x20000460
 80047f0:	20000490 	.word	0x20000490
 80047f4:	0802a414 	.word	0x0802a414
 80047f8:	0802a27c 	.word	0x0802a27c
 80047fc:	2000046c 	.word	0x2000046c
 8004800:	0802a440 	.word	0x0802a440
 8004804:	0802a45c 	.word	0x0802a45c
 8004808:	0802a478 	.word	0x0802a478
 800480c:	0802a494 	.word	0x0802a494
 8004810:	20001fa9 	.word	0x20001fa9
 8004814:	20001faa 	.word	0x20001faa
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <ENS_Upkeep+0x490>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0010      	movs	r0, r2
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <ENS_Upkeep+0x494>)
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <ENS_Upkeep+0x498>)
 8004824:	9000      	str	r0, [sp, #0]
 8004826:	2003      	movs	r0, #3
 8004828:	f00f f950 	bl	8013acc <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800482c:	200a      	movs	r0, #10
 800482e:	f00f fe97 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 8004832:	2000      	movs	r0, #0
 8004834:	f009 f93e 	bl	800dab4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004838:	f00f fe88 	bl	801454c <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <ENS_Upkeep+0x49c>)
 8004840:	189a      	adds	r2, r3, r2
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <ENS_Upkeep+0x4a0>)
 8004844:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <ENS_Upkeep+0x4a4>)
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
    break;
 800484c:	e043      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800484e:	f009 f945 	bl	800dadc <getSensorLock>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d13c      	bne.n	80048d0 <ENS_Upkeep+0x478>
        break;
      }
      setSensorLock(ENS160);
 8004856:	2004      	movs	r0, #4
 8004858:	f009 f92c 	bl	800dab4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800485c:	1cba      	adds	r2, r7, #2
 800485e:	2301      	movs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2010      	movs	r0, #16
 8004864:	f7ff f93a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004868:	1cbb      	adds	r3, r7, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <ENS_Upkeep+0x43c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004870:	1dfc      	adds	r4, r7, #7
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff faca 	bl	8003e0c <ENS160_setMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <ENS_Upkeep+0x430>
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <ENS_Upkeep+0x4a8>)
 8004886:	e000      	b.n	800488a <ENS_Upkeep+0x432>
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <ENS_Upkeep+0x4ac>)
 800488c:	4918      	ldr	r1, [pc, #96]	@ (80048f0 <ENS_Upkeep+0x498>)
 800488e:	2003      	movs	r0, #3
 8004890:	f00f f91c 	bl	8013acc <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004894:	200a      	movs	r0, #10
 8004896:	f00f fe63 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 800489a:	2000      	movs	r0, #0
 800489c:	f009 f90a 	bl	800dab4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
    break;
 80048a6:	e016      	b.n	80048d6 <ENS_Upkeep+0x47e>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80048ae:	f009 f915 	bl	800dadc <getSensorLock>
 80048b2:	0003      	movs	r3, r0
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d00d      	beq.n	80048d4 <ENS_Upkeep+0x47c>
      setSensorLock(FREE);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f009 f8fb 	bl	800dab4 <setSensorLock>
    }
    break;
 80048be:	e009      	b.n	80048d4 <ENS_Upkeep+0x47c>
    break;
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e008      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	e006      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e004      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	e002      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e000      	b.n	80048d6 <ENS_Upkeep+0x47e>
    break;
 80048d4:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b003      	add	sp, #12
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	0802a340 	.word	0x0802a340
 80048e8:	20000460 	.word	0x20000460
 80048ec:	0802a4b0 	.word	0x0802a4b0
 80048f0:	0802a20c 	.word	0x0802a20c
 80048f4:	0000afc8 	.word	0x0000afc8
 80048f8:	2000045c 	.word	0x2000045c
 80048fc:	20000000 	.word	0x20000000
 8004900:	0802a338 	.word	0x0802a338
 8004904:	0802a4e8 	.word	0x0802a4e8

08004908 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <forceNTPupdate+0x10>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200006a8 	.word	0x200006a8

0800491c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004924:	f00f fe12 	bl	801454c <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b03      	ldr	r3, [pc, #12]	@ (800493c <setESPTimeStamp+0x20>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	200006a4 	.word	0x200006a4

08004940 <setCharges>:

void setCharges(){
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004944:	f004 fe36 	bl	80095b4 <ReadBatteryVoltage>
 8004948:	1c02      	adds	r2, r0, #0
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <setCharges+0x3c>)
 800494c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800494e:	f004 fe93 	bl	8009678 <ReadSolarVoltage>
 8004952:	0003      	movs	r3, r0
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ff4b 	bl	80037f0 <__aeabi_i2d>
 800495a:	2200      	movs	r2, #0
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <setCharges+0x40>)
 800495e:	f7fd fbbf 	bl	80020e0 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe ffdb 	bl	8003924 <__aeabi_d2f>
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <setCharges+0x44>)
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	200005cc 	.word	0x200005cc
 8004980:	408f4000 	.word	0x408f4000
 8004984:	200005d0 	.word	0x200005d0

08004988 <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800498e:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <checkName+0x5c>)
 8004990:	4815      	ldr	r0, [pc, #84]	@ (80049e8 <checkName+0x60>)
 8004992:	2220      	movs	r2, #32
 8004994:	0019      	movs	r1, r3
 8004996:	f007 fa91 	bl	800bebc <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800499a:	1dfb      	adds	r3, r7, #7
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e00e      	b.n	80049c0 <checkName+0x38>
    configSum += nameConfig[i];
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <checkName+0x5c>)
 80049a8:	5cd3      	ldrb	r3, [r2, r3]
 80049aa:	001a      	movs	r2, r3
 80049ac:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <checkName+0x64>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	18d2      	adds	r2, r2, r3
 80049b2:	4b0e      	ldr	r3, [pc, #56]	@ (80049ec <checkName+0x64>)
 80049b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	3201      	adds	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b0b      	cmp	r3, #11
 80049c6:	d9ec      	bls.n	80049a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80049c8:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <checkName+0x64>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	4193      	sbcs	r3, r2
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <checkName+0x68>)
 80049d4:	701a      	strb	r2, [r3, #0]
  return test;
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <checkName+0x68>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	20000718 	.word	0x20000718
 80049e8:	08080090 	.word	0x08080090
 80049ec:	20000738 	.word	0x20000738
 80049f0:	2000073c 	.word	0x2000073c

080049f4 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80049fa:	003b      	movs	r3, r7
 80049fc:	4811      	ldr	r0, [pc, #68]	@ (8004a44 <setModePowerMail+0x50>)
 80049fe:	2230      	movs	r2, #48	@ 0x30
 8004a00:	0019      	movs	r1, r3
 8004a02:	f007 fa5b 	bl	800bebc <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 8004a06:	003b      	movs	r3, r7
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a48 <setModePowerMail+0x54>)
 8004a10:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <setModePowerMail+0x58>)
 8004a12:	0019      	movs	r1, r3
 8004a14:	2001      	movs	r0, #1
 8004a16:	f00f f859 	bl	8013acc <CreateLine>
 8004a1a:	e00f      	b.n	8004a3c <setModePowerMail+0x48>
    return;
  }
  sendpwremail = DO_PWR_MAIL;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <setModePowerMail+0x5c>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <setModePowerMail+0x60>)
 8004a24:	2206      	movs	r2, #6
 8004a26:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <setModePowerMail+0x64>)
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <setModePowerMail+0x68>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <setModePowerMail+0x6c>)
 8004a34:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004a36:	4b09      	ldr	r3, [pc, #36]	@ (8004a5c <setModePowerMail+0x68>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b00c      	add	sp, #48	@ 0x30
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080801e8 	.word	0x080801e8
 8004a48:	0802a518 	.word	0x0802a518
 8004a4c:	0802a530 	.word	0x0802a530
 8004a50:	20000f57 	.word	0x20000f57
 8004a54:	200006af 	.word	0x200006af
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	200006a4 	.word	0x200006a4
 8004a60:	2000002c 	.word	0x2000002c

08004a64 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a6e:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <setHIDS+0x20>)
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <setHIDS+0x20>)
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	200006b4 	.word	0x200006b4

08004a88 <setVOC>:

void setVOC(uint16_t voc) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	1dbb      	adds	r3, r7, #6
 8004a92:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a94:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <setVOC+0x20>)
 8004a96:	1dba      	adds	r2, r7, #6
 8004a98:	2148      	movs	r1, #72	@ 0x48
 8004a9a:	8812      	ldrh	r2, [r2, #0]
 8004a9c:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b002      	add	sp, #8
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	200006b4 	.word	0x200006b4

08004aac <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ab6:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <setAHT2x+0x20>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004abc:	4b03      	ldr	r3, [pc, #12]	@ (8004acc <setAHT2x+0x20>)
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			@ (mov r8, r8)
 8004acc:	200006b4 	.word	0x200006b4

08004ad0 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ada:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <setBMP280+0x20>)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <setBMP280+0x20>)
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	200006b4 	.word	0x200006b4

08004af4 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	0004      	movs	r4, r0
 8004afc:	0008      	movs	r0, r1
 8004afe:	0011      	movs	r1, r2
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	1c22      	adds	r2, r4, #0
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	1d3b      	adds	r3, r7, #4
 8004b08:	1c02      	adds	r2, r0, #0
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	1cbb      	adds	r3, r7, #2
 8004b0e:	1c0a      	adds	r2, r1, #0
 8004b10:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <setENS160+0x74>)
 8004b14:	1dfa      	adds	r2, r7, #7
 8004b16:	2154      	movs	r1, #84	@ 0x54
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b1c:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <setENS160+0x74>)
 8004b1e:	2255      	movs	r2, #85	@ 0x55
 8004b20:	5c9b      	ldrb	r3, [r3, r2]
 8004b22:	1dfa      	adds	r2, r7, #7
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d904      	bls.n	8004b34 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <setENS160+0x74>)
 8004b2c:	1dfa      	adds	r2, r7, #7
 8004b2e:	2155      	movs	r1, #85	@ 0x55
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <setENS160+0x74>)
 8004b36:	1d3a      	adds	r2, r7, #4
 8004b38:	214a      	movs	r1, #74	@ 0x4a
 8004b3a:	8812      	ldrh	r2, [r2, #0]
 8004b3c:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <setENS160+0x74>)
 8004b40:	1cba      	adds	r2, r7, #2
 8004b42:	2150      	movs	r1, #80	@ 0x50
 8004b44:	8812      	ldrh	r2, [r2, #0]
 8004b46:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <setENS160+0x74>)
 8004b4a:	2252      	movs	r2, #82	@ 0x52
 8004b4c:	5a9b      	ldrh	r3, [r3, r2]
 8004b4e:	1cba      	adds	r2, r7, #2
 8004b50:	8812      	ldrh	r2, [r2, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d904      	bls.n	8004b60 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b56:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <setENS160+0x74>)
 8004b58:	1cba      	adds	r2, r7, #2
 8004b5a:	2152      	movs	r1, #82	@ 0x52
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	525a      	strh	r2, [r3, r1]
  }
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b003      	add	sp, #12
 8004b66:	bd90      	pop	{r4, r7, pc}
 8004b68:	200006b4 	.word	0x200006b4

08004b6c <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <setMic+0x28>)
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <setMic+0x28>)
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004b84:	4b03      	ldr	r3, [pc, #12]	@ (8004b94 <setMic+0x28>)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	200006b4 	.word	0x200006b4

08004b98 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	1dbb      	adds	r3, r7, #6
 8004ba2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004ba4:	1dbb      	adds	r3, r7, #6
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fc fe3d 	bl	8001828 <__aeabi_i2f>
 8004bae:	1c03      	adds	r3, r0, #0
 8004bb0:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <setPM1p0+0x50>)
 8004bb2:	1c18      	adds	r0, r3, #0
 8004bb4:	f7fc f876 	bl	8000ca4 <__aeabi_fdiv>
 8004bb8:	1c03      	adds	r3, r0, #0
 8004bba:	1c1a      	adds	r2, r3, #0
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <setPM1p0+0x54>)
 8004bbe:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <setPM1p0+0x54>)
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <setPM1p0+0x54>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	1c19      	adds	r1, r3, #0
 8004bca:	1c10      	adds	r0, r2, #0
 8004bcc:	f7fb fcc4 	bl	8000558 <__aeabi_fcmpgt>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d100      	bne.n	8004bd6 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004bd4:	e003      	b.n	8004bde <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004bd6:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <setPM1p0+0x54>)
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <setPM1p0+0x54>)
 8004bdc:	60da      	str	r2, [r3, #12]
}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	41200000 	.word	0x41200000
 8004bec:	200006b4 	.word	0x200006b4

08004bf0 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004bfc:	1dbb      	adds	r3, r7, #6
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7fc fe11 	bl	8001828 <__aeabi_i2f>
 8004c06:	1c03      	adds	r3, r0, #0
 8004c08:	490d      	ldr	r1, [pc, #52]	@ (8004c40 <setPM2p5+0x50>)
 8004c0a:	1c18      	adds	r0, r3, #0
 8004c0c:	f7fc f84a 	bl	8000ca4 <__aeabi_fdiv>
 8004c10:	1c03      	adds	r3, r0, #0
 8004c12:	1c1a      	adds	r2, r3, #0
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <setPM2p5+0x54>)
 8004c16:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c18:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <setPM2p5+0x54>)
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <setPM2p5+0x54>)
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	1c19      	adds	r1, r3, #0
 8004c22:	1c10      	adds	r0, r2, #0
 8004c24:	f7fb fc98 	bl	8000558 <__aeabi_fcmpgt>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d100      	bne.n	8004c2e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c2c:	e003      	b.n	8004c36 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <setPM2p5+0x54>)
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <setPM2p5+0x54>)
 8004c34:	615a      	str	r2, [r3, #20]
}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	41200000 	.word	0x41200000
 8004c44:	200006b4 	.word	0x200006b4

08004c48 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	0002      	movs	r2, r0
 8004c50:	1dbb      	adds	r3, r7, #6
 8004c52:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fc fde5 	bl	8001828 <__aeabi_i2f>
 8004c5e:	1c03      	adds	r3, r0, #0
 8004c60:	490d      	ldr	r1, [pc, #52]	@ (8004c98 <setPM4p0+0x50>)
 8004c62:	1c18      	adds	r0, r3, #0
 8004c64:	f7fc f81e 	bl	8000ca4 <__aeabi_fdiv>
 8004c68:	1c03      	adds	r3, r0, #0
 8004c6a:	1c1a      	adds	r2, r3, #0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <setPM4p0+0x54>)
 8004c6e:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c70:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <setPM4p0+0x54>)
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <setPM4p0+0x54>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	1c19      	adds	r1, r3, #0
 8004c7a:	1c10      	adds	r0, r2, #0
 8004c7c:	f7fb fc6c 	bl	8000558 <__aeabi_fcmpgt>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d100      	bne.n	8004c86 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004c84:	e003      	b.n	8004c8e <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <setPM4p0+0x54>)
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <setPM4p0+0x54>)
 8004c8c:	61da      	str	r2, [r3, #28]
}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	41200000 	.word	0x41200000
 8004c9c:	200006b4 	.word	0x200006b4

08004ca0 <setPM10>:

void setPM10(uint16_t PM10) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004cac:	1dbb      	adds	r3, r7, #6
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fc fdb9 	bl	8001828 <__aeabi_i2f>
 8004cb6:	1c03      	adds	r3, r0, #0
 8004cb8:	490d      	ldr	r1, [pc, #52]	@ (8004cf0 <setPM10+0x50>)
 8004cba:	1c18      	adds	r0, r3, #0
 8004cbc:	f7fb fff2 	bl	8000ca4 <__aeabi_fdiv>
 8004cc0:	1c03      	adds	r3, r0, #0
 8004cc2:	1c1a      	adds	r2, r3, #0
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <setPM10+0x54>)
 8004cc6:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <setPM10+0x54>)
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <setPM10+0x54>)
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c19      	adds	r1, r3, #0
 8004cd2:	1c10      	adds	r0, r2, #0
 8004cd4:	f7fb fc40 	bl	8000558 <__aeabi_fcmpgt>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d100      	bne.n	8004cde <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004cdc:	e003      	b.n	8004ce6 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <setPM10+0x54>)
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <setPM10+0x54>)
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b002      	add	sp, #8
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	41200000 	.word	0x41200000
 8004cf4:	200006b4 	.word	0x200006b4

08004cf8 <setNOx>:

void setNOx(uint16_t nox) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	1dbb      	adds	r3, r7, #6
 8004d02:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <setNOx+0x38>)
 8004d06:	1dba      	adds	r2, r7, #6
 8004d08:	214c      	movs	r1, #76	@ 0x4c
 8004d0a:	8812      	ldrh	r2, [r2, #0]
 8004d0c:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <setNOx+0x38>)
 8004d10:	224e      	movs	r2, #78	@ 0x4e
 8004d12:	5a9b      	ldrh	r3, [r3, r2]
 8004d14:	1dba      	adds	r2, r7, #6
 8004d16:	8812      	ldrh	r2, [r2, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d904      	bls.n	8004d26 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d1c:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <setNOx+0x38>)
 8004d1e:	1dba      	adds	r2, r7, #6
 8004d20:	214e      	movs	r1, #78	@ 0x4e
 8004d22:	8812      	ldrh	r2, [r2, #0]
 8004d24:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b002      	add	sp, #8
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	200006b4 	.word	0x200006b4

08004d34 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d3e:	490a      	ldr	r1, [pc, #40]	@ (8004d68 <SetSEN545temphum+0x34>)
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fb ffaf 	bl	8000ca4 <__aeabi_fdiv>
 8004d46:	1c03      	adds	r3, r0, #0
 8004d48:	1c1a      	adds	r2, r3, #0
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <SetSEN545temphum+0x38>)
 8004d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d4e:	4908      	ldr	r1, [pc, #32]	@ (8004d70 <SetSEN545temphum+0x3c>)
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7fb ffa7 	bl	8000ca4 <__aeabi_fdiv>
 8004d56:	1c03      	adds	r3, r0, #0
 8004d58:	1c1a      	adds	r2, r3, #0
 8004d5a:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <SetSEN545temphum+0x38>)
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	43480000 	.word	0x43480000
 8004d6c:	200006b4 	.word	0x200006b4
 8004d70:	42c80000 	.word	0x42c80000

08004d74 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004d78:	f009 fa66 	bl	800e248 <sen5x_Get_sen5x_enable_state>
 8004d7c:	1e03      	subs	r3, r0, #0
 8004d7e:	d00f      	beq.n	8004da0 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004d80:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004d92:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004d98:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004d9a:	224e      	movs	r2, #78	@ 0x4e
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004da2:	2252      	movs	r2, #82	@ 0x52
 8004da4:	2100      	movs	r1, #0
 8004da6:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <resetMaxMeasurementValues+0x44>)
 8004daa:	2255      	movs	r2, #85	@ 0x55
 8004dac:	2100      	movs	r1, #0
 8004dae:	5499      	strb	r1, [r3, r2]
}
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	200006b4 	.word	0x200006b4

08004dbc <SetConfigMode>:

void SetConfigMode(){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <SetConfigMode+0x30>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4053      	eors	r3, r2
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <SetConfigMode+0x34>)
 8004dd0:	4b08      	ldr	r3, [pc, #32]	@ (8004df4 <SetConfigMode+0x38>)
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	f00e fe79 	bl	8013acc <CreateLine>
  }
  ReconfigSet = true;
 8004dda:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <SetConfigMode+0x30>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <SetConfigMode+0x3c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200005af 	.word	0x200005af
 8004df0:	0802a534 	.word	0x0802a534
 8004df4:	0802a554 	.word	0x0802a554
 8004df8:	20000213 	.word	0x20000213

08004dfc <GetReconfigMode>:

bool GetReconfigMode() {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e00:	4b02      	ldr	r3, [pc, #8]	@ (8004e0c <GetReconfigMode+0x10>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
}
 8004e04:	0018      	movs	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	200005af 	.word	0x200005af

08004e10 <ESP_GetUID>:

void ESP_GetUID(){
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e14:	f00f fbe4 	bl	80145e0 <HAL_GetUIDw0>
 8004e18:	0002      	movs	r2, r0
 8004e1a:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <ESP_GetUID+0x28>)
 8004e1c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e1e:	f00f fbe9 	bl	80145f4 <HAL_GetUIDw1>
 8004e22:	0002      	movs	r2, r0
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <ESP_GetUID+0x28>)
 8004e26:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004e28:	f00f fbee 	bl	8014608 <HAL_GetUIDw2>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <ESP_GetUID+0x28>)
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	200005b4 	.word	0x200005b4

08004e3c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <ESP_Init+0x20>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <ESP_Init+0x24>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004e50:	f7ff ffde 	bl	8004e10 <ESP_GetUID>
//  beurs = checkEEprom();
}
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200004a4 	.word	0x200004a4
 8004e60:	20000030 	.word	0x20000030

08004e64 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e64:	b5b0      	push	{r4, r5, r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	000a      	movs	r2, r1
 8004e6e:	1cbb      	adds	r3, r7, #2
 8004e70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e72:	4b11      	ldr	r3, [pc, #68]	@ (8004eb8 <ESP_Send+0x54>)
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	250f      	movs	r5, #15
 8004e78:	197c      	adds	r4, r7, r5
 8004e7a:	1cbb      	adds	r3, r7, #2
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0019      	movs	r1, r3
 8004e82:	f018 f9b7 	bl	801d1f4 <HAL_UART_Transmit_DMA>
 8004e86:	0003      	movs	r3, r0
 8004e88:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e8a:	197b      	adds	r3, r7, r5
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <ESP_Send+0x58>)
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <ESP_Send+0x5c>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f00e fe17 	bl	8013acc <CreateLine>
    return false;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e006      	b.n	8004eb0 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <ESP_Send+0x60>)
 8004ea6:	0011      	movs	r1, r2
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f020 ff29 	bl	8025d00 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b004      	add	sp, #16
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb8:	200004a4 	.word	0x200004a4
 8004ebc:	0802a558 	.word	0x0802a558
 8004ec0:	0802a530 	.word	0x0802a530
 8004ec4:	0802a578 	.word	0x0802a578

08004ec8 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	000a      	movs	r2, r1
 8004ed2:	1cbb      	adds	r3, r7, #2
 8004ed4:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8005048 <ESP_Receive+0x180>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004edc:	260f      	movs	r6, #15
 8004ede:	19bb      	adds	r3, r7, r6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004ee4:	4b59      	ldr	r3, [pc, #356]	@ (800504c <ESP_Receive+0x184>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	250d      	movs	r5, #13
 8004eea:	197c      	adds	r4, r7, r5
 8004eec:	1cbb      	adds	r3, r7, #2
 8004eee:	881a      	ldrh	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	f018 fa0e 	bl	801d314 <HAL_UART_Receive_DMA>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004efc:	002c      	movs	r4, r5
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d100      	bne.n	8004f08 <ESP_Receive+0x40>
 8004f06:	e09a      	b.n	800503e <ESP_Receive+0x176>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f08:	4b50      	ldr	r3, [pc, #320]	@ (800504c <ESP_Receive+0x184>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2284      	movs	r2, #132	@ 0x84
 8004f0e:	589b      	ldr	r3, [r3, r2]
 8004f10:	4a4f      	ldr	r2, [pc, #316]	@ (8005050 <ESP_Receive+0x188>)
 8004f12:	4950      	ldr	r1, [pc, #320]	@ (8005054 <ESP_Receive+0x18c>)
 8004f14:	2001      	movs	r0, #1
 8004f16:	f00e fdd9 	bl	8013acc <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4013      	ands	r3, r2
 8004f22:	d008      	beq.n	8004f36 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004f24:	4a4c      	ldr	r2, [pc, #304]	@ (8005058 <ESP_Receive+0x190>)
 8004f26:	4b4b      	ldr	r3, [pc, #300]	@ (8005054 <ESP_Receive+0x18c>)
 8004f28:	0019      	movs	r1, r3
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f00e fdce 	bl	8013acc <CreateLine>
      reset = true;
 8004f30:	19bb      	adds	r3, r7, r6
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f36:	230d      	movs	r3, #13
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d005      	beq.n	8004f4e <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004f42:	4a46      	ldr	r2, [pc, #280]	@ (800505c <ESP_Receive+0x194>)
 8004f44:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <ESP_Receive+0x18c>)
 8004f46:	0019      	movs	r1, r3
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f00e fdbf 	bl	8013acc <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004f4e:	230d      	movs	r3, #13
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2204      	movs	r2, #4
 8004f56:	4013      	ands	r3, r2
 8004f58:	d005      	beq.n	8004f66 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004f5a:	4a41      	ldr	r2, [pc, #260]	@ (8005060 <ESP_Receive+0x198>)
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005054 <ESP_Receive+0x18c>)
 8004f5e:	0019      	movs	r1, r3
 8004f60:	2001      	movs	r0, #1
 8004f62:	f00e fdb3 	bl	8013acc <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004f66:	230d      	movs	r3, #13
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d005      	beq.n	8004f7e <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004f72:	4a3c      	ldr	r2, [pc, #240]	@ (8005064 <ESP_Receive+0x19c>)
 8004f74:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <ESP_Receive+0x18c>)
 8004f76:	0019      	movs	r1, r3
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f00e fda7 	bl	8013acc <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004f7e:	230d      	movs	r3, #13
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2210      	movs	r2, #16
 8004f86:	4013      	ands	r3, r2
 8004f88:	d005      	beq.n	8004f96 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004f8a:	4a37      	ldr	r2, [pc, #220]	@ (8005068 <ESP_Receive+0x1a0>)
 8004f8c:	4b31      	ldr	r3, [pc, #196]	@ (8005054 <ESP_Receive+0x18c>)
 8004f8e:	0019      	movs	r1, r3
 8004f90:	2001      	movs	r0, #1
 8004f92:	f00e fd9b 	bl	8013acc <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004f96:	230d      	movs	r3, #13
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d005      	beq.n	8004fae <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004fa2:	4a32      	ldr	r2, [pc, #200]	@ (800506c <ESP_Receive+0x1a4>)
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <ESP_Receive+0x18c>)
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f00e fd8f 	bl	8013acc <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004fae:	230d      	movs	r3, #13
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d005      	beq.n	8004fc6 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004fba:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <ESP_Receive+0x1a8>)
 8004fbc:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <ESP_Receive+0x18c>)
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	f00e fd83 	bl	8013acc <CreateLine>
    }
#endif
    if (reset) {
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d031      	beq.n	8005034 <ESP_Receive+0x16c>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	@ (8005074 <ESP_Receive+0x1ac>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f010 fd49 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f00f fabf 	bl	8014560 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fe2:	2380      	movs	r3, #128	@ 0x80
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	4824      	ldr	r0, [pc, #144]	@ (8005078 <ESP_Receive+0x1b0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	0019      	movs	r1, r3
 8004fec:	f010 fd3f 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8004ff0:	200a      	movs	r0, #10
 8004ff2:	f00f fab5 	bl	8014560 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8005074 <ESP_Receive+0x1ac>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f010 fd36 	bl	8015a6e <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 8005002:	230e      	movs	r3, #14
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e00c      	b.n	8005026 <ESP_Receive+0x15e>
        SetAllREDLED();
 800500c:	f00d fbd8 	bl	80127c0 <SetAllREDLED>
        HAL_Delay(1000);
 8005010:	23fa      	movs	r3, #250	@ 0xfa
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	0018      	movs	r0, r3
 8005016:	f00f faa3 	bl	8014560 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 800501a:	210e      	movs	r1, #14
 800501c:	187b      	adds	r3, r7, r1
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	187b      	adds	r3, r7, r1
 8005022:	3201      	adds	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	230e      	movs	r3, #14
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b09      	cmp	r3, #9
 800502e:	d9ed      	bls.n	800500c <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 8005030:	f00f ff55 	bl	8014ede <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <ESP_Receive+0x180>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
    return false;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <ESP_Receive+0x178>
  }
  return true;
 800503e:	2301      	movs	r3, #1
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b005      	add	sp, #20
 8005046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005048:	200004a8 	.word	0x200004a8
 800504c:	200004a4 	.word	0x200004a4
 8005050:	0802a588 	.word	0x0802a588
 8005054:	0802a530 	.word	0x0802a530
 8005058:	0802a5b8 	.word	0x0802a5b8
 800505c:	0802a5dc 	.word	0x0802a5dc
 8005060:	0802a600 	.word	0x0802a600
 8005064:	0802a624 	.word	0x0802a624
 8005068:	0802a648 	.word	0x0802a648
 800506c:	0802a674 	.word	0x0802a674
 8005070:	0802a6a4 	.word	0x0802a6a4
 8005074:	50001c00 	.word	0x50001c00
 8005078:	50000800 	.word	0x50000800

0800507c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005084:	4b39      	ldr	r3, [pc, #228]	@ (800516c <HAL_UART_ErrorCallback+0xf0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d16b      	bne.n	8005166 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2284      	movs	r2, #132	@ 0x84
 8005092:	589b      	ldr	r3, [r3, r2]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d065      	beq.n	8005164 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2284      	movs	r2, #132	@ 0x84
 800509c:	589b      	ldr	r3, [r3, r2]
 800509e:	4a34      	ldr	r2, [pc, #208]	@ (8005170 <HAL_UART_ErrorCallback+0xf4>)
 80050a0:	4934      	ldr	r1, [pc, #208]	@ (8005174 <HAL_UART_ErrorCallback+0xf8>)
 80050a2:	2003      	movs	r0, #3
 80050a4:	f00e fd12 	bl	8013acc <CreateLine>
    switch (huart->ErrorCode) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2284      	movs	r2, #132	@ 0x84
 80050ac:	589b      	ldr	r3, [r3, r2]
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d851      	bhi.n	8005156 <HAL_UART_ErrorCallback+0xda>
 80050b2:	009a      	lsls	r2, r3, #2
 80050b4:	4b30      	ldr	r3, [pc, #192]	@ (8005178 <HAL_UART_ErrorCallback+0xfc>)
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 80050bc:	4a2f      	ldr	r2, [pc, #188]	@ (800517c <HAL_UART_ErrorCallback+0x100>)
 80050be:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 80050c0:	0019      	movs	r1, r3
 80050c2:	2001      	movs	r0, #1
 80050c4:	f00e fd02 	bl	8013acc <CreateLine>
        break;
 80050c8:	e04d      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 80050ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005184 <HAL_UART_ErrorCallback+0x108>)
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 80050ce:	0019      	movs	r1, r3
 80050d0:	2001      	movs	r0, #1
 80050d2:	f00e fcfb 	bl	8013acc <CreateLine>
        break;
 80050d6:	e046      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 80050d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005188 <HAL_UART_ErrorCallback+0x10c>)
 80050da:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 80050dc:	0019      	movs	r1, r3
 80050de:	2001      	movs	r0, #1
 80050e0:	f00e fcf4 	bl	8013acc <CreateLine>
        break;
 80050e4:	e03f      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 80050e6:	4a29      	ldr	r2, [pc, #164]	@ (800518c <HAL_UART_ErrorCallback+0x110>)
 80050e8:	4b25      	ldr	r3, [pc, #148]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 80050ea:	0019      	movs	r1, r3
 80050ec:	2001      	movs	r0, #1
 80050ee:	f00e fced 	bl	8013acc <CreateLine>
        break;
 80050f2:	e038      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 80050f4:	4a26      	ldr	r2, [pc, #152]	@ (8005190 <HAL_UART_ErrorCallback+0x114>)
 80050f6:	4b22      	ldr	r3, [pc, #136]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 80050f8:	0019      	movs	r1, r3
 80050fa:	2001      	movs	r0, #1
 80050fc:	f00e fce6 	bl	8013acc <CreateLine>
        break;
 8005100:	e031      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8005102:	4a24      	ldr	r2, [pc, #144]	@ (8005194 <HAL_UART_ErrorCallback+0x118>)
 8005104:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 8005106:	0019      	movs	r1, r3
 8005108:	2001      	movs	r0, #1
 800510a:	f00e fcdf 	bl	8013acc <CreateLine>
        break;
 800510e:	e02a      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8005110:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <HAL_UART_ErrorCallback+0x11c>)
 8005112:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 8005114:	0019      	movs	r1, r3
 8005116:	2001      	movs	r0, #1
 8005118:	f00e fcd8 	bl	8013acc <CreateLine>
        break;
 800511c:	e023      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_UART_ErrorCallback+0x120>)
 8005120:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 8005122:	0019      	movs	r1, r3
 8005124:	2001      	movs	r0, #1
 8005126:	f00e fcd1 	bl	8013acc <CreateLine>
        break;
 800512a:	e01c      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 800512c:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <HAL_UART_ErrorCallback+0x124>)
 800512e:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 8005130:	0019      	movs	r1, r3
 8005132:	2001      	movs	r0, #1
 8005134:	f00e fcca 	bl	8013acc <CreateLine>
        break;
 8005138:	e015      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 800513a:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <HAL_UART_ErrorCallback+0x128>)
 800513c:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 800513e:	0019      	movs	r1, r3
 8005140:	2001      	movs	r0, #1
 8005142:	f00e fcc3 	bl	8013acc <CreateLine>
        break;
 8005146:	e00e      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8005148:	4a17      	ldr	r2, [pc, #92]	@ (80051a8 <HAL_UART_ErrorCallback+0x12c>)
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 800514c:	0019      	movs	r1, r3
 800514e:	2001      	movs	r0, #1
 8005150:	f00e fcbc 	bl	8013acc <CreateLine>
        break;
 8005154:	e007      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <HAL_UART_ErrorCallback+0x130>)
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_UART_ErrorCallback+0x104>)
 800515a:	0019      	movs	r1, r3
 800515c:	2001      	movs	r0, #1
 800515e:	f00e fcb5 	bl	8013acc <CreateLine>
 8005162:	e000      	b.n	8005166 <HAL_UART_ErrorCallback+0xea>
      return;
 8005164:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200004a4 	.word	0x200004a4
 8005170:	0802a6d4 	.word	0x0802a6d4
 8005174:	0802a554 	.word	0x0802a554
 8005178:	0802de04 	.word	0x0802de04
 800517c:	0802a704 	.word	0x0802a704
 8005180:	0802a530 	.word	0x0802a530
 8005184:	0802a738 	.word	0x0802a738
 8005188:	0802a764 	.word	0x0802a764
 800518c:	0802a798 	.word	0x0802a798
 8005190:	0802a7c4 	.word	0x0802a7c4
 8005194:	0802a7ec 	.word	0x0802a7ec
 8005198:	0802a81c 	.word	0x0802a81c
 800519c:	0802a854 	.word	0x0802a854
 80051a0:	0802a88c 	.word	0x0802a88c
 80051a4:	0802a8b4 	.word	0x0802a8b4
 80051a8:	0802a8dc 	.word	0x0802a8dc
 80051ac:	0802a908 	.word	0x0802a908

080051b0 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b42      	cmp	r3, #66	@ 0x42
 80051c2:	d905      	bls.n	80051d0 <isKeyValid+0x20>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2bff      	cmp	r3, #255	@ 0xff
 80051ca:	d001      	beq.n	80051d0 <isKeyValid+0x20>
    return true;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e01d      	b.n	800520c <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <isKeyValid+0x64>)
 80051d6:	0018      	movs	r0, r3
 80051d8:	f020 fd92 	bl	8025d00 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e00c      	b.n	80051fc <isKeyValid+0x4c>
      printf("%02x", data[i]);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	18d3      	adds	r3, r2, r3
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	001a      	movs	r2, r3
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <isKeyValid+0x68>)
 80051ee:	0011      	movs	r1, r2
 80051f0:	0018      	movs	r0, r3
 80051f2:	f020 fd85 	bl	8025d00 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b0b      	cmp	r3, #11
 8005200:	ddef      	ble.n	80051e2 <isKeyValid+0x32>
    }
    printf("\r\n");
 8005202:	4b06      	ldr	r3, [pc, #24]	@ (800521c <isKeyValid+0x6c>)
 8005204:	0018      	movs	r0, r3
 8005206:	f020 fde1 	bl	8025dcc <puts>
    return false;
 800520a:	2300      	movs	r3, #0
  }
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	b006      	add	sp, #24
 8005212:	bd80      	pop	{r7, pc}
 8005214:	0802a92c 	.word	0x0802a92c
 8005218:	0802a964 	.word	0x0802a964
 800521c:	0802a96c 	.word	0x0802a96c

08005220 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e010      	b.n	8005252 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	001a      	movs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	1898      	adds	r0, r3, r2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	001a      	movs	r2, r3
 8005244:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <uint8ArrayToString+0x44>)
 8005246:	0019      	movs	r1, r3
 8005248:	f020 fdca 	bl	8025de0 <siprintf>
  for (int i = 0; i < 12; i++) {
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b0b      	cmp	r3, #11
 8005256:	ddeb      	ble.n	8005230 <uint8ArrayToString+0x10>
  }
}
 8005258:	46c0      	nop			@ (mov r8, r8)
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	0802a964 	.word	0x0802a964

08005268 <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b087      	sub	sp, #28
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	000a      	movs	r2, r1
 8005272:	1cfb      	adds	r3, r7, #3
 8005274:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 8005276:	240e      	movs	r4, #14
 8005278:	193b      	adds	r3, r7, r4
 800527a:	2200      	movs	r2, #0
 800527c:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800527e:	4b41      	ldr	r3, [pc, #260]	@ (8005384 <CreateMailMessage+0x11c>)
 8005280:	4841      	ldr	r0, [pc, #260]	@ (8005388 <CreateMailMessage+0x120>)
 8005282:	2220      	movs	r2, #32
 8005284:	0019      	movs	r1, r3
 8005286:	f006 fe19 	bl	800bebc <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800528a:	4b40      	ldr	r3, [pc, #256]	@ (800538c <CreateMailMessage+0x124>)
 800528c:	4840      	ldr	r0, [pc, #256]	@ (8005390 <CreateMailMessage+0x128>)
 800528e:	2230      	movs	r2, #48	@ 0x30
 8005290:	0019      	movs	r1, r3
 8005292:	f006 fe13 	bl	800bebc <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8005296:	4b3f      	ldr	r3, [pc, #252]	@ (8005394 <CreateMailMessage+0x12c>)
 8005298:	483f      	ldr	r0, [pc, #252]	@ (8005398 <CreateMailMessage+0x130>)
 800529a:	2230      	movs	r2, #48	@ 0x30
 800529c:	0019      	movs	r1, r3
 800529e:	f006 fe0d 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(message, "{\"sender\": \"%s\",\"to\": [\"%s\"],\"subject\": \"Battery status\",", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 80052a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005394 <CreateMailMessage+0x12c>)
 80052a4:	4a39      	ldr	r2, [pc, #228]	@ (800538c <CreateMailMessage+0x124>)
 80052a6:	493d      	ldr	r1, [pc, #244]	@ (800539c <CreateMailMessage+0x134>)
 80052a8:	483d      	ldr	r0, [pc, #244]	@ (80053a0 <CreateMailMessage+0x138>)
 80052aa:	f020 fd99 	bl	8025de0 <siprintf>
  lngth = strlen(message);
 80052ae:	4b3c      	ldr	r3, [pc, #240]	@ (80053a0 <CreateMailMessage+0x138>)
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7fa ff5b 	bl	800016c <strlen>
 80052b6:	0002      	movs	r2, r0
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	801a      	strh	r2, [r3, #0]
  if (send) {
 80052bc:	1cfb      	adds	r3, r7, #3
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d019      	beq.n	80052f8 <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80052c4:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <CreateMailMessage+0x138>)
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7fa ff50 	bl	800016c <strlen>
 80052cc:	0003      	movs	r3, r0
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	4b33      	ldr	r3, [pc, #204]	@ (80053a0 <CreateMailMessage+0x138>)
 80052d2:	0011      	movs	r1, r2
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7ff fdc5 	bl	8004e64 <ESP_Send>
 80052da:	0003      	movs	r3, r0
 80052dc:	001a      	movs	r2, r3
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <CreateMailMessage+0x13c>)
 80052e0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80052e2:	4b31      	ldr	r3, [pc, #196]	@ (80053a8 <CreateMailMessage+0x140>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	001a      	movs	r2, r3
 80052e8:	4b2e      	ldr	r3, [pc, #184]	@ (80053a4 <CreateMailMessage+0x13c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	4013      	ands	r3, r2
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	4193      	sbcs	r3, r2
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	4b2c      	ldr	r3, [pc, #176]	@ (80053a8 <CreateMailMessage+0x140>)
 80052f6:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV, about 20%%\"}", (char*)nameConfig, ReadBatteryVoltage());
 80052f8:	f004 f95c 	bl	80095b4 <ReadBatteryVoltage>
 80052fc:	1c03      	adds	r3, r0, #0
 80052fe:	1c18      	adds	r0, r3, #0
 8005300:	f7fe fac8 	bl	8003894 <__aeabi_f2d>
 8005304:	0002      	movs	r2, r0
 8005306:	000b      	movs	r3, r1
 8005308:	4c1e      	ldr	r4, [pc, #120]	@ (8005384 <CreateMailMessage+0x11c>)
 800530a:	4928      	ldr	r1, [pc, #160]	@ (80053ac <CreateMailMessage+0x144>)
 800530c:	4824      	ldr	r0, [pc, #144]	@ (80053a0 <CreateMailMessage+0x138>)
 800530e:	9200      	str	r2, [sp, #0]
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	0022      	movs	r2, r4
 8005314:	f020 fd64 	bl	8025de0 <siprintf>
  lngth += strlen(message);
 8005318:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <CreateMailMessage+0x138>)
 800531a:	0018      	movs	r0, r3
 800531c:	f7fa ff26 	bl	800016c <strlen>
 8005320:	0003      	movs	r3, r0
 8005322:	b299      	uxth	r1, r3
 8005324:	220e      	movs	r2, #14
 8005326:	18bb      	adds	r3, r7, r2
 8005328:	18ba      	adds	r2, r7, r2
 800532a:	8812      	ldrh	r2, [r2, #0]
 800532c:	188a      	adds	r2, r1, r2
 800532e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005330:	1cfb      	adds	r3, r7, #3
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <CreateMailMessage+0x138>)
 800533a:	0018      	movs	r0, r3
 800533c:	f7fa ff16 	bl	800016c <strlen>
 8005340:	0003      	movs	r3, r0
 8005342:	b29a      	uxth	r2, r3
 8005344:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <CreateMailMessage+0x138>)
 8005346:	0011      	movs	r1, r2
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff fd8b 	bl	8004e64 <ESP_Send>
 800534e:	0003      	movs	r3, r0
 8005350:	001a      	movs	r2, r3
 8005352:	4b14      	ldr	r3, [pc, #80]	@ (80053a4 <CreateMailMessage+0x13c>)
 8005354:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005356:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <CreateMailMessage+0x140>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	001a      	movs	r2, r3
 800535c:	4b11      	ldr	r3, [pc, #68]	@ (80053a4 <CreateMailMessage+0x13c>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	4013      	ands	r3, r2
 8005362:	1e5a      	subs	r2, r3, #1
 8005364:	4193      	sbcs	r3, r2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <CreateMailMessage+0x140>)
 800536a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800536c:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <CreateMailMessage+0x140>)
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005374:	230e      	movs	r3, #14
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	881b      	ldrh	r3, [r3, #0]
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b005      	add	sp, #20
 8005380:	bd90      	pop	{r4, r7, pc}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	20000740 	.word	0x20000740
 8005388:	08080090 	.word	0x08080090
 800538c:	20000760 	.word	0x20000760
 8005390:	08080188 	.word	0x08080188
 8005394:	20000790 	.word	0x20000790
 8005398:	080801b8 	.word	0x080801b8
 800539c:	0802a970 	.word	0x0802a970
 80053a0:	200005d4 	.word	0x200005d4
 80053a4:	200007c0 	.word	0x200007c0
 80053a8:	20000031 	.word	0x20000031
 80053ac:	0802a9ac 	.word	0x0802a9ac

080053b0 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	000a      	movs	r2, r1
 80053ba:	1cfb      	adds	r3, r7, #3
 80053bc:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 80053be:	f7ff fae3 	bl	8004988 <checkName>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d00a      	beq.n	80053dc <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80053c6:	4b03      	ldr	r3, [pc, #12]	@ (80053d4 <CreateMessage+0x24>)
 80053c8:	4803      	ldr	r0, [pc, #12]	@ (80053d8 <CreateMessage+0x28>)
 80053ca:	2220      	movs	r2, #32
 80053cc:	0019      	movs	r1, r3
 80053ce:	f006 fd75 	bl	800bebc <ReadUint8ArrayEEprom>
 80053d2:	e009      	b.n	80053e8 <CreateMessage+0x38>
 80053d4:	200007c4 	.word	0x200007c4
 80053d8:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80053dc:	4bee      	ldr	r3, [pc, #952]	@ (8005798 <CreateMessage+0x3e8>)
 80053de:	4aef      	ldr	r2, [pc, #956]	@ (800579c <CreateMessage+0x3ec>)
 80053e0:	6811      	ldr	r1, [r2, #0]
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	7912      	ldrb	r2, [r2, #4]
 80053e6:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80053e8:	f7ff faaa 	bl	8004940 <setCharges>
  uint16_t index = 0;
 80053ec:	250e      	movs	r5, #14
 80053ee:	197b      	adds	r3, r7, r5
 80053f0:	2200      	movs	r2, #0
 80053f2:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80053f4:	197b      	adds	r3, r7, r5
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	4be9      	ldr	r3, [pc, #932]	@ (80057a0 <CreateMessage+0x3f0>)
 80053fa:	18d3      	adds	r3, r2, r3
 80053fc:	4ae9      	ldr	r2, [pc, #932]	@ (80057a4 <CreateMessage+0x3f4>)
 80053fe:	0011      	movs	r1, r2
 8005400:	0018      	movs	r0, r3
 8005402:	f020 fced 	bl	8025de0 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 8005406:	4be8      	ldr	r3, [pc, #928]	@ (80057a8 <CreateMessage+0x3f8>)
 8005408:	48e8      	ldr	r0, [pc, #928]	@ (80057ac <CreateMessage+0x3fc>)
 800540a:	220c      	movs	r2, #12
 800540c:	0019      	movs	r1, r3
 800540e:	f006 fd55 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005412:	4ae5      	ldr	r2, [pc, #916]	@ (80057a8 <CreateMessage+0x3f8>)
 8005414:	4be6      	ldr	r3, [pc, #920]	@ (80057b0 <CreateMessage+0x400>)
 8005416:	0011      	movs	r1, r2
 8005418:	0018      	movs	r0, r3
 800541a:	f7ff ff01 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 800541e:	4be5      	ldr	r3, [pc, #916]	@ (80057b4 <CreateMessage+0x404>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1c18      	adds	r0, r3, #0
 8005424:	f7fe fa36 	bl	8003894 <__aeabi_f2d>
 8005428:	0002      	movs	r2, r0
 800542a:	000b      	movs	r3, r1
 800542c:	4ce0      	ldr	r4, [pc, #896]	@ (80057b0 <CreateMessage+0x400>)
 800542e:	49e2      	ldr	r1, [pc, #904]	@ (80057b8 <CreateMessage+0x408>)
 8005430:	48e2      	ldr	r0, [pc, #904]	@ (80057bc <CreateMessage+0x40c>)
 8005432:	9200      	str	r2, [sp, #0]
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	0022      	movs	r2, r4
 8005438:	f020 fcd2 	bl	8025de0 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 800543c:	4bd8      	ldr	r3, [pc, #864]	@ (80057a0 <CreateMessage+0x3f0>)
 800543e:	0018      	movs	r0, r3
 8005440:	f7fa fe94 	bl	800016c <strlen>
 8005444:	0002      	movs	r2, r0
 8005446:	197b      	adds	r3, r7, r5
 8005448:	801a      	strh	r2, [r3, #0]
  if (send) {
 800544a:	1cfb      	adds	r3, r7, #3
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d019      	beq.n	8005486 <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005452:	4bd3      	ldr	r3, [pc, #844]	@ (80057a0 <CreateMessage+0x3f0>)
 8005454:	0018      	movs	r0, r3
 8005456:	f7fa fe89 	bl	800016c <strlen>
 800545a:	0003      	movs	r3, r0
 800545c:	b29a      	uxth	r2, r3
 800545e:	4bd0      	ldr	r3, [pc, #832]	@ (80057a0 <CreateMessage+0x3f0>)
 8005460:	0011      	movs	r1, r2
 8005462:	0018      	movs	r0, r3
 8005464:	f7ff fcfe 	bl	8004e64 <ESP_Send>
 8005468:	0003      	movs	r3, r0
 800546a:	001a      	movs	r2, r3
 800546c:	4bd4      	ldr	r3, [pc, #848]	@ (80057c0 <CreateMessage+0x410>)
 800546e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005470:	4bd4      	ldr	r3, [pc, #848]	@ (80057c4 <CreateMessage+0x414>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	001a      	movs	r2, r3
 8005476:	4bd2      	ldr	r3, [pc, #840]	@ (80057c0 <CreateMessage+0x410>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	4193      	sbcs	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4bd0      	ldr	r3, [pc, #832]	@ (80057c4 <CreateMessage+0x414>)
 8005484:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8005486:	4bc8      	ldr	r3, [pc, #800]	@ (80057a8 <CreateMessage+0x3f8>)
 8005488:	48cf      	ldr	r0, [pc, #828]	@ (80057c8 <CreateMessage+0x418>)
 800548a:	220c      	movs	r2, #12
 800548c:	0019      	movs	r1, r3
 800548e:	f006 fd15 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005492:	4ac5      	ldr	r2, [pc, #788]	@ (80057a8 <CreateMessage+0x3f8>)
 8005494:	4bc6      	ldr	r3, [pc, #792]	@ (80057b0 <CreateMessage+0x400>)
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff fec1 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 800549e:	4bc5      	ldr	r3, [pc, #788]	@ (80057b4 <CreateMessage+0x404>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	1c18      	adds	r0, r3, #0
 80054a4:	f7fe f9f6 	bl	8003894 <__aeabi_f2d>
 80054a8:	0002      	movs	r2, r0
 80054aa:	000b      	movs	r3, r1
 80054ac:	4cc0      	ldr	r4, [pc, #768]	@ (80057b0 <CreateMessage+0x400>)
 80054ae:	49c7      	ldr	r1, [pc, #796]	@ (80057cc <CreateMessage+0x41c>)
 80054b0:	48bb      	ldr	r0, [pc, #748]	@ (80057a0 <CreateMessage+0x3f0>)
 80054b2:	9200      	str	r2, [sp, #0]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	0022      	movs	r2, r4
 80054b8:	f020 fc92 	bl	8025de0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 80054bc:	4bb8      	ldr	r3, [pc, #736]	@ (80057a0 <CreateMessage+0x3f0>)
 80054be:	0018      	movs	r0, r3
 80054c0:	f7fa fe54 	bl	800016c <strlen>
 80054c4:	0003      	movs	r3, r0
 80054c6:	b299      	uxth	r1, r3
 80054c8:	220e      	movs	r2, #14
 80054ca:	18bb      	adds	r3, r7, r2
 80054cc:	18ba      	adds	r2, r7, r2
 80054ce:	8812      	ldrh	r2, [r2, #0]
 80054d0:	188a      	adds	r2, r1, r2
 80054d2:	801a      	strh	r2, [r3, #0]
  if (send) {
 80054d4:	1cfb      	adds	r3, r7, #3
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d019      	beq.n	8005510 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80054dc:	4bb0      	ldr	r3, [pc, #704]	@ (80057a0 <CreateMessage+0x3f0>)
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fa fe44 	bl	800016c <strlen>
 80054e4:	0003      	movs	r3, r0
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	4bad      	ldr	r3, [pc, #692]	@ (80057a0 <CreateMessage+0x3f0>)
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff fcb9 	bl	8004e64 <ESP_Send>
 80054f2:	0003      	movs	r3, r0
 80054f4:	001a      	movs	r2, r3
 80054f6:	4bb2      	ldr	r3, [pc, #712]	@ (80057c0 <CreateMessage+0x410>)
 80054f8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054fa:	4bb2      	ldr	r3, [pc, #712]	@ (80057c4 <CreateMessage+0x414>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	001a      	movs	r2, r3
 8005500:	4baf      	ldr	r3, [pc, #700]	@ (80057c0 <CreateMessage+0x410>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	4013      	ands	r3, r2
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	4193      	sbcs	r3, r2
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4bad      	ldr	r3, [pc, #692]	@ (80057c4 <CreateMessage+0x414>)
 800550e:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005510:	4ba5      	ldr	r3, [pc, #660]	@ (80057a8 <CreateMessage+0x3f8>)
 8005512:	48af      	ldr	r0, [pc, #700]	@ (80057d0 <CreateMessage+0x420>)
 8005514:	220c      	movs	r2, #12
 8005516:	0019      	movs	r1, r3
 8005518:	f006 fcd0 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800551c:	4aa2      	ldr	r2, [pc, #648]	@ (80057a8 <CreateMessage+0x3f8>)
 800551e:	4ba4      	ldr	r3, [pc, #656]	@ (80057b0 <CreateMessage+0x400>)
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fe7c 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 8005528:	4ba2      	ldr	r3, [pc, #648]	@ (80057b4 <CreateMessage+0x404>)
 800552a:	2248      	movs	r2, #72	@ 0x48
 800552c:	5a9b      	ldrh	r3, [r3, r2]
 800552e:	4aa0      	ldr	r2, [pc, #640]	@ (80057b0 <CreateMessage+0x400>)
 8005530:	49a8      	ldr	r1, [pc, #672]	@ (80057d4 <CreateMessage+0x424>)
 8005532:	489b      	ldr	r0, [pc, #620]	@ (80057a0 <CreateMessage+0x3f0>)
 8005534:	f020 fc54 	bl	8025de0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 8005538:	4b99      	ldr	r3, [pc, #612]	@ (80057a0 <CreateMessage+0x3f0>)
 800553a:	0018      	movs	r0, r3
 800553c:	f7fa fe16 	bl	800016c <strlen>
 8005540:	0003      	movs	r3, r0
 8005542:	b299      	uxth	r1, r3
 8005544:	220e      	movs	r2, #14
 8005546:	18bb      	adds	r3, r7, r2
 8005548:	18ba      	adds	r2, r7, r2
 800554a:	8812      	ldrh	r2, [r2, #0]
 800554c:	188a      	adds	r2, r1, r2
 800554e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005550:	1cfb      	adds	r3, r7, #3
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d019      	beq.n	800558c <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005558:	4b91      	ldr	r3, [pc, #580]	@ (80057a0 <CreateMessage+0x3f0>)
 800555a:	0018      	movs	r0, r3
 800555c:	f7fa fe06 	bl	800016c <strlen>
 8005560:	0003      	movs	r3, r0
 8005562:	b29a      	uxth	r2, r3
 8005564:	4b8e      	ldr	r3, [pc, #568]	@ (80057a0 <CreateMessage+0x3f0>)
 8005566:	0011      	movs	r1, r2
 8005568:	0018      	movs	r0, r3
 800556a:	f7ff fc7b 	bl	8004e64 <ESP_Send>
 800556e:	0003      	movs	r3, r0
 8005570:	001a      	movs	r2, r3
 8005572:	4b93      	ldr	r3, [pc, #588]	@ (80057c0 <CreateMessage+0x410>)
 8005574:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005576:	4b93      	ldr	r3, [pc, #588]	@ (80057c4 <CreateMessage+0x414>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	001a      	movs	r2, r3
 800557c:	4b90      	ldr	r3, [pc, #576]	@ (80057c0 <CreateMessage+0x410>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4013      	ands	r3, r2
 8005582:	1e5a      	subs	r2, r3, #1
 8005584:	4193      	sbcs	r3, r2
 8005586:	b2da      	uxtb	r2, r3
 8005588:	4b8e      	ldr	r3, [pc, #568]	@ (80057c4 <CreateMessage+0x414>)
 800558a:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 800558c:	f007 fde8 	bl	800d160 <IsBMP280SensorPresent>
 8005590:	1e03      	subs	r3, r0, #0
 8005592:	d100      	bne.n	8005596 <CreateMessage+0x1e6>
 8005594:	e0a1      	b.n	80056da <CreateMessage+0x32a>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005596:	4b84      	ldr	r3, [pc, #528]	@ (80057a8 <CreateMessage+0x3f8>)
 8005598:	488f      	ldr	r0, [pc, #572]	@ (80057d8 <CreateMessage+0x428>)
 800559a:	220c      	movs	r2, #12
 800559c:	0019      	movs	r1, r3
 800559e:	f006 fc8d 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 80055a2:	4a8e      	ldr	r2, [pc, #568]	@ (80057dc <CreateMessage+0x42c>)
 80055a4:	498e      	ldr	r1, [pc, #568]	@ (80057e0 <CreateMessage+0x430>)
 80055a6:	4b80      	ldr	r3, [pc, #512]	@ (80057a8 <CreateMessage+0x3f8>)
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff fe01 	bl	80051b0 <isKeyValid>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d046      	beq.n	8005640 <CreateMessage+0x290>
 80055b2:	4b80      	ldr	r3, [pc, #512]	@ (80057b4 <CreateMessage+0x404>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	2100      	movs	r1, #0
 80055b8:	1c18      	adds	r0, r3, #0
 80055ba:	f7fa ffb3 	bl	8000524 <__aeabi_fcmpeq>
 80055be:	1e03      	subs	r3, r0, #0
 80055c0:	d13e      	bne.n	8005640 <CreateMessage+0x290>
      uint8ArrayToString(Buffer, keybuffer);
 80055c2:	4a79      	ldr	r2, [pc, #484]	@ (80057a8 <CreateMessage+0x3f8>)
 80055c4:	4b7a      	ldr	r3, [pc, #488]	@ (80057b0 <CreateMessage+0x400>)
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7ff fe29 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 80055ce:	4b79      	ldr	r3, [pc, #484]	@ (80057b4 <CreateMessage+0x404>)
 80055d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d2:	1c18      	adds	r0, r3, #0
 80055d4:	f7fe f95e 	bl	8003894 <__aeabi_f2d>
 80055d8:	0002      	movs	r2, r0
 80055da:	000b      	movs	r3, r1
 80055dc:	4c74      	ldr	r4, [pc, #464]	@ (80057b0 <CreateMessage+0x400>)
 80055de:	497b      	ldr	r1, [pc, #492]	@ (80057cc <CreateMessage+0x41c>)
 80055e0:	486f      	ldr	r0, [pc, #444]	@ (80057a0 <CreateMessage+0x3f0>)
 80055e2:	9200      	str	r2, [sp, #0]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	0022      	movs	r2, r4
 80055e8:	f020 fbfa 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 80055ec:	4b6c      	ldr	r3, [pc, #432]	@ (80057a0 <CreateMessage+0x3f0>)
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7fa fdbc 	bl	800016c <strlen>
 80055f4:	0003      	movs	r3, r0
 80055f6:	b299      	uxth	r1, r3
 80055f8:	220e      	movs	r2, #14
 80055fa:	18bb      	adds	r3, r7, r2
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	188a      	adds	r2, r1, r2
 8005602:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005604:	1cfb      	adds	r3, r7, #3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d019      	beq.n	8005640 <CreateMessage+0x290>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800560c:	4b64      	ldr	r3, [pc, #400]	@ (80057a0 <CreateMessage+0x3f0>)
 800560e:	0018      	movs	r0, r3
 8005610:	f7fa fdac 	bl	800016c <strlen>
 8005614:	0003      	movs	r3, r0
 8005616:	b29a      	uxth	r2, r3
 8005618:	4b61      	ldr	r3, [pc, #388]	@ (80057a0 <CreateMessage+0x3f0>)
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f7ff fc21 	bl	8004e64 <ESP_Send>
 8005622:	0003      	movs	r3, r0
 8005624:	001a      	movs	r2, r3
 8005626:	4b66      	ldr	r3, [pc, #408]	@ (80057c0 <CreateMessage+0x410>)
 8005628:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800562a:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <CreateMessage+0x414>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	001a      	movs	r2, r3
 8005630:	4b63      	ldr	r3, [pc, #396]	@ (80057c0 <CreateMessage+0x410>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	4013      	ands	r3, r2
 8005636:	1e5a      	subs	r2, r3, #1
 8005638:	4193      	sbcs	r3, r2
 800563a:	b2da      	uxtb	r2, r3
 800563c:	4b61      	ldr	r3, [pc, #388]	@ (80057c4 <CreateMessage+0x414>)
 800563e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005640:	4b59      	ldr	r3, [pc, #356]	@ (80057a8 <CreateMessage+0x3f8>)
 8005642:	4868      	ldr	r0, [pc, #416]	@ (80057e4 <CreateMessage+0x434>)
 8005644:	220c      	movs	r2, #12
 8005646:	0019      	movs	r1, r3
 8005648:	f006 fc38 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 800564c:	4a66      	ldr	r2, [pc, #408]	@ (80057e8 <CreateMessage+0x438>)
 800564e:	4964      	ldr	r1, [pc, #400]	@ (80057e0 <CreateMessage+0x430>)
 8005650:	4b55      	ldr	r3, [pc, #340]	@ (80057a8 <CreateMessage+0x3f8>)
 8005652:	0018      	movs	r0, r3
 8005654:	f7ff fdac 	bl	80051b0 <isKeyValid>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d03e      	beq.n	80056da <CreateMessage+0x32a>
      uint8ArrayToString(Buffer, keybuffer);
 800565c:	4a52      	ldr	r2, [pc, #328]	@ (80057a8 <CreateMessage+0x3f8>)
 800565e:	4b54      	ldr	r3, [pc, #336]	@ (80057b0 <CreateMessage+0x400>)
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff fddc 	bl	8005220 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 8005668:	4b52      	ldr	r3, [pc, #328]	@ (80057b4 <CreateMessage+0x404>)
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	1c18      	adds	r0, r3, #0
 800566e:	f7fe f911 	bl	8003894 <__aeabi_f2d>
 8005672:	0002      	movs	r2, r0
 8005674:	000b      	movs	r3, r1
 8005676:	4c4e      	ldr	r4, [pc, #312]	@ (80057b0 <CreateMessage+0x400>)
 8005678:	4954      	ldr	r1, [pc, #336]	@ (80057cc <CreateMessage+0x41c>)
 800567a:	4849      	ldr	r0, [pc, #292]	@ (80057a0 <CreateMessage+0x3f0>)
 800567c:	9200      	str	r2, [sp, #0]
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	0022      	movs	r2, r4
 8005682:	f020 fbad 	bl	8025de0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 8005686:	4b46      	ldr	r3, [pc, #280]	@ (80057a0 <CreateMessage+0x3f0>)
 8005688:	0018      	movs	r0, r3
 800568a:	f7fa fd6f 	bl	800016c <strlen>
 800568e:	0003      	movs	r3, r0
 8005690:	b299      	uxth	r1, r3
 8005692:	220e      	movs	r2, #14
 8005694:	18bb      	adds	r3, r7, r2
 8005696:	18ba      	adds	r2, r7, r2
 8005698:	8812      	ldrh	r2, [r2, #0]
 800569a:	188a      	adds	r2, r1, r2
 800569c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800569e:	1cfb      	adds	r3, r7, #3
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d019      	beq.n	80056da <CreateMessage+0x32a>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80056a6:	4b3e      	ldr	r3, [pc, #248]	@ (80057a0 <CreateMessage+0x3f0>)
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fa fd5f 	bl	800016c <strlen>
 80056ae:	0003      	movs	r3, r0
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <CreateMessage+0x3f0>)
 80056b4:	0011      	movs	r1, r2
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7ff fbd4 	bl	8004e64 <ESP_Send>
 80056bc:	0003      	movs	r3, r0
 80056be:	001a      	movs	r2, r3
 80056c0:	4b3f      	ldr	r3, [pc, #252]	@ (80057c0 <CreateMessage+0x410>)
 80056c2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80056c4:	4b3f      	ldr	r3, [pc, #252]	@ (80057c4 <CreateMessage+0x414>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	001a      	movs	r2, r3
 80056ca:	4b3d      	ldr	r3, [pc, #244]	@ (80057c0 <CreateMessage+0x410>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	4013      	ands	r3, r2
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	4193      	sbcs	r3, r2
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <CreateMessage+0x414>)
 80056d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80056da:	4b33      	ldr	r3, [pc, #204]	@ (80057a8 <CreateMessage+0x3f8>)
 80056dc:	4843      	ldr	r0, [pc, #268]	@ (80057ec <CreateMessage+0x43c>)
 80056de:	220c      	movs	r2, #12
 80056e0:	0019      	movs	r1, r3
 80056e2:	f006 fbeb 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80056e6:	4a30      	ldr	r2, [pc, #192]	@ (80057a8 <CreateMessage+0x3f8>)
 80056e8:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <CreateMessage+0x400>)
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7ff fd97 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 80056f2:	4b30      	ldr	r3, [pc, #192]	@ (80057b4 <CreateMessage+0x404>)
 80056f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f6:	1c18      	adds	r0, r3, #0
 80056f8:	f7fe f8cc 	bl	8003894 <__aeabi_f2d>
 80056fc:	0002      	movs	r2, r0
 80056fe:	000b      	movs	r3, r1
 8005700:	4c2b      	ldr	r4, [pc, #172]	@ (80057b0 <CreateMessage+0x400>)
 8005702:	4932      	ldr	r1, [pc, #200]	@ (80057cc <CreateMessage+0x41c>)
 8005704:	4826      	ldr	r0, [pc, #152]	@ (80057a0 <CreateMessage+0x3f0>)
 8005706:	9200      	str	r2, [sp, #0]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	0022      	movs	r2, r4
 800570c:	f020 fb68 	bl	8025de0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 8005710:	4b23      	ldr	r3, [pc, #140]	@ (80057a0 <CreateMessage+0x3f0>)
 8005712:	0018      	movs	r0, r3
 8005714:	f7fa fd2a 	bl	800016c <strlen>
 8005718:	0003      	movs	r3, r0
 800571a:	b299      	uxth	r1, r3
 800571c:	220e      	movs	r2, #14
 800571e:	18bb      	adds	r3, r7, r2
 8005720:	18ba      	adds	r2, r7, r2
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	188a      	adds	r2, r1, r2
 8005726:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005728:	1cfb      	adds	r3, r7, #3
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <CreateMessage+0x3b4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005730:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <CreateMessage+0x3f0>)
 8005732:	0018      	movs	r0, r3
 8005734:	f7fa fd1a 	bl	800016c <strlen>
 8005738:	0003      	movs	r3, r0
 800573a:	b29a      	uxth	r2, r3
 800573c:	4b18      	ldr	r3, [pc, #96]	@ (80057a0 <CreateMessage+0x3f0>)
 800573e:	0011      	movs	r1, r2
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fb8f 	bl	8004e64 <ESP_Send>
 8005746:	0003      	movs	r3, r0
 8005748:	001a      	movs	r2, r3
 800574a:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <CreateMessage+0x410>)
 800574c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800574e:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <CreateMessage+0x414>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	001a      	movs	r2, r3
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <CreateMessage+0x410>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	1e5a      	subs	r2, r3, #1
 800575c:	4193      	sbcs	r3, r2
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b18      	ldr	r3, [pc, #96]	@ (80057c4 <CreateMessage+0x414>)
 8005762:	701a      	strb	r2, [r3, #0]
  }

//  if(!onBeurs){
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005764:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <CreateMessage+0x3f8>)
 8005766:	4822      	ldr	r0, [pc, #136]	@ (80057f0 <CreateMessage+0x440>)
 8005768:	220c      	movs	r2, #12
 800576a:	0019      	movs	r1, r3
 800576c:	f006 fba6 	bl	800bebc <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <CreateMessage+0x3f8>)
 8005772:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <CreateMessage+0x400>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff fd52 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 800577c:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <CreateMessage+0x444>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c18      	adds	r0, r3, #0
 8005782:	f7fe f887 	bl	8003894 <__aeabi_f2d>
 8005786:	0002      	movs	r2, r0
 8005788:	000b      	movs	r3, r1
 800578a:	4c09      	ldr	r4, [pc, #36]	@ (80057b0 <CreateMessage+0x400>)
 800578c:	490f      	ldr	r1, [pc, #60]	@ (80057cc <CreateMessage+0x41c>)
 800578e:	4804      	ldr	r0, [pc, #16]	@ (80057a0 <CreateMessage+0x3f0>)
 8005790:	9200      	str	r2, [sp, #0]
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	0022      	movs	r2, r4
 8005796:	e02f      	b.n	80057f8 <CreateMessage+0x448>
 8005798:	200007c4 	.word	0x200007c4
 800579c:	0802dd88 	.word	0x0802dd88
 80057a0:	200005d4 	.word	0x200005d4
 80057a4:	0802aa08 	.word	0x0802aa08
 80057a8:	200007e4 	.word	0x200007e4
 80057ac:	0808000c 	.word	0x0808000c
 80057b0:	200007f0 	.word	0x200007f0
 80057b4:	200006b4 	.word	0x200006b4
 80057b8:	0802aa0c 	.word	0x0802aa0c
 80057bc:	200005d5 	.word	0x200005d5
 80057c0:	20000809 	.word	0x20000809
 80057c4:	20000032 	.word	0x20000032
 80057c8:	08080018 	.word	0x08080018
 80057cc:	0802aa2c 	.word	0x0802aa2c
 80057d0:	08080030 	.word	0x08080030
 80057d4:	0802aa4c 	.word	0x0802aa4c
 80057d8:	0808003c 	.word	0x0808003c
 80057dc:	0802aa6c 	.word	0x0802aa6c
 80057e0:	0802aa70 	.word	0x0802aa70
 80057e4:	080800e0 	.word	0x080800e0
 80057e8:	0802aa78 	.word	0x0802aa78
 80057ec:	08080048 	.word	0x08080048
 80057f0:	08080078 	.word	0x08080078
 80057f4:	200005d0 	.word	0x200005d0
 80057f8:	f020 faf2 	bl	8025de0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 80057fc:	4be6      	ldr	r3, [pc, #920]	@ (8005b98 <CreateMessage+0x7e8>)
 80057fe:	0018      	movs	r0, r3
 8005800:	f7fa fcb4 	bl	800016c <strlen>
 8005804:	0003      	movs	r3, r0
 8005806:	b299      	uxth	r1, r3
 8005808:	220e      	movs	r2, #14
 800580a:	18bb      	adds	r3, r7, r2
 800580c:	18ba      	adds	r2, r7, r2
 800580e:	8812      	ldrh	r2, [r2, #0]
 8005810:	188a      	adds	r2, r1, r2
 8005812:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005814:	1cfb      	adds	r3, r7, #3
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <CreateMessage+0x4a0>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800581c:	4bde      	ldr	r3, [pc, #888]	@ (8005b98 <CreateMessage+0x7e8>)
 800581e:	0018      	movs	r0, r3
 8005820:	f7fa fca4 	bl	800016c <strlen>
 8005824:	0003      	movs	r3, r0
 8005826:	b29a      	uxth	r2, r3
 8005828:	4bdb      	ldr	r3, [pc, #876]	@ (8005b98 <CreateMessage+0x7e8>)
 800582a:	0011      	movs	r1, r2
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fb19 	bl	8004e64 <ESP_Send>
 8005832:	0003      	movs	r3, r0
 8005834:	001a      	movs	r2, r3
 8005836:	4bd9      	ldr	r3, [pc, #868]	@ (8005b9c <CreateMessage+0x7ec>)
 8005838:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 800583a:	4bd9      	ldr	r3, [pc, #868]	@ (8005ba0 <CreateMessage+0x7f0>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	001a      	movs	r2, r3
 8005840:	4bd6      	ldr	r3, [pc, #856]	@ (8005b9c <CreateMessage+0x7ec>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4013      	ands	r3, r2
 8005846:	1e5a      	subs	r2, r3, #1
 8005848:	4193      	sbcs	r3, r2
 800584a:	b2da      	uxtb	r2, r3
 800584c:	4bd4      	ldr	r3, [pc, #848]	@ (8005ba0 <CreateMessage+0x7f0>)
 800584e:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005850:	4bd4      	ldr	r3, [pc, #848]	@ (8005ba4 <CreateMessage+0x7f4>)
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	2b35      	cmp	r3, #53	@ 0x35
 8005856:	d141      	bne.n	80058dc <CreateMessage+0x52c>
 8005858:	f003 ff62 	bl	8009720 <Check_USB_PowerOn>
 800585c:	1e03      	subs	r3, r0, #0
 800585e:	d03d      	beq.n	80058dc <CreateMessage+0x52c>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005860:	4bd1      	ldr	r3, [pc, #836]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005862:	48d2      	ldr	r0, [pc, #840]	@ (8005bac <CreateMessage+0x7fc>)
 8005864:	220c      	movs	r2, #12
 8005866:	0019      	movs	r1, r3
 8005868:	f006 fb28 	bl	800bebc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 800586c:	4ace      	ldr	r2, [pc, #824]	@ (8005ba8 <CreateMessage+0x7f8>)
 800586e:	4bd0      	ldr	r3, [pc, #832]	@ (8005bb0 <CreateMessage+0x800>)
 8005870:	0011      	movs	r1, r2
 8005872:	0018      	movs	r0, r3
 8005874:	f7ff fcd4 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 8005878:	4bce      	ldr	r3, [pc, #824]	@ (8005bb4 <CreateMessage+0x804>)
 800587a:	224e      	movs	r2, #78	@ 0x4e
 800587c:	5a9b      	ldrh	r3, [r3, r2]
 800587e:	4acc      	ldr	r2, [pc, #816]	@ (8005bb0 <CreateMessage+0x800>)
 8005880:	49cd      	ldr	r1, [pc, #820]	@ (8005bb8 <CreateMessage+0x808>)
 8005882:	48c5      	ldr	r0, [pc, #788]	@ (8005b98 <CreateMessage+0x7e8>)
 8005884:	f020 faac 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 8005888:	4bc3      	ldr	r3, [pc, #780]	@ (8005b98 <CreateMessage+0x7e8>)
 800588a:	0018      	movs	r0, r3
 800588c:	f7fa fc6e 	bl	800016c <strlen>
 8005890:	0003      	movs	r3, r0
 8005892:	b299      	uxth	r1, r3
 8005894:	220e      	movs	r2, #14
 8005896:	18bb      	adds	r3, r7, r2
 8005898:	18ba      	adds	r2, r7, r2
 800589a:	8812      	ldrh	r2, [r2, #0]
 800589c:	188a      	adds	r2, r1, r2
 800589e:	801a      	strh	r2, [r3, #0]
      if (send) {
 80058a0:	1cfb      	adds	r3, r7, #3
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d019      	beq.n	80058dc <CreateMessage+0x52c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80058a8:	4bbb      	ldr	r3, [pc, #748]	@ (8005b98 <CreateMessage+0x7e8>)
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fa fc5e 	bl	800016c <strlen>
 80058b0:	0003      	movs	r3, r0
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	4bb8      	ldr	r3, [pc, #736]	@ (8005b98 <CreateMessage+0x7e8>)
 80058b6:	0011      	movs	r1, r2
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7ff fad3 	bl	8004e64 <ESP_Send>
 80058be:	0003      	movs	r3, r0
 80058c0:	001a      	movs	r2, r3
 80058c2:	4bb6      	ldr	r3, [pc, #728]	@ (8005b9c <CreateMessage+0x7ec>)
 80058c4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80058c6:	4bb6      	ldr	r3, [pc, #728]	@ (8005ba0 <CreateMessage+0x7f0>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	001a      	movs	r2, r3
 80058cc:	4bb3      	ldr	r3, [pc, #716]	@ (8005b9c <CreateMessage+0x7ec>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4013      	ands	r3, r2
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	4193      	sbcs	r3, r2
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4bb1      	ldr	r3, [pc, #708]	@ (8005ba0 <CreateMessage+0x7f0>)
 80058da:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 80058dc:	4bb2      	ldr	r3, [pc, #712]	@ (8005ba8 <CreateMessage+0x7f8>)
 80058de:	48b7      	ldr	r0, [pc, #732]	@ (8005bbc <CreateMessage+0x80c>)
 80058e0:	220c      	movs	r2, #12
 80058e2:	0019      	movs	r1, r3
 80058e4:	f006 faea 	bl	800bebc <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 80058e8:	4bae      	ldr	r3, [pc, #696]	@ (8005ba4 <CreateMessage+0x7f4>)
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	2b34      	cmp	r3, #52	@ 0x34
 80058ee:	d003      	beq.n	80058f8 <CreateMessage+0x548>
 80058f0:	4bac      	ldr	r3, [pc, #688]	@ (8005ba4 <CreateMessage+0x7f4>)
 80058f2:	791b      	ldrb	r3, [r3, #4]
 80058f4:	2b35      	cmp	r3, #53	@ 0x35
 80058f6:	d146      	bne.n	8005986 <CreateMessage+0x5d6>
 80058f8:	4ab1      	ldr	r2, [pc, #708]	@ (8005bc0 <CreateMessage+0x810>)
 80058fa:	49b2      	ldr	r1, [pc, #712]	@ (8005bc4 <CreateMessage+0x814>)
 80058fc:	4baa      	ldr	r3, [pc, #680]	@ (8005ba8 <CreateMessage+0x7f8>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff fc56 	bl	80051b0 <isKeyValid>
 8005904:	1e03      	subs	r3, r0, #0
 8005906:	d03e      	beq.n	8005986 <CreateMessage+0x5d6>
      uint8ArrayToString(Buffer, keybuffer);
 8005908:	4aa7      	ldr	r2, [pc, #668]	@ (8005ba8 <CreateMessage+0x7f8>)
 800590a:	4ba9      	ldr	r3, [pc, #676]	@ (8005bb0 <CreateMessage+0x800>)
 800590c:	0011      	movs	r1, r2
 800590e:	0018      	movs	r0, r3
 8005910:	f7ff fc86 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005914:	4ba7      	ldr	r3, [pc, #668]	@ (8005bb4 <CreateMessage+0x804>)
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	1c18      	adds	r0, r3, #0
 800591a:	f7fd ffbb 	bl	8003894 <__aeabi_f2d>
 800591e:	0002      	movs	r2, r0
 8005920:	000b      	movs	r3, r1
 8005922:	4ca3      	ldr	r4, [pc, #652]	@ (8005bb0 <CreateMessage+0x800>)
 8005924:	49a8      	ldr	r1, [pc, #672]	@ (8005bc8 <CreateMessage+0x818>)
 8005926:	489c      	ldr	r0, [pc, #624]	@ (8005b98 <CreateMessage+0x7e8>)
 8005928:	9200      	str	r2, [sp, #0]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	0022      	movs	r2, r4
 800592e:	f020 fa57 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005932:	4b99      	ldr	r3, [pc, #612]	@ (8005b98 <CreateMessage+0x7e8>)
 8005934:	0018      	movs	r0, r3
 8005936:	f7fa fc19 	bl	800016c <strlen>
 800593a:	0003      	movs	r3, r0
 800593c:	b299      	uxth	r1, r3
 800593e:	220e      	movs	r2, #14
 8005940:	18bb      	adds	r3, r7, r2
 8005942:	18ba      	adds	r2, r7, r2
 8005944:	8812      	ldrh	r2, [r2, #0]
 8005946:	188a      	adds	r2, r1, r2
 8005948:	801a      	strh	r2, [r3, #0]
      if (send) {
 800594a:	1cfb      	adds	r3, r7, #3
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d019      	beq.n	8005986 <CreateMessage+0x5d6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005952:	4b91      	ldr	r3, [pc, #580]	@ (8005b98 <CreateMessage+0x7e8>)
 8005954:	0018      	movs	r0, r3
 8005956:	f7fa fc09 	bl	800016c <strlen>
 800595a:	0003      	movs	r3, r0
 800595c:	b29a      	uxth	r2, r3
 800595e:	4b8e      	ldr	r3, [pc, #568]	@ (8005b98 <CreateMessage+0x7e8>)
 8005960:	0011      	movs	r1, r2
 8005962:	0018      	movs	r0, r3
 8005964:	f7ff fa7e 	bl	8004e64 <ESP_Send>
 8005968:	0003      	movs	r3, r0
 800596a:	001a      	movs	r2, r3
 800596c:	4b8b      	ldr	r3, [pc, #556]	@ (8005b9c <CreateMessage+0x7ec>)
 800596e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005970:	4b8b      	ldr	r3, [pc, #556]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	001a      	movs	r2, r3
 8005976:	4b89      	ldr	r3, [pc, #548]	@ (8005b9c <CreateMessage+0x7ec>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	4013      	ands	r3, r2
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	4193      	sbcs	r3, r2
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b87      	ldr	r3, [pc, #540]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005984:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005986:	4b88      	ldr	r3, [pc, #544]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005988:	4890      	ldr	r0, [pc, #576]	@ (8005bcc <CreateMessage+0x81c>)
 800598a:	220c      	movs	r2, #12
 800598c:	0019      	movs	r1, r3
 800598e:	f006 fa95 	bl	800bebc <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005992:	4b84      	ldr	r3, [pc, #528]	@ (8005ba4 <CreateMessage+0x7f4>)
 8005994:	791b      	ldrb	r3, [r3, #4]
 8005996:	2b34      	cmp	r3, #52	@ 0x34
 8005998:	d003      	beq.n	80059a2 <CreateMessage+0x5f2>
 800599a:	4b82      	ldr	r3, [pc, #520]	@ (8005ba4 <CreateMessage+0x7f4>)
 800599c:	791b      	ldrb	r3, [r3, #4]
 800599e:	2b35      	cmp	r3, #53	@ 0x35
 80059a0:	d146      	bne.n	8005a30 <CreateMessage+0x680>
 80059a2:	4a8b      	ldr	r2, [pc, #556]	@ (8005bd0 <CreateMessage+0x820>)
 80059a4:	4987      	ldr	r1, [pc, #540]	@ (8005bc4 <CreateMessage+0x814>)
 80059a6:	4b80      	ldr	r3, [pc, #512]	@ (8005ba8 <CreateMessage+0x7f8>)
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7ff fc01 	bl	80051b0 <isKeyValid>
 80059ae:	1e03      	subs	r3, r0, #0
 80059b0:	d03e      	beq.n	8005a30 <CreateMessage+0x680>
      uint8ArrayToString(Buffer, keybuffer);
 80059b2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ba8 <CreateMessage+0x7f8>)
 80059b4:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb0 <CreateMessage+0x800>)
 80059b6:	0011      	movs	r1, r2
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7ff fc31 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 80059be:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb4 <CreateMessage+0x804>)
 80059c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c2:	1c18      	adds	r0, r3, #0
 80059c4:	f7fd ff66 	bl	8003894 <__aeabi_f2d>
 80059c8:	0002      	movs	r2, r0
 80059ca:	000b      	movs	r3, r1
 80059cc:	4c78      	ldr	r4, [pc, #480]	@ (8005bb0 <CreateMessage+0x800>)
 80059ce:	497e      	ldr	r1, [pc, #504]	@ (8005bc8 <CreateMessage+0x818>)
 80059d0:	4871      	ldr	r0, [pc, #452]	@ (8005b98 <CreateMessage+0x7e8>)
 80059d2:	9200      	str	r2, [sp, #0]
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	0022      	movs	r2, r4
 80059d8:	f020 fa02 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 80059dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005b98 <CreateMessage+0x7e8>)
 80059de:	0018      	movs	r0, r3
 80059e0:	f7fa fbc4 	bl	800016c <strlen>
 80059e4:	0003      	movs	r3, r0
 80059e6:	b299      	uxth	r1, r3
 80059e8:	220e      	movs	r2, #14
 80059ea:	18bb      	adds	r3, r7, r2
 80059ec:	18ba      	adds	r2, r7, r2
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	188a      	adds	r2, r1, r2
 80059f2:	801a      	strh	r2, [r3, #0]
      if (send) {
 80059f4:	1cfb      	adds	r3, r7, #3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d019      	beq.n	8005a30 <CreateMessage+0x680>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80059fc:	4b66      	ldr	r3, [pc, #408]	@ (8005b98 <CreateMessage+0x7e8>)
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7fa fbb4 	bl	800016c <strlen>
 8005a04:	0003      	movs	r3, r0
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	4b63      	ldr	r3, [pc, #396]	@ (8005b98 <CreateMessage+0x7e8>)
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff fa29 	bl	8004e64 <ESP_Send>
 8005a12:	0003      	movs	r3, r0
 8005a14:	001a      	movs	r2, r3
 8005a16:	4b61      	ldr	r3, [pc, #388]	@ (8005b9c <CreateMessage+0x7ec>)
 8005a18:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a1a:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	001a      	movs	r2, r3
 8005a20:	4b5e      	ldr	r3, [pc, #376]	@ (8005b9c <CreateMessage+0x7ec>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	4013      	ands	r3, r2
 8005a26:	1e5a      	subs	r2, r3, #1
 8005a28:	4193      	sbcs	r3, r2
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005a2e:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005a30:	f008 fc0a 	bl	800e248 <sen5x_Get_sen5x_enable_state>
 8005a34:	1e03      	subs	r3, r0, #0
 8005a36:	d100      	bne.n	8005a3a <CreateMessage+0x68a>
 8005a38:	e151      	b.n	8005cde <CreateMessage+0x92e>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005a3c:	4865      	ldr	r0, [pc, #404]	@ (8005bd4 <CreateMessage+0x824>)
 8005a3e:	220c      	movs	r2, #12
 8005a40:	0019      	movs	r1, r3
 8005a42:	f006 fa3b 	bl	800bebc <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005a46:	4a64      	ldr	r2, [pc, #400]	@ (8005bd8 <CreateMessage+0x828>)
 8005a48:	4964      	ldr	r1, [pc, #400]	@ (8005bdc <CreateMessage+0x82c>)
 8005a4a:	4b57      	ldr	r3, [pc, #348]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff fbaf 	bl	80051b0 <isKeyValid>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d03e      	beq.n	8005ad4 <CreateMessage+0x724>
        uint8ArrayToString(Buffer, keybuffer);
 8005a56:	4a54      	ldr	r2, [pc, #336]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005a58:	4b55      	ldr	r3, [pc, #340]	@ (8005bb0 <CreateMessage+0x800>)
 8005a5a:	0011      	movs	r1, r2
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7ff fbdf 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005a62:	4b54      	ldr	r3, [pc, #336]	@ (8005bb4 <CreateMessage+0x804>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	1c18      	adds	r0, r3, #0
 8005a68:	f7fd ff14 	bl	8003894 <__aeabi_f2d>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	000b      	movs	r3, r1
 8005a70:	4c4f      	ldr	r4, [pc, #316]	@ (8005bb0 <CreateMessage+0x800>)
 8005a72:	495b      	ldr	r1, [pc, #364]	@ (8005be0 <CreateMessage+0x830>)
 8005a74:	4848      	ldr	r0, [pc, #288]	@ (8005b98 <CreateMessage+0x7e8>)
 8005a76:	9200      	str	r2, [sp, #0]
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	0022      	movs	r2, r4
 8005a7c:	f020 f9b0 	bl	8025de0 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005a80:	4b45      	ldr	r3, [pc, #276]	@ (8005b98 <CreateMessage+0x7e8>)
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7fa fb72 	bl	800016c <strlen>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	220e      	movs	r2, #14
 8005a8e:	18bb      	adds	r3, r7, r2
 8005a90:	18ba      	adds	r2, r7, r2
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	188a      	adds	r2, r1, r2
 8005a96:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005a98:	1cfb      	adds	r3, r7, #3
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d019      	beq.n	8005ad4 <CreateMessage+0x724>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <CreateMessage+0x7e8>)
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7fa fb62 	bl	800016c <strlen>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	4b3a      	ldr	r3, [pc, #232]	@ (8005b98 <CreateMessage+0x7e8>)
 8005aae:	0011      	movs	r1, r2
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff f9d7 	bl	8004e64 <ESP_Send>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	001a      	movs	r2, r3
 8005aba:	4b38      	ldr	r3, [pc, #224]	@ (8005b9c <CreateMessage+0x7ec>)
 8005abc:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005abe:	4b38      	ldr	r3, [pc, #224]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	4b35      	ldr	r3, [pc, #212]	@ (8005b9c <CreateMessage+0x7ec>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	4193      	sbcs	r3, r2
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005ad2:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005ad4:	4b34      	ldr	r3, [pc, #208]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005ad6:	4843      	ldr	r0, [pc, #268]	@ (8005be4 <CreateMessage+0x834>)
 8005ad8:	220c      	movs	r2, #12
 8005ada:	0019      	movs	r1, r3
 8005adc:	f006 f9ee 	bl	800bebc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005ae0:	4a31      	ldr	r2, [pc, #196]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005ae2:	4b33      	ldr	r3, [pc, #204]	@ (8005bb0 <CreateMessage+0x800>)
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7ff fb9a 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005aec:	4b31      	ldr	r3, [pc, #196]	@ (8005bb4 <CreateMessage+0x804>)
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	1c18      	adds	r0, r3, #0
 8005af2:	f7fd fecf 	bl	8003894 <__aeabi_f2d>
 8005af6:	0002      	movs	r2, r0
 8005af8:	000b      	movs	r3, r1
 8005afa:	4c2d      	ldr	r4, [pc, #180]	@ (8005bb0 <CreateMessage+0x800>)
 8005afc:	4938      	ldr	r1, [pc, #224]	@ (8005be0 <CreateMessage+0x830>)
 8005afe:	4826      	ldr	r0, [pc, #152]	@ (8005b98 <CreateMessage+0x7e8>)
 8005b00:	9200      	str	r2, [sp, #0]
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	0022      	movs	r2, r4
 8005b06:	f020 f96b 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005b0a:	4b23      	ldr	r3, [pc, #140]	@ (8005b98 <CreateMessage+0x7e8>)
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fa fb2d 	bl	800016c <strlen>
 8005b12:	0003      	movs	r3, r0
 8005b14:	b299      	uxth	r1, r3
 8005b16:	220e      	movs	r2, #14
 8005b18:	18bb      	adds	r3, r7, r2
 8005b1a:	18ba      	adds	r2, r7, r2
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	188a      	adds	r2, r1, r2
 8005b20:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b22:	1cfb      	adds	r3, r7, #3
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d019      	beq.n	8005b5e <CreateMessage+0x7ae>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <CreateMessage+0x7e8>)
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7fa fb1d 	bl	800016c <strlen>
 8005b32:	0003      	movs	r3, r0
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <CreateMessage+0x7e8>)
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff f992 	bl	8004e64 <ESP_Send>
 8005b40:	0003      	movs	r3, r0
 8005b42:	001a      	movs	r2, r3
 8005b44:	4b15      	ldr	r3, [pc, #84]	@ (8005b9c <CreateMessage+0x7ec>)
 8005b46:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b48:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <CreateMessage+0x7ec>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4013      	ands	r3, r2
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	4193      	sbcs	r3, r2
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <CreateMessage+0x7f0>)
 8005b5c:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005b5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005b60:	4821      	ldr	r0, [pc, #132]	@ (8005be8 <CreateMessage+0x838>)
 8005b62:	220c      	movs	r2, #12
 8005b64:	0019      	movs	r1, r3
 8005b66:	f006 f9a9 	bl	800bebc <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd8 <CreateMessage+0x828>)
 8005b6c:	491f      	ldr	r1, [pc, #124]	@ (8005bec <CreateMessage+0x83c>)
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7ff fb1d 	bl	80051b0 <isKeyValid>
 8005b76:	1e03      	subs	r3, r0, #0
 8005b78:	d06c      	beq.n	8005c54 <CreateMessage+0x8a4>
        uint8ArrayToString(Buffer, keybuffer);
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ba8 <CreateMessage+0x7f8>)
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <CreateMessage+0x800>)
 8005b7e:	0011      	movs	r1, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7ff fb4d 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <CreateMessage+0x804>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	1c18      	adds	r0, r3, #0
 8005b8c:	f7fd fe82 	bl	8003894 <__aeabi_f2d>
 8005b90:	0002      	movs	r2, r0
 8005b92:	000b      	movs	r3, r1
 8005b94:	e02c      	b.n	8005bf0 <CreateMessage+0x840>
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	200005d4 	.word	0x200005d4
 8005b9c:	20000809 	.word	0x20000809
 8005ba0:	20000032 	.word	0x20000032
 8005ba4:	2000101c 	.word	0x2000101c
 8005ba8:	200007e4 	.word	0x200007e4
 8005bac:	08080024 	.word	0x08080024
 8005bb0:	200007f0 	.word	0x200007f0
 8005bb4:	200006b4 	.word	0x200006b4
 8005bb8:	0802aa4c 	.word	0x0802aa4c
 8005bbc:	08080170 	.word	0x08080170
 8005bc0:	0802aa84 	.word	0x0802aa84
 8005bc4:	0802aa90 	.word	0x0802aa90
 8005bc8:	0802aa98 	.word	0x0802aa98
 8005bcc:	0808017c 	.word	0x0808017c
 8005bd0:	0802aab8 	.word	0x0802aab8
 8005bd4:	080800b0 	.word	0x080800b0
 8005bd8:	0802aac4 	.word	0x0802aac4
 8005bdc:	0802aad0 	.word	0x0802aad0
 8005be0:	0802aa2c 	.word	0x0802aa2c
 8005be4:	08080054 	.word	0x08080054
 8005be8:	080800bc 	.word	0x080800bc
 8005bec:	0802aad4 	.word	0x0802aad4
 8005bf0:	4ce8      	ldr	r4, [pc, #928]	@ (8005f94 <CreateMessage+0xbe4>)
 8005bf2:	49e9      	ldr	r1, [pc, #932]	@ (8005f98 <CreateMessage+0xbe8>)
 8005bf4:	48e9      	ldr	r0, [pc, #932]	@ (8005f9c <CreateMessage+0xbec>)
 8005bf6:	9200      	str	r2, [sp, #0]
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	0022      	movs	r2, r4
 8005bfc:	f020 f8f0 	bl	8025de0 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005c00:	4be6      	ldr	r3, [pc, #920]	@ (8005f9c <CreateMessage+0xbec>)
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7fa fab2 	bl	800016c <strlen>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	220e      	movs	r2, #14
 8005c0e:	18bb      	adds	r3, r7, r2
 8005c10:	18ba      	adds	r2, r7, r2
 8005c12:	8812      	ldrh	r2, [r2, #0]
 8005c14:	188a      	adds	r2, r1, r2
 8005c16:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005c18:	1cfb      	adds	r3, r7, #3
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d019      	beq.n	8005c54 <CreateMessage+0x8a4>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005c20:	4bde      	ldr	r3, [pc, #888]	@ (8005f9c <CreateMessage+0xbec>)
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fa faa2 	bl	800016c <strlen>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	4bdb      	ldr	r3, [pc, #876]	@ (8005f9c <CreateMessage+0xbec>)
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff f917 	bl	8004e64 <ESP_Send>
 8005c36:	0003      	movs	r3, r0
 8005c38:	001a      	movs	r2, r3
 8005c3a:	4bd9      	ldr	r3, [pc, #868]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005c3c:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005c3e:	4bd9      	ldr	r3, [pc, #868]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	001a      	movs	r2, r3
 8005c44:	4bd6      	ldr	r3, [pc, #856]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	1e5a      	subs	r2, r3, #1
 8005c4c:	4193      	sbcs	r3, r2
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	4bd4      	ldr	r3, [pc, #848]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005c52:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005c54:	4bd4      	ldr	r3, [pc, #848]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005c56:	48d5      	ldr	r0, [pc, #852]	@ (8005fac <CreateMessage+0xbfc>)
 8005c58:	220c      	movs	r2, #12
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	f006 f92e 	bl	800bebc <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005c60:	4ad1      	ldr	r2, [pc, #836]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005c62:	4bcc      	ldr	r3, [pc, #816]	@ (8005f94 <CreateMessage+0xbe4>)
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff fada 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005c6c:	4bd0      	ldr	r3, [pc, #832]	@ (8005fb0 <CreateMessage+0xc00>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	1c18      	adds	r0, r3, #0
 8005c72:	f7fd fe0f 	bl	8003894 <__aeabi_f2d>
 8005c76:	0002      	movs	r2, r0
 8005c78:	000b      	movs	r3, r1
 8005c7a:	4cc6      	ldr	r4, [pc, #792]	@ (8005f94 <CreateMessage+0xbe4>)
 8005c7c:	49c6      	ldr	r1, [pc, #792]	@ (8005f98 <CreateMessage+0xbe8>)
 8005c7e:	48c7      	ldr	r0, [pc, #796]	@ (8005f9c <CreateMessage+0xbec>)
 8005c80:	9200      	str	r2, [sp, #0]
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	0022      	movs	r2, r4
 8005c86:	f020 f8ab 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005c8a:	4bc4      	ldr	r3, [pc, #784]	@ (8005f9c <CreateMessage+0xbec>)
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7fa fa6d 	bl	800016c <strlen>
 8005c92:	0003      	movs	r3, r0
 8005c94:	b299      	uxth	r1, r3
 8005c96:	220e      	movs	r2, #14
 8005c98:	18bb      	adds	r3, r7, r2
 8005c9a:	18ba      	adds	r2, r7, r2
 8005c9c:	8812      	ldrh	r2, [r2, #0]
 8005c9e:	188a      	adds	r2, r1, r2
 8005ca0:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ca2:	1cfb      	adds	r3, r7, #3
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d019      	beq.n	8005cde <CreateMessage+0x92e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005caa:	4bbc      	ldr	r3, [pc, #752]	@ (8005f9c <CreateMessage+0xbec>)
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fa fa5d 	bl	800016c <strlen>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	4bb9      	ldr	r3, [pc, #740]	@ (8005f9c <CreateMessage+0xbec>)
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7ff f8d2 	bl	8004e64 <ESP_Send>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	001a      	movs	r2, r3
 8005cc4:	4bb6      	ldr	r3, [pc, #728]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005cc6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cc8:	4bb6      	ldr	r3, [pc, #728]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	001a      	movs	r2, r3
 8005cce:	4bb4      	ldr	r3, [pc, #720]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	4193      	sbcs	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	4bb2      	ldr	r3, [pc, #712]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005cdc:	701a      	strb	r2, [r3, #0]
      }
    }
//  }

  if (IsAHT20SensorPresent()) {
 8005cde:	f007 fa35 	bl	800d14c <IsAHT20SensorPresent>
 8005ce2:	1e03      	subs	r3, r0, #0
 8005ce4:	d100      	bne.n	8005ce8 <CreateMessage+0x938>
 8005ce6:	e099      	b.n	8005e1c <CreateMessage+0xa6c>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005ce8:	4baf      	ldr	r3, [pc, #700]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005cea:	48b2      	ldr	r0, [pc, #712]	@ (8005fb4 <CreateMessage+0xc04>)
 8005cec:	220c      	movs	r2, #12
 8005cee:	0019      	movs	r1, r3
 8005cf0:	f006 f8e4 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005cf4:	4ab0      	ldr	r2, [pc, #704]	@ (8005fb8 <CreateMessage+0xc08>)
 8005cf6:	49b1      	ldr	r1, [pc, #708]	@ (8005fbc <CreateMessage+0xc0c>)
 8005cf8:	4bab      	ldr	r3, [pc, #684]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff fa58 	bl	80051b0 <isKeyValid>
 8005d00:	1e03      	subs	r3, r0, #0
 8005d02:	d03e      	beq.n	8005d82 <CreateMessage+0x9d2>
      uint8ArrayToString(Buffer, keybuffer);
 8005d04:	4aa8      	ldr	r2, [pc, #672]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005d06:	4ba3      	ldr	r3, [pc, #652]	@ (8005f94 <CreateMessage+0xbe4>)
 8005d08:	0011      	movs	r1, r2
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f7ff fa88 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005d10:	4ba7      	ldr	r3, [pc, #668]	@ (8005fb0 <CreateMessage+0xc00>)
 8005d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d14:	1c18      	adds	r0, r3, #0
 8005d16:	f7fd fdbd 	bl	8003894 <__aeabi_f2d>
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	000b      	movs	r3, r1
 8005d1e:	4c9d      	ldr	r4, [pc, #628]	@ (8005f94 <CreateMessage+0xbe4>)
 8005d20:	499d      	ldr	r1, [pc, #628]	@ (8005f98 <CreateMessage+0xbe8>)
 8005d22:	489e      	ldr	r0, [pc, #632]	@ (8005f9c <CreateMessage+0xbec>)
 8005d24:	9200      	str	r2, [sp, #0]
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	0022      	movs	r2, r4
 8005d2a:	f020 f859 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005d2e:	4b9b      	ldr	r3, [pc, #620]	@ (8005f9c <CreateMessage+0xbec>)
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7fa fa1b 	bl	800016c <strlen>
 8005d36:	0003      	movs	r3, r0
 8005d38:	b299      	uxth	r1, r3
 8005d3a:	220e      	movs	r2, #14
 8005d3c:	18bb      	adds	r3, r7, r2
 8005d3e:	18ba      	adds	r2, r7, r2
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	188a      	adds	r2, r1, r2
 8005d44:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d46:	1cfb      	adds	r3, r7, #3
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d019      	beq.n	8005d82 <CreateMessage+0x9d2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d4e:	4b93      	ldr	r3, [pc, #588]	@ (8005f9c <CreateMessage+0xbec>)
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7fa fa0b 	bl	800016c <strlen>
 8005d56:	0003      	movs	r3, r0
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	4b90      	ldr	r3, [pc, #576]	@ (8005f9c <CreateMessage+0xbec>)
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f7ff f880 	bl	8004e64 <ESP_Send>
 8005d64:	0003      	movs	r3, r0
 8005d66:	001a      	movs	r2, r3
 8005d68:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005d6a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	001a      	movs	r2, r3
 8005d72:	4b8b      	ldr	r3, [pc, #556]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	4013      	ands	r3, r2
 8005d78:	1e5a      	subs	r2, r3, #1
 8005d7a:	4193      	sbcs	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b89      	ldr	r3, [pc, #548]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005d80:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005d82:	4b89      	ldr	r3, [pc, #548]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005d84:	488e      	ldr	r0, [pc, #568]	@ (8005fc0 <CreateMessage+0xc10>)
 8005d86:	220c      	movs	r2, #12
 8005d88:	0019      	movs	r1, r3
 8005d8a:	f006 f897 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005d8e:	4a8d      	ldr	r2, [pc, #564]	@ (8005fc4 <CreateMessage+0xc14>)
 8005d90:	498a      	ldr	r1, [pc, #552]	@ (8005fbc <CreateMessage+0xc0c>)
 8005d92:	4b85      	ldr	r3, [pc, #532]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7ff fa0b 	bl	80051b0 <isKeyValid>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d03e      	beq.n	8005e1c <CreateMessage+0xa6c>
      uint8ArrayToString(Buffer, keybuffer);
 8005d9e:	4a82      	ldr	r2, [pc, #520]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005da0:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <CreateMessage+0xbe4>)
 8005da2:	0011      	movs	r1, r2
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7ff fa3b 	bl	8005220 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8005daa:	4b81      	ldr	r3, [pc, #516]	@ (8005fb0 <CreateMessage+0xc00>)
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	1c18      	adds	r0, r3, #0
 8005db0:	f7fd fd70 	bl	8003894 <__aeabi_f2d>
 8005db4:	0002      	movs	r2, r0
 8005db6:	000b      	movs	r3, r1
 8005db8:	4c76      	ldr	r4, [pc, #472]	@ (8005f94 <CreateMessage+0xbe4>)
 8005dba:	4977      	ldr	r1, [pc, #476]	@ (8005f98 <CreateMessage+0xbe8>)
 8005dbc:	4877      	ldr	r0, [pc, #476]	@ (8005f9c <CreateMessage+0xbec>)
 8005dbe:	9200      	str	r2, [sp, #0]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	0022      	movs	r2, r4
 8005dc4:	f020 f80c 	bl	8025de0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8005dc8:	4b74      	ldr	r3, [pc, #464]	@ (8005f9c <CreateMessage+0xbec>)
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f7fa f9ce 	bl	800016c <strlen>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	220e      	movs	r2, #14
 8005dd6:	18bb      	adds	r3, r7, r2
 8005dd8:	18ba      	adds	r2, r7, r2
 8005dda:	8812      	ldrh	r2, [r2, #0]
 8005ddc:	188a      	adds	r2, r1, r2
 8005dde:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005de0:	1cfb      	adds	r3, r7, #3
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d019      	beq.n	8005e1c <CreateMessage+0xa6c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005de8:	4b6c      	ldr	r3, [pc, #432]	@ (8005f9c <CreateMessage+0xbec>)
 8005dea:	0018      	movs	r0, r3
 8005dec:	f7fa f9be 	bl	800016c <strlen>
 8005df0:	0003      	movs	r3, r0
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	4b69      	ldr	r3, [pc, #420]	@ (8005f9c <CreateMessage+0xbec>)
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff f833 	bl	8004e64 <ESP_Send>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	001a      	movs	r2, r3
 8005e02:	4b67      	ldr	r3, [pc, #412]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005e04:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e06:	4b67      	ldr	r3, [pc, #412]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	4b64      	ldr	r3, [pc, #400]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	4013      	ands	r3, r2
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	4193      	sbcs	r3, r2
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	4b62      	ldr	r3, [pc, #392]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005e1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005e1c:	f007 f9aa 	bl	800d174 <IsENS160SensorPresent>
 8005e20:	1e03      	subs	r3, r0, #0
 8005e22:	d100      	bne.n	8005e26 <CreateMessage+0xa76>
 8005e24:	e0fc      	b.n	8006020 <CreateMessage+0xc70>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005e26:	4b60      	ldr	r3, [pc, #384]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005e28:	4867      	ldr	r0, [pc, #412]	@ (8005fc8 <CreateMessage+0xc18>)
 8005e2a:	220c      	movs	r2, #12
 8005e2c:	0019      	movs	r1, r3
 8005e2e:	f006 f845 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005e32:	4a66      	ldr	r2, [pc, #408]	@ (8005fcc <CreateMessage+0xc1c>)
 8005e34:	4966      	ldr	r1, [pc, #408]	@ (8005fd0 <CreateMessage+0xc20>)
 8005e36:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7ff f9b9 	bl	80051b0 <isKeyValid>
 8005e3e:	1e03      	subs	r3, r0, #0
 8005e40:	d037      	beq.n	8005eb2 <CreateMessage+0xb02>
      uint8ArrayToString(Buffer, keybuffer);
 8005e42:	4a59      	ldr	r2, [pc, #356]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005e44:	4b53      	ldr	r3, [pc, #332]	@ (8005f94 <CreateMessage+0xbe4>)
 8005e46:	0011      	movs	r1, r2
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff f9e9 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 8005e4e:	4b58      	ldr	r3, [pc, #352]	@ (8005fb0 <CreateMessage+0xc00>)
 8005e50:	2255      	movs	r2, #85	@ 0x55
 8005e52:	5c9b      	ldrb	r3, [r3, r2]
 8005e54:	4a4f      	ldr	r2, [pc, #316]	@ (8005f94 <CreateMessage+0xbe4>)
 8005e56:	495f      	ldr	r1, [pc, #380]	@ (8005fd4 <CreateMessage+0xc24>)
 8005e58:	4850      	ldr	r0, [pc, #320]	@ (8005f9c <CreateMessage+0xbec>)
 8005e5a:	f01f ffc1 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 8005e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f9c <CreateMessage+0xbec>)
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fa f983 	bl	800016c <strlen>
 8005e66:	0003      	movs	r3, r0
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	220e      	movs	r2, #14
 8005e6c:	18bb      	adds	r3, r7, r2
 8005e6e:	18ba      	adds	r2, r7, r2
 8005e70:	8812      	ldrh	r2, [r2, #0]
 8005e72:	188a      	adds	r2, r1, r2
 8005e74:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e76:	1cfb      	adds	r3, r7, #3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <CreateMessage+0xb02>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e7e:	4b47      	ldr	r3, [pc, #284]	@ (8005f9c <CreateMessage+0xbec>)
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7fa f973 	bl	800016c <strlen>
 8005e86:	0003      	movs	r3, r0
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	4b44      	ldr	r3, [pc, #272]	@ (8005f9c <CreateMessage+0xbec>)
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7fe ffe8 	bl	8004e64 <ESP_Send>
 8005e94:	0003      	movs	r3, r0
 8005e96:	001a      	movs	r2, r3
 8005e98:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005e9a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e9c:	4b41      	ldr	r3, [pc, #260]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	001a      	movs	r2, r3
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	4193      	sbcs	r3, r2
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005eb0:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005eb4:	4848      	ldr	r0, [pc, #288]	@ (8005fd8 <CreateMessage+0xc28>)
 8005eb6:	220c      	movs	r2, #12
 8005eb8:	0019      	movs	r1, r3
 8005eba:	f005 ffff 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005ebe:	4a47      	ldr	r2, [pc, #284]	@ (8005fdc <CreateMessage+0xc2c>)
 8005ec0:	4943      	ldr	r1, [pc, #268]	@ (8005fd0 <CreateMessage+0xc20>)
 8005ec2:	4b39      	ldr	r3, [pc, #228]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7ff f973 	bl	80051b0 <isKeyValid>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d037      	beq.n	8005f3e <CreateMessage+0xb8e>
      uint8ArrayToString(Buffer, keybuffer);
 8005ece:	4a36      	ldr	r2, [pc, #216]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005ed0:	4b30      	ldr	r3, [pc, #192]	@ (8005f94 <CreateMessage+0xbe4>)
 8005ed2:	0011      	movs	r1, r2
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7ff f9a3 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 8005eda:	4b35      	ldr	r3, [pc, #212]	@ (8005fb0 <CreateMessage+0xc00>)
 8005edc:	224a      	movs	r2, #74	@ 0x4a
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <CreateMessage+0xbe4>)
 8005ee2:	493c      	ldr	r1, [pc, #240]	@ (8005fd4 <CreateMessage+0xc24>)
 8005ee4:	482d      	ldr	r0, [pc, #180]	@ (8005f9c <CreateMessage+0xbec>)
 8005ee6:	f01f ff7b 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 8005eea:	4b2c      	ldr	r3, [pc, #176]	@ (8005f9c <CreateMessage+0xbec>)
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7fa f93d 	bl	800016c <strlen>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	b299      	uxth	r1, r3
 8005ef6:	220e      	movs	r2, #14
 8005ef8:	18bb      	adds	r3, r7, r2
 8005efa:	18ba      	adds	r2, r7, r2
 8005efc:	8812      	ldrh	r2, [r2, #0]
 8005efe:	188a      	adds	r2, r1, r2
 8005f00:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f02:	1cfb      	adds	r3, r7, #3
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d019      	beq.n	8005f3e <CreateMessage+0xb8e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f0a:	4b24      	ldr	r3, [pc, #144]	@ (8005f9c <CreateMessage+0xbec>)
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fa f92d 	bl	800016c <strlen>
 8005f12:	0003      	movs	r3, r0
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <CreateMessage+0xbec>)
 8005f18:	0011      	movs	r1, r2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f7fe ffa2 	bl	8004e64 <ESP_Send>
 8005f20:	0003      	movs	r3, r0
 8005f22:	001a      	movs	r2, r3
 8005f24:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005f26:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f28:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	001a      	movs	r2, r3
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <CreateMessage+0xbf0>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	4013      	ands	r3, r2
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	4193      	sbcs	r3, r2
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa4 <CreateMessage+0xbf4>)
 8005f3c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005f40:	4827      	ldr	r0, [pc, #156]	@ (8005fe0 <CreateMessage+0xc30>)
 8005f42:	220c      	movs	r2, #12
 8005f44:	0019      	movs	r1, r3
 8005f46:	f005 ffb9 	bl	800bebc <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005f4a:	4a26      	ldr	r2, [pc, #152]	@ (8005fe4 <CreateMessage+0xc34>)
 8005f4c:	4920      	ldr	r1, [pc, #128]	@ (8005fd0 <CreateMessage+0xc20>)
 8005f4e:	4b16      	ldr	r3, [pc, #88]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7ff f92d 	bl	80051b0 <isKeyValid>
 8005f56:	1e03      	subs	r3, r0, #0
 8005f58:	d062      	beq.n	8006020 <CreateMessage+0xc70>
      uint8ArrayToString(Buffer, keybuffer);
 8005f5a:	4a13      	ldr	r2, [pc, #76]	@ (8005fa8 <CreateMessage+0xbf8>)
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <CreateMessage+0xbe4>)
 8005f5e:	0011      	movs	r1, r2
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff f95d 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 8005f66:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <CreateMessage+0xc00>)
 8005f68:	2252      	movs	r2, #82	@ 0x52
 8005f6a:	5a9b      	ldrh	r3, [r3, r2]
 8005f6c:	4a09      	ldr	r2, [pc, #36]	@ (8005f94 <CreateMessage+0xbe4>)
 8005f6e:	4919      	ldr	r1, [pc, #100]	@ (8005fd4 <CreateMessage+0xc24>)
 8005f70:	480a      	ldr	r0, [pc, #40]	@ (8005f9c <CreateMessage+0xbec>)
 8005f72:	f01f ff35 	bl	8025de0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 8005f76:	4b09      	ldr	r3, [pc, #36]	@ (8005f9c <CreateMessage+0xbec>)
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7fa f8f7 	bl	800016c <strlen>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	b299      	uxth	r1, r3
 8005f82:	220e      	movs	r2, #14
 8005f84:	18bb      	adds	r3, r7, r2
 8005f86:	18ba      	adds	r2, r7, r2
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	188a      	adds	r2, r1, r2
 8005f8c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f8e:	1cfb      	adds	r3, r7, #3
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	e029      	b.n	8005fe8 <CreateMessage+0xc38>
 8005f94:	200007f0 	.word	0x200007f0
 8005f98:	0802aa2c 	.word	0x0802aa2c
 8005f9c:	200005d4 	.word	0x200005d4
 8005fa0:	20000809 	.word	0x20000809
 8005fa4:	20000032 	.word	0x20000032
 8005fa8:	200007e4 	.word	0x200007e4
 8005fac:	08080060 	.word	0x08080060
 8005fb0:	200006b4 	.word	0x200006b4
 8005fb4:	080800c8 	.word	0x080800c8
 8005fb8:	0802aa84 	.word	0x0802aa84
 8005fbc:	0802aad8 	.word	0x0802aad8
 8005fc0:	080800d4 	.word	0x080800d4
 8005fc4:	0802aab8 	.word	0x0802aab8
 8005fc8:	080800ec 	.word	0x080800ec
 8005fcc:	0802aae0 	.word	0x0802aae0
 8005fd0:	0802aaf4 	.word	0x0802aaf4
 8005fd4:	0802aa4c 	.word	0x0802aa4c
 8005fd8:	080800f8 	.word	0x080800f8
 8005fdc:	0802aafc 	.word	0x0802aafc
 8005fe0:	08080104 	.word	0x08080104
 8005fe4:	0802ab04 	.word	0x0802ab04
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <CreateMessage+0xc70>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fec:	4b3a      	ldr	r3, [pc, #232]	@ (80060d8 <CreateMessage+0xd28>)
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f7fa f8bc 	bl	800016c <strlen>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	4b37      	ldr	r3, [pc, #220]	@ (80060d8 <CreateMessage+0xd28>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f7fe ff31 	bl	8004e64 <ESP_Send>
 8006002:	0003      	movs	r3, r0
 8006004:	001a      	movs	r2, r3
 8006006:	4b35      	ldr	r3, [pc, #212]	@ (80060dc <CreateMessage+0xd2c>)
 8006008:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800600a:	4b35      	ldr	r3, [pc, #212]	@ (80060e0 <CreateMessage+0xd30>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	001a      	movs	r2, r3
 8006010:	4b32      	ldr	r3, [pc, #200]	@ (80060dc <CreateMessage+0xd2c>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4013      	ands	r3, r2
 8006016:	1e5a      	subs	r2, r3, #1
 8006018:	4193      	sbcs	r3, r2
 800601a:	b2da      	uxtb	r2, r3
 800601c:	4b30      	ldr	r3, [pc, #192]	@ (80060e0 <CreateMessage+0xd30>)
 800601e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8006020:	4b30      	ldr	r3, [pc, #192]	@ (80060e4 <CreateMessage+0xd34>)
 8006022:	4831      	ldr	r0, [pc, #196]	@ (80060e8 <CreateMessage+0xd38>)
 8006024:	220c      	movs	r2, #12
 8006026:	0019      	movs	r1, r3
 8006028:	f005 ff48 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800602c:	4a2d      	ldr	r2, [pc, #180]	@ (80060e4 <CreateMessage+0xd34>)
 800602e:	4b2f      	ldr	r3, [pc, #188]	@ (80060ec <CreateMessage+0xd3c>)
 8006030:	0011      	movs	r1, r2
 8006032:	0018      	movs	r0, r3
 8006034:	f7ff f8f4 	bl	8005220 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 8006038:	4b2d      	ldr	r3, [pc, #180]	@ (80060f0 <CreateMessage+0xd40>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	1c18      	adds	r0, r3, #0
 800603e:	f7fd fc29 	bl	8003894 <__aeabi_f2d>
 8006042:	0002      	movs	r2, r0
 8006044:	000b      	movs	r3, r1
 8006046:	4c29      	ldr	r4, [pc, #164]	@ (80060ec <CreateMessage+0xd3c>)
 8006048:	492a      	ldr	r1, [pc, #168]	@ (80060f4 <CreateMessage+0xd44>)
 800604a:	4823      	ldr	r0, [pc, #140]	@ (80060d8 <CreateMessage+0xd28>)
 800604c:	9200      	str	r2, [sp, #0]
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	0022      	movs	r2, r4
 8006052:	f01f fec5 	bl	8025de0 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006056:	4b20      	ldr	r3, [pc, #128]	@ (80060d8 <CreateMessage+0xd28>)
 8006058:	0018      	movs	r0, r3
 800605a:	f7fa f887 	bl	800016c <strlen>
 800605e:	0002      	movs	r2, r0
 8006060:	4b1d      	ldr	r3, [pc, #116]	@ (80060d8 <CreateMessage+0xd28>)
 8006062:	18d3      	adds	r3, r2, r3
 8006064:	4a24      	ldr	r2, [pc, #144]	@ (80060f8 <CreateMessage+0xd48>)
 8006066:	0011      	movs	r1, r2
 8006068:	0018      	movs	r0, r3
 800606a:	f01f feb9 	bl	8025de0 <siprintf>
  index += strlen(message);
 800606e:	4b1a      	ldr	r3, [pc, #104]	@ (80060d8 <CreateMessage+0xd28>)
 8006070:	0018      	movs	r0, r3
 8006072:	f7fa f87b 	bl	800016c <strlen>
 8006076:	0003      	movs	r3, r0
 8006078:	b299      	uxth	r1, r3
 800607a:	220e      	movs	r2, #14
 800607c:	18bb      	adds	r3, r7, r2
 800607e:	18ba      	adds	r2, r7, r2
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	188a      	adds	r2, r1, r2
 8006084:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006086:	1cfb      	adds	r3, r7, #3
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d019      	beq.n	80060c2 <CreateMessage+0xd12>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800608e:	4b12      	ldr	r3, [pc, #72]	@ (80060d8 <CreateMessage+0xd28>)
 8006090:	0018      	movs	r0, r3
 8006092:	f7fa f86b 	bl	800016c <strlen>
 8006096:	0003      	movs	r3, r0
 8006098:	b29a      	uxth	r2, r3
 800609a:	4b0f      	ldr	r3, [pc, #60]	@ (80060d8 <CreateMessage+0xd28>)
 800609c:	0011      	movs	r1, r2
 800609e:	0018      	movs	r0, r3
 80060a0:	f7fe fee0 	bl	8004e64 <ESP_Send>
 80060a4:	0003      	movs	r3, r0
 80060a6:	001a      	movs	r2, r3
 80060a8:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <CreateMessage+0xd2c>)
 80060aa:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80060ac:	4b0c      	ldr	r3, [pc, #48]	@ (80060e0 <CreateMessage+0xd30>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	001a      	movs	r2, r3
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <CreateMessage+0xd2c>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4013      	ands	r3, r2
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	4193      	sbcs	r3, r2
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <CreateMessage+0xd30>)
 80060c0:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80060c2:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <CreateMessage+0xd30>)
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	701a      	strb	r2, [r3, #0]
  return index;
 80060ca:	230e      	movs	r3, #14
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	881b      	ldrh	r3, [r3, #0]
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b004      	add	sp, #16
 80060d6:	bdb0      	pop	{r4, r5, r7, pc}
 80060d8:	200005d4 	.word	0x200005d4
 80060dc:	20000809 	.word	0x20000809
 80060e0:	20000032 	.word	0x20000032
 80060e4:	200007e4 	.word	0x200007e4
 80060e8:	0808006c 	.word	0x0808006c
 80060ec:	200007f0 	.word	0x200007f0
 80060f0:	200005cc 	.word	0x200005cc
 80060f4:	0802aa2c 	.word	0x0802aa2c
 80060f8:	0802ab0c 	.word	0x0802ab0c

080060fc <StartProg>:

void StartProg(){
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006100:	2064      	movs	r0, #100	@ 0x64
 8006102:	f00e fa2d 	bl	8014560 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006106:	4b15      	ldr	r3, [pc, #84]	@ (800615c <StartProg+0x60>)
 8006108:	2200      	movs	r2, #0
 800610a:	2101      	movs	r1, #1
 800610c:	0018      	movs	r0, r3
 800610e:	f00f fcae 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8006112:	2064      	movs	r0, #100	@ 0x64
 8006114:	f00e fa24 	bl	8014560 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006118:	4b10      	ldr	r3, [pc, #64]	@ (800615c <StartProg+0x60>)
 800611a:	2200      	movs	r2, #0
 800611c:	2102      	movs	r1, #2
 800611e:	0018      	movs	r0, r3
 8006120:	f00f fca5 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006124:	23fa      	movs	r3, #250	@ 0xfa
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	0018      	movs	r0, r3
 800612a:	f00e fa19 	bl	8014560 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800612e:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <StartProg+0x60>)
 8006130:	2201      	movs	r2, #1
 8006132:	2101      	movs	r1, #1
 8006134:	0018      	movs	r0, r3
 8006136:	f00f fc9a 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800613a:	23fa      	movs	r3, #250	@ 0xfa
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	0018      	movs	r0, r3
 8006140:	f00e fa0e 	bl	8014560 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <StartProg+0x60>)
 8006146:	2201      	movs	r2, #1
 8006148:	2102      	movs	r1, #2
 800614a:	0018      	movs	r0, r3
 800614c:	f00f fc8f 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006150:	2028      	movs	r0, #40	@ 0x28
 8006152:	f00e fa05 	bl	8014560 <HAL_Delay>
}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	50001c00 	.word	0x50001c00

08006160 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	b0df      	sub	sp, #380	@ 0x17c
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	0008      	movs	r0, r1
 800616a:	0011      	movs	r1, r2
 800616c:	4bb9      	ldr	r3, [pc, #740]	@ (8006454 <ParseBuffer+0x2f4>)
 800616e:	24bc      	movs	r4, #188	@ 0xbc
 8006170:	0064      	lsls	r4, r4, #1
 8006172:	191b      	adds	r3, r3, r4
 8006174:	19db      	adds	r3, r3, r7
 8006176:	1c02      	adds	r2, r0, #0
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	4bb7      	ldr	r3, [pc, #732]	@ (8006458 <ParseBuffer+0x2f8>)
 800617c:	191b      	adds	r3, r3, r4
 800617e:	19db      	adds	r3, r3, r7
 8006180:	1c0a      	adds	r2, r1, #0
 8006182:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	005a      	lsls	r2, r3, #1
 8006188:	235c      	movs	r3, #92	@ 0x5c
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2100      	movs	r1, #0
 800618e:	0018      	movs	r0, r3
 8006190:	f01f ff90 	bl	80260b4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006194:	2378      	movs	r3, #120	@ 0x78
 8006196:	33ff      	adds	r3, #255	@ 0xff
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	2203      	movs	r2, #3
 800619c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800619e:	23ba      	movs	r3, #186	@ 0xba
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e013      	b.n	80061d2 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80061aa:	20ba      	movs	r0, #186	@ 0xba
 80061ac:	0040      	lsls	r0, r0, #1
 80061ae:	183b      	adds	r3, r7, r0
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	18d2      	adds	r2, r2, r3
 80061b6:	183b      	adds	r3, r7, r0
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	7811      	ldrb	r1, [r2, #0]
 80061bc:	4aa7      	ldr	r2, [pc, #668]	@ (800645c <ParseBuffer+0x2fc>)
 80061be:	24bc      	movs	r4, #188	@ 0xbc
 80061c0:	0064      	lsls	r4, r4, #1
 80061c2:	1912      	adds	r2, r2, r4
 80061c4:	19d2      	adds	r2, r2, r7
 80061c6:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80061c8:	183b      	adds	r3, r7, r0
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	183b      	adds	r3, r7, r0
 80061ce:	3201      	adds	r2, #1
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	23ba      	movs	r3, #186	@ 0xba
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	18fa      	adds	r2, r7, r3
 80061d8:	4b9e      	ldr	r3, [pc, #632]	@ (8006454 <ParseBuffer+0x2f4>)
 80061da:	21bc      	movs	r1, #188	@ 0xbc
 80061dc:	0049      	lsls	r1, r1, #1
 80061de:	185b      	adds	r3, r3, r1
 80061e0:	19db      	adds	r3, r3, r7
 80061e2:	8812      	ldrh	r2, [r2, #0]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d3df      	bcc.n	80061aa <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80061ea:	4b9a      	ldr	r3, [pc, #616]	@ (8006454 <ParseBuffer+0x2f4>)
 80061ec:	185b      	adds	r3, r3, r1
 80061ee:	19db      	adds	r3, r3, r7
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	4a9a      	ldr	r2, [pc, #616]	@ (800645c <ParseBuffer+0x2fc>)
 80061f4:	1852      	adds	r2, r2, r1
 80061f6:	19d2      	adds	r2, r2, r7
 80061f8:	2100      	movs	r1, #0
 80061fa:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80061fc:	f00d fce0 	bl	8013bc0 <GetVerboseLevel>
 8006200:	0003      	movs	r3, r0
 8006202:	2b03      	cmp	r3, #3
 8006204:	d106      	bne.n	8006214 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8006206:	235c      	movs	r3, #92	@ 0x5c
 8006208:	18fa      	adds	r2, r7, r3
 800620a:	4b95      	ldr	r3, [pc, #596]	@ (8006460 <ParseBuffer+0x300>)
 800620c:	0011      	movs	r1, r2
 800620e:	0018      	movs	r0, r3
 8006210:	f01f fd76 	bl	8025d00 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	26b8      	movs	r6, #184	@ 0xb8
 8006218:	0076      	lsls	r6, r6, #1
 800621a:	19ba      	adds	r2, r7, r6
 800621c:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 800621e:	4b91      	ldr	r3, [pc, #580]	@ (8006464 <ParseBuffer+0x304>)
 8006220:	25bc      	movs	r5, #188	@ 0xbc
 8006222:	006d      	lsls	r5, r5, #1
 8006224:	195b      	adds	r3, r3, r5
 8006226:	19db      	adds	r3, r3, r7
 8006228:	4a8f      	ldr	r2, [pc, #572]	@ (8006468 <ParseBuffer+0x308>)
 800622a:	8811      	ldrh	r1, [r2, #0]
 800622c:	8019      	strh	r1, [r3, #0]
 800622e:	7892      	ldrb	r2, [r2, #2]
 8006230:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006232:	4b8e      	ldr	r3, [pc, #568]	@ (800646c <ParseBuffer+0x30c>)
 8006234:	195b      	adds	r3, r3, r5
 8006236:	19db      	adds	r3, r3, r7
 8006238:	4a8d      	ldr	r2, [pc, #564]	@ (8006470 <ParseBuffer+0x310>)
 800623a:	6811      	ldr	r1, [r2, #0]
 800623c:	6019      	str	r1, [r3, #0]
 800623e:	8892      	ldrh	r2, [r2, #4]
 8006240:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006242:	4b8c      	ldr	r3, [pc, #560]	@ (8006474 <ParseBuffer+0x314>)
 8006244:	195b      	adds	r3, r3, r5
 8006246:	19db      	adds	r3, r3, r7
 8006248:	4a8b      	ldr	r2, [pc, #556]	@ (8006478 <ParseBuffer+0x318>)
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006250:	4b8a      	ldr	r3, [pc, #552]	@ (800647c <ParseBuffer+0x31c>)
 8006252:	195b      	adds	r3, r3, r5
 8006254:	19db      	adds	r3, r3, r7
 8006256:	4a8a      	ldr	r2, [pc, #552]	@ (8006480 <ParseBuffer+0x320>)
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	6019      	str	r1, [r3, #0]
 800625c:	8892      	ldrh	r2, [r2, #4]
 800625e:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006260:	4b88      	ldr	r3, [pc, #544]	@ (8006484 <ParseBuffer+0x324>)
 8006262:	195b      	adds	r3, r3, r5
 8006264:	19db      	adds	r3, r3, r7
 8006266:	223e      	movs	r2, #62	@ 0x3e
 8006268:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800626a:	4b87      	ldr	r3, [pc, #540]	@ (8006488 <ParseBuffer+0x328>)
 800626c:	195b      	adds	r3, r3, r5
 800626e:	19db      	adds	r3, r3, r7
 8006270:	4a86      	ldr	r2, [pc, #536]	@ (800648c <ParseBuffer+0x32c>)
 8006272:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006274:	c313      	stmia	r3!, {r0, r1, r4}
 8006276:	8811      	ldrh	r1, [r2, #0]
 8006278:	8019      	strh	r1, [r3, #0]
 800627a:	7892      	ldrb	r2, [r2, #2]
 800627c:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800627e:	4b84      	ldr	r3, [pc, #528]	@ (8006490 <ParseBuffer+0x330>)
 8006280:	195b      	adds	r3, r3, r5
 8006282:	19db      	adds	r3, r3, r7
 8006284:	4a83      	ldr	r2, [pc, #524]	@ (8006494 <ParseBuffer+0x334>)
 8006286:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006288:	c313      	stmia	r3!, {r0, r1, r4}
 800628a:	8812      	ldrh	r2, [r2, #0]
 800628c:	801a      	strh	r2, [r3, #0]
  const char MAIL_API[] = AT_RESPONSE_MAIL_API;
 800628e:	4b82      	ldr	r3, [pc, #520]	@ (8006498 <ParseBuffer+0x338>)
 8006290:	195b      	adds	r3, r3, r5
 8006292:	19db      	adds	r3, r3, r7
 8006294:	4a81      	ldr	r2, [pc, #516]	@ (800649c <ParseBuffer+0x33c>)
 8006296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006298:	c313      	stmia	r3!, {r0, r1, r4}
 800629a:	8811      	ldrh	r1, [r2, #0]
 800629c:	8019      	strh	r1, [r3, #0]
 800629e:	7892      	ldrb	r2, [r2, #2]
 80062a0:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80062a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006458 <ParseBuffer+0x2f8>)
 80062a4:	195b      	adds	r3, r3, r5
 80062a6:	19db      	adds	r3, r3, r7
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <ParseBuffer+0x164>
    ParsePoint = strstr(tempBuf, OK);
 80062ae:	2358      	movs	r3, #88	@ 0x58
 80062b0:	18fa      	adds	r2, r7, r3
 80062b2:	235c      	movs	r3, #92	@ 0x5c
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	0011      	movs	r1, r2
 80062b8:	0018      	movs	r0, r3
 80062ba:	f01f ff36 	bl	802612a <strstr>
 80062be:	0003      	movs	r3, r0
 80062c0:	19ba      	adds	r2, r7, r6
 80062c2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80062c4:	4b64      	ldr	r3, [pc, #400]	@ (8006458 <ParseBuffer+0x2f8>)
 80062c6:	22bc      	movs	r2, #188	@ 0xbc
 80062c8:	0052      	lsls	r2, r2, #1
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	19db      	adds	r3, r3, r7
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d10c      	bne.n	80062ee <ParseBuffer+0x18e>
    ParsePoint = strstr(tempBuf, ready);
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	18fa      	adds	r2, r7, r3
 80062d8:	235c      	movs	r3, #92	@ 0x5c
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f01f ff23 	bl	802612a <strstr>
 80062e4:	0003      	movs	r3, r0
 80062e6:	22b8      	movs	r2, #184	@ 0xb8
 80062e8:	0052      	lsls	r2, r2, #1
 80062ea:	18ba      	adds	r2, r7, r2
 80062ec:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80062ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006458 <ParseBuffer+0x2f8>)
 80062f0:	22bc      	movs	r2, #188	@ 0xbc
 80062f2:	0052      	lsls	r2, r2, #1
 80062f4:	189b      	adds	r3, r3, r2
 80062f6:	19db      	adds	r3, r3, r7
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d10c      	bne.n	8006318 <ParseBuffer+0x1b8>
    ParsePoint = strstr(tempBuf, start);
 80062fe:	233c      	movs	r3, #60	@ 0x3c
 8006300:	18fa      	adds	r2, r7, r3
 8006302:	235c      	movs	r3, #92	@ 0x5c
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	0011      	movs	r1, r2
 8006308:	0018      	movs	r0, r3
 800630a:	f01f ff0e 	bl	802612a <strstr>
 800630e:	0003      	movs	r3, r0
 8006310:	22b8      	movs	r2, #184	@ 0xb8
 8006312:	0052      	lsls	r2, r2, #1
 8006314:	18ba      	adds	r2, r7, r2
 8006316:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8006318:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <ParseBuffer+0x2f8>)
 800631a:	22bc      	movs	r2, #188	@ 0xbc
 800631c:	0052      	lsls	r2, r2, #1
 800631e:	189b      	adds	r3, r3, r2
 8006320:	19db      	adds	r3, r3, r7
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b05      	cmp	r3, #5
 8006326:	d10c      	bne.n	8006342 <ParseBuffer+0x1e2>
    ParsePoint = strstr(tempBuf, TIME);
 8006328:	231c      	movs	r3, #28
 800632a:	18fa      	adds	r2, r7, r3
 800632c:	235c      	movs	r3, #92	@ 0x5c
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	0011      	movs	r1, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f01f fef9 	bl	802612a <strstr>
 8006338:	0003      	movs	r3, r0
 800633a:	22b8      	movs	r2, #184	@ 0xb8
 800633c:	0052      	lsls	r2, r2, #1
 800633e:	18ba      	adds	r2, r7, r2
 8006340:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_MAIL_API){
 8006342:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <ParseBuffer+0x2f8>)
 8006344:	22bc      	movs	r2, #188	@ 0xbc
 8006346:	0052      	lsls	r2, r2, #1
 8006348:	189b      	adds	r3, r3, r2
 800634a:	19db      	adds	r3, r3, r7
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b06      	cmp	r3, #6
 8006350:	d10c      	bne.n	800636c <ParseBuffer+0x20c>
    ParsePoint = strstr(tempBuf, MAIL_API);
 8006352:	230c      	movs	r3, #12
 8006354:	18fa      	adds	r2, r7, r3
 8006356:	235c      	movs	r3, #92	@ 0x5c
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	0011      	movs	r1, r2
 800635c:	0018      	movs	r0, r3
 800635e:	f01f fee4 	bl	802612a <strstr>
 8006362:	0003      	movs	r3, r0
 8006364:	22b8      	movs	r2, #184	@ 0xb8
 8006366:	0052      	lsls	r2, r2, #1
 8006368:	18ba      	adds	r2, r7, r2
 800636a:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800636c:	2350      	movs	r3, #80	@ 0x50
 800636e:	18fa      	adds	r2, r7, r3
 8006370:	245c      	movs	r4, #92	@ 0x5c
 8006372:	193b      	adds	r3, r7, r4
 8006374:	0011      	movs	r1, r2
 8006376:	0018      	movs	r0, r3
 8006378:	f01f fed7 	bl	802612a <strstr>
 800637c:	0003      	movs	r3, r0
 800637e:	22b6      	movs	r2, #182	@ 0xb6
 8006380:	0052      	lsls	r2, r2, #1
 8006382:	18ba      	adds	r2, r7, r2
 8006384:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8006386:	232c      	movs	r3, #44	@ 0x2c
 8006388:	18fa      	adds	r2, r7, r3
 800638a:	193b      	adds	r3, r7, r4
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f01f fecb 	bl	802612a <strstr>
 8006394:	0003      	movs	r3, r0
 8006396:	22b4      	movs	r2, #180	@ 0xb4
 8006398:	0052      	lsls	r2, r2, #1
 800639a:	18ba      	adds	r2, r7, r2
 800639c:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSID);
 800639e:	4a40      	ldr	r2, [pc, #256]	@ (80064a0 <ParseBuffer+0x340>)
 80063a0:	193b      	adds	r3, r7, r4
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f01f fec0 	bl	802612a <strstr>
 80063aa:	0003      	movs	r3, r0
 80063ac:	22b2      	movs	r2, #178	@ 0xb2
 80063ae:	0052      	lsls	r2, r2, #1
 80063b0:	18ba      	adds	r2, r7, r2
 80063b2:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80063b4:	2348      	movs	r3, #72	@ 0x48
 80063b6:	18fa      	adds	r2, r7, r3
 80063b8:	193b      	adds	r3, r7, r4
 80063ba:	0011      	movs	r1, r2
 80063bc:	0018      	movs	r0, r3
 80063be:	f01f feb4 	bl	802612a <strstr>
 80063c2:	0003      	movs	r3, r0
 80063c4:	22b0      	movs	r2, #176	@ 0xb0
 80063c6:	0052      	lsls	r2, r2, #1
 80063c8:	18ba      	adds	r2, r7, r2
 80063ca:	6013      	str	r3, [r2, #0]
  char *ParsePoint6 = strstr(tempBuf, MAIL_API);
 80063cc:	230c      	movs	r3, #12
 80063ce:	18fa      	adds	r2, r7, r3
 80063d0:	193b      	adds	r3, r7, r4
 80063d2:	0011      	movs	r1, r2
 80063d4:	0018      	movs	r0, r3
 80063d6:	f01f fea8 	bl	802612a <strstr>
 80063da:	0003      	movs	r3, r0
 80063dc:	22ae      	movs	r2, #174	@ 0xae
 80063de:	0052      	lsls	r2, r2, #1
 80063e0:	18ba      	adds	r2, r7, r2
 80063e2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80063e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <ParseBuffer+0x2f4>)
 80063e6:	21bc      	movs	r1, #188	@ 0xbc
 80063e8:	0049      	lsls	r1, r1, #1
 80063ea:	185b      	adds	r3, r3, r1
 80063ec:	19db      	adds	r3, r3, r7
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d800      	bhi.n	80063f6 <ParseBuffer+0x296>
 80063f4:	e0c5      	b.n	8006582 <ParseBuffer+0x422>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80063f6:	22b8      	movs	r2, #184	@ 0xb8
 80063f8:	0052      	lsls	r2, r2, #1
 80063fa:	18bb      	adds	r3, r7, r2
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d056      	beq.n	80064b0 <ParseBuffer+0x350>
 8006402:	18bb      	adds	r3, r7, r2
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b4f      	cmp	r3, #79	@ 0x4f
 800640a:	d151      	bne.n	80064b0 <ParseBuffer+0x350>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800640c:	2378      	movs	r3, #120	@ 0x78
 800640e:	33ff      	adds	r3, #255	@ 0xff
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8006416:	4b23      	ldr	r3, [pc, #140]	@ (80064a4 <ParseBuffer+0x344>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b12      	cmp	r3, #18
 800641c:	d148      	bne.n	80064b0 <ParseBuffer+0x350>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800641e:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <ParseBuffer+0x2f4>)
 8006420:	185b      	adds	r3, r3, r1
 8006422:	19db      	adds	r3, r3, r7
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b2b      	cmp	r3, #43	@ 0x2b
 8006428:	d10b      	bne.n	8006442 <ParseBuffer+0x2e2>
 800642a:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <ParseBuffer+0x2fc>)
 800642c:	185b      	adds	r3, r3, r1
 800642e:	19db      	adds	r3, r3, r7
 8006430:	2221      	movs	r2, #33	@ 0x21
 8006432:	5c9b      	ldrb	r3, [r3, r2]
 8006434:	2b32      	cmp	r3, #50	@ 0x32
 8006436:	d104      	bne.n	8006442 <ParseBuffer+0x2e2>
          ParseTime(tempBuf);
 8006438:	193b      	adds	r3, r7, r4
 800643a:	0018      	movs	r0, r3
 800643c:	f003 fb8c 	bl	8009b58 <ParseTime>
 8006440:	e036      	b.n	80064b0 <ParseBuffer+0x350>
        }
        else {
          Error("Error getting time");
 8006442:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <ParseBuffer+0x348>)
 8006444:	4b19      	ldr	r3, [pc, #100]	@ (80064ac <ParseBuffer+0x34c>)
 8006446:	0019      	movs	r1, r3
 8006448:	2001      	movs	r0, #1
 800644a:	f00d fb3f 	bl	8013acc <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800644e:	2306      	movs	r3, #6
 8006450:	e09b      	b.n	800658a <ParseBuffer+0x42a>
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	fffffe8a 	.word	0xfffffe8a
 8006458:	fffffe89 	.word	0xfffffe89
 800645c:	fffffee4 	.word	0xfffffee4
 8006460:	0802ab10 	.word	0x0802ab10
 8006464:	fffffee0 	.word	0xfffffee0
 8006468:	0802ab3c 	.word	0x0802ab3c
 800646c:	fffffed8 	.word	0xfffffed8
 8006470:	0802ab40 	.word	0x0802ab40
 8006474:	fffffed0 	.word	0xfffffed0
 8006478:	4c494146 	.word	0x4c494146
 800647c:	fffffec8 	.word	0xfffffec8
 8006480:	0802ab48 	.word	0x0802ab48
 8006484:	fffffec4 	.word	0xfffffec4
 8006488:	fffffeb4 	.word	0xfffffeb4
 800648c:	0802ab50 	.word	0x0802ab50
 8006490:	fffffea4 	.word	0xfffffea4
 8006494:	0802ab60 	.word	0x0802ab60
 8006498:	fffffe94 	.word	0xfffffe94
 800649c:	0802ab70 	.word	0x0802ab70
 80064a0:	0802dd68 	.word	0x0802dd68
 80064a4:	200006ae 	.word	0x200006ae
 80064a8:	0802ab28 	.word	0x0802ab28
 80064ac:	0802a530 	.word	0x0802a530
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80064b0:	22b8      	movs	r2, #184	@ 0xb8
 80064b2:	0052      	lsls	r2, r2, #1
 80064b4:	18bb      	adds	r3, r7, r2
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <ParseBuffer+0x370>
 80064bc:	18bb      	adds	r3, r7, r2
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b72      	cmp	r3, #114	@ 0x72
 80064c4:	d104      	bne.n	80064d0 <ParseBuffer+0x370>
      status = RECEIVE_STATUS_READY;
 80064c6:	2378      	movs	r3, #120	@ 0x78
 80064c8:	33ff      	adds	r3, #255	@ 0xff
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	2202      	movs	r2, #2
 80064ce:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80064d0:	22b8      	movs	r2, #184	@ 0xb8
 80064d2:	0052      	lsls	r2, r2, #1
 80064d4:	18bb      	adds	r3, r7, r2
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <ParseBuffer+0x390>
 80064dc:	18bb      	adds	r3, r7, r2
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e4:	d104      	bne.n	80064f0 <ParseBuffer+0x390>
      status = RECEIVE_STATUS_START;
 80064e6:	2378      	movs	r3, #120	@ 0x78
 80064e8:	33ff      	adds	r3, #255	@ 0xff
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	2205      	movs	r2, #5
 80064ee:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80064f0:	22b8      	movs	r2, #184	@ 0xb8
 80064f2:	0052      	lsls	r2, r2, #1
 80064f4:	18bb      	adds	r3, r7, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <ParseBuffer+0x3b0>
 80064fc:	18bb      	adds	r3, r7, r2
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b2b      	cmp	r3, #43	@ 0x2b
 8006504:	d104      	bne.n	8006510 <ParseBuffer+0x3b0>
      status = RECEIVE_STATUS_TIME;
 8006506:	2378      	movs	r3, #120	@ 0x78
 8006508:	33ff      	adds	r3, #255	@ 0xff
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	220b      	movs	r2, #11
 800650e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006510:	22b6      	movs	r2, #182	@ 0xb6
 8006512:	0052      	lsls	r2, r2, #1
 8006514:	18bb      	adds	r3, r7, r2
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <ParseBuffer+0x3c6>
 800651c:	18bb      	adds	r3, r7, r2
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b45      	cmp	r3, #69	@ 0x45
 8006524:	d00a      	beq.n	800653c <ParseBuffer+0x3dc>
 8006526:	22b0      	movs	r2, #176	@ 0xb0
 8006528:	0052      	lsls	r2, r2, #1
 800652a:	18bb      	adds	r3, r7, r2
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <ParseBuffer+0x3e6>
 8006532:	18bb      	adds	r3, r7, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b46      	cmp	r3, #70	@ 0x46
 800653a:	d104      	bne.n	8006546 <ParseBuffer+0x3e6>
      status = RECEIVE_STATUS_ERROR;
 800653c:	2378      	movs	r3, #120	@ 0x78
 800653e:	33ff      	adds	r3, #255	@ 0xff
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006546:	22b4      	movs	r2, #180	@ 0xb4
 8006548:	0052      	lsls	r2, r2, #1
 800654a:	18bb      	adds	r3, r7, r2
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <ParseBuffer+0x402>
 8006552:	18bb      	adds	r3, r7, r2
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b57      	cmp	r3, #87	@ 0x57
 800655a:	d102      	bne.n	8006562 <ParseBuffer+0x402>
      ConnectionMade = true;
 800655c:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <ParseBuffer+0x434>)
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
#ifdef USE_MAIL
    if(ParsePoint6 != 0 && *ParsePoint6 == '{'){
 8006562:	22ae      	movs	r2, #174	@ 0xae
 8006564:	0052      	lsls	r2, r2, #1
 8006566:	18bb      	adds	r3, r7, r2
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <ParseBuffer+0x422>
 800656e:	18bb      	adds	r3, r7, r2
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b7b      	cmp	r3, #123	@ 0x7b
 8006576:	d104      	bne.n	8006582 <ParseBuffer+0x422>
      status = RECEIVE_STATUS_MAIL_API;
 8006578:	2378      	movs	r3, #120	@ 0x78
 800657a:	33ff      	adds	r3, #255	@ 0xff
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	220c      	movs	r2, #12
 8006580:	701a      	strb	r2, [r3, #0]
    }
#endif
  }
  return(status);
 8006582:	2378      	movs	r3, #120	@ 0x78
 8006584:	33ff      	adds	r3, #255	@ 0xff
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]

}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b05f      	add	sp, #380	@ 0x17c
 8006590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	200005b0 	.word	0x200005b0

08006598 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800659e:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <PollAwake+0x34>)
 80065a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7f9 fde1 	bl	800016c <strlen>
 80065aa:	0003      	movs	r3, r0
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0011      	movs	r1, r2
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7fe fc56 	bl	8004e64 <ESP_Send>
 80065b8:	1e03      	subs	r3, r0, #0
 80065ba:	d001      	beq.n	80065c0 <PollAwake+0x28>
    return true;
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <PollAwake+0x2a>
  }
  else{
    return false;
 80065c0:	2300      	movs	r3, #0
  }
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	0802ab80 	.word	0x0802ab80

080065d0 <RFPower>:

bool RFPower(){
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <RFPower+0x34>)
 80065d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0018      	movs	r0, r3
 80065de:	f7f9 fdc5 	bl	800016c <strlen>
 80065e2:	0003      	movs	r3, r0
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7fe fc3a 	bl	8004e64 <ESP_Send>
 80065f0:	1e03      	subs	r3, r0, #0
 80065f2:	d001      	beq.n	80065f8 <RFPower+0x28>
    return true;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <RFPower+0x2a>
  }
  else{
    return false;
 80065f8:	2300      	movs	r3, #0
  }
}
 80065fa:	0018      	movs	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b002      	add	sp, #8
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			@ (mov r8, r8)
 8006604:	0802ab88 	.word	0x0802ab88

08006608 <CheckRFPower>:

bool CheckRFPower(){
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800660e:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <CheckRFPower+0x34>)
 8006610:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0018      	movs	r0, r3
 8006616:	f7f9 fda9 	bl	800016c <strlen>
 800661a:	0003      	movs	r3, r0
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0011      	movs	r1, r2
 8006622:	0018      	movs	r0, r3
 8006624:	f7fe fc1e 	bl	8004e64 <ESP_Send>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d001      	beq.n	8006630 <CheckRFPower+0x28>
    return true;
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006630:	2300      	movs	r3, #0
  }
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	0802ab98 	.word	0x0802ab98

08006640 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <ATRestore+0x34>)
 8006648:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0018      	movs	r0, r3
 800664e:	f7f9 fd8d 	bl	800016c <strlen>
 8006652:	0003      	movs	r3, r0
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f7fe fc02 	bl	8004e64 <ESP_Send>
 8006660:	1e03      	subs	r3, r0, #0
 8006662:	d001      	beq.n	8006668 <ATRestore+0x28>
    return true;
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <ATRestore+0x2a>
  }
  else{
    return false;
 8006668:	2300      	movs	r3, #0
  }
}
 800666a:	0018      	movs	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	b002      	add	sp, #8
 8006670:	bd80      	pop	{r7, pc}
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	0802aba8 	.word	0x0802aba8

08006678 <CWINIT>:

bool CWINIT(){
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <CWINIT+0x34>)
 8006680:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f7f9 fd71 	bl	800016c <strlen>
 800668a:	0003      	movs	r3, r0
 800668c:	b29a      	uxth	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	0011      	movs	r1, r2
 8006692:	0018      	movs	r0, r3
 8006694:	f7fe fbe6 	bl	8004e64 <ESP_Send>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d001      	beq.n	80066a0 <CWINIT+0x28>
    return true;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <CWINIT+0x2a>
  }
  else{
    return false;
 80066a0:	2300      	movs	r3, #0
  }
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b002      	add	sp, #8
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	0802abb8 	.word	0x0802abb8

080066b0 <CWMODE1>:

bool CWMODE1(){
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80066b6:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <CWMODE1+0x34>)
 80066b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0018      	movs	r0, r3
 80066be:	f7f9 fd55 	bl	800016c <strlen>
 80066c2:	0003      	movs	r3, r0
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	0011      	movs	r1, r2
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7fe fbca 	bl	8004e64 <ESP_Send>
 80066d0:	1e03      	subs	r3, r0, #0
 80066d2:	d001      	beq.n	80066d8 <CWMODE1+0x28>
    return true;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <CWMODE1+0x2a>
  }
  else{
    return false;
 80066d8:	2300      	movs	r3, #0
  }
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b002      	add	sp, #8
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	0802abc8 	.word	0x0802abc8

080066e8 <CWMODE2>:

bool CWMODE2(){
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <CWMODE2+0x34>)
 80066f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7f9 fd39 	bl	800016c <strlen>
 80066fa:	0003      	movs	r3, r0
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	0011      	movs	r1, r2
 8006702:	0018      	movs	r0, r3
 8006704:	f7fe fbae 	bl	8004e64 <ESP_Send>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d001      	beq.n	8006710 <CWMODE2+0x28>
    return true;
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006710:	2300      	movs	r3, #0
  }
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b002      	add	sp, #8
 8006718:	bd80      	pop	{r7, pc}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	0802abd8 	.word	0x0802abd8

08006720 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006726:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <CWAUTOCONN+0x34>)
 8006728:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0018      	movs	r0, r3
 800672e:	f7f9 fd1d 	bl	800016c <strlen>
 8006732:	0003      	movs	r3, r0
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0011      	movs	r1, r2
 800673a:	0018      	movs	r0, r3
 800673c:	f7fe fb92 	bl	8004e64 <ESP_Send>
 8006740:	1e03      	subs	r3, r0, #0
 8006742:	d001      	beq.n	8006748 <CWAUTOCONN+0x28>
    return true;
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006748:	2300      	movs	r3, #0
  }
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b002      	add	sp, #8
 8006750:	bd80      	pop	{r7, pc}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	0802abe8 	.word	0x0802abe8

08006758 <CWJAP>:

bool CWJAP(){
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	46c6      	mov	lr, r8
 800675c:	b500      	push	{lr}
 800675e:	b0a2      	sub	sp, #136	@ 0x88
 8006760:	af00      	add	r7, sp, #0
 8006762:	466b      	mov	r3, sp
 8006764:	4698      	mov	r8, r3
  APtested = true;
 8006766:	4b39      	ldr	r3, [pc, #228]	@ (800684c <CWJAP+0xf4>)
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800676c:	2618      	movs	r6, #24
 800676e:	19bb      	adds	r3, r7, r6
 8006770:	2264      	movs	r2, #100	@ 0x64
 8006772:	2100      	movs	r1, #0
 8006774:	0018      	movs	r0, r3
 8006776:	f01f fc9d 	bl	80260b4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, WLANPassword);
 800677a:	4b35      	ldr	r3, [pc, #212]	@ (8006850 <CWJAP+0xf8>)
 800677c:	4a35      	ldr	r2, [pc, #212]	@ (8006854 <CWJAP+0xfc>)
 800677e:	4936      	ldr	r1, [pc, #216]	@ (8006858 <CWJAP+0x100>)
 8006780:	19b8      	adds	r0, r7, r6
 8006782:	f01f fb2d 	bl	8025de0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006786:	19bb      	adds	r3, r7, r6
 8006788:	0018      	movs	r0, r3
 800678a:	f7f9 fcef 	bl	800016c <strlen>
 800678e:	0002      	movs	r2, r0
 8006790:	216f      	movs	r1, #111	@ 0x6f
 8006792:	0030      	movs	r0, r6
 8006794:	180b      	adds	r3, r1, r0
 8006796:	19db      	adds	r3, r3, r7
 8006798:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800679a:	180b      	adds	r3, r1, r0
 800679c:	19db      	adds	r3, r3, r7
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	1e5a      	subs	r2, r3, #1
 80067a4:	2180      	movs	r1, #128	@ 0x80
 80067a6:	1879      	adds	r1, r7, r1
 80067a8:	600a      	str	r2, [r1, #0]
 80067aa:	001a      	movs	r2, r3
 80067ac:	60ba      	str	r2, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	60fa      	str	r2, [r7, #12]
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	0002      	movs	r2, r0
 80067b8:	0f52      	lsrs	r2, r2, #29
 80067ba:	000e      	movs	r6, r1
 80067bc:	00f6      	lsls	r6, r6, #3
 80067be:	617e      	str	r6, [r7, #20]
 80067c0:	697e      	ldr	r6, [r7, #20]
 80067c2:	4316      	orrs	r6, r2
 80067c4:	617e      	str	r6, [r7, #20]
 80067c6:	0002      	movs	r2, r0
 80067c8:	00d2      	lsls	r2, r2, #3
 80067ca:	613a      	str	r2, [r7, #16]
 80067cc:	001a      	movs	r2, r3
 80067ce:	603a      	str	r2, [r7, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	6838      	ldr	r0, [r7, #0]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	0002      	movs	r2, r0
 80067da:	0f52      	lsrs	r2, r2, #29
 80067dc:	000e      	movs	r6, r1
 80067de:	00f5      	lsls	r5, r6, #3
 80067e0:	4315      	orrs	r5, r2
 80067e2:	0002      	movs	r2, r0
 80067e4:	00d4      	lsls	r4, r2, #3
 80067e6:	3307      	adds	r3, #7
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	466a      	mov	r2, sp
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	469d      	mov	sp, r3
 80067f2:	466b      	mov	r3, sp
 80067f4:	3300      	adds	r3, #0
 80067f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80067f8:	246f      	movs	r4, #111	@ 0x6f
 80067fa:	2518      	movs	r5, #24
 80067fc:	1963      	adds	r3, r4, r5
 80067fe:	19db      	adds	r3, r3, r7
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	001a      	movs	r2, r3
 8006806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006808:	2100      	movs	r1, #0
 800680a:	0018      	movs	r0, r3
 800680c:	f01f fc52 	bl	80260b4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006810:	1963      	adds	r3, r4, r5
 8006812:	19db      	adds	r3, r3, r7
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	1979      	adds	r1, r7, r5
 8006818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800681a:	0018      	movs	r0, r3
 800681c:	f01f fc71 	bl	8026102 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8006820:	1963      	adds	r3, r4, r5
 8006822:	19db      	adds	r3, r3, r7
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b29a      	uxth	r2, r3
 8006828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800682a:	0011      	movs	r1, r2
 800682c:	0018      	movs	r0, r3
 800682e:	f7fe fb19 	bl	8004e64 <ESP_Send>
 8006832:	1e03      	subs	r3, r0, #0
 8006834:	d001      	beq.n	800683a <CWJAP+0xe2>
    return true;
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <CWJAP+0xe4>
  }
  else{
    return false;
 800683a:	2300      	movs	r3, #0
 800683c:	46c5      	mov	sp, r8
  }
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b022      	add	sp, #136	@ 0x88
 8006844:	bc80      	pop	{r7}
 8006846:	46b8      	mov	r8, r7
 8006848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	200005b1 	.word	0x200005b1
 8006850:	0802dd74 	.word	0x0802dd74
 8006854:	0802dd68 	.word	0x0802dd68
 8006858:	0802abfc 	.word	0x0802abfc

0800685c <CWMODE3>:

bool CWMODE3(){
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006862:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <CWMODE3+0x34>)
 8006864:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0018      	movs	r0, r3
 800686a:	f7f9 fc7f 	bl	800016c <strlen>
 800686e:	0003      	movs	r3, r0
 8006870:	b29a      	uxth	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0011      	movs	r1, r2
 8006876:	0018      	movs	r0, r3
 8006878:	f7fe faf4 	bl	8004e64 <ESP_Send>
 800687c:	1e03      	subs	r3, r0, #0
 800687e:	d001      	beq.n	8006884 <CWMODE3+0x28>
    return true;
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <CWMODE3+0x2a>
  }
  else{
    return false;
 8006884:	2300      	movs	r3, #0
  }
}
 8006886:	0018      	movs	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	b002      	add	sp, #8
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	0802ac14 	.word	0x0802ac14

08006894 <CWSTATE>:

bool CWSTATE(){
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800689a:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <CWSTATE+0x34>)
 800689c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f7f9 fc63 	bl	800016c <strlen>
 80068a6:	0003      	movs	r3, r0
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7fe fad8 	bl	8004e64 <ESP_Send>
 80068b4:	1e03      	subs	r3, r0, #0
 80068b6:	d001      	beq.n	80068bc <CWSTATE+0x28>
    return true;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <CWSTATE+0x2a>
  }
  else{
    return false;
 80068bc:	2300      	movs	r3, #0
  }
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	0802ac24 	.word	0x0802ac24

080068cc <CWSAP>:

bool CWSAP(){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <CWSAP+0x34>)
 80068d4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0018      	movs	r0, r3
 80068da:	f7f9 fc47 	bl	800016c <strlen>
 80068de:	0003      	movs	r3, r0
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7fe fabc 	bl	8004e64 <ESP_Send>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d001      	beq.n	80068f4 <CWSAP+0x28>
    return true;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <CWSAP+0x2a>
  }
  else{
    return false;
 80068f4:	2300      	movs	r3, #0
  }
}
 80068f6:	0018      	movs	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b002      	add	sp, #8
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	0802ac34 	.word	0x0802ac34

08006904 <CIPMUX>:

bool CIPMUX(){
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800690a:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <CIPMUX+0x34>)
 800690c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f7f9 fc2b 	bl	800016c <strlen>
 8006916:	0003      	movs	r3, r0
 8006918:	b29a      	uxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0011      	movs	r1, r2
 800691e:	0018      	movs	r0, r3
 8006920:	f7fe faa0 	bl	8004e64 <ESP_Send>
 8006924:	1e03      	subs	r3, r0, #0
 8006926:	d001      	beq.n	800692c <CIPMUX+0x28>
    return true;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <CIPMUX+0x2a>
  }
  else{
    return false;
 800692c:	2300      	movs	r3, #0
  }
}
 800692e:	0018      	movs	r0, r3
 8006930:	46bd      	mov	sp, r7
 8006932:	b002      	add	sp, #8
 8006934:	bd80      	pop	{r7, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	0802ac58 	.word	0x0802ac58

0800693c <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006942:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <WEBSERVER+0x34>)
 8006944:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0018      	movs	r0, r3
 800694a:	f7f9 fc0f 	bl	800016c <strlen>
 800694e:	0003      	movs	r3, r0
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	0011      	movs	r1, r2
 8006956:	0018      	movs	r0, r3
 8006958:	f7fe fa84 	bl	8004e64 <ESP_Send>
 800695c:	1e03      	subs	r3, r0, #0
 800695e:	d001      	beq.n	8006964 <WEBSERVER+0x28>
    return true;
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006964:	2300      	movs	r3, #0
  }
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b002      	add	sp, #8
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	0802ac68 	.word	0x0802ac68

08006974 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006974:	b5b0      	push	{r4, r5, r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af02      	add	r7, sp, #8
  bool txresult = false;
 800697a:	1cfb      	adds	r3, r7, #3
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]

  uint16_t length = CreateMessage(&txresult, false);
 8006980:	1dbc      	adds	r4, r7, #6
 8006982:	1cfb      	adds	r3, r7, #3
 8006984:	2100      	movs	r1, #0
 8006986:	0018      	movs	r0, r3
 8006988:	f7fe fd12 	bl	80053b0 <CreateMessage>
 800698c:	0003      	movs	r3, r0
 800698e:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[25];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006990:	4b1d      	ldr	r3, [pc, #116]	@ (8006a08 <HTTPCPOST+0x94>)
 8006992:	481e      	ldr	r0, [pc, #120]	@ (8006a0c <HTTPCPOST+0x98>)
 8006994:	220c      	movs	r2, #12
 8006996:	0019      	movs	r1, r3
 8006998:	f005 fa90 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 800699c:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <HTTPCPOST+0x94>)
 800699e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a10 <HTTPCPOST+0x9c>)
 80069a0:	0011      	movs	r1, r2
 80069a2:	0018      	movs	r0, r3
 80069a4:	f7fe fc3c 	bl	8005220 <uint8ArrayToString>
  sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
 80069a8:	1dbb      	adds	r3, r7, #6
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	4d18      	ldr	r5, [pc, #96]	@ (8006a10 <HTTPCPOST+0x9c>)
 80069ae:	4c19      	ldr	r4, [pc, #100]	@ (8006a14 <HTTPCPOST+0xa0>)
 80069b0:	4919      	ldr	r1, [pc, #100]	@ (8006a18 <HTTPCPOST+0xa4>)
 80069b2:	481a      	ldr	r0, [pc, #104]	@ (8006a1c <HTTPCPOST+0xa8>)
 80069b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a20 <HTTPCPOST+0xac>)
 80069b6:	9201      	str	r2, [sp, #4]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	002b      	movs	r3, r5
 80069bc:	0022      	movs	r2, r4
 80069be:	f01f fa0f 	bl	8025de0 <siprintf>
  uint16_t len = strlen(message);
 80069c2:	4b16      	ldr	r3, [pc, #88]	@ (8006a1c <HTTPCPOST+0xa8>)
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7f9 fbd1 	bl	800016c <strlen>
 80069ca:	0002      	movs	r2, r0
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d, bool value of tx result %d", len, txresult);
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	8818      	ldrh	r0, [r3, #0]
 80069d4:	1cfb      	adds	r3, r7, #3
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4a12      	ldr	r2, [pc, #72]	@ (8006a24 <HTTPCPOST+0xb0>)
 80069da:	4913      	ldr	r1, [pc, #76]	@ (8006a28 <HTTPCPOST+0xb4>)
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	0003      	movs	r3, r0
 80069e0:	2003      	movs	r0, #3
 80069e2:	f00d f873 	bl	8013acc <CreateLine>
  if(ESP_Send((uint8_t*)message, len)){
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <HTTPCPOST+0xa8>)
 80069ec:	0011      	movs	r1, r2
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fe fa38 	bl	8004e64 <ESP_Send>
 80069f4:	1e03      	subs	r3, r0, #0
 80069f6:	d001      	beq.n	80069fc <HTTPCPOST+0x88>
    return true;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <HTTPCPOST+0x8a>
  }
  else{
    return false;
 80069fc:	2300      	movs	r3, #0
  }
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bdb0      	pop	{r4, r5, r7, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	2000080c 	.word	0x2000080c
 8006a0c:	08080000 	.word	0x08080000
 8006a10:	20000818 	.word	0x20000818
 8006a14:	0802dd90 	.word	0x0802dd90
 8006a18:	0802ac80 	.word	0x0802ac80
 8006a1c:	200005d4 	.word	0x200005d4
 8006a20:	0802ddb8 	.word	0x0802ddb8
 8006a24:	0802aca4 	.word	0x0802aca4
 8006a28:	0802a554 	.word	0x0802a554

08006a2c <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af02      	add	r7, sp, #8
  bool result = false;
 8006a32:	1dfb      	adds	r3, r7, #7
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006a38:	1dfb      	adds	r3, r7, #7
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f7fe fc13 	bl	8005268 <CreateMailMessage>
 8006a42:	0003      	movs	r3, r0
 8006a44:	001a      	movs	r2, r3
 8006a46:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <SENDMAIL+0x44>)
 8006a48:	801a      	strh	r2, [r3, #0]
  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006a4a:	1dfb      	adds	r3, r7, #7
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	0018      	movs	r0, r3
 8006a50:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <SENDMAIL+0x44>)
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	4a07      	ldr	r2, [pc, #28]	@ (8006a74 <SENDMAIL+0x48>)
 8006a56:	4908      	ldr	r1, [pc, #32]	@ (8006a78 <SENDMAIL+0x4c>)
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	0003      	movs	r3, r0
 8006a5c:	2003      	movs	r0, #3
 8006a5e:	f00d f835 	bl	8013acc <CreateLine>
  return result;
 8006a62:	1dfb      	adds	r3, r7, #7
 8006a64:	781b      	ldrb	r3, [r3, #0]
}
 8006a66:	0018      	movs	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	200005c8 	.word	0x200005c8
 8006a74:	0802ad00 	.word	0x0802ad00
 8006a78:	0802a554 	.word	0x0802a554

08006a7c <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006a7c:	b5b0      	push	{r4, r5, r7, lr}
 8006a7e:	b090      	sub	sp, #64	@ 0x40
 8006a80:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006a82:	2133      	movs	r1, #51	@ 0x33
 8006a84:	187b      	adds	r3, r7, r1
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006a8a:	2536      	movs	r5, #54	@ 0x36
 8006a8c:	197c      	adds	r4, r7, r5
 8006a8e:	187b      	adds	r3, r7, r1
 8006a90:	2100      	movs	r1, #0
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fe fbe8 	bl	8005268 <CreateMailMessage>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006a9c:	003b      	movs	r3, r7
 8006a9e:	4814      	ldr	r0, [pc, #80]	@ (8006af0 <HTTPCPOST_MAILAPI+0x74>)
 8006aa0:	2230      	movs	r2, #48	@ 0x30
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	f005 fa0a 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, header1, (char*)MailAPIKeyConfig);
 8006aa8:	197b      	adds	r3, r7, r5
 8006aaa:	881c      	ldrh	r4, [r3, #0]
 8006aac:	4a11      	ldr	r2, [pc, #68]	@ (8006af4 <HTTPCPOST_MAILAPI+0x78>)
 8006aae:	4912      	ldr	r1, [pc, #72]	@ (8006af8 <HTTPCPOST_MAILAPI+0x7c>)
 8006ab0:	4812      	ldr	r0, [pc, #72]	@ (8006afc <HTTPCPOST_MAILAPI+0x80>)
 8006ab2:	003b      	movs	r3, r7
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	4b12      	ldr	r3, [pc, #72]	@ (8006b00 <HTTPCPOST_MAILAPI+0x84>)
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	0023      	movs	r3, r4
 8006abc:	f01f f990 	bl	8025de0 <siprintf>
  uint16_t len = strlen(message);
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8006afc <HTTPCPOST_MAILAPI+0x80>)
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7f9 fb52 	bl	800016c <strlen>
 8006ac8:	0002      	movs	r2, r0
 8006aca:	2134      	movs	r1, #52	@ 0x34
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <HTTPCPOST_MAILAPI+0x80>)
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7fe f9c3 	bl	8004e64 <ESP_Send>
 8006ade:	1e03      	subs	r3, r0, #0
 8006ae0:	d001      	beq.n	8006ae6 <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	0018      	movs	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b00e      	add	sp, #56	@ 0x38
 8006aee:	bdb0      	pop	{r4, r5, r7, pc}
 8006af0:	080801e8 	.word	0x080801e8
 8006af4:	0802dddc 	.word	0x0802dddc
 8006af8:	0802ad3c 	.word	0x0802ad3c
 8006afc:	200005d4 	.word	0x200005d4
 8006b00:	0802ddb8 	.word	0x0802ddb8

08006b04 <SENDDATA>:
#endif

bool SENDDATA(){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af02      	add	r7, sp, #8
  bool result = false;
 8006b0a:	1dfb      	adds	r3, r7, #7
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006b10:	1dfb      	adds	r3, r7, #7
 8006b12:	2101      	movs	r1, #1
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fe fc4b 	bl	80053b0 <CreateMessage>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	001a      	movs	r2, r3
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <SENDDATA+0x44>)
 8006b20:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006b22:	1dfb      	adds	r3, r7, #7
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	0018      	movs	r0, r3
 8006b28:	4b07      	ldr	r3, [pc, #28]	@ (8006b48 <SENDDATA+0x44>)
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	4a07      	ldr	r2, [pc, #28]	@ (8006b4c <SENDDATA+0x48>)
 8006b2e:	4908      	ldr	r1, [pc, #32]	@ (8006b50 <SENDDATA+0x4c>)
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	0003      	movs	r3, r0
 8006b34:	2003      	movs	r0, #3
 8006b36:	f00c ffc9 	bl	8013acc <CreateLine>
  return result;
 8006b3a:	1dfb      	adds	r3, r7, #7
 8006b3c:	781b      	ldrb	r3, [r3, #0]
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b002      	add	sp, #8
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	46c0      	nop			@ (mov r8, r8)
 8006b48:	200005c8 	.word	0x200005c8
 8006b4c:	0802ad8c 	.word	0x0802ad8c
 8006b50:	0802a554 	.word	0x0802a554

08006b54 <SLEEP>:

bool SLEEP(){
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b88 <SLEEP+0x34>)
 8006b5c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7f9 fb03 	bl	800016c <strlen>
 8006b66:	0003      	movs	r3, r0
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0011      	movs	r1, r2
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f7fe f978 	bl	8004e64 <ESP_Send>
 8006b74:	1e03      	subs	r3, r0, #0
 8006b76:	d001      	beq.n	8006b7c <SLEEP+0x28>
    return true;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <SLEEP+0x2a>
  }
  else{
    return false;
 8006b7c:	2300      	movs	r3, #0
  }
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b002      	add	sp, #8
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	0802adc8 	.word	0x0802adc8

08006b8c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <CIPSNTPCFG+0x3c>)
 8006b94:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7f9 fae7 	bl	800016c <strlen>
 8006b9e:	0003      	movs	r3, r0
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0011      	movs	r1, r2
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7fe f95c 	bl	8004e64 <ESP_Send>
 8006bac:	1e03      	subs	r3, r0, #0
 8006bae:	d006      	beq.n	8006bbe <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006bb0:	23fa      	movs	r3, #250	@ 0xfa
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f00d fcd3 	bl	8014560 <HAL_Delay>
    return true;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006bbe:	2300      	movs	r3, #0
  }
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	0802add8 	.word	0x0802add8

08006bcc <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <CIPSNTPTIME+0x34>)
 8006bd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7f9 fac7 	bl	800016c <strlen>
 8006bde:	0003      	movs	r3, r0
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7fe f93c 	bl	8004e64 <ESP_Send>
 8006bec:	1e03      	subs	r3, r0, #0
 8006bee:	d001      	beq.n	8006bf4 <CIPSNTPTIME+0x28>
    return true;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006bf4:	2300      	movs	r3, #0
  }
}
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	0802ae28 	.word	0x0802ae28

08006c04 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <CIPSNTPINTV+0x34>)
 8006c0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7f9 faab 	bl	800016c <strlen>
 8006c16:	0003      	movs	r3, r0
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fe f920 	bl	8004e64 <ESP_Send>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <CIPSNTPINTV+0x28>
    return true;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006c2c:	2300      	movs	r3, #0
  }
}
 8006c2e:	0018      	movs	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b002      	add	sp, #8
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	0802ae3c 	.word	0x0802ae3c

08006c3c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006c3c:	b5b0      	push	{r4, r5, r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	0002      	movs	r2, r0
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006c48:	4b6c      	ldr	r3, [pc, #432]	@ (8006dfc <DMA_ProcessBuffer+0x1c0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	200e      	movs	r0, #14
 8006c52:	183b      	adds	r3, r7, r0
 8006c54:	2180      	movs	r1, #128	@ 0x80
 8006c56:	0049      	lsls	r1, r1, #1
 8006c58:	1a8a      	subs	r2, r1, r2
 8006c5a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006c5c:	230d      	movs	r3, #13
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	2203      	movs	r2, #3
 8006c62:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006c64:	183b      	adds	r3, r7, r0
 8006c66:	881a      	ldrh	r2, [r3, #0]
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d903      	bls.n	8006c78 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006c70:	183b      	adds	r3, r7, r0
 8006c72:	2280      	movs	r2, #128	@ 0x80
 8006c74:	0052      	lsls	r2, r2, #1
 8006c76:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006c78:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	001a      	movs	r2, r3
 8006c80:	230e      	movs	r3, #14
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d131      	bne.n	8006cee <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8006e04 <DMA_ProcessBuffer+0x1c8>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b14      	cmp	r3, #20
 8006c90:	d91b      	bls.n	8006cca <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006c92:	4b5c      	ldr	r3, [pc, #368]	@ (8006e04 <DMA_ProcessBuffer+0x1c8>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006c98:	4b5b      	ldr	r3, [pc, #364]	@ (8006e08 <DMA_ProcessBuffer+0x1cc>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d107      	bne.n	8006cb0 <DMA_ProcessBuffer+0x74>
 8006ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e0c <DMA_ProcessBuffer+0x1d0>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006ca8:	230d      	movs	r3, #13
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	2207      	movs	r2, #7
 8006cae:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006cb0:	4b55      	ldr	r3, [pc, #340]	@ (8006e08 <DMA_ProcessBuffer+0x1cc>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d103      	bne.n	8006cc0 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006cb8:	4b55      	ldr	r3, [pc, #340]	@ (8006e10 <DMA_ProcessBuffer+0x1d4>)
 8006cba:	220b      	movs	r2, #11
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e016      	b.n	8006cee <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006cc0:	230d      	movs	r3, #13
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	2206      	movs	r2, #6
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e011      	b.n	8006cee <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006cca:	4b4e      	ldr	r3, [pc, #312]	@ (8006e04 <DMA_ProcessBuffer+0x1c8>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006e04 <DMA_ProcessBuffer+0x1c8>)
 8006cd4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006cd6:	f00d fc39 	bl	801454c <HAL_GetTick>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	33f5      	adds	r3, #245	@ 0xf5
 8006cde:	33ff      	adds	r3, #255	@ 0xff
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8006e14 <DMA_ProcessBuffer+0x1d8>)
 8006ce4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006ce6:	230d      	movs	r3, #13
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	2204      	movs	r2, #4
 8006cec:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006cee:	4b44      	ldr	r3, [pc, #272]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	001a      	movs	r2, r3
 8006cf6:	210e      	movs	r1, #14
 8006cf8:	187b      	adds	r3, r7, r1
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <DMA_ProcessBuffer+0xc6>
 8006d00:	e075      	b.n	8006dee <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006d02:	4b40      	ldr	r3, [pc, #256]	@ (8006e04 <DMA_ProcessBuffer+0x1c8>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006d08:	4b43      	ldr	r3, [pc, #268]	@ (8006e18 <DMA_ProcessBuffer+0x1dc>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d109      	bne.n	8006d2c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e18 <DMA_ProcessBuffer+0x1dc>)
 8006d20:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006d22:	230d      	movs	r3, #13
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	220a      	movs	r2, #10
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	e060      	b.n	8006dee <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e18 <DMA_ProcessBuffer+0x1dc>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	001a      	movs	r2, r3
 8006d34:	210e      	movs	r1, #14
 8006d36:	187b      	adds	r3, r7, r1
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <DMA_ProcessBuffer+0x1dc>)
 8006d46:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006d48:	230d      	movs	r3, #13
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e04d      	b.n	8006dee <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006d52:	4b2b      	ldr	r3, [pc, #172]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	001a      	movs	r2, r3
 8006d5a:	210e      	movs	r1, #14
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d917      	bls.n	8006d94 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006d64:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e1c <DMA_ProcessBuffer+0x1e0>)
 8006d6e:	18d0      	adds	r0, r2, r3
 8006d70:	4b23      	ldr	r3, [pc, #140]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	001a      	movs	r2, r3
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	b299      	uxth	r1, r3
 8006d80:	230d      	movs	r3, #13
 8006d82:	18fc      	adds	r4, r7, r3
 8006d84:	1dfb      	adds	r3, r7, #7
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	001a      	movs	r2, r3
 8006d8a:	f7ff f9e9 	bl	8006160 <ParseBuffer>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	7023      	strb	r3, [r4, #0]
 8006d92:	e026      	b.n	8006de2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006d94:	4b1a      	ldr	r3, [pc, #104]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8006e1c <DMA_ProcessBuffer+0x1e0>)
 8006d9e:	18d0      	adds	r0, r2, r3
 8006da0:	4b17      	ldr	r3, [pc, #92]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	001a      	movs	r2, r3
 8006da8:	2380      	movs	r3, #128	@ 0x80
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	1a9b      	subs	r3, r3, r2
 8006dae:	b299      	uxth	r1, r3
 8006db0:	250d      	movs	r5, #13
 8006db2:	197c      	adds	r4, r7, r5
 8006db4:	1dfb      	adds	r3, r7, #7
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	001a      	movs	r2, r3
 8006dba:	f7ff f9d1 	bl	8006160 <ParseBuffer>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006dc2:	210e      	movs	r1, #14
 8006dc4:	187b      	adds	r3, r7, r1
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006dcc:	197c      	adds	r4, r7, r5
 8006dce:	1dfb      	adds	r3, r7, #7
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	8819      	ldrh	r1, [r3, #0]
 8006dd6:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <DMA_ProcessBuffer+0x1e0>)
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7ff f9c1 	bl	8006160 <ParseBuffer>
 8006dde:	0003      	movs	r3, r0
 8006de0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006de2:	230e      	movs	r3, #14
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <DMA_ProcessBuffer+0x1c4>)
 8006dec:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006dee:	230d      	movs	r3, #13
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	781b      	ldrb	r3, [r3, #0]
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b004      	add	sp, #16
 8006dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfc:	200022b0 	.word	0x200022b0
 8006e00:	20000831 	.word	0x20000831
 8006e04:	200006ac 	.word	0x200006ac
 8006e08:	200006ae 	.word	0x200006ae
 8006e0c:	20000001 	.word	0x20000001
 8006e10:	20000030 	.word	0x20000030
 8006e14:	200006a4 	.word	0x200006a4
 8006e18:	20000832 	.word	0x20000832
 8006e1c:	200004ac 	.word	0x200004ac

08006e20 <clearDMABuffer>:

void clearDMABuffer(){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006e24:	2380      	movs	r3, #128	@ 0x80
 8006e26:	005a      	lsls	r2, r3, #1
 8006e28:	4b03      	ldr	r3, [pc, #12]	@ (8006e38 <clearDMABuffer+0x18>)
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f01f f941 	bl	80260b4 <memset>
}
 8006e32:	46c0      	nop			@ (mov r8, r8)
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	200004ac 	.word	0x200004ac

08006e3c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	0002      	movs	r2, r0
 8006e44:	1dfb      	adds	r3, r7, #7
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	1dbb      	adds	r3, r7, #6
 8006e4a:	1c0a      	adds	r2, r1, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006e4e:	210f      	movs	r1, #15
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006e56:	1dbb      	adds	r3, r7, #6
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006e5e:	187b      	adds	r3, r7, r1
 8006e60:	1dfa      	adds	r2, r7, #7
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	4251      	negs	r1, r2
 8006e66:	414a      	adcs	r2, r1
 8006e68:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006e6a:	1dbb      	adds	r3, r7, #6
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d107      	bne.n	8006e82 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006e72:	230f      	movs	r3, #15
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	1dfa      	adds	r2, r7, #7
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	3a02      	subs	r2, #2
 8006e7c:	4251      	negs	r1, r2
 8006e7e:	414a      	adcs	r2, r1
 8006e80:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006e82:	1dbb      	adds	r3, r7, #6
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006e8a:	230f      	movs	r3, #15
 8006e8c:	18fb      	adds	r3, r7, r3
 8006e8e:	1dfa      	adds	r2, r7, #7
 8006e90:	7812      	ldrb	r2, [r2, #0]
 8006e92:	3a05      	subs	r2, #5
 8006e94:	4251      	negs	r1, r2
 8006e96:	414a      	adcs	r2, r1
 8006e98:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006e9a:	1dbb      	adds	r3, r7, #6
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d107      	bne.n	8006eb2 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006ea2:	230f      	movs	r3, #15
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	1dfa      	adds	r2, r7, #7
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	3a0b      	subs	r2, #11
 8006eac:	4251      	negs	r1, r2
 8006eae:	414a      	adcs	r2, r1
 8006eb0:	701a      	strb	r2, [r3, #0]
  }
#ifdef USE_MAIL
  if(AT_Command_Expected == RECEIVE_EXPECTATION_MAIL_API){
 8006eb2:	1dbb      	adds	r3, r7, #6
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d107      	bne.n	8006eca <ATCompare+0x8e>
    value = (AT_Command_Received == RECEIVE_STATUS_MAIL_API);
 8006eba:	230f      	movs	r3, #15
 8006ebc:	18fb      	adds	r3, r7, r3
 8006ebe:	1dfa      	adds	r2, r7, #7
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	3a0c      	subs	r2, #12
 8006ec4:	4251      	negs	r1, r2
 8006ec6:	414a      	adcs	r2, r1
 8006ec8:	701a      	strb	r2, [r3, #0]
  }
#endif
  return(value);
 8006eca:	230f      	movs	r3, #15
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	781b      	ldrb	r3, [r3, #0]
}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b004      	add	sp, #16
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	0002      	movs	r2, r0
 8006ee0:	1dfb      	adds	r3, r7, #7
 8006ee2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006ee4:	230f      	movs	r3, #15
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006eec:	1dfb      	adds	r3, r7, #7
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b16      	cmp	r3, #22
 8006ef2:	d900      	bls.n	8006ef6 <AT_Send+0x1e>
 8006ef4:	e1c7      	b.n	8007286 <AT_Send+0x3ae>
 8006ef6:	009a      	lsls	r2, r3, #2
 8006ef8:	4be6      	ldr	r3, [pc, #920]	@ (8007294 <AT_Send+0x3bc>)
 8006efa:	18d3      	adds	r3, r2, r3
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006f00:	4be5      	ldr	r3, [pc, #916]	@ (8007298 <AT_Send+0x3c0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f00c fd8b 	bl	8013a20 <TimestampIsReached>
 8006f0a:	1e03      	subs	r3, r0, #0
 8006f0c:	d100      	bne.n	8006f10 <AT_Send+0x38>
 8006f0e:	e1b9      	b.n	8007284 <AT_Send+0x3ac>
    Debug("AT_WAKEUP");
 8006f10:	4ae2      	ldr	r2, [pc, #904]	@ (800729c <AT_Send+0x3c4>)
 8006f12:	4be3      	ldr	r3, [pc, #908]	@ (80072a0 <AT_Send+0x3c8>)
 8006f14:	0019      	movs	r1, r3
 8006f16:	2003      	movs	r0, #3
 8006f18:	f00c fdd8 	bl	8013acc <CreateLine>
    ATCommandSend = PollAwake();
 8006f1c:	230f      	movs	r3, #15
 8006f1e:	18fc      	adds	r4, r7, r3
 8006f20:	f7ff fb3a 	bl	8006598 <PollAwake>
 8006f24:	0003      	movs	r3, r0
 8006f26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f28:	f00d fb10 	bl	801454c <HAL_GetTick>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	3332      	adds	r3, #50	@ 0x32
 8006f30:	001a      	movs	r2, r3
 8006f32:	4bd9      	ldr	r3, [pc, #868]	@ (8007298 <AT_Send+0x3c0>)
 8006f34:	601a      	str	r2, [r3, #0]
  }
  break;
 8006f36:	e1a5      	b.n	8007284 <AT_Send+0x3ac>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006f38:	4ada      	ldr	r2, [pc, #872]	@ (80072a4 <AT_Send+0x3cc>)
 8006f3a:	4bd9      	ldr	r3, [pc, #868]	@ (80072a0 <AT_Send+0x3c8>)
 8006f3c:	0019      	movs	r1, r3
 8006f3e:	2003      	movs	r0, #3
 8006f40:	f00c fdc4 	bl	8013acc <CreateLine>
    ATCommandSend = RFPower();
 8006f44:	230f      	movs	r3, #15
 8006f46:	18fc      	adds	r4, r7, r3
 8006f48:	f7ff fb42 	bl	80065d0 <RFPower>
 8006f4c:	0003      	movs	r3, r0
 8006f4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f50:	f00d fafc 	bl	801454c <HAL_GetTick>
 8006f54:	0003      	movs	r3, r0
 8006f56:	330a      	adds	r3, #10
 8006f58:	001a      	movs	r2, r3
 8006f5a:	4bcf      	ldr	r3, [pc, #828]	@ (8007298 <AT_Send+0x3c0>)
 8006f5c:	601a      	str	r2, [r3, #0]
    break;
 8006f5e:	e192      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006f60:	4ad1      	ldr	r2, [pc, #836]	@ (80072a8 <AT_Send+0x3d0>)
 8006f62:	4bcf      	ldr	r3, [pc, #828]	@ (80072a0 <AT_Send+0x3c8>)
 8006f64:	0019      	movs	r1, r3
 8006f66:	2003      	movs	r0, #3
 8006f68:	f00c fdb0 	bl	8013acc <CreateLine>
    ATCommandSend = CheckRFPower();
 8006f6c:	230f      	movs	r3, #15
 8006f6e:	18fc      	adds	r4, r7, r3
 8006f70:	f7ff fb4a 	bl	8006608 <CheckRFPower>
 8006f74:	0003      	movs	r3, r0
 8006f76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f78:	f00d fae8 	bl	801454c <HAL_GetTick>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	330a      	adds	r3, #10
 8006f80:	001a      	movs	r2, r3
 8006f82:	4bc5      	ldr	r3, [pc, #788]	@ (8007298 <AT_Send+0x3c0>)
 8006f84:	601a      	str	r2, [r3, #0]
    break;
 8006f86:	e17e      	b.n	8007286 <AT_Send+0x3ae>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006f88:	4ac8      	ldr	r2, [pc, #800]	@ (80072ac <AT_Send+0x3d4>)
 8006f8a:	4bc5      	ldr	r3, [pc, #788]	@ (80072a0 <AT_Send+0x3c8>)
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	2003      	movs	r0, #3
 8006f90:	f00c fd9c 	bl	8013acc <CreateLine>
    ATCommandSend = ATRestore();
 8006f94:	230f      	movs	r3, #15
 8006f96:	18fc      	adds	r4, r7, r3
 8006f98:	f7ff fb52 	bl	8006640 <ATRestore>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006fa0:	f00d fad4 	bl	801454c <HAL_GetTick>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	3332      	adds	r3, #50	@ 0x32
 8006fa8:	001a      	movs	r2, r3
 8006faa:	4bbb      	ldr	r3, [pc, #748]	@ (8007298 <AT_Send+0x3c0>)
 8006fac:	601a      	str	r2, [r3, #0]
    break;
 8006fae:	e16a      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006fb0:	4abf      	ldr	r2, [pc, #764]	@ (80072b0 <AT_Send+0x3d8>)
 8006fb2:	4bbb      	ldr	r3, [pc, #748]	@ (80072a0 <AT_Send+0x3c8>)
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	f00c fd88 	bl	8013acc <CreateLine>
    ATCommandSend = CWINIT();
 8006fbc:	230f      	movs	r3, #15
 8006fbe:	18fc      	adds	r4, r7, r3
 8006fc0:	f7ff fb5a 	bl	8006678 <CWINIT>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006fc8:	f00d fac0 	bl	801454c <HAL_GetTick>
 8006fcc:	0003      	movs	r3, r0
 8006fce:	33f5      	adds	r3, #245	@ 0xf5
 8006fd0:	33ff      	adds	r3, #255	@ 0xff
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	4bb0      	ldr	r3, [pc, #704]	@ (8007298 <AT_Send+0x3c0>)
 8006fd6:	601a      	str	r2, [r3, #0]
    break;
 8006fd8:	e155      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006fda:	4ab6      	ldr	r2, [pc, #728]	@ (80072b4 <AT_Send+0x3dc>)
 8006fdc:	4bb0      	ldr	r3, [pc, #704]	@ (80072a0 <AT_Send+0x3c8>)
 8006fde:	0019      	movs	r1, r3
 8006fe0:	2003      	movs	r0, #3
 8006fe2:	f00c fd73 	bl	8013acc <CreateLine>
    ATCommandSend = CWSTATE();
 8006fe6:	230f      	movs	r3, #15
 8006fe8:	18fc      	adds	r4, r7, r3
 8006fea:	f7ff fc53 	bl	8006894 <CWSTATE>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006ff2:	f00d faab 	bl	801454c <HAL_GetTick>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	33f5      	adds	r3, #245	@ 0xf5
 8006ffa:	33ff      	adds	r3, #255	@ 0xff
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	4ba6      	ldr	r3, [pc, #664]	@ (8007298 <AT_Send+0x3c0>)
 8007000:	601a      	str	r2, [r3, #0]
    break;
 8007002:	e140      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8007004:	4aac      	ldr	r2, [pc, #688]	@ (80072b8 <AT_Send+0x3e0>)
 8007006:	4ba6      	ldr	r3, [pc, #664]	@ (80072a0 <AT_Send+0x3c8>)
 8007008:	0019      	movs	r1, r3
 800700a:	2003      	movs	r0, #3
 800700c:	f00c fd5e 	bl	8013acc <CreateLine>
    ATCommandSend = CWMODE1();
 8007010:	230f      	movs	r3, #15
 8007012:	18fc      	adds	r4, r7, r3
 8007014:	f7ff fb4c 	bl	80066b0 <CWMODE1>
 8007018:	0003      	movs	r3, r0
 800701a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800701c:	f00d fa96 	bl	801454c <HAL_GetTick>
 8007020:	0003      	movs	r3, r0
 8007022:	330a      	adds	r3, #10
 8007024:	001a      	movs	r2, r3
 8007026:	4b9c      	ldr	r3, [pc, #624]	@ (8007298 <AT_Send+0x3c0>)
 8007028:	601a      	str	r2, [r3, #0]
    break;
 800702a:	e12c      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 800702c:	4aa2      	ldr	r2, [pc, #648]	@ (80072b8 <AT_Send+0x3e0>)
 800702e:	4b9c      	ldr	r3, [pc, #624]	@ (80072a0 <AT_Send+0x3c8>)
 8007030:	0019      	movs	r1, r3
 8007032:	2003      	movs	r0, #3
 8007034:	f00c fd4a 	bl	8013acc <CreateLine>
    ATCommandSend = CWMODE2();
 8007038:	230f      	movs	r3, #15
 800703a:	18fc      	adds	r4, r7, r3
 800703c:	f7ff fb54 	bl	80066e8 <CWMODE2>
 8007040:	0003      	movs	r3, r0
 8007042:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007044:	f00d fa82 	bl	801454c <HAL_GetTick>
 8007048:	0003      	movs	r3, r0
 800704a:	330a      	adds	r3, #10
 800704c:	001a      	movs	r2, r3
 800704e:	4b92      	ldr	r3, [pc, #584]	@ (8007298 <AT_Send+0x3c0>)
 8007050:	601a      	str	r2, [r3, #0]
    break;
 8007052:	e118      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8007054:	4a99      	ldr	r2, [pc, #612]	@ (80072bc <AT_Send+0x3e4>)
 8007056:	4b92      	ldr	r3, [pc, #584]	@ (80072a0 <AT_Send+0x3c8>)
 8007058:	0019      	movs	r1, r3
 800705a:	2003      	movs	r0, #3
 800705c:	f00c fd36 	bl	8013acc <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8007060:	230f      	movs	r3, #15
 8007062:	18fc      	adds	r4, r7, r3
 8007064:	f7ff fb5c 	bl	8006720 <CWAUTOCONN>
 8007068:	0003      	movs	r3, r0
 800706a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800706c:	f00d fa6e 	bl	801454c <HAL_GetTick>
 8007070:	0003      	movs	r3, r0
 8007072:	330a      	adds	r3, #10
 8007074:	001a      	movs	r2, r3
 8007076:	4b88      	ldr	r3, [pc, #544]	@ (8007298 <AT_Send+0x3c0>)
 8007078:	601a      	str	r2, [r3, #0]
    break;
 800707a:	e104      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800707c:	4a90      	ldr	r2, [pc, #576]	@ (80072c0 <AT_Send+0x3e8>)
 800707e:	4b88      	ldr	r3, [pc, #544]	@ (80072a0 <AT_Send+0x3c8>)
 8007080:	0019      	movs	r1, r3
 8007082:	2003      	movs	r0, #3
 8007084:	f00c fd22 	bl	8013acc <CreateLine>
    ATCommandSend = CWJAP();
 8007088:	230f      	movs	r3, #15
 800708a:	18fc      	adds	r4, r7, r3
 800708c:	f7ff fb64 	bl	8006758 <CWJAP>
 8007090:	0003      	movs	r3, r0
 8007092:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007094:	f00d fa5a 	bl	801454c <HAL_GetTick>
 8007098:	0003      	movs	r3, r0
 800709a:	3332      	adds	r3, #50	@ 0x32
 800709c:	001a      	movs	r2, r3
 800709e:	4b7e      	ldr	r3, [pc, #504]	@ (8007298 <AT_Send+0x3c0>)
 80070a0:	601a      	str	r2, [r3, #0]
    break;
 80070a2:	e0f0      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80070a4:	4a87      	ldr	r2, [pc, #540]	@ (80072c4 <AT_Send+0x3ec>)
 80070a6:	4b7e      	ldr	r3, [pc, #504]	@ (80072a0 <AT_Send+0x3c8>)
 80070a8:	0019      	movs	r1, r3
 80070aa:	2003      	movs	r0, #3
 80070ac:	f00c fd0e 	bl	8013acc <CreateLine>
    ATCommandSend = CWMODE3();
 80070b0:	230f      	movs	r3, #15
 80070b2:	18fc      	adds	r4, r7, r3
 80070b4:	f7ff fbd2 	bl	800685c <CWMODE3>
 80070b8:	0003      	movs	r3, r0
 80070ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070bc:	f00d fa46 	bl	801454c <HAL_GetTick>
 80070c0:	0003      	movs	r3, r0
 80070c2:	330a      	adds	r3, #10
 80070c4:	001a      	movs	r2, r3
 80070c6:	4b74      	ldr	r3, [pc, #464]	@ (8007298 <AT_Send+0x3c0>)
 80070c8:	601a      	str	r2, [r3, #0]
    break;
 80070ca:	e0dc      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80070cc:	4a7e      	ldr	r2, [pc, #504]	@ (80072c8 <AT_Send+0x3f0>)
 80070ce:	4b74      	ldr	r3, [pc, #464]	@ (80072a0 <AT_Send+0x3c8>)
 80070d0:	0019      	movs	r1, r3
 80070d2:	2003      	movs	r0, #3
 80070d4:	f00c fcfa 	bl	8013acc <CreateLine>
    ATCommandSend = CWSAP();
 80070d8:	230f      	movs	r3, #15
 80070da:	18fc      	adds	r4, r7, r3
 80070dc:	f7ff fbf6 	bl	80068cc <CWSAP>
 80070e0:	0003      	movs	r3, r0
 80070e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070e4:	f00d fa32 	bl	801454c <HAL_GetTick>
 80070e8:	0003      	movs	r3, r0
 80070ea:	330a      	adds	r3, #10
 80070ec:	001a      	movs	r2, r3
 80070ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007298 <AT_Send+0x3c0>)
 80070f0:	601a      	str	r2, [r3, #0]
    break;
 80070f2:	e0c8      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80070f4:	4a75      	ldr	r2, [pc, #468]	@ (80072cc <AT_Send+0x3f4>)
 80070f6:	4b6a      	ldr	r3, [pc, #424]	@ (80072a0 <AT_Send+0x3c8>)
 80070f8:	0019      	movs	r1, r3
 80070fa:	2003      	movs	r0, #3
 80070fc:	f00c fce6 	bl	8013acc <CreateLine>
    ATCommandSend = CIPMUX();
 8007100:	230f      	movs	r3, #15
 8007102:	18fc      	adds	r4, r7, r3
 8007104:	f7ff fbfe 	bl	8006904 <CIPMUX>
 8007108:	0003      	movs	r3, r0
 800710a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800710c:	f00d fa1e 	bl	801454c <HAL_GetTick>
 8007110:	0003      	movs	r3, r0
 8007112:	330a      	adds	r3, #10
 8007114:	001a      	movs	r2, r3
 8007116:	4b60      	ldr	r3, [pc, #384]	@ (8007298 <AT_Send+0x3c0>)
 8007118:	601a      	str	r2, [r3, #0]
    break;
 800711a:	e0b4      	b.n	8007286 <AT_Send+0x3ae>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 800711c:	4a6c      	ldr	r2, [pc, #432]	@ (80072d0 <AT_Send+0x3f8>)
 800711e:	4b60      	ldr	r3, [pc, #384]	@ (80072a0 <AT_Send+0x3c8>)
 8007120:	0019      	movs	r1, r3
 8007122:	2003      	movs	r0, #3
 8007124:	f00c fcd2 	bl	8013acc <CreateLine>
    ATCommandSend = WEBSERVER();
 8007128:	230f      	movs	r3, #15
 800712a:	18fc      	adds	r4, r7, r3
 800712c:	f7ff fc06 	bl	800693c <WEBSERVER>
 8007130:	0003      	movs	r3, r0
 8007132:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007134:	f00d fa0a 	bl	801454c <HAL_GetTick>
 8007138:	0003      	movs	r3, r0
 800713a:	330a      	adds	r3, #10
 800713c:	001a      	movs	r2, r3
 800713e:	4b56      	ldr	r3, [pc, #344]	@ (8007298 <AT_Send+0x3c0>)
 8007140:	601a      	str	r2, [r3, #0]
    break;
 8007142:	e0a0      	b.n	8007286 <AT_Send+0x3ae>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8007144:	230f      	movs	r3, #15
 8007146:	18fc      	adds	r4, r7, r3
 8007148:	f7ff fc14 	bl	8006974 <HTTPCPOST>
 800714c:	0003      	movs	r3, r0
 800714e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007150:	f00d f9fc 	bl	801454c <HAL_GetTick>
 8007154:	0003      	movs	r3, r0
 8007156:	33f5      	adds	r3, #245	@ 0xf5
 8007158:	33ff      	adds	r3, #255	@ 0xff
 800715a:	001a      	movs	r2, r3
 800715c:	4b4e      	ldr	r3, [pc, #312]	@ (8007298 <AT_Send+0x3c0>)
 800715e:	601a      	str	r2, [r3, #0]
    break;
 8007160:	e091      	b.n	8007286 <AT_Send+0x3ae>

  case AT_SENDDATA:
    Debug("Send the data");
 8007162:	4a5c      	ldr	r2, [pc, #368]	@ (80072d4 <AT_Send+0x3fc>)
 8007164:	4b4e      	ldr	r3, [pc, #312]	@ (80072a0 <AT_Send+0x3c8>)
 8007166:	0019      	movs	r1, r3
 8007168:	2003      	movs	r0, #3
 800716a:	f00c fcaf 	bl	8013acc <CreateLine>
    ATCommandSend = SENDDATA();
 800716e:	230f      	movs	r3, #15
 8007170:	18fc      	adds	r4, r7, r3
 8007172:	f7ff fcc7 	bl	8006b04 <SENDDATA>
 8007176:	0003      	movs	r3, r0
 8007178:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800717a:	f00d f9e7 	bl	801454c <HAL_GetTick>
 800717e:	0003      	movs	r3, r0
 8007180:	33f5      	adds	r3, #245	@ 0xf5
 8007182:	33ff      	adds	r3, #255	@ 0xff
 8007184:	001a      	movs	r2, r3
 8007186:	4b44      	ldr	r3, [pc, #272]	@ (8007298 <AT_Send+0x3c0>)
 8007188:	601a      	str	r2, [r3, #0]
    break;
 800718a:	e07c      	b.n	8007286 <AT_Send+0x3ae>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800718c:	4a52      	ldr	r2, [pc, #328]	@ (80072d8 <AT_Send+0x400>)
 800718e:	4b44      	ldr	r3, [pc, #272]	@ (80072a0 <AT_Send+0x3c8>)
 8007190:	0019      	movs	r1, r3
 8007192:	2003      	movs	r0, #3
 8007194:	f00c fc9a 	bl	8013acc <CreateLine>
    ATCommandSend = SLEEP();
 8007198:	230f      	movs	r3, #15
 800719a:	18fc      	adds	r4, r7, r3
 800719c:	f7ff fcda 	bl	8006b54 <SLEEP>
 80071a0:	0003      	movs	r3, r0
 80071a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071a4:	f00d f9d2 	bl	801454c <HAL_GetTick>
 80071a8:	0003      	movs	r3, r0
 80071aa:	330a      	adds	r3, #10
 80071ac:	001a      	movs	r2, r3
 80071ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007298 <AT_Send+0x3c0>)
 80071b0:	601a      	str	r2, [r3, #0]
    break;
 80071b2:	e068      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80071b4:	4a49      	ldr	r2, [pc, #292]	@ (80072dc <AT_Send+0x404>)
 80071b6:	4b3a      	ldr	r3, [pc, #232]	@ (80072a0 <AT_Send+0x3c8>)
 80071b8:	0019      	movs	r1, r3
 80071ba:	2003      	movs	r0, #3
 80071bc:	f00c fc86 	bl	8013acc <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80071c0:	230f      	movs	r3, #15
 80071c2:	18fc      	adds	r4, r7, r3
 80071c4:	f7ff fce2 	bl	8006b8c <CIPSNTPCFG>
 80071c8:	0003      	movs	r3, r0
 80071ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071cc:	f00d f9be 	bl	801454c <HAL_GetTick>
 80071d0:	0003      	movs	r3, r0
 80071d2:	330a      	adds	r3, #10
 80071d4:	001a      	movs	r2, r3
 80071d6:	4b30      	ldr	r3, [pc, #192]	@ (8007298 <AT_Send+0x3c0>)
 80071d8:	601a      	str	r2, [r3, #0]
    break;
 80071da:	e054      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80071dc:	4a40      	ldr	r2, [pc, #256]	@ (80072e0 <AT_Send+0x408>)
 80071de:	4b30      	ldr	r3, [pc, #192]	@ (80072a0 <AT_Send+0x3c8>)
 80071e0:	0019      	movs	r1, r3
 80071e2:	2003      	movs	r0, #3
 80071e4:	f00c fc72 	bl	8013acc <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80071e8:	230f      	movs	r3, #15
 80071ea:	18fc      	adds	r4, r7, r3
 80071ec:	f7ff fcee 	bl	8006bcc <CIPSNTPTIME>
 80071f0:	0003      	movs	r3, r0
 80071f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80071f4:	f00d f9aa 	bl	801454c <HAL_GetTick>
 80071f8:	0003      	movs	r3, r0
 80071fa:	33f5      	adds	r3, #245	@ 0xf5
 80071fc:	33ff      	adds	r3, #255	@ 0xff
 80071fe:	001a      	movs	r2, r3
 8007200:	4b25      	ldr	r3, [pc, #148]	@ (8007298 <AT_Send+0x3c0>)
 8007202:	601a      	str	r2, [r3, #0]
    break;
 8007204:	e03f      	b.n	8007286 <AT_Send+0x3ae>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8007206:	4a37      	ldr	r2, [pc, #220]	@ (80072e4 <AT_Send+0x40c>)
 8007208:	4b25      	ldr	r3, [pc, #148]	@ (80072a0 <AT_Send+0x3c8>)
 800720a:	0019      	movs	r1, r3
 800720c:	2003      	movs	r0, #3
 800720e:	f00c fc5d 	bl	8013acc <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8007212:	230f      	movs	r3, #15
 8007214:	18fc      	adds	r4, r7, r3
 8007216:	f7ff fcf5 	bl	8006c04 <CIPSNTPINTV>
 800721a:	0003      	movs	r3, r0
 800721c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800721e:	f00d f995 	bl	801454c <HAL_GetTick>
 8007222:	0003      	movs	r3, r0
 8007224:	330a      	adds	r3, #10
 8007226:	001a      	movs	r2, r3
 8007228:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <AT_Send+0x3c0>)
 800722a:	601a      	str	r2, [r3, #0]
    break;
 800722c:	e02b      	b.n	8007286 <AT_Send+0x3ae>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL Post via HTTP");
 800722e:	4a2e      	ldr	r2, [pc, #184]	@ (80072e8 <AT_Send+0x410>)
 8007230:	4b1b      	ldr	r3, [pc, #108]	@ (80072a0 <AT_Send+0x3c8>)
 8007232:	0019      	movs	r1, r3
 8007234:	2003      	movs	r0, #3
 8007236:	f00c fc49 	bl	8013acc <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 800723a:	230f      	movs	r3, #15
 800723c:	18fc      	adds	r4, r7, r3
 800723e:	f7ff fc1d 	bl	8006a7c <HTTPCPOST_MAILAPI>
 8007242:	0003      	movs	r3, r0
 8007244:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007246:	f00d f981 	bl	801454c <HAL_GetTick>
 800724a:	0003      	movs	r3, r0
 800724c:	3332      	adds	r3, #50	@ 0x32
 800724e:	001a      	movs	r2, r3
 8007250:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <AT_Send+0x3c0>)
 8007252:	601a      	str	r2, [r3, #0]
    break;
 8007254:	e017      	b.n	8007286 <AT_Send+0x3ae>

  case AT_SENDMAIL:
    Debug("Send Email content");
 8007256:	4a25      	ldr	r2, [pc, #148]	@ (80072ec <AT_Send+0x414>)
 8007258:	4b11      	ldr	r3, [pc, #68]	@ (80072a0 <AT_Send+0x3c8>)
 800725a:	0019      	movs	r1, r3
 800725c:	2003      	movs	r0, #3
 800725e:	f00c fc35 	bl	8013acc <CreateLine>
    ATCommandSend = SENDMAIL();
 8007262:	230f      	movs	r3, #15
 8007264:	18fc      	adds	r4, r7, r3
 8007266:	f7ff fbe1 	bl	8006a2c <SENDMAIL>
 800726a:	0003      	movs	r3, r0
 800726c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800726e:	f00d f96d 	bl	801454c <HAL_GetTick>
 8007272:	0003      	movs	r3, r0
 8007274:	33f5      	adds	r3, #245	@ 0xf5
 8007276:	33ff      	adds	r3, #255	@ 0xff
 8007278:	001a      	movs	r2, r3
 800727a:	4b07      	ldr	r3, [pc, #28]	@ (8007298 <AT_Send+0x3c0>)
 800727c:	601a      	str	r2, [r3, #0]
    break;
 800727e:	e002      	b.n	8007286 <AT_Send+0x3ae>
#endif

  case AT_END:
    break;
 8007280:	46c0      	nop			@ (mov r8, r8)
 8007282:	e000      	b.n	8007286 <AT_Send+0x3ae>
  break;
 8007284:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8007286:	230f      	movs	r3, #15
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	781b      	ldrb	r3, [r3, #0]
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	b005      	add	sp, #20
 8007292:	bd90      	pop	{r4, r7, pc}
 8007294:	0802de38 	.word	0x0802de38
 8007298:	200006a4 	.word	0x200006a4
 800729c:	0802ae54 	.word	0x0802ae54
 80072a0:	0802a554 	.word	0x0802a554
 80072a4:	0802ae60 	.word	0x0802ae60
 80072a8:	0802ae74 	.word	0x0802ae74
 80072ac:	0802ae88 	.word	0x0802ae88
 80072b0:	0802ae98 	.word	0x0802ae98
 80072b4:	0802aeac 	.word	0x0802aeac
 80072b8:	0802aec4 	.word	0x0802aec4
 80072bc:	0802aedc 	.word	0x0802aedc
 80072c0:	0802aef4 	.word	0x0802aef4
 80072c4:	0802af08 	.word	0x0802af08
 80072c8:	0802af24 	.word	0x0802af24
 80072cc:	0802af40 	.word	0x0802af40
 80072d0:	0802af5c 	.word	0x0802af5c
 80072d4:	0802af78 	.word	0x0802af78
 80072d8:	0802af88 	.word	0x0802af88
 80072dc:	0802afac 	.word	0x0802afac
 80072e0:	0802afc0 	.word	0x0802afc0
 80072e4:	0802afd8 	.word	0x0802afd8
 80072e8:	0802aff8 	.word	0x0802aff8
 80072ec:	0802b014 	.word	0x0802b014

080072f0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80072f6:	1dfb      	adds	r3, r7, #7
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80072fc:	4b7e      	ldr	r3, [pc, #504]	@ (80074f8 <ESP_WakeTest+0x208>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b05      	cmp	r3, #5
 8007302:	d900      	bls.n	8007306 <ESP_WakeTest+0x16>
 8007304:	e0dc      	b.n	80074c0 <ESP_WakeTest+0x1d0>
 8007306:	009a      	lsls	r2, r3, #2
 8007308:	4b7c      	ldr	r3, [pc, #496]	@ (80074fc <ESP_WakeTest+0x20c>)
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007310:	4b7b      	ldr	r3, [pc, #492]	@ (8007500 <ESP_WakeTest+0x210>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2201      	movs	r2, #1
 8007316:	4053      	eors	r3, r2
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d039      	beq.n	8007392 <ESP_WakeTest+0xa2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800731e:	2380      	movs	r3, #128	@ 0x80
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	4878      	ldr	r0, [pc, #480]	@ (8007504 <ESP_WakeTest+0x214>)
 8007324:	2200      	movs	r2, #0
 8007326:	0019      	movs	r1, r3
 8007328:	f00e fba1 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800732c:	2032      	movs	r0, #50	@ 0x32
 800732e:	f00d f917 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007332:	2380      	movs	r3, #128	@ 0x80
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	4873      	ldr	r0, [pc, #460]	@ (8007504 <ESP_WakeTest+0x214>)
 8007338:	2201      	movs	r2, #1
 800733a:	0019      	movs	r1, r3
 800733c:	f00e fb97 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007340:	200a      	movs	r0, #10
 8007342:	f00d f90d 	bl	8014560 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007346:	4b70      	ldr	r3, [pc, #448]	@ (8007508 <ESP_WakeTest+0x218>)
 8007348:	2200      	movs	r2, #0
 800734a:	2101      	movs	r1, #1
 800734c:	0018      	movs	r0, r3
 800734e:	f00e fb8e 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007352:	200a      	movs	r0, #10
 8007354:	f00d f904 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007358:	4b6b      	ldr	r3, [pc, #428]	@ (8007508 <ESP_WakeTest+0x218>)
 800735a:	2201      	movs	r2, #1
 800735c:	2102      	movs	r1, #2
 800735e:	0018      	movs	r0, r3
 8007360:	f00e fb85 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007364:	200a      	movs	r0, #10
 8007366:	f00d f8fb 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800736a:	4b67      	ldr	r3, [pc, #412]	@ (8007508 <ESP_WakeTest+0x218>)
 800736c:	2201      	movs	r2, #1
 800736e:	2101      	movs	r1, #1
 8007370:	0018      	movs	r0, r3
 8007372:	f00e fb7c 	bl	8015a6e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007376:	f00d f8e9 	bl	801454c <HAL_GetTick>
 800737a:	0003      	movs	r3, r0
 800737c:	22af      	movs	r2, #175	@ 0xaf
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	189a      	adds	r2, r3, r2
 8007382:	4b62      	ldr	r3, [pc, #392]	@ (800750c <ESP_WakeTest+0x21c>)
 8007384:	601a      	str	r2, [r3, #0]
        HAL_Delay(10);
 8007386:	200a      	movs	r0, #10
 8007388:	f00d f8ea 	bl	8014560 <HAL_Delay>
        EspTurnedOn = true;
 800738c:	4b5c      	ldr	r3, [pc, #368]	@ (8007500 <ESP_WakeTest+0x210>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007392:	2380      	movs	r3, #128	@ 0x80
 8007394:	005a      	lsls	r2, r3, #1
 8007396:	4b5e      	ldr	r3, [pc, #376]	@ (8007510 <ESP_WakeTest+0x220>)
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f7fd fd94 	bl	8004ec8 <ESP_Receive>
 80073a0:	1e03      	subs	r3, r0, #0
 80073a2:	d100      	bne.n	80073a6 <ESP_WakeTest+0xb6>
 80073a4:	e09f      	b.n	80074e6 <ESP_WakeTest+0x1f6>
        TestState = ESP_TEST_SEND;
 80073a6:	4b54      	ldr	r3, [pc, #336]	@ (80074f8 <ESP_WakeTest+0x208>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	701a      	strb	r2, [r3, #0]
      }
      break;
 80073ac:	e09b      	b.n	80074e6 <ESP_WakeTest+0x1f6>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80073ae:	4b57      	ldr	r3, [pc, #348]	@ (800750c <ESP_WakeTest+0x21c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f00c fb34 	bl	8013a20 <TimestampIsReached>
 80073b8:	1e03      	subs	r3, r0, #0
 80073ba:	d100      	bne.n	80073be <ESP_WakeTest+0xce>
 80073bc:	e095      	b.n	80074ea <ESP_WakeTest+0x1fa>
        ATSend = AT_Send(ATCommand);
 80073be:	4b55      	ldr	r3, [pc, #340]	@ (8007514 <ESP_WakeTest+0x224>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	1dfc      	adds	r4, r7, #7
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7ff fd87 	bl	8006ed8 <AT_Send>
 80073ca:	0003      	movs	r3, r0
 80073cc:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80073ce:	1dfb      	adds	r3, r7, #7
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d100      	bne.n	80073d8 <ESP_WakeTest+0xe8>
 80073d6:	e088      	b.n	80074ea <ESP_WakeTest+0x1fa>
          TestState = ESP_TEST_RECEIVE;
 80073d8:	4b47      	ldr	r3, [pc, #284]	@ (80074f8 <ESP_WakeTest+0x208>)
 80073da:	2202      	movs	r2, #2
 80073dc:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80073de:	e084      	b.n	80074ea <ESP_WakeTest+0x1fa>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80073e0:	4b4a      	ldr	r3, [pc, #296]	@ (800750c <ESP_WakeTest+0x21c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f00c fb1b 	bl	8013a20 <TimestampIsReached>
 80073ea:	1e03      	subs	r3, r0, #0
 80073ec:	d100      	bne.n	80073f0 <ESP_WakeTest+0x100>
 80073ee:	e07e      	b.n	80074ee <ESP_WakeTest+0x1fe>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80073f0:	4b49      	ldr	r3, [pc, #292]	@ (8007518 <ESP_WakeTest+0x228>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff fc21 	bl	8006c3c <DMA_ProcessBuffer>
 80073fa:	0003      	movs	r3, r0
 80073fc:	001a      	movs	r2, r3
 80073fe:	4b47      	ldr	r3, [pc, #284]	@ (800751c <ESP_WakeTest+0x22c>)
 8007400:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007402:	4b46      	ldr	r3, [pc, #280]	@ (800751c <ESP_WakeTest+0x22c>)
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	4b44      	ldr	r3, [pc, #272]	@ (8007518 <ESP_WakeTest+0x228>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	1dbc      	adds	r4, r7, #6
 800740c:	0019      	movs	r1, r3
 800740e:	0010      	movs	r0, r2
 8007410:	f7ff fd14 	bl	8006e3c <ATCompare>
 8007414:	0003      	movs	r3, r0
 8007416:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007418:	4b40      	ldr	r3, [pc, #256]	@ (800751c <ESP_WakeTest+0x22c>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d102      	bne.n	8007426 <ESP_WakeTest+0x136>
          TestState = ESP_TEST_SEND;
 8007420:	4b35      	ldr	r3, [pc, #212]	@ (80074f8 <ESP_WakeTest+0x208>)
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007426:	4b3d      	ldr	r3, [pc, #244]	@ (800751c <ESP_WakeTest+0x22c>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b07      	cmp	r3, #7
 800742c:	d104      	bne.n	8007438 <ESP_WakeTest+0x148>
          StartProg();
 800742e:	f7fe fe65 	bl	80060fc <StartProg>
          TestState = ESP_TEST_BOOT;
 8007432:	4b31      	ldr	r3, [pc, #196]	@ (80074f8 <ESP_WakeTest+0x208>)
 8007434:	2205      	movs	r2, #5
 8007436:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007438:	4b38      	ldr	r3, [pc, #224]	@ (800751c <ESP_WakeTest+0x22c>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d109      	bne.n	8007454 <ESP_WakeTest+0x164>
          ESPTimeStamp = HAL_GetTick() + 50;
 8007440:	f00d f884 	bl	801454c <HAL_GetTick>
 8007444:	0003      	movs	r3, r0
 8007446:	3332      	adds	r3, #50	@ 0x32
 8007448:	001a      	movs	r2, r3
 800744a:	4b30      	ldr	r3, [pc, #192]	@ (800750c <ESP_WakeTest+0x21c>)
 800744c:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800744e:	4b2a      	ldr	r3, [pc, #168]	@ (80074f8 <ESP_WakeTest+0x208>)
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8007454:	1dbb      	adds	r3, r7, #6
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d048      	beq.n	80074ee <ESP_WakeTest+0x1fe>
          TestState = ESP_TEST_VALIDATE;
 800745c:	4b26      	ldr	r3, [pc, #152]	@ (80074f8 <ESP_WakeTest+0x208>)
 800745e:	2203      	movs	r2, #3
 8007460:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007462:	e044      	b.n	80074ee <ESP_WakeTest+0x1fe>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8007464:	4b2e      	ldr	r3, [pc, #184]	@ (8007520 <ESP_WakeTest+0x230>)
 8007466:	22fa      	movs	r2, #250	@ 0xfa
 8007468:	0112      	lsls	r2, r2, #4
 800746a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800746c:	f00a ff86 	bl	801237c <Calculate_LED_ON>
 8007470:	0003      	movs	r3, r0
 8007472:	001a      	movs	r2, r3
 8007474:	4b2a      	ldr	r3, [pc, #168]	@ (8007520 <ESP_WakeTest+0x230>)
 8007476:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007478:	4b29      	ldr	r3, [pc, #164]	@ (8007520 <ESP_WakeTest+0x230>)
 800747a:	22fa      	movs	r2, #250	@ 0xfa
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007480:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <ESP_WakeTest+0x208>)
 8007482:	2204      	movs	r2, #4
 8007484:	701a      	strb	r2, [r3, #0]

      break;
 8007486:	e033      	b.n	80074f0 <ESP_WakeTest+0x200>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007488:	4b26      	ldr	r3, [pc, #152]	@ (8007524 <ESP_WakeTest+0x234>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800748e:	4b1c      	ldr	r3, [pc, #112]	@ (8007500 <ESP_WakeTest+0x210>)
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007494:	4b1c      	ldr	r3, [pc, #112]	@ (8007508 <ESP_WakeTest+0x218>)
 8007496:	2200      	movs	r2, #0
 8007498:	2101      	movs	r1, #1
 800749a:	0018      	movs	r0, r3
 800749c:	f00e fae7 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80074a0:	2380      	movs	r3, #128	@ 0x80
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4817      	ldr	r0, [pc, #92]	@ (8007504 <ESP_WakeTest+0x214>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	0019      	movs	r1, r3
 80074aa:	f00e fae0 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80074ae:	4b16      	ldr	r3, [pc, #88]	@ (8007508 <ESP_WakeTest+0x218>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	2102      	movs	r1, #2
 80074b4:	0018      	movs	r0, r3
 80074b6:	f00e fada 	bl	8015a6e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80074ba:	f005 fec9 	bl	800d250 <SetESPMeasurementDone>
      break;
 80074be:	e017      	b.n	80074f0 <ESP_WakeTest+0x200>

    default:
      TestState = ESP_TEST_INIT;
 80074c0:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <ESP_WakeTest+0x208>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e013      	b.n	80074f0 <ESP_WakeTest+0x200>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <ESP_WakeTest+0x230>)
 80074ca:	22fa      	movs	r2, #250	@ 0xfa
 80074cc:	0112      	lsls	r2, r2, #4
 80074ce:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80074d0:	4b13      	ldr	r3, [pc, #76]	@ (8007520 <ESP_WakeTest+0x230>)
 80074d2:	22fa      	movs	r2, #250	@ 0xfa
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80074d8:	f00a ff50 	bl	801237c <Calculate_LED_ON>
 80074dc:	0003      	movs	r3, r0
 80074de:	001a      	movs	r2, r3
 80074e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <ESP_WakeTest+0x230>)
 80074e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80074e4:	e004      	b.n	80074f0 <ESP_WakeTest+0x200>
      break;
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	e002      	b.n	80074f0 <ESP_WakeTest+0x200>
      break;
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	e000      	b.n	80074f0 <ESP_WakeTest+0x200>
      break;
 80074ee:	46c0      	nop			@ (mov r8, r8)
  }
}
 80074f0:	46c0      	nop			@ (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b003      	add	sp, #12
 80074f6:	bd90      	pop	{r4, r7, pc}
 80074f8:	200006b0 	.word	0x200006b0
 80074fc:	0802de94 	.word	0x0802de94
 8007500:	200005ac 	.word	0x200005ac
 8007504:	50000800 	.word	0x50000800
 8007508:	50001c00 	.word	0x50001c00
 800750c:	200006a4 	.word	0x200006a4
 8007510:	200004ac 	.word	0x200004ac
 8007514:	200006ae 	.word	0x200006ae
 8007518:	200006ad 	.word	0x200006ad
 800751c:	20000033 	.word	0x20000033
 8007520:	40000400 	.word	0x40000400
 8007524:	20000001 	.word	0x20000001

08007528 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007528:	b5b0      	push	{r4, r5, r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800752e:	1dfb      	adds	r3, r7, #7
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007534:	4b66      	ldr	r3, [pc, #408]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	4b66      	ldr	r3, [pc, #408]	@ (80076d4 <ESP_Upkeep+0x1ac>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d028      	beq.n	8007592 <ESP_Upkeep+0x6a>
 8007540:	f00c fb3e 	bl	8013bc0 <GetVerboseLevel>
 8007544:	0003      	movs	r3, r0
 8007546:	2b03      	cmp	r3, #3
 8007548:	d123      	bne.n	8007592 <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 800754a:	4b61      	ldr	r3, [pc, #388]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 800754c:	781a      	ldrb	r2, [r3, #0]
 800754e:	4b61      	ldr	r3, [pc, #388]	@ (80076d4 <ESP_Upkeep+0x1ac>)
 8007550:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 8007552:	4b60      	ldr	r3, [pc, #384]	@ (80076d4 <ESP_Upkeep+0x1ac>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d107      	bne.n	800756a <ESP_Upkeep+0x42>
 800755a:	4b5f      	ldr	r3, [pc, #380]	@ (80076d8 <ESP_Upkeep+0x1b0>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b0e      	cmp	r3, #14
 8007560:	d017      	beq.n	8007592 <ESP_Upkeep+0x6a>
 8007562:	4b5d      	ldr	r3, [pc, #372]	@ (80076d8 <ESP_Upkeep+0x1b0>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b14      	cmp	r3, #20
 8007568:	d013      	beq.n	8007592 <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800756a:	4b5a      	ldr	r3, [pc, #360]	@ (80076d4 <ESP_Upkeep+0x1ac>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	001d      	movs	r5, r3
 8007570:	4b59      	ldr	r3, [pc, #356]	@ (80076d8 <ESP_Upkeep+0x1b0>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	0018      	movs	r0, r3
 8007576:	4b59      	ldr	r3, [pc, #356]	@ (80076dc <ESP_Upkeep+0x1b4>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	001c      	movs	r4, r3
 800757c:	4b58      	ldr	r3, [pc, #352]	@ (80076e0 <ESP_Upkeep+0x1b8>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4a58      	ldr	r2, [pc, #352]	@ (80076e4 <ESP_Upkeep+0x1bc>)
 8007582:	4959      	ldr	r1, [pc, #356]	@ (80076e8 <ESP_Upkeep+0x1c0>)
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	9401      	str	r4, [sp, #4]
 8007588:	9000      	str	r0, [sp, #0]
 800758a:	002b      	movs	r3, r5
 800758c:	2003      	movs	r0, #3
 800758e:	f00c fa9d 	bl	8013acc <CreateLine>
    }
  }
  switch (EspState) {
 8007592:	4b4f      	ldr	r3, [pc, #316]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d901      	bls.n	800759e <ESP_Upkeep+0x76>
 800759a:	f000 fce8 	bl	8007f6e <ESP_Upkeep+0xa46>
 800759e:	009a      	lsls	r2, r3, #2
 80075a0:	4b52      	ldr	r3, [pc, #328]	@ (80076ec <ESP_Upkeep+0x1c4>)
 80075a2:	18d3      	adds	r3, r2, r3
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80075a8:	4b49      	ldr	r3, [pc, #292]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	f000 fcf9 	bl	8007fa4 <ESP_Upkeep+0xa7c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 80075b2:	4b4f      	ldr	r3, [pc, #316]	@ (80076f0 <ESP_Upkeep+0x1c8>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 80075b8:	f006 f8aa 	bl	800d710 <AllDevicesReady>
 80075bc:	0003      	movs	r3, r0
 80075be:	001a      	movs	r2, r3
 80075c0:	2301      	movs	r3, #1
 80075c2:	4053      	eors	r3, r2
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <ESP_Upkeep+0xa6>
 80075ca:	f000 fcdc 	bl	8007f86 <ESP_Upkeep+0xa5e>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 80075ce:	f00b f867 	bl	80126a0 <SetESPIndicator>
      if(!EspTurnedOn){
 80075d2:	4b48      	ldr	r3, [pc, #288]	@ (80076f4 <ESP_Upkeep+0x1cc>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	4053      	eors	r3, r2
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03c      	beq.n	800765a <ESP_Upkeep+0x132>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80075e0:	2380      	movs	r3, #128	@ 0x80
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	4844      	ldr	r0, [pc, #272]	@ (80076f8 <ESP_Upkeep+0x1d0>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	0019      	movs	r1, r3
 80075ea:	f00e fa40 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80075ee:	2001      	movs	r0, #1
 80075f0:	f00c ffb6 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80075f4:	2380      	movs	r3, #128	@ 0x80
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	483f      	ldr	r0, [pc, #252]	@ (80076f8 <ESP_Upkeep+0x1d0>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	0019      	movs	r1, r3
 80075fe:	f00e fa36 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007602:	2001      	movs	r0, #1
 8007604:	f00c ffac 	bl	8014560 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007608:	4b3c      	ldr	r3, [pc, #240]	@ (80076fc <ESP_Upkeep+0x1d4>)
 800760a:	2200      	movs	r2, #0
 800760c:	2101      	movs	r1, #1
 800760e:	0018      	movs	r0, r3
 8007610:	f00e fa2d 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007614:	2001      	movs	r0, #1
 8007616:	f00c ffa3 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800761a:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <ESP_Upkeep+0x1d4>)
 800761c:	2201      	movs	r2, #1
 800761e:	2102      	movs	r1, #2
 8007620:	0018      	movs	r0, r3
 8007622:	f00e fa24 	bl	8015a6e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007626:	2001      	movs	r0, #1
 8007628:	f00c ff9a 	bl	8014560 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800762c:	4b33      	ldr	r3, [pc, #204]	@ (80076fc <ESP_Upkeep+0x1d4>)
 800762e:	2201      	movs	r2, #1
 8007630:	2101      	movs	r1, #1
 8007632:	0018      	movs	r0, r3
 8007634:	f00e fa1b 	bl	8015a6e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007638:	f00c ff88 	bl	801454c <HAL_GetTick>
 800763c:	0003      	movs	r3, r0
 800763e:	22af      	movs	r2, #175	@ 0xaf
 8007640:	0092      	lsls	r2, r2, #2
 8007642:	189a      	adds	r2, r3, r2
 8007644:	4b2e      	ldr	r3, [pc, #184]	@ (8007700 <ESP_Upkeep+0x1d8>)
 8007646:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007648:	4b2a      	ldr	r3, [pc, #168]	@ (80076f4 <ESP_Upkeep+0x1cc>)
 800764a:	2201      	movs	r2, #1
 800764c:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 800764e:	4a2d      	ldr	r2, [pc, #180]	@ (8007704 <ESP_Upkeep+0x1dc>)
 8007650:	4b25      	ldr	r3, [pc, #148]	@ (80076e8 <ESP_Upkeep+0x1c0>)
 8007652:	0019      	movs	r1, r3
 8007654:	2003      	movs	r0, #3
 8007656:	f00c fa39 	bl	8013acc <CreateLine>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800765a:	2380      	movs	r3, #128	@ 0x80
 800765c:	005a      	lsls	r2, r3, #1
 800765e:	4b2a      	ldr	r3, [pc, #168]	@ (8007708 <ESP_Upkeep+0x1e0>)
 8007660:	0011      	movs	r1, r2
 8007662:	0018      	movs	r0, r3
 8007664:	f7fd fc30 	bl	8004ec8 <ESP_Receive>
 8007668:	1e03      	subs	r3, r0, #0
 800766a:	d101      	bne.n	8007670 <ESP_Upkeep+0x148>
 800766c:	f000 fc8d 	bl	8007f8a <ESP_Upkeep+0xa62>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007670:	4b17      	ldr	r3, [pc, #92]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 8007672:	220f      	movs	r2, #15
 8007674:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007676:	f00c ff69 	bl	801454c <HAL_GetTick>
 800767a:	0003      	movs	r3, r0
 800767c:	22fa      	movs	r2, #250	@ 0xfa
 800767e:	00d2      	lsls	r2, r2, #3
 8007680:	189a      	adds	r2, r3, r2
 8007682:	4b22      	ldr	r3, [pc, #136]	@ (800770c <ESP_Upkeep+0x1e4>)
 8007684:	601a      	str	r2, [r3, #0]
      }
      break;
 8007686:	f000 fc80 	bl	8007f8a <ESP_Upkeep+0xa62>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800768a:	2001      	movs	r0, #1
 800768c:	f7ff fad6 	bl	8006c3c <DMA_ProcessBuffer>
 8007690:	0003      	movs	r3, r0
 8007692:	001a      	movs	r2, r3
 8007694:	4b1e      	ldr	r3, [pc, #120]	@ (8007710 <ESP_Upkeep+0x1e8>)
 8007696:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007698:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <ESP_Upkeep+0x1e8>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	1dbc      	adds	r4, r7, #6
 800769e:	2101      	movs	r1, #1
 80076a0:	0018      	movs	r0, r3
 80076a2:	f7ff fbcb 	bl	8006e3c <ATCompare>
 80076a6:	0003      	movs	r3, r0
 80076a8:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80076aa:	1dbb      	adds	r3, r7, #6
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d108      	bne.n	80076c4 <ESP_Upkeep+0x19c>
 80076b2:	4b16      	ldr	r3, [pc, #88]	@ (800770c <ESP_Upkeep+0x1e4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	0018      	movs	r0, r3
 80076b8:	f00c f9b2 	bl	8013a20 <TimestampIsReached>
 80076bc:	1e03      	subs	r3, r0, #0
 80076be:	d101      	bne.n	80076c4 <ESP_Upkeep+0x19c>
 80076c0:	f000 fc65 	bl	8007f8e <ESP_Upkeep+0xa66>
          EspState = ESP_STATE_MODE_SELECT;
 80076c4:	4b02      	ldr	r3, [pc, #8]	@ (80076d0 <ESP_Upkeep+0x1a8>)
 80076c6:	220b      	movs	r2, #11
 80076c8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80076ca:	f000 fc60 	bl	8007f8e <ESP_Upkeep+0xa66>
 80076ce:	46c0      	nop			@ (mov r8, r8)
 80076d0:	20000030 	.word	0x20000030
 80076d4:	20000003 	.word	0x20000003
 80076d8:	200006ae 	.word	0x200006ae
 80076dc:	200006af 	.word	0x200006af
 80076e0:	200006ad 	.word	0x200006ad
 80076e4:	0802b028 	.word	0x0802b028
 80076e8:	0802a554 	.word	0x0802a554
 80076ec:	0802deac 	.word	0x0802deac
 80076f0:	20000f6c 	.word	0x20000f6c
 80076f4:	200005ac 	.word	0x200005ac
 80076f8:	50000800 	.word	0x50000800
 80076fc:	50001c00 	.word	0x50001c00
 8007700:	200006a4 	.word	0x200006a4
 8007704:	0802b054 	.word	0x0802b054
 8007708:	200004ac 	.word	0x200004ac
 800770c:	20000834 	.word	0x20000834
 8007710:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007714:	4bd2      	ldr	r3, [pc, #840]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007716:	2209      	movs	r2, #9
 8007718:	2116      	movs	r1, #22
 800771a:	0018      	movs	r0, r3
 800771c:	f01e fcca 	bl	80260b4 <memset>
      if(!InitIsDone || WifiReset){
 8007720:	4bd0      	ldr	r3, [pc, #832]	@ (8007a64 <ESP_Upkeep+0x53c>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	4053      	eors	r3, r2
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <ESP_Upkeep+0x20e>
 800772e:	4bce      	ldr	r3, [pc, #824]	@ (8007a68 <ESP_Upkeep+0x540>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01a      	beq.n	800776c <ESP_Upkeep+0x244>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007736:	4bca      	ldr	r3, [pc, #808]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007738:	4acc      	ldr	r2, [pc, #816]	@ (8007a6c <ESP_Upkeep+0x544>)
 800773a:	6811      	ldr	r1, [r2, #0]
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	8891      	ldrh	r1, [r2, #4]
 8007740:	8099      	strh	r1, [r3, #4]
 8007742:	7992      	ldrb	r2, [r2, #6]
 8007744:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8007746:	4bca      	ldr	r3, [pc, #808]	@ (8007a70 <ESP_Upkeep+0x548>)
 8007748:	2204      	movs	r2, #4
 800774a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800774c:	4bc9      	ldr	r3, [pc, #804]	@ (8007a74 <ESP_Upkeep+0x54c>)
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8007752:	4bc9      	ldr	r3, [pc, #804]	@ (8007a78 <ESP_Upkeep+0x550>)
 8007754:	2200      	movs	r2, #0
 8007756:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007758:	4bc6      	ldr	r3, [pc, #792]	@ (8007a74 <ESP_Upkeep+0x54c>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	001a      	movs	r2, r3
 800775e:	4bc0      	ldr	r3, [pc, #768]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007760:	5c9a      	ldrb	r2, [r3, r2]
 8007762:	4bc6      	ldr	r3, [pc, #792]	@ (8007a7c <ESP_Upkeep+0x554>)
 8007764:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007766:	4bc6      	ldr	r3, [pc, #792]	@ (8007a80 <ESP_Upkeep+0x558>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800776c:	4bbd      	ldr	r3, [pc, #756]	@ (8007a64 <ESP_Upkeep+0x53c>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01f      	beq.n	80077b4 <ESP_Upkeep+0x28c>
 8007774:	4bc3      	ldr	r3, [pc, #780]	@ (8007a84 <ESP_Upkeep+0x55c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2201      	movs	r2, #1
 800777a:	4053      	eors	r3, r2
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d018      	beq.n	80077b4 <ESP_Upkeep+0x28c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007782:	4bb7      	ldr	r3, [pc, #732]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007784:	4ac0      	ldr	r2, [pc, #768]	@ (8007a88 <ESP_Upkeep+0x560>)
 8007786:	6811      	ldr	r1, [r2, #0]
 8007788:	6019      	str	r1, [r3, #0]
 800778a:	8892      	ldrh	r2, [r2, #4]
 800778c:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800778e:	4bb8      	ldr	r3, [pc, #736]	@ (8007a70 <ESP_Upkeep+0x548>)
 8007790:	2204      	movs	r2, #4
 8007792:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007794:	4bb7      	ldr	r3, [pc, #732]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800779a:	4bb7      	ldr	r3, [pc, #732]	@ (8007a78 <ESP_Upkeep+0x550>)
 800779c:	2201      	movs	r2, #1
 800779e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80077a0:	4bb4      	ldr	r3, [pc, #720]	@ (8007a74 <ESP_Upkeep+0x54c>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	001a      	movs	r2, r3
 80077a6:	4bae      	ldr	r3, [pc, #696]	@ (8007a60 <ESP_Upkeep+0x538>)
 80077a8:	5c9a      	ldrb	r2, [r3, r2]
 80077aa:	4bb4      	ldr	r3, [pc, #720]	@ (8007a7c <ESP_Upkeep+0x554>)
 80077ac:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80077ae:	4bb4      	ldr	r3, [pc, #720]	@ (8007a80 <ESP_Upkeep+0x558>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && !beursTest){
      if(InitIsDone && ConnectionMade && !APtested){
 80077b4:	4bab      	ldr	r3, [pc, #684]	@ (8007a64 <ESP_Upkeep+0x53c>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d021      	beq.n	8007800 <ESP_Upkeep+0x2d8>
 80077bc:	4bb1      	ldr	r3, [pc, #708]	@ (8007a84 <ESP_Upkeep+0x55c>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01d      	beq.n	8007800 <ESP_Upkeep+0x2d8>
 80077c4:	4bb1      	ldr	r3, [pc, #708]	@ (8007a8c <ESP_Upkeep+0x564>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	4053      	eors	r3, r2
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <ESP_Upkeep+0x2d8>
        memcpy(ATCommandArray, AT_TEST, 2);
 80077d2:	4baf      	ldr	r3, [pc, #700]	@ (8007a90 <ESP_Upkeep+0x568>)
 80077d4:	881a      	ldrh	r2, [r3, #0]
 80077d6:	4ba2      	ldr	r3, [pc, #648]	@ (8007a60 <ESP_Upkeep+0x538>)
 80077d8:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80077da:	4ba5      	ldr	r3, [pc, #660]	@ (8007a70 <ESP_Upkeep+0x548>)
 80077dc:	2204      	movs	r2, #4
 80077de:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80077e0:	4ba4      	ldr	r3, [pc, #656]	@ (8007a74 <ESP_Upkeep+0x54c>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80077e6:	4ba4      	ldr	r3, [pc, #656]	@ (8007a78 <ESP_Upkeep+0x550>)
 80077e8:	2204      	movs	r2, #4
 80077ea:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80077ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007a74 <ESP_Upkeep+0x54c>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	001a      	movs	r2, r3
 80077f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007a60 <ESP_Upkeep+0x538>)
 80077f4:	5c9a      	ldrb	r2, [r3, r2]
 80077f6:	4ba1      	ldr	r3, [pc, #644]	@ (8007a7c <ESP_Upkeep+0x554>)
 80077f8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80077fa:	4ba1      	ldr	r3, [pc, #644]	@ (8007a80 <ESP_Upkeep+0x558>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 8007800:	4b98      	ldr	r3, [pc, #608]	@ (8007a64 <ESP_Upkeep+0x53c>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d024      	beq.n	8007852 <ESP_Upkeep+0x32a>
 8007808:	4b9e      	ldr	r3, [pc, #632]	@ (8007a84 <ESP_Upkeep+0x55c>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <ESP_Upkeep+0x32a>
 8007810:	4b9e      	ldr	r3, [pc, #632]	@ (8007a8c <ESP_Upkeep+0x564>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01c      	beq.n	8007852 <ESP_Upkeep+0x32a>
 8007818:	4b9e      	ldr	r3, [pc, #632]	@ (8007a94 <ESP_Upkeep+0x56c>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d118      	bne.n	8007852 <ESP_Upkeep+0x32a>
        memcpy(ATCommandArray, AT_MAIL, 3);
 8007820:	4b8f      	ldr	r3, [pc, #572]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007822:	4a9d      	ldr	r2, [pc, #628]	@ (8007a98 <ESP_Upkeep+0x570>)
 8007824:	8811      	ldrh	r1, [r2, #0]
 8007826:	8019      	strh	r1, [r3, #0]
 8007828:	7892      	ldrb	r2, [r2, #2]
 800782a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800782c:	4b90      	ldr	r3, [pc, #576]	@ (8007a70 <ESP_Upkeep+0x548>)
 800782e:	2204      	movs	r2, #4
 8007830:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007832:	4b90      	ldr	r3, [pc, #576]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 8007838:	4b8f      	ldr	r3, [pc, #572]	@ (8007a78 <ESP_Upkeep+0x550>)
 800783a:	2206      	movs	r2, #6
 800783c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800783e:	4b8d      	ldr	r3, [pc, #564]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	001a      	movs	r2, r3
 8007844:	4b86      	ldr	r3, [pc, #536]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007846:	5c9a      	ldrb	r2, [r3, r2]
 8007848:	4b8c      	ldr	r3, [pc, #560]	@ (8007a7c <ESP_Upkeep+0x554>)
 800784a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800784c:	4b8c      	ldr	r3, [pc, #560]	@ (8007a80 <ESP_Upkeep+0x558>)
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
      }
#endif
//      if(InitIsDone && ConnectionMade && beursTest && !setTime){
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 8007852:	4b84      	ldr	r3, [pc, #528]	@ (8007a64 <ESP_Upkeep+0x53c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d030      	beq.n	80078bc <ESP_Upkeep+0x394>
 800785a:	4b8a      	ldr	r3, [pc, #552]	@ (8007a84 <ESP_Upkeep+0x55c>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02c      	beq.n	80078bc <ESP_Upkeep+0x394>
 8007862:	4b8a      	ldr	r3, [pc, #552]	@ (8007a8c <ESP_Upkeep+0x564>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d028      	beq.n	80078bc <ESP_Upkeep+0x394>
 800786a:	4b8c      	ldr	r3, [pc, #560]	@ (8007a9c <ESP_Upkeep+0x574>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2201      	movs	r2, #1
 8007870:	4053      	eors	r3, r2
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d021      	beq.n	80078bc <ESP_Upkeep+0x394>
 8007878:	4b86      	ldr	r3, [pc, #536]	@ (8007a94 <ESP_Upkeep+0x56c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d01d      	beq.n	80078bc <ESP_Upkeep+0x394>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007880:	4b77      	ldr	r3, [pc, #476]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007882:	4a87      	ldr	r2, [pc, #540]	@ (8007aa0 <ESP_Upkeep+0x578>)
 8007884:	8811      	ldrh	r1, [r2, #0]
 8007886:	8019      	strh	r1, [r3, #0]
 8007888:	7892      	ldrb	r2, [r2, #2]
 800788a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800788c:	4b78      	ldr	r3, [pc, #480]	@ (8007a70 <ESP_Upkeep+0x548>)
 800788e:	2204      	movs	r2, #4
 8007890:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007892:	4b78      	ldr	r3, [pc, #480]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007898:	4b77      	ldr	r3, [pc, #476]	@ (8007a78 <ESP_Upkeep+0x550>)
 800789a:	2202      	movs	r2, #2
 800789c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800789e:	f00c fe55 	bl	801454c <HAL_GetTick>
 80078a2:	0002      	movs	r2, r0
 80078a4:	4b7f      	ldr	r3, [pc, #508]	@ (8007aa4 <ESP_Upkeep+0x57c>)
 80078a6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80078a8:	4b72      	ldr	r3, [pc, #456]	@ (8007a74 <ESP_Upkeep+0x54c>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	001a      	movs	r2, r3
 80078ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007a60 <ESP_Upkeep+0x538>)
 80078b0:	5c9a      	ldrb	r2, [r3, r2]
 80078b2:	4b72      	ldr	r3, [pc, #456]	@ (8007a7c <ESP_Upkeep+0x554>)
 80078b4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80078b6:	4b72      	ldr	r3, [pc, #456]	@ (8007a80 <ESP_Upkeep+0x558>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && beursTest && setTime){
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 80078bc:	4b69      	ldr	r3, [pc, #420]	@ (8007a64 <ESP_Upkeep+0x53c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02b      	beq.n	800791c <ESP_Upkeep+0x3f4>
 80078c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007a84 <ESP_Upkeep+0x55c>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d027      	beq.n	800791c <ESP_Upkeep+0x3f4>
 80078cc:	4b6f      	ldr	r3, [pc, #444]	@ (8007a8c <ESP_Upkeep+0x564>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d023      	beq.n	800791c <ESP_Upkeep+0x3f4>
 80078d4:	4b71      	ldr	r3, [pc, #452]	@ (8007a9c <ESP_Upkeep+0x574>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01f      	beq.n	800791c <ESP_Upkeep+0x3f4>
 80078dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007a94 <ESP_Upkeep+0x56c>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d01b      	beq.n	800791c <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80078e4:	4b70      	ldr	r3, [pc, #448]	@ (8007aa8 <ESP_Upkeep+0x580>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4b5d      	ldr	r3, [pc, #372]	@ (8007a60 <ESP_Upkeep+0x538>)
 80078ea:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80078ec:	4b60      	ldr	r3, [pc, #384]	@ (8007a70 <ESP_Upkeep+0x548>)
 80078ee:	2204      	movs	r2, #4
 80078f0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078f2:	4b60      	ldr	r3, [pc, #384]	@ (8007a74 <ESP_Upkeep+0x54c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80078f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a78 <ESP_Upkeep+0x550>)
 80078fa:	2205      	movs	r2, #5
 80078fc:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80078fe:	f00c fe25 	bl	801454c <HAL_GetTick>
 8007902:	0002      	movs	r2, r0
 8007904:	4b67      	ldr	r3, [pc, #412]	@ (8007aa4 <ESP_Upkeep+0x57c>)
 8007906:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007908:	4b5a      	ldr	r3, [pc, #360]	@ (8007a74 <ESP_Upkeep+0x54c>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	001a      	movs	r2, r3
 800790e:	4b54      	ldr	r3, [pc, #336]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007910:	5c9a      	ldrb	r2, [r3, r2]
 8007912:	4b5a      	ldr	r3, [pc, #360]	@ (8007a7c <ESP_Upkeep+0x554>)
 8007914:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007916:	4b5a      	ldr	r3, [pc, #360]	@ (8007a80 <ESP_Upkeep+0x558>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800791c:	4b63      	ldr	r3, [pc, #396]	@ (8007aac <ESP_Upkeep+0x584>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d100      	bne.n	8007926 <ESP_Upkeep+0x3fe>
 8007924:	e335      	b.n	8007f92 <ESP_Upkeep+0xa6a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007926:	4b4e      	ldr	r3, [pc, #312]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007928:	4a61      	ldr	r2, [pc, #388]	@ (8007ab0 <ESP_Upkeep+0x588>)
 800792a:	6811      	ldr	r1, [r2, #0]
 800792c:	6019      	str	r1, [r3, #0]
 800792e:	7912      	ldrb	r2, [r2, #4]
 8007930:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8007932:	4a60      	ldr	r2, [pc, #384]	@ (8007ab4 <ESP_Upkeep+0x58c>)
 8007934:	4b60      	ldr	r3, [pc, #384]	@ (8007ab8 <ESP_Upkeep+0x590>)
 8007936:	0019      	movs	r1, r3
 8007938:	2003      	movs	r0, #3
 800793a:	f00c f8c7 	bl	8013acc <CreateLine>
        DisableConnectedDevices();
 800793e:	f006 f893 	bl	800da68 <DisableConnectedDevices>
        usblog = false;
 8007942:	4b5e      	ldr	r3, [pc, #376]	@ (8007abc <ESP_Upkeep+0x594>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007948:	4b49      	ldr	r3, [pc, #292]	@ (8007a70 <ESP_Upkeep+0x548>)
 800794a:	2204      	movs	r2, #4
 800794c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800794e:	4b49      	ldr	r3, [pc, #292]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007954:	4b48      	ldr	r3, [pc, #288]	@ (8007a78 <ESP_Upkeep+0x550>)
 8007956:	2203      	movs	r2, #3
 8007958:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800795a:	4b46      	ldr	r3, [pc, #280]	@ (8007a74 <ESP_Upkeep+0x54c>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	001a      	movs	r2, r3
 8007960:	4b3f      	ldr	r3, [pc, #252]	@ (8007a60 <ESP_Upkeep+0x538>)
 8007962:	5c9a      	ldrb	r2, [r3, r2]
 8007964:	4b45      	ldr	r3, [pc, #276]	@ (8007a7c <ESP_Upkeep+0x554>)
 8007966:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007968:	4b45      	ldr	r3, [pc, #276]	@ (8007a80 <ESP_Upkeep+0x558>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800796e:	e310      	b.n	8007f92 <ESP_Upkeep+0xa6a>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007970:	4b42      	ldr	r3, [pc, #264]	@ (8007a7c <ESP_Upkeep+0x554>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	1dfc      	adds	r4, r7, #7
 8007976:	0018      	movs	r0, r3
 8007978:	f7ff faae 	bl	8006ed8 <AT_Send>
 800797c:	0003      	movs	r3, r0
 800797e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007980:	1dfb      	adds	r3, r7, #7
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d100      	bne.n	800798a <ESP_Upkeep+0x462>
 8007988:	e305      	b.n	8007f96 <ESP_Upkeep+0xa6e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800798a:	4b39      	ldr	r3, [pc, #228]	@ (8007a70 <ESP_Upkeep+0x548>)
 800798c:	2203      	movs	r2, #3
 800798e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007990:	e301      	b.n	8007f96 <ESP_Upkeep+0xa6e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007992:	4b46      	ldr	r3, [pc, #280]	@ (8007aac <ESP_Upkeep+0x584>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <ESP_Upkeep+0x482>
 800799a:	4b37      	ldr	r3, [pc, #220]	@ (8007a78 <ESP_Upkeep+0x550>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d003      	beq.n	80079aa <ESP_Upkeep+0x482>
        EspState = ESP_STATE_MODE_SELECT;
 80079a2:	4b33      	ldr	r3, [pc, #204]	@ (8007a70 <ESP_Upkeep+0x548>)
 80079a4:	220b      	movs	r2, #11
 80079a6:	701a      	strb	r2, [r3, #0]
        break;
 80079a8:	e2fc      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80079aa:	4b45      	ldr	r3, [pc, #276]	@ (8007ac0 <ESP_Upkeep+0x598>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f00c f836 	bl	8013a20 <TimestampIsReached>
 80079b4:	1e03      	subs	r3, r0, #0
 80079b6:	d100      	bne.n	80079ba <ESP_Upkeep+0x492>
 80079b8:	e2ef      	b.n	8007f9a <ESP_Upkeep+0xa72>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80079ba:	4b31      	ldr	r3, [pc, #196]	@ (8007a80 <ESP_Upkeep+0x558>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	0018      	movs	r0, r3
 80079c0:	f7ff f93c 	bl	8006c3c <DMA_ProcessBuffer>
 80079c4:	0003      	movs	r3, r0
 80079c6:	001a      	movs	r2, r3
 80079c8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac4 <ESP_Upkeep+0x59c>)
 80079ca:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80079cc:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <ESP_Upkeep+0x59c>)
 80079ce:	781a      	ldrb	r2, [r3, #0]
 80079d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <ESP_Upkeep+0x558>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	1d7c      	adds	r4, r7, #5
 80079d6:	0019      	movs	r1, r3
 80079d8:	0010      	movs	r0, r2
 80079da:	f7ff fa2f 	bl	8006e3c <ATCompare>
 80079de:	0003      	movs	r3, r0
 80079e0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80079e2:	4b38      	ldr	r3, [pc, #224]	@ (8007ac4 <ESP_Upkeep+0x59c>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d000      	beq.n	80079ec <ESP_Upkeep+0x4c4>
 80079ea:	e079      	b.n	8007ae0 <ESP_Upkeep+0x5b8>
          if(ATCommand == AT_SENDDATA){
 80079ec:	4b23      	ldr	r3, [pc, #140]	@ (8007a7c <ESP_Upkeep+0x554>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b0f      	cmp	r3, #15
 80079f2:	d108      	bne.n	8007a06 <ESP_Upkeep+0x4de>
            ATCommand = AT_HTTPCPOST;
 80079f4:	4b21      	ldr	r3, [pc, #132]	@ (8007a7c <ESP_Upkeep+0x554>)
 80079f6:	220e      	movs	r2, #14
 80079f8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80079fa:	4b21      	ldr	r3, [pc, #132]	@ (8007a80 <ESP_Upkeep+0x558>)
 80079fc:	2202      	movs	r2, #2
 80079fe:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007a00:	4b1c      	ldr	r3, [pc, #112]	@ (8007a74 <ESP_Upkeep+0x54c>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007a06:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <ESP_Upkeep+0x548>)
 8007a08:	2204      	movs	r2, #4
 8007a0a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ac8 <ESP_Upkeep+0x5a0>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	4b2c      	ldr	r3, [pc, #176]	@ (8007ac8 <ESP_Upkeep+0x5a0>)
 8007a16:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007a18:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac8 <ESP_Upkeep+0x5a0>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d95f      	bls.n	8007ae0 <ESP_Upkeep+0x5b8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007a20:	f00c fd94 	bl	801454c <HAL_GetTick>
 8007a24:	0003      	movs	r3, r0
 8007a26:	4a29      	ldr	r2, [pc, #164]	@ (8007acc <ESP_Upkeep+0x5a4>)
 8007a28:	189a      	adds	r2, r3, r2
 8007a2a:	4b25      	ldr	r3, [pc, #148]	@ (8007ac0 <ESP_Upkeep+0x598>)
 8007a2c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007a2e:	4b28      	ldr	r3, [pc, #160]	@ (8007ad0 <ESP_Upkeep+0x5a8>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007a34:	f7ff f9f4 	bl	8006e20 <clearDMABuffer>
            stop = HAL_GetTick();
 8007a38:	f00c fd88 	bl	801454c <HAL_GetTick>
 8007a3c:	0002      	movs	r2, r0
 8007a3e:	4b25      	ldr	r3, [pc, #148]	@ (8007ad4 <ESP_Upkeep+0x5ac>)
 8007a40:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007a42:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <ESP_Upkeep+0x5ac>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b17      	ldr	r3, [pc, #92]	@ (8007aa4 <ESP_Upkeep+0x57c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <ESP_Upkeep+0x5b0>)
 8007a4e:	4923      	ldr	r1, [pc, #140]	@ (8007adc <ESP_Upkeep+0x5b4>)
 8007a50:	2001      	movs	r0, #1
 8007a52:	f00c f83b 	bl	8013acc <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007a56:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <ESP_Upkeep+0x548>)
 8007a58:	220d      	movs	r2, #13
 8007a5a:	701a      	strb	r2, [r3, #0]
            break;
 8007a5c:	e2a2      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	20000694 	.word	0x20000694
 8007a64:	200005ad 	.word	0x200005ad
 8007a68:	200005ae 	.word	0x200005ae
 8007a6c:	20000004 	.word	0x20000004
 8007a70:	20000030 	.word	0x20000030
 8007a74:	2000069e 	.word	0x2000069e
 8007a78:	200006af 	.word	0x200006af
 8007a7c:	200006ae 	.word	0x200006ae
 8007a80:	200006ad 	.word	0x200006ad
 8007a84:	200005b0 	.word	0x200005b0
 8007a88:	20000014 	.word	0x20000014
 8007a8c:	200005b1 	.word	0x200005b1
 8007a90:	20000010 	.word	0x20000010
 8007a94:	20000f57 	.word	0x20000f57
 8007a98:	20000028 	.word	0x20000028
 8007a9c:	20000002 	.word	0x20000002
 8007aa0:	2000000c 	.word	0x2000000c
 8007aa4:	200005c0 	.word	0x200005c0
 8007aa8:	20000024 	.word	0x20000024
 8007aac:	200005af 	.word	0x200005af
 8007ab0:	2000001c 	.word	0x2000001c
 8007ab4:	0802b064 	.word	0x0802b064
 8007ab8:	0802a554 	.word	0x0802a554
 8007abc:	20000213 	.word	0x20000213
 8007ac0:	200006a4 	.word	0x200006a4
 8007ac4:	20000034 	.word	0x20000034
 8007ac8:	2000069f 	.word	0x2000069f
 8007acc:	0003a980 	.word	0x0003a980
 8007ad0:	200005b3 	.word	0x200005b3
 8007ad4:	200005c4 	.word	0x200005c4
 8007ad8:	0802b094 	.word	0x0802b094
 8007adc:	0802a530 	.word	0x0802a530
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007ae0:	4bb6      	ldr	r3, [pc, #728]	@ (8007dbc <ESP_Upkeep+0x894>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d106      	bne.n	8007af6 <ESP_Upkeep+0x5ce>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007ae8:	f00c fd30 	bl	801454c <HAL_GetTick>
 8007aec:	0003      	movs	r3, r0
 8007aee:	330a      	adds	r3, #10
 8007af0:	001a      	movs	r2, r3
 8007af2:	4bb3      	ldr	r3, [pc, #716]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007af4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007af6:	4bb1      	ldr	r3, [pc, #708]	@ (8007dbc <ESP_Upkeep+0x894>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b0a      	cmp	r3, #10
 8007afc:	d106      	bne.n	8007b0c <ESP_Upkeep+0x5e4>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007afe:	f00c fd25 	bl	801454c <HAL_GetTick>
 8007b02:	0003      	movs	r3, r0
 8007b04:	330a      	adds	r3, #10
 8007b06:	001a      	movs	r2, r3
 8007b08:	4bad      	ldr	r3, [pc, #692]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007b0a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007b0c:	4bab      	ldr	r3, [pc, #684]	@ (8007dbc <ESP_Upkeep+0x894>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	d14b      	bne.n	8007bac <ESP_Upkeep+0x684>
          timeoutcntr++;
 8007b14:	4bab      	ldr	r3, [pc, #684]	@ (8007dc4 <ESP_Upkeep+0x89c>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	4ba9      	ldr	r3, [pc, #676]	@ (8007dc4 <ESP_Upkeep+0x89c>)
 8007b1e:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007b20:	4aa9      	ldr	r2, [pc, #676]	@ (8007dc8 <ESP_Upkeep+0x8a0>)
 8007b22:	4baa      	ldr	r3, [pc, #680]	@ (8007dcc <ESP_Upkeep+0x8a4>)
 8007b24:	0019      	movs	r1, r3
 8007b26:	2001      	movs	r0, #1
 8007b28:	f00b ffd0 	bl	8013acc <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007b2c:	4ba5      	ldr	r3, [pc, #660]	@ (8007dc4 <ESP_Upkeep+0x89c>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d924      	bls.n	8007b7e <ESP_Upkeep+0x656>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007b34:	f00c fd0a 	bl	801454c <HAL_GetTick>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	4aa5      	ldr	r2, [pc, #660]	@ (8007dd0 <ESP_Upkeep+0x8a8>)
 8007b3c:	189a      	adds	r2, r3, r2
 8007b3e:	4ba0      	ldr	r3, [pc, #640]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007b40:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007b42:	4ba4      	ldr	r3, [pc, #656]	@ (8007dd4 <ESP_Upkeep+0x8ac>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007b48:	f7ff f96a 	bl	8006e20 <clearDMABuffer>
            stop = HAL_GetTick();
 8007b4c:	f00c fcfe 	bl	801454c <HAL_GetTick>
 8007b50:	0002      	movs	r2, r0
 8007b52:	4ba1      	ldr	r3, [pc, #644]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007b54:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007b56:	4ba0      	ldr	r3, [pc, #640]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4ba0      	ldr	r3, [pc, #640]	@ (8007ddc <ESP_Upkeep+0x8b4>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	4a9f      	ldr	r2, [pc, #636]	@ (8007de0 <ESP_Upkeep+0x8b8>)
 8007b62:	499a      	ldr	r1, [pc, #616]	@ (8007dcc <ESP_Upkeep+0x8a4>)
 8007b64:	2001      	movs	r0, #1
 8007b66:	f00b ffb1 	bl	8013acc <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007b6c:	220d      	movs	r2, #13
 8007b6e:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007b70:	4b9d      	ldr	r3, [pc, #628]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007b72:	2216      	movs	r2, #22
 8007b74:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007b76:	4b9d      	ldr	r3, [pc, #628]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
            break;
 8007b7c:	e212      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
          }
          if(ATCommand != AT_SENDDATA){
 8007b7e:	4b9a      	ldr	r3, [pc, #616]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b0f      	cmp	r3, #15
 8007b84:	d003      	beq.n	8007b8e <ESP_Upkeep+0x666>
            EspState = ESP_STATE_SEND;
 8007b86:	4b97      	ldr	r3, [pc, #604]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007b88:	2204      	movs	r2, #4
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e00e      	b.n	8007bac <ESP_Upkeep+0x684>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007b8e:	4b96      	ldr	r3, [pc, #600]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007b90:	220e      	movs	r2, #14
 8007b92:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007b94:	4b96      	ldr	r3, [pc, #600]	@ (8007df0 <ESP_Upkeep+0x8c8>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	4b94      	ldr	r3, [pc, #592]	@ (8007df0 <ESP_Upkeep+0x8c8>)
 8007b9e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba0:	4b92      	ldr	r3, [pc, #584]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007ba8:	2204      	movs	r2, #4
 8007baa:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007bac:	1d7b      	adds	r3, r7, #5
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d100      	bne.n	8007bb6 <ESP_Upkeep+0x68e>
 8007bb4:	e1f1      	b.n	8007f9a <ESP_Upkeep+0xa72>
          EspState = ESP_STATE_NEXT_AT;
 8007bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007bb8:	2205      	movs	r2, #5
 8007bba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007bbc:	e1ed      	b.n	8007f9a <ESP_Upkeep+0xa72>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8007df0 <ESP_Upkeep+0x8c8>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8007df0 <ESP_Upkeep+0x8c8>)
 8007bc8:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007bca:	4b89      	ldr	r3, [pc, #548]	@ (8007df0 <ESP_Upkeep+0x8c8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	001a      	movs	r2, r3
 8007bd0:	4b88      	ldr	r3, [pc, #544]	@ (8007df4 <ESP_Upkeep+0x8cc>)
 8007bd2:	5c9a      	ldrb	r2, [r3, r2]
 8007bd4:	4b84      	ldr	r3, [pc, #528]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007bd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007bd8:	4b83      	ldr	r3, [pc, #524]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d102      	bne.n	8007be6 <ESP_Upkeep+0x6be>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007be0:	4b82      	ldr	r3, [pc, #520]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007be6:	4b80      	ldr	r3, [pc, #512]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b0e      	cmp	r3, #14
 8007bec:	d102      	bne.n	8007bf4 <ESP_Upkeep+0x6cc>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007bee:	4b7f      	ldr	r3, [pc, #508]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007bf4:	4b7c      	ldr	r3, [pc, #496]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b0e      	cmp	r3, #14
 8007bfa:	d006      	beq.n	8007c0a <ESP_Upkeep+0x6e2>
 8007bfc:	4b7a      	ldr	r3, [pc, #488]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d002      	beq.n	8007c0a <ESP_Upkeep+0x6e2>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007c04:	4b79      	ldr	r3, [pc, #484]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007c0a:	4b77      	ldr	r3, [pc, #476]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b11      	cmp	r3, #17
 8007c10:	d102      	bne.n	8007c18 <ESP_Upkeep+0x6f0>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007c12:	4b76      	ldr	r3, [pc, #472]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007c14:	2205      	movs	r2, #5
 8007c16:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007c18:	4b73      	ldr	r3, [pc, #460]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b15      	cmp	r3, #21
 8007c1e:	d102      	bne.n	8007c26 <ESP_Upkeep+0x6fe>
         ATExpectation = RECEIVE_EXPECTATION_MAIL_API;
 8007c20:	4b72      	ldr	r3, [pc, #456]	@ (8007dec <ESP_Upkeep+0x8c4>)
 8007c22:	2206      	movs	r2, #6
 8007c24:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007c26:	4b6f      	ldr	r3, [pc, #444]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007c28:	2204      	movs	r2, #4
 8007c2a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007c2c:	4b6e      	ldr	r3, [pc, #440]	@ (8007de8 <ESP_Upkeep+0x8c0>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b16      	cmp	r3, #22
 8007c32:	d000      	beq.n	8007c36 <ESP_Upkeep+0x70e>
 8007c34:	e1b3      	b.n	8007f9e <ESP_Upkeep+0xa76>
        if(Mode == AT_MODE_SEND){
 8007c36:	4b70      	ldr	r3, [pc, #448]	@ (8007df8 <ESP_Upkeep+0x8d0>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d124      	bne.n	8007c88 <ESP_Upkeep+0x760>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007c3e:	f00c fc85 	bl	801454c <HAL_GetTick>
 8007c42:	0003      	movs	r3, r0
 8007c44:	4a6d      	ldr	r2, [pc, #436]	@ (8007dfc <ESP_Upkeep+0x8d4>)
 8007c46:	189a      	adds	r2, r3, r2
 8007c48:	4b5d      	ldr	r3, [pc, #372]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007c4a:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007c4c:	f7ff f8e8 	bl	8006e20 <clearDMABuffer>
          stop = HAL_GetTick();
 8007c50:	f00c fc7c 	bl	801454c <HAL_GetTick>
 8007c54:	0002      	movs	r2, r0
 8007c56:	4b60      	ldr	r3, [pc, #384]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007c58:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8007ddc <ESP_Upkeep+0x8b4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	4a66      	ldr	r2, [pc, #408]	@ (8007e00 <ESP_Upkeep+0x8d8>)
 8007c66:	4967      	ldr	r1, [pc, #412]	@ (8007e04 <ESP_Upkeep+0x8dc>)
 8007c68:	2002      	movs	r0, #2
 8007c6a:	f00b ff2f 	bl	8013acc <CreateLine>
          ResetdBAmax();
 8007c6e:	f005 ff83 	bl	800db78 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007c72:	f7fd f87f 	bl	8004d74 <resetMaxMeasurementValues>
          showTime();
 8007c76:	f001 fdeb 	bl	8009850 <showTime>
          ESPTransmitDone = true;
 8007c7a:	4b56      	ldr	r3, [pc, #344]	@ (8007dd4 <ESP_Upkeep+0x8ac>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007c80:	4b58      	ldr	r3, [pc, #352]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007c82:	220d      	movs	r2, #13
 8007c84:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007c86:	e18a      	b.n	8007f9e <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_GETTIME) {
 8007c88:	4b5b      	ldr	r3, [pc, #364]	@ (8007df8 <ESP_Upkeep+0x8d0>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b05      	cmp	r3, #5
 8007c8e:	d13a      	bne.n	8007d06 <ESP_Upkeep+0x7de>
            setTime = false;
 8007c90:	4b5d      	ldr	r3, [pc, #372]	@ (8007e08 <ESP_Upkeep+0x8e0>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007c96:	f001 fe61 	bl	800995c <calculateNextNTPTime>
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8007e0c <ESP_Upkeep+0x8e4>)
 8007c9e:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e0c <ESP_Upkeep+0x8e4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8007e10 <ESP_Upkeep+0x8e8>)
 8007ca6:	189a      	adds	r2, r3, r2
 8007ca8:	4b58      	ldr	r3, [pc, #352]	@ (8007e0c <ESP_Upkeep+0x8e4>)
 8007caa:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007cac:	4b58      	ldr	r3, [pc, #352]	@ (8007e10 <ESP_Upkeep+0x8e8>)
 8007cae:	4a59      	ldr	r2, [pc, #356]	@ (8007e14 <ESP_Upkeep+0x8ec>)
 8007cb0:	4954      	ldr	r1, [pc, #336]	@ (8007e04 <ESP_Upkeep+0x8dc>)
 8007cb2:	2002      	movs	r0, #2
 8007cb4:	f00b ff0a 	bl	8013acc <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007cb8:	4b57      	ldr	r3, [pc, #348]	@ (8007e18 <ESP_Upkeep+0x8f0>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	4b40      	ldr	r3, [pc, #256]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007cbe:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007cc0:	f7ff f8ae 	bl	8006e20 <clearDMABuffer>
            stop = HAL_GetTick();
 8007cc4:	f00c fc42 	bl	801454c <HAL_GetTick>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	4b43      	ldr	r3, [pc, #268]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007ccc:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007cce:	4b42      	ldr	r3, [pc, #264]	@ (8007dd8 <ESP_Upkeep+0x8b0>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4b42      	ldr	r3, [pc, #264]	@ (8007ddc <ESP_Upkeep+0x8b4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	4a50      	ldr	r2, [pc, #320]	@ (8007e1c <ESP_Upkeep+0x8f4>)
 8007cda:	494a      	ldr	r1, [pc, #296]	@ (8007e04 <ESP_Upkeep+0x8dc>)
 8007cdc:	2002      	movs	r0, #2
 8007cde:	f00b fef5 	bl	8013acc <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007ce2:	f00c fc33 	bl	801454c <HAL_GetTick>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8007e20 <ESP_Upkeep+0x8f8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d804      	bhi.n	8007cf8 <ESP_Upkeep+0x7d0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007cee:	4b4d      	ldr	r3, [pc, #308]	@ (8007e24 <ESP_Upkeep+0x8fc>)
 8007cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8007e28 <ESP_Upkeep+0x900>)
 8007cf2:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007cf4:	f005 fe32 	bl	800d95c <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007cfa:	220d      	movs	r2, #13
 8007cfc:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8007df8 <ESP_Upkeep+0x8d0>)
 8007d00:	2202      	movs	r2, #2
 8007d02:	701a      	strb	r2, [r3, #0]
    break;
 8007d04:	e14b      	b.n	8007f9e <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_MAIL) {
 8007d06:	4b3c      	ldr	r3, [pc, #240]	@ (8007df8 <ESP_Upkeep+0x8d0>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b06      	cmp	r3, #6
 8007d0c:	d117      	bne.n	8007d3e <ESP_Upkeep+0x816>
            clearDMABuffer();
 8007d0e:	f7ff f887 	bl	8006e20 <clearDMABuffer>
            Info("Email message send");
 8007d12:	4a46      	ldr	r2, [pc, #280]	@ (8007e2c <ESP_Upkeep+0x904>)
 8007d14:	4b3b      	ldr	r3, [pc, #236]	@ (8007e04 <ESP_Upkeep+0x8dc>)
 8007d16:	0019      	movs	r1, r3
 8007d18:	2002      	movs	r0, #2
 8007d1a:	f00b fed7 	bl	8013acc <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e18 <ESP_Upkeep+0x8f0>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b27      	ldr	r3, [pc, #156]	@ (8007dc0 <ESP_Upkeep+0x898>)
 8007d24:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007d26:	4b42      	ldr	r3, [pc, #264]	@ (8007e30 <ESP_Upkeep+0x908>)
 8007d28:	2202      	movs	r2, #2
 8007d2a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007d2e:	220d      	movs	r2, #13
 8007d30:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007d32:	4b31      	ldr	r3, [pc, #196]	@ (8007df8 <ESP_Upkeep+0x8d0>)
 8007d34:	2202      	movs	r2, #2
 8007d36:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007d38:	f005 fe10 	bl	800d95c <EnabledConnectedDevices>
    break;
 8007d3c:	e12f      	b.n	8007f9e <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_RESET;
 8007d3e:	4b29      	ldr	r3, [pc, #164]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007d40:	2209      	movs	r2, #9
 8007d42:	701a      	strb	r2, [r3, #0]
    break;
 8007d44:	e12b      	b.n	8007f9e <ESP_Upkeep+0xa76>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007d46:	4b3b      	ldr	r3, [pc, #236]	@ (8007e34 <ESP_Upkeep+0x90c>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007e38 <ESP_Upkeep+0x910>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2101      	movs	r1, #1
 8007d52:	0018      	movs	r0, r3
 8007d54:	f00d fe8b 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007d58:	2001      	movs	r0, #1
 8007d5a:	f00c fc01 	bl	8014560 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007d5e:	2380      	movs	r3, #128	@ 0x80
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	4836      	ldr	r0, [pc, #216]	@ (8007e3c <ESP_Upkeep+0x914>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	0019      	movs	r1, r3
 8007d68:	f00d fe81 	bl	8015a6e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	f00c fbf7 	bl	8014560 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007d72:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <ESP_Upkeep+0x910>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	2102      	movs	r1, #2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f00d fe78 	bl	8015a6e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007d7e:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <ESP_Upkeep+0x8bc>)
 8007d80:	2209      	movs	r2, #9
 8007d82:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007d84:	2001      	movs	r0, #1
 8007d86:	f00c fbeb 	bl	8014560 <HAL_Delay>
      ResetESPIndicator();
 8007d8a:	f00a fca1 	bl	80126d0 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e40 <ESP_Upkeep+0x918>)
 8007d90:	4b2c      	ldr	r3, [pc, #176]	@ (8007e44 <ESP_Upkeep+0x91c>)
 8007d92:	0019      	movs	r1, r3
 8007d94:	2003      	movs	r0, #3
 8007d96:	f00b fe99 	bl	8013acc <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007d9a:	f001 fcc1 	bl	8009720 <Check_USB_PowerOn>
 8007d9e:	1e03      	subs	r3, r0, #0
 8007da0:	d103      	bne.n	8007daa <ESP_Upkeep+0x882>
 8007da2:	4b29      	ldr	r3, [pc, #164]	@ (8007e48 <ESP_Upkeep+0x920>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <ESP_Upkeep+0x886>
        EnabledConnectedDevices();
 8007daa:	f005 fdd7 	bl	800d95c <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007dae:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <ESP_Upkeep+0x924>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007db4:	4b03      	ldr	r3, [pc, #12]	@ (8007dc4 <ESP_Upkeep+0x89c>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
      break;
 8007dba:	e0f3      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
 8007dbc:	20000034 	.word	0x20000034
 8007dc0:	200006a4 	.word	0x200006a4
 8007dc4:	200006a0 	.word	0x200006a0
 8007dc8:	0802b0c8 	.word	0x0802b0c8
 8007dcc:	0802a530 	.word	0x0802a530
 8007dd0:	0000c350 	.word	0x0000c350
 8007dd4:	200005b3 	.word	0x200005b3
 8007dd8:	200005c4 	.word	0x200005c4
 8007ddc:	200005c0 	.word	0x200005c0
 8007de0:	0802b104 	.word	0x0802b104
 8007de4:	20000030 	.word	0x20000030
 8007de8:	200006ae 	.word	0x200006ae
 8007dec:	200006ad 	.word	0x200006ad
 8007df0:	2000069e 	.word	0x2000069e
 8007df4:	20000694 	.word	0x20000694
 8007df8:	200006af 	.word	0x200006af
 8007dfc:	0003a980 	.word	0x0003a980
 8007e00:	0802b134 	.word	0x0802b134
 8007e04:	0802b14c 	.word	0x0802b14c
 8007e08:	20000002 	.word	0x20000002
 8007e0c:	200006a8 	.word	0x200006a8
 8007e10:	00012686 	.word	0x00012686
 8007e14:	0802b150 	.word	0x0802b150
 8007e18:	2000002c 	.word	0x2000002c
 8007e1c:	0802b194 	.word	0x0802b194
 8007e20:	000061a7 	.word	0x000061a7
 8007e24:	20000f6c 	.word	0x20000f6c
 8007e28:	000061a8 	.word	0x000061a8
 8007e2c:	0802b1b4 	.word	0x0802b1b4
 8007e30:	20000f57 	.word	0x20000f57
 8007e34:	200005ac 	.word	0x200005ac
 8007e38:	50001c00 	.word	0x50001c00
 8007e3c:	50000800 	.word	0x50000800
 8007e40:	0802b1c8 	.word	0x0802b1c8
 8007e44:	0802a554 	.word	0x0802a554
 8007e48:	20001faa 	.word	0x20001faa
 8007e4c:	2000069f 	.word	0x2000069f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007e50:	4b57      	ldr	r3, [pc, #348]	@ (8007fb0 <ESP_Upkeep+0xa88>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	0018      	movs	r0, r3
 8007e56:	f00b fde3 	bl	8013a20 <TimestampIsReached>
 8007e5a:	1e03      	subs	r3, r0, #0
 8007e5c:	d103      	bne.n	8007e66 <ESP_Upkeep+0x93e>
 8007e5e:	4b55      	ldr	r3, [pc, #340]	@ (8007fb4 <ESP_Upkeep+0xa8c>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d047      	beq.n	8007ef6 <ESP_Upkeep+0x9ce>
        ESPTransmitDone = false;
 8007e66:	4b54      	ldr	r3, [pc, #336]	@ (8007fb8 <ESP_Upkeep+0xa90>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007e6c:	4b53      	ldr	r3, [pc, #332]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <ESP_Upkeep+0x958>
          InitIsDone = true;
 8007e74:	4b52      	ldr	r3, [pc, #328]	@ (8007fc0 <ESP_Upkeep+0xa98>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007e7a:	4b52      	ldr	r3, [pc, #328]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007e7c:	220b      	movs	r2, #11
 8007e7e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007e80:	4b4e      	ldr	r3, [pc, #312]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d105      	bne.n	8007e94 <ESP_Upkeep+0x96c>
          ConnectionMade = true;
 8007e88:	4b4f      	ldr	r3, [pc, #316]	@ (8007fc8 <ESP_Upkeep+0xaa0>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007e90:	220b      	movs	r2, #11
 8007e92:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007e94:	4b49      	ldr	r3, [pc, #292]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d102      	bne.n	8007ea2 <ESP_Upkeep+0x97a>
          EspState = ESP_STATE_INIT;
 8007e9c:	4b49      	ldr	r3, [pc, #292]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 8007ea2:	4b46      	ldr	r3, [pc, #280]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b06      	cmp	r3, #6
 8007ea8:	d102      	bne.n	8007eb0 <ESP_Upkeep+0x988>
          EspState = ESP_STATE_CONFIG;
 8007eaa:	4b46      	ldr	r3, [pc, #280]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007eac:	220e      	movs	r2, #14
 8007eae:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8007eb0:	4b42      	ldr	r3, [pc, #264]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d108      	bne.n	8007eca <ESP_Upkeep+0x9a2>
          EspState = ESP_STATE_CONFIG;
 8007eb8:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007eba:	220e      	movs	r2, #14
 8007ebc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007ebe:	4a43      	ldr	r2, [pc, #268]	@ (8007fcc <ESP_Upkeep+0xaa4>)
 8007ec0:	4b43      	ldr	r3, [pc, #268]	@ (8007fd0 <ESP_Upkeep+0xaa8>)
 8007ec2:	0019      	movs	r1, r3
 8007ec4:	2002      	movs	r0, #2
 8007ec6:	f00b fe01 	bl	8013acc <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007eca:	4b3c      	ldr	r3, [pc, #240]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d105      	bne.n	8007ede <ESP_Upkeep+0x9b6>
          EspState = ESP_STATE_MODE_SELECT;
 8007ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007ed4:	220b      	movs	r2, #11
 8007ed6:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8007ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fd4 <ESP_Upkeep+0xaac>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007ede:	4b35      	ldr	r3, [pc, #212]	@ (8007fb4 <ESP_Upkeep+0xa8c>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d020      	beq.n	8007f28 <ESP_Upkeep+0xa00>
 8007ee6:	4b35      	ldr	r3, [pc, #212]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d01c      	beq.n	8007f28 <ESP_Upkeep+0xa00>
          EspState = ESP_STATE_INIT;
 8007eee:	4b35      	ldr	r3, [pc, #212]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007ef4:	e018      	b.n	8007f28 <ESP_Upkeep+0xa00>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007ef6:	f001 fd31 	bl	800995c <calculateNextNTPTime>
 8007efa:	0002      	movs	r2, r0
 8007efc:	4b36      	ldr	r3, [pc, #216]	@ (8007fd8 <ESP_Upkeep+0xab0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d94e      	bls.n	8007fa2 <ESP_Upkeep+0xa7a>
        if(Mode == AT_MODE_SEND ) {
 8007f04:	4b2d      	ldr	r3, [pc, #180]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d14a      	bne.n	8007fa2 <ESP_Upkeep+0xa7a>
           Mode = AT_MODE_GETTIME;
 8007f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007fbc <ESP_Upkeep+0xa94>)
 8007f0e:	2205      	movs	r2, #5
 8007f10:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007f12:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007f14:	2202      	movs	r2, #2
 8007f16:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007f18:	4b25      	ldr	r3, [pc, #148]	@ (8007fb0 <ESP_Upkeep+0xa88>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fdc <ESP_Upkeep+0xab4>)
 8007f1e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007f20:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe0 <ESP_Upkeep+0xab8>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007f26:	e03c      	b.n	8007fa2 <ESP_Upkeep+0xa7a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007f28:	46c0      	nop			@ (mov r8, r8)
      break;
 8007f2a:	e03a      	b.n	8007fa2 <ESP_Upkeep+0xa7a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8007fe4 <ESP_Upkeep+0xabc>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	4053      	eors	r3, r2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <ESP_Upkeep+0xa24>
        Info("Do nothing until reset");
 8007f3a:	4a24      	ldr	r2, [pc, #144]	@ (8007fcc <ESP_Upkeep+0xaa4>)
 8007f3c:	4b24      	ldr	r3, [pc, #144]	@ (8007fd0 <ESP_Upkeep+0xaa8>)
 8007f3e:	0019      	movs	r1, r3
 8007f40:	2002      	movs	r0, #2
 8007f42:	f00b fdc3 	bl	8013acc <CreateLine>
        msgdone = true;
 8007f46:	4b27      	ldr	r3, [pc, #156]	@ (8007fe4 <ESP_Upkeep+0xabc>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007f4c:	f01a fe6a 	bl	8022c24 <GetUsbRxPointer>
 8007f50:	0003      	movs	r3, r0
 8007f52:	0018      	movs	r0, r3
 8007f54:	f000 f97e 	bl	8008254 <Process_PC_Config>
      break;
 8007f58:	e024      	b.n	8007fa4 <ESP_Upkeep+0xa7c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007f5a:	4a23      	ldr	r2, [pc, #140]	@ (8007fe8 <ESP_Upkeep+0xac0>)
 8007f5c:	4b23      	ldr	r3, [pc, #140]	@ (8007fec <ESP_Upkeep+0xac4>)
 8007f5e:	0019      	movs	r1, r3
 8007f60:	2001      	movs	r0, #1
 8007f62:	f00b fdb3 	bl	8013acc <CreateLine>
      EspState = ESP_STATE_INIT;
 8007f66:	4b17      	ldr	r3, [pc, #92]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007f68:	2202      	movs	r2, #2
 8007f6a:	701a      	strb	r2, [r3, #0]
      break;
 8007f6c:	e01a      	b.n	8007fa4 <ESP_Upkeep+0xa7c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007f6e:	4a20      	ldr	r2, [pc, #128]	@ (8007ff0 <ESP_Upkeep+0xac8>)
 8007f70:	4b1e      	ldr	r3, [pc, #120]	@ (8007fec <ESP_Upkeep+0xac4>)
 8007f72:	0019      	movs	r1, r3
 8007f74:	2001      	movs	r0, #1
 8007f76:	f00b fda9 	bl	8013acc <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007f7a:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	701a      	strb	r2, [r3, #0]
      break;
 8007f80:	e010      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
      break;
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	e00e      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
        break;
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	e00c      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
      break;
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	e00a      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
        break;
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	e008      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
    break;
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	e006      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
    break;
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	e004      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
      break;
 8007f9a:	46c0      	nop			@ (mov r8, r8)
 8007f9c:	e002      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
    break;
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	e000      	b.n	8007fa4 <ESP_Upkeep+0xa7c>
      break;
 8007fa2:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007fa4:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <ESP_Upkeep+0xa9c>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b002      	add	sp, #8
 8007fae:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb0:	200006a4 	.word	0x200006a4
 8007fb4:	200005af 	.word	0x200005af
 8007fb8:	200005b3 	.word	0x200005b3
 8007fbc:	200006af 	.word	0x200006af
 8007fc0:	200005ad 	.word	0x200005ad
 8007fc4:	20000030 	.word	0x20000030
 8007fc8:	200005b0 	.word	0x200005b0
 8007fcc:	0802b1dc 	.word	0x0802b1dc
 8007fd0:	0802b14c 	.word	0x0802b14c
 8007fd4:	200005b1 	.word	0x200005b1
 8007fd8:	200006a8 	.word	0x200006a8
 8007fdc:	2000002c 	.word	0x2000002c
 8007fe0:	20000002 	.word	0x20000002
 8007fe4:	200005b2 	.word	0x200005b2
 8007fe8:	0802b1f4 	.word	0x0802b1f4
 8007fec:	0802a530 	.word	0x0802a530
 8007ff0:	0802b208 	.word	0x0802b208

08007ff4 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007ffc:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <I2CSensors_Init+0x54>)
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8008002:	4a12      	ldr	r2, [pc, #72]	@ (800804c <I2CSensors_Init+0x58>)
 8008004:	4b12      	ldr	r3, [pc, #72]	@ (8008050 <I2CSensors_Init+0x5c>)
 8008006:	0011      	movs	r1, r2
 8008008:	0018      	movs	r0, r3
 800800a:	f00b ff5d 	bl	8013ec8 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800800e:	4a0f      	ldr	r2, [pc, #60]	@ (800804c <I2CSensors_Init+0x58>)
 8008010:	4b0f      	ldr	r3, [pc, #60]	@ (8008050 <I2CSensors_Init+0x5c>)
 8008012:	0011      	movs	r1, r2
 8008014:	0018      	movs	r0, r3
 8008016:	f008 fd15 	bl	8010a44 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 800801a:	4a0e      	ldr	r2, [pc, #56]	@ (8008054 <I2CSensors_Init+0x60>)
 800801c:	490b      	ldr	r1, [pc, #44]	@ (800804c <I2CSensors_Init+0x58>)
 800801e:	4b0c      	ldr	r3, [pc, #48]	@ (8008050 <I2CSensors_Init+0x5c>)
 8008020:	0018      	movs	r0, r3
 8008022:	f002 fcaf 	bl	800a984 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8008026:	4a0c      	ldr	r2, [pc, #48]	@ (8008058 <I2CSensors_Init+0x64>)
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <I2CSensors_Init+0x68>)
 800802a:	0011      	movs	r1, r2
 800802c:	0018      	movs	r0, r3
 800802e:	f003 fab7 	bl	800b5a0 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8008032:	4a09      	ldr	r2, [pc, #36]	@ (8008058 <I2CSensors_Init+0x64>)
 8008034:	4b09      	ldr	r3, [pc, #36]	@ (800805c <I2CSensors_Init+0x68>)
 8008036:	0011      	movs	r1, r2
 8008038:	0018      	movs	r0, r3
 800803a:	f7fb fd9b 	bl	8003b74 <ENS_Init>
}
 800803e:	46c0      	nop			@ (mov r8, r8)
 8008040:	46bd      	mov	sp, r7
 8008042:	b002      	add	sp, #8
 8008044:	bd80      	pop	{r7, pc}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	20000838 	.word	0x20000838
 800804c:	0800810d 	.word	0x0800810d
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008061 	.word	0x08008061
 8008058:	080081dd 	.word	0x080081dd
 800805c:	08008161 	.word	0x08008161

08008060 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008062:	b087      	sub	sp, #28
 8008064:	af02      	add	r7, sp, #8
 8008066:	6039      	str	r1, [r7, #0]
 8008068:	0011      	movs	r1, r2
 800806a:	1dfb      	adds	r3, r7, #7
 800806c:	1c02      	adds	r2, r0, #0
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	1dbb      	adds	r3, r7, #6
 8008072:	1c0a      	adds	r2, r1, #0
 8008074:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8008076:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <ReadI2CDirect+0x54>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	1dfb      	adds	r3, r7, #7
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	18db      	adds	r3, r3, r3
 8008082:	b299      	uxth	r1, r3
 8008084:	1dbb      	adds	r3, r7, #6
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	260f      	movs	r6, #15
 800808c:	19bc      	adds	r4, r7, r6
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	25fa      	movs	r5, #250	@ 0xfa
 8008092:	9500      	str	r5, [sp, #0]
 8008094:	f00d fec2 	bl	8015e1c <HAL_I2C_Master_Receive>
 8008098:	0003      	movs	r3, r0
 800809a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800809c:	19bb      	adds	r3, r7, r6
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <ReadI2CDirect+0x48>
        return false;
 80080a4:	2300      	movs	r3, #0
 80080a6:	e000      	b.n	80080aa <ReadI2CDirect+0x4a>
    }
    return true;
 80080a8:	2301      	movs	r3, #1
}
 80080aa:	0018      	movs	r0, r3
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b005      	add	sp, #20
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	20000838 	.word	0x20000838

080080b8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80080b8:	b5b0      	push	{r4, r5, r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6039      	str	r1, [r7, #0]
 80080c0:	0011      	movs	r1, r2
 80080c2:	1dfb      	adds	r3, r7, #7
 80080c4:	1c02      	adds	r2, r0, #0
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	1dbb      	adds	r3, r7, #6
 80080ca:	1c0a      	adds	r2, r1, #0
 80080cc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80080ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008108 <ReadI2C+0x50>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	1dfb      	adds	r3, r7, #7
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	18db      	adds	r3, r3, r3
 80080da:	b299      	uxth	r1, r3
 80080dc:	1dbb      	adds	r3, r7, #6
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	250f      	movs	r5, #15
 80080e4:	197c      	adds	r4, r7, r5
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	f00e f8a6 	bl	8016238 <HAL_I2C_Master_Receive_DMA>
 80080ec:	0003      	movs	r3, r0
 80080ee:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80080f0:	197b      	adds	r3, r7, r5
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <ReadI2C+0x44>
        return false;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <ReadI2C+0x46>
    }
    return true;
 80080fc:	2301      	movs	r3, #1
}
 80080fe:	0018      	movs	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	b004      	add	sp, #16
 8008104:	bdb0      	pop	{r4, r5, r7, pc}
 8008106:	46c0      	nop			@ (mov r8, r8)
 8008108:	20000838 	.word	0x20000838

0800810c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800810c:	b5b0      	push	{r4, r5, r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6039      	str	r1, [r7, #0]
 8008114:	0011      	movs	r1, r2
 8008116:	1dfb      	adds	r3, r7, #7
 8008118:	1c02      	adds	r2, r0, #0
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	1dbb      	adds	r3, r7, #6
 800811e:	1c0a      	adds	r2, r1, #0
 8008120:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8008122:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <WriteI2C+0x50>)
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	1dfb      	adds	r3, r7, #7
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	18db      	adds	r3, r3, r3
 800812e:	b299      	uxth	r1, r3
 8008130:	1dbb      	adds	r3, r7, #6
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	250f      	movs	r5, #15
 8008138:	197c      	adds	r4, r7, r5
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	f00d ff76 	bl	801602c <HAL_I2C_Master_Transmit_DMA>
 8008140:	0003      	movs	r3, r0
 8008142:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008144:	197b      	adds	r3, r7, r5
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <WriteI2C+0x44>
        return false;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <WriteI2C+0x46>
    }
    return true;
 8008150:	2301      	movs	r3, #1
}
 8008152:	0018      	movs	r0, r3
 8008154:	46bd      	mov	sp, r7
 8008156:	b004      	add	sp, #16
 8008158:	bdb0      	pop	{r4, r5, r7, pc}
 800815a:	46c0      	nop			@ (mov r8, r8)
 800815c:	20000838 	.word	0x20000838

08008160 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	b08b      	sub	sp, #44	@ 0x2c
 8008164:	af04      	add	r7, sp, #16
 8008166:	0004      	movs	r4, r0
 8008168:	0008      	movs	r0, r1
 800816a:	0011      	movs	r1, r2
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	250f      	movs	r5, #15
 8008170:	197b      	adds	r3, r7, r5
 8008172:	1c22      	adds	r2, r4, #0
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	260c      	movs	r6, #12
 8008178:	19bb      	adds	r3, r7, r6
 800817a:	1c02      	adds	r2, r0, #0
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	230a      	movs	r3, #10
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	1c0a      	adds	r2, r1, #0
 8008184:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8008186:	4b14      	ldr	r3, [pc, #80]	@ (80081d8 <ReadI2CMem+0x78>)
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	197b      	adds	r3, r7, r5
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	18db      	adds	r3, r3, r3
 8008192:	b299      	uxth	r1, r3
 8008194:	2217      	movs	r2, #23
 8008196:	18bc      	adds	r4, r7, r2
 8008198:	230a      	movs	r3, #10
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	881d      	ldrh	r5, [r3, #0]
 800819e:	19bb      	adds	r3, r7, r6
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	2364      	movs	r3, #100	@ 0x64
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	2328      	movs	r3, #40	@ 0x28
 80081a8:	2608      	movs	r6, #8
 80081aa:	199b      	adds	r3, r3, r6
 80081ac:	19db      	adds	r3, r3, r7
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	002b      	movs	r3, r5
 80081b8:	f00e f944 	bl	8016444 <HAL_I2C_Mem_Read>
 80081bc:	0003      	movs	r3, r0
 80081be:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80081c0:	2217      	movs	r2, #23
 80081c2:	18bb      	adds	r3, r7, r2
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <ReadI2CMem+0x6e>
     return false;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e000      	b.n	80081d0 <ReadI2CMem+0x70>
   }
   return true;
 80081ce:	2301      	movs	r3, #1
}
 80081d0:	0018      	movs	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b007      	add	sp, #28
 80081d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d8:	20000838 	.word	0x20000838

080081dc <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80081dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081de:	b089      	sub	sp, #36	@ 0x24
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	0004      	movs	r4, r0
 80081e4:	0008      	movs	r0, r1
 80081e6:	0011      	movs	r1, r2
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	250f      	movs	r5, #15
 80081ec:	197b      	adds	r3, r7, r5
 80081ee:	1c22      	adds	r2, r4, #0
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	260c      	movs	r6, #12
 80081f4:	19bb      	adds	r3, r7, r6
 80081f6:	1c02      	adds	r2, r0, #0
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	230a      	movs	r3, #10
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	1c0a      	adds	r2, r1, #0
 8008200:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8008202:	4b13      	ldr	r3, [pc, #76]	@ (8008250 <WriteI2CMem+0x74>)
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	197b      	adds	r3, r7, r5
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	18db      	adds	r3, r3, r3
 800820e:	b299      	uxth	r1, r3
 8008210:	2217      	movs	r2, #23
 8008212:	18bc      	adds	r4, r7, r2
 8008214:	230a      	movs	r3, #10
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	881d      	ldrh	r5, [r3, #0]
 800821a:	19bb      	adds	r3, r7, r6
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	2328      	movs	r3, #40	@ 0x28
 8008220:	2608      	movs	r6, #8
 8008222:	199b      	adds	r3, r3, r6
 8008224:	19db      	adds	r3, r3, r7
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	002b      	movs	r3, r5
 8008230:	f00e fa3c 	bl	80166ac <HAL_I2C_Mem_Write_DMA>
 8008234:	0003      	movs	r3, r0
 8008236:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008238:	2217      	movs	r2, #23
 800823a:	18bb      	adds	r3, r7, r2
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <WriteI2CMem+0x6a>
     return false;
 8008242:	2300      	movs	r3, #0
 8008244:	e000      	b.n	8008248 <WriteI2CMem+0x6c>
   }
   return true;
 8008246:	2301      	movs	r3, #1
}
 8008248:	0018      	movs	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	b007      	add	sp, #28
 800824e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008250:	20000838 	.word	0x20000838

08008254 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008254:	b590      	push	{r4, r7, lr}
 8008256:	b0c3      	sub	sp, #268	@ 0x10c
 8008258:	af3e      	add	r7, sp, #248	@ 0xf8
 800825a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800825c:	f01a fd02 	bl	8022c64 <GetUsbRxDataSize>
 8008260:	0003      	movs	r3, r0
 8008262:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b05      	cmp	r3, #5
 8008268:	d972      	bls.n	8008350 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2123      	movs	r1, #35	@ 0x23
 800826e:	0018      	movs	r0, r3
 8008270:	f01d ff28 	bl	80260c4 <strchr>
 8008274:	0003      	movs	r3, r0
 8008276:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d066      	beq.n	800834c <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	785a      	ldrb	r2, [r3, #1]
 8008282:	4b35      	ldr	r3, [pc, #212]	@ (8008358 <Process_PC_Config+0x104>)
 8008284:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	789a      	ldrb	r2, [r3, #2]
 800828a:	4b33      	ldr	r3, [pc, #204]	@ (8008358 <Process_PC_Config+0x104>)
 800828c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800828e:	4b32      	ldr	r3, [pc, #200]	@ (8008358 <Process_PC_Config+0x104>)
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	3305      	adds	r3, #5
 8008294:	001a      	movs	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4293      	cmp	r3, r2
 800829a:	d352      	bcc.n	8008342 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	1cd9      	adds	r1, r3, #3
 80082a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008358 <Process_PC_Config+0x104>)
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	001a      	movs	r2, r3
 80082a6:	4b2d      	ldr	r3, [pc, #180]	@ (800835c <Process_PC_Config+0x108>)
 80082a8:	0018      	movs	r0, r3
 80082aa:	f01d ffdf 	bl	802626c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80082ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008358 <Process_PC_Config+0x104>)
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	3303      	adds	r3, #3
 80082b4:	001a      	movs	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b21b      	sxth	r3, r3
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	b21a      	sxth	r2, r3
 80082c2:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <Process_PC_Config+0x104>)
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	3304      	adds	r3, #4
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	18cb      	adds	r3, r1, r3
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b21b      	sxth	r3, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	b21b      	sxth	r3, r3
 80082d4:	b299      	uxth	r1, r3
 80082d6:	4a20      	ldr	r2, [pc, #128]	@ (8008358 <Process_PC_Config+0x104>)
 80082d8:	2381      	movs	r3, #129	@ 0x81
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80082de:	4a1e      	ldr	r2, [pc, #120]	@ (8008358 <Process_PC_Config+0x104>)
 80082e0:	2381      	movs	r3, #129	@ 0x81
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	5ad4      	ldrh	r4, [r2, r3]
 80082e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008358 <Process_PC_Config+0x104>)
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	3303      	adds	r3, #3
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	0011      	movs	r1, r2
 80082f2:	0018      	movs	r0, r3
 80082f4:	f000 fa56 	bl	80087a4 <CRC16_ARC>
 80082f8:	0003      	movs	r3, r0
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d007      	beq.n	800830e <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80082fe:	4b16      	ldr	r3, [pc, #88]	@ (8008358 <Process_PC_Config+0x104>)
 8008300:	785a      	ldrb	r2, [r3, #1]
 8008302:	4b16      	ldr	r3, [pc, #88]	@ (800835c <Process_PC_Config+0x108>)
 8008304:	0019      	movs	r1, r3
 8008306:	2001      	movs	r0, #1
 8008308:	f000 f9fa 	bl	8008700 <Create_Message>
 800830c:	e016      	b.n	800833c <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 800830e:	4c12      	ldr	r4, [pc, #72]	@ (8008358 <Process_PC_Config+0x104>)
 8008310:	466b      	mov	r3, sp
 8008312:	0018      	movs	r0, r3
 8008314:	0023      	movs	r3, r4
 8008316:	3310      	adds	r3, #16
 8008318:	22f4      	movs	r2, #244	@ 0xf4
 800831a:	0019      	movs	r1, r3
 800831c:	f01d ffa6 	bl	802626c <memcpy>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	6861      	ldr	r1, [r4, #4]
 8008324:	68a2      	ldr	r2, [r4, #8]
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	f000 f81a 	bl	8008360 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800832c:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <Process_PC_Config+0x104>)
 800832e:	7818      	ldrb	r0, [r3, #0]
 8008330:	4b09      	ldr	r3, [pc, #36]	@ (8008358 <Process_PC_Config+0x104>)
 8008332:	785a      	ldrb	r2, [r3, #1]
 8008334:	4b09      	ldr	r3, [pc, #36]	@ (800835c <Process_PC_Config+0x108>)
 8008336:	0019      	movs	r1, r3
 8008338:	f000 f9e2 	bl	8008700 <Create_Message>
                }
                ResetUsbRxDataSize();
 800833c:	f01a fc7a 	bl	8022c34 <ResetUsbRxDataSize>
                return;
 8008340:	e006      	b.n	8008350 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	0018      	movs	r0, r3
 8008346:	f01a fc97 	bl	8022c78 <GetUsbRxNextChunk>
 800834a:	e001      	b.n	8008350 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 800834c:	f01a fc72 	bl	8022c34 <ResetUsbRxDataSize>
        }
    }
}
 8008350:	46bd      	mov	sp, r7
 8008352:	b005      	add	sp, #20
 8008354:	bd90      	pop	{r4, r7, pc}
 8008356:	46c0      	nop			@ (mov r8, r8)
 8008358:	2000083c 	.word	0x2000083c
 800835c:	2000083e 	.word	0x2000083e

08008360 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008360:	b084      	sub	sp, #16
 8008362:	b5b0      	push	{r4, r5, r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	2518      	movs	r5, #24
 800836a:	197c      	adds	r4, r7, r5
 800836c:	6020      	str	r0, [r4, #0]
 800836e:	6061      	str	r1, [r4, #4]
 8008370:	60a2      	str	r2, [r4, #8]
 8008372:	60e3      	str	r3, [r4, #12]
  printf_USB("(msg.Command: %d",msg.Command);
 8008374:	002c      	movs	r4, r5
 8008376:	193b      	adds	r3, r7, r4
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	001a      	movs	r2, r3
 800837c:	4bc2      	ldr	r3, [pc, #776]	@ (8008688 <ProcessCmd+0x328>)
 800837e:	0011      	movs	r1, r2
 8008380:	0018      	movs	r0, r3
 8008382:	f000 fa5b 	bl	800883c <printf_USB>
  switch (msg.Command)
 8008386:	193b      	adds	r3, r7, r4
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2bfe      	cmp	r3, #254	@ 0xfe
 800838c:	d100      	bne.n	8008390 <ProcessCmd+0x30>
 800838e:	e151      	b.n	8008634 <ProcessCmd+0x2d4>
 8008390:	dd00      	ble.n	8008394 <ProcessCmd+0x34>
 8008392:	e172      	b.n	800867a <ProcessCmd+0x31a>
 8008394:	2b1b      	cmp	r3, #27
 8008396:	dc0a      	bgt.n	80083ae <ProcessCmd+0x4e>
 8008398:	2b00      	cmp	r3, #0
 800839a:	da00      	bge.n	800839e <ProcessCmd+0x3e>
 800839c:	e16d      	b.n	800867a <ProcessCmd+0x31a>
 800839e:	2b1b      	cmp	r3, #27
 80083a0:	d900      	bls.n	80083a4 <ProcessCmd+0x44>
 80083a2:	e16a      	b.n	800867a <ProcessCmd+0x31a>
 80083a4:	009a      	lsls	r2, r3, #2
 80083a6:	4bb9      	ldr	r3, [pc, #740]	@ (800868c <ProcessCmd+0x32c>)
 80083a8:	18d3      	adds	r3, r2, r3
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	469f      	mov	pc, r3
 80083ae:	2bfd      	cmp	r3, #253	@ 0xfd
 80083b0:	d100      	bne.n	80083b4 <ProcessCmd+0x54>
 80083b2:	e137      	b.n	8008624 <ProcessCmd+0x2c4>
            }
            break;
        }
    }

}
 80083b4:	e161      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80083b6:	2118      	movs	r1, #24
 80083b8:	187b      	adds	r3, r7, r1
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	001a      	movs	r2, r3
 80083be:	187b      	adds	r3, r7, r1
 80083c0:	1c99      	adds	r1, r3, #2
 80083c2:	48b3      	ldr	r0, [pc, #716]	@ (8008690 <ProcessCmd+0x330>)
 80083c4:	230c      	movs	r3, #12
 80083c6:	f003 fd5d 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80083ca:	e156      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80083cc:	2118      	movs	r1, #24
 80083ce:	187b      	adds	r3, r7, r1
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	001a      	movs	r2, r3
 80083d4:	187b      	adds	r3, r7, r1
 80083d6:	1c99      	adds	r1, r3, #2
 80083d8:	48ae      	ldr	r0, [pc, #696]	@ (8008694 <ProcessCmd+0x334>)
 80083da:	230c      	movs	r3, #12
 80083dc:	f003 fd52 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80083e0:	e14b      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80083e2:	2118      	movs	r1, #24
 80083e4:	187b      	adds	r3, r7, r1
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	001a      	movs	r2, r3
 80083ea:	187b      	adds	r3, r7, r1
 80083ec:	1c99      	adds	r1, r3, #2
 80083ee:	48aa      	ldr	r0, [pc, #680]	@ (8008698 <ProcessCmd+0x338>)
 80083f0:	230c      	movs	r3, #12
 80083f2:	f003 fd47 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80083f6:	e140      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80083f8:	2118      	movs	r1, #24
 80083fa:	187b      	adds	r3, r7, r1
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	001a      	movs	r2, r3
 8008400:	187b      	adds	r3, r7, r1
 8008402:	1c99      	adds	r1, r3, #2
 8008404:	48a5      	ldr	r0, [pc, #660]	@ (800869c <ProcessCmd+0x33c>)
 8008406:	230c      	movs	r3, #12
 8008408:	f003 fd3c 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800840c:	e135      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800840e:	2118      	movs	r1, #24
 8008410:	187b      	adds	r3, r7, r1
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	001a      	movs	r2, r3
 8008416:	187b      	adds	r3, r7, r1
 8008418:	1c99      	adds	r1, r3, #2
 800841a:	48a1      	ldr	r0, [pc, #644]	@ (80086a0 <ProcessCmd+0x340>)
 800841c:	230c      	movs	r3, #12
 800841e:	f003 fd31 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008422:	e12a      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008424:	2118      	movs	r1, #24
 8008426:	187b      	adds	r3, r7, r1
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	001a      	movs	r2, r3
 800842c:	187b      	adds	r3, r7, r1
 800842e:	1c99      	adds	r1, r3, #2
 8008430:	489c      	ldr	r0, [pc, #624]	@ (80086a4 <ProcessCmd+0x344>)
 8008432:	230c      	movs	r3, #12
 8008434:	f003 fd26 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008438:	e11f      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800843a:	2118      	movs	r1, #24
 800843c:	187b      	adds	r3, r7, r1
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	001a      	movs	r2, r3
 8008442:	187b      	adds	r3, r7, r1
 8008444:	1c99      	adds	r1, r3, #2
 8008446:	4898      	ldr	r0, [pc, #608]	@ (80086a8 <ProcessCmd+0x348>)
 8008448:	230c      	movs	r3, #12
 800844a:	f003 fd1b 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800844e:	e114      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008450:	2118      	movs	r1, #24
 8008452:	187b      	adds	r3, r7, r1
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	001a      	movs	r2, r3
 8008458:	187b      	adds	r3, r7, r1
 800845a:	1c99      	adds	r1, r3, #2
 800845c:	4893      	ldr	r0, [pc, #588]	@ (80086ac <ProcessCmd+0x34c>)
 800845e:	230c      	movs	r3, #12
 8008460:	f003 fd10 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008464:	e109      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008466:	2118      	movs	r1, #24
 8008468:	187b      	adds	r3, r7, r1
 800846a:	785b      	ldrb	r3, [r3, #1]
 800846c:	001a      	movs	r2, r3
 800846e:	187b      	adds	r3, r7, r1
 8008470:	1c99      	adds	r1, r3, #2
 8008472:	488f      	ldr	r0, [pc, #572]	@ (80086b0 <ProcessCmd+0x350>)
 8008474:	230c      	movs	r3, #12
 8008476:	f003 fd05 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800847a:	e0fe      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800847c:	2118      	movs	r1, #24
 800847e:	187b      	adds	r3, r7, r1
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	001a      	movs	r2, r3
 8008484:	187b      	adds	r3, r7, r1
 8008486:	1c99      	adds	r1, r3, #2
 8008488:	488a      	ldr	r0, [pc, #552]	@ (80086b4 <ProcessCmd+0x354>)
 800848a:	230c      	movs	r3, #12
 800848c:	f003 fcfa 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008490:	e0f3      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008492:	2118      	movs	r1, #24
 8008494:	187b      	adds	r3, r7, r1
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	001a      	movs	r2, r3
 800849a:	187b      	adds	r3, r7, r1
 800849c:	1c99      	adds	r1, r3, #2
 800849e:	4886      	ldr	r0, [pc, #536]	@ (80086b8 <ProcessCmd+0x358>)
 80084a0:	230c      	movs	r3, #12
 80084a2:	f003 fcef 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80084a6:	e0e8      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80084a8:	2118      	movs	r1, #24
 80084aa:	187b      	adds	r3, r7, r1
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	001a      	movs	r2, r3
 80084b0:	187b      	adds	r3, r7, r1
 80084b2:	1c99      	adds	r1, r3, #2
 80084b4:	4881      	ldr	r0, [pc, #516]	@ (80086bc <ProcessCmd+0x35c>)
 80084b6:	2320      	movs	r3, #32
 80084b8:	f003 fce4 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80084bc:	e0dd      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084be:	2118      	movs	r1, #24
 80084c0:	187b      	adds	r3, r7, r1
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	001a      	movs	r2, r3
 80084c6:	187b      	adds	r3, r7, r1
 80084c8:	1c99      	adds	r1, r3, #2
 80084ca:	487d      	ldr	r0, [pc, #500]	@ (80086c0 <ProcessCmd+0x360>)
 80084cc:	230c      	movs	r3, #12
 80084ce:	f003 fcd9 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80084d2:	e0d2      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084d4:	2118      	movs	r1, #24
 80084d6:	187b      	adds	r3, r7, r1
 80084d8:	785b      	ldrb	r3, [r3, #1]
 80084da:	001a      	movs	r2, r3
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	1c99      	adds	r1, r3, #2
 80084e0:	4878      	ldr	r0, [pc, #480]	@ (80086c4 <ProcessCmd+0x364>)
 80084e2:	230c      	movs	r3, #12
 80084e4:	f003 fcce 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80084e8:	e0c7      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80084ea:	2118      	movs	r1, #24
 80084ec:	187b      	adds	r3, r7, r1
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	001a      	movs	r2, r3
 80084f2:	187b      	adds	r3, r7, r1
 80084f4:	1c99      	adds	r1, r3, #2
 80084f6:	4874      	ldr	r0, [pc, #464]	@ (80086c8 <ProcessCmd+0x368>)
 80084f8:	230c      	movs	r3, #12
 80084fa:	f003 fcc3 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80084fe:	e0bc      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008500:	2118      	movs	r1, #24
 8008502:	187b      	adds	r3, r7, r1
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	001a      	movs	r2, r3
 8008508:	187b      	adds	r3, r7, r1
 800850a:	1c99      	adds	r1, r3, #2
 800850c:	486f      	ldr	r0, [pc, #444]	@ (80086cc <ProcessCmd+0x36c>)
 800850e:	230c      	movs	r3, #12
 8008510:	f003 fcb8 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008514:	e0b1      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008516:	2118      	movs	r1, #24
 8008518:	187b      	adds	r3, r7, r1
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	001a      	movs	r2, r3
 800851e:	187b      	adds	r3, r7, r1
 8008520:	1c99      	adds	r1, r3, #2
 8008522:	486b      	ldr	r0, [pc, #428]	@ (80086d0 <ProcessCmd+0x370>)
 8008524:	230c      	movs	r3, #12
 8008526:	f003 fcad 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800852a:	e0a6      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800852c:	2118      	movs	r1, #24
 800852e:	187b      	adds	r3, r7, r1
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	001a      	movs	r2, r3
 8008534:	187b      	adds	r3, r7, r1
 8008536:	1c99      	adds	r1, r3, #2
 8008538:	4866      	ldr	r0, [pc, #408]	@ (80086d4 <ProcessCmd+0x374>)
 800853a:	230c      	movs	r3, #12
 800853c:	f003 fca2 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008540:	e09b      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008542:	2118      	movs	r1, #24
 8008544:	187b      	adds	r3, r7, r1
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	001a      	movs	r2, r3
 800854a:	187b      	adds	r3, r7, r1
 800854c:	1c99      	adds	r1, r3, #2
 800854e:	4862      	ldr	r0, [pc, #392]	@ (80086d8 <ProcessCmd+0x378>)
 8008550:	230c      	movs	r3, #12
 8008552:	f003 fc97 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008556:	e090      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008558:	2118      	movs	r1, #24
 800855a:	187b      	adds	r3, r7, r1
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	001a      	movs	r2, r3
 8008560:	187b      	adds	r3, r7, r1
 8008562:	1c99      	adds	r1, r3, #2
 8008564:	485d      	ldr	r0, [pc, #372]	@ (80086dc <ProcessCmd+0x37c>)
 8008566:	230c      	movs	r3, #12
 8008568:	f003 fc8c 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800856c:	e085      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800856e:	2118      	movs	r1, #24
 8008570:	187b      	adds	r3, r7, r1
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	001a      	movs	r2, r3
 8008576:	187b      	adds	r3, r7, r1
 8008578:	1c99      	adds	r1, r3, #2
 800857a:	4859      	ldr	r0, [pc, #356]	@ (80086e0 <ProcessCmd+0x380>)
 800857c:	230c      	movs	r3, #12
 800857e:	f003 fc81 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008582:	e07a      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008584:	2118      	movs	r1, #24
 8008586:	187b      	adds	r3, r7, r1
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	001a      	movs	r2, r3
 800858c:	187b      	adds	r3, r7, r1
 800858e:	1c99      	adds	r1, r3, #2
 8008590:	4854      	ldr	r0, [pc, #336]	@ (80086e4 <ProcessCmd+0x384>)
 8008592:	230c      	movs	r3, #12
 8008594:	f003 fc76 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008598:	e06f      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800859a:	2118      	movs	r1, #24
 800859c:	187b      	adds	r3, r7, r1
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	001a      	movs	r2, r3
 80085a2:	187b      	adds	r3, r7, r1
 80085a4:	1c99      	adds	r1, r3, #2
 80085a6:	4850      	ldr	r0, [pc, #320]	@ (80086e8 <ProcessCmd+0x388>)
 80085a8:	230c      	movs	r3, #12
 80085aa:	f003 fc6b 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80085ae:	e064      	b.n	800867a <ProcessCmd+0x31a>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085b0:	2118      	movs	r1, #24
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	001a      	movs	r2, r3
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	1c99      	adds	r1, r3, #2
 80085bc:	484b      	ldr	r0, [pc, #300]	@ (80086ec <ProcessCmd+0x38c>)
 80085be:	230c      	movs	r3, #12
 80085c0:	f003 fc60 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80085c4:	e059      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 80085c6:	2118      	movs	r1, #24
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	001a      	movs	r2, r3
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	1c99      	adds	r1, r3, #2
 80085d2:	4847      	ldr	r0, [pc, #284]	@ (80086f0 <ProcessCmd+0x390>)
 80085d4:	2330      	movs	r3, #48	@ 0x30
 80085d6:	f003 fc55 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 80085da:	e04e      	b.n	800867a <ProcessCmd+0x31a>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80085dc:	2218      	movs	r2, #24
 80085de:	18bb      	adds	r3, r7, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	0019      	movs	r1, r3
 80085e4:	18bb      	adds	r3, r7, r2
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	001c      	movs	r4, r3
 80085ea:	0015      	movs	r5, r2
 80085ec:	18bb      	adds	r3, r7, r2
 80085ee:	1c9a      	adds	r2, r3, #2
 80085f0:	4840      	ldr	r0, [pc, #256]	@ (80086f4 <ProcessCmd+0x394>)
 80085f2:	0023      	movs	r3, r4
 80085f4:	f000 f922 	bl	800883c <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80085f8:	0029      	movs	r1, r5
 80085fa:	187b      	adds	r3, r7, r1
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	001a      	movs	r2, r3
 8008600:	187b      	adds	r3, r7, r1
 8008602:	1c99      	adds	r1, r3, #2
 8008604:	483c      	ldr	r0, [pc, #240]	@ (80086f8 <ProcessCmd+0x398>)
 8008606:	2330      	movs	r3, #48	@ 0x30
 8008608:	f003 fc3c 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 800860c:	e035      	b.n	800867a <ProcessCmd+0x31a>
            WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 800860e:	2118      	movs	r1, #24
 8008610:	187b      	adds	r3, r7, r1
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	001a      	movs	r2, r3
 8008616:	187b      	adds	r3, r7, r1
 8008618:	1c99      	adds	r1, r3, #2
 800861a:	4838      	ldr	r0, [pc, #224]	@ (80086fc <ProcessCmd+0x39c>)
 800861c:	2330      	movs	r3, #48	@ 0x30
 800861e:	f003 fc31 	bl	800be84 <WriteUint8ArrayEepromSafe>
        break;
 8008622:	e02a      	b.n	800867a <ProcessCmd+0x31a>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8008624:	2389      	movs	r3, #137	@ 0x89
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4a19      	ldr	r2, [pc, #100]	@ (8008690 <ProcessCmd+0x330>)
 800862a:	0019      	movs	r1, r3
 800862c:	0010      	movs	r0, r2
 800862e:	f003 fc6e 	bl	800bf0e <ClearEEprom>
        break;
 8008632:	e022      	b.n	800867a <ProcessCmd+0x31a>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008634:	2118      	movs	r1, #24
 8008636:	187b      	adds	r3, r7, r1
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	b21b      	sxth	r3, r3
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	b21a      	sxth	r2, r3
 8008640:	187b      	adds	r3, r7, r1
 8008642:	78db      	ldrb	r3, [r3, #3]
 8008644:	b21b      	sxth	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b21a      	sxth	r2, r3
 800864a:	1dbb      	adds	r3, r7, #6
 800864c:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800864e:	1dbb      	adds	r3, r7, #6
 8008650:	881a      	ldrh	r2, [r3, #0]
 8008652:	23c0      	movs	r3, #192	@ 0xc0
 8008654:	015b      	lsls	r3, r3, #5
 8008656:	429a      	cmp	r2, r3
 8008658:	d207      	bcs.n	800866a <ProcessCmd+0x30a>
                ClearEEprom(EEPromStartAddr, size);
 800865a:	1dbb      	adds	r3, r7, #6
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	4a0c      	ldr	r2, [pc, #48]	@ (8008690 <ProcessCmd+0x330>)
 8008660:	0019      	movs	r1, r3
 8008662:	0010      	movs	r0, r2
 8008664:	f003 fc53 	bl	800bf0e <ClearEEprom>
            break;
 8008668:	e006      	b.n	8008678 <ProcessCmd+0x318>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800866a:	23c0      	movs	r3, #192	@ 0xc0
 800866c:	015b      	lsls	r3, r3, #5
 800866e:	4a08      	ldr	r2, [pc, #32]	@ (8008690 <ProcessCmd+0x330>)
 8008670:	0019      	movs	r1, r3
 8008672:	0010      	movs	r0, r2
 8008674:	f003 fc4b 	bl	800bf0e <ClearEEprom>
            break;
 8008678:	46c0      	nop			@ (mov r8, r8)
}
 800867a:	46c0      	nop			@ (mov r8, r8)
 800867c:	46bd      	mov	sp, r7
 800867e:	b002      	add	sp, #8
 8008680:	bcb0      	pop	{r4, r5, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	b004      	add	sp, #16
 8008686:	4718      	bx	r3
 8008688:	0802b238 	.word	0x0802b238
 800868c:	0802deec 	.word	0x0802deec
 8008690:	08080000 	.word	0x08080000
 8008694:	0808000c 	.word	0x0808000c
 8008698:	08080018 	.word	0x08080018
 800869c:	08080024 	.word	0x08080024
 80086a0:	08080030 	.word	0x08080030
 80086a4:	0808003c 	.word	0x0808003c
 80086a8:	08080048 	.word	0x08080048
 80086ac:	08080054 	.word	0x08080054
 80086b0:	08080060 	.word	0x08080060
 80086b4:	0808006c 	.word	0x0808006c
 80086b8:	08080078 	.word	0x08080078
 80086bc:	08080090 	.word	0x08080090
 80086c0:	080800b0 	.word	0x080800b0
 80086c4:	080800bc 	.word	0x080800bc
 80086c8:	080800c8 	.word	0x080800c8
 80086cc:	080800d4 	.word	0x080800d4
 80086d0:	080800e0 	.word	0x080800e0
 80086d4:	080800ec 	.word	0x080800ec
 80086d8:	080800f8 	.word	0x080800f8
 80086dc:	08080104 	.word	0x08080104
 80086e0:	08080110 	.word	0x08080110
 80086e4:	08080130 	.word	0x08080130
 80086e8:	08080170 	.word	0x08080170
 80086ec:	0808017c 	.word	0x0808017c
 80086f0:	08080188 	.word	0x08080188
 80086f4:	0802b24c 	.word	0x0802b24c
 80086f8:	080801b8 	.word	0x080801b8
 80086fc:	080801e8 	.word	0x080801e8

08008700 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6039      	str	r1, [r7, #0]
 8008708:	0011      	movs	r1, r2
 800870a:	1dfb      	adds	r3, r7, #7
 800870c:	1c02      	adds	r2, r0, #0
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	1dbb      	adds	r3, r7, #6
 8008712:	1c0a      	adds	r2, r1, #0
 8008714:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8008716:	2223      	movs	r2, #35	@ 0x23
 8008718:	4b20      	ldr	r3, [pc, #128]	@ (800879c <Create_Message+0x9c>)
 800871a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800871c:	4b1f      	ldr	r3, [pc, #124]	@ (800879c <Create_Message+0x9c>)
 800871e:	1dfa      	adds	r2, r7, #7
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008724:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <Create_Message+0x9c>)
 8008726:	1dba      	adds	r2, r7, #6
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800872c:	1dbb      	adds	r3, r7, #6
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	4b1b      	ldr	r3, [pc, #108]	@ (80087a0 <Create_Message+0xa0>)
 8008734:	0018      	movs	r0, r3
 8008736:	f01d fd99 	bl	802626c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800873a:	1dbb      	adds	r3, r7, #6
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	250e      	movs	r5, #14
 8008742:	197b      	adds	r3, r7, r5
 8008744:	3203      	adds	r2, #3
 8008746:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008748:	260c      	movs	r6, #12
 800874a:	19bc      	adds	r4, r7, r6
 800874c:	197b      	adds	r3, r7, r5
 800874e:	881a      	ldrh	r2, [r3, #0]
 8008750:	4b12      	ldr	r3, [pc, #72]	@ (800879c <Create_Message+0x9c>)
 8008752:	0011      	movs	r1, r2
 8008754:	0018      	movs	r0, r3
 8008756:	f000 f825 	bl	80087a4 <CRC16_ARC>
 800875a:	0003      	movs	r3, r0
 800875c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800875e:	0030      	movs	r0, r6
 8008760:	183b      	adds	r3, r7, r0
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	0a1b      	lsrs	r3, r3, #8
 8008766:	b29a      	uxth	r2, r3
 8008768:	197b      	adds	r3, r7, r5
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b2d1      	uxtb	r1, r2
 800876e:	4a0b      	ldr	r2, [pc, #44]	@ (800879c <Create_Message+0x9c>)
 8008770:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008772:	197b      	adds	r3, r7, r5
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	183a      	adds	r2, r7, r0
 800877a:	8812      	ldrh	r2, [r2, #0]
 800877c:	b2d1      	uxtb	r1, r2
 800877e:	4a07      	ldr	r2, [pc, #28]	@ (800879c <Create_Message+0x9c>)
 8008780:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008782:	197b      	adds	r3, r7, r5
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	3302      	adds	r3, #2
 8008788:	b29a      	uxth	r2, r3
 800878a:	4b04      	ldr	r3, [pc, #16]	@ (800879c <Create_Message+0x9c>)
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f01a fa0e 	bl	8022bb0 <CDC_Transmit_FS>
}
 8008794:	46c0      	nop			@ (mov r8, r8)
 8008796:	46bd      	mov	sp, r7
 8008798:	b005      	add	sp, #20
 800879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879c:	20000948 	.word	0x20000948
 80087a0:	2000094b 	.word	0x2000094b

080087a4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	000a      	movs	r2, r1
 80087ae:	1cbb      	adds	r3, r7, #2
 80087b0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80087b2:	2316      	movs	r3, #22
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80087ba:	2300      	movs	r3, #0
 80087bc:	613b      	str	r3, [r7, #16]
 80087be:	e02e      	b.n	800881e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	18d3      	adds	r3, r2, r3
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	0019      	movs	r1, r3
 80087ca:	2216      	movs	r2, #22
 80087cc:	18bb      	adds	r3, r7, r2
 80087ce:	18ba      	adds	r2, r7, r2
 80087d0:	8812      	ldrh	r2, [r2, #0]
 80087d2:	404a      	eors	r2, r1
 80087d4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80087d6:	2300      	movs	r3, #0
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	e01a      	b.n	8008812 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80087dc:	2116      	movs	r1, #22
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	2201      	movs	r2, #1
 80087e4:	4013      	ands	r3, r2
 80087e6:	d00b      	beq.n	8008800 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	187a      	adds	r2, r7, r1
 80087ec:	8812      	ldrh	r2, [r2, #0]
 80087ee:	0852      	lsrs	r2, r2, #1
 80087f0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80087f2:	187b      	adds	r3, r7, r1
 80087f4:	187a      	adds	r2, r7, r1
 80087f6:	8812      	ldrh	r2, [r2, #0]
 80087f8:	490f      	ldr	r1, [pc, #60]	@ (8008838 <CRC16_ARC+0x94>)
 80087fa:	404a      	eors	r2, r1
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e005      	b.n	800880c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008800:	2216      	movs	r2, #22
 8008802:	18bb      	adds	r3, r7, r2
 8008804:	18ba      	adds	r2, r7, r2
 8008806:	8812      	ldrh	r2, [r2, #0]
 8008808:	0852      	lsrs	r2, r2, #1
 800880a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b07      	cmp	r3, #7
 8008816:	dde1      	ble.n	80087dc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3301      	adds	r3, #1
 800881c:	613b      	str	r3, [r7, #16]
 800881e:	1cbb      	adds	r3, r7, #2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	429a      	cmp	r2, r3
 8008826:	dbcb      	blt.n	80087c0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008828:	2316      	movs	r3, #22
 800882a:	18fb      	adds	r3, r7, r3
 800882c:	881b      	ldrh	r3, [r3, #0]
}
 800882e:	0018      	movs	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	b006      	add	sp, #24
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	ffffa001 	.word	0xffffa001

0800883c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800883c:	b40f      	push	{r0, r1, r2, r3}
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b0a9      	sub	sp, #164	@ 0xa4
 8008842:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008844:	23ac      	movs	r3, #172	@ 0xac
 8008846:	2108      	movs	r1, #8
 8008848:	185b      	adds	r3, r3, r1
 800884a:	19db      	adds	r3, r3, r7
 800884c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	23a8      	movs	r3, #168	@ 0xa8
 8008852:	185b      	adds	r3, r3, r1
 8008854:	19db      	adds	r3, r3, r7
 8008856:	6819      	ldr	r1, [r3, #0]
 8008858:	2408      	movs	r4, #8
 800885a:	193b      	adds	r3, r7, r4
 800885c:	0018      	movs	r0, r3
 800885e:	f01d fb7d 	bl	8025f5c <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008862:	193b      	adds	r3, r7, r4
 8008864:	0018      	movs	r0, r3
 8008866:	f7f7 fc81 	bl	800016c <strlen>
 800886a:	0003      	movs	r3, r0
 800886c:	b29a      	uxth	r2, r3
 800886e:	193b      	adds	r3, r7, r4
 8008870:	0011      	movs	r1, r2
 8008872:	0018      	movs	r0, r3
 8008874:	f01a f99c 	bl	8022bb0 <CDC_Transmit_FS>
}
 8008878:	46c0      	nop			@ (mov r8, r8)
 800887a:	46bd      	mov	sp, r7
 800887c:	b029      	add	sp, #164	@ 0xa4
 800887e:	bc90      	pop	{r4, r7}
 8008880:	bc08      	pop	{r3}
 8008882:	b004      	add	sp, #16
 8008884:	4718      	bx	r3

08008886 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	000a      	movs	r2, r1
 8008890:	1cfb      	adds	r3, r7, #3
 8008892:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008894:	1cfb      	adds	r3, r7, #3
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <PC_selectout+0x1e>
    printf_USB(msg);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0018      	movs	r0, r3
 80088a0:	f7ff ffcc 	bl	800883c <printf_USB>
  }
//  else {
    printf(msg);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	0018      	movs	r0, r3
 80088a8:	f01d fa2a 	bl	8025d00 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 80088ac:	200a      	movs	r0, #10
 80088ae:	f00b fe57 	bl	8014560 <HAL_Delay>
}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b002      	add	sp, #8
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <PC_show_Keys>:

void PC_show_Keys() {
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 28
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 80088c0:	f000 ff2e 	bl	8009720 <Check_USB_PowerOn>
 80088c4:	1e03      	subs	r3, r0, #0
 80088c6:	d005      	beq.n	80088d4 <PC_show_Keys+0x18>
    usb_out = true;
 80088c8:	4b01      	ldr	r3, [pc, #4]	@ (80088d0 <PC_show_Keys+0x14>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e004      	b.n	80088da <PC_show_Keys+0x1e>
 80088d0:	20000a4d 	.word	0x20000a4d
  }
  else {
    usb_out = false;
 80088d4:	4bfd      	ldr	r3, [pc, #1012]	@ (8008ccc <PC_show_Keys+0x410>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80088da:	4afd      	ldr	r2, [pc, #1012]	@ (8008cd0 <PC_show_Keys+0x414>)
 80088dc:	4bfd      	ldr	r3, [pc, #1012]	@ (8008cd4 <PC_show_Keys+0x418>)
 80088de:	0011      	movs	r1, r2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f01d fa7d 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088e6:	4bf9      	ldr	r3, [pc, #996]	@ (8008ccc <PC_show_Keys+0x410>)
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	4bfa      	ldr	r3, [pc, #1000]	@ (8008cd4 <PC_show_Keys+0x418>)
 80088ec:	0011      	movs	r1, r2
 80088ee:	0018      	movs	r0, r3
 80088f0:	f7ff ffc9 	bl	8008886 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80088f4:	4bf8      	ldr	r3, [pc, #992]	@ (8008cd8 <PC_show_Keys+0x41c>)
 80088f6:	48f9      	ldr	r0, [pc, #996]	@ (8008cdc <PC_show_Keys+0x420>)
 80088f8:	220c      	movs	r2, #12
 80088fa:	0019      	movs	r1, r3
 80088fc:	f003 fade 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008900:	4af5      	ldr	r2, [pc, #980]	@ (8008cd8 <PC_show_Keys+0x41c>)
 8008902:	4bf7      	ldr	r3, [pc, #988]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008904:	0011      	movs	r1, r2
 8008906:	0018      	movs	r0, r3
 8008908:	f7fc fc8a 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 800890c:	4af4      	ldr	r2, [pc, #976]	@ (8008ce0 <PC_show_Keys+0x424>)
 800890e:	49f5      	ldr	r1, [pc, #980]	@ (8008ce4 <PC_show_Keys+0x428>)
 8008910:	4bf0      	ldr	r3, [pc, #960]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008912:	0018      	movs	r0, r3
 8008914:	f01d fa64 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008918:	4bec      	ldr	r3, [pc, #944]	@ (8008ccc <PC_show_Keys+0x410>)
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	4bed      	ldr	r3, [pc, #948]	@ (8008cd4 <PC_show_Keys+0x418>)
 800891e:	0011      	movs	r1, r2
 8008920:	0018      	movs	r0, r3
 8008922:	f7ff ffb0 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008926:	4bf0      	ldr	r3, [pc, #960]	@ (8008ce8 <PC_show_Keys+0x42c>)
 8008928:	48f0      	ldr	r0, [pc, #960]	@ (8008cec <PC_show_Keys+0x430>)
 800892a:	220c      	movs	r2, #12
 800892c:	0019      	movs	r1, r3
 800892e:	f003 fac5 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008932:	4aed      	ldr	r2, [pc, #948]	@ (8008ce8 <PC_show_Keys+0x42c>)
 8008934:	4bea      	ldr	r3, [pc, #936]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008936:	0011      	movs	r1, r2
 8008938:	0018      	movs	r0, r3
 800893a:	f7fc fc71 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 800893e:	4ae8      	ldr	r2, [pc, #928]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008940:	49eb      	ldr	r1, [pc, #940]	@ (8008cf0 <PC_show_Keys+0x434>)
 8008942:	4be4      	ldr	r3, [pc, #912]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008944:	0018      	movs	r0, r3
 8008946:	f01d fa4b 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800894a:	4be0      	ldr	r3, [pc, #896]	@ (8008ccc <PC_show_Keys+0x410>)
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	4be1      	ldr	r3, [pc, #900]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008950:	0011      	movs	r1, r2
 8008952:	0018      	movs	r0, r3
 8008954:	f7ff ff97 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008958:	4be6      	ldr	r3, [pc, #920]	@ (8008cf4 <PC_show_Keys+0x438>)
 800895a:	48e7      	ldr	r0, [pc, #924]	@ (8008cf8 <PC_show_Keys+0x43c>)
 800895c:	220c      	movs	r2, #12
 800895e:	0019      	movs	r1, r3
 8008960:	f003 faac 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008964:	4ae3      	ldr	r2, [pc, #908]	@ (8008cf4 <PC_show_Keys+0x438>)
 8008966:	4bde      	ldr	r3, [pc, #888]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008968:	0011      	movs	r1, r2
 800896a:	0018      	movs	r0, r3
 800896c:	f7fc fc58 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 8008970:	4adb      	ldr	r2, [pc, #876]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008972:	49e2      	ldr	r1, [pc, #904]	@ (8008cfc <PC_show_Keys+0x440>)
 8008974:	4bd7      	ldr	r3, [pc, #860]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008976:	0018      	movs	r0, r3
 8008978:	f01d fa32 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800897c:	4bd3      	ldr	r3, [pc, #844]	@ (8008ccc <PC_show_Keys+0x410>)
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	4bd4      	ldr	r3, [pc, #848]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008982:	0011      	movs	r1, r2
 8008984:	0018      	movs	r0, r3
 8008986:	f7ff ff7e 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800898a:	4bdd      	ldr	r3, [pc, #884]	@ (8008d00 <PC_show_Keys+0x444>)
 800898c:	48dd      	ldr	r0, [pc, #884]	@ (8008d04 <PC_show_Keys+0x448>)
 800898e:	220c      	movs	r2, #12
 8008990:	0019      	movs	r1, r3
 8008992:	f003 fa93 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008996:	4ada      	ldr	r2, [pc, #872]	@ (8008d00 <PC_show_Keys+0x444>)
 8008998:	4bd1      	ldr	r3, [pc, #836]	@ (8008ce0 <PC_show_Keys+0x424>)
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f7fc fc3f 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 80089a2:	4acf      	ldr	r2, [pc, #828]	@ (8008ce0 <PC_show_Keys+0x424>)
 80089a4:	49d8      	ldr	r1, [pc, #864]	@ (8008d08 <PC_show_Keys+0x44c>)
 80089a6:	4bcb      	ldr	r3, [pc, #812]	@ (8008cd4 <PC_show_Keys+0x418>)
 80089a8:	0018      	movs	r0, r3
 80089aa:	f01d fa19 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089ae:	4bc7      	ldr	r3, [pc, #796]	@ (8008ccc <PC_show_Keys+0x410>)
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	4bc8      	ldr	r3, [pc, #800]	@ (8008cd4 <PC_show_Keys+0x418>)
 80089b4:	0011      	movs	r1, r2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7ff ff65 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80089bc:	4bd3      	ldr	r3, [pc, #844]	@ (8008d0c <PC_show_Keys+0x450>)
 80089be:	48d4      	ldr	r0, [pc, #848]	@ (8008d10 <PC_show_Keys+0x454>)
 80089c0:	220c      	movs	r2, #12
 80089c2:	0019      	movs	r1, r3
 80089c4:	f003 fa7a 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80089c8:	4ad0      	ldr	r2, [pc, #832]	@ (8008d0c <PC_show_Keys+0x450>)
 80089ca:	4bc5      	ldr	r3, [pc, #788]	@ (8008ce0 <PC_show_Keys+0x424>)
 80089cc:	0011      	movs	r1, r2
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7fc fc26 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 80089d4:	4ac2      	ldr	r2, [pc, #776]	@ (8008ce0 <PC_show_Keys+0x424>)
 80089d6:	49cf      	ldr	r1, [pc, #828]	@ (8008d14 <PC_show_Keys+0x458>)
 80089d8:	4bbe      	ldr	r3, [pc, #760]	@ (8008cd4 <PC_show_Keys+0x418>)
 80089da:	0018      	movs	r0, r3
 80089dc:	f01d fa00 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089e0:	4bba      	ldr	r3, [pc, #744]	@ (8008ccc <PC_show_Keys+0x410>)
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	4bbb      	ldr	r3, [pc, #748]	@ (8008cd4 <PC_show_Keys+0x418>)
 80089e6:	0011      	movs	r1, r2
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7ff ff4c 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80089ee:	4bca      	ldr	r3, [pc, #808]	@ (8008d18 <PC_show_Keys+0x45c>)
 80089f0:	48ca      	ldr	r0, [pc, #808]	@ (8008d1c <PC_show_Keys+0x460>)
 80089f2:	220c      	movs	r2, #12
 80089f4:	0019      	movs	r1, r3
 80089f6:	f003 fa61 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80089fa:	4ac7      	ldr	r2, [pc, #796]	@ (8008d18 <PC_show_Keys+0x45c>)
 80089fc:	4bb8      	ldr	r3, [pc, #736]	@ (8008ce0 <PC_show_Keys+0x424>)
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f7fc fc0d 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 8008a06:	4ac6      	ldr	r2, [pc, #792]	@ (8008d20 <PC_show_Keys+0x464>)
 8008a08:	4bb2      	ldr	r3, [pc, #712]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f01d f9e7 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a12:	4bae      	ldr	r3, [pc, #696]	@ (8008ccc <PC_show_Keys+0x410>)
 8008a14:	781a      	ldrb	r2, [r3, #0]
 8008a16:	4baf      	ldr	r3, [pc, #700]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f7ff ff33 	bl	8008886 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008a20:	4aaf      	ldr	r2, [pc, #700]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008a22:	49c0      	ldr	r1, [pc, #768]	@ (8008d24 <PC_show_Keys+0x468>)
 8008a24:	4bab      	ldr	r3, [pc, #684]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a26:	0018      	movs	r0, r3
 8008a28:	f01d f9da 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8008ccc <PC_show_Keys+0x410>)
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	4ba8      	ldr	r3, [pc, #672]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7ff ff26 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008a3a:	4bbb      	ldr	r3, [pc, #748]	@ (8008d28 <PC_show_Keys+0x46c>)
 8008a3c:	48bb      	ldr	r0, [pc, #748]	@ (8008d2c <PC_show_Keys+0x470>)
 8008a3e:	220c      	movs	r2, #12
 8008a40:	0019      	movs	r1, r3
 8008a42:	f003 fa3b 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008a46:	4ab8      	ldr	r2, [pc, #736]	@ (8008d28 <PC_show_Keys+0x46c>)
 8008a48:	4ba5      	ldr	r3, [pc, #660]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008a4a:	0011      	movs	r1, r2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7fc fbe7 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 8008a52:	4ab7      	ldr	r2, [pc, #732]	@ (8008d30 <PC_show_Keys+0x474>)
 8008a54:	4b9f      	ldr	r3, [pc, #636]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a56:	0011      	movs	r1, r2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f01d f9c1 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a5e:	4b9b      	ldr	r3, [pc, #620]	@ (8008ccc <PC_show_Keys+0x410>)
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	4b9c      	ldr	r3, [pc, #624]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a64:	0011      	movs	r1, r2
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff ff0d 	bl	8008886 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 8008a6c:	4a9c      	ldr	r2, [pc, #624]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008a6e:	49b1      	ldr	r1, [pc, #708]	@ (8008d34 <PC_show_Keys+0x478>)
 8008a70:	4b98      	ldr	r3, [pc, #608]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a72:	0018      	movs	r0, r3
 8008a74:	f01d f9b4 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a78:	4b94      	ldr	r3, [pc, #592]	@ (8008ccc <PC_show_Keys+0x410>)
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	4b95      	ldr	r3, [pc, #596]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008a7e:	0011      	movs	r1, r2
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7ff ff00 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008a86:	4bac      	ldr	r3, [pc, #688]	@ (8008d38 <PC_show_Keys+0x47c>)
 8008a88:	48ac      	ldr	r0, [pc, #688]	@ (8008d3c <PC_show_Keys+0x480>)
 8008a8a:	220c      	movs	r2, #12
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	f003 fa15 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008a92:	4aa9      	ldr	r2, [pc, #676]	@ (8008d38 <PC_show_Keys+0x47c>)
 8008a94:	4b92      	ldr	r3, [pc, #584]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7fc fbc1 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 8008a9e:	4a90      	ldr	r2, [pc, #576]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008aa0:	49a7      	ldr	r1, [pc, #668]	@ (8008d40 <PC_show_Keys+0x484>)
 8008aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f01d f99b 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008aaa:	4b88      	ldr	r3, [pc, #544]	@ (8008ccc <PC_show_Keys+0x410>)
 8008aac:	781a      	ldrb	r2, [r3, #0]
 8008aae:	4b89      	ldr	r3, [pc, #548]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008ab0:	0011      	movs	r1, r2
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f7ff fee7 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008ab8:	4ba2      	ldr	r3, [pc, #648]	@ (8008d44 <PC_show_Keys+0x488>)
 8008aba:	48a3      	ldr	r0, [pc, #652]	@ (8008d48 <PC_show_Keys+0x48c>)
 8008abc:	220c      	movs	r2, #12
 8008abe:	0019      	movs	r1, r3
 8008ac0:	f003 f9fc 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008ac4:	4a9f      	ldr	r2, [pc, #636]	@ (8008d44 <PC_show_Keys+0x488>)
 8008ac6:	4b86      	ldr	r3, [pc, #536]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008ac8:	0011      	movs	r1, r2
 8008aca:	0018      	movs	r0, r3
 8008acc:	f7fc fba8 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008ad0:	4a83      	ldr	r2, [pc, #524]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008ad2:	499e      	ldr	r1, [pc, #632]	@ (8008d4c <PC_show_Keys+0x490>)
 8008ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f01d f982 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008adc:	4b7b      	ldr	r3, [pc, #492]	@ (8008ccc <PC_show_Keys+0x410>)
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7ff fece 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008aea:	4b99      	ldr	r3, [pc, #612]	@ (8008d50 <PC_show_Keys+0x494>)
 8008aec:	4899      	ldr	r0, [pc, #612]	@ (8008d54 <PC_show_Keys+0x498>)
 8008aee:	220c      	movs	r2, #12
 8008af0:	0019      	movs	r1, r3
 8008af2:	f003 f9e3 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008af6:	4a96      	ldr	r2, [pc, #600]	@ (8008d50 <PC_show_Keys+0x494>)
 8008af8:	4b79      	ldr	r3, [pc, #484]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008afa:	0011      	movs	r1, r2
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7fc fb8f 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 8008b02:	4a77      	ldr	r2, [pc, #476]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008b04:	4994      	ldr	r1, [pc, #592]	@ (8008d58 <PC_show_Keys+0x49c>)
 8008b06:	4b73      	ldr	r3, [pc, #460]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f01d f969 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8008ccc <PC_show_Keys+0x410>)
 8008b10:	781a      	ldrb	r2, [r3, #0]
 8008b12:	4b70      	ldr	r3, [pc, #448]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7ff feb5 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008d5c <PC_show_Keys+0x4a0>)
 8008b1e:	4890      	ldr	r0, [pc, #576]	@ (8008d60 <PC_show_Keys+0x4a4>)
 8008b20:	220c      	movs	r2, #12
 8008b22:	0019      	movs	r1, r3
 8008b24:	f003 f9ca 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008b28:	4a8c      	ldr	r2, [pc, #560]	@ (8008d5c <PC_show_Keys+0x4a0>)
 8008b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7fc fb76 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 8008b34:	4a6a      	ldr	r2, [pc, #424]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008b36:	498b      	ldr	r1, [pc, #556]	@ (8008d64 <PC_show_Keys+0x4a8>)
 8008b38:	4b66      	ldr	r3, [pc, #408]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f01d f950 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b40:	4b62      	ldr	r3, [pc, #392]	@ (8008ccc <PC_show_Keys+0x410>)
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	4b63      	ldr	r3, [pc, #396]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7ff fe9c 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008b4e:	4b86      	ldr	r3, [pc, #536]	@ (8008d68 <PC_show_Keys+0x4ac>)
 8008b50:	4886      	ldr	r0, [pc, #536]	@ (8008d6c <PC_show_Keys+0x4b0>)
 8008b52:	220c      	movs	r2, #12
 8008b54:	0019      	movs	r1, r3
 8008b56:	f003 f9b1 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008b5a:	4a83      	ldr	r2, [pc, #524]	@ (8008d68 <PC_show_Keys+0x4ac>)
 8008b5c:	4b60      	ldr	r3, [pc, #384]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008b5e:	0011      	movs	r1, r2
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fc fb5d 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 8008b66:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008b68:	4981      	ldr	r1, [pc, #516]	@ (8008d70 <PC_show_Keys+0x4b4>)
 8008b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f01d f937 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b72:	4b56      	ldr	r3, [pc, #344]	@ (8008ccc <PC_show_Keys+0x410>)
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	4b57      	ldr	r3, [pc, #348]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7ff fe83 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008b80:	4b7c      	ldr	r3, [pc, #496]	@ (8008d74 <PC_show_Keys+0x4b8>)
 8008b82:	487d      	ldr	r0, [pc, #500]	@ (8008d78 <PC_show_Keys+0x4bc>)
 8008b84:	2220      	movs	r2, #32
 8008b86:	0019      	movs	r1, r3
 8008b88:	f003 f998 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 8008b8c:	4a7b      	ldr	r2, [pc, #492]	@ (8008d7c <PC_show_Keys+0x4c0>)
 8008b8e:	4b51      	ldr	r3, [pc, #324]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b90:	0011      	movs	r1, r2
 8008b92:	0018      	movs	r0, r3
 8008b94:	f01d f924 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b98:	4b4c      	ldr	r3, [pc, #304]	@ (8008ccc <PC_show_Keys+0x410>)
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff fe70 	bl	8008886 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008ba6:	4a73      	ldr	r2, [pc, #460]	@ (8008d74 <PC_show_Keys+0x4b8>)
 8008ba8:	4975      	ldr	r1, [pc, #468]	@ (8008d80 <PC_show_Keys+0x4c4>)
 8008baa:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008bac:	0018      	movs	r0, r3
 8008bae:	f01d f917 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bb2:	4b46      	ldr	r3, [pc, #280]	@ (8008ccc <PC_show_Keys+0x410>)
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	4b47      	ldr	r3, [pc, #284]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008bb8:	0011      	movs	r1, r2
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7ff fe63 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008bc0:	4b70      	ldr	r3, [pc, #448]	@ (8008d84 <PC_show_Keys+0x4c8>)
 8008bc2:	4871      	ldr	r0, [pc, #452]	@ (8008d88 <PC_show_Keys+0x4cc>)
 8008bc4:	220c      	movs	r2, #12
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	f003 f978 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8008bcc:	4a6d      	ldr	r2, [pc, #436]	@ (8008d84 <PC_show_Keys+0x4c8>)
 8008bce:	4b44      	ldr	r3, [pc, #272]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008bd0:	0011      	movs	r1, r2
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f7fc fb24 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008bd8:	4a41      	ldr	r2, [pc, #260]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008bda:	496c      	ldr	r1, [pc, #432]	@ (8008d8c <PC_show_Keys+0x4d0>)
 8008bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008bde:	0018      	movs	r0, r3
 8008be0:	f01d f8fe 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008be4:	4b39      	ldr	r3, [pc, #228]	@ (8008ccc <PC_show_Keys+0x410>)
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	4b3a      	ldr	r3, [pc, #232]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7ff fe4a 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 8008bf2:	4b67      	ldr	r3, [pc, #412]	@ (8008d90 <PC_show_Keys+0x4d4>)
 8008bf4:	4867      	ldr	r0, [pc, #412]	@ (8008d94 <PC_show_Keys+0x4d8>)
 8008bf6:	220c      	movs	r2, #12
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	f003 f95f 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 8008bfe:	4a64      	ldr	r2, [pc, #400]	@ (8008d90 <PC_show_Keys+0x4d4>)
 8008c00:	4b37      	ldr	r3, [pc, #220]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c02:	0011      	movs	r1, r2
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7fc fb0b 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 8008c0a:	4a35      	ldr	r2, [pc, #212]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c0c:	4962      	ldr	r1, [pc, #392]	@ (8008d98 <PC_show_Keys+0x4dc>)
 8008c0e:	4b31      	ldr	r3, [pc, #196]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c10:	0018      	movs	r0, r3
 8008c12:	f01d f8e5 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c16:	4b2d      	ldr	r3, [pc, #180]	@ (8008ccc <PC_show_Keys+0x410>)
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c1c:	0011      	movs	r1, r2
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff fe31 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008c24:	4b5d      	ldr	r3, [pc, #372]	@ (8008d9c <PC_show_Keys+0x4e0>)
 8008c26:	485e      	ldr	r0, [pc, #376]	@ (8008da0 <PC_show_Keys+0x4e4>)
 8008c28:	220c      	movs	r2, #12
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	f003 f946 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008c30:	4a5a      	ldr	r2, [pc, #360]	@ (8008d9c <PC_show_Keys+0x4e0>)
 8008c32:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c34:	0011      	movs	r1, r2
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7fc faf2 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 8008c3c:	4a28      	ldr	r2, [pc, #160]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c3e:	4959      	ldr	r1, [pc, #356]	@ (8008da4 <PC_show_Keys+0x4e8>)
 8008c40:	4b24      	ldr	r3, [pc, #144]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c42:	0018      	movs	r0, r3
 8008c44:	f01d f8cc 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c48:	4b20      	ldr	r3, [pc, #128]	@ (8008ccc <PC_show_Keys+0x410>)
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	4b21      	ldr	r3, [pc, #132]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c4e:	0011      	movs	r1, r2
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff fe18 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008c56:	4b54      	ldr	r3, [pc, #336]	@ (8008da8 <PC_show_Keys+0x4ec>)
 8008c58:	4854      	ldr	r0, [pc, #336]	@ (8008dac <PC_show_Keys+0x4f0>)
 8008c5a:	220c      	movs	r2, #12
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	f003 f92d 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008c62:	4a51      	ldr	r2, [pc, #324]	@ (8008da8 <PC_show_Keys+0x4ec>)
 8008c64:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c66:	0011      	movs	r1, r2
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f7fc fad9 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 8008c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c70:	494f      	ldr	r1, [pc, #316]	@ (8008db0 <PC_show_Keys+0x4f4>)
 8008c72:	4b18      	ldr	r3, [pc, #96]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c74:	0018      	movs	r0, r3
 8008c76:	f01d f8b3 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c7a:	4b14      	ldr	r3, [pc, #80]	@ (8008ccc <PC_show_Keys+0x410>)
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	4b15      	ldr	r3, [pc, #84]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008c80:	0011      	movs	r1, r2
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7ff fdff 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008c88:	4b4a      	ldr	r3, [pc, #296]	@ (8008db4 <PC_show_Keys+0x4f8>)
 8008c8a:	484b      	ldr	r0, [pc, #300]	@ (8008db8 <PC_show_Keys+0x4fc>)
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	0019      	movs	r1, r3
 8008c90:	f003 f914 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008c94:	4a47      	ldr	r2, [pc, #284]	@ (8008db4 <PC_show_Keys+0x4f8>)
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7fc fac0 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8008ce0 <PC_show_Keys+0x424>)
 8008ca2:	4946      	ldr	r1, [pc, #280]	@ (8008dbc <PC_show_Keys+0x500>)
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f01d f89a 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <PC_show_Keys+0x410>)
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <PC_show_Keys+0x418>)
 8008cb2:	0011      	movs	r1, r2
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f7ff fde6 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008cba:	4b41      	ldr	r3, [pc, #260]	@ (8008dc0 <PC_show_Keys+0x504>)
 8008cbc:	4841      	ldr	r0, [pc, #260]	@ (8008dc4 <PC_show_Keys+0x508>)
 8008cbe:	220c      	movs	r2, #12
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	f003 f8fb 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8008dc0 <PC_show_Keys+0x504>)
 8008cc8:	e07e      	b.n	8008dc8 <PC_show_Keys+0x50c>
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	20000a4d 	.word	0x20000a4d
 8008cd0:	0802b280 	.word	0x0802b280
 8008cd4:	20000a50 	.word	0x20000a50
 8008cd8:	20000a98 	.word	0x20000a98
 8008cdc:	08080000 	.word	0x08080000
 8008ce0:	20000aa4 	.word	0x20000aa4
 8008ce4:	0802b29c 	.word	0x0802b29c
 8008ce8:	20000ac0 	.word	0x20000ac0
 8008cec:	0808000c 	.word	0x0808000c
 8008cf0:	0802b2c8 	.word	0x0802b2c8
 8008cf4:	20000acc 	.word	0x20000acc
 8008cf8:	08080018 	.word	0x08080018
 8008cfc:	0802b2f4 	.word	0x0802b2f4
 8008d00:	20000ad8 	.word	0x20000ad8
 8008d04:	08080024 	.word	0x08080024
 8008d08:	0802b320 	.word	0x0802b320
 8008d0c:	20000ae4 	.word	0x20000ae4
 8008d10:	08080030 	.word	0x08080030
 8008d14:	0802b34c 	.word	0x0802b34c
 8008d18:	20000af0 	.word	0x20000af0
 8008d1c:	0808003c 	.word	0x0808003c
 8008d20:	0802b378 	.word	0x0802b378
 8008d24:	0802b394 	.word	0x0802b394
 8008d28:	20000afc 	.word	0x20000afc
 8008d2c:	08080048 	.word	0x08080048
 8008d30:	0802b3c0 	.word	0x0802b3c0
 8008d34:	0802b3d4 	.word	0x0802b3d4
 8008d38:	20000b08 	.word	0x20000b08
 8008d3c:	08080054 	.word	0x08080054
 8008d40:	0802b400 	.word	0x0802b400
 8008d44:	20000b14 	.word	0x20000b14
 8008d48:	08080060 	.word	0x08080060
 8008d4c:	0802b42c 	.word	0x0802b42c
 8008d50:	20000b20 	.word	0x20000b20
 8008d54:	0808006c 	.word	0x0808006c
 8008d58:	0802b458 	.word	0x0802b458
 8008d5c:	20000b2c 	.word	0x20000b2c
 8008d60:	08080078 	.word	0x08080078
 8008d64:	0802b484 	.word	0x0802b484
 8008d68:	20000b38 	.word	0x20000b38
 8008d6c:	08080084 	.word	0x08080084
 8008d70:	0802b4b0 	.word	0x0802b4b0
 8008d74:	20000b44 	.word	0x20000b44
 8008d78:	08080090 	.word	0x08080090
 8008d7c:	0802b4dc 	.word	0x0802b4dc
 8008d80:	0802b504 	.word	0x0802b504
 8008d84:	20000b64 	.word	0x20000b64
 8008d88:	080800b0 	.word	0x080800b0
 8008d8c:	0802b50c 	.word	0x0802b50c
 8008d90:	20000b70 	.word	0x20000b70
 8008d94:	080800bc 	.word	0x080800bc
 8008d98:	0802b538 	.word	0x0802b538
 8008d9c:	20000b7c 	.word	0x20000b7c
 8008da0:	080800c8 	.word	0x080800c8
 8008da4:	0802b564 	.word	0x0802b564
 8008da8:	20000b88 	.word	0x20000b88
 8008dac:	080800d4 	.word	0x080800d4
 8008db0:	0802b590 	.word	0x0802b590
 8008db4:	20000b94 	.word	0x20000b94
 8008db8:	080800e0 	.word	0x080800e0
 8008dbc:	0802b5bc 	.word	0x0802b5bc
 8008dc0:	20000ba0 	.word	0x20000ba0
 8008dc4:	080800ec 	.word	0x080800ec
 8008dc8:	4b94      	ldr	r3, [pc, #592]	@ (800901c <PC_show_Keys+0x760>)
 8008dca:	0011      	movs	r1, r2
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7fc fa27 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008dd2:	4a92      	ldr	r2, [pc, #584]	@ (800901c <PC_show_Keys+0x760>)
 8008dd4:	4992      	ldr	r1, [pc, #584]	@ (8009020 <PC_show_Keys+0x764>)
 8008dd6:	4b93      	ldr	r3, [pc, #588]	@ (8009024 <PC_show_Keys+0x768>)
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f01d f801 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dde:	4b92      	ldr	r3, [pc, #584]	@ (8009028 <PC_show_Keys+0x76c>)
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	4b90      	ldr	r3, [pc, #576]	@ (8009024 <PC_show_Keys+0x768>)
 8008de4:	0011      	movs	r1, r2
 8008de6:	0018      	movs	r0, r3
 8008de8:	f7ff fd4d 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008dec:	4b8f      	ldr	r3, [pc, #572]	@ (800902c <PC_show_Keys+0x770>)
 8008dee:	4890      	ldr	r0, [pc, #576]	@ (8009030 <PC_show_Keys+0x774>)
 8008df0:	220c      	movs	r2, #12
 8008df2:	0019      	movs	r1, r3
 8008df4:	f003 f862 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008df8:	4a8c      	ldr	r2, [pc, #560]	@ (800902c <PC_show_Keys+0x770>)
 8008dfa:	4b88      	ldr	r3, [pc, #544]	@ (800901c <PC_show_Keys+0x760>)
 8008dfc:	0011      	movs	r1, r2
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7fc fa0e 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008e04:	4a85      	ldr	r2, [pc, #532]	@ (800901c <PC_show_Keys+0x760>)
 8008e06:	498b      	ldr	r1, [pc, #556]	@ (8009034 <PC_show_Keys+0x778>)
 8008e08:	4b86      	ldr	r3, [pc, #536]	@ (8009024 <PC_show_Keys+0x768>)
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f01c ffe8 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e10:	4b85      	ldr	r3, [pc, #532]	@ (8009028 <PC_show_Keys+0x76c>)
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	4b83      	ldr	r3, [pc, #524]	@ (8009024 <PC_show_Keys+0x768>)
 8008e16:	0011      	movs	r1, r2
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7ff fd34 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008e1e:	4b86      	ldr	r3, [pc, #536]	@ (8009038 <PC_show_Keys+0x77c>)
 8008e20:	4886      	ldr	r0, [pc, #536]	@ (800903c <PC_show_Keys+0x780>)
 8008e22:	220c      	movs	r2, #12
 8008e24:	0019      	movs	r1, r3
 8008e26:	f003 f849 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008e2a:	4a83      	ldr	r2, [pc, #524]	@ (8009038 <PC_show_Keys+0x77c>)
 8008e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800901c <PC_show_Keys+0x760>)
 8008e2e:	0011      	movs	r1, r2
 8008e30:	0018      	movs	r0, r3
 8008e32:	f7fc f9f5 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008e36:	4a79      	ldr	r2, [pc, #484]	@ (800901c <PC_show_Keys+0x760>)
 8008e38:	4981      	ldr	r1, [pc, #516]	@ (8009040 <PC_show_Keys+0x784>)
 8008e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8009024 <PC_show_Keys+0x768>)
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f01c ffcf 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e42:	4b79      	ldr	r3, [pc, #484]	@ (8009028 <PC_show_Keys+0x76c>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	4b77      	ldr	r3, [pc, #476]	@ (8009024 <PC_show_Keys+0x768>)
 8008e48:	0011      	movs	r1, r2
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff fd1b 	bl	8008886 <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008e50:	4a7c      	ldr	r2, [pc, #496]	@ (8009044 <PC_show_Keys+0x788>)
 8008e52:	4b74      	ldr	r3, [pc, #464]	@ (8009024 <PC_show_Keys+0x768>)
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f01c ffc2 	bl	8025de0 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8009048 <PC_show_Keys+0x78c>)
 8008e5e:	487b      	ldr	r0, [pc, #492]	@ (800904c <PC_show_Keys+0x790>)
 8008e60:	220c      	movs	r2, #12
 8008e62:	0019      	movs	r1, r3
 8008e64:	f003 f82a 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008e68:	4a77      	ldr	r2, [pc, #476]	@ (8009048 <PC_show_Keys+0x78c>)
 8008e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800901c <PC_show_Keys+0x760>)
 8008e6c:	0011      	movs	r1, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7fc f9d6 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008e74:	4a69      	ldr	r2, [pc, #420]	@ (800901c <PC_show_Keys+0x760>)
 8008e76:	4976      	ldr	r1, [pc, #472]	@ (8009050 <PC_show_Keys+0x794>)
 8008e78:	4b6a      	ldr	r3, [pc, #424]	@ (8009024 <PC_show_Keys+0x768>)
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f01c ffb0 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e80:	4b69      	ldr	r3, [pc, #420]	@ (8009028 <PC_show_Keys+0x76c>)
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	4b67      	ldr	r3, [pc, #412]	@ (8009024 <PC_show_Keys+0x768>)
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7ff fcfc 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008e8e:	4b71      	ldr	r3, [pc, #452]	@ (8009054 <PC_show_Keys+0x798>)
 8008e90:	4871      	ldr	r0, [pc, #452]	@ (8009058 <PC_show_Keys+0x79c>)
 8008e92:	220c      	movs	r2, #12
 8008e94:	0019      	movs	r1, r3
 8008e96:	f003 f811 	bl	800bebc <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8009054 <PC_show_Keys+0x798>)
 8008e9c:	4b5f      	ldr	r3, [pc, #380]	@ (800901c <PC_show_Keys+0x760>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7fc f9bd 	bl	8005220 <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800901c <PC_show_Keys+0x760>)
 8008ea8:	496c      	ldr	r1, [pc, #432]	@ (800905c <PC_show_Keys+0x7a0>)
 8008eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8009024 <PC_show_Keys+0x768>)
 8008eac:	0018      	movs	r0, r3
 8008eae:	f01c ff97 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8009028 <PC_show_Keys+0x76c>)
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8009024 <PC_show_Keys+0x768>)
 8008eb8:	0011      	movs	r1, r2
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7ff fce3 	bl	8008886 <PC_selectout>
#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8008ec0:	4b67      	ldr	r3, [pc, #412]	@ (8009060 <PC_show_Keys+0x7a4>)
 8008ec2:	4868      	ldr	r0, [pc, #416]	@ (8009064 <PC_show_Keys+0x7a8>)
 8008ec4:	2230      	movs	r2, #48	@ 0x30
 8008ec6:	0019      	movs	r1, r3
 8008ec8:	f002 fff8 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(msg, "25 - Stored Send from name ---------: ");
 8008ecc:	4a66      	ldr	r2, [pc, #408]	@ (8009068 <PC_show_Keys+0x7ac>)
 8008ece:	4b55      	ldr	r3, [pc, #340]	@ (8009024 <PC_show_Keys+0x768>)
 8008ed0:	0011      	movs	r1, r2
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f01c ff84 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ed8:	4b53      	ldr	r3, [pc, #332]	@ (8009028 <PC_show_Keys+0x76c>)
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	4b51      	ldr	r3, [pc, #324]	@ (8009024 <PC_show_Keys+0x768>)
 8008ede:	0011      	movs	r1, r2
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	f7ff fcd0 	bl	8008886 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8008ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8009060 <PC_show_Keys+0x7a4>)
 8008ee8:	4960      	ldr	r1, [pc, #384]	@ (800906c <PC_show_Keys+0x7b0>)
 8008eea:	4b4e      	ldr	r3, [pc, #312]	@ (8009024 <PC_show_Keys+0x768>)
 8008eec:	0018      	movs	r0, r3
 8008eee:	f01c ff77 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8009028 <PC_show_Keys+0x76c>)
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8009024 <PC_show_Keys+0x768>)
 8008ef8:	0011      	movs	r1, r2
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7ff fcc3 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8008f00:	4b5b      	ldr	r3, [pc, #364]	@ (8009070 <PC_show_Keys+0x7b4>)
 8008f02:	485c      	ldr	r0, [pc, #368]	@ (8009074 <PC_show_Keys+0x7b8>)
 8008f04:	2230      	movs	r2, #48	@ 0x30
 8008f06:	0019      	movs	r1, r3
 8008f08:	f002 ffd8 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(msg, "26 - Stored Send to name -----------: ");
 8008f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8009078 <PC_show_Keys+0x7bc>)
 8008f0e:	4b45      	ldr	r3, [pc, #276]	@ (8009024 <PC_show_Keys+0x768>)
 8008f10:	0011      	movs	r1, r2
 8008f12:	0018      	movs	r0, r3
 8008f14:	f01c ff64 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f18:	4b43      	ldr	r3, [pc, #268]	@ (8009028 <PC_show_Keys+0x76c>)
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	4b41      	ldr	r3, [pc, #260]	@ (8009024 <PC_show_Keys+0x768>)
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff fcb0 	bl	8008886 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 8008f26:	4a52      	ldr	r2, [pc, #328]	@ (8009070 <PC_show_Keys+0x7b4>)
 8008f28:	4950      	ldr	r1, [pc, #320]	@ (800906c <PC_show_Keys+0x7b0>)
 8008f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8009024 <PC_show_Keys+0x768>)
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f01c ff57 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f32:	4b3d      	ldr	r3, [pc, #244]	@ (8009028 <PC_show_Keys+0x76c>)
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	4b3b      	ldr	r3, [pc, #236]	@ (8009024 <PC_show_Keys+0x768>)
 8008f38:	0011      	movs	r1, r2
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7ff fca3 	bl	8008886 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8008f40:	4b4e      	ldr	r3, [pc, #312]	@ (800907c <PC_show_Keys+0x7c0>)
 8008f42:	484f      	ldr	r0, [pc, #316]	@ (8009080 <PC_show_Keys+0x7c4>)
 8008f44:	2230      	movs	r2, #48	@ 0x30
 8008f46:	0019      	movs	r1, r3
 8008f48:	f002 ffb8 	bl	800bebc <ReadUint8ArrayEEprom>
  sprintf(msg, "27 - Stored SMTP2go API key --------: ");
 8008f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8009084 <PC_show_Keys+0x7c8>)
 8008f4e:	4b35      	ldr	r3, [pc, #212]	@ (8009024 <PC_show_Keys+0x768>)
 8008f50:	0011      	movs	r1, r2
 8008f52:	0018      	movs	r0, r3
 8008f54:	f01c ff44 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f58:	4b33      	ldr	r3, [pc, #204]	@ (8009028 <PC_show_Keys+0x76c>)
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	4b31      	ldr	r3, [pc, #196]	@ (8009024 <PC_show_Keys+0x768>)
 8008f5e:	0011      	movs	r1, r2
 8008f60:	0018      	movs	r0, r3
 8008f62:	f7ff fc90 	bl	8008886 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 8008f66:	4a45      	ldr	r2, [pc, #276]	@ (800907c <PC_show_Keys+0x7c0>)
 8008f68:	4940      	ldr	r1, [pc, #256]	@ (800906c <PC_show_Keys+0x7b0>)
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8009024 <PC_show_Keys+0x768>)
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f01c ff37 	bl	8025de0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008f72:	4b2d      	ldr	r3, [pc, #180]	@ (8009028 <PC_show_Keys+0x76c>)
 8008f74:	781a      	ldrb	r2, [r3, #0]
 8008f76:	4b2b      	ldr	r3, [pc, #172]	@ (8009024 <PC_show_Keys+0x768>)
 8008f78:	0011      	movs	r1, r2
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f7ff fc83 	bl	8008886 <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "28 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008f80:	4b41      	ldr	r3, [pc, #260]	@ (8009088 <PC_show_Keys+0x7cc>)
 8008f82:	0018      	movs	r0, r3
 8008f84:	f7ff fc5a 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008f88:	200a      	movs	r0, #10
 8008f8a:	f00b fae9 	bl	8014560 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800908c <PC_show_Keys+0x7d0>)
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7ff fc53 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008f96:	200a      	movs	r0, #10
 8008f98:	f00b fae2 	bl	8014560 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8009090 <PC_show_Keys+0x7d4>)
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f7ff fc4c 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fa4:	200a      	movs	r0, #10
 8008fa6:	f00b fadb 	bl	8014560 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008faa:	4b3a      	ldr	r3, [pc, #232]	@ (8009094 <PC_show_Keys+0x7d8>)
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7ff fc45 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fb2:	200a      	movs	r0, #10
 8008fb4:	f00b fad4 	bl	8014560 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008fb8:	4b37      	ldr	r3, [pc, #220]	@ (8009098 <PC_show_Keys+0x7dc>)
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7ff fc3e 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fc0:	200a      	movs	r0, #10
 8008fc2:	f00b facd 	bl	8014560 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008fc6:	4b35      	ldr	r3, [pc, #212]	@ (800909c <PC_show_Keys+0x7e0>)
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f7ff fc37 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fce:	200a      	movs	r0, #10
 8008fd0:	f00b fac6 	bl	8014560 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008fd4:	4b32      	ldr	r3, [pc, #200]	@ (80090a0 <PC_show_Keys+0x7e4>)
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f7ff fc30 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fdc:	200a      	movs	r0, #10
 8008fde:	f00b fabf 	bl	8014560 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 8008fe2:	4b30      	ldr	r3, [pc, #192]	@ (80090a4 <PC_show_Keys+0x7e8>)
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7ff fc29 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008fea:	200a      	movs	r0, #10
 8008fec:	f00b fab8 	bl	8014560 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 48 chars)\r\n");
 8008ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80090a8 <PC_show_Keys+0x7ec>)
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7ff fc22 	bl	800883c <printf_USB>
  HAL_Delay(10);
 8008ff8:	200a      	movs	r0, #10
 8008ffa:	f00b fab1 	bl	8014560 <HAL_Delay>
#ifdef USBLOGGING
  printf_USB("U - toggle logging on/off\r\n");
  HAL_Delay(10);
#endif
*/
  if (!usb_out) {
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <PC_show_Keys+0x76c>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	4053      	eors	r3, r2
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <PC_show_Keys+0x758>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 800900c:	4b27      	ldr	r3, [pc, #156]	@ (80090ac <PC_show_Keys+0x7f0>)
 800900e:	0018      	movs	r0, r3
 8009010:	f01c fedc 	bl	8025dcc <puts>
  }
}
 8009014:	46c0      	nop			@ (mov r8, r8)
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	46c0      	nop			@ (mov r8, r8)
 800901c:	20000aa4 	.word	0x20000aa4
 8009020:	0802b5e8 	.word	0x0802b5e8
 8009024:	20000a50 	.word	0x20000a50
 8009028:	20000a4d 	.word	0x20000a4d
 800902c:	20000bac 	.word	0x20000bac
 8009030:	080800f8 	.word	0x080800f8
 8009034:	0802b614 	.word	0x0802b614
 8009038:	20000bb8 	.word	0x20000bb8
 800903c:	08080104 	.word	0x08080104
 8009040:	0802b640 	.word	0x0802b640
 8009044:	0802b66c 	.word	0x0802b66c
 8009048:	20000bc4 	.word	0x20000bc4
 800904c:	08080170 	.word	0x08080170
 8009050:	0802b698 	.word	0x0802b698
 8009054:	20000bd0 	.word	0x20000bd0
 8009058:	0808017c 	.word	0x0808017c
 800905c:	0802b6c4 	.word	0x0802b6c4
 8009060:	20000bdc 	.word	0x20000bdc
 8009064:	08080188 	.word	0x08080188
 8009068:	0802b6f0 	.word	0x0802b6f0
 800906c:	0802b504 	.word	0x0802b504
 8009070:	20000c0c 	.word	0x20000c0c
 8009074:	080801b8 	.word	0x080801b8
 8009078:	0802b718 	.word	0x0802b718
 800907c:	20000c3c 	.word	0x20000c3c
 8009080:	080801e8 	.word	0x080801e8
 8009084:	0802b740 	.word	0x0802b740
 8009088:	0802b768 	.word	0x0802b768
 800908c:	0802b780 	.word	0x0802b780
 8009090:	0802b7ac 	.word	0x0802b7ac
 8009094:	0802b7dc 	.word	0x0802b7dc
 8009098:	0802b818 	.word	0x0802b818
 800909c:	0802b850 	.word	0x0802b850
 80090a0:	0802b884 	.word	0x0802b884
 80090a4:	0802b8a4 	.word	0x0802b8a4
 80090a8:	0802b8d8 	.word	0x0802b8d8
 80090ac:	0802b8fc 	.word	0x0802b8fc

080090b0 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	4b20      	ldr	r3, [pc, #128]	@ (8009140 <ascii_to_uint8+0x90>)
 80090c0:	18d3      	adds	r3, r2, r3
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	001a      	movs	r2, r3
 80090c6:	2304      	movs	r3, #4
 80090c8:	4013      	ands	r3, r2
 80090ca:	d00a      	beq.n	80090e2 <ascii_to_uint8+0x32>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3301      	adds	r3, #1
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009140 <ascii_to_uint8+0x90>)
 80090d6:	18d3      	adds	r3, r2, r3
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	001a      	movs	r2, r3
 80090dc:	2304      	movs	r3, #4
 80090de:	4013      	ands	r3, r2
 80090e0:	d105      	bne.n	80090ee <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 80090e2:	4b18      	ldr	r3, [pc, #96]	@ (8009144 <ascii_to_uint8+0x94>)
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff fba9 	bl	800883c <printf_USB>
    return 100;
 80090ea:	2364      	movs	r3, #100	@ 0x64
 80090ec:	e024      	b.n	8009138 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	1c1a      	adds	r2, r3, #0
 80090f4:	0092      	lsls	r2, r2, #2
 80090f6:	18d3      	adds	r3, r2, r3
 80090f8:	18db      	adds	r3, r3, r3
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3301      	adds	r3, #1
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	18d3      	adds	r3, r2, r3
 8009104:	b2da      	uxtb	r2, r3
 8009106:	210f      	movs	r1, #15
 8009108:	187b      	adds	r3, r7, r1
 800910a:	3a10      	subs	r2, #16
 800910c:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 28 || value == 21 || value == 22) {
#else
  if (value > 27 || value == 21 || value == 22) {
 800910e:	187b      	adds	r3, r7, r1
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b1b      	cmp	r3, #27
 8009114:	d807      	bhi.n	8009126 <ascii_to_uint8+0x76>
 8009116:	187b      	adds	r3, r7, r1
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b15      	cmp	r3, #21
 800911c:	d003      	beq.n	8009126 <ascii_to_uint8+0x76>
 800911e:	187b      	adds	r3, r7, r1
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b16      	cmp	r3, #22
 8009124:	d105      	bne.n	8009132 <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8009126:	4b08      	ldr	r3, [pc, #32]	@ (8009148 <ascii_to_uint8+0x98>)
 8009128:	0018      	movs	r0, r3
 800912a:	f7ff fb87 	bl	800883c <printf_USB>
    return 100;
 800912e:	2364      	movs	r3, #100	@ 0x64
 8009130:	e002      	b.n	8009138 <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8009132:	230f      	movs	r3, #15
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	781b      	ldrb	r3, [r3, #0]
}
 8009138:	0018      	movs	r0, r3
 800913a:	46bd      	mov	sp, r7
 800913c:	b004      	add	sp, #16
 800913e:	bd80      	pop	{r7, pc}
 8009140:	0802e950 	.word	0x0802e950
 8009144:	0802b948 	.word	0x0802b948
 8009148:	0802b970 	.word	0x0802b970

0800914c <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 800914c:	b590      	push	{r4, r7, lr}
 800914e:	b0d5      	sub	sp, #340	@ 0x154
 8009150:	af3e      	add	r7, sp, #248	@ 0xf8
 8009152:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8009154:	f019 fd86 	bl	8022c64 <GetUsbRxDataSize>
 8009158:	0003      	movs	r3, r0
 800915a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t r = 0;
 800915c:	2357      	movs	r3, #87	@ 0x57
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	2200      	movs	r2, #0
 8009162:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8009164:	2356      	movs	r3, #86	@ 0x56
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
  char Buffer[48];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2124      	movs	r1, #36	@ 0x24
 8009170:	0018      	movs	r0, r3
 8009172:	f01c ffa7 	bl	80260c4 <strchr>
 8009176:	0003      	movs	r3, r0
 8009178:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL) && (len != 28)){
 800917a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d10f      	bne.n	80091a0 <Process_USB_input+0x54>
 8009180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <Process_USB_input+0x54>
 8009186:	4bd8      	ldr	r3, [pc, #864]	@ (80094e8 <Process_USB_input+0x39c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b1c      	cmp	r3, #28
 800918c:	d008      	beq.n	80091a0 <Process_USB_input+0x54>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 800918e:	4ad7      	ldr	r2, [pc, #860]	@ (80094ec <Process_USB_input+0x3a0>)
 8009190:	4bd7      	ldr	r3, [pc, #860]	@ (80094f0 <Process_USB_input+0x3a4>)
 8009192:	0019      	movs	r1, r3
 8009194:	2003      	movs	r0, #3
 8009196:	f00a fc99 	bl	8013acc <CreateLine>
      len = 28;
 800919a:	4bd3      	ldr	r3, [pc, #844]	@ (80094e8 <Process_USB_input+0x39c>)
 800919c:	221c      	movs	r2, #28
 800919e:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2153      	movs	r1, #83	@ 0x53
 80091a4:	0018      	movs	r0, r3
 80091a6:	f01c ff8d 	bl	80260c4 <strchr>
 80091aa:	0003      	movs	r3, r0
 80091ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL) && (len != 48)){
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10f      	bne.n	80091d4 <Process_USB_input+0x88>
 80091b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00c      	beq.n	80091d4 <Process_USB_input+0x88>
 80091ba:	4bcb      	ldr	r3, [pc, #812]	@ (80094e8 <Process_USB_input+0x39c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b30      	cmp	r3, #48	@ 0x30
 80091c0:	d008      	beq.n	80091d4 <Process_USB_input+0x88>
      Debug("Switching to input length of 48 for full name strings");
 80091c2:	4acc      	ldr	r2, [pc, #816]	@ (80094f4 <Process_USB_input+0x3a8>)
 80091c4:	4bca      	ldr	r3, [pc, #808]	@ (80094f0 <Process_USB_input+0x3a4>)
 80091c6:	0019      	movs	r1, r3
 80091c8:	2003      	movs	r0, #3
 80091ca:	f00a fc7f 	bl	8013acc <CreateLine>
      len = 48;
 80091ce:	4bc6      	ldr	r3, [pc, #792]	@ (80094e8 <Process_USB_input+0x39c>)
 80091d0:	2230      	movs	r2, #48	@ 0x30
 80091d2:	601a      	str	r2, [r3, #0]
    length = 0;
    data[0] = '\0';
  }
#endif
*/
  if ((length >= len) || (data[length-1] == 13)) {
 80091d4:	4bc4      	ldr	r3, [pc, #784]	@ (80094e8 <Process_USB_input+0x39c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d207      	bcs.n	80091ee <Process_USB_input+0xa2>
 80091de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e0:	3b01      	subs	r3, #1
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b0d      	cmp	r3, #13
 80091ea:	d000      	beq.n	80091ee <Process_USB_input+0xa2>
 80091ec:	e1c5      	b.n	800957a <Process_USB_input+0x42e>
    // 'S' is for entering a ASCII string
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S')) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b23      	cmp	r3, #35	@ 0x23
 80091f4:	d008      	beq.n	8009208 <Process_USB_input+0xbc>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b24      	cmp	r3, #36	@ 0x24
 80091fc:	d004      	beq.n	8009208 <Process_USB_input+0xbc>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b53      	cmp	r3, #83	@ 0x53
 8009204:	d000      	beq.n	8009208 <Process_USB_input+0xbc>
 8009206:	e19a      	b.n	800953e <Process_USB_input+0x3f2>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3301      	adds	r3, #1
 800920c:	0018      	movs	r0, r3
 800920e:	f7ff ff4f 	bl	80090b0 <ascii_to_uint8>
 8009212:	0003      	movs	r3, r0
 8009214:	001a      	movs	r2, r3
 8009216:	4bb8      	ldr	r3, [pc, #736]	@ (80094f8 <Process_USB_input+0x3ac>)
 8009218:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 800921a:	4bb7      	ldr	r3, [pc, #732]	@ (80094f8 <Process_USB_input+0x3ac>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b64      	cmp	r3, #100	@ 0x64
 8009220:	d101      	bne.n	8009226 <Process_USB_input+0xda>
        return false; // value out of range
 8009222:	2300      	movs	r3, #0
 8009224:	e1bc      	b.n	80095a0 <Process_USB_input+0x454>
      }
      if (data[3] == ',') {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3303      	adds	r3, #3
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b2c      	cmp	r3, #44	@ 0x2c
 800922e:	d000      	beq.n	8009232 <Process_USB_input+0xe6>
 8009230:	e14f      	b.n	80094d2 <Process_USB_input+0x386>
        for (i=4; i < len; i++) {
 8009232:	2356      	movs	r3, #86	@ 0x56
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	2204      	movs	r2, #4
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	e0c1      	b.n	80093c0 <Process_USB_input+0x274>
          if (data[0] == 'S') {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b53      	cmp	r3, #83	@ 0x53
 8009242:	d10f      	bne.n	8009264 <Process_USB_input+0x118>
            if (data[i] == 13) {
 8009244:	2156      	movs	r1, #86	@ 0x56
 8009246:	187b      	adds	r3, r7, r1
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	18d3      	adds	r3, r2, r3
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b0d      	cmp	r3, #13
 8009252:	d000      	beq.n	8009256 <Process_USB_input+0x10a>
 8009254:	e0ae      	b.n	80093b4 <Process_USB_input+0x268>
              data[i] = 0;
 8009256:	187b      	adds	r3, r7, r1
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	18d3      	adds	r3, r2, r3
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
              break;
 8009262:	e0b5      	b.n	80093d0 <Process_USB_input+0x284>
            }
          }
          else {
          HAL_Delay(10);
 8009264:	200a      	movs	r0, #10
 8009266:	f00b f97b 	bl	8014560 <HAL_Delay>
            if (isxdigit(data[i])) {
 800926a:	2156      	movs	r1, #86	@ 0x56
 800926c:	187b      	adds	r3, r7, r1
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	18d3      	adds	r3, r2, r3
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	4ba0      	ldr	r3, [pc, #640]	@ (80094fc <Process_USB_input+0x3b0>)
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	001a      	movs	r2, r3
 8009280:	2344      	movs	r3, #68	@ 0x44
 8009282:	4013      	ands	r3, r2
 8009284:	d06a      	beq.n	800935c <Process_USB_input+0x210>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8009286:	4b9e      	ldr	r3, [pc, #632]	@ (8009500 <Process_USB_input+0x3b4>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	b25b      	sxtb	r3, r3
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	b25a      	sxtb	r2, r3
 8009290:	0008      	movs	r0, r1
 8009292:	187b      	adds	r3, r7, r1
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	18cb      	adds	r3, r1, r3
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	1c59      	adds	r1, r3, #1
 800929e:	4b97      	ldr	r3, [pc, #604]	@ (80094fc <Process_USB_input+0x3b0>)
 80092a0:	18cb      	adds	r3, r1, r3
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	0019      	movs	r1, r3
 80092a6:	2304      	movs	r3, #4
 80092a8:	400b      	ands	r3, r1
 80092aa:	d008      	beq.n	80092be <Process_USB_input+0x172>
 80092ac:	183b      	adds	r3, r7, r0
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	18cb      	adds	r3, r1, r3
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	3b30      	subs	r3, #48	@ 0x30
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	b25b      	sxtb	r3, r3
 80092bc:	e01e      	b.n	80092fc <Process_USB_input+0x1b0>
 80092be:	2356      	movs	r3, #86	@ 0x56
 80092c0:	18fb      	adds	r3, r7, r3
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	18c9      	adds	r1, r1, r3
 80092c8:	2047      	movs	r0, #71	@ 0x47
 80092ca:	183b      	adds	r3, r7, r0
 80092cc:	7809      	ldrb	r1, [r1, #0]
 80092ce:	7019      	strb	r1, [r3, #0]
 80092d0:	183b      	adds	r3, r7, r0
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	4b89      	ldr	r3, [pc, #548]	@ (80094fc <Process_USB_input+0x3b0>)
 80092d8:	18cb      	adds	r3, r1, r3
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	0019      	movs	r1, r3
 80092de:	2303      	movs	r3, #3
 80092e0:	400b      	ands	r3, r1
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d103      	bne.n	80092ee <Process_USB_input+0x1a2>
 80092e6:	183b      	adds	r3, r7, r0
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	3b20      	subs	r3, #32
 80092ec:	e002      	b.n	80092f4 <Process_USB_input+0x1a8>
 80092ee:	2347      	movs	r3, #71	@ 0x47
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	3b37      	subs	r3, #55	@ 0x37
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	4313      	orrs	r3, r2
 80092fe:	b25b      	sxtb	r3, r3
 8009300:	b2da      	uxtb	r2, r3
 8009302:	4b7f      	ldr	r3, [pc, #508]	@ (8009500 <Process_USB_input+0x3b4>)
 8009304:	701a      	strb	r2, [r3, #0]
//              printf_USB("Result is 0x%02X\r\n", result);
              HAL_Delay(10);
 8009306:	200a      	movs	r0, #10
 8009308:	f00b f92a 	bl	8014560 <HAL_Delay>
              if (len == 28) {
 800930c:	4b76      	ldr	r3, [pc, #472]	@ (80094e8 <Process_USB_input+0x39c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b1c      	cmp	r3, #28
 8009312:	d14f      	bne.n	80093b4 <Process_USB_input+0x268>
                if ((i % 2) == 1) {
 8009314:	2356      	movs	r3, #86	@ 0x56
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2201      	movs	r2, #1
 800931c:	4013      	ands	r3, r2
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d047      	beq.n	80093b4 <Process_USB_input+0x268>
                  data[r] = result;
 8009324:	2457      	movs	r4, #87	@ 0x57
 8009326:	193b      	adds	r3, r7, r4
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	18d3      	adds	r3, r2, r3
 800932e:	4a74      	ldr	r2, [pc, #464]	@ (8009500 <Process_USB_input+0x3b4>)
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	701a      	strb	r2, [r3, #0]
                  Debug("data[%d] = 0x%02X",r, data[r]);
 8009334:	193b      	adds	r3, r7, r4
 8009336:	7818      	ldrb	r0, [r3, #0]
 8009338:	193b      	adds	r3, r7, r4
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	18d3      	adds	r3, r2, r3
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4a70      	ldr	r2, [pc, #448]	@ (8009504 <Process_USB_input+0x3b8>)
 8009344:	496a      	ldr	r1, [pc, #424]	@ (80094f0 <Process_USB_input+0x3a4>)
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	0003      	movs	r3, r0
 800934a:	2003      	movs	r0, #3
 800934c:	f00a fbbe 	bl	8013acc <CreateLine>
                  r++;
 8009350:	193b      	adds	r3, r7, r4
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	193b      	adds	r3, r7, r4
 8009356:	3201      	adds	r2, #1
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e02b      	b.n	80093b4 <Process_USB_input+0x268>
                }
              }
            }
            else {
              Debug("Invalid hexadecimal character: '%c at position %d", data[i], i);
 800935c:	2156      	movs	r1, #86	@ 0x56
 800935e:	187b      	adds	r3, r7, r1
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	0018      	movs	r0, r3
 800936a:	187b      	adds	r3, r7, r1
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	4a66      	ldr	r2, [pc, #408]	@ (8009508 <Process_USB_input+0x3bc>)
 8009370:	495f      	ldr	r1, [pc, #380]	@ (80094f0 <Process_USB_input+0x3a4>)
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	0003      	movs	r3, r0
 8009376:	2003      	movs	r0, #3
 8009378:	f00a fba8 	bl	8013acc <CreateLine>
              ResetUsbRxDataSize();
 800937c:	f019 fc5a 	bl	8022c34 <ResetUsbRxDataSize>
              PC_show_Keys();
 8009380:	f7ff fa9c 	bl	80088bc <PC_show_Keys>
              for (uint8_t i=0; i < 32; i++) {
 8009384:	2355      	movs	r3, #85	@ 0x55
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	e00b      	b.n	80093a6 <Process_USB_input+0x25a>
                data[i] = '\0';
 800938e:	2155      	movs	r1, #85	@ 0x55
 8009390:	187b      	adds	r3, r7, r1
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
              for (uint8_t i=0; i < 32; i++) {
 800939c:	187b      	adds	r3, r7, r1
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	3201      	adds	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	2355      	movs	r3, #85	@ 0x55
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b1f      	cmp	r3, #31
 80093ae:	d9ee      	bls.n	800938e <Process_USB_input+0x242>
              }
              return false; // Of een andere foutwaarde
 80093b0:	2300      	movs	r3, #0
 80093b2:	e0f5      	b.n	80095a0 <Process_USB_input+0x454>
        for (i=4; i < len; i++) {
 80093b4:	2156      	movs	r1, #86	@ 0x56
 80093b6:	187b      	adds	r3, r7, r1
 80093b8:	781a      	ldrb	r2, [r3, #0]
 80093ba:	187b      	adds	r3, r7, r1
 80093bc:	3201      	adds	r2, #1
 80093be:	701a      	strb	r2, [r3, #0]
 80093c0:	2356      	movs	r3, #86	@ 0x56
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	4b48      	ldr	r3, [pc, #288]	@ (80094e8 <Process_USB_input+0x39c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d200      	bcs.n	80093d0 <Process_USB_input+0x284>
 80093ce:	e735      	b.n	800923c <Process_USB_input+0xf0>
            }
          }
        }
        if (len < 48) {
 80093d0:	4b45      	ldr	r3, [pc, #276]	@ (80094e8 <Process_USB_input+0x39c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80093d6:	d825      	bhi.n	8009424 <Process_USB_input+0x2d8>
          if (len == 6) {
 80093d8:	4b43      	ldr	r3, [pc, #268]	@ (80094e8 <Process_USB_input+0x39c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b06      	cmp	r3, #6
 80093de:	d114      	bne.n	800940a <Process_USB_input+0x2be>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80093e0:	2438      	movs	r4, #56	@ 0x38
 80093e2:	193b      	adds	r3, r7, r4
 80093e4:	4849      	ldr	r0, [pc, #292]	@ (800950c <Process_USB_input+0x3c0>)
 80093e6:	220c      	movs	r2, #12
 80093e8:	0019      	movs	r1, r3
 80093ea:	f002 fd67 	bl	800bebc <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 80093ee:	4b44      	ldr	r3, [pc, #272]	@ (8009500 <Process_USB_input+0x3b4>)
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	0021      	movs	r1, r4
 80093f4:	187b      	adds	r3, r7, r1
 80093f6:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 80093f8:	4b3f      	ldr	r3, [pc, #252]	@ (80094f8 <Process_USB_input+0x3ac>)
 80093fa:	2202      	movs	r2, #2
 80093fc:	1879      	adds	r1, r7, r1
 80093fe:	189b      	adds	r3, r3, r2
 8009400:	220c      	movs	r2, #12
 8009402:	0018      	movs	r0, r3
 8009404:	f01c ff32 	bl	802626c <memcpy>
 8009408:	e005      	b.n	8009416 <Process_USB_input+0x2ca>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4b40      	ldr	r3, [pc, #256]	@ (8009510 <Process_USB_input+0x3c4>)
 800940e:	220c      	movs	r2, #12
 8009410:	0018      	movs	r0, r3
 8009412:	f01c ff2b 	bl	802626c <memcpy>
          }
          received.Payload[12] = '\0';
 8009416:	4b38      	ldr	r3, [pc, #224]	@ (80094f8 <Process_USB_input+0x3ac>)
 8009418:	2200      	movs	r2, #0
 800941a:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 800941c:	4b36      	ldr	r3, [pc, #216]	@ (80094f8 <Process_USB_input+0x3ac>)
 800941e:	220c      	movs	r2, #12
 8009420:	705a      	strb	r2, [r3, #1]
 8009422:	e006      	b.n	8009432 <Process_USB_input+0x2e6>
        }
        else {
          received.PayloadLength = i-3;  // The string terminator counts
 8009424:	2356      	movs	r3, #86	@ 0x56
 8009426:	18fb      	adds	r3, r7, r3
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	3b03      	subs	r3, #3
 800942c:	b2da      	uxtb	r2, r3
 800942e:	4b32      	ldr	r3, [pc, #200]	@ (80094f8 <Process_USB_input+0x3ac>)
 8009430:	705a      	strb	r2, [r3, #1]
        }
        if (len < 48) {
 8009432:	4b2d      	ldr	r3, [pc, #180]	@ (80094e8 <Process_USB_input+0x39c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b2f      	cmp	r3, #47	@ 0x2f
 8009438:	d80d      	bhi.n	8009456 <Process_USB_input+0x30a>
          uint8ArrayToString(Buffer, received.Payload);
 800943a:	4a35      	ldr	r2, [pc, #212]	@ (8009510 <Process_USB_input+0x3c4>)
 800943c:	2408      	movs	r4, #8
 800943e:	193b      	adds	r3, r7, r4
 8009440:	0011      	movs	r1, r2
 8009442:	0018      	movs	r0, r3
 8009444:	f7fb feec 	bl	8005220 <uint8ArrayToString>
          Debug("received Payload to write %s", Buffer);
 8009448:	193b      	adds	r3, r7, r4
 800944a:	4a32      	ldr	r2, [pc, #200]	@ (8009514 <Process_USB_input+0x3c8>)
 800944c:	4928      	ldr	r1, [pc, #160]	@ (80094f0 <Process_USB_input+0x3a4>)
 800944e:	2003      	movs	r0, #3
 8009450:	f00a fb3c 	bl	8013acc <CreateLine>
 8009454:	e012      	b.n	800947c <Process_USB_input+0x330>
        }
        else if (len == 48) {
 8009456:	4b24      	ldr	r3, [pc, #144]	@ (80094e8 <Process_USB_input+0x39c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b30      	cmp	r3, #48	@ 0x30
 800945c:	d10e      	bne.n	800947c <Process_USB_input+0x330>
          memcpy(received.Payload, data+4, i);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	2356      	movs	r3, #86	@ 0x56
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	781a      	ldrb	r2, [r3, #0]
 8009468:	4b29      	ldr	r3, [pc, #164]	@ (8009510 <Process_USB_input+0x3c4>)
 800946a:	0018      	movs	r0, r3
 800946c:	f01c fefe 	bl	802626c <memcpy>
          Debug("received Payload to write %s", received.Payload);
 8009470:	4b27      	ldr	r3, [pc, #156]	@ (8009510 <Process_USB_input+0x3c4>)
 8009472:	4a28      	ldr	r2, [pc, #160]	@ (8009514 <Process_USB_input+0x3c8>)
 8009474:	491e      	ldr	r1, [pc, #120]	@ (80094f0 <Process_USB_input+0x3a4>)
 8009476:	2003      	movs	r0, #3
 8009478:	f00a fb28 	bl	8013acc <CreateLine>
        }
        ProcessCmd(received);
 800947c:	4c1e      	ldr	r4, [pc, #120]	@ (80094f8 <Process_USB_input+0x3ac>)
 800947e:	466b      	mov	r3, sp
 8009480:	0018      	movs	r0, r3
 8009482:	0023      	movs	r3, r4
 8009484:	3310      	adds	r3, #16
 8009486:	22f4      	movs	r2, #244	@ 0xf4
 8009488:	0019      	movs	r1, r3
 800948a:	f01c feef 	bl	802626c <memcpy>
 800948e:	6820      	ldr	r0, [r4, #0]
 8009490:	6861      	ldr	r1, [r4, #4]
 8009492:	68a2      	ldr	r2, [r4, #8]
 8009494:	68e3      	ldr	r3, [r4, #12]
 8009496:	f7fe ff63 	bl	8008360 <ProcessCmd>
        ResetUsbRxDataSize();
 800949a:	f019 fbcb 	bl	8022c34 <ResetUsbRxDataSize>
        PC_show_Keys();
 800949e:	f7ff fa0d 	bl	80088bc <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 80094a2:	2354      	movs	r3, #84	@ 0x54
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	e00b      	b.n	80094c4 <Process_USB_input+0x378>
          data[i] = '\0';
 80094ac:	2154      	movs	r1, #84	@ 0x54
 80094ae:	187b      	adds	r3, r7, r1
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	18d3      	adds	r3, r2, r3
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80094ba:	187b      	adds	r3, r7, r1
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	187b      	adds	r3, r7, r1
 80094c0:	3201      	adds	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	2354      	movs	r3, #84	@ 0x54
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b1f      	cmp	r3, #31
 80094cc:	d9ee      	bls.n	80094ac <Process_USB_input+0x360>
        }
        return true;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e066      	b.n	80095a0 <Process_USB_input+0x454>
      }
      else {
        printf_USB("\r\nInvalid input; Command comma not found\r\n");
 80094d2:	4b11      	ldr	r3, [pc, #68]	@ (8009518 <Process_USB_input+0x3cc>)
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7ff f9b1 	bl	800883c <printf_USB>
        ResetUsbRxDataSize();
 80094da:	f019 fbab 	bl	8022c34 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 80094de:	2353      	movs	r3, #83	@ 0x53
 80094e0:	18fb      	adds	r3, r7, r3
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
 80094e6:	e025      	b.n	8009534 <Process_USB_input+0x3e8>
 80094e8:	20000038 	.word	0x20000038
 80094ec:	0802b98c 	.word	0x0802b98c
 80094f0:	0802b9cc 	.word	0x0802b9cc
 80094f4:	0802b9d0 	.word	0x0802b9d0
 80094f8:	2000083c 	.word	0x2000083c
 80094fc:	0802e950 	.word	0x0802e950
 8009500:	20000940 	.word	0x20000940
 8009504:	0802ba08 	.word	0x0802ba08
 8009508:	0802ba1c 	.word	0x0802ba1c
 800950c:	08080000 	.word	0x08080000
 8009510:	2000083e 	.word	0x2000083e
 8009514:	0802ba50 	.word	0x0802ba50
 8009518:	0802ba70 	.word	0x0802ba70
          data[i] = '\0';
 800951c:	2153      	movs	r1, #83	@ 0x53
 800951e:	187b      	adds	r3, r7, r1
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 800952a:	187b      	adds	r3, r7, r1
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	187b      	adds	r3, r7, r1
 8009530:	3201      	adds	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	2353      	movs	r3, #83	@ 0x53
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b1f      	cmp	r3, #31
 800953c:	d9ee      	bls.n	800951c <Process_USB_input+0x3d0>
        }
      }
    }
//    else {
    PC_show_Keys();
 800953e:	f7ff f9bd 	bl	80088bc <PC_show_Keys>
    ResetUsbRxDataSize();
 8009542:	f019 fb77 	bl	8022c34 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < length; i++) {
 8009546:	2352      	movs	r3, #82	@ 0x52
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	2200      	movs	r2, #0
 800954c:	701a      	strb	r2, [r3, #0]
 800954e:	e00b      	b.n	8009568 <Process_USB_input+0x41c>
      data[i] = '\0';
 8009550:	2152      	movs	r1, #82	@ 0x52
 8009552:	187b      	adds	r3, r7, r1
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	18d3      	adds	r3, r2, r3
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 800955e:	187b      	adds	r3, r7, r1
 8009560:	781a      	ldrb	r2, [r3, #0]
 8009562:	187b      	adds	r3, r7, r1
 8009564:	3201      	adds	r2, #1
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	2352      	movs	r3, #82	@ 0x52
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009570:	429a      	cmp	r2, r3
 8009572:	d8ed      	bhi.n	8009550 <Process_USB_input+0x404>
    }
    len = 6;
 8009574:	4b0c      	ldr	r3, [pc, #48]	@ (80095a8 <Process_USB_input+0x45c>)
 8009576:	2206      	movs	r2, #6
 8009578:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <Process_USB_input+0x460>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009580:	429a      	cmp	r2, r3
 8009582:	d008      	beq.n	8009596 <Process_USB_input+0x44a>
    printf_USB("USB input: %s\r", (const char*)data);
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4b0a      	ldr	r3, [pc, #40]	@ (80095b0 <Process_USB_input+0x464>)
 8009588:	0011      	movs	r1, r2
 800958a:	0018      	movs	r0, r3
 800958c:	f7ff f956 	bl	800883c <printf_USB>
    formerlength = length;
 8009590:	4b06      	ldr	r3, [pc, #24]	@ (80095ac <Process_USB_input+0x460>)
 8009592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009594:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009598:	0018      	movs	r0, r3
 800959a:	f019 fb6d 	bl	8022c78 <GetUsbRxNextChunk>
  return false;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	0018      	movs	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b017      	add	sp, #92	@ 0x5c
 80095a6:	bd90      	pop	{r4, r7, pc}
 80095a8:	20000038 	.word	0x20000038
 80095ac:	20000944 	.word	0x20000944
 80095b0:	0802ba9c 	.word	0x0802ba9c

080095b4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80095b8:	4b26      	ldr	r3, [pc, #152]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 80095ba:	4a27      	ldr	r2, [pc, #156]	@ (8009658 <ReadBatteryVoltage+0xa4>)
 80095bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80095be:	4b25      	ldr	r3, [pc, #148]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 80095c0:	2280      	movs	r2, #128	@ 0x80
 80095c2:	0152      	lsls	r2, r2, #5
 80095c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80095c6:	4a23      	ldr	r2, [pc, #140]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 80095c8:	4b24      	ldr	r3, [pc, #144]	@ (800965c <ReadBatteryVoltage+0xa8>)
 80095ca:	0011      	movs	r1, r2
 80095cc:	0018      	movs	r0, r3
 80095ce:	f00b fa95 	bl	8014afc <HAL_ADC_ConfigChannel>
 80095d2:	1e03      	subs	r3, r0, #0
 80095d4:	d001      	beq.n	80095da <ReadBatteryVoltage+0x26>
    Error_Handler();
 80095d6:	f003 fd53 	bl	800d080 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80095da:	4b20      	ldr	r3, [pc, #128]	@ (800965c <ReadBatteryVoltage+0xa8>)
 80095dc:	0018      	movs	r0, r3
 80095de:	f00b f991 	bl	8014904 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80095e2:	4b1e      	ldr	r3, [pc, #120]	@ (800965c <ReadBatteryVoltage+0xa8>)
 80095e4:	2101      	movs	r1, #1
 80095e6:	0018      	movs	r0, r3
 80095e8:	f00b f9e0 	bl	80149ac <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80095ec:	4b1b      	ldr	r3, [pc, #108]	@ (800965c <ReadBatteryVoltage+0xa8>)
 80095ee:	0018      	movs	r0, r3
 80095f0:	f00b fa78 	bl	8014ae4 <HAL_ADC_GetValue>
 80095f4:	0002      	movs	r2, r0
 80095f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009660 <ReadBatteryVoltage+0xac>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4353      	muls	r3, r2
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	4919      	ldr	r1, [pc, #100]	@ (8009664 <ReadBatteryVoltage+0xb0>)
 8009600:	0018      	movs	r0, r3
 8009602:	f7f6 fdcf 	bl	80001a4 <__udivsi3>
 8009606:	0003      	movs	r3, r0
 8009608:	001a      	movs	r2, r3
 800960a:	4b17      	ldr	r3, [pc, #92]	@ (8009668 <ReadBatteryVoltage+0xb4>)
 800960c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800960e:	4b16      	ldr	r3, [pc, #88]	@ (8009668 <ReadBatteryVoltage+0xb4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	0018      	movs	r0, r3
 8009614:	f7f8 f958 	bl	80018c8 <__aeabi_ui2f>
 8009618:	1c03      	adds	r3, r0, #0
 800961a:	4914      	ldr	r1, [pc, #80]	@ (800966c <ReadBatteryVoltage+0xb8>)
 800961c:	1c18      	adds	r0, r3, #0
 800961e:	f7f7 fb41 	bl	8000ca4 <__aeabi_fdiv>
 8009622:	1c03      	adds	r3, r0, #0
 8009624:	1c1a      	adds	r2, r3, #0
 8009626:	4b12      	ldr	r3, [pc, #72]	@ (8009670 <ReadBatteryVoltage+0xbc>)
 8009628:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800962a:	4b0a      	ldr	r3, [pc, #40]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 800962c:	4a0a      	ldr	r2, [pc, #40]	@ (8009658 <ReadBatteryVoltage+0xa4>)
 800962e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009630:	4b08      	ldr	r3, [pc, #32]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 8009632:	4a10      	ldr	r2, [pc, #64]	@ (8009674 <ReadBatteryVoltage+0xc0>)
 8009634:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009636:	4a07      	ldr	r2, [pc, #28]	@ (8009654 <ReadBatteryVoltage+0xa0>)
 8009638:	4b08      	ldr	r3, [pc, #32]	@ (800965c <ReadBatteryVoltage+0xa8>)
 800963a:	0011      	movs	r1, r2
 800963c:	0018      	movs	r0, r3
 800963e:	f00b fa5d 	bl	8014afc <HAL_ADC_ConfigChannel>
 8009642:	1e03      	subs	r3, r0, #0
 8009644:	d001      	beq.n	800964a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009646:	f003 fd1b 	bl	800d080 <Error_Handler>
  }
  return trueValue;
 800964a:	4b09      	ldr	r3, [pc, #36]	@ (8009670 <ReadBatteryVoltage+0xbc>)
 800964c:	681b      	ldr	r3, [r3, #0]
 }
 800964e:	1c18      	adds	r0, r3, #0
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20000c6c 	.word	0x20000c6c
 8009658:	38004000 	.word	0x38004000
 800965c:	20000cc0 	.word	0x20000cc0
 8009660:	2000003c 	.word	0x2000003c
 8009664:	00000fff 	.word	0x00000fff
 8009668:	20000c88 	.word	0x20000c88
 800966c:	447a0000 	.word	0x447a0000
 8009670:	20000c8c 	.word	0x20000c8c
 8009674:	00001001 	.word	0x00001001

08009678 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 800967c:	4b21      	ldr	r3, [pc, #132]	@ (8009704 <ReadSolarVoltage+0x8c>)
 800967e:	4a22      	ldr	r2, [pc, #136]	@ (8009708 <ReadSolarVoltage+0x90>)
 8009680:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009682:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <ReadSolarVoltage+0x8c>)
 8009684:	2280      	movs	r2, #128	@ 0x80
 8009686:	0152      	lsls	r2, r2, #5
 8009688:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800968a:	4a1e      	ldr	r2, [pc, #120]	@ (8009704 <ReadSolarVoltage+0x8c>)
 800968c:	4b1f      	ldr	r3, [pc, #124]	@ (800970c <ReadSolarVoltage+0x94>)
 800968e:	0011      	movs	r1, r2
 8009690:	0018      	movs	r0, r3
 8009692:	f00b fa33 	bl	8014afc <HAL_ADC_ConfigChannel>
 8009696:	1e03      	subs	r3, r0, #0
 8009698:	d001      	beq.n	800969e <ReadSolarVoltage+0x26>
    Error_Handler();
 800969a:	f003 fcf1 	bl	800d080 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800969e:	4b1b      	ldr	r3, [pc, #108]	@ (800970c <ReadSolarVoltage+0x94>)
 80096a0:	0018      	movs	r0, r3
 80096a2:	f00b f92f 	bl	8014904 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80096a6:	4b19      	ldr	r3, [pc, #100]	@ (800970c <ReadSolarVoltage+0x94>)
 80096a8:	2101      	movs	r1, #1
 80096aa:	0018      	movs	r0, r3
 80096ac:	f00b f97e 	bl	80149ac <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80096b0:	4b16      	ldr	r3, [pc, #88]	@ (800970c <ReadSolarVoltage+0x94>)
 80096b2:	0018      	movs	r0, r3
 80096b4:	f00b fa16 	bl	8014ae4 <HAL_ADC_GetValue>
 80096b8:	0002      	movs	r2, r0
 80096ba:	4b15      	ldr	r3, [pc, #84]	@ (8009710 <ReadSolarVoltage+0x98>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	435a      	muls	r2, r3
 80096c0:	0013      	movs	r3, r2
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	189b      	adds	r3, r3, r2
 80096c6:	4913      	ldr	r1, [pc, #76]	@ (8009714 <ReadSolarVoltage+0x9c>)
 80096c8:	0018      	movs	r0, r3
 80096ca:	f7f6 fd6b 	bl	80001a4 <__udivsi3>
 80096ce:	0003      	movs	r3, r0
 80096d0:	001a      	movs	r2, r3
 80096d2:	4b11      	ldr	r3, [pc, #68]	@ (8009718 <ReadSolarVoltage+0xa0>)
 80096d4:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80096d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <ReadSolarVoltage+0x8c>)
 80096d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009708 <ReadSolarVoltage+0x90>)
 80096da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80096dc:	4b09      	ldr	r3, [pc, #36]	@ (8009704 <ReadSolarVoltage+0x8c>)
 80096de:	4a0f      	ldr	r2, [pc, #60]	@ (800971c <ReadSolarVoltage+0xa4>)
 80096e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80096e2:	4a08      	ldr	r2, [pc, #32]	@ (8009704 <ReadSolarVoltage+0x8c>)
 80096e4:	4b09      	ldr	r3, [pc, #36]	@ (800970c <ReadSolarVoltage+0x94>)
 80096e6:	0011      	movs	r1, r2
 80096e8:	0018      	movs	r0, r3
 80096ea:	f00b fa07 	bl	8014afc <HAL_ADC_ConfigChannel>
 80096ee:	1e03      	subs	r3, r0, #0
 80096f0:	d001      	beq.n	80096f6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 80096f2:	f003 fcc5 	bl	800d080 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 80096f6:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <ReadSolarVoltage+0xa0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 }
 80096fc:	0018      	movs	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	20000c6c 	.word	0x20000c6c
 8009708:	3c008000 	.word	0x3c008000
 800970c:	20000cc0 	.word	0x20000cc0
 8009710:	2000003c 	.word	0x2000003c
 8009714:	00000fff 	.word	0x00000fff
 8009718:	20000c90 	.word	0x20000c90
 800971c:	00001001 	.word	0x00001001

08009720 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009724:	23a0      	movs	r3, #160	@ 0xa0
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	2180      	movs	r1, #128	@ 0x80
 800972a:	0018      	movs	r0, r3
 800972c:	f00c f982 	bl	8015a34 <HAL_GPIO_ReadPin>
 8009730:	1e03      	subs	r3, r0, #0
 8009732:	d008      	beq.n	8009746 <Check_USB_PowerOn+0x26>
     if (sendpwremail == DONE) {
 8009734:	4b06      	ldr	r3, [pc, #24]	@ (8009750 <Check_USB_PowerOn+0x30>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d102      	bne.n	8009742 <Check_USB_PowerOn+0x22>
       sendpwremail = CLEAR;
 800973c:	4b04      	ldr	r3, [pc, #16]	@ (8009750 <Check_USB_PowerOn+0x30>)
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <Check_USB_PowerOn+0x28>
   }
   return false;
 8009746:	2300      	movs	r3, #0
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	46c0      	nop			@ (mov r8, r8)
 8009750:	20000f57 	.word	0x20000f57

08009754 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 800975a:	1dfb      	adds	r3, r7, #7
 800975c:	2201      	movs	r2, #1
 800975e:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009760:	1dbb      	adds	r3, r7, #6
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009766:	4b27      	ldr	r3, [pc, #156]	@ (8009804 <Read_Charge_Status+0xb0>)
 8009768:	2280      	movs	r2, #128	@ 0x80
 800976a:	0092      	lsls	r2, r2, #2
 800976c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800976e:	4b25      	ldr	r3, [pc, #148]	@ (8009804 <Read_Charge_Status+0xb0>)
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009774:	4b23      	ldr	r3, [pc, #140]	@ (8009804 <Read_Charge_Status+0xb0>)
 8009776:	2201      	movs	r2, #1
 8009778:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800977a:	4b22      	ldr	r3, [pc, #136]	@ (8009804 <Read_Charge_Status+0xb0>)
 800977c:	4a22      	ldr	r2, [pc, #136]	@ (8009808 <Read_Charge_Status+0xb4>)
 800977e:	0019      	movs	r1, r3
 8009780:	0010      	movs	r0, r2
 8009782:	f00b ffd9 	bl	8015738 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009786:	2380      	movs	r3, #128	@ 0x80
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4a1f      	ldr	r2, [pc, #124]	@ (8009808 <Read_Charge_Status+0xb4>)
 800978c:	0019      	movs	r1, r3
 800978e:	0010      	movs	r0, r2
 8009790:	f00c f950 	bl	8015a34 <HAL_GPIO_ReadPin>
 8009794:	0003      	movs	r3, r0
 8009796:	001a      	movs	r2, r3
 8009798:	1dfb      	adds	r3, r7, #7
 800979a:	1e51      	subs	r1, r2, #1
 800979c:	418a      	sbcs	r2, r1
 800979e:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80097a0:	4b18      	ldr	r3, [pc, #96]	@ (8009804 <Read_Charge_Status+0xb0>)
 80097a2:	2280      	movs	r2, #128	@ 0x80
 80097a4:	0092      	lsls	r2, r2, #2
 80097a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097a8:	4b16      	ldr	r3, [pc, #88]	@ (8009804 <Read_Charge_Status+0xb0>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80097ae:	4b15      	ldr	r3, [pc, #84]	@ (8009804 <Read_Charge_Status+0xb0>)
 80097b0:	2202      	movs	r2, #2
 80097b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80097b4:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <Read_Charge_Status+0xb0>)
 80097b6:	4a14      	ldr	r2, [pc, #80]	@ (8009808 <Read_Charge_Status+0xb4>)
 80097b8:	0019      	movs	r1, r3
 80097ba:	0010      	movs	r0, r2
 80097bc:	f00b ffbc 	bl	8015738 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 80097c0:	2380      	movs	r3, #128	@ 0x80
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a10      	ldr	r2, [pc, #64]	@ (8009808 <Read_Charge_Status+0xb4>)
 80097c6:	0019      	movs	r1, r3
 80097c8:	0010      	movs	r0, r2
 80097ca:	f00c f933 	bl	8015a34 <HAL_GPIO_ReadPin>
 80097ce:	0003      	movs	r3, r0
 80097d0:	001a      	movs	r2, r3
 80097d2:	1dbb      	adds	r3, r7, #6
 80097d4:	1e51      	subs	r1, r2, #1
 80097d6:	418a      	sbcs	r2, r1
 80097d8:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 80097da:	1dfb      	adds	r3, r7, #7
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2201      	movs	r2, #1
 80097e0:	4053      	eors	r3, r2
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <Read_Charge_Status+0x98>
    return CHARGING_ON;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e006      	b.n	80097fa <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 80097ec:	1dbb      	adds	r3, r7, #6
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 80097f4:	2302      	movs	r3, #2
 80097f6:	e000      	b.n	80097fa <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b002      	add	sp, #8
 8009800:	bd80      	pop	{r7, pc}
 8009802:	46c0      	nop			@ (mov r8, r8)
 8009804:	20000c74 	.word	0x20000c74
 8009808:	50000800 	.word	0x50000800

0800980c <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009810:	2380      	movs	r3, #128	@ 0x80
 8009812:	021a      	lsls	r2, r3, #8
 8009814:	23a0      	movs	r3, #160	@ 0xa0
 8009816:	05db      	lsls	r3, r3, #23
 8009818:	0011      	movs	r1, r2
 800981a:	0018      	movs	r0, r3
 800981c:	f00c f90a 	bl	8015a34 <HAL_GPIO_ReadPin>
 8009820:	0003      	movs	r3, r0
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	4193      	sbcs	r3, r2
 8009826:	b2db      	uxtb	r3, r3
}
 8009828:	0018      	movs	r0, r3
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009834:	4b05      	ldr	r3, [pc, #20]	@ (800984c <UserButton_Pressed+0x1c>)
 8009836:	2104      	movs	r1, #4
 8009838:	0018      	movs	r0, r3
 800983a:	f00c f8fb 	bl	8015a34 <HAL_GPIO_ReadPin>
 800983e:	0003      	movs	r3, r0
 8009840:	425a      	negs	r2, r3
 8009842:	4153      	adcs	r3, r2
 8009844:	b2db      	uxtb	r3, r3
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	50000c00 	.word	0x50000c00

08009850 <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 8009850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009852:	46d6      	mov	lr, sl
 8009854:	464f      	mov	r7, r9
 8009856:	4646      	mov	r6, r8
 8009858:	b5c0      	push	{r6, r7, lr}
 800985a:	b08e      	sub	sp, #56	@ 0x38
 800985c:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800985e:	4b38      	ldr	r3, [pc, #224]	@ (8009940 <showTime+0xf0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d063      	beq.n	800992e <showTime+0xde>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009866:	003a      	movs	r2, r7
 8009868:	1d3b      	adds	r3, r7, #4
 800986a:	0011      	movs	r1, r2
 800986c:	0018      	movs	r0, r3
 800986e:	f000 faf1 	bl	8009e54 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009872:	1d3b      	adds	r3, r7, #4
 8009874:	781a      	ldrb	r2, [r3, #0]
 8009876:	4b33      	ldr	r3, [pc, #204]	@ (8009944 <showTime+0xf4>)
 8009878:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 800987a:	003b      	movs	r3, r7
 800987c:	781a      	ldrb	r2, [r3, #0]
 800987e:	4b32      	ldr	r3, [pc, #200]	@ (8009948 <showTime+0xf8>)
 8009880:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009882:	f000 f87f 	bl	8009984 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009886:	003b      	movs	r3, r7
 8009888:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800988a:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800988c:	003b      	movs	r3, r7
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009892:	4b2e      	ldr	r3, [pc, #184]	@ (800994c <showTime+0xfc>)
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009898:	003b      	movs	r3, r7
 800989a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800989c:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800989e:	1d3b      	adds	r3, r7, #4
 80098a0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098a2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80098a4:	1d3b      	adds	r3, r7, #4
 80098a6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098a8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80098aa:	1d3b      	adds	r3, r7, #4
 80098ac:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098ae:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80098b0:	4b27      	ldr	r3, [pc, #156]	@ (8009950 <showTime+0x100>)
 80098b2:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098b4:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80098b6:	4b26      	ldr	r3, [pc, #152]	@ (8009950 <showTime+0x100>)
 80098b8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098ba:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80098bc:	4b24      	ldr	r3, [pc, #144]	@ (8009950 <showTime+0x100>)
 80098be:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098c0:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80098c2:	4b23      	ldr	r3, [pc, #140]	@ (8009950 <showTime+0x100>)
 80098c4:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80098c6:	4823      	ldr	r0, [pc, #140]	@ (8009954 <showTime+0x104>)
 80098c8:	9306      	str	r3, [sp, #24]
 80098ca:	4643      	mov	r3, r8
 80098cc:	9305      	str	r3, [sp, #20]
 80098ce:	4663      	mov	r3, ip
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	9603      	str	r6, [sp, #12]
 80098d4:	9502      	str	r5, [sp, #8]
 80098d6:	9401      	str	r4, [sp, #4]
 80098d8:	9100      	str	r1, [sp, #0]
 80098da:	4653      	mov	r3, sl
 80098dc:	4649      	mov	r1, r9
 80098de:	f01c fa0f 	bl	8025d00 <iprintf>
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 80098e2:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <showTime+0xf8>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	d122      	bne.n	8009930 <showTime+0xe0>
 80098ea:	4b16      	ldr	r3, [pc, #88]	@ (8009944 <showTime+0xf4>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d11e      	bne.n	8009930 <showTime+0xe0>
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d81a      	bhi.n	8009930 <showTime+0xe0>
 80098fa:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <showTime+0x108>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2201      	movs	r2, #1
 8009900:	4053      	eors	r3, r2
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d013      	beq.n	8009930 <showTime+0xe0>
 8009908:	003b      	movs	r3, r7
 800990a:	789b      	ldrb	r3, [r3, #2]
 800990c:	2b18      	cmp	r3, #24
 800990e:	d90f      	bls.n	8009930 <showTime+0xe0>
 8009910:	003b      	movs	r3, r7
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d003      	beq.n	8009920 <showTime+0xd0>
 8009918:	003b      	movs	r3, r7
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b0a      	cmp	r3, #10
 800991e:	d107      	bne.n	8009930 <showTime+0xe0>
    dstchkd = true;
 8009920:	4b0d      	ldr	r3, [pc, #52]	@ (8009958 <showTime+0x108>)
 8009922:	2201      	movs	r2, #1
 8009924:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009926:	2000      	movs	r0, #0
 8009928:	f7fa fff8 	bl	800491c <setESPTimeStamp>
 800992c:	e000      	b.n	8009930 <showTime+0xe0>
    return;
 800992e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009930:	46bd      	mov	sp, r7
 8009932:	b006      	add	sp, #24
 8009934:	bce0      	pop	{r5, r6, r7}
 8009936:	46ba      	mov	sl, r7
 8009938:	46b1      	mov	r9, r6
 800993a:	46a8      	mov	r8, r5
 800993c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993e:	46c0      	nop			@ (mov r8, r8)
 8009940:	20000ca4 	.word	0x20000ca4
 8009944:	20000c95 	.word	0x20000c95
 8009948:	20000c96 	.word	0x20000c96
 800994c:	2000005c 	.word	0x2000005c
 8009950:	20000c98 	.word	0x20000c98
 8009954:	0802baf8 	.word	0x0802baf8
 8009958:	20000c94 	.word	0x20000c94

0800995c <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009962:	003a      	movs	r2, r7
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	0011      	movs	r1, r2
 8009968:	0018      	movs	r0, r3
 800996a:	f000 fa73 	bl	8009e54 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800996e:	1d3a      	adds	r2, r7, #4
 8009970:	003b      	movs	r3, r7
 8009972:	0011      	movs	r1, r2
 8009974:	0018      	movs	r0, r3
 8009976:	f000 fc97 	bl	800a2a8 <makeTime>
 800997a:	0003      	movs	r3, r0
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b006      	add	sp, #24
 8009982:	bd80      	pop	{r7, pc}

08009984 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800998a:	003a      	movs	r2, r7
 800998c:	1d3b      	adds	r3, r7, #4
 800998e:	0011      	movs	r1, r2
 8009990:	0018      	movs	r0, r3
 8009992:	f000 fa5f 	bl	8009e54 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009996:	1d3a      	adds	r2, r7, #4
 8009998:	003b      	movs	r3, r7
 800999a:	0011      	movs	r1, r2
 800999c:	0018      	movs	r0, r3
 800999e:	f000 fc83 	bl	800a2a8 <makeTime>
 80099a2:	0002      	movs	r2, r0
 80099a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a20 <UpdateSystemUptime+0x9c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	213c      	movs	r1, #60	@ 0x3c
 80099b4:	0018      	movs	r0, r3
 80099b6:	f7f6 fc7b 	bl	80002b0 <__aeabi_uidivmod>
 80099ba:	000b      	movs	r3, r1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	4b19      	ldr	r3, [pc, #100]	@ (8009a24 <UpdateSystemUptime+0xa0>)
 80099c0:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	213c      	movs	r1, #60	@ 0x3c
 80099c6:	0018      	movs	r0, r3
 80099c8:	f7f6 fbec 	bl	80001a4 <__udivsi3>
 80099cc:	0003      	movs	r3, r0
 80099ce:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	213c      	movs	r1, #60	@ 0x3c
 80099d4:	0018      	movs	r0, r3
 80099d6:	f7f6 fc6b 	bl	80002b0 <__aeabi_uidivmod>
 80099da:	000b      	movs	r3, r1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	4b11      	ldr	r3, [pc, #68]	@ (8009a24 <UpdateSystemUptime+0xa0>)
 80099e0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	213c      	movs	r1, #60	@ 0x3c
 80099e6:	0018      	movs	r0, r3
 80099e8:	f7f6 fbdc 	bl	80001a4 <__udivsi3>
 80099ec:	0003      	movs	r3, r0
 80099ee:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	2118      	movs	r1, #24
 80099f4:	0018      	movs	r0, r3
 80099f6:	f7f6 fc5b 	bl	80002b0 <__aeabi_uidivmod>
 80099fa:	000b      	movs	r3, r1
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <UpdateSystemUptime+0xa0>)
 8009a00:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2118      	movs	r1, #24
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7f6 fbcc 	bl	80001a4 <__udivsi3>
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	4b03      	ldr	r3, [pc, #12]	@ (8009a24 <UpdateSystemUptime+0xa0>)
 8009a16:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009a18:	46c0      	nop			@ (mov r8, r8)
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	b008      	add	sp, #32
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000ca4 	.word	0x20000ca4
 8009a24:	20000c98 	.word	0x20000c98

08009a28 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	0008      	movs	r0, r1
 8009a32:	0011      	movs	r1, r2
 8009a34:	1cfb      	adds	r3, r7, #3
 8009a36:	1c02      	adds	r2, r0, #0
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	1cbb      	adds	r3, r7, #2
 8009a3c:	1c0a      	adds	r2, r1, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8009a40:	230e      	movs	r3, #14
 8009a42:	18fb      	adds	r3, r7, r3
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009a48:	230f      	movs	r3, #15
 8009a4a:	18fb      	adds	r3, r7, r3
 8009a4c:	1cfa      	adds	r2, r7, #3
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	e015      	b.n	8009a80 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009a54:	200f      	movs	r0, #15
 8009a56:	183b      	adds	r3, r7, r0
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	18d2      	adds	r2, r2, r3
 8009a5e:	240e      	movs	r4, #14
 8009a60:	193b      	adds	r3, r7, r4
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	7811      	ldrb	r1, [r2, #0]
 8009a66:	2208      	movs	r2, #8
 8009a68:	18ba      	adds	r2, r7, r2
 8009a6a:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009a6c:	193b      	adds	r3, r7, r4
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	193b      	adds	r3, r7, r4
 8009a72:	3201      	adds	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009a76:	183b      	adds	r3, r7, r0
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	183b      	adds	r3, r7, r0
 8009a7c:	3201      	adds	r2, #1
 8009a7e:	701a      	strb	r2, [r3, #0]
 8009a80:	200f      	movs	r0, #15
 8009a82:	183a      	adds	r2, r7, r0
 8009a84:	1cbb      	adds	r3, r7, #2
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d9e2      	bls.n	8009a54 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8009a8e:	230e      	movs	r3, #14
 8009a90:	18fb      	adds	r3, r7, r3
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2208      	movs	r2, #8
 8009a96:	18ba      	adds	r2, r7, r2
 8009a98:	2100      	movs	r1, #0
 8009a9a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009a9c:	1cfb      	adds	r3, r7, #3
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b13      	cmp	r3, #19
 8009aa2:	d849      	bhi.n	8009b38 <aBuff2int+0x110>
    if (start == 17) { //month
 8009aa4:	1cfb      	adds	r3, r7, #3
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b11      	cmp	r3, #17
 8009aaa:	d122      	bne.n	8009af2 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009aac:	183b      	adds	r3, r7, r0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	e018      	b.n	8009ae6 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009ab4:	240f      	movs	r4, #15
 8009ab6:	193b      	adds	r3, r7, r4
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	4b25      	ldr	r3, [pc, #148]	@ (8009b50 <aBuff2int+0x128>)
 8009abc:	0092      	lsls	r2, r2, #2
 8009abe:	58d2      	ldr	r2, [r2, r3]
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	0011      	movs	r1, r2
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7f6 fb46 	bl	8000158 <strcmp>
 8009acc:	1e03      	subs	r3, r0, #0
 8009ace:	d104      	bne.n	8009ada <aBuff2int+0xb2>
          return i+1;
 8009ad0:	193b      	adds	r3, r7, r4
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	e035      	b.n	8009b46 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8009ada:	210f      	movs	r1, #15
 8009adc:	187b      	adds	r3, r7, r1
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	187b      	adds	r3, r7, r1
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	230f      	movs	r3, #15
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b0b      	cmp	r3, #11
 8009aee:	d9e1      	bls.n	8009ab4 <aBuff2int+0x8c>
 8009af0:	e022      	b.n	8009b38 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009af2:	230f      	movs	r3, #15
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	e018      	b.n	8009b2e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8009afc:	240f      	movs	r4, #15
 8009afe:	193b      	adds	r3, r7, r4
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	4b14      	ldr	r3, [pc, #80]	@ (8009b54 <aBuff2int+0x12c>)
 8009b04:	0092      	lsls	r2, r2, #2
 8009b06:	58d2      	ldr	r2, [r2, r3]
 8009b08:	2308      	movs	r3, #8
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	0011      	movs	r1, r2
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f7f6 fb22 	bl	8000158 <strcmp>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d104      	bne.n	8009b22 <aBuff2int+0xfa>
          return i+1;
 8009b18:	193b      	adds	r3, r7, r4
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	e011      	b.n	8009b46 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009b22:	210f      	movs	r1, #15
 8009b24:	187b      	adds	r3, r7, r1
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	187b      	adds	r3, r7, r1
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	230f      	movs	r3, #15
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b06      	cmp	r3, #6
 8009b36:	d9e1      	bls.n	8009afc <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8009b38:	2308      	movs	r3, #8
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f01a fcfa 	bl	8024536 <atoi>
 8009b42:	0003      	movs	r3, r0
 8009b44:	b2db      	uxtb	r3, r3
}
 8009b46:	0018      	movs	r0, r3
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b005      	add	sp, #20
 8009b4c:	bd90      	pop	{r4, r7, pc}
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	2000005c 	.word	0x2000005c
 8009b54:	20000040 	.word	0x20000040

08009b58 <ParseTime>:

void ParseTime(char* buffer) {
 8009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5a:	b08d      	sub	sp, #52	@ 0x34
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009b60:	2408      	movs	r4, #8
 8009b62:	193a      	adds	r2, r7, r4
 8009b64:	260c      	movs	r6, #12
 8009b66:	19bb      	adds	r3, r7, r6
 8009b68:	0011      	movs	r1, r2
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f000 f972 	bl	8009e54 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2219      	movs	r2, #25
 8009b74:	2118      	movs	r1, #24
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7ff ff56 	bl	8009a28 <aBuff2int>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	001a      	movs	r2, r3
 8009b80:	19bb      	adds	r3, r7, r6
 8009b82:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	221c      	movs	r2, #28
 8009b88:	211b      	movs	r1, #27
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	f7ff ff4c 	bl	8009a28 <aBuff2int>
 8009b90:	0003      	movs	r3, r0
 8009b92:	001a      	movs	r2, r3
 8009b94:	19bb      	adds	r3, r7, r6
 8009b96:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	221f      	movs	r2, #31
 8009b9c:	211e      	movs	r1, #30
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7ff ff42 	bl	8009a28 <aBuff2int>
 8009ba4:	0003      	movs	r3, r0
 8009ba6:	001a      	movs	r2, r3
 8009ba8:	19bb      	adds	r3, r7, r6
 8009baa:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2224      	movs	r2, #36	@ 0x24
 8009bb0:	2123      	movs	r1, #35	@ 0x23
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7ff ff38 	bl	8009a28 <aBuff2int>
 8009bb8:	0003      	movs	r3, r0
 8009bba:	001a      	movs	r2, r3
 8009bbc:	0025      	movs	r5, r4
 8009bbe:	197b      	adds	r3, r7, r5
 8009bc0:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2213      	movs	r2, #19
 8009bc6:	2111      	movs	r1, #17
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f7ff ff2d 	bl	8009a28 <aBuff2int>
 8009bce:	0003      	movs	r3, r0
 8009bd0:	001a      	movs	r2, r3
 8009bd2:	197b      	adds	r3, r7, r5
 8009bd4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2216      	movs	r2, #22
 8009bda:	2115      	movs	r1, #21
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f7ff ff23 	bl	8009a28 <aBuff2int>
 8009be2:	0003      	movs	r3, r0
 8009be4:	001a      	movs	r2, r3
 8009be6:	197b      	adds	r3, r7, r5
 8009be8:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	220f      	movs	r2, #15
 8009bee:	210d      	movs	r1, #13
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f7ff ff19 	bl	8009a28 <aBuff2int>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	001a      	movs	r2, r3
 8009bfa:	197b      	adds	r3, r7, r5
 8009bfc:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009bfe:	19bb      	adds	r3, r7, r6
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	001c      	movs	r4, r3
 8009c04:	19bb      	adds	r3, r7, r6
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	0018      	movs	r0, r3
 8009c0a:	19bb      	adds	r3, r7, r6
 8009c0c:	789b      	ldrb	r3, [r3, #2]
 8009c0e:	4a56      	ldr	r2, [pc, #344]	@ (8009d68 <ParseTime+0x210>)
 8009c10:	4956      	ldr	r1, [pc, #344]	@ (8009d6c <ParseTime+0x214>)
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	9000      	str	r0, [sp, #0]
 8009c16:	0023      	movs	r3, r4
 8009c18:	2003      	movs	r0, #3
 8009c1a:	f009 ff57 	bl	8013acc <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8009c1e:	197b      	adds	r3, r7, r5
 8009c20:	789b      	ldrb	r3, [r3, #2]
 8009c22:	001c      	movs	r4, r3
 8009c24:	197b      	adds	r3, r7, r5
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	0018      	movs	r0, r3
 8009c2a:	197b      	adds	r3, r7, r5
 8009c2c:	78db      	ldrb	r3, [r3, #3]
 8009c2e:	4a50      	ldr	r2, [pc, #320]	@ (8009d70 <ParseTime+0x218>)
 8009c30:	494e      	ldr	r1, [pc, #312]	@ (8009d6c <ParseTime+0x214>)
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	9000      	str	r0, [sp, #0]
 8009c36:	0023      	movs	r3, r4
 8009c38:	2003      	movs	r0, #3
 8009c3a:	f009 ff47 	bl	8013acc <CreateLine>
  RTC_SetTime(&currentTime);
 8009c3e:	19bb      	adds	r3, r7, r6
 8009c40:	0018      	movs	r0, r3
 8009c42:	f000 f8a3 	bl	8009d8c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8009c46:	197b      	adds	r3, r7, r5
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f000 f8c5 	bl	8009dd8 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 8009c4e:	2327      	movs	r3, #39	@ 0x27
 8009c50:	18fb      	adds	r3, r7, r3
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 8009c56:	197b      	adds	r3, r7, r5
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	dd04      	ble.n	8009c6c <ParseTime+0x114>
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	2b0a      	cmp	r3, #10
 8009c66:	dc01      	bgt.n	8009c6c <ParseTime+0x114>
 8009c68:	2201      	movs	r2, #1
 8009c6a:	e000      	b.n	8009c6e <ParseTime+0x116>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2027      	movs	r0, #39	@ 0x27
 8009c70:	183b      	adds	r3, r7, r0
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	2101      	movs	r1, #1
 8009c78:	400a      	ands	r2, r1
 8009c7a:	701a      	strb	r2, [r3, #0]
  if (dst)
 8009c7c:	0002      	movs	r2, r0
 8009c7e:	18bb      	adds	r3, r7, r2
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d01f      	beq.n	8009cc6 <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d10c      	bne.n	8009ca6 <ParseTime+0x14e>
 8009c8c:	2108      	movs	r1, #8
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b07      	cmp	r3, #7
 8009c94:	d107      	bne.n	8009ca6 <ParseTime+0x14e>
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	789b      	ldrb	r3, [r3, #2]
 8009c9a:	2b18      	cmp	r3, #24
 8009c9c:	d803      	bhi.n	8009ca6 <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 8009c9e:	18bb      	adds	r3, r7, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e00f      	b.n	8009cc6 <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	2b0a      	cmp	r3, #10
 8009caa:	d10c      	bne.n	8009cc6 <ParseTime+0x16e>
 8009cac:	2208      	movs	r2, #8
 8009cae:	18bb      	adds	r3, r7, r2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b07      	cmp	r3, #7
 8009cb4:	d107      	bne.n	8009cc6 <ParseTime+0x16e>
 8009cb6:	18bb      	adds	r3, r7, r2
 8009cb8:	789b      	ldrb	r3, [r3, #2]
 8009cba:	2b18      	cmp	r3, #24
 8009cbc:	d803      	bhi.n	8009cc6 <ParseTime+0x16e>
    {
        dst = false;
 8009cbe:	2327      	movs	r3, #39	@ 0x27
 8009cc0:	18fb      	adds	r3, r7, r3
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 8009cc6:	2327      	movs	r3, #39	@ 0x27
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <ParseTime+0x1d4>
    Info("Daylight Saving Time active");
 8009cd0:	4a28      	ldr	r2, [pc, #160]	@ (8009d74 <ParseTime+0x21c>)
 8009cd2:	4b29      	ldr	r3, [pc, #164]	@ (8009d78 <ParseTime+0x220>)
 8009cd4:	0019      	movs	r1, r3
 8009cd6:	2002      	movs	r0, #2
 8009cd8:	f009 fef8 	bl	8013acc <CreateLine>
    HAL_Delay(1000);
 8009cdc:	23fa      	movs	r3, #250	@ 0xfa
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f00a fc3d 	bl	8014560 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 8009ce6:	4b25      	ldr	r3, [pc, #148]	@ (8009d7c <ParseTime+0x224>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	0018      	movs	r0, r3
 8009cec:	f012 fa6e 	bl	801c1cc <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 8009cf0:	23fa      	movs	r3, #250	@ 0xfa
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f00a fc33 	bl	8014560 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	18fa      	adds	r2, r7, r3
 8009cfe:	240c      	movs	r4, #12
 8009d00:	193b      	adds	r3, r7, r4
 8009d02:	0011      	movs	r1, r2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f000 f8a5 	bl	8009e54 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009d0a:	0022      	movs	r2, r4
 8009d0c:	18bb      	adds	r3, r7, r2
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	001c      	movs	r4, r3
 8009d12:	18bb      	adds	r3, r7, r2
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	0018      	movs	r0, r3
 8009d18:	18bb      	adds	r3, r7, r2
 8009d1a:	789b      	ldrb	r3, [r3, #2]
 8009d1c:	4a18      	ldr	r2, [pc, #96]	@ (8009d80 <ParseTime+0x228>)
 8009d1e:	4913      	ldr	r1, [pc, #76]	@ (8009d6c <ParseTime+0x214>)
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	9000      	str	r0, [sp, #0]
 8009d24:	0023      	movs	r3, r4
 8009d26:	2003      	movs	r0, #3
 8009d28:	f009 fed0 	bl	8013acc <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d104      	bne.n	8009d40 <ParseTime+0x1e8>
    reset_fanCleaningDone(); // reset the cleaning flag done
 8009d36:	f004 fb7b 	bl	800e430 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 8009d3a:	4b12      	ldr	r3, [pc, #72]	@ (8009d84 <ParseTime+0x22c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 8009d40:	4b11      	ldr	r3, [pc, #68]	@ (8009d88 <ParseTime+0x230>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <ParseTime+0x206>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8009d48:	230c      	movs	r3, #12
 8009d4a:	18fa      	adds	r2, r7, r3
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	0011      	movs	r1, r2
 8009d52:	0018      	movs	r0, r3
 8009d54:	f000 faa8 	bl	800a2a8 <makeTime>
 8009d58:	0002      	movs	r2, r0
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d88 <ParseTime+0x230>)
 8009d5c:	601a      	str	r2, [r3, #0]
  }
}
 8009d5e:	46c0      	nop			@ (mov r8, r8)
 8009d60:	46bd      	mov	sp, r7
 8009d62:	b00b      	add	sp, #44	@ 0x2c
 8009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d66:	46c0      	nop			@ (mov r8, r8)
 8009d68:	0802bb50 	.word	0x0802bb50
 8009d6c:	0802bb88 	.word	0x0802bb88
 8009d70:	0802bb8c 	.word	0x0802bb8c
 8009d74:	0802bbc0 	.word	0x0802bbc0
 8009d78:	0802bbdc 	.word	0x0802bbdc
 8009d7c:	20000ca0 	.word	0x20000ca0
 8009d80:	0802bbe0 	.word	0x0802bbe0
 8009d84:	20000c94 	.word	0x20000c94
 8009d88:	20000ca4 	.word	0x20000ca4

08009d8c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009da6:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <RTC_SetTime+0x40>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	0018      	movs	r0, r3
 8009db0:	f011 fff8 	bl	801bda4 <HAL_RTC_SetTime>
 8009db4:	1e03      	subs	r3, r0, #0
 8009db6:	d005      	beq.n	8009dc4 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8009db8:	4a05      	ldr	r2, [pc, #20]	@ (8009dd0 <RTC_SetTime+0x44>)
 8009dba:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <RTC_SetTime+0x48>)
 8009dbc:	0019      	movs	r1, r3
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f009 fe84 	bl	8013acc <CreateLine>
    }
}
 8009dc4:	46c0      	nop			@ (mov r8, r8)
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20000ca0 	.word	0x20000ca0
 8009dd0:	0802bc14 	.word	0x0802bc14
 8009dd4:	0802bc30 	.word	0x0802bc30

08009dd8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009de0:	4b16      	ldr	r3, [pc, #88]	@ (8009e3c <RTC_SetDate+0x64>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	0018      	movs	r0, r3
 8009dea:	f012 f8e3 	bl	801bfb4 <HAL_RTC_SetDate>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d005      	beq.n	8009dfe <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8009df2:	4a13      	ldr	r2, [pc, #76]	@ (8009e40 <RTC_SetDate+0x68>)
 8009df4:	4b13      	ldr	r3, [pc, #76]	@ (8009e44 <RTC_SetDate+0x6c>)
 8009df6:	0019      	movs	r1, r3
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f009 fe67 	bl	8013acc <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8009dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8009e3c <RTC_SetDate+0x64>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2101      	movs	r1, #1
 8009e04:	0018      	movs	r0, r3
 8009e06:	f012 fc39 	bl	801c67c <HAL_RTCEx_BKUPRead>
 8009e0a:	0003      	movs	r3, r0
 8009e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8009e48 <RTC_SetDate+0x70>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d010      	beq.n	8009e34 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8009e12:	4a0e      	ldr	r2, [pc, #56]	@ (8009e4c <RTC_SetDate+0x74>)
 8009e14:	4b0e      	ldr	r3, [pc, #56]	@ (8009e50 <RTC_SetDate+0x78>)
 8009e16:	0019      	movs	r1, r3
 8009e18:	2003      	movs	r0, #3
 8009e1a:	f009 fe57 	bl	8013acc <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8009e1e:	f010 ff41 	bl	801aca4 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8009e22:	4b06      	ldr	r3, [pc, #24]	@ (8009e3c <RTC_SetDate+0x64>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a08      	ldr	r2, [pc, #32]	@ (8009e48 <RTC_SetDate+0x70>)
 8009e28:	2101      	movs	r1, #1
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f012 fc0e 	bl	801c64c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8009e30:	f010 ff46 	bl	801acc0 <HAL_PWR_DisableBkUpAccess>
    }
}
 8009e34:	46c0      	nop			@ (mov r8, r8)
 8009e36:	46bd      	mov	sp, r7
 8009e38:	b002      	add	sp, #8
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000ca0 	.word	0x20000ca0
 8009e40:	0802bc34 	.word	0x0802bc34
 8009e44:	0802bc30 	.word	0x0802bc30
 8009e48:	0000bebe 	.word	0x0000bebe
 8009e4c:	0802bc50 	.word	0x0802bc50
 8009e50:	0802bb88 	.word	0x0802bb88

08009e54 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8009e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8009e5e:	250f      	movs	r5, #15
 8009e60:	197b      	adds	r3, r7, r5
 8009e62:	2201      	movs	r2, #1
 8009e64:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8009e66:	230e      	movs	r3, #14
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8009e6e:	260c      	movs	r6, #12
 8009e70:	19bc      	adds	r4, r7, r6
 8009e72:	f008 fe7f 	bl	8012b74 <powerCheck>
 8009e76:	0003      	movs	r3, r0
 8009e78:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8009e7a:	19bb      	adds	r3, r7, r6
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8009e82:	197b      	adds	r3, r7, r5
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	197b      	adds	r3, r7, r5
 8009e88:	3201      	adds	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8009e8c:	230d      	movs	r3, #13
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e039      	b.n	8009f0a <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009e96:	4b23      	ldr	r3, [pc, #140]	@ (8009f24 <RTC_GetTime+0xd0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f012 f82a 	bl	801bef8 <HAL_RTC_GetTime>
 8009ea4:	1e03      	subs	r3, r0, #0
 8009ea6:	d005      	beq.n	8009eb4 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8009ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8009f28 <RTC_GetTime+0xd4>)
 8009eaa:	4b20      	ldr	r3, [pc, #128]	@ (8009f2c <RTC_GetTime+0xd8>)
 8009eac:	0019      	movs	r1, r3
 8009eae:	2001      	movs	r0, #1
 8009eb0:	f009 fe0c 	bl	8013acc <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8009f24 <RTC_GetTime+0xd0>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f012 f90d 	bl	801c0dc <HAL_RTC_GetDate>
 8009ec2:	1e03      	subs	r3, r0, #0
 8009ec4:	d005      	beq.n	8009ed2 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8009ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f30 <RTC_GetTime+0xdc>)
 8009ec8:	4b18      	ldr	r3, [pc, #96]	@ (8009f2c <RTC_GetTime+0xd8>)
 8009eca:	0019      	movs	r1, r3
 8009ecc:	2001      	movs	r0, #1
 8009ece:	f009 fdfd 	bl	8013acc <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	18fb      	adds	r3, r7, r3
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d110      	bne.n	8009efe <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	210e      	movs	r1, #14
 8009ee2:	187a      	adds	r2, r7, r1
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d018      	beq.n	8009f1c <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8009eea:	187b      	adds	r3, r7, r1
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	701a      	strb	r2, [r3, #0]
        t++;
 8009ef2:	210f      	movs	r1, #15
 8009ef4:	187b      	adds	r3, r7, r1
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	187b      	adds	r3, r7, r1
 8009efa:	3201      	adds	r2, #1
 8009efc:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009efe:	210d      	movs	r1, #13
 8009f00:	187b      	adds	r3, r7, r1
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	187b      	adds	r3, r7, r1
 8009f06:	3201      	adds	r2, #1
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	230d      	movs	r3, #13
 8009f0c:	18fa      	adds	r2, r7, r3
 8009f0e:	230f      	movs	r3, #15
 8009f10:	18fb      	adds	r3, r7, r3
 8009f12:	7812      	ldrb	r2, [r2, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d3bd      	bcc.n	8009e96 <RTC_GetTime+0x42>
 8009f1a:	e000      	b.n	8009f1e <RTC_GetTime+0xca>
      }
      else {
        return;
 8009f1c:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	b005      	add	sp, #20
 8009f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f24:	20000ca0 	.word	0x20000ca0
 8009f28:	0802bc68 	.word	0x0802bc68
 8009f2c:	0802bc30 	.word	0x0802bc30
 8009f30:	0802bc84 	.word	0x0802bc84

08009f34 <getPosixTime>:

uint32_t getPosixTime(void) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009f3a:	003a      	movs	r2, r7
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	0011      	movs	r1, r2
 8009f40:	0018      	movs	r0, r3
 8009f42:	f7ff ff87 	bl	8009e54 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009f46:	1d3a      	adds	r2, r7, #4
 8009f48:	003b      	movs	r3, r7
 8009f4a:	0011      	movs	r1, r2
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f000 f9ab 	bl	800a2a8 <makeTime>
 8009f52:	0003      	movs	r3, r0
}
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b006      	add	sp, #24
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5e:	b08d      	sub	sp, #52	@ 0x34
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8009f66:	240c      	movs	r4, #12
 8009f68:	193a      	adds	r2, r7, r4
 8009f6a:	2508      	movs	r5, #8
 8009f6c:	1979      	adds	r1, r7, r5
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0018      	movs	r0, r3
 8009f72:	f000 fa63 	bl	800a43c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009f76:	002a      	movs	r2, r5
 8009f78:	18bb      	adds	r3, r7, r2
 8009f7a:	789b      	ldrb	r3, [r3, #2]
 8009f7c:	001e      	movs	r6, r3
 8009f7e:	18bb      	adds	r3, r7, r2
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	469c      	mov	ip, r3
 8009f84:	18bb      	adds	r3, r7, r2
 8009f86:	78db      	ldrb	r3, [r3, #3]
 8009f88:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009f8a:	0021      	movs	r1, r4
 8009f8c:	187b      	adds	r3, r7, r1
 8009f8e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009f90:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009f96:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009f98:	187b      	adds	r3, r7, r1
 8009f9a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009f9c:	4906      	ldr	r1, [pc, #24]	@ (8009fb8 <getUTCfromPosixTime+0x5c>)
 8009f9e:	6838      	ldr	r0, [r7, #0]
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	9502      	str	r5, [sp, #8]
 8009fa4:	9401      	str	r4, [sp, #4]
 8009fa6:	9200      	str	r2, [sp, #0]
 8009fa8:	4663      	mov	r3, ip
 8009faa:	0032      	movs	r2, r6
 8009fac:	f01b ff18 	bl	8025de0 <siprintf>
}
 8009fb0:	46c0      	nop			@ (mov r8, r8)
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b009      	add	sp, #36	@ 0x24
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	0802bca0 	.word	0x0802bca0

08009fbc <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009fc4:	4b10      	ldr	r3, [pc, #64]	@ (800a008 <RTC_SetWakeUpTimer+0x4c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f012 faa3 	bl	801c514 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <RTC_SetWakeUpTimer+0x4c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	22ff      	movs	r2, #255	@ 0xff
 8009fd8:	401a      	ands	r2, r3
 8009fda:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <RTC_SetWakeUpTimer+0x4c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	490a      	ldr	r1, [pc, #40]	@ (800a00c <RTC_SetWakeUpTimer+0x50>)
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009fe6:	4b0a      	ldr	r3, [pc, #40]	@ (800a010 <RTC_SetWakeUpTimer+0x54>)
 8009fe8:	2280      	movs	r2, #128	@ 0x80
 8009fea:	0352      	lsls	r2, r2, #13
 8009fec:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009fee:	4b06      	ldr	r3, [pc, #24]	@ (800a008 <RTC_SetWakeUpTimer+0x4c>)
 8009ff0:	6818      	ldr	r0, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	2204      	movs	r2, #4
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	f012 f9b3 	bl	801c364 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009ffe:	46c0      	nop			@ (mov r8, r8)
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	20000ca0 	.word	0x20000ca0
 800a00c:	fffffb7f 	.word	0xfffffb7f
 800a010:	40010400 	.word	0x40010400

0800a014 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800a018:	4a0b      	ldr	r2, [pc, #44]	@ (800a048 <Enter_Standby_Mode+0x34>)
 800a01a:	4b0c      	ldr	r3, [pc, #48]	@ (800a04c <Enter_Standby_Mode+0x38>)
 800a01c:	0019      	movs	r1, r3
 800a01e:	2003      	movs	r0, #3
 800a020:	f009 fd54 	bl	8013acc <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800a024:	2064      	movs	r0, #100	@ 0x64
 800a026:	f00a fa9b 	bl	8014560 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a02a:	4b09      	ldr	r3, [pc, #36]	@ (800a050 <Enter_Standby_Mode+0x3c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	0018      	movs	r0, r3
 800a030:	f012 fa70 	bl	801c514 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 800a034:	f002 fa1c 	bl	800c470 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 800a038:	f00a fab6 	bl	80145a8 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 800a03c:	f010 feac 	bl	801ad98 <HAL_PWR_EnterSTANDBYMode>
}
 800a040:	46c0      	nop			@ (mov r8, r8)
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	0802bcf4 	.word	0x0802bcf4
 800a04c:	0802bb88 	.word	0x0802bb88
 800a050:	20000ca0 	.word	0x20000ca0

0800a054 <Enter_Stop_Mode_for_empty_battery>:


void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af02      	add	r7, sp, #8
 800a05a:	0002      	movs	r2, r0
 800a05c:	1dbb      	adds	r3, r7, #6
 800a05e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a060:	4b25      	ldr	r3, [pc, #148]	@ (800a0f8 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a068:	f004 f9b6 	bl	800e3d8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a06c:	f7ff faa2 	bl	80095b4 <ReadBatteryVoltage>
 800a070:	1c03      	adds	r3, r0, #0
 800a072:	1c18      	adds	r0, r3, #0
 800a074:	f7f9 fc0e 	bl	8003894 <__aeabi_f2d>
 800a078:	0002      	movs	r2, r0
 800a07a:	000b      	movs	r3, r1
 800a07c:	481f      	ldr	r0, [pc, #124]	@ (800a0fc <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a07e:	4920      	ldr	r1, [pc, #128]	@ (800a100 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a080:	9200      	str	r2, [sp, #0]
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	0002      	movs	r2, r0
 800a086:	2002      	movs	r0, #2
 800a088:	f009 fd20 	bl	8013acc <CreateLine>
  powerDisplay(powerCheck());
 800a08c:	f008 fd72 	bl	8012b74 <powerCheck>
 800a090:	0003      	movs	r3, r0
 800a092:	0018      	movs	r0, r3
 800a094:	f008 fd8a 	bl	8012bac <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a098:	1dbb      	adds	r3, r7, #6
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	4a19      	ldr	r2, [pc, #100]	@ (800a104 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a09e:	491a      	ldr	r1, [pc, #104]	@ (800a108 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a0a0:	2003      	movs	r0, #3
 800a0a2:	f009 fd13 	bl	8013acc <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a0a6:	f7ff ff45 	bl	8009f34 <getPosixTime>
 800a0aa:	0002      	movs	r2, r0
 800a0ac:	1dbb      	adds	r3, r7, #6
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	18d3      	adds	r3, r2, r3
 800a0b2:	4a16      	ldr	r2, [pc, #88]	@ (800a10c <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a0b4:	0011      	movs	r1, r2
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f7ff ff50 	bl	8009f5c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a0bc:	4b13      	ldr	r3, [pc, #76]	@ (800a10c <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a0be:	4a14      	ldr	r2, [pc, #80]	@ (800a110 <Enter_Stop_Mode_for_empty_battery+0xbc>)
 800a0c0:	490f      	ldr	r1, [pc, #60]	@ (800a100 <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a0c2:	2002      	movs	r0, #2
 800a0c4:	f009 fd02 	bl	8013acc <CreateLine>
  HAL_Delay(100);
 800a0c8:	2064      	movs	r0, #100	@ 0x64
 800a0ca:	f00a fa49 	bl	8014560 <HAL_Delay>
  HAL_SuspendTick();
 800a0ce:	f00a fa6b 	bl	80145a8 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a0d2:	1dbb      	adds	r3, r7, #6
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f7ff ff70 	bl	8009fbc <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a0dc:	2101      	movs	r1, #1
 800a0de:	2001      	movs	r0, #1
 800a0e0:	f010 fdfe 	bl	801ace0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a0e4:	f002 fe72 	bl	800cdcc <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a0e8:	f00a fa6c 	bl	80145c4 <HAL_ResumeTick>
  showTime();
 800a0ec:	f7ff fbb0 	bl	8009850 <showTime>
}
 800a0f0:	46c0      	nop			@ (mov r8, r8)
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b002      	add	sp, #8
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	20001019 	.word	0x20001019
 800a0fc:	0802bd18 	.word	0x0802bd18
 800a100:	0802bbdc 	.word	0x0802bbdc
 800a104:	0802bd30 	.word	0x0802bd30
 800a108:	0802bb88 	.word	0x0802bb88
 800a10c:	20000ca8 	.word	0x20000ca8
 800a110:	0802bd54 	.word	0x0802bd54

0800a114 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af02      	add	r7, sp, #8
 800a11a:	0002      	movs	r2, r0
 800a11c:	1dbb      	adds	r3, r7, #6
 800a11e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a120:	4b4f      	ldr	r3, [pc, #316]	@ (800a260 <Enter_Stop_Mode+0x14c>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a128:	f004 f956 	bl	800e3d8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a12c:	f7ff fa42 	bl	80095b4 <ReadBatteryVoltage>
 800a130:	1c03      	adds	r3, r0, #0
 800a132:	1c18      	adds	r0, r3, #0
 800a134:	f7f9 fbae 	bl	8003894 <__aeabi_f2d>
 800a138:	0002      	movs	r2, r0
 800a13a:	000b      	movs	r3, r1
 800a13c:	4849      	ldr	r0, [pc, #292]	@ (800a264 <Enter_Stop_Mode+0x150>)
 800a13e:	494a      	ldr	r1, [pc, #296]	@ (800a268 <Enter_Stop_Mode+0x154>)
 800a140:	9200      	str	r2, [sp, #0]
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	0002      	movs	r2, r0
 800a146:	2002      	movs	r0, #2
 800a148:	f009 fcc0 	bl	8013acc <CreateLine>
  powerDisplay(powerCheck());
 800a14c:	f008 fd12 	bl	8012b74 <powerCheck>
 800a150:	0003      	movs	r3, r0
 800a152:	0018      	movs	r0, r3
 800a154:	f008 fd2a 	bl	8012bac <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a158:	1dbb      	adds	r3, r7, #6
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	4a43      	ldr	r2, [pc, #268]	@ (800a26c <Enter_Stop_Mode+0x158>)
 800a15e:	4944      	ldr	r1, [pc, #272]	@ (800a270 <Enter_Stop_Mode+0x15c>)
 800a160:	2003      	movs	r0, #3
 800a162:	f009 fcb3 	bl	8013acc <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a166:	f7ff fee5 	bl	8009f34 <getPosixTime>
 800a16a:	0002      	movs	r2, r0
 800a16c:	1dbb      	adds	r3, r7, #6
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	18d3      	adds	r3, r2, r3
 800a172:	4a40      	ldr	r2, [pc, #256]	@ (800a274 <Enter_Stop_Mode+0x160>)
 800a174:	0011      	movs	r1, r2
 800a176:	0018      	movs	r0, r3
 800a178:	f7ff fef0 	bl	8009f5c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a17c:	4b3d      	ldr	r3, [pc, #244]	@ (800a274 <Enter_Stop_Mode+0x160>)
 800a17e:	4a3e      	ldr	r2, [pc, #248]	@ (800a278 <Enter_Stop_Mode+0x164>)
 800a180:	4939      	ldr	r1, [pc, #228]	@ (800a268 <Enter_Stop_Mode+0x154>)
 800a182:	2002      	movs	r0, #2
 800a184:	f009 fca2 	bl	8013acc <CreateLine>
  HAL_Delay(100);
 800a188:	2064      	movs	r0, #100	@ 0x64
 800a18a:	f00a f9e9 	bl	8014560 <HAL_Delay>
  HAL_SuspendTick();
 800a18e:	f00a fa0b 	bl	80145a8 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a192:	1dbb      	adds	r3, r7, #6
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	0018      	movs	r0, r3
 800a198:	f7ff ff10 	bl	8009fbc <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a19c:	2101      	movs	r1, #1
 800a19e:	2001      	movs	r0, #1
 800a1a0:	f010 fd9e 	bl	801ace0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a1a4:	f002 fe12 	bl	800cdcc <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a1a8:	f00a fa0c 	bl	80145c4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a1ac:	1dbb      	adds	r3, r7, #6
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f004 f885 	bl	800e2c0 <sen5x_enable>
 800a1b6:	1e03      	subs	r3, r0, #0
 800a1b8:	d01e      	beq.n	800a1f8 <Enter_Stop_Mode+0xe4>
    showTime();
 800a1ba:	f7ff fb49 	bl	8009850 <showTime>
    set_light_on_state();
 800a1be:	f004 fdbf 	bl	800ed40 <set_light_on_state>
    if (!userToggle) {
 800a1c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a27c <Enter_Stop_Mode+0x168>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4053      	eors	r3, r2
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d013      	beq.n	800a1f8 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a1d0:	201c      	movs	r0, #28
 800a1d2:	f7ff fef3 	bl	8009fbc <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a1d6:	4a25      	ldr	r2, [pc, #148]	@ (800a26c <Enter_Stop_Mode+0x158>)
 800a1d8:	4925      	ldr	r1, [pc, #148]	@ (800a270 <Enter_Stop_Mode+0x15c>)
 800a1da:	231c      	movs	r3, #28
 800a1dc:	2003      	movs	r0, #3
 800a1de:	f009 fc75 	bl	8013acc <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f010 fd7b 	bl	801ace0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a1ea:	f002 fdef 	bl	800cdcc <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a1ee:	f00a f9e9 	bl	80145c4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f004 f842 	bl	800e27c <setsen5xReadTimer>
    }
  }
  showTime();
 800a1f8:	f7ff fb2a 	bl	8009850 <showTime>
  EnabledConnectedDevices();
 800a1fc:	f003 fbae 	bl	800d95c <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a200:	f003 fcd6 	bl	800dbb0 <ResetDBACalculator>
  ResetBMP280samplecounter();
 800a204:	f000 ffa2 	bl	800b14c <ResetBMP280samplecounter>
  ResetSGP40samplecounter();
 800a208:	f006 fc12 	bl	8010a30 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a20c:	f7f9 fc96 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 800a210:	2000      	movs	r0, #0
 800a212:	f004 f845 	bl	800e2a0 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a216:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <Enter_Stop_Mode+0x16c>)
 800a218:	0018      	movs	r0, r3
 800a21a:	f7fa fb7f 	bl	800491c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a21e:	201e      	movs	r0, #30
 800a220:	f006 fbf4 	bl	8010a0c <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a224:	205a      	movs	r0, #90	@ 0x5a
 800a226:	f009 feaf 	bl	8013f88 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a22a:	203c      	movs	r0, #60	@ 0x3c
 800a22c:	f000 fb98 	bl	800a960 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a230:	205a      	movs	r0, #90	@ 0x5a
 800a232:	f000 ff79 	bl	800b128 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a236:	2000      	movs	r0, #0
 800a238:	f7f9 fc8a 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a23c:	2000      	movs	r0, #0
 800a23e:	f003 fca5 	bl	800db8c <setMICTimeStamp>
  ESPTransmitDone = false;
 800a242:	4b10      	ldr	r3, [pc, #64]	@ (800a284 <Enter_Stop_Mode+0x170>)
 800a244:	2200      	movs	r2, #0
 800a246:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a248:	f00a f980 	bl	801454c <HAL_GetTick>
 800a24c:	0003      	movs	r3, r0
 800a24e:	4a0c      	ldr	r2, [pc, #48]	@ (800a280 <Enter_Stop_Mode+0x16c>)
 800a250:	189a      	adds	r2, r3, r2
 800a252:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <Enter_Stop_Mode+0x174>)
 800a254:	601a      	str	r2, [r3, #0]
}
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	46bd      	mov	sp, r7
 800a25a:	b002      	add	sp, #8
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	46c0      	nop			@ (mov r8, r8)
 800a260:	20001019 	.word	0x20001019
 800a264:	0802bd18 	.word	0x0802bd18
 800a268:	0802bbdc 	.word	0x0802bbdc
 800a26c:	0802bd30 	.word	0x0802bd30
 800a270:	0802bb88 	.word	0x0802bb88
 800a274:	20000ca8 	.word	0x20000ca8
 800a278:	0802bd54 	.word	0x0802bd54
 800a27c:	20001faa 	.word	0x20001faa
 800a280:	00001194 	.word	0x00001194
 800a284:	200005b3 	.word	0x200005b3
 800a288:	20000f6c 	.word	0x20000f6c

0800a28c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a294:	4b03      	ldr	r3, [pc, #12]	@ (800a2a4 <InitClock+0x18>)
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	46c0      	nop			@ (mov r8, r8)
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b002      	add	sp, #8
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	46c0      	nop			@ (mov r8, r8)
 800a2a4:	20000ca0 	.word	0x20000ca0

0800a2a8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	78db      	ldrb	r3, [r3, #3]
 800a2b6:	001a      	movs	r2, r3
 800a2b8:	0013      	movs	r3, r2
 800a2ba:	025b      	lsls	r3, r3, #9
 800a2bc:	189b      	adds	r3, r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	189b      	adds	r3, r3, r2
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	189b      	adds	r3, r3, r2
 800a2c6:	011a      	lsls	r2, r3, #4
 800a2c8:	1ad2      	subs	r2, r2, r3
 800a2ca:	01d3      	lsls	r3, r2, #7
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e028      	b.n	800a328 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4a53      	ldr	r2, [pc, #332]	@ (800a428 <makeTime+0x180>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	db21      	blt.n	800a322 <makeTime+0x7a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4a52      	ldr	r2, [pc, #328]	@ (800a42c <makeTime+0x184>)
 800a2e2:	4694      	mov	ip, r2
 800a2e4:	4463      	add	r3, ip
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	d119      	bne.n	800a322 <makeTime+0x7a>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4a4e      	ldr	r2, [pc, #312]	@ (800a42c <makeTime+0x184>)
 800a2f2:	4694      	mov	ip, r2
 800a2f4:	4463      	add	r3, ip
 800a2f6:	2164      	movs	r1, #100	@ 0x64
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f7f6 f8c3 	bl	8000484 <__aeabi_idivmod>
 800a2fe:	1e0b      	subs	r3, r1, #0
 800a300:	d10a      	bne.n	800a318 <makeTime+0x70>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	4a49      	ldr	r2, [pc, #292]	@ (800a42c <makeTime+0x184>)
 800a306:	4694      	mov	ip, r2
 800a308:	4463      	add	r3, ip
 800a30a:	22c8      	movs	r2, #200	@ 0xc8
 800a30c:	0051      	lsls	r1, r2, #1
 800a30e:	0018      	movs	r0, r3
 800a310:	f7f6 f8b8 	bl	8000484 <__aeabi_idivmod>
 800a314:	1e0b      	subs	r3, r1, #0
 800a316:	d104      	bne.n	800a322 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4a45      	ldr	r2, [pc, #276]	@ (800a430 <makeTime+0x188>)
 800a31c:	4694      	mov	ip, r2
 800a31e:	4463      	add	r3, ip
 800a320:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	78db      	ldrb	r3, [r3, #3]
 800a32c:	001a      	movs	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4293      	cmp	r3, r2
 800a332:	dbd0      	blt.n	800a2d6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a334:	2301      	movs	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e03c      	b.n	800a3b4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d125      	bne.n	800a38c <makeTime+0xe4>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	78db      	ldrb	r3, [r3, #3]
 800a344:	4a39      	ldr	r2, [pc, #228]	@ (800a42c <makeTime+0x184>)
 800a346:	4694      	mov	ip, r2
 800a348:	4463      	add	r3, ip
 800a34a:	001a      	movs	r2, r3
 800a34c:	2303      	movs	r3, #3
 800a34e:	4013      	ands	r3, r2
 800a350:	d11c      	bne.n	800a38c <makeTime+0xe4>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	78db      	ldrb	r3, [r3, #3]
 800a356:	4a35      	ldr	r2, [pc, #212]	@ (800a42c <makeTime+0x184>)
 800a358:	4694      	mov	ip, r2
 800a35a:	4463      	add	r3, ip
 800a35c:	2164      	movs	r1, #100	@ 0x64
 800a35e:	0018      	movs	r0, r3
 800a360:	f7f6 f890 	bl	8000484 <__aeabi_idivmod>
 800a364:	1e0b      	subs	r3, r1, #0
 800a366:	d10b      	bne.n	800a380 <makeTime+0xd8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	78db      	ldrb	r3, [r3, #3]
 800a36c:	4a2f      	ldr	r2, [pc, #188]	@ (800a42c <makeTime+0x184>)
 800a36e:	4694      	mov	ip, r2
 800a370:	4463      	add	r3, ip
 800a372:	22c8      	movs	r2, #200	@ 0xc8
 800a374:	0051      	lsls	r1, r2, #1
 800a376:	0018      	movs	r0, r3
 800a378:	f7f6 f884 	bl	8000484 <__aeabi_idivmod>
 800a37c:	1e0b      	subs	r3, r1, #0
 800a37e:	d105      	bne.n	800a38c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	4a2c      	ldr	r2, [pc, #176]	@ (800a434 <makeTime+0x18c>)
 800a384:	4694      	mov	ip, r2
 800a386:	4463      	add	r3, ip
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	e010      	b.n	800a3ae <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3b01      	subs	r3, #1
 800a390:	4a29      	ldr	r2, [pc, #164]	@ (800a438 <makeTime+0x190>)
 800a392:	5cd3      	ldrb	r3, [r2, r3]
 800a394:	001a      	movs	r2, r3
 800a396:	0013      	movs	r3, r2
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	189b      	adds	r3, r3, r2
 800a39c:	011a      	lsls	r2, r3, #4
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	0113      	lsls	r3, r2, #4
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	01db      	lsls	r3, r3, #7
 800a3a6:	001a      	movs	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	189b      	adds	r3, r3, r2
 800a3ac:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	001a      	movs	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	dbbc      	blt.n	800a33a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	789b      	ldrb	r3, [r3, #2]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	0013      	movs	r3, r2
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	189b      	adds	r3, r3, r2
 800a3ce:	011a      	lsls	r2, r3, #4
 800a3d0:	1ad2      	subs	r2, r2, r3
 800a3d2:	0113      	lsls	r3, r2, #4
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	01db      	lsls	r3, r3, #7
 800a3d8:	001a      	movs	r2, r3
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	189b      	adds	r3, r3, r2
 800a3de:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	001a      	movs	r2, r3
 800a3e6:	0013      	movs	r3, r2
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	011a      	lsls	r2, r3, #4
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	0113      	lsls	r3, r2, #4
 800a3f2:	001a      	movs	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	189b      	adds	r3, r3, r2
 800a3f8:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	001a      	movs	r2, r3
 800a400:	0013      	movs	r3, r2
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	001a      	movs	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	189b      	adds	r3, r3, r2
 800a40e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	789b      	ldrb	r3, [r3, #2]
 800a414:	001a      	movs	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	189b      	adds	r3, r3, r2
 800a41a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a41c:	68bb      	ldr	r3, [r7, #8]
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b004      	add	sp, #16
 800a424:	bd80      	pop	{r7, pc}
 800a426:	46c0      	nop			@ (mov r8, r8)
 800a428:	fffff84f 	.word	0xfffff84f
 800a42c:	000007b2 	.word	0x000007b2
 800a430:	00015180 	.word	0x00015180
 800a434:	00263b80 	.word	0x00263b80
 800a438:	0802df5c 	.word	0x0802df5c

0800a43c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b089      	sub	sp, #36	@ 0x24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	213c      	movs	r1, #60	@ 0x3c
 800a450:	0018      	movs	r0, r3
 800a452:	f7f5 ff2d 	bl	80002b0 <__aeabi_uidivmod>
 800a456:	000b      	movs	r3, r1
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	213c      	movs	r1, #60	@ 0x3c
 800a462:	0018      	movs	r0, r3
 800a464:	f7f5 fe9e 	bl	80001a4 <__udivsi3>
 800a468:	0003      	movs	r3, r0
 800a46a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	213c      	movs	r1, #60	@ 0x3c
 800a470:	0018      	movs	r0, r3
 800a472:	f7f5 ff1d 	bl	80002b0 <__aeabi_uidivmod>
 800a476:	000b      	movs	r3, r1
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	213c      	movs	r1, #60	@ 0x3c
 800a482:	0018      	movs	r0, r3
 800a484:	f7f5 fe8e 	bl	80001a4 <__udivsi3>
 800a488:	0003      	movs	r3, r0
 800a48a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2118      	movs	r1, #24
 800a490:	0018      	movs	r0, r3
 800a492:	f7f5 ff0d 	bl	80002b0 <__aeabi_uidivmod>
 800a496:	000b      	movs	r3, r1
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	2118      	movs	r1, #24
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f7f5 fe7e 	bl	80001a4 <__udivsi3>
 800a4a8:	0003      	movs	r3, r0
 800a4aa:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	2107      	movs	r1, #7
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f7f5 fefc 	bl	80002b0 <__aeabi_uidivmod>
 800a4b8:	000b      	movs	r3, r1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	3301      	adds	r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	701a      	strb	r2, [r3, #0]
  year = 0;
 800a4c4:	231f      	movs	r3, #31
 800a4c6:	18fb      	adds	r3, r7, r3
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	701a      	strb	r2, [r3, #0]
  days = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a4d0:	e005      	b.n	800a4de <breakPosixTime+0xa2>
    year++;
 800a4d2:	211f      	movs	r1, #31
 800a4d4:	187b      	adds	r3, r7, r1
 800a4d6:	781a      	ldrb	r2, [r3, #0]
 800a4d8:	187b      	adds	r3, r7, r1
 800a4da:	3201      	adds	r2, #1
 800a4dc:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a4de:	241f      	movs	r4, #31
 800a4e0:	193b      	adds	r3, r7, r4
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	4a64      	ldr	r2, [pc, #400]	@ (800a678 <breakPosixTime+0x23c>)
 800a4e6:	4694      	mov	ip, r2
 800a4e8:	4463      	add	r3, ip
 800a4ea:	001a      	movs	r2, r3
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	d119      	bne.n	800a526 <breakPosixTime+0xea>
 800a4f2:	193b      	adds	r3, r7, r4
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	4a60      	ldr	r2, [pc, #384]	@ (800a678 <breakPosixTime+0x23c>)
 800a4f8:	4694      	mov	ip, r2
 800a4fa:	4463      	add	r3, ip
 800a4fc:	2164      	movs	r1, #100	@ 0x64
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7f5 ffc0 	bl	8000484 <__aeabi_idivmod>
 800a504:	1e0b      	subs	r3, r1, #0
 800a506:	d10b      	bne.n	800a520 <breakPosixTime+0xe4>
 800a508:	193b      	adds	r3, r7, r4
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	4a5a      	ldr	r2, [pc, #360]	@ (800a678 <breakPosixTime+0x23c>)
 800a50e:	4694      	mov	ip, r2
 800a510:	4463      	add	r3, ip
 800a512:	22c8      	movs	r2, #200	@ 0xc8
 800a514:	0051      	lsls	r1, r2, #1
 800a516:	0018      	movs	r0, r3
 800a518:	f7f5 ffb4 	bl	8000484 <__aeabi_idivmod>
 800a51c:	1e0b      	subs	r3, r1, #0
 800a51e:	d102      	bne.n	800a526 <breakPosixTime+0xea>
 800a520:	23b7      	movs	r3, #183	@ 0xb7
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	e001      	b.n	800a52a <breakPosixTime+0xee>
 800a526:	236e      	movs	r3, #110	@ 0x6e
 800a528:	33ff      	adds	r3, #255	@ 0xff
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	18d3      	adds	r3, r2, r3
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	429a      	cmp	r2, r3
 800a536:	d9cc      	bls.n	800a4d2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	241f      	movs	r4, #31
 800a53c:	193a      	adds	r2, r7, r4
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800a542:	193b      	adds	r3, r7, r4
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4a4c      	ldr	r2, [pc, #304]	@ (800a678 <breakPosixTime+0x23c>)
 800a548:	4694      	mov	ip, r2
 800a54a:	4463      	add	r3, ip
 800a54c:	001a      	movs	r2, r3
 800a54e:	2303      	movs	r3, #3
 800a550:	4013      	ands	r3, r2
 800a552:	d119      	bne.n	800a588 <breakPosixTime+0x14c>
 800a554:	193b      	adds	r3, r7, r4
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	4a47      	ldr	r2, [pc, #284]	@ (800a678 <breakPosixTime+0x23c>)
 800a55a:	4694      	mov	ip, r2
 800a55c:	4463      	add	r3, ip
 800a55e:	2164      	movs	r1, #100	@ 0x64
 800a560:	0018      	movs	r0, r3
 800a562:	f7f5 ff8f 	bl	8000484 <__aeabi_idivmod>
 800a566:	1e0b      	subs	r3, r1, #0
 800a568:	d10b      	bne.n	800a582 <breakPosixTime+0x146>
 800a56a:	193b      	adds	r3, r7, r4
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	4a42      	ldr	r2, [pc, #264]	@ (800a678 <breakPosixTime+0x23c>)
 800a570:	4694      	mov	ip, r2
 800a572:	4463      	add	r3, ip
 800a574:	22c8      	movs	r2, #200	@ 0xc8
 800a576:	0051      	lsls	r1, r2, #1
 800a578:	0018      	movs	r0, r3
 800a57a:	f7f5 ff83 	bl	8000484 <__aeabi_idivmod>
 800a57e:	1e0b      	subs	r3, r1, #0
 800a580:	d102      	bne.n	800a588 <breakPosixTime+0x14c>
 800a582:	23b7      	movs	r3, #183	@ 0xb7
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	e001      	b.n	800a58c <breakPosixTime+0x150>
 800a588:	236e      	movs	r3, #110	@ 0x6e
 800a58a:	33ff      	adds	r3, #255	@ 0xff
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	61bb      	str	r3, [r7, #24]

  days=0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]
  month=0;
 800a59e:	211e      	movs	r1, #30
 800a5a0:	187b      	adds	r3, r7, r1
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800a5a6:	231d      	movs	r3, #29
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800a5ae:	187b      	adds	r3, r7, r1
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	e048      	b.n	800a648 <breakPosixTime+0x20c>
    if (month==1) { // february
 800a5b6:	231e      	movs	r3, #30
 800a5b8:	18fb      	adds	r3, r7, r3
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d12a      	bne.n	800a616 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800a5c0:	241f      	movs	r4, #31
 800a5c2:	193b      	adds	r3, r7, r4
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a678 <breakPosixTime+0x23c>)
 800a5c8:	4694      	mov	ip, r2
 800a5ca:	4463      	add	r3, ip
 800a5cc:	001a      	movs	r2, r3
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	d11b      	bne.n	800a60c <breakPosixTime+0x1d0>
 800a5d4:	193b      	adds	r3, r7, r4
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	4a27      	ldr	r2, [pc, #156]	@ (800a678 <breakPosixTime+0x23c>)
 800a5da:	4694      	mov	ip, r2
 800a5dc:	4463      	add	r3, ip
 800a5de:	2164      	movs	r1, #100	@ 0x64
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f7f5 ff4f 	bl	8000484 <__aeabi_idivmod>
 800a5e6:	1e0b      	subs	r3, r1, #0
 800a5e8:	d10b      	bne.n	800a602 <breakPosixTime+0x1c6>
 800a5ea:	193b      	adds	r3, r7, r4
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	4a22      	ldr	r2, [pc, #136]	@ (800a678 <breakPosixTime+0x23c>)
 800a5f0:	4694      	mov	ip, r2
 800a5f2:	4463      	add	r3, ip
 800a5f4:	22c8      	movs	r2, #200	@ 0xc8
 800a5f6:	0051      	lsls	r1, r2, #1
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7f5 ff43 	bl	8000484 <__aeabi_idivmod>
 800a5fe:	1e0b      	subs	r3, r1, #0
 800a600:	d104      	bne.n	800a60c <breakPosixTime+0x1d0>
        monthLength=29;
 800a602:	231d      	movs	r3, #29
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	221d      	movs	r2, #29
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e00c      	b.n	800a626 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800a60c:	231d      	movs	r3, #29
 800a60e:	18fb      	adds	r3, r7, r3
 800a610:	221c      	movs	r2, #28
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	e007      	b.n	800a626 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800a616:	231e      	movs	r3, #30
 800a618:	18fb      	adds	r3, r7, r3
 800a61a:	781a      	ldrb	r2, [r3, #0]
 800a61c:	231d      	movs	r3, #29
 800a61e:	18fb      	adds	r3, r7, r3
 800a620:	4916      	ldr	r1, [pc, #88]	@ (800a67c <breakPosixTime+0x240>)
 800a622:	5c8a      	ldrb	r2, [r1, r2]
 800a624:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800a626:	211d      	movs	r1, #29
 800a628:	187b      	adds	r3, r7, r1
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d310      	bcc.n	800a654 <breakPosixTime+0x218>
      time -= monthLength;
 800a632:	187b      	adds	r3, r7, r1
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800a63c:	211e      	movs	r1, #30
 800a63e:	187b      	adds	r3, r7, r1
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	187b      	adds	r3, r7, r1
 800a644:	3201      	adds	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
 800a648:	231e      	movs	r3, #30
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b0b      	cmp	r3, #11
 800a650:	d9b1      	bls.n	800a5b6 <breakPosixTime+0x17a>
 800a652:	e000      	b.n	800a656 <breakPosixTime+0x21a>
    } else {
        break;
 800a654:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800a656:	231e      	movs	r3, #30
 800a658:	18fb      	adds	r3, r7, r3
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	3301      	adds	r3, #1
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	3301      	adds	r3, #1
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	709a      	strb	r2, [r3, #2]
}
 800a670:	46c0      	nop			@ (mov r8, r8)
 800a672:	46bd      	mov	sp, r7
 800a674:	b009      	add	sp, #36	@ 0x24
 800a676:	bd90      	pop	{r4, r7, pc}
 800a678:	000007b2 	.word	0x000007b2
 800a67c:	0802df5c 	.word	0x0802df5c

0800a680 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a686:	003b      	movs	r3, r7
 800a688:	0018      	movs	r0, r3
 800a68a:	2308      	movs	r3, #8
 800a68c:	001a      	movs	r2, r3
 800a68e:	2100      	movs	r1, #0
 800a690:	f01b fd10 	bl	80260b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800a694:	4b30      	ldr	r3, [pc, #192]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a696:	4a31      	ldr	r2, [pc, #196]	@ (800a75c <MX_ADC_Init+0xdc>)
 800a698:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800a69a:	4b2f      	ldr	r3, [pc, #188]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a6a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6a2:	22c0      	movs	r2, #192	@ 0xc0
 800a6a4:	0612      	lsls	r2, r2, #24
 800a6a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800a6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a6ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800a6b4:	4b28      	ldr	r3, [pc, #160]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a6ba:	4b27      	ldr	r3, [pc, #156]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800a6c0:	4b25      	ldr	r3, [pc, #148]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800a6c8:	4b23      	ldr	r3, [pc, #140]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6ca:	2221      	movs	r2, #33	@ 0x21
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a6d0:	4b21      	ldr	r3, [pc, #132]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a6d6:	4b20      	ldr	r3, [pc, #128]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6d8:	22c2      	movs	r2, #194	@ 0xc2
 800a6da:	32ff      	adds	r2, #255	@ 0xff
 800a6dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800a6de:	4b1e      	ldr	r3, [pc, #120]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6e0:	222c      	movs	r2, #44	@ 0x2c
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a6e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800a6f2:	4b19      	ldr	r3, [pc, #100]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800a6f8:	4b17      	ldr	r3, [pc, #92]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800a6fe:	4b16      	ldr	r3, [pc, #88]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a700:	2200      	movs	r2, #0
 800a702:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a704:	4b14      	ldr	r3, [pc, #80]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a706:	0018      	movs	r0, r3
 800a708:	f009 ff88 	bl	801461c <HAL_ADC_Init>
 800a70c:	1e03      	subs	r3, r0, #0
 800a70e:	d001      	beq.n	800a714 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a710:	f002 fcb6 	bl	800d080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a714:	003b      	movs	r3, r7
 800a716:	4a12      	ldr	r2, [pc, #72]	@ (800a760 <MX_ADC_Init+0xe0>)
 800a718:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a71a:	003b      	movs	r3, r7
 800a71c:	2280      	movs	r2, #128	@ 0x80
 800a71e:	0152      	lsls	r2, r2, #5
 800a720:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a722:	003a      	movs	r2, r7
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a726:	0011      	movs	r1, r2
 800a728:	0018      	movs	r0, r3
 800a72a:	f00a f9e7 	bl	8014afc <HAL_ADC_ConfigChannel>
 800a72e:	1e03      	subs	r3, r0, #0
 800a730:	d001      	beq.n	800a736 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a732:	f002 fca5 	bl	800d080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a736:	003b      	movs	r3, r7
 800a738:	4a0a      	ldr	r2, [pc, #40]	@ (800a764 <MX_ADC_Init+0xe4>)
 800a73a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a73c:	003a      	movs	r2, r7
 800a73e:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <MX_ADC_Init+0xd8>)
 800a740:	0011      	movs	r1, r2
 800a742:	0018      	movs	r0, r3
 800a744:	f00a f9da 	bl	8014afc <HAL_ADC_ConfigChannel>
 800a748:	1e03      	subs	r3, r0, #0
 800a74a:	d001      	beq.n	800a750 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a74c:	f002 fc98 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a750:	46c0      	nop			@ (mov r8, r8)
 800a752:	46bd      	mov	sp, r7
 800a754:	b002      	add	sp, #8
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000cc0 	.word	0x20000cc0
 800a75c:	40012400 	.word	0x40012400
 800a760:	38004000 	.word	0x38004000
 800a764:	3c008000 	.word	0x3c008000

0800a768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b089      	sub	sp, #36	@ 0x24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a770:	240c      	movs	r4, #12
 800a772:	193b      	adds	r3, r7, r4
 800a774:	0018      	movs	r0, r3
 800a776:	2314      	movs	r3, #20
 800a778:	001a      	movs	r2, r3
 800a77a:	2100      	movs	r1, #0
 800a77c:	f01b fc9a 	bl	80260b4 <memset>
  if(adcHandle->Instance==ADC1)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a14      	ldr	r2, [pc, #80]	@ (800a7d8 <HAL_ADC_MspInit+0x70>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d121      	bne.n	800a7ce <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a78a:	4b14      	ldr	r3, [pc, #80]	@ (800a7dc <HAL_ADC_MspInit+0x74>)
 800a78c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a78e:	4b13      	ldr	r3, [pc, #76]	@ (800a7dc <HAL_ADC_MspInit+0x74>)
 800a790:	2180      	movs	r1, #128	@ 0x80
 800a792:	0089      	lsls	r1, r1, #2
 800a794:	430a      	orrs	r2, r1
 800a796:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a798:	4b10      	ldr	r3, [pc, #64]	@ (800a7dc <HAL_ADC_MspInit+0x74>)
 800a79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79c:	4b0f      	ldr	r3, [pc, #60]	@ (800a7dc <HAL_ADC_MspInit+0x74>)
 800a79e:	2104      	movs	r1, #4
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a7dc <HAL_ADC_MspInit+0x74>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	60bb      	str	r3, [r7, #8]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a7b0:	193b      	adds	r3, r7, r4
 800a7b2:	2230      	movs	r2, #48	@ 0x30
 800a7b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7b6:	193b      	adds	r3, r7, r4
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7bc:	193b      	adds	r3, r7, r4
 800a7be:	2200      	movs	r2, #0
 800a7c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7c2:	193b      	adds	r3, r7, r4
 800a7c4:	4a06      	ldr	r2, [pc, #24]	@ (800a7e0 <HAL_ADC_MspInit+0x78>)
 800a7c6:	0019      	movs	r1, r3
 800a7c8:	0010      	movs	r0, r2
 800a7ca:	f00a ffb5 	bl	8015738 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a7ce:	46c0      	nop			@ (mov r8, r8)
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b009      	add	sp, #36	@ 0x24
 800a7d4:	bd90      	pop	{r4, r7, pc}
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	40012400 	.word	0x40012400
 800a7dc:	40021000 	.word	0x40021000
 800a7e0:	50000800 	.word	0x50000800

0800a7e4 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a7e4:	b590      	push	{r4, r7, lr}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6039      	str	r1, [r7, #0]
 800a7ec:	0011      	movs	r1, r2
 800a7ee:	1dfb      	adds	r3, r7, #7
 800a7f0:	1c02      	adds	r2, r0, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	1dbb      	adds	r3, r7, #6
 800a7f6:	1c0a      	adds	r2, r1, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a7fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <ReadDirRegister+0x40>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a802:	4b08      	ldr	r3, [pc, #32]	@ (800a824 <ReadDirRegister+0x40>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	1dba      	adds	r2, r7, #6
 800a808:	7814      	ldrb	r4, [r2, #0]
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	1dfa      	adds	r2, r7, #7
 800a80e:	7810      	ldrb	r0, [r2, #0]
 800a810:	0022      	movs	r2, r4
 800a812:	4798      	blx	r3
 800a814:	0003      	movs	r3, r0
 800a816:	e000      	b.n	800a81a <ReadDirRegister+0x36>
  }
  return false;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	0018      	movs	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	b003      	add	sp, #12
 800a820:	bd90      	pop	{r4, r7, pc}
 800a822:	46c0      	nop			@ (mov r8, r8)
 800a824:	20000d2c 	.word	0x20000d2c

0800a828 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a828:	b590      	push	{r4, r7, lr}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6039      	str	r1, [r7, #0]
 800a830:	0011      	movs	r1, r2
 800a832:	1dfb      	adds	r3, r7, #7
 800a834:	1c02      	adds	r2, r0, #0
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	1dbb      	adds	r3, r7, #6
 800a83a:	1c0a      	adds	r2, r1, #0
 800a83c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a83e:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <ReadRegister+0x40>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a846:	4b08      	ldr	r3, [pc, #32]	@ (800a868 <ReadRegister+0x40>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1dba      	adds	r2, r7, #6
 800a84c:	7814      	ldrb	r4, [r2, #0]
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	1dfa      	adds	r2, r7, #7
 800a852:	7810      	ldrb	r0, [r2, #0]
 800a854:	0022      	movs	r2, r4
 800a856:	4798      	blx	r3
 800a858:	0003      	movs	r3, r0
 800a85a:	e000      	b.n	800a85e <ReadRegister+0x36>
  }
  return false;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	b003      	add	sp, #12
 800a864:	bd90      	pop	{r4, r7, pc}
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	20000d24 	.word	0x20000d24

0800a86c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a86c:	b590      	push	{r4, r7, lr}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6039      	str	r1, [r7, #0]
 800a874:	0011      	movs	r1, r2
 800a876:	1dfb      	adds	r3, r7, #7
 800a878:	1c02      	adds	r2, r0, #0
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	1dbb      	adds	r3, r7, #6
 800a87e:	1c0a      	adds	r2, r1, #0
 800a880:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a882:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <WriteRegister+0x40>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a88a:	4b08      	ldr	r3, [pc, #32]	@ (800a8ac <WriteRegister+0x40>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1dba      	adds	r2, r7, #6
 800a890:	7814      	ldrb	r4, [r2, #0]
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	1dfa      	adds	r2, r7, #7
 800a896:	7810      	ldrb	r0, [r2, #0]
 800a898:	0022      	movs	r2, r4
 800a89a:	4798      	blx	r3
 800a89c:	0003      	movs	r3, r0
 800a89e:	e000      	b.n	800a8a2 <WriteRegister+0x36>
  }
  return false;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b003      	add	sp, #12
 800a8a8:	bd90      	pop	{r4, r7, pc}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	20000d28 	.word	0x20000d28

0800a8b0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	000a      	movs	r2, r1
 800a8ba:	1cfb      	adds	r3, r7, #3
 800a8bc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a8be:	230f      	movs	r3, #15
 800a8c0:	18fb      	adds	r3, r7, r3
 800a8c2:	22ff      	movs	r2, #255	@ 0xff
 800a8c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a8c6:	230e      	movs	r3, #14
 800a8c8:	18fb      	adds	r3, r7, r3
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e038      	b.n	800a942 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a8d0:	230e      	movs	r3, #14
 800a8d2:	18fb      	adds	r3, r7, r3
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	18d3      	adds	r3, r2, r3
 800a8da:	7819      	ldrb	r1, [r3, #0]
 800a8dc:	220f      	movs	r2, #15
 800a8de:	18bb      	adds	r3, r7, r2
 800a8e0:	18ba      	adds	r2, r7, r2
 800a8e2:	7812      	ldrb	r2, [r2, #0]
 800a8e4:	404a      	eors	r2, r1
 800a8e6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a8e8:	230d      	movs	r3, #13
 800a8ea:	18fb      	adds	r3, r7, r3
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e01c      	b.n	800a92c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a8f2:	210f      	movs	r1, #15
 800a8f4:	187b      	adds	r3, r7, r1
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	da0a      	bge.n	800a914 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a8fe:	187b      	adds	r3, r7, r1
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b25b      	sxtb	r3, r3
 800a904:	18db      	adds	r3, r3, r3
 800a906:	b25b      	sxtb	r3, r3
 800a908:	2231      	movs	r2, #49	@ 0x31
 800a90a:	4053      	eors	r3, r2
 800a90c:	b25a      	sxtb	r2, r3
 800a90e:	187b      	adds	r3, r7, r1
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e005      	b.n	800a920 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a914:	230f      	movs	r3, #15
 800a916:	18fa      	adds	r2, r7, r3
 800a918:	18fb      	adds	r3, r7, r3
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	18db      	adds	r3, r3, r3
 800a91e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a920:	210d      	movs	r1, #13
 800a922:	187b      	adds	r3, r7, r1
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	187b      	adds	r3, r7, r1
 800a928:	3201      	adds	r2, #1
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	230d      	movs	r3, #13
 800a92e:	18fb      	adds	r3, r7, r3
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b07      	cmp	r3, #7
 800a934:	d9dd      	bls.n	800a8f2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a936:	210e      	movs	r1, #14
 800a938:	187b      	adds	r3, r7, r1
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	187b      	adds	r3, r7, r1
 800a93e:	3201      	adds	r2, #1
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	230e      	movs	r3, #14
 800a944:	18fa      	adds	r2, r7, r3
 800a946:	1cfb      	adds	r3, r7, #3
 800a948:	7812      	ldrb	r2, [r2, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d3bf      	bcc.n	800a8d0 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a950:	230f      	movs	r3, #15
 800a952:	18fb      	adds	r3, r7, r3
 800a954:	781b      	ldrb	r3, [r3, #0]
}
 800a956:	0018      	movs	r0, r3
 800a958:	46bd      	mov	sp, r7
 800a95a:	b004      	add	sp, #16
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a968:	f009 fdf0 	bl	801454c <HAL_GetTick>
 800a96c:	0002      	movs	r2, r0
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	18d2      	adds	r2, r2, r3
 800a972:	4b03      	ldr	r3, [pc, #12]	@ (800a980 <setAHT20TimeStamp+0x20>)
 800a974:	601a      	str	r2, [r3, #0]
}
 800a976:	46c0      	nop			@ (mov r8, r8)
 800a978:	46bd      	mov	sp, r7
 800a97a:	b002      	add	sp, #8
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	46c0      	nop			@ (mov r8, r8)
 800a980:	20000d1c 	.word	0x20000d1c

0800a984 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a990:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <AHT_Init+0x28>)
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a996:	4b06      	ldr	r3, [pc, #24]	@ (800a9b0 <AHT_Init+0x2c>)
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <AHT_Init+0x30>)
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	601a      	str	r2, [r3, #0]
}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	b004      	add	sp, #16
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	20000d2c 	.word	0x20000d2c
 800a9b0:	20000d24 	.word	0x20000d24
 800a9b4:	20000d28 	.word	0x20000d28

0800a9b8 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	0002      	movs	r2, r0
 800a9c0:	1dfb      	adds	r3, r7, #7
 800a9c2:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a9c4:	4b18      	ldr	r3, [pc, #96]	@ (800aa28 <AHT20_register_reset+0x70>)
 800a9c6:	1dfa      	adds	r2, r7, #7
 800a9c8:	7812      	ldrb	r2, [r2, #0]
 800a9ca:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a9cc:	4b16      	ldr	r3, [pc, #88]	@ (800aa28 <AHT20_register_reset+0x70>)
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	0019      	movs	r1, r3
 800a9d2:	2038      	movs	r0, #56	@ 0x38
 800a9d4:	f7ff ff4a 	bl	800a86c <WriteRegister>
  HAL_Delay(15);
 800a9d8:	200f      	movs	r0, #15
 800a9da:	f009 fdc1 	bl	8014560 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a9de:	4b13      	ldr	r3, [pc, #76]	@ (800aa2c <AHT20_register_reset+0x74>)
 800a9e0:	2203      	movs	r2, #3
 800a9e2:	0019      	movs	r1, r3
 800a9e4:	2038      	movs	r0, #56	@ 0x38
 800a9e6:	f7ff ff1f 	bl	800a828 <ReadRegister>
  HAL_Delay(15);
 800a9ea:	200f      	movs	r0, #15
 800a9ec:	f009 fdb8 	bl	8014560 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a9f0:	4b0e      	ldr	r3, [pc, #56]	@ (800aa2c <AHT20_register_reset+0x74>)
 800a9f2:	22b0      	movs	r2, #176	@ 0xb0
 800a9f4:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <AHT20_register_reset+0x74>)
 800a9f8:	789b      	ldrb	r3, [r3, #2]
 800a9fa:	0018      	movs	r0, r3
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	@ (800aa2c <AHT20_register_reset+0x74>)
 800a9fe:	78db      	ldrb	r3, [r3, #3]
 800aa00:	4a0b      	ldr	r2, [pc, #44]	@ (800aa30 <AHT20_register_reset+0x78>)
 800aa02:	490c      	ldr	r1, [pc, #48]	@ (800aa34 <AHT20_register_reset+0x7c>)
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	0003      	movs	r3, r0
 800aa08:	2003      	movs	r0, #3
 800aa0a:	f009 f85f 	bl	8013acc <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800aa0e:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <AHT20_register_reset+0x74>)
 800aa10:	2203      	movs	r2, #3
 800aa12:	0019      	movs	r1, r3
 800aa14:	2038      	movs	r0, #56	@ 0x38
 800aa16:	f7ff ff29 	bl	800a86c <WriteRegister>
  HAL_Delay(15);
 800aa1a:	200f      	movs	r0, #15
 800aa1c:	f009 fda0 	bl	8014560 <HAL_Delay>
}
 800aa20:	46c0      	nop			@ (mov r8, r8)
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	2000009c 	.word	0x2000009c
 800aa2c:	20000d30 	.word	0x20000d30
 800aa30:	0802bd74 	.word	0x0802bd74
 800aa34:	0802bdc4 	.word	0x0802bdc4

0800aa38 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800aa3c:	201b      	movs	r0, #27
 800aa3e:	f7ff ffbb 	bl	800a9b8 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800aa42:	201c      	movs	r0, #28
 800aa44:	f7ff ffb8 	bl	800a9b8 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800aa48:	201e      	movs	r0, #30
 800aa4a:	f7ff ffb5 	bl	800a9b8 <AHT20_register_reset>
}
 800aa4e:	46c0      	nop			@ (mov r8, r8)
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800aa58:	4b0c      	ldr	r3, [pc, #48]	@ (800aa8c <AHT20_read_status+0x38>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	0019      	movs	r1, r3
 800aa5e:	2038      	movs	r0, #56	@ 0x38
 800aa60:	f7ff ff04 	bl	800a86c <WriteRegister>
  HAL_Delay(10);
 800aa64:	200a      	movs	r0, #10
 800aa66:	f009 fd7b 	bl	8014560 <HAL_Delay>
  airtemphumraw[0] = 0;
 800aa6a:	4b09      	ldr	r3, [pc, #36]	@ (800aa90 <AHT20_read_status+0x3c>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800aa70:	4b07      	ldr	r3, [pc, #28]	@ (800aa90 <AHT20_read_status+0x3c>)
 800aa72:	2201      	movs	r2, #1
 800aa74:	0019      	movs	r1, r3
 800aa76:	2038      	movs	r0, #56	@ 0x38
 800aa78:	f7ff fed6 	bl	800a828 <ReadRegister>
  HAL_Delay(10);
 800aa7c:	200a      	movs	r0, #10
 800aa7e:	f009 fd6f 	bl	8014560 <HAL_Delay>
  return airtemphumraw[0];
 800aa82:	4b03      	ldr	r3, [pc, #12]	@ (800aa90 <AHT20_read_status+0x3c>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
}
 800aa86:	0018      	movs	r0, r3
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000098 	.word	0x20000098
 800aa90:	20000d30 	.word	0x20000d30

0800aa94 <AHT20_init>:

bool AHT20_init(void) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800aa9a:	f009 fd57 	bl	801454c <HAL_GetTick>
 800aa9e:	0003      	movs	r3, r0
 800aaa0:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b77      	cmp	r3, #119	@ 0x77
 800aaa6:	d805      	bhi.n	800aab4 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2278      	movs	r2, #120	@ 0x78
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	0018      	movs	r0, r3
 800aab0:	f009 fd56 	bl	8014560 <HAL_Delay>
  }
  AHT20_read_status();
 800aab4:	f7ff ffce 	bl	800aa54 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800aab8:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <AHT20_init+0x60>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4a0e      	ldr	r2, [pc, #56]	@ (800aaf8 <AHT20_init+0x64>)
 800aabe:	490f      	ldr	r1, [pc, #60]	@ (800aafc <AHT20_init+0x68>)
 800aac0:	2003      	movs	r0, #3
 800aac2:	f009 f803 	bl	8013acc <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800aac6:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf4 <AHT20_init+0x60>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	001a      	movs	r2, r3
 800aacc:	2318      	movs	r3, #24
 800aace:	4013      	ands	r3, r2
 800aad0:	2b18      	cmp	r3, #24
 800aad2:	d00a      	beq.n	800aaea <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800aad4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <AHT20_init+0x6c>)
 800aad6:	2203      	movs	r2, #3
 800aad8:	0019      	movs	r1, r3
 800aada:	2038      	movs	r0, #56	@ 0x38
 800aadc:	f7ff fec6 	bl	800a86c <WriteRegister>
    HAL_Delay(10);
 800aae0:	200a      	movs	r0, #10
 800aae2:	f009 fd3d 	bl	8014560 <HAL_Delay>
    AHT20_Start_Init();
 800aae6:	f7ff ffa7 	bl	800aa38 <AHT20_Start_Init>
  }
  return true;
 800aaea:	2301      	movs	r3, #1
}
 800aaec:	0018      	movs	r0, r3
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	b002      	add	sp, #8
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20000d30 	.word	0x20000d30
 800aaf8:	0802bdc8 	.word	0x0802bdc8
 800aafc:	0802bdc4 	.word	0x0802bdc4
 800ab00:	2000008c 	.word	0x2000008c

0800ab04 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800ab04:	b590      	push	{r4, r7, lr}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800ab0a:	1dfc      	adds	r4, r7, #7
 800ab0c:	4b10      	ldr	r3, [pc, #64]	@ (800ab50 <AHT20_calibrate+0x4c>)
 800ab0e:	2201      	movs	r2, #1
 800ab10:	0019      	movs	r1, r3
 800ab12:	2038      	movs	r0, #56	@ 0x38
 800ab14:	f7ff feaa 	bl	800a86c <WriteRegister>
 800ab18:	0003      	movs	r3, r0
 800ab1a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800ab1c:	1dfb      	adds	r3, r7, #7
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2201      	movs	r2, #1
 800ab22:	4053      	eors	r3, r2
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800ab2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ab54 <AHT20_calibrate+0x50>)
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab58 <AHT20_calibrate+0x54>)
 800ab2e:	0019      	movs	r1, r3
 800ab30:	2001      	movs	r0, #1
 800ab32:	f008 ffcb 	bl	8013acc <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800ab36:	f009 fd09 	bl	801454c <HAL_GetTick>
 800ab3a:	0003      	movs	r3, r0
 800ab3c:	3332      	adds	r3, #50	@ 0x32
 800ab3e:	001a      	movs	r2, r3
 800ab40:	4b06      	ldr	r3, [pc, #24]	@ (800ab5c <AHT20_calibrate+0x58>)
 800ab42:	601a      	str	r2, [r3, #0]
  return response;
 800ab44:	1dfb      	adds	r3, r7, #7
 800ab46:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800ab48:	0018      	movs	r0, r3
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	b003      	add	sp, #12
 800ab4e:	bd90      	pop	{r4, r7, pc}
 800ab50:	20000098 	.word	0x20000098
 800ab54:	0802bdf0 	.word	0x0802bdf0
 800ab58:	0802be28 	.word	0x0802be28
 800ab5c:	20000d1c 	.word	0x20000d1c

0800ab60 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800ab64:	4a0a      	ldr	r2, [pc, #40]	@ (800ab90 <AHT20_DeviceConnected+0x30>)
 800ab66:	4b0b      	ldr	r3, [pc, #44]	@ (800ab94 <AHT20_DeviceConnected+0x34>)
 800ab68:	0019      	movs	r1, r3
 800ab6a:	2003      	movs	r0, #3
 800ab6c:	f008 ffae 	bl	8013acc <CreateLine>
   AHT20_init();
 800ab70:	f7ff ff90 	bl	800aa94 <AHT20_init>
   HAL_Delay(10);
 800ab74:	200a      	movs	r0, #10
 800ab76:	f009 fcf3 	bl	8014560 <HAL_Delay>
   AHT20_calibrate();
 800ab7a:	f7ff ffc3 	bl	800ab04 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800ab7e:	f7ff ff69 	bl	800aa54 <AHT20_read_status>
 800ab82:	0003      	movs	r3, r0
 800ab84:	1e5a      	subs	r2, r3, #1
 800ab86:	4193      	sbcs	r3, r2
 800ab88:	b2db      	uxtb	r3, r3
 }
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	0802be2c 	.word	0x0802be2c
 800ab94:	0802bdc4 	.word	0x0802bdc4

0800ab98 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800ab98:	b590      	push	{r4, r7, lr}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800ab9e:	1dfc      	adds	r4, r7, #7
 800aba0:	4b10      	ldr	r3, [pc, #64]	@ (800abe4 <AHT20_StartMeasurement+0x4c>)
 800aba2:	2203      	movs	r2, #3
 800aba4:	0019      	movs	r1, r3
 800aba6:	2038      	movs	r0, #56	@ 0x38
 800aba8:	f7ff fe60 	bl	800a86c <WriteRegister>
 800abac:	0003      	movs	r3, r0
 800abae:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800abb0:	1dfb      	adds	r3, r7, #7
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2201      	movs	r2, #1
 800abb6:	4053      	eors	r3, r2
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800abbe:	4a0a      	ldr	r2, [pc, #40]	@ (800abe8 <AHT20_StartMeasurement+0x50>)
 800abc0:	4b0a      	ldr	r3, [pc, #40]	@ (800abec <AHT20_StartMeasurement+0x54>)
 800abc2:	0019      	movs	r1, r3
 800abc4:	2001      	movs	r0, #1
 800abc6:	f008 ff81 	bl	8013acc <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800abca:	f009 fcbf 	bl	801454c <HAL_GetTick>
 800abce:	0003      	movs	r3, r0
 800abd0:	33fa      	adds	r3, #250	@ 0xfa
 800abd2:	001a      	movs	r2, r3
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <AHT20_StartMeasurement+0x58>)
 800abd6:	601a      	str	r2, [r3, #0]
  return response;
 800abd8:	1dfb      	adds	r3, r7, #7
 800abda:	781b      	ldrb	r3, [r3, #0]
}
 800abdc:	0018      	movs	r0, r3
 800abde:	46bd      	mov	sp, r7
 800abe0:	b003      	add	sp, #12
 800abe2:	bd90      	pop	{r4, r7, pc}
 800abe4:	20000094 	.word	0x20000094
 800abe8:	0802be44 	.word	0x0802be44
 800abec:	0802be28 	.word	0x0802be28
 800abf0:	20000d1c 	.word	0x20000d1c

0800abf4 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800abf4:	b590      	push	{r4, r7, lr}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800abfa:	f009 fca7 	bl	801454c <HAL_GetTick>
 800abfe:	0003      	movs	r3, r0
 800ac00:	22fa      	movs	r2, #250	@ 0xfa
 800ac02:	0092      	lsls	r2, r2, #2
 800ac04:	189a      	adds	r2, r3, r2
 800ac06:	4b2c      	ldr	r3, [pc, #176]	@ (800acb8 <AHT20_GetMeasurementValues+0xc4>)
 800ac08:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800ac0a:	e01f      	b.n	800ac4c <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800ac0c:	4a2b      	ldr	r2, [pc, #172]	@ (800acbc <AHT20_GetMeasurementValues+0xc8>)
 800ac0e:	4b2c      	ldr	r3, [pc, #176]	@ (800acc0 <AHT20_GetMeasurementValues+0xcc>)
 800ac10:	0019      	movs	r1, r3
 800ac12:	2002      	movs	r0, #2
 800ac14:	f008 ff5a 	bl	8013acc <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800ac18:	4b27      	ldr	r3, [pc, #156]	@ (800acb8 <AHT20_GetMeasurementValues+0xc4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f008 feff 	bl	8013a20 <TimestampIsReached>
 800ac22:	1e03      	subs	r3, r0, #0
 800ac24:	d00f      	beq.n	800ac46 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800ac26:	4a27      	ldr	r2, [pc, #156]	@ (800acc4 <AHT20_GetMeasurementValues+0xd0>)
 800ac28:	4b27      	ldr	r3, [pc, #156]	@ (800acc8 <AHT20_GetMeasurementValues+0xd4>)
 800ac2a:	0019      	movs	r1, r3
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	f008 ff4d 	bl	8013acc <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800ac32:	f009 fc8b 	bl	801454c <HAL_GetTick>
 800ac36:	0003      	movs	r3, r0
 800ac38:	22fa      	movs	r2, #250	@ 0xfa
 800ac3a:	00d2      	lsls	r2, r2, #3
 800ac3c:	189a      	adds	r2, r3, r2
 800ac3e:	4b1e      	ldr	r3, [pc, #120]	@ (800acb8 <AHT20_GetMeasurementValues+0xc4>)
 800ac40:	601a      	str	r2, [r3, #0]
      return false;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e034      	b.n	800acb0 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800ac46:	200a      	movs	r0, #10
 800ac48:	f009 fc8a 	bl	8014560 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800ac4c:	f7ff ff02 	bl	800aa54 <AHT20_read_status>
 800ac50:	0003      	movs	r3, r0
 800ac52:	001a      	movs	r2, r3
 800ac54:	2380      	movs	r3, #128	@ 0x80
 800ac56:	4013      	ands	r3, r2
 800ac58:	2b80      	cmp	r3, #128	@ 0x80
 800ac5a:	d0d7      	beq.n	800ac0c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800ac5c:	200a      	movs	r0, #10
 800ac5e:	f009 fc7f 	bl	8014560 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800ac62:	1dfb      	adds	r3, r7, #7
 800ac64:	2200      	movs	r2, #0
 800ac66:	701a      	strb	r2, [r3, #0]
 800ac68:	e009      	b.n	800ac7e <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800ac6a:	1dfb      	adds	r3, r7, #7
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4a17      	ldr	r2, [pc, #92]	@ (800accc <AHT20_GetMeasurementValues+0xd8>)
 800ac70:	2100      	movs	r1, #0
 800ac72:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800ac74:	1dfb      	adds	r3, r7, #7
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	1dfb      	adds	r3, r7, #7
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	1dfb      	adds	r3, r7, #7
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b06      	cmp	r3, #6
 800ac84:	d9f1      	bls.n	800ac6a <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800ac86:	1dbc      	adds	r4, r7, #6
 800ac88:	4b10      	ldr	r3, [pc, #64]	@ (800accc <AHT20_GetMeasurementValues+0xd8>)
 800ac8a:	2207      	movs	r2, #7
 800ac8c:	0019      	movs	r1, r3
 800ac8e:	2038      	movs	r0, #56	@ 0x38
 800ac90:	f7ff fda8 	bl	800a7e4 <ReadDirRegister>
 800ac94:	0003      	movs	r3, r0
 800ac96:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800ac98:	200a      	movs	r0, #10
 800ac9a:	f009 fc61 	bl	8014560 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800ac9e:	f009 fc55 	bl	801454c <HAL_GetTick>
 800aca2:	0003      	movs	r3, r0
 800aca4:	3364      	adds	r3, #100	@ 0x64
 800aca6:	001a      	movs	r2, r3
 800aca8:	4b03      	ldr	r3, [pc, #12]	@ (800acb8 <AHT20_GetMeasurementValues+0xc4>)
 800acaa:	601a      	str	r2, [r3, #0]
  return response;
 800acac:	1dbb      	adds	r3, r7, #6
 800acae:	781b      	ldrb	r3, [r3, #0]
}
 800acb0:	0018      	movs	r0, r3
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b003      	add	sp, #12
 800acb6:	bd90      	pop	{r4, r7, pc}
 800acb8:	20000d1c 	.word	0x20000d1c
 800acbc:	0802be70 	.word	0x0802be70
 800acc0:	0802be98 	.word	0x0802be98
 800acc4:	0802be9c 	.word	0x0802be9c
 800acc8:	0802be28 	.word	0x0802be28
 800accc:	20000d30 	.word	0x20000d30

0800acd0 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800acd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acd2:	46c6      	mov	lr, r8
 800acd4:	b500      	push	{lr}
 800acd6:	b08a      	sub	sp, #40	@ 0x28
 800acd8:	af06      	add	r7, sp, #24
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800acde:	4b5a      	ldr	r3, [pc, #360]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ace0:	799c      	ldrb	r4, [r3, #6]
 800ace2:	4b59      	ldr	r3, [pc, #356]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ace4:	2106      	movs	r1, #6
 800ace6:	0018      	movs	r0, r3
 800ace8:	f7ff fde2 	bl	800a8b0 <CalculateCRC>
 800acec:	0003      	movs	r3, r0
 800acee:	429c      	cmp	r4, r3
 800acf0:	d044      	beq.n	800ad7c <AHT20_Calculate+0xac>
 800acf2:	4b55      	ldr	r3, [pc, #340]	@ (800ae48 <AHT20_Calculate+0x178>)
 800acf4:	799b      	ldrb	r3, [r3, #6]
 800acf6:	2bff      	cmp	r3, #255	@ 0xff
 800acf8:	d040      	beq.n	800ad7c <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800acfa:	4b53      	ldr	r3, [pc, #332]	@ (800ae48 <AHT20_Calculate+0x178>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	4698      	mov	r8, r3
 800ad00:	4b51      	ldr	r3, [pc, #324]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad02:	785b      	ldrb	r3, [r3, #1]
 800ad04:	0018      	movs	r0, r3
 800ad06:	4b50      	ldr	r3, [pc, #320]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad08:	789b      	ldrb	r3, [r3, #2]
 800ad0a:	001c      	movs	r4, r3
 800ad0c:	4b4e      	ldr	r3, [pc, #312]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad0e:	78db      	ldrb	r3, [r3, #3]
 800ad10:	001d      	movs	r5, r3
 800ad12:	4b4d      	ldr	r3, [pc, #308]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad14:	791b      	ldrb	r3, [r3, #4]
 800ad16:	001e      	movs	r6, r3
 800ad18:	4b4b      	ldr	r3, [pc, #300]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad1a:	795b      	ldrb	r3, [r3, #5]
 800ad1c:	469c      	mov	ip, r3
 800ad1e:	4b4a      	ldr	r3, [pc, #296]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad20:	799b      	ldrb	r3, [r3, #6]
 800ad22:	4a4a      	ldr	r2, [pc, #296]	@ (800ae4c <AHT20_Calculate+0x17c>)
 800ad24:	494a      	ldr	r1, [pc, #296]	@ (800ae50 <AHT20_Calculate+0x180>)
 800ad26:	9305      	str	r3, [sp, #20]
 800ad28:	4663      	mov	r3, ip
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	9603      	str	r6, [sp, #12]
 800ad2e:	9502      	str	r5, [sp, #8]
 800ad30:	9401      	str	r4, [sp, #4]
 800ad32:	9000      	str	r0, [sp, #0]
 800ad34:	4643      	mov	r3, r8
 800ad36:	2003      	movs	r0, #3
 800ad38:	f008 fec8 	bl	8013acc <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800ad3c:	4b42      	ldr	r3, [pc, #264]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad3e:	799b      	ldrb	r3, [r3, #6]
 800ad40:	001c      	movs	r4, r3
 800ad42:	4b41      	ldr	r3, [pc, #260]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad44:	2106      	movs	r1, #6
 800ad46:	0018      	movs	r0, r3
 800ad48:	f7ff fdb2 	bl	800a8b0 <CalculateCRC>
 800ad4c:	0003      	movs	r3, r0
 800ad4e:	4a41      	ldr	r2, [pc, #260]	@ (800ae54 <AHT20_Calculate+0x184>)
 800ad50:	4941      	ldr	r1, [pc, #260]	@ (800ae58 <AHT20_Calculate+0x188>)
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	0023      	movs	r3, r4
 800ad56:	2001      	movs	r0, #1
 800ad58:	f008 feb8 	bl	8013acc <CreateLine>
    *airtemp = 0.0;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800ad68:	f009 fbf0 	bl	801454c <HAL_GetTick>
 800ad6c:	0003      	movs	r3, r0
 800ad6e:	22fa      	movs	r2, #250	@ 0xfa
 800ad70:	00d2      	lsls	r2, r2, #3
 800ad72:	189a      	adds	r2, r3, r2
 800ad74:	4b39      	ldr	r3, [pc, #228]	@ (800ae5c <AHT20_Calculate+0x18c>)
 800ad76:	601a      	str	r2, [r3, #0]
    return false;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e05f      	b.n	800ae3c <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800ad7c:	4b38      	ldr	r3, [pc, #224]	@ (800ae60 <AHT20_Calculate+0x190>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800ad82:	4b31      	ldr	r3, [pc, #196]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad84:	78db      	ldrb	r3, [r3, #3]
 800ad86:	041a      	lsls	r2, r3, #16
 800ad88:	23f0      	movs	r3, #240	@ 0xf0
 800ad8a:	031b      	lsls	r3, r3, #12
 800ad8c:	401a      	ands	r2, r3
 800ad8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad90:	791b      	ldrb	r3, [r3, #4]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	18d3      	adds	r3, r2, r3
 800ad96:	4a2c      	ldr	r2, [pc, #176]	@ (800ae48 <AHT20_Calculate+0x178>)
 800ad98:	7952      	ldrb	r2, [r2, #5]
 800ad9a:	189b      	adds	r3, r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7f6 fd92 	bl	80018c8 <__aeabi_ui2f>
 800ada4:	1c03      	adds	r3, r0, #0
 800ada6:	2193      	movs	r1, #147	@ 0x93
 800ada8:	05c9      	lsls	r1, r1, #23
 800adaa:	1c18      	adds	r0, r3, #0
 800adac:	f7f5 ff7a 	bl	8000ca4 <__aeabi_fdiv>
 800adb0:	1c03      	adds	r3, r0, #0
 800adb2:	492c      	ldr	r1, [pc, #176]	@ (800ae64 <AHT20_Calculate+0x194>)
 800adb4:	1c18      	adds	r0, r3, #0
 800adb6:	f7f6 f943 	bl	8001040 <__aeabi_fmul>
 800adba:	1c03      	adds	r3, r0, #0
 800adbc:	492a      	ldr	r1, [pc, #168]	@ (800ae68 <AHT20_Calculate+0x198>)
 800adbe:	1c18      	adds	r0, r3, #0
 800adc0:	f7f6 fa98 	bl	80012f4 <__aeabi_fsub>
 800adc4:	1c03      	adds	r3, r0, #0
 800adc6:	1c1a      	adds	r2, r3, #0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800adcc:	4b1e      	ldr	r3, [pc, #120]	@ (800ae48 <AHT20_Calculate+0x178>)
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	031a      	lsls	r2, r3, #12
 800add2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae48 <AHT20_Calculate+0x178>)
 800add4:	789b      	ldrb	r3, [r3, #2]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	18d3      	adds	r3, r2, r3
 800adda:	4a1b      	ldr	r2, [pc, #108]	@ (800ae48 <AHT20_Calculate+0x178>)
 800addc:	78d2      	ldrb	r2, [r2, #3]
 800adde:	0912      	lsrs	r2, r2, #4
 800ade0:	b2d2      	uxtb	r2, r2
 800ade2:	189b      	adds	r3, r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800ade6:	68b8      	ldr	r0, [r7, #8]
 800ade8:	f7f6 fd6e 	bl	80018c8 <__aeabi_ui2f>
 800adec:	1c03      	adds	r3, r0, #0
 800adee:	2193      	movs	r1, #147	@ 0x93
 800adf0:	05c9      	lsls	r1, r1, #23
 800adf2:	1c18      	adds	r0, r3, #0
 800adf4:	f7f5 ff56 	bl	8000ca4 <__aeabi_fdiv>
 800adf8:	1c03      	adds	r3, r0, #0
 800adfa:	491c      	ldr	r1, [pc, #112]	@ (800ae6c <AHT20_Calculate+0x19c>)
 800adfc:	1c18      	adds	r0, r3, #0
 800adfe:	f7f6 f91f 	bl	8001040 <__aeabi_fmul>
 800ae02:	1c03      	adds	r3, r0, #0
 800ae04:	1c1a      	adds	r2, r3, #0
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	1c18      	adds	r0, r3, #0
 800ae10:	f7f8 fd40 	bl	8003894 <__aeabi_f2d>
 800ae14:	0004      	movs	r4, r0
 800ae16:	000d      	movs	r5, r1
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	1c18      	adds	r0, r3, #0
 800ae1e:	f7f8 fd39 	bl	8003894 <__aeabi_f2d>
 800ae22:	0002      	movs	r2, r0
 800ae24:	000b      	movs	r3, r1
 800ae26:	4812      	ldr	r0, [pc, #72]	@ (800ae70 <AHT20_Calculate+0x1a0>)
 800ae28:	4909      	ldr	r1, [pc, #36]	@ (800ae50 <AHT20_Calculate+0x180>)
 800ae2a:	9202      	str	r2, [sp, #8]
 800ae2c:	9303      	str	r3, [sp, #12]
 800ae2e:	9400      	str	r4, [sp, #0]
 800ae30:	9501      	str	r5, [sp, #4]
 800ae32:	0002      	movs	r2, r0
 800ae34:	2003      	movs	r0, #3
 800ae36:	f008 fe49 	bl	8013acc <CreateLine>
  return true;
 800ae3a:	2301      	movs	r3, #1
}
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	b004      	add	sp, #16
 800ae42:	bc80      	pop	{r7}
 800ae44:	46b8      	mov	r8, r7
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae48:	20000d30 	.word	0x20000d30
 800ae4c:	0802bec0 	.word	0x0802bec0
 800ae50:	0802bdc4 	.word	0x0802bdc4
 800ae54:	0802bf40 	.word	0x0802bf40
 800ae58:	0802be28 	.word	0x0802be28
 800ae5c:	20000d1c 	.word	0x20000d1c
 800ae60:	20000d37 	.word	0x20000d37
 800ae64:	43480000 	.word	0x43480000
 800ae68:	42480000 	.word	0x42480000
 800ae6c:	42c80000 	.word	0x42c80000
 800ae70:	0802bf68 	.word	0x0802bf68

0800ae74 <AHT20_reset>:

bool AHT20_reset(void) {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800ae78:	f009 fb68 	bl	801454c <HAL_GetTick>
 800ae7c:	0003      	movs	r3, r0
 800ae7e:	3332      	adds	r3, #50	@ 0x32
 800ae80:	001a      	movs	r2, r3
 800ae82:	4b07      	ldr	r3, [pc, #28]	@ (800aea0 <AHT20_reset+0x2c>)
 800ae84:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800ae86:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <AHT20_reset+0x30>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800ae8c:	4b06      	ldr	r3, [pc, #24]	@ (800aea8 <AHT20_reset+0x34>)
 800ae8e:	2201      	movs	r2, #1
 800ae90:	0019      	movs	r1, r3
 800ae92:	2038      	movs	r0, #56	@ 0x38
 800ae94:	f7ff fcea 	bl	800a86c <WriteRegister>
 800ae98:	0003      	movs	r3, r0
}
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20000d1c 	.word	0x20000d1c
 800aea4:	20000d20 	.word	0x20000d20
 800aea8:	20000090 	.word	0x20000090

0800aeac <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800aeb2:	4b61      	ldr	r3, [pc, #388]	@ (800b038 <AHT_Upkeep+0x18c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f008 fdb2 	bl	8013a20 <TimestampIsReached>
 800aebc:	0003      	movs	r3, r0
 800aebe:	001a      	movs	r2, r3
 800aec0:	2301      	movs	r3, #1
 800aec2:	4053      	eors	r3, r2
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <AHT_Upkeep+0x24>
    return AHTState;
 800aeca:	4b5c      	ldr	r3, [pc, #368]	@ (800b03c <AHT_Upkeep+0x190>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	e0ae      	b.n	800b02e <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800aed0:	4b5a      	ldr	r3, [pc, #360]	@ (800b03c <AHT_Upkeep+0x190>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b05      	cmp	r3, #5
 800aed6:	d900      	bls.n	800aeda <AHT_Upkeep+0x2e>
 800aed8:	e07d      	b.n	800afd6 <AHT_Upkeep+0x12a>
 800aeda:	009a      	lsls	r2, r3, #2
 800aedc:	4b58      	ldr	r3, [pc, #352]	@ (800b040 <AHT_Upkeep+0x194>)
 800aede:	18d3      	adds	r3, r2, r3
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800aee4:	4a57      	ldr	r2, [pc, #348]	@ (800b044 <AHT_Upkeep+0x198>)
 800aee6:	4b58      	ldr	r3, [pc, #352]	@ (800b048 <AHT_Upkeep+0x19c>)
 800aee8:	0019      	movs	r1, r3
 800aeea:	2003      	movs	r0, #3
 800aeec:	f008 fdee 	bl	8013acc <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800aef0:	f009 fb2c 	bl	801454c <HAL_GetTick>
 800aef4:	0003      	movs	r3, r0
 800aef6:	4a55      	ldr	r2, [pc, #340]	@ (800b04c <AHT_Upkeep+0x1a0>)
 800aef8:	189a      	adds	r2, r3, r2
 800aefa:	4b4f      	ldr	r3, [pc, #316]	@ (800b038 <AHT_Upkeep+0x18c>)
 800aefc:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800aefe:	4b54      	ldr	r3, [pc, #336]	@ (800b050 <AHT_Upkeep+0x1a4>)
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	4b54      	ldr	r3, [pc, #336]	@ (800b054 <AHT_Upkeep+0x1a8>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d100      	bne.n	800af0c <AHT_Upkeep+0x60>
 800af0a:	e087      	b.n	800b01c <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800af0c:	4b4b      	ldr	r3, [pc, #300]	@ (800b03c <AHT_Upkeep+0x190>)
 800af0e:	2205      	movs	r2, #5
 800af10:	701a      	strb	r2, [r3, #0]
    }
    break;
 800af12:	e083      	b.n	800b01c <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800af14:	f002 fde2 	bl	800dadc <getSensorLock>
 800af18:	1e03      	subs	r3, r0, #0
 800af1a:	d000      	beq.n	800af1e <AHT_Upkeep+0x72>
 800af1c:	e080      	b.n	800b020 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800af1e:	2002      	movs	r0, #2
 800af20:	f002 fdc8 	bl	800dab4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800af24:	f7ff fe38 	bl	800ab98 <AHT20_StartMeasurement>
 800af28:	0003      	movs	r3, r0
 800af2a:	001a      	movs	r2, r3
 800af2c:	2301      	movs	r3, #1
 800af2e:	4053      	eors	r3, r2
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00c      	beq.n	800af50 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800af36:	f7ff ff9d 	bl	800ae74 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800af3a:	f009 fb07 	bl	801454c <HAL_GetTick>
 800af3e:	0003      	movs	r3, r0
 800af40:	33c8      	adds	r3, #200	@ 0xc8
 800af42:	001a      	movs	r2, r3
 800af44:	4b3c      	ldr	r3, [pc, #240]	@ (800b038 <AHT_Upkeep+0x18c>)
 800af46:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800af48:	4b3c      	ldr	r3, [pc, #240]	@ (800b03c <AHT_Upkeep+0x190>)
 800af4a:	22ff      	movs	r2, #255	@ 0xff
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e002      	b.n	800af56 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800af50:	4b3a      	ldr	r3, [pc, #232]	@ (800b03c <AHT_Upkeep+0x190>)
 800af52:	2202      	movs	r2, #2
 800af54:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800af56:	200a      	movs	r0, #10
 800af58:	f009 fb02 	bl	8014560 <HAL_Delay>
    break;
 800af5c:	e065      	b.n	800b02a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800af5e:	f7ff fe49 	bl	800abf4 <AHT20_GetMeasurementValues>
 800af62:	1e03      	subs	r3, r0, #0
 800af64:	d05e      	beq.n	800b024 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800af66:	200a      	movs	r0, #10
 800af68:	f009 fafa 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 800af6c:	2000      	movs	r0, #0
 800af6e:	f002 fda1 	bl	800dab4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800af72:	4b32      	ldr	r3, [pc, #200]	@ (800b03c <AHT_Upkeep+0x190>)
 800af74:	2203      	movs	r2, #3
 800af76:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800af78:	e054      	b.n	800b024 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800af7a:	003a      	movs	r2, r7
 800af7c:	1d3b      	adds	r3, r7, #4
 800af7e:	0011      	movs	r1, r2
 800af80:	0018      	movs	r0, r3
 800af82:	f7ff fea5 	bl	800acd0 <AHT20_Calculate>
 800af86:	0003      	movs	r3, r0
 800af88:	001a      	movs	r2, r3
 800af8a:	2301      	movs	r3, #1
 800af8c:	4053      	eors	r3, r2
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800af94:	4b29      	ldr	r3, [pc, #164]	@ (800b03c <AHT_Upkeep+0x190>)
 800af96:	22ff      	movs	r2, #255	@ 0xff
 800af98:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800af9a:	4b28      	ldr	r3, [pc, #160]	@ (800b03c <AHT_Upkeep+0x190>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	e046      	b.n	800b02e <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	1c11      	adds	r1, r2, #0
 800afa6:	1c18      	adds	r0, r3, #0
 800afa8:	f7f9 fd80 	bl	8004aac <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	1c11      	adds	r1, r2, #0
 800afb2:	1c18      	adds	r0, r3, #0
 800afb4:	f7f9 fa1c 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800afb8:	4b20      	ldr	r3, [pc, #128]	@ (800b03c <AHT_Upkeep+0x190>)
 800afba:	2205      	movs	r2, #5
 800afbc:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800afbe:	f009 fac5 	bl	801454c <HAL_GetTick>
 800afc2:	0003      	movs	r3, r0
 800afc4:	4a24      	ldr	r2, [pc, #144]	@ (800b058 <AHT_Upkeep+0x1ac>)
 800afc6:	189a      	adds	r2, r3, r2
 800afc8:	4b1b      	ldr	r3, [pc, #108]	@ (800b038 <AHT_Upkeep+0x18c>)
 800afca:	601a      	str	r2, [r3, #0]
    break;
 800afcc:	e02d      	b.n	800b02a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800afce:	4b1b      	ldr	r3, [pc, #108]	@ (800b03c <AHT_Upkeep+0x190>)
 800afd0:	2201      	movs	r2, #1
 800afd2:	701a      	strb	r2, [r3, #0]
  break;
 800afd4:	e029      	b.n	800b02a <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800afd6:	4b19      	ldr	r3, [pc, #100]	@ (800b03c <AHT_Upkeep+0x190>)
 800afd8:	2201      	movs	r2, #1
 800afda:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800afdc:	f002 fd7e 	bl	800dadc <getSensorLock>
 800afe0:	0003      	movs	r3, r0
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d102      	bne.n	800afec <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800afe6:	2000      	movs	r0, #0
 800afe8:	f002 fd64 	bl	800dab4 <setSensorLock>
    }
    AHTerrors++;
 800afec:	4b1b      	ldr	r3, [pc, #108]	@ (800b05c <AHT_Upkeep+0x1b0>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	4b19      	ldr	r3, [pc, #100]	@ (800b05c <AHT_Upkeep+0x1b0>)
 800aff6:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800aff8:	4b18      	ldr	r3, [pc, #96]	@ (800b05c <AHT_Upkeep+0x1b0>)
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b19      	cmp	r3, #25
 800affe:	d913      	bls.n	800b028 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b000:	4a17      	ldr	r2, [pc, #92]	@ (800b060 <AHT_Upkeep+0x1b4>)
 800b002:	4b18      	ldr	r3, [pc, #96]	@ (800b064 <AHT_Upkeep+0x1b8>)
 800b004:	0019      	movs	r1, r3
 800b006:	2001      	movs	r0, #1
 800b008:	f008 fd60 	bl	8013acc <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b00c:	4b0b      	ldr	r3, [pc, #44]	@ (800b03c <AHT_Upkeep+0x190>)
 800b00e:	2200      	movs	r2, #0
 800b010:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b012:	4b0f      	ldr	r3, [pc, #60]	@ (800b050 <AHT_Upkeep+0x1a4>)
 800b014:	781a      	ldrb	r2, [r3, #0]
 800b016:	4b0f      	ldr	r3, [pc, #60]	@ (800b054 <AHT_Upkeep+0x1a8>)
 800b018:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b01a:	e005      	b.n	800b028 <AHT_Upkeep+0x17c>
    break;
 800b01c:	46c0      	nop			@ (mov r8, r8)
 800b01e:	e004      	b.n	800b02a <AHT_Upkeep+0x17e>
      break;
 800b020:	46c0      	nop			@ (mov r8, r8)
 800b022:	e002      	b.n	800b02a <AHT_Upkeep+0x17e>
    break;
 800b024:	46c0      	nop			@ (mov r8, r8)
 800b026:	e000      	b.n	800b02a <AHT_Upkeep+0x17e>
    break;
 800b028:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b02a:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <AHT_Upkeep+0x190>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b002      	add	sp, #8
 800b034:	bd80      	pop	{r7, pc}
 800b036:	46c0      	nop			@ (mov r8, r8)
 800b038:	20000d1c 	.word	0x20000d1c
 800b03c:	2000009f 	.word	0x2000009f
 800b040:	0802df68 	.word	0x0802df68
 800b044:	0802bf9c 	.word	0x0802bf9c
 800b048:	0802bdc4 	.word	0x0802bdc4
 800b04c:	000dbba0 	.word	0x000dbba0
 800b050:	20000c96 	.word	0x20000c96
 800b054:	20000d38 	.word	0x20000d38
 800b058:	0000ea60 	.word	0x0000ea60
 800b05c:	20000d37 	.word	0x20000d37
 800b060:	0802bfc4 	.word	0x0802bfc4
 800b064:	0802be28 	.word	0x0802be28

0800b068 <WriteMemRegister>:
static uint32_t BMP280TimeStamp;
static uint8_t offday;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	0004      	movs	r4, r0
 800b070:	0008      	movs	r0, r1
 800b072:	60ba      	str	r2, [r7, #8]
 800b074:	0019      	movs	r1, r3
 800b076:	260e      	movs	r6, #14
 800b078:	19bb      	adds	r3, r7, r6
 800b07a:	1c22      	adds	r2, r4, #0
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	230c      	movs	r3, #12
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	1c02      	adds	r2, r0, #0
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	1dbb      	adds	r3, r7, #6
 800b088:	1c0a      	adds	r2, r1, #0
 800b08a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b08c:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c0 <WriteMemRegister+0x58>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d010      	beq.n	800b0b6 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b094:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c0 <WriteMemRegister+0x58>)
 800b096:	681c      	ldr	r4, [r3, #0]
 800b098:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c4 <WriteMemRegister+0x5c>)
 800b09a:	7818      	ldrb	r0, [r3, #0]
 800b09c:	68bd      	ldr	r5, [r7, #8]
 800b09e:	230c      	movs	r3, #12
 800b0a0:	18fb      	adds	r3, r7, r3
 800b0a2:	881a      	ldrh	r2, [r3, #0]
 800b0a4:	19bb      	adds	r3, r7, r6
 800b0a6:	8819      	ldrh	r1, [r3, #0]
 800b0a8:	1dbb      	adds	r3, r7, #6
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	002b      	movs	r3, r5
 800b0b0:	47a0      	blx	r4
 800b0b2:	0003      	movs	r3, r0
 800b0b4:	e000      	b.n	800b0b8 <WriteMemRegister+0x50>
  }
  return false;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b005      	add	sp, #20
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c0:	20000d3c 	.word	0x20000d3c
 800b0c4:	200000a0 	.word	0x200000a0

0800b0c8 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	0004      	movs	r4, r0
 800b0d0:	0008      	movs	r0, r1
 800b0d2:	60ba      	str	r2, [r7, #8]
 800b0d4:	0019      	movs	r1, r3
 800b0d6:	260e      	movs	r6, #14
 800b0d8:	19bb      	adds	r3, r7, r6
 800b0da:	1c22      	adds	r2, r4, #0
 800b0dc:	801a      	strh	r2, [r3, #0]
 800b0de:	230c      	movs	r3, #12
 800b0e0:	18fb      	adds	r3, r7, r3
 800b0e2:	1c02      	adds	r2, r0, #0
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	1dbb      	adds	r3, r7, #6
 800b0e8:	1c0a      	adds	r2, r1, #0
 800b0ea:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b120 <ReadMemRegister+0x58>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d010      	beq.n	800b116 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b120 <ReadMemRegister+0x58>)
 800b0f6:	681c      	ldr	r4, [r3, #0]
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b124 <ReadMemRegister+0x5c>)
 800b0fa:	7818      	ldrb	r0, [r3, #0]
 800b0fc:	68bd      	ldr	r5, [r7, #8]
 800b0fe:	230c      	movs	r3, #12
 800b100:	18fb      	adds	r3, r7, r3
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	19bb      	adds	r3, r7, r6
 800b106:	8819      	ldrh	r1, [r3, #0]
 800b108:	1dbb      	adds	r3, r7, #6
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	002b      	movs	r3, r5
 800b110:	47a0      	blx	r4
 800b112:	0003      	movs	r3, r0
 800b114:	e000      	b.n	800b118 <ReadMemRegister+0x50>
  }
  return false;
 800b116:	2300      	movs	r3, #0
}
 800b118:	0018      	movs	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b005      	add	sp, #20
 800b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b120:	20000d40 	.word	0x20000d40
 800b124:	200000a0 	.word	0x200000a0

0800b128 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b130:	f009 fa0c 	bl	801454c <HAL_GetTick>
 800b134:	0002      	movs	r2, r0
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	18d2      	adds	r2, r2, r3
 800b13a:	4b03      	ldr	r3, [pc, #12]	@ (800b148 <setBMP280TimeStamp+0x20>)
 800b13c:	601a      	str	r2, [r3, #0]
}
 800b13e:	46c0      	nop			@ (mov r8, r8)
 800b140:	46bd      	mov	sp, r7
 800b142:	b002      	add	sp, #8
 800b144:	bd80      	pop	{r7, pc}
 800b146:	46c0      	nop			@ (mov r8, r8)
 800b148:	20000d6c 	.word	0x20000d6c

0800b14c <ResetBMP280samplecounter>:

void ResetBMP280samplecounter() {
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  bmp280samplecounter = 0;
 800b150:	4b02      	ldr	r3, [pc, #8]	@ (800b15c <ResetBMP280samplecounter+0x10>)
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
}
 800b156:	46c0      	nop			@ (mov r8, r8)
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20000d5c 	.word	0x20000d5c

0800b160 <BMP280_reset>:


static void BMP280_reset() {
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b166:	1dfb      	adds	r3, r7, #7
 800b168:	22b6      	movs	r2, #182	@ 0xb6
 800b16a:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b16c:	1dfa      	adds	r2, r7, #7
 800b16e:	2301      	movs	r3, #1
 800b170:	2101      	movs	r1, #1
 800b172:	20e0      	movs	r0, #224	@ 0xe0
 800b174:	f7ff ff78 	bl	800b068 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b178:	4a06      	ldr	r2, [pc, #24]	@ (800b194 <BMP280_reset+0x34>)
 800b17a:	4b07      	ldr	r3, [pc, #28]	@ (800b198 <BMP280_reset+0x38>)
 800b17c:	0019      	movs	r1, r3
 800b17e:	2002      	movs	r0, #2
 800b180:	f008 fca4 	bl	8013acc <CreateLine>
  HAL_Delay(100);
 800b184:	2064      	movs	r0, #100	@ 0x64
 800b186:	f009 f9eb 	bl	8014560 <HAL_Delay>
}
 800b18a:	46c0      	nop			@ (mov r8, r8)
 800b18c:	46bd      	mov	sp, r7
 800b18e:	b002      	add	sp, #8
 800b190:	bd80      	pop	{r7, pc}
 800b192:	46c0      	nop			@ (mov r8, r8)
 800b194:	0802c008 	.word	0x0802c008
 800b198:	0802c020 	.word	0x0802c020

0800b19c <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800b1a2:	4aae      	ldr	r2, [pc, #696]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1a4:	231a      	movs	r3, #26
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	2088      	movs	r0, #136	@ 0x88
 800b1aa:	f7ff ff8d 	bl	800b0c8 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800b1ae:	4bab      	ldr	r3, [pc, #684]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1b0:	785b      	ldrb	r3, [r3, #1]
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4aa9      	ldr	r2, [pc, #676]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1b8:	7812      	ldrb	r2, [r2, #0]
 800b1ba:	189b      	adds	r3, r3, r2
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	4ba8      	ldr	r3, [pc, #672]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b1c0:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800b1c2:	4ba6      	ldr	r3, [pc, #664]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1c4:	78db      	ldrb	r3, [r3, #3]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4aa4      	ldr	r2, [pc, #656]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1cc:	7892      	ldrb	r2, [r2, #2]
 800b1ce:	189b      	adds	r3, r3, r2
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	b21a      	sxth	r2, r3
 800b1d4:	4ba2      	ldr	r3, [pc, #648]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b1d6:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800b1d8:	4ba0      	ldr	r3, [pc, #640]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1da:	795b      	ldrb	r3, [r3, #5]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4a9e      	ldr	r2, [pc, #632]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1e2:	7912      	ldrb	r2, [r2, #4]
 800b1e4:	189b      	adds	r3, r3, r2
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	b21a      	sxth	r2, r3
 800b1ea:	4b9d      	ldr	r3, [pc, #628]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b1ec:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800b1ee:	4b9b      	ldr	r3, [pc, #620]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1f0:	79db      	ldrb	r3, [r3, #7]
 800b1f2:	021b      	lsls	r3, r3, #8
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	4a99      	ldr	r2, [pc, #612]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b1f8:	7992      	ldrb	r2, [r2, #6]
 800b1fa:	189b      	adds	r3, r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	4b98      	ldr	r3, [pc, #608]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b200:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800b202:	4b96      	ldr	r3, [pc, #600]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b204:	7a5b      	ldrb	r3, [r3, #9]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4a94      	ldr	r2, [pc, #592]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b20c:	7a12      	ldrb	r2, [r2, #8]
 800b20e:	189b      	adds	r3, r3, r2
 800b210:	b29b      	uxth	r3, r3
 800b212:	b21a      	sxth	r2, r3
 800b214:	4b92      	ldr	r3, [pc, #584]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b216:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800b218:	4b90      	ldr	r3, [pc, #576]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b21a:	7adb      	ldrb	r3, [r3, #11]
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4a8e      	ldr	r2, [pc, #568]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b222:	7a92      	ldrb	r2, [r2, #10]
 800b224:	189b      	adds	r3, r3, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	b21a      	sxth	r2, r3
 800b22a:	4b8d      	ldr	r3, [pc, #564]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b22c:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800b22e:	4b8b      	ldr	r3, [pc, #556]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b230:	7b5b      	ldrb	r3, [r3, #13]
 800b232:	021b      	lsls	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	4a89      	ldr	r2, [pc, #548]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b238:	7b12      	ldrb	r2, [r2, #12]
 800b23a:	189b      	adds	r3, r3, r2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	b21a      	sxth	r2, r3
 800b240:	4b87      	ldr	r3, [pc, #540]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b242:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800b244:	4b85      	ldr	r3, [pc, #532]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b246:	7bdb      	ldrb	r3, [r3, #15]
 800b248:	021b      	lsls	r3, r3, #8
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	4a83      	ldr	r2, [pc, #524]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b24e:	7b92      	ldrb	r2, [r2, #14]
 800b250:	189b      	adds	r3, r3, r2
 800b252:	b29b      	uxth	r3, r3
 800b254:	b21a      	sxth	r2, r3
 800b256:	4b82      	ldr	r3, [pc, #520]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b258:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800b25a:	4b80      	ldr	r3, [pc, #512]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b25c:	7c5b      	ldrb	r3, [r3, #17]
 800b25e:	021b      	lsls	r3, r3, #8
 800b260:	b29b      	uxth	r3, r3
 800b262:	4a7e      	ldr	r2, [pc, #504]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b264:	7c12      	ldrb	r2, [r2, #16]
 800b266:	189b      	adds	r3, r3, r2
 800b268:	b29b      	uxth	r3, r3
 800b26a:	b21a      	sxth	r2, r3
 800b26c:	4b7c      	ldr	r3, [pc, #496]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b26e:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800b270:	4b7a      	ldr	r3, [pc, #488]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b272:	7cdb      	ldrb	r3, [r3, #19]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	b29b      	uxth	r3, r3
 800b278:	4a78      	ldr	r2, [pc, #480]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b27a:	7c92      	ldrb	r2, [r2, #18]
 800b27c:	189b      	adds	r3, r3, r2
 800b27e:	b29b      	uxth	r3, r3
 800b280:	b21a      	sxth	r2, r3
 800b282:	4b77      	ldr	r3, [pc, #476]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b284:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800b286:	4b75      	ldr	r3, [pc, #468]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b288:	7d5b      	ldrb	r3, [r3, #21]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	4a73      	ldr	r2, [pc, #460]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b290:	7d12      	ldrb	r2, [r2, #20]
 800b292:	189b      	adds	r3, r3, r2
 800b294:	b29b      	uxth	r3, r3
 800b296:	b21a      	sxth	r2, r3
 800b298:	4b71      	ldr	r3, [pc, #452]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b29a:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800b29c:	4b6f      	ldr	r3, [pc, #444]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b29e:	7ddb      	ldrb	r3, [r3, #23]
 800b2a0:	021b      	lsls	r3, r3, #8
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	4a6d      	ldr	r2, [pc, #436]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b2a6:	7d92      	ldrb	r2, [r2, #22]
 800b2a8:	189b      	adds	r3, r3, r2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	b21a      	sxth	r2, r3
 800b2ae:	4b6c      	ldr	r3, [pc, #432]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b2b0:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800b2b2:	4a6c      	ldr	r2, [pc, #432]	@ (800b464 <BMP280_get_calibration+0x2c8>)
 800b2b4:	4b6c      	ldr	r3, [pc, #432]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b2b6:	0019      	movs	r1, r3
 800b2b8:	2003      	movs	r0, #3
 800b2ba:	f008 fc07 	bl	8013acc <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800b2be:	4b67      	ldr	r3, [pc, #412]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b2c0:	785b      	ldrb	r3, [r3, #1]
 800b2c2:	001c      	movs	r4, r3
 800b2c4:	4b65      	ldr	r3, [pc, #404]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	4b65      	ldr	r3, [pc, #404]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	4a67      	ldr	r2, [pc, #412]	@ (800b46c <BMP280_get_calibration+0x2d0>)
 800b2d0:	4965      	ldr	r1, [pc, #404]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b2d2:	9301      	str	r3, [sp, #4]
 800b2d4:	9000      	str	r0, [sp, #0]
 800b2d6:	0023      	movs	r3, r4
 800b2d8:	2003      	movs	r0, #3
 800b2da:	f008 fbf7 	bl	8013acc <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800b2de:	4b5f      	ldr	r3, [pc, #380]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b2e0:	78db      	ldrb	r3, [r3, #3]
 800b2e2:	001c      	movs	r4, r3
 800b2e4:	4b5d      	ldr	r3, [pc, #372]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b2e6:	789b      	ldrb	r3, [r3, #2]
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	4b5d      	ldr	r3, [pc, #372]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	5e9b      	ldrsh	r3, [r3, r2]
 800b2f0:	4a5f      	ldr	r2, [pc, #380]	@ (800b470 <BMP280_get_calibration+0x2d4>)
 800b2f2:	495d      	ldr	r1, [pc, #372]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	9000      	str	r0, [sp, #0]
 800b2f8:	0023      	movs	r3, r4
 800b2fa:	2003      	movs	r0, #3
 800b2fc:	f008 fbe6 	bl	8013acc <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800b300:	4b56      	ldr	r3, [pc, #344]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b302:	795b      	ldrb	r3, [r3, #5]
 800b304:	001c      	movs	r4, r3
 800b306:	4b55      	ldr	r3, [pc, #340]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b308:	791b      	ldrb	r3, [r3, #4]
 800b30a:	0018      	movs	r0, r3
 800b30c:	4b54      	ldr	r3, [pc, #336]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b30e:	2204      	movs	r2, #4
 800b310:	5e9b      	ldrsh	r3, [r3, r2]
 800b312:	4a58      	ldr	r2, [pc, #352]	@ (800b474 <BMP280_get_calibration+0x2d8>)
 800b314:	4954      	ldr	r1, [pc, #336]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	9000      	str	r0, [sp, #0]
 800b31a:	0023      	movs	r3, r4
 800b31c:	2003      	movs	r0, #3
 800b31e:	f008 fbd5 	bl	8013acc <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800b322:	4b4e      	ldr	r3, [pc, #312]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b324:	79db      	ldrb	r3, [r3, #7]
 800b326:	001c      	movs	r4, r3
 800b328:	4b4c      	ldr	r3, [pc, #304]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b32a:	799b      	ldrb	r3, [r3, #6]
 800b32c:	0018      	movs	r0, r3
 800b32e:	4b4c      	ldr	r3, [pc, #304]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	4a51      	ldr	r2, [pc, #324]	@ (800b478 <BMP280_get_calibration+0x2dc>)
 800b334:	494c      	ldr	r1, [pc, #304]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	9000      	str	r0, [sp, #0]
 800b33a:	0023      	movs	r3, r4
 800b33c:	2003      	movs	r0, #3
 800b33e:	f008 fbc5 	bl	8013acc <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800b342:	4b46      	ldr	r3, [pc, #280]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b344:	7a5b      	ldrb	r3, [r3, #9]
 800b346:	001c      	movs	r4, r3
 800b348:	4b44      	ldr	r3, [pc, #272]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b34a:	7a1b      	ldrb	r3, [r3, #8]
 800b34c:	0018      	movs	r0, r3
 800b34e:	4b44      	ldr	r3, [pc, #272]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b350:	2208      	movs	r2, #8
 800b352:	5e9b      	ldrsh	r3, [r3, r2]
 800b354:	4a49      	ldr	r2, [pc, #292]	@ (800b47c <BMP280_get_calibration+0x2e0>)
 800b356:	4944      	ldr	r1, [pc, #272]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	9000      	str	r0, [sp, #0]
 800b35c:	0023      	movs	r3, r4
 800b35e:	2003      	movs	r0, #3
 800b360:	f008 fbb4 	bl	8013acc <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800b364:	4b3d      	ldr	r3, [pc, #244]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b366:	7adb      	ldrb	r3, [r3, #11]
 800b368:	001c      	movs	r4, r3
 800b36a:	4b3c      	ldr	r3, [pc, #240]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b36c:	7a9b      	ldrb	r3, [r3, #10]
 800b36e:	0018      	movs	r0, r3
 800b370:	4b3b      	ldr	r3, [pc, #236]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b372:	220a      	movs	r2, #10
 800b374:	5e9b      	ldrsh	r3, [r3, r2]
 800b376:	4a42      	ldr	r2, [pc, #264]	@ (800b480 <BMP280_get_calibration+0x2e4>)
 800b378:	493b      	ldr	r1, [pc, #236]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	9000      	str	r0, [sp, #0]
 800b37e:	0023      	movs	r3, r4
 800b380:	2003      	movs	r0, #3
 800b382:	f008 fba3 	bl	8013acc <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800b386:	4b35      	ldr	r3, [pc, #212]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b388:	7b5b      	ldrb	r3, [r3, #13]
 800b38a:	001c      	movs	r4, r3
 800b38c:	4b33      	ldr	r3, [pc, #204]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b38e:	7b1b      	ldrb	r3, [r3, #12]
 800b390:	0018      	movs	r0, r3
 800b392:	4b33      	ldr	r3, [pc, #204]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b394:	220c      	movs	r2, #12
 800b396:	5e9b      	ldrsh	r3, [r3, r2]
 800b398:	4a3a      	ldr	r2, [pc, #232]	@ (800b484 <BMP280_get_calibration+0x2e8>)
 800b39a:	4933      	ldr	r1, [pc, #204]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	9000      	str	r0, [sp, #0]
 800b3a0:	0023      	movs	r3, r4
 800b3a2:	2003      	movs	r0, #3
 800b3a4:	f008 fb92 	bl	8013acc <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800b3a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3aa:	7bdb      	ldrb	r3, [r3, #15]
 800b3ac:	001c      	movs	r4, r3
 800b3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3b0:	7b9b      	ldrb	r3, [r3, #14]
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b3b6:	220e      	movs	r2, #14
 800b3b8:	5e9b      	ldrsh	r3, [r3, r2]
 800b3ba:	4a33      	ldr	r2, [pc, #204]	@ (800b488 <BMP280_get_calibration+0x2ec>)
 800b3bc:	492a      	ldr	r1, [pc, #168]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	9000      	str	r0, [sp, #0]
 800b3c2:	0023      	movs	r3, r4
 800b3c4:	2003      	movs	r0, #3
 800b3c6:	f008 fb81 	bl	8013acc <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800b3ca:	4b24      	ldr	r3, [pc, #144]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3cc:	7c5b      	ldrb	r3, [r3, #17]
 800b3ce:	001c      	movs	r4, r3
 800b3d0:	4b22      	ldr	r3, [pc, #136]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3d2:	7c1b      	ldrb	r3, [r3, #16]
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	4b22      	ldr	r3, [pc, #136]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b3d8:	2210      	movs	r2, #16
 800b3da:	5e9b      	ldrsh	r3, [r3, r2]
 800b3dc:	4a2b      	ldr	r2, [pc, #172]	@ (800b48c <BMP280_get_calibration+0x2f0>)
 800b3de:	4922      	ldr	r1, [pc, #136]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	9000      	str	r0, [sp, #0]
 800b3e4:	0023      	movs	r3, r4
 800b3e6:	2003      	movs	r0, #3
 800b3e8:	f008 fb70 	bl	8013acc <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800b3ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3ee:	7cdb      	ldrb	r3, [r3, #19]
 800b3f0:	001c      	movs	r4, r3
 800b3f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b3f4:	7c9b      	ldrb	r3, [r3, #18]
 800b3f6:	0018      	movs	r0, r3
 800b3f8:	4b19      	ldr	r3, [pc, #100]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b3fa:	2212      	movs	r2, #18
 800b3fc:	5e9b      	ldrsh	r3, [r3, r2]
 800b3fe:	4a24      	ldr	r2, [pc, #144]	@ (800b490 <BMP280_get_calibration+0x2f4>)
 800b400:	4919      	ldr	r1, [pc, #100]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b402:	9301      	str	r3, [sp, #4]
 800b404:	9000      	str	r0, [sp, #0]
 800b406:	0023      	movs	r3, r4
 800b408:	2003      	movs	r0, #3
 800b40a:	f008 fb5f 	bl	8013acc <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800b40e:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b410:	7d5b      	ldrb	r3, [r3, #21]
 800b412:	001c      	movs	r4, r3
 800b414:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b416:	7d1b      	ldrb	r3, [r3, #20]
 800b418:	0018      	movs	r0, r3
 800b41a:	4b11      	ldr	r3, [pc, #68]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b41c:	2214      	movs	r2, #20
 800b41e:	5e9b      	ldrsh	r3, [r3, r2]
 800b420:	4a1c      	ldr	r2, [pc, #112]	@ (800b494 <BMP280_get_calibration+0x2f8>)
 800b422:	4911      	ldr	r1, [pc, #68]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	9000      	str	r0, [sp, #0]
 800b428:	0023      	movs	r3, r4
 800b42a:	2003      	movs	r0, #3
 800b42c:	f008 fb4e 	bl	8013acc <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800b430:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b432:	7ddb      	ldrb	r3, [r3, #23]
 800b434:	001c      	movs	r4, r3
 800b436:	4b09      	ldr	r3, [pc, #36]	@ (800b45c <BMP280_get_calibration+0x2c0>)
 800b438:	7d9b      	ldrb	r3, [r3, #22]
 800b43a:	0018      	movs	r0, r3
 800b43c:	4b08      	ldr	r3, [pc, #32]	@ (800b460 <BMP280_get_calibration+0x2c4>)
 800b43e:	2216      	movs	r2, #22
 800b440:	5e9b      	ldrsh	r3, [r3, r2]
 800b442:	4a15      	ldr	r2, [pc, #84]	@ (800b498 <BMP280_get_calibration+0x2fc>)
 800b444:	4908      	ldr	r1, [pc, #32]	@ (800b468 <BMP280_get_calibration+0x2cc>)
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	9000      	str	r0, [sp, #0]
 800b44a:	0023      	movs	r3, r4
 800b44c:	2003      	movs	r0, #3
 800b44e:	f008 fb3d 	bl	8013acc <CreateLine>
}
 800b452:	46c0      	nop			@ (mov r8, r8)
 800b454:	46bd      	mov	sp, r7
 800b456:	b001      	add	sp, #4
 800b458:	bd90      	pop	{r4, r7, pc}
 800b45a:	46c0      	nop			@ (mov r8, r8)
 800b45c:	20000d74 	.word	0x20000d74
 800b460:	20000d44 	.word	0x20000d44
 800b464:	0802c024 	.word	0x0802c024
 800b468:	0802c040 	.word	0x0802c040
 800b46c:	0802c044 	.word	0x0802c044
 800b470:	0802c078 	.word	0x0802c078
 800b474:	0802c0ac 	.word	0x0802c0ac
 800b478:	0802c0e0 	.word	0x0802c0e0
 800b47c:	0802c114 	.word	0x0802c114
 800b480:	0802c148 	.word	0x0802c148
 800b484:	0802c17c 	.word	0x0802c17c
 800b488:	0802c1b0 	.word	0x0802c1b0
 800b48c:	0802c1e4 	.word	0x0802c1e4
 800b490:	0802c218 	.word	0x0802c218
 800b494:	0802c24c 	.word	0x0802c24c
 800b498:	0802c280 	.word	0x0802c280

0800b49c <BMP280_probe>:

static bool BMP280_probe() {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800b4a2:	4b34      	ldr	r3, [pc, #208]	@ (800b574 <BMP280_probe+0xd8>)
 800b4a4:	2276      	movs	r2, #118	@ 0x76
 800b4a6:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b4a8:	1dba      	adds	r2, r7, #6
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	20d0      	movs	r0, #208	@ 0xd0
 800b4b0:	f7ff fe0a 	bl	800b0c8 <ReadMemRegister>
 800b4b4:	0003      	movs	r3, r0
 800b4b6:	001a      	movs	r2, r3
 800b4b8:	1dfb      	adds	r3, r7, #7
 800b4ba:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800b4bc:	1dfb      	adds	r3, r7, #7
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b25b      	sxtb	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <BMP280_probe+0x40>
 800b4c6:	1dbb      	adds	r3, r7, #6
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d006      	beq.n	800b4dc <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800b4ce:	1dbb      	adds	r3, r7, #6
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	4a29      	ldr	r2, [pc, #164]	@ (800b578 <BMP280_probe+0xdc>)
 800b4d4:	4929      	ldr	r1, [pc, #164]	@ (800b57c <BMP280_probe+0xe0>)
 800b4d6:	2003      	movs	r0, #3
 800b4d8:	f008 faf8 	bl	8013acc <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800b4dc:	1dbb      	adds	r3, r7, #6
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	2b58      	cmp	r3, #88	@ 0x58
 800b4e2:	d01f      	beq.n	800b524 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800b4e4:	4b23      	ldr	r3, [pc, #140]	@ (800b574 <BMP280_probe+0xd8>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b21      	ldr	r3, [pc, #132]	@ (800b574 <BMP280_probe+0xd8>)
 800b4ee:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b4f0:	1dba      	adds	r2, r7, #6
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	20d0      	movs	r0, #208	@ 0xd0
 800b4f8:	f7ff fde6 	bl	800b0c8 <ReadMemRegister>
 800b4fc:	0003      	movs	r3, r0
 800b4fe:	001a      	movs	r2, r3
 800b500:	1dfb      	adds	r3, r7, #7
 800b502:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800b504:	1dfb      	adds	r3, r7, #7
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	b25b      	sxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <BMP280_probe+0x88>
 800b50e:	1dbb      	adds	r3, r7, #6
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800b516:	1dbb      	adds	r3, r7, #6
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	4a17      	ldr	r2, [pc, #92]	@ (800b578 <BMP280_probe+0xdc>)
 800b51c:	4917      	ldr	r1, [pc, #92]	@ (800b57c <BMP280_probe+0xe0>)
 800b51e:	2003      	movs	r0, #3
 800b520:	f008 fad4 	bl	8013acc <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800b524:	1dbb      	adds	r3, r7, #6
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b58      	cmp	r3, #88	@ 0x58
 800b52a:	d110      	bne.n	800b54e <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800b52c:	1dbb      	adds	r3, r7, #6
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	0018      	movs	r0, r3
 800b532:	4b10      	ldr	r3, [pc, #64]	@ (800b574 <BMP280_probe+0xd8>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4a12      	ldr	r2, [pc, #72]	@ (800b580 <BMP280_probe+0xe4>)
 800b538:	4912      	ldr	r1, [pc, #72]	@ (800b584 <BMP280_probe+0xe8>)
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	0003      	movs	r3, r0
 800b53e:	2002      	movs	r0, #2
 800b540:	f008 fac4 	bl	8013acc <CreateLine>
      BMP280_reset(); // get an initial state
 800b544:	f7ff fe0c 	bl	800b160 <BMP280_reset>
      BMP280_get_calibration();
 800b548:	f7ff fe28 	bl	800b19c <BMP280_get_calibration>
 800b54c:	e008      	b.n	800b560 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800b54e:	4b09      	ldr	r3, [pc, #36]	@ (800b574 <BMP280_probe+0xd8>)
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800b554:	4a0c      	ldr	r2, [pc, #48]	@ (800b588 <BMP280_probe+0xec>)
 800b556:	4b0d      	ldr	r3, [pc, #52]	@ (800b58c <BMP280_probe+0xf0>)
 800b558:	0019      	movs	r1, r3
 800b55a:	2001      	movs	r0, #1
 800b55c:	f008 fab6 	bl	8013acc <CreateLine>
    }
    return bmp280I2Caddr;
 800b560:	4b04      	ldr	r3, [pc, #16]	@ (800b574 <BMP280_probe+0xd8>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	1e5a      	subs	r2, r3, #1
 800b566:	4193      	sbcs	r3, r2
 800b568:	b2db      	uxtb	r3, r3
}
 800b56a:	0018      	movs	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	b002      	add	sp, #8
 800b570:	bd80      	pop	{r7, pc}
 800b572:	46c0      	nop			@ (mov r8, r8)
 800b574:	200000a0 	.word	0x200000a0
 800b578:	0802c2b4 	.word	0x0802c2b4
 800b57c:	0802c040 	.word	0x0802c040
 800b580:	0802c2e4 	.word	0x0802c2e4
 800b584:	0802c020 	.word	0x0802c020
 800b588:	0802c31c 	.word	0x0802c31c
 800b58c:	0802c330 	.word	0x0802c330

0800b590 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800b594:	f7ff ff82 	bl	800b49c <BMP280_probe>
 800b598:	0003      	movs	r3, r0
}
 800b59a:	0018      	movs	r0, r3
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b5aa:	4b05      	ldr	r3, [pc, #20]	@ (800b5c0 <BMP_Init+0x20>)
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b5b0:	4b04      	ldr	r3, [pc, #16]	@ (800b5c4 <BMP_Init+0x24>)
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	46c0      	nop			@ (mov r8, r8)
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	b002      	add	sp, #8
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	46c0      	nop			@ (mov r8, r8)
 800b5c0:	20000d40 	.word	0x20000d40
 800b5c4:	20000d3c 	.word	0x20000d3c

0800b5c8 <BMP280_set_config>:


static bool BMP280_set_config() {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800b5ce:	1dbb      	adds	r3, r7, #6
 800b5d0:	228c      	movs	r2, #140	@ 0x8c
 800b5d2:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b5d4:	1dba      	adds	r2, r7, #6
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	2101      	movs	r1, #1
 800b5da:	20f5      	movs	r0, #245	@ 0xf5
 800b5dc:	f7ff fd44 	bl	800b068 <WriteMemRegister>
 800b5e0:	0003      	movs	r3, r0
 800b5e2:	001a      	movs	r2, r3
 800b5e4:	1dfb      	adds	r3, r7, #7
 800b5e6:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800b5e8:	f008 ffb0 	bl	801454c <HAL_GetTick>
 800b5ec:	0003      	movs	r3, r0
 800b5ee:	330a      	adds	r3, #10
 800b5f0:	001a      	movs	r2, r3
 800b5f2:	4b06      	ldr	r3, [pc, #24]	@ (800b60c <BMP280_set_config+0x44>)
 800b5f4:	601a      	str	r2, [r3, #0]
  return rslt;
 800b5f6:	1dfb      	adds	r3, r7, #7
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	4193      	sbcs	r3, r2
 800b600:	b2db      	uxtb	r3, r3
}
 800b602:	0018      	movs	r0, r3
 800b604:	46bd      	mov	sp, r7
 800b606:	b002      	add	sp, #8
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	46c0      	nop			@ (mov r8, r8)
 800b60c:	20000d6c 	.word	0x20000d6c

0800b610 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800b616:	1dbb      	adds	r3, r7, #6
 800b618:	2208      	movs	r2, #8
 800b61a:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800b61c:	4b22      	ldr	r3, [pc, #136]	@ (800b6a8 <BMP280_set_mode+0x98>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	224c      	movs	r2, #76	@ 0x4c
 800b622:	4313      	orrs	r3, r2
 800b624:	b2da      	uxtb	r2, r3
 800b626:	1d7b      	adds	r3, r7, #5
 800b628:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800b62a:	1d7a      	adds	r2, r7, #5
 800b62c:	2301      	movs	r3, #1
 800b62e:	2101      	movs	r1, #1
 800b630:	20f4      	movs	r0, #244	@ 0xf4
 800b632:	f7ff fd19 	bl	800b068 <WriteMemRegister>
 800b636:	0003      	movs	r3, r0
 800b638:	001a      	movs	r2, r3
 800b63a:	1dfb      	adds	r3, r7, #7
 800b63c:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800b63e:	f008 ff85 	bl	801454c <HAL_GetTick>
 800b642:	0003      	movs	r3, r0
 800b644:	22fa      	movs	r2, #250	@ 0xfa
 800b646:	0092      	lsls	r2, r2, #2
 800b648:	189a      	adds	r2, r3, r2
 800b64a:	4b18      	ldr	r3, [pc, #96]	@ (800b6ac <BMP280_set_mode+0x9c>)
 800b64c:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800b64e:	e016      	b.n	800b67e <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800b650:	1dba      	adds	r2, r7, #6
 800b652:	2301      	movs	r3, #1
 800b654:	2101      	movs	r1, #1
 800b656:	20f3      	movs	r0, #243	@ 0xf3
 800b658:	f7ff fd36 	bl	800b0c8 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800b65c:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <BMP280_set_mode+0x9c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	0018      	movs	r0, r3
 800b662:	f008 f9dd 	bl	8013a20 <TimestampIsReached>
 800b666:	1e03      	subs	r3, r0, #0
 800b668:	d006      	beq.n	800b678 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800b66a:	4a11      	ldr	r2, [pc, #68]	@ (800b6b0 <BMP280_set_mode+0xa0>)
 800b66c:	4b11      	ldr	r3, [pc, #68]	@ (800b6b4 <BMP280_set_mode+0xa4>)
 800b66e:	0019      	movs	r1, r3
 800b670:	2001      	movs	r0, #1
 800b672:	f008 fa2b 	bl	8013acc <CreateLine>
      break;
 800b676:	e008      	b.n	800b68a <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800b678:	2001      	movs	r0, #1
 800b67a:	f008 ff71 	bl	8014560 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800b67e:	1dbb      	adds	r3, r7, #6
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	001a      	movs	r2, r3
 800b684:	2308      	movs	r3, #8
 800b686:	4013      	ands	r3, r2
 800b688:	d1e2      	bne.n	800b650 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800b68a:	f008 ff5f 	bl	801454c <HAL_GetTick>
 800b68e:	0002      	movs	r2, r0
 800b690:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <BMP280_set_mode+0x9c>)
 800b692:	601a      	str	r2, [r3, #0]
  return rslt;
 800b694:	1dfb      	adds	r3, r7, #7
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	1e5a      	subs	r2, r3, #1
 800b69c:	4193      	sbcs	r3, r2
 800b69e:	b2db      	uxtb	r3, r3
}
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	b002      	add	sp, #8
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	200000a1 	.word	0x200000a1
 800b6ac:	20000d6c 	.word	0x20000d6c
 800b6b0:	0802c334 	.word	0x0802c334
 800b6b4:	0802c330 	.word	0x0802c330

0800b6b8 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800b6be:	1dba      	adds	r2, r7, #6
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	2101      	movs	r1, #1
 800b6c4:	20f4      	movs	r0, #244	@ 0xf4
 800b6c6:	f7ff fcff 	bl	800b0c8 <ReadMemRegister>
 800b6ca:	0003      	movs	r3, r0
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	1dfb      	adds	r3, r7, #7
 800b6d0:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800b6d2:	1dbb      	adds	r3, r7, #6
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	4013      	ands	r3, r2
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	1dbb      	adds	r3, r7, #6
 800b6de:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800b6e0:	f008 ff34 	bl	801454c <HAL_GetTick>
 800b6e4:	0003      	movs	r3, r0
 800b6e6:	330a      	adds	r3, #10
 800b6e8:	001a      	movs	r2, r3
 800b6ea:	4b08      	ldr	r3, [pc, #32]	@ (800b70c <BMP280_get_mode+0x54>)
 800b6ec:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800b6ee:	1dfb      	adds	r3, r7, #7
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	b25b      	sxtb	r3, r3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <BMP280_get_mode+0x46>
    bmpData = 255;
 800b6f8:	1dbb      	adds	r3, r7, #6
 800b6fa:	22ff      	movs	r2, #255	@ 0xff
 800b6fc:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800b6fe:	1dbb      	adds	r3, r7, #6
 800b700:	781b      	ldrb	r3, [r3, #0]
}
 800b702:	0018      	movs	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	b002      	add	sp, #8
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	20000d6c 	.word	0x20000d6c

0800b710 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800b710:	b5b0      	push	{r4, r5, r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800b716:	1d3a      	adds	r2, r7, #4
 800b718:	2306      	movs	r3, #6
 800b71a:	2101      	movs	r1, #1
 800b71c:	20f7      	movs	r0, #247	@ 0xf7
 800b71e:	f7ff fcd3 	bl	800b0c8 <ReadMemRegister>
 800b722:	0003      	movs	r3, r0
 800b724:	001a      	movs	r2, r3
 800b726:	230f      	movs	r3, #15
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800b72c:	1d3b      	adds	r3, r7, #4
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b80      	cmp	r3, #128	@ 0x80
 800b732:	d013      	beq.n	800b75c <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b734:	1d3b      	adds	r3, r7, #4
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	031a      	lsls	r2, r3, #12
 800b73a:	1d3b      	adds	r3, r7, #4
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	18d3      	adds	r3, r2, r3
 800b742:	1d3a      	adds	r2, r7, #4
 800b744:	7892      	ldrb	r2, [r2, #2]
 800b746:	0912      	lsrs	r2, r2, #4
 800b748:	b2d2      	uxtb	r2, r2
 800b74a:	189b      	adds	r3, r3, r2
 800b74c:	001a      	movs	r2, r3
 800b74e:	4b2e      	ldr	r3, [pc, #184]	@ (800b808 <BMP280_get_measurement_values+0xf8>)
 800b750:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800b752:	1d3b      	adds	r3, r7, #4
 800b754:	78db      	ldrb	r3, [r3, #3]
 800b756:	2b80      	cmp	r3, #128	@ 0x80
 800b758:	d035      	beq.n	800b7c6 <BMP280_get_measurement_values+0xb6>
 800b75a:	e01d      	b.n	800b798 <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800b75c:	4a2b      	ldr	r2, [pc, #172]	@ (800b80c <BMP280_get_measurement_values+0xfc>)
 800b75e:	4b2c      	ldr	r3, [pc, #176]	@ (800b810 <BMP280_get_measurement_values+0x100>)
 800b760:	0019      	movs	r1, r3
 800b762:	2001      	movs	r0, #1
 800b764:	f008 f9b2 	bl	8013acc <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b768:	1d3b      	adds	r3, r7, #4
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	001d      	movs	r5, r3
 800b76e:	1d3b      	adds	r3, r7, #4
 800b770:	785b      	ldrb	r3, [r3, #1]
 800b772:	0018      	movs	r0, r3
 800b774:	1d3b      	adds	r3, r7, #4
 800b776:	789b      	ldrb	r3, [r3, #2]
 800b778:	001c      	movs	r4, r3
 800b77a:	4b23      	ldr	r3, [pc, #140]	@ (800b808 <BMP280_get_measurement_values+0xf8>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a25      	ldr	r2, [pc, #148]	@ (800b814 <BMP280_get_measurement_values+0x104>)
 800b780:	4925      	ldr	r1, [pc, #148]	@ (800b818 <BMP280_get_measurement_values+0x108>)
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	9401      	str	r4, [sp, #4]
 800b786:	9000      	str	r0, [sp, #0]
 800b788:	002b      	movs	r3, r5
 800b78a:	2003      	movs	r0, #3
 800b78c:	f008 f99e 	bl	8013acc <CreateLine>
    SetAllBlueLED();
 800b790:	f007 f8ac 	bl	80128ec <SetAllBlueLED>
    return false;
 800b794:	2300      	movs	r3, #0
 800b796:	e033      	b.n	800b800 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b798:	1d3b      	adds	r3, r7, #4
 800b79a:	78db      	ldrb	r3, [r3, #3]
 800b79c:	031a      	lsls	r2, r3, #12
 800b79e:	1d3b      	adds	r3, r7, #4
 800b7a0:	791b      	ldrb	r3, [r3, #4]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	18d3      	adds	r3, r2, r3
 800b7a6:	1d3a      	adds	r2, r7, #4
 800b7a8:	7952      	ldrb	r2, [r2, #5]
 800b7aa:	0912      	lsrs	r2, r2, #4
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	189b      	adds	r3, r3, r2
 800b7b0:	001a      	movs	r2, r3
 800b7b2:	4b1a      	ldr	r3, [pc, #104]	@ (800b81c <BMP280_get_measurement_values+0x10c>)
 800b7b4:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b7b6:	230f      	movs	r3, #15
 800b7b8:	18fb      	adds	r3, r7, r3
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	4193      	sbcs	r3, r2
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	e01c      	b.n	800b800 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b7c6:	4a16      	ldr	r2, [pc, #88]	@ (800b820 <BMP280_get_measurement_values+0x110>)
 800b7c8:	4b11      	ldr	r3, [pc, #68]	@ (800b810 <BMP280_get_measurement_values+0x100>)
 800b7ca:	0019      	movs	r1, r3
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	f008 f97d 	bl	8013acc <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b7d2:	1d3b      	adds	r3, r7, #4
 800b7d4:	78db      	ldrb	r3, [r3, #3]
 800b7d6:	001d      	movs	r5, r3
 800b7d8:	1d3b      	adds	r3, r7, #4
 800b7da:	791b      	ldrb	r3, [r3, #4]
 800b7dc:	0018      	movs	r0, r3
 800b7de:	1d3b      	adds	r3, r7, #4
 800b7e0:	795b      	ldrb	r3, [r3, #5]
 800b7e2:	001c      	movs	r4, r3
 800b7e4:	4b0d      	ldr	r3, [pc, #52]	@ (800b81c <BMP280_get_measurement_values+0x10c>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b824 <BMP280_get_measurement_values+0x114>)
 800b7ea:	490b      	ldr	r1, [pc, #44]	@ (800b818 <BMP280_get_measurement_values+0x108>)
 800b7ec:	9302      	str	r3, [sp, #8]
 800b7ee:	9401      	str	r4, [sp, #4]
 800b7f0:	9000      	str	r0, [sp, #0]
 800b7f2:	002b      	movs	r3, r5
 800b7f4:	2003      	movs	r0, #3
 800b7f6:	f008 f969 	bl	8013acc <CreateLine>
    SetAllBlueLED();
 800b7fa:	f007 f877 	bl	80128ec <SetAllBlueLED>
    return false;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	0018      	movs	r0, r3
 800b802:	46bd      	mov	sp, r7
 800b804:	b004      	add	sp, #16
 800b806:	bdb0      	pop	{r4, r5, r7, pc}
 800b808:	20000d68 	.word	0x20000d68
 800b80c:	0802c360 	.word	0x0802c360
 800b810:	0802c330 	.word	0x0802c330
 800b814:	0802c38c 	.word	0x0802c38c
 800b818:	0802c040 	.word	0x0802c040
 800b81c:	20000d64 	.word	0x20000d64
 800b820:	0802c3d4 	.word	0x0802c3d4
 800b824:	0802c3f8 	.word	0x0802c3f8

0800b828 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b82e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a8 <BMP280_calc_temperature+0x80>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	10da      	asrs	r2, r3, #3
 800b838:	4b1c      	ldr	r3, [pc, #112]	@ (800b8ac <BMP280_calc_temperature+0x84>)
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	4a1a      	ldr	r2, [pc, #104]	@ (800b8ac <BMP280_calc_temperature+0x84>)
 800b842:	2102      	movs	r1, #2
 800b844:	5e52      	ldrsh	r2, [r2, r1]
 800b846:	4353      	muls	r3, r2
 800b848:	12db      	asrs	r3, r3, #11
 800b84a:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	111b      	asrs	r3, r3, #4
 800b850:	4a16      	ldr	r2, [pc, #88]	@ (800b8ac <BMP280_calc_temperature+0x84>)
 800b852:	8812      	ldrh	r2, [r2, #0]
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	1112      	asrs	r2, r2, #4
 800b85a:	4914      	ldr	r1, [pc, #80]	@ (800b8ac <BMP280_calc_temperature+0x84>)
 800b85c:	8809      	ldrh	r1, [r1, #0]
 800b85e:	1a52      	subs	r2, r2, r1
 800b860:	4353      	muls	r3, r2
 800b862:	131b      	asrs	r3, r3, #12
 800b864:	4a11      	ldr	r2, [pc, #68]	@ (800b8ac <BMP280_calc_temperature+0x84>)
 800b866:	2104      	movs	r1, #4
 800b868:	5e52      	ldrsh	r2, [r2, r1]
 800b86a:	4353      	muls	r3, r2
 800b86c:	139b      	asrs	r3, r3, #14
 800b86e:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	18d2      	adds	r2, r2, r3
 800b876:	4b0e      	ldr	r3, [pc, #56]	@ (800b8b0 <BMP280_calc_temperature+0x88>)
 800b878:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b87a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b0 <BMP280_calc_temperature+0x88>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	0013      	movs	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	189b      	adds	r3, r3, r2
 800b884:	3380      	adds	r3, #128	@ 0x80
 800b886:	121b      	asrs	r3, r3, #8
 800b888:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b88a:	68b8      	ldr	r0, [r7, #8]
 800b88c:	f7f5 ffcc 	bl	8001828 <__aeabi_i2f>
 800b890:	1c03      	adds	r3, r0, #0
 800b892:	4908      	ldr	r1, [pc, #32]	@ (800b8b4 <BMP280_calc_temperature+0x8c>)
 800b894:	1c18      	adds	r0, r3, #0
 800b896:	f7f5 fa05 	bl	8000ca4 <__aeabi_fdiv>
 800b89a:	1c03      	adds	r3, r0, #0
 800b89c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b89e:	687b      	ldr	r3, [r7, #4]
}
 800b8a0:	1c18      	adds	r0, r3, #0
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	b006      	add	sp, #24
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20000d64 	.word	0x20000d64
 800b8ac:	20000d44 	.word	0x20000d44
 800b8b0:	20000d60 	.word	0x20000d60
 800b8b4:	42c80000 	.word	0x42c80000

0800b8b8 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b8be:	4b4e      	ldr	r3, [pc, #312]	@ (800b9f8 <BMP280_calc_pressure+0x140>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b8c4:	4b4d      	ldr	r3, [pc, #308]	@ (800b9fc <BMP280_calc_pressure+0x144>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	105b      	asrs	r3, r3, #1
 800b8ca:	4a4d      	ldr	r2, [pc, #308]	@ (800ba00 <BMP280_calc_pressure+0x148>)
 800b8cc:	4694      	mov	ip, r2
 800b8ce:	4463      	add	r3, ip
 800b8d0:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	109b      	asrs	r3, r3, #2
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	1092      	asrs	r2, r2, #2
 800b8da:	4353      	muls	r3, r2
 800b8dc:	12db      	asrs	r3, r3, #11
 800b8de:	4a49      	ldr	r2, [pc, #292]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b8e0:	2110      	movs	r1, #16
 800b8e2:	5e52      	ldrsh	r2, [r2, r1]
 800b8e4:	4353      	muls	r3, r2
 800b8e6:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b8e8:	4b46      	ldr	r3, [pc, #280]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b8ea:	220e      	movs	r2, #14
 800b8ec:	5e9b      	ldrsh	r3, [r3, r2]
 800b8ee:	001a      	movs	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4353      	muls	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	18d3      	adds	r3, r2, r3
 800b8fa:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	109a      	asrs	r2, r3, #2
 800b900:	4b40      	ldr	r3, [pc, #256]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b902:	210c      	movs	r1, #12
 800b904:	5e5b      	ldrsh	r3, [r3, r1]
 800b906:	041b      	lsls	r3, r3, #16
 800b908:	18d3      	adds	r3, r2, r3
 800b90a:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b90c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b90e:	220a      	movs	r2, #10
 800b910:	5e9b      	ldrsh	r3, [r3, r2]
 800b912:	0019      	movs	r1, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	109b      	asrs	r3, r3, #2
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	1092      	asrs	r2, r2, #2
 800b91c:	4353      	muls	r3, r2
 800b91e:	135b      	asrs	r3, r3, #13
 800b920:	434b      	muls	r3, r1
 800b922:	10da      	asrs	r2, r3, #3
 800b924:	4b37      	ldr	r3, [pc, #220]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b926:	2108      	movs	r1, #8
 800b928:	5e5b      	ldrsh	r3, [r3, r1]
 800b92a:	0019      	movs	r1, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	434b      	muls	r3, r1
 800b930:	105b      	asrs	r3, r3, #1
 800b932:	18d3      	adds	r3, r2, r3
 800b934:	149b      	asrs	r3, r3, #18
 800b936:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2280      	movs	r2, #128	@ 0x80
 800b93c:	0212      	lsls	r2, r2, #8
 800b93e:	4694      	mov	ip, r2
 800b940:	4463      	add	r3, ip
 800b942:	4a30      	ldr	r2, [pc, #192]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b944:	88d2      	ldrh	r2, [r2, #6]
 800b946:	4353      	muls	r3, r2
 800b948:	13db      	asrs	r3, r3, #15
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <BMP280_calc_pressure+0x9e>
    return 0;
 800b952:	2300      	movs	r3, #0
 800b954:	e04b      	b.n	800b9ee <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2280      	movs	r2, #128	@ 0x80
 800b95a:	0352      	lsls	r2, r2, #13
 800b95c:	1ad2      	subs	r2, r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	131b      	asrs	r3, r3, #12
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	001a      	movs	r2, r3
 800b966:	4b28      	ldr	r3, [pc, #160]	@ (800ba08 <BMP280_calc_pressure+0x150>)
 800b968:	4353      	muls	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	db09      	blt.n	800b986 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	0011      	movs	r1, r2
 800b97a:	0018      	movs	r0, r3
 800b97c:	f7f4 fc12 	bl	80001a4 <__udivsi3>
 800b980:	0003      	movs	r3, r0
 800b982:	617b      	str	r3, [r7, #20]
 800b984:	e007      	b.n	800b996 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	0019      	movs	r1, r3
 800b98a:	6978      	ldr	r0, [r7, #20]
 800b98c:	f7f4 fc0a 	bl	80001a4 <__udivsi3>
 800b990:	0003      	movs	r3, r0
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b996:	4b1b      	ldr	r3, [pc, #108]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b998:	2216      	movs	r2, #22
 800b99a:	5e9b      	ldrsh	r3, [r3, r2]
 800b99c:	0019      	movs	r1, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	08db      	lsrs	r3, r3, #3
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	08d2      	lsrs	r2, r2, #3
 800b9a6:	4353      	muls	r3, r2
 800b9a8:	0b5b      	lsrs	r3, r3, #13
 800b9aa:	434b      	muls	r3, r1
 800b9ac:	131b      	asrs	r3, r3, #12
 800b9ae:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	089b      	lsrs	r3, r3, #2
 800b9b4:	001a      	movs	r2, r3
 800b9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b9b8:	2114      	movs	r1, #20
 800b9ba:	5e5b      	ldrsh	r3, [r3, r1]
 800b9bc:	4353      	muls	r3, r2
 800b9be:	135b      	asrs	r3, r3, #13
 800b9c0:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	18d3      	adds	r3, r2, r3
 800b9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800ba04 <BMP280_calc_pressure+0x14c>)
 800b9ca:	2112      	movs	r1, #18
 800b9cc:	5e52      	ldrsh	r2, [r2, r1]
 800b9ce:	189b      	adds	r3, r3, r2
 800b9d0:	111a      	asrs	r2, r3, #4
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	18d3      	adds	r3, r2, r3
 800b9d6:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f7f5 ff75 	bl	80018c8 <__aeabi_ui2f>
 800b9de:	1c03      	adds	r3, r0, #0
 800b9e0:	490a      	ldr	r1, [pc, #40]	@ (800ba0c <BMP280_calc_pressure+0x154>)
 800b9e2:	1c18      	adds	r0, r3, #0
 800b9e4:	f7f5 f95e 	bl	8000ca4 <__aeabi_fdiv>
 800b9e8:	1c03      	adds	r3, r0, #0
 800b9ea:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b9ec:	687b      	ldr	r3, [r7, #4]
}
 800b9ee:	1c18      	adds	r0, r3, #0
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	b006      	add	sp, #24
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	46c0      	nop			@ (mov r8, r8)
 800b9f8:	20000d68 	.word	0x20000d68
 800b9fc:	20000d60 	.word	0x20000d60
 800ba00:	ffff0600 	.word	0xffff0600
 800ba04:	20000d44 	.word	0x20000d44
 800ba08:	00000c35 	.word	0x00000c35
 800ba0c:	42c80000 	.word	0x42c80000

0800ba10 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800ba10:	b5b0      	push	{r4, r5, r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800ba16:	4bcc      	ldr	r3, [pc, #816]	@ (800bd48 <BMP_Upkeep+0x338>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f008 f800 	bl	8013a20 <TimestampIsReached>
 800ba20:	0003      	movs	r3, r0
 800ba22:	001a      	movs	r2, r3
 800ba24:	2301      	movs	r3, #1
 800ba26:	4053      	eors	r3, r2
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <BMP_Upkeep+0x24>
    return BMPState;
 800ba2e:	4bc7      	ldr	r3, [pc, #796]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	e1c2      	b.n	800bdba <BMP_Upkeep+0x3aa>
  }
  switch(BMPState) {
 800ba34:	4bc5      	ldr	r3, [pc, #788]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b09      	cmp	r3, #9
 800ba3a:	d900      	bls.n	800ba3e <BMP_Upkeep+0x2e>
 800ba3c:	e16d      	b.n	800bd1a <BMP_Upkeep+0x30a>
 800ba3e:	009a      	lsls	r2, r3, #2
 800ba40:	4bc3      	ldr	r3, [pc, #780]	@ (800bd50 <BMP_Upkeep+0x340>)
 800ba42:	18d3      	adds	r3, r2, r3
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800ba48:	4ac2      	ldr	r2, [pc, #776]	@ (800bd54 <BMP_Upkeep+0x344>)
 800ba4a:	4bc3      	ldr	r3, [pc, #780]	@ (800bd58 <BMP_Upkeep+0x348>)
 800ba4c:	0019      	movs	r1, r3
 800ba4e:	2003      	movs	r0, #3
 800ba50:	f008 f83c 	bl	8013acc <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 780000;  // about 4 times an hour if powered
 800ba54:	f008 fd7a 	bl	801454c <HAL_GetTick>
 800ba58:	0003      	movs	r3, r0
 800ba5a:	4ac0      	ldr	r2, [pc, #768]	@ (800bd5c <BMP_Upkeep+0x34c>)
 800ba5c:	189a      	adds	r2, r3, r2
 800ba5e:	4bba      	ldr	r3, [pc, #744]	@ (800bd48 <BMP_Upkeep+0x338>)
 800ba60:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800ba62:	4bbf      	ldr	r3, [pc, #764]	@ (800bd60 <BMP_Upkeep+0x350>)
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	4bbf      	ldr	r3, [pc, #764]	@ (800bd64 <BMP_Upkeep+0x354>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d100      	bne.n	800ba70 <BMP_Upkeep+0x60>
 800ba6e:	e160      	b.n	800bd32 <BMP_Upkeep+0x322>
      BMPState = BMP_STATE_WAIT;
 800ba70:	4bb6      	ldr	r3, [pc, #728]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800ba72:	2208      	movs	r2, #8
 800ba74:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ba76:	e15c      	b.n	800bd32 <BMP_Upkeep+0x322>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800ba78:	f002 f830 	bl	800dadc <getSensorLock>
 800ba7c:	1e03      	subs	r3, r0, #0
 800ba7e:	d000      	beq.n	800ba82 <BMP_Upkeep+0x72>
 800ba80:	e159      	b.n	800bd36 <BMP_Upkeep+0x326>
      break;
    }
    setSensorLock(BMP280);
 800ba82:	2003      	movs	r0, #3
 800ba84:	f002 f816 	bl	800dab4 <setSensorLock>
    BMP280_reset();
 800ba88:	f7ff fb6a 	bl	800b160 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800ba8c:	200a      	movs	r0, #10
 800ba8e:	f008 fd67 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 800ba92:	2000      	movs	r0, #0
 800ba94:	f002 f80e 	bl	800dab4 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800ba98:	4bac      	ldr	r3, [pc, #688]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	701a      	strb	r2, [r3, #0]
    break;
 800ba9e:	e18a      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800baa0:	f002 f81c 	bl	800dadc <getSensorLock>
 800baa4:	1e03      	subs	r3, r0, #0
 800baa6:	d000      	beq.n	800baaa <BMP_Upkeep+0x9a>
 800baa8:	e147      	b.n	800bd3a <BMP_Upkeep+0x32a>
      break;
    }
    setSensorLock(BMP280);
 800baaa:	2003      	movs	r0, #3
 800baac:	f002 f802 	bl	800dab4 <setSensorLock>
    if (BMP280_set_config()) {
 800bab0:	f7ff fd8a 	bl	800b5c8 <BMP280_set_config>
 800bab4:	1e03      	subs	r3, r0, #0
 800bab6:	d003      	beq.n	800bac0 <BMP_Upkeep+0xb0>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800bab8:	4ba4      	ldr	r3, [pc, #656]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800baba:	2202      	movs	r2, #2
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	e00f      	b.n	800bae0 <BMP_Upkeep+0xd0>
    }
    else {
      Error("Error while configuring BMP280");
 800bac0:	4aa9      	ldr	r2, [pc, #676]	@ (800bd68 <BMP_Upkeep+0x358>)
 800bac2:	4baa      	ldr	r3, [pc, #680]	@ (800bd6c <BMP_Upkeep+0x35c>)
 800bac4:	0019      	movs	r1, r3
 800bac6:	2001      	movs	r0, #1
 800bac8:	f008 f800 	bl	8013acc <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bacc:	f008 fd3e 	bl	801454c <HAL_GetTick>
 800bad0:	0003      	movs	r3, r0
 800bad2:	4aa7      	ldr	r2, [pc, #668]	@ (800bd70 <BMP_Upkeep+0x360>)
 800bad4:	189a      	adds	r2, r3, r2
 800bad6:	4b9c      	ldr	r3, [pc, #624]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bad8:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800bada:	4b9c      	ldr	r3, [pc, #624]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800badc:	2208      	movs	r2, #8
 800bade:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800bae0:	200a      	movs	r0, #10
 800bae2:	f008 fd3d 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 800bae6:	2000      	movs	r0, #0
 800bae8:	f001 ffe4 	bl	800dab4 <setSensorLock>
  break;
 800baec:	e163      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800baee:	f001 fff5 	bl	800dadc <getSensorLock>
 800baf2:	1e03      	subs	r3, r0, #0
 800baf4:	d030      	beq.n	800bb58 <BMP_Upkeep+0x148>
      uint8_t locktype = getSensorLock();
 800baf6:	1dfc      	adds	r4, r7, #7
 800baf8:	f001 fff0 	bl	800dadc <getSensorLock>
 800bafc:	0003      	movs	r3, r0
 800bafe:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800bb00:	1dfb      	adds	r3, r7, #7
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d019      	beq.n	800bb3c <BMP_Upkeep+0x12c>
 800bb08:	1dfb      	adds	r3, r7, #7
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d013      	beq.n	800bb38 <BMP_Upkeep+0x128>
 800bb10:	1dfb      	adds	r3, r7, #7
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b05      	cmp	r3, #5
 800bb16:	d00d      	beq.n	800bb34 <BMP_Upkeep+0x124>
 800bb18:	1dfb      	adds	r3, r7, #7
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d007      	beq.n	800bb30 <BMP_Upkeep+0x120>
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d101      	bne.n	800bb2c <BMP_Upkeep+0x11c>
 800bb28:	4b92      	ldr	r3, [pc, #584]	@ (800bd74 <BMP_Upkeep+0x364>)
 800bb2a:	e008      	b.n	800bb3e <BMP_Upkeep+0x12e>
 800bb2c:	4b92      	ldr	r3, [pc, #584]	@ (800bd78 <BMP_Upkeep+0x368>)
 800bb2e:	e006      	b.n	800bb3e <BMP_Upkeep+0x12e>
 800bb30:	4b92      	ldr	r3, [pc, #584]	@ (800bd7c <BMP_Upkeep+0x36c>)
 800bb32:	e004      	b.n	800bb3e <BMP_Upkeep+0x12e>
 800bb34:	4b92      	ldr	r3, [pc, #584]	@ (800bd80 <BMP_Upkeep+0x370>)
 800bb36:	e002      	b.n	800bb3e <BMP_Upkeep+0x12e>
 800bb38:	4b92      	ldr	r3, [pc, #584]	@ (800bd84 <BMP_Upkeep+0x374>)
 800bb3a:	e000      	b.n	800bb3e <BMP_Upkeep+0x12e>
 800bb3c:	4b92      	ldr	r3, [pc, #584]	@ (800bd88 <BMP_Upkeep+0x378>)
 800bb3e:	4a93      	ldr	r2, [pc, #588]	@ (800bd8c <BMP_Upkeep+0x37c>)
 800bb40:	4985      	ldr	r1, [pc, #532]	@ (800bd58 <BMP_Upkeep+0x348>)
 800bb42:	2003      	movs	r0, #3
 800bb44:	f007 ffc2 	bl	8013acc <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800bb48:	f008 fd00 	bl	801454c <HAL_GetTick>
 800bb4c:	0003      	movs	r3, r0
 800bb4e:	3361      	adds	r3, #97	@ 0x61
 800bb50:	001a      	movs	r2, r3
 800bb52:	4b7d      	ldr	r3, [pc, #500]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bb54:	601a      	str	r2, [r3, #0]
      break;
 800bb56:	e12e      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
    }
    if (getSensorLock() == FREE) {
 800bb58:	f001 ffc0 	bl	800dadc <getSensorLock>
 800bb5c:	1e03      	subs	r3, r0, #0
 800bb5e:	d105      	bne.n	800bb6c <BMP_Upkeep+0x15c>
      HAL_Delay(10);
 800bb60:	200a      	movs	r0, #10
 800bb62:	f008 fcfd 	bl	8014560 <HAL_Delay>
      setSensorLock(BMP280);
 800bb66:	2003      	movs	r0, #3
 800bb68:	f001 ffa4 	bl	800dab4 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800bb6c:	f7ff fd50 	bl	800b610 <BMP280_set_mode>
 800bb70:	1e03      	subs	r3, r0, #0
 800bb72:	d003      	beq.n	800bb7c <BMP_Upkeep+0x16c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800bb74:	4b75      	ldr	r3, [pc, #468]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bb76:	2205      	movs	r2, #5
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e00f      	b.n	800bb9c <BMP_Upkeep+0x18c>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800bb7c:	4a84      	ldr	r2, [pc, #528]	@ (800bd90 <BMP_Upkeep+0x380>)
 800bb7e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd6c <BMP_Upkeep+0x35c>)
 800bb80:	0019      	movs	r1, r3
 800bb82:	2001      	movs	r0, #1
 800bb84:	f007 ffa2 	bl	8013acc <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bb88:	f008 fce0 	bl	801454c <HAL_GetTick>
 800bb8c:	0003      	movs	r3, r0
 800bb8e:	4a78      	ldr	r2, [pc, #480]	@ (800bd70 <BMP_Upkeep+0x360>)
 800bb90:	189a      	adds	r2, r3, r2
 800bb92:	4b6d      	ldr	r3, [pc, #436]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bb94:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800bb96:	4b6d      	ldr	r3, [pc, #436]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bb98:	2208      	movs	r2, #8
 800bb9a:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800bb9c:	200a      	movs	r0, #10
 800bb9e:	f008 fcdf 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 800bba2:	2000      	movs	r0, #0
 800bba4:	f001 ff86 	bl	800dab4 <setSensorLock>
    break;
 800bba8:	e105      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800bbaa:	f001 ff97 	bl	800dadc <getSensorLock>
 800bbae:	1e03      	subs	r3, r0, #0
 800bbb0:	d000      	beq.n	800bbb4 <BMP_Upkeep+0x1a4>
 800bbb2:	e0c4      	b.n	800bd3e <BMP_Upkeep+0x32e>
      break;
    }
    HAL_Delay(10);
 800bbb4:	200a      	movs	r0, #10
 800bbb6:	f008 fcd3 	bl	8014560 <HAL_Delay>
    setSensorLock(BMP280);
 800bbba:	2003      	movs	r0, #3
 800bbbc:	f001 ff7a 	bl	800dab4 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800bbc0:	f7ff fda6 	bl	800b710 <BMP280_get_measurement_values>
 800bbc4:	1e03      	subs	r3, r0, #0
 800bbc6:	d003      	beq.n	800bbd0 <BMP_Upkeep+0x1c0>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800bbc8:	4b60      	ldr	r3, [pc, #384]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bbca:	2203      	movs	r2, #3
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	e00f      	b.n	800bbf0 <BMP_Upkeep+0x1e0>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800bbd0:	4a70      	ldr	r2, [pc, #448]	@ (800bd94 <BMP_Upkeep+0x384>)
 800bbd2:	4b66      	ldr	r3, [pc, #408]	@ (800bd6c <BMP_Upkeep+0x35c>)
 800bbd4:	0019      	movs	r1, r3
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	f007 ff78 	bl	8013acc <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bbdc:	f008 fcb6 	bl	801454c <HAL_GetTick>
 800bbe0:	0003      	movs	r3, r0
 800bbe2:	4a63      	ldr	r2, [pc, #396]	@ (800bd70 <BMP_Upkeep+0x360>)
 800bbe4:	189a      	adds	r2, r3, r2
 800bbe6:	4b58      	ldr	r3, [pc, #352]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bbe8:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800bbea:	4b58      	ldr	r3, [pc, #352]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bbec:	2208      	movs	r2, #8
 800bbee:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800bbf0:	200a      	movs	r0, #10
 800bbf2:	f008 fcb5 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f001 ff5c 	bl	800dab4 <setSensorLock>
  break;
 800bbfc:	e0db      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800bbfe:	f7ff fe13 	bl	800b828 <BMP280_calc_temperature>
 800bc02:	1c03      	adds	r3, r0, #0
 800bc04:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800bc06:	f7ff fe57 	bl	800b8b8 <BMP280_calc_pressure>
 800bc0a:	1c03      	adds	r3, r0, #0
 800bc0c:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800bc0e:	4962      	ldr	r1, [pc, #392]	@ (800bd98 <BMP_Upkeep+0x388>)
 800bc10:	68b8      	ldr	r0, [r7, #8]
 800bc12:	f7f4 fca1 	bl	8000558 <__aeabi_fcmpgt>
 800bc16:	1e03      	subs	r3, r0, #0
 800bc18:	d049      	beq.n	800bcae <BMP_Upkeep+0x29e>
 800bc1a:	4960      	ldr	r1, [pc, #384]	@ (800bd9c <BMP_Upkeep+0x38c>)
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f7f4 fc87 	bl	8000530 <__aeabi_fcmplt>
 800bc22:	1e03      	subs	r3, r0, #0
 800bc24:	d043      	beq.n	800bcae <BMP_Upkeep+0x29e>
      bmp280samplecounter++;
 800bc26:	4b5e      	ldr	r3, [pc, #376]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b5c      	ldr	r3, [pc, #368]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc30:	701a      	strb	r2, [r3, #0]
      if (bmp280samplecounter == 2) {
 800bc32:	4b5b      	ldr	r3, [pc, #364]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d114      	bne.n	800bc64 <BMP_Upkeep+0x254>
        Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800bc3a:	68b8      	ldr	r0, [r7, #8]
 800bc3c:	f7f7 fe2a 	bl	8003894 <__aeabi_f2d>
 800bc40:	0004      	movs	r4, r0
 800bc42:	000d      	movs	r5, r1
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7f7 fe25 	bl	8003894 <__aeabi_f2d>
 800bc4a:	0002      	movs	r2, r0
 800bc4c:	000b      	movs	r3, r1
 800bc4e:	4855      	ldr	r0, [pc, #340]	@ (800bda4 <BMP_Upkeep+0x394>)
 800bc50:	4955      	ldr	r1, [pc, #340]	@ (800bda8 <BMP_Upkeep+0x398>)
 800bc52:	9202      	str	r2, [sp, #8]
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	9400      	str	r4, [sp, #0]
 800bc58:	9501      	str	r5, [sp, #4]
 800bc5a:	0002      	movs	r2, r0
 800bc5c:	2002      	movs	r0, #2
 800bc5e:	f007 ff35 	bl	8013acc <CreateLine>
 800bc62:	e006      	b.n	800bc72 <BMP_Upkeep+0x262>
      }
      else {
        if (bmp280samplecounter == 11) {
 800bc64:	4b4e      	ldr	r3, [pc, #312]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	2b0b      	cmp	r3, #11
 800bc6a:	d102      	bne.n	800bc72 <BMP_Upkeep+0x262>
          bmp280samplecounter = 0;
 800bc6c:	4b4c      	ldr	r3, [pc, #304]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
        }
      }


      setBMP280(airtemp, airhpa);
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	1c11      	adds	r1, r2, #0
 800bc78:	1c18      	adds	r0, r3, #0
 800bc7a:	f7f8 ff29 	bl	8004ad0 <setBMP280>
      if (Check_USB_PowerOn()) {
 800bc7e:	f7fd fd4f 	bl	8009720 <Check_USB_PowerOn>
 800bc82:	1e03      	subs	r3, r0, #0
 800bc84:	d00a      	beq.n	800bc9c <BMP_Upkeep+0x28c>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800bc86:	f008 fc61 	bl	801454c <HAL_GetTick>
 800bc8a:	0003      	movs	r3, r0
 800bc8c:	4a47      	ldr	r2, [pc, #284]	@ (800bdac <BMP_Upkeep+0x39c>)
 800bc8e:	189a      	adds	r2, r3, r2
 800bc90:	4b2d      	ldr	r3, [pc, #180]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bc92:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800bc94:	4b42      	ldr	r3, [pc, #264]	@ (800bda0 <BMP_Upkeep+0x390>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bc9a:	e015      	b.n	800bcc8 <BMP_Upkeep+0x2b8>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800bc9c:	f008 fc56 	bl	801454c <HAL_GetTick>
 800bca0:	0003      	movs	r3, r0
 800bca2:	22fa      	movs	r2, #250	@ 0xfa
 800bca4:	0092      	lsls	r2, r2, #2
 800bca6:	189a      	adds	r2, r3, r2
 800bca8:	4b27      	ldr	r3, [pc, #156]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bcaa:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800bcac:	e00c      	b.n	800bcc8 <BMP_Upkeep+0x2b8>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800bcae:	4a40      	ldr	r2, [pc, #256]	@ (800bdb0 <BMP_Upkeep+0x3a0>)
 800bcb0:	4b2e      	ldr	r3, [pc, #184]	@ (800bd6c <BMP_Upkeep+0x35c>)
 800bcb2:	0019      	movs	r1, r3
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f007 ff09 	bl	8013acc <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bcba:	f008 fc47 	bl	801454c <HAL_GetTick>
 800bcbe:	0003      	movs	r3, r0
 800bcc0:	4a2b      	ldr	r2, [pc, #172]	@ (800bd70 <BMP_Upkeep+0x360>)
 800bcc2:	189a      	adds	r2, r3, r2
 800bcc4:	4b20      	ldr	r3, [pc, #128]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bcc6:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800bcc8:	4b20      	ldr	r3, [pc, #128]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bcca:	2208      	movs	r2, #8
 800bccc:	701a      	strb	r2, [r3, #0]
    break;
 800bcce:	e072      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800bcd0:	4b1e      	ldr	r3, [pc, #120]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bcd2:	2209      	movs	r2, #9
 800bcd4:	701a      	strb	r2, [r3, #0]
    break;
 800bcd6:	e06e      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800bcd8:	f001 ff00 	bl	800dadc <getSensorLock>
 800bcdc:	1e03      	subs	r3, r0, #0
 800bcde:	d130      	bne.n	800bd42 <BMP_Upkeep+0x332>
      break;
    }
    setSensorLock(BMP280);
 800bce0:	2003      	movs	r0, #3
 800bce2:	f001 fee7 	bl	800dab4 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800bce6:	f7ff fce7 	bl	800b6b8 <BMP280_get_mode>
 800bcea:	0003      	movs	r3, r0
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d103      	bne.n	800bcf8 <BMP_Upkeep+0x2e8>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800bcf0:	4b16      	ldr	r3, [pc, #88]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	701a      	strb	r2, [r3, #0]
 800bcf6:	e002      	b.n	800bcfe <BMP_Upkeep+0x2ee>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800bcf8:	4b14      	ldr	r3, [pc, #80]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800bcfe:	200a      	movs	r0, #10
 800bd00:	f008 fc2e 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 800bd04:	2000      	movs	r0, #0
 800bd06:	f001 fed5 	bl	800dab4 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800bd0a:	f008 fc1f 	bl	801454c <HAL_GetTick>
 800bd0e:	0003      	movs	r3, r0
 800bd10:	3317      	adds	r3, #23
 800bd12:	001a      	movs	r2, r3
 800bd14:	4b0c      	ldr	r3, [pc, #48]	@ (800bd48 <BMP_Upkeep+0x338>)
 800bd16:	601a      	str	r2, [r3, #0]
    break;
 800bd18:	e04d      	b.n	800bdb6 <BMP_Upkeep+0x3a6>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800bd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd4c <BMP_Upkeep+0x33c>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800bd20:	f001 fedc 	bl	800dadc <getSensorLock>
 800bd24:	0003      	movs	r3, r0
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d144      	bne.n	800bdb4 <BMP_Upkeep+0x3a4>
      setSensorLock(FREE);
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	f001 fec2 	bl	800dab4 <setSensorLock>
    }
    break;
 800bd30:	e040      	b.n	800bdb4 <BMP_Upkeep+0x3a4>
    break;
 800bd32:	46c0      	nop			@ (mov r8, r8)
 800bd34:	e03f      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
      break;
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	e03d      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
      break;
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	e03b      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
      break;
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	e039      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
      break;
 800bd42:	46c0      	nop			@ (mov r8, r8)
 800bd44:	e037      	b.n	800bdb6 <BMP_Upkeep+0x3a6>
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	20000d6c 	.word	0x20000d6c
 800bd4c:	200000a2 	.word	0x200000a2
 800bd50:	0802df80 	.word	0x0802df80
 800bd54:	0802c440 	.word	0x0802c440
 800bd58:	0802c040 	.word	0x0802c040
 800bd5c:	000be6e0 	.word	0x000be6e0
 800bd60:	20000c96 	.word	0x20000c96
 800bd64:	20000d70 	.word	0x20000d70
 800bd68:	0802c47c 	.word	0x0802c47c
 800bd6c:	0802c330 	.word	0x0802c330
 800bd70:	00002710 	.word	0x00002710
 800bd74:	0802c49c 	.word	0x0802c49c
 800bd78:	0802c4a4 	.word	0x0802c4a4
 800bd7c:	0802c4ac 	.word	0x0802c4ac
 800bd80:	0802c4b4 	.word	0x0802c4b4
 800bd84:	0802c4bc 	.word	0x0802c4bc
 800bd88:	0802c4c4 	.word	0x0802c4c4
 800bd8c:	0802c4cc 	.word	0x0802c4cc
 800bd90:	0802c4f4 	.word	0x0802c4f4
 800bd94:	0802c520 	.word	0x0802c520
 800bd98:	44548000 	.word	0x44548000
 800bd9c:	44898000 	.word	0x44898000
 800bda0:	20000d5c 	.word	0x20000d5c
 800bda4:	0802c558 	.word	0x0802c558
 800bda8:	0802c020 	.word	0x0802c020
 800bdac:	0000ea60 	.word	0x0000ea60
 800bdb0:	0802c594 	.word	0x0802c594
    break;
 800bdb4:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800bdb6:	4b03      	ldr	r3, [pc, #12]	@ (800bdc4 <BMP_Upkeep+0x3b4>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
}
 800bdba:	0018      	movs	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	b004      	add	sp, #16
 800bdc0:	bdb0      	pop	{r4, r5, r7, pc}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	200000a2 	.word	0x200000a2

0800bdc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bdce:	4b10      	ldr	r3, [pc, #64]	@ (800be10 <MX_DMA_Init+0x48>)
 800bdd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdd2:	4b0f      	ldr	r3, [pc, #60]	@ (800be10 <MX_DMA_Init+0x48>)
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800bdda:	4b0d      	ldr	r3, [pc, #52]	@ (800be10 <MX_DMA_Init+0x48>)
 800bddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdde:	2201      	movs	r2, #1
 800bde0:	4013      	ands	r3, r2
 800bde2:	607b      	str	r3, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800bde6:	2200      	movs	r2, #0
 800bde8:	2100      	movs	r1, #0
 800bdea:	200a      	movs	r0, #10
 800bdec:	f009 f852 	bl	8014e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800bdf0:	200a      	movs	r0, #10
 800bdf2:	f009 f864 	bl	8014ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2103      	movs	r1, #3
 800bdfa:	200b      	movs	r0, #11
 800bdfc:	f009 f84a 	bl	8014e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800be00:	200b      	movs	r0, #11
 800be02:	f009 f85c 	bl	8014ebe <HAL_NVIC_EnableIRQ>

}
 800be06:	46c0      	nop			@ (mov r8, r8)
 800be08:	46bd      	mov	sp, r7
 800be0a:	b002      	add	sp, #8
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	46c0      	nop			@ (mov r8, r8)
 800be10:	40021000 	.word	0x40021000

0800be14 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800be14:	b590      	push	{r4, r7, lr}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	1dbb      	adds	r3, r7, #6
 800be20:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800be22:	4b17      	ldr	r3, [pc, #92]	@ (800be80 <WriteUint8ArrayEeprom+0x6c>)
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800be28:	f009 fbc6 	bl	80155b8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800be2c:	2316      	movs	r3, #22
 800be2e:	18fb      	adds	r3, r7, r3
 800be30:	2200      	movs	r2, #0
 800be32:	801a      	strh	r2, [r3, #0]
 800be34:	e015      	b.n	800be62 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800be36:	4b12      	ldr	r3, [pc, #72]	@ (800be80 <WriteUint8ArrayEeprom+0x6c>)
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	2416      	movs	r4, #22
 800be3c:	193b      	adds	r3, r7, r4
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	18d3      	adds	r3, r2, r3
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	001a      	movs	r2, r3
 800be48:	2000      	movs	r0, #0
 800be4a:	f009 fc1d 	bl	8015688 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800be4e:	4b0c      	ldr	r3, [pc, #48]	@ (800be80 <WriteUint8ArrayEeprom+0x6c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <WriteUint8ArrayEeprom+0x6c>)
 800be56:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800be58:	193b      	adds	r3, r7, r4
 800be5a:	881a      	ldrh	r2, [r3, #0]
 800be5c:	193b      	adds	r3, r7, r4
 800be5e:	3201      	adds	r2, #1
 800be60:	801a      	strh	r2, [r3, #0]
 800be62:	2316      	movs	r3, #22
 800be64:	18fa      	adds	r2, r7, r3
 800be66:	1dbb      	adds	r3, r7, #6
 800be68:	8812      	ldrh	r2, [r2, #0]
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3e2      	bcc.n	800be36 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800be70:	f009 fbd0 	bl	8015614 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800be74:	4b02      	ldr	r3, [pc, #8]	@ (800be80 <WriteUint8ArrayEeprom+0x6c>)
 800be76:	681b      	ldr	r3, [r3, #0]
}
 800be78:	0018      	movs	r0, r3
 800be7a:	46bd      	mov	sp, r7
 800be7c:	b007      	add	sp, #28
 800be7e:	bd90      	pop	{r4, r7, pc}
 800be80:	20000d94 	.word	0x20000d94

0800be84 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	0019      	movs	r1, r3
 800be90:	1dbb      	adds	r3, r7, #6
 800be92:	801a      	strh	r2, [r3, #0]
 800be94:	1d3b      	adds	r3, r7, #4
 800be96:	1c0a      	adds	r2, r1, #0
 800be98:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800be9a:	1dba      	adds	r2, r7, #6
 800be9c:	1d3b      	adds	r3, r7, #4
 800be9e:	8812      	ldrh	r2, [r2, #0]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d806      	bhi.n	800beb4 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800bea6:	1dbb      	adds	r3, r7, #6
 800bea8:	881a      	ldrh	r2, [r3, #0]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	0018      	movs	r0, r3
 800beb0:	f7ff ffb0 	bl	800be14 <WriteUint8ArrayEeprom>
    }
}
 800beb4:	46c0      	nop			@ (mov r8, r8)
 800beb6:	46bd      	mov	sp, r7
 800beb8:	b004      	add	sp, #16
 800beba:	bd80      	pop	{r7, pc}

0800bebc <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	1dbb      	adds	r3, r7, #6
 800bec8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800beca:	2316      	movs	r3, #22
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	2200      	movs	r2, #0
 800bed0:	801a      	strh	r2, [r3, #0]
 800bed2:	e010      	b.n	800bef6 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800bed4:	2016      	movs	r0, #22
 800bed6:	183b      	adds	r3, r7, r0
 800bed8:	881a      	ldrh	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	18d3      	adds	r3, r2, r3
 800bede:	0019      	movs	r1, r3
 800bee0:	183b      	adds	r3, r7, r0
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	18d3      	adds	r3, r2, r3
 800bee8:	780a      	ldrb	r2, [r1, #0]
 800beea:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800beec:	183b      	adds	r3, r7, r0
 800beee:	881a      	ldrh	r2, [r3, #0]
 800bef0:	183b      	adds	r3, r7, r0
 800bef2:	3201      	adds	r2, #1
 800bef4:	801a      	strh	r2, [r3, #0]
 800bef6:	2316      	movs	r3, #22
 800bef8:	18fa      	adds	r2, r7, r3
 800befa:	1dbb      	adds	r3, r7, #6
 800befc:	8812      	ldrh	r2, [r2, #0]
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d3e7      	bcc.n	800bed4 <ReadUint8ArrayEEprom+0x18>
    }
}
 800bf04:	46c0      	nop			@ (mov r8, r8)
 800bf06:	46c0      	nop			@ (mov r8, r8)
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	b006      	add	sp, #24
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800bf0e:	b590      	push	{r4, r7, lr}
 800bf10:	b085      	sub	sp, #20
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	000a      	movs	r2, r1
 800bf18:	1cbb      	adds	r3, r7, #2
 800bf1a:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800bf1c:	f009 fb4c 	bl	80155b8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800bf20:	230e      	movs	r3, #14
 800bf22:	18fb      	adds	r3, r7, r3
 800bf24:	2200      	movs	r2, #0
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	e00c      	b.n	800bf44 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800bf2a:	240e      	movs	r4, #14
 800bf2c:	193b      	adds	r3, r7, r4
 800bf2e:	881a      	ldrh	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	18d3      	adds	r3, r2, r3
 800bf34:	0018      	movs	r0, r3
 800bf36:	f009 fb7b 	bl	8015630 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800bf3a:	193b      	adds	r3, r7, r4
 800bf3c:	193a      	adds	r2, r7, r4
 800bf3e:	8812      	ldrh	r2, [r2, #0]
 800bf40:	3204      	adds	r2, #4
 800bf42:	801a      	strh	r2, [r3, #0]
 800bf44:	230e      	movs	r3, #14
 800bf46:	18fa      	adds	r2, r7, r3
 800bf48:	1cbb      	adds	r3, r7, #2
 800bf4a:	8812      	ldrh	r2, [r2, #0]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d3eb      	bcc.n	800bf2a <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800bf52:	f009 fb5f 	bl	8015614 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800bf56:	46c0      	nop			@ (mov r8, r8)
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	b005      	add	sp, #20
 800bf5c:	bd90      	pop	{r4, r7, pc}
	...

0800bf60 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf70:	d901      	bls.n	800bf76 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800bf72:	237f      	movs	r3, #127	@ 0x7f
 800bf74:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800bf76:	2017      	movs	r0, #23
 800bf78:	183b      	adds	r3, r7, r0
 800bf7a:	490d      	ldr	r1, [pc, #52]	@ (800bfb0 <accessLUT10log10+0x50>)
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	188a      	adds	r2, r1, r2
 800bf80:	7812      	ldrb	r2, [r2, #0]
 800bf82:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800bf84:	0001      	movs	r1, r0
 800bf86:	187b      	adds	r3, r7, r1
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	4113      	asrs	r3, r2
 800bf8e:	001a      	movs	r2, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2106      	movs	r1, #6
 800bf9e:	408b      	lsls	r3, r1
 800bfa0:	1ad2      	subs	r2, r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	601a      	str	r2, [r3, #0]
}
 800bfa6:	46c0      	nop			@ (mov r8, r8)
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	b006      	add	sp, #24
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	46c0      	nop			@ (mov r8, r8)
 800bfb0:	0802dfa8 	.word	0x0802dfa8

0800bfb4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800bfb4:	b5b0      	push	{r4, r5, r7, lr}
 800bfb6:	b090      	sub	sp, #64	@ 0x40
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6138      	str	r0, [r7, #16]
 800bfbc:	6179      	str	r1, [r7, #20]
 800bfbe:	60fa      	str	r2, [r7, #12]
 800bfc0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800bfc2:	2308      	movs	r3, #8
 800bfc4:	001a      	movs	r2, r3
 800bfc6:	3a20      	subs	r2, #32
 800bfc8:	2a00      	cmp	r2, #0
 800bfca:	db03      	blt.n	800bfd4 <efficient10log10+0x20>
 800bfcc:	2101      	movs	r1, #1
 800bfce:	4091      	lsls	r1, r2
 800bfd0:	000d      	movs	r5, r1
 800bfd2:	e008      	b.n	800bfe6 <efficient10log10+0x32>
 800bfd4:	2220      	movs	r2, #32
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	2101      	movs	r1, #1
 800bfda:	40d1      	lsrs	r1, r2
 800bfdc:	000a      	movs	r2, r1
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4099      	lsls	r1, r3
 800bfe2:	000d      	movs	r5, r1
 800bfe4:	4315      	orrs	r5, r2
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	409a      	lsls	r2, r3
 800bfea:	0014      	movs	r4, r2
 800bfec:	2201      	movs	r2, #1
 800bfee:	4252      	negs	r2, r2
 800bff0:	17d3      	asrs	r3, r2, #31
 800bff2:	1912      	adds	r2, r2, r4
 800bff4:	416b      	adcs	r3, r5
 800bff6:	633a      	str	r2, [r7, #48]	@ 0x30
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800bffa:	2336      	movs	r3, #54	@ 0x36
 800bffc:	2208      	movs	r2, #8
 800bffe:	189b      	adds	r3, r3, r2
 800c000:	19db      	adds	r3, r3, r7
 800c002:	2200      	movs	r2, #0
 800c004:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c006:	e017      	b.n	800c038 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	07db      	lsls	r3, r3, #31
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	0852      	lsrs	r2, r2, #1
 800c010:	603a      	str	r2, [r7, #0]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	431a      	orrs	r2, r3
 800c016:	603a      	str	r2, [r7, #0]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	607b      	str	r3, [r7, #4]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	687c      	ldr	r4, [r7, #4]
 800c022:	613b      	str	r3, [r7, #16]
 800c024:	617c      	str	r4, [r7, #20]
        bShift++;
 800c026:	2136      	movs	r1, #54	@ 0x36
 800c028:	2008      	movs	r0, #8
 800c02a:	180b      	adds	r3, r1, r0
 800c02c:	19db      	adds	r3, r3, r7
 800c02e:	881a      	ldrh	r2, [r3, #0]
 800c030:	180b      	adds	r3, r1, r0
 800c032:	19db      	adds	r3, r3, r7
 800c034:	3201      	adds	r2, #1
 800c036:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d8e3      	bhi.n	800c008 <efficient10log10+0x54>
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c044:	429a      	cmp	r2, r3
 800c046:	d103      	bne.n	800c050 <efficient10log10+0x9c>
 800c048:	693a      	ldr	r2, [r7, #16]
 800c04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d8db      	bhi.n	800c008 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	2308      	movs	r3, #8
 800c054:	3b01      	subs	r3, #1
 800c056:	2101      	movs	r1, #1
 800c058:	4099      	lsls	r1, r3
 800c05a:	000b      	movs	r3, r1
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c068:	231c      	movs	r3, #28
 800c06a:	2408      	movs	r4, #8
 800c06c:	191b      	adds	r3, r3, r4
 800c06e:	19da      	adds	r2, r3, r7
 800c070:	2320      	movs	r3, #32
 800c072:	191b      	adds	r3, r3, r4
 800c074:	19d9      	adds	r1, r3, r7
 800c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c078:	0018      	movs	r0, r3
 800c07a:	f7ff ff71 	bl	800bf60 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c07e:	2215      	movs	r2, #21
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c084:	2036      	movs	r0, #54	@ 0x36
 800c086:	1902      	adds	r2, r0, r4
 800c088:	19d2      	adds	r2, r2, r7
 800c08a:	8812      	ldrh	r2, [r2, #0]
 800c08c:	2103      	movs	r1, #3
 800c08e:	434a      	muls	r2, r1
 800c090:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c092:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c094:	0021      	movs	r1, r4
 800c096:	1843      	adds	r3, r0, r1
 800c098:	19db      	adds	r3, r3, r7
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	2201      	movs	r2, #1
 800c09e:	4353      	muls	r3, r2
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	4113      	asrs	r3, r2
 800c0a4:	001a      	movs	r2, r3
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a8:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c0aa:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c0ac:	2314      	movs	r3, #20
 800c0ae:	185b      	adds	r3, r3, r1
 800c0b0:	19da      	adds	r2, r3, r7
 800c0b2:	2318      	movs	r3, #24
 800c0b4:	185b      	adds	r3, r3, r1
 800c0b6:	19db      	adds	r3, r3, r7
 800c0b8:	0011      	movs	r1, r2
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f000 f80a 	bl	800c0d4 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c0c0:	6a3a      	ldr	r2, [r7, #32]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	601a      	str	r2, [r3, #0]
}
 800c0cc:	46c0      	nop			@ (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b010      	add	sp, #64	@ 0x40
 800c0d2:	bdb0      	pop	{r4, r5, r7, pc}

0800c0d4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c0de:	e00a      	b.n	800c0f6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3b0a      	subs	r3, #10
 800c0f0:	001a      	movs	r2, r3
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b09      	cmp	r3, #9
 800c0fc:	dcf0      	bgt.n	800c0e0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c0fe:	e00a      	b.n	800c116 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	1e5a      	subs	r2, r3, #1
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	330a      	adds	r3, #10
 800c110:	001a      	movs	r2, r3
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3309      	adds	r3, #9
 800c11c:	dbf0      	blt.n	800c100 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	da0f      	bge.n	800c146 <correctIntFracNumber+0x72>
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd0b      	ble.n	800c146 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3b0a      	subs	r3, #10
 800c13e:	001a      	movs	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c144:	e012      	b.n	800c16c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dd0e      	ble.n	800c16c <correctIntFracNumber+0x98>
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	da0a      	bge.n	800c16c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	1e5a      	subs	r2, r3, #1
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	330a      	adds	r3, #10
 800c166:	001a      	movs	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	601a      	str	r2, [r3, #0]
}
 800c16c:	46c0      	nop			@ (mov r8, r8)
 800c16e:	46bd      	mov	sp, r7
 800c170:	b002      	add	sp, #8
 800c172:	bd80      	pop	{r7, pc}

0800c174 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c174:	b590      	push	{r4, r7, lr}
 800c176:	b08b      	sub	sp, #44	@ 0x2c
 800c178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c17a:	2414      	movs	r4, #20
 800c17c:	193b      	adds	r3, r7, r4
 800c17e:	0018      	movs	r0, r3
 800c180:	2314      	movs	r3, #20
 800c182:	001a      	movs	r2, r3
 800c184:	2100      	movs	r1, #0
 800c186:	f019 ff95 	bl	80260b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c18a:	4b8a      	ldr	r3, [pc, #552]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18e:	4b89      	ldr	r3, [pc, #548]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c190:	2104      	movs	r1, #4
 800c192:	430a      	orrs	r2, r1
 800c194:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c196:	4b87      	ldr	r3, [pc, #540]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19a:	2204      	movs	r2, #4
 800c19c:	4013      	ands	r3, r2
 800c19e:	613b      	str	r3, [r7, #16]
 800c1a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c1a2:	4b84      	ldr	r3, [pc, #528]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1a6:	4b83      	ldr	r3, [pc, #524]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1a8:	2180      	movs	r1, #128	@ 0x80
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c1ae:	4b81      	ldr	r3, [pc, #516]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b2:	2280      	movs	r2, #128	@ 0x80
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1ba:	4b7e      	ldr	r3, [pc, #504]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1be:	4b7d      	ldr	r3, [pc, #500]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c1c6:	4b7b      	ldr	r3, [pc, #492]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1d2:	4b78      	ldr	r3, [pc, #480]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d6:	4b77      	ldr	r3, [pc, #476]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1d8:	2102      	movs	r1, #2
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c1de:	4b75      	ldr	r3, [pc, #468]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1ea:	4b72      	ldr	r3, [pc, #456]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ee:	4b71      	ldr	r3, [pc, #452]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1f0:	2108      	movs	r1, #8
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c1f6:	4b6f      	ldr	r3, [pc, #444]	@ (800c3b4 <MX_GPIO_Init+0x240>)
 800c1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fa:	2208      	movs	r2, #8
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c202:	4b6d      	ldr	r3, [pc, #436]	@ (800c3b8 <MX_GPIO_Init+0x244>)
 800c204:	2201      	movs	r2, #1
 800c206:	2101      	movs	r1, #1
 800c208:	0018      	movs	r0, r3
 800c20a:	f009 fc30 	bl	8015a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c20e:	4b6a      	ldr	r3, [pc, #424]	@ (800c3b8 <MX_GPIO_Init+0x244>)
 800c210:	2200      	movs	r2, #0
 800c212:	2102      	movs	r1, #2
 800c214:	0018      	movs	r0, r3
 800c216:	f009 fc2a 	bl	8015a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c21a:	4968      	ldr	r1, [pc, #416]	@ (800c3bc <MX_GPIO_Init+0x248>)
 800c21c:	4b68      	ldr	r3, [pc, #416]	@ (800c3c0 <MX_GPIO_Init+0x24c>)
 800c21e:	2201      	movs	r2, #1
 800c220:	0018      	movs	r0, r3
 800c222:	f009 fc24 	bl	8015a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c226:	2380      	movs	r3, #128	@ 0x80
 800c228:	011b      	lsls	r3, r3, #4
 800c22a:	4866      	ldr	r0, [pc, #408]	@ (800c3c4 <MX_GPIO_Init+0x250>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	0019      	movs	r1, r3
 800c230:	f009 fc1d 	bl	8015a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c234:	2380      	movs	r3, #128	@ 0x80
 800c236:	015b      	lsls	r3, r3, #5
 800c238:	4862      	ldr	r0, [pc, #392]	@ (800c3c4 <MX_GPIO_Init+0x250>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	0019      	movs	r1, r3
 800c23e:	f009 fc16 	bl	8015a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c242:	193b      	adds	r3, r7, r4
 800c244:	4a60      	ldr	r2, [pc, #384]	@ (800c3c8 <MX_GPIO_Init+0x254>)
 800c246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c248:	193b      	adds	r3, r7, r4
 800c24a:	2203      	movs	r2, #3
 800c24c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c24e:	193b      	adds	r3, r7, r4
 800c250:	2200      	movs	r2, #0
 800c252:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c254:	193b      	adds	r3, r7, r4
 800c256:	4a5b      	ldr	r2, [pc, #364]	@ (800c3c4 <MX_GPIO_Init+0x250>)
 800c258:	0019      	movs	r1, r3
 800c25a:	0010      	movs	r0, r2
 800c25c:	f009 fa6c 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c260:	193b      	adds	r3, r7, r4
 800c262:	2203      	movs	r2, #3
 800c264:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c266:	193b      	adds	r3, r7, r4
 800c268:	2201      	movs	r2, #1
 800c26a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26c:	193b      	adds	r3, r7, r4
 800c26e:	2200      	movs	r2, #0
 800c270:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c272:	193b      	adds	r3, r7, r4
 800c274:	2200      	movs	r2, #0
 800c276:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c278:	193b      	adds	r3, r7, r4
 800c27a:	4a4f      	ldr	r2, [pc, #316]	@ (800c3b8 <MX_GPIO_Init+0x244>)
 800c27c:	0019      	movs	r1, r3
 800c27e:	0010      	movs	r0, r2
 800c280:	f009 fa5a 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c284:	193b      	adds	r3, r7, r4
 800c286:	2270      	movs	r2, #112	@ 0x70
 800c288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c28a:	193b      	adds	r3, r7, r4
 800c28c:	2203      	movs	r2, #3
 800c28e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c290:	193b      	adds	r3, r7, r4
 800c292:	2200      	movs	r2, #0
 800c294:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c296:	193a      	adds	r2, r7, r4
 800c298:	23a0      	movs	r3, #160	@ 0xa0
 800c29a:	05db      	lsls	r3, r3, #23
 800c29c:	0011      	movs	r1, r2
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f009 fa4a 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c2a4:	193b      	adds	r3, r7, r4
 800c2a6:	22c0      	movs	r2, #192	@ 0xc0
 800c2a8:	0052      	lsls	r2, r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2ac:	193b      	adds	r3, r7, r4
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b2:	193b      	adds	r3, r7, r4
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2b8:	193a      	adds	r2, r7, r4
 800c2ba:	23a0      	movs	r3, #160	@ 0xa0
 800c2bc:	05db      	lsls	r3, r3, #23
 800c2be:	0011      	movs	r1, r2
 800c2c0:	0018      	movs	r0, r3
 800c2c2:	f009 fa39 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c2c6:	193b      	adds	r3, r7, r4
 800c2c8:	4a3c      	ldr	r2, [pc, #240]	@ (800c3bc <MX_GPIO_Init+0x248>)
 800c2ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2cc:	193b      	adds	r3, r7, r4
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d2:	193b      	adds	r3, r7, r4
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2d8:	193b      	adds	r3, r7, r4
 800c2da:	2200      	movs	r2, #0
 800c2dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2de:	193b      	adds	r3, r7, r4
 800c2e0:	4a37      	ldr	r2, [pc, #220]	@ (800c3c0 <MX_GPIO_Init+0x24c>)
 800c2e2:	0019      	movs	r1, r3
 800c2e4:	0010      	movs	r0, r2
 800c2e6:	f009 fa27 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c2ea:	193b      	adds	r3, r7, r4
 800c2ec:	4a37      	ldr	r2, [pc, #220]	@ (800c3cc <MX_GPIO_Init+0x258>)
 800c2ee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c2f0:	193b      	adds	r3, r7, r4
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2fc:	193b      	adds	r3, r7, r4
 800c2fe:	4a30      	ldr	r2, [pc, #192]	@ (800c3c0 <MX_GPIO_Init+0x24c>)
 800c300:	0019      	movs	r1, r3
 800c302:	0010      	movs	r0, r2
 800c304:	f009 fa18 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c308:	0021      	movs	r1, r4
 800c30a:	187b      	adds	r3, r7, r1
 800c30c:	2280      	movs	r2, #128	@ 0x80
 800c30e:	0092      	lsls	r2, r2, #2
 800c310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c312:	000c      	movs	r4, r1
 800c314:	193b      	adds	r3, r7, r4
 800c316:	2200      	movs	r2, #0
 800c318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c31a:	193b      	adds	r3, r7, r4
 800c31c:	2200      	movs	r2, #0
 800c31e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c320:	193b      	adds	r3, r7, r4
 800c322:	4a28      	ldr	r2, [pc, #160]	@ (800c3c4 <MX_GPIO_Init+0x250>)
 800c324:	0019      	movs	r1, r3
 800c326:	0010      	movs	r0, r2
 800c328:	f009 fa06 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c32c:	193b      	adds	r3, r7, r4
 800c32e:	2280      	movs	r2, #128	@ 0x80
 800c330:	0212      	lsls	r2, r2, #8
 800c332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c334:	193b      	adds	r3, r7, r4
 800c336:	2288      	movs	r2, #136	@ 0x88
 800c338:	0352      	lsls	r2, r2, #13
 800c33a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c33c:	193b      	adds	r3, r7, r4
 800c33e:	2200      	movs	r2, #0
 800c340:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c342:	193a      	adds	r2, r7, r4
 800c344:	23a0      	movs	r3, #160	@ 0xa0
 800c346:	05db      	lsls	r3, r3, #23
 800c348:	0011      	movs	r1, r2
 800c34a:	0018      	movs	r0, r3
 800c34c:	f009 f9f4 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c350:	0021      	movs	r1, r4
 800c352:	187b      	adds	r3, r7, r1
 800c354:	22c0      	movs	r2, #192	@ 0xc0
 800c356:	0152      	lsls	r2, r2, #5
 800c358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c35a:	000c      	movs	r4, r1
 800c35c:	193b      	adds	r3, r7, r4
 800c35e:	2201      	movs	r2, #1
 800c360:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c362:	193b      	adds	r3, r7, r4
 800c364:	2200      	movs	r2, #0
 800c366:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c368:	193b      	adds	r3, r7, r4
 800c36a:	2200      	movs	r2, #0
 800c36c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c36e:	193b      	adds	r3, r7, r4
 800c370:	4a14      	ldr	r2, [pc, #80]	@ (800c3c4 <MX_GPIO_Init+0x250>)
 800c372:	0019      	movs	r1, r3
 800c374:	0010      	movs	r0, r2
 800c376:	f009 f9df 	bl	8015738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c37a:	0021      	movs	r1, r4
 800c37c:	187b      	adds	r3, r7, r1
 800c37e:	2204      	movs	r2, #4
 800c380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c382:	187b      	adds	r3, r7, r1
 800c384:	2200      	movs	r2, #0
 800c386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c388:	187b      	adds	r3, r7, r1
 800c38a:	2201      	movs	r2, #1
 800c38c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c38e:	187b      	adds	r3, r7, r1
 800c390:	4a0f      	ldr	r2, [pc, #60]	@ (800c3d0 <MX_GPIO_Init+0x25c>)
 800c392:	0019      	movs	r1, r3
 800c394:	0010      	movs	r0, r2
 800c396:	f009 f9cf 	bl	8015738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c39a:	2200      	movs	r2, #0
 800c39c:	2100      	movs	r1, #0
 800c39e:	2007      	movs	r0, #7
 800c3a0:	f008 fd78 	bl	8014e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c3a4:	2007      	movs	r0, #7
 800c3a6:	f008 fd8a 	bl	8014ebe <HAL_NVIC_EnableIRQ>

}
 800c3aa:	46c0      	nop			@ (mov r8, r8)
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b00b      	add	sp, #44	@ 0x2c
 800c3b0:	bd90      	pop	{r4, r7, pc}
 800c3b2:	46c0      	nop			@ (mov r8, r8)
 800c3b4:	40021000 	.word	0x40021000
 800c3b8:	50001c00 	.word	0x50001c00
 800c3bc:	00000301 	.word	0x00000301
 800c3c0:	50000400 	.word	0x50000400
 800c3c4:	50000800 	.word	0x50000800
 800c3c8:	0000200c 	.word	0x0000200c
 800c3cc:	0000403e 	.word	0x0000403e
 800c3d0:	50000c00 	.word	0x50000c00

0800c3d4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f010 fa48 	bl	801c878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2108      	movs	r1, #8
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f010 fa43 	bl	801c878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	210c      	movs	r1, #12
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f010 fa3e 	bl	801c878 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c3fc:	2380      	movs	r3, #128	@ 0x80
 800c3fe:	05db      	lsls	r3, r3, #23
 800c400:	22fa      	movs	r2, #250	@ 0xfa
 800c402:	0112      	lsls	r2, r2, #4
 800c404:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c406:	2380      	movs	r3, #128	@ 0x80
 800c408:	05db      	lsls	r3, r3, #23
 800c40a:	22fa      	movs	r2, #250	@ 0xfa
 800c40c:	0112      	lsls	r2, r2, #4
 800c40e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c410:	2380      	movs	r3, #128	@ 0x80
 800c412:	05db      	lsls	r3, r3, #23
 800c414:	22fa      	movs	r2, #250	@ 0xfa
 800c416:	0112      	lsls	r2, r2, #4
 800c418:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c41a:	2380      	movs	r3, #128	@ 0x80
 800c41c:	05db      	lsls	r3, r3, #23
 800c41e:	22fa      	movs	r2, #250	@ 0xfa
 800c420:	0112      	lsls	r2, r2, #4
 800c422:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2100      	movs	r1, #0
 800c428:	0018      	movs	r0, r3
 800c42a:	f010 fa25 	bl	801c878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2104      	movs	r1, #4
 800c432:	0018      	movs	r0, r3
 800c434:	f010 fa20 	bl	801c878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2108      	movs	r1, #8
 800c43c:	0018      	movs	r0, r3
 800c43e:	f010 fa1b 	bl	801c878 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c442:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <GPIO_InitPWMLEDs+0x98>)
 800c444:	22fa      	movs	r2, #250	@ 0xfa
 800c446:	0112      	lsls	r2, r2, #4
 800c448:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c44a:	4b08      	ldr	r3, [pc, #32]	@ (800c46c <GPIO_InitPWMLEDs+0x98>)
 800c44c:	22fa      	movs	r2, #250	@ 0xfa
 800c44e:	0112      	lsls	r2, r2, #4
 800c450:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c452:	4b06      	ldr	r3, [pc, #24]	@ (800c46c <GPIO_InitPWMLEDs+0x98>)
 800c454:	22fa      	movs	r2, #250	@ 0xfa
 800c456:	0112      	lsls	r2, r2, #4
 800c458:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c45a:	4b04      	ldr	r3, [pc, #16]	@ (800c46c <GPIO_InitPWMLEDs+0x98>)
 800c45c:	22fa      	movs	r2, #250	@ 0xfa
 800c45e:	0112      	lsls	r2, r2, #4
 800c460:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c462:	46c0      	nop			@ (mov r8, r8)
 800c464:	46bd      	mov	sp, r7
 800c466:	b002      	add	sp, #8
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	40000400 	.word	0x40000400

0800c470 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c476:	1d3b      	adds	r3, r7, #4
 800c478:	0018      	movs	r0, r3
 800c47a:	2314      	movs	r3, #20
 800c47c:	001a      	movs	r2, r3
 800c47e:	2100      	movs	r1, #0
 800c480:	f019 fe18 	bl	80260b4 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c484:	1d3b      	adds	r3, r7, #4
 800c486:	2205      	movs	r2, #5
 800c488:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c48a:	1d3b      	adds	r3, r7, #4
 800c48c:	2203      	movs	r2, #3
 800c48e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c490:	1d3b      	adds	r3, r7, #4
 800c492:	2200      	movs	r2, #0
 800c494:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c496:	1d3a      	adds	r2, r7, #4
 800c498:	23a0      	movs	r3, #160	@ 0xa0
 800c49a:	05db      	lsls	r3, r3, #23
 800c49c:	0011      	movs	r1, r2
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f009 f94a 	bl	8015738 <HAL_GPIO_Init>
}
 800c4a4:	46c0      	nop			@ (mov r8, r8)
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	b006      	add	sp, #24
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c4b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c524 <MX_I2C1_Init+0x78>)
 800c4b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c4b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c528 <MX_I2C1_Init+0x7c>)
 800c4ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c4bc:	4b18      	ldr	r3, [pc, #96]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c4c2:	4b17      	ldr	r3, [pc, #92]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c4c8:	4b15      	ldr	r3, [pc, #84]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c4ce:	4b14      	ldr	r3, [pc, #80]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c4d4:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c4da:	4b11      	ldr	r3, [pc, #68]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f009 faf9 	bl	8015ae0 <HAL_I2C_Init>
 800c4ee:	1e03      	subs	r3, r0, #0
 800c4f0:	d001      	beq.n	800c4f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c4f2:	f000 fdc5 	bl	800d080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	f00c f9d6 	bl	80188ac <HAL_I2CEx_ConfigAnalogFilter>
 800c500:	1e03      	subs	r3, r0, #0
 800c502:	d001      	beq.n	800c508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c504:	f000 fdbc 	bl	800d080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <MX_I2C1_Init+0x74>)
 800c50a:	2100      	movs	r1, #0
 800c50c:	0018      	movs	r0, r3
 800c50e:	f00c fa19 	bl	8018944 <HAL_I2CEx_ConfigDigitalFilter>
 800c512:	1e03      	subs	r3, r0, #0
 800c514:	d001      	beq.n	800c51a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c516:	f000 fdb3 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c51a:	46c0      	nop			@ (mov r8, r8)
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20000d98 	.word	0x20000d98
 800c524:	40005400 	.word	0x40005400
 800c528:	00503d58 	.word	0x00503d58

0800c52c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c530:	4b1b      	ldr	r3, [pc, #108]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c532:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a4 <MX_I2C2_Init+0x78>)
 800c534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800c536:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c538:	4a1b      	ldr	r2, [pc, #108]	@ (800c5a8 <MX_I2C2_Init+0x7c>)
 800c53a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c53c:	4b18      	ldr	r3, [pc, #96]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c53e:	2200      	movs	r2, #0
 800c540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c542:	4b17      	ldr	r3, [pc, #92]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c544:	2201      	movs	r2, #1
 800c546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c548:	4b15      	ldr	r3, [pc, #84]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c54e:	4b14      	ldr	r3, [pc, #80]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c550:	2200      	movs	r2, #0
 800c552:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c554:	4b12      	ldr	r3, [pc, #72]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c556:	2200      	movs	r2, #0
 800c558:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c55a:	4b11      	ldr	r3, [pc, #68]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c560:	4b0f      	ldr	r3, [pc, #60]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c562:	2200      	movs	r2, #0
 800c564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c566:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c568:	0018      	movs	r0, r3
 800c56a:	f009 fab9 	bl	8015ae0 <HAL_I2C_Init>
 800c56e:	1e03      	subs	r3, r0, #0
 800c570:	d001      	beq.n	800c576 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800c572:	f000 fd85 	bl	800d080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c576:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c578:	2100      	movs	r1, #0
 800c57a:	0018      	movs	r0, r3
 800c57c:	f00c f996 	bl	80188ac <HAL_I2CEx_ConfigAnalogFilter>
 800c580:	1e03      	subs	r3, r0, #0
 800c582:	d001      	beq.n	800c588 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800c584:	f000 fd7c 	bl	800d080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c588:	4b05      	ldr	r3, [pc, #20]	@ (800c5a0 <MX_I2C2_Init+0x74>)
 800c58a:	2100      	movs	r1, #0
 800c58c:	0018      	movs	r0, r3
 800c58e:	f00c f9d9 	bl	8018944 <HAL_I2CEx_ConfigDigitalFilter>
 800c592:	1e03      	subs	r3, r0, #0
 800c594:	d001      	beq.n	800c59a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c596:	f000 fd73 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	20000dec 	.word	0x20000dec
 800c5a4:	40005800 	.word	0x40005800
 800c5a8:	00503d58 	.word	0x00503d58

0800c5ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c5ac:	b590      	push	{r4, r7, lr}
 800c5ae:	b08b      	sub	sp, #44	@ 0x2c
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b4:	2414      	movs	r4, #20
 800c5b6:	193b      	adds	r3, r7, r4
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	2314      	movs	r3, #20
 800c5bc:	001a      	movs	r2, r3
 800c5be:	2100      	movs	r1, #0
 800c5c0:	f019 fd78 	bl	80260b4 <memset>
  if(i2cHandle->Instance==I2C1)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c740 <HAL_I2C_MspInit+0x194>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d000      	beq.n	800c5d0 <HAL_I2C_MspInit+0x24>
 800c5ce:	e083      	b.n	800c6d8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5d0:	4b5c      	ldr	r3, [pc, #368]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c5dc:	4b59      	ldr	r3, [pc, #356]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	613b      	str	r3, [r7, #16]
 800c5e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c5e8:	0021      	movs	r1, r4
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	22c0      	movs	r2, #192	@ 0xc0
 800c5ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c5f0:	187b      	adds	r3, r7, r1
 800c5f2:	2212      	movs	r2, #18
 800c5f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5f6:	187b      	adds	r3, r7, r1
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5fc:	187b      	adds	r3, r7, r1
 800c5fe:	2203      	movs	r2, #3
 800c600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c602:	187b      	adds	r3, r7, r1
 800c604:	2201      	movs	r2, #1
 800c606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c608:	187b      	adds	r3, r7, r1
 800c60a:	4a4f      	ldr	r2, [pc, #316]	@ (800c748 <HAL_I2C_MspInit+0x19c>)
 800c60c:	0019      	movs	r1, r3
 800c60e:	0010      	movs	r0, r2
 800c610:	f009 f892 	bl	8015738 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c614:	4b4b      	ldr	r3, [pc, #300]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c618:	4b4a      	ldr	r3, [pc, #296]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c61a:	2180      	movs	r1, #128	@ 0x80
 800c61c:	0389      	lsls	r1, r1, #14
 800c61e:	430a      	orrs	r2, r1
 800c620:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c622:	4b4a      	ldr	r3, [pc, #296]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c624:	4a4a      	ldr	r2, [pc, #296]	@ (800c750 <HAL_I2C_MspInit+0x1a4>)
 800c626:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c628:	4b48      	ldr	r3, [pc, #288]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c62a:	2206      	movs	r2, #6
 800c62c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c62e:	4b47      	ldr	r3, [pc, #284]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c630:	2200      	movs	r2, #0
 800c632:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c634:	4b45      	ldr	r3, [pc, #276]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c636:	2200      	movs	r2, #0
 800c638:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c63a:	4b44      	ldr	r3, [pc, #272]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c63c:	2280      	movs	r2, #128	@ 0x80
 800c63e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c640:	4b42      	ldr	r3, [pc, #264]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c642:	2200      	movs	r2, #0
 800c644:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c646:	4b41      	ldr	r3, [pc, #260]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c648:	2200      	movs	r2, #0
 800c64a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c64c:	4b3f      	ldr	r3, [pc, #252]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c64e:	2200      	movs	r2, #0
 800c650:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c652:	4b3e      	ldr	r3, [pc, #248]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c654:	2200      	movs	r2, #0
 800c656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c658:	4b3c      	ldr	r3, [pc, #240]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c65a:	0018      	movs	r0, r3
 800c65c:	f008 fc50 	bl	8014f00 <HAL_DMA_Init>
 800c660:	1e03      	subs	r3, r0, #0
 800c662:	d001      	beq.n	800c668 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c664:	f000 fd0c 	bl	800d080 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a38      	ldr	r2, [pc, #224]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c66c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c66e:	4b37      	ldr	r3, [pc, #220]	@ (800c74c <HAL_I2C_MspInit+0x1a0>)
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c674:	4b37      	ldr	r3, [pc, #220]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c676:	4a38      	ldr	r2, [pc, #224]	@ (800c758 <HAL_I2C_MspInit+0x1ac>)
 800c678:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c67a:	4b36      	ldr	r3, [pc, #216]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c67c:	2206      	movs	r2, #6
 800c67e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c680:	4b34      	ldr	r3, [pc, #208]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c682:	2210      	movs	r2, #16
 800c684:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c686:	4b33      	ldr	r3, [pc, #204]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c688:	2200      	movs	r2, #0
 800c68a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c68c:	4b31      	ldr	r3, [pc, #196]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c68e:	2280      	movs	r2, #128	@ 0x80
 800c690:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c692:	4b30      	ldr	r3, [pc, #192]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c694:	2200      	movs	r2, #0
 800c696:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c698:	4b2e      	ldr	r3, [pc, #184]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c69e:	4b2d      	ldr	r3, [pc, #180]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c6aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f008 fc27 	bl	8014f00 <HAL_DMA_Init>
 800c6b2:	1e03      	subs	r3, r0, #0
 800c6b4:	d001      	beq.n	800c6ba <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c6b6:	f000 fce3 	bl	800d080 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a25      	ldr	r2, [pc, #148]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c6be:	639a      	str	r2, [r3, #56]	@ 0x38
 800c6c0:	4b24      	ldr	r3, [pc, #144]	@ (800c754 <HAL_I2C_MspInit+0x1a8>)
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	2017      	movs	r0, #23
 800c6cc:	f008 fbe2 	bl	8014e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c6d0:	2017      	movs	r0, #23
 800c6d2:	f008 fbf4 	bl	8014ebe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c6d6:	e02e      	b.n	800c736 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c75c <HAL_I2C_MspInit+0x1b0>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d129      	bne.n	800c736 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6e2:	4b18      	ldr	r3, [pc, #96]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6e6:	4b17      	ldr	r3, [pc, #92]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c6e8:	2102      	movs	r1, #2
 800c6ea:	430a      	orrs	r2, r1
 800c6ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6ee:	4b15      	ldr	r3, [pc, #84]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c6fa:	2114      	movs	r1, #20
 800c6fc:	187b      	adds	r3, r7, r1
 800c6fe:	22c0      	movs	r2, #192	@ 0xc0
 800c700:	0112      	lsls	r2, r2, #4
 800c702:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c704:	187b      	adds	r3, r7, r1
 800c706:	2212      	movs	r2, #18
 800c708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70a:	187b      	adds	r3, r7, r1
 800c70c:	2200      	movs	r2, #0
 800c70e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c710:	187b      	adds	r3, r7, r1
 800c712:	2203      	movs	r2, #3
 800c714:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c716:	187b      	adds	r3, r7, r1
 800c718:	2206      	movs	r2, #6
 800c71a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c71c:	187b      	adds	r3, r7, r1
 800c71e:	4a0a      	ldr	r2, [pc, #40]	@ (800c748 <HAL_I2C_MspInit+0x19c>)
 800c720:	0019      	movs	r1, r3
 800c722:	0010      	movs	r0, r2
 800c724:	f009 f808 	bl	8015738 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c728:	4b06      	ldr	r3, [pc, #24]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c72a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c72c:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <HAL_I2C_MspInit+0x198>)
 800c72e:	2180      	movs	r1, #128	@ 0x80
 800c730:	03c9      	lsls	r1, r1, #15
 800c732:	430a      	orrs	r2, r1
 800c734:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c736:	46c0      	nop			@ (mov r8, r8)
 800c738:	46bd      	mov	sp, r7
 800c73a:	b00b      	add	sp, #44	@ 0x2c
 800c73c:	bd90      	pop	{r4, r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	40005400 	.word	0x40005400
 800c744:	40021000 	.word	0x40021000
 800c748:	50000400 	.word	0x50000400
 800c74c:	20000e40 	.word	0x20000e40
 800c750:	40020030 	.word	0x40020030
 800c754:	20000e88 	.word	0x20000e88
 800c758:	4002001c 	.word	0x4002001c
 800c75c:	40005800 	.word	0x40005800

0800c760 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c764:	4b10      	ldr	r3, [pc, #64]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c766:	4a11      	ldr	r2, [pc, #68]	@ (800c7ac <MX_I2S2_Init+0x4c>)
 800c768:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c76a:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c76c:	22c0      	movs	r2, #192	@ 0xc0
 800c76e:	0092      	lsls	r2, r2, #2
 800c770:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c772:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c774:	2200      	movs	r2, #0
 800c776:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c778:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c77a:	2203      	movs	r2, #3
 800c77c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c77e:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c780:	2200      	movs	r2, #0
 800c782:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c784:	4b08      	ldr	r3, [pc, #32]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c786:	22fa      	movs	r2, #250	@ 0xfa
 800c788:	0192      	lsls	r2, r2, #6
 800c78a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c78c:	4b06      	ldr	r3, [pc, #24]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c78e:	2200      	movs	r2, #0
 800c790:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c792:	4b05      	ldr	r3, [pc, #20]	@ (800c7a8 <MX_I2S2_Init+0x48>)
 800c794:	0018      	movs	r0, r3
 800c796:	f00c f921 	bl	80189dc <HAL_I2S_Init>
 800c79a:	1e03      	subs	r3, r0, #0
 800c79c:	d001      	beq.n	800c7a2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c79e:	f000 fc6f 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	20000ed0 	.word	0x20000ed0
 800c7ac:	40003800 	.word	0x40003800

0800c7b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b089      	sub	sp, #36	@ 0x24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7b8:	240c      	movs	r4, #12
 800c7ba:	193b      	adds	r3, r7, r4
 800c7bc:	0018      	movs	r0, r3
 800c7be:	2314      	movs	r3, #20
 800c7c0:	001a      	movs	r2, r3
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	f019 fc76 	bl	80260b4 <memset>
  if(i2sHandle->Instance==SPI2)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a2d      	ldr	r2, [pc, #180]	@ (800c884 <HAL_I2S_MspInit+0xd4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d154      	bne.n	800c87c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c7d2:	4b2d      	ldr	r3, [pc, #180]	@ (800c888 <HAL_I2S_MspInit+0xd8>)
 800c7d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c888 <HAL_I2S_MspInit+0xd8>)
 800c7d8:	2180      	movs	r1, #128	@ 0x80
 800c7da:	01c9      	lsls	r1, r1, #7
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7e0:	4b29      	ldr	r3, [pc, #164]	@ (800c888 <HAL_I2S_MspInit+0xd8>)
 800c7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e4:	4b28      	ldr	r3, [pc, #160]	@ (800c888 <HAL_I2S_MspInit+0xd8>)
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7ec:	4b26      	ldr	r3, [pc, #152]	@ (800c888 <HAL_I2S_MspInit+0xd8>)
 800c7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f0:	2202      	movs	r2, #2
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c7f8:	193b      	adds	r3, r7, r4
 800c7fa:	22b0      	movs	r2, #176	@ 0xb0
 800c7fc:	0212      	lsls	r2, r2, #8
 800c7fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c800:	0021      	movs	r1, r4
 800c802:	187b      	adds	r3, r7, r1
 800c804:	2202      	movs	r2, #2
 800c806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	2200      	movs	r2, #0
 800c80c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c80e:	187b      	adds	r3, r7, r1
 800c810:	2200      	movs	r2, #0
 800c812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c814:	187b      	adds	r3, r7, r1
 800c816:	2200      	movs	r2, #0
 800c818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c81a:	187b      	adds	r3, r7, r1
 800c81c:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <HAL_I2S_MspInit+0xdc>)
 800c81e:	0019      	movs	r1, r3
 800c820:	0010      	movs	r0, r2
 800c822:	f008 ff89 	bl	8015738 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c826:	4b1a      	ldr	r3, [pc, #104]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c828:	4a1a      	ldr	r2, [pc, #104]	@ (800c894 <HAL_I2S_MspInit+0xe4>)
 800c82a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c82c:	4b18      	ldr	r3, [pc, #96]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c82e:	2202      	movs	r2, #2
 800c830:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c832:	4b17      	ldr	r3, [pc, #92]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c834:	2200      	movs	r2, #0
 800c836:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c838:	4b15      	ldr	r3, [pc, #84]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c83e:	4b14      	ldr	r3, [pc, #80]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c840:	2280      	movs	r2, #128	@ 0x80
 800c842:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c844:	4b12      	ldr	r3, [pc, #72]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c846:	2280      	movs	r2, #128	@ 0x80
 800c848:	0052      	lsls	r2, r2, #1
 800c84a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c84c:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c84e:	2280      	movs	r2, #128	@ 0x80
 800c850:	00d2      	lsls	r2, r2, #3
 800c852:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c854:	4b0e      	ldr	r3, [pc, #56]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c856:	2220      	movs	r2, #32
 800c858:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c85a:	4b0d      	ldr	r3, [pc, #52]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c860:	4b0b      	ldr	r3, [pc, #44]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c862:	0018      	movs	r0, r3
 800c864:	f008 fb4c 	bl	8014f00 <HAL_DMA_Init>
 800c868:	1e03      	subs	r3, r0, #0
 800c86a:	d001      	beq.n	800c870 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c86c:	f000 fc08 	bl	800d080 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a07      	ldr	r2, [pc, #28]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c874:	631a      	str	r2, [r3, #48]	@ 0x30
 800c876:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <HAL_I2S_MspInit+0xe0>)
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c87c:	46c0      	nop			@ (mov r8, r8)
 800c87e:	46bd      	mov	sp, r7
 800c880:	b009      	add	sp, #36	@ 0x24
 800c882:	bd90      	pop	{r4, r7, pc}
 800c884:	40003800 	.word	0x40003800
 800c888:	40021000 	.word	0x40021000
 800c88c:	50000400 	.word	0x50000400
 800c890:	20000f0c 	.word	0x20000f0c
 800c894:	40020044 	.word	0x40020044

0800c898 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c898:	b580      	push	{r7, lr}
 800c89a:	af00      	add	r7, sp, #0
  testDone = true;
 800c89c:	4b14      	ldr	r3, [pc, #80]	@ (800c8f0 <SetTestDone+0x58>)
 800c89e:	2201      	movs	r2, #1
 800c8a0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c8a2:	23fa      	movs	r3, #250	@ 0xfa
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	0018      	movs	r0, r3
 800c8a8:	f007 fe5a 	bl	8014560 <HAL_Delay>
  SetDBLED(false, false, true);
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	f005 fddf 	bl	8012474 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c8f4 <SetTestDone+0x5c>)
 800c8b8:	23fa      	movs	r3, #250	@ 0xfa
 800c8ba:	0119      	lsls	r1, r3, #4
 800c8bc:	23fa      	movs	r3, #250	@ 0xfa
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f005 fda3 	bl	801240c <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c8c6:	4a0b      	ldr	r2, [pc, #44]	@ (800c8f4 <SetTestDone+0x5c>)
 800c8c8:	23fa      	movs	r3, #250	@ 0xfa
 800c8ca:	0119      	lsls	r1, r3, #4
 800c8cc:	23fa      	movs	r3, #250	@ 0xfa
 800c8ce:	011b      	lsls	r3, r3, #4
 800c8d0:	0018      	movs	r0, r3
 800c8d2:	f005 fe19 	bl	8012508 <SetVocLED>
  HAL_Delay(500);
 800c8d6:	23fa      	movs	r3, #250	@ 0xfa
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f007 fe40 	bl	8014560 <HAL_Delay>
  SetLEDsOff();
 800c8e0:	f005 ff52 	bl	8012788 <SetLEDsOff>
  InitDone();
 800c8e4:	f005 fcde 	bl	80122a4 <InitDone>
}
 800c8e8:	46c0      	nop			@ (mov r8, r8)
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	46c0      	nop			@ (mov r8, r8)
 800c8f0:	20000f54 	.word	0x20000f54
 800c8f4:	00000bb8 	.word	0x00000bb8

0800c8f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c8fe:	f007 fdbf 	bl	8014480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c902:	f000 fa63 	bl	800cdcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c906:	f7ff fc35 	bl	800c174 <MX_GPIO_Init>
  MX_DMA_Init();
 800c90a:	f7ff fa5d 	bl	800bdc8 <MX_DMA_Init>
  MX_I2C1_Init();
 800c90e:	f7ff fdcd 	bl	800c4ac <MX_I2C1_Init>
  MX_I2S2_Init();
 800c912:	f7ff ff25 	bl	800c760 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c916:	f006 feeb 	bl	80136f0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c91a:	f7ff fe07 	bl	800c52c <MX_I2C2_Init>
  MX_TIM2_Init();
 800c91e:	f006 fcdf 	bl	80132e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c922:	f006 fd51 	bl	80133c8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c926:	f006 ff13 	bl	8013750 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c92a:	f7fd fea9 	bl	800a680 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c92e:	f016 f89f 	bl	8022a70 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c932:	f001 fbfb 	bl	800e12c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c936:	f006 fea5 	bl	8013684 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c93a:	f006 fdc3 	bl	80134c4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c93e:	4aa5      	ldr	r2, [pc, #660]	@ (800cbd4 <main+0x2dc>)
 800c940:	4ba5      	ldr	r3, [pc, #660]	@ (800cbd8 <main+0x2e0>)
 800c942:	0011      	movs	r1, r2
 800c944:	0018      	movs	r0, r3
 800c946:	f7ff fd45 	bl	800c3d4 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c94a:	f007 f943 	bl	8013bd4 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c94e:	f006 fb4f 	bl	8012ff0 <Battery_Upkeep>
 800c952:	0003      	movs	r3, r0
 800c954:	001a      	movs	r2, r3
 800c956:	4ba1      	ldr	r3, [pc, #644]	@ (800cbdc <main+0x2e4>)
 800c958:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c95a:	4ba0      	ldr	r3, [pc, #640]	@ (800cbdc <main+0x2e4>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d113      	bne.n	800c98a <main+0x92>
    SetAllREDLED();
 800c962:	f005 ff2d 	bl	80127c0 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c966:	f7fc fe25 	bl	80095b4 <ReadBatteryVoltage>
 800c96a:	1c03      	adds	r3, r0, #0
 800c96c:	1c18      	adds	r0, r3, #0
 800c96e:	f7f6 ff91 	bl	8003894 <__aeabi_f2d>
 800c972:	0002      	movs	r2, r0
 800c974:	000b      	movs	r3, r1
 800c976:	489a      	ldr	r0, [pc, #616]	@ (800cbe0 <main+0x2e8>)
 800c978:	499a      	ldr	r1, [pc, #616]	@ (800cbe4 <main+0x2ec>)
 800c97a:	9200      	str	r2, [sp, #0]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	0002      	movs	r2, r0
 800c980:	2002      	movs	r0, #2
 800c982:	f007 f8a3 	bl	8013acc <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c986:	f7fd fb45 	bl	800a014 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c98a:	f7fc ff51 	bl	8009830 <UserButton_Pressed>
 800c98e:	1e03      	subs	r3, r0, #0
 800c990:	d004      	beq.n	800c99c <main+0xa4>
    EnableESPProg();
 800c992:	f016 f93d 	bl	8022c10 <EnableESPProg>
    ESP_Programming = true;
 800c996:	4b94      	ldr	r3, [pc, #592]	@ (800cbe8 <main+0x2f0>)
 800c998:	2201      	movs	r2, #1
 800c99a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c99c:	2003      	movs	r0, #3
 800c99e:	f007 f8ff 	bl	8013ba0 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c9a2:	4992      	ldr	r1, [pc, #584]	@ (800cbec <main+0x2f4>)
 800c9a4:	4b92      	ldr	r3, [pc, #584]	@ (800cbf0 <main+0x2f8>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f010 fbc5 	bl	801d138 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c9ae:	4b91      	ldr	r3, [pc, #580]	@ (800cbf4 <main+0x2fc>)
 800c9b0:	0018      	movs	r0, r3
 800c9b2:	f7fd fc6b 	bl	800a28c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c9b6:	4a90      	ldr	r2, [pc, #576]	@ (800cbf8 <main+0x300>)
 800c9b8:	4990      	ldr	r1, [pc, #576]	@ (800cbfc <main+0x304>)
 800c9ba:	4891      	ldr	r0, [pc, #580]	@ (800cc00 <main+0x308>)
 800c9bc:	230b      	movs	r3, #11
 800c9be:	f004 fde7 	bl	8011590 <soundInit>
 800c9c2:	0003      	movs	r3, r0
 800c9c4:	001a      	movs	r2, r3
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4053      	eors	r3, r2
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800c9d0:	4a8c      	ldr	r2, [pc, #560]	@ (800cc04 <main+0x30c>)
 800c9d2:	4b8d      	ldr	r3, [pc, #564]	@ (800cc08 <main+0x310>)
 800c9d4:	21f0      	movs	r1, #240	@ 0xf0
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	f007 f930 	bl	8013c3c <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c9dc:	4b8b      	ldr	r3, [pc, #556]	@ (800cc0c <main+0x314>)
 800c9de:	4a8c      	ldr	r2, [pc, #560]	@ (800cc10 <main+0x318>)
 800c9e0:	4986      	ldr	r1, [pc, #536]	@ (800cbfc <main+0x304>)
 800c9e2:	488c      	ldr	r0, [pc, #560]	@ (800cc14 <main+0x31c>)
 800c9e4:	f000 fc3e 	bl	800d264 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c9e8:	f007 fdb0 	bl	801454c <HAL_GetTick>
 800c9ec:	0003      	movs	r3, r0
 800c9ee:	4a8a      	ldr	r2, [pc, #552]	@ (800cc18 <main+0x320>)
 800c9f0:	189a      	adds	r2, r3, r2
 800c9f2:	4b8a      	ldr	r3, [pc, #552]	@ (800cc1c <main+0x324>)
 800c9f4:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c9f6:	f7fc fe93 	bl	8009720 <Check_USB_PowerOn>
 800c9fa:	0003      	movs	r3, r0
 800c9fc:	1e5a      	subs	r2, r3, #1
 800c9fe:	4193      	sbcs	r3, r2
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2201      	movs	r2, #1
 800ca04:	4053      	eors	r3, r2
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	1c1a      	adds	r2, r3, #0
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	4b83      	ldr	r3, [pc, #524]	@ (800cc20 <main+0x328>)
 800ca12:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800ca14:	f7fc fe84 	bl	8009720 <Check_USB_PowerOn>
 800ca18:	1e03      	subs	r3, r0, #0
 800ca1a:	d003      	beq.n	800ca24 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800ca1c:	4b81      	ldr	r3, [pc, #516]	@ (800cc24 <main+0x32c>)
 800ca1e:	0018      	movs	r0, r3
 800ca20:	f7fb ff0c 	bl	800883c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800ca24:	4b80      	ldr	r3, [pc, #512]	@ (800cc28 <main+0x330>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	0018      	movs	r0, r3
 800ca2a:	f006 fff9 	bl	8013a20 <TimestampIsReached>
 800ca2e:	1e03      	subs	r3, r0, #0
 800ca30:	d00e      	beq.n	800ca50 <main+0x158>
      charge = Battery_Upkeep();
 800ca32:	f006 fadd 	bl	8012ff0 <Battery_Upkeep>
 800ca36:	0003      	movs	r3, r0
 800ca38:	001a      	movs	r2, r3
 800ca3a:	4b68      	ldr	r3, [pc, #416]	@ (800cbdc <main+0x2e4>)
 800ca3c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ca3e:	f007 fd85 	bl	801454c <HAL_GetTick>
 800ca42:	0003      	movs	r3, r0
 800ca44:	4a79      	ldr	r2, [pc, #484]	@ (800cc2c <main+0x334>)
 800ca46:	189a      	adds	r2, r3, r2
 800ca48:	4b77      	ldr	r3, [pc, #476]	@ (800cc28 <main+0x330>)
 800ca4a:	601a      	str	r2, [r3, #0]
      showTime();
 800ca4c:	f7fc ff00 	bl	8009850 <showTime>

    }
    configCheck();
 800ca50:	f006 f92a 	bl	8012ca8 <configCheck>
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800ca54:	4b61      	ldr	r3, [pc, #388]	@ (800cbdc <main+0x2e4>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d003      	beq.n	800ca64 <main+0x16c>
 800ca5c:	4b5f      	ldr	r3, [pc, #380]	@ (800cbdc <main+0x2e4>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d120      	bne.n	800caa6 <main+0x1ae>
      WalkAllRedLED();
 800ca64:	f005 feec 	bl	8012840 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800ca68:	4b71      	ldr	r3, [pc, #452]	@ (800cc30 <main+0x338>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      if ((charge == BATTERY_LOW) && (sendpwremail == CLEAR) && !EspTurnedOn && (!Check_USB_PowerOn())) {
 800ca6e:	4b5b      	ldr	r3, [pc, #364]	@ (800cbdc <main+0x2e4>)
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d117      	bne.n	800caa6 <main+0x1ae>
 800ca76:	4b6f      	ldr	r3, [pc, #444]	@ (800cc34 <main+0x33c>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d113      	bne.n	800caa6 <main+0x1ae>
 800ca7e:	4b6e      	ldr	r3, [pc, #440]	@ (800cc38 <main+0x340>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2201      	movs	r2, #1
 800ca84:	4053      	eors	r3, r2
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00c      	beq.n	800caa6 <main+0x1ae>
 800ca8c:	f7fc fe48 	bl	8009720 <Check_USB_PowerOn>
 800ca90:	0003      	movs	r3, r0
 800ca92:	001a      	movs	r2, r3
 800ca94:	2301      	movs	r3, #1
 800ca96:	4053      	eors	r3, r2
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <main+0x1ae>
        setModePowerMail();
 800ca9e:	f7f7 ffa9 	bl	80049f4 <setModePowerMail>
        ESP_Upkeep();
 800caa2:	f7fa fd41 	bl	8007528 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800caa6:	4b65      	ldr	r3, [pc, #404]	@ (800cc3c <main+0x344>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800caac:	4b4b      	ldr	r3, [pc, #300]	@ (800cbdc <main+0x2e4>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10a      	bne.n	800caca <main+0x1d2>
 800cab4:	4b62      	ldr	r3, [pc, #392]	@ (800cc40 <main+0x348>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	2b09      	cmp	r3, #9
 800caba:	d106      	bne.n	800caca <main+0x1d2>
       batteryEmpty = true;
 800cabc:	4b61      	ldr	r3, [pc, #388]	@ (800cc44 <main+0x34c>)
 800cabe:	2201      	movs	r2, #1
 800cac0:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(120); // light up the leds every 2 minutes
 800cac2:	2078      	movs	r0, #120	@ 0x78
 800cac4:	f7fd fac6 	bl	800a054 <Enter_Stop_Mode_for_empty_battery>
 800cac8:	e002      	b.n	800cad0 <main+0x1d8>
    }
    else{
      batteryEmpty = false;
 800caca:	4b5e      	ldr	r3, [pc, #376]	@ (800cc44 <main+0x34c>)
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cad0:	4b5d      	ldr	r3, [pc, #372]	@ (800cc48 <main+0x350>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d100      	bne.n	800cada <main+0x1e2>
 800cad8:	e0eb      	b.n	800ccb2 <main+0x3ba>
 800cada:	4b43      	ldr	r3, [pc, #268]	@ (800cbe8 <main+0x2f0>)
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2201      	movs	r2, #1
 800cae0:	4053      	eors	r3, r2
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d100      	bne.n	800caea <main+0x1f2>
 800cae8:	e0e3      	b.n	800ccb2 <main+0x3ba>
 800caea:	4b56      	ldr	r3, [pc, #344]	@ (800cc44 <main+0x34c>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2201      	movs	r2, #1
 800caf0:	4053      	eors	r3, r2
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d100      	bne.n	800cafa <main+0x202>
 800caf8:	e0db      	b.n	800ccb2 <main+0x3ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800cafa:	4b49      	ldr	r3, [pc, #292]	@ (800cc20 <main+0x328>)
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	4b53      	ldr	r3, [pc, #332]	@ (800cc4c <main+0x354>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d03a      	beq.n	800cb7c <main+0x284>
        if (IsSGPPresent() && !usbPluggedIn) {
 800cb06:	f000 fb3f 	bl	800d188 <IsSGPPresent>
 800cb0a:	1e03      	subs	r3, r0, #0
 800cb0c:	d009      	beq.n	800cb22 <main+0x22a>
 800cb0e:	4b4f      	ldr	r3, [pc, #316]	@ (800cc4c <main+0x354>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2201      	movs	r2, #1
 800cb14:	4053      	eors	r3, r2
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <main+0x22a>
          SetVOCSensorDIS_ENA(true);
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	f000 fb3d 	bl	800d19c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800cb22:	4b4b      	ldr	r3, [pc, #300]	@ (800cc50 <main+0x358>)
 800cb24:	791b      	ldrb	r3, [r3, #4]
 800cb26:	2b34      	cmp	r3, #52	@ 0x34
 800cb28:	d003      	beq.n	800cb32 <main+0x23a>
 800cb2a:	4b49      	ldr	r3, [pc, #292]	@ (800cc50 <main+0x358>)
 800cb2c:	791b      	ldrb	r3, [r3, #4]
 800cb2e:	2b35      	cmp	r3, #53	@ 0x35
 800cb30:	d106      	bne.n	800cb40 <main+0x248>
 800cb32:	4b46      	ldr	r3, [pc, #280]	@ (800cc4c <main+0x354>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <main+0x248>
          SetVOCSensorDIS_ENA(false);
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	f000 fb2e 	bl	800d19c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800cb40:	4b42      	ldr	r3, [pc, #264]	@ (800cc4c <main+0x354>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2201      	movs	r2, #1
 800cb46:	4053      	eors	r3, r2
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d012      	beq.n	800cb74 <main+0x27c>
 800cb4e:	f007 fcfd 	bl	801454c <HAL_GetTick>
 800cb52:	0003      	movs	r3, r0
 800cb54:	4a30      	ldr	r2, [pc, #192]	@ (800cc18 <main+0x320>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d90c      	bls.n	800cb74 <main+0x27c>
          Debug("Device time out set in main due to powerstatus shift");
 800cb5a:	4a3e      	ldr	r2, [pc, #248]	@ (800cc54 <main+0x35c>)
 800cb5c:	4b3e      	ldr	r3, [pc, #248]	@ (800cc58 <main+0x360>)
 800cb5e:	0019      	movs	r1, r3
 800cb60:	2003      	movs	r0, #3
 800cb62:	f006 ffb3 	bl	8013acc <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800cb66:	f007 fcf1 	bl	801454c <HAL_GetTick>
 800cb6a:	0003      	movs	r3, r0
 800cb6c:	4a3b      	ldr	r2, [pc, #236]	@ (800cc5c <main+0x364>)
 800cb6e:	189a      	adds	r2, r3, r2
 800cb70:	4b2a      	ldr	r3, [pc, #168]	@ (800cc1c <main+0x324>)
 800cb72:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800cb74:	4b35      	ldr	r3, [pc, #212]	@ (800cc4c <main+0x354>)
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	4b29      	ldr	r3, [pc, #164]	@ (800cc20 <main+0x328>)
 800cb7a:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800cb7c:	f000 ffb8 	bl	800daf0 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800cb80:	4b2b      	ldr	r3, [pc, #172]	@ (800cc30 <main+0x338>)
 800cb82:	78db      	ldrb	r3, [r3, #3]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <main+0x29c>
        MICstate = Mic_Upkeep();
 800cb88:	f001 f9bc 	bl	800df04 <Mic_Upkeep>
 800cb8c:	0003      	movs	r3, r0
 800cb8e:	001a      	movs	r2, r3
 800cb90:	4b33      	ldr	r3, [pc, #204]	@ (800cc60 <main+0x368>)
 800cb92:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800cb94:	4b11      	ldr	r3, [pc, #68]	@ (800cbdc <main+0x2e4>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d803      	bhi.n	800cba4 <main+0x2ac>
 800cb9c:	4b27      	ldr	r3, [pc, #156]	@ (800cc3c <main+0x344>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d05f      	beq.n	800cc64 <main+0x36c>
 800cba4:	4b22      	ldr	r3, [pc, #136]	@ (800cc30 <main+0x338>)
 800cba6:	789b      	ldrb	r3, [r3, #2]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d05b      	beq.n	800cc64 <main+0x36c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800cbac:	f001 fb4c 	bl	800e248 <sen5x_Get_sen5x_enable_state>
 800cbb0:	0003      	movs	r3, r0
 800cbb2:	001a      	movs	r2, r3
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4053      	eors	r3, r2
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d006      	beq.n	800cbcc <main+0x2d4>
 800cbbe:	4b23      	ldr	r3, [pc, #140]	@ (800cc4c <main+0x354>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <main+0x2d4>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	f001 fb7a 	bl	800e2c0 <sen5x_enable>
        }
        sen5x_statemachine();
 800cbcc:	f002 f8f6 	bl	800edbc <sen5x_statemachine>
 800cbd0:	e069      	b.n	800cca6 <main+0x3ae>
 800cbd2:	46c0      	nop			@ (mov r8, r8)
 800cbd4:	20002008 	.word	0x20002008
 800cbd8:	20001fc8 	.word	0x20001fc8
 800cbdc:	20000f70 	.word	0x20000f70
 800cbe0:	0802c5c8 	.word	0x0802c5c8
 800cbe4:	0802c5ec 	.word	0x0802c5ec
 800cbe8:	20000f55 	.word	0x20000f55
 800cbec:	20000f5c 	.word	0x20000f5c
 800cbf0:	20002140 	.word	0x20002140
 800cbf4:	20000ff4 	.word	0x20000ff4
 800cbf8:	20002048 	.word	0x20002048
 800cbfc:	20000ed0 	.word	0x20000ed0
 800cc00:	20000f0c 	.word	0x20000f0c
 800cc04:	0802c5f0 	.word	0x0802c5f0
 800cc08:	0802e080 	.word	0x0802e080
 800cc0c:	200021f8 	.word	0x200021f8
 800cc10:	20000cc0 	.word	0x20000cc0
 800cc14:	20000d98 	.word	0x20000d98
 800cc18:	000061a8 	.word	0x000061a8
 800cc1c:	20000f6c 	.word	0x20000f6c
 800cc20:	20000f58 	.word	0x20000f58
 800cc24:	0802c604 	.word	0x0802c604
 800cc28:	200000a4 	.word	0x200000a4
 800cc2c:	0000c350 	.word	0x0000c350
 800cc30:	20000f74 	.word	0x20000f74
 800cc34:	20000f57 	.word	0x20000f57
 800cc38:	200005ac 	.word	0x200005ac
 800cc3c:	200000a3 	.word	0x200000a3
 800cc40:	20000f5a 	.word	0x20000f5a
 800cc44:	20000f56 	.word	0x20000f56
 800cc48:	20000f54 	.word	0x20000f54
 800cc4c:	20001fa9 	.word	0x20001fa9
 800cc50:	2000101c 	.word	0x2000101c
 800cc54:	0802c638 	.word	0x0802c638
 800cc58:	0802c670 	.word	0x0802c670
 800cc5c:	00001194 	.word	0x00001194
 800cc60:	20000f59 	.word	0x20000f59
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800cc64:	4b47      	ldr	r3, [pc, #284]	@ (800cd84 <main+0x48c>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d81c      	bhi.n	800cca6 <main+0x3ae>
 800cc6c:	4b46      	ldr	r3, [pc, #280]	@ (800cd88 <main+0x490>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2201      	movs	r2, #1
 800cc72:	4053      	eors	r3, r2
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d015      	beq.n	800cca6 <main+0x3ae>
 800cc7a:	4b44      	ldr	r3, [pc, #272]	@ (800cd8c <main+0x494>)
 800cc7c:	789b      	ldrb	r3, [r3, #2]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d011      	beq.n	800cca6 <main+0x3ae>
        Info("Battery level insufficient for sen5x operation");
 800cc82:	4a43      	ldr	r2, [pc, #268]	@ (800cd90 <main+0x498>)
 800cc84:	4b43      	ldr	r3, [pc, #268]	@ (800cd94 <main+0x49c>)
 800cc86:	0019      	movs	r1, r3
 800cc88:	2002      	movs	r0, #2
 800cc8a:	f006 ff1f 	bl	8013acc <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800cc8e:	4b3f      	ldr	r3, [pc, #252]	@ (800cd8c <main+0x494>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800cc94:	4b40      	ldr	r3, [pc, #256]	@ (800cd98 <main+0x4a0>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800cc9a:	4b40      	ldr	r3, [pc, #256]	@ (800cd9c <main+0x4a4>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <main+0x3ae>
          sen5x_Power_Off();
 800cca2:	f001 fb99 	bl	800e3d8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800cca6:	f7fa fc3f 	bl	8007528 <ESP_Upkeep>
 800ccaa:	0003      	movs	r3, r0
 800ccac:	001a      	movs	r2, r3
 800ccae:	4b3c      	ldr	r3, [pc, #240]	@ (800cda0 <main+0x4a8>)
 800ccb0:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800ccb2:	4b3c      	ldr	r3, [pc, #240]	@ (800cda4 <main+0x4ac>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	4053      	eors	r3, r2
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00f      	beq.n	800cce0 <main+0x3e8>
 800ccc0:	4b39      	ldr	r3, [pc, #228]	@ (800cda8 <main+0x4b0>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	4053      	eors	r3, r2
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d008      	beq.n	800cce0 <main+0x3e8>
 800ccce:	4b37      	ldr	r3, [pc, #220]	@ (800cdac <main+0x4b4>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	4053      	eors	r3, r2
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <main+0x3e8>
      Device_Test();  // for device with startup time
 800ccdc:	f000 fc9a 	bl	800d614 <Device_Test>
    }
    if (!usbPluggedIn) {
 800cce0:	4b33      	ldr	r3, [pc, #204]	@ (800cdb0 <main+0x4b8>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	2201      	movs	r2, #1
 800cce6:	4053      	eors	r3, r2
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d030      	beq.n	800cd50 <main+0x458>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800ccee:	4b31      	ldr	r3, [pc, #196]	@ (800cdb4 <main+0x4bc>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	4053      	eors	r3, r2
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d029      	beq.n	800cd50 <main+0x458>
 800ccfc:	f000 fd08 	bl	800d710 <AllDevicesReady>
 800cd00:	1e03      	subs	r3, r0, #0
 800cd02:	d025      	beq.n	800cd50 <main+0x458>
 800cd04:	4b2c      	ldr	r3, [pc, #176]	@ (800cdb8 <main+0x4c0>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d021      	beq.n	800cd50 <main+0x458>
        EnabledConnectedDevices();
 800cd0c:	f000 fe26 	bl	800d95c <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800cd10:	f7fc fcb2 	bl	8009678 <ReadSolarVoltage>
 800cd14:	0003      	movs	r3, r0
 800cd16:	001a      	movs	r2, r3
 800cd18:	4b28      	ldr	r3, [pc, #160]	@ (800cdbc <main+0x4c4>)
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d90c      	bls.n	800cd38 <main+0x440>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800cd1e:	4b28      	ldr	r3, [pc, #160]	@ (800cdc0 <main+0x4c8>)
 800cd20:	795b      	ldrb	r3, [r3, #5]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <main+0x434>
 800cd26:	2382      	movs	r3, #130	@ 0x82
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	e001      	b.n	800cd30 <main+0x438>
 800cd2c:	238c      	movs	r3, #140	@ 0x8c
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	0018      	movs	r0, r3
 800cd32:	f7fd f9ef 	bl	800a114 <Enter_Stop_Mode>
 800cd36:	e00b      	b.n	800cd50 <main+0x458>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800cd38:	4b21      	ldr	r3, [pc, #132]	@ (800cdc0 <main+0x4c8>)
 800cd3a:	795b      	ldrb	r3, [r3, #5]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <main+0x44e>
 800cd40:	23d7      	movs	r3, #215	@ 0xd7
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	e001      	b.n	800cd4a <main+0x452>
 800cd46:	23dc      	movs	r3, #220	@ 0xdc
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f7fd f9e2 	bl	800a114 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800cd50:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc4 <main+0x4cc>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <main+0x464>
      check_cli_command();
 800cd58:	f000 f8c2 	bl	800cee0 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800cd5c:	f7fc fce0 	bl	8009720 <Check_USB_PowerOn>
 800cd60:	1e03      	subs	r3, r0, #0
 800cd62:	d100      	bne.n	800cd66 <main+0x46e>
 800cd64:	e65e      	b.n	800ca24 <main+0x12c>
 800cd66:	4b18      	ldr	r3, [pc, #96]	@ (800cdc8 <main+0x4d0>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4053      	eors	r3, r2
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d100      	bne.n	800cd76 <main+0x47e>
 800cd74:	e656      	b.n	800ca24 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800cd76:	f015 ff55 	bl	8022c24 <GetUsbRxPointer>
 800cd7a:	0003      	movs	r3, r0
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f7fc f9e5 	bl	800914c <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800cd82:	e64f      	b.n	800ca24 <main+0x12c>
 800cd84:	20000f70 	.word	0x20000f70
 800cd88:	200000a3 	.word	0x200000a3
 800cd8c:	20000f74 	.word	0x20000f74
 800cd90:	0802c674 	.word	0x0802c674
 800cd94:	0802c5ec 	.word	0x0802c5ec
 800cd98:	2000101a 	.word	0x2000101a
 800cd9c:	20001019 	.word	0x20001019
 800cda0:	20000f5a 	.word	0x20000f5a
 800cda4:	20000f54 	.word	0x20000f54
 800cda8:	20000f55 	.word	0x20000f55
 800cdac:	20000f56 	.word	0x20000f56
 800cdb0:	20001fa9 	.word	0x20001fa9
 800cdb4:	20001faa 	.word	0x20001faa
 800cdb8:	200005b3 	.word	0x200005b3
 800cdbc:	00001324 	.word	0x00001324
 800cdc0:	20000f7c 	.word	0x20000f7c
 800cdc4:	20000f5c 	.word	0x20000f5c
 800cdc8:	200005af 	.word	0x200005af

0800cdcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cdcc:	b590      	push	{r4, r7, lr}
 800cdce:	b09d      	sub	sp, #116	@ 0x74
 800cdd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cdd2:	2438      	movs	r4, #56	@ 0x38
 800cdd4:	193b      	adds	r3, r7, r4
 800cdd6:	0018      	movs	r0, r3
 800cdd8:	2338      	movs	r3, #56	@ 0x38
 800cdda:	001a      	movs	r2, r3
 800cddc:	2100      	movs	r1, #0
 800cdde:	f019 f969 	bl	80260b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cde2:	2324      	movs	r3, #36	@ 0x24
 800cde4:	18fb      	adds	r3, r7, r3
 800cde6:	0018      	movs	r0, r3
 800cde8:	2314      	movs	r3, #20
 800cdea:	001a      	movs	r2, r3
 800cdec:	2100      	movs	r1, #0
 800cdee:	f019 f961 	bl	80260b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cdf2:	003b      	movs	r3, r7
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	2324      	movs	r3, #36	@ 0x24
 800cdf8:	001a      	movs	r2, r3
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f019 f95a 	bl	80260b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ce00:	4b34      	ldr	r3, [pc, #208]	@ (800ced4 <SystemClock_Config+0x108>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a34      	ldr	r2, [pc, #208]	@ (800ced8 <SystemClock_Config+0x10c>)
 800ce06:	401a      	ands	r2, r3
 800ce08:	4b32      	ldr	r3, [pc, #200]	@ (800ced4 <SystemClock_Config+0x108>)
 800ce0a:	2180      	movs	r1, #128	@ 0x80
 800ce0c:	0109      	lsls	r1, r1, #4
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800ce12:	f00d ff47 	bl	801aca4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800ce16:	4b31      	ldr	r3, [pc, #196]	@ (800cedc <SystemClock_Config+0x110>)
 800ce18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1a:	4a2f      	ldr	r2, [pc, #188]	@ (800ced8 <SystemClock_Config+0x10c>)
 800ce1c:	401a      	ands	r2, r3
 800ce1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cedc <SystemClock_Config+0x110>)
 800ce20:	2180      	movs	r1, #128	@ 0x80
 800ce22:	0149      	lsls	r1, r1, #5
 800ce24:	430a      	orrs	r2, r1
 800ce26:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800ce28:	193b      	adds	r3, r7, r4
 800ce2a:	2226      	movs	r2, #38	@ 0x26
 800ce2c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ce2e:	193b      	adds	r3, r7, r4
 800ce30:	2280      	movs	r2, #128	@ 0x80
 800ce32:	0052      	lsls	r2, r2, #1
 800ce34:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ce36:	0021      	movs	r1, r4
 800ce38:	187b      	adds	r3, r7, r1
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ce3e:	187b      	adds	r3, r7, r1
 800ce40:	2210      	movs	r2, #16
 800ce42:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800ce44:	187b      	adds	r3, r7, r1
 800ce46:	2201      	movs	r2, #1
 800ce48:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800ce4a:	187b      	adds	r3, r7, r1
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ce50:	187b      	adds	r3, r7, r1
 800ce52:	0018      	movs	r0, r3
 800ce54:	f00d ffb6 	bl	801adc4 <HAL_RCC_OscConfig>
 800ce58:	1e03      	subs	r3, r0, #0
 800ce5a:	d001      	beq.n	800ce60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ce5c:	f000 f910 	bl	800d080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ce60:	2124      	movs	r1, #36	@ 0x24
 800ce62:	187b      	adds	r3, r7, r1
 800ce64:	220f      	movs	r2, #15
 800ce66:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800ce68:	187b      	adds	r3, r7, r1
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ce6e:	187b      	adds	r3, r7, r1
 800ce70:	2200      	movs	r2, #0
 800ce72:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ce74:	187b      	adds	r3, r7, r1
 800ce76:	2200      	movs	r2, #0
 800ce78:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ce7a:	187b      	adds	r3, r7, r1
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800ce80:	187b      	adds	r3, r7, r1
 800ce82:	2100      	movs	r1, #0
 800ce84:	0018      	movs	r0, r3
 800ce86:	f00e fb71 	bl	801b56c <HAL_RCC_ClockConfig>
 800ce8a:	1e03      	subs	r3, r0, #0
 800ce8c:	d001      	beq.n	800ce92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800ce8e:	f000 f8f7 	bl	800d080 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800ce92:	003b      	movs	r3, r7
 800ce94:	226d      	movs	r2, #109	@ 0x6d
 800ce96:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ce98:	003b      	movs	r3, r7
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800ce9e:	003b      	movs	r3, r7
 800cea0:	2200      	movs	r2, #0
 800cea2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800cea4:	003b      	movs	r3, r7
 800cea6:	2200      	movs	r2, #0
 800cea8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ceaa:	003b      	movs	r3, r7
 800ceac:	2280      	movs	r2, #128	@ 0x80
 800ceae:	0252      	lsls	r2, r2, #9
 800ceb0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ceb2:	003b      	movs	r3, r7
 800ceb4:	2280      	movs	r2, #128	@ 0x80
 800ceb6:	04d2      	lsls	r2, r2, #19
 800ceb8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ceba:	003b      	movs	r3, r7
 800cebc:	0018      	movs	r0, r3
 800cebe:	f00e fd79 	bl	801b9b4 <HAL_RCCEx_PeriphCLKConfig>
 800cec2:	1e03      	subs	r3, r0, #0
 800cec4:	d001      	beq.n	800ceca <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800cec6:	f000 f8db 	bl	800d080 <Error_Handler>
  }
}
 800ceca:	46c0      	nop			@ (mov r8, r8)
 800cecc:	46bd      	mov	sp, r7
 800cece:	b01d      	add	sp, #116	@ 0x74
 800ced0:	bd90      	pop	{r4, r7, pc}
 800ced2:	46c0      	nop			@ (mov r8, r8)
 800ced4:	40007000 	.word	0x40007000
 800ced8:	ffffe7ff 	.word	0xffffe7ff
 800cedc:	40021000 	.word	0x40021000

0800cee0 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800cee4:	4b38      	ldr	r3, [pc, #224]	@ (800cfc8 <check_cli_command+0xe8>)
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	3b61      	subs	r3, #97	@ 0x61
 800ceea:	2b15      	cmp	r3, #21
 800ceec:	d836      	bhi.n	800cf5c <check_cli_command+0x7c>
 800ceee:	009a      	lsls	r2, r3, #2
 800cef0:	4b36      	ldr	r3, [pc, #216]	@ (800cfcc <check_cli_command+0xec>)
 800cef2:	18d3      	adds	r3, r2, r3
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800cef8:	4b35      	ldr	r3, [pc, #212]	@ (800cfd0 <check_cli_command+0xf0>)
 800cefa:	0018      	movs	r0, r3
 800cefc:	f018 ff66 	bl	8025dcc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800cf00:	2003      	movs	r0, #3
 800cf02:	f006 fe4d 	bl	8013ba0 <SetVerboseLevel>
      break;
 800cf06:	e058      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800cf08:	f7fb fcd8 	bl	80088bc <PC_show_Keys>
    break;
 800cf0c:	e055      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800cf0e:	f7f7 fcfb 	bl	8004908 <forceNTPupdate>
    break;
 800cf12:	e052      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800cf14:	4b2f      	ldr	r3, [pc, #188]	@ (800cfd4 <check_cli_command+0xf4>)
 800cf16:	0018      	movs	r0, r3
 800cf18:	f018 ff58 	bl	8025dcc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800cf1c:	2002      	movs	r0, #2
 800cf1e:	f006 fe3f 	bl	8013ba0 <SetVerboseLevel>
      break;
 800cf22:	e04a      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800cf24:	4b2c      	ldr	r3, [pc, #176]	@ (800cfd8 <check_cli_command+0xf8>)
 800cf26:	0018      	movs	r0, r3
 800cf28:	f018 ff50 	bl	8025dcc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	f006 fe37 	bl	8013ba0 <SetVerboseLevel>
      break;
 800cf32:	e042      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800cf34:	4b29      	ldr	r3, [pc, #164]	@ (800cfdc <check_cli_command+0xfc>)
 800cf36:	0018      	movs	r0, r3
 800cf38:	f018 ff48 	bl	8025dcc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	f006 fe2f 	bl	8013ba0 <SetVerboseLevel>
      break;
 800cf42:	e03a      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800cf44:	f007 fb02 	bl	801454c <HAL_GetTick>
 800cf48:	0002      	movs	r2, r0
 800cf4a:	4b25      	ldr	r3, [pc, #148]	@ (800cfe0 <check_cli_command+0x100>)
 800cf4c:	601a      	str	r2, [r3, #0]
      break;
 800cf4e:	e034      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800cf50:	f7fc fc7e 	bl	8009850 <showTime>
      break;
 800cf54:	e031      	b.n	800cfba <check_cli_command+0xda>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800cf56:	f006 fe3d 	bl	8013bd4 <BinaryReleaseInfo>
      break;
 800cf5a:	e02e      	b.n	800cfba <check_cli_command+0xda>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800cf5c:	4a21      	ldr	r2, [pc, #132]	@ (800cfe4 <check_cli_command+0x104>)
 800cf5e:	4b22      	ldr	r3, [pc, #136]	@ (800cfe8 <check_cli_command+0x108>)
 800cf60:	0019      	movs	r1, r3
 800cf62:	2001      	movs	r0, #1
 800cf64:	f006 fdb2 	bl	8013acc <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800cf68:	4b20      	ldr	r3, [pc, #128]	@ (800cfec <check_cli_command+0x10c>)
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f018 ff2e 	bl	8025dcc <puts>
      printf("a - VerboseLevel set to all\r\n");
 800cf70:	4b1f      	ldr	r3, [pc, #124]	@ (800cff0 <check_cli_command+0x110>)
 800cf72:	0018      	movs	r0, r3
 800cf74:	f018 ff2a 	bl	8025dcc <puts>
      printf("e - show EEPROM\r\n");
 800cf78:	4b1e      	ldr	r3, [pc, #120]	@ (800cff4 <check_cli_command+0x114>)
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	f018 ff26 	bl	8025dcc <puts>
      printf("f - Force NTP time synchronization\r\n");
 800cf80:	4b1d      	ldr	r3, [pc, #116]	@ (800cff8 <check_cli_command+0x118>)
 800cf82:	0018      	movs	r0, r3
 800cf84:	f018 ff22 	bl	8025dcc <puts>
      printf("i - VerboseLevel set to info\r\n");
 800cf88:	4b1c      	ldr	r3, [pc, #112]	@ (800cffc <check_cli_command+0x11c>)
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	f018 ff1e 	bl	8025dcc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800cf90:	4b1b      	ldr	r3, [pc, #108]	@ (800d000 <check_cli_command+0x120>)
 800cf92:	0018      	movs	r0, r3
 800cf94:	f018 ff1a 	bl	8025dcc <puts>
      printf("n - VerboseLevel set to none\r\n");
 800cf98:	4b1a      	ldr	r3, [pc, #104]	@ (800d004 <check_cli_command+0x124>)
 800cf9a:	0018      	movs	r0, r3
 800cf9c:	f018 ff16 	bl	8025dcc <puts>
      printf("s - Start particle measurement\r\n");
 800cfa0:	4b19      	ldr	r3, [pc, #100]	@ (800d008 <check_cli_command+0x128>)
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f018 ff12 	bl	8025dcc <puts>
      printf("t - Show actual system time\r\n");
 800cfa8:	4b18      	ldr	r3, [pc, #96]	@ (800d00c <check_cli_command+0x12c>)
 800cfaa:	0018      	movs	r0, r3
 800cfac:	f018 ff0e 	bl	8025dcc <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
      printf("v - Show system version\r\n");
 800cfb0:	4b17      	ldr	r3, [pc, #92]	@ (800d010 <check_cli_command+0x130>)
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f018 ff0a 	bl	8025dcc <puts>
  break;
 800cfb8:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800cfba:	4b03      	ldr	r3, [pc, #12]	@ (800cfc8 <check_cli_command+0xe8>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	701a      	strb	r2, [r3, #0]
}
 800cfc0:	46c0      	nop			@ (mov r8, r8)
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	46c0      	nop			@ (mov r8, r8)
 800cfc8:	20000f5c 	.word	0x20000f5c
 800cfcc:	0802e028 	.word	0x0802e028
 800cfd0:	0802c6a4 	.word	0x0802c6a4
 800cfd4:	0802c6c0 	.word	0x0802c6c0
 800cfd8:	0802c6dc 	.word	0x0802c6dc
 800cfdc:	0802c6fc 	.word	0x0802c6fc
 800cfe0:	20001028 	.word	0x20001028
 800cfe4:	0802c718 	.word	0x0802c718
 800cfe8:	0802c748 	.word	0x0802c748
 800cfec:	0802c74c 	.word	0x0802c74c
 800cff0:	0802c764 	.word	0x0802c764
 800cff4:	0802c784 	.word	0x0802c784
 800cff8:	0802c798 	.word	0x0802c798
 800cffc:	0802c7bc 	.word	0x0802c7bc
 800d000:	0802c7dc 	.word	0x0802c7dc
 800d004:	0802c800 	.word	0x0802c800
 800d008:	0802c820 	.word	0x0802c820
 800d00c:	0802c840 	.word	0x0802c840
 800d010:	0802c860 	.word	0x0802c860

0800d014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d01c:	4907      	ldr	r1, [pc, #28]	@ (800d03c <HAL_UART_RxCpltCallback+0x28>)
 800d01e:	4b08      	ldr	r3, [pc, #32]	@ (800d040 <HAL_UART_RxCpltCallback+0x2c>)
 800d020:	2201      	movs	r2, #1
 800d022:	0018      	movs	r0, r3
 800d024:	f010 f888 	bl	801d138 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d028:	4904      	ldr	r1, [pc, #16]	@ (800d03c <HAL_UART_RxCpltCallback+0x28>)
 800d02a:	4b05      	ldr	r3, [pc, #20]	@ (800d040 <HAL_UART_RxCpltCallback+0x2c>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	0018      	movs	r0, r3
 800d030:	f010 f882 	bl	801d138 <HAL_UART_Receive_IT>
}
 800d034:	46c0      	nop			@ (mov r8, r8)
 800d036:	46bd      	mov	sp, r7
 800d038:	b002      	add	sp, #8
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	20000f5c 	.word	0x20000f5c
 800d040:	20002140 	.word	0x20002140

0800d044 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	0002      	movs	r2, r0
 800d04c:	1dbb      	adds	r3, r7, #6
 800d04e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d050:	1dbb      	adds	r3, r7, #6
 800d052:	881a      	ldrh	r2, [r3, #0]
 800d054:	2380      	movs	r3, #128	@ 0x80
 800d056:	021b      	lsls	r3, r3, #8
 800d058:	429a      	cmp	r2, r3
 800d05a:	d10b      	bne.n	800d074 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d05c:	f005 ffdc 	bl	8013018 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d060:	f000 f860 	bl	800d124 <GetPMSensorPresence>
 800d064:	1e03      	subs	r3, r0, #0
 800d066:	d005      	beq.n	800d074 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d068:	4b04      	ldr	r3, [pc, #16]	@ (800d07c <HAL_GPIO_EXTI_Callback+0x38>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d06e:	2000      	movs	r0, #0
 800d070:	f001 f8f4 	bl	800e25c <sen5x_Set_sen5x_state>
    }
  }
}
 800d074:	46c0      	nop			@ (mov r8, r8)
 800d076:	46bd      	mov	sp, r7
 800d078:	b002      	add	sp, #8
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	20000f74 	.word	0x20000f74

0800d080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d084:	f005 fb9c 	bl	80127c0 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d088:	b672      	cpsid	i
}
 800d08a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d08c:	4a05      	ldr	r2, [pc, #20]	@ (800d0a4 <Error_Handler+0x24>)
 800d08e:	4b06      	ldr	r3, [pc, #24]	@ (800d0a8 <Error_Handler+0x28>)
 800d090:	0019      	movs	r1, r3
 800d092:	2001      	movs	r0, #1
 800d094:	f006 fd1a 	bl	8013acc <CreateLine>

    HAL_Delay(2500);
 800d098:	4b04      	ldr	r3, [pc, #16]	@ (800d0ac <Error_Handler+0x2c>)
 800d09a:	0018      	movs	r0, r3
 800d09c:	f007 fa60 	bl	8014560 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d0a0:	46c0      	nop			@ (mov r8, r8)
 800d0a2:	e7f3      	b.n	800d08c <Error_Handler+0xc>
 800d0a4:	0802c87c 	.word	0x0802c87c
 800d0a8:	0802c748 	.word	0x0802c748
 800d0ac:	000009c4 	.word	0x000009c4

0800d0b0 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d0b4:	4b19      	ldr	r3, [pc, #100]	@ (800d11c <testInit+0x6c>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d0ba:	4b18      	ldr	r3, [pc, #96]	@ (800d11c <testInit+0x6c>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d0c0:	4b16      	ldr	r3, [pc, #88]	@ (800d11c <testInit+0x6c>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d0c6:	4b15      	ldr	r3, [pc, #84]	@ (800d11c <testInit+0x6c>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d0cc:	4b13      	ldr	r3, [pc, #76]	@ (800d11c <testInit+0x6c>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d0d2:	4b12      	ldr	r3, [pc, #72]	@ (800d11c <testInit+0x6c>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d0d8:	4b10      	ldr	r3, [pc, #64]	@ (800d11c <testInit+0x6c>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d0de:	4b0f      	ldr	r3, [pc, #60]	@ (800d11c <testInit+0x6c>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d11c <testInit+0x6c>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d120 <testInit+0x70>)
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d120 <testInit+0x70>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d120 <testInit+0x70>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d0fc:	4b08      	ldr	r3, [pc, #32]	@ (800d120 <testInit+0x70>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d102:	4b07      	ldr	r3, [pc, #28]	@ (800d120 <testInit+0x70>)
 800d104:	2201      	movs	r2, #1
 800d106:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d108:	4b05      	ldr	r3, [pc, #20]	@ (800d120 <testInit+0x70>)
 800d10a:	2201      	movs	r2, #1
 800d10c:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d10e:	4b04      	ldr	r3, [pc, #16]	@ (800d120 <testInit+0x70>)
 800d110:	2201      	movs	r2, #1
 800d112:	719a      	strb	r2, [r3, #6]
}
 800d114:	46c0      	nop			@ (mov r8, r8)
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	46c0      	nop			@ (mov r8, r8)
 800d11c:	20000f7c 	.word	0x20000f7c
 800d120:	20000f74 	.word	0x20000f74

0800d124 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d128:	4b02      	ldr	r3, [pc, #8]	@ (800d134 <GetPMSensorPresence+0x10>)
 800d12a:	795b      	ldrb	r3, [r3, #5]
}
 800d12c:	0018      	movs	r0, r3
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	46c0      	nop			@ (mov r8, r8)
 800d134:	20000f7c 	.word	0x20000f7c

0800d138 <DisablePMSensor>:

void DisablePMSensor() {
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d13c:	4b02      	ldr	r3, [pc, #8]	@ (800d148 <DisablePMSensor+0x10>)
 800d13e:	2200      	movs	r2, #0
 800d140:	715a      	strb	r2, [r3, #5]
}
 800d142:	46c0      	nop			@ (mov r8, r8)
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20000f7c 	.word	0x20000f7c

0800d14c <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d150:	4b02      	ldr	r3, [pc, #8]	@ (800d15c <IsAHT20SensorPresent+0x10>)
 800d152:	789b      	ldrb	r3, [r3, #2]
}
 800d154:	0018      	movs	r0, r3
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	20000f7c 	.word	0x20000f7c

0800d160 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d164:	4b02      	ldr	r3, [pc, #8]	@ (800d170 <IsBMP280SensorPresent+0x10>)
 800d166:	791b      	ldrb	r3, [r3, #4]
}
 800d168:	0018      	movs	r0, r3
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	46c0      	nop			@ (mov r8, r8)
 800d170:	20000f7c 	.word	0x20000f7c

0800d174 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d178:	4b02      	ldr	r3, [pc, #8]	@ (800d184 <IsENS160SensorPresent+0x10>)
 800d17a:	78db      	ldrb	r3, [r3, #3]
}
 800d17c:	0018      	movs	r0, r3
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	46c0      	nop			@ (mov r8, r8)
 800d184:	20000f7c 	.word	0x20000f7c

0800d188 <IsSGPPresent>:

bool IsSGPPresent() {
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d18c:	4b02      	ldr	r3, [pc, #8]	@ (800d198 <IsSGPPresent+0x10>)
 800d18e:	785b      	ldrb	r3, [r3, #1]
}
 800d190:	0018      	movs	r0, r3
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	46c0      	nop			@ (mov r8, r8)
 800d198:	20000f7c 	.word	0x20000f7c

0800d19c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	0002      	movs	r2, r0
 800d1a4:	1dfb      	adds	r3, r7, #7
 800d1a6:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d1a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d1d8 <SetVOCSensorDIS_ENA+0x3c>)
 800d1aa:	1dfa      	adds	r2, r7, #7
 800d1ac:	7812      	ldrb	r2, [r2, #0]
 800d1ae:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1dc <SetVOCSensorDIS_ENA+0x40>)
 800d1b2:	1dfa      	adds	r2, r7, #7
 800d1b4:	7812      	ldrb	r2, [r2, #0]
 800d1b6:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d1b8:	1dfb      	adds	r3, r7, #7
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <SetVOCSensorDIS_ENA+0x28>
 800d1c0:	4b07      	ldr	r3, [pc, #28]	@ (800d1e0 <SetVOCSensorDIS_ENA+0x44>)
 800d1c2:	e000      	b.n	800d1c6 <SetVOCSensorDIS_ENA+0x2a>
 800d1c4:	4b07      	ldr	r3, [pc, #28]	@ (800d1e4 <SetVOCSensorDIS_ENA+0x48>)
 800d1c6:	4a08      	ldr	r2, [pc, #32]	@ (800d1e8 <SetVOCSensorDIS_ENA+0x4c>)
 800d1c8:	4908      	ldr	r1, [pc, #32]	@ (800d1ec <SetVOCSensorDIS_ENA+0x50>)
 800d1ca:	2003      	movs	r0, #3
 800d1cc:	f006 fc7e 	bl	8013acc <CreateLine>
}
 800d1d0:	46c0      	nop			@ (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b002      	add	sp, #8
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	20000f7c 	.word	0x20000f7c
 800d1dc:	20000f74 	.word	0x20000f74
 800d1e0:	0802c8a8 	.word	0x0802c8a8
 800d1e4:	0802c8b0 	.word	0x0802c8b0
 800d1e8:	0802c8bc 	.word	0x0802c8bc
 800d1ec:	0802c8d0 	.word	0x0802c8d0

0800d1f0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d1f4:	4b02      	ldr	r3, [pc, #8]	@ (800d200 <IsPMSensorEnabled+0x10>)
 800d1f6:	789b      	ldrb	r3, [r3, #2]
}
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	46c0      	nop			@ (mov r8, r8)
 800d200:	20000f74 	.word	0x20000f74

0800d204 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	0002      	movs	r2, r0
 800d20c:	1dfb      	adds	r3, r7, #7
 800d20e:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d210:	4b05      	ldr	r3, [pc, #20]	@ (800d228 <SetVOCSensorStatus+0x24>)
 800d212:	7a1b      	ldrb	r3, [r3, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d003      	beq.n	800d220 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d218:	4b04      	ldr	r3, [pc, #16]	@ (800d22c <SetVOCSensorStatus+0x28>)
 800d21a:	1dfa      	adds	r2, r7, #7
 800d21c:	7812      	ldrb	r2, [r2, #0]
 800d21e:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d220:	46c0      	nop			@ (mov r8, r8)
 800d222:	46bd      	mov	sp, r7
 800d224:	b002      	add	sp, #8
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20000f7c 	.word	0x20000f7c
 800d22c:	20000f74 	.word	0x20000f74

0800d230 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	0002      	movs	r2, r0
 800d238:	1dfb      	adds	r3, r7, #7
 800d23a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d23c:	4b03      	ldr	r3, [pc, #12]	@ (800d24c <SetPMSensorStatus+0x1c>)
 800d23e:	1dfa      	adds	r2, r7, #7
 800d240:	7812      	ldrb	r2, [r2, #0]
 800d242:	709a      	strb	r2, [r3, #2]
}
 800d244:	46c0      	nop			@ (mov r8, r8)
 800d246:	46bd      	mov	sp, r7
 800d248:	b002      	add	sp, #8
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	20000f74 	.word	0x20000f74

0800d250 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d254:	4b02      	ldr	r3, [pc, #8]	@ (800d260 <SetESPMeasurementDone+0x10>)
 800d256:	2201      	movs	r2, #1
 800d258:	71da      	strb	r2, [r3, #7]
}
 800d25a:	46c0      	nop			@ (mov r8, r8)
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20000f7c 	.word	0x20000f7c

0800d264 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
  testInit();
 800d272:	f7ff ff1d 	bl	800d0b0 <testInit>
  I2CSensors_Init(sensorI2C);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	0018      	movs	r0, r3
 800d27a:	f7fa febb 	bl	8007ff4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d27e:	f006 fef1 	bl	8014064 <HIDS_DeviceConnected>
 800d282:	0003      	movs	r3, r0
 800d284:	001a      	movs	r2, r3
 800d286:	2301      	movs	r3, #1
 800d288:	4053      	eors	r3, r2
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00c      	beq.n	800d2aa <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d290:	4abf      	ldr	r2, [pc, #764]	@ (800d590 <Device_Init+0x32c>)
 800d292:	4bc0      	ldr	r3, [pc, #768]	@ (800d594 <Device_Init+0x330>)
 800d294:	0019      	movs	r1, r3
 800d296:	2001      	movs	r0, #1
 800d298:	f006 fc18 	bl	8013acc <CreateLine>
     SensorProbe.HT_Present = false;
 800d29c:	4bbe      	ldr	r3, [pc, #760]	@ (800d598 <Device_Init+0x334>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d2a2:	4bbe      	ldr	r3, [pc, #760]	@ (800d59c <Device_Init+0x338>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e008      	b.n	800d2bc <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d2aa:	4bbb      	ldr	r3, [pc, #748]	@ (800d598 <Device_Init+0x334>)
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d2b0:	4abb      	ldr	r2, [pc, #748]	@ (800d5a0 <Device_Init+0x33c>)
 800d2b2:	4bbc      	ldr	r3, [pc, #752]	@ (800d5a4 <Device_Init+0x340>)
 800d2b4:	0019      	movs	r1, r3
 800d2b6:	2003      	movs	r0, #3
 800d2b8:	f006 fc08 	bl	8013acc <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d2bc:	f7fe f968 	bl	800b590 <BMP280_DeviceConnected>
 800d2c0:	0003      	movs	r3, r0
 800d2c2:	001a      	movs	r2, r3
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	4053      	eors	r3, r2
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00c      	beq.n	800d2e8 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d2ce:	4ab6      	ldr	r2, [pc, #728]	@ (800d5a8 <Device_Init+0x344>)
 800d2d0:	4bb0      	ldr	r3, [pc, #704]	@ (800d594 <Device_Init+0x330>)
 800d2d2:	0019      	movs	r1, r3
 800d2d4:	2001      	movs	r0, #1
 800d2d6:	f006 fbf9 	bl	8013acc <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d2da:	4baf      	ldr	r3, [pc, #700]	@ (800d598 <Device_Init+0x334>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d2e0:	4bae      	ldr	r3, [pc, #696]	@ (800d59c <Device_Init+0x338>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	715a      	strb	r2, [r3, #5]
 800d2e6:	e008      	b.n	800d2fa <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d2e8:	4bab      	ldr	r3, [pc, #684]	@ (800d598 <Device_Init+0x334>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d2ee:	4aaf      	ldr	r2, [pc, #700]	@ (800d5ac <Device_Init+0x348>)
 800d2f0:	4bac      	ldr	r3, [pc, #688]	@ (800d5a4 <Device_Init+0x340>)
 800d2f2:	0019      	movs	r1, r3
 800d2f4:	2003      	movs	r0, #3
 800d2f6:	f006 fbe9 	bl	8013acc <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d2fa:	f003 fd7b 	bl	8010df4 <SGP_DeviceConnected>
 800d2fe:	0003      	movs	r3, r0
 800d300:	001a      	movs	r2, r3
 800d302:	2301      	movs	r3, #1
 800d304:	4053      	eors	r3, r2
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00c      	beq.n	800d326 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d30c:	4ba2      	ldr	r3, [pc, #648]	@ (800d598 <Device_Init+0x334>)
 800d30e:	2200      	movs	r2, #0
 800d310:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d312:	4aa7      	ldr	r2, [pc, #668]	@ (800d5b0 <Device_Init+0x34c>)
 800d314:	4b9f      	ldr	r3, [pc, #636]	@ (800d594 <Device_Init+0x330>)
 800d316:	0019      	movs	r1, r3
 800d318:	2001      	movs	r0, #1
 800d31a:	f006 fbd7 	bl	8013acc <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d31e:	4b9f      	ldr	r3, [pc, #636]	@ (800d59c <Device_Init+0x338>)
 800d320:	2200      	movs	r2, #0
 800d322:	705a      	strb	r2, [r3, #1]
 800d324:	e00b      	b.n	800d33e <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d326:	4b9c      	ldr	r3, [pc, #624]	@ (800d598 <Device_Init+0x334>)
 800d328:	2201      	movs	r2, #1
 800d32a:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d32c:	4b9a      	ldr	r3, [pc, #616]	@ (800d598 <Device_Init+0x334>)
 800d32e:	2201      	movs	r2, #1
 800d330:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d332:	4aa0      	ldr	r2, [pc, #640]	@ (800d5b4 <Device_Init+0x350>)
 800d334:	4b9b      	ldr	r3, [pc, #620]	@ (800d5a4 <Device_Init+0x340>)
 800d336:	0019      	movs	r1, r3
 800d338:	2003      	movs	r0, #3
 800d33a:	f006 fbc7 	bl	8013acc <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d33e:	f7f6 fd93 	bl	8003e68 <ENS_DeviceConnected>
 800d342:	0003      	movs	r3, r0
 800d344:	001a      	movs	r2, r3
 800d346:	2301      	movs	r3, #1
 800d348:	4053      	eors	r3, r2
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00c      	beq.n	800d36a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d350:	4b91      	ldr	r3, [pc, #580]	@ (800d598 <Device_Init+0x334>)
 800d352:	2200      	movs	r2, #0
 800d354:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d356:	4a98      	ldr	r2, [pc, #608]	@ (800d5b8 <Device_Init+0x354>)
 800d358:	4b8e      	ldr	r3, [pc, #568]	@ (800d594 <Device_Init+0x330>)
 800d35a:	0019      	movs	r1, r3
 800d35c:	2001      	movs	r0, #1
 800d35e:	f006 fbb5 	bl	8013acc <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d362:	4b8e      	ldr	r3, [pc, #568]	@ (800d59c <Device_Init+0x338>)
 800d364:	2200      	movs	r2, #0
 800d366:	719a      	strb	r2, [r3, #6]
 800d368:	e008      	b.n	800d37c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d36a:	4b8b      	ldr	r3, [pc, #556]	@ (800d598 <Device_Init+0x334>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d370:	4a92      	ldr	r2, [pc, #584]	@ (800d5bc <Device_Init+0x358>)
 800d372:	4b8c      	ldr	r3, [pc, #560]	@ (800d5a4 <Device_Init+0x340>)
 800d374:	0019      	movs	r1, r3
 800d376:	2003      	movs	r0, #3
 800d378:	f006 fba8 	bl	8013acc <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d37c:	f7fd fbf0 	bl	800ab60 <AHT20_DeviceConnected>
 800d380:	0003      	movs	r3, r0
 800d382:	001a      	movs	r2, r3
 800d384:	2301      	movs	r3, #1
 800d386:	4053      	eors	r3, r2
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00c      	beq.n	800d3a8 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d38e:	4a8c      	ldr	r2, [pc, #560]	@ (800d5c0 <Device_Init+0x35c>)
 800d390:	4b80      	ldr	r3, [pc, #512]	@ (800d594 <Device_Init+0x330>)
 800d392:	0019      	movs	r1, r3
 800d394:	2001      	movs	r0, #1
 800d396:	f006 fb99 	bl	8013acc <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d39a:	4b7f      	ldr	r3, [pc, #508]	@ (800d598 <Device_Init+0x334>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d3a0:	4b7e      	ldr	r3, [pc, #504]	@ (800d59c <Device_Init+0x338>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	711a      	strb	r2, [r3, #4]
 800d3a6:	e008      	b.n	800d3ba <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d3a8:	4b7b      	ldr	r3, [pc, #492]	@ (800d598 <Device_Init+0x334>)
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d3ae:	4a85      	ldr	r2, [pc, #532]	@ (800d5c4 <Device_Init+0x360>)
 800d3b0:	4b7c      	ldr	r3, [pc, #496]	@ (800d5a4 <Device_Init+0x340>)
 800d3b2:	0019      	movs	r1, r3
 800d3b4:	2003      	movs	r0, #3
 800d3b6:	f006 fb89 	bl	8013acc <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d3ba:	4b77      	ldr	r3, [pc, #476]	@ (800d598 <Device_Init+0x334>)
 800d3bc:	785b      	ldrb	r3, [r3, #1]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d009      	beq.n	800d3d6 <Device_Init+0x172>
 800d3c2:	4b75      	ldr	r3, [pc, #468]	@ (800d598 <Device_Init+0x334>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d005      	beq.n	800d3d6 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	f005 f850 	bl	8012474 <SetDBLED>
 800d3d4:	e018      	b.n	800d408 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2100      	movs	r1, #0
 800d3da:	2001      	movs	r0, #1
 800d3dc:	f005 f84a 	bl	8012474 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d3e0:	4b79      	ldr	r3, [pc, #484]	@ (800d5c8 <Device_Init+0x364>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	0018      	movs	r0, r3
 800d3e8:	f008 fb41 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d3ec:	2380      	movs	r3, #128	@ 0x80
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	4875      	ldr	r0, [pc, #468]	@ (800d5c8 <Device_Init+0x364>)
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	0019      	movs	r1, r3
 800d3f6:	f008 fb3a 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d3fa:	2380      	movs	r3, #128	@ 0x80
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4872      	ldr	r0, [pc, #456]	@ (800d5c8 <Device_Init+0x364>)
 800d400:	2201      	movs	r2, #1
 800d402:	0019      	movs	r1, r3
 800d404:	f008 fb33 	bl	8015a6e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d408:	4b64      	ldr	r3, [pc, #400]	@ (800d59c <Device_Init+0x338>)
 800d40a:	78db      	ldrb	r3, [r3, #3]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d028      	beq.n	800d462 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d410:	4a6e      	ldr	r2, [pc, #440]	@ (800d5cc <Device_Init+0x368>)
 800d412:	4b6f      	ldr	r3, [pc, #444]	@ (800d5d0 <Device_Init+0x36c>)
 800d414:	0019      	movs	r1, r3
 800d416:	2002      	movs	r0, #2
 800d418:	f006 fb58 	bl	8013acc <CreateLine>
    if (!enableMicrophone(true)) {
 800d41c:	2001      	movs	r0, #1
 800d41e:	f004 f91f 	bl	8011660 <enableMicrophone>
 800d422:	0003      	movs	r3, r0
 800d424:	001a      	movs	r2, r3
 800d426:	2301      	movs	r3, #1
 800d428:	4053      	eors	r3, r2
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00c      	beq.n	800d44a <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d430:	4a68      	ldr	r2, [pc, #416]	@ (800d5d4 <Device_Init+0x370>)
 800d432:	4b58      	ldr	r3, [pc, #352]	@ (800d594 <Device_Init+0x330>)
 800d434:	0019      	movs	r1, r3
 800d436:	2001      	movs	r0, #1
 800d438:	f006 fb48 	bl	8013acc <CreateLine>
      SensorProbe.MIC_Present = false;
 800d43c:	4b56      	ldr	r3, [pc, #344]	@ (800d598 <Device_Init+0x334>)
 800d43e:	2200      	movs	r2, #0
 800d440:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d442:	4b56      	ldr	r3, [pc, #344]	@ (800d59c <Device_Init+0x338>)
 800d444:	2200      	movs	r2, #0
 800d446:	70da      	strb	r2, [r3, #3]
 800d448:	e00b      	b.n	800d462 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d44a:	4b53      	ldr	r3, [pc, #332]	@ (800d598 <Device_Init+0x334>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d450:	4b52      	ldr	r3, [pc, #328]	@ (800d59c <Device_Init+0x338>)
 800d452:	2201      	movs	r2, #1
 800d454:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d456:	4a60      	ldr	r2, [pc, #384]	@ (800d5d8 <Device_Init+0x374>)
 800d458:	4b52      	ldr	r3, [pc, #328]	@ (800d5a4 <Device_Init+0x340>)
 800d45a:	0019      	movs	r1, r3
 800d45c:	2003      	movs	r0, #3
 800d45e:	f006 fb35 	bl	8013acc <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d462:	f000 ffef 	bl	800e444 <probe_sen5x>
 800d466:	1e03      	subs	r3, r0, #0
 800d468:	d122      	bne.n	800d4b0 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d46a:	4a5c      	ldr	r2, [pc, #368]	@ (800d5dc <Device_Init+0x378>)
 800d46c:	4b4d      	ldr	r3, [pc, #308]	@ (800d5a4 <Device_Init+0x340>)
 800d46e:	0019      	movs	r1, r3
 800d470:	2003      	movs	r0, #3
 800d472:	f006 fb2b 	bl	8013acc <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d476:	4b48      	ldr	r3, [pc, #288]	@ (800d598 <Device_Init+0x334>)
 800d478:	2201      	movs	r2, #1
 800d47a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d47c:	4b47      	ldr	r3, [pc, #284]	@ (800d59c <Device_Init+0x338>)
 800d47e:	2201      	movs	r2, #1
 800d480:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d482:	4b57      	ldr	r3, [pc, #348]	@ (800d5e0 <Device_Init+0x37c>)
 800d484:	791b      	ldrb	r3, [r3, #4]
 800d486:	2b34      	cmp	r3, #52	@ 0x34
 800d488:	d003      	beq.n	800d492 <Device_Init+0x22e>
 800d48a:	4b55      	ldr	r3, [pc, #340]	@ (800d5e0 <Device_Init+0x37c>)
 800d48c:	791b      	ldrb	r3, [r3, #4]
 800d48e:	2b35      	cmp	r3, #53	@ 0x35
 800d490:	d11c      	bne.n	800d4cc <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d492:	4a54      	ldr	r2, [pc, #336]	@ (800d5e4 <Device_Init+0x380>)
 800d494:	4b4e      	ldr	r3, [pc, #312]	@ (800d5d0 <Device_Init+0x36c>)
 800d496:	0019      	movs	r1, r3
 800d498:	2002      	movs	r0, #2
 800d49a:	f006 fb17 	bl	8013acc <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d49e:	4b3f      	ldr	r3, [pc, #252]	@ (800d59c <Device_Init+0x338>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d4a4:	4b3c      	ldr	r3, [pc, #240]	@ (800d598 <Device_Init+0x334>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d4aa:	f003 fe89 	bl	80111c0 <SGP_SoftReset>
 800d4ae:	e00d      	b.n	800d4cc <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d4b0:	f000 ff92 	bl	800e3d8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d4b4:	4a4c      	ldr	r2, [pc, #304]	@ (800d5e8 <Device_Init+0x384>)
 800d4b6:	4b3b      	ldr	r3, [pc, #236]	@ (800d5a4 <Device_Init+0x340>)
 800d4b8:	0019      	movs	r1, r3
 800d4ba:	2003      	movs	r0, #3
 800d4bc:	f006 fb06 	bl	8013acc <CreateLine>
    SensorProbe.PM_Present = false;
 800d4c0:	4b35      	ldr	r3, [pc, #212]	@ (800d598 <Device_Init+0x334>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800d4c6:	4b35      	ldr	r3, [pc, #212]	@ (800d59c <Device_Init+0x338>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800d4cc:	4b32      	ldr	r3, [pc, #200]	@ (800d598 <Device_Init+0x334>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <Device_Init+0x274>
 800d4d4:	4b45      	ldr	r3, [pc, #276]	@ (800d5ec <Device_Init+0x388>)
 800d4d6:	e000      	b.n	800d4da <Device_Init+0x276>
 800d4d8:	4b45      	ldr	r3, [pc, #276]	@ (800d5f0 <Device_Init+0x38c>)
 800d4da:	4a46      	ldr	r2, [pc, #280]	@ (800d5f4 <Device_Init+0x390>)
 800d4dc:	493c      	ldr	r1, [pc, #240]	@ (800d5d0 <Device_Init+0x36c>)
 800d4de:	2002      	movs	r0, #2
 800d4e0:	f006 faf4 	bl	8013acc <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800d4e4:	4b2c      	ldr	r3, [pc, #176]	@ (800d598 <Device_Init+0x334>)
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <Device_Init+0x28c>
 800d4ec:	4b3f      	ldr	r3, [pc, #252]	@ (800d5ec <Device_Init+0x388>)
 800d4ee:	e000      	b.n	800d4f2 <Device_Init+0x28e>
 800d4f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d5f0 <Device_Init+0x38c>)
 800d4f2:	4a41      	ldr	r2, [pc, #260]	@ (800d5f8 <Device_Init+0x394>)
 800d4f4:	4936      	ldr	r1, [pc, #216]	@ (800d5d0 <Device_Init+0x36c>)
 800d4f6:	2002      	movs	r0, #2
 800d4f8:	f006 fae8 	bl	8013acc <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800d4fc:	4b26      	ldr	r3, [pc, #152]	@ (800d598 <Device_Init+0x334>)
 800d4fe:	789b      	ldrb	r3, [r3, #2]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <Device_Init+0x2a4>
 800d504:	4b39      	ldr	r3, [pc, #228]	@ (800d5ec <Device_Init+0x388>)
 800d506:	e000      	b.n	800d50a <Device_Init+0x2a6>
 800d508:	4b39      	ldr	r3, [pc, #228]	@ (800d5f0 <Device_Init+0x38c>)
 800d50a:	4a3c      	ldr	r2, [pc, #240]	@ (800d5fc <Device_Init+0x398>)
 800d50c:	4930      	ldr	r1, [pc, #192]	@ (800d5d0 <Device_Init+0x36c>)
 800d50e:	2002      	movs	r0, #2
 800d510:	f006 fadc 	bl	8013acc <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800d514:	4b20      	ldr	r3, [pc, #128]	@ (800d598 <Device_Init+0x334>)
 800d516:	791b      	ldrb	r3, [r3, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <Device_Init+0x2bc>
 800d51c:	4b33      	ldr	r3, [pc, #204]	@ (800d5ec <Device_Init+0x388>)
 800d51e:	e000      	b.n	800d522 <Device_Init+0x2be>
 800d520:	4b33      	ldr	r3, [pc, #204]	@ (800d5f0 <Device_Init+0x38c>)
 800d522:	4a37      	ldr	r2, [pc, #220]	@ (800d600 <Device_Init+0x39c>)
 800d524:	492a      	ldr	r1, [pc, #168]	@ (800d5d0 <Device_Init+0x36c>)
 800d526:	2002      	movs	r0, #2
 800d528:	f006 fad0 	bl	8013acc <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800d52c:	4b1a      	ldr	r3, [pc, #104]	@ (800d598 <Device_Init+0x334>)
 800d52e:	78db      	ldrb	r3, [r3, #3]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <Device_Init+0x2d4>
 800d534:	4b2d      	ldr	r3, [pc, #180]	@ (800d5ec <Device_Init+0x388>)
 800d536:	e000      	b.n	800d53a <Device_Init+0x2d6>
 800d538:	4b2d      	ldr	r3, [pc, #180]	@ (800d5f0 <Device_Init+0x38c>)
 800d53a:	4a32      	ldr	r2, [pc, #200]	@ (800d604 <Device_Init+0x3a0>)
 800d53c:	4924      	ldr	r1, [pc, #144]	@ (800d5d0 <Device_Init+0x36c>)
 800d53e:	2002      	movs	r0, #2
 800d540:	f006 fac4 	bl	8013acc <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d544:	4b14      	ldr	r3, [pc, #80]	@ (800d598 <Device_Init+0x334>)
 800d546:	795b      	ldrb	r3, [r3, #5]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <Device_Init+0x2ec>
 800d54c:	4b27      	ldr	r3, [pc, #156]	@ (800d5ec <Device_Init+0x388>)
 800d54e:	e000      	b.n	800d552 <Device_Init+0x2ee>
 800d550:	4b27      	ldr	r3, [pc, #156]	@ (800d5f0 <Device_Init+0x38c>)
 800d552:	4a2d      	ldr	r2, [pc, #180]	@ (800d608 <Device_Init+0x3a4>)
 800d554:	491e      	ldr	r1, [pc, #120]	@ (800d5d0 <Device_Init+0x36c>)
 800d556:	2002      	movs	r0, #2
 800d558:	f006 fab8 	bl	8013acc <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d55c:	4b0e      	ldr	r3, [pc, #56]	@ (800d598 <Device_Init+0x334>)
 800d55e:	799b      	ldrb	r3, [r3, #6]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <Device_Init+0x304>
 800d564:	4b21      	ldr	r3, [pc, #132]	@ (800d5ec <Device_Init+0x388>)
 800d566:	e000      	b.n	800d56a <Device_Init+0x306>
 800d568:	4b21      	ldr	r3, [pc, #132]	@ (800d5f0 <Device_Init+0x38c>)
 800d56a:	4a28      	ldr	r2, [pc, #160]	@ (800d60c <Device_Init+0x3a8>)
 800d56c:	4918      	ldr	r1, [pc, #96]	@ (800d5d0 <Device_Init+0x36c>)
 800d56e:	2002      	movs	r0, #2
 800d570:	f006 faac 	bl	8013acc <CreateLine>
  ESP_Init(espUart);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	0018      	movs	r0, r3
 800d578:	f7f7 fc60 	bl	8004e3c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d57c:	4a24      	ldr	r2, [pc, #144]	@ (800d610 <Device_Init+0x3ac>)
 800d57e:	4b09      	ldr	r3, [pc, #36]	@ (800d5a4 <Device_Init+0x340>)
 800d580:	0019      	movs	r1, r3
 800d582:	2003      	movs	r0, #3
 800d584:	f006 faa2 	bl	8013acc <CreateLine>
}
 800d588:	46c0      	nop			@ (mov r8, r8)
 800d58a:	46bd      	mov	sp, r7
 800d58c:	b004      	add	sp, #16
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	0802c8d4 	.word	0x0802c8d4
 800d594:	0802c904 	.word	0x0802c904
 800d598:	20000f7c 	.word	0x20000f7c
 800d59c:	20000f74 	.word	0x20000f74
 800d5a0:	0802c908 	.word	0x0802c908
 800d5a4:	0802c8d0 	.word	0x0802c8d0
 800d5a8:	0802c934 	.word	0x0802c934
 800d5ac:	0802c968 	.word	0x0802c968
 800d5b0:	0802c998 	.word	0x0802c998
 800d5b4:	0802c9b4 	.word	0x0802c9b4
 800d5b8:	0802c9cc 	.word	0x0802c9cc
 800d5bc:	0802c9e8 	.word	0x0802c9e8
 800d5c0:	0802ca00 	.word	0x0802ca00
 800d5c4:	0802ca34 	.word	0x0802ca34
 800d5c8:	50000400 	.word	0x50000400
 800d5cc:	0802ca68 	.word	0x0802ca68
 800d5d0:	0802ca8c 	.word	0x0802ca8c
 800d5d4:	0802ca90 	.word	0x0802ca90
 800d5d8:	0802cabc 	.word	0x0802cabc
 800d5dc:	0802cae8 	.word	0x0802cae8
 800d5e0:	2000101c 	.word	0x2000101c
 800d5e4:	0802cb00 	.word	0x0802cb00
 800d5e8:	0802cb50 	.word	0x0802cb50
 800d5ec:	0802cb74 	.word	0x0802cb74
 800d5f0:	0802cb78 	.word	0x0802cb78
 800d5f4:	0802cb7c 	.word	0x0802cb7c
 800d5f8:	0802cb98 	.word	0x0802cb98
 800d5fc:	0802cbb4 	.word	0x0802cbb4
 800d600:	0802cbd4 	.word	0x0802cbd4
 800d604:	0802cbf4 	.word	0x0802cbf4
 800d608:	0802cc14 	.word	0x0802cc14
 800d60c:	0802cc30 	.word	0x0802cc30
 800d610:	0802cc4c 	.word	0x0802cc4c

0800d614 <Device_Test>:

void Device_Test(){
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d618:	4b34      	ldr	r3, [pc, #208]	@ (800d6ec <Device_Test+0xd8>)
 800d61a:	799b      	ldrb	r3, [r3, #6]
 800d61c:	2201      	movs	r2, #1
 800d61e:	4053      	eors	r3, r2
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d027      	beq.n	800d676 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d626:	f000 fc3d 	bl	800dea4 <MIC_TestMeasurementDone>
 800d62a:	1e03      	subs	r3, r0, #0
 800d62c:	d011      	beq.n	800d652 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d62e:	4b2f      	ldr	r3, [pc, #188]	@ (800d6ec <Device_Test+0xd8>)
 800d630:	2201      	movs	r2, #1
 800d632:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d634:	4b2e      	ldr	r3, [pc, #184]	@ (800d6f0 <Device_Test+0xdc>)
 800d636:	2201      	movs	r2, #1
 800d638:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d63a:	f004 fe9f 	bl	801237c <Calculate_LED_ON>
 800d63e:	0003      	movs	r3, r0
 800d640:	0019      	movs	r1, r3
 800d642:	23fa      	movs	r3, #250	@ 0xfa
 800d644:	011a      	lsls	r2, r3, #4
 800d646:	23fa      	movs	r3, #250	@ 0xfa
 800d648:	011b      	lsls	r3, r3, #4
 800d64a:	0018      	movs	r0, r3
 800d64c:	f004 fede 	bl	801240c <SetStatusLED>
 800d650:	e011      	b.n	800d676 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d652:	f003 ffe1 	bl	8011618 <micSettlingComplete>
 800d656:	1e03      	subs	r3, r0, #0
 800d658:	d00d      	beq.n	800d676 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d65a:	4b25      	ldr	r3, [pc, #148]	@ (800d6f0 <Device_Test+0xdc>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d660:	f004 fe8c 	bl	801237c <Calculate_LED_ON>
 800d664:	0003      	movs	r3, r0
 800d666:	0018      	movs	r0, r3
 800d668:	23fa      	movs	r3, #250	@ 0xfa
 800d66a:	011a      	lsls	r2, r3, #4
 800d66c:	23fa      	movs	r3, #250	@ 0xfa
 800d66e:	011b      	lsls	r3, r3, #4
 800d670:	0019      	movs	r1, r3
 800d672:	f004 fecb 	bl	801240c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d676:	4b1d      	ldr	r3, [pc, #116]	@ (800d6ec <Device_Test+0xd8>)
 800d678:	79db      	ldrb	r3, [r3, #7]
 800d67a:	2201      	movs	r2, #1
 800d67c:	4053      	eors	r3, r2
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d684:	f7f9 fe34 	bl	80072f0 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d688:	4b18      	ldr	r3, [pc, #96]	@ (800d6ec <Device_Test+0xd8>)
 800d68a:	79db      	ldrb	r3, [r3, #7]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <Device_Test+0x84>
 800d690:	4b16      	ldr	r3, [pc, #88]	@ (800d6ec <Device_Test+0xd8>)
 800d692:	799b      	ldrb	r3, [r3, #6]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d106      	bne.n	800d6a6 <Device_Test+0x92>
 800d698:	4b16      	ldr	r3, [pc, #88]	@ (800d6f4 <Device_Test+0xe0>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	0018      	movs	r0, r3
 800d69e:	f006 f9bf 	bl	8013a20 <TimestampIsReached>
 800d6a2:	1e03      	subs	r3, r0, #0
 800d6a4:	d01f      	beq.n	800d6e6 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d6a6:	4b11      	ldr	r3, [pc, #68]	@ (800d6ec <Device_Test+0xd8>)
 800d6a8:	79db      	ldrb	r3, [r3, #7]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d001      	beq.n	800d6b2 <Device_Test+0x9e>
 800d6ae:	4b12      	ldr	r3, [pc, #72]	@ (800d6f8 <Device_Test+0xe4>)
 800d6b0:	e000      	b.n	800d6b4 <Device_Test+0xa0>
 800d6b2:	4b12      	ldr	r3, [pc, #72]	@ (800d6fc <Device_Test+0xe8>)
 800d6b4:	4a12      	ldr	r2, [pc, #72]	@ (800d700 <Device_Test+0xec>)
 800d6b6:	4913      	ldr	r1, [pc, #76]	@ (800d704 <Device_Test+0xf0>)
 800d6b8:	2002      	movs	r0, #2
 800d6ba:	f006 fa07 	bl	8013acc <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d6be:	4b0b      	ldr	r3, [pc, #44]	@ (800d6ec <Device_Test+0xd8>)
 800d6c0:	799b      	ldrb	r3, [r3, #6]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <Device_Test+0xb6>
 800d6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f8 <Device_Test+0xe4>)
 800d6c8:	e000      	b.n	800d6cc <Device_Test+0xb8>
 800d6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d6fc <Device_Test+0xe8>)
 800d6cc:	4a0e      	ldr	r2, [pc, #56]	@ (800d708 <Device_Test+0xf4>)
 800d6ce:	490d      	ldr	r1, [pc, #52]	@ (800d704 <Device_Test+0xf0>)
 800d6d0:	2002      	movs	r0, #2
 800d6d2:	f006 f9fb 	bl	8013acc <CreateLine>
    Info("Test completed");
 800d6d6:	4a0d      	ldr	r2, [pc, #52]	@ (800d70c <Device_Test+0xf8>)
 800d6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d704 <Device_Test+0xf0>)
 800d6da:	0019      	movs	r1, r3
 800d6dc:	2002      	movs	r0, #2
 800d6de:	f006 f9f5 	bl	8013acc <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d6e2:	f7ff f8d9 	bl	800c898 <SetTestDone>
  }
}
 800d6e6:	46c0      	nop			@ (mov r8, r8)
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20000f7c 	.word	0x20000f7c
 800d6f0:	20000f74 	.word	0x20000f74
 800d6f4:	20000f6c 	.word	0x20000f6c
 800d6f8:	0802cc70 	.word	0x0802cc70
 800d6fc:	0802cc78 	.word	0x0802cc78
 800d700:	0802cc80 	.word	0x0802cc80
 800d704:	0802ca8c 	.word	0x0802ca8c
 800d708:	0802cc94 	.word	0x0802cc94
 800d70c:	0802cca8 	.word	0x0802cca8

0800d710 <AllDevicesReady>:

bool AllDevicesReady() {
 800d710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d712:	46de      	mov	lr, fp
 800d714:	4657      	mov	r7, sl
 800d716:	464e      	mov	r6, r9
 800d718:	4645      	mov	r5, r8
 800d71a:	b5e0      	push	{r5, r6, r7, lr}
 800d71c:	b08b      	sub	sp, #44	@ 0x2c
 800d71e:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  if (TimestampIsReached(deviceTimeOut)) {
 800d720:	4b7c      	ldr	r3, [pc, #496]	@ (800d914 <AllDevicesReady+0x204>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	0018      	movs	r0, r3
 800d726:	f006 f97b 	bl	8013a20 <TimestampIsReached>
 800d72a:	1e03      	subs	r3, r0, #0
 800d72c:	d100      	bne.n	800d730 <AllDevicesReady+0x20>
 800d72e:	e0e7      	b.n	800d900 <AllDevicesReady+0x1f0>
    if (!sensorsdisablereq) {
 800d730:	4b79      	ldr	r3, [pc, #484]	@ (800d918 <AllDevicesReady+0x208>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2201      	movs	r2, #1
 800d736:	4053      	eors	r3, r2
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d008      	beq.n	800d750 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800d73e:	4a77      	ldr	r2, [pc, #476]	@ (800d91c <AllDevicesReady+0x20c>)
 800d740:	4b77      	ldr	r3, [pc, #476]	@ (800d920 <AllDevicesReady+0x210>)
 800d742:	0019      	movs	r1, r3
 800d744:	2003      	movs	r0, #3
 800d746:	f006 f9c1 	bl	8013acc <CreateLine>
      sensorsdisablereq = true;
 800d74a:	4b73      	ldr	r3, [pc, #460]	@ (800d918 <AllDevicesReady+0x208>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800d750:	4b74      	ldr	r3, [pc, #464]	@ (800d924 <AllDevicesReady+0x214>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b06      	cmp	r3, #6
 800d756:	d102      	bne.n	800d75e <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800d758:	4b73      	ldr	r3, [pc, #460]	@ (800d928 <AllDevicesReady+0x218>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800d75e:	4b73      	ldr	r3, [pc, #460]	@ (800d92c <AllDevicesReady+0x21c>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b05      	cmp	r3, #5
 800d764:	d006      	beq.n	800d774 <AllDevicesReady+0x64>
 800d766:	4b72      	ldr	r3, [pc, #456]	@ (800d930 <AllDevicesReady+0x220>)
 800d768:	789b      	ldrb	r3, [r3, #2]
 800d76a:	2201      	movs	r2, #1
 800d76c:	4053      	eors	r3, r2
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800d774:	4b6c      	ldr	r3, [pc, #432]	@ (800d928 <AllDevicesReady+0x218>)
 800d776:	2200      	movs	r2, #0
 800d778:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800d77a:	4b6e      	ldr	r3, [pc, #440]	@ (800d934 <AllDevicesReady+0x224>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	2b08      	cmp	r3, #8
 800d780:	d006      	beq.n	800d790 <AllDevicesReady+0x80>
 800d782:	4b6b      	ldr	r3, [pc, #428]	@ (800d930 <AllDevicesReady+0x220>)
 800d784:	791b      	ldrb	r3, [r3, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	4053      	eors	r3, r2
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800d790:	4b65      	ldr	r3, [pc, #404]	@ (800d928 <AllDevicesReady+0x218>)
 800d792:	2200      	movs	r2, #0
 800d794:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800d796:	4b68      	ldr	r3, [pc, #416]	@ (800d938 <AllDevicesReady+0x228>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b08      	cmp	r3, #8
 800d79c:	d006      	beq.n	800d7ac <AllDevicesReady+0x9c>
 800d79e:	4b64      	ldr	r3, [pc, #400]	@ (800d930 <AllDevicesReady+0x220>)
 800d7a0:	78db      	ldrb	r3, [r3, #3]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	4053      	eors	r3, r2
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800d7ac:	4b5e      	ldr	r3, [pc, #376]	@ (800d928 <AllDevicesReady+0x218>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800d7b2:	4b62      	ldr	r3, [pc, #392]	@ (800d93c <AllDevicesReady+0x22c>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b07      	cmp	r3, #7
 800d7b8:	d006      	beq.n	800d7c8 <AllDevicesReady+0xb8>
 800d7ba:	4b5d      	ldr	r3, [pc, #372]	@ (800d930 <AllDevicesReady+0x220>)
 800d7bc:	7a1b      	ldrb	r3, [r3, #8]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	4053      	eors	r3, r2
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800d7c8:	4b57      	ldr	r3, [pc, #348]	@ (800d928 <AllDevicesReady+0x218>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800d7ce:	4b5c      	ldr	r3, [pc, #368]	@ (800d940 <AllDevicesReady+0x230>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d003      	beq.n	800d7de <AllDevicesReady+0xce>
 800d7d6:	4b5a      	ldr	r3, [pc, #360]	@ (800d940 <AllDevicesReady+0x230>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d102      	bne.n	800d7e4 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800d7de:	4b52      	ldr	r3, [pc, #328]	@ (800d928 <AllDevicesReady+0x218>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800d7e4:	4b57      	ldr	r3, [pc, #348]	@ (800d944 <AllDevicesReady+0x234>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	d102      	bne.n	800d7f2 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800d7ec:	4b4e      	ldr	r3, [pc, #312]	@ (800d928 <AllDevicesReady+0x218>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800d7f2:	4b55      	ldr	r3, [pc, #340]	@ (800d948 <AllDevicesReady+0x238>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	2b09      	cmp	r3, #9
 800d7f8:	d004      	beq.n	800d804 <AllDevicesReady+0xf4>
 800d7fa:	4b53      	ldr	r3, [pc, #332]	@ (800d948 <AllDevicesReady+0x238>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d000      	beq.n	800d804 <AllDevicesReady+0xf4>
 800d802:	e07d      	b.n	800d900 <AllDevicesReady+0x1f0>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d804:	4b48      	ldr	r3, [pc, #288]	@ (800d928 <AllDevicesReady+0x218>)
 800d806:	781a      	ldrb	r2, [r3, #0]
 800d808:	4b47      	ldr	r3, [pc, #284]	@ (800d928 <AllDevicesReady+0x218>)
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	4b45      	ldr	r3, [pc, #276]	@ (800d928 <AllDevicesReady+0x218>)
 800d812:	791b      	ldrb	r3, [r3, #4]
 800d814:	4313      	orrs	r3, r2
 800d816:	b2da      	uxtb	r2, r3
 800d818:	4b43      	ldr	r3, [pc, #268]	@ (800d928 <AllDevicesReady+0x218>)
 800d81a:	795b      	ldrb	r3, [r3, #5]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d820:	4b41      	ldr	r3, [pc, #260]	@ (800d928 <AllDevicesReady+0x218>)
 800d822:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d824:	4313      	orrs	r3, r2
 800d826:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d828:	4b3f      	ldr	r3, [pc, #252]	@ (800d928 <AllDevicesReady+0x218>)
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	4b3d      	ldr	r3, [pc, #244]	@ (800d928 <AllDevicesReady+0x218>)
 800d832:	78db      	ldrb	r3, [r3, #3]
 800d834:	4313      	orrs	r3, r2
 800d836:	b2db      	uxtb	r3, r3
 800d838:	1e5a      	subs	r2, r3, #1
 800d83a:	4193      	sbcs	r3, r2
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2201      	movs	r2, #1
 800d840:	4053      	eors	r3, r2
 800d842:	b2db      	uxtb	r3, r3
 800d844:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d846:	1dfb      	adds	r3, r7, #7
 800d848:	701a      	strb	r2, [r3, #0]
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	2101      	movs	r1, #1
 800d84e:	400a      	ands	r2, r1
 800d850:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800d852:	1dfb      	adds	r3, r7, #7
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2201      	movs	r2, #1
 800d858:	4053      	eors	r3, r2
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d034      	beq.n	800d8ca <AllDevicesReady+0x1ba>
 800d860:	4b3a      	ldr	r3, [pc, #232]	@ (800d94c <AllDevicesReady+0x23c>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	1dfa      	adds	r2, r7, #7
 800d866:	7812      	ldrb	r2, [r2, #0]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d02e      	beq.n	800d8ca <AllDevicesReady+0x1ba>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d86c:	4b2e      	ldr	r3, [pc, #184]	@ (800d928 <AllDevicesReady+0x218>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	469b      	mov	fp, r3
 800d872:	4b2d      	ldr	r3, [pc, #180]	@ (800d928 <AllDevicesReady+0x218>)
 800d874:	791b      	ldrb	r3, [r3, #4]
 800d876:	001c      	movs	r4, r3
 800d878:	4b2b      	ldr	r3, [pc, #172]	@ (800d928 <AllDevicesReady+0x218>)
 800d87a:	795b      	ldrb	r3, [r3, #5]
 800d87c:	001d      	movs	r5, r3
 800d87e:	4b2a      	ldr	r3, [pc, #168]	@ (800d928 <AllDevicesReady+0x218>)
 800d880:	799b      	ldrb	r3, [r3, #6]
 800d882:	001e      	movs	r6, r3
 800d884:	4b28      	ldr	r3, [pc, #160]	@ (800d928 <AllDevicesReady+0x218>)
 800d886:	785b      	ldrb	r3, [r3, #1]
 800d888:	4698      	mov	r8, r3
 800d88a:	4b27      	ldr	r3, [pc, #156]	@ (800d928 <AllDevicesReady+0x218>)
 800d88c:	789b      	ldrb	r3, [r3, #2]
 800d88e:	4699      	mov	r9, r3
 800d890:	4b25      	ldr	r3, [pc, #148]	@ (800d928 <AllDevicesReady+0x218>)
 800d892:	78db      	ldrb	r3, [r3, #3]
 800d894:	469a      	mov	sl, r3
 800d896:	f000 f921 	bl	800dadc <getSensorLock>
 800d89a:	0003      	movs	r3, r0
 800d89c:	4a2c      	ldr	r2, [pc, #176]	@ (800d950 <AllDevicesReady+0x240>)
 800d89e:	4920      	ldr	r1, [pc, #128]	@ (800d920 <AllDevicesReady+0x210>)
 800d8a0:	9306      	str	r3, [sp, #24]
 800d8a2:	4653      	mov	r3, sl
 800d8a4:	9305      	str	r3, [sp, #20]
 800d8a6:	464b      	mov	r3, r9
 800d8a8:	9304      	str	r3, [sp, #16]
 800d8aa:	4643      	mov	r3, r8
 800d8ac:	9303      	str	r3, [sp, #12]
 800d8ae:	9602      	str	r6, [sp, #8]
 800d8b0:	9501      	str	r5, [sp, #4]
 800d8b2:	9400      	str	r4, [sp, #0]
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	2003      	movs	r0, #3
 800d8b8:	f006 f908 	bl	8013acc <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800d8bc:	4b23      	ldr	r3, [pc, #140]	@ (800d94c <AllDevicesReady+0x23c>)
 800d8be:	1dfa      	adds	r2, r7, #7
 800d8c0:	7812      	ldrb	r2, [r2, #0]
 800d8c2:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800d8c4:	4b23      	ldr	r3, [pc, #140]	@ (800d954 <AllDevicesReady+0x244>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800d8ca:	1dfb      	adds	r3, r7, #7
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d013      	beq.n	800d8fa <AllDevicesReady+0x1ea>
 800d8d2:	4b20      	ldr	r3, [pc, #128]	@ (800d954 <AllDevicesReady+0x244>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	4053      	eors	r3, r2
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00c      	beq.n	800d8fa <AllDevicesReady+0x1ea>
        Debug("All sensors in wait");
 800d8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d958 <AllDevicesReady+0x248>)
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d920 <AllDevicesReady+0x210>)
 800d8e4:	0019      	movs	r1, r3
 800d8e6:	2003      	movs	r0, #3
 800d8e8:	f006 f8f0 	bl	8013acc <CreateLine>
        prevstatus = status;
 800d8ec:	4b17      	ldr	r3, [pc, #92]	@ (800d94c <AllDevicesReady+0x23c>)
 800d8ee:	1dfa      	adds	r2, r7, #7
 800d8f0:	7812      	ldrb	r2, [r2, #0]
 800d8f2:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800d8f4:	4b17      	ldr	r3, [pc, #92]	@ (800d954 <AllDevicesReady+0x244>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800d8fa:	1dfb      	adds	r3, r7, #7
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	e000      	b.n	800d902 <AllDevicesReady+0x1f2>
    }
  }
  return false;
 800d900:	2300      	movs	r3, #0
}
 800d902:	0018      	movs	r0, r3
 800d904:	46bd      	mov	sp, r7
 800d906:	b003      	add	sp, #12
 800d908:	bcf0      	pop	{r4, r5, r6, r7}
 800d90a:	46bb      	mov	fp, r7
 800d90c:	46b2      	mov	sl, r6
 800d90e:	46a9      	mov	r9, r5
 800d910:	46a0      	mov	r8, r4
 800d912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d914:	20000f6c 	.word	0x20000f6c
 800d918:	20000f8b 	.word	0x20000f8b
 800d91c:	0802ccb8 	.word	0x0802ccb8
 800d920:	0802c8d0 	.word	0x0802c8d0
 800d924:	20000f87 	.word	0x20000f87
 800d928:	20000f74 	.word	0x20000f74
 800d92c:	20000f88 	.word	0x20000f88
 800d930:	20000f7c 	.word	0x20000f7c
 800d934:	20000f89 	.word	0x20000f89
 800d938:	20000f8a 	.word	0x20000f8a
 800d93c:	20000f86 	.word	0x20000f86
 800d940:	200000aa 	.word	0x200000aa
 800d944:	20000f59 	.word	0x20000f59
 800d948:	20000f5a 	.word	0x20000f5a
 800d94c:	200000a8 	.word	0x200000a8
 800d950:	0802ccd8 	.word	0x0802ccd8
 800d954:	20000f8c 	.word	0x20000f8c
 800d958:	0802cd3c 	.word	0x0802cd3c

0800d95c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d960:	4b35      	ldr	r3, [pc, #212]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d968:	4b34      	ldr	r3, [pc, #208]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800d96a:	2201      	movs	r2, #1
 800d96c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800d96e:	4b32      	ldr	r3, [pc, #200]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d970:	789b      	ldrb	r3, [r3, #2]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <EnabledConnectedDevices+0x28>
 800d976:	4b32      	ldr	r3, [pc, #200]	@ (800da40 <EnabledConnectedDevices+0xe4>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d002      	beq.n	800d984 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800d97e:	4b2f      	ldr	r3, [pc, #188]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800d980:	2201      	movs	r2, #1
 800d982:	711a      	strb	r2, [r3, #4]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
 800d984:	4b2c      	ldr	r3, [pc, #176]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d986:	789b      	ldrb	r3, [r3, #2]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <EnabledConnectedDevices+0x44>
 800d98c:	4b2c      	ldr	r3, [pc, #176]	@ (800da40 <EnabledConnectedDevices+0xe4>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d105      	bne.n	800d9a0 <EnabledConnectedDevices+0x44>
    Info("AHT2x sensor is disabled");
 800d994:	4a2b      	ldr	r2, [pc, #172]	@ (800da44 <EnabledConnectedDevices+0xe8>)
 800d996:	4b2c      	ldr	r3, [pc, #176]	@ (800da48 <EnabledConnectedDevices+0xec>)
 800d998:	0019      	movs	r1, r3
 800d99a:	2002      	movs	r0, #2
 800d99c:	f006 f896 	bl	8013acc <CreateLine>
  }
  if ((SensorProbe.BMP280_Present) && (BMPState != BMP_STATE_OFF)) {
 800d9a0:	4b25      	ldr	r3, [pc, #148]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9a2:	791b      	ldrb	r3, [r3, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d006      	beq.n	800d9b6 <EnabledConnectedDevices+0x5a>
 800d9a8:	4b28      	ldr	r3, [pc, #160]	@ (800da4c <EnabledConnectedDevices+0xf0>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b06      	cmp	r3, #6
 800d9ae:	d002      	beq.n	800d9b6 <EnabledConnectedDevices+0x5a>
    Sensor.BMP_measurementEnabled = true;
 800d9b0:	4b22      	ldr	r3, [pc, #136]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.BMP280_Present) && (BMPState == BMP_STATE_OFF)) {
 800d9b6:	4b20      	ldr	r3, [pc, #128]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9b8:	791b      	ldrb	r3, [r3, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <EnabledConnectedDevices+0x76>
 800d9be:	4b23      	ldr	r3, [pc, #140]	@ (800da4c <EnabledConnectedDevices+0xf0>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b06      	cmp	r3, #6
 800d9c4:	d105      	bne.n	800d9d2 <EnabledConnectedDevices+0x76>
    Info("BMP20 sensor is disabled");
 800d9c6:	4a22      	ldr	r2, [pc, #136]	@ (800da50 <EnabledConnectedDevices+0xf4>)
 800d9c8:	4b1f      	ldr	r3, [pc, #124]	@ (800da48 <EnabledConnectedDevices+0xec>)
 800d9ca:	0019      	movs	r1, r3
 800d9cc:	2002      	movs	r0, #2
 800d9ce:	f006 f87d 	bl	8013acc <CreateLine>
  }
  if (SensorProbe.ENS160_Present) {
 800d9d2:	4b19      	ldr	r3, [pc, #100]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9d4:	78db      	ldrb	r3, [r3, #3]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <EnabledConnectedDevices+0x84>
    Sensor.ENS_measurementEnabled = true;
 800d9da:	4b18      	ldr	r3, [pc, #96]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800d9dc:	2201      	movs	r2, #1
 800d9de:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d9e0:	4b15      	ldr	r3, [pc, #84]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9e2:	785b      	ldrb	r3, [r3, #1]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <EnabledConnectedDevices+0x9a>
 800d9e8:	4b13      	ldr	r3, [pc, #76]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9ea:	7a1b      	ldrb	r3, [r3, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <EnabledConnectedDevices+0x9a>
    Sensor.VOC_measurementEnabled = true;
 800d9f0:	4b12      	ldr	r3, [pc, #72]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d9f6:	4b10      	ldr	r3, [pc, #64]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800d9f8:	795b      	ldrb	r3, [r3, #5]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d002      	beq.n	800da04 <EnabledConnectedDevices+0xa8>
    Sensor.PM_measurementEnabled = true;
 800d9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800da00:	2201      	movs	r2, #1
 800da02:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800da04:	4b0c      	ldr	r3, [pc, #48]	@ (800da38 <EnabledConnectedDevices+0xdc>)
 800da06:	799b      	ldrb	r3, [r3, #6]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <EnabledConnectedDevices+0xb6>
    Sensor.MIC_measurementEnabled = true;
 800da0c:	4b0b      	ldr	r3, [pc, #44]	@ (800da3c <EnabledConnectedDevices+0xe0>)
 800da0e:	2201      	movs	r2, #1
 800da10:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800da12:	f006 fd9b 	bl	801454c <HAL_GetTick>
 800da16:	0003      	movs	r3, r0
 800da18:	4a0e      	ldr	r2, [pc, #56]	@ (800da54 <EnabledConnectedDevices+0xf8>)
 800da1a:	189a      	adds	r2, r3, r2
 800da1c:	4b0e      	ldr	r3, [pc, #56]	@ (800da58 <EnabledConnectedDevices+0xfc>)
 800da1e:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800da20:	4b0e      	ldr	r3, [pc, #56]	@ (800da5c <EnabledConnectedDevices+0x100>)
 800da22:	2200      	movs	r2, #0
 800da24:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800da26:	4a0e      	ldr	r2, [pc, #56]	@ (800da60 <EnabledConnectedDevices+0x104>)
 800da28:	4b0e      	ldr	r3, [pc, #56]	@ (800da64 <EnabledConnectedDevices+0x108>)
 800da2a:	0019      	movs	r1, r3
 800da2c:	2003      	movs	r0, #3
 800da2e:	f006 f84d 	bl	8013acc <CreateLine>
}
 800da32:	46c0      	nop			@ (mov r8, r8)
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000f7c 	.word	0x20000f7c
 800da3c:	20000f74 	.word	0x20000f74
 800da40:	2000009f 	.word	0x2000009f
 800da44:	0802cd50 	.word	0x0802cd50
 800da48:	0802ca8c 	.word	0x0802ca8c
 800da4c:	200000a2 	.word	0x200000a2
 800da50:	0802cd6c 	.word	0x0802cd6c
 800da54:	00124f80 	.word	0x00124f80
 800da58:	20000f6c 	.word	0x20000f6c
 800da5c:	20000f8b 	.word	0x20000f8b
 800da60:	0802cd88 	.word	0x0802cd88
 800da64:	0802c8d0 	.word	0x0802c8d0

0800da68 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800da6c:	4b0e      	ldr	r3, [pc, #56]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da6e:	2200      	movs	r2, #0
 800da70:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800da72:	4b0d      	ldr	r3, [pc, #52]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da74:	2200      	movs	r2, #0
 800da76:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800da78:	4b0b      	ldr	r3, [pc, #44]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800da7e:	4b0a      	ldr	r3, [pc, #40]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da80:	2200      	movs	r2, #0
 800da82:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800da84:	4b08      	ldr	r3, [pc, #32]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da86:	2200      	movs	r2, #0
 800da88:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800da8a:	4b07      	ldr	r3, [pc, #28]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800da90:	4b05      	ldr	r3, [pc, #20]	@ (800daa8 <DisableConnectedDevices+0x40>)
 800da92:	2200      	movs	r2, #0
 800da94:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800da96:	4a05      	ldr	r2, [pc, #20]	@ (800daac <DisableConnectedDevices+0x44>)
 800da98:	4b05      	ldr	r3, [pc, #20]	@ (800dab0 <DisableConnectedDevices+0x48>)
 800da9a:	0019      	movs	r1, r3
 800da9c:	2003      	movs	r0, #3
 800da9e:	f006 f815 	bl	8013acc <CreateLine>
}
 800daa2:	46c0      	nop			@ (mov r8, r8)
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20000f74 	.word	0x20000f74
 800daac:	0802cd98 	.word	0x0802cd98
 800dab0:	0802c8d0 	.word	0x0802c8d0

0800dab4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	0002      	movs	r2, r0
 800dabc:	1dfb      	adds	r3, r7, #7
 800dabe:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800dac0:	4b05      	ldr	r3, [pc, #20]	@ (800dad8 <setSensorLock+0x24>)
 800dac2:	1dfa      	adds	r2, r7, #7
 800dac4:	7812      	ldrb	r2, [r2, #0]
 800dac6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800dac8:	200a      	movs	r0, #10
 800daca:	f006 fd49 	bl	8014560 <HAL_Delay>
}
 800dace:	46c0      	nop			@ (mov r8, r8)
 800dad0:	46bd      	mov	sp, r7
 800dad2:	b002      	add	sp, #8
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	46c0      	nop			@ (mov r8, r8)
 800dad8:	20000f85 	.word	0x20000f85

0800dadc <getSensorLock>:

uint8_t getSensorLock() {
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800dae0:	4b02      	ldr	r3, [pc, #8]	@ (800daec <getSensorLock+0x10>)
 800dae2:	781b      	ldrb	r3, [r3, #0]
}
 800dae4:	0018      	movs	r0, r3
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	46c0      	nop			@ (mov r8, r8)
 800daec:	20000f85 	.word	0x20000f85

0800daf0 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800daf4:	4b1a      	ldr	r3, [pc, #104]	@ (800db60 <UpkeepI2Csensors+0x70>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d005      	beq.n	800db08 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800dafc:	f006 fba4 	bl	8014248 <HIDS_Upkeep>
 800db00:	0003      	movs	r3, r0
 800db02:	001a      	movs	r2, r3
 800db04:	4b17      	ldr	r3, [pc, #92]	@ (800db64 <UpkeepI2Csensors+0x74>)
 800db06:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800db08:	4b15      	ldr	r3, [pc, #84]	@ (800db60 <UpkeepI2Csensors+0x70>)
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d005      	beq.n	800db1c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800db10:	f003 fb7c 	bl	801120c <SGP_Upkeep>
 800db14:	0003      	movs	r3, r0
 800db16:	001a      	movs	r2, r3
 800db18:	4b13      	ldr	r3, [pc, #76]	@ (800db68 <UpkeepI2Csensors+0x78>)
 800db1a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800db1c:	4b10      	ldr	r3, [pc, #64]	@ (800db60 <UpkeepI2Csensors+0x70>)
 800db1e:	791b      	ldrb	r3, [r3, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d005      	beq.n	800db30 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800db24:	f7fd f9c2 	bl	800aeac <AHT_Upkeep>
 800db28:	0003      	movs	r3, r0
 800db2a:	001a      	movs	r2, r3
 800db2c:	4b0f      	ldr	r3, [pc, #60]	@ (800db6c <UpkeepI2Csensors+0x7c>)
 800db2e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800db30:	4b0b      	ldr	r3, [pc, #44]	@ (800db60 <UpkeepI2Csensors+0x70>)
 800db32:	795b      	ldrb	r3, [r3, #5]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d005      	beq.n	800db44 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800db38:	f7fd ff6a 	bl	800ba10 <BMP_Upkeep>
 800db3c:	0003      	movs	r3, r0
 800db3e:	001a      	movs	r2, r3
 800db40:	4b0b      	ldr	r3, [pc, #44]	@ (800db70 <UpkeepI2Csensors+0x80>)
 800db42:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800db44:	4b06      	ldr	r3, [pc, #24]	@ (800db60 <UpkeepI2Csensors+0x70>)
 800db46:	799b      	ldrb	r3, [r3, #6]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800db4c:	f7f6 fc84 	bl	8004458 <ENS_Upkeep>
 800db50:	0003      	movs	r3, r0
 800db52:	001a      	movs	r2, r3
 800db54:	4b07      	ldr	r3, [pc, #28]	@ (800db74 <UpkeepI2Csensors+0x84>)
 800db56:	701a      	strb	r2, [r3, #0]
  }
}
 800db58:	46c0      	nop			@ (mov r8, r8)
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	46c0      	nop			@ (mov r8, r8)
 800db60:	20000f74 	.word	0x20000f74
 800db64:	20000f87 	.word	0x20000f87
 800db68:	20000f86 	.word	0x20000f86
 800db6c:	20000f88 	.word	0x20000f88
 800db70:	20000f89 	.word	0x20000f89
 800db74:	20000f8a 	.word	0x20000f8a

0800db78 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800db78:	b580      	push	{r7, lr}
 800db7a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800db7c:	4b02      	ldr	r3, [pc, #8]	@ (800db88 <ResetdBAmax+0x10>)
 800db7e:	2200      	movs	r2, #0
 800db80:	601a      	str	r2, [r3, #0]
}
 800db82:	46c0      	nop			@ (mov r8, r8)
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	20000fd4 	.word	0x20000fd4

0800db8c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800db94:	f006 fcda 	bl	801454c <HAL_GetTick>
 800db98:	0002      	movs	r2, r0
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	18d2      	adds	r2, r2, r3
 800db9e:	4b03      	ldr	r3, [pc, #12]	@ (800dbac <setMICTimeStamp+0x20>)
 800dba0:	601a      	str	r2, [r3, #0]
}
 800dba2:	46c0      	nop			@ (mov r8, r8)
 800dba4:	46bd      	mov	sp, r7
 800dba6:	b002      	add	sp, #8
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	46c0      	nop			@ (mov r8, r8)
 800dbac:	20000fdc 	.word	0x20000fdc

0800dbb0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
  counter = 0;
 800dbb4:	4b05      	ldr	r3, [pc, #20]	@ (800dbcc <ResetDBACalculator+0x1c>)
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800dbba:	4b05      	ldr	r3, [pc, #20]	@ (800dbd0 <ResetDBACalculator+0x20>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800dbc0:	4b04      	ldr	r3, [pc, #16]	@ (800dbd4 <ResetDBACalculator+0x24>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	701a      	strb	r2, [r3, #0]
}
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	20000fd8 	.word	0x20000fd8
 800dbd0:	200000a9 	.word	0x200000a9
 800dbd4:	20000fd9 	.word	0x20000fd9

0800dbd8 <MIC_Print>:

void MIC_Print(void) {
 800dbd8:	b5b0      	push	{r4, r5, r7, lr}
 800dbda:	b08a      	sub	sp, #40	@ 0x28
 800dbdc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800dbde:	4b9f      	ldr	r3, [pc, #636]	@ (800de5c <MIC_Print+0x284>)
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	4b9f      	ldr	r3, [pc, #636]	@ (800de60 <MIC_Print+0x288>)
 800dbe4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800dbe6:	4b9f      	ldr	r3, [pc, #636]	@ (800de64 <MIC_Print+0x28c>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	001a      	movs	r2, r3
 800dbec:	4b9c      	ldr	r3, [pc, #624]	@ (800de60 <MIC_Print+0x288>)
 800dbee:	6819      	ldr	r1, [r3, #0]
 800dbf0:	4b9d      	ldr	r3, [pc, #628]	@ (800de68 <MIC_Print+0x290>)
 800dbf2:	0092      	lsls	r2, r2, #2
 800dbf4:	50d1      	str	r1, [r2, r3]
  counter++;
 800dbf6:	4b9b      	ldr	r3, [pc, #620]	@ (800de64 <MIC_Print+0x28c>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	4b99      	ldr	r3, [pc, #612]	@ (800de64 <MIC_Print+0x28c>)
 800dc00:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800dc02:	4b98      	ldr	r3, [pc, #608]	@ (800de64 <MIC_Print+0x28c>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b09      	cmp	r3, #9
 800dc08:	d80b      	bhi.n	800dc22 <MIC_Print+0x4a>
 800dc0a:	4b98      	ldr	r3, [pc, #608]	@ (800de6c <MIC_Print+0x294>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4053      	eors	r3, r2
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <MIC_Print+0x4a>
    denominator = counter;
 800dc18:	4b92      	ldr	r3, [pc, #584]	@ (800de64 <MIC_Print+0x28c>)
 800dc1a:	781a      	ldrb	r2, [r3, #0]
 800dc1c:	4b94      	ldr	r3, [pc, #592]	@ (800de70 <MIC_Print+0x298>)
 800dc1e:	701a      	strb	r2, [r3, #0]
 800dc20:	e005      	b.n	800dc2e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800dc22:	4b93      	ldr	r3, [pc, #588]	@ (800de70 <MIC_Print+0x298>)
 800dc24:	220a      	movs	r2, #10
 800dc26:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800dc28:	4b90      	ldr	r3, [pc, #576]	@ (800de6c <MIC_Print+0x294>)
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800dc2e:	4b91      	ldr	r3, [pc, #580]	@ (800de74 <MIC_Print+0x29c>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800dc34:	230f      	movs	r3, #15
 800dc36:	18fb      	adds	r3, r7, r3
 800dc38:	2200      	movs	r2, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
 800dc3c:	e042      	b.n	800dcc4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800dc3e:	240f      	movs	r4, #15
 800dc40:	193b      	adds	r3, r7, r4
 800dc42:	781a      	ldrb	r2, [r3, #0]
 800dc44:	4b88      	ldr	r3, [pc, #544]	@ (800de68 <MIC_Print+0x290>)
 800dc46:	0092      	lsls	r2, r2, #2
 800dc48:	58d2      	ldr	r2, [r2, r3]
 800dc4a:	4b8a      	ldr	r3, [pc, #552]	@ (800de74 <MIC_Print+0x29c>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	1c19      	adds	r1, r3, #0
 800dc50:	1c10      	adds	r0, r2, #0
 800dc52:	f7f2 fe35 	bl	80008c0 <__aeabi_fadd>
 800dc56:	1c03      	adds	r3, r0, #0
 800dc58:	1c1a      	adds	r2, r3, #0
 800dc5a:	4b86      	ldr	r3, [pc, #536]	@ (800de74 <MIC_Print+0x29c>)
 800dc5c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800dc5e:	193b      	adds	r3, r7, r4
 800dc60:	781a      	ldrb	r2, [r3, #0]
 800dc62:	4b81      	ldr	r3, [pc, #516]	@ (800de68 <MIC_Print+0x290>)
 800dc64:	0092      	lsls	r2, r2, #2
 800dc66:	58d2      	ldr	r2, [r2, r3]
 800dc68:	4b83      	ldr	r3, [pc, #524]	@ (800de78 <MIC_Print+0x2a0>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	1c19      	adds	r1, r3, #0
 800dc6e:	1c10      	adds	r0, r2, #0
 800dc70:	f7f2 fc72 	bl	8000558 <__aeabi_fcmpgt>
 800dc74:	1e03      	subs	r3, r0, #0
 800dc76:	d006      	beq.n	800dc86 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800dc78:	193b      	adds	r3, r7, r4
 800dc7a:	781a      	ldrb	r2, [r3, #0]
 800dc7c:	4b7a      	ldr	r3, [pc, #488]	@ (800de68 <MIC_Print+0x290>)
 800dc7e:	0092      	lsls	r2, r2, #2
 800dc80:	58d2      	ldr	r2, [r2, r3]
 800dc82:	4b7d      	ldr	r3, [pc, #500]	@ (800de78 <MIC_Print+0x2a0>)
 800dc84:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800dc86:	4b7b      	ldr	r3, [pc, #492]	@ (800de74 <MIC_Print+0x29c>)
 800dc88:	681c      	ldr	r4, [r3, #0]
 800dc8a:	4b79      	ldr	r3, [pc, #484]	@ (800de70 <MIC_Print+0x298>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f7f3 fe1a 	bl	80018c8 <__aeabi_ui2f>
 800dc94:	1c03      	adds	r3, r0, #0
 800dc96:	1c19      	adds	r1, r3, #0
 800dc98:	1c20      	adds	r0, r4, #0
 800dc9a:	f7f3 f803 	bl	8000ca4 <__aeabi_fdiv>
 800dc9e:	1c03      	adds	r3, r0, #0
 800dca0:	1c1a      	adds	r2, r3, #0
 800dca2:	4b76      	ldr	r3, [pc, #472]	@ (800de7c <MIC_Print+0x2a4>)
 800dca4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800dca6:	4b6e      	ldr	r3, [pc, #440]	@ (800de60 <MIC_Print+0x288>)
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	4b73      	ldr	r3, [pc, #460]	@ (800de78 <MIC_Print+0x2a0>)
 800dcac:	6819      	ldr	r1, [r3, #0]
 800dcae:	4b73      	ldr	r3, [pc, #460]	@ (800de7c <MIC_Print+0x2a4>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	1c1a      	adds	r2, r3, #0
 800dcb4:	f7f6 ff5a 	bl	8004b6c <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800dcb8:	210f      	movs	r1, #15
 800dcba:	187b      	adds	r3, r7, r1
 800dcbc:	781a      	ldrb	r2, [r3, #0]
 800dcbe:	187b      	adds	r3, r7, r1
 800dcc0:	3201      	adds	r2, #1
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	4b6a      	ldr	r3, [pc, #424]	@ (800de70 <MIC_Print+0x298>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	220f      	movs	r2, #15
 800dcca:	18ba      	adds	r2, r7, r2
 800dccc:	7812      	ldrb	r2, [r2, #0]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d3b5      	bcc.n	800dc3e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800dcd2:	4b63      	ldr	r3, [pc, #396]	@ (800de60 <MIC_Print+0x288>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	1c18      	adds	r0, r3, #0
 800dcd8:	f7f5 fddc 	bl	8003894 <__aeabi_f2d>
 800dcdc:	6038      	str	r0, [r7, #0]
 800dcde:	6079      	str	r1, [r7, #4]
 800dce0:	4b65      	ldr	r3, [pc, #404]	@ (800de78 <MIC_Print+0x2a0>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	1c18      	adds	r0, r3, #0
 800dce6:	f7f5 fdd5 	bl	8003894 <__aeabi_f2d>
 800dcea:	0004      	movs	r4, r0
 800dcec:	000d      	movs	r5, r1
 800dcee:	4b63      	ldr	r3, [pc, #396]	@ (800de7c <MIC_Print+0x2a4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	1c18      	adds	r0, r3, #0
 800dcf4:	f7f5 fdce 	bl	8003894 <__aeabi_f2d>
 800dcf8:	0002      	movs	r2, r0
 800dcfa:	000b      	movs	r3, r1
 800dcfc:	4960      	ldr	r1, [pc, #384]	@ (800de80 <MIC_Print+0x2a8>)
 800dcfe:	9204      	str	r2, [sp, #16]
 800dd00:	9305      	str	r3, [sp, #20]
 800dd02:	9402      	str	r4, [sp, #8]
 800dd04:	9503      	str	r5, [sp, #12]
 800dd06:	4b5f      	ldr	r3, [pc, #380]	@ (800de84 <MIC_Print+0x2ac>)
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	0008      	movs	r0, r1
 800dd10:	f017 fff6 	bl	8025d00 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800dd14:	4b53      	ldr	r3, [pc, #332]	@ (800de64 <MIC_Print+0x28c>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b0a      	cmp	r3, #10
 800dd1a:	d902      	bls.n	800dd22 <MIC_Print+0x14a>
    counter = 0;
 800dd1c:	4b51      	ldr	r3, [pc, #324]	@ (800de64 <MIC_Print+0x28c>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800dd22:	4b4f      	ldr	r3, [pc, #316]	@ (800de60 <MIC_Print+0x288>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4958      	ldr	r1, [pc, #352]	@ (800de88 <MIC_Print+0x2b0>)
 800dd28:	1c18      	adds	r0, r3, #0
 800dd2a:	f7f2 fc1f 	bl	800056c <__aeabi_fcmpge>
 800dd2e:	1e03      	subs	r3, r0, #0
 800dd30:	d004      	beq.n	800dd3c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800dd32:	2201      	movs	r2, #1
 800dd34:	2101      	movs	r1, #1
 800dd36:	2001      	movs	r0, #1
 800dd38:	f004 fb9c 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800dd3c:	4b48      	ldr	r3, [pc, #288]	@ (800de60 <MIC_Print+0x288>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4952      	ldr	r1, [pc, #328]	@ (800de8c <MIC_Print+0x2b4>)
 800dd42:	1c18      	adds	r0, r3, #0
 800dd44:	f7f2 fc12 	bl	800056c <__aeabi_fcmpge>
 800dd48:	1e03      	subs	r3, r0, #0
 800dd4a:	d00c      	beq.n	800dd66 <MIC_Print+0x18e>
 800dd4c:	4b44      	ldr	r3, [pc, #272]	@ (800de60 <MIC_Print+0x288>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	494d      	ldr	r1, [pc, #308]	@ (800de88 <MIC_Print+0x2b0>)
 800dd52:	1c18      	adds	r0, r3, #0
 800dd54:	f7f2 fbec 	bl	8000530 <__aeabi_fcmplt>
 800dd58:	1e03      	subs	r3, r0, #0
 800dd5a:	d004      	beq.n	800dd66 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2100      	movs	r1, #0
 800dd60:	2001      	movs	r0, #1
 800dd62:	f004 fb87 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800dd66:	4b3e      	ldr	r3, [pc, #248]	@ (800de60 <MIC_Print+0x288>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4949      	ldr	r1, [pc, #292]	@ (800de90 <MIC_Print+0x2b8>)
 800dd6c:	1c18      	adds	r0, r3, #0
 800dd6e:	f7f2 fbfd 	bl	800056c <__aeabi_fcmpge>
 800dd72:	1e03      	subs	r3, r0, #0
 800dd74:	d00c      	beq.n	800dd90 <MIC_Print+0x1b8>
 800dd76:	4b3a      	ldr	r3, [pc, #232]	@ (800de60 <MIC_Print+0x288>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4944      	ldr	r1, [pc, #272]	@ (800de8c <MIC_Print+0x2b4>)
 800dd7c:	1c18      	adds	r0, r3, #0
 800dd7e:	f7f2 fbd7 	bl	8000530 <__aeabi_fcmplt>
 800dd82:	1e03      	subs	r3, r0, #0
 800dd84:	d004      	beq.n	800dd90 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800dd86:	2200      	movs	r2, #0
 800dd88:	2101      	movs	r1, #1
 800dd8a:	2001      	movs	r0, #1
 800dd8c:	f004 fb72 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800dd90:	4b33      	ldr	r3, [pc, #204]	@ (800de60 <MIC_Print+0x288>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	493f      	ldr	r1, [pc, #252]	@ (800de94 <MIC_Print+0x2bc>)
 800dd96:	1c18      	adds	r0, r3, #0
 800dd98:	f7f2 fbe8 	bl	800056c <__aeabi_fcmpge>
 800dd9c:	1e03      	subs	r3, r0, #0
 800dd9e:	d00c      	beq.n	800ddba <MIC_Print+0x1e2>
 800dda0:	4b2f      	ldr	r3, [pc, #188]	@ (800de60 <MIC_Print+0x288>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	493a      	ldr	r1, [pc, #232]	@ (800de90 <MIC_Print+0x2b8>)
 800dda6:	1c18      	adds	r0, r3, #0
 800dda8:	f7f2 fbc2 	bl	8000530 <__aeabi_fcmplt>
 800ddac:	1e03      	subs	r3, r0, #0
 800ddae:	d004      	beq.n	800ddba <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	f004 fb5d 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800ddba:	4b29      	ldr	r3, [pc, #164]	@ (800de60 <MIC_Print+0x288>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4936      	ldr	r1, [pc, #216]	@ (800de98 <MIC_Print+0x2c0>)
 800ddc0:	1c18      	adds	r0, r3, #0
 800ddc2:	f7f2 fbd3 	bl	800056c <__aeabi_fcmpge>
 800ddc6:	1e03      	subs	r3, r0, #0
 800ddc8:	d00c      	beq.n	800dde4 <MIC_Print+0x20c>
 800ddca:	4b25      	ldr	r3, [pc, #148]	@ (800de60 <MIC_Print+0x288>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4931      	ldr	r1, [pc, #196]	@ (800de94 <MIC_Print+0x2bc>)
 800ddd0:	1c18      	adds	r0, r3, #0
 800ddd2:	f7f2 fbad 	bl	8000530 <__aeabi_fcmplt>
 800ddd6:	1e03      	subs	r3, r0, #0
 800ddd8:	d004      	beq.n	800dde4 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800ddda:	2201      	movs	r2, #1
 800dddc:	2101      	movs	r1, #1
 800ddde:	2000      	movs	r0, #0
 800dde0:	f004 fb48 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800dde4:	4b1e      	ldr	r3, [pc, #120]	@ (800de60 <MIC_Print+0x288>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	492c      	ldr	r1, [pc, #176]	@ (800de9c <MIC_Print+0x2c4>)
 800ddea:	1c18      	adds	r0, r3, #0
 800ddec:	f7f2 fbbe 	bl	800056c <__aeabi_fcmpge>
 800ddf0:	1e03      	subs	r3, r0, #0
 800ddf2:	d00c      	beq.n	800de0e <MIC_Print+0x236>
 800ddf4:	4b1a      	ldr	r3, [pc, #104]	@ (800de60 <MIC_Print+0x288>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4927      	ldr	r1, [pc, #156]	@ (800de98 <MIC_Print+0x2c0>)
 800ddfa:	1c18      	adds	r0, r3, #0
 800ddfc:	f7f2 fb98 	bl	8000530 <__aeabi_fcmplt>
 800de00:	1e03      	subs	r3, r0, #0
 800de02:	d004      	beq.n	800de0e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800de04:	2201      	movs	r2, #1
 800de06:	2100      	movs	r1, #0
 800de08:	2000      	movs	r0, #0
 800de0a:	f004 fb33 	bl	8012474 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800de0e:	4b14      	ldr	r3, [pc, #80]	@ (800de60 <MIC_Print+0x288>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4923      	ldr	r1, [pc, #140]	@ (800dea0 <MIC_Print+0x2c8>)
 800de14:	1c18      	adds	r0, r3, #0
 800de16:	f7f2 fba9 	bl	800056c <__aeabi_fcmpge>
 800de1a:	1e03      	subs	r3, r0, #0
 800de1c:	d00c      	beq.n	800de38 <MIC_Print+0x260>
 800de1e:	4b10      	ldr	r3, [pc, #64]	@ (800de60 <MIC_Print+0x288>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	491e      	ldr	r1, [pc, #120]	@ (800de9c <MIC_Print+0x2c4>)
 800de24:	1c18      	adds	r0, r3, #0
 800de26:	f7f2 fb83 	bl	8000530 <__aeabi_fcmplt>
 800de2a:	1e03      	subs	r3, r0, #0
 800de2c:	d004      	beq.n	800de38 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800de2e:	2201      	movs	r2, #1
 800de30:	2100      	movs	r1, #0
 800de32:	2001      	movs	r0, #1
 800de34:	f004 fb1e 	bl	8012474 <SetDBLED>
  }
  if(dBA < 35){//off
 800de38:	4b09      	ldr	r3, [pc, #36]	@ (800de60 <MIC_Print+0x288>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4918      	ldr	r1, [pc, #96]	@ (800dea0 <MIC_Print+0x2c8>)
 800de3e:	1c18      	adds	r0, r3, #0
 800de40:	f7f2 fb76 	bl	8000530 <__aeabi_fcmplt>
 800de44:	1e03      	subs	r3, r0, #0
 800de46:	d100      	bne.n	800de4a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800de48:	e004      	b.n	800de54 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800de4a:	2200      	movs	r2, #0
 800de4c:	2100      	movs	r1, #0
 800de4e:	2000      	movs	r0, #0
 800de50:	f004 fb10 	bl	8012474 <SetDBLED>
}
 800de54:	46c0      	nop			@ (mov r8, r8)
 800de56:	46bd      	mov	sp, r7
 800de58:	b004      	add	sp, #16
 800de5a:	bdb0      	pop	{r4, r5, r7, pc}
 800de5c:	20000fd0 	.word	0x20000fd0
 800de60:	20000f9c 	.word	0x20000f9c
 800de64:	20000fd8 	.word	0x20000fd8
 800de68:	20000fa0 	.word	0x20000fa0
 800de6c:	20000fd9 	.word	0x20000fd9
 800de70:	200000a9 	.word	0x200000a9
 800de74:	20000fcc 	.word	0x20000fcc
 800de78:	20000fd4 	.word	0x20000fd4
 800de7c:	20000fc8 	.word	0x20000fc8
 800de80:	0802cdac 	.word	0x0802cdac
 800de84:	20000f90 	.word	0x20000f90
 800de88:	42b40000 	.word	0x42b40000
 800de8c:	42a00000 	.word	0x42a00000
 800de90:	428c0000 	.word	0x428c0000
 800de94:	42700000 	.word	0x42700000
 800de98:	42480000 	.word	0x42480000
 800de9c:	42200000 	.word	0x42200000
 800dea0:	420c0000 	.word	0x420c0000

0800dea4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800deaa:	4b11      	ldr	r3, [pc, #68]	@ (800def0 <MIC_TestMeasurementDone+0x4c>)
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	4a10      	ldr	r2, [pc, #64]	@ (800def4 <MIC_TestMeasurementDone+0x50>)
 800deb2:	4911      	ldr	r1, [pc, #68]	@ (800def8 <MIC_TestMeasurementDone+0x54>)
 800deb4:	2002      	movs	r0, #2
 800deb6:	f005 fe09 	bl	8013acc <CreateLine>
  if(DataReady) {
 800deba:	4b0d      	ldr	r3, [pc, #52]	@ (800def0 <MIC_TestMeasurementDone+0x4c>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d010      	beq.n	800dee6 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800dec4:	1dfb      	adds	r3, r7, #7
 800dec6:	4a0d      	ldr	r2, [pc, #52]	@ (800defc <MIC_TestMeasurementDone+0x58>)
 800dec8:	7812      	ldrb	r2, [r2, #0]
 800deca:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800decc:	4b0b      	ldr	r3, [pc, #44]	@ (800defc <MIC_TestMeasurementDone+0x58>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	4a0b      	ldr	r2, [pc, #44]	@ (800df00 <MIC_TestMeasurementDone+0x5c>)
 800ded4:	4908      	ldr	r1, [pc, #32]	@ (800def8 <MIC_TestMeasurementDone+0x54>)
 800ded6:	2002      	movs	r0, #2
 800ded8:	f005 fdf8 	bl	8013acc <CreateLine>
    ResetMICIndicator();
 800dedc:	f004 fbb8 	bl	8012650 <ResetMICIndicator>
    return Check;
 800dee0:	1dfb      	adds	r3, r7, #7
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	e000      	b.n	800dee8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	0018      	movs	r0, r3
 800deea:	46bd      	mov	sp, r7
 800deec:	b002      	add	sp, #8
 800deee:	bd80      	pop	{r7, pc}
 800def0:	2000110d 	.word	0x2000110d
 800def4:	0802cdf4 	.word	0x0802cdf4
 800def8:	0802ce20 	.word	0x0802ce20
 800defc:	2000110e 	.word	0x2000110e
 800df00:	0802ce24 	.word	0x0802ce24

0800df04 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800df0a:	4b78      	ldr	r3, [pc, #480]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d100      	bne.n	800df14 <Mic_Upkeep+0x10>
 800df12:	e0b8      	b.n	800e086 <Mic_Upkeep+0x182>
 800df14:	dd00      	ble.n	800df18 <Mic_Upkeep+0x14>
 800df16:	e0d3      	b.n	800e0c0 <Mic_Upkeep+0x1bc>
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d037      	beq.n	800df8c <Mic_Upkeep+0x88>
 800df1c:	dd00      	ble.n	800df20 <Mic_Upkeep+0x1c>
 800df1e:	e0cf      	b.n	800e0c0 <Mic_Upkeep+0x1bc>
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <Mic_Upkeep+0x26>
 800df24:	2b01      	cmp	r3, #1
 800df26:	d014      	beq.n	800df52 <Mic_Upkeep+0x4e>
 800df28:	e0ca      	b.n	800e0c0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800df2a:	2001      	movs	r0, #1
 800df2c:	f003 fb98 	bl	8011660 <enableMicrophone>
 800df30:	0003      	movs	r3, r0
 800df32:	001a      	movs	r2, r3
 800df34:	2301      	movs	r3, #1
 800df36:	4053      	eors	r3, r2
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d005      	beq.n	800df4a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800df3e:	4a6c      	ldr	r2, [pc, #432]	@ (800e0f0 <Mic_Upkeep+0x1ec>)
 800df40:	4b6c      	ldr	r3, [pc, #432]	@ (800e0f4 <Mic_Upkeep+0x1f0>)
 800df42:	217f      	movs	r1, #127	@ 0x7f
 800df44:	0018      	movs	r0, r3
 800df46:	f005 fe79 	bl	8013c3c <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800df4a:	4b68      	ldr	r3, [pc, #416]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800df4c:	2201      	movs	r2, #1
 800df4e:	701a      	strb	r2, [r3, #0]
    break;
 800df50:	e0c5      	b.n	800e0de <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800df52:	f003 fb61 	bl	8011618 <micSettlingComplete>
 800df56:	1e03      	subs	r3, r0, #0
 800df58:	d105      	bne.n	800df66 <Mic_Upkeep+0x62>
 800df5a:	4b67      	ldr	r3, [pc, #412]	@ (800e0f8 <Mic_Upkeep+0x1f4>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d100      	bne.n	800df66 <Mic_Upkeep+0x62>
 800df64:	e0b6      	b.n	800e0d4 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800df66:	f003 fbe5 	bl	8011734 <startSPLcalculation>
 800df6a:	0003      	movs	r3, r0
 800df6c:	001a      	movs	r2, r3
 800df6e:	2301      	movs	r3, #1
 800df70:	4053      	eors	r3, r2
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	d005      	beq.n	800df84 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800df78:	4a5d      	ldr	r2, [pc, #372]	@ (800e0f0 <Mic_Upkeep+0x1ec>)
 800df7a:	4b5e      	ldr	r3, [pc, #376]	@ (800e0f4 <Mic_Upkeep+0x1f0>)
 800df7c:	2188      	movs	r1, #136	@ 0x88
 800df7e:	0018      	movs	r0, r3
 800df80:	f005 fe5c 	bl	8013c3c <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800df84:	4b59      	ldr	r3, [pc, #356]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800df86:	2202      	movs	r2, #2
 800df88:	701a      	strb	r2, [r3, #0]
    }
    break;
 800df8a:	e0a3      	b.n	800e0d4 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800df8c:	4b5b      	ldr	r3, [pc, #364]	@ (800e0fc <Mic_Upkeep+0x1f8>)
 800df8e:	2201      	movs	r2, #1
 800df90:	2101      	movs	r1, #1
 800df92:	0018      	movs	r0, r3
 800df94:	f003 fa22 	bl	80113dc <getSoundData>
 800df98:	1e03      	subs	r3, r0, #0
 800df9a:	d100      	bne.n	800df9e <Mic_Upkeep+0x9a>
 800df9c:	e09c      	b.n	800e0d8 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800df9e:	f003 fb1b 	bl	80115d8 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800dfa2:	4b56      	ldr	r3, [pc, #344]	@ (800e0fc <Mic_Upkeep+0x1f8>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	001a      	movs	r2, r3
 800dfa8:	4b54      	ldr	r3, [pc, #336]	@ (800e0fc <Mic_Upkeep+0x1f8>)
 800dfaa:	785b      	ldrb	r3, [r3, #1]
 800dfac:	4954      	ldr	r1, [pc, #336]	@ (800e100 <Mic_Upkeep+0x1fc>)
 800dfae:	0038      	movs	r0, r7
 800dfb0:	f017 ff16 	bl	8025de0 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800dfb4:	4b51      	ldr	r3, [pc, #324]	@ (800e0fc <Mic_Upkeep+0x1f8>)
 800dfb6:	89db      	ldrh	r3, [r3, #14]
 800dfb8:	001a      	movs	r2, r3
 800dfba:	4b50      	ldr	r3, [pc, #320]	@ (800e0fc <Mic_Upkeep+0x1f8>)
 800dfbc:	7c1b      	ldrb	r3, [r3, #16]
 800dfbe:	4951      	ldr	r1, [pc, #324]	@ (800e104 <Mic_Upkeep+0x200>)
 800dfc0:	4851      	ldr	r0, [pc, #324]	@ (800e108 <Mic_Upkeep+0x204>)
 800dfc2:	f017 ff0d 	bl	8025de0 <siprintf>
      dBValue = atof(dBbuffer);
 800dfc6:	003b      	movs	r3, r7
 800dfc8:	0018      	movs	r0, r3
 800dfca:	f016 faaf 	bl	802452c <atof>
 800dfce:	0002      	movs	r2, r0
 800dfd0:	000b      	movs	r3, r1
 800dfd2:	0010      	movs	r0, r2
 800dfd4:	0019      	movs	r1, r3
 800dfd6:	f7f5 fca5 	bl	8003924 <__aeabi_d2f>
 800dfda:	1c02      	adds	r2, r0, #0
 800dfdc:	4b4b      	ldr	r3, [pc, #300]	@ (800e10c <Mic_Upkeep+0x208>)
 800dfde:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800dfe0:	4b4a      	ldr	r3, [pc, #296]	@ (800e10c <Mic_Upkeep+0x208>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	494a      	ldr	r1, [pc, #296]	@ (800e110 <Mic_Upkeep+0x20c>)
 800dfe6:	1c18      	adds	r0, r3, #0
 800dfe8:	f7f3 f82a 	bl	8001040 <__aeabi_fmul>
 800dfec:	1c03      	adds	r3, r0, #0
 800dfee:	1c18      	adds	r0, r3, #0
 800dff0:	f7f5 fc50 	bl	8003894 <__aeabi_f2d>
 800dff4:	2200      	movs	r2, #0
 800dff6:	4b47      	ldr	r3, [pc, #284]	@ (800e114 <Mic_Upkeep+0x210>)
 800dff8:	f7f3 fcac 	bl	8001954 <__aeabi_dadd>
 800dffc:	0002      	movs	r2, r0
 800dffe:	000b      	movs	r3, r1
 800e000:	0010      	movs	r0, r2
 800e002:	0019      	movs	r1, r3
 800e004:	f7f5 fbb8 	bl	8003778 <__aeabi_d2iz>
 800e008:	0003      	movs	r3, r0
 800e00a:	0018      	movs	r0, r3
 800e00c:	f7f5 fbf0 	bl	80037f0 <__aeabi_i2d>
 800e010:	2200      	movs	r2, #0
 800e012:	4b41      	ldr	r3, [pc, #260]	@ (800e118 <Mic_Upkeep+0x214>)
 800e014:	f7f4 f864 	bl	80020e0 <__aeabi_ddiv>
 800e018:	0002      	movs	r2, r0
 800e01a:	000b      	movs	r3, r1
 800e01c:	0010      	movs	r0, r2
 800e01e:	0019      	movs	r1, r3
 800e020:	f7f5 fc80 	bl	8003924 <__aeabi_d2f>
 800e024:	1c02      	adds	r2, r0, #0
 800e026:	4b39      	ldr	r3, [pc, #228]	@ (800e10c <Mic_Upkeep+0x208>)
 800e028:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e02a:	f7ff fdd5 	bl	800dbd8 <MIC_Print>
      if (!startSPLcalculation()) {
 800e02e:	f003 fb81 	bl	8011734 <startSPLcalculation>
 800e032:	0003      	movs	r3, r0
 800e034:	001a      	movs	r2, r3
 800e036:	2301      	movs	r3, #1
 800e038:	4053      	eors	r3, r2
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e040:	4a2b      	ldr	r2, [pc, #172]	@ (800e0f0 <Mic_Upkeep+0x1ec>)
 800e042:	4b2c      	ldr	r3, [pc, #176]	@ (800e0f4 <Mic_Upkeep+0x1f0>)
 800e044:	2198      	movs	r1, #152	@ 0x98
 800e046:	0018      	movs	r0, r3
 800e048:	f005 fdf8 	bl	8013c3c <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e04c:	2000      	movs	r0, #0
 800e04e:	f003 fb07 	bl	8011660 <enableMicrophone>
 800e052:	0003      	movs	r3, r0
 800e054:	001a      	movs	r2, r3
 800e056:	2301      	movs	r3, #1
 800e058:	4053      	eors	r3, r2
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e060:	4a23      	ldr	r2, [pc, #140]	@ (800e0f0 <Mic_Upkeep+0x1ec>)
 800e062:	4b24      	ldr	r3, [pc, #144]	@ (800e0f4 <Mic_Upkeep+0x1f0>)
 800e064:	219b      	movs	r1, #155	@ 0x9b
 800e066:	0018      	movs	r0, r3
 800e068:	f005 fde8 	bl	8013c3c <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e06c:	f006 fa6e 	bl	801454c <HAL_GetTick>
 800e070:	0003      	movs	r3, r0
 800e072:	4a2a      	ldr	r2, [pc, #168]	@ (800e11c <Mic_Upkeep+0x218>)
 800e074:	189a      	adds	r2, r3, r2
 800e076:	4b2a      	ldr	r3, [pc, #168]	@ (800e120 <Mic_Upkeep+0x21c>)
 800e078:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e07a:	4b1c      	ldr	r3, [pc, #112]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800e07c:	2203      	movs	r2, #3
 800e07e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e080:	f004 fae6 	bl	8012650 <ResetMICIndicator>
    }
    break;
 800e084:	e028      	b.n	800e0d8 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e086:	4b26      	ldr	r3, [pc, #152]	@ (800e120 <Mic_Upkeep+0x21c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	0018      	movs	r0, r3
 800e08c:	f005 fcc8 	bl	8013a20 <TimestampIsReached>
 800e090:	1e03      	subs	r3, r0, #0
 800e092:	d023      	beq.n	800e0dc <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e094:	2001      	movs	r0, #1
 800e096:	f003 fae3 	bl	8011660 <enableMicrophone>
 800e09a:	0003      	movs	r3, r0
 800e09c:	001a      	movs	r2, r3
 800e09e:	2301      	movs	r3, #1
 800e0a0:	4053      	eors	r3, r2
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d005      	beq.n	800e0b4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e0a8:	4a11      	ldr	r2, [pc, #68]	@ (800e0f0 <Mic_Upkeep+0x1ec>)
 800e0aa:	4b12      	ldr	r3, [pc, #72]	@ (800e0f4 <Mic_Upkeep+0x1f0>)
 800e0ac:	21a6      	movs	r1, #166	@ 0xa6
 800e0ae:	0018      	movs	r0, r3
 800e0b0:	f005 fdc4 	bl	8013c3c <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e0ba:	f004 fa87 	bl	80125cc <SetMICIndicator>
    }
    break;
 800e0be:	e00d      	b.n	800e0dc <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e0c0:	4a18      	ldr	r2, [pc, #96]	@ (800e124 <Mic_Upkeep+0x220>)
 800e0c2:	4b19      	ldr	r3, [pc, #100]	@ (800e128 <Mic_Upkeep+0x224>)
 800e0c4:	0019      	movs	r1, r3
 800e0c6:	2003      	movs	r0, #3
 800e0c8:	f005 fd00 	bl	8013acc <CreateLine>
    MicState = MIC_STATE_INIT;
 800e0cc:	4b07      	ldr	r3, [pc, #28]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	701a      	strb	r2, [r3, #0]
    break;
 800e0d2:	e004      	b.n	800e0de <Mic_Upkeep+0x1da>
    break;
 800e0d4:	46c0      	nop			@ (mov r8, r8)
 800e0d6:	e002      	b.n	800e0de <Mic_Upkeep+0x1da>
    break;
 800e0d8:	46c0      	nop			@ (mov r8, r8)
 800e0da:	e000      	b.n	800e0de <Mic_Upkeep+0x1da>
    break;
 800e0dc:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e0de:	4b03      	ldr	r3, [pc, #12]	@ (800e0ec <Mic_Upkeep+0x1e8>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
}
 800e0e2:	0018      	movs	r0, r3
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	b002      	add	sp, #8
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	46c0      	nop			@ (mov r8, r8)
 800e0ec:	20000ff2 	.word	0x20000ff2
 800e0f0:	0802ce3c 	.word	0x0802ce3c
 800e0f4:	0802e088 	.word	0x0802e088
 800e0f8:	2000110d 	.word	0x2000110d
 800e0fc:	20000fe0 	.word	0x20000fe0
 800e100:	0802ce58 	.word	0x0802ce58
 800e104:	0802ce60 	.word	0x0802ce60
 800e108:	20000f90 	.word	0x20000f90
 800e10c:	20000fd0 	.word	0x20000fd0
 800e110:	42c80000 	.word	0x42c80000
 800e114:	3fe00000 	.word	0x3fe00000
 800e118:	40590000 	.word	0x40590000
 800e11c:	000002f3 	.word	0x000002f3
 800e120:	20000fdc 	.word	0x20000fdc
 800e124:	0802ce68 	.word	0x0802ce68
 800e128:	0802ce88 	.word	0x0802ce88

0800e12c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e132:	1d3b      	adds	r3, r7, #4
 800e134:	0018      	movs	r0, r3
 800e136:	2314      	movs	r3, #20
 800e138:	001a      	movs	r2, r3
 800e13a:	2100      	movs	r1, #0
 800e13c:	f017 ffba 	bl	80260b4 <memset>
  RTC_DateTypeDef sDate = {0};
 800e140:	003b      	movs	r3, r7
 800e142:	2200      	movs	r2, #0
 800e144:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e146:	4b2e      	ldr	r3, [pc, #184]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e148:	4a2e      	ldr	r2, [pc, #184]	@ (800e204 <MX_RTC_Init+0xd8>)
 800e14a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e14c:	4b2c      	ldr	r3, [pc, #176]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e14e:	2200      	movs	r2, #0
 800e150:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e152:	4b2b      	ldr	r3, [pc, #172]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e154:	227f      	movs	r2, #127	@ 0x7f
 800e156:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e158:	4b29      	ldr	r3, [pc, #164]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e15a:	22ff      	movs	r2, #255	@ 0xff
 800e15c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e15e:	4b28      	ldr	r3, [pc, #160]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e160:	2200      	movs	r2, #0
 800e162:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e164:	4b26      	ldr	r3, [pc, #152]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e166:	2200      	movs	r2, #0
 800e168:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e16a:	4b25      	ldr	r3, [pc, #148]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e170:	4b23      	ldr	r3, [pc, #140]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e172:	2200      	movs	r2, #0
 800e174:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e176:	4b22      	ldr	r3, [pc, #136]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e178:	0018      	movs	r0, r3
 800e17a:	f00d fd77 	bl	801bc6c <HAL_RTC_Init>
 800e17e:	1e03      	subs	r3, r0, #0
 800e180:	d001      	beq.n	800e186 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e182:	f7fe ff7d 	bl	800d080 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e186:	1d3b      	adds	r3, r7, #4
 800e188:	220d      	movs	r2, #13
 800e18a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e18c:	1d3b      	adds	r3, r7, #4
 800e18e:	2200      	movs	r2, #0
 800e190:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e192:	1d3b      	adds	r3, r7, #4
 800e194:	2200      	movs	r2, #0
 800e196:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e198:	1d3b      	adds	r3, r7, #4
 800e19a:	2200      	movs	r2, #0
 800e19c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e19e:	1d3b      	adds	r3, r7, #4
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e1a4:	1d39      	adds	r1, r7, #4
 800e1a6:	4b16      	ldr	r3, [pc, #88]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	f00d fdfa 	bl	801bda4 <HAL_RTC_SetTime>
 800e1b0:	1e03      	subs	r3, r0, #0
 800e1b2:	d001      	beq.n	800e1b8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e1b4:	f7fe ff64 	bl	800d080 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e1b8:	003b      	movs	r3, r7
 800e1ba:	2206      	movs	r2, #6
 800e1bc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e1be:	003b      	movs	r3, r7
 800e1c0:	2211      	movs	r2, #17
 800e1c2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e1c4:	003b      	movs	r3, r7
 800e1c6:	2217      	movs	r2, #23
 800e1c8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e1ca:	003b      	movs	r3, r7
 800e1cc:	2218      	movs	r2, #24
 800e1ce:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e1d0:	0039      	movs	r1, r7
 800e1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	0018      	movs	r0, r3
 800e1d8:	f00d feec 	bl	801bfb4 <HAL_RTC_SetDate>
 800e1dc:	1e03      	subs	r3, r0, #0
 800e1de:	d001      	beq.n	800e1e4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e1e0:	f7fe ff4e 	bl	800d080 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e1e4:	4b06      	ldr	r3, [pc, #24]	@ (800e200 <MX_RTC_Init+0xd4>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f00e f8ba 	bl	801c364 <HAL_RTCEx_SetWakeUpTimer_IT>
 800e1f0:	1e03      	subs	r3, r0, #0
 800e1f2:	d001      	beq.n	800e1f8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e1f4:	f7fe ff44 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e1f8:	46c0      	nop			@ (mov r8, r8)
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	b006      	add	sp, #24
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20000ff4 	.word	0x20000ff4
 800e204:	40002800 	.word	0x40002800

0800e208 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a0a      	ldr	r2, [pc, #40]	@ (800e240 <HAL_RTC_MspInit+0x38>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d10e      	bne.n	800e238 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e21a:	4b0a      	ldr	r3, [pc, #40]	@ (800e244 <HAL_RTC_MspInit+0x3c>)
 800e21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e21e:	4b09      	ldr	r3, [pc, #36]	@ (800e244 <HAL_RTC_MspInit+0x3c>)
 800e220:	2180      	movs	r1, #128	@ 0x80
 800e222:	02c9      	lsls	r1, r1, #11
 800e224:	430a      	orrs	r2, r1
 800e226:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e228:	2200      	movs	r2, #0
 800e22a:	2100      	movs	r1, #0
 800e22c:	2002      	movs	r0, #2
 800e22e:	f006 fe31 	bl	8014e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e232:	2002      	movs	r0, #2
 800e234:	f006 fe43 	bl	8014ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e238:	46c0      	nop			@ (mov r8, r8)
 800e23a:	46bd      	mov	sp, r7
 800e23c:	b002      	add	sp, #8
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	40002800 	.word	0x40002800
 800e244:	40021000 	.word	0x40021000

0800e248 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e24c:	4b02      	ldr	r3, [pc, #8]	@ (800e258 <sen5x_Get_sen5x_enable_state+0x10>)
 800e24e:	781b      	ldrb	r3, [r3, #0]
}
 800e250:	0018      	movs	r0, r3
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	46c0      	nop			@ (mov r8, r8)
 800e258:	2000101b 	.word	0x2000101b

0800e25c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	0002      	movs	r2, r0
 800e264:	1dfb      	adds	r3, r7, #7
 800e266:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e268:	4b03      	ldr	r3, [pc, #12]	@ (800e278 <sen5x_Set_sen5x_state+0x1c>)
 800e26a:	1dfa      	adds	r2, r7, #7
 800e26c:	7812      	ldrb	r2, [r2, #0]
 800e26e:	701a      	strb	r2, [r3, #0]
}
 800e270:	46c0      	nop			@ (mov r8, r8)
 800e272:	46bd      	mov	sp, r7
 800e274:	b002      	add	sp, #8
 800e276:	bd80      	pop	{r7, pc}
 800e278:	2000101b 	.word	0x2000101b

0800e27c <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e284:	f006 f962 	bl	801454c <HAL_GetTick>
 800e288:	0002      	movs	r2, r0
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	18d2      	adds	r2, r2, r3
 800e28e:	4b03      	ldr	r3, [pc, #12]	@ (800e29c <setsen5xReadTimer+0x20>)
 800e290:	601a      	str	r2, [r3, #0]
}
 800e292:	46c0      	nop			@ (mov r8, r8)
 800e294:	46bd      	mov	sp, r7
 800e296:	b002      	add	sp, #8
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	46c0      	nop			@ (mov r8, r8)
 800e29c:	20001028 	.word	0x20001028

0800e2a0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	0002      	movs	r2, r0
 800e2a8:	1dfb      	adds	r3, r7, #7
 800e2aa:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e2ac:	4b03      	ldr	r3, [pc, #12]	@ (800e2bc <setsen5xSamplecounter+0x1c>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	701a      	strb	r2, [r3, #0]
}
 800e2b2:	46c0      	nop			@ (mov r8, r8)
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	b002      	add	sp, #8
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	46c0      	nop			@ (mov r8, r8)
 800e2bc:	20001024 	.word	0x20001024

0800e2c0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e2c8:	f7fe ff92 	bl	800d1f0 <IsPMSensorEnabled>
 800e2cc:	1e03      	subs	r3, r0, #0
 800e2ce:	d035      	beq.n	800e33c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800e2d0:	f003 fff2 	bl	80122b8 <batteryChargeCheck>
 800e2d4:	0003      	movs	r3, r0
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	d103      	bne.n	800e2e2 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800e2da:	4b20      	ldr	r3, [pc, #128]	@ (800e35c <sen5x_enable+0x9c>)
 800e2dc:	2201      	movs	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	e00d      	b.n	800e2fe <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e2e2:	4b1e      	ldr	r3, [pc, #120]	@ (800e35c <sen5x_enable+0x9c>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	1e5a      	subs	r2, r3, #1
 800e2e8:	4193      	sbcs	r3, r2
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	4053      	eors	r3, r2
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	1c1a      	adds	r2, r3, #0
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	4b18      	ldr	r3, [pc, #96]	@ (800e35c <sen5x_enable+0x9c>)
 800e2fc:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e2fe:	4b17      	ldr	r3, [pc, #92]	@ (800e35c <sen5x_enable+0x9c>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800e306:	2000      	movs	r0, #0
 800e308:	f7ff ffb8 	bl	800e27c <setsen5xReadTimer>
 800e30c:	e009      	b.n	800e322 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e30e:	f006 f91d 	bl	801454c <HAL_GetTick>
 800e312:	0002      	movs	r2, r0
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2164      	movs	r1, #100	@ 0x64
 800e318:	434b      	muls	r3, r1
 800e31a:	18d3      	adds	r3, r2, r3
 800e31c:	0018      	movs	r0, r3
 800e31e:	f7ff ffad 	bl	800e27c <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e322:	4b0e      	ldr	r3, [pc, #56]	@ (800e35c <sen5x_enable+0x9c>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <sen5x_enable+0x6e>
 800e32a:	4b0d      	ldr	r3, [pc, #52]	@ (800e360 <sen5x_enable+0xa0>)
 800e32c:	e000      	b.n	800e330 <sen5x_enable+0x70>
 800e32e:	4b0d      	ldr	r3, [pc, #52]	@ (800e364 <sen5x_enable+0xa4>)
 800e330:	4a0d      	ldr	r2, [pc, #52]	@ (800e368 <sen5x_enable+0xa8>)
 800e332:	490e      	ldr	r1, [pc, #56]	@ (800e36c <sen5x_enable+0xac>)
 800e334:	2002      	movs	r0, #2
 800e336:	f005 fbc9 	bl	8013acc <CreateLine>
 800e33a:	e005      	b.n	800e348 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800e33c:	4a0c      	ldr	r2, [pc, #48]	@ (800e370 <sen5x_enable+0xb0>)
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <sen5x_enable+0xac>)
 800e340:	0019      	movs	r1, r3
 800e342:	2002      	movs	r0, #2
 800e344:	f005 fbc2 	bl	8013acc <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e348:	4b0a      	ldr	r3, [pc, #40]	@ (800e374 <sen5x_enable+0xb4>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e34e:	4b03      	ldr	r3, [pc, #12]	@ (800e35c <sen5x_enable+0x9c>)
 800e350:	781b      	ldrb	r3, [r3, #0]
}
 800e352:	0018      	movs	r0, r3
 800e354:	46bd      	mov	sp, r7
 800e356:	b002      	add	sp, #8
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	46c0      	nop			@ (mov r8, r8)
 800e35c:	2000101b 	.word	0x2000101b
 800e360:	0802ce8c 	.word	0x0802ce8c
 800e364:	0802ce94 	.word	0x0802ce94
 800e368:	0802cea0 	.word	0x0802cea0
 800e36c:	0802cebc 	.word	0x0802cebc
 800e370:	0802cec0 	.word	0x0802cec0
 800e374:	200000aa 	.word	0x200000aa

0800e378 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e378:	b580      	push	{r7, lr}
 800e37a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e37c:	2380      	movs	r3, #128	@ 0x80
 800e37e:	015b      	lsls	r3, r3, #5
 800e380:	480f      	ldr	r0, [pc, #60]	@ (800e3c0 <sen5x_Power_On+0x48>)
 800e382:	2201      	movs	r2, #1
 800e384:	0019      	movs	r1, r3
 800e386:	f007 fb72 	bl	8015a6e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e38a:	4a0e      	ldr	r2, [pc, #56]	@ (800e3c4 <sen5x_Power_On+0x4c>)
 800e38c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c8 <sen5x_Power_On+0x50>)
 800e38e:	0019      	movs	r1, r3
 800e390:	2003      	movs	r0, #3
 800e392:	f005 fb9b 	bl	8013acc <CreateLine>
  HAL_Delay(150);
 800e396:	2096      	movs	r0, #150	@ 0x96
 800e398:	f006 f8e2 	bl	8014560 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e39c:	f001 f9da 	bl	800f754 <sen5x_device_reset>
 800e3a0:	1e03      	subs	r3, r0, #0
 800e3a2:	d006      	beq.n	800e3b2 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e3a4:	4a09      	ldr	r2, [pc, #36]	@ (800e3cc <sen5x_Power_On+0x54>)
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d0 <sen5x_Power_On+0x58>)
 800e3a8:	0019      	movs	r1, r3
 800e3aa:	2001      	movs	r0, #1
 800e3ac:	f005 fb8e 	bl	8013acc <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e3b0:	e002      	b.n	800e3b8 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e3b2:	4b08      	ldr	r3, [pc, #32]	@ (800e3d4 <sen5x_Power_On+0x5c>)
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	701a      	strb	r2, [r3, #0]
}
 800e3b8:	46c0      	nop			@ (mov r8, r8)
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	46c0      	nop			@ (mov r8, r8)
 800e3c0:	50000800 	.word	0x50000800
 800e3c4:	0802cee0 	.word	0x0802cee0
 800e3c8:	0802cefc 	.word	0x0802cefc
 800e3cc:	0802cf00 	.word	0x0802cf00
 800e3d0:	0802cf28 	.word	0x0802cf28
 800e3d4:	20001019 	.word	0x20001019

0800e3d8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e418 <sen5x_Power_Off+0x40>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d006      	beq.n	800e3f2 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800e41c <sen5x_Power_Off+0x44>)
 800e3e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e420 <sen5x_Power_Off+0x48>)
 800e3e8:	0019      	movs	r1, r3
 800e3ea:	2003      	movs	r0, #3
 800e3ec:	f005 fb6e 	bl	8013acc <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e3f0:	e00f      	b.n	800e412 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e3f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e424 <sen5x_Power_Off+0x4c>)
 800e3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e420 <sen5x_Power_Off+0x48>)
 800e3f6:	0019      	movs	r1, r3
 800e3f8:	2003      	movs	r0, #3
 800e3fa:	f005 fb67 	bl	8013acc <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e3fe:	2380      	movs	r3, #128	@ 0x80
 800e400:	015b      	lsls	r3, r3, #5
 800e402:	4809      	ldr	r0, [pc, #36]	@ (800e428 <sen5x_Power_Off+0x50>)
 800e404:	2200      	movs	r2, #0
 800e406:	0019      	movs	r1, r3
 800e408:	f007 fb31 	bl	8015a6e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e40c:	4b07      	ldr	r3, [pc, #28]	@ (800e42c <sen5x_Power_Off+0x54>)
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
}
 800e412:	46c0      	nop			@ (mov r8, r8)
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	2000101a 	.word	0x2000101a
 800e41c:	0802cf2c 	.word	0x0802cf2c
 800e420:	0802cefc 	.word	0x0802cefc
 800e424:	0802cf5c 	.word	0x0802cf5c
 800e428:	50000800 	.word	0x50000800
 800e42c:	20001019 	.word	0x20001019

0800e430 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e430:	b580      	push	{r7, lr}
 800e432:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e434:	4b02      	ldr	r3, [pc, #8]	@ (800e440 <reset_fanCleaningDone+0x10>)
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
}
 800e43a:	46c0      	nop			@ (mov r8, r8)
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20001018 	.word	0x20001018

0800e444 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e446:	b093      	sub	sp, #76	@ 0x4c
 800e448:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e44a:	2436      	movs	r4, #54	@ 0x36
 800e44c:	193b      	adds	r3, r7, r4
 800e44e:	2200      	movs	r2, #0
 800e450:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e452:	2335      	movs	r3, #53	@ 0x35
 800e454:	18fb      	adds	r3, r7, r3
 800e456:	2220      	movs	r2, #32
 800e458:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e45a:	2334      	movs	r3, #52	@ 0x34
 800e45c:	18fb      	adds	r3, r7, r3
 800e45e:	2220      	movs	r2, #32
 800e460:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e462:	f7ff ff89 	bl	800e378 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e466:	0025      	movs	r5, r4
 800e468:	193c      	adds	r4, r7, r4
 800e46a:	f001 f973 	bl	800f754 <sen5x_device_reset>
 800e46e:	0003      	movs	r3, r0
 800e470:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e472:	002c      	movs	r4, r5
 800e474:	193b      	adds	r3, r7, r4
 800e476:	2200      	movs	r2, #0
 800e478:	5e9b      	ldrsh	r3, [r3, r2]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00b      	beq.n	800e496 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e47e:	193b      	adds	r3, r7, r4
 800e480:	2200      	movs	r2, #0
 800e482:	5e9b      	ldrsh	r3, [r3, r2]
 800e484:	4a75      	ldr	r2, [pc, #468]	@ (800e65c <probe_sen5x+0x218>)
 800e486:	4976      	ldr	r1, [pc, #472]	@ (800e660 <probe_sen5x+0x21c>)
 800e488:	2001      	movs	r0, #1
 800e48a:	f005 fb1f 	bl	8013acc <CreateLine>
      return error;
 800e48e:	193b      	adds	r3, r7, r4
 800e490:	2200      	movs	r2, #0
 800e492:	5e9b      	ldrsh	r3, [r3, r2]
 800e494:	e0de      	b.n	800e654 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e496:	2536      	movs	r5, #54	@ 0x36
 800e498:	197c      	adds	r4, r7, r5
 800e49a:	2335      	movs	r3, #53	@ 0x35
 800e49c:	18fb      	adds	r3, r7, r3
 800e49e:	781a      	ldrb	r2, [r3, #0]
 800e4a0:	230c      	movs	r3, #12
 800e4a2:	18fb      	adds	r3, r7, r3
 800e4a4:	0011      	movs	r1, r2
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f001 f840 	bl	800f52c <sen5x_get_serial_number>
 800e4ac:	0003      	movs	r3, r0
 800e4ae:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e4b0:	197b      	adds	r3, r7, r5
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	5e9b      	ldrsh	r3, [r3, r2]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800e4ba:	197b      	adds	r3, r7, r5
 800e4bc:	2200      	movs	r2, #0
 800e4be:	5e9a      	ldrsh	r2, [r3, r2]
 800e4c0:	4b68      	ldr	r3, [pc, #416]	@ (800e664 <probe_sen5x+0x220>)
 800e4c2:	0011      	movs	r1, r2
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f017 fc1b 	bl	8025d00 <iprintf>
      return error;
 800e4ca:	197b      	adds	r3, r7, r5
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	5e9b      	ldrsh	r3, [r3, r2]
 800e4d0:	e0c0      	b.n	800e654 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800e4d2:	230c      	movs	r3, #12
 800e4d4:	18fa      	adds	r2, r7, r3
 800e4d6:	4b64      	ldr	r3, [pc, #400]	@ (800e668 <probe_sen5x+0x224>)
 800e4d8:	0011      	movs	r1, r2
 800e4da:	0018      	movs	r0, r3
 800e4dc:	f017 fc10 	bl	8025d00 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800e4e0:	2536      	movs	r5, #54	@ 0x36
 800e4e2:	197c      	adds	r4, r7, r5
 800e4e4:	2334      	movs	r3, #52	@ 0x34
 800e4e6:	18fb      	adds	r3, r7, r3
 800e4e8:	781a      	ldrb	r2, [r3, #0]
 800e4ea:	4b60      	ldr	r3, [pc, #384]	@ (800e66c <probe_sen5x+0x228>)
 800e4ec:	0011      	movs	r1, r2
 800e4ee:	0018      	movs	r0, r3
 800e4f0:	f000 ffc6 	bl	800f480 <sen5x_get_product_name>
 800e4f4:	0003      	movs	r3, r0
 800e4f6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e4f8:	197b      	adds	r3, r7, r5
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	5e9b      	ldrsh	r3, [r3, r2]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00b      	beq.n	800e51a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800e502:	197b      	adds	r3, r7, r5
 800e504:	2200      	movs	r2, #0
 800e506:	5e9a      	ldrsh	r2, [r3, r2]
 800e508:	4b59      	ldr	r3, [pc, #356]	@ (800e670 <probe_sen5x+0x22c>)
 800e50a:	0011      	movs	r1, r2
 800e50c:	0018      	movs	r0, r3
 800e50e:	f017 fbf7 	bl	8025d00 <iprintf>
      return error;
 800e512:	197b      	adds	r3, r7, r5
 800e514:	2200      	movs	r2, #0
 800e516:	5e9b      	ldrsh	r3, [r3, r2]
 800e518:	e09c      	b.n	800e654 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800e51a:	4a54      	ldr	r2, [pc, #336]	@ (800e66c <probe_sen5x+0x228>)
 800e51c:	4b55      	ldr	r3, [pc, #340]	@ (800e674 <probe_sen5x+0x230>)
 800e51e:	0011      	movs	r1, r2
 800e520:	0018      	movs	r0, r3
 800e522:	f017 fbed 	bl	8025d00 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800e526:	2636      	movs	r6, #54	@ 0x36
 800e528:	19bc      	adds	r4, r7, r6
 800e52a:	2308      	movs	r3, #8
 800e52c:	18fd      	adds	r5, r7, r3
 800e52e:	2309      	movs	r3, #9
 800e530:	18fa      	adds	r2, r7, r3
 800e532:	230a      	movs	r3, #10
 800e534:	18f9      	adds	r1, r7, r3
 800e536:	230b      	movs	r3, #11
 800e538:	18f8      	adds	r0, r7, r3
 800e53a:	1d7b      	adds	r3, r7, #5
 800e53c:	9302      	str	r3, [sp, #8]
 800e53e:	1dbb      	adds	r3, r7, #6
 800e540:	9301      	str	r3, [sp, #4]
 800e542:	1dfb      	adds	r3, r7, #7
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	002b      	movs	r3, r5
 800e548:	f001 f846 	bl	800f5d8 <sen5x_get_version>
 800e54c:	0003      	movs	r3, r0
 800e54e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800e550:	19bb      	adds	r3, r7, r6
 800e552:	2200      	movs	r2, #0
 800e554:	5e9b      	ldrsh	r3, [r3, r2]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00b      	beq.n	800e572 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800e55a:	19bb      	adds	r3, r7, r6
 800e55c:	2200      	movs	r2, #0
 800e55e:	5e9a      	ldrsh	r2, [r3, r2]
 800e560:	4b45      	ldr	r3, [pc, #276]	@ (800e678 <probe_sen5x+0x234>)
 800e562:	0011      	movs	r1, r2
 800e564:	0018      	movs	r0, r3
 800e566:	f017 fbcb 	bl	8025d00 <iprintf>
      return error;
 800e56a:	19bb      	adds	r3, r7, r6
 800e56c:	2200      	movs	r2, #0
 800e56e:	5e9b      	ldrsh	r3, [r3, r2]
 800e570:	e070      	b.n	800e654 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800e572:	230b      	movs	r3, #11
 800e574:	18fb      	adds	r3, r7, r3
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	0019      	movs	r1, r3
 800e57a:	230a      	movs	r3, #10
 800e57c:	18fb      	adds	r3, r7, r3
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	001a      	movs	r2, r3
 800e582:	2308      	movs	r3, #8
 800e584:	18fb      	adds	r3, r7, r3
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	001c      	movs	r4, r3
 800e58a:	1dfb      	adds	r3, r7, #7
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	483b      	ldr	r0, [pc, #236]	@ (800e67c <probe_sen5x+0x238>)
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	0023      	movs	r3, r4
 800e594:	f017 fbb4 	bl	8025d00 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800e598:	2300      	movs	r3, #0
 800e59a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800e59c:	262e      	movs	r6, #46	@ 0x2e
 800e59e:	19bb      	adds	r3, r7, r6
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e5a4:	232c      	movs	r3, #44	@ 0x2c
 800e5a6:	18fb      	adds	r3, r7, r3
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e5ac:	4934      	ldr	r1, [pc, #208]	@ (800e680 <probe_sen5x+0x23c>)
 800e5ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5b0:	f7f2 fd46 	bl	8001040 <__aeabi_fmul>
 800e5b4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e5b6:	1c18      	adds	r0, r3, #0
 800e5b8:	f7f3 f916 	bl	80017e8 <__aeabi_f2iz>
 800e5bc:	0003      	movs	r3, r0
 800e5be:	b218      	sxth	r0, r3
 800e5c0:	2536      	movs	r5, #54	@ 0x36
 800e5c2:	197c      	adds	r4, r7, r5
 800e5c4:	232c      	movs	r3, #44	@ 0x2c
 800e5c6:	18fb      	adds	r3, r7, r3
 800e5c8:	881a      	ldrh	r2, [r3, #0]
 800e5ca:	19bb      	adds	r3, r7, r6
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	5e5b      	ldrsh	r3, [r3, r1]
 800e5d0:	0019      	movs	r1, r3
 800e5d2:	f000 fef1 	bl	800f3b8 <sen5x_set_temperature_offset_parameters>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e5da:	197b      	adds	r3, r7, r5
 800e5dc:	2200      	movs	r2, #0
 800e5de:	5e9b      	ldrsh	r3, [r3, r2]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00b      	beq.n	800e5fc <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e5e4:	197b      	adds	r3, r7, r5
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	5e9b      	ldrsh	r3, [r3, r2]
 800e5ea:	4a26      	ldr	r2, [pc, #152]	@ (800e684 <probe_sen5x+0x240>)
 800e5ec:	491c      	ldr	r1, [pc, #112]	@ (800e660 <probe_sen5x+0x21c>)
 800e5ee:	2001      	movs	r0, #1
 800e5f0:	f005 fa6c 	bl	8013acc <CreateLine>
      return error;
 800e5f4:	197b      	adds	r3, r7, r5
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	5e9b      	ldrsh	r3, [r3, r2]
 800e5fa:	e02b      	b.n	800e654 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e5fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5fe:	f7f5 f949 	bl	8003894 <__aeabi_f2d>
 800e602:	0002      	movs	r2, r0
 800e604:	000b      	movs	r3, r1
 800e606:	4820      	ldr	r0, [pc, #128]	@ (800e688 <probe_sen5x+0x244>)
 800e608:	4920      	ldr	r1, [pc, #128]	@ (800e68c <probe_sen5x+0x248>)
 800e60a:	9200      	str	r2, [sp, #0]
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	0002      	movs	r2, r0
 800e610:	2002      	movs	r0, #2
 800e612:	f005 fa5b 	bl	8013acc <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e616:	f7fb f883 	bl	8009720 <Check_USB_PowerOn>
 800e61a:	0003      	movs	r3, r0
 800e61c:	001a      	movs	r2, r3
 800e61e:	2301      	movs	r3, #1
 800e620:	4053      	eors	r3, r2
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00a      	beq.n	800e63e <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800e628:	f7ff fed6 	bl	800e3d8 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e62c:	f005 ff8e 	bl	801454c <HAL_GetTick>
 800e630:	0003      	movs	r3, r0
 800e632:	22fa      	movs	r2, #250	@ 0xfa
 800e634:	00d2      	lsls	r2, r2, #3
 800e636:	189a      	adds	r2, r3, r2
 800e638:	4b15      	ldr	r3, [pc, #84]	@ (800e690 <probe_sen5x+0x24c>)
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	e006      	b.n	800e64c <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e63e:	f005 ff85 	bl	801454c <HAL_GetTick>
 800e642:	0003      	movs	r3, r0
 800e644:	4a13      	ldr	r2, [pc, #76]	@ (800e694 <probe_sen5x+0x250>)
 800e646:	189a      	adds	r2, r3, r2
 800e648:	4b11      	ldr	r3, [pc, #68]	@ (800e690 <probe_sen5x+0x24c>)
 800e64a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e64c:	2336      	movs	r3, #54	@ 0x36
 800e64e:	18fb      	adds	r3, r7, r3
 800e650:	2200      	movs	r2, #0
 800e652:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e654:	0018      	movs	r0, r3
 800e656:	46bd      	mov	sp, r7
 800e658:	b00f      	add	sp, #60	@ 0x3c
 800e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e65c:	0802cf78 	.word	0x0802cf78
 800e660:	0802cf28 	.word	0x0802cf28
 800e664:	0802cfa4 	.word	0x0802cfa4
 800e668:	0802cfd4 	.word	0x0802cfd4
 800e66c:	2000101c 	.word	0x2000101c
 800e670:	0802cfe8 	.word	0x0802cfe8
 800e674:	0802d018 	.word	0x0802d018
 800e678:	0802d02c 	.word	0x0802d02c
 800e67c:	0802d058 	.word	0x0802d058
 800e680:	43480000 	.word	0x43480000
 800e684:	0802d07c 	.word	0x0802d07c
 800e688:	0802d0bc 	.word	0x0802d0bc
 800e68c:	0802cebc 	.word	0x0802cebc
 800e690:	20001028 	.word	0x20001028
 800e694:	00006d60 	.word	0x00006d60

0800e698 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e698:	b590      	push	{r4, r7, lr}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e69e:	1dbb      	adds	r3, r7, #6
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e714 <sen5x_lightup_measurement+0x7c>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00b      	beq.n	800e6c4 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e6ac:	4a1a      	ldr	r2, [pc, #104]	@ (800e718 <sen5x_lightup_measurement+0x80>)
 800e6ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e71c <sen5x_lightup_measurement+0x84>)
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	2002      	movs	r0, #2
 800e6b4:	f005 fa0a 	bl	8013acc <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e6b8:	1dbc      	adds	r4, r7, #6
 800e6ba:	f000 fd09 	bl	800f0d0 <sen5x_start_measurement_without_pm>
 800e6be:	0003      	movs	r3, r0
 800e6c0:	8023      	strh	r3, [r4, #0]
 800e6c2:	e00a      	b.n	800e6da <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e6c4:	4a16      	ldr	r2, [pc, #88]	@ (800e720 <sen5x_lightup_measurement+0x88>)
 800e6c6:	4b15      	ldr	r3, [pc, #84]	@ (800e71c <sen5x_lightup_measurement+0x84>)
 800e6c8:	0019      	movs	r1, r3
 800e6ca:	2002      	movs	r0, #2
 800e6cc:	f005 f9fe 	bl	8013acc <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800e6d0:	1dbc      	adds	r4, r7, #6
 800e6d2:	f000 fccf 	bl	800f074 <sen5x_start_measurement>
 800e6d6:	0003      	movs	r3, r0
 800e6d8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800e6da:	1dbb      	adds	r3, r7, #6
 800e6dc:	2200      	movs	r2, #0
 800e6de:	5e9b      	ldrsh	r3, [r3, r2]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d008      	beq.n	800e6f6 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800e6e4:	1dbb      	adds	r3, r7, #6
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	5e9b      	ldrsh	r3, [r3, r2]
 800e6ea:	4a0e      	ldr	r2, [pc, #56]	@ (800e724 <sen5x_lightup_measurement+0x8c>)
 800e6ec:	490e      	ldr	r1, [pc, #56]	@ (800e728 <sen5x_lightup_measurement+0x90>)
 800e6ee:	2001      	movs	r0, #1
 800e6f0:	f005 f9ec 	bl	8013acc <CreateLine>
 800e6f4:	e007      	b.n	800e706 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800e6f6:	f7fb f8ab 	bl	8009850 <showTime>
    Info("sen5x_start_measurement executed");
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e72c <sen5x_lightup_measurement+0x94>)
 800e6fc:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <sen5x_lightup_measurement+0x84>)
 800e6fe:	0019      	movs	r1, r3
 800e700:	2002      	movs	r0, #2
 800e702:	f005 f9e3 	bl	8013acc <CreateLine>
  }
  return error;
 800e706:	1dbb      	adds	r3, r7, #6
 800e708:	2200      	movs	r2, #0
 800e70a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e70c:	0018      	movs	r0, r3
 800e70e:	46bd      	mov	sp, r7
 800e710:	b003      	add	sp, #12
 800e712:	bd90      	pop	{r4, r7, pc}
 800e714:	2000101a 	.word	0x2000101a
 800e718:	0802d0f4 	.word	0x0802d0f4
 800e71c:	0802cebc 	.word	0x0802cebc
 800e720:	0802d120 	.word	0x0802d120
 800e724:	0802d140 	.word	0x0802d140
 800e728:	0802cf28 	.word	0x0802cf28
 800e72c:	0802d170 	.word	0x0802d170

0800e730 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800e730:	b590      	push	{r4, r7, lr}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800e736:	1dbb      	adds	r3, r7, #6
 800e738:	2200      	movs	r2, #0
 800e73a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800e73c:	4b21      	ldr	r3, [pc, #132]	@ (800e7c4 <sen5x_extinguish_measurement+0x94>)
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d01e      	beq.n	800e782 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800e744:	4a20      	ldr	r2, [pc, #128]	@ (800e7c8 <sen5x_extinguish_measurement+0x98>)
 800e746:	4b21      	ldr	r3, [pc, #132]	@ (800e7cc <sen5x_extinguish_measurement+0x9c>)
 800e748:	0019      	movs	r1, r3
 800e74a:	2002      	movs	r0, #2
 800e74c:	f005 f9be 	bl	8013acc <CreateLine>
    Info("PM measurement is disabled");
 800e750:	4a1f      	ldr	r2, [pc, #124]	@ (800e7d0 <sen5x_extinguish_measurement+0xa0>)
 800e752:	4b1e      	ldr	r3, [pc, #120]	@ (800e7cc <sen5x_extinguish_measurement+0x9c>)
 800e754:	0019      	movs	r1, r3
 800e756:	2002      	movs	r0, #2
 800e758:	f005 f9b8 	bl	8013acc <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e75c:	1dbc      	adds	r4, r7, #6
 800e75e:	f000 fcb7 	bl	800f0d0 <sen5x_start_measurement_without_pm>
 800e762:	0003      	movs	r3, r0
 800e764:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e766:	1dbb      	adds	r3, r7, #6
 800e768:	2200      	movs	r2, #0
 800e76a:	5e9b      	ldrsh	r3, [r3, r2]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d022      	beq.n	800e7b6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800e770:	1dbb      	adds	r3, r7, #6
 800e772:	2200      	movs	r2, #0
 800e774:	5e9b      	ldrsh	r3, [r3, r2]
 800e776:	4a17      	ldr	r2, [pc, #92]	@ (800e7d4 <sen5x_extinguish_measurement+0xa4>)
 800e778:	4917      	ldr	r1, [pc, #92]	@ (800e7d8 <sen5x_extinguish_measurement+0xa8>)
 800e77a:	2001      	movs	r0, #1
 800e77c:	f005 f9a6 	bl	8013acc <CreateLine>
 800e780:	e019      	b.n	800e7b6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800e782:	1dbc      	adds	r4, r7, #6
 800e784:	f000 fcd2 	bl	800f12c <sen5x_stop_measurement>
 800e788:	0003      	movs	r3, r0
 800e78a:	8023      	strh	r3, [r4, #0]
    showTime();
 800e78c:	f7fb f860 	bl	8009850 <showTime>
    Info("sen5x_stop_measurement executed");
 800e790:	4a12      	ldr	r2, [pc, #72]	@ (800e7dc <sen5x_extinguish_measurement+0xac>)
 800e792:	4b0e      	ldr	r3, [pc, #56]	@ (800e7cc <sen5x_extinguish_measurement+0x9c>)
 800e794:	0019      	movs	r1, r3
 800e796:	2002      	movs	r0, #2
 800e798:	f005 f998 	bl	8013acc <CreateLine>
    if (error) {
 800e79c:	1dbb      	adds	r3, r7, #6
 800e79e:	2200      	movs	r2, #0
 800e7a0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d007      	beq.n	800e7b6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800e7a6:	1dbb      	adds	r3, r7, #6
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	5e9b      	ldrsh	r3, [r3, r2]
 800e7ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e7e0 <sen5x_extinguish_measurement+0xb0>)
 800e7ae:	490a      	ldr	r1, [pc, #40]	@ (800e7d8 <sen5x_extinguish_measurement+0xa8>)
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	f005 f98b 	bl	8013acc <CreateLine>
    }
  }
  return error;
 800e7b6:	1dbb      	adds	r3, r7, #6
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e7bc:	0018      	movs	r0, r3
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b003      	add	sp, #12
 800e7c2:	bd90      	pop	{r4, r7, pc}
 800e7c4:	2000101a 	.word	0x2000101a
 800e7c8:	0802d194 	.word	0x0802d194
 800e7cc:	0802cebc 	.word	0x0802cebc
 800e7d0:	0802d1cc 	.word	0x0802d1cc
 800e7d4:	0802d1e8 	.word	0x0802d1e8
 800e7d8:	0802cf28 	.word	0x0802cf28
 800e7dc:	0802d228 	.word	0x0802d228
 800e7e0:	0802d248 	.word	0x0802d248

0800e7e4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7e6:	b08d      	sub	sp, #52	@ 0x34
 800e7e8:	af04      	add	r7, sp, #16
 800e7ea:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800e7ec:	261e      	movs	r6, #30
 800e7ee:	19bb      	adds	r3, r7, r6
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800e7f4:	19bc      	adds	r4, r7, r6
 800e7f6:	2316      	movs	r3, #22
 800e7f8:	18fd      	adds	r5, r7, r3
 800e7fa:	2318      	movs	r3, #24
 800e7fc:	18fa      	adds	r2, r7, r3
 800e7fe:	231a      	movs	r3, #26
 800e800:	18f9      	adds	r1, r7, r3
 800e802:	231c      	movs	r3, #28
 800e804:	18f8      	adds	r0, r7, r3
 800e806:	230e      	movs	r3, #14
 800e808:	18fb      	adds	r3, r7, r3
 800e80a:	9303      	str	r3, [sp, #12]
 800e80c:	2310      	movs	r3, #16
 800e80e:	18fb      	adds	r3, r7, r3
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	2312      	movs	r3, #18
 800e814:	18fb      	adds	r3, r7, r3
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	2314      	movs	r3, #20
 800e81a:	18fb      	adds	r3, r7, r3
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	002b      	movs	r3, r5
 800e820:	f000 fd06 	bl	800f230 <sen5x_read_measured_values>
 800e824:	0003      	movs	r3, r0
 800e826:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800e828:	19bb      	adds	r3, r7, r6
 800e82a:	2200      	movs	r2, #0
 800e82c:	5e9b      	ldrsh	r3, [r3, r2]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <sen5x_read_measurement+0x56>
    return error;
 800e832:	19bb      	adds	r3, r7, r6
 800e834:	2200      	movs	r2, #0
 800e836:	5e9b      	ldrsh	r3, [r3, r2]
 800e838:	e02c      	b.n	800e894 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800e83a:	231c      	movs	r3, #28
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	881a      	ldrh	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800e844:	231a      	movs	r3, #26
 800e846:	18fb      	adds	r3, r7, r3
 800e848:	881a      	ldrh	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800e84e:	2318      	movs	r3, #24
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	881a      	ldrh	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800e858:	2316      	movs	r3, #22
 800e85a:	18fb      	adds	r3, r7, r3
 800e85c:	881a      	ldrh	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800e862:	2314      	movs	r3, #20
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	2200      	movs	r2, #0
 800e868:	5e9a      	ldrsh	r2, [r3, r2]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800e86e:	2312      	movs	r3, #18
 800e870:	18fb      	adds	r3, r7, r3
 800e872:	2200      	movs	r2, #0
 800e874:	5e9a      	ldrsh	r2, [r3, r2]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800e87a:	2310      	movs	r3, #16
 800e87c:	18fb      	adds	r3, r7, r3
 800e87e:	2200      	movs	r2, #0
 800e880:	5e9a      	ldrsh	r2, [r3, r2]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800e886:	230e      	movs	r3, #14
 800e888:	18fb      	adds	r3, r7, r3
 800e88a:	2200      	movs	r2, #0
 800e88c:	5e9a      	ldrsh	r2, [r3, r2]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	81da      	strh	r2, [r3, #14]
  return 0;
 800e892:	2300      	movs	r3, #0
}
 800e894:	0018      	movs	r0, r3
 800e896:	46bd      	mov	sp, r7
 800e898:	b009      	add	sp, #36	@ 0x24
 800e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e89c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e8a0:	4b63      	ldr	r3, [pc, #396]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	4a63      	ldr	r2, [pc, #396]	@ (800ea34 <sen5x_printvalues+0x198>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d013      	beq.n	800e8d2 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800e8aa:	4b61      	ldr	r3, [pc, #388]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	f7f2 ffba 	bl	8001828 <__aeabi_i2f>
 800e8b4:	1c03      	adds	r3, r0, #0
 800e8b6:	4960      	ldr	r1, [pc, #384]	@ (800ea38 <sen5x_printvalues+0x19c>)
 800e8b8:	1c18      	adds	r0, r3, #0
 800e8ba:	f7f2 f9f3 	bl	8000ca4 <__aeabi_fdiv>
 800e8be:	1c03      	adds	r3, r0, #0
 800e8c0:	1c18      	adds	r0, r3, #0
 800e8c2:	f7f4 ffe7 	bl	8003894 <__aeabi_f2d>
 800e8c6:	0002      	movs	r2, r0
 800e8c8:	000b      	movs	r3, r1
 800e8ca:	495c      	ldr	r1, [pc, #368]	@ (800ea3c <sen5x_printvalues+0x1a0>)
 800e8cc:	0008      	movs	r0, r1
 800e8ce:	f017 fa17 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e8d2:	4b57      	ldr	r3, [pc, #348]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e8d4:	885b      	ldrh	r3, [r3, #2]
 800e8d6:	4a57      	ldr	r2, [pc, #348]	@ (800ea34 <sen5x_printvalues+0x198>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d013      	beq.n	800e904 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e8dc:	4b54      	ldr	r3, [pc, #336]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e8de:	885b      	ldrh	r3, [r3, #2]
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	f7f2 ffa1 	bl	8001828 <__aeabi_i2f>
 800e8e6:	1c03      	adds	r3, r0, #0
 800e8e8:	4953      	ldr	r1, [pc, #332]	@ (800ea38 <sen5x_printvalues+0x19c>)
 800e8ea:	1c18      	adds	r0, r3, #0
 800e8ec:	f7f2 f9da 	bl	8000ca4 <__aeabi_fdiv>
 800e8f0:	1c03      	adds	r3, r0, #0
 800e8f2:	1c18      	adds	r0, r3, #0
 800e8f4:	f7f4 ffce 	bl	8003894 <__aeabi_f2d>
 800e8f8:	0002      	movs	r2, r0
 800e8fa:	000b      	movs	r3, r1
 800e8fc:	4950      	ldr	r1, [pc, #320]	@ (800ea40 <sen5x_printvalues+0x1a4>)
 800e8fe:	0008      	movs	r0, r1
 800e900:	f017 f9fe 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e904:	4b4a      	ldr	r3, [pc, #296]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e906:	889b      	ldrh	r3, [r3, #4]
 800e908:	4a4a      	ldr	r2, [pc, #296]	@ (800ea34 <sen5x_printvalues+0x198>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d013      	beq.n	800e936 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e90e:	4b48      	ldr	r3, [pc, #288]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e910:	889b      	ldrh	r3, [r3, #4]
 800e912:	0018      	movs	r0, r3
 800e914:	f7f2 ff88 	bl	8001828 <__aeabi_i2f>
 800e918:	1c03      	adds	r3, r0, #0
 800e91a:	4947      	ldr	r1, [pc, #284]	@ (800ea38 <sen5x_printvalues+0x19c>)
 800e91c:	1c18      	adds	r0, r3, #0
 800e91e:	f7f2 f9c1 	bl	8000ca4 <__aeabi_fdiv>
 800e922:	1c03      	adds	r3, r0, #0
 800e924:	1c18      	adds	r0, r3, #0
 800e926:	f7f4 ffb5 	bl	8003894 <__aeabi_f2d>
 800e92a:	0002      	movs	r2, r0
 800e92c:	000b      	movs	r3, r1
 800e92e:	4945      	ldr	r1, [pc, #276]	@ (800ea44 <sen5x_printvalues+0x1a8>)
 800e930:	0008      	movs	r0, r1
 800e932:	f017 f9e5 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e936:	4b3e      	ldr	r3, [pc, #248]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e938:	88db      	ldrh	r3, [r3, #6]
 800e93a:	4a3e      	ldr	r2, [pc, #248]	@ (800ea34 <sen5x_printvalues+0x198>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d013      	beq.n	800e968 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e940:	4b3b      	ldr	r3, [pc, #236]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e942:	88db      	ldrh	r3, [r3, #6]
 800e944:	0018      	movs	r0, r3
 800e946:	f7f2 ff6f 	bl	8001828 <__aeabi_i2f>
 800e94a:	1c03      	adds	r3, r0, #0
 800e94c:	493a      	ldr	r1, [pc, #232]	@ (800ea38 <sen5x_printvalues+0x19c>)
 800e94e:	1c18      	adds	r0, r3, #0
 800e950:	f7f2 f9a8 	bl	8000ca4 <__aeabi_fdiv>
 800e954:	1c03      	adds	r3, r0, #0
 800e956:	1c18      	adds	r0, r3, #0
 800e958:	f7f4 ff9c 	bl	8003894 <__aeabi_f2d>
 800e95c:	0002      	movs	r2, r0
 800e95e:	000b      	movs	r3, r1
 800e960:	4939      	ldr	r1, [pc, #228]	@ (800ea48 <sen5x_printvalues+0x1ac>)
 800e962:	0008      	movs	r0, r1
 800e964:	f017 f9cc 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e968:	4b31      	ldr	r3, [pc, #196]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e96a:	2208      	movs	r2, #8
 800e96c:	5e9b      	ldrsh	r3, [r3, r2]
 800e96e:	4a37      	ldr	r2, [pc, #220]	@ (800ea4c <sen5x_printvalues+0x1b0>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d014      	beq.n	800e99e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e974:	4b2e      	ldr	r3, [pc, #184]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e976:	2208      	movs	r2, #8
 800e978:	5e9b      	ldrsh	r3, [r3, r2]
 800e97a:	0018      	movs	r0, r3
 800e97c:	f7f2 ff54 	bl	8001828 <__aeabi_i2f>
 800e980:	1c03      	adds	r3, r0, #0
 800e982:	4933      	ldr	r1, [pc, #204]	@ (800ea50 <sen5x_printvalues+0x1b4>)
 800e984:	1c18      	adds	r0, r3, #0
 800e986:	f7f2 f98d 	bl	8000ca4 <__aeabi_fdiv>
 800e98a:	1c03      	adds	r3, r0, #0
 800e98c:	1c18      	adds	r0, r3, #0
 800e98e:	f7f4 ff81 	bl	8003894 <__aeabi_f2d>
 800e992:	0002      	movs	r2, r0
 800e994:	000b      	movs	r3, r1
 800e996:	492f      	ldr	r1, [pc, #188]	@ (800ea54 <sen5x_printvalues+0x1b8>)
 800e998:	0008      	movs	r0, r1
 800e99a:	f017 f9b1 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e99e:	4b24      	ldr	r3, [pc, #144]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9a4:	4a29      	ldr	r2, [pc, #164]	@ (800ea4c <sen5x_printvalues+0x1b0>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d014      	beq.n	800e9d4 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e9aa:	4b21      	ldr	r3, [pc, #132]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e9ac:	220a      	movs	r2, #10
 800e9ae:	5e9b      	ldrsh	r3, [r3, r2]
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f7f2 ff39 	bl	8001828 <__aeabi_i2f>
 800e9b6:	1c03      	adds	r3, r0, #0
 800e9b8:	4927      	ldr	r1, [pc, #156]	@ (800ea58 <sen5x_printvalues+0x1bc>)
 800e9ba:	1c18      	adds	r0, r3, #0
 800e9bc:	f7f2 f972 	bl	8000ca4 <__aeabi_fdiv>
 800e9c0:	1c03      	adds	r3, r0, #0
 800e9c2:	1c18      	adds	r0, r3, #0
 800e9c4:	f7f4 ff66 	bl	8003894 <__aeabi_f2d>
 800e9c8:	0002      	movs	r2, r0
 800e9ca:	000b      	movs	r3, r1
 800e9cc:	4923      	ldr	r1, [pc, #140]	@ (800ea5c <sen5x_printvalues+0x1c0>)
 800e9ce:	0008      	movs	r0, r1
 800e9d0:	f017 f996 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e9d4:	4b16      	ldr	r3, [pc, #88]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e9d6:	220c      	movs	r2, #12
 800e9d8:	5e9b      	ldrsh	r3, [r3, r2]
 800e9da:	4a1c      	ldr	r2, [pc, #112]	@ (800ea4c <sen5x_printvalues+0x1b0>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00e      	beq.n	800e9fe <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e9e0:	4b13      	ldr	r3, [pc, #76]	@ (800ea30 <sen5x_printvalues+0x194>)
 800e9e2:	220c      	movs	r2, #12
 800e9e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e9e6:	210a      	movs	r1, #10
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f7f1 fc65 	bl	80002b8 <__divsi3>
 800e9ee:	0003      	movs	r3, r0
 800e9f0:	b21b      	sxth	r3, r3
 800e9f2:	001a      	movs	r2, r3
 800e9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea60 <sen5x_printvalues+0x1c4>)
 800e9f6:	0011      	movs	r1, r2
 800e9f8:	0018      	movs	r0, r3
 800e9fa:	f017 f981 	bl	8025d00 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ea30 <sen5x_printvalues+0x194>)
 800ea00:	220e      	movs	r2, #14
 800ea02:	5e9b      	ldrsh	r3, [r3, r2]
 800ea04:	4a11      	ldr	r2, [pc, #68]	@ (800ea4c <sen5x_printvalues+0x1b0>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d00e      	beq.n	800ea28 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800ea0a:	4b09      	ldr	r3, [pc, #36]	@ (800ea30 <sen5x_printvalues+0x194>)
 800ea0c:	220e      	movs	r2, #14
 800ea0e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea10:	210a      	movs	r1, #10
 800ea12:	0018      	movs	r0, r3
 800ea14:	f7f1 fc50 	bl	80002b8 <__divsi3>
 800ea18:	0003      	movs	r3, r0
 800ea1a:	b21b      	sxth	r3, r3
 800ea1c:	001a      	movs	r2, r3
 800ea1e:	4b11      	ldr	r3, [pc, #68]	@ (800ea64 <sen5x_printvalues+0x1c8>)
 800ea20:	0011      	movs	r1, r2
 800ea22:	0018      	movs	r0, r3
 800ea24:	f017 f96c 	bl	8025d00 <iprintf>
  }
}
 800ea28:	46c0      	nop			@ (mov r8, r8)
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	2000102c 	.word	0x2000102c
 800ea34:	0000ffff 	.word	0x0000ffff
 800ea38:	41200000 	.word	0x41200000
 800ea3c:	0802d278 	.word	0x0802d278
 800ea40:	0802d2a4 	.word	0x0802d2a4
 800ea44:	0802d2d0 	.word	0x0802d2d0
 800ea48:	0802d2fc 	.word	0x0802d2fc
 800ea4c:	00007fff 	.word	0x00007fff
 800ea50:	42c80000 	.word	0x42c80000
 800ea54:	0802d328 	.word	0x0802d328
 800ea58:	43480000 	.word	0x43480000
 800ea5c:	0802d34c 	.word	0x0802d34c
 800ea60:	0802d374 	.word	0x0802d374
 800ea64:	0802d38c 	.word	0x0802d38c

0800ea68 <sen5xStore>:

void sen5xStore() {
 800ea68:	b5b0      	push	{r4, r5, r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ea6c:	4b41      	ldr	r3, [pc, #260]	@ (800eb74 <sen5xStore+0x10c>)
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	4a41      	ldr	r2, [pc, #260]	@ (800eb78 <sen5xStore+0x110>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d004      	beq.n	800ea80 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800ea76:	4b3f      	ldr	r3, [pc, #252]	@ (800eb74 <sen5xStore+0x10c>)
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	0018      	movs	r0, r3
 800ea7c:	f7f6 f88c 	bl	8004b98 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ea80:	4b3c      	ldr	r3, [pc, #240]	@ (800eb74 <sen5xStore+0x10c>)
 800ea82:	885b      	ldrh	r3, [r3, #2]
 800ea84:	4a3c      	ldr	r2, [pc, #240]	@ (800eb78 <sen5xStore+0x110>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d004      	beq.n	800ea94 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800ea8a:	4b3a      	ldr	r3, [pc, #232]	@ (800eb74 <sen5xStore+0x10c>)
 800ea8c:	885b      	ldrh	r3, [r3, #2]
 800ea8e:	0018      	movs	r0, r3
 800ea90:	f7f6 f8ae 	bl	8004bf0 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ea94:	4b37      	ldr	r3, [pc, #220]	@ (800eb74 <sen5xStore+0x10c>)
 800ea96:	889b      	ldrh	r3, [r3, #4]
 800ea98:	4a37      	ldr	r2, [pc, #220]	@ (800eb78 <sen5xStore+0x110>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d004      	beq.n	800eaa8 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800ea9e:	4b35      	ldr	r3, [pc, #212]	@ (800eb74 <sen5xStore+0x10c>)
 800eaa0:	889b      	ldrh	r3, [r3, #4]
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f7f6 f8d0 	bl	8004c48 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800eaa8:	4b32      	ldr	r3, [pc, #200]	@ (800eb74 <sen5xStore+0x10c>)
 800eaaa:	88db      	ldrh	r3, [r3, #6]
 800eaac:	4a32      	ldr	r2, [pc, #200]	@ (800eb78 <sen5xStore+0x110>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d004      	beq.n	800eabc <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800eab2:	4b30      	ldr	r3, [pc, #192]	@ (800eb74 <sen5xStore+0x10c>)
 800eab4:	88db      	ldrh	r3, [r3, #6]
 800eab6:	0018      	movs	r0, r3
 800eab8:	f7f6 f8f2 	bl	8004ca0 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800eabc:	4b2f      	ldr	r3, [pc, #188]	@ (800eb7c <sen5xStore+0x114>)
 800eabe:	791b      	ldrb	r3, [r3, #4]
 800eac0:	2b34      	cmp	r3, #52	@ 0x34
 800eac2:	d003      	beq.n	800eacc <sen5xStore+0x64>
 800eac4:	4b2d      	ldr	r3, [pc, #180]	@ (800eb7c <sen5xStore+0x114>)
 800eac6:	791b      	ldrb	r3, [r3, #4]
 800eac8:	2b35      	cmp	r3, #53	@ 0x35
 800eaca:	d14f      	bne.n	800eb6c <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800eacc:	4b29      	ldr	r3, [pc, #164]	@ (800eb74 <sen5xStore+0x10c>)
 800eace:	220a      	movs	r2, #10
 800ead0:	5e9b      	ldrsh	r3, [r3, r2]
 800ead2:	0018      	movs	r0, r3
 800ead4:	f7f2 fea8 	bl	8001828 <__aeabi_i2f>
 800ead8:	1c04      	adds	r4, r0, #0
 800eada:	4b26      	ldr	r3, [pc, #152]	@ (800eb74 <sen5xStore+0x10c>)
 800eadc:	2208      	movs	r2, #8
 800eade:	5e9b      	ldrsh	r3, [r3, r2]
 800eae0:	0018      	movs	r0, r3
 800eae2:	f7f2 fea1 	bl	8001828 <__aeabi_i2f>
 800eae6:	1c03      	adds	r3, r0, #0
 800eae8:	1c19      	adds	r1, r3, #0
 800eaea:	1c20      	adds	r0, r4, #0
 800eaec:	f7f6 f922 	bl	8004d34 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800eaf0:	4b23      	ldr	r3, [pc, #140]	@ (800eb80 <sen5xStore+0x118>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4053      	eors	r3, r2
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d103      	bne.n	800eb06 <sen5xStore+0x9e>
 800eafe:	4b21      	ldr	r3, [pc, #132]	@ (800eb84 <sen5xStore+0x11c>)
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d032      	beq.n	800eb6c <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800eb06:	4b1b      	ldr	r3, [pc, #108]	@ (800eb74 <sen5xStore+0x10c>)
 800eb08:	220c      	movs	r2, #12
 800eb0a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb0c:	4a1e      	ldr	r2, [pc, #120]	@ (800eb88 <sen5xStore+0x120>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d019      	beq.n	800eb46 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800eb12:	4b18      	ldr	r3, [pc, #96]	@ (800eb74 <sen5xStore+0x10c>)
 800eb14:	220c      	movs	r2, #12
 800eb16:	5e9b      	ldrsh	r3, [r3, r2]
 800eb18:	210a      	movs	r1, #10
 800eb1a:	0018      	movs	r0, r3
 800eb1c:	f7f1 fbcc 	bl	80002b8 <__divsi3>
 800eb20:	0003      	movs	r3, r0
 800eb22:	b21b      	sxth	r3, r3
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	0018      	movs	r0, r3
 800eb28:	f003 ff42 	bl	80129b0 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800eb2c:	4b11      	ldr	r3, [pc, #68]	@ (800eb74 <sen5xStore+0x10c>)
 800eb2e:	220c      	movs	r2, #12
 800eb30:	5e9b      	ldrsh	r3, [r3, r2]
 800eb32:	210a      	movs	r1, #10
 800eb34:	0018      	movs	r0, r3
 800eb36:	f7f1 fbbf 	bl	80002b8 <__divsi3>
 800eb3a:	0003      	movs	r3, r0
 800eb3c:	b21b      	sxth	r3, r3
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	0018      	movs	r0, r3
 800eb42:	f7f5 ffa1 	bl	8004a88 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800eb46:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <sen5xStore+0x10c>)
 800eb48:	220e      	movs	r2, #14
 800eb4a:	5e9b      	ldrsh	r3, [r3, r2]
 800eb4c:	4a0e      	ldr	r2, [pc, #56]	@ (800eb88 <sen5xStore+0x120>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d00c      	beq.n	800eb6c <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800eb52:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <sen5xStore+0x10c>)
 800eb54:	220e      	movs	r2, #14
 800eb56:	5e9b      	ldrsh	r3, [r3, r2]
 800eb58:	210a      	movs	r1, #10
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	f7f1 fbac 	bl	80002b8 <__divsi3>
 800eb60:	0003      	movs	r3, r0
 800eb62:	b21b      	sxth	r3, r3
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	0018      	movs	r0, r3
 800eb68:	f7f6 f8c6 	bl	8004cf8 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800eb6c:	46c0      	nop			@ (mov r8, r8)
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bdb0      	pop	{r4, r5, r7, pc}
 800eb72:	46c0      	nop			@ (mov r8, r8)
 800eb74:	2000102c 	.word	0x2000102c
 800eb78:	0000ffff 	.word	0x0000ffff
 800eb7c:	2000101c 	.word	0x2000101c
 800eb80:	2000101a 	.word	0x2000101a
 800eb84:	20001fa9 	.word	0x20001fa9
 800eb88:	00007fff 	.word	0x00007fff

0800eb8c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	6039      	str	r1, [r7, #0]
 800eb94:	0011      	movs	r1, r2
 800eb96:	1dfb      	adds	r3, r7, #7
 800eb98:	1c02      	adds	r2, r0, #0
 800eb9a:	701a      	strb	r2, [r3, #0]
 800eb9c:	1d3b      	adds	r3, r7, #4
 800eb9e:	1c0a      	adds	r2, r1, #0
 800eba0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800eba2:	1dfb      	adds	r3, r7, #7
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	18db      	adds	r3, r3, r3
 800ebaa:	b299      	uxth	r1, r3
 800ebac:	1d3b      	adds	r3, r7, #4
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	4805      	ldr	r0, [pc, #20]	@ (800ebc8 <sensirion_i2c_hal_read+0x3c>)
 800ebb4:	2464      	movs	r4, #100	@ 0x64
 800ebb6:	9400      	str	r4, [sp, #0]
 800ebb8:	f007 f930 	bl	8015e1c <HAL_I2C_Master_Receive>
 800ebbc:	0003      	movs	r3, r0
 800ebbe:	b25b      	sxtb	r3, r3
}
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bd90      	pop	{r4, r7, pc}
 800ebc8:	20000dec 	.word	0x20000dec

0800ebcc <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af02      	add	r7, sp, #8
 800ebd2:	6039      	str	r1, [r7, #0]
 800ebd4:	0011      	movs	r1, r2
 800ebd6:	1dfb      	adds	r3, r7, #7
 800ebd8:	1c02      	adds	r2, r0, #0
 800ebda:	701a      	strb	r2, [r3, #0]
 800ebdc:	1d3b      	adds	r3, r7, #4
 800ebde:	1c0a      	adds	r2, r1, #0
 800ebe0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800ebe2:	1dfb      	adds	r3, r7, #7
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	18db      	adds	r3, r3, r3
 800ebea:	b299      	uxth	r1, r3
 800ebec:	1d3b      	adds	r3, r7, #4
 800ebee:	881b      	ldrh	r3, [r3, #0]
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	4805      	ldr	r0, [pc, #20]	@ (800ec08 <sensirion_i2c_hal_write+0x3c>)
 800ebf4:	2464      	movs	r4, #100	@ 0x64
 800ebf6:	9400      	str	r4, [sp, #0]
 800ebf8:	f007 f808 	bl	8015c0c <HAL_I2C_Master_Transmit>
 800ebfc:	0003      	movs	r3, r0
 800ebfe:	b25b      	sxtb	r3, r3
}
 800ec00:	0018      	movs	r0, r3
 800ec02:	46bd      	mov	sp, r7
 800ec04:	b003      	add	sp, #12
 800ec06:	bd90      	pop	{r4, r7, pc}
 800ec08:	20000dec 	.word	0x20000dec

0800ec0c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	22fa      	movs	r2, #250	@ 0xfa
 800ec18:	0091      	lsls	r1, r2, #2
 800ec1a:	0018      	movs	r0, r3
 800ec1c:	f7f1 fac2 	bl	80001a4 <__udivsi3>
 800ec20:	0003      	movs	r3, r0
 800ec22:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	22fa      	movs	r2, #250	@ 0xfa
 800ec28:	0091      	lsls	r1, r2, #2
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f7f1 fb40 	bl	80002b0 <__aeabi_uidivmod>
 800ec30:	1e0b      	subs	r3, r1, #0
 800ec32:	d002      	beq.n	800ec3a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	3301      	adds	r3, #1
 800ec38:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	f005 fc8f 	bl	8014560 <HAL_Delay>
}
 800ec42:	46c0      	nop			@ (mov r8, r8)
 800ec44:	46bd      	mov	sp, r7
 800ec46:	b004      	add	sp, #16
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800ec52:	1d3b      	adds	r3, r7, #4
 800ec54:	0018      	movs	r0, r3
 800ec56:	f000 fd2b 	bl	800f6b0 <sen5x_read_device_status>
 800ec5a:	0003      	movs	r3, r0
 800ec5c:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a2c      	ldr	r2, [pc, #176]	@ (800ed14 <sen5x_check_for_errors+0xc8>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d107      	bne.n	800ec76 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800ec66:	4a2c      	ldr	r2, [pc, #176]	@ (800ed18 <sen5x_check_for_errors+0xcc>)
 800ec68:	4b2c      	ldr	r3, [pc, #176]	@ (800ed1c <sen5x_check_for_errors+0xd0>)
 800ec6a:	0019      	movs	r1, r3
 800ec6c:	2001      	movs	r0, #1
 800ec6e:	f004 ff2d 	bl	8013acc <CreateLine>
    return true;
 800ec72:	2301      	movs	r3, #1
 800ec74:	e049      	b.n	800ed0a <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <sen5x_check_for_errors+0x34>
    return false;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e044      	b.n	800ed0a <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	2380      	movs	r3, #128	@ 0x80
 800ec84:	039b      	lsls	r3, r3, #14
 800ec86:	4013      	ands	r3, r2
 800ec88:	d005      	beq.n	800ec96 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800ec8a:	4a25      	ldr	r2, [pc, #148]	@ (800ed20 <sen5x_check_for_errors+0xd4>)
 800ec8c:	4b25      	ldr	r3, [pc, #148]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800ec8e:	0019      	movs	r1, r3
 800ec90:	2003      	movs	r0, #3
 800ec92:	f004 ff1b 	bl	8013acc <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	2380      	movs	r3, #128	@ 0x80
 800ec9a:	031b      	lsls	r3, r3, #12
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	d005      	beq.n	800ecac <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800eca0:	4a21      	ldr	r2, [pc, #132]	@ (800ed28 <sen5x_check_for_errors+0xdc>)
 800eca2:	4b20      	ldr	r3, [pc, #128]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800eca4:	0019      	movs	r1, r3
 800eca6:	2003      	movs	r0, #3
 800eca8:	f004 ff10 	bl	8013acc <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2280      	movs	r2, #128	@ 0x80
 800ecb0:	4013      	ands	r3, r2
 800ecb2:	d005      	beq.n	800ecc0 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800ecb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ed2c <sen5x_check_for_errors+0xe0>)
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800ecb8:	0019      	movs	r1, r3
 800ecba:	2003      	movs	r0, #3
 800ecbc:	f004 ff06 	bl	8013acc <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2240      	movs	r2, #64	@ 0x40
 800ecc4:	4013      	ands	r3, r2
 800ecc6:	d005      	beq.n	800ecd4 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800ecc8:	4a19      	ldr	r2, [pc, #100]	@ (800ed30 <sen5x_check_for_errors+0xe4>)
 800ecca:	4b16      	ldr	r3, [pc, #88]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800eccc:	0019      	movs	r1, r3
 800ecce:	2003      	movs	r0, #3
 800ecd0:	f004 fefc 	bl	8013acc <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	4013      	ands	r3, r2
 800ecda:	d005      	beq.n	800ece8 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800ecdc:	4a15      	ldr	r2, [pc, #84]	@ (800ed34 <sen5x_check_for_errors+0xe8>)
 800ecde:	4b11      	ldr	r3, [pc, #68]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800ece0:	0019      	movs	r1, r3
 800ece2:	2003      	movs	r0, #3
 800ece4:	f004 fef2 	bl	8013acc <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2210      	movs	r2, #16
 800ecec:	4013      	ands	r3, r2
 800ecee:	d005      	beq.n	800ecfc <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800ecf0:	4a11      	ldr	r2, [pc, #68]	@ (800ed38 <sen5x_check_for_errors+0xec>)
 800ecf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800ecf4:	0019      	movs	r1, r3
 800ecf6:	2003      	movs	r0, #3
 800ecf8:	f004 fee8 	bl	8013acc <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a0f      	ldr	r2, [pc, #60]	@ (800ed3c <sen5x_check_for_errors+0xf0>)
 800ed00:	4908      	ldr	r1, [pc, #32]	@ (800ed24 <sen5x_check_for_errors+0xd8>)
 800ed02:	2003      	movs	r0, #3
 800ed04:	f004 fee2 	bl	8013acc <CreateLine>
  return true;
 800ed08:	2301      	movs	r3, #1
}
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	b002      	add	sp, #8
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	0000d206 	.word	0x0000d206
 800ed18:	0802d3a4 	.word	0x0802d3a4
 800ed1c:	0802cf28 	.word	0x0802cf28
 800ed20:	0802d3e4 	.word	0x0802d3e4
 800ed24:	0802cefc 	.word	0x0802cefc
 800ed28:	0802d404 	.word	0x0802d404
 800ed2c:	0802d420 	.word	0x0802d420
 800ed30:	0802d444 	.word	0x0802d444
 800ed34:	0802d464 	.word	0x0802d464
 800ed38:	0802d478 	.word	0x0802d478
 800ed3c:	0802d4b4 	.word	0x0802d4b4

0800ed40 <set_light_on_state>:

void set_light_on_state(void) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800ed44:	4b15      	ldr	r3, [pc, #84]	@ (800ed9c <set_light_on_state+0x5c>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	4053      	eors	r3, r2
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d008      	beq.n	800ed64 <set_light_on_state+0x24>
    sen5x_Power_On();
 800ed52:	f7ff fb11 	bl	800e378 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800ed56:	4a12      	ldr	r2, [pc, #72]	@ (800eda0 <set_light_on_state+0x60>)
 800ed58:	4b12      	ldr	r3, [pc, #72]	@ (800eda4 <set_light_on_state+0x64>)
 800ed5a:	0019      	movs	r1, r3
 800ed5c:	2003      	movs	r0, #3
 800ed5e:	f004 feb5 	bl	8013acc <CreateLine>
 800ed62:	e00a      	b.n	800ed7a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800ed64:	f005 fbf2 	bl	801454c <HAL_GetTick>
 800ed68:	0002      	movs	r2, r0
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eda8 <set_light_on_state+0x68>)
 800ed6c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800ed6e:	4a0f      	ldr	r2, [pc, #60]	@ (800edac <set_light_on_state+0x6c>)
 800ed70:	4b0c      	ldr	r3, [pc, #48]	@ (800eda4 <set_light_on_state+0x64>)
 800ed72:	0019      	movs	r1, r3
 800ed74:	2003      	movs	r0, #3
 800ed76:	f004 fea9 	bl	8013acc <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800ed7a:	f7ff fc8d 	bl	800e698 <sen5x_lightup_measurement>
 800ed7e:	1e03      	subs	r3, r0, #0
 800ed80:	d005      	beq.n	800ed8e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800ed82:	4a0b      	ldr	r2, [pc, #44]	@ (800edb0 <set_light_on_state+0x70>)
 800ed84:	4b0b      	ldr	r3, [pc, #44]	@ (800edb4 <set_light_on_state+0x74>)
 800ed86:	0019      	movs	r1, r3
 800ed88:	2001      	movs	r0, #1
 800ed8a:	f004 fe9f 	bl	8013acc <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800ed8e:	4b0a      	ldr	r3, [pc, #40]	@ (800edb8 <set_light_on_state+0x78>)
 800ed90:	2203      	movs	r2, #3
 800ed92:	701a      	strb	r2, [r3, #0]
}
 800ed94:	46c0      	nop			@ (mov r8, r8)
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	46c0      	nop			@ (mov r8, r8)
 800ed9c:	20001019 	.word	0x20001019
 800eda0:	0802d4e4 	.word	0x0802d4e4
 800eda4:	0802cefc 	.word	0x0802cefc
 800eda8:	20001028 	.word	0x20001028
 800edac:	0802d504 	.word	0x0802d504
 800edb0:	0802d51c 	.word	0x0802d51c
 800edb4:	0802cf28 	.word	0x0802cf28
 800edb8:	200000aa 	.word	0x200000aa

0800edbc <sen5x_statemachine>:

void sen5x_statemachine() {
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800edc2:	1dfb      	adds	r3, r7, #7
 800edc4:	2200      	movs	r2, #0
 800edc6:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800edc8:	4b92      	ldr	r3, [pc, #584]	@ (800f014 <sen5x_statemachine+0x258>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	0018      	movs	r0, r3
 800edce:	f004 fe27 	bl	8013a20 <TimestampIsReached>
 800edd2:	1e03      	subs	r3, r0, #0
 800edd4:	d100      	bne.n	800edd8 <sen5x_statemachine+0x1c>
 800edd6:	e118      	b.n	800f00a <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800edd8:	4b8f      	ldr	r3, [pc, #572]	@ (800f018 <sen5x_statemachine+0x25c>)
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b05      	cmp	r3, #5
 800edde:	d900      	bls.n	800ede2 <sen5x_statemachine+0x26>
 800ede0:	e113      	b.n	800f00a <sen5x_statemachine+0x24e>
 800ede2:	009a      	lsls	r2, r3, #2
 800ede4:	4b8d      	ldr	r3, [pc, #564]	@ (800f01c <sen5x_statemachine+0x260>)
 800ede6:	18d3      	adds	r3, r2, r3
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800edec:	4a8c      	ldr	r2, [pc, #560]	@ (800f020 <sen5x_statemachine+0x264>)
 800edee:	4b8d      	ldr	r3, [pc, #564]	@ (800f024 <sen5x_statemachine+0x268>)
 800edf0:	0019      	movs	r1, r3
 800edf2:	2001      	movs	r0, #1
 800edf4:	f004 fe6a 	bl	8013acc <CreateLine>
      SetPMSensorStatus(false);
 800edf8:	2000      	movs	r0, #0
 800edfa:	f7fe fa19 	bl	800d230 <SetPMSensorStatus>
      DisablePMSensor();
 800edfe:	f7fe f99b 	bl	800d138 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800ee02:	f005 fba3 	bl	801454c <HAL_GetTick>
 800ee06:	0003      	movs	r3, r0
 800ee08:	4a87      	ldr	r2, [pc, #540]	@ (800f028 <sen5x_statemachine+0x26c>)
 800ee0a:	189a      	adds	r2, r3, r2
 800ee0c:	4b81      	ldr	r3, [pc, #516]	@ (800f014 <sen5x_statemachine+0x258>)
 800ee0e:	601a      	str	r2, [r3, #0]
      break;
 800ee10:	e0fb      	b.n	800f00a <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800ee12:	f005 fb9b 	bl	801454c <HAL_GetTick>
 800ee16:	0003      	movs	r3, r0
 800ee18:	4a84      	ldr	r2, [pc, #528]	@ (800f02c <sen5x_statemachine+0x270>)
 800ee1a:	189a      	adds	r2, r3, r2
 800ee1c:	4b7d      	ldr	r3, [pc, #500]	@ (800f014 <sen5x_statemachine+0x258>)
 800ee1e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800ee20:	f7ff ff8e 	bl	800ed40 <set_light_on_state>
      break;
 800ee24:	e0f1      	b.n	800f00a <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800ee26:	4b7c      	ldr	r3, [pc, #496]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ee28:	2202      	movs	r2, #2
 800ee2a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800ee2c:	4b80      	ldr	r3, [pc, #512]	@ (800f030 <sen5x_statemachine+0x274>)
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b05      	cmp	r3, #5
 800ee32:	d905      	bls.n	800ee40 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800ee34:	4b78      	ldr	r3, [pc, #480]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800ee3a:	f7ff facd 	bl	800e3d8 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800ee3e:	e0e1      	b.n	800f004 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800ee40:	f7ff ff04 	bl	800ec4c <sen5x_check_for_errors>
 800ee44:	1e03      	subs	r3, r0, #0
 800ee46:	d028      	beq.n	800ee9a <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800ee48:	f000 fc84 	bl	800f754 <sen5x_device_reset>
 800ee4c:	1e03      	subs	r3, r0, #0
 800ee4e:	d018      	beq.n	800ee82 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800ee50:	4a78      	ldr	r2, [pc, #480]	@ (800f034 <sen5x_statemachine+0x278>)
 800ee52:	4b74      	ldr	r3, [pc, #464]	@ (800f024 <sen5x_statemachine+0x268>)
 800ee54:	0019      	movs	r1, r3
 800ee56:	2001      	movs	r0, #1
 800ee58:	f004 fe38 	bl	8013acc <CreateLine>
            sen5xErrors++;
 800ee5c:	4b74      	ldr	r3, [pc, #464]	@ (800f030 <sen5x_statemachine+0x274>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	3301      	adds	r3, #1
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	4b72      	ldr	r3, [pc, #456]	@ (800f030 <sen5x_statemachine+0x274>)
 800ee66:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800ee68:	f7ff fab6 	bl	800e3d8 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800ee6c:	f005 fb6e 	bl	801454c <HAL_GetTick>
 800ee70:	0003      	movs	r3, r0
 800ee72:	4a6e      	ldr	r2, [pc, #440]	@ (800f02c <sen5x_statemachine+0x270>)
 800ee74:	189a      	adds	r2, r3, r2
 800ee76:	4b67      	ldr	r3, [pc, #412]	@ (800f014 <sen5x_statemachine+0x258>)
 800ee78:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800ee7a:	4b67      	ldr	r3, [pc, #412]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ee7c:	2205      	movs	r2, #5
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	e005      	b.n	800ee8e <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800ee82:	4a6d      	ldr	r2, [pc, #436]	@ (800f038 <sen5x_statemachine+0x27c>)
 800ee84:	4b6d      	ldr	r3, [pc, #436]	@ (800f03c <sen5x_statemachine+0x280>)
 800ee86:	0019      	movs	r1, r3
 800ee88:	2002      	movs	r0, #2
 800ee8a:	f004 fe1f 	bl	8013acc <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800ee8e:	f005 fb5d 	bl	801454c <HAL_GetTick>
 800ee92:	0002      	movs	r2, r0
 800ee94:	4b5f      	ldr	r3, [pc, #380]	@ (800f014 <sen5x_statemachine+0x258>)
 800ee96:	601a      	str	r2, [r3, #0]
      break;
 800ee98:	e0b4      	b.n	800f004 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800ee9a:	4b65      	ldr	r3, [pc, #404]	@ (800f030 <sen5x_statemachine+0x274>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d100      	bne.n	800eea4 <sen5x_statemachine+0xe8>
 800eea2:	e0af      	b.n	800f004 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800eea4:	4b62      	ldr	r3, [pc, #392]	@ (800f030 <sen5x_statemachine+0x274>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800eeaa:	4a65      	ldr	r2, [pc, #404]	@ (800f040 <sen5x_statemachine+0x284>)
 800eeac:	4b65      	ldr	r3, [pc, #404]	@ (800f044 <sen5x_statemachine+0x288>)
 800eeae:	0019      	movs	r1, r3
 800eeb0:	2003      	movs	r0, #3
 800eeb2:	f004 fe0b 	bl	8013acc <CreateLine>
      break;
 800eeb6:	e0a5      	b.n	800f004 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800eeb8:	1dfb      	adds	r3, r7, #7
 800eeba:	0018      	movs	r0, r3
 800eebc:	f000 f966 	bl	800f18c <sen5x_read_data_ready>
      if (data_ready) {
 800eec0:	1dfb      	adds	r3, r7, #7
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d038      	beq.n	800ef3a <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800eec8:	f003 fc18 	bl	80126fc <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800eecc:	4b5e      	ldr	r3, [pc, #376]	@ (800f048 <sen5x_statemachine+0x28c>)
 800eece:	0018      	movs	r0, r3
 800eed0:	f7ff fc88 	bl	800e7e4 <sen5x_read_measurement>
 800eed4:	1e03      	subs	r3, r0, #0
 800eed6:	d017      	beq.n	800ef08 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800eed8:	4a5c      	ldr	r2, [pc, #368]	@ (800f04c <sen5x_statemachine+0x290>)
 800eeda:	4b52      	ldr	r3, [pc, #328]	@ (800f024 <sen5x_statemachine+0x268>)
 800eedc:	0019      	movs	r1, r3
 800eede:	2001      	movs	r0, #1
 800eee0:	f004 fdf4 	bl	8013acc <CreateLine>
          sen5xErrors++;
 800eee4:	4b52      	ldr	r3, [pc, #328]	@ (800f030 <sen5x_statemachine+0x274>)
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	3301      	adds	r3, #1
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	4b50      	ldr	r3, [pc, #320]	@ (800f030 <sen5x_statemachine+0x274>)
 800eeee:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800eef0:	f7ff fa72 	bl	800e3d8 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800eef4:	f005 fb2a 	bl	801454c <HAL_GetTick>
 800eef8:	0003      	movs	r3, r0
 800eefa:	4a4c      	ldr	r2, [pc, #304]	@ (800f02c <sen5x_statemachine+0x270>)
 800eefc:	189a      	adds	r2, r3, r2
 800eefe:	4b45      	ldr	r3, [pc, #276]	@ (800f014 <sen5x_statemachine+0x258>)
 800ef00:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800ef02:	4b45      	ldr	r3, [pc, #276]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ef04:	2205      	movs	r2, #5
 800ef06:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800ef08:	4b51      	ldr	r3, [pc, #324]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	4b4f      	ldr	r3, [pc, #316]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef12:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800ef14:	4b4e      	ldr	r3, [pc, #312]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	2b1f      	cmp	r3, #31
 800ef1a:	d102      	bne.n	800ef22 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800ef1c:	4b4c      	ldr	r3, [pc, #304]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800ef22:	4b4b      	ldr	r3, [pc, #300]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d901      	bls.n	800ef2e <sen5x_statemachine+0x172>
          sen5xStore();
 800ef2a:	f7ff fd9d 	bl	800ea68 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800ef2e:	4b48      	ldr	r3, [pc, #288]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d101      	bne.n	800ef3a <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800ef36:	f7ff fcb1 	bl	800e89c <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800ef3a:	4b46      	ldr	r3, [pc, #280]	@ (800f054 <sen5x_statemachine+0x298>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d103      	bne.n	800ef4a <sen5x_statemachine+0x18e>
 800ef42:	4b43      	ldr	r3, [pc, #268]	@ (800f050 <sen5x_statemachine+0x294>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d95e      	bls.n	800f008 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800ef4a:	4b33      	ldr	r3, [pc, #204]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ef4c:	2204      	movs	r2, #4
 800ef4e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ef50:	e05a      	b.n	800f008 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800ef52:	4b41      	ldr	r3, [pc, #260]	@ (800f058 <sen5x_statemachine+0x29c>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d11e      	bne.n	800ef98 <sen5x_statemachine+0x1dc>
 800ef5a:	4b40      	ldr	r3, [pc, #256]	@ (800f05c <sen5x_statemachine+0x2a0>)
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d11a      	bne.n	800ef98 <sen5x_statemachine+0x1dc>
 800ef62:	4b3f      	ldr	r3, [pc, #252]	@ (800f060 <sen5x_statemachine+0x2a4>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2201      	movs	r2, #1
 800ef68:	4053      	eors	r3, r2
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d013      	beq.n	800ef98 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800ef70:	f000 f9f2 	bl	800f358 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800ef74:	4a3b      	ldr	r2, [pc, #236]	@ (800f064 <sen5x_statemachine+0x2a8>)
 800ef76:	4b31      	ldr	r3, [pc, #196]	@ (800f03c <sen5x_statemachine+0x280>)
 800ef78:	0019      	movs	r1, r3
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	f004 fda6 	bl	8013acc <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800ef80:	f005 fae4 	bl	801454c <HAL_GetTick>
 800ef84:	0003      	movs	r3, r0
 800ef86:	4a38      	ldr	r2, [pc, #224]	@ (800f068 <sen5x_statemachine+0x2ac>)
 800ef88:	189a      	adds	r2, r3, r2
 800ef8a:	4b22      	ldr	r3, [pc, #136]	@ (800f014 <sen5x_statemachine+0x258>)
 800ef8c:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800ef8e:	4b34      	ldr	r3, [pc, #208]	@ (800f060 <sen5x_statemachine+0x2a4>)
 800ef90:	2201      	movs	r2, #1
 800ef92:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800ef94:	f7ff fb80 	bl	800e698 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800ef98:	4b1f      	ldr	r3, [pc, #124]	@ (800f018 <sen5x_statemachine+0x25c>)
 800ef9a:	2205      	movs	r2, #5
 800ef9c:	701a      	strb	r2, [r3, #0]
      break;
 800ef9e:	e034      	b.n	800f00a <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800efa0:	4b2c      	ldr	r3, [pc, #176]	@ (800f054 <sen5x_statemachine+0x298>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2201      	movs	r2, #1
 800efa6:	4053      	eors	r3, r2
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01c      	beq.n	800efe8 <sen5x_statemachine+0x22c>
 800efae:	4b2f      	ldr	r3, [pc, #188]	@ (800f06c <sen5x_statemachine+0x2b0>)
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2201      	movs	r2, #1
 800efb4:	4053      	eors	r3, r2
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d015      	beq.n	800efe8 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800efbc:	f7ff fbb8 	bl	800e730 <sen5x_extinguish_measurement>
 800efc0:	1e03      	subs	r3, r0, #0
 800efc2:	d005      	beq.n	800efd0 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800efc4:	4a2a      	ldr	r2, [pc, #168]	@ (800f070 <sen5x_statemachine+0x2b4>)
 800efc6:	4b17      	ldr	r3, [pc, #92]	@ (800f024 <sen5x_statemachine+0x268>)
 800efc8:	0019      	movs	r1, r3
 800efca:	2001      	movs	r0, #1
 800efcc:	f004 fd7e 	bl	8013acc <CreateLine>
        }
        sen5xSamples = 0;
 800efd0:	4b1f      	ldr	r3, [pc, #124]	@ (800f050 <sen5x_statemachine+0x294>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800efd6:	f7ff f9ff 	bl	800e3d8 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800efda:	2000      	movs	r0, #0
 800efdc:	f7fe f928 	bl	800d230 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800efe0:	4b0d      	ldr	r3, [pc, #52]	@ (800f018 <sen5x_statemachine+0x25c>)
 800efe2:	2201      	movs	r2, #1
 800efe4:	701a      	strb	r2, [r3, #0]
 800efe6:	e002      	b.n	800efee <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800efe8:	4b0b      	ldr	r3, [pc, #44]	@ (800f018 <sen5x_statemachine+0x25c>)
 800efea:	2203      	movs	r2, #3
 800efec:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800efee:	f003 fbab 	bl	8012748 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800eff2:	f005 faab 	bl	801454c <HAL_GetTick>
 800eff6:	0003      	movs	r3, r0
 800eff8:	22fa      	movs	r2, #250	@ 0xfa
 800effa:	0092      	lsls	r2, r2, #2
 800effc:	189a      	adds	r2, r3, r2
 800effe:	4b05      	ldr	r3, [pc, #20]	@ (800f014 <sen5x_statemachine+0x258>)
 800f000:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f002:	e002      	b.n	800f00a <sen5x_statemachine+0x24e>
      break;
 800f004:	46c0      	nop			@ (mov r8, r8)
 800f006:	e000      	b.n	800f00a <sen5x_statemachine+0x24e>
      break;
 800f008:	46c0      	nop			@ (mov r8, r8)
}
 800f00a:	46c0      	nop			@ (mov r8, r8)
 800f00c:	46bd      	mov	sp, r7
 800f00e:	b002      	add	sp, #8
 800f010:	bd80      	pop	{r7, pc}
 800f012:	46c0      	nop			@ (mov r8, r8)
 800f014:	20001028 	.word	0x20001028
 800f018:	200000aa 	.word	0x200000aa
 800f01c:	0802e094 	.word	0x0802e094
 800f020:	0802d548 	.word	0x0802d548
 800f024:	0802cf28 	.word	0x0802cf28
 800f028:	002fefd8 	.word	0x002fefd8
 800f02c:	00005910 	.word	0x00005910
 800f030:	20001025 	.word	0x20001025
 800f034:	0802d578 	.word	0x0802d578
 800f038:	0802d590 	.word	0x0802d590
 800f03c:	0802cebc 	.word	0x0802cebc
 800f040:	0802d5a8 	.word	0x0802d5a8
 800f044:	0802cefc 	.word	0x0802cefc
 800f048:	2000102c 	.word	0x2000102c
 800f04c:	0802d5bc 	.word	0x0802d5bc
 800f050:	20001024 	.word	0x20001024
 800f054:	20001fa9 	.word	0x20001fa9
 800f058:	20000c96 	.word	0x20000c96
 800f05c:	20000c95 	.word	0x20000c95
 800f060:	20001018 	.word	0x20001018
 800f064:	0802d5ec 	.word	0x0802d5ec
 800f068:	00002710 	.word	0x00002710
 800f06c:	20001faa 	.word	0x20001faa
 800f070:	0802d604 	.word	0x0802d604

0800f074 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f074:	b590      	push	{r4, r7, lr}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f07a:	1dbb      	adds	r3, r7, #6
 800f07c:	2200      	movs	r2, #0
 800f07e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f080:	1dbc      	adds	r4, r7, #6
 800f082:	1dbb      	adds	r3, r7, #6
 800f084:	8819      	ldrh	r1, [r3, #0]
 800f086:	003b      	movs	r3, r7
 800f088:	2221      	movs	r2, #33	@ 0x21
 800f08a:	0018      	movs	r0, r3
 800f08c:	f001 fb57 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f090:	0003      	movs	r3, r0
 800f092:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f094:	1d3c      	adds	r4, r7, #4
 800f096:	1dbb      	adds	r3, r7, #6
 800f098:	881a      	ldrh	r2, [r3, #0]
 800f09a:	003b      	movs	r3, r7
 800f09c:	0019      	movs	r1, r3
 800f09e:	2069      	movs	r0, #105	@ 0x69
 800f0a0:	f001 fbd1 	bl	8010846 <sensirion_i2c_write_data>
 800f0a4:	0003      	movs	r3, r0
 800f0a6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f0a8:	1d3b      	adds	r3, r7, #4
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	5e9b      	ldrsh	r3, [r3, r2]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d003      	beq.n	800f0ba <sen5x_start_measurement+0x46>
        return error;
 800f0b2:	1d3b      	adds	r3, r7, #4
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	5e9b      	ldrsh	r3, [r3, r2]
 800f0b8:	e004      	b.n	800f0c4 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f0ba:	4b04      	ldr	r3, [pc, #16]	@ (800f0cc <sen5x_start_measurement+0x58>)
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f7ff fda5 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	0018      	movs	r0, r3
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	b003      	add	sp, #12
 800f0ca:	bd90      	pop	{r4, r7, pc}
 800f0cc:	0000c350 	.word	0x0000c350

0800f0d0 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f0d0:	b590      	push	{r4, r7, lr}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f0d6:	1dbb      	adds	r3, r7, #6
 800f0d8:	2200      	movs	r2, #0
 800f0da:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f0dc:	1dbc      	adds	r4, r7, #6
 800f0de:	1dbb      	adds	r3, r7, #6
 800f0e0:	8819      	ldrh	r1, [r3, #0]
 800f0e2:	003b      	movs	r3, r7
 800f0e4:	2237      	movs	r2, #55	@ 0x37
 800f0e6:	0018      	movs	r0, r3
 800f0e8:	f001 fb29 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f0ec:	0003      	movs	r3, r0
 800f0ee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f0f0:	1d3c      	adds	r4, r7, #4
 800f0f2:	1dbb      	adds	r3, r7, #6
 800f0f4:	881a      	ldrh	r2, [r3, #0]
 800f0f6:	003b      	movs	r3, r7
 800f0f8:	0019      	movs	r1, r3
 800f0fa:	2069      	movs	r0, #105	@ 0x69
 800f0fc:	f001 fba3 	bl	8010846 <sensirion_i2c_write_data>
 800f100:	0003      	movs	r3, r0
 800f102:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f104:	1d3b      	adds	r3, r7, #4
 800f106:	2200      	movs	r2, #0
 800f108:	5e9b      	ldrsh	r3, [r3, r2]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f10e:	1d3b      	adds	r3, r7, #4
 800f110:	2200      	movs	r2, #0
 800f112:	5e9b      	ldrsh	r3, [r3, r2]
 800f114:	e004      	b.n	800f120 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f116:	4b04      	ldr	r3, [pc, #16]	@ (800f128 <sen5x_start_measurement_without_pm+0x58>)
 800f118:	0018      	movs	r0, r3
 800f11a:	f7ff fd77 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	0018      	movs	r0, r3
 800f122:	46bd      	mov	sp, r7
 800f124:	b003      	add	sp, #12
 800f126:	bd90      	pop	{r4, r7, pc}
 800f128:	0000c350 	.word	0x0000c350

0800f12c <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f12c:	b590      	push	{r4, r7, lr}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f132:	1dbb      	adds	r3, r7, #6
 800f134:	2200      	movs	r2, #0
 800f136:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f138:	1dbc      	adds	r4, r7, #6
 800f13a:	2382      	movs	r3, #130	@ 0x82
 800f13c:	005a      	lsls	r2, r3, #1
 800f13e:	1dbb      	adds	r3, r7, #6
 800f140:	8819      	ldrh	r1, [r3, #0]
 800f142:	003b      	movs	r3, r7
 800f144:	0018      	movs	r0, r3
 800f146:	f001 fafa 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f14a:	0003      	movs	r3, r0
 800f14c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f14e:	1d3c      	adds	r4, r7, #4
 800f150:	1dbb      	adds	r3, r7, #6
 800f152:	881a      	ldrh	r2, [r3, #0]
 800f154:	003b      	movs	r3, r7
 800f156:	0019      	movs	r1, r3
 800f158:	2069      	movs	r0, #105	@ 0x69
 800f15a:	f001 fb74 	bl	8010846 <sensirion_i2c_write_data>
 800f15e:	0003      	movs	r3, r0
 800f160:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f162:	1d3b      	adds	r3, r7, #4
 800f164:	2200      	movs	r2, #0
 800f166:	5e9b      	ldrsh	r3, [r3, r2]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <sen5x_stop_measurement+0x48>
        return error;
 800f16c:	1d3b      	adds	r3, r7, #4
 800f16e:	2200      	movs	r2, #0
 800f170:	5e9b      	ldrsh	r3, [r3, r2]
 800f172:	e004      	b.n	800f17e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f174:	4b04      	ldr	r3, [pc, #16]	@ (800f188 <sen5x_stop_measurement+0x5c>)
 800f176:	0018      	movs	r0, r3
 800f178:	f7ff fd48 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	0018      	movs	r0, r3
 800f180:	46bd      	mov	sp, r7
 800f182:	b003      	add	sp, #12
 800f184:	bd90      	pop	{r4, r7, pc}
 800f186:	46c0      	nop			@ (mov r8, r8)
 800f188:	00030d40 	.word	0x00030d40

0800f18c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f194:	250e      	movs	r5, #14
 800f196:	197b      	adds	r3, r7, r5
 800f198:	2200      	movs	r2, #0
 800f19a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f19c:	197c      	adds	r4, r7, r5
 800f19e:	4a22      	ldr	r2, [pc, #136]	@ (800f228 <sen5x_read_data_ready+0x9c>)
 800f1a0:	197b      	adds	r3, r7, r5
 800f1a2:	8819      	ldrh	r1, [r3, #0]
 800f1a4:	2308      	movs	r3, #8
 800f1a6:	18fb      	adds	r3, r7, r3
 800f1a8:	0018      	movs	r0, r3
 800f1aa:	f001 fac8 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f1ae:	0003      	movs	r3, r0
 800f1b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f1b2:	260c      	movs	r6, #12
 800f1b4:	19bc      	adds	r4, r7, r6
 800f1b6:	197b      	adds	r3, r7, r5
 800f1b8:	881a      	ldrh	r2, [r3, #0]
 800f1ba:	2308      	movs	r3, #8
 800f1bc:	18fb      	adds	r3, r7, r3
 800f1be:	0019      	movs	r1, r3
 800f1c0:	2069      	movs	r0, #105	@ 0x69
 800f1c2:	f001 fb40 	bl	8010846 <sensirion_i2c_write_data>
 800f1c6:	0003      	movs	r3, r0
 800f1c8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f1ca:	19bb      	adds	r3, r7, r6
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	5e9b      	ldrsh	r3, [r3, r2]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d003      	beq.n	800f1dc <sen5x_read_data_ready+0x50>
        return error;
 800f1d4:	19bb      	adds	r3, r7, r6
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	5e9b      	ldrsh	r3, [r3, r2]
 800f1da:	e020      	b.n	800f21e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f1dc:	4b13      	ldr	r3, [pc, #76]	@ (800f22c <sen5x_read_data_ready+0xa0>)
 800f1de:	0018      	movs	r0, r3
 800f1e0:	f7ff fd14 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f1e4:	250c      	movs	r5, #12
 800f1e6:	197c      	adds	r4, r7, r5
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	18fb      	adds	r3, r7, r3
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	0019      	movs	r1, r3
 800f1f0:	2069      	movs	r0, #105	@ 0x69
 800f1f2:	f001 fb40 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f1f6:	0003      	movs	r3, r0
 800f1f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f1fa:	197b      	adds	r3, r7, r5
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	5e9b      	ldrsh	r3, [r3, r2]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d003      	beq.n	800f20c <sen5x_read_data_ready+0x80>
        return error;
 800f204:	197b      	adds	r3, r7, r5
 800f206:	2200      	movs	r2, #0
 800f208:	5e9b      	ldrsh	r3, [r3, r2]
 800f20a:	e008      	b.n	800f21e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f20c:	2308      	movs	r3, #8
 800f20e:	18fb      	adds	r3, r7, r3
 800f210:	785b      	ldrb	r3, [r3, #1]
 800f212:	1e5a      	subs	r2, r3, #1
 800f214:	4193      	sbcs	r3, r2
 800f216:	b2da      	uxtb	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	0018      	movs	r0, r3
 800f220:	46bd      	mov	sp, r7
 800f222:	b005      	add	sp, #20
 800f224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f226:	46c0      	nop			@ (mov r8, r8)
 800f228:	00000202 	.word	0x00000202
 800f22c:	00004e20 	.word	0x00004e20

0800f230 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f232:	b08d      	sub	sp, #52	@ 0x34
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f23e:	252e      	movs	r5, #46	@ 0x2e
 800f240:	197b      	adds	r3, r7, r5
 800f242:	2200      	movs	r2, #0
 800f244:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f246:	197c      	adds	r4, r7, r5
 800f248:	23f1      	movs	r3, #241	@ 0xf1
 800f24a:	009a      	lsls	r2, r3, #2
 800f24c:	197b      	adds	r3, r7, r5
 800f24e:	8819      	ldrh	r1, [r3, #0]
 800f250:	2314      	movs	r3, #20
 800f252:	18fb      	adds	r3, r7, r3
 800f254:	0018      	movs	r0, r3
 800f256:	f001 fa72 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f25a:	0003      	movs	r3, r0
 800f25c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f25e:	262c      	movs	r6, #44	@ 0x2c
 800f260:	19bc      	adds	r4, r7, r6
 800f262:	197b      	adds	r3, r7, r5
 800f264:	881a      	ldrh	r2, [r3, #0]
 800f266:	2314      	movs	r3, #20
 800f268:	18fb      	adds	r3, r7, r3
 800f26a:	0019      	movs	r1, r3
 800f26c:	2069      	movs	r0, #105	@ 0x69
 800f26e:	f001 faea 	bl	8010846 <sensirion_i2c_write_data>
 800f272:	0003      	movs	r3, r0
 800f274:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f276:	19bb      	adds	r3, r7, r6
 800f278:	2200      	movs	r2, #0
 800f27a:	5e9b      	ldrsh	r3, [r3, r2]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <sen5x_read_measured_values+0x58>
        return error;
 800f280:	19bb      	adds	r3, r7, r6
 800f282:	2200      	movs	r2, #0
 800f284:	5e9b      	ldrsh	r3, [r3, r2]
 800f286:	e060      	b.n	800f34a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f288:	4b32      	ldr	r3, [pc, #200]	@ (800f354 <sen5x_read_measured_values+0x124>)
 800f28a:	0018      	movs	r0, r3
 800f28c:	f7ff fcbe 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f290:	252c      	movs	r5, #44	@ 0x2c
 800f292:	197c      	adds	r4, r7, r5
 800f294:	2314      	movs	r3, #20
 800f296:	18fb      	adds	r3, r7, r3
 800f298:	2210      	movs	r2, #16
 800f29a:	0019      	movs	r1, r3
 800f29c:	2069      	movs	r0, #105	@ 0x69
 800f29e:	f001 faea 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f2a2:	0003      	movs	r3, r0
 800f2a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f2a6:	197b      	adds	r3, r7, r5
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	5e9b      	ldrsh	r3, [r3, r2]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d003      	beq.n	800f2b8 <sen5x_read_measured_values+0x88>
        return error;
 800f2b0:	197b      	adds	r3, r7, r5
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	5e9b      	ldrsh	r3, [r3, r2]
 800f2b6:	e048      	b.n	800f34a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f2b8:	2414      	movs	r4, #20
 800f2ba:	193b      	adds	r3, r7, r4
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f000 fa79 	bl	800f7b4 <sensirion_common_bytes_to_uint16_t>
 800f2c2:	0003      	movs	r3, r0
 800f2c4:	001a      	movs	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f2ca:	193b      	adds	r3, r7, r4
 800f2cc:	3302      	adds	r3, #2
 800f2ce:	0018      	movs	r0, r3
 800f2d0:	f000 fa70 	bl	800f7b4 <sensirion_common_bytes_to_uint16_t>
 800f2d4:	0003      	movs	r3, r0
 800f2d6:	001a      	movs	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f2dc:	193b      	adds	r3, r7, r4
 800f2de:	3304      	adds	r3, #4
 800f2e0:	0018      	movs	r0, r3
 800f2e2:	f000 fa67 	bl	800f7b4 <sensirion_common_bytes_to_uint16_t>
 800f2e6:	0003      	movs	r3, r0
 800f2e8:	001a      	movs	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f2ee:	193b      	adds	r3, r7, r4
 800f2f0:	3306      	adds	r3, #6
 800f2f2:	0018      	movs	r0, r3
 800f2f4:	f000 fa5e 	bl	800f7b4 <sensirion_common_bytes_to_uint16_t>
 800f2f8:	0003      	movs	r3, r0
 800f2fa:	001a      	movs	r2, r3
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f300:	193b      	adds	r3, r7, r4
 800f302:	3308      	adds	r3, #8
 800f304:	0018      	movs	r0, r3
 800f306:	f000 fa82 	bl	800f80e <sensirion_common_bytes_to_int16_t>
 800f30a:	0003      	movs	r3, r0
 800f30c:	001a      	movs	r2, r3
 800f30e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f310:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f312:	193b      	adds	r3, r7, r4
 800f314:	330a      	adds	r3, #10
 800f316:	0018      	movs	r0, r3
 800f318:	f000 fa79 	bl	800f80e <sensirion_common_bytes_to_int16_t>
 800f31c:	0003      	movs	r3, r0
 800f31e:	001a      	movs	r2, r3
 800f320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f322:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f324:	193b      	adds	r3, r7, r4
 800f326:	330c      	adds	r3, #12
 800f328:	0018      	movs	r0, r3
 800f32a:	f000 fa70 	bl	800f80e <sensirion_common_bytes_to_int16_t>
 800f32e:	0003      	movs	r3, r0
 800f330:	001a      	movs	r2, r3
 800f332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f334:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f336:	193b      	adds	r3, r7, r4
 800f338:	330e      	adds	r3, #14
 800f33a:	0018      	movs	r0, r3
 800f33c:	f000 fa67 	bl	800f80e <sensirion_common_bytes_to_int16_t>
 800f340:	0003      	movs	r3, r0
 800f342:	001a      	movs	r2, r3
 800f344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f346:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	0018      	movs	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	b00d      	add	sp, #52	@ 0x34
 800f350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f352:	46c0      	nop			@ (mov r8, r8)
 800f354:	00004e20 	.word	0x00004e20

0800f358 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f358:	b590      	push	{r4, r7, lr}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f35e:	1dbb      	adds	r3, r7, #6
 800f360:	2200      	movs	r2, #0
 800f362:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f364:	1dbc      	adds	r4, r7, #6
 800f366:	4a12      	ldr	r2, [pc, #72]	@ (800f3b0 <sen5x_start_fan_cleaning+0x58>)
 800f368:	1dbb      	adds	r3, r7, #6
 800f36a:	8819      	ldrh	r1, [r3, #0]
 800f36c:	003b      	movs	r3, r7
 800f36e:	0018      	movs	r0, r3
 800f370:	f001 f9e5 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f374:	0003      	movs	r3, r0
 800f376:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f378:	1d3c      	adds	r4, r7, #4
 800f37a:	1dbb      	adds	r3, r7, #6
 800f37c:	881a      	ldrh	r2, [r3, #0]
 800f37e:	003b      	movs	r3, r7
 800f380:	0019      	movs	r1, r3
 800f382:	2069      	movs	r0, #105	@ 0x69
 800f384:	f001 fa5f 	bl	8010846 <sensirion_i2c_write_data>
 800f388:	0003      	movs	r3, r0
 800f38a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f38c:	1d3b      	adds	r3, r7, #4
 800f38e:	2200      	movs	r2, #0
 800f390:	5e9b      	ldrsh	r3, [r3, r2]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d003      	beq.n	800f39e <sen5x_start_fan_cleaning+0x46>
        return error;
 800f396:	1d3b      	adds	r3, r7, #4
 800f398:	2200      	movs	r2, #0
 800f39a:	5e9b      	ldrsh	r3, [r3, r2]
 800f39c:	e004      	b.n	800f3a8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f39e:	4b05      	ldr	r3, [pc, #20]	@ (800f3b4 <sen5x_start_fan_cleaning+0x5c>)
 800f3a0:	0018      	movs	r0, r3
 800f3a2:	f7ff fc33 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	0018      	movs	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	b003      	add	sp, #12
 800f3ae:	bd90      	pop	{r4, r7, pc}
 800f3b0:	00005607 	.word	0x00005607
 800f3b4:	00004e20 	.word	0x00004e20

0800f3b8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ba:	b087      	sub	sp, #28
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	0004      	movs	r4, r0
 800f3c0:	0008      	movs	r0, r1
 800f3c2:	0011      	movs	r1, r2
 800f3c4:	1dbb      	adds	r3, r7, #6
 800f3c6:	1c22      	adds	r2, r4, #0
 800f3c8:	801a      	strh	r2, [r3, #0]
 800f3ca:	1d3b      	adds	r3, r7, #4
 800f3cc:	1c02      	adds	r2, r0, #0
 800f3ce:	801a      	strh	r2, [r3, #0]
 800f3d0:	1cbb      	adds	r3, r7, #2
 800f3d2:	1c0a      	adds	r2, r1, #0
 800f3d4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f3d6:	2516      	movs	r5, #22
 800f3d8:	197b      	adds	r3, r7, r5
 800f3da:	2200      	movs	r2, #0
 800f3dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f3de:	197c      	adds	r4, r7, r5
 800f3e0:	4a25      	ldr	r2, [pc, #148]	@ (800f478 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f3e2:	197b      	adds	r3, r7, r5
 800f3e4:	8819      	ldrh	r1, [r3, #0]
 800f3e6:	2608      	movs	r6, #8
 800f3e8:	19bb      	adds	r3, r7, r6
 800f3ea:	0018      	movs	r0, r3
 800f3ec:	f001 f9a7 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f3f0:	0003      	movs	r3, r0
 800f3f2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f3f4:	197c      	adds	r4, r7, r5
 800f3f6:	1dbb      	adds	r3, r7, #6
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	5e9a      	ldrsh	r2, [r3, r2]
 800f3fc:	197b      	adds	r3, r7, r5
 800f3fe:	8819      	ldrh	r1, [r3, #0]
 800f400:	19bb      	adds	r3, r7, r6
 800f402:	0018      	movs	r0, r3
 800f404:	f001 fa06 	bl	8010814 <sensirion_i2c_add_int16_t_to_buffer>
 800f408:	0003      	movs	r3, r0
 800f40a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f40c:	197c      	adds	r4, r7, r5
 800f40e:	1d3b      	adds	r3, r7, #4
 800f410:	2200      	movs	r2, #0
 800f412:	5e9a      	ldrsh	r2, [r3, r2]
 800f414:	197b      	adds	r3, r7, r5
 800f416:	8819      	ldrh	r1, [r3, #0]
 800f418:	19bb      	adds	r3, r7, r6
 800f41a:	0018      	movs	r0, r3
 800f41c:	f001 f9fa 	bl	8010814 <sensirion_i2c_add_int16_t_to_buffer>
 800f420:	0003      	movs	r3, r0
 800f422:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f424:	197c      	adds	r4, r7, r5
 800f426:	1cbb      	adds	r3, r7, #2
 800f428:	881a      	ldrh	r2, [r3, #0]
 800f42a:	197b      	adds	r3, r7, r5
 800f42c:	8819      	ldrh	r1, [r3, #0]
 800f42e:	19bb      	adds	r3, r7, r6
 800f430:	0018      	movs	r0, r3
 800f432:	f001 f9b0 	bl	8010796 <sensirion_i2c_add_uint16_t_to_buffer>
 800f436:	0003      	movs	r3, r0
 800f438:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f43a:	2214      	movs	r2, #20
 800f43c:	18bc      	adds	r4, r7, r2
 800f43e:	197b      	adds	r3, r7, r5
 800f440:	881a      	ldrh	r2, [r3, #0]
 800f442:	19bb      	adds	r3, r7, r6
 800f444:	0019      	movs	r1, r3
 800f446:	2069      	movs	r0, #105	@ 0x69
 800f448:	f001 f9fd 	bl	8010846 <sensirion_i2c_write_data>
 800f44c:	0003      	movs	r3, r0
 800f44e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f450:	2214      	movs	r2, #20
 800f452:	18bb      	adds	r3, r7, r2
 800f454:	2100      	movs	r1, #0
 800f456:	5e5b      	ldrsh	r3, [r3, r1]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d003      	beq.n	800f464 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f45c:	18bb      	adds	r3, r7, r2
 800f45e:	2200      	movs	r2, #0
 800f460:	5e9b      	ldrsh	r3, [r3, r2]
 800f462:	e004      	b.n	800f46e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f464:	4b05      	ldr	r3, [pc, #20]	@ (800f47c <sen5x_set_temperature_offset_parameters+0xc4>)
 800f466:	0018      	movs	r0, r3
 800f468:	f7ff fbd0 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	0018      	movs	r0, r3
 800f470:	46bd      	mov	sp, r7
 800f472:	b007      	add	sp, #28
 800f474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f476:	46c0      	nop			@ (mov r8, r8)
 800f478:	000060b2 	.word	0x000060b2
 800f47c:	00004e20 	.word	0x00004e20

0800f480 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800f480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f482:	b091      	sub	sp, #68	@ 0x44
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	000a      	movs	r2, r1
 800f48a:	1cfb      	adds	r3, r7, #3
 800f48c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f48e:	253e      	movs	r5, #62	@ 0x3e
 800f490:	197b      	adds	r3, r7, r5
 800f492:	2200      	movs	r2, #0
 800f494:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800f496:	197c      	adds	r4, r7, r5
 800f498:	4a22      	ldr	r2, [pc, #136]	@ (800f524 <sen5x_get_product_name+0xa4>)
 800f49a:	197b      	adds	r3, r7, r5
 800f49c:	8819      	ldrh	r1, [r3, #0]
 800f49e:	230c      	movs	r3, #12
 800f4a0:	18fb      	adds	r3, r7, r3
 800f4a2:	0018      	movs	r0, r3
 800f4a4:	f001 f94b 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f4a8:	0003      	movs	r3, r0
 800f4aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f4ac:	263c      	movs	r6, #60	@ 0x3c
 800f4ae:	19bc      	adds	r4, r7, r6
 800f4b0:	197b      	adds	r3, r7, r5
 800f4b2:	881a      	ldrh	r2, [r3, #0]
 800f4b4:	230c      	movs	r3, #12
 800f4b6:	18fb      	adds	r3, r7, r3
 800f4b8:	0019      	movs	r1, r3
 800f4ba:	2069      	movs	r0, #105	@ 0x69
 800f4bc:	f001 f9c3 	bl	8010846 <sensirion_i2c_write_data>
 800f4c0:	0003      	movs	r3, r0
 800f4c2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4c4:	19bb      	adds	r3, r7, r6
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <sen5x_get_product_name+0x56>
        return error;
 800f4ce:	19bb      	adds	r3, r7, r6
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	5e9b      	ldrsh	r3, [r3, r2]
 800f4d4:	e021      	b.n	800f51a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f4d6:	4b14      	ldr	r3, [pc, #80]	@ (800f528 <sen5x_get_product_name+0xa8>)
 800f4d8:	0018      	movs	r0, r3
 800f4da:	f7ff fb97 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f4de:	253c      	movs	r5, #60	@ 0x3c
 800f4e0:	197c      	adds	r4, r7, r5
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	18fb      	adds	r3, r7, r3
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	0019      	movs	r1, r3
 800f4ea:	2069      	movs	r0, #105	@ 0x69
 800f4ec:	f001 f9c3 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f4f0:	0003      	movs	r3, r0
 800f4f2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f4f4:	197b      	adds	r3, r7, r5
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	5e9b      	ldrsh	r3, [r3, r2]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <sen5x_get_product_name+0x86>
        return error;
 800f4fe:	197b      	adds	r3, r7, r5
 800f500:	2200      	movs	r2, #0
 800f502:	5e9b      	ldrsh	r3, [r3, r2]
 800f504:	e009      	b.n	800f51a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800f506:	1cfb      	adds	r3, r7, #3
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	230c      	movs	r3, #12
 800f510:	18fb      	adds	r3, r7, r3
 800f512:	0018      	movs	r0, r3
 800f514:	f000 f989 	bl	800f82a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f518:	2300      	movs	r3, #0
}
 800f51a:	0018      	movs	r0, r3
 800f51c:	46bd      	mov	sp, r7
 800f51e:	b011      	add	sp, #68	@ 0x44
 800f520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	0000d014 	.word	0x0000d014
 800f528:	0000c350 	.word	0x0000c350

0800f52c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f52e:	b091      	sub	sp, #68	@ 0x44
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	000a      	movs	r2, r1
 800f536:	1cfb      	adds	r3, r7, #3
 800f538:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800f53a:	253e      	movs	r5, #62	@ 0x3e
 800f53c:	197b      	adds	r3, r7, r5
 800f53e:	2200      	movs	r2, #0
 800f540:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800f542:	197c      	adds	r4, r7, r5
 800f544:	4a22      	ldr	r2, [pc, #136]	@ (800f5d0 <sen5x_get_serial_number+0xa4>)
 800f546:	197b      	adds	r3, r7, r5
 800f548:	8819      	ldrh	r1, [r3, #0]
 800f54a:	230c      	movs	r3, #12
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	0018      	movs	r0, r3
 800f550:	f001 f8f5 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f554:	0003      	movs	r3, r0
 800f556:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f558:	263c      	movs	r6, #60	@ 0x3c
 800f55a:	19bc      	adds	r4, r7, r6
 800f55c:	197b      	adds	r3, r7, r5
 800f55e:	881a      	ldrh	r2, [r3, #0]
 800f560:	230c      	movs	r3, #12
 800f562:	18fb      	adds	r3, r7, r3
 800f564:	0019      	movs	r1, r3
 800f566:	2069      	movs	r0, #105	@ 0x69
 800f568:	f001 f96d 	bl	8010846 <sensirion_i2c_write_data>
 800f56c:	0003      	movs	r3, r0
 800f56e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f570:	19bb      	adds	r3, r7, r6
 800f572:	2200      	movs	r2, #0
 800f574:	5e9b      	ldrsh	r3, [r3, r2]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d003      	beq.n	800f582 <sen5x_get_serial_number+0x56>
        return error;
 800f57a:	19bb      	adds	r3, r7, r6
 800f57c:	2200      	movs	r2, #0
 800f57e:	5e9b      	ldrsh	r3, [r3, r2]
 800f580:	e021      	b.n	800f5c6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800f582:	4b14      	ldr	r3, [pc, #80]	@ (800f5d4 <sen5x_get_serial_number+0xa8>)
 800f584:	0018      	movs	r0, r3
 800f586:	f7ff fb41 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800f58a:	253c      	movs	r5, #60	@ 0x3c
 800f58c:	197c      	adds	r4, r7, r5
 800f58e:	230c      	movs	r3, #12
 800f590:	18fb      	adds	r3, r7, r3
 800f592:	2220      	movs	r2, #32
 800f594:	0019      	movs	r1, r3
 800f596:	2069      	movs	r0, #105	@ 0x69
 800f598:	f001 f96d 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f59c:	0003      	movs	r3, r0
 800f59e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f5a0:	197b      	adds	r3, r7, r5
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	5e9b      	ldrsh	r3, [r3, r2]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d003      	beq.n	800f5b2 <sen5x_get_serial_number+0x86>
        return error;
 800f5aa:	197b      	adds	r3, r7, r5
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	5e9b      	ldrsh	r3, [r3, r2]
 800f5b0:	e009      	b.n	800f5c6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f5b2:	1cfb      	adds	r3, r7, #3
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	230c      	movs	r3, #12
 800f5bc:	18fb      	adds	r3, r7, r3
 800f5be:	0018      	movs	r0, r3
 800f5c0:	f000 f933 	bl	800f82a <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	b011      	add	sp, #68	@ 0x44
 800f5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ce:	46c0      	nop			@ (mov r8, r8)
 800f5d0:	0000d033 	.word	0x0000d033
 800f5d4:	0000c350 	.word	0x0000c350

0800f5d8 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5da:	b089      	sub	sp, #36	@ 0x24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f5e6:	251e      	movs	r5, #30
 800f5e8:	197b      	adds	r3, r7, r5
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f5ee:	197c      	adds	r4, r7, r5
 800f5f0:	23d1      	movs	r3, #209	@ 0xd1
 800f5f2:	021a      	lsls	r2, r3, #8
 800f5f4:	197b      	adds	r3, r7, r5
 800f5f6:	8819      	ldrh	r1, [r3, #0]
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	18fb      	adds	r3, r7, r3
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	f001 f89e 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f602:	0003      	movs	r3, r0
 800f604:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f606:	261c      	movs	r6, #28
 800f608:	19bc      	adds	r4, r7, r6
 800f60a:	197b      	adds	r3, r7, r5
 800f60c:	881a      	ldrh	r2, [r3, #0]
 800f60e:	2310      	movs	r3, #16
 800f610:	18fb      	adds	r3, r7, r3
 800f612:	0019      	movs	r1, r3
 800f614:	2069      	movs	r0, #105	@ 0x69
 800f616:	f001 f916 	bl	8010846 <sensirion_i2c_write_data>
 800f61a:	0003      	movs	r3, r0
 800f61c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f61e:	19bb      	adds	r3, r7, r6
 800f620:	2200      	movs	r2, #0
 800f622:	5e9b      	ldrsh	r3, [r3, r2]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d003      	beq.n	800f630 <sen5x_get_version+0x58>
        return error;
 800f628:	19bb      	adds	r3, r7, r6
 800f62a:	2200      	movs	r2, #0
 800f62c:	5e9b      	ldrsh	r3, [r3, r2]
 800f62e:	e038      	b.n	800f6a2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f630:	4b1e      	ldr	r3, [pc, #120]	@ (800f6ac <sen5x_get_version+0xd4>)
 800f632:	0018      	movs	r0, r3
 800f634:	f7ff faea 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f638:	251c      	movs	r5, #28
 800f63a:	197c      	adds	r4, r7, r5
 800f63c:	2310      	movs	r3, #16
 800f63e:	18fb      	adds	r3, r7, r3
 800f640:	2208      	movs	r2, #8
 800f642:	0019      	movs	r1, r3
 800f644:	2069      	movs	r0, #105	@ 0x69
 800f646:	f001 f916 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f64a:	0003      	movs	r3, r0
 800f64c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f64e:	197b      	adds	r3, r7, r5
 800f650:	2200      	movs	r2, #0
 800f652:	5e9b      	ldrsh	r3, [r3, r2]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <sen5x_get_version+0x88>
        return error;
 800f658:	197b      	adds	r3, r7, r5
 800f65a:	2200      	movs	r2, #0
 800f65c:	5e9b      	ldrsh	r3, [r3, r2]
 800f65e:	e020      	b.n	800f6a2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f660:	2110      	movs	r1, #16
 800f662:	187b      	adds	r3, r7, r1
 800f664:	781a      	ldrb	r2, [r3, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f66a:	187b      	adds	r3, r7, r1
 800f66c:	785a      	ldrb	r2, [r3, #1]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f672:	187b      	adds	r3, r7, r1
 800f674:	789b      	ldrb	r3, [r3, #2]
 800f676:	1e5a      	subs	r2, r3, #1
 800f678:	4193      	sbcs	r3, r2
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f680:	187b      	adds	r3, r7, r1
 800f682:	78da      	ldrb	r2, [r3, #3]
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f688:	187b      	adds	r3, r7, r1
 800f68a:	791a      	ldrb	r2, [r3, #4]
 800f68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f690:	187b      	adds	r3, r7, r1
 800f692:	795a      	ldrb	r2, [r3, #5]
 800f694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f696:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f698:	187b      	adds	r3, r7, r1
 800f69a:	799a      	ldrb	r2, [r3, #6]
 800f69c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f69e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	0018      	movs	r0, r3
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	b009      	add	sp, #36	@ 0x24
 800f6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6aa:	46c0      	nop			@ (mov r8, r8)
 800f6ac:	00004e20 	.word	0x00004e20

0800f6b0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b2:	b087      	sub	sp, #28
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800f6b8:	2516      	movs	r5, #22
 800f6ba:	197b      	adds	r3, r7, r5
 800f6bc:	2200      	movs	r2, #0
 800f6be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800f6c0:	197c      	adds	r4, r7, r5
 800f6c2:	4a21      	ldr	r2, [pc, #132]	@ (800f748 <sen5x_read_device_status+0x98>)
 800f6c4:	197b      	adds	r3, r7, r5
 800f6c6:	8819      	ldrh	r1, [r3, #0]
 800f6c8:	260c      	movs	r6, #12
 800f6ca:	19bb      	adds	r3, r7, r6
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f001 f836 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f6d2:	0003      	movs	r3, r0
 800f6d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6d6:	2314      	movs	r3, #20
 800f6d8:	18fc      	adds	r4, r7, r3
 800f6da:	197b      	adds	r3, r7, r5
 800f6dc:	881a      	ldrh	r2, [r3, #0]
 800f6de:	19bb      	adds	r3, r7, r6
 800f6e0:	0019      	movs	r1, r3
 800f6e2:	2069      	movs	r0, #105	@ 0x69
 800f6e4:	f001 f8af 	bl	8010846 <sensirion_i2c_write_data>
 800f6e8:	0003      	movs	r3, r0
 800f6ea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6ec:	2314      	movs	r3, #20
 800f6ee:	18fb      	adds	r3, r7, r3
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	5e9b      	ldrsh	r3, [r3, r2]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <sen5x_read_device_status+0x4c>
        return 0xD206;
 800f6f8:	4b14      	ldr	r3, [pc, #80]	@ (800f74c <sen5x_read_device_status+0x9c>)
 800f6fa:	e020      	b.n	800f73e <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f6fc:	4b14      	ldr	r3, [pc, #80]	@ (800f750 <sen5x_read_device_status+0xa0>)
 800f6fe:	0018      	movs	r0, r3
 800f700:	f7ff fa84 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800f704:	2514      	movs	r5, #20
 800f706:	197c      	adds	r4, r7, r5
 800f708:	230c      	movs	r3, #12
 800f70a:	18fb      	adds	r3, r7, r3
 800f70c:	2204      	movs	r2, #4
 800f70e:	0019      	movs	r1, r3
 800f710:	2069      	movs	r0, #105	@ 0x69
 800f712:	f001 f8b0 	bl	8010876 <sensirion_i2c_read_data_inplace>
 800f716:	0003      	movs	r3, r0
 800f718:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f71a:	197b      	adds	r3, r7, r5
 800f71c:	2200      	movs	r2, #0
 800f71e:	5e9b      	ldrsh	r3, [r3, r2]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d003      	beq.n	800f72c <sen5x_read_device_status+0x7c>
        return error;
 800f724:	197b      	adds	r3, r7, r5
 800f726:	2200      	movs	r2, #0
 800f728:	5e9b      	ldrsh	r3, [r3, r2]
 800f72a:	e008      	b.n	800f73e <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800f72c:	230c      	movs	r3, #12
 800f72e:	18fb      	adds	r3, r7, r3
 800f730:	0018      	movs	r0, r3
 800f732:	f000 f853 	bl	800f7dc <sensirion_common_bytes_to_uint32_t>
 800f736:	0002      	movs	r2, r0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	0018      	movs	r0, r3
 800f740:	46bd      	mov	sp, r7
 800f742:	b007      	add	sp, #28
 800f744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f746:	46c0      	nop			@ (mov r8, r8)
 800f748:	0000d206 	.word	0x0000d206
 800f74c:	ffffd206 	.word	0xffffd206
 800f750:	00004e20 	.word	0x00004e20

0800f754 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f75a:	1dbb      	adds	r3, r7, #6
 800f75c:	2200      	movs	r2, #0
 800f75e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800f760:	1dbc      	adds	r4, r7, #6
 800f762:	4a12      	ldr	r2, [pc, #72]	@ (800f7ac <sen5x_device_reset+0x58>)
 800f764:	1dbb      	adds	r3, r7, #6
 800f766:	8819      	ldrh	r1, [r3, #0]
 800f768:	003b      	movs	r3, r7
 800f76a:	0018      	movs	r0, r3
 800f76c:	f000 ffe7 	bl	801073e <sensirion_i2c_add_command_to_buffer>
 800f770:	0003      	movs	r3, r0
 800f772:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f774:	1d3c      	adds	r4, r7, #4
 800f776:	1dbb      	adds	r3, r7, #6
 800f778:	881a      	ldrh	r2, [r3, #0]
 800f77a:	003b      	movs	r3, r7
 800f77c:	0019      	movs	r1, r3
 800f77e:	2069      	movs	r0, #105	@ 0x69
 800f780:	f001 f861 	bl	8010846 <sensirion_i2c_write_data>
 800f784:	0003      	movs	r3, r0
 800f786:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f788:	1d3b      	adds	r3, r7, #4
 800f78a:	2200      	movs	r2, #0
 800f78c:	5e9b      	ldrsh	r3, [r3, r2]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d003      	beq.n	800f79a <sen5x_device_reset+0x46>
        return error;
 800f792:	1d3b      	adds	r3, r7, #4
 800f794:	2200      	movs	r2, #0
 800f796:	5e9b      	ldrsh	r3, [r3, r2]
 800f798:	e004      	b.n	800f7a4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f79a:	4b05      	ldr	r3, [pc, #20]	@ (800f7b0 <sen5x_device_reset+0x5c>)
 800f79c:	0018      	movs	r0, r3
 800f79e:	f7ff fa35 	bl	800ec0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f7a2:	2300      	movs	r3, #0
}
 800f7a4:	0018      	movs	r0, r3
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	b003      	add	sp, #12
 800f7aa:	bd90      	pop	{r4, r7, pc}
 800f7ac:	0000d304 	.word	0x0000d304
 800f7b0:	00030d40 	.word	0x00030d40

0800f7b4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	b21b      	sxth	r3, r3
 800f7c2:	021b      	lsls	r3, r3, #8
 800f7c4:	b21a      	sxth	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	b21b      	sxth	r3, r3
 800f7d2:	b29b      	uxth	r3, r3
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b002      	add	sp, #8
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	061a      	lsls	r2, r3, #24
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	041b      	lsls	r3, r3, #16
 800f7f2:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	3302      	adds	r3, #2
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f7fc:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	3203      	adds	r2, #3
 800f802:	7812      	ldrb	r2, [r2, #0]
 800f804:	4313      	orrs	r3, r2
}
 800f806:	0018      	movs	r0, r3
 800f808:	46bd      	mov	sp, r7
 800f80a:	b002      	add	sp, #8
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	0018      	movs	r0, r3
 800f81a:	f7ff ffcb 	bl	800f7b4 <sensirion_common_bytes_to_uint16_t>
 800f81e:	0003      	movs	r3, r0
 800f820:	b21b      	sxth	r3, r3
}
 800f822:	0018      	movs	r0, r3
 800f824:	46bd      	mov	sp, r7
 800f826:	b002      	add	sp, #8
 800f828:	bd80      	pop	{r7, pc}

0800f82a <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b086      	sub	sp, #24
 800f82e:	af00      	add	r7, sp, #0
 800f830:	60f8      	str	r0, [r7, #12]
 800f832:	60b9      	str	r1, [r7, #8]
 800f834:	1dbb      	adds	r3, r7, #6
 800f836:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800f838:	2316      	movs	r3, #22
 800f83a:	18fb      	adds	r3, r7, r3
 800f83c:	2200      	movs	r2, #0
 800f83e:	801a      	strh	r2, [r3, #0]
 800f840:	e00f      	b.n	800f862 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800f842:	2016      	movs	r0, #22
 800f844:	183b      	adds	r3, r7, r0
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	18d2      	adds	r2, r2, r3
 800f84c:	183b      	adds	r3, r7, r0
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	68b9      	ldr	r1, [r7, #8]
 800f852:	18cb      	adds	r3, r1, r3
 800f854:	7812      	ldrb	r2, [r2, #0]
 800f856:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800f858:	183b      	adds	r3, r7, r0
 800f85a:	881a      	ldrh	r2, [r3, #0]
 800f85c:	183b      	adds	r3, r7, r0
 800f85e:	3201      	adds	r2, #1
 800f860:	801a      	strh	r2, [r3, #0]
 800f862:	2316      	movs	r3, #22
 800f864:	18fa      	adds	r2, r7, r3
 800f866:	1dbb      	adds	r3, r7, #6
 800f868:	8812      	ldrh	r2, [r2, #0]
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d3e8      	bcc.n	800f842 <sensirion_common_copy_bytes+0x18>
    }
}
 800f870:	46c0      	nop			@ (mov r8, r8)
 800f872:	46c0      	nop			@ (mov r8, r8)
 800f874:	46bd      	mov	sp, r7
 800f876:	b006      	add	sp, #24
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d113      	bne.n	800f8c2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	22fe      	movs	r2, #254	@ 0xfe
 800f89e:	0592      	lsls	r2, r2, #22
 800f8a0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4a1a      	ldr	r2, [pc, #104]	@ (800f910 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800f8a6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4a1a      	ldr	r2, [pc, #104]	@ (800f914 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800f8ac:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	4a19      	ldr	r2, [pc, #100]	@ (800f918 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800f8b2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4a19      	ldr	r2, [pc, #100]	@ (800f91c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800f8b8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4a18      	ldr	r2, [pc, #96]	@ (800f920 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800f8be:	61da      	str	r2, [r3, #28]
 800f8c0:	e011      	b.n	800f8e6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	4a17      	ldr	r2, [pc, #92]	@ (800f924 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800f8c6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	4a17      	ldr	r2, [pc, #92]	@ (800f928 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800f8cc:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	4a16      	ldr	r2, [pc, #88]	@ (800f92c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800f8d2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	4a16      	ldr	r2, [pc, #88]	@ (800f930 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800f8d8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4a15      	ldr	r2, [pc, #84]	@ (800f934 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800f8de:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4a15      	ldr	r2, [pc, #84]	@ (800f938 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800f8e4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	4a14      	ldr	r2, [pc, #80]	@ (800f93c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800f8ea:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4a14      	ldr	r2, [pc, #80]	@ (800f940 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f8f0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	4a12      	ldr	r2, [pc, #72]	@ (800f940 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f8f6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	4a12      	ldr	r2, [pc, #72]	@ (800f944 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800f8fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	0018      	movs	r0, r3
 800f902:	f000 f831 	bl	800f968 <GasIndexAlgorithm_reset>
}
 800f906:	46c0      	nop			@ (mov r8, r8)
 800f908:	46bd      	mov	sp, r7
 800f90a:	b004      	add	sp, #16
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	00002710 	.word	0x00002710
 800f914:	44340000 	.word	0x44340000
 800f918:	46859800 	.word	0x46859800
 800f91c:	46a05000 	.word	0x46a05000
 800f920:	41f00000 	.word	0x41f00000
 800f924:	42c80000 	.word	0x42c80000
 800f928:	00004e20 	.word	0x00004e20
 800f92c:	43340000 	.word	0x43340000
 800f930:	4528c000 	.word	0x4528c000
 800f934:	45a32000 	.word	0x45a32000
 800f938:	43aa0000 	.word	0x43aa0000
 800f93c:	43660000 	.word	0x43660000
 800f940:	41400000 	.word	0x41400000
 800f944:	42480000 	.word	0x42480000

0800f948 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f952:	22fe      	movs	r2, #254	@ 0xfe
 800f954:	0592      	lsls	r2, r2, #22
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	0018      	movs	r0, r3
 800f95c:	f7ff ff8e 	bl	800f87c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f960:	46c0      	nop			@ (mov r8, r8)
 800f962:	46bd      	mov	sp, r7
 800f964:	b002      	add	sp, #8
 800f966:	bd80      	pop	{r7, pc}

0800f968 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	0018      	movs	r0, r3
 800f986:	f000 f805 	bl	800f994 <GasIndexAlgorithm__init_instances>
}
 800f98a:	46c0      	nop			@ (mov r8, r8)
 800f98c:	46bd      	mov	sp, r7
 800f98e:	b002      	add	sp, #8
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f994:	b590      	push	{r4, r7, lr}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	0018      	movs	r0, r3
 800f9a0:	f000 f8e8 	bl	800fb74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	0018      	movs	r0, r3
 800f9a8:	f000 f9a6 	bl	800fcf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f9ac:	1c04      	adds	r4, r0, #0
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	0018      	movs	r0, r3
 800f9b2:	f000 f9ab 	bl	800fd0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f9b6:	1c02      	adds	r2, r0, #0
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	1c21      	adds	r1, r4, #0
 800f9bc:	0018      	movs	r0, r3
 800f9be:	f000 fc3b 	bl	8010238 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d107      	bne.n	800f9da <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f9ca:	23fe      	movs	r3, #254	@ 0xfe
 800f9cc:	059b      	lsls	r3, r3, #22
 800f9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800f9f8 <GasIndexAlgorithm__init_instances+0x64>)
 800f9d0:	490a      	ldr	r1, [pc, #40]	@ (800f9fc <GasIndexAlgorithm__init_instances+0x68>)
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fc86 	bl	80102e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f9d8:	e005      	b.n	800f9e6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f9da:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <GasIndexAlgorithm__init_instances+0x6c>)
 800f9dc:	4a09      	ldr	r2, [pc, #36]	@ (800fa04 <GasIndexAlgorithm__init_instances+0x70>)
 800f9de:	490a      	ldr	r1, [pc, #40]	@ (800fa08 <GasIndexAlgorithm__init_instances+0x74>)
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 fc7f 	bl	80102e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	0018      	movs	r0, r3
 800f9ea:	f000 fd35 	bl	8010458 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f9ee:	46c0      	nop			@ (mov r8, r8)
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	b003      	add	sp, #12
 800f9f4:	bd90      	pop	{r4, r7, pc}
 800f9f6:	46c0      	nop			@ (mov r8, r8)
 800f9f8:	bc257a78 	.word	0xbc257a78
 800f9fc:	44198000 	.word	0x44198000
 800fa00:	42c80000 	.word	0x42c80000
 800fa04:	bbd4fdf4 	.word	0xbbd4fdf4
 800fa08:	43550000 	.word	0x43550000

0800fa0c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800fa0c:	b590      	push	{r4, r7, lr}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa1c:	4952      	ldr	r1, [pc, #328]	@ (800fb68 <GasIndexAlgorithm_process+0x15c>)
 800fa1e:	1c18      	adds	r0, r3, #0
 800fa20:	f7f0 fd90 	bl	8000544 <__aeabi_fcmple>
 800fa24:	1e03      	subs	r3, r0, #0
 800fa26:	d00c      	beq.n	800fa42 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	1c19      	adds	r1, r3, #0
 800fa32:	1c10      	adds	r0, r2, #0
 800fa34:	f7f0 ff44 	bl	80008c0 <__aeabi_fadd>
 800fa38:	1c03      	adds	r3, r0, #0
 800fa3a:	1c1a      	adds	r2, r3, #0
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa40:	e080      	b.n	800fb44 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	dd25      	ble.n	800fa94 <GasIndexAlgorithm_process+0x88>
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	4a48      	ldr	r2, [pc, #288]	@ (800fb6c <GasIndexAlgorithm_process+0x160>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	dc21      	bgt.n	800fa94 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	dc04      	bgt.n	800fa64 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	60bb      	str	r3, [r7, #8]
 800fa62:	e00d      	b.n	800fa80 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	4a41      	ldr	r2, [pc, #260]	@ (800fb70 <GasIndexAlgorithm_process+0x164>)
 800fa6a:	4694      	mov	ip, r2
 800fa6c:	4463      	add	r3, ip
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	dd05      	ble.n	800fa80 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	4a3d      	ldr	r2, [pc, #244]	@ (800fb70 <GasIndexAlgorithm_process+0x164>)
 800fa7a:	4694      	mov	ip, r2
 800fa7c:	4463      	add	r3, ip
 800fa7e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	0018      	movs	r0, r3
 800fa8a:	f7f1 fecd 	bl	8001828 <__aeabi_i2f>
 800fa8e:	1c02      	adds	r2, r0, #0
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d005      	beq.n	800faa8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	0018      	movs	r0, r3
 800faa0:	f000 f945 	bl	800fd2e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800faa4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800faa6:	d014      	beq.n	800fad2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	1c11      	adds	r1, r2, #0
 800fab0:	0018      	movs	r0, r3
 800fab2:	f000 fbd1 	bl	8010258 <GasIndexAlgorithm__mox_model__process>
 800fab6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	1c11      	adds	r1, r2, #0
 800fac4:	0018      	movs	r0, r3
 800fac6:	f000 fc25 	bl	8010314 <GasIndexAlgorithm__sigmoid_scaled__process>
 800faca:	1c02      	adds	r2, r0, #0
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	639a      	str	r2, [r3, #56]	@ 0x38
 800fad0:	e003      	b.n	800fada <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	689a      	ldr	r2, [r3, #8]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	1c11      	adds	r1, r2, #0
 800fae2:	0018      	movs	r0, r3
 800fae4:	f000 fcec 	bl	80104c0 <GasIndexAlgorithm__adaptive_lowpass__process>
 800fae8:	1c02      	adds	r2, r0, #0
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf2:	21fc      	movs	r1, #252	@ 0xfc
 800faf4:	0589      	lsls	r1, r1, #22
 800faf6:	1c18      	adds	r0, r3, #0
 800faf8:	f7f0 fd1a 	bl	8000530 <__aeabi_fcmplt>
 800fafc:	1e03      	subs	r3, r0, #0
 800fafe:	d003      	beq.n	800fb08 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	22fc      	movs	r2, #252	@ 0xfc
 800fb04:	0592      	lsls	r2, r2, #22
 800fb06:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	1c18      	adds	r0, r3, #0
 800fb10:	f7f0 fd22 	bl	8000558 <__aeabi_fcmpgt>
 800fb14:	1e03      	subs	r3, r0, #0
 800fb16:	d015      	beq.n	800fb44 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	1c11      	adds	r1, r2, #0
 800fb20:	0018      	movs	r0, r3
 800fb22:	f000 fa4f 	bl	800ffc4 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	0018      	movs	r0, r3
 800fb2a:	f000 f8e5 	bl	800fcf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800fb2e:	1c04      	adds	r4, r0, #0
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	0018      	movs	r0, r3
 800fb34:	f000 f8ea 	bl	800fd0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800fb38:	1c02      	adds	r2, r0, #0
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	1c21      	adds	r1, r4, #0
 800fb3e:	0018      	movs	r0, r3
 800fb40:	f000 fb7a 	bl	8010238 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb48:	21fc      	movs	r1, #252	@ 0xfc
 800fb4a:	0589      	lsls	r1, r1, #22
 800fb4c:	1c18      	adds	r0, r3, #0
 800fb4e:	f7f0 feb7 	bl	80008c0 <__aeabi_fadd>
 800fb52:	1c03      	adds	r3, r0, #0
 800fb54:	1c18      	adds	r0, r3, #0
 800fb56:	f7f1 fe47 	bl	80017e8 <__aeabi_f2iz>
 800fb5a:	0002      	movs	r2, r0
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	601a      	str	r2, [r3, #0]
    return;
 800fb60:	46c0      	nop			@ (mov r8, r8)
}
 800fb62:	46bd      	mov	sp, r7
 800fb64:	b005      	add	sp, #20
 800fb66:	bd90      	pop	{r4, r7, pc}
 800fb68:	42340000 	.word	0x42340000
 800fb6c:	0000fde7 	.word	0x0000fde7
 800fb70:	00007fff 	.word	0x00007fff

0800fb74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fb74:	b5b0      	push	{r4, r5, r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	223c      	movs	r2, #60	@ 0x3c
 800fb80:	2100      	movs	r1, #0
 800fb82:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	4952      	ldr	r1, [pc, #328]	@ (800fce8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fb9e:	1c18      	adds	r0, r3, #0
 800fba0:	f7f1 f880 	bl	8000ca4 <__aeabi_fdiv>
 800fba4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800fba6:	2188      	movs	r1, #136	@ 0x88
 800fba8:	05c9      	lsls	r1, r1, #23
 800fbaa:	1c18      	adds	r0, r3, #0
 800fbac:	f7f1 fa48 	bl	8001040 <__aeabi_fmul>
 800fbb0:	1c03      	adds	r3, r0, #0
 800fbb2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	494a      	ldr	r1, [pc, #296]	@ (800fce8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fbbe:	1c18      	adds	r0, r3, #0
 800fbc0:	f7f1 f870 	bl	8000ca4 <__aeabi_fdiv>
 800fbc4:	1c03      	adds	r3, r0, #0
 800fbc6:	1c19      	adds	r1, r3, #0
 800fbc8:	1c20      	adds	r0, r4, #0
 800fbca:	f7f0 fe79 	bl	80008c0 <__aeabi_fadd>
 800fbce:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800fbd0:	1c19      	adds	r1, r3, #0
 800fbd2:	1c28      	adds	r0, r5, #0
 800fbd4:	f7f1 f866 	bl	8000ca4 <__aeabi_fdiv>
 800fbd8:	1c03      	adds	r3, r0, #0
 800fbda:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	4940      	ldr	r1, [pc, #256]	@ (800fce8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fbe6:	1c18      	adds	r0, r3, #0
 800fbe8:	f7f1 f85c 	bl	8000ca4 <__aeabi_fdiv>
 800fbec:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fbee:	2185      	movs	r1, #133	@ 0x85
 800fbf0:	05c9      	lsls	r1, r1, #23
 800fbf2:	1c18      	adds	r0, r3, #0
 800fbf4:	f7f1 fa24 	bl	8001040 <__aeabi_fmul>
 800fbf8:	1c03      	adds	r3, r0, #0
 800fbfa:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4938      	ldr	r1, [pc, #224]	@ (800fce8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800fc06:	1c18      	adds	r0, r3, #0
 800fc08:	f7f1 f84c 	bl	8000ca4 <__aeabi_fdiv>
 800fc0c:	1c03      	adds	r3, r0, #0
 800fc0e:	1c19      	adds	r1, r3, #0
 800fc10:	1c20      	adds	r0, r4, #0
 800fc12:	f7f0 fe55 	bl	80008c0 <__aeabi_fadd>
 800fc16:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800fc18:	1c19      	adds	r1, r3, #0
 800fc1a:	1c28      	adds	r0, r5, #0
 800fc1c:	f7f1 f842 	bl	8000ca4 <__aeabi_fdiv>
 800fc20:	1c03      	adds	r3, r0, #0
 800fc22:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d118      	bne.n	800fc62 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800fc34:	2188      	movs	r1, #136	@ 0x88
 800fc36:	05c9      	lsls	r1, r1, #23
 800fc38:	1c18      	adds	r0, r3, #0
 800fc3a:	f7f1 fa01 	bl	8001040 <__aeabi_fmul>
 800fc3e:	1c03      	adds	r3, r0, #0
 800fc40:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800fc46:	4929      	ldr	r1, [pc, #164]	@ (800fcec <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800fc48:	1c18      	adds	r0, r3, #0
 800fc4a:	f7f0 fe39 	bl	80008c0 <__aeabi_fadd>
 800fc4e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800fc50:	1c19      	adds	r1, r3, #0
 800fc52:	1c20      	adds	r0, r4, #0
 800fc54:	f7f1 f826 	bl	8000ca4 <__aeabi_fdiv>
 800fc58:	1c03      	adds	r3, r0, #0
 800fc5a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	655a      	str	r2, [r3, #84]	@ 0x54
 800fc60:	e017      	b.n	800fc92 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800fc66:	2188      	movs	r1, #136	@ 0x88
 800fc68:	05c9      	lsls	r1, r1, #23
 800fc6a:	1c18      	adds	r0, r3, #0
 800fc6c:	f7f1 f9e8 	bl	8001040 <__aeabi_fmul>
 800fc70:	1c03      	adds	r3, r0, #0
 800fc72:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800fc78:	491d      	ldr	r1, [pc, #116]	@ (800fcf0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800fc7a:	1c18      	adds	r0, r3, #0
 800fc7c:	f7f0 fe20 	bl	80008c0 <__aeabi_fadd>
 800fc80:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800fc82:	1c19      	adds	r1, r3, #0
 800fc84:	1c20      	adds	r0, r4, #0
 800fc86:	f7f1 f80d 	bl	8000ca4 <__aeabi_fdiv>
 800fc8a:	1c03      	adds	r3, r0, #0
 800fc8c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fc96:	2185      	movs	r1, #133	@ 0x85
 800fc98:	05c9      	lsls	r1, r1, #23
 800fc9a:	1c18      	adds	r0, r3, #0
 800fc9c:	f7f1 f9d0 	bl	8001040 <__aeabi_fmul>
 800fca0:	1c03      	adds	r3, r0, #0
 800fca2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	4912      	ldr	r1, [pc, #72]	@ (800fcf4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800fcaa:	1c18      	adds	r0, r3, #0
 800fcac:	f7f0 fe08 	bl	80008c0 <__aeabi_fadd>
 800fcb0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800fcb2:	1c19      	adds	r1, r3, #0
 800fcb4:	1c20      	adds	r0, r4, #0
 800fcb6:	f7f0 fff5 	bl	8000ca4 <__aeabi_fdiv>
 800fcba:	1c03      	adds	r3, r0, #0
 800fcbc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800fce0:	46c0      	nop			@ (mov r8, r8)
 800fce2:	46bd      	mov	sp, r7
 800fce4:	b002      	add	sp, #8
 800fce6:	bdb0      	pop	{r4, r5, r7, pc}
 800fce8:	45610000 	.word	0x45610000
 800fcec:	44960000 	.word	0x44960000
 800fcf0:	41a00000 	.word	0x41a00000
 800fcf4:	451c4000 	.word	0x451c4000

0800fcf8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800fd04:	1c18      	adds	r0, r3, #0
 800fd06:	46bd      	mov	sp, r7
 800fd08:	b002      	add	sp, #8
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800fd1c:	1c19      	adds	r1, r3, #0
 800fd1e:	1c10      	adds	r0, r2, #0
 800fd20:	f7f0 fdce 	bl	80008c0 <__aeabi_fadd>
 800fd24:	1c03      	adds	r3, r0, #0
}
 800fd26:	1c18      	adds	r0, r3, #0
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	b002      	add	sp, #8
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b082      	sub	sp, #8
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	223c      	movs	r2, #60	@ 0x3c
 800fd3a:	5c9b      	ldrb	r3, [r3, r2]
}
 800fd3c:	0018      	movs	r0, r3
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	b002      	add	sp, #8
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800fd44:	b5b0      	push	{r4, r5, r7, lr}
 800fd46:	b08c      	sub	sp, #48	@ 0x30
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800fd50:	1c19      	adds	r1, r3, #0
 800fd52:	4895      	ldr	r0, [pc, #596]	@ (800ffa8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800fd54:	f7f1 face 	bl	80012f4 <__aeabi_fsub>
 800fd58:	1c03      	adds	r3, r0, #0
 800fd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd60:	1c19      	adds	r1, r3, #0
 800fd62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd64:	f7f0 fbf8 	bl	8000558 <__aeabi_fcmpgt>
 800fd68:	1e03      	subs	r3, r0, #0
 800fd6a:	d00b      	beq.n	800fd84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800fd74:	1c19      	adds	r1, r3, #0
 800fd76:	1c10      	adds	r0, r2, #0
 800fd78:	f7f0 fda2 	bl	80008c0 <__aeabi_fadd>
 800fd7c:	1c03      	adds	r3, r0, #0
 800fd7e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd88:	1c19      	adds	r1, r3, #0
 800fd8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd8c:	f7f0 fbe4 	bl	8000558 <__aeabi_fcmpgt>
 800fd90:	1e03      	subs	r3, r0, #0
 800fd92:	d00b      	beq.n	800fdac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800fd9c:	1c19      	adds	r1, r3, #0
 800fd9e:	1c10      	adds	r0, r2, #0
 800fda0:	f7f0 fd8e 	bl	80008c0 <__aeabi_fadd>
 800fda4:	1c03      	adds	r3, r0, #0
 800fda6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6959      	ldr	r1, [r3, #20]
 800fdb0:	4a7e      	ldr	r2, [pc, #504]	@ (800ffac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	0018      	movs	r0, r3
 800fdb6:	f000 f9f1 	bl	801019c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	1c11      	adds	r1, r2, #0
 800fdc2:	0018      	movs	r0, r3
 800fdc4:	f000 f9fa 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800fdc8:	1c03      	adds	r3, r0, #0
 800fdca:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800fdd8:	1c19      	adds	r1, r3, #0
 800fdda:	1c10      	adds	r0, r2, #0
 800fddc:	f7f1 fa8a 	bl	80012f4 <__aeabi_fsub>
 800fde0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800fde2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fde4:	1c18      	adds	r0, r3, #0
 800fde6:	f7f1 f92b 	bl	8001040 <__aeabi_fmul>
 800fdea:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800fdec:	1c19      	adds	r1, r3, #0
 800fdee:	1c20      	adds	r0, r4, #0
 800fdf0:	f7f0 fd66 	bl	80008c0 <__aeabi_fadd>
 800fdf4:	1c03      	adds	r3, r0, #0
 800fdf6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800fe00:	1c19      	adds	r1, r3, #0
 800fe02:	486b      	ldr	r0, [pc, #428]	@ (800ffb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800fe04:	f7f1 fa76 	bl	80012f4 <__aeabi_fsub>
 800fe08:	1c03      	adds	r3, r0, #0
 800fe0a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	1c11      	adds	r1, r2, #0
 800fe14:	0018      	movs	r0, r3
 800fe16:	f000 f9d1 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800fe1a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800fe1c:	1c19      	adds	r1, r3, #0
 800fe1e:	1c28      	adds	r0, r5, #0
 800fe20:	f7f1 f90e 	bl	8001040 <__aeabi_fmul>
 800fe24:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800fe26:	1c19      	adds	r1, r3, #0
 800fe28:	1c20      	adds	r0, r4, #0
 800fe2a:	f7f0 fd49 	bl	80008c0 <__aeabi_fadd>
 800fe2e:	1c03      	adds	r3, r0, #0
 800fe30:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800fe32:	4a60      	ldr	r2, [pc, #384]	@ (800ffb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800fe34:	6a39      	ldr	r1, [r7, #32]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	0018      	movs	r0, r3
 800fe3a:	f000 f9af 	bl	801019c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	1c11      	adds	r1, r2, #0
 800fe46:	0018      	movs	r0, r3
 800fe48:	f000 f9b8 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800fe4c:	1c03      	adds	r3, r0, #0
 800fe4e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800fe50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe52:	69f8      	ldr	r0, [r7, #28]
 800fe54:	f7f1 f8f4 	bl	8001040 <__aeabi_fmul>
 800fe58:	1c03      	adds	r3, r0, #0
 800fe5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6999      	ldr	r1, [r3, #24]
 800fe64:	4a51      	ldr	r2, [pc, #324]	@ (800ffac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	0018      	movs	r0, r3
 800fe6a:	f000 f997 	bl	801019c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	1c11      	adds	r1, r2, #0
 800fe76:	0018      	movs	r0, r3
 800fe78:	f000 f9a0 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800fe7c:	1c03      	adds	r3, r0, #0
 800fe7e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800fe8c:	1c19      	adds	r1, r3, #0
 800fe8e:	1c10      	adds	r0, r2, #0
 800fe90:	f7f1 fa30 	bl	80012f4 <__aeabi_fsub>
 800fe94:	1c03      	adds	r3, r0, #0
 800fe96:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800fe98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe9a:	69b8      	ldr	r0, [r7, #24]
 800fe9c:	f7f1 fa2a 	bl	80012f4 <__aeabi_fsub>
 800fea0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800fea2:	1c19      	adds	r1, r3, #0
 800fea4:	1c28      	adds	r0, r5, #0
 800fea6:	f7f1 f8cb 	bl	8001040 <__aeabi_fmul>
 800feaa:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800feac:	1c19      	adds	r1, r3, #0
 800feae:	1c20      	adds	r0, r4, #0
 800feb0:	f7f0 fd06 	bl	80008c0 <__aeabi_fadd>
 800feb4:	1c03      	adds	r3, r0, #0
 800feb6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800fec0:	1c19      	adds	r1, r3, #0
 800fec2:	483b      	ldr	r0, [pc, #236]	@ (800ffb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800fec4:	f7f1 fa16 	bl	80012f4 <__aeabi_fsub>
 800fec8:	1c03      	adds	r3, r0, #0
 800feca:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	1c11      	adds	r1, r2, #0
 800fed4:	0018      	movs	r0, r3
 800fed6:	f000 f971 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800feda:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800fedc:	1c19      	adds	r1, r3, #0
 800fede:	1c28      	adds	r0, r5, #0
 800fee0:	f7f1 f8ae 	bl	8001040 <__aeabi_fmul>
 800fee4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800fee6:	1c19      	adds	r1, r3, #0
 800fee8:	1c20      	adds	r0, r4, #0
 800feea:	f7f0 fce9 	bl	80008c0 <__aeabi_fadd>
 800feee:	1c03      	adds	r3, r0, #0
 800fef0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800fef2:	4a30      	ldr	r2, [pc, #192]	@ (800ffb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800fef4:	6939      	ldr	r1, [r7, #16]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	0018      	movs	r0, r3
 800fefa:	f000 f94f 	bl	801019c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	1c11      	adds	r1, r2, #0
 800ff06:	0018      	movs	r0, r3
 800ff08:	f000 f958 	bl	80101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ff0c:	1c03      	adds	r3, r0, #0
 800ff0e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ff10:	6979      	ldr	r1, [r7, #20]
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f7f1 f894 	bl	8001040 <__aeabi_fmul>
 800ff18:	1c03      	adds	r3, r0, #0
 800ff1a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	4923      	ldr	r1, [pc, #140]	@ (800ffb8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ff2a:	1c18      	adds	r0, r3, #0
 800ff2c:	f7f0 feba 	bl	8000ca4 <__aeabi_fdiv>
 800ff30:	1c03      	adds	r3, r0, #0
 800ff32:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ff34:	69f9      	ldr	r1, [r7, #28]
 800ff36:	20fe      	movs	r0, #254	@ 0xfe
 800ff38:	0580      	lsls	r0, r0, #22
 800ff3a:	f7f1 f9db 	bl	80012f4 <__aeabi_fsub>
 800ff3e:	1c03      	adds	r3, r0, #0
 800ff40:	491e      	ldr	r1, [pc, #120]	@ (800ffbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ff42:	1c18      	adds	r0, r3, #0
 800ff44:	f7f1 f87c 	bl	8001040 <__aeabi_fmul>
 800ff48:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ff4a:	491d      	ldr	r1, [pc, #116]	@ (800ffc0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ff4c:	1c18      	adds	r0, r3, #0
 800ff4e:	f7f1 f9d1 	bl	80012f4 <__aeabi_fsub>
 800ff52:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ff54:	1c19      	adds	r1, r3, #0
 800ff56:	1c28      	adds	r0, r5, #0
 800ff58:	f7f1 f872 	bl	8001040 <__aeabi_fmul>
 800ff5c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ff5e:	1c19      	adds	r1, r3, #0
 800ff60:	1c20      	adds	r0, r4, #0
 800ff62:	f7f0 fcad 	bl	80008c0 <__aeabi_fadd>
 800ff66:	1c03      	adds	r3, r0, #0
 800ff68:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff72:	2100      	movs	r1, #0
 800ff74:	1c18      	adds	r0, r3, #0
 800ff76:	f7f0 fadb 	bl	8000530 <__aeabi_fcmplt>
 800ff7a:	1e03      	subs	r3, r0, #0
 800ff7c:	d002      	beq.n	800ff84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ff8c:	1c19      	adds	r1, r3, #0
 800ff8e:	1c10      	adds	r0, r2, #0
 800ff90:	f7f0 fae2 	bl	8000558 <__aeabi_fcmpgt>
 800ff94:	1e03      	subs	r3, r0, #0
 800ff96:	d100      	bne.n	800ff9a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ff98:	e002      	b.n	800ffa0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ffa0:	46c0      	nop			@ (mov r8, r8)
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	b00c      	add	sp, #48	@ 0x30
 800ffa6:	bdb0      	pop	{r4, r5, r7, pc}
 800ffa8:	46fffe00 	.word	0x46fffe00
 800ffac:	3c23d70a 	.word	0x3c23d70a
 800ffb0:	43ff0000 	.word	0x43ff0000
 800ffb4:	3db851ec 	.word	0x3db851ec
 800ffb8:	42700000 	.word	0x42700000
 800ffbc:	3fa66666 	.word	0x3fa66666
 800ffc0:	3e99999a 	.word	0x3e99999a

0800ffc4 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffc6:	b087      	sub	sp, #28
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	223c      	movs	r2, #60	@ 0x3c
 800ffd2:	5c9b      	ldrb	r3, [r3, r2]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4053      	eors	r3, r2
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00a      	beq.n	800fff4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	223c      	movs	r2, #60	@ 0x3c
 800ffe2:	2101      	movs	r1, #1
 800ffe4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800fff2:	e0c8      	b.n	8010186 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fff8:	4965      	ldr	r1, [pc, #404]	@ (8010190 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800fffa:	1c18      	adds	r0, r3, #0
 800fffc:	f7f0 fab6 	bl	800056c <__aeabi_fcmpge>
 8010000:	1e03      	subs	r3, r0, #0
 8010002:	d107      	bne.n	8010014 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010008:	4962      	ldr	r1, [pc, #392]	@ (8010194 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 801000a:	1c18      	adds	r0, r3, #0
 801000c:	f7f0 fa9a 	bl	8000544 <__aeabi_fcmple>
 8010010:	1e03      	subs	r3, r0, #0
 8010012:	d00e      	beq.n	8010032 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801001c:	1c19      	adds	r1, r3, #0
 801001e:	1c10      	adds	r0, r2, #0
 8010020:	f7f0 fc4e 	bl	80008c0 <__aeabi_fadd>
 8010024:	1c03      	adds	r3, r0, #0
 8010026:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010036:	1c19      	adds	r1, r3, #0
 8010038:	6838      	ldr	r0, [r7, #0]
 801003a:	f7f1 f95b 	bl	80012f4 <__aeabi_fsub>
 801003e:	1c03      	adds	r3, r0, #0
 8010040:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	0018      	movs	r0, r3
 8010046:	f7ff fe7d 	bl	800fd44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801004e:	1c19      	adds	r1, r3, #0
 8010050:	6838      	ldr	r0, [r7, #0]
 8010052:	f7f1 f94f 	bl	80012f4 <__aeabi_fsub>
 8010056:	1c03      	adds	r3, r0, #0
 8010058:	2185      	movs	r1, #133	@ 0x85
 801005a:	05c9      	lsls	r1, r1, #23
 801005c:	1c18      	adds	r0, r3, #0
 801005e:	f7f0 fe21 	bl	8000ca4 <__aeabi_fdiv>
 8010062:	1c03      	adds	r3, r0, #0
 8010064:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8010066:	2100      	movs	r1, #0
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7f0 fa61 	bl	8000530 <__aeabi_fcmplt>
 801006e:	1e03      	subs	r3, r0, #0
 8010070:	d008      	beq.n	8010084 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010076:	68f9      	ldr	r1, [r7, #12]
 8010078:	1c18      	adds	r0, r3, #0
 801007a:	f7f1 f93b 	bl	80012f4 <__aeabi_fsub>
 801007e:	1c03      	adds	r3, r0, #0
 8010080:	617b      	str	r3, [r7, #20]
 8010082:	e007      	b.n	8010094 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010088:	1c19      	adds	r1, r3, #0
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f7f0 fc18 	bl	80008c0 <__aeabi_fadd>
 8010090:	1c03      	adds	r3, r0, #0
 8010092:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8010094:	23fe      	movs	r3, #254	@ 0xfe
 8010096:	059b      	lsls	r3, r3, #22
 8010098:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 801009a:	493f      	ldr	r1, [pc, #252]	@ (8010198 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 801009c:	6978      	ldr	r0, [r7, #20]
 801009e:	f7f0 fa5b 	bl	8000558 <__aeabi_fcmpgt>
 80100a2:	1e03      	subs	r3, r0, #0
 80100a4:	d010      	beq.n	80100c8 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80100a6:	493c      	ldr	r1, [pc, #240]	@ (8010198 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80100a8:	6978      	ldr	r0, [r7, #20]
 80100aa:	f7f0 fdfb 	bl	8000ca4 <__aeabi_fdiv>
 80100ae:	1c03      	adds	r3, r0, #0
 80100b0:	1c1c      	adds	r4, r3, #0
 80100b2:	4939      	ldr	r1, [pc, #228]	@ (8010198 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80100b4:	6978      	ldr	r0, [r7, #20]
 80100b6:	f7f0 fdf5 	bl	8000ca4 <__aeabi_fdiv>
 80100ba:	1c03      	adds	r3, r0, #0
 80100bc:	1c19      	adds	r1, r3, #0
 80100be:	1c20      	adds	r0, r4, #0
 80100c0:	f7f0 ffbe 	bl	8001040 <__aeabi_fmul>
 80100c4:	1c03      	adds	r3, r0, #0
 80100c6:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80100cc:	1c19      	adds	r1, r3, #0
 80100ce:	2085      	movs	r0, #133	@ 0x85
 80100d0:	05c0      	lsls	r0, r0, #23
 80100d2:	f7f1 f90f 	bl	80012f4 <__aeabi_fsub>
 80100d6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80100d8:	6939      	ldr	r1, [r7, #16]
 80100da:	1c18      	adds	r0, r3, #0
 80100dc:	f7f0 ffb0 	bl	8001040 <__aeabi_fmul>
 80100e0:	1c03      	adds	r3, r0, #0
 80100e2:	1c18      	adds	r0, r3, #0
 80100e4:	f018 fe42 	bl	8028d6c <sqrtf>
 80100e8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80100f2:	2185      	movs	r1, #133	@ 0x85
 80100f4:	05c9      	lsls	r1, r1, #23
 80100f6:	6938      	ldr	r0, [r7, #16]
 80100f8:	f7f0 ffa2 	bl	8001040 <__aeabi_fmul>
 80100fc:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80100fe:	1c19      	adds	r1, r3, #0
 8010100:	1c28      	adds	r0, r5, #0
 8010102:	f7f0 fdcf 	bl	8000ca4 <__aeabi_fdiv>
 8010106:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010108:	1c19      	adds	r1, r3, #0
 801010a:	1c20      	adds	r0, r4, #0
 801010c:	f7f0 ff98 	bl	8001040 <__aeabi_fmul>
 8010110:	1c03      	adds	r3, r0, #0
 8010112:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010118:	68f9      	ldr	r1, [r7, #12]
 801011a:	1c18      	adds	r0, r3, #0
 801011c:	f7f0 ff90 	bl	8001040 <__aeabi_fmul>
 8010120:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8010122:	6939      	ldr	r1, [r7, #16]
 8010124:	1c18      	adds	r0, r3, #0
 8010126:	f7f0 fdbd 	bl	8000ca4 <__aeabi_fdiv>
 801012a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 801012c:	68f9      	ldr	r1, [r7, #12]
 801012e:	1c18      	adds	r0, r3, #0
 8010130:	f7f0 ff86 	bl	8001040 <__aeabi_fmul>
 8010134:	1c03      	adds	r3, r0, #0
             sqrtf(
 8010136:	1c19      	adds	r1, r3, #0
 8010138:	1c20      	adds	r0, r4, #0
 801013a:	f7f0 fbc1 	bl	80008c0 <__aeabi_fadd>
 801013e:	1c03      	adds	r3, r0, #0
 8010140:	1c18      	adds	r0, r3, #0
 8010142:	f018 fe13 	bl	8028d6c <sqrtf>
 8010146:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010148:	1c19      	adds	r1, r3, #0
 801014a:	1c30      	adds	r0, r6, #0
 801014c:	f7f0 ff78 	bl	8001040 <__aeabi_fmul>
 8010150:	1c03      	adds	r3, r0, #0
 8010152:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010160:	68f9      	ldr	r1, [r7, #12]
 8010162:	1c18      	adds	r0, r3, #0
 8010164:	f7f0 ff6c 	bl	8001040 <__aeabi_fmul>
 8010168:	1c03      	adds	r3, r0, #0
 801016a:	2182      	movs	r1, #130	@ 0x82
 801016c:	05c9      	lsls	r1, r1, #23
 801016e:	1c18      	adds	r0, r3, #0
 8010170:	f7f0 fd98 	bl	8000ca4 <__aeabi_fdiv>
 8010174:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8010176:	1c19      	adds	r1, r3, #0
 8010178:	1c20      	adds	r0, r4, #0
 801017a:	f7f0 fba1 	bl	80008c0 <__aeabi_fadd>
 801017e:	1c03      	adds	r3, r0, #0
 8010180:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010186:	46c0      	nop			@ (mov r8, r8)
 8010188:	46bd      	mov	sp, r7
 801018a:	b007      	add	sp, #28
 801018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801018e:	46c0      	nop			@ (mov r8, r8)
 8010190:	42c80000 	.word	0x42c80000
 8010194:	c2c80000 	.word	0xc2c80000
 8010198:	44b40000 	.word	0x44b40000

0801019c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80101b4:	46c0      	nop			@ (mov r8, r8)
 80101b6:	46bd      	mov	sp, r7
 80101b8:	b004      	add	sp, #16
 80101ba:	bd80      	pop	{r7, pc}

080101bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80101bc:	b590      	push	{r4, r7, lr}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ce:	1c19      	adds	r1, r3, #0
 80101d0:	6838      	ldr	r0, [r7, #0]
 80101d2:	f7f1 f88f 	bl	80012f4 <__aeabi_fsub>
 80101d6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80101d8:	1c19      	adds	r1, r3, #0
 80101da:	1c20      	adds	r0, r4, #0
 80101dc:	f7f0 ff30 	bl	8001040 <__aeabi_fmul>
 80101e0:	1c03      	adds	r3, r0, #0
 80101e2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80101e4:	4912      	ldr	r1, [pc, #72]	@ (8010230 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f7f0 f9a2 	bl	8000530 <__aeabi_fcmplt>
 80101ec:	1e03      	subs	r3, r0, #0
 80101ee:	d002      	beq.n	80101f6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80101f0:	23fe      	movs	r3, #254	@ 0xfe
 80101f2:	059b      	lsls	r3, r3, #22
 80101f4:	e018      	b.n	8010228 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80101f6:	490f      	ldr	r1, [pc, #60]	@ (8010234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7f0 f9ad 	bl	8000558 <__aeabi_fcmpgt>
 80101fe:	1e03      	subs	r3, r0, #0
 8010200:	d001      	beq.n	8010206 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8010202:	2300      	movs	r3, #0
 8010204:	e010      	b.n	8010228 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	1c18      	adds	r0, r3, #0
 801020a:	f018 fd87 	bl	8028d1c <expf>
 801020e:	1c03      	adds	r3, r0, #0
 8010210:	21fe      	movs	r1, #254	@ 0xfe
 8010212:	0589      	lsls	r1, r1, #22
 8010214:	1c18      	adds	r0, r3, #0
 8010216:	f7f0 fb53 	bl	80008c0 <__aeabi_fadd>
 801021a:	1c03      	adds	r3, r0, #0
 801021c:	1c19      	adds	r1, r3, #0
 801021e:	20fe      	movs	r0, #254	@ 0xfe
 8010220:	0580      	lsls	r0, r0, #22
 8010222:	f7f0 fd3f 	bl	8000ca4 <__aeabi_fdiv>
 8010226:	1c03      	adds	r3, r0, #0
    }
}
 8010228:	1c18      	adds	r0, r3, #0
 801022a:	46bd      	mov	sp, r7
 801022c:	b005      	add	sp, #20
 801022e:	bd90      	pop	{r4, r7, pc}
 8010230:	c2480000 	.word	0xc2480000
 8010234:	42480000 	.word	0x42480000

08010238 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010250:	46c0      	nop			@ (mov r8, r8)
 8010252:	46bd      	mov	sp, r7
 8010254:	b004      	add	sp, #16
 8010256:	bd80      	pop	{r7, pc}

08010258 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8010258:	b590      	push	{r4, r7, lr}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b01      	cmp	r3, #1
 8010268:	d114      	bne.n	8010294 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801026e:	1c19      	adds	r1, r3, #0
 8010270:	6838      	ldr	r0, [r7, #0]
 8010272:	f7f1 f83f 	bl	80012f4 <__aeabi_fsub>
 8010276:	1c03      	adds	r3, r0, #0
 8010278:	4918      	ldr	r1, [pc, #96]	@ (80102dc <GasIndexAlgorithm__mox_model__process+0x84>)
 801027a:	1c18      	adds	r0, r3, #0
 801027c:	f7f0 fd12 	bl	8000ca4 <__aeabi_fdiv>
 8010280:	1c03      	adds	r3, r0, #0
 8010282:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8010288:	1c19      	adds	r1, r3, #0
 801028a:	1c10      	adds	r0, r2, #0
 801028c:	f7f0 fed8 	bl	8001040 <__aeabi_fmul>
 8010290:	1c03      	adds	r3, r0, #0
 8010292:	e01f      	b.n	80102d4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010298:	1c19      	adds	r1, r3, #0
 801029a:	6838      	ldr	r0, [r7, #0]
 801029c:	f7f1 f82a 	bl	80012f4 <__aeabi_fsub>
 80102a0:	1c03      	adds	r3, r0, #0
 80102a2:	1c1a      	adds	r2, r3, #0
 80102a4:	2380      	movs	r3, #128	@ 0x80
 80102a6:	061b      	lsls	r3, r3, #24
 80102a8:	4053      	eors	r3, r2
 80102aa:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102b0:	490b      	ldr	r1, [pc, #44]	@ (80102e0 <GasIndexAlgorithm__mox_model__process+0x88>)
 80102b2:	1c18      	adds	r0, r3, #0
 80102b4:	f7f0 fb04 	bl	80008c0 <__aeabi_fadd>
 80102b8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80102ba:	1c19      	adds	r1, r3, #0
 80102bc:	1c20      	adds	r0, r4, #0
 80102be:	f7f0 fcf1 	bl	8000ca4 <__aeabi_fdiv>
 80102c2:	1c03      	adds	r3, r0, #0
 80102c4:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80102ca:	1c19      	adds	r1, r3, #0
 80102cc:	1c10      	adds	r0, r2, #0
 80102ce:	f7f0 feb7 	bl	8001040 <__aeabi_fmul>
 80102d2:	1c03      	adds	r3, r0, #0
    }
}
 80102d4:	1c18      	adds	r0, r3, #0
 80102d6:	46bd      	mov	sp, r7
 80102d8:	b003      	add	sp, #12
 80102da:	bd90      	pop	{r4, r7, pc}
 80102dc:	44fa0000 	.word	0x44fa0000
 80102e0:	435c0000 	.word	0x435c0000

080102e4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
 80102f0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2180      	movs	r1, #128	@ 0x80
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2184      	movs	r1, #132	@ 0x84
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2188      	movs	r1, #136	@ 0x88
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	505a      	str	r2, [r3, r1]
}
 801030a:	46c0      	nop			@ (mov r8, r8)
 801030c:	46bd      	mov	sp, r7
 801030e:	b004      	add	sp, #16
 8010310:	bd80      	pop	{r7, pc}
	...

08010314 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2280      	movs	r2, #128	@ 0x80
 8010322:	589c      	ldr	r4, [r3, r2]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2284      	movs	r2, #132	@ 0x84
 8010328:	589b      	ldr	r3, [r3, r2]
 801032a:	1c19      	adds	r1, r3, #0
 801032c:	6838      	ldr	r0, [r7, #0]
 801032e:	f7f0 ffe1 	bl	80012f4 <__aeabi_fsub>
 8010332:	1c03      	adds	r3, r0, #0
 8010334:	1c19      	adds	r1, r3, #0
 8010336:	1c20      	adds	r0, r4, #0
 8010338:	f7f0 fe82 	bl	8001040 <__aeabi_fmul>
 801033c:	1c03      	adds	r3, r0, #0
 801033e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8010340:	4940      	ldr	r1, [pc, #256]	@ (8010444 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8010342:	68b8      	ldr	r0, [r7, #8]
 8010344:	f7f0 f8f4 	bl	8000530 <__aeabi_fcmplt>
 8010348:	1e03      	subs	r3, r0, #0
 801034a:	d001      	beq.n	8010350 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 801034c:	4b3e      	ldr	r3, [pc, #248]	@ (8010448 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801034e:	e075      	b.n	801043c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8010350:	493e      	ldr	r1, [pc, #248]	@ (801044c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8010352:	68b8      	ldr	r0, [r7, #8]
 8010354:	f7f0 f900 	bl	8000558 <__aeabi_fcmpgt>
 8010358:	1e03      	subs	r3, r0, #0
 801035a:	d001      	beq.n	8010360 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 801035c:	2300      	movs	r3, #0
 801035e:	e06d      	b.n	801043c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8010360:	2100      	movs	r1, #0
 8010362:	6838      	ldr	r0, [r7, #0]
 8010364:	f7f0 f902 	bl	800056c <__aeabi_fcmpge>
 8010368:	1e03      	subs	r3, r0, #0
 801036a:	d047      	beq.n	80103fc <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2288      	movs	r2, #136	@ 0x88
 8010370:	589b      	ldr	r3, [r3, r2]
 8010372:	21fe      	movs	r1, #254	@ 0xfe
 8010374:	0589      	lsls	r1, r1, #22
 8010376:	1c18      	adds	r0, r3, #0
 8010378:	f7f0 f8d4 	bl	8000524 <__aeabi_fcmpeq>
 801037c:	1e03      	subs	r3, r0, #0
 801037e:	d00e      	beq.n	801039e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	1c19      	adds	r1, r3, #0
 8010386:	20fe      	movs	r0, #254	@ 0xfe
 8010388:	0580      	lsls	r0, r0, #22
 801038a:	f7f0 ffb3 	bl	80012f4 <__aeabi_fsub>
 801038e:	1c03      	adds	r3, r0, #0
 8010390:	492f      	ldr	r1, [pc, #188]	@ (8010450 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8010392:	1c18      	adds	r0, r3, #0
 8010394:	f7f0 fe54 	bl	8001040 <__aeabi_fmul>
 8010398:	1c03      	adds	r3, r0, #0
 801039a:	60fb      	str	r3, [r7, #12]
 801039c:	e012      	b.n	80103c4 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	492c      	ldr	r1, [pc, #176]	@ (8010454 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80103a4:	1c18      	adds	r0, r3, #0
 80103a6:	f7f0 fe4b 	bl	8001040 <__aeabi_fmul>
 80103aa:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80103ac:	1c19      	adds	r1, r3, #0
 80103ae:	4826      	ldr	r0, [pc, #152]	@ (8010448 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80103b0:	f7f0 ffa0 	bl	80012f4 <__aeabi_fsub>
 80103b4:	1c03      	adds	r3, r0, #0
 80103b6:	2181      	movs	r1, #129	@ 0x81
 80103b8:	05c9      	lsls	r1, r1, #23
 80103ba:	1c18      	adds	r0, r3, #0
 80103bc:	f7f0 fc72 	bl	8000ca4 <__aeabi_fdiv>
 80103c0:	1c03      	adds	r3, r0, #0
 80103c2:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80103c4:	4920      	ldr	r1, [pc, #128]	@ (8010448 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f7f0 fa7a 	bl	80008c0 <__aeabi_fadd>
 80103cc:	1c03      	adds	r3, r0, #0
 80103ce:	1c1c      	adds	r4, r3, #0
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	1c18      	adds	r0, r3, #0
 80103d4:	f018 fca2 	bl	8028d1c <expf>
 80103d8:	1c03      	adds	r3, r0, #0
 80103da:	21fe      	movs	r1, #254	@ 0xfe
 80103dc:	0589      	lsls	r1, r1, #22
 80103de:	1c18      	adds	r0, r3, #0
 80103e0:	f7f0 fa6e 	bl	80008c0 <__aeabi_fadd>
 80103e4:	1c03      	adds	r3, r0, #0
 80103e6:	1c19      	adds	r1, r3, #0
 80103e8:	1c20      	adds	r0, r4, #0
 80103ea:	f7f0 fc5b 	bl	8000ca4 <__aeabi_fdiv>
 80103ee:	1c03      	adds	r3, r0, #0
 80103f0:	68f9      	ldr	r1, [r7, #12]
 80103f2:	1c18      	adds	r0, r3, #0
 80103f4:	f7f0 ff7e 	bl	80012f4 <__aeabi_fsub>
 80103f8:	1c03      	adds	r3, r0, #0
 80103fa:	e01f      	b.n	801043c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2188      	movs	r1, #136	@ 0x88
 8010404:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8010406:	1c19      	adds	r1, r3, #0
 8010408:	1c10      	adds	r0, r2, #0
 801040a:	f7f0 fc4b 	bl	8000ca4 <__aeabi_fdiv>
 801040e:	1c03      	adds	r3, r0, #0
 8010410:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	1c18      	adds	r0, r3, #0
 8010416:	f018 fc81 	bl	8028d1c <expf>
 801041a:	1c03      	adds	r3, r0, #0
 801041c:	21fe      	movs	r1, #254	@ 0xfe
 801041e:	0589      	lsls	r1, r1, #22
 8010420:	1c18      	adds	r0, r3, #0
 8010422:	f7f0 fa4d 	bl	80008c0 <__aeabi_fadd>
 8010426:	1c03      	adds	r3, r0, #0
 8010428:	1c19      	adds	r1, r3, #0
 801042a:	4807      	ldr	r0, [pc, #28]	@ (8010448 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801042c:	f7f0 fc3a 	bl	8000ca4 <__aeabi_fdiv>
 8010430:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010432:	1c19      	adds	r1, r3, #0
 8010434:	1c20      	adds	r0, r4, #0
 8010436:	f7f0 fe03 	bl	8001040 <__aeabi_fmul>
 801043a:	1c03      	adds	r3, r0, #0
        }
    }
}
 801043c:	1c18      	adds	r0, r3, #0
 801043e:	46bd      	mov	sp, r7
 8010440:	b005      	add	sp, #20
 8010442:	bd90      	pop	{r4, r7, pc}
 8010444:	c2480000 	.word	0xc2480000
 8010448:	43fa0000 	.word	0x43fa0000
 801044c:	42480000 	.word	0x42480000
 8010450:	3f8041ab 	.word	0x3f8041ab
 8010454:	40a00000 	.word	0x40a00000

08010458 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8010458:	b590      	push	{r4, r7, lr}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	4913      	ldr	r1, [pc, #76]	@ (80104b8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 801046a:	1c18      	adds	r0, r3, #0
 801046c:	f7f0 fa28 	bl	80008c0 <__aeabi_fadd>
 8010470:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8010472:	1c19      	adds	r1, r3, #0
 8010474:	1c20      	adds	r0, r4, #0
 8010476:	f7f0 fc15 	bl	8000ca4 <__aeabi_fdiv>
 801047a:	1c03      	adds	r3, r0, #0
 801047c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	228c      	movs	r2, #140	@ 0x8c
 8010482:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	490b      	ldr	r1, [pc, #44]	@ (80104bc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 801048e:	1c18      	adds	r0, r3, #0
 8010490:	f7f0 fa16 	bl	80008c0 <__aeabi_fadd>
 8010494:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8010496:	1c19      	adds	r1, r3, #0
 8010498:	1c20      	adds	r0, r4, #0
 801049a:	f7f0 fc03 	bl	8000ca4 <__aeabi_fdiv>
 801049e:	1c03      	adds	r3, r0, #0
 80104a0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2290      	movs	r2, #144	@ 0x90
 80104a6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2294      	movs	r2, #148	@ 0x94
 80104ac:	2100      	movs	r1, #0
 80104ae:	5499      	strb	r1, [r3, r2]
}
 80104b0:	46c0      	nop			@ (mov r8, r8)
 80104b2:	46bd      	mov	sp, r7
 80104b4:	b003      	add	sp, #12
 80104b6:	bd90      	pop	{r4, r7, pc}
 80104b8:	41a00000 	.word	0x41a00000
 80104bc:	43fa0000 	.word	0x43fa0000

080104c0 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80104c0:	b590      	push	{r4, r7, lr}
 80104c2:	b087      	sub	sp, #28
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2294      	movs	r2, #148	@ 0x94
 80104ce:	5c9b      	ldrb	r3, [r3, r2]
 80104d0:	2201      	movs	r2, #1
 80104d2:	4053      	eors	r3, r2
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00f      	beq.n	80104fa <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2198      	movs	r1, #152	@ 0x98
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	219c      	movs	r1, #156	@ 0x9c
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	21a0      	movs	r1, #160	@ 0xa0
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2294      	movs	r2, #148	@ 0x94
 80104f6:	2101      	movs	r1, #1
 80104f8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	228c      	movs	r2, #140	@ 0x8c
 80104fe:	589b      	ldr	r3, [r3, r2]
 8010500:	1c19      	adds	r1, r3, #0
 8010502:	20fe      	movs	r0, #254	@ 0xfe
 8010504:	0580      	lsls	r0, r0, #22
 8010506:	f7f0 fef5 	bl	80012f4 <__aeabi_fsub>
 801050a:	1c03      	adds	r3, r0, #0
 801050c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2298      	movs	r2, #152	@ 0x98
 8010512:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010514:	1c19      	adds	r1, r3, #0
 8010516:	f7f0 fd93 	bl	8001040 <__aeabi_fmul>
 801051a:	1c03      	adds	r3, r0, #0
 801051c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	228c      	movs	r2, #140	@ 0x8c
 8010522:	589b      	ldr	r3, [r3, r2]
 8010524:	6839      	ldr	r1, [r7, #0]
 8010526:	1c18      	adds	r0, r3, #0
 8010528:	f7f0 fd8a 	bl	8001040 <__aeabi_fmul>
 801052c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 801052e:	1c19      	adds	r1, r3, #0
 8010530:	1c20      	adds	r0, r4, #0
 8010532:	f7f0 f9c5 	bl	80008c0 <__aeabi_fadd>
 8010536:	1c03      	adds	r3, r0, #0
 8010538:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2298      	movs	r2, #152	@ 0x98
 801053e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2290      	movs	r2, #144	@ 0x90
 8010544:	589b      	ldr	r3, [r3, r2]
 8010546:	1c19      	adds	r1, r3, #0
 8010548:	20fe      	movs	r0, #254	@ 0xfe
 801054a:	0580      	lsls	r0, r0, #22
 801054c:	f7f0 fed2 	bl	80012f4 <__aeabi_fsub>
 8010550:	1c03      	adds	r3, r0, #0
 8010552:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	229c      	movs	r2, #156	@ 0x9c
 8010558:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 801055a:	1c19      	adds	r1, r3, #0
 801055c:	f7f0 fd70 	bl	8001040 <__aeabi_fmul>
 8010560:	1c03      	adds	r3, r0, #0
 8010562:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2290      	movs	r2, #144	@ 0x90
 8010568:	589b      	ldr	r3, [r3, r2]
 801056a:	6839      	ldr	r1, [r7, #0]
 801056c:	1c18      	adds	r0, r3, #0
 801056e:	f7f0 fd67 	bl	8001040 <__aeabi_fmul>
 8010572:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8010574:	1c19      	adds	r1, r3, #0
 8010576:	1c20      	adds	r0, r4, #0
 8010578:	f7f0 f9a2 	bl	80008c0 <__aeabi_fadd>
 801057c:	1c03      	adds	r3, r0, #0
 801057e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	229c      	movs	r2, #156	@ 0x9c
 8010584:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2298      	movs	r2, #152	@ 0x98
 801058a:	589a      	ldr	r2, [r3, r2]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	219c      	movs	r1, #156	@ 0x9c
 8010590:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8010592:	1c19      	adds	r1, r3, #0
 8010594:	1c10      	adds	r0, r2, #0
 8010596:	f7f0 fead 	bl	80012f4 <__aeabi_fsub>
 801059a:	1c03      	adds	r3, r0, #0
 801059c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 801059e:	2100      	movs	r1, #0
 80105a0:	6978      	ldr	r0, [r7, #20]
 80105a2:	f7ef ffc5 	bl	8000530 <__aeabi_fcmplt>
 80105a6:	1e03      	subs	r3, r0, #0
 80105a8:	d004      	beq.n	80105b4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2280      	movs	r2, #128	@ 0x80
 80105ae:	0612      	lsls	r2, r2, #24
 80105b0:	4053      	eors	r3, r2
 80105b2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80105b4:	4923      	ldr	r1, [pc, #140]	@ (8010644 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80105b6:	6978      	ldr	r0, [r7, #20]
 80105b8:	f7f0 fd42 	bl	8001040 <__aeabi_fmul>
 80105bc:	1c03      	adds	r3, r0, #0
 80105be:	1c18      	adds	r0, r3, #0
 80105c0:	f018 fbac 	bl	8028d1c <expf>
 80105c4:	1c03      	adds	r3, r0, #0
 80105c6:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80105c8:	491f      	ldr	r1, [pc, #124]	@ (8010648 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80105ca:	6938      	ldr	r0, [r7, #16]
 80105cc:	f7f0 fd38 	bl	8001040 <__aeabi_fmul>
 80105d0:	1c03      	adds	r3, r0, #0
 80105d2:	491e      	ldr	r1, [pc, #120]	@ (801064c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80105d4:	1c18      	adds	r0, r3, #0
 80105d6:	f7f0 f973 	bl	80008c0 <__aeabi_fadd>
 80105da:	1c03      	adds	r3, r0, #0
 80105dc:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	685c      	ldr	r4, [r3, #4]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	68f9      	ldr	r1, [r7, #12]
 80105e8:	1c18      	adds	r0, r3, #0
 80105ea:	f7f0 f969 	bl	80008c0 <__aeabi_fadd>
 80105ee:	1c03      	adds	r3, r0, #0
 80105f0:	1c19      	adds	r1, r3, #0
 80105f2:	1c20      	adds	r0, r4, #0
 80105f4:	f7f0 fb56 	bl	8000ca4 <__aeabi_fdiv>
 80105f8:	1c03      	adds	r3, r0, #0
 80105fa:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	20fe      	movs	r0, #254	@ 0xfe
 8010600:	0580      	lsls	r0, r0, #22
 8010602:	f7f0 fe77 	bl	80012f4 <__aeabi_fsub>
 8010606:	1c03      	adds	r3, r0, #0
 8010608:	1c18      	adds	r0, r3, #0
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	22a0      	movs	r2, #160	@ 0xa0
 801060e:	589b      	ldr	r3, [r3, r2]
 8010610:	1c19      	adds	r1, r3, #0
 8010612:	f7f0 fd15 	bl	8001040 <__aeabi_fmul>
 8010616:	1c03      	adds	r3, r0, #0
 8010618:	1c1c      	adds	r4, r3, #0
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	68b8      	ldr	r0, [r7, #8]
 801061e:	f7f0 fd0f 	bl	8001040 <__aeabi_fmul>
 8010622:	1c03      	adds	r3, r0, #0
 8010624:	1c19      	adds	r1, r3, #0
 8010626:	1c20      	adds	r0, r4, #0
 8010628:	f7f0 f94a 	bl	80008c0 <__aeabi_fadd>
 801062c:	1c03      	adds	r3, r0, #0
 801062e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	22a0      	movs	r2, #160	@ 0xa0
 8010634:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	22a0      	movs	r2, #160	@ 0xa0
 801063a:	589b      	ldr	r3, [r3, r2]
}
 801063c:	1c18      	adds	r0, r3, #0
 801063e:	46bd      	mov	sp, r7
 8010640:	b007      	add	sp, #28
 8010642:	bd90      	pop	{r4, r7, pc}
 8010644:	be4ccccd 	.word	0xbe4ccccd
 8010648:	43f00000 	.word	0x43f00000
 801064c:	41a00000 	.word	0x41a00000

08010650 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	000a      	movs	r2, r1
 801065a:	1cbb      	adds	r3, r7, #2
 801065c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 801065e:	230d      	movs	r3, #13
 8010660:	18fb      	adds	r3, r7, r3
 8010662:	22ff      	movs	r2, #255	@ 0xff
 8010664:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010666:	230e      	movs	r3, #14
 8010668:	18fb      	adds	r3, r7, r3
 801066a:	2200      	movs	r2, #0
 801066c:	801a      	strh	r2, [r3, #0]
 801066e:	e038      	b.n	80106e2 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8010670:	230e      	movs	r3, #14
 8010672:	18fb      	adds	r3, r7, r3
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	18d3      	adds	r3, r2, r3
 801067a:	7819      	ldrb	r1, [r3, #0]
 801067c:	220d      	movs	r2, #13
 801067e:	18bb      	adds	r3, r7, r2
 8010680:	18ba      	adds	r2, r7, r2
 8010682:	7812      	ldrb	r2, [r2, #0]
 8010684:	404a      	eors	r2, r1
 8010686:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010688:	230c      	movs	r3, #12
 801068a:	18fb      	adds	r3, r7, r3
 801068c:	2208      	movs	r2, #8
 801068e:	701a      	strb	r2, [r3, #0]
 8010690:	e01c      	b.n	80106cc <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8010692:	210d      	movs	r1, #13
 8010694:	187b      	adds	r3, r7, r1
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	b25b      	sxtb	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	da0a      	bge.n	80106b4 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 801069e:	187b      	adds	r3, r7, r1
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	b25b      	sxtb	r3, r3
 80106a4:	18db      	adds	r3, r3, r3
 80106a6:	b25b      	sxtb	r3, r3
 80106a8:	2231      	movs	r2, #49	@ 0x31
 80106aa:	4053      	eors	r3, r2
 80106ac:	b25a      	sxtb	r2, r3
 80106ae:	187b      	adds	r3, r7, r1
 80106b0:	701a      	strb	r2, [r3, #0]
 80106b2:	e005      	b.n	80106c0 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80106b4:	230d      	movs	r3, #13
 80106b6:	18fa      	adds	r2, r7, r3
 80106b8:	18fb      	adds	r3, r7, r3
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	18db      	adds	r3, r3, r3
 80106be:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80106c0:	220c      	movs	r2, #12
 80106c2:	18bb      	adds	r3, r7, r2
 80106c4:	18ba      	adds	r2, r7, r2
 80106c6:	7812      	ldrb	r2, [r2, #0]
 80106c8:	3a01      	subs	r2, #1
 80106ca:	701a      	strb	r2, [r3, #0]
 80106cc:	230c      	movs	r3, #12
 80106ce:	18fb      	adds	r3, r7, r3
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1dd      	bne.n	8010692 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80106d6:	220e      	movs	r2, #14
 80106d8:	18bb      	adds	r3, r7, r2
 80106da:	18ba      	adds	r2, r7, r2
 80106dc:	8812      	ldrh	r2, [r2, #0]
 80106de:	3201      	adds	r2, #1
 80106e0:	801a      	strh	r2, [r3, #0]
 80106e2:	230e      	movs	r3, #14
 80106e4:	18fa      	adds	r2, r7, r3
 80106e6:	1cbb      	adds	r3, r7, #2
 80106e8:	8812      	ldrh	r2, [r2, #0]
 80106ea:	881b      	ldrh	r3, [r3, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d3bf      	bcc.n	8010670 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80106f0:	230d      	movs	r3, #13
 80106f2:	18fb      	adds	r3, r7, r3
 80106f4:	781b      	ldrb	r3, [r3, #0]
}
 80106f6:	0018      	movs	r0, r3
 80106f8:	46bd      	mov	sp, r7
 80106fa:	b004      	add	sp, #16
 80106fc:	bd80      	pop	{r7, pc}

080106fe <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80106fe:	b580      	push	{r7, lr}
 8010700:	b082      	sub	sp, #8
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
 8010706:	0008      	movs	r0, r1
 8010708:	0011      	movs	r1, r2
 801070a:	1cbb      	adds	r3, r7, #2
 801070c:	1c02      	adds	r2, r0, #0
 801070e:	801a      	strh	r2, [r3, #0]
 8010710:	1c7b      	adds	r3, r7, #1
 8010712:	1c0a      	adds	r2, r1, #0
 8010714:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010716:	1cbb      	adds	r3, r7, #2
 8010718:	881a      	ldrh	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	0011      	movs	r1, r2
 801071e:	0018      	movs	r0, r3
 8010720:	f7ff ff96 	bl	8010650 <sensirion_i2c_generate_crc>
 8010724:	0003      	movs	r3, r0
 8010726:	001a      	movs	r2, r3
 8010728:	1c7b      	adds	r3, r7, #1
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	4293      	cmp	r3, r2
 801072e:	d001      	beq.n	8010734 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010730:	2301      	movs	r3, #1
 8010732:	e000      	b.n	8010736 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010734:	2300      	movs	r3, #0
}
 8010736:	0018      	movs	r0, r3
 8010738:	46bd      	mov	sp, r7
 801073a:	b002      	add	sp, #8
 801073c:	bd80      	pop	{r7, pc}

0801073e <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	0008      	movs	r0, r1
 8010748:	0011      	movs	r1, r2
 801074a:	1cbb      	adds	r3, r7, #2
 801074c:	1c02      	adds	r2, r0, #0
 801074e:	801a      	strh	r2, [r3, #0]
 8010750:	003b      	movs	r3, r7
 8010752:	1c0a      	adds	r2, r1, #0
 8010754:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010756:	003b      	movs	r3, r7
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	0a1b      	lsrs	r3, r3, #8
 801075c:	b299      	uxth	r1, r3
 801075e:	1cbb      	adds	r3, r7, #2
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	1cba      	adds	r2, r7, #2
 8010764:	1c58      	adds	r0, r3, #1
 8010766:	8010      	strh	r0, [r2, #0]
 8010768:	001a      	movs	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	189b      	adds	r3, r3, r2
 801076e:	b2ca      	uxtb	r2, r1
 8010770:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010772:	1cbb      	adds	r3, r7, #2
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	1cba      	adds	r2, r7, #2
 8010778:	1c59      	adds	r1, r3, #1
 801077a:	8011      	strh	r1, [r2, #0]
 801077c:	001a      	movs	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	189b      	adds	r3, r3, r2
 8010782:	003a      	movs	r2, r7
 8010784:	8812      	ldrh	r2, [r2, #0]
 8010786:	b2d2      	uxtb	r2, r2
 8010788:	701a      	strb	r2, [r3, #0]
    return offset;
 801078a:	1cbb      	adds	r3, r7, #2
 801078c:	881b      	ldrh	r3, [r3, #0]
}
 801078e:	0018      	movs	r0, r3
 8010790:	46bd      	mov	sp, r7
 8010792:	b002      	add	sp, #8
 8010794:	bd80      	pop	{r7, pc}

08010796 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010796:	b590      	push	{r4, r7, lr}
 8010798:	b083      	sub	sp, #12
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	0008      	movs	r0, r1
 80107a0:	0011      	movs	r1, r2
 80107a2:	1cbb      	adds	r3, r7, #2
 80107a4:	1c02      	adds	r2, r0, #0
 80107a6:	801a      	strh	r2, [r3, #0]
 80107a8:	003b      	movs	r3, r7
 80107aa:	1c0a      	adds	r2, r1, #0
 80107ac:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80107ae:	003b      	movs	r3, r7
 80107b0:	881b      	ldrh	r3, [r3, #0]
 80107b2:	0a1b      	lsrs	r3, r3, #8
 80107b4:	b299      	uxth	r1, r3
 80107b6:	1cbb      	adds	r3, r7, #2
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	1cba      	adds	r2, r7, #2
 80107bc:	1c58      	adds	r0, r3, #1
 80107be:	8010      	strh	r0, [r2, #0]
 80107c0:	001a      	movs	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	189b      	adds	r3, r3, r2
 80107c6:	b2ca      	uxtb	r2, r1
 80107c8:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 80107ca:	1cbb      	adds	r3, r7, #2
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	1cba      	adds	r2, r7, #2
 80107d0:	1c59      	adds	r1, r3, #1
 80107d2:	8011      	strh	r1, [r2, #0]
 80107d4:	001a      	movs	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	189b      	adds	r3, r3, r2
 80107da:	003a      	movs	r2, r7
 80107dc:	8812      	ldrh	r2, [r2, #0]
 80107de:	b2d2      	uxtb	r2, r2
 80107e0:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 80107e2:	1cbb      	adds	r3, r7, #2
 80107e4:	881b      	ldrh	r3, [r3, #0]
 80107e6:	3b02      	subs	r3, #2
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 80107ec:	1cbb      	adds	r3, r7, #2
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	18d4      	adds	r4, r2, r3
 80107f4:	2102      	movs	r1, #2
 80107f6:	f7ff ff2b 	bl	8010650 <sensirion_i2c_generate_crc>
 80107fa:	0003      	movs	r3, r0
 80107fc:	7023      	strb	r3, [r4, #0]
    offset++;
 80107fe:	1cbb      	adds	r3, r7, #2
 8010800:	881a      	ldrh	r2, [r3, #0]
 8010802:	1cbb      	adds	r3, r7, #2
 8010804:	3201      	adds	r2, #1
 8010806:	801a      	strh	r2, [r3, #0]

    return offset;
 8010808:	1cbb      	adds	r3, r7, #2
 801080a:	881b      	ldrh	r3, [r3, #0]
}
 801080c:	0018      	movs	r0, r3
 801080e:	46bd      	mov	sp, r7
 8010810:	b003      	add	sp, #12
 8010812:	bd90      	pop	{r4, r7, pc}

08010814 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	0008      	movs	r0, r1
 801081e:	0011      	movs	r1, r2
 8010820:	1cbb      	adds	r3, r7, #2
 8010822:	1c02      	adds	r2, r0, #0
 8010824:	801a      	strh	r2, [r3, #0]
 8010826:	003b      	movs	r3, r7
 8010828:	1c0a      	adds	r2, r1, #0
 801082a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 801082c:	003b      	movs	r3, r7
 801082e:	881a      	ldrh	r2, [r3, #0]
 8010830:	1cbb      	adds	r3, r7, #2
 8010832:	8819      	ldrh	r1, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	0018      	movs	r0, r3
 8010838:	f7ff ffad 	bl	8010796 <sensirion_i2c_add_uint16_t_to_buffer>
 801083c:	0003      	movs	r3, r0
}
 801083e:	0018      	movs	r0, r3
 8010840:	46bd      	mov	sp, r7
 8010842:	b002      	add	sp, #8
 8010844:	bd80      	pop	{r7, pc}

08010846 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010846:	b580      	push	{r7, lr}
 8010848:	b082      	sub	sp, #8
 801084a:	af00      	add	r7, sp, #0
 801084c:	6039      	str	r1, [r7, #0]
 801084e:	0011      	movs	r1, r2
 8010850:	1dfb      	adds	r3, r7, #7
 8010852:	1c02      	adds	r2, r0, #0
 8010854:	701a      	strb	r2, [r3, #0]
 8010856:	1d3b      	adds	r3, r7, #4
 8010858:	1c0a      	adds	r2, r1, #0
 801085a:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 801085c:	1d3b      	adds	r3, r7, #4
 801085e:	881a      	ldrh	r2, [r3, #0]
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	1dfb      	adds	r3, r7, #7
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	0018      	movs	r0, r3
 8010868:	f7fe f9b0 	bl	800ebcc <sensirion_i2c_hal_write>
 801086c:	0003      	movs	r3, r0
}
 801086e:	0018      	movs	r0, r3
 8010870:	46bd      	mov	sp, r7
 8010872:	b002      	add	sp, #8
 8010874:	bd80      	pop	{r7, pc}

08010876 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010876:	b5b0      	push	{r4, r5, r7, lr}
 8010878:	b084      	sub	sp, #16
 801087a:	af00      	add	r7, sp, #0
 801087c:	6039      	str	r1, [r7, #0]
 801087e:	0011      	movs	r1, r2
 8010880:	1dfb      	adds	r3, r7, #7
 8010882:	1c02      	adds	r2, r0, #0
 8010884:	701a      	strb	r2, [r3, #0]
 8010886:	1d3b      	adds	r3, r7, #4
 8010888:	1c0a      	adds	r2, r1, #0
 801088a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 801088c:	1d3b      	adds	r3, r7, #4
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	085b      	lsrs	r3, r3, #1
 8010892:	b29b      	uxth	r3, r3
 8010894:	220a      	movs	r2, #10
 8010896:	18ba      	adds	r2, r7, r2
 8010898:	1c19      	adds	r1, r3, #0
 801089a:	1c0b      	adds	r3, r1, #0
 801089c:	18db      	adds	r3, r3, r3
 801089e:	185b      	adds	r3, r3, r1
 80108a0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80108a2:	1d3b      	adds	r3, r7, #4
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	2201      	movs	r2, #1
 80108a8:	4013      	ands	r3, r2
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d001      	beq.n	80108b4 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80108b0:	2304      	movs	r3, #4
 80108b2:	e06b      	b.n	801098c <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80108b4:	230a      	movs	r3, #10
 80108b6:	18fb      	adds	r3, r7, r3
 80108b8:	881a      	ldrh	r2, [r3, #0]
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	1dfb      	adds	r3, r7, #7
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	0018      	movs	r0, r3
 80108c2:	f7fe f963 	bl	800eb8c <sensirion_i2c_hal_read>
 80108c6:	0003      	movs	r3, r0
 80108c8:	001a      	movs	r2, r3
 80108ca:	2108      	movs	r1, #8
 80108cc:	187b      	adds	r3, r7, r1
 80108ce:	801a      	strh	r2, [r3, #0]
    if (error) {
 80108d0:	000a      	movs	r2, r1
 80108d2:	18bb      	adds	r3, r7, r2
 80108d4:	2100      	movs	r1, #0
 80108d6:	5e5b      	ldrsh	r3, [r3, r1]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d003      	beq.n	80108e4 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 80108dc:	18bb      	adds	r3, r7, r2
 80108de:	2200      	movs	r2, #0
 80108e0:	5e9b      	ldrsh	r3, [r3, r2]
 80108e2:	e053      	b.n	801098c <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80108e4:	230e      	movs	r3, #14
 80108e6:	18fb      	adds	r3, r7, r3
 80108e8:	2200      	movs	r2, #0
 80108ea:	801a      	strh	r2, [r3, #0]
 80108ec:	230c      	movs	r3, #12
 80108ee:	18fb      	adds	r3, r7, r3
 80108f0:	2200      	movs	r2, #0
 80108f2:	801a      	strh	r2, [r3, #0]
 80108f4:	e041      	b.n	801097a <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80108f6:	210e      	movs	r1, #14
 80108f8:	187b      	adds	r3, r7, r1
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010900:	187b      	adds	r3, r7, r1
 8010902:	881b      	ldrh	r3, [r3, #0]
 8010904:	3302      	adds	r3, #2
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	001a      	movs	r2, r3
 801090e:	2102      	movs	r1, #2
 8010910:	f7ff fef5 	bl	80106fe <sensirion_i2c_check_crc>
 8010914:	0003      	movs	r3, r0
 8010916:	001a      	movs	r2, r3
 8010918:	2108      	movs	r1, #8
 801091a:	187b      	adds	r3, r7, r1
 801091c:	801a      	strh	r2, [r3, #0]
        if (error) {
 801091e:	000a      	movs	r2, r1
 8010920:	18bb      	adds	r3, r7, r2
 8010922:	2100      	movs	r1, #0
 8010924:	5e5b      	ldrsh	r3, [r3, r1]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d003      	beq.n	8010932 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 801092a:	18bb      	adds	r3, r7, r2
 801092c:	2200      	movs	r2, #0
 801092e:	5e9b      	ldrsh	r3, [r3, r2]
 8010930:	e02c      	b.n	801098c <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010932:	240e      	movs	r4, #14
 8010934:	193b      	adds	r3, r7, r4
 8010936:	881b      	ldrh	r3, [r3, #0]
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	18d2      	adds	r2, r2, r3
 801093c:	250c      	movs	r5, #12
 801093e:	197b      	adds	r3, r7, r5
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	1979      	adds	r1, r7, r5
 8010944:	1c58      	adds	r0, r3, #1
 8010946:	8008      	strh	r0, [r1, #0]
 8010948:	0019      	movs	r1, r3
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	185b      	adds	r3, r3, r1
 801094e:	7812      	ldrb	r2, [r2, #0]
 8010950:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010952:	193b      	adds	r3, r7, r4
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	3301      	adds	r3, #1
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	18d2      	adds	r2, r2, r3
 801095c:	197b      	adds	r3, r7, r5
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	1979      	adds	r1, r7, r5
 8010962:	1c58      	adds	r0, r3, #1
 8010964:	8008      	strh	r0, [r1, #0]
 8010966:	0019      	movs	r1, r3
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	185b      	adds	r3, r3, r1
 801096c:	7812      	ldrb	r2, [r2, #0]
 801096e:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010970:	193b      	adds	r3, r7, r4
 8010972:	193a      	adds	r2, r7, r4
 8010974:	8812      	ldrh	r2, [r2, #0]
 8010976:	3203      	adds	r2, #3
 8010978:	801a      	strh	r2, [r3, #0]
 801097a:	230e      	movs	r3, #14
 801097c:	18fa      	adds	r2, r7, r3
 801097e:	230a      	movs	r3, #10
 8010980:	18fb      	adds	r3, r7, r3
 8010982:	8812      	ldrh	r2, [r2, #0]
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	429a      	cmp	r2, r3
 8010988:	d3b5      	bcc.n	80108f6 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 801098a:	2300      	movs	r3, #0
}
 801098c:	0018      	movs	r0, r3
 801098e:	46bd      	mov	sp, r7
 8010990:	b004      	add	sp, #16
 8010992:	bdb0      	pop	{r4, r5, r7, pc}

08010994 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010994:	b590      	push	{r4, r7, lr}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6039      	str	r1, [r7, #0]
 801099c:	0011      	movs	r1, r2
 801099e:	1dfb      	adds	r3, r7, #7
 80109a0:	1c02      	adds	r2, r0, #0
 80109a2:	701a      	strb	r2, [r3, #0]
 80109a4:	1dbb      	adds	r3, r7, #6
 80109a6:	1c0a      	adds	r2, r1, #0
 80109a8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80109aa:	4b08      	ldr	r3, [pc, #32]	@ (80109cc <ReadRegister+0x38>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d008      	beq.n	80109c4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80109b2:	4b06      	ldr	r3, [pc, #24]	@ (80109cc <ReadRegister+0x38>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	1dba      	adds	r2, r7, #6
 80109b8:	7814      	ldrb	r4, [r2, #0]
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	1dfa      	adds	r2, r7, #7
 80109be:	7810      	ldrb	r0, [r2, #0]
 80109c0:	0022      	movs	r2, r4
 80109c2:	4798      	blx	r3
  }
}
 80109c4:	46c0      	nop			@ (mov r8, r8)
 80109c6:	46bd      	mov	sp, r7
 80109c8:	b003      	add	sp, #12
 80109ca:	bd90      	pop	{r4, r7, pc}
 80109cc:	20001040 	.word	0x20001040

080109d0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80109d0:	b590      	push	{r4, r7, lr}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6039      	str	r1, [r7, #0]
 80109d8:	0011      	movs	r1, r2
 80109da:	1dfb      	adds	r3, r7, #7
 80109dc:	1c02      	adds	r2, r0, #0
 80109de:	701a      	strb	r2, [r3, #0]
 80109e0:	1dbb      	adds	r3, r7, #6
 80109e2:	1c0a      	adds	r2, r1, #0
 80109e4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80109e6:	4b08      	ldr	r3, [pc, #32]	@ (8010a08 <WriteRegister+0x38>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d008      	beq.n	8010a00 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80109ee:	4b06      	ldr	r3, [pc, #24]	@ (8010a08 <WriteRegister+0x38>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	1dba      	adds	r2, r7, #6
 80109f4:	7814      	ldrb	r4, [r2, #0]
 80109f6:	6839      	ldr	r1, [r7, #0]
 80109f8:	1dfa      	adds	r2, r7, #7
 80109fa:	7810      	ldrb	r0, [r2, #0]
 80109fc:	0022      	movs	r2, r4
 80109fe:	4798      	blx	r3
  }
}
 8010a00:	46c0      	nop			@ (mov r8, r8)
 8010a02:	46bd      	mov	sp, r7
 8010a04:	b003      	add	sp, #12
 8010a06:	bd90      	pop	{r4, r7, pc}
 8010a08:	20001044 	.word	0x20001044

08010a0c <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010a14:	f003 fd9a 	bl	801454c <HAL_GetTick>
 8010a18:	0002      	movs	r2, r0
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	18d2      	adds	r2, r2, r3
 8010a1e:	4b03      	ldr	r3, [pc, #12]	@ (8010a2c <setSGP40TimeStamp+0x20>)
 8010a20:	601a      	str	r2, [r3, #0]
}
 8010a22:	46c0      	nop			@ (mov r8, r8)
 8010a24:	46bd      	mov	sp, r7
 8010a26:	b002      	add	sp, #8
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	46c0      	nop			@ (mov r8, r8)
 8010a2c:	20001054 	.word	0x20001054

08010a30 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010a30:	b580      	push	{r7, lr}
 8010a32:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010a34:	4b02      	ldr	r3, [pc, #8]	@ (8010a40 <ResetSGP40samplecounter+0x10>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	701a      	strb	r2, [r3, #0]
}
 8010a3a:	46c0      	nop			@ (mov r8, r8)
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	20001052 	.word	0x20001052

08010a44 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010a4e:	4b07      	ldr	r3, [pc, #28]	@ (8010a6c <SGP_Init+0x28>)
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010a54:	4b06      	ldr	r3, [pc, #24]	@ (8010a70 <SGP_Init+0x2c>)
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010a5a:	4b06      	ldr	r3, [pc, #24]	@ (8010a74 <SGP_Init+0x30>)
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	0018      	movs	r0, r3
 8010a60:	f7fe ff72 	bl	800f948 <GasIndexAlgorithm_init>
}
 8010a64:	46c0      	nop			@ (mov r8, r8)
 8010a66:	46bd      	mov	sp, r7
 8010a68:	b002      	add	sp, #8
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	20001040 	.word	0x20001040
 8010a70:	20001044 	.word	0x20001044
 8010a74:	2000105c 	.word	0x2000105c

08010a78 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010a7c:	4b07      	ldr	r3, [pc, #28]	@ (8010a9c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d004      	beq.n	8010a8e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010a84:	4b06      	ldr	r3, [pc, #24]	@ (8010aa0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010a86:	22fe      	movs	r2, #254	@ 0xfe
 8010a88:	0592      	lsls	r2, r2, #22
 8010a8a:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010a8c:	e002      	b.n	8010a94 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010a8e:	4b04      	ldr	r3, [pc, #16]	@ (8010aa0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010a90:	4a04      	ldr	r2, [pc, #16]	@ (8010aa4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010a92:	605a      	str	r2, [r3, #4]
}
 8010a94:	46c0      	nop			@ (mov r8, r8)
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	46c0      	nop			@ (mov r8, r8)
 8010a9c:	20001fa9 	.word	0x20001fa9
 8010aa0:	2000105c 	.word	0x2000105c
 8010aa4:	44610000 	.word	0x44610000

08010aa8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010aac:	4b13      	ldr	r3, [pc, #76]	@ (8010afc <SGP_StartMeasurement+0x54>)
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00d      	beq.n	8010ad0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010ab4:	4b12      	ldr	r3, [pc, #72]	@ (8010b00 <SGP_StartMeasurement+0x58>)
 8010ab6:	2208      	movs	r2, #8
 8010ab8:	0019      	movs	r1, r3
 8010aba:	2059      	movs	r0, #89	@ 0x59
 8010abc:	f7ff ff88 	bl	80109d0 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010ac0:	f003 fd44 	bl	801454c <HAL_GetTick>
 8010ac4:	0003      	movs	r3, r0
 8010ac6:	331e      	adds	r3, #30
 8010ac8:	001a      	movs	r2, r3
 8010aca:	4b0e      	ldr	r3, [pc, #56]	@ (8010b04 <SGP_StartMeasurement+0x5c>)
 8010acc:	601a      	str	r2, [r3, #0]
 8010ace:	e00c      	b.n	8010aea <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8010b08 <SGP_StartMeasurement+0x60>)
 8010ad2:	2208      	movs	r2, #8
 8010ad4:	0019      	movs	r1, r3
 8010ad6:	2059      	movs	r0, #89	@ 0x59
 8010ad8:	f7ff ff7a 	bl	80109d0 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010adc:	f003 fd36 	bl	801454c <HAL_GetTick>
 8010ae0:	0003      	movs	r3, r0
 8010ae2:	33aa      	adds	r3, #170	@ 0xaa
 8010ae4:	001a      	movs	r2, r3
 8010ae6:	4b09      	ldr	r3, [pc, #36]	@ (8010b0c <SGP_StartMeasurement+0x64>)
 8010ae8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010aea:	4b09      	ldr	r3, [pc, #36]	@ (8010b10 <SGP_StartMeasurement+0x68>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010af0:	4b08      	ldr	r3, [pc, #32]	@ (8010b14 <SGP_StartMeasurement+0x6c>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	701a      	strb	r2, [r3, #0]
}
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	20001104 	.word	0x20001104
 8010b00:	200000bc 	.word	0x200000bc
 8010b04:	200000d0 	.word	0x200000d0
 8010b08:	200000b4 	.word	0x200000b4
 8010b0c:	200000c8 	.word	0x200000c8
 8010b10:	20001058 	.word	0x20001058
 8010b14:	20001059 	.word	0x20001059

08010b18 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010b1c:	4b04      	ldr	r3, [pc, #16]	@ (8010b30 <SGP_HeatedUp+0x18>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	0018      	movs	r0, r3
 8010b22:	f002 ff7d 	bl	8013a20 <TimestampIsReached>
 8010b26:	0003      	movs	r3, r0
}
 8010b28:	0018      	movs	r0, r3
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	46c0      	nop			@ (mov r8, r8)
 8010b30:	200000c8 	.word	0x200000c8

08010b34 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010b38:	4b04      	ldr	r3, [pc, #16]	@ (8010b4c <SGP_MeasurementReady+0x18>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	0018      	movs	r0, r3
 8010b3e:	f002 ff6f 	bl	8013a20 <TimestampIsReached>
 8010b42:	0003      	movs	r3, r0
}
 8010b44:	0018      	movs	r0, r3
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	46c0      	nop			@ (mov r8, r8)
 8010b4c:	200000d0 	.word	0x200000d0

08010b50 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010b54:	4b04      	ldr	r3, [pc, #16]	@ (8010b68 <SGP_MeasurementDone+0x18>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	0018      	movs	r0, r3
 8010b5a:	f002 ff61 	bl	8013a20 <TimestampIsReached>
 8010b5e:	0003      	movs	r3, r0
}
 8010b60:	0018      	movs	r0, r3
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	46c0      	nop			@ (mov r8, r8)
 8010b68:	200000cc 	.word	0x200000cc

08010b6c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010b70:	4b04      	ldr	r3, [pc, #16]	@ (8010b84 <SGP_TurnHeaterOff+0x18>)
 8010b72:	2202      	movs	r2, #2
 8010b74:	0019      	movs	r1, r3
 8010b76:	2059      	movs	r0, #89	@ 0x59
 8010b78:	f7ff ff2a 	bl	80109d0 <WriteRegister>
}
 8010b7c:	46c0      	nop			@ (mov r8, r8)
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	46c0      	nop			@ (mov r8, r8)
 8010b84:	200000ac 	.word	0x200000ac

08010b88 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	af02      	add	r7, sp, #8
 8010b8e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010b90:	f7ff ffc2 	bl	8010b18 <SGP_HeatedUp>
 8010b94:	1e03      	subs	r3, r0, #0
 8010b96:	d032      	beq.n	8010bfe <SGP_GetMeasurementValues+0x76>
 8010b98:	4b80      	ldr	r3, [pc, #512]	@ (8010d9c <SGP_GetMeasurementValues+0x214>)
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	4053      	eors	r3, r2
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d02b      	beq.n	8010bfe <SGP_GetMeasurementValues+0x76>
 8010ba6:	4b7e      	ldr	r3, [pc, #504]	@ (8010da0 <SGP_GetMeasurementValues+0x218>)
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	2201      	movs	r2, #1
 8010bac:	4053      	eors	r3, r2
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d024      	beq.n	8010bfe <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010bb4:	4b79      	ldr	r3, [pc, #484]	@ (8010d9c <SGP_GetMeasurementValues+0x214>)
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010bba:	4b7a      	ldr	r3, [pc, #488]	@ (8010da4 <SGP_GetMeasurementValues+0x21c>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d00d      	beq.n	8010bde <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010bc2:	4b79      	ldr	r3, [pc, #484]	@ (8010da8 <SGP_GetMeasurementValues+0x220>)
 8010bc4:	2208      	movs	r2, #8
 8010bc6:	0019      	movs	r1, r3
 8010bc8:	2059      	movs	r0, #89	@ 0x59
 8010bca:	f7ff ff01 	bl	80109d0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010bce:	f003 fcbd 	bl	801454c <HAL_GetTick>
 8010bd2:	0003      	movs	r3, r0
 8010bd4:	331e      	adds	r3, #30
 8010bd6:	001a      	movs	r2, r3
 8010bd8:	4b74      	ldr	r3, [pc, #464]	@ (8010dac <SGP_GetMeasurementValues+0x224>)
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	e00c      	b.n	8010bf8 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010bde:	4b74      	ldr	r3, [pc, #464]	@ (8010db0 <SGP_GetMeasurementValues+0x228>)
 8010be0:	2208      	movs	r2, #8
 8010be2:	0019      	movs	r1, r3
 8010be4:	2059      	movs	r0, #89	@ 0x59
 8010be6:	f7ff fef3 	bl	80109d0 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010bea:	f003 fcaf 	bl	801454c <HAL_GetTick>
 8010bee:	0003      	movs	r3, r0
 8010bf0:	331e      	adds	r3, #30
 8010bf2:	001a      	movs	r2, r3
 8010bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8010dac <SGP_GetMeasurementValues+0x224>)
 8010bf6:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010bf8:	4b69      	ldr	r3, [pc, #420]	@ (8010da0 <SGP_GetMeasurementValues+0x218>)
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010bfe:	4b67      	ldr	r3, [pc, #412]	@ (8010d9c <SGP_GetMeasurementValues+0x214>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d100      	bne.n	8010c08 <SGP_GetMeasurementValues+0x80>
 8010c06:	e0ac      	b.n	8010d62 <SGP_GetMeasurementValues+0x1da>
 8010c08:	f7ff ff94 	bl	8010b34 <SGP_MeasurementReady>
 8010c0c:	1e03      	subs	r3, r0, #0
 8010c0e:	d100      	bne.n	8010c12 <SGP_GetMeasurementValues+0x8a>
 8010c10:	e0a7      	b.n	8010d62 <SGP_GetMeasurementValues+0x1da>
 8010c12:	4b68      	ldr	r3, [pc, #416]	@ (8010db4 <SGP_GetMeasurementValues+0x22c>)
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2201      	movs	r2, #1
 8010c18:	4053      	eors	r3, r2
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d100      	bne.n	8010c22 <SGP_GetMeasurementValues+0x9a>
 8010c20:	e09f      	b.n	8010d62 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010c22:	4b64      	ldr	r3, [pc, #400]	@ (8010db4 <SGP_GetMeasurementValues+0x22c>)
 8010c24:	2201      	movs	r2, #1
 8010c26:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010c28:	4b63      	ldr	r3, [pc, #396]	@ (8010db8 <SGP_GetMeasurementValues+0x230>)
 8010c2a:	2203      	movs	r2, #3
 8010c2c:	0019      	movs	r1, r3
 8010c2e:	2059      	movs	r0, #89	@ 0x59
 8010c30:	f7ff feb0 	bl	8010994 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010c34:	4b60      	ldr	r3, [pc, #384]	@ (8010db8 <SGP_GetMeasurementValues+0x230>)
 8010c36:	2203      	movs	r2, #3
 8010c38:	2103      	movs	r1, #3
 8010c3a:	0018      	movs	r0, r3
 8010c3c:	f000 f91a 	bl	8010e74 <CheckCRC>
 8010c40:	0003      	movs	r3, r0
 8010c42:	001a      	movs	r2, r3
 8010c44:	2301      	movs	r3, #1
 8010c46:	4053      	eors	r3, r2
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d02a      	beq.n	8010ca4 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8010dbc <SGP_GetMeasurementValues+0x234>)
 8010c50:	4b5b      	ldr	r3, [pc, #364]	@ (8010dc0 <SGP_GetMeasurementValues+0x238>)
 8010c52:	0019      	movs	r1, r3
 8010c54:	2001      	movs	r0, #1
 8010c56:	f002 ff39 	bl	8013acc <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8010dc4 <SGP_GetMeasurementValues+0x23c>)
 8010c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8010dc8 <SGP_GetMeasurementValues+0x240>)
 8010c5e:	0019      	movs	r1, r3
 8010c60:	2002      	movs	r0, #2
 8010c62:	f002 ff33 	bl	8013acc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010c66:	230f      	movs	r3, #15
 8010c68:	18fb      	adds	r3, r7, r3
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	701a      	strb	r2, [r3, #0]
 8010c6e:	e012      	b.n	8010c96 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010c70:	240f      	movs	r4, #15
 8010c72:	193b      	adds	r3, r7, r4
 8010c74:	7818      	ldrb	r0, [r3, #0]
 8010c76:	193b      	adds	r3, r7, r4
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	4a4f      	ldr	r2, [pc, #316]	@ (8010db8 <SGP_GetMeasurementValues+0x230>)
 8010c7c:	5cd3      	ldrb	r3, [r2, r3]
 8010c7e:	4a53      	ldr	r2, [pc, #332]	@ (8010dcc <SGP_GetMeasurementValues+0x244>)
 8010c80:	4953      	ldr	r1, [pc, #332]	@ (8010dd0 <SGP_GetMeasurementValues+0x248>)
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	0003      	movs	r3, r0
 8010c86:	2003      	movs	r0, #3
 8010c88:	f002 ff20 	bl	8013acc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010c8c:	193b      	adds	r3, r7, r4
 8010c8e:	781a      	ldrb	r2, [r3, #0]
 8010c90:	193b      	adds	r3, r7, r4
 8010c92:	3201      	adds	r2, #1
 8010c94:	701a      	strb	r2, [r3, #0]
 8010c96:	230f      	movs	r3, #15
 8010c98:	18fb      	adds	r3, r7, r3
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d9e7      	bls.n	8010c70 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	e076      	b.n	8010d92 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8010ca4:	f003 fc52 	bl	801454c <HAL_GetTick>
 8010ca8:	0003      	movs	r3, r0
 8010caa:	22fa      	movs	r2, #250	@ 0xfa
 8010cac:	0092      	lsls	r2, r2, #2
 8010cae:	189a      	adds	r2, r3, r2
 8010cb0:	4b48      	ldr	r3, [pc, #288]	@ (8010dd4 <SGP_GetMeasurementValues+0x24c>)
 8010cb2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010cb4:	f7ff ff5a 	bl	8010b6c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8010cb8:	4b47      	ldr	r3, [pc, #284]	@ (8010dd8 <SGP_GetMeasurementValues+0x250>)
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	4b45      	ldr	r3, [pc, #276]	@ (8010dd8 <SGP_GetMeasurementValues+0x250>)
 8010cc2:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010cc4:	4b44      	ldr	r3, [pc, #272]	@ (8010dd8 <SGP_GetMeasurementValues+0x250>)
 8010cc6:	781a      	ldrb	r2, [r3, #0]
 8010cc8:	4b44      	ldr	r3, [pc, #272]	@ (8010ddc <SGP_GetMeasurementValues+0x254>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d348      	bcc.n	8010d62 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8010cd0:	4b39      	ldr	r3, [pc, #228]	@ (8010db8 <SGP_GetMeasurementValues+0x230>)
 8010cd2:	785b      	ldrb	r3, [r3, #1]
 8010cd4:	b21b      	sxth	r3, r3
 8010cd6:	021b      	lsls	r3, r3, #8
 8010cd8:	b21a      	sxth	r2, r3
 8010cda:	4b37      	ldr	r3, [pc, #220]	@ (8010db8 <SGP_GetMeasurementValues+0x230>)
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b21b      	sxth	r3, r3
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	b21a      	sxth	r2, r3
 8010ce4:	240c      	movs	r4, #12
 8010ce6:	193b      	adds	r3, r7, r4
 8010ce8:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8010cea:	2300      	movs	r3, #0
 8010cec:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8010cee:	193b      	adds	r3, r7, r4
 8010cf0:	8819      	ldrh	r1, [r3, #0]
 8010cf2:	2308      	movs	r3, #8
 8010cf4:	18fa      	adds	r2, r7, r3
 8010cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8010de0 <SGP_GetMeasurementValues+0x258>)
 8010cf8:	0018      	movs	r0, r3
 8010cfa:	f7fe fe87 	bl	800fa0c <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8010cfe:	68ba      	ldr	r2, [r7, #8]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8010d04:	4b37      	ldr	r3, [pc, #220]	@ (8010de4 <SGP_GetMeasurementValues+0x25c>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	4b35      	ldr	r3, [pc, #212]	@ (8010de4 <SGP_GetMeasurementValues+0x25c>)
 8010d0e:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8010d10:	4b34      	ldr	r3, [pc, #208]	@ (8010de4 <SGP_GetMeasurementValues+0x25c>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d10d      	bne.n	8010d34 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8010d18:	193b      	adds	r3, r7, r4
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	4a32      	ldr	r2, [pc, #200]	@ (8010de8 <SGP_GetMeasurementValues+0x260>)
 8010d1e:	492c      	ldr	r1, [pc, #176]	@ (8010dd0 <SGP_GetMeasurementValues+0x248>)
 8010d20:	2003      	movs	r0, #3
 8010d22:	f002 fed3 	bl	8013acc <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	4a30      	ldr	r2, [pc, #192]	@ (8010dec <SGP_GetMeasurementValues+0x264>)
 8010d2a:	4929      	ldr	r1, [pc, #164]	@ (8010dd0 <SGP_GetMeasurementValues+0x248>)
 8010d2c:	2003      	movs	r0, #3
 8010d2e:	f002 fecd 	bl	8013acc <CreateLine>
 8010d32:	e006      	b.n	8010d42 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8010d34:	4b2b      	ldr	r3, [pc, #172]	@ (8010de4 <SGP_GetMeasurementValues+0x25c>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	2b0b      	cmp	r3, #11
 8010d3a:	d102      	bne.n	8010d42 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8010d3c:	4b29      	ldr	r3, [pc, #164]	@ (8010de4 <SGP_GetMeasurementValues+0x25c>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	0018      	movs	r0, r3
 8010d48:	f001 fe32 	bl	80129b0 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8010d4c:	4b22      	ldr	r3, [pc, #136]	@ (8010dd8 <SGP_GetMeasurementValues+0x250>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 8010d52:	4b14      	ldr	r3, [pc, #80]	@ (8010da4 <SGP_GetMeasurementValues+0x21c>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8010d58:	4b11      	ldr	r3, [pc, #68]	@ (8010da0 <SGP_GetMeasurementValues+0x218>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	701a      	strb	r2, [r3, #0]
      return true;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e017      	b.n	8010d92 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8010d62:	f7ff fef5 	bl	8010b50 <SGP_MeasurementDone>
 8010d66:	1e03      	subs	r3, r0, #0
 8010d68:	d012      	beq.n	8010d90 <SGP_GetMeasurementValues+0x208>
 8010d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d9c <SGP_GetMeasurementValues+0x214>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00e      	beq.n	8010d90 <SGP_GetMeasurementValues+0x208>
 8010d72:	4b10      	ldr	r3, [pc, #64]	@ (8010db4 <SGP_GetMeasurementValues+0x22c>)
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00a      	beq.n	8010d90 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8010d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8010df0 <SGP_GetMeasurementValues+0x268>)
 8010d7c:	4b14      	ldr	r3, [pc, #80]	@ (8010dd0 <SGP_GetMeasurementValues+0x248>)
 8010d7e:	0019      	movs	r1, r3
 8010d80:	2003      	movs	r0, #3
 8010d82:	f002 fea3 	bl	8013acc <CreateLine>
    SGP_StartMeasurement();
 8010d86:	f7ff fe8f 	bl	8010aa8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8010d8a:	4b05      	ldr	r3, [pc, #20]	@ (8010da0 <SGP_GetMeasurementValues+0x218>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	0018      	movs	r0, r3
 8010d94:	46bd      	mov	sp, r7
 8010d96:	b005      	add	sp, #20
 8010d98:	bd90      	pop	{r4, r7, pc}
 8010d9a:	46c0      	nop			@ (mov r8, r8)
 8010d9c:	20001058 	.word	0x20001058
 8010da0:	20001105 	.word	0x20001105
 8010da4:	20001104 	.word	0x20001104
 8010da8:	200000bc 	.word	0x200000bc
 8010dac:	200000d0 	.word	0x200000d0
 8010db0:	200000b4 	.word	0x200000b4
 8010db4:	20001059 	.word	0x20001059
 8010db8:	20001048 	.word	0x20001048
 8010dbc:	0802d634 	.word	0x0802d634
 8010dc0:	0802d65c 	.word	0x0802d65c
 8010dc4:	0802d660 	.word	0x0802d660
 8010dc8:	0802d680 	.word	0x0802d680
 8010dcc:	0802d684 	.word	0x0802d684
 8010dd0:	0802d6a4 	.word	0x0802d6a4
 8010dd4:	200000cc 	.word	0x200000cc
 8010dd8:	20001051 	.word	0x20001051
 8010ddc:	200000c6 	.word	0x200000c6
 8010de0:	2000105c 	.word	0x2000105c
 8010de4:	20001052 	.word	0x20001052
 8010de8:	0802d6a8 	.word	0x0802d6a8
 8010dec:	0802d6c4 	.word	0x0802d6c4
 8010df0:	0802d6e0 	.word	0x0802d6e0

08010df4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8010e64 <SGP_DeviceConnected+0x70>)
 8010dfc:	2202      	movs	r2, #2
 8010dfe:	0019      	movs	r1, r3
 8010e00:	2059      	movs	r0, #89	@ 0x59
 8010e02:	f7ff fde5 	bl	80109d0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8010e06:	2001      	movs	r0, #1
 8010e08:	f003 fbaa 	bl	8014560 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8010e0c:	4b16      	ldr	r3, [pc, #88]	@ (8010e68 <SGP_DeviceConnected+0x74>)
 8010e0e:	2209      	movs	r2, #9
 8010e10:	0019      	movs	r1, r3
 8010e12:	2059      	movs	r0, #89	@ 0x59
 8010e14:	f7ff fdbe 	bl	8010994 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010e18:	1dfb      	adds	r3, r7, #7
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	701a      	strb	r2, [r3, #0]
 8010e1e:	e011      	b.n	8010e44 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8010e20:	1dfb      	adds	r3, r7, #7
 8010e22:	7818      	ldrb	r0, [r3, #0]
 8010e24:	1dfb      	adds	r3, r7, #7
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	4a0f      	ldr	r2, [pc, #60]	@ (8010e68 <SGP_DeviceConnected+0x74>)
 8010e2a:	5cd3      	ldrb	r3, [r2, r3]
 8010e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8010e6c <SGP_DeviceConnected+0x78>)
 8010e2e:	4910      	ldr	r1, [pc, #64]	@ (8010e70 <SGP_DeviceConnected+0x7c>)
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	0003      	movs	r3, r0
 8010e34:	2002      	movs	r0, #2
 8010e36:	f002 fe49 	bl	8013acc <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010e3a:	1dfb      	adds	r3, r7, #7
 8010e3c:	781a      	ldrb	r2, [r3, #0]
 8010e3e:	1dfb      	adds	r3, r7, #7
 8010e40:	3201      	adds	r2, #1
 8010e42:	701a      	strb	r2, [r3, #0]
 8010e44:	1dfb      	adds	r3, r7, #7
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	2b08      	cmp	r3, #8
 8010e4a:	d9e9      	bls.n	8010e20 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8010e4c:	4b06      	ldr	r3, [pc, #24]	@ (8010e68 <SGP_DeviceConnected+0x74>)
 8010e4e:	2203      	movs	r2, #3
 8010e50:	2109      	movs	r1, #9
 8010e52:	0018      	movs	r0, r3
 8010e54:	f000 f80e 	bl	8010e74 <CheckCRC>
 8010e58:	0003      	movs	r3, r0
}
 8010e5a:	0018      	movs	r0, r3
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	b002      	add	sp, #8
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	200000b0 	.word	0x200000b0
 8010e68:	20001048 	.word	0x20001048
 8010e6c:	0802d700 	.word	0x0802d700
 8010e70:	0802d680 	.word	0x0802d680

08010e74 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8010e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e76:	b08f      	sub	sp, #60	@ 0x3c
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e7c:	0008      	movs	r0, r1
 8010e7e:	0011      	movs	r1, r2
 8010e80:	2323      	movs	r3, #35	@ 0x23
 8010e82:	18fb      	adds	r3, r7, r3
 8010e84:	1c02      	adds	r2, r0, #0
 8010e86:	701a      	strb	r2, [r3, #0]
 8010e88:	2322      	movs	r3, #34	@ 0x22
 8010e8a:	18fb      	adds	r3, r7, r3
 8010e8c:	1c0a      	adds	r2, r1, #0
 8010e8e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010e90:	2317      	movs	r3, #23
 8010e92:	2220      	movs	r2, #32
 8010e94:	189b      	adds	r3, r3, r2
 8010e96:	19db      	adds	r3, r3, r7
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
 8010e9c:	e09f      	b.n	8010fde <CheckCRC+0x16a>
 8010e9e:	466b      	mov	r3, sp
 8010ea0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8010ea2:	2322      	movs	r3, #34	@ 0x22
 8010ea4:	18fb      	adds	r3, r7, r3
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	001a      	movs	r2, r3
 8010eaa:	3a01      	subs	r2, #1
 8010eac:	633a      	str	r2, [r7, #48]	@ 0x30
 8010eae:	60bb      	str	r3, [r7, #8]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	60fa      	str	r2, [r7, #12]
 8010eb4:	68b8      	ldr	r0, [r7, #8]
 8010eb6:	68f9      	ldr	r1, [r7, #12]
 8010eb8:	0002      	movs	r2, r0
 8010eba:	0f52      	lsrs	r2, r2, #29
 8010ebc:	000c      	movs	r4, r1
 8010ebe:	00e4      	lsls	r4, r4, #3
 8010ec0:	61fc      	str	r4, [r7, #28]
 8010ec2:	69fc      	ldr	r4, [r7, #28]
 8010ec4:	4314      	orrs	r4, r2
 8010ec6:	61fc      	str	r4, [r7, #28]
 8010ec8:	0002      	movs	r2, r0
 8010eca:	00d2      	lsls	r2, r2, #3
 8010ecc:	61ba      	str	r2, [r7, #24]
 8010ece:	603b      	str	r3, [r7, #0]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	607a      	str	r2, [r7, #4]
 8010ed4:	6838      	ldr	r0, [r7, #0]
 8010ed6:	6879      	ldr	r1, [r7, #4]
 8010ed8:	0002      	movs	r2, r0
 8010eda:	0f52      	lsrs	r2, r2, #29
 8010edc:	000c      	movs	r4, r1
 8010ede:	00e4      	lsls	r4, r4, #3
 8010ee0:	617c      	str	r4, [r7, #20]
 8010ee2:	697c      	ldr	r4, [r7, #20]
 8010ee4:	4314      	orrs	r4, r2
 8010ee6:	617c      	str	r4, [r7, #20]
 8010ee8:	0002      	movs	r2, r0
 8010eea:	00d2      	lsls	r2, r2, #3
 8010eec:	613a      	str	r2, [r7, #16]
 8010eee:	3307      	adds	r3, #7
 8010ef0:	08db      	lsrs	r3, r3, #3
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	466a      	mov	r2, sp
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	469d      	mov	sp, r3
 8010efa:	466b      	mov	r3, sp
 8010efc:	3300      	adds	r3, #0
 8010efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8010f00:	2316      	movs	r3, #22
 8010f02:	2220      	movs	r2, #32
 8010f04:	189b      	adds	r3, r3, r2
 8010f06:	19db      	adds	r3, r3, r7
 8010f08:	2200      	movs	r2, #0
 8010f0a:	701a      	strb	r2, [r3, #0]
 8010f0c:	e01e      	b.n	8010f4c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8010f0e:	2317      	movs	r3, #23
 8010f10:	2220      	movs	r2, #32
 8010f12:	189b      	adds	r3, r3, r2
 8010f14:	19db      	adds	r3, r3, r7
 8010f16:	781a      	ldrb	r2, [r3, #0]
 8010f18:	2116      	movs	r1, #22
 8010f1a:	2320      	movs	r3, #32
 8010f1c:	18cb      	adds	r3, r1, r3
 8010f1e:	19db      	adds	r3, r3, r7
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	18d3      	adds	r3, r2, r3
 8010f24:	001a      	movs	r2, r3
 8010f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f28:	189a      	adds	r2, r3, r2
 8010f2a:	0008      	movs	r0, r1
 8010f2c:	2320      	movs	r3, #32
 8010f2e:	18cb      	adds	r3, r1, r3
 8010f30:	19db      	adds	r3, r3, r7
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	7811      	ldrb	r1, [r2, #0]
 8010f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f38:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8010f3a:	2320      	movs	r3, #32
 8010f3c:	18c3      	adds	r3, r0, r3
 8010f3e:	19db      	adds	r3, r3, r7
 8010f40:	781a      	ldrb	r2, [r3, #0]
 8010f42:	2320      	movs	r3, #32
 8010f44:	18c3      	adds	r3, r0, r3
 8010f46:	19db      	adds	r3, r3, r7
 8010f48:	3201      	adds	r2, #1
 8010f4a:	701a      	strb	r2, [r3, #0]
 8010f4c:	2316      	movs	r3, #22
 8010f4e:	2220      	movs	r2, #32
 8010f50:	189b      	adds	r3, r3, r2
 8010f52:	19da      	adds	r2, r3, r7
 8010f54:	2322      	movs	r3, #34	@ 0x22
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	7812      	ldrb	r2, [r2, #0]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d3d6      	bcc.n	8010f0e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8010f60:	2417      	movs	r4, #23
 8010f62:	2320      	movs	r3, #32
 8010f64:	18e3      	adds	r3, r4, r3
 8010f66:	19db      	adds	r3, r3, r7
 8010f68:	781a      	ldrb	r2, [r3, #0]
 8010f6a:	2322      	movs	r3, #34	@ 0x22
 8010f6c:	18fb      	adds	r3, r7, r3
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	18d3      	adds	r3, r2, r3
 8010f72:	3b01      	subs	r3, #1
 8010f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f76:	18d2      	adds	r2, r2, r3
 8010f78:	250b      	movs	r5, #11
 8010f7a:	2320      	movs	r3, #32
 8010f7c:	18eb      	adds	r3, r5, r3
 8010f7e:	19db      	adds	r3, r3, r7
 8010f80:	7812      	ldrb	r2, [r2, #0]
 8010f82:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8010f84:	2322      	movs	r3, #34	@ 0x22
 8010f86:	18fb      	adds	r3, r7, r3
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f90:	0011      	movs	r1, r2
 8010f92:	0018      	movs	r0, r3
 8010f94:	f000 f838 	bl	8011008 <CalculateCRC>
 8010f98:	0003      	movs	r3, r0
 8010f9a:	001a      	movs	r2, r3
 8010f9c:	2320      	movs	r3, #32
 8010f9e:	18eb      	adds	r3, r5, r3
 8010fa0:	19db      	adds	r3, r3, r7
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d00c      	beq.n	8010fc2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8010fa8:	2320      	movs	r3, #32
 8010faa:	18e3      	adds	r3, r4, r3
 8010fac:	19db      	adds	r3, r3, r7
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	4a13      	ldr	r2, [pc, #76]	@ (8011000 <CheckCRC+0x18c>)
 8010fb4:	4913      	ldr	r1, [pc, #76]	@ (8011004 <CheckCRC+0x190>)
 8010fb6:	2001      	movs	r0, #1
 8010fb8:	f002 fd88 	bl	8013acc <CreateLine>
      return false;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	46b5      	mov	sp, r6
 8010fc0:	e019      	b.n	8010ff6 <CheckCRC+0x182>
 8010fc2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010fc4:	2217      	movs	r2, #23
 8010fc6:	2320      	movs	r3, #32
 8010fc8:	18d3      	adds	r3, r2, r3
 8010fca:	19db      	adds	r3, r3, r7
 8010fcc:	2120      	movs	r1, #32
 8010fce:	1852      	adds	r2, r2, r1
 8010fd0:	19d1      	adds	r1, r2, r7
 8010fd2:	2222      	movs	r2, #34	@ 0x22
 8010fd4:	18ba      	adds	r2, r7, r2
 8010fd6:	7809      	ldrb	r1, [r1, #0]
 8010fd8:	7812      	ldrb	r2, [r2, #0]
 8010fda:	188a      	adds	r2, r1, r2
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	2317      	movs	r3, #23
 8010fe0:	2220      	movs	r2, #32
 8010fe2:	189b      	adds	r3, r3, r2
 8010fe4:	19da      	adds	r2, r3, r7
 8010fe6:	2323      	movs	r3, #35	@ 0x23
 8010fe8:	18fb      	adds	r3, r7, r3
 8010fea:	7812      	ldrb	r2, [r2, #0]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d200      	bcs.n	8010ff4 <CheckCRC+0x180>
 8010ff2:	e754      	b.n	8010e9e <CheckCRC+0x2a>
    }
  }
  return true;
 8010ff4:	2301      	movs	r3, #1
}
 8010ff6:	0018      	movs	r0, r3
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	b00f      	add	sp, #60	@ 0x3c
 8010ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ffe:	46c0      	nop			@ (mov r8, r8)
 8011000:	0802d720 	.word	0x0802d720
 8011004:	0802d65c 	.word	0x0802d65c

08011008 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	000a      	movs	r2, r1
 8011012:	1cfb      	adds	r3, r7, #3
 8011014:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8011016:	230f      	movs	r3, #15
 8011018:	18fb      	adds	r3, r7, r3
 801101a:	22ff      	movs	r2, #255	@ 0xff
 801101c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801101e:	230e      	movs	r3, #14
 8011020:	18fb      	adds	r3, r7, r3
 8011022:	2200      	movs	r2, #0
 8011024:	701a      	strb	r2, [r3, #0]
 8011026:	e038      	b.n	801109a <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011028:	230e      	movs	r3, #14
 801102a:	18fb      	adds	r3, r7, r3
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	18d3      	adds	r3, r2, r3
 8011032:	7819      	ldrb	r1, [r3, #0]
 8011034:	220f      	movs	r2, #15
 8011036:	18bb      	adds	r3, r7, r2
 8011038:	18ba      	adds	r2, r7, r2
 801103a:	7812      	ldrb	r2, [r2, #0]
 801103c:	404a      	eors	r2, r1
 801103e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011040:	230d      	movs	r3, #13
 8011042:	18fb      	adds	r3, r7, r3
 8011044:	2200      	movs	r2, #0
 8011046:	701a      	strb	r2, [r3, #0]
 8011048:	e01c      	b.n	8011084 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801104a:	210f      	movs	r1, #15
 801104c:	187b      	adds	r3, r7, r1
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	b25b      	sxtb	r3, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	da0a      	bge.n	801106c <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8011056:	187b      	adds	r3, r7, r1
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	b25b      	sxtb	r3, r3
 801105c:	18db      	adds	r3, r3, r3
 801105e:	b25b      	sxtb	r3, r3
 8011060:	2231      	movs	r2, #49	@ 0x31
 8011062:	4053      	eors	r3, r2
 8011064:	b25a      	sxtb	r2, r3
 8011066:	187b      	adds	r3, r7, r1
 8011068:	701a      	strb	r2, [r3, #0]
 801106a:	e005      	b.n	8011078 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 801106c:	230f      	movs	r3, #15
 801106e:	18fa      	adds	r2, r7, r3
 8011070:	18fb      	adds	r3, r7, r3
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	18db      	adds	r3, r3, r3
 8011076:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011078:	210d      	movs	r1, #13
 801107a:	187b      	adds	r3, r7, r1
 801107c:	781a      	ldrb	r2, [r3, #0]
 801107e:	187b      	adds	r3, r7, r1
 8011080:	3201      	adds	r2, #1
 8011082:	701a      	strb	r2, [r3, #0]
 8011084:	230d      	movs	r3, #13
 8011086:	18fb      	adds	r3, r7, r3
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b07      	cmp	r3, #7
 801108c:	d9dd      	bls.n	801104a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 801108e:	210e      	movs	r1, #14
 8011090:	187b      	adds	r3, r7, r1
 8011092:	781a      	ldrb	r2, [r3, #0]
 8011094:	187b      	adds	r3, r7, r1
 8011096:	3201      	adds	r2, #1
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	230e      	movs	r3, #14
 801109c:	18fa      	adds	r2, r7, r3
 801109e:	1cfb      	adds	r3, r7, #3
 80110a0:	7812      	ldrb	r2, [r2, #0]
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d3bf      	bcc.n	8011028 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80110a8:	230f      	movs	r3, #15
 80110aa:	18fb      	adds	r3, r7, r3
 80110ac:	781b      	ldrb	r3, [r3, #0]
}
 80110ae:	0018      	movs	r0, r3
 80110b0:	46bd      	mov	sp, r7
 80110b2:	b004      	add	sp, #16
 80110b4:	bd80      	pop	{r7, pc}
	...

080110b8 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b084      	sub	sp, #16
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4936      	ldr	r1, [pc, #216]	@ (80111a0 <SGP_SetHT+0xe8>)
 80110c8:	1c18      	adds	r0, r3, #0
 80110ca:	f7ef fbf9 	bl	80008c0 <__aeabi_fadd>
 80110ce:	1c03      	adds	r3, r0, #0
 80110d0:	4934      	ldr	r1, [pc, #208]	@ (80111a4 <SGP_SetHT+0xec>)
 80110d2:	1c18      	adds	r0, r3, #0
 80110d4:	f7ef fde6 	bl	8000ca4 <__aeabi_fdiv>
 80110d8:	1c03      	adds	r3, r0, #0
 80110da:	4933      	ldr	r1, [pc, #204]	@ (80111a8 <SGP_SetHT+0xf0>)
 80110dc:	1c18      	adds	r0, r3, #0
 80110de:	f7ef ffaf 	bl	8001040 <__aeabi_fmul>
 80110e2:	1c03      	adds	r3, r0, #0
 80110e4:	1c18      	adds	r0, r3, #0
 80110e6:	f7ef fa99 	bl	800061c <__aeabi_f2uiz>
 80110ea:	0003      	movs	r3, r0
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	4b2f      	ldr	r3, [pc, #188]	@ (80111ac <SGP_SetHT+0xf4>)
 80110f0:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	492e      	ldr	r1, [pc, #184]	@ (80111b0 <SGP_SetHT+0xf8>)
 80110f8:	1c18      	adds	r0, r3, #0
 80110fa:	f7ef fdd3 	bl	8000ca4 <__aeabi_fdiv>
 80110fe:	1c03      	adds	r3, r0, #0
 8011100:	4929      	ldr	r1, [pc, #164]	@ (80111a8 <SGP_SetHT+0xf0>)
 8011102:	1c18      	adds	r0, r3, #0
 8011104:	f7ef ff9c 	bl	8001040 <__aeabi_fmul>
 8011108:	1c03      	adds	r3, r0, #0
 801110a:	1c18      	adds	r0, r3, #0
 801110c:	f7ef fa86 	bl	800061c <__aeabi_f2uiz>
 8011110:	0003      	movs	r3, r0
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b27      	ldr	r3, [pc, #156]	@ (80111b4 <SGP_SetHT+0xfc>)
 8011116:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8011118:	4b26      	ldr	r3, [pc, #152]	@ (80111b4 <SGP_SetHT+0xfc>)
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	0a1b      	lsrs	r3, r3, #8
 801111e:	b29b      	uxth	r3, r3
 8011120:	b2da      	uxtb	r2, r3
 8011122:	4b25      	ldr	r3, [pc, #148]	@ (80111b8 <SGP_SetHT+0x100>)
 8011124:	709a      	strb	r2, [r3, #2]
 8011126:	4b24      	ldr	r3, [pc, #144]	@ (80111b8 <SGP_SetHT+0x100>)
 8011128:	789a      	ldrb	r2, [r3, #2]
 801112a:	210c      	movs	r1, #12
 801112c:	187b      	adds	r3, r7, r1
 801112e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8011130:	4b20      	ldr	r3, [pc, #128]	@ (80111b4 <SGP_SetHT+0xfc>)
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	b2da      	uxtb	r2, r3
 8011136:	4b20      	ldr	r3, [pc, #128]	@ (80111b8 <SGP_SetHT+0x100>)
 8011138:	70da      	strb	r2, [r3, #3]
 801113a:	4b1f      	ldr	r3, [pc, #124]	@ (80111b8 <SGP_SetHT+0x100>)
 801113c:	78da      	ldrb	r2, [r3, #3]
 801113e:	187b      	adds	r3, r7, r1
 8011140:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8011142:	187b      	adds	r3, r7, r1
 8011144:	2102      	movs	r1, #2
 8011146:	0018      	movs	r0, r3
 8011148:	f7ff ff5e 	bl	8011008 <CalculateCRC>
 801114c:	0003      	movs	r3, r0
 801114e:	001a      	movs	r2, r3
 8011150:	4b19      	ldr	r3, [pc, #100]	@ (80111b8 <SGP_SetHT+0x100>)
 8011152:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8011154:	4b15      	ldr	r3, [pc, #84]	@ (80111ac <SGP_SetHT+0xf4>)
 8011156:	881b      	ldrh	r3, [r3, #0]
 8011158:	0a1b      	lsrs	r3, r3, #8
 801115a:	b29b      	uxth	r3, r3
 801115c:	b2da      	uxtb	r2, r3
 801115e:	4b16      	ldr	r3, [pc, #88]	@ (80111b8 <SGP_SetHT+0x100>)
 8011160:	715a      	strb	r2, [r3, #5]
 8011162:	4b15      	ldr	r3, [pc, #84]	@ (80111b8 <SGP_SetHT+0x100>)
 8011164:	795a      	ldrb	r2, [r3, #5]
 8011166:	2108      	movs	r1, #8
 8011168:	187b      	adds	r3, r7, r1
 801116a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 801116c:	4b0f      	ldr	r3, [pc, #60]	@ (80111ac <SGP_SetHT+0xf4>)
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	b2da      	uxtb	r2, r3
 8011172:	4b11      	ldr	r3, [pc, #68]	@ (80111b8 <SGP_SetHT+0x100>)
 8011174:	719a      	strb	r2, [r3, #6]
 8011176:	4b10      	ldr	r3, [pc, #64]	@ (80111b8 <SGP_SetHT+0x100>)
 8011178:	799a      	ldrb	r2, [r3, #6]
 801117a:	187b      	adds	r3, r7, r1
 801117c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 801117e:	187b      	adds	r3, r7, r1
 8011180:	2102      	movs	r1, #2
 8011182:	0018      	movs	r0, r3
 8011184:	f7ff ff40 	bl	8011008 <CalculateCRC>
 8011188:	0003      	movs	r3, r0
 801118a:	001a      	movs	r2, r3
 801118c:	4b0a      	ldr	r3, [pc, #40]	@ (80111b8 <SGP_SetHT+0x100>)
 801118e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8011190:	4b0a      	ldr	r3, [pc, #40]	@ (80111bc <SGP_SetHT+0x104>)
 8011192:	2201      	movs	r2, #1
 8011194:	701a      	strb	r2, [r3, #0]
}
 8011196:	46c0      	nop			@ (mov r8, r8)
 8011198:	46bd      	mov	sp, r7
 801119a:	b004      	add	sp, #16
 801119c:	bd80      	pop	{r7, pc}
 801119e:	46c0      	nop			@ (mov r8, r8)
 80111a0:	42340000 	.word	0x42340000
 80111a4:	432f0000 	.word	0x432f0000
 80111a8:	477fff00 	.word	0x477fff00
 80111ac:	20001102 	.word	0x20001102
 80111b0:	42c80000 	.word	0x42c80000
 80111b4:	20001100 	.word	0x20001100
 80111b8:	200000bc 	.word	0x200000bc
 80111bc:	20001104 	.word	0x20001104

080111c0 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 80111c4:	4a09      	ldr	r2, [pc, #36]	@ (80111ec <SGP_SoftReset+0x2c>)
 80111c6:	4b0a      	ldr	r3, [pc, #40]	@ (80111f0 <SGP_SoftReset+0x30>)
 80111c8:	0019      	movs	r1, r3
 80111ca:	2003      	movs	r0, #3
 80111cc:	f002 fc7e 	bl	8013acc <CreateLine>
  SGP_TurnHeaterOff();
 80111d0:	f7ff fccc 	bl	8010b6c <SGP_TurnHeaterOff>
  HAL_Delay(10);
 80111d4:	200a      	movs	r0, #10
 80111d6:	f003 f9c3 	bl	8014560 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80111da:	4b06      	ldr	r3, [pc, #24]	@ (80111f4 <SGP_SoftReset+0x34>)
 80111dc:	2202      	movs	r2, #2
 80111de:	0019      	movs	r1, r3
 80111e0:	2059      	movs	r0, #89	@ 0x59
 80111e2:	f7ff fbf5 	bl	80109d0 <WriteRegister>
}
 80111e6:	46c0      	nop			@ (mov r8, r8)
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	0802d7c8 	.word	0x0802d7c8
 80111f0:	0802d6a4 	.word	0x0802d6a4
 80111f4:	200000c4 	.word	0x200000c4

080111f8 <ResetVOCresult>:

void ResetVOCresult(void) {
 80111f8:	b580      	push	{r7, lr}
 80111fa:	af00      	add	r7, sp, #0
  vocIndex = 0;
 80111fc:	4b02      	ldr	r3, [pc, #8]	@ (8011208 <ResetVOCresult+0x10>)
 80111fe:	2200      	movs	r2, #0
 8011200:	601a      	str	r2, [r3, #0]
}
 8011202:	46c0      	nop			@ (mov r8, r8)
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	20001108 	.word	0x20001108

0801120c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 801120c:	b580      	push	{r7, lr}
 801120e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011210:	4b4b      	ldr	r3, [pc, #300]	@ (8011340 <SGP_Upkeep+0x134>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b07      	cmp	r3, #7
 8011216:	d900      	bls.n	801121a <SGP_Upkeep+0xe>
 8011218:	e07a      	b.n	8011310 <SGP_Upkeep+0x104>
 801121a:	009a      	lsls	r2, r3, #2
 801121c:	4b49      	ldr	r3, [pc, #292]	@ (8011344 <SGP_Upkeep+0x138>)
 801121e:	18d3      	adds	r3, r2, r3
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8011224:	4a48      	ldr	r2, [pc, #288]	@ (8011348 <SGP_Upkeep+0x13c>)
 8011226:	4b49      	ldr	r3, [pc, #292]	@ (801134c <SGP_Upkeep+0x140>)
 8011228:	0019      	movs	r1, r3
 801122a:	2003      	movs	r0, #3
 801122c:	f002 fc4e 	bl	8013acc <CreateLine>
    break;
 8011230:	e081      	b.n	8011336 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8011232:	f7ff ffe1 	bl	80111f8 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8011236:	4b42      	ldr	r3, [pc, #264]	@ (8011340 <SGP_Upkeep+0x134>)
 8011238:	2201      	movs	r2, #1
 801123a:	701a      	strb	r2, [r3, #0]
    break;
 801123c:	e07b      	b.n	8011336 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 801123e:	f7fc fc4d 	bl	800dadc <getSensorLock>
 8011242:	1e03      	subs	r3, r0, #0
 8011244:	d000      	beq.n	8011248 <SGP_Upkeep+0x3c>
 8011246:	e06f      	b.n	8011328 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8011248:	2005      	movs	r0, #5
 801124a:	f7fc fc33 	bl	800dab4 <setSensorLock>
    SetMeasurementIndicator();
 801124e:	f001 f98f 	bl	8012570 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 8011252:	f7ff fc29 	bl	8010aa8 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8011256:	200a      	movs	r0, #10
 8011258:	f003 f982 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 801125c:	2000      	movs	r0, #0
 801125e:	f7fc fc29 	bl	800dab4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 8011262:	4b37      	ldr	r3, [pc, #220]	@ (8011340 <SGP_Upkeep+0x134>)
 8011264:	2202      	movs	r2, #2
 8011266:	701a      	strb	r2, [r3, #0]
    break;
 8011268:	e065      	b.n	8011336 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 801126a:	f7fc fc37 	bl	800dadc <getSensorLock>
 801126e:	1e03      	subs	r3, r0, #0
 8011270:	d15c      	bne.n	801132c <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 8011272:	2005      	movs	r0, #5
 8011274:	f7fc fc1e 	bl	800dab4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8011278:	4b35      	ldr	r3, [pc, #212]	@ (8011350 <SGP_Upkeep+0x144>)
 801127a:	0018      	movs	r0, r3
 801127c:	f7ff fc84 	bl	8010b88 <SGP_GetMeasurementValues>
 8011280:	1e03      	subs	r3, r0, #0
 8011282:	d002      	beq.n	801128a <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8011284:	4b2e      	ldr	r3, [pc, #184]	@ (8011340 <SGP_Upkeep+0x134>)
 8011286:	2203      	movs	r2, #3
 8011288:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 801128a:	200a      	movs	r0, #10
 801128c:	f003 f968 	bl	8014560 <HAL_Delay>
    setSensorLock(FREE);
 8011290:	2000      	movs	r0, #0
 8011292:	f7fc fc0f 	bl	800dab4 <setSensorLock>
    break;
 8011296:	e04e      	b.n	8011336 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8011298:	4b2d      	ldr	r3, [pc, #180]	@ (8011350 <SGP_Upkeep+0x144>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	0018      	movs	r0, r3
 80112a0:	f7f3 fbf2 	bl	8004a88 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80112a4:	4b26      	ldr	r3, [pc, #152]	@ (8011340 <SGP_Upkeep+0x134>)
 80112a6:	2206      	movs	r2, #6
 80112a8:	701a      	strb	r2, [r3, #0]
    break;
 80112aa:	e044      	b.n	8011336 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 80112ac:	4b24      	ldr	r3, [pc, #144]	@ (8011340 <SGP_Upkeep+0x134>)
 80112ae:	2207      	movs	r2, #7
 80112b0:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 80112b2:	4b28      	ldr	r3, [pc, #160]	@ (8011354 <SGP_Upkeep+0x148>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d912      	bls.n	80112e0 <SGP_Upkeep+0xd4>
 80112ba:	4b27      	ldr	r3, [pc, #156]	@ (8011358 <SGP_Upkeep+0x14c>)
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2201      	movs	r2, #1
 80112c0:	4053      	eors	r3, r2
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00b      	beq.n	80112e0 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 80112c8:	4b24      	ldr	r3, [pc, #144]	@ (801135c <SGP_Upkeep+0x150>)
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d004      	beq.n	80112da <SGP_Upkeep+0xce>
        SGP_SoftReset();
 80112d0:	f7ff ff76 	bl	80111c0 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 80112d4:	2000      	movs	r0, #0
 80112d6:	f7fb ff95 	bl	800d204 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 80112da:	4b20      	ldr	r3, [pc, #128]	@ (801135c <SGP_Upkeep+0x150>)
 80112dc:	2201      	movs	r2, #1
 80112de:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 80112e0:	f003 f934 	bl	801454c <HAL_GetTick>
 80112e4:	0003      	movs	r3, r0
 80112e6:	22c8      	movs	r2, #200	@ 0xc8
 80112e8:	0092      	lsls	r2, r2, #2
 80112ea:	189a      	adds	r2, r3, r2
 80112ec:	4b1c      	ldr	r3, [pc, #112]	@ (8011360 <SGP_Upkeep+0x154>)
 80112ee:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 80112f0:	f001 f956 	bl	80125a0 <ResetMeasurementIndicator>
  break;
 80112f4:	e01f      	b.n	8011336 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 80112f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011360 <SGP_Upkeep+0x154>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	0018      	movs	r0, r3
 80112fc:	f002 fb90 	bl	8013a20 <TimestampIsReached>
 8011300:	1e03      	subs	r3, r0, #0
 8011302:	d015      	beq.n	8011330 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8011304:	f7ff fbb8 	bl	8010a78 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011308:	4b0d      	ldr	r3, [pc, #52]	@ (8011340 <SGP_Upkeep+0x134>)
 801130a:	2200      	movs	r2, #0
 801130c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801130e:	e00f      	b.n	8011330 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011310:	4b0b      	ldr	r3, [pc, #44]	@ (8011340 <SGP_Upkeep+0x134>)
 8011312:	2200      	movs	r2, #0
 8011314:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8011316:	f7fc fbe1 	bl	800dadc <getSensorLock>
 801131a:	0003      	movs	r3, r0
 801131c:	2b05      	cmp	r3, #5
 801131e:	d109      	bne.n	8011334 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8011320:	2000      	movs	r0, #0
 8011322:	f7fc fbc7 	bl	800dab4 <setSensorLock>
    }
    break;
 8011326:	e005      	b.n	8011334 <SGP_Upkeep+0x128>
      break;
 8011328:	46c0      	nop			@ (mov r8, r8)
 801132a:	e004      	b.n	8011336 <SGP_Upkeep+0x12a>
      break;
 801132c:	46c0      	nop			@ (mov r8, r8)
 801132e:	e002      	b.n	8011336 <SGP_Upkeep+0x12a>
    break;
 8011330:	46c0      	nop			@ (mov r8, r8)
 8011332:	e000      	b.n	8011336 <SGP_Upkeep+0x12a>
    break;
 8011334:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8011336:	4b02      	ldr	r3, [pc, #8]	@ (8011340 <SGP_Upkeep+0x134>)
 8011338:	781b      	ldrb	r3, [r3, #0]
}
 801133a:	0018      	movs	r0, r3
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	2000110c 	.word	0x2000110c
 8011344:	0802e0ac 	.word	0x0802e0ac
 8011348:	0802d7e0 	.word	0x0802d7e0
 801134c:	0802d6a4 	.word	0x0802d6a4
 8011350:	20001108 	.word	0x20001108
 8011354:	20001052 	.word	0x20001052
 8011358:	20001fa9 	.word	0x20001fa9
 801135c:	2000103c 	.word	0x2000103c
 8011360:	20001054 	.word	0x20001054

08011364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	0002      	movs	r2, r0
 801136c:	1dfb      	adds	r3, r7, #7
 801136e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011370:	1dfb      	adds	r3, r7, #7
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	2b7f      	cmp	r3, #127	@ 0x7f
 8011376:	d809      	bhi.n	801138c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011378:	1dfb      	adds	r3, r7, #7
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	001a      	movs	r2, r3
 801137e:	231f      	movs	r3, #31
 8011380:	401a      	ands	r2, r3
 8011382:	4b04      	ldr	r3, [pc, #16]	@ (8011394 <__NVIC_EnableIRQ+0x30>)
 8011384:	2101      	movs	r1, #1
 8011386:	4091      	lsls	r1, r2
 8011388:	000a      	movs	r2, r1
 801138a:	601a      	str	r2, [r3, #0]
  }
}
 801138c:	46c0      	nop			@ (mov r8, r8)
 801138e:	46bd      	mov	sp, r7
 8011390:	b002      	add	sp, #8
 8011392:	bd80      	pop	{r7, pc}
 8011394:	e000e100 	.word	0xe000e100

08011398 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	0002      	movs	r2, r0
 80113a0:	1dfb      	adds	r3, r7, #7
 80113a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80113a4:	1dfb      	adds	r3, r7, #7
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80113aa:	d810      	bhi.n	80113ce <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80113ac:	1dfb      	adds	r3, r7, #7
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	001a      	movs	r2, r3
 80113b2:	231f      	movs	r3, #31
 80113b4:	4013      	ands	r3, r2
 80113b6:	4908      	ldr	r1, [pc, #32]	@ (80113d8 <__NVIC_DisableIRQ+0x40>)
 80113b8:	2201      	movs	r2, #1
 80113ba:	409a      	lsls	r2, r3
 80113bc:	0013      	movs	r3, r2
 80113be:	2280      	movs	r2, #128	@ 0x80
 80113c0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80113c2:	f3bf 8f4f 	dsb	sy
}
 80113c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80113c8:	f3bf 8f6f 	isb	sy
}
 80113cc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80113ce:	46c0      	nop			@ (mov r8, r8)
 80113d0:	46bd      	mov	sp, r7
 80113d2:	b002      	add	sp, #8
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	46c0      	nop			@ (mov r8, r8)
 80113d8:	e000e100 	.word	0xe000e100

080113dc <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 80113dc:	b5b0      	push	{r4, r5, r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	0008      	movs	r0, r1
 80113e6:	0011      	movs	r1, r2
 80113e8:	1cfb      	adds	r3, r7, #3
 80113ea:	1c02      	adds	r2, r0, #0
 80113ec:	701a      	strb	r2, [r3, #0]
 80113ee:	1cbb      	adds	r3, r7, #2
 80113f0:	1c0a      	adds	r2, r1, #0
 80113f2:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 80113f4:	4b5b      	ldr	r3, [pc, #364]	@ (8011564 <getSoundData+0x188>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	2201      	movs	r2, #1
 80113fc:	4053      	eors	r3, r2
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	d107      	bne.n	8011414 <getSoundData+0x38>
 8011404:	4b58      	ldr	r3, [pc, #352]	@ (8011568 <getSoundData+0x18c>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	b2db      	uxtb	r3, r3
 801140a:	2201      	movs	r2, #1
 801140c:	4053      	eors	r3, r2
 801140e:	b2db      	uxtb	r3, r3
 8011410:	2b00      	cmp	r3, #0
 8011412:	d001      	beq.n	8011418 <getSoundData+0x3c>
    {
        return false;
 8011414:	2300      	movs	r3, #0
 8011416:	e0a0      	b.n	801155a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8011418:	4b54      	ldr	r3, [pc, #336]	@ (801156c <getSoundData+0x190>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b00      	cmp	r3, #0
 8011420:	d005      	beq.n	801142e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011422:	4b53      	ldr	r3, [pc, #332]	@ (8011570 <getSoundData+0x194>)
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	b25b      	sxtb	r3, r3
 8011428:	0018      	movs	r0, r3
 801142a:	f7ff ffb5 	bl	8011398 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 801142e:	f3bf 8f4f 	dsb	sy
}
 8011432:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011434:	f3bf 8f6f 	isb	sy
}
 8011438:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 801143a:	1cfb      	adds	r3, r7, #3
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d04c      	beq.n	80114dc <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8011442:	4b4c      	ldr	r3, [pc, #304]	@ (8011574 <getSoundData+0x198>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d11b      	bne.n	8011482 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2200      	movs	r2, #0
 801144e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011456:	2300      	movs	r3, #0
 8011458:	617b      	str	r3, [r7, #20]
 801145a:	e00e      	b.n	801147a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	18d3      	adds	r3, r2, r3
 8011462:	3302      	adds	r3, #2
 8011464:	2200      	movs	r2, #0
 8011466:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	18d3      	adds	r3, r2, r3
 801146e:	3308      	adds	r3, #8
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	3301      	adds	r3, #1
 8011478:	617b      	str	r3, [r7, #20]
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	2b05      	cmp	r3, #5
 801147e:	d9ed      	bls.n	801145c <getSoundData+0x80>
 8011480:	e02c      	b.n	80114dc <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	1c59      	adds	r1, r3, #1
 8011488:	4b3b      	ldr	r3, [pc, #236]	@ (8011578 <getSoundData+0x19c>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	4b3b      	ldr	r3, [pc, #236]	@ (801157c <getSoundData+0x1a0>)
 801148e:	681c      	ldr	r4, [r3, #0]
 8011490:	4b38      	ldr	r3, [pc, #224]	@ (8011574 <getSoundData+0x198>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	0023      	movs	r3, r4
 8011498:	f000 fde8 	bl	801206c <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801149c:	2300      	movs	r3, #0
 801149e:	613b      	str	r3, [r7, #16]
 80114a0:	e019      	b.n	80114d6 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	18d3      	adds	r3, r2, r3
 80114a8:	1c98      	adds	r0, r3, #2
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	3308      	adds	r3, #8
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 80114b2:	4b33      	ldr	r3, [pc, #204]	@ (8011580 <getSoundData+0x1a4>)
 80114b4:	693a      	ldr	r2, [r7, #16]
 80114b6:	0092      	lsls	r2, r2, #2
 80114b8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 80114ba:	4b32      	ldr	r3, [pc, #200]	@ (8011584 <getSoundData+0x1a8>)
 80114bc:	693a      	ldr	r2, [r7, #16]
 80114be:	0092      	lsls	r2, r2, #2
 80114c0:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80114c2:	4b2c      	ldr	r3, [pc, #176]	@ (8011574 <getSoundData+0x198>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	0013      	movs	r3, r2
 80114ca:	0022      	movs	r2, r4
 80114cc:	f000 fdce 	bl	801206c <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	3301      	adds	r3, #1
 80114d4:	613b      	str	r3, [r7, #16]
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	2b05      	cmp	r3, #5
 80114da:	d9e2      	bls.n	80114a2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 80114dc:	1cbb      	adds	r3, r7, #2
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d028      	beq.n	8011536 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 80114e4:	240e      	movs	r4, #14
 80114e6:	193b      	adds	r3, r7, r4
 80114e8:	2200      	movs	r2, #0
 80114ea:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 80114ec:	250d      	movs	r5, #13
 80114ee:	197b      	adds	r3, r7, r5
 80114f0:	2200      	movs	r2, #0
 80114f2:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 80114f4:	4b24      	ldr	r3, [pc, #144]	@ (8011588 <getSoundData+0x1ac>)
 80114f6:	6818      	ldr	r0, [r3, #0]
 80114f8:	4924      	ldr	r1, [pc, #144]	@ (801158c <getSoundData+0x1b0>)
 80114fa:	197b      	adds	r3, r7, r5
 80114fc:	193a      	adds	r2, r7, r4
 80114fe:	f000 fe59 	bl	80121b4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011502:	193b      	adds	r3, r7, r4
 8011504:	881a      	ldrh	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	21ff      	movs	r1, #255	@ 0xff
 801150a:	4011      	ands	r1, r2
 801150c:	000c      	movs	r4, r1
 801150e:	7b99      	ldrb	r1, [r3, #14]
 8011510:	2000      	movs	r0, #0
 8011512:	4001      	ands	r1, r0
 8011514:	1c08      	adds	r0, r1, #0
 8011516:	1c21      	adds	r1, r4, #0
 8011518:	4301      	orrs	r1, r0
 801151a:	7399      	strb	r1, [r3, #14]
 801151c:	0a12      	lsrs	r2, r2, #8
 801151e:	b290      	uxth	r0, r2
 8011520:	7bda      	ldrb	r2, [r3, #15]
 8011522:	2100      	movs	r1, #0
 8011524:	400a      	ands	r2, r1
 8011526:	1c11      	adds	r1, r2, #0
 8011528:	1c02      	adds	r2, r0, #0
 801152a:	430a      	orrs	r2, r1
 801152c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 801152e:	197b      	adds	r3, r7, r5
 8011530:	781a      	ldrb	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011536:	f000 f86f 	bl	8011618 <micSettlingComplete>
 801153a:	0003      	movs	r3, r0
 801153c:	001a      	movs	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8011542:	4b0a      	ldr	r3, [pc, #40]	@ (801156c <getSoundData+0x190>)
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	b2db      	uxtb	r3, r3
 8011548:	2b00      	cmp	r3, #0
 801154a:	d005      	beq.n	8011558 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 801154c:	4b08      	ldr	r3, [pc, #32]	@ (8011570 <getSoundData+0x194>)
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	b25b      	sxtb	r3, r3
 8011552:	0018      	movs	r0, r3
 8011554:	f7ff ff06 	bl	8011364 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011558:	2301      	movs	r3, #1
}
 801155a:	0018      	movs	r0, r3
 801155c:	46bd      	mov	sp, r7
 801155e:	b006      	add	sp, #24
 8011560:	bdb0      	pop	{r4, r5, r7, pc}
 8011562:	46c0      	nop			@ (mov r8, r8)
 8011564:	2000110e 	.word	0x2000110e
 8011568:	20001111 	.word	0x20001111
 801156c:	20001110 	.word	0x20001110
 8011570:	20001b60 	.word	0x20001b60
 8011574:	20001b9c 	.word	0x20001b9c
 8011578:	20001b64 	.word	0x20001b64
 801157c:	20001b68 	.word	0x20001b68
 8011580:	20001b6c 	.word	0x20001b6c
 8011584:	20001b84 	.word	0x20001b84
 8011588:	20001118 	.word	0x20001118
 801158c:	3b5c7333 	.word	0x3b5c7333

08011590 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
 801159c:	001a      	movs	r2, r3
 801159e:	1cfb      	adds	r3, r7, #3
 80115a0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 80115a2:	4b09      	ldr	r3, [pc, #36]	@ (80115c8 <soundInit+0x38>)
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 80115a8:	4b08      	ldr	r3, [pc, #32]	@ (80115cc <soundInit+0x3c>)
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 80115ae:	4b08      	ldr	r3, [pc, #32]	@ (80115d0 <soundInit+0x40>)
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 80115b4:	4b07      	ldr	r3, [pc, #28]	@ (80115d4 <soundInit+0x44>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	569a      	ldrsb	r2, [r3, r2]
 80115ba:	4b06      	ldr	r3, [pc, #24]	@ (80115d4 <soundInit+0x44>)
 80115bc:	701a      	strb	r2, [r3, #0]

    return true;
 80115be:	2301      	movs	r3, #1
}
 80115c0:	0018      	movs	r0, r3
 80115c2:	46bd      	mov	sp, r7
 80115c4:	b004      	add	sp, #16
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	20001b58 	.word	0x20001b58
 80115cc:	20001b54 	.word	0x20001b54
 80115d0:	20001b5c 	.word	0x20001b5c
 80115d4:	20001b60 	.word	0x20001b60

080115d8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 80115dc:	4b02      	ldr	r3, [pc, #8]	@ (80115e8 <clearMaximumAmplitude+0x10>)
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]
}
 80115e2:	46c0      	nop			@ (mov r8, r8)
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	20001118 	.word	0x20001118

080115ec <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 80115f0:	4b08      	ldr	r3, [pc, #32]	@ (8011614 <startMicSettlingPeriod+0x28>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2200      	movs	r2, #0
 80115f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 80115fa:	4b06      	ldr	r3, [pc, #24]	@ (8011614 <startMicSettlingPeriod+0x28>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	0018      	movs	r0, r3
 8011600:	f00b f892 	bl	801c728 <HAL_TIM_Base_Start>
 8011604:	1e03      	subs	r3, r0, #0
 8011606:	d001      	beq.n	801160c <startMicSettlingPeriod+0x20>
    {
        return false;
 8011608:	2300      	movs	r3, #0
 801160a:	e000      	b.n	801160e <startMicSettlingPeriod+0x22>
    }
    return true;
 801160c:	2301      	movs	r3, #1
}
 801160e:	0018      	movs	r0, r3
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	20001b54 	.word	0x20001b54

08011618 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 801161e:	4b0e      	ldr	r3, [pc, #56]	@ (8011658 <micSettlingComplete+0x40>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	2201      	movs	r2, #1
 8011628:	401a      	ands	r2, r3
 801162a:	1dfb      	adds	r3, r7, #7
 801162c:	3a01      	subs	r2, #1
 801162e:	4251      	negs	r1, r2
 8011630:	414a      	adcs	r2, r1
 8011632:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011634:	1dfb      	adds	r3, r7, #7
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d007      	beq.n	801164c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 801163c:	4b06      	ldr	r3, [pc, #24]	@ (8011658 <micSettlingComplete+0x40>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	0018      	movs	r0, r3
 8011642:	f00b f8bb 	bl	801c7bc <HAL_TIM_Base_Stop>
      DataReady = true;
 8011646:	4b05      	ldr	r3, [pc, #20]	@ (801165c <micSettlingComplete+0x44>)
 8011648:	2201      	movs	r2, #1
 801164a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 801164c:	1dfb      	adds	r3, r7, #7
 801164e:	781b      	ldrb	r3, [r3, #0]
}
 8011650:	0018      	movs	r0, r3
 8011652:	46bd      	mov	sp, r7
 8011654:	b002      	add	sp, #8
 8011656:	bd80      	pop	{r7, pc}
 8011658:	20001b54 	.word	0x20001b54
 801165c:	2000110d 	.word	0x2000110d

08011660 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	0002      	movs	r2, r0
 8011668:	1dfb      	adds	r3, r7, #7
 801166a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 801166c:	4b29      	ldr	r3, [pc, #164]	@ (8011714 <enableMicrophone+0xb4>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	b2db      	uxtb	r3, r3
 8011672:	1dfa      	adds	r2, r7, #7
 8011674:	7812      	ldrb	r2, [r2, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	d101      	bne.n	801167e <enableMicrophone+0x1e>
    {
        return true;
 801167a:	2301      	movs	r3, #1
 801167c:	e045      	b.n	801170a <enableMicrophone+0xaa>
    }
    if (bEnable)
 801167e:	1dfb      	adds	r3, r7, #7
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d025      	beq.n	80116d2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011686:	f7ff ffb1 	bl	80115ec <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 801168a:	4b23      	ldr	r3, [pc, #140]	@ (8011718 <enableMicrophone+0xb8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2280      	movs	r2, #128	@ 0x80
 8011690:	0092      	lsls	r2, r2, #2
 8011692:	4922      	ldr	r1, [pc, #136]	@ (801171c <enableMicrophone+0xbc>)
 8011694:	0018      	movs	r0, r3
 8011696:	f007 fa93 	bl	8018bc0 <HAL_I2S_Receive_DMA>
 801169a:	1e03      	subs	r3, r0, #0
 801169c:	d001      	beq.n	80116a2 <enableMicrophone+0x42>
        {
            return false;
 801169e:	2300      	movs	r3, #0
 80116a0:	e033      	b.n	801170a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80116a2:	f7ff ff99 	bl	80115d8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 80116a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011720 <enableMicrophone+0xc0>)
 80116a8:	2200      	movs	r2, #0
 80116aa:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80116ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011724 <enableMicrophone+0xc4>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	b25b      	sxtb	r3, r3
 80116b2:	0018      	movs	r0, r3
 80116b4:	f7ff fe56 	bl	8011364 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 80116b8:	4b1b      	ldr	r3, [pc, #108]	@ (8011728 <enableMicrophone+0xc8>)
 80116ba:	2201      	movs	r2, #1
 80116bc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 80116be:	4b15      	ldr	r3, [pc, #84]	@ (8011714 <enableMicrophone+0xb4>)
 80116c0:	2201      	movs	r2, #1
 80116c2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80116c4:	4b19      	ldr	r3, [pc, #100]	@ (801172c <enableMicrophone+0xcc>)
 80116c6:	2200      	movs	r2, #0
 80116c8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80116ca:	4b19      	ldr	r3, [pc, #100]	@ (8011730 <enableMicrophone+0xd0>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	701a      	strb	r2, [r3, #0]
 80116d0:	e01a      	b.n	8011708 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80116d2:	4b14      	ldr	r3, [pc, #80]	@ (8011724 <enableMicrophone+0xc4>)
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	b25b      	sxtb	r3, r3
 80116d8:	0018      	movs	r0, r3
 80116da:	f7ff fe5d 	bl	8011398 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 80116de:	4b12      	ldr	r3, [pc, #72]	@ (8011728 <enableMicrophone+0xc8>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80116e4:	4b11      	ldr	r3, [pc, #68]	@ (801172c <enableMicrophone+0xcc>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 80116ea:	4b11      	ldr	r3, [pc, #68]	@ (8011730 <enableMicrophone+0xd0>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 80116f0:	4b09      	ldr	r3, [pc, #36]	@ (8011718 <enableMicrophone+0xb8>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	0018      	movs	r0, r3
 80116f6:	f007 fb25 	bl	8018d44 <HAL_I2S_DMAStop>
 80116fa:	1e03      	subs	r3, r0, #0
 80116fc:	d001      	beq.n	8011702 <enableMicrophone+0xa2>
        {
            return false;
 80116fe:	2300      	movs	r3, #0
 8011700:	e003      	b.n	801170a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011702:	4b04      	ldr	r3, [pc, #16]	@ (8011714 <enableMicrophone+0xb4>)
 8011704:	2200      	movs	r2, #0
 8011706:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011708:	2301      	movs	r3, #1
}
 801170a:	0018      	movs	r0, r3
 801170c:	46bd      	mov	sp, r7
 801170e:	b002      	add	sp, #8
 8011710:	bd80      	pop	{r7, pc}
 8011712:	46c0      	nop			@ (mov r8, r8)
 8011714:	2000110e 	.word	0x2000110e
 8011718:	20001b58 	.word	0x20001b58
 801171c:	20001154 	.word	0x20001154
 8011720:	20001114 	.word	0x20001114
 8011724:	20001b60 	.word	0x20001b60
 8011728:	20001110 	.word	0x20001110
 801172c:	2000110f 	.word	0x2000110f
 8011730:	20001111 	.word	0x20001111

08011734 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011738:	4b0c      	ldr	r3, [pc, #48]	@ (801176c <startSPLcalculation+0x38>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2201      	movs	r2, #1
 8011740:	4053      	eors	r3, r2
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b00      	cmp	r3, #0
 8011746:	d001      	beq.n	801174c <startSPLcalculation+0x18>
    {
        return false;
 8011748:	2300      	movs	r3, #0
 801174a:	e00c      	b.n	8011766 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 801174c:	4b08      	ldr	r3, [pc, #32]	@ (8011770 <startSPLcalculation+0x3c>)
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <startSPLcalculation+0x26>
    {
        return true;
 8011756:	2301      	movs	r3, #1
 8011758:	e005      	b.n	8011766 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 801175a:	f000 fb63 	bl	8011e24 <resetSPLstate>
    SPLcalcEnabled = true;
 801175e:	4b04      	ldr	r3, [pc, #16]	@ (8011770 <startSPLcalculation+0x3c>)
 8011760:	2201      	movs	r2, #1
 8011762:	701a      	strb	r2, [r3, #0]
    return true;
 8011764:	2301      	movs	r3, #1
}
 8011766:	0018      	movs	r0, r3
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}
 801176c:	2000110e 	.word	0x2000110e
 8011770:	2000110f 	.word	0x2000110f

08011774 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 801177c:	4b05      	ldr	r3, [pc, #20]	@ (8011794 <HAL_I2S_RxHalfCpltCallback+0x20>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	429a      	cmp	r2, r3
 8011784:	d102      	bne.n	801178c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011786:	2000      	movs	r0, #0
 8011788:	f000 f81a 	bl	80117c0 <processHalfDMAbuffer>
  }
}
 801178c:	46c0      	nop			@ (mov r8, r8)
 801178e:	46bd      	mov	sp, r7
 8011790:	b002      	add	sp, #8
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20001b58 	.word	0x20001b58

08011798 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80117a0:	4b06      	ldr	r3, [pc, #24]	@ (80117bc <HAL_I2S_RxCpltCallback+0x24>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d104      	bne.n	80117b4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 80117aa:	2380      	movs	r3, #128	@ 0x80
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	0018      	movs	r0, r3
 80117b0:	f000 f806 	bl	80117c0 <processHalfDMAbuffer>
  }
}
 80117b4:	46c0      	nop			@ (mov r8, r8)
 80117b6:	46bd      	mov	sp, r7
 80117b8:	b002      	add	sp, #8
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	20001b58 	.word	0x20001b58

080117c0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	005a      	lsls	r2, r3, #1
 80117cc:	4b15      	ldr	r3, [pc, #84]	@ (8011824 <processHalfDMAbuffer+0x64>)
 80117ce:	18d3      	adds	r3, r2, r3
 80117d0:	4a15      	ldr	r2, [pc, #84]	@ (8011828 <processHalfDMAbuffer+0x68>)
 80117d2:	2180      	movs	r1, #128	@ 0x80
 80117d4:	0089      	lsls	r1, r1, #2
 80117d6:	0018      	movs	r0, r3
 80117d8:	f000 fd35 	bl	8012246 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 80117dc:	4b13      	ldr	r3, [pc, #76]	@ (801182c <processHalfDMAbuffer+0x6c>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	425a      	negs	r2, r3
 80117e2:	4153      	adcs	r3, r2
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	4b11      	ldr	r3, [pc, #68]	@ (801182c <processHalfDMAbuffer+0x6c>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2109      	movs	r1, #9
 80117ec:	4299      	cmp	r1, r3
 80117ee:	419b      	sbcs	r3, r3
 80117f0:	425b      	negs	r3, r3
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	480c      	ldr	r0, [pc, #48]	@ (8011828 <processHalfDMAbuffer+0x68>)
 80117f6:	2180      	movs	r1, #128	@ 0x80
 80117f8:	f000 fb46 	bl	8011e88 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 80117fc:	4b0b      	ldr	r3, [pc, #44]	@ (801182c <processHalfDMAbuffer+0x6c>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b09      	cmp	r3, #9
 8011802:	d804      	bhi.n	801180e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011804:	4b09      	ldr	r3, [pc, #36]	@ (801182c <processHalfDMAbuffer+0x6c>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	1c5a      	adds	r2, r3, #1
 801180a:	4b08      	ldr	r3, [pc, #32]	@ (801182c <processHalfDMAbuffer+0x6c>)
 801180c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 801180e:	4b08      	ldr	r3, [pc, #32]	@ (8011830 <processHalfDMAbuffer+0x70>)
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	d001      	beq.n	801181c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011818:	f000 f826 	bl	8011868 <calculateSPLQ31>
    }
}
 801181c:	46c0      	nop			@ (mov r8, r8)
 801181e:	46bd      	mov	sp, r7
 8011820:	b002      	add	sp, #8
 8011822:	bd80      	pop	{r7, pc}
 8011824:	20001154 	.word	0x20001154
 8011828:	20001954 	.word	0x20001954
 801182c:	20001114 	.word	0x20001114
 8011830:	2000110f 	.word	0x2000110f

08011834 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 801183c:	4b07      	ldr	r3, [pc, #28]	@ (801185c <HAL_I2S_ErrorCallback+0x28>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	429a      	cmp	r2, r3
 8011844:	d106      	bne.n	8011854 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011846:	4a06      	ldr	r2, [pc, #24]	@ (8011860 <HAL_I2S_ErrorCallback+0x2c>)
 8011848:	239e      	movs	r3, #158	@ 0x9e
 801184a:	0059      	lsls	r1, r3, #1
 801184c:	4b05      	ldr	r3, [pc, #20]	@ (8011864 <HAL_I2S_ErrorCallback+0x30>)
 801184e:	0018      	movs	r0, r3
 8011850:	f002 f9f4 	bl	8013c3c <errorHandler>
  }
}
 8011854:	46c0      	nop			@ (mov r8, r8)
 8011856:	46bd      	mov	sp, r7
 8011858:	b002      	add	sp, #8
 801185a:	bd80      	pop	{r7, pc}
 801185c:	20001b58 	.word	0x20001b58
 8011860:	0802d808 	.word	0x0802d808
 8011864:	0802e19c 	.word	0x0802e19c

08011868 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801186a:	b0b3      	sub	sp, #204	@ 0xcc
 801186c:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 801186e:	4ae2      	ldr	r2, [pc, #904]	@ (8011bf8 <calculateSPLQ31+0x390>)
 8011870:	2338      	movs	r3, #56	@ 0x38
 8011872:	2030      	movs	r0, #48	@ 0x30
 8011874:	181b      	adds	r3, r3, r0
 8011876:	19d9      	adds	r1, r3, r7
 8011878:	2334      	movs	r3, #52	@ 0x34
 801187a:	181b      	adds	r3, r3, r0
 801187c:	19d8      	adds	r0, r3, r7
 801187e:	2380      	movs	r3, #128	@ 0x80
 8011880:	f000 fc36 	bl	80120f0 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011886:	2b00      	cmp	r3, #0
 8011888:	da00      	bge.n	801188c <calculateSPLQ31+0x24>
 801188a:	3301      	adds	r3, #1
 801188c:	105b      	asrs	r3, r3, #1
 801188e:	001a      	movs	r2, r3
 8011890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011892:	2b00      	cmp	r3, #0
 8011894:	da00      	bge.n	8011898 <calculateSPLQ31+0x30>
 8011896:	3301      	adds	r3, #1
 8011898:	105b      	asrs	r3, r3, #1
 801189a:	18d3      	adds	r3, r2, r3
 801189c:	2188      	movs	r1, #136	@ 0x88
 801189e:	187a      	adds	r2, r7, r1
 80118a0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80118a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	3304      	adds	r3, #4
 80118ac:	2284      	movs	r2, #132	@ 0x84
 80118ae:	18b9      	adds	r1, r7, r2
 80118b0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 80118b2:	18bb      	adds	r3, r7, r2
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4ad1      	ldr	r2, [pc, #836]	@ (8011bfc <calculateSPLQ31+0x394>)
 80118b8:	0019      	movs	r1, r3
 80118ba:	0010      	movs	r0, r2
 80118bc:	f000 fc58 	bl	8012170 <getPo2factor>
 80118c0:	0003      	movs	r3, r0
 80118c2:	2280      	movs	r2, #128	@ 0x80
 80118c4:	18ba      	adds	r2, r7, r2
 80118c6:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	2284      	movs	r2, #132	@ 0x84
 80118cc:	2130      	movs	r1, #48	@ 0x30
 80118ce:	1852      	adds	r2, r2, r1
 80118d0:	19d2      	adds	r2, r2, r7
 80118d2:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 80118d4:	2300      	movs	r3, #0
 80118d6:	2280      	movs	r2, #128	@ 0x80
 80118d8:	1852      	adds	r2, r2, r1
 80118da:	19d2      	adds	r2, r2, r7
 80118dc:	6013      	str	r3, [r2, #0]
 80118de:	e032      	b.n	8011946 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 80118e0:	4ac5      	ldr	r2, [pc, #788]	@ (8011bf8 <calculateSPLQ31+0x390>)
 80118e2:	2680      	movs	r6, #128	@ 0x80
 80118e4:	2330      	movs	r3, #48	@ 0x30
 80118e6:	18f1      	adds	r1, r6, r3
 80118e8:	19cb      	adds	r3, r1, r7
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	589a      	ldr	r2, [r3, r2]
 80118f0:	2188      	movs	r1, #136	@ 0x88
 80118f2:	1879      	adds	r1, r7, r1
 80118f4:	680b      	ldr	r3, [r1, #0]
 80118f6:	1ad2      	subs	r2, r2, r3
 80118f8:	2180      	movs	r1, #128	@ 0x80
 80118fa:	1879      	adds	r1, r7, r1
 80118fc:	680b      	ldr	r3, [r1, #0]
 80118fe:	409a      	lsls	r2, r3
 8011900:	0011      	movs	r1, r2
 8011902:	4abf      	ldr	r2, [pc, #764]	@ (8011c00 <calculateSPLQ31+0x398>)
 8011904:	2084      	movs	r0, #132	@ 0x84
 8011906:	2330      	movs	r3, #48	@ 0x30
 8011908:	18c3      	adds	r3, r0, r3
 801190a:	19db      	adds	r3, r3, r7
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011912:	2230      	movs	r2, #48	@ 0x30
 8011914:	1883      	adds	r3, r0, r2
 8011916:	19db      	adds	r3, r3, r7
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3301      	adds	r3, #1
 801191c:	49b8      	ldr	r1, [pc, #736]	@ (8011c00 <calculateSPLQ31+0x398>)
 801191e:	009a      	lsls	r2, r3, #2
 8011920:	2300      	movs	r3, #0
 8011922:	5053      	str	r3, [r2, r1]
        count += 2;
 8011924:	2230      	movs	r2, #48	@ 0x30
 8011926:	1883      	adds	r3, r0, r2
 8011928:	19db      	adds	r3, r3, r7
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	3302      	adds	r3, #2
 801192e:	0011      	movs	r1, r2
 8011930:	1882      	adds	r2, r0, r2
 8011932:	19d2      	adds	r2, r2, r7
 8011934:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011936:	000a      	movs	r2, r1
 8011938:	18b3      	adds	r3, r6, r2
 801193a:	19db      	adds	r3, r3, r7
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3301      	adds	r3, #1
 8011940:	18b2      	adds	r2, r6, r2
 8011942:	19d2      	adds	r2, r2, r7
 8011944:	6013      	str	r3, [r2, #0]
 8011946:	2380      	movs	r3, #128	@ 0x80
 8011948:	2630      	movs	r6, #48	@ 0x30
 801194a:	199b      	adds	r3, r3, r6
 801194c:	19db      	adds	r3, r3, r7
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b7f      	cmp	r3, #127	@ 0x7f
 8011952:	d9c5      	bls.n	80118e0 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011954:	4bab      	ldr	r3, [pc, #684]	@ (8011c04 <calculateSPLQ31+0x39c>)
 8011956:	6818      	ldr	r0, [r3, #0]
 8011958:	49a9      	ldr	r1, [pc, #676]	@ (8011c00 <calculateSPLQ31+0x398>)
 801195a:	2301      	movs	r3, #1
 801195c:	2200      	movs	r2, #0
 801195e:	f011 ffab 	bl	80238b8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011962:	4aa9      	ldr	r2, [pc, #676]	@ (8011c08 <calculateSPLQ31+0x3a0>)
 8011964:	2338      	movs	r3, #56	@ 0x38
 8011966:	199b      	adds	r3, r3, r6
 8011968:	19d9      	adds	r1, r3, r7
 801196a:	2334      	movs	r3, #52	@ 0x34
 801196c:	199b      	adds	r3, r3, r6
 801196e:	19d8      	adds	r0, r3, r7
 8011970:	237e      	movs	r3, #126	@ 0x7e
 8011972:	f000 fbbd 	bl	80120f0 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011976:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011978:	2380      	movs	r3, #128	@ 0x80
 801197a:	061b      	lsls	r3, r3, #24
 801197c:	429a      	cmp	r2, r3
 801197e:	d101      	bne.n	8011984 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011980:	4b9e      	ldr	r3, [pc, #632]	@ (8011bfc <calculateSPLQ31+0x394>)
 8011982:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011984:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011986:	2380      	movs	r3, #128	@ 0x80
 8011988:	061b      	lsls	r3, r3, #24
 801198a:	429a      	cmp	r2, r3
 801198c:	d101      	bne.n	8011992 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 801198e:	4b9b      	ldr	r3, [pc, #620]	@ (8011bfc <calculateSPLQ31+0x394>)
 8011990:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011994:	17da      	asrs	r2, r3, #31
 8011996:	189b      	adds	r3, r3, r2
 8011998:	4053      	eors	r3, r2
 801199a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 801199c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801199e:	17da      	asrs	r2, r3, #31
 80119a0:	189b      	adds	r3, r3, r2
 80119a2:	4053      	eors	r3, r2
 80119a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80119a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80119a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80119aa:	429a      	cmp	r2, r3
 80119ac:	dd01      	ble.n	80119b2 <calculateSPLQ31+0x14a>
    {
        max = min;
 80119ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 80119b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80119b4:	3304      	adds	r3, #4
 80119b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80119b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80119ba:	4a90      	ldr	r2, [pc, #576]	@ (8011bfc <calculateSPLQ31+0x394>)
 80119bc:	0019      	movs	r1, r3
 80119be:	0010      	movs	r0, r2
 80119c0:	f000 fbd6 	bl	8012170 <getPo2factor>
 80119c4:	0003      	movs	r3, r0
 80119c6:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 80119c8:	2302      	movs	r3, #2
 80119ca:	22ac      	movs	r2, #172	@ 0xac
 80119cc:	18ba      	adds	r2, r7, r2
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	e012      	b.n	80119f8 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80119d2:	4a8b      	ldr	r2, [pc, #556]	@ (8011c00 <calculateSPLQ31+0x398>)
 80119d4:	20ac      	movs	r0, #172	@ 0xac
 80119d6:	183b      	adds	r3, r7, r0
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	589a      	ldr	r2, [r3, r2]
 80119de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119e0:	409a      	lsls	r2, r3
 80119e2:	0011      	movs	r1, r2
 80119e4:	4a86      	ldr	r2, [pc, #536]	@ (8011c00 <calculateSPLQ31+0x398>)
 80119e6:	183b      	adds	r3, r7, r0
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 80119ee:	183b      	adds	r3, r7, r0
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	3301      	adds	r3, #1
 80119f4:	183a      	adds	r2, r7, r0
 80119f6:	6013      	str	r3, [r2, #0]
 80119f8:	23ac      	movs	r3, #172	@ 0xac
 80119fa:	18fb      	adds	r3, r7, r3
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a00:	d9e7      	bls.n	80119d2 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011a02:	4b7d      	ldr	r3, [pc, #500]	@ (8011bf8 <calculateSPLQ31+0x390>)
 8011a04:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011a06:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011a08:	4b7d      	ldr	r3, [pc, #500]	@ (8011c00 <calculateSPLQ31+0x398>)
 8011a0a:	2240      	movs	r2, #64	@ 0x40
 8011a0c:	0018      	movs	r0, r3
 8011a0e:	f012 fcfd 	bl	802440c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011a12:	2330      	movs	r3, #48	@ 0x30
 8011a14:	18fb      	adds	r3, r7, r3
 8011a16:	0018      	movs	r0, r3
 8011a18:	2330      	movs	r3, #48	@ 0x30
 8011a1a:	001a      	movs	r2, r3
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	f014 fb49 	bl	80260b4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011a22:	2200      	movs	r2, #0
 8011a24:	2300      	movs	r3, #0
 8011a26:	21a0      	movs	r1, #160	@ 0xa0
 8011a28:	1879      	adds	r1, r7, r1
 8011a2a:	600a      	str	r2, [r1, #0]
 8011a2c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011a2e:	2301      	movs	r3, #1
 8011a30:	229c      	movs	r2, #156	@ 0x9c
 8011a32:	18ba      	adds	r2, r7, r2
 8011a34:	6013      	str	r3, [r2, #0]
 8011a36:	e05b      	b.n	8011af0 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011a38:	269c      	movs	r6, #156	@ 0x9c
 8011a3a:	19bb      	adds	r3, r7, r6
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	009a      	lsls	r2, r3, #2
 8011a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a42:	189b      	adds	r3, r3, r2
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	613b      	str	r3, [r7, #16]
 8011a48:	17db      	asrs	r3, r3, #31
 8011a4a:	617b      	str	r3, [r7, #20]
 8011a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8011c0c <calculateSPLQ31+0x3a4>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	19bb      	adds	r3, r7, r6
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	18d3      	adds	r3, r2, r3
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	60bb      	str	r3, [r7, #8]
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	60fb      	str	r3, [r7, #12]
 8011a60:	68ba      	ldr	r2, [r7, #8]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6938      	ldr	r0, [r7, #16]
 8011a66:	6979      	ldr	r1, [r7, #20]
 8011a68:	f7ee fdaa 	bl	80005c0 <__aeabi_lmul>
 8011a6c:	0002      	movs	r2, r0
 8011a6e:	000b      	movs	r3, r1
 8011a70:	0010      	movs	r0, r2
 8011a72:	0019      	movs	r1, r3
 8011a74:	23a0      	movs	r3, #160	@ 0xa0
 8011a76:	18fa      	adds	r2, r7, r3
 8011a78:	6853      	ldr	r3, [r2, #4]
 8011a7a:	6812      	ldr	r2, [r2, #0]
 8011a7c:	1812      	adds	r2, r2, r0
 8011a7e:	414b      	adcs	r3, r1
 8011a80:	21a0      	movs	r1, #160	@ 0xa0
 8011a82:	1879      	adds	r1, r7, r1
 8011a84:	600a      	str	r2, [r1, #0]
 8011a86:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011a88:	4b61      	ldr	r3, [pc, #388]	@ (8011c10 <calculateSPLQ31+0x3a8>)
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	19bb      	adds	r3, r7, r6
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	18d3      	adds	r3, r2, r3
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	2b06      	cmp	r3, #6
 8011a96:	d025      	beq.n	8011ae4 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011a98:	4b5d      	ldr	r3, [pc, #372]	@ (8011c10 <calculateSPLQ31+0x3a8>)
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	19bb      	adds	r3, r7, r6
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	18d3      	adds	r3, r2, r3
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	2230      	movs	r2, #48	@ 0x30
 8011aa6:	18ba      	adds	r2, r7, r2
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	18d3      	adds	r3, r2, r3
 8011aac:	6818      	ldr	r0, [r3, #0]
 8011aae:	6859      	ldr	r1, [r3, #4]
 8011ab0:	19bb      	adds	r3, r7, r6
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	009a      	lsls	r2, r3, #2
 8011ab6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ab8:	189b      	adds	r3, r3, r2
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	603b      	str	r3, [r7, #0]
 8011abe:	17db      	asrs	r3, r3, #31
 8011ac0:	607b      	str	r3, [r7, #4]
 8011ac2:	4b53      	ldr	r3, [pc, #332]	@ (8011c10 <calculateSPLQ31+0x3a8>)
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	19be      	adds	r6, r7, r6
 8011ac8:	6833      	ldr	r3, [r6, #0]
 8011aca:	18d3      	adds	r3, r2, r3
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	001e      	movs	r6, r3
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	1880      	adds	r0, r0, r2
 8011ad6:	4159      	adcs	r1, r3
 8011ad8:	2330      	movs	r3, #48	@ 0x30
 8011ada:	18fa      	adds	r2, r7, r3
 8011adc:	00f3      	lsls	r3, r6, #3
 8011ade:	18d3      	adds	r3, r2, r3
 8011ae0:	6018      	str	r0, [r3, #0]
 8011ae2:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011ae4:	229c      	movs	r2, #156	@ 0x9c
 8011ae6:	18bb      	adds	r3, r7, r2
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	3301      	adds	r3, #1
 8011aec:	18ba      	adds	r2, r7, r2
 8011aee:	6013      	str	r3, [r2, #0]
 8011af0:	239c      	movs	r3, #156	@ 0x9c
 8011af2:	18fb      	adds	r3, r7, r3
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b3f      	cmp	r3, #63	@ 0x3f
 8011af8:	d99e      	bls.n	8011a38 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011afa:	2380      	movs	r3, #128	@ 0x80
 8011afc:	18fb      	adds	r3, r7, r3
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	001a      	movs	r2, r3
 8011b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	18d3      	adds	r3, r2, r3
 8011b0a:	3b22      	subs	r3, #34	@ 0x22
 8011b0c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b10:	17da      	asrs	r2, r3, #31
 8011b12:	189b      	adds	r3, r3, r2
 8011b14:	4053      	eors	r3, r2
 8011b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011b18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	da62      	bge.n	8011be4 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b20:	3b20      	subs	r3, #32
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	db05      	blt.n	8011b32 <calculateSPLQ31+0x2ca>
 8011b26:	22a0      	movs	r2, #160	@ 0xa0
 8011b28:	18ba      	adds	r2, r7, r2
 8011b2a:	6812      	ldr	r2, [r2, #0]
 8011b2c:	409a      	lsls	r2, r3
 8011b2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b30:	e010      	b.n	8011b54 <calculateSPLQ31+0x2ec>
 8011b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b34:	2220      	movs	r2, #32
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	22a0      	movs	r2, #160	@ 0xa0
 8011b3a:	18ba      	adds	r2, r7, r2
 8011b3c:	6812      	ldr	r2, [r2, #0]
 8011b3e:	40da      	lsrs	r2, r3
 8011b40:	0013      	movs	r3, r2
 8011b42:	22a4      	movs	r2, #164	@ 0xa4
 8011b44:	18ba      	adds	r2, r7, r2
 8011b46:	6811      	ldr	r1, [r2, #0]
 8011b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011b4a:	4091      	lsls	r1, r2
 8011b4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8011b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b50:	431a      	orrs	r2, r3
 8011b52:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b54:	21a0      	movs	r1, #160	@ 0xa0
 8011b56:	187b      	adds	r3, r7, r1
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b5c:	409a      	lsls	r2, r3
 8011b5e:	623a      	str	r2, [r7, #32]
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011b64:	187a      	adds	r2, r7, r1
 8011b66:	6013      	str	r3, [r2, #0]
 8011b68:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	2298      	movs	r2, #152	@ 0x98
 8011b6e:	18ba      	adds	r2, r7, r2
 8011b70:	6013      	str	r3, [r2, #0]
 8011b72:	e031      	b.n	8011bd8 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011b74:	2330      	movs	r3, #48	@ 0x30
 8011b76:	18fa      	adds	r2, r7, r3
 8011b78:	2398      	movs	r3, #152	@ 0x98
 8011b7a:	18fb      	adds	r3, r7, r3
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	00db      	lsls	r3, r3, #3
 8011b80:	18d3      	adds	r3, r2, r3
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011b88:	3920      	subs	r1, #32
 8011b8a:	2900      	cmp	r1, #0
 8011b8c:	db03      	blt.n	8011b96 <calculateSPLQ31+0x32e>
 8011b8e:	0010      	movs	r0, r2
 8011b90:	4088      	lsls	r0, r1
 8011b92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011b94:	e00c      	b.n	8011bb0 <calculateSPLQ31+0x348>
 8011b96:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011b98:	2020      	movs	r0, #32
 8011b9a:	1a41      	subs	r1, r0, r1
 8011b9c:	0010      	movs	r0, r2
 8011b9e:	40c8      	lsrs	r0, r1
 8011ba0:	0001      	movs	r1, r0
 8011ba2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011ba4:	001c      	movs	r4, r3
 8011ba6:	4084      	lsls	r4, r0
 8011ba8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011bac:	4308      	orrs	r0, r1
 8011bae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011bb0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011bb2:	0013      	movs	r3, r2
 8011bb4:	408b      	lsls	r3, r1
 8011bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bb8:	2330      	movs	r3, #48	@ 0x30
 8011bba:	18fa      	adds	r2, r7, r3
 8011bbc:	2098      	movs	r0, #152	@ 0x98
 8011bbe:	183b      	adds	r3, r7, r0
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	00db      	lsls	r3, r3, #3
 8011bc4:	18d3      	adds	r3, r2, r3
 8011bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bca:	6019      	str	r1, [r3, #0]
 8011bcc:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011bce:	183b      	adds	r3, r7, r0
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	183a      	adds	r2, r7, r0
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	2398      	movs	r3, #152	@ 0x98
 8011bda:	18fb      	adds	r3, r7, r3
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b05      	cmp	r3, #5
 8011be0:	d9c8      	bls.n	8011b74 <calculateSPLQ31+0x30c>
 8011be2:	e06b      	b.n	8011cbc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011be6:	3b20      	subs	r3, #32
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	db13      	blt.n	8011c14 <calculateSPLQ31+0x3ac>
 8011bec:	22a4      	movs	r2, #164	@ 0xa4
 8011bee:	18ba      	adds	r2, r7, r2
 8011bf0:	6812      	ldr	r2, [r2, #0]
 8011bf2:	40da      	lsrs	r2, r3
 8011bf4:	61ba      	str	r2, [r7, #24]
 8011bf6:	e01e      	b.n	8011c36 <calculateSPLQ31+0x3ce>
 8011bf8:	20001954 	.word	0x20001954
 8011bfc:	7fffffff 	.word	0x7fffffff
 8011c00:	20001ba0 	.word	0x20001ba0
 8011c04:	200000d4 	.word	0x200000d4
 8011c08:	20001ba8 	.word	0x20001ba8
 8011c0c:	200000d8 	.word	0x200000d8
 8011c10:	200000e4 	.word	0x200000e4
 8011c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c16:	2220      	movs	r2, #32
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	22a4      	movs	r2, #164	@ 0xa4
 8011c1c:	18ba      	adds	r2, r7, r2
 8011c1e:	6812      	ldr	r2, [r2, #0]
 8011c20:	409a      	lsls	r2, r3
 8011c22:	0013      	movs	r3, r2
 8011c24:	22a0      	movs	r2, #160	@ 0xa0
 8011c26:	18ba      	adds	r2, r7, r2
 8011c28:	6811      	ldr	r1, [r2, #0]
 8011c2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011c2c:	40d1      	lsrs	r1, r2
 8011c2e:	61b9      	str	r1, [r7, #24]
 8011c30:	69ba      	ldr	r2, [r7, #24]
 8011c32:	431a      	orrs	r2, r3
 8011c34:	61ba      	str	r2, [r7, #24]
 8011c36:	23a4      	movs	r3, #164	@ 0xa4
 8011c38:	18fb      	adds	r3, r7, r3
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c3e:	40da      	lsrs	r2, r3
 8011c40:	61fa      	str	r2, [r7, #28]
 8011c42:	69ba      	ldr	r2, [r7, #24]
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	21a0      	movs	r1, #160	@ 0xa0
 8011c48:	1879      	adds	r1, r7, r1
 8011c4a:	600a      	str	r2, [r1, #0]
 8011c4c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011c4e:	2300      	movs	r3, #0
 8011c50:	2294      	movs	r2, #148	@ 0x94
 8011c52:	18ba      	adds	r2, r7, r2
 8011c54:	6013      	str	r3, [r2, #0]
 8011c56:	e02c      	b.n	8011cb2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011c58:	2330      	movs	r3, #48	@ 0x30
 8011c5a:	18fa      	adds	r2, r7, r3
 8011c5c:	2394      	movs	r3, #148	@ 0x94
 8011c5e:	18fb      	adds	r3, r7, r3
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	00db      	lsls	r3, r3, #3
 8011c64:	18d3      	adds	r3, r2, r3
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011c6c:	3920      	subs	r1, #32
 8011c6e:	2900      	cmp	r1, #0
 8011c70:	db03      	blt.n	8011c7a <calculateSPLQ31+0x412>
 8011c72:	0018      	movs	r0, r3
 8011c74:	40c8      	lsrs	r0, r1
 8011c76:	0004      	movs	r4, r0
 8011c78:	e00a      	b.n	8011c90 <calculateSPLQ31+0x428>
 8011c7a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011c7c:	2020      	movs	r0, #32
 8011c7e:	1a41      	subs	r1, r0, r1
 8011c80:	0018      	movs	r0, r3
 8011c82:	4088      	lsls	r0, r1
 8011c84:	0001      	movs	r1, r0
 8011c86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c88:	0016      	movs	r6, r2
 8011c8a:	40c6      	lsrs	r6, r0
 8011c8c:	0034      	movs	r4, r6
 8011c8e:	430c      	orrs	r4, r1
 8011c90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011c92:	40cb      	lsrs	r3, r1
 8011c94:	001d      	movs	r5, r3
 8011c96:	2330      	movs	r3, #48	@ 0x30
 8011c98:	18fa      	adds	r2, r7, r3
 8011c9a:	2194      	movs	r1, #148	@ 0x94
 8011c9c:	187b      	adds	r3, r7, r1
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	00db      	lsls	r3, r3, #3
 8011ca2:	18d3      	adds	r3, r2, r3
 8011ca4:	601c      	str	r4, [r3, #0]
 8011ca6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011ca8:	187b      	adds	r3, r7, r1
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3301      	adds	r3, #1
 8011cae:	187a      	adds	r2, r7, r1
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	2394      	movs	r3, #148	@ 0x94
 8011cb4:	18fb      	adds	r3, r7, r3
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b05      	cmp	r3, #5
 8011cba:	d9cd      	bls.n	8011c58 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011cbc:	230f      	movs	r3, #15
 8011cbe:	425d      	negs	r5, r3
 8011cc0:	2305      	movs	r3, #5
 8011cc2:	425e      	negs	r6, r3
 8011cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8011df0 <calculateSPLQ31+0x588>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	4b4a      	ldr	r3, [pc, #296]	@ (8011df4 <calculateSPLQ31+0x58c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	21a0      	movs	r1, #160	@ 0xa0
 8011cd2:	1879      	adds	r1, r7, r1
 8011cd4:	6808      	ldr	r0, [r1, #0]
 8011cd6:	6849      	ldr	r1, [r1, #4]
 8011cd8:	4c47      	ldr	r4, [pc, #284]	@ (8011df8 <calculateSPLQ31+0x590>)
 8011cda:	9403      	str	r4, [sp, #12]
 8011cdc:	4c47      	ldr	r4, [pc, #284]	@ (8011dfc <calculateSPLQ31+0x594>)
 8011cde:	9402      	str	r4, [sp, #8]
 8011ce0:	9301      	str	r3, [sp, #4]
 8011ce2:	9200      	str	r2, [sp, #0]
 8011ce4:	0033      	movs	r3, r6
 8011ce6:	002a      	movs	r2, r5
 8011ce8:	f000 fa86 	bl	80121f8 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011cec:	2300      	movs	r3, #0
 8011cee:	2290      	movs	r2, #144	@ 0x90
 8011cf0:	18ba      	adds	r2, r7, r2
 8011cf2:	6013      	str	r3, [r2, #0]
 8011cf4:	e026      	b.n	8011d44 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011cf6:	2330      	movs	r3, #48	@ 0x30
 8011cf8:	18fa      	adds	r2, r7, r3
 8011cfa:	2490      	movs	r4, #144	@ 0x90
 8011cfc:	193b      	adds	r3, r7, r4
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	00db      	lsls	r3, r3, #3
 8011d02:	18d3      	adds	r3, r2, r3
 8011d04:	6818      	ldr	r0, [r3, #0]
 8011d06:	6859      	ldr	r1, [r3, #4]
 8011d08:	230f      	movs	r3, #15
 8011d0a:	425d      	negs	r5, r3
 8011d0c:	2305      	movs	r3, #5
 8011d0e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8011d10:	193b      	adds	r3, r7, r4
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	009a      	lsls	r2, r3, #2
 8011d16:	4b3a      	ldr	r3, [pc, #232]	@ (8011e00 <calculateSPLQ31+0x598>)
 8011d18:	18d3      	adds	r3, r2, r3
 8011d1a:	193a      	adds	r2, r7, r4
 8011d1c:	6812      	ldr	r2, [r2, #0]
 8011d1e:	0094      	lsls	r4, r2, #2
 8011d20:	4a38      	ldr	r2, [pc, #224]	@ (8011e04 <calculateSPLQ31+0x59c>)
 8011d22:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011d24:	9203      	str	r2, [sp, #12]
 8011d26:	9302      	str	r3, [sp, #8]
 8011d28:	2300      	movs	r3, #0
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	0033      	movs	r3, r6
 8011d32:	002a      	movs	r2, r5
 8011d34:	f000 fa60 	bl	80121f8 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011d38:	2490      	movs	r4, #144	@ 0x90
 8011d3a:	193b      	adds	r3, r7, r4
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	193a      	adds	r2, r7, r4
 8011d42:	6013      	str	r3, [r2, #0]
 8011d44:	2390      	movs	r3, #144	@ 0x90
 8011d46:	18fb      	adds	r3, r7, r3
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b05      	cmp	r3, #5
 8011d4c:	d9d3      	bls.n	8011cf6 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8011d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8011dfc <calculateSPLQ31+0x594>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	4b2d      	ldr	r3, [pc, #180]	@ (8011e08 <calculateSPLQ31+0x5a0>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	18d2      	adds	r2, r2, r3
 8011d58:	4b2b      	ldr	r3, [pc, #172]	@ (8011e08 <calculateSPLQ31+0x5a0>)
 8011d5a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8011d5c:	4b26      	ldr	r3, [pc, #152]	@ (8011df8 <calculateSPLQ31+0x590>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	4b2a      	ldr	r3, [pc, #168]	@ (8011e0c <calculateSPLQ31+0x5a4>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	18d2      	adds	r2, r2, r3
 8011d66:	4b29      	ldr	r3, [pc, #164]	@ (8011e0c <calculateSPLQ31+0x5a4>)
 8011d68:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	228c      	movs	r2, #140	@ 0x8c
 8011d6e:	18ba      	adds	r2, r7, r2
 8011d70:	6013      	str	r3, [r2, #0]
 8011d72:	e025      	b.n	8011dc0 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8011d74:	4b22      	ldr	r3, [pc, #136]	@ (8011e00 <calculateSPLQ31+0x598>)
 8011d76:	208c      	movs	r0, #140	@ 0x8c
 8011d78:	183a      	adds	r2, r7, r0
 8011d7a:	6812      	ldr	r2, [r2, #0]
 8011d7c:	0092      	lsls	r2, r2, #2
 8011d7e:	58d2      	ldr	r2, [r2, r3]
 8011d80:	4b23      	ldr	r3, [pc, #140]	@ (8011e10 <calculateSPLQ31+0x5a8>)
 8011d82:	1839      	adds	r1, r7, r0
 8011d84:	6809      	ldr	r1, [r1, #0]
 8011d86:	0089      	lsls	r1, r1, #2
 8011d88:	58cb      	ldr	r3, [r1, r3]
 8011d8a:	18d1      	adds	r1, r2, r3
 8011d8c:	4b20      	ldr	r3, [pc, #128]	@ (8011e10 <calculateSPLQ31+0x5a8>)
 8011d8e:	183a      	adds	r2, r7, r0
 8011d90:	6812      	ldr	r2, [r2, #0]
 8011d92:	0092      	lsls	r2, r2, #2
 8011d94:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 8011d96:	4b1b      	ldr	r3, [pc, #108]	@ (8011e04 <calculateSPLQ31+0x59c>)
 8011d98:	183a      	adds	r2, r7, r0
 8011d9a:	6812      	ldr	r2, [r2, #0]
 8011d9c:	0092      	lsls	r2, r2, #2
 8011d9e:	58d2      	ldr	r2, [r2, r3]
 8011da0:	4b1c      	ldr	r3, [pc, #112]	@ (8011e14 <calculateSPLQ31+0x5ac>)
 8011da2:	1839      	adds	r1, r7, r0
 8011da4:	6809      	ldr	r1, [r1, #0]
 8011da6:	0089      	lsls	r1, r1, #2
 8011da8:	58cb      	ldr	r3, [r1, r3]
 8011daa:	18d1      	adds	r1, r2, r3
 8011dac:	4b19      	ldr	r3, [pc, #100]	@ (8011e14 <calculateSPLQ31+0x5ac>)
 8011dae:	183a      	adds	r2, r7, r0
 8011db0:	6812      	ldr	r2, [r2, #0]
 8011db2:	0092      	lsls	r2, r2, #2
 8011db4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011db6:	183b      	adds	r3, r7, r0
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	183a      	adds	r2, r7, r0
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	238c      	movs	r3, #140	@ 0x8c
 8011dc2:	18fb      	adds	r3, r7, r3
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b05      	cmp	r3, #5
 8011dc8:	d9d4      	bls.n	8011d74 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8011dca:	4b13      	ldr	r3, [pc, #76]	@ (8011e18 <calculateSPLQ31+0x5b0>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	1c5a      	adds	r2, r3, #1
 8011dd0:	4b11      	ldr	r3, [pc, #68]	@ (8011e18 <calculateSPLQ31+0x5b0>)
 8011dd2:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8011dd4:	4b10      	ldr	r3, [pc, #64]	@ (8011e18 <calculateSPLQ31+0x5b0>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2b0f      	cmp	r3, #15
 8011dda:	d905      	bls.n	8011de8 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8011ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8011e1c <calculateSPLQ31+0x5b4>)
 8011dde:	2201      	movs	r2, #1
 8011de0:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011de2:	4b0f      	ldr	r3, [pc, #60]	@ (8011e20 <calculateSPLQ31+0x5b8>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	701a      	strb	r2, [r3, #0]
    }
}
 8011de8:	46c0      	nop			@ (mov r8, r8)
 8011dea:	46bd      	mov	sp, r7
 8011dec:	b02f      	add	sp, #188	@ 0xbc
 8011dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011df0:	200000dc 	.word	0x200000dc
 8011df4:	200000e0 	.word	0x200000e0
 8011df8:	20001120 	.word	0x20001120
 8011dfc:	2000111c 	.word	0x2000111c
 8011e00:	20001124 	.word	0x20001124
 8011e04:	2000113c 	.word	0x2000113c
 8011e08:	20001b64 	.word	0x20001b64
 8011e0c:	20001b68 	.word	0x20001b68
 8011e10:	20001b6c 	.word	0x20001b6c
 8011e14:	20001b84 	.word	0x20001b84
 8011e18:	20001b9c 	.word	0x20001b9c
 8011e1c:	20001111 	.word	0x20001111
 8011e20:	2000110f 	.word	0x2000110f

08011e24 <resetSPLstate>:

static void resetSPLstate(void)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8011e2a:	4b11      	ldr	r3, [pc, #68]	@ (8011e70 <resetSPLstate+0x4c>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8011e30:	4b10      	ldr	r3, [pc, #64]	@ (8011e74 <resetSPLstate+0x50>)
 8011e32:	2200      	movs	r2, #0
 8011e34:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8011e36:	4b10      	ldr	r3, [pc, #64]	@ (8011e78 <resetSPLstate+0x54>)
 8011e38:	2200      	movs	r2, #0
 8011e3a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	607b      	str	r3, [r7, #4]
 8011e40:	e00c      	b.n	8011e5c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8011e42:	4b0e      	ldr	r3, [pc, #56]	@ (8011e7c <resetSPLstate+0x58>)
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	0092      	lsls	r2, r2, #2
 8011e48:	2100      	movs	r1, #0
 8011e4a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8011e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8011e80 <resetSPLstate+0x5c>)
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	0092      	lsls	r2, r2, #2
 8011e52:	2100      	movs	r1, #0
 8011e54:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	607b      	str	r3, [r7, #4]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b05      	cmp	r3, #5
 8011e60:	d9ef      	bls.n	8011e42 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8011e62:	4b08      	ldr	r3, [pc, #32]	@ (8011e84 <resetSPLstate+0x60>)
 8011e64:	2200      	movs	r2, #0
 8011e66:	701a      	strb	r2, [r3, #0]
}
 8011e68:	46c0      	nop			@ (mov r8, r8)
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	b002      	add	sp, #8
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	20001b64 	.word	0x20001b64
 8011e74:	20001b68 	.word	0x20001b68
 8011e78:	20001b9c 	.word	0x20001b9c
 8011e7c:	20001b6c 	.word	0x20001b6c
 8011e80:	20001b84 	.word	0x20001b84
 8011e84:	20001111 	.word	0x20001111

08011e88 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8011e88:	b5b0      	push	{r4, r5, r7, lr}
 8011e8a:	b090      	sub	sp, #64	@ 0x40
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	0019      	movs	r1, r3
 8011e94:	1dfb      	adds	r3, r7, #7
 8011e96:	701a      	strb	r2, [r3, #0]
 8011e98:	1dbb      	adds	r3, r7, #6
 8011e9a:	1c0a      	adds	r2, r1, #0
 8011e9c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8011e9e:	1dfb      	adds	r3, r7, #7
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d005      	beq.n	8011eb2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 8011ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011eac:	4b3a      	ldr	r3, [pc, #232]	@ (8011f98 <getFilteredMaxAmplitudeQ31+0x110>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8011eba:	2305      	movs	r3, #5
 8011ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ec2:	e040      	b.n	8011f46 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	18d3      	adds	r3, r2, r3
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed0:	409a      	lsls	r2, r3
 8011ed2:	0013      	movs	r3, r2
 8011ed4:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8011ed6:	4b30      	ldr	r3, [pc, #192]	@ (8011f98 <getFilteredMaxAmplitudeQ31+0x110>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	425a      	negs	r2, r3
 8011edc:	4b2e      	ldr	r3, [pc, #184]	@ (8011f98 <getFilteredMaxAmplitudeQ31+0x110>)
 8011ede:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8011ee0:	2418      	movs	r4, #24
 8011ee2:	193a      	adds	r2, r7, r4
 8011ee4:	492c      	ldr	r1, [pc, #176]	@ (8011f98 <getFilteredMaxAmplitudeQ31+0x110>)
 8011ee6:	231c      	movs	r3, #28
 8011ee8:	18f8      	adds	r0, r7, r3
 8011eea:	2301      	movs	r3, #1
 8011eec:	f012 fae6 	bl	80244bc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8011ef0:	2514      	movs	r5, #20
 8011ef2:	197a      	adds	r2, r7, r5
 8011ef4:	1939      	adds	r1, r7, r4
 8011ef6:	4829      	ldr	r0, [pc, #164]	@ (8011f9c <getFilteredMaxAmplitudeQ31+0x114>)
 8011ef8:	2301      	movs	r3, #1
 8011efa:	f012 faad 	bl	8024458 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8011efe:	2410      	movs	r4, #16
 8011f00:	193a      	adds	r2, r7, r4
 8011f02:	4924      	ldr	r1, [pc, #144]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f04:	4826      	ldr	r0, [pc, #152]	@ (8011fa0 <getFilteredMaxAmplitudeQ31+0x118>)
 8011f06:	2301      	movs	r3, #1
 8011f08:	f012 faa6 	bl	8024458 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8011f0c:	4a21      	ldr	r2, [pc, #132]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f0e:	1939      	adds	r1, r7, r4
 8011f10:	1978      	adds	r0, r7, r5
 8011f12:	2301      	movs	r3, #1
 8011f14:	f012 fad2 	bl	80244bc <arm_add_q31>

        lastData = fx;
 8011f18:	69fa      	ldr	r2, [r7, #28]
 8011f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8011f98 <getFilteredMaxAmplitudeQ31+0x110>)
 8011f1c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8011f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011f24:	429a      	cmp	r2, r3
 8011f26:	da03      	bge.n	8011f30 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8011f28:	4b1a      	ldr	r3, [pc, #104]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f2e:	e007      	b.n	8011f40 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8011f30:	4b18      	ldr	r3, [pc, #96]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f36:	429a      	cmp	r2, r3
 8011f38:	dd02      	ble.n	8011f40 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8011f3a:	4b16      	ldr	r3, [pc, #88]	@ (8011f94 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8011f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f42:	3301      	adds	r3, #1
 8011f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d3ba      	bcc.n	8011ec4 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f50:	17da      	asrs	r2, r3, #31
 8011f52:	189b      	adds	r3, r3, r2
 8011f54:	4053      	eors	r3, r2
 8011f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8011f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8011f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d200      	bcs.n	8011f66 <getFilteredMaxAmplitudeQ31+0xde>
 8011f64:	0013      	movs	r3, r2
 8011f66:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8011f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f6c:	40da      	lsrs	r2, r3
 8011f6e:	0013      	movs	r3, r2
 8011f70:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8011f72:	1dbb      	adds	r3, r7, #6
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d007      	beq.n	8011f8a <getFilteredMaxAmplitudeQ31+0x102>
 8011f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8011fa4 <getFilteredMaxAmplitudeQ31+0x11c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	6a3a      	ldr	r2, [r7, #32]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d902      	bls.n	8011f8a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8011f84:	4b07      	ldr	r3, [pc, #28]	@ (8011fa4 <getFilteredMaxAmplitudeQ31+0x11c>)
 8011f86:	6a3a      	ldr	r2, [r7, #32]
 8011f88:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8011f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8011f8c:	0018      	movs	r0, r3
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	b010      	add	sp, #64	@ 0x40
 8011f92:	bdb0      	pop	{r4, r5, r7, pc}
 8011f94:	20001fa0 	.word	0x20001fa0
 8011f98:	20001fa4 	.word	0x20001fa4
 8011f9c:	0802e194 	.word	0x0802e194
 8011fa0:	0802e198 	.word	0x0802e198
 8011fa4:	20001118 	.word	0x20001118

08011fa8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b086      	sub	sp, #24
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8011fb4:	4913      	ldr	r1, [pc, #76]	@ (8012004 <floatToIntAndFrac2dp+0x5c>)
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f7ef f842 	bl	8001040 <__aeabi_fmul>
 8011fbc:	1c03      	adds	r3, r0, #0
 8011fbe:	1c18      	adds	r0, r3, #0
 8011fc0:	f016 ff76 	bl	8028eb0 <roundf>
 8011fc4:	1c03      	adds	r3, r0, #0
 8011fc6:	1c18      	adds	r0, r3, #0
 8011fc8:	f7ee fb28 	bl	800061c <__aeabi_f2uiz>
 8011fcc:	0003      	movs	r3, r0
 8011fce:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	2164      	movs	r1, #100	@ 0x64
 8011fd4:	0018      	movs	r0, r3
 8011fd6:	f7ee f8e5 	bl	80001a4 <__udivsi3>
 8011fda:	0003      	movs	r3, r0
 8011fdc:	001a      	movs	r2, r3
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	b2da      	uxtb	r2, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	2164      	movs	r1, #100	@ 0x64
 8011fee:	434b      	muls	r3, r1
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	701a      	strb	r2, [r3, #0]
}
 8011ffa:	46c0      	nop			@ (mov r8, r8)
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	b006      	add	sp, #24
 8012000:	bd80      	pop	{r7, pc}
 8012002:	46c0      	nop			@ (mov r8, r8)
 8012004:	42c80000 	.word	0x42c80000

08012008 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8012014:	4914      	ldr	r1, [pc, #80]	@ (8012068 <floatToIntAndFrac1dp+0x60>)
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f7ef f812 	bl	8001040 <__aeabi_fmul>
 801201c:	1c03      	adds	r3, r0, #0
 801201e:	1c18      	adds	r0, r3, #0
 8012020:	f016 ff46 	bl	8028eb0 <roundf>
 8012024:	1c03      	adds	r3, r0, #0
 8012026:	1c18      	adds	r0, r3, #0
 8012028:	f7ee faf8 	bl	800061c <__aeabi_f2uiz>
 801202c:	0003      	movs	r3, r0
 801202e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	210a      	movs	r1, #10
 8012034:	0018      	movs	r0, r3
 8012036:	f7ee f8b5 	bl	80001a4 <__udivsi3>
 801203a:	0003      	movs	r3, r0
 801203c:	001a      	movs	r2, r3
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	b2da      	uxtb	r2, r3
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	1c19      	adds	r1, r3, #0
 801204e:	0089      	lsls	r1, r1, #2
 8012050:	18cb      	adds	r3, r1, r3
 8012052:	18db      	adds	r3, r3, r3
 8012054:	b2db      	uxtb	r3, r3
 8012056:	1ad3      	subs	r3, r2, r3
 8012058:	b2da      	uxtb	r2, r3
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	701a      	strb	r2, [r3, #0]
}
 801205e:	46c0      	nop			@ (mov r8, r8)
 8012060:	46bd      	mov	sp, r7
 8012062:	b006      	add	sp, #24
 8012064:	bd80      	pop	{r7, pc}
 8012066:	46c0      	nop			@ (mov r8, r8)
 8012068:	41200000 	.word	0x41200000

0801206c <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 801206c:	b590      	push	{r4, r7, lr}
 801206e:	b087      	sub	sp, #28
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
 8012078:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ef fbd4 	bl	8001828 <__aeabi_i2f>
 8012080:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8012082:	6838      	ldr	r0, [r7, #0]
 8012084:	f7ef fbd0 	bl	8001828 <__aeabi_i2f>
 8012088:	1c03      	adds	r3, r0, #0
 801208a:	4918      	ldr	r1, [pc, #96]	@ (80120ec <sumToIntAverage+0x80>)
 801208c:	1c18      	adds	r0, r3, #0
 801208e:	f7ee fe09 	bl	8000ca4 <__aeabi_fdiv>
 8012092:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8012094:	1c19      	adds	r1, r3, #0
 8012096:	1c20      	adds	r0, r4, #0
 8012098:	f7ee fc12 	bl	80008c0 <__aeabi_fadd>
 801209c:	1c03      	adds	r3, r0, #0
 801209e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80120a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120a2:	f7ef fc11 	bl	80018c8 <__aeabi_ui2f>
 80120a6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80120a8:	1c19      	adds	r1, r3, #0
 80120aa:	1c20      	adds	r0, r4, #0
 80120ac:	f7ee fdfa 	bl	8000ca4 <__aeabi_fdiv>
 80120b0:	1c03      	adds	r3, r0, #0
 80120b2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80120b8:	68ba      	ldr	r2, [r7, #8]
 80120ba:	2310      	movs	r3, #16
 80120bc:	18f9      	adds	r1, r7, r3
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	1c18      	adds	r0, r3, #0
 80120c2:	f7ff ffa1 	bl	8012008 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	2bff      	cmp	r3, #255	@ 0xff
 80120ca:	d906      	bls.n	80120da <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	22ff      	movs	r2, #255	@ 0xff
 80120d0:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2209      	movs	r2, #9
 80120d6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80120d8:	e003      	b.n	80120e2 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	701a      	strb	r2, [r3, #0]
}
 80120e2:	46c0      	nop			@ (mov r8, r8)
 80120e4:	46bd      	mov	sp, r7
 80120e6:	b007      	add	sp, #28
 80120e8:	bd90      	pop	{r4, r7, pc}
 80120ea:	46c0      	nop			@ (mov r8, r8)
 80120ec:	41200000 	.word	0x41200000

080120f0 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
 80120fc:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	2280      	movs	r2, #128	@ 0x80
 8012102:	0612      	lsls	r2, r2, #24
 8012104:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	4a18      	ldr	r2, [pc, #96]	@ (801216c <findMinMax+0x7c>)
 801210a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801210c:	2300      	movs	r3, #0
 801210e:	617b      	str	r3, [r7, #20]
 8012110:	e022      	b.n	8012158 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	18d3      	adds	r3, r2, r3
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	429a      	cmp	r2, r3
 8012122:	da06      	bge.n	8012132 <findMinMax+0x42>
        {
            min[0] = array[i];
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	18d3      	adds	r3, r2, r3
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	18d3      	adds	r3, r2, r3
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	dd06      	ble.n	8012152 <findMinMax+0x62>
        {
            max[0] = array[i];
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	18d3      	adds	r3, r2, r3
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	3301      	adds	r3, #1
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	697a      	ldr	r2, [r7, #20]
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	429a      	cmp	r2, r3
 801215e:	d3d8      	bcc.n	8012112 <findMinMax+0x22>
        }
    }
}
 8012160:	46c0      	nop			@ (mov r8, r8)
 8012162:	46c0      	nop			@ (mov r8, r8)
 8012164:	46bd      	mov	sp, r7
 8012166:	b006      	add	sp, #24
 8012168:	bd80      	pop	{r7, pc}
 801216a:	46c0      	nop			@ (mov r8, r8)
 801216c:	7fffffff 	.word	0x7fffffff

08012170 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	429a      	cmp	r2, r3
 8012184:	d302      	bcc.n	801218c <getPo2factor+0x1c>
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d107      	bne.n	801219c <getPo2factor+0x2c>
    {
        return 0;
 801218c:	2300      	movs	r3, #0
 801218e:	e00d      	b.n	80121ac <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	085b      	lsrs	r3, r3, #1
 8012194:	607b      	str	r3, [r7, #4]
        bitShift++;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3301      	adds	r3, #1
 801219a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d2f5      	bcs.n	8012190 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	3b01      	subs	r3, #1
 80121a8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80121aa:	68fb      	ldr	r3, [r7, #12]
}
 80121ac:	0018      	movs	r0, r3
 80121ae:	46bd      	mov	sp, r7
 80121b0:	b004      	add	sp, #16
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b086      	sub	sp, #24
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
 80121c0:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	f7ef fb80 	bl	80018c8 <__aeabi_ui2f>
 80121c8:	1c03      	adds	r3, r0, #0
 80121ca:	1c19      	adds	r1, r3, #0
 80121cc:	68b8      	ldr	r0, [r7, #8]
 80121ce:	f7ee ff37 	bl	8001040 <__aeabi_fmul>
 80121d2:	1c03      	adds	r3, r0, #0
 80121d4:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80121da:	683a      	ldr	r2, [r7, #0]
 80121dc:	2310      	movs	r3, #16
 80121de:	18f9      	adds	r1, r7, r3
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	1c18      	adds	r0, r3, #0
 80121e4:	f7ff fee0 	bl	8011fa8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	801a      	strh	r2, [r3, #0]
}
 80121f0:	46c0      	nop			@ (mov r8, r8)
 80121f2:	46bd      	mov	sp, r7
 80121f4:	b006      	add	sp, #24
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	60b8      	str	r0, [r7, #8]
 8012200:	60f9      	str	r1, [r7, #12]
 8012202:	607a      	str	r2, [r7, #4]
 8012204:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8012206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012208:	6a3a      	ldr	r2, [r7, #32]
 801220a:	68b8      	ldr	r0, [r7, #8]
 801220c:	68f9      	ldr	r1, [r7, #12]
 801220e:	f7f9 fed1 	bl	800bfb4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	18d2      	adds	r2, r2, r3
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	18d2      	adds	r2, r2, r3
 801221e:	6a3b      	ldr	r3, [r7, #32]
 8012220:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8012222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	18d2      	adds	r2, r2, r3
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	18d2      	adds	r2, r2, r3
 801222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012230:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8012232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	0011      	movs	r1, r2
 8012238:	0018      	movs	r0, r3
 801223a:	f7f9 ff4b 	bl	800c0d4 <correctIntFracNumber>
}
 801223e:	46c0      	nop			@ (mov r8, r8)
 8012240:	46bd      	mov	sp, r7
 8012242:	b004      	add	sp, #16
 8012244:	bd80      	pop	{r7, pc}

08012246 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b086      	sub	sp, #24
 801224a:	af00      	add	r7, sp, #0
 801224c:	60f8      	str	r0, [r7, #12]
 801224e:	60b9      	str	r1, [r7, #8]
 8012250:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8012256:	2300      	movs	r3, #0
 8012258:	613b      	str	r3, [r7, #16]
 801225a:	e019      	b.n	8012290 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	005b      	lsls	r3, r3, #1
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	18d3      	adds	r3, r2, r3
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012268:	693a      	ldr	r2, [r7, #16]
 801226a:	3201      	adds	r2, #1
 801226c:	0052      	lsls	r2, r2, #1
 801226e:	68f9      	ldr	r1, [r7, #12]
 8012270:	188a      	adds	r2, r1, r2
 8012272:	8812      	ldrh	r2, [r2, #0]
 8012274:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012276:	0019      	movs	r1, r3
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012280:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8012282:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	3301      	adds	r3, #1
 8012288:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	3304      	adds	r3, #4
 801228e:	613b      	str	r3, [r7, #16]
 8012290:	693a      	ldr	r2, [r7, #16]
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	429a      	cmp	r2, r3
 8012296:	d3e1      	bcc.n	801225c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8012298:	46c0      	nop			@ (mov r8, r8)
 801229a:	46c0      	nop			@ (mov r8, r8)
 801229c:	46bd      	mov	sp, r7
 801229e:	b006      	add	sp, #24
 80122a0:	bd80      	pop	{r7, pc}
	...

080122a4 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 80122a4:	b580      	push	{r7, lr}
 80122a6:	af00      	add	r7, sp, #0
  init = false;
 80122a8:	4b02      	ldr	r3, [pc, #8]	@ (80122b4 <InitDone+0x10>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	701a      	strb	r2, [r3, #0]
}
 80122ae:	46c0      	nop			@ (mov r8, r8)
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	200000e8 	.word	0x200000e8

080122b8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80122be:	f7f7 f979 	bl	80095b4 <ReadBatteryVoltage>
 80122c2:	1c02      	adds	r2, r0, #0
 80122c4:	4b28      	ldr	r3, [pc, #160]	@ (8012368 <batteryChargeCheck+0xb0>)
 80122c6:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.68){
 80122c8:	4b27      	ldr	r3, [pc, #156]	@ (8012368 <batteryChargeCheck+0xb0>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	1c18      	adds	r0, r3, #0
 80122ce:	f7f1 fae1 	bl	8003894 <__aeabi_f2d>
 80122d2:	4a26      	ldr	r2, [pc, #152]	@ (801236c <batteryChargeCheck+0xb4>)
 80122d4:	4b26      	ldr	r3, [pc, #152]	@ (8012370 <batteryChargeCheck+0xb8>)
 80122d6:	f7ee f8f1 	bl	80004bc <__aeabi_dcmplt>
 80122da:	1e03      	subs	r3, r0, #0
 80122dc:	d002      	beq.n	80122e4 <batteryChargeCheck+0x2c>
    status = BATTERY_CRITICAL;
 80122de:	1dfb      	adds	r3, r7, #7
 80122e0:	2200      	movs	r2, #0
 80122e2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.68 && batteryCharge < 3.74){
 80122e4:	4b20      	ldr	r3, [pc, #128]	@ (8012368 <batteryChargeCheck+0xb0>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	1c18      	adds	r0, r3, #0
 80122ea:	f7f1 fad3 	bl	8003894 <__aeabi_f2d>
 80122ee:	4a1f      	ldr	r2, [pc, #124]	@ (801236c <batteryChargeCheck+0xb4>)
 80122f0:	4b1f      	ldr	r3, [pc, #124]	@ (8012370 <batteryChargeCheck+0xb8>)
 80122f2:	f7ee f901 	bl	80004f8 <__aeabi_dcmpge>
 80122f6:	1e03      	subs	r3, r0, #0
 80122f8:	d00d      	beq.n	8012316 <batteryChargeCheck+0x5e>
 80122fa:	4b1b      	ldr	r3, [pc, #108]	@ (8012368 <batteryChargeCheck+0xb0>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	1c18      	adds	r0, r3, #0
 8012300:	f7f1 fac8 	bl	8003894 <__aeabi_f2d>
 8012304:	4a1b      	ldr	r2, [pc, #108]	@ (8012374 <batteryChargeCheck+0xbc>)
 8012306:	4b1c      	ldr	r3, [pc, #112]	@ (8012378 <batteryChargeCheck+0xc0>)
 8012308:	f7ee f8d8 	bl	80004bc <__aeabi_dcmplt>
 801230c:	1e03      	subs	r3, r0, #0
 801230e:	d002      	beq.n	8012316 <batteryChargeCheck+0x5e>
    status = BATTERY_LOW;
 8012310:	1dfb      	adds	r3, r7, #7
 8012312:	2201      	movs	r2, #1
 8012314:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.74 && batteryCharge < 4.00){
 8012316:	4b14      	ldr	r3, [pc, #80]	@ (8012368 <batteryChargeCheck+0xb0>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	1c18      	adds	r0, r3, #0
 801231c:	f7f1 faba 	bl	8003894 <__aeabi_f2d>
 8012320:	4a14      	ldr	r2, [pc, #80]	@ (8012374 <batteryChargeCheck+0xbc>)
 8012322:	4b15      	ldr	r3, [pc, #84]	@ (8012378 <batteryChargeCheck+0xc0>)
 8012324:	f7ee f8e8 	bl	80004f8 <__aeabi_dcmpge>
 8012328:	1e03      	subs	r3, r0, #0
 801232a:	d00b      	beq.n	8012344 <batteryChargeCheck+0x8c>
 801232c:	4b0e      	ldr	r3, [pc, #56]	@ (8012368 <batteryChargeCheck+0xb0>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2181      	movs	r1, #129	@ 0x81
 8012332:	05c9      	lsls	r1, r1, #23
 8012334:	1c18      	adds	r0, r3, #0
 8012336:	f7ee f8fb 	bl	8000530 <__aeabi_fcmplt>
 801233a:	1e03      	subs	r3, r0, #0
 801233c:	d002      	beq.n	8012344 <batteryChargeCheck+0x8c>
    status = BATTERY_GOOD;
 801233e:	1dfb      	adds	r3, r7, #7
 8012340:	2202      	movs	r2, #2
 8012342:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8012344:	4b08      	ldr	r3, [pc, #32]	@ (8012368 <batteryChargeCheck+0xb0>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2181      	movs	r1, #129	@ 0x81
 801234a:	05c9      	lsls	r1, r1, #23
 801234c:	1c18      	adds	r0, r3, #0
 801234e:	f7ee f90d 	bl	800056c <__aeabi_fcmpge>
 8012352:	1e03      	subs	r3, r0, #0
 8012354:	d002      	beq.n	801235c <batteryChargeCheck+0xa4>
    status = BATTERY_FULL;
 8012356:	1dfb      	adds	r3, r7, #7
 8012358:	2203      	movs	r2, #3
 801235a:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 801235c:	1dfb      	adds	r3, r7, #7
 801235e:	781b      	ldrb	r3, [r3, #0]
}
 8012360:	0018      	movs	r0, r3
 8012362:	46bd      	mov	sp, r7
 8012364:	b002      	add	sp, #8
 8012366:	bd80      	pop	{r7, pc}
 8012368:	20001fb8 	.word	0x20001fb8
 801236c:	d70a3d71 	.word	0xd70a3d71
 8012370:	400d70a3 	.word	0x400d70a3
 8012374:	1eb851ec 	.word	0x1eb851ec
 8012378:	400deb85 	.word	0x400deb85

0801237c <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 801237c:	b5b0      	push	{r4, r5, r7, lr}
 801237e:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8012380:	f7f7 f97a 	bl	8009678 <ReadSolarVoltage>
 8012384:	0003      	movs	r3, r0
 8012386:	001a      	movs	r2, r3
 8012388:	4b1a      	ldr	r3, [pc, #104]	@ (80123f4 <Calculate_LED_ON+0x78>)
 801238a:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 801238c:	4b19      	ldr	r3, [pc, #100]	@ (80123f4 <Calculate_LED_ON+0x78>)
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	4a19      	ldr	r2, [pc, #100]	@ (80123f8 <Calculate_LED_ON+0x7c>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d802      	bhi.n	801239c <Calculate_LED_ON+0x20>
    solmV = 2900;
 8012396:	4b17      	ldr	r3, [pc, #92]	@ (80123f4 <Calculate_LED_ON+0x78>)
 8012398:	4a18      	ldr	r2, [pc, #96]	@ (80123fc <Calculate_LED_ON+0x80>)
 801239a:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 801239c:	4b15      	ldr	r3, [pc, #84]	@ (80123f4 <Calculate_LED_ON+0x78>)
 801239e:	881b      	ldrh	r3, [r3, #0]
 80123a0:	4a17      	ldr	r2, [pc, #92]	@ (8012400 <Calculate_LED_ON+0x84>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d902      	bls.n	80123ac <Calculate_LED_ON+0x30>
    solmV = 4700;
 80123a6:	4b13      	ldr	r3, [pc, #76]	@ (80123f4 <Calculate_LED_ON+0x78>)
 80123a8:	4a15      	ldr	r2, [pc, #84]	@ (8012400 <Calculate_LED_ON+0x84>)
 80123aa:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80123ac:	4b11      	ldr	r3, [pc, #68]	@ (80123f4 <Calculate_LED_ON+0x78>)
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	0018      	movs	r0, r3
 80123b2:	f7f1 fa1d 	bl	80037f0 <__aeabi_i2d>
 80123b6:	0004      	movs	r4, r0
 80123b8:	000d      	movs	r5, r1
 80123ba:	4b0e      	ldr	r3, [pc, #56]	@ (80123f4 <Calculate_LED_ON+0x78>)
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	001a      	movs	r2, r3
 80123c0:	4b10      	ldr	r3, [pc, #64]	@ (8012404 <Calculate_LED_ON+0x88>)
 80123c2:	1a9b      	subs	r3, r3, r2
 80123c4:	0018      	movs	r0, r3
 80123c6:	f7f1 fa13 	bl	80037f0 <__aeabi_i2d>
 80123ca:	2200      	movs	r2, #0
 80123cc:	4b0e      	ldr	r3, [pc, #56]	@ (8012408 <Calculate_LED_ON+0x8c>)
 80123ce:	f7f0 fac1 	bl	8002954 <__aeabi_dmul>
 80123d2:	0002      	movs	r2, r0
 80123d4:	000b      	movs	r3, r1
 80123d6:	0020      	movs	r0, r4
 80123d8:	0029      	movs	r1, r5
 80123da:	f7ef fabb 	bl	8001954 <__aeabi_dadd>
 80123de:	0002      	movs	r2, r0
 80123e0:	000b      	movs	r3, r1
 80123e2:	0010      	movs	r0, r2
 80123e4:	0019      	movs	r1, r3
 80123e6:	f7ee f931 	bl	800064c <__aeabi_d2uiz>
 80123ea:	0003      	movs	r3, r0
 80123ec:	b29b      	uxth	r3, r3
}
 80123ee:	0018      	movs	r0, r3
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bdb0      	pop	{r4, r5, r7, pc}
 80123f4:	20001fbc 	.word	0x20001fbc
 80123f8:	00000b53 	.word	0x00000b53
 80123fc:	00000b54 	.word	0x00000b54
 8012400:	0000125c 	.word	0x0000125c
 8012404:	00000dee 	.word	0x00000dee
 8012408:	3ff80000 	.word	0x3ff80000

0801240c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	0004      	movs	r4, r0
 8012414:	0008      	movs	r0, r1
 8012416:	0011      	movs	r1, r2
 8012418:	1dbb      	adds	r3, r7, #6
 801241a:	1c22      	adds	r2, r4, #0
 801241c:	801a      	strh	r2, [r3, #0]
 801241e:	1d3b      	adds	r3, r7, #4
 8012420:	1c02      	adds	r2, r0, #0
 8012422:	801a      	strh	r2, [r3, #0]
 8012424:	1cbb      	adds	r3, r7, #2
 8012426:	1c0a      	adds	r2, r1, #0
 8012428:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 801242a:	4b0f      	ldr	r3, [pc, #60]	@ (8012468 <SetStatusLED+0x5c>)
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d107      	bne.n	8012442 <SetStatusLED+0x36>
 8012432:	4b0e      	ldr	r3, [pc, #56]	@ (801246c <SetStatusLED+0x60>)
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d103      	bne.n	8012442 <SetStatusLED+0x36>
 801243a:	4b0d      	ldr	r3, [pc, #52]	@ (8012470 <SetStatusLED+0x64>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00e      	beq.n	8012460 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8012442:	2380      	movs	r3, #128	@ 0x80
 8012444:	05db      	lsls	r3, r3, #23
 8012446:	1dba      	adds	r2, r7, #6
 8012448:	8812      	ldrh	r2, [r2, #0]
 801244a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 801244c:	2380      	movs	r3, #128	@ 0x80
 801244e:	05db      	lsls	r3, r3, #23
 8012450:	1d3a      	adds	r2, r7, #4
 8012452:	8812      	ldrh	r2, [r2, #0]
 8012454:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8012456:	2380      	movs	r3, #128	@ 0x80
 8012458:	05db      	lsls	r3, r3, #23
 801245a:	1cba      	adds	r2, r7, #2
 801245c:	8812      	ldrh	r2, [r2, #0]
 801245e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012460:	46c0      	nop			@ (mov r8, r8)
 8012462:	46bd      	mov	sp, r7
 8012464:	b003      	add	sp, #12
 8012466:	bd90      	pop	{r4, r7, pc}
 8012468:	20001fa9 	.word	0x20001fa9
 801246c:	200000e8 	.word	0x200000e8
 8012470:	20001faa 	.word	0x20001faa

08012474 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8012474:	b590      	push	{r4, r7, lr}
 8012476:	b083      	sub	sp, #12
 8012478:	af00      	add	r7, sp, #0
 801247a:	0004      	movs	r4, r0
 801247c:	0008      	movs	r0, r1
 801247e:	0011      	movs	r1, r2
 8012480:	1dfb      	adds	r3, r7, #7
 8012482:	1c22      	adds	r2, r4, #0
 8012484:	701a      	strb	r2, [r3, #0]
 8012486:	1dbb      	adds	r3, r7, #6
 8012488:	1c02      	adds	r2, r0, #0
 801248a:	701a      	strb	r2, [r3, #0]
 801248c:	1d7b      	adds	r3, r7, #5
 801248e:	1c0a      	adds	r2, r1, #0
 8012490:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8012492:	4b19      	ldr	r3, [pc, #100]	@ (80124f8 <SetDBLED+0x84>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d107      	bne.n	80124aa <SetDBLED+0x36>
 801249a:	4b18      	ldr	r3, [pc, #96]	@ (80124fc <SetDBLED+0x88>)
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d103      	bne.n	80124aa <SetDBLED+0x36>
 80124a2:	4b17      	ldr	r3, [pc, #92]	@ (8012500 <SetDBLED+0x8c>)
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d022      	beq.n	80124f0 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80124aa:	1dfb      	adds	r3, r7, #7
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	2201      	movs	r2, #1
 80124b0:	4053      	eors	r3, r2
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	001a      	movs	r2, r3
 80124b6:	4b13      	ldr	r3, [pc, #76]	@ (8012504 <SetDBLED+0x90>)
 80124b8:	2101      	movs	r1, #1
 80124ba:	0018      	movs	r0, r3
 80124bc:	f003 fad7 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80124c0:	1dbb      	adds	r3, r7, #6
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	2201      	movs	r2, #1
 80124c6:	4053      	eors	r3, r2
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	001a      	movs	r2, r3
 80124cc:	2380      	movs	r3, #128	@ 0x80
 80124ce:	005b      	lsls	r3, r3, #1
 80124d0:	480c      	ldr	r0, [pc, #48]	@ (8012504 <SetDBLED+0x90>)
 80124d2:	0019      	movs	r1, r3
 80124d4:	f003 facb 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 80124d8:	1d7b      	adds	r3, r7, #5
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2201      	movs	r2, #1
 80124de:	4053      	eors	r3, r2
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	001a      	movs	r2, r3
 80124e4:	2380      	movs	r3, #128	@ 0x80
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4806      	ldr	r0, [pc, #24]	@ (8012504 <SetDBLED+0x90>)
 80124ea:	0019      	movs	r1, r3
 80124ec:	f003 fabf 	bl	8015a6e <HAL_GPIO_WritePin>
  }
}
 80124f0:	46c0      	nop			@ (mov r8, r8)
 80124f2:	46bd      	mov	sp, r7
 80124f4:	b003      	add	sp, #12
 80124f6:	bd90      	pop	{r4, r7, pc}
 80124f8:	20001fa9 	.word	0x20001fa9
 80124fc:	200000e8 	.word	0x200000e8
 8012500:	20001faa 	.word	0x20001faa
 8012504:	50000400 	.word	0x50000400

08012508 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012508:	b590      	push	{r4, r7, lr}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	0004      	movs	r4, r0
 8012510:	0008      	movs	r0, r1
 8012512:	0011      	movs	r1, r2
 8012514:	1dbb      	adds	r3, r7, #6
 8012516:	1c22      	adds	r2, r4, #0
 8012518:	801a      	strh	r2, [r3, #0]
 801251a:	1d3b      	adds	r3, r7, #4
 801251c:	1c02      	adds	r2, r0, #0
 801251e:	801a      	strh	r2, [r3, #0]
 8012520:	1cbb      	adds	r3, r7, #2
 8012522:	1c0a      	adds	r2, r1, #0
 8012524:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012526:	4b0e      	ldr	r3, [pc, #56]	@ (8012560 <SetVocLED+0x58>)
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d107      	bne.n	801253e <SetVocLED+0x36>
 801252e:	4b0d      	ldr	r3, [pc, #52]	@ (8012564 <SetVocLED+0x5c>)
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d103      	bne.n	801253e <SetVocLED+0x36>
 8012536:	4b0c      	ldr	r3, [pc, #48]	@ (8012568 <SetVocLED+0x60>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 801253e:	4b0b      	ldr	r3, [pc, #44]	@ (801256c <SetVocLED+0x64>)
 8012540:	1dba      	adds	r2, r7, #6
 8012542:	8812      	ldrh	r2, [r2, #0]
 8012544:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8012546:	4b09      	ldr	r3, [pc, #36]	@ (801256c <SetVocLED+0x64>)
 8012548:	1d3a      	adds	r2, r7, #4
 801254a:	8812      	ldrh	r2, [r2, #0]
 801254c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 801254e:	4b07      	ldr	r3, [pc, #28]	@ (801256c <SetVocLED+0x64>)
 8012550:	1cba      	adds	r2, r7, #2
 8012552:	8812      	ldrh	r2, [r2, #0]
 8012554:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012556:	46c0      	nop			@ (mov r8, r8)
 8012558:	46bd      	mov	sp, r7
 801255a:	b003      	add	sp, #12
 801255c:	bd90      	pop	{r4, r7, pc}
 801255e:	46c0      	nop			@ (mov r8, r8)
 8012560:	20001fa9 	.word	0x20001fa9
 8012564:	200000e8 	.word	0x200000e8
 8012568:	20001faa 	.word	0x20001faa
 801256c:	40000400 	.word	0x40000400

08012570 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012574:	4b08      	ldr	r3, [pc, #32]	@ (8012598 <SetMeasurementIndicator+0x28>)
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d103      	bne.n	8012584 <SetMeasurementIndicator+0x14>
 801257c:	4b07      	ldr	r3, [pc, #28]	@ (801259c <SetMeasurementIndicator+0x2c>)
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d006      	beq.n	8012592 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012584:	f7ff fefa 	bl	801237c <Calculate_LED_ON>
 8012588:	0003      	movs	r3, r0
 801258a:	001a      	movs	r2, r3
 801258c:	2380      	movs	r3, #128	@ 0x80
 801258e:	05db      	lsls	r3, r3, #23
 8012590:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012592:	46c0      	nop			@ (mov r8, r8)
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20001fa9 	.word	0x20001fa9
 801259c:	20001faa 	.word	0x20001faa

080125a0 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 80125a0:	b580      	push	{r7, lr}
 80125a2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80125a4:	4b07      	ldr	r3, [pc, #28]	@ (80125c4 <ResetMeasurementIndicator+0x24>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d103      	bne.n	80125b4 <ResetMeasurementIndicator+0x14>
 80125ac:	4b06      	ldr	r3, [pc, #24]	@ (80125c8 <ResetMeasurementIndicator+0x28>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d004      	beq.n	80125be <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 80125b4:	2380      	movs	r3, #128	@ 0x80
 80125b6:	05db      	lsls	r3, r3, #23
 80125b8:	22fa      	movs	r2, #250	@ 0xfa
 80125ba:	0112      	lsls	r2, r2, #4
 80125bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80125be:	46c0      	nop			@ (mov r8, r8)
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	20001fa9 	.word	0x20001fa9
 80125c8:	20001faa 	.word	0x20001faa

080125cc <SetMICIndicator>:
void SetMICIndicator(){
 80125cc:	b580      	push	{r7, lr}
 80125ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80125d0:	4b19      	ldr	r3, [pc, #100]	@ (8012638 <SetMICIndicator+0x6c>)
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d103      	bne.n	80125e0 <SetMICIndicator+0x14>
 80125d8:	4b18      	ldr	r3, [pc, #96]	@ (801263c <SetMICIndicator+0x70>)
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d007      	beq.n	80125f0 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 80125e0:	f7ff fecc 	bl	801237c <Calculate_LED_ON>
 80125e4:	0003      	movs	r3, r0
 80125e6:	001a      	movs	r2, r3
 80125e8:	2380      	movs	r3, #128	@ 0x80
 80125ea:	05db      	lsls	r3, r3, #23
 80125ec:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 80125ee:	e01f      	b.n	8012630 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 80125f0:	4b13      	ldr	r3, [pc, #76]	@ (8012640 <SetMICIndicator+0x74>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	1c18      	adds	r0, r3, #0
 80125f6:	f7f1 f94d 	bl	8003894 <__aeabi_f2d>
 80125fa:	4a12      	ldr	r2, [pc, #72]	@ (8012644 <SetMICIndicator+0x78>)
 80125fc:	4b12      	ldr	r3, [pc, #72]	@ (8012648 <SetMICIndicator+0x7c>)
 80125fe:	f7ed ff71 	bl	80004e4 <__aeabi_dcmpgt>
 8012602:	1e03      	subs	r3, r0, #0
 8012604:	d00a      	beq.n	801261c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8012606:	f7ff feb9 	bl	801237c <Calculate_LED_ON>
 801260a:	0003      	movs	r3, r0
 801260c:	001a      	movs	r2, r3
 801260e:	2380      	movs	r3, #128	@ 0x80
 8012610:	05db      	lsls	r3, r3, #23
 8012612:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012614:	4b0d      	ldr	r3, [pc, #52]	@ (801264c <SetMICIndicator+0x80>)
 8012616:	2202      	movs	r2, #2
 8012618:	701a      	strb	r2, [r3, #0]
}
 801261a:	e009      	b.n	8012630 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 801261c:	f7ff feae 	bl	801237c <Calculate_LED_ON>
 8012620:	0003      	movs	r3, r0
 8012622:	001a      	movs	r2, r3
 8012624:	2380      	movs	r3, #128	@ 0x80
 8012626:	05db      	lsls	r3, r3, #23
 8012628:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 801262a:	4b08      	ldr	r3, [pc, #32]	@ (801264c <SetMICIndicator+0x80>)
 801262c:	2201      	movs	r2, #1
 801262e:	701a      	strb	r2, [r3, #0]
}
 8012630:	46c0      	nop			@ (mov r8, r8)
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	46c0      	nop			@ (mov r8, r8)
 8012638:	20001fa9 	.word	0x20001fa9
 801263c:	20001faa 	.word	0x20001faa
 8012640:	20001fb8 	.word	0x20001fb8
 8012644:	9999999a 	.word	0x9999999a
 8012648:	400d9999 	.word	0x400d9999
 801264c:	20001fac 	.word	0x20001fac

08012650 <ResetMICIndicator>:
void ResetMICIndicator(){
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012654:	4b0f      	ldr	r3, [pc, #60]	@ (8012694 <ResetMICIndicator+0x44>)
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d103      	bne.n	8012664 <ResetMICIndicator+0x14>
 801265c:	4b0e      	ldr	r3, [pc, #56]	@ (8012698 <ResetMICIndicator+0x48>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d005      	beq.n	8012670 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8012664:	2380      	movs	r3, #128	@ 0x80
 8012666:	05db      	lsls	r3, r3, #23
 8012668:	22fa      	movs	r2, #250	@ 0xfa
 801266a:	0112      	lsls	r2, r2, #4
 801266c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 801266e:	e00e      	b.n	801268e <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8012670:	4b0a      	ldr	r3, [pc, #40]	@ (801269c <ResetMICIndicator+0x4c>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b02      	cmp	r3, #2
 8012676:	d105      	bne.n	8012684 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8012678:	2380      	movs	r3, #128	@ 0x80
 801267a:	05db      	lsls	r3, r3, #23
 801267c:	22fa      	movs	r2, #250	@ 0xfa
 801267e:	0112      	lsls	r2, r2, #4
 8012680:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012682:	e004      	b.n	801268e <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8012684:	2380      	movs	r3, #128	@ 0x80
 8012686:	05db      	lsls	r3, r3, #23
 8012688:	22fa      	movs	r2, #250	@ 0xfa
 801268a:	0112      	lsls	r2, r2, #4
 801268c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801268e:	46c0      	nop			@ (mov r8, r8)
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	20001fa9 	.word	0x20001fa9
 8012698:	20001faa 	.word	0x20001faa
 801269c:	20001fac 	.word	0x20001fac

080126a0 <SetESPIndicator>:
void SetESPIndicator(){
 80126a0:	b580      	push	{r7, lr}
 80126a2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80126a4:	4b08      	ldr	r3, [pc, #32]	@ (80126c8 <SetESPIndicator+0x28>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d103      	bne.n	80126b4 <SetESPIndicator+0x14>
 80126ac:	4b07      	ldr	r3, [pc, #28]	@ (80126cc <SetESPIndicator+0x2c>)
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d006      	beq.n	80126c2 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80126b4:	f7ff fe62 	bl	801237c <Calculate_LED_ON>
 80126b8:	0003      	movs	r3, r0
 80126ba:	001a      	movs	r2, r3
 80126bc:	2380      	movs	r3, #128	@ 0x80
 80126be:	05db      	lsls	r3, r3, #23
 80126c0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80126c2:	46c0      	nop			@ (mov r8, r8)
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	20001fa9 	.word	0x20001fa9
 80126cc:	20001faa 	.word	0x20001faa

080126d0 <ResetESPIndicator>:
void ResetESPIndicator(){
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80126d4:	4b07      	ldr	r3, [pc, #28]	@ (80126f4 <ResetESPIndicator+0x24>)
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d103      	bne.n	80126e4 <ResetESPIndicator+0x14>
 80126dc:	4b06      	ldr	r3, [pc, #24]	@ (80126f8 <ResetESPIndicator+0x28>)
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d004      	beq.n	80126ee <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 80126e4:	2380      	movs	r3, #128	@ 0x80
 80126e6:	05db      	lsls	r3, r3, #23
 80126e8:	22fa      	movs	r2, #250	@ 0xfa
 80126ea:	0112      	lsls	r2, r2, #4
 80126ec:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80126ee:	46c0      	nop			@ (mov r8, r8)
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	20001fa9 	.word	0x20001fa9
 80126f8:	20001faa 	.word	0x20001faa

080126fc <SetPMIndicator>:

void SetPMIndicator() {
 80126fc:	b580      	push	{r7, lr}
 80126fe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012700:	4b0f      	ldr	r3, [pc, #60]	@ (8012740 <SetPMIndicator+0x44>)
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d103      	bne.n	8012710 <SetPMIndicator+0x14>
 8012708:	4b0e      	ldr	r3, [pc, #56]	@ (8012744 <SetPMIndicator+0x48>)
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d014      	beq.n	801273a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012710:	f7ff fe34 	bl	801237c <Calculate_LED_ON>
 8012714:	0003      	movs	r3, r0
 8012716:	001a      	movs	r2, r3
 8012718:	2380      	movs	r3, #128	@ 0x80
 801271a:	05db      	lsls	r3, r3, #23
 801271c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801271e:	f7ff fe2d 	bl	801237c <Calculate_LED_ON>
 8012722:	0003      	movs	r3, r0
 8012724:	001a      	movs	r2, r3
 8012726:	2380      	movs	r3, #128	@ 0x80
 8012728:	05db      	lsls	r3, r3, #23
 801272a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 801272c:	f7ff fe26 	bl	801237c <Calculate_LED_ON>
 8012730:	0003      	movs	r3, r0
 8012732:	001a      	movs	r2, r3
 8012734:	2380      	movs	r3, #128	@ 0x80
 8012736:	05db      	lsls	r3, r3, #23
 8012738:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801273a:	46c0      	nop			@ (mov r8, r8)
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	20001fa9 	.word	0x20001fa9
 8012744:	20001faa 	.word	0x20001faa

08012748 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801274c:	4b0c      	ldr	r3, [pc, #48]	@ (8012780 <ResetPMIndicator+0x38>)
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d103      	bne.n	801275c <ResetPMIndicator+0x14>
 8012754:	4b0b      	ldr	r3, [pc, #44]	@ (8012784 <ResetPMIndicator+0x3c>)
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00e      	beq.n	801277a <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 801275c:	2380      	movs	r3, #128	@ 0x80
 801275e:	05db      	lsls	r3, r3, #23
 8012760:	22fa      	movs	r2, #250	@ 0xfa
 8012762:	0112      	lsls	r2, r2, #4
 8012764:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012766:	2380      	movs	r3, #128	@ 0x80
 8012768:	05db      	lsls	r3, r3, #23
 801276a:	22fa      	movs	r2, #250	@ 0xfa
 801276c:	0112      	lsls	r2, r2, #4
 801276e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012770:	2380      	movs	r3, #128	@ 0x80
 8012772:	05db      	lsls	r3, r3, #23
 8012774:	22fa      	movs	r2, #250	@ 0xfa
 8012776:	0112      	lsls	r2, r2, #4
 8012778:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801277a:	46c0      	nop			@ (mov r8, r8)
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	20001fa9 	.word	0x20001fa9
 8012784:	20001faa 	.word	0x20001faa

08012788 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8012788:	b580      	push	{r7, lr}
 801278a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 801278c:	23fa      	movs	r3, #250	@ 0xfa
 801278e:	011a      	lsls	r2, r3, #4
 8012790:	23fa      	movs	r3, #250	@ 0xfa
 8012792:	0119      	lsls	r1, r3, #4
 8012794:	23fa      	movs	r3, #250	@ 0xfa
 8012796:	011b      	lsls	r3, r3, #4
 8012798:	0018      	movs	r0, r3
 801279a:	f7ff fe37 	bl	801240c <SetStatusLED>
  SetDBLED(false,false,false);
 801279e:	2200      	movs	r2, #0
 80127a0:	2100      	movs	r1, #0
 80127a2:	2000      	movs	r0, #0
 80127a4:	f7ff fe66 	bl	8012474 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80127a8:	23fa      	movs	r3, #250	@ 0xfa
 80127aa:	011a      	lsls	r2, r3, #4
 80127ac:	23fa      	movs	r3, #250	@ 0xfa
 80127ae:	0119      	lsls	r1, r3, #4
 80127b0:	23fa      	movs	r3, #250	@ 0xfa
 80127b2:	011b      	lsls	r3, r3, #4
 80127b4:	0018      	movs	r0, r3
 80127b6:	f7ff fea7 	bl	8012508 <SetVocLED>
return;
 80127ba:	46c0      	nop			@ (mov r8, r8)
}
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <SetAllREDLED>:

void SetAllREDLED() {
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 80127c4:	2380      	movs	r3, #128	@ 0x80
 80127c6:	05db      	lsls	r3, r3, #23
 80127c8:	4a1a      	ldr	r2, [pc, #104]	@ (8012834 <SetAllREDLED+0x74>)
 80127ca:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 80127cc:	2380      	movs	r3, #128	@ 0x80
 80127ce:	05db      	lsls	r3, r3, #23
 80127d0:	22fa      	movs	r2, #250	@ 0xfa
 80127d2:	0112      	lsls	r2, r2, #4
 80127d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 80127d6:	2380      	movs	r3, #128	@ 0x80
 80127d8:	05db      	lsls	r3, r3, #23
 80127da:	22fa      	movs	r2, #250	@ 0xfa
 80127dc:	0112      	lsls	r2, r2, #4
 80127de:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 80127e0:	4b15      	ldr	r3, [pc, #84]	@ (8012838 <SetAllREDLED+0x78>)
 80127e2:	4a14      	ldr	r2, [pc, #80]	@ (8012834 <SetAllREDLED+0x74>)
 80127e4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 80127e6:	4b14      	ldr	r3, [pc, #80]	@ (8012838 <SetAllREDLED+0x78>)
 80127e8:	22fa      	movs	r2, #250	@ 0xfa
 80127ea:	0112      	lsls	r2, r2, #4
 80127ec:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 80127ee:	4b12      	ldr	r3, [pc, #72]	@ (8012838 <SetAllREDLED+0x78>)
 80127f0:	22fa      	movs	r2, #250	@ 0xfa
 80127f2:	0112      	lsls	r2, r2, #4
 80127f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 80127f6:	4b11      	ldr	r3, [pc, #68]	@ (801283c <SetAllREDLED+0x7c>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	2101      	movs	r1, #1
 80127fc:	0018      	movs	r0, r3
 80127fe:	f003 f936 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012802:	2380      	movs	r3, #128	@ 0x80
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	480d      	ldr	r0, [pc, #52]	@ (801283c <SetAllREDLED+0x7c>)
 8012808:	2201      	movs	r2, #1
 801280a:	0019      	movs	r1, r3
 801280c:	f003 f92f 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012810:	2380      	movs	r3, #128	@ 0x80
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4809      	ldr	r0, [pc, #36]	@ (801283c <SetAllREDLED+0x7c>)
 8012816:	2201      	movs	r2, #1
 8012818:	0019      	movs	r1, r3
 801281a:	f003 f928 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 801281e:	23fa      	movs	r3, #250	@ 0xfa
 8012820:	005b      	lsls	r3, r3, #1
 8012822:	0018      	movs	r0, r3
 8012824:	f001 fe9c 	bl	8014560 <HAL_Delay>
  SetLEDsOff();
 8012828:	f7ff ffae 	bl	8012788 <SetLEDsOff>
}
 801282c:	46c0      	nop			@ (mov r8, r8)
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	46c0      	nop			@ (mov r8, r8)
 8012834:	00000bb8 	.word	0x00000bb8
 8012838:	40000400 	.word	0x40000400
 801283c:	50000400 	.word	0x50000400

08012840 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012840:	b580      	push	{r7, lr}
 8012842:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012844:	f7ff ffa0 	bl	8012788 <SetLEDsOff>
  HAL_Delay(250);
 8012848:	20fa      	movs	r0, #250	@ 0xfa
 801284a:	f001 fe89 	bl	8014560 <HAL_Delay>
  TIM2 -> CCR1 = LED_ON;
 801284e:	2380      	movs	r3, #128	@ 0x80
 8012850:	05db      	lsls	r3, r3, #23
 8012852:	4a23      	ldr	r2, [pc, #140]	@ (80128e0 <WalkAllRedLED+0xa0>)
 8012854:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012856:	2380      	movs	r3, #128	@ 0x80
 8012858:	05db      	lsls	r3, r3, #23
 801285a:	22fa      	movs	r2, #250	@ 0xfa
 801285c:	0112      	lsls	r2, r2, #4
 801285e:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012860:	2380      	movs	r3, #128	@ 0x80
 8012862:	05db      	lsls	r3, r3, #23
 8012864:	22fa      	movs	r2, #250	@ 0xfa
 8012866:	0112      	lsls	r2, r2, #4
 8012868:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(250);
 801286a:	20fa      	movs	r0, #250	@ 0xfa
 801286c:	f001 fe78 	bl	8014560 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012870:	2380      	movs	r3, #128	@ 0x80
 8012872:	05db      	lsls	r3, r3, #23
 8012874:	22fa      	movs	r2, #250	@ 0xfa
 8012876:	0112      	lsls	r2, r2, #4
 8012878:	635a      	str	r2, [r3, #52]	@ 0x34

  TIM3 -> CCR1 = LED_ON;
 801287a:	4b1a      	ldr	r3, [pc, #104]	@ (80128e4 <WalkAllRedLED+0xa4>)
 801287c:	4a18      	ldr	r2, [pc, #96]	@ (80128e0 <WalkAllRedLED+0xa0>)
 801287e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012880:	4b18      	ldr	r3, [pc, #96]	@ (80128e4 <WalkAllRedLED+0xa4>)
 8012882:	22fa      	movs	r2, #250	@ 0xfa
 8012884:	0112      	lsls	r2, r2, #4
 8012886:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012888:	4b16      	ldr	r3, [pc, #88]	@ (80128e4 <WalkAllRedLED+0xa4>)
 801288a:	22fa      	movs	r2, #250	@ 0xfa
 801288c:	0112      	lsls	r2, r2, #4
 801288e:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(250);
 8012890:	20fa      	movs	r0, #250	@ 0xfa
 8012892:	f001 fe65 	bl	8014560 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012896:	4b13      	ldr	r3, [pc, #76]	@ (80128e4 <WalkAllRedLED+0xa4>)
 8012898:	22fa      	movs	r2, #250	@ 0xfa
 801289a:	0112      	lsls	r2, r2, #4
 801289c:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 801289e:	4b12      	ldr	r3, [pc, #72]	@ (80128e8 <WalkAllRedLED+0xa8>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	2101      	movs	r1, #1
 80128a4:	0018      	movs	r0, r3
 80128a6:	f003 f8e2 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80128aa:	2380      	movs	r3, #128	@ 0x80
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	480e      	ldr	r0, [pc, #56]	@ (80128e8 <WalkAllRedLED+0xa8>)
 80128b0:	2201      	movs	r2, #1
 80128b2:	0019      	movs	r1, r3
 80128b4:	f003 f8db 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 80128b8:	2380      	movs	r3, #128	@ 0x80
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	480a      	ldr	r0, [pc, #40]	@ (80128e8 <WalkAllRedLED+0xa8>)
 80128be:	2201      	movs	r2, #1
 80128c0:	0019      	movs	r1, r3
 80128c2:	f003 f8d4 	bl	8015a6e <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80128c6:	20fa      	movs	r0, #250	@ 0xfa
 80128c8:	f001 fe4a 	bl	8014560 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 80128cc:	4b06      	ldr	r3, [pc, #24]	@ (80128e8 <WalkAllRedLED+0xa8>)
 80128ce:	2201      	movs	r2, #1
 80128d0:	2101      	movs	r1, #1
 80128d2:	0018      	movs	r0, r3
 80128d4:	f003 f8cb 	bl	8015a6e <HAL_GPIO_WritePin>
}
 80128d8:	46c0      	nop			@ (mov r8, r8)
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	46c0      	nop			@ (mov r8, r8)
 80128e0:	00000bb8 	.word	0x00000bb8
 80128e4:	40000400 	.word	0x40000400
 80128e8:	50000400 	.word	0x50000400

080128ec <SetAllBlueLED>:

void SetAllBlueLED() {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 80128f2:	1dfb      	adds	r3, r7, #7
 80128f4:	2200      	movs	r2, #0
 80128f6:	701a      	strb	r2, [r3, #0]
 80128f8:	e04b      	b.n	8012992 <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 80128fa:	2380      	movs	r3, #128	@ 0x80
 80128fc:	05db      	lsls	r3, r3, #23
 80128fe:	22fa      	movs	r2, #250	@ 0xfa
 8012900:	0112      	lsls	r2, r2, #4
 8012902:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012904:	2380      	movs	r3, #128	@ 0x80
 8012906:	05db      	lsls	r3, r3, #23
 8012908:	22fa      	movs	r2, #250	@ 0xfa
 801290a:	0112      	lsls	r2, r2, #4
 801290c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 801290e:	2380      	movs	r3, #128	@ 0x80
 8012910:	05db      	lsls	r3, r3, #23
 8012912:	4a24      	ldr	r2, [pc, #144]	@ (80129a4 <SetAllBlueLED+0xb8>)
 8012914:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012916:	4b24      	ldr	r3, [pc, #144]	@ (80129a8 <SetAllBlueLED+0xbc>)
 8012918:	22fa      	movs	r2, #250	@ 0xfa
 801291a:	0112      	lsls	r2, r2, #4
 801291c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 801291e:	4b22      	ldr	r3, [pc, #136]	@ (80129a8 <SetAllBlueLED+0xbc>)
 8012920:	22fa      	movs	r2, #250	@ 0xfa
 8012922:	0112      	lsls	r2, r2, #4
 8012924:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012926:	4b20      	ldr	r3, [pc, #128]	@ (80129a8 <SetAllBlueLED+0xbc>)
 8012928:	4a1e      	ldr	r2, [pc, #120]	@ (80129a4 <SetAllBlueLED+0xb8>)
 801292a:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 801292c:	4b1f      	ldr	r3, [pc, #124]	@ (80129ac <SetAllBlueLED+0xc0>)
 801292e:	2201      	movs	r2, #1
 8012930:	2101      	movs	r1, #1
 8012932:	0018      	movs	r0, r3
 8012934:	f003 f89b 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012938:	2380      	movs	r3, #128	@ 0x80
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	481b      	ldr	r0, [pc, #108]	@ (80129ac <SetAllBlueLED+0xc0>)
 801293e:	2201      	movs	r2, #1
 8012940:	0019      	movs	r1, r3
 8012942:	f003 f894 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012946:	2380      	movs	r3, #128	@ 0x80
 8012948:	009b      	lsls	r3, r3, #2
 801294a:	4818      	ldr	r0, [pc, #96]	@ (80129ac <SetAllBlueLED+0xc0>)
 801294c:	2200      	movs	r2, #0
 801294e:	0019      	movs	r1, r3
 8012950:	f003 f88d 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8012954:	23fa      	movs	r3, #250	@ 0xfa
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	0018      	movs	r0, r3
 801295a:	f001 fe01 	bl	8014560 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 801295e:	2380      	movs	r3, #128	@ 0x80
 8012960:	05db      	lsls	r3, r3, #23
 8012962:	22fa      	movs	r2, #250	@ 0xfa
 8012964:	0112      	lsls	r2, r2, #4
 8012966:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8012968:	4b0f      	ldr	r3, [pc, #60]	@ (80129a8 <SetAllBlueLED+0xbc>)
 801296a:	22fa      	movs	r2, #250	@ 0xfa
 801296c:	0112      	lsls	r2, r2, #4
 801296e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012970:	2380      	movs	r3, #128	@ 0x80
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	480d      	ldr	r0, [pc, #52]	@ (80129ac <SetAllBlueLED+0xc0>)
 8012976:	2201      	movs	r2, #1
 8012978:	0019      	movs	r1, r3
 801297a:	f003 f878 	bl	8015a6e <HAL_GPIO_WritePin>
    HAL_Delay(500);
 801297e:	23fa      	movs	r3, #250	@ 0xfa
 8012980:	005b      	lsls	r3, r3, #1
 8012982:	0018      	movs	r0, r3
 8012984:	f001 fdec 	bl	8014560 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012988:	1dfb      	adds	r3, r7, #7
 801298a:	781a      	ldrb	r2, [r3, #0]
 801298c:	1dfb      	adds	r3, r7, #7
 801298e:	3201      	adds	r2, #1
 8012990:	701a      	strb	r2, [r3, #0]
 8012992:	1dfb      	adds	r3, r7, #7
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	2b02      	cmp	r3, #2
 8012998:	d9af      	bls.n	80128fa <SetAllBlueLED+0xe>
  }
}
 801299a:	46c0      	nop			@ (mov r8, r8)
 801299c:	46c0      	nop			@ (mov r8, r8)
 801299e:	46bd      	mov	sp, r7
 80129a0:	b002      	add	sp, #8
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	00000bb8 	.word	0x00000bb8
 80129a8:	40000400 	.word	0x40000400
 80129ac:	50000400 	.word	0x50000400

080129b0 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 80129b0:	b5b0      	push	{r4, r5, r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	0002      	movs	r2, r0
 80129b8:	1dbb      	adds	r3, r7, #6
 80129ba:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 80129bc:	1dbb      	adds	r3, r7, #6
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d05a      	beq.n	8012a7a <SetVOCindicator+0xca>
 80129c4:	1dbb      	adds	r3, r7, #6
 80129c6:	881b      	ldrh	r3, [r3, #0]
 80129c8:	2b64      	cmp	r3, #100	@ 0x64
 80129ca:	d856      	bhi.n	8012a7a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 80129cc:	1dbb      	adds	r3, r7, #6
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	0018      	movs	r0, r3
 80129d2:	f7f0 ff0d 	bl	80037f0 <__aeabi_i2d>
 80129d6:	2200      	movs	r2, #0
 80129d8:	4b5f      	ldr	r3, [pc, #380]	@ (8012b58 <SetVOCindicator+0x1a8>)
 80129da:	f7ef fb81 	bl	80020e0 <__aeabi_ddiv>
 80129de:	0002      	movs	r2, r0
 80129e0:	000b      	movs	r3, r1
 80129e2:	2000      	movs	r0, #0
 80129e4:	495d      	ldr	r1, [pc, #372]	@ (8012b5c <SetVOCindicator+0x1ac>)
 80129e6:	f7f0 fa9b 	bl	8002f20 <__aeabi_dsub>
 80129ea:	0002      	movs	r2, r0
 80129ec:	000b      	movs	r3, r1
 80129ee:	0014      	movs	r4, r2
 80129f0:	001d      	movs	r5, r3
 80129f2:	4b5b      	ldr	r3, [pc, #364]	@ (8012b60 <SetVOCindicator+0x1b0>)
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	0018      	movs	r0, r3
 80129f8:	f7f0 fefa 	bl	80037f0 <__aeabi_i2d>
 80129fc:	0002      	movs	r2, r0
 80129fe:	000b      	movs	r3, r1
 8012a00:	0020      	movs	r0, r4
 8012a02:	0029      	movs	r1, r5
 8012a04:	f7ef ffa6 	bl	8002954 <__aeabi_dmul>
 8012a08:	0002      	movs	r2, r0
 8012a0a:	000b      	movs	r3, r1
 8012a0c:	0010      	movs	r0, r2
 8012a0e:	0019      	movs	r1, r3
 8012a10:	f7ed fe1c 	bl	800064c <__aeabi_d2uiz>
 8012a14:	0003      	movs	r3, r0
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	4b52      	ldr	r3, [pc, #328]	@ (8012b64 <SetVOCindicator+0x1b4>)
 8012a1a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012a1c:	1dbb      	adds	r3, r7, #6
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	0018      	movs	r0, r3
 8012a22:	f7f0 fee5 	bl	80037f0 <__aeabi_i2d>
 8012a26:	2200      	movs	r2, #0
 8012a28:	4b4b      	ldr	r3, [pc, #300]	@ (8012b58 <SetVOCindicator+0x1a8>)
 8012a2a:	f7ef fb59 	bl	80020e0 <__aeabi_ddiv>
 8012a2e:	0002      	movs	r2, r0
 8012a30:	000b      	movs	r3, r1
 8012a32:	0014      	movs	r4, r2
 8012a34:	001d      	movs	r5, r3
 8012a36:	4b4a      	ldr	r3, [pc, #296]	@ (8012b60 <SetVOCindicator+0x1b0>)
 8012a38:	881b      	ldrh	r3, [r3, #0]
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f7f0 fed8 	bl	80037f0 <__aeabi_i2d>
 8012a40:	0002      	movs	r2, r0
 8012a42:	000b      	movs	r3, r1
 8012a44:	0020      	movs	r0, r4
 8012a46:	0029      	movs	r1, r5
 8012a48:	f7ef ff84 	bl	8002954 <__aeabi_dmul>
 8012a4c:	0002      	movs	r2, r0
 8012a4e:	000b      	movs	r3, r1
 8012a50:	0010      	movs	r0, r2
 8012a52:	0019      	movs	r1, r3
 8012a54:	f7ed fdfa 	bl	800064c <__aeabi_d2uiz>
 8012a58:	0003      	movs	r3, r0
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	4b42      	ldr	r3, [pc, #264]	@ (8012b68 <SetVOCindicator+0x1b8>)
 8012a5e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012a60:	4b3f      	ldr	r3, [pc, #252]	@ (8012b60 <SetVOCindicator+0x1b0>)
 8012a62:	881a      	ldrh	r2, [r3, #0]
 8012a64:	4b41      	ldr	r3, [pc, #260]	@ (8012b6c <SetVOCindicator+0x1bc>)
 8012a66:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012a68:	4b40      	ldr	r3, [pc, #256]	@ (8012b6c <SetVOCindicator+0x1bc>)
 8012a6a:	8818      	ldrh	r0, [r3, #0]
 8012a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8012b64 <SetVOCindicator+0x1b4>)
 8012a6e:	8819      	ldrh	r1, [r3, #0]
 8012a70:	4b3d      	ldr	r3, [pc, #244]	@ (8012b68 <SetVOCindicator+0x1b8>)
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	001a      	movs	r2, r3
 8012a76:	f7ff fd47 	bl	8012508 <SetVocLED>
  }
  if(VOCi > 100){
 8012a7a:	1dbb      	adds	r3, r7, #6
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	2b64      	cmp	r3, #100	@ 0x64
 8012a80:	d966      	bls.n	8012b50 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012a82:	1dbb      	adds	r3, r7, #6
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	0018      	movs	r0, r3
 8012a88:	f7f0 feb2 	bl	80037f0 <__aeabi_i2d>
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4b32      	ldr	r3, [pc, #200]	@ (8012b58 <SetVOCindicator+0x1a8>)
 8012a90:	f7f0 fa46 	bl	8002f20 <__aeabi_dsub>
 8012a94:	0002      	movs	r2, r0
 8012a96:	000b      	movs	r3, r1
 8012a98:	0010      	movs	r0, r2
 8012a9a:	0019      	movs	r1, r3
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	4b34      	ldr	r3, [pc, #208]	@ (8012b70 <SetVOCindicator+0x1c0>)
 8012aa0:	f7ef fb1e 	bl	80020e0 <__aeabi_ddiv>
 8012aa4:	0002      	movs	r2, r0
 8012aa6:	000b      	movs	r3, r1
 8012aa8:	0014      	movs	r4, r2
 8012aaa:	001d      	movs	r5, r3
 8012aac:	4b2c      	ldr	r3, [pc, #176]	@ (8012b60 <SetVOCindicator+0x1b0>)
 8012aae:	881b      	ldrh	r3, [r3, #0]
 8012ab0:	0018      	movs	r0, r3
 8012ab2:	f7f0 fe9d 	bl	80037f0 <__aeabi_i2d>
 8012ab6:	0002      	movs	r2, r0
 8012ab8:	000b      	movs	r3, r1
 8012aba:	0020      	movs	r0, r4
 8012abc:	0029      	movs	r1, r5
 8012abe:	f7ef ff49 	bl	8002954 <__aeabi_dmul>
 8012ac2:	0002      	movs	r2, r0
 8012ac4:	000b      	movs	r3, r1
 8012ac6:	0010      	movs	r0, r2
 8012ac8:	0019      	movs	r1, r3
 8012aca:	f7ed fdbf 	bl	800064c <__aeabi_d2uiz>
 8012ace:	0003      	movs	r3, r0
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	4b24      	ldr	r3, [pc, #144]	@ (8012b64 <SetVOCindicator+0x1b4>)
 8012ad4:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012ad6:	1dbb      	adds	r3, r7, #6
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	0018      	movs	r0, r3
 8012adc:	f7f0 fe88 	bl	80037f0 <__aeabi_i2d>
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8012b58 <SetVOCindicator+0x1a8>)
 8012ae4:	f7f0 fa1c 	bl	8002f20 <__aeabi_dsub>
 8012ae8:	0002      	movs	r2, r0
 8012aea:	000b      	movs	r3, r1
 8012aec:	0010      	movs	r0, r2
 8012aee:	0019      	movs	r1, r3
 8012af0:	2200      	movs	r2, #0
 8012af2:	4b1f      	ldr	r3, [pc, #124]	@ (8012b70 <SetVOCindicator+0x1c0>)
 8012af4:	f7ef faf4 	bl	80020e0 <__aeabi_ddiv>
 8012af8:	0002      	movs	r2, r0
 8012afa:	000b      	movs	r3, r1
 8012afc:	2000      	movs	r0, #0
 8012afe:	4917      	ldr	r1, [pc, #92]	@ (8012b5c <SetVOCindicator+0x1ac>)
 8012b00:	f7f0 fa0e 	bl	8002f20 <__aeabi_dsub>
 8012b04:	0002      	movs	r2, r0
 8012b06:	000b      	movs	r3, r1
 8012b08:	0014      	movs	r4, r2
 8012b0a:	001d      	movs	r5, r3
 8012b0c:	4b14      	ldr	r3, [pc, #80]	@ (8012b60 <SetVOCindicator+0x1b0>)
 8012b0e:	881b      	ldrh	r3, [r3, #0]
 8012b10:	0018      	movs	r0, r3
 8012b12:	f7f0 fe6d 	bl	80037f0 <__aeabi_i2d>
 8012b16:	0002      	movs	r2, r0
 8012b18:	000b      	movs	r3, r1
 8012b1a:	0020      	movs	r0, r4
 8012b1c:	0029      	movs	r1, r5
 8012b1e:	f7ef ff19 	bl	8002954 <__aeabi_dmul>
 8012b22:	0002      	movs	r2, r0
 8012b24:	000b      	movs	r3, r1
 8012b26:	0010      	movs	r0, r2
 8012b28:	0019      	movs	r1, r3
 8012b2a:	f7ed fd8f 	bl	800064c <__aeabi_d2uiz>
 8012b2e:	0003      	movs	r3, r0
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	4b0e      	ldr	r3, [pc, #56]	@ (8012b6c <SetVOCindicator+0x1bc>)
 8012b34:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8012b36:	4b0a      	ldr	r3, [pc, #40]	@ (8012b60 <SetVOCindicator+0x1b0>)
 8012b38:	881a      	ldrh	r2, [r3, #0]
 8012b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8012b68 <SetVOCindicator+0x1b8>)
 8012b3c:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8012b6c <SetVOCindicator+0x1bc>)
 8012b40:	8818      	ldrh	r0, [r3, #0]
 8012b42:	4b08      	ldr	r3, [pc, #32]	@ (8012b64 <SetVOCindicator+0x1b4>)
 8012b44:	8819      	ldrh	r1, [r3, #0]
 8012b46:	4b08      	ldr	r3, [pc, #32]	@ (8012b68 <SetVOCindicator+0x1b8>)
 8012b48:	881b      	ldrh	r3, [r3, #0]
 8012b4a:	001a      	movs	r2, r3
 8012b4c:	f7ff fcdc 	bl	8012508 <SetVocLED>
  }

}
 8012b50:	46c0      	nop			@ (mov r8, r8)
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b002      	add	sp, #8
 8012b56:	bdb0      	pop	{r4, r5, r7, pc}
 8012b58:	40590000 	.word	0x40590000
 8012b5c:	3ff00000 	.word	0x3ff00000
 8012b60:	200000ea 	.word	0x200000ea
 8012b64:	20001fbe 	.word	0x20001fbe
 8012b68:	20001fc0 	.word	0x20001fc0
 8012b6c:	20001fc2 	.word	0x20001fc2
 8012b70:	40790000 	.word	0x40790000

08012b74 <powerCheck>:

Battery_Status powerCheck(){
 8012b74:	b590      	push	{r4, r7, lr}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8012b7a:	f7f6 fdd1 	bl	8009720 <Check_USB_PowerOn>
 8012b7e:	0003      	movs	r3, r0
 8012b80:	001a      	movs	r2, r3
 8012b82:	2301      	movs	r3, #1
 8012b84:	4053      	eors	r3, r2
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d005      	beq.n	8012b98 <powerCheck+0x24>
    status = batteryChargeCheck();
 8012b8c:	1dfc      	adds	r4, r7, #7
 8012b8e:	f7ff fb93 	bl	80122b8 <batteryChargeCheck>
 8012b92:	0003      	movs	r3, r0
 8012b94:	7023      	strb	r3, [r4, #0]
 8012b96:	e002      	b.n	8012b9e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8012b98:	1dfb      	adds	r3, r7, #7
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012b9e:	1dfb      	adds	r3, r7, #7
 8012ba0:	781b      	ldrb	r3, [r3, #0]
}
 8012ba2:	0018      	movs	r0, r3
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	b003      	add	sp, #12
 8012ba8:	bd90      	pop	{r4, r7, pc}
	...

08012bac <powerDisplay>:

void powerDisplay(Battery_Status status){
 8012bac:	b5b0      	push	{r4, r5, r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af04      	add	r7, sp, #16
 8012bb2:	0002      	movs	r2, r0
 8012bb4:	1dfb      	adds	r3, r7, #7
 8012bb6:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8012bb8:	1dfb      	adds	r3, r7, #7
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b04      	cmp	r3, #4
 8012bbe:	d114      	bne.n	8012bea <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012bc0:	f7f6 fcf8 	bl	80095b4 <ReadBatteryVoltage>
 8012bc4:	1c03      	adds	r3, r0, #0
 8012bc6:	1c18      	adds	r0, r3, #0
 8012bc8:	f7f0 fe64 	bl	8003894 <__aeabi_f2d>
 8012bcc:	0004      	movs	r4, r0
 8012bce:	000d      	movs	r5, r1
 8012bd0:	f7f6 fd52 	bl	8009678 <ReadSolarVoltage>
 8012bd4:	0003      	movs	r3, r0
 8012bd6:	0019      	movs	r1, r3
 8012bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8012c84 <powerDisplay+0xd8>)
 8012bda:	4b2b      	ldr	r3, [pc, #172]	@ (8012c88 <powerDisplay+0xdc>)
 8012bdc:	9102      	str	r1, [sp, #8]
 8012bde:	9400      	str	r4, [sp, #0]
 8012be0:	9501      	str	r5, [sp, #4]
 8012be2:	0019      	movs	r1, r3
 8012be4:	2003      	movs	r0, #3
 8012be6:	f000 ff71 	bl	8013acc <CreateLine>
  }
  if(status == BATTERY_FULL){
 8012bea:	1dfb      	adds	r3, r7, #7
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	2b03      	cmp	r3, #3
 8012bf0:	d105      	bne.n	8012bfe <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012bf2:	4a26      	ldr	r2, [pc, #152]	@ (8012c8c <powerDisplay+0xe0>)
 8012bf4:	4b24      	ldr	r3, [pc, #144]	@ (8012c88 <powerDisplay+0xdc>)
 8012bf6:	0019      	movs	r1, r3
 8012bf8:	2003      	movs	r0, #3
 8012bfa:	f000 ff67 	bl	8013acc <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012bfe:	1dfb      	adds	r3, r7, #7
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	2b02      	cmp	r3, #2
 8012c04:	d105      	bne.n	8012c12 <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 8012c06:	4a22      	ldr	r2, [pc, #136]	@ (8012c90 <powerDisplay+0xe4>)
 8012c08:	4b1f      	ldr	r3, [pc, #124]	@ (8012c88 <powerDisplay+0xdc>)
 8012c0a:	0019      	movs	r1, r3
 8012c0c:	2003      	movs	r0, #3
 8012c0e:	f000 ff5d 	bl	8013acc <CreateLine>
  }
  if(status == BATTERY_LOW){
 8012c12:	1dfb      	adds	r3, r7, #7
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d105      	bne.n	8012c26 <powerDisplay+0x7a>
    Debug("Battery is getting low");
 8012c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8012c94 <powerDisplay+0xe8>)
 8012c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8012c88 <powerDisplay+0xdc>)
 8012c1e:	0019      	movs	r1, r3
 8012c20:	2003      	movs	r0, #3
 8012c22:	f000 ff53 	bl	8013acc <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8012c26:	1dfb      	adds	r3, r7, #7
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d105      	bne.n	8012c3a <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8012c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8012c98 <powerDisplay+0xec>)
 8012c30:	4b15      	ldr	r3, [pc, #84]	@ (8012c88 <powerDisplay+0xdc>)
 8012c32:	0019      	movs	r1, r3
 8012c34:	2003      	movs	r0, #3
 8012c36:	f000 ff49 	bl	8013acc <CreateLine>
  }
  switch (Read_Charge_Status()) {
 8012c3a:	f7f6 fd8b 	bl	8009754 <Read_Charge_Status>
 8012c3e:	0003      	movs	r3, r0
 8012c40:	2b02      	cmp	r3, #2
 8012c42:	d013      	beq.n	8012c6c <powerDisplay+0xc0>
 8012c44:	dc19      	bgt.n	8012c7a <powerDisplay+0xce>
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d002      	beq.n	8012c50 <powerDisplay+0xa4>
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d007      	beq.n	8012c5e <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 8012c4e:	e014      	b.n	8012c7a <powerDisplay+0xce>
    Debug("Battery charging off");
 8012c50:	4a12      	ldr	r2, [pc, #72]	@ (8012c9c <powerDisplay+0xf0>)
 8012c52:	4b0d      	ldr	r3, [pc, #52]	@ (8012c88 <powerDisplay+0xdc>)
 8012c54:	0019      	movs	r1, r3
 8012c56:	2003      	movs	r0, #3
 8012c58:	f000 ff38 	bl	8013acc <CreateLine>
    break;
 8012c5c:	e00d      	b.n	8012c7a <powerDisplay+0xce>
    Debug("Battery is charging");
 8012c5e:	4a10      	ldr	r2, [pc, #64]	@ (8012ca0 <powerDisplay+0xf4>)
 8012c60:	4b09      	ldr	r3, [pc, #36]	@ (8012c88 <powerDisplay+0xdc>)
 8012c62:	0019      	movs	r1, r3
 8012c64:	2003      	movs	r0, #3
 8012c66:	f000 ff31 	bl	8013acc <CreateLine>
    break;
 8012c6a:	e006      	b.n	8012c7a <powerDisplay+0xce>
    Debug("Battery full, charging off");
 8012c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8012ca4 <powerDisplay+0xf8>)
 8012c6e:	4b06      	ldr	r3, [pc, #24]	@ (8012c88 <powerDisplay+0xdc>)
 8012c70:	0019      	movs	r1, r3
 8012c72:	2003      	movs	r0, #3
 8012c74:	f000 ff2a 	bl	8013acc <CreateLine>
    break;
 8012c78:	46c0      	nop			@ (mov r8, r8)
}
 8012c7a:	46c0      	nop			@ (mov r8, r8)
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	b002      	add	sp, #8
 8012c80:	bdb0      	pop	{r4, r5, r7, pc}
 8012c82:	46c0      	nop			@ (mov r8, r8)
 8012c84:	0802d828 	.word	0x0802d828
 8012c88:	0802d868 	.word	0x0802d868
 8012c8c:	0802d86c 	.word	0x0802d86c
 8012c90:	0802d884 	.word	0x0802d884
 8012c94:	0802d8a4 	.word	0x0802d8a4
 8012c98:	0802d8bc 	.word	0x0802d8bc
 8012c9c:	0802d8e0 	.word	0x0802d8e0
 8012ca0:	0802d8f8 	.word	0x0802d8f8
 8012ca4:	0802d90c 	.word	0x0802d90c

08012ca8 <configCheck>:

void configCheck(){
 8012ca8:	b590      	push	{r4, r7, lr}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8012cae:	f7f6 fdad 	bl	800980c <BootButton_Pressed>
 8012cb2:	1e03      	subs	r3, r0, #0
 8012cb4:	d007      	beq.n	8012cc6 <configCheck+0x1e>
 8012cb6:	f7f6 fdbb 	bl	8009830 <UserButton_Pressed>
 8012cba:	1e03      	subs	r3, r0, #0
 8012cbc:	d003      	beq.n	8012cc6 <configCheck+0x1e>
    configSet = true;
 8012cbe:	4bb5      	ldr	r3, [pc, #724]	@ (8012f94 <configCheck+0x2ec>)
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	701a      	strb	r2, [r3, #0]
 8012cc4:	e00a      	b.n	8012cdc <configCheck+0x34>
  }
  else{
    configSet = false;
 8012cc6:	4bb3      	ldr	r3, [pc, #716]	@ (8012f94 <configCheck+0x2ec>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012ccc:	f001 fc3e 	bl	801454c <HAL_GetTick>
 8012cd0:	0003      	movs	r3, r0
 8012cd2:	22fa      	movs	r2, #250	@ 0xfa
 8012cd4:	00d2      	lsls	r2, r2, #3
 8012cd6:	189a      	adds	r2, r3, r2
 8012cd8:	4baf      	ldr	r3, [pc, #700]	@ (8012f98 <configCheck+0x2f0>)
 8012cda:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8012cdc:	4bad      	ldr	r3, [pc, #692]	@ (8012f94 <configCheck+0x2ec>)
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00d      	beq.n	8012d00 <configCheck+0x58>
 8012ce4:	4bac      	ldr	r3, [pc, #688]	@ (8012f98 <configCheck+0x2f0>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	0018      	movs	r0, r3
 8012cea:	f000 fe99 	bl	8013a20 <TimestampIsReached>
 8012cee:	1e03      	subs	r3, r0, #0
 8012cf0:	d006      	beq.n	8012d00 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012cf2:	f7f2 f863 	bl	8004dbc <SetConfigMode>
    SetDBLED(true, true, true);
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	2101      	movs	r1, #1
 8012cfa:	2001      	movs	r0, #1
 8012cfc:	f7ff fbba 	bl	8012474 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8012d00:	f7f6 fd84 	bl	800980c <BootButton_Pressed>
 8012d04:	0003      	movs	r3, r0
 8012d06:	001a      	movs	r2, r3
 8012d08:	2301      	movs	r3, #1
 8012d0a:	4053      	eors	r3, r2
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d05a      	beq.n	8012dc8 <configCheck+0x120>
 8012d12:	f7f6 fd8d 	bl	8009830 <UserButton_Pressed>
 8012d16:	1e03      	subs	r3, r0, #0
 8012d18:	d056      	beq.n	8012dc8 <configCheck+0x120>
 8012d1a:	4ba0      	ldr	r3, [pc, #640]	@ (8012f9c <configCheck+0x2f4>)
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	4053      	eors	r3, r2
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d04f      	beq.n	8012dc8 <configCheck+0x120>
 8012d28:	f7f2 f868 	bl	8004dfc <GetReconfigMode>
 8012d2c:	0003      	movs	r3, r0
 8012d2e:	001a      	movs	r2, r3
 8012d30:	2301      	movs	r3, #1
 8012d32:	4053      	eors	r3, r2
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d046      	beq.n	8012dc8 <configCheck+0x120>
    SetLEDsOff();
 8012d3a:	f7ff fd25 	bl	8012788 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8012d3e:	4a98      	ldr	r2, [pc, #608]	@ (8012fa0 <configCheck+0x2f8>)
 8012d40:	4997      	ldr	r1, [pc, #604]	@ (8012fa0 <configCheck+0x2f8>)
 8012d42:	4b97      	ldr	r3, [pc, #604]	@ (8012fa0 <configCheck+0x2f8>)
 8012d44:	0018      	movs	r0, r3
 8012d46:	f7ff fbdf 	bl	8012508 <SetVocLED>
    HAL_Delay(1500);
 8012d4a:	4b96      	ldr	r3, [pc, #600]	@ (8012fa4 <configCheck+0x2fc>)
 8012d4c:	0018      	movs	r0, r3
 8012d4e:	f001 fc07 	bl	8014560 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8012d52:	23fa      	movs	r3, #250	@ 0xfa
 8012d54:	011a      	lsls	r2, r3, #4
 8012d56:	23fa      	movs	r3, #250	@ 0xfa
 8012d58:	0119      	lsls	r1, r3, #4
 8012d5a:	23fa      	movs	r3, #250	@ 0xfa
 8012d5c:	011b      	lsls	r3, r3, #4
 8012d5e:	0018      	movs	r0, r3
 8012d60:	f7ff fbd2 	bl	8012508 <SetVocLED>
    userToggle = !userToggle;
 8012d64:	4b90      	ldr	r3, [pc, #576]	@ (8012fa8 <configCheck+0x300>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	1e5a      	subs	r2, r3, #1
 8012d6a:	4193      	sbcs	r3, r2
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	2201      	movs	r2, #1
 8012d70:	4053      	eors	r3, r2
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	1c1a      	adds	r2, r3, #0
 8012d76:	2301      	movs	r3, #1
 8012d78:	4013      	ands	r3, r2
 8012d7a:	b2da      	uxtb	r2, r3
 8012d7c:	4b8a      	ldr	r3, [pc, #552]	@ (8012fa8 <configCheck+0x300>)
 8012d7e:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8012d80:	4b89      	ldr	r3, [pc, #548]	@ (8012fa8 <configCheck+0x300>)
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <configCheck+0xe6>
      EnabledConnectedDevices();
 8012d88:	f7fa fde8 	bl	800d95c <EnabledConnectedDevices>
 8012d8c:	e004      	b.n	8012d98 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8012d8e:	f001 fbdd 	bl	801454c <HAL_GetTick>
 8012d92:	0002      	movs	r2, r0
 8012d94:	4b85      	ldr	r3, [pc, #532]	@ (8012fac <configCheck+0x304>)
 8012d96:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8012d98:	4b83      	ldr	r3, [pc, #524]	@ (8012fa8 <configCheck+0x300>)
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d001      	beq.n	8012da4 <configCheck+0xfc>
 8012da0:	4b83      	ldr	r3, [pc, #524]	@ (8012fb0 <configCheck+0x308>)
 8012da2:	e000      	b.n	8012da6 <configCheck+0xfe>
 8012da4:	4b83      	ldr	r3, [pc, #524]	@ (8012fb4 <configCheck+0x30c>)
 8012da6:	4a84      	ldr	r2, [pc, #528]	@ (8012fb8 <configCheck+0x310>)
 8012da8:	4984      	ldr	r1, [pc, #528]	@ (8012fbc <configCheck+0x314>)
 8012daa:	2003      	movs	r0, #3
 8012dac:	f000 fe8e 	bl	8013acc <CreateLine>
    userbuttonHeld = true;
 8012db0:	4b7a      	ldr	r3, [pc, #488]	@ (8012f9c <configCheck+0x2f4>)
 8012db2:	2201      	movs	r2, #1
 8012db4:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8012db6:	f001 fbc9 	bl	801454c <HAL_GetTick>
 8012dba:	0003      	movs	r3, r0
 8012dbc:	22fa      	movs	r2, #250	@ 0xfa
 8012dbe:	00d2      	lsls	r2, r2, #3
 8012dc0:	189a      	adds	r2, r3, r2
 8012dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8012fc0 <configCheck+0x318>)
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	e002      	b.n	8012dce <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8012dc8:	4b74      	ldr	r3, [pc, #464]	@ (8012f9c <configCheck+0x2f4>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8012dce:	f7f6 fd1d 	bl	800980c <BootButton_Pressed>
 8012dd2:	0003      	movs	r3, r0
 8012dd4:	001a      	movs	r2, r3
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	4053      	eors	r3, r2
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d100      	bne.n	8012de2 <configCheck+0x13a>
 8012de0:	e0a4      	b.n	8012f2c <configCheck+0x284>
 8012de2:	4b6e      	ldr	r3, [pc, #440]	@ (8012f9c <configCheck+0x2f4>)
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d100      	bne.n	8012dec <configCheck+0x144>
 8012dea:	e09f      	b.n	8012f2c <configCheck+0x284>
 8012dec:	4b74      	ldr	r3, [pc, #464]	@ (8012fc0 <configCheck+0x318>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	0018      	movs	r0, r3
 8012df2:	f000 fe15 	bl	8013a20 <TimestampIsReached>
 8012df6:	1e03      	subs	r3, r0, #0
 8012df8:	d100      	bne.n	8012dfc <configCheck+0x154>
 8012dfa:	e097      	b.n	8012f2c <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012dfc:	f7fa f992 	bl	800d124 <GetPMSensorPresence>
 8012e00:	1e03      	subs	r3, r0, #0
 8012e02:	d100      	bne.n	8012e06 <configCheck+0x15e>
 8012e04:	e082      	b.n	8012f0c <configCheck+0x264>
 8012e06:	4b6f      	ldr	r3, [pc, #444]	@ (8012fc4 <configCheck+0x31c>)
 8012e08:	791b      	ldrb	r3, [r3, #4]
 8012e0a:	2b34      	cmp	r3, #52	@ 0x34
 8012e0c:	d004      	beq.n	8012e18 <configCheck+0x170>
 8012e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8012fc4 <configCheck+0x31c>)
 8012e10:	791b      	ldrb	r3, [r3, #4]
 8012e12:	2b35      	cmp	r3, #53	@ 0x35
 8012e14:	d000      	beq.n	8012e18 <configCheck+0x170>
 8012e16:	e079      	b.n	8012f0c <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8012e18:	4b6b      	ldr	r3, [pc, #428]	@ (8012fc8 <configCheck+0x320>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	1e5a      	subs	r2, r3, #1
 8012e1e:	4193      	sbcs	r3, r2
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2201      	movs	r2, #1
 8012e24:	4053      	eors	r3, r2
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	1c1a      	adds	r2, r3, #0
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	b2da      	uxtb	r2, r3
 8012e30:	4b65      	ldr	r3, [pc, #404]	@ (8012fc8 <configCheck+0x320>)
 8012e32:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8012e34:	4b64      	ldr	r3, [pc, #400]	@ (8012fc8 <configCheck+0x320>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d005      	beq.n	8012e48 <configCheck+0x1a0>
 8012e3c:	1dbc      	adds	r4, r7, #6
 8012e3e:	f7ff fa9d 	bl	801237c <Calculate_LED_ON>
 8012e42:	0003      	movs	r3, r0
 8012e44:	8023      	strh	r3, [r4, #0]
 8012e46:	e003      	b.n	8012e50 <configCheck+0x1a8>
        else color = 4000;
 8012e48:	1dbb      	adds	r3, r7, #6
 8012e4a:	22fa      	movs	r2, #250	@ 0xfa
 8012e4c:	0112      	lsls	r2, r2, #4
 8012e4e:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8012e50:	4b5d      	ldr	r3, [pc, #372]	@ (8012fc8 <configCheck+0x320>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <configCheck+0x1b4>
 8012e58:	4b5c      	ldr	r3, [pc, #368]	@ (8012fcc <configCheck+0x324>)
 8012e5a:	e000      	b.n	8012e5e <configCheck+0x1b6>
 8012e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8012fd0 <configCheck+0x328>)
 8012e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8012fd4 <configCheck+0x32c>)
 8012e60:	495d      	ldr	r1, [pc, #372]	@ (8012fd8 <configCheck+0x330>)
 8012e62:	2002      	movs	r0, #2
 8012e64:	f000 fe32 	bl	8013acc <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8012e68:	1d7b      	adds	r3, r7, #5
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	701a      	strb	r2, [r3, #0]
 8012e6e:	e028      	b.n	8012ec2 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8012e70:	f7ff fa84 	bl	801237c <Calculate_LED_ON>
 8012e74:	0003      	movs	r3, r0
 8012e76:	001a      	movs	r2, r3
 8012e78:	4b58      	ldr	r3, [pc, #352]	@ (8012fdc <configCheck+0x334>)
 8012e7a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8012e7c:	4b57      	ldr	r3, [pc, #348]	@ (8012fdc <configCheck+0x334>)
 8012e7e:	1dba      	adds	r2, r7, #6
 8012e80:	8812      	ldrh	r2, [r2, #0]
 8012e82:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8012e84:	4b55      	ldr	r3, [pc, #340]	@ (8012fdc <configCheck+0x334>)
 8012e86:	1dba      	adds	r2, r7, #6
 8012e88:	8812      	ldrh	r2, [r2, #0]
 8012e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012e8c:	23c8      	movs	r3, #200	@ 0xc8
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	0018      	movs	r0, r3
 8012e92:	f001 fb65 	bl	8014560 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8012e96:	4b51      	ldr	r3, [pc, #324]	@ (8012fdc <configCheck+0x334>)
 8012e98:	22fa      	movs	r2, #250	@ 0xfa
 8012e9a:	0112      	lsls	r2, r2, #4
 8012e9c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8012e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8012fdc <configCheck+0x334>)
 8012ea0:	22fa      	movs	r2, #250	@ 0xfa
 8012ea2:	0112      	lsls	r2, r2, #4
 8012ea4:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8012ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8012fdc <configCheck+0x334>)
 8012ea8:	22fa      	movs	r2, #250	@ 0xfa
 8012eaa:	0112      	lsls	r2, r2, #4
 8012eac:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012eae:	23c8      	movs	r3, #200	@ 0xc8
 8012eb0:	005b      	lsls	r3, r3, #1
 8012eb2:	0018      	movs	r0, r3
 8012eb4:	f001 fb54 	bl	8014560 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012eb8:	1d7b      	adds	r3, r7, #5
 8012eba:	781a      	ldrb	r2, [r3, #0]
 8012ebc:	1d7b      	adds	r3, r7, #5
 8012ebe:	3201      	adds	r2, #1
 8012ec0:	701a      	strb	r2, [r3, #0]
 8012ec2:	1d7b      	adds	r3, r7, #5
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	d9d2      	bls.n	8012e70 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8012eca:	4b37      	ldr	r3, [pc, #220]	@ (8012fa8 <configCheck+0x300>)
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	1e5a      	subs	r2, r3, #1
 8012ed0:	4193      	sbcs	r3, r2
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	4053      	eors	r3, r2
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	1c1a      	adds	r2, r3, #0
 8012edc:	2301      	movs	r3, #1
 8012ede:	4013      	ands	r3, r2
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	4b31      	ldr	r3, [pc, #196]	@ (8012fa8 <configCheck+0x300>)
 8012ee4:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8012ee6:	4b30      	ldr	r3, [pc, #192]	@ (8012fa8 <configCheck+0x300>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <configCheck+0x24a>
 8012eee:	4b37      	ldr	r3, [pc, #220]	@ (8012fcc <configCheck+0x324>)
 8012ef0:	e000      	b.n	8012ef4 <configCheck+0x24c>
 8012ef2:	4b37      	ldr	r3, [pc, #220]	@ (8012fd0 <configCheck+0x328>)
 8012ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8012fe0 <configCheck+0x338>)
 8012ef6:	4938      	ldr	r1, [pc, #224]	@ (8012fd8 <configCheck+0x330>)
 8012ef8:	2002      	movs	r0, #2
 8012efa:	f000 fde7 	bl	8013acc <CreateLine>
      if (usbPluggedIn) {
 8012efe:	4b39      	ldr	r3, [pc, #228]	@ (8012fe4 <configCheck+0x33c>)
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d009      	beq.n	8012f1a <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8012f06:	f7fb ff1b 	bl	800ed40 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012f0a:	e006      	b.n	8012f1a <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8012f0c:	4a36      	ldr	r2, [pc, #216]	@ (8012fe8 <configCheck+0x340>)
 8012f0e:	4b32      	ldr	r3, [pc, #200]	@ (8012fd8 <configCheck+0x330>)
 8012f10:	0019      	movs	r1, r3
 8012f12:	2002      	movs	r0, #2
 8012f14:	f000 fdda 	bl	8013acc <CreateLine>
 8012f18:	e000      	b.n	8012f1c <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012f1a:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8012f1c:	46c0      	nop			@ (mov r8, r8)
 8012f1e:	f7f6 fc87 	bl	8009830 <UserButton_Pressed>
 8012f22:	1e03      	subs	r3, r0, #0
 8012f24:	d1fb      	bne.n	8012f1e <configCheck+0x276>
    }
    userbuttonHeld = false;
 8012f26:	4b1d      	ldr	r3, [pc, #116]	@ (8012f9c <configCheck+0x2f4>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8012f2c:	f7f6 fc6e 	bl	800980c <BootButton_Pressed>
 8012f30:	0003      	movs	r3, r0
 8012f32:	001a      	movs	r2, r3
 8012f34:	2301      	movs	r3, #1
 8012f36:	4053      	eors	r3, r2
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00b      	beq.n	8012f56 <configCheck+0x2ae>
 8012f3e:	f7f6 fc77 	bl	8009830 <UserButton_Pressed>
 8012f42:	0003      	movs	r3, r0
 8012f44:	001a      	movs	r2, r3
 8012f46:	2301      	movs	r3, #1
 8012f48:	4053      	eors	r3, r2
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d002      	beq.n	8012f56 <configCheck+0x2ae>
    userbuttonHeld = false;
 8012f50:	4b12      	ldr	r3, [pc, #72]	@ (8012f9c <configCheck+0x2f4>)
 8012f52:	2200      	movs	r2, #0
 8012f54:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8012f56:	f7f6 fbe3 	bl	8009720 <Check_USB_PowerOn>
 8012f5a:	1e03      	subs	r3, r0, #0
 8012f5c:	d003      	beq.n	8012f66 <configCheck+0x2be>
    usbPluggedIn = true;
 8012f5e:	4b21      	ldr	r3, [pc, #132]	@ (8012fe4 <configCheck+0x33c>)
 8012f60:	2201      	movs	r2, #1
 8012f62:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8012f64:	e012      	b.n	8012f8c <configCheck+0x2e4>
    if(!userToggle && !init){
 8012f66:	4b10      	ldr	r3, [pc, #64]	@ (8012fa8 <configCheck+0x300>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	4053      	eors	r3, r2
 8012f6e:	b2db      	uxtb	r3, r3
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d008      	beq.n	8012f86 <configCheck+0x2de>
 8012f74:	4b1d      	ldr	r3, [pc, #116]	@ (8012fec <configCheck+0x344>)
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	4053      	eors	r3, r2
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d001      	beq.n	8012f86 <configCheck+0x2de>
      SetLEDsOff();
 8012f82:	f7ff fc01 	bl	8012788 <SetLEDsOff>
    usbPluggedIn = false;
 8012f86:	4b17      	ldr	r3, [pc, #92]	@ (8012fe4 <configCheck+0x33c>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	701a      	strb	r2, [r3, #0]
}
 8012f8c:	46c0      	nop			@ (mov r8, r8)
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	b003      	add	sp, #12
 8012f92:	bd90      	pop	{r4, r7, pc}
 8012f94:	20001fa8 	.word	0x20001fa8
 8012f98:	20001fb0 	.word	0x20001fb0
 8012f9c:	20001fab 	.word	0x20001fab
 8012fa0:	00000bb8 	.word	0x00000bb8
 8012fa4:	000005dc 	.word	0x000005dc
 8012fa8:	20001faa 	.word	0x20001faa
 8012fac:	20000f6c 	.word	0x20000f6c
 8012fb0:	0802d928 	.word	0x0802d928
 8012fb4:	0802d92c 	.word	0x0802d92c
 8012fb8:	0802d930 	.word	0x0802d930
 8012fbc:	0802d868 	.word	0x0802d868
 8012fc0:	20001fb4 	.word	0x20001fb4
 8012fc4:	2000101c 	.word	0x2000101c
 8012fc8:	2000101a 	.word	0x2000101a
 8012fcc:	0802d950 	.word	0x0802d950
 8012fd0:	0802d958 	.word	0x0802d958
 8012fd4:	0802d964 	.word	0x0802d964
 8012fd8:	0802d984 	.word	0x0802d984
 8012fdc:	40000400 	.word	0x40000400
 8012fe0:	0802d988 	.word	0x0802d988
 8012fe4:	20001fa9 	.word	0x20001fa9
 8012fe8:	0802d9a0 	.word	0x0802d9a0
 8012fec:	200000e8 	.word	0x200000e8

08012ff0 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8012ff0:	b590      	push	{r4, r7, lr}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8012ff6:	1dfc      	adds	r4, r7, #7
 8012ff8:	f7ff fdbc 	bl	8012b74 <powerCheck>
 8012ffc:	0003      	movs	r3, r0
 8012ffe:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8013000:	1dfb      	adds	r3, r7, #7
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	0018      	movs	r0, r3
 8013006:	f7ff fdd1 	bl	8012bac <powerDisplay>
  return status;
 801300a:	1dfb      	adds	r3, r7, #7
 801300c:	781b      	ldrb	r3, [r3, #0]
}
 801300e:	0018      	movs	r0, r3
 8013010:	46bd      	mov	sp, r7
 8013012:	b003      	add	sp, #12
 8013014:	bd90      	pop	{r4, r7, pc}
	...

08013018 <setuserToggle>:

void setuserToggle(void) {
 8013018:	b580      	push	{r7, lr}
 801301a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 801301c:	f7ff fdaa 	bl	8012b74 <powerCheck>
 8013020:	0003      	movs	r3, r0
 8013022:	2b04      	cmp	r3, #4
 8013024:	d004      	beq.n	8013030 <setuserToggle+0x18>
    userToggle = true;
 8013026:	4b04      	ldr	r3, [pc, #16]	@ (8013038 <setuserToggle+0x20>)
 8013028:	2201      	movs	r2, #1
 801302a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 801302c:	f7fa fc96 	bl	800d95c <EnabledConnectedDevices>
  }
}
 8013030:	46c0      	nop			@ (mov r8, r8)
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	46c0      	nop			@ (mov r8, r8)
 8013038:	20001faa 	.word	0x20001faa

0801303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013040:	4b07      	ldr	r3, [pc, #28]	@ (8013060 <HAL_MspInit+0x24>)
 8013042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013044:	4b06      	ldr	r3, [pc, #24]	@ (8013060 <HAL_MspInit+0x24>)
 8013046:	2101      	movs	r1, #1
 8013048:	430a      	orrs	r2, r1
 801304a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 801304c:	4b04      	ldr	r3, [pc, #16]	@ (8013060 <HAL_MspInit+0x24>)
 801304e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013050:	4b03      	ldr	r3, [pc, #12]	@ (8013060 <HAL_MspInit+0x24>)
 8013052:	2180      	movs	r1, #128	@ 0x80
 8013054:	0549      	lsls	r1, r1, #21
 8013056:	430a      	orrs	r2, r1
 8013058:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801305a:	46c0      	nop			@ (mov r8, r8)
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	40021000 	.word	0x40021000

08013064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8013068:	46c0      	nop			@ (mov r8, r8)
 801306a:	e7fd      	b.n	8013068 <NMI_Handler+0x4>

0801306c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013070:	46c0      	nop			@ (mov r8, r8)
 8013072:	e7fd      	b.n	8013070 <HardFault_Handler+0x4>

08013074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8013078:	46c0      	nop			@ (mov r8, r8)
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801307e:	b580      	push	{r7, lr}
 8013080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013082:	46c0      	nop			@ (mov r8, r8)
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801308c:	f001 fa4c 	bl	8014528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8013090:	46c0      	nop			@ (mov r8, r8)
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
	...

08013098 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801309c:	4b03      	ldr	r3, [pc, #12]	@ (80130ac <RTC_IRQHandler+0x14>)
 801309e:	0018      	movs	r0, r3
 80130a0:	f009 fa9c 	bl	801c5dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80130a4:	46c0      	nop			@ (mov r8, r8)
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	46c0      	nop			@ (mov r8, r8)
 80130ac:	20000ff4 	.word	0x20000ff4

080130b0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 80130b4:	2380      	movs	r3, #128	@ 0x80
 80130b6:	021b      	lsls	r3, r3, #8
 80130b8:	0018      	movs	r0, r3
 80130ba:	f002 fcf5 	bl	8015aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80130be:	46c0      	nop			@ (mov r8, r8)
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80130c8:	4b05      	ldr	r3, [pc, #20]	@ (80130e0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80130ca:	0018      	movs	r0, r3
 80130cc:	f002 f87d 	bl	80151ca <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80130d0:	4b04      	ldr	r3, [pc, #16]	@ (80130e4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80130d2:	0018      	movs	r0, r3
 80130d4:	f002 f879 	bl	80151ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80130d8:	46c0      	nop			@ (mov r8, r8)
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	46c0      	nop			@ (mov r8, r8)
 80130e0:	20000e88 	.word	0x20000e88
 80130e4:	20000e40 	.word	0x20000e40

080130e8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80130ec:	4b07      	ldr	r3, [pc, #28]	@ (801310c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80130ee:	0018      	movs	r0, r3
 80130f0:	f002 f86b 	bl	80151ca <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80130f4:	4b06      	ldr	r3, [pc, #24]	@ (8013110 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80130f6:	0018      	movs	r0, r3
 80130f8:	f002 f867 	bl	80151ca <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80130fc:	4b05      	ldr	r3, [pc, #20]	@ (8013114 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80130fe:	0018      	movs	r0, r3
 8013100:	f002 f863 	bl	80151ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8013104:	46c0      	nop			@ (mov r8, r8)
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	46c0      	nop			@ (mov r8, r8)
 801310c:	20000f0c 	.word	0x20000f0c
 8013110:	200022b0 	.word	0x200022b0
 8013114:	200022f8 	.word	0x200022f8

08013118 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 801311c:	4b03      	ldr	r3, [pc, #12]	@ (801312c <USART4_5_IRQHandler+0x14>)
 801311e:	0018      	movs	r0, r3
 8013120:	f00a f956 	bl	801d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8013124:	46c0      	nop			@ (mov r8, r8)
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	46c0      	nop			@ (mov r8, r8)
 801312c:	200021f8 	.word	0x200021f8

08013130 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8013134:	4b09      	ldr	r3, [pc, #36]	@ (801315c <I2C1_IRQHandler+0x2c>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	699a      	ldr	r2, [r3, #24]
 801313a:	23e0      	movs	r3, #224	@ 0xe0
 801313c:	00db      	lsls	r3, r3, #3
 801313e:	4013      	ands	r3, r2
 8013140:	d004      	beq.n	801314c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8013142:	4b06      	ldr	r3, [pc, #24]	@ (801315c <I2C1_IRQHandler+0x2c>)
 8013144:	0018      	movs	r0, r3
 8013146:	f003 fbcd 	bl	80168e4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 801314a:	e003      	b.n	8013154 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 801314c:	4b03      	ldr	r3, [pc, #12]	@ (801315c <I2C1_IRQHandler+0x2c>)
 801314e:	0018      	movs	r0, r3
 8013150:	f003 fbae 	bl	80168b0 <HAL_I2C_EV_IRQHandler>
}
 8013154:	46c0      	nop			@ (mov r8, r8)
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	46c0      	nop			@ (mov r8, r8)
 801315c:	20000d98 	.word	0x20000d98

08013160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013164:	4b03      	ldr	r3, [pc, #12]	@ (8013174 <USART1_IRQHandler+0x14>)
 8013166:	0018      	movs	r0, r3
 8013168:	f00a f932 	bl	801d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801316c:	46c0      	nop			@ (mov r8, r8)
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	46c0      	nop			@ (mov r8, r8)
 8013174:	20002140 	.word	0x20002140

08013178 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 801317c:	4b03      	ldr	r3, [pc, #12]	@ (801318c <USB_IRQHandler+0x14>)
 801317e:	0018      	movs	r0, r3
 8013180:	f006 f864 	bl	801924c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8013184:	46c0      	nop			@ (mov r8, r8)
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	46c0      	nop			@ (mov r8, r8)
 801318c:	20003114 	.word	0x20003114

08013190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	af00      	add	r7, sp, #0
  return 1;
 8013194:	2301      	movs	r3, #1
}
 8013196:	0018      	movs	r0, r3
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <_kill>:

int _kill(int pid, int sig)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80131a6:	f013 f829 	bl	80261fc <__errno>
 80131aa:	0003      	movs	r3, r0
 80131ac:	2216      	movs	r2, #22
 80131ae:	601a      	str	r2, [r3, #0]
  return -1;
 80131b0:	2301      	movs	r3, #1
 80131b2:	425b      	negs	r3, r3
}
 80131b4:	0018      	movs	r0, r3
 80131b6:	46bd      	mov	sp, r7
 80131b8:	b002      	add	sp, #8
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_exit>:

void _exit (int status)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80131c4:	2301      	movs	r3, #1
 80131c6:	425a      	negs	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	0011      	movs	r1, r2
 80131cc:	0018      	movs	r0, r3
 80131ce:	f7ff ffe5 	bl	801319c <_kill>
  while (1) {}    /* Make sure we hang here */
 80131d2:	46c0      	nop			@ (mov r8, r8)
 80131d4:	e7fd      	b.n	80131d2 <_exit+0x16>

080131d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b086      	sub	sp, #24
 80131da:	af00      	add	r7, sp, #0
 80131dc:	60f8      	str	r0, [r7, #12]
 80131de:	60b9      	str	r1, [r7, #8]
 80131e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131e2:	2300      	movs	r3, #0
 80131e4:	617b      	str	r3, [r7, #20]
 80131e6:	e00a      	b.n	80131fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80131e8:	e000      	b.n	80131ec <_read+0x16>
 80131ea:	bf00      	nop
 80131ec:	0001      	movs	r1, r0
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	1c5a      	adds	r2, r3, #1
 80131f2:	60ba      	str	r2, [r7, #8]
 80131f4:	b2ca      	uxtb	r2, r1
 80131f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	3301      	adds	r3, #1
 80131fc:	617b      	str	r3, [r7, #20]
 80131fe:	697a      	ldr	r2, [r7, #20]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	429a      	cmp	r2, r3
 8013204:	dbf0      	blt.n	80131e8 <_read+0x12>
  }

  return len;
 8013206:	687b      	ldr	r3, [r7, #4]
}
 8013208:	0018      	movs	r0, r3
 801320a:	46bd      	mov	sp, r7
 801320c:	b006      	add	sp, #24
 801320e:	bd80      	pop	{r7, pc}

08013210 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013218:	2301      	movs	r3, #1
 801321a:	425b      	negs	r3, r3
}
 801321c:	0018      	movs	r0, r3
 801321e:	46bd      	mov	sp, r7
 8013220:	b002      	add	sp, #8
 8013222:	bd80      	pop	{r7, pc}

08013224 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2280      	movs	r2, #128	@ 0x80
 8013232:	0192      	lsls	r2, r2, #6
 8013234:	605a      	str	r2, [r3, #4]
  return 0;
 8013236:	2300      	movs	r3, #0
}
 8013238:	0018      	movs	r0, r3
 801323a:	46bd      	mov	sp, r7
 801323c:	b002      	add	sp, #8
 801323e:	bd80      	pop	{r7, pc}

08013240 <_isatty>:

int _isatty(int file)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8013248:	2301      	movs	r3, #1
}
 801324a:	0018      	movs	r0, r3
 801324c:	46bd      	mov	sp, r7
 801324e:	b002      	add	sp, #8
 8013250:	bd80      	pop	{r7, pc}

08013252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b084      	sub	sp, #16
 8013256:	af00      	add	r7, sp, #0
 8013258:	60f8      	str	r0, [r7, #12]
 801325a:	60b9      	str	r1, [r7, #8]
 801325c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801325e:	2300      	movs	r3, #0
}
 8013260:	0018      	movs	r0, r3
 8013262:	46bd      	mov	sp, r7
 8013264:	b004      	add	sp, #16
 8013266:	bd80      	pop	{r7, pc}

08013268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013270:	4a14      	ldr	r2, [pc, #80]	@ (80132c4 <_sbrk+0x5c>)
 8013272:	4b15      	ldr	r3, [pc, #84]	@ (80132c8 <_sbrk+0x60>)
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801327c:	4b13      	ldr	r3, [pc, #76]	@ (80132cc <_sbrk+0x64>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d102      	bne.n	801328a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013284:	4b11      	ldr	r3, [pc, #68]	@ (80132cc <_sbrk+0x64>)
 8013286:	4a12      	ldr	r2, [pc, #72]	@ (80132d0 <_sbrk+0x68>)
 8013288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801328a:	4b10      	ldr	r3, [pc, #64]	@ (80132cc <_sbrk+0x64>)
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	18d3      	adds	r3, r2, r3
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	429a      	cmp	r2, r3
 8013296:	d207      	bcs.n	80132a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013298:	f012 ffb0 	bl	80261fc <__errno>
 801329c:	0003      	movs	r3, r0
 801329e:	220c      	movs	r2, #12
 80132a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80132a2:	2301      	movs	r3, #1
 80132a4:	425b      	negs	r3, r3
 80132a6:	e009      	b.n	80132bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80132a8:	4b08      	ldr	r3, [pc, #32]	@ (80132cc <_sbrk+0x64>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80132ae:	4b07      	ldr	r3, [pc, #28]	@ (80132cc <_sbrk+0x64>)
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	18d2      	adds	r2, r2, r3
 80132b6:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <_sbrk+0x64>)
 80132b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80132ba:	68fb      	ldr	r3, [r7, #12]
}
 80132bc:	0018      	movs	r0, r3
 80132be:	46bd      	mov	sp, r7
 80132c0:	b006      	add	sp, #24
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	20005000 	.word	0x20005000
 80132c8:	00000400 	.word	0x00000400
 80132cc:	20001fc4 	.word	0x20001fc4
 80132d0:	20003778 	.word	0x20003778

080132d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80132d8:	46c0      	nop			@ (mov r8, r8)
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
	...

080132e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80132e6:	2310      	movs	r3, #16
 80132e8:	18fb      	adds	r3, r7, r3
 80132ea:	0018      	movs	r0, r3
 80132ec:	2308      	movs	r3, #8
 80132ee:	001a      	movs	r2, r3
 80132f0:	2100      	movs	r1, #0
 80132f2:	f012 fedf 	bl	80260b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80132f6:	003b      	movs	r3, r7
 80132f8:	0018      	movs	r0, r3
 80132fa:	2310      	movs	r3, #16
 80132fc:	001a      	movs	r2, r3
 80132fe:	2100      	movs	r1, #0
 8013300:	f012 fed8 	bl	80260b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013304:	4b2e      	ldr	r3, [pc, #184]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 8013306:	2280      	movs	r2, #128	@ 0x80
 8013308:	05d2      	lsls	r2, r2, #23
 801330a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801330c:	4b2c      	ldr	r3, [pc, #176]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 801330e:	2200      	movs	r2, #0
 8013310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013312:	4b2b      	ldr	r3, [pc, #172]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 8013314:	2200      	movs	r2, #0
 8013316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8013318:	4b29      	ldr	r3, [pc, #164]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 801331a:	4a2a      	ldr	r2, [pc, #168]	@ (80133c4 <MX_TIM2_Init+0xe4>)
 801331c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801331e:	4b28      	ldr	r3, [pc, #160]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 8013320:	2200      	movs	r2, #0
 8013322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013324:	4b26      	ldr	r3, [pc, #152]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 8013326:	2200      	movs	r2, #0
 8013328:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801332a:	4b25      	ldr	r3, [pc, #148]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 801332c:	0018      	movs	r0, r3
 801332e:	f009 fa63 	bl	801c7f8 <HAL_TIM_PWM_Init>
 8013332:	1e03      	subs	r3, r0, #0
 8013334:	d001      	beq.n	801333a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8013336:	f7f9 fea3 	bl	800d080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801333a:	2110      	movs	r1, #16
 801333c:	187b      	adds	r3, r7, r1
 801333e:	2200      	movs	r2, #0
 8013340:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013342:	187b      	adds	r3, r7, r1
 8013344:	2200      	movs	r2, #0
 8013346:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013348:	187a      	adds	r2, r7, r1
 801334a:	4b1d      	ldr	r3, [pc, #116]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 801334c:	0011      	movs	r1, r2
 801334e:	0018      	movs	r0, r3
 8013350:	f009 fd70 	bl	801ce34 <HAL_TIMEx_MasterConfigSynchronization>
 8013354:	1e03      	subs	r3, r0, #0
 8013356:	d001      	beq.n	801335c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8013358:	f7f9 fe92 	bl	800d080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801335c:	003b      	movs	r3, r7
 801335e:	2260      	movs	r2, #96	@ 0x60
 8013360:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013362:	003b      	movs	r3, r7
 8013364:	2200      	movs	r2, #0
 8013366:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013368:	003b      	movs	r3, r7
 801336a:	2200      	movs	r2, #0
 801336c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801336e:	003b      	movs	r3, r7
 8013370:	2200      	movs	r2, #0
 8013372:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013374:	0039      	movs	r1, r7
 8013376:	4b12      	ldr	r3, [pc, #72]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 8013378:	2200      	movs	r2, #0
 801337a:	0018      	movs	r0, r3
 801337c:	f009 fb0e 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 8013380:	1e03      	subs	r3, r0, #0
 8013382:	d001      	beq.n	8013388 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8013384:	f7f9 fe7c 	bl	800d080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013388:	0039      	movs	r1, r7
 801338a:	4b0d      	ldr	r3, [pc, #52]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 801338c:	2208      	movs	r2, #8
 801338e:	0018      	movs	r0, r3
 8013390:	f009 fb04 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 8013394:	1e03      	subs	r3, r0, #0
 8013396:	d001      	beq.n	801339c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013398:	f7f9 fe72 	bl	800d080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801339c:	0039      	movs	r1, r7
 801339e:	4b08      	ldr	r3, [pc, #32]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 80133a0:	220c      	movs	r2, #12
 80133a2:	0018      	movs	r0, r3
 80133a4:	f009 fafa 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 80133a8:	1e03      	subs	r3, r0, #0
 80133aa:	d001      	beq.n	80133b0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80133ac:	f7f9 fe68 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80133b0:	4b03      	ldr	r3, [pc, #12]	@ (80133c0 <MX_TIM2_Init+0xe0>)
 80133b2:	0018      	movs	r0, r3
 80133b4:	f000 f8fe 	bl	80135b4 <HAL_TIM_MspPostInit>

}
 80133b8:	46c0      	nop			@ (mov r8, r8)
 80133ba:	46bd      	mov	sp, r7
 80133bc:	b006      	add	sp, #24
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	20001fc8 	.word	0x20001fc8
 80133c4:	0000ffff 	.word	0x0000ffff

080133c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b086      	sub	sp, #24
 80133cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80133ce:	2310      	movs	r3, #16
 80133d0:	18fb      	adds	r3, r7, r3
 80133d2:	0018      	movs	r0, r3
 80133d4:	2308      	movs	r3, #8
 80133d6:	001a      	movs	r2, r3
 80133d8:	2100      	movs	r1, #0
 80133da:	f012 fe6b 	bl	80260b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80133de:	003b      	movs	r3, r7
 80133e0:	0018      	movs	r0, r3
 80133e2:	2310      	movs	r3, #16
 80133e4:	001a      	movs	r2, r3
 80133e6:	2100      	movs	r1, #0
 80133e8:	f012 fe64 	bl	80260b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80133ec:	4b32      	ldr	r3, [pc, #200]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 80133ee:	4a33      	ldr	r2, [pc, #204]	@ (80134bc <MX_TIM3_Init+0xf4>)
 80133f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80133f2:	4b31      	ldr	r3, [pc, #196]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 80133f4:	2200      	movs	r2, #0
 80133f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80133f8:	4b2f      	ldr	r3, [pc, #188]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80133fe:	4b2e      	ldr	r3, [pc, #184]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013400:	4a2f      	ldr	r2, [pc, #188]	@ (80134c0 <MX_TIM3_Init+0xf8>)
 8013402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013404:	4b2c      	ldr	r3, [pc, #176]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013406:	2200      	movs	r2, #0
 8013408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801340a:	4b2b      	ldr	r3, [pc, #172]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 801340c:	2200      	movs	r2, #0
 801340e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013410:	4b29      	ldr	r3, [pc, #164]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013412:	0018      	movs	r0, r3
 8013414:	f009 f9f0 	bl	801c7f8 <HAL_TIM_PWM_Init>
 8013418:	1e03      	subs	r3, r0, #0
 801341a:	d001      	beq.n	8013420 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 801341c:	f7f9 fe30 	bl	800d080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013420:	2110      	movs	r1, #16
 8013422:	187b      	adds	r3, r7, r1
 8013424:	2200      	movs	r2, #0
 8013426:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013428:	187b      	adds	r3, r7, r1
 801342a:	2200      	movs	r2, #0
 801342c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801342e:	187a      	adds	r2, r7, r1
 8013430:	4b21      	ldr	r3, [pc, #132]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013432:	0011      	movs	r1, r2
 8013434:	0018      	movs	r0, r3
 8013436:	f009 fcfd 	bl	801ce34 <HAL_TIMEx_MasterConfigSynchronization>
 801343a:	1e03      	subs	r3, r0, #0
 801343c:	d001      	beq.n	8013442 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 801343e:	f7f9 fe1f 	bl	800d080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013442:	003b      	movs	r3, r7
 8013444:	2260      	movs	r2, #96	@ 0x60
 8013446:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8013448:	003b      	movs	r3, r7
 801344a:	2200      	movs	r2, #0
 801344c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801344e:	003b      	movs	r3, r7
 8013450:	2200      	movs	r2, #0
 8013452:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013454:	003b      	movs	r3, r7
 8013456:	2200      	movs	r2, #0
 8013458:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801345a:	0039      	movs	r1, r7
 801345c:	4b16      	ldr	r3, [pc, #88]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 801345e:	2200      	movs	r2, #0
 8013460:	0018      	movs	r0, r3
 8013462:	f009 fa9b 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 8013466:	1e03      	subs	r3, r0, #0
 8013468:	d001      	beq.n	801346e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 801346a:	f7f9 fe09 	bl	800d080 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 801346e:	4b12      	ldr	r3, [pc, #72]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013470:	2104      	movs	r1, #4
 8013472:	0018      	movs	r0, r3
 8013474:	f009 fd3c 	bl	801cef0 <HAL_TIMEx_RemapConfig>
 8013478:	1e03      	subs	r3, r0, #0
 801347a:	d001      	beq.n	8013480 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 801347c:	f7f9 fe00 	bl	800d080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013480:	0039      	movs	r1, r7
 8013482:	4b0d      	ldr	r3, [pc, #52]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013484:	2204      	movs	r2, #4
 8013486:	0018      	movs	r0, r3
 8013488:	f009 fa88 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 801348c:	1e03      	subs	r3, r0, #0
 801348e:	d001      	beq.n	8013494 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013490:	f7f9 fdf6 	bl	800d080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013494:	0039      	movs	r1, r7
 8013496:	4b08      	ldr	r3, [pc, #32]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 8013498:	2208      	movs	r2, #8
 801349a:	0018      	movs	r0, r3
 801349c:	f009 fa7e 	bl	801c99c <HAL_TIM_PWM_ConfigChannel>
 80134a0:	1e03      	subs	r3, r0, #0
 80134a2:	d001      	beq.n	80134a8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80134a4:	f7f9 fdec 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80134a8:	4b03      	ldr	r3, [pc, #12]	@ (80134b8 <MX_TIM3_Init+0xf0>)
 80134aa:	0018      	movs	r0, r3
 80134ac:	f000 f882 	bl	80135b4 <HAL_TIM_MspPostInit>

}
 80134b0:	46c0      	nop			@ (mov r8, r8)
 80134b2:	46bd      	mov	sp, r7
 80134b4:	b006      	add	sp, #24
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	20002008 	.word	0x20002008
 80134bc:	40000400 	.word	0x40000400
 80134c0:	0000ffff 	.word	0x0000ffff

080134c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80134ca:	003b      	movs	r3, r7
 80134cc:	0018      	movs	r0, r3
 80134ce:	2308      	movs	r3, #8
 80134d0:	001a      	movs	r2, r3
 80134d2:	2100      	movs	r1, #0
 80134d4:	f012 fdee 	bl	80260b4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80134d8:	4b15      	ldr	r3, [pc, #84]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134da:	4a16      	ldr	r2, [pc, #88]	@ (8013534 <MX_TIM6_Init+0x70>)
 80134dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80134de:	4b14      	ldr	r3, [pc, #80]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134e0:	220a      	movs	r2, #10
 80134e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80134e4:	4b12      	ldr	r3, [pc, #72]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134e6:	2200      	movs	r2, #0
 80134e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80134ea:	4b11      	ldr	r3, [pc, #68]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134ec:	4a12      	ldr	r2, [pc, #72]	@ (8013538 <MX_TIM6_Init+0x74>)
 80134ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80134f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80134f6:	4b0e      	ldr	r3, [pc, #56]	@ (8013530 <MX_TIM6_Init+0x6c>)
 80134f8:	0018      	movs	r0, r3
 80134fa:	f009 f8d5 	bl	801c6a8 <HAL_TIM_Base_Init>
 80134fe:	1e03      	subs	r3, r0, #0
 8013500:	d001      	beq.n	8013506 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013502:	f7f9 fdbd 	bl	800d080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013506:	003b      	movs	r3, r7
 8013508:	2200      	movs	r2, #0
 801350a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801350c:	003b      	movs	r3, r7
 801350e:	2200      	movs	r2, #0
 8013510:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013512:	003a      	movs	r2, r7
 8013514:	4b06      	ldr	r3, [pc, #24]	@ (8013530 <MX_TIM6_Init+0x6c>)
 8013516:	0011      	movs	r1, r2
 8013518:	0018      	movs	r0, r3
 801351a:	f009 fc8b 	bl	801ce34 <HAL_TIMEx_MasterConfigSynchronization>
 801351e:	1e03      	subs	r3, r0, #0
 8013520:	d001      	beq.n	8013526 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8013522:	f7f9 fdad 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8013526:	46c0      	nop			@ (mov r8, r8)
 8013528:	46bd      	mov	sp, r7
 801352a:	b002      	add	sp, #8
 801352c:	bd80      	pop	{r7, pc}
 801352e:	46c0      	nop			@ (mov r8, r8)
 8013530:	20002048 	.word	0x20002048
 8013534:	40001000 	.word	0x40001000
 8013538:	0000ffff 	.word	0x0000ffff

0801353c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	2380      	movs	r3, #128	@ 0x80
 801354a:	05db      	lsls	r3, r3, #23
 801354c:	429a      	cmp	r2, r3
 801354e:	d106      	bne.n	801355e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013550:	4b0a      	ldr	r3, [pc, #40]	@ (801357c <HAL_TIM_PWM_MspInit+0x40>)
 8013552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013554:	4b09      	ldr	r3, [pc, #36]	@ (801357c <HAL_TIM_PWM_MspInit+0x40>)
 8013556:	2101      	movs	r1, #1
 8013558:	430a      	orrs	r2, r1
 801355a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801355c:	e00a      	b.n	8013574 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	4a07      	ldr	r2, [pc, #28]	@ (8013580 <HAL_TIM_PWM_MspInit+0x44>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d105      	bne.n	8013574 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013568:	4b04      	ldr	r3, [pc, #16]	@ (801357c <HAL_TIM_PWM_MspInit+0x40>)
 801356a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801356c:	4b03      	ldr	r3, [pc, #12]	@ (801357c <HAL_TIM_PWM_MspInit+0x40>)
 801356e:	2102      	movs	r1, #2
 8013570:	430a      	orrs	r2, r1
 8013572:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013574:	46c0      	nop			@ (mov r8, r8)
 8013576:	46bd      	mov	sp, r7
 8013578:	b002      	add	sp, #8
 801357a:	bd80      	pop	{r7, pc}
 801357c:	40021000 	.word	0x40021000
 8013580:	40000400 	.word	0x40000400

08013584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a06      	ldr	r2, [pc, #24]	@ (80135ac <HAL_TIM_Base_MspInit+0x28>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d105      	bne.n	80135a2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013596:	4b06      	ldr	r3, [pc, #24]	@ (80135b0 <HAL_TIM_Base_MspInit+0x2c>)
 8013598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801359a:	4b05      	ldr	r3, [pc, #20]	@ (80135b0 <HAL_TIM_Base_MspInit+0x2c>)
 801359c:	2110      	movs	r1, #16
 801359e:	430a      	orrs	r2, r1
 80135a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80135a2:	46c0      	nop			@ (mov r8, r8)
 80135a4:	46bd      	mov	sp, r7
 80135a6:	b002      	add	sp, #8
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	46c0      	nop			@ (mov r8, r8)
 80135ac:	40001000 	.word	0x40001000
 80135b0:	40021000 	.word	0x40021000

080135b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80135b4:	b590      	push	{r4, r7, lr}
 80135b6:	b08b      	sub	sp, #44	@ 0x2c
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80135bc:	2414      	movs	r4, #20
 80135be:	193b      	adds	r3, r7, r4
 80135c0:	0018      	movs	r0, r3
 80135c2:	2314      	movs	r3, #20
 80135c4:	001a      	movs	r2, r3
 80135c6:	2100      	movs	r1, #0
 80135c8:	f012 fd74 	bl	80260b4 <memset>
  if(timHandle->Instance==TIM2)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	2380      	movs	r3, #128	@ 0x80
 80135d2:	05db      	lsls	r3, r3, #23
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d123      	bne.n	8013620 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80135d8:	4b27      	ldr	r3, [pc, #156]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 80135da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135dc:	4b26      	ldr	r3, [pc, #152]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 80135de:	2101      	movs	r1, #1
 80135e0:	430a      	orrs	r2, r1
 80135e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80135e4:	4b24      	ldr	r3, [pc, #144]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 80135e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e8:	2201      	movs	r2, #1
 80135ea:	4013      	ands	r3, r2
 80135ec:	613b      	str	r3, [r7, #16]
 80135ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80135f0:	0021      	movs	r1, r4
 80135f2:	187b      	adds	r3, r7, r1
 80135f4:	220d      	movs	r2, #13
 80135f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80135f8:	187b      	adds	r3, r7, r1
 80135fa:	2202      	movs	r2, #2
 80135fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135fe:	187b      	adds	r3, r7, r1
 8013600:	2200      	movs	r2, #0
 8013602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013604:	187b      	adds	r3, r7, r1
 8013606:	2200      	movs	r2, #0
 8013608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801360a:	187b      	adds	r3, r7, r1
 801360c:	2202      	movs	r2, #2
 801360e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013610:	187a      	adds	r2, r7, r1
 8013612:	23a0      	movs	r3, #160	@ 0xa0
 8013614:	05db      	lsls	r3, r3, #23
 8013616:	0011      	movs	r1, r2
 8013618:	0018      	movs	r0, r3
 801361a:	f002 f88d 	bl	8015738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801361e:	e027      	b.n	8013670 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4a15      	ldr	r2, [pc, #84]	@ (801367c <HAL_TIM_MspPostInit+0xc8>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d122      	bne.n	8013670 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801362a:	4b13      	ldr	r3, [pc, #76]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 801362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801362e:	4b12      	ldr	r3, [pc, #72]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 8013630:	2104      	movs	r1, #4
 8013632:	430a      	orrs	r2, r1
 8013634:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013636:	4b10      	ldr	r3, [pc, #64]	@ (8013678 <HAL_TIM_MspPostInit+0xc4>)
 8013638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801363a:	2204      	movs	r2, #4
 801363c:	4013      	ands	r3, r2
 801363e:	60fb      	str	r3, [r7, #12]
 8013640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8013642:	2114      	movs	r1, #20
 8013644:	187b      	adds	r3, r7, r1
 8013646:	22e0      	movs	r2, #224	@ 0xe0
 8013648:	0052      	lsls	r2, r2, #1
 801364a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801364c:	187b      	adds	r3, r7, r1
 801364e:	2202      	movs	r2, #2
 8013650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013652:	187b      	adds	r3, r7, r1
 8013654:	2200      	movs	r2, #0
 8013656:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013658:	187b      	adds	r3, r7, r1
 801365a:	2200      	movs	r2, #0
 801365c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801365e:	187b      	adds	r3, r7, r1
 8013660:	2202      	movs	r2, #2
 8013662:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013664:	187b      	adds	r3, r7, r1
 8013666:	4a06      	ldr	r2, [pc, #24]	@ (8013680 <HAL_TIM_MspPostInit+0xcc>)
 8013668:	0019      	movs	r1, r3
 801366a:	0010      	movs	r0, r2
 801366c:	f002 f864 	bl	8015738 <HAL_GPIO_Init>
}
 8013670:	46c0      	nop			@ (mov r8, r8)
 8013672:	46bd      	mov	sp, r7
 8013674:	b00b      	add	sp, #44	@ 0x2c
 8013676:	bd90      	pop	{r4, r7, pc}
 8013678:	40021000 	.word	0x40021000
 801367c:	40000400 	.word	0x40000400
 8013680:	50000800 	.word	0x50000800

08013684 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013688:	4b17      	ldr	r3, [pc, #92]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 801368a:	4a18      	ldr	r2, [pc, #96]	@ (80136ec <MX_LPUART1_UART_Init+0x68>)
 801368c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801368e:	4b16      	ldr	r3, [pc, #88]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 8013690:	22e1      	movs	r2, #225	@ 0xe1
 8013692:	0252      	lsls	r2, r2, #9
 8013694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013696:	4b14      	ldr	r3, [pc, #80]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 8013698:	2200      	movs	r2, #0
 801369a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801369c:	4b12      	ldr	r3, [pc, #72]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 801369e:	2200      	movs	r2, #0
 80136a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80136a2:	4b11      	ldr	r3, [pc, #68]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136a4:	2200      	movs	r2, #0
 80136a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80136a8:	4b0f      	ldr	r3, [pc, #60]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136aa:	220c      	movs	r2, #12
 80136ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80136ae:	4b0e      	ldr	r3, [pc, #56]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136b0:	2200      	movs	r2, #0
 80136b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80136b4:	4b0c      	ldr	r3, [pc, #48]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136b6:	2200      	movs	r2, #0
 80136b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80136ba:	4b0b      	ldr	r3, [pc, #44]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136bc:	2218      	movs	r2, #24
 80136be:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80136c0:	4b09      	ldr	r3, [pc, #36]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136c2:	2280      	movs	r2, #128	@ 0x80
 80136c4:	0212      	lsls	r2, r2, #8
 80136c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80136c8:	4b07      	ldr	r3, [pc, #28]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136ca:	2280      	movs	r2, #128	@ 0x80
 80136cc:	0152      	lsls	r2, r2, #5
 80136ce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80136d0:	4b05      	ldr	r3, [pc, #20]	@ (80136e8 <MX_LPUART1_UART_Init+0x64>)
 80136d2:	0018      	movs	r0, r3
 80136d4:	f009 fc2a 	bl	801cf2c <HAL_UART_Init>
 80136d8:	1e03      	subs	r3, r0, #0
 80136da:	d001      	beq.n	80136e0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80136dc:	f7f9 fcd0 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80136e0:	46c0      	nop			@ (mov r8, r8)
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	46c0      	nop			@ (mov r8, r8)
 80136e8:	20002088 	.word	0x20002088
 80136ec:	40004800 	.word	0x40004800

080136f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80136f4:	4b14      	ldr	r3, [pc, #80]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 80136f6:	4a15      	ldr	r2, [pc, #84]	@ (801374c <MX_USART1_UART_Init+0x5c>)
 80136f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80136fa:	4b13      	ldr	r3, [pc, #76]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 80136fc:	22e1      	movs	r2, #225	@ 0xe1
 80136fe:	0252      	lsls	r2, r2, #9
 8013700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013702:	4b11      	ldr	r3, [pc, #68]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013704:	2200      	movs	r2, #0
 8013706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013708:	4b0f      	ldr	r3, [pc, #60]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 801370a:	2200      	movs	r2, #0
 801370c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801370e:	4b0e      	ldr	r3, [pc, #56]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013710:	2200      	movs	r2, #0
 8013712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013714:	4b0c      	ldr	r3, [pc, #48]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013716:	220c      	movs	r2, #12
 8013718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801371a:	4b0b      	ldr	r3, [pc, #44]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 801371c:	2200      	movs	r2, #0
 801371e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013720:	4b09      	ldr	r3, [pc, #36]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013722:	2200      	movs	r2, #0
 8013724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013726:	4b08      	ldr	r3, [pc, #32]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013728:	2200      	movs	r2, #0
 801372a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801372c:	4b06      	ldr	r3, [pc, #24]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 801372e:	2200      	movs	r2, #0
 8013730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013732:	4b05      	ldr	r3, [pc, #20]	@ (8013748 <MX_USART1_UART_Init+0x58>)
 8013734:	0018      	movs	r0, r3
 8013736:	f009 fbf9 	bl	801cf2c <HAL_UART_Init>
 801373a:	1e03      	subs	r3, r0, #0
 801373c:	d001      	beq.n	8013742 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801373e:	f7f9 fc9f 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013742:	46c0      	nop			@ (mov r8, r8)
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	20002140 	.word	0x20002140
 801374c:	40013800 	.word	0x40013800

08013750 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013754:	4b14      	ldr	r3, [pc, #80]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013756:	4a15      	ldr	r2, [pc, #84]	@ (80137ac <MX_USART4_UART_Init+0x5c>)
 8013758:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801375a:	4b13      	ldr	r3, [pc, #76]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 801375c:	22e1      	movs	r2, #225	@ 0xe1
 801375e:	0252      	lsls	r2, r2, #9
 8013760:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013762:	4b11      	ldr	r3, [pc, #68]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013764:	2200      	movs	r2, #0
 8013766:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013768:	4b0f      	ldr	r3, [pc, #60]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 801376a:	2200      	movs	r2, #0
 801376c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 801376e:	4b0e      	ldr	r3, [pc, #56]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013770:	2200      	movs	r2, #0
 8013772:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013774:	4b0c      	ldr	r3, [pc, #48]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013776:	220c      	movs	r2, #12
 8013778:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801377a:	4b0b      	ldr	r3, [pc, #44]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 801377c:	2200      	movs	r2, #0
 801377e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013780:	4b09      	ldr	r3, [pc, #36]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013782:	2200      	movs	r2, #0
 8013784:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013786:	4b08      	ldr	r3, [pc, #32]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013788:	2200      	movs	r2, #0
 801378a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801378c:	4b06      	ldr	r3, [pc, #24]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 801378e:	2200      	movs	r2, #0
 8013790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013792:	4b05      	ldr	r3, [pc, #20]	@ (80137a8 <MX_USART4_UART_Init+0x58>)
 8013794:	0018      	movs	r0, r3
 8013796:	f009 fbc9 	bl	801cf2c <HAL_UART_Init>
 801379a:	1e03      	subs	r3, r0, #0
 801379c:	d001      	beq.n	80137a2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801379e:	f7f9 fc6f 	bl	800d080 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80137a2:	46c0      	nop			@ (mov r8, r8)
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	200021f8 	.word	0x200021f8
 80137ac:	40004c00 	.word	0x40004c00

080137b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80137b0:	b590      	push	{r4, r7, lr}
 80137b2:	b08d      	sub	sp, #52	@ 0x34
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137b8:	241c      	movs	r4, #28
 80137ba:	193b      	adds	r3, r7, r4
 80137bc:	0018      	movs	r0, r3
 80137be:	2314      	movs	r3, #20
 80137c0:	001a      	movs	r2, r3
 80137c2:	2100      	movs	r1, #0
 80137c4:	f012 fc76 	bl	80260b4 <memset>
  if(uartHandle->Instance==LPUART1)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	4a8b      	ldr	r2, [pc, #556]	@ (80139fc <HAL_UART_MspInit+0x24c>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d129      	bne.n	8013826 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80137d2:	4b8b      	ldr	r3, [pc, #556]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80137d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137d6:	4b8a      	ldr	r3, [pc, #552]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80137d8:	2180      	movs	r1, #128	@ 0x80
 80137da:	02c9      	lsls	r1, r1, #11
 80137dc:	430a      	orrs	r2, r1
 80137de:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80137e0:	4b87      	ldr	r3, [pc, #540]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80137e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137e4:	4b86      	ldr	r3, [pc, #536]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80137e6:	2104      	movs	r1, #4
 80137e8:	430a      	orrs	r2, r1
 80137ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80137ec:	4b84      	ldr	r3, [pc, #528]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80137ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f0:	2204      	movs	r2, #4
 80137f2:	4013      	ands	r3, r2
 80137f4:	61bb      	str	r3, [r7, #24]
 80137f6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80137f8:	0021      	movs	r1, r4
 80137fa:	187b      	adds	r3, r7, r1
 80137fc:	2203      	movs	r2, #3
 80137fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013800:	187b      	adds	r3, r7, r1
 8013802:	2202      	movs	r2, #2
 8013804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013806:	187b      	adds	r3, r7, r1
 8013808:	2200      	movs	r2, #0
 801380a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801380c:	187b      	adds	r3, r7, r1
 801380e:	2203      	movs	r2, #3
 8013810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013812:	187b      	adds	r3, r7, r1
 8013814:	2206      	movs	r2, #6
 8013816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013818:	187b      	adds	r3, r7, r1
 801381a:	4a7a      	ldr	r2, [pc, #488]	@ (8013a04 <HAL_UART_MspInit+0x254>)
 801381c:	0019      	movs	r1, r3
 801381e:	0010      	movs	r0, r2
 8013820:	f001 ff8a 	bl	8015738 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013824:	e0e5      	b.n	80139f2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4a77      	ldr	r2, [pc, #476]	@ (8013a08 <HAL_UART_MspInit+0x258>)
 801382c:	4293      	cmp	r3, r2
 801382e:	d133      	bne.n	8013898 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013830:	4b73      	ldr	r3, [pc, #460]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 8013832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013834:	4b72      	ldr	r3, [pc, #456]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 8013836:	2180      	movs	r1, #128	@ 0x80
 8013838:	01c9      	lsls	r1, r1, #7
 801383a:	430a      	orrs	r2, r1
 801383c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801383e:	4b70      	ldr	r3, [pc, #448]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 8013840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013842:	4b6f      	ldr	r3, [pc, #444]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 8013844:	2101      	movs	r1, #1
 8013846:	430a      	orrs	r2, r1
 8013848:	62da      	str	r2, [r3, #44]	@ 0x2c
 801384a:	4b6d      	ldr	r3, [pc, #436]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 801384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801384e:	2201      	movs	r2, #1
 8013850:	4013      	ands	r3, r2
 8013852:	617b      	str	r3, [r7, #20]
 8013854:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013856:	211c      	movs	r1, #28
 8013858:	187b      	adds	r3, r7, r1
 801385a:	22c0      	movs	r2, #192	@ 0xc0
 801385c:	00d2      	lsls	r2, r2, #3
 801385e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013860:	187b      	adds	r3, r7, r1
 8013862:	2202      	movs	r2, #2
 8013864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013866:	187b      	adds	r3, r7, r1
 8013868:	2200      	movs	r2, #0
 801386a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801386c:	187b      	adds	r3, r7, r1
 801386e:	2203      	movs	r2, #3
 8013870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013872:	187b      	adds	r3, r7, r1
 8013874:	2204      	movs	r2, #4
 8013876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013878:	187a      	adds	r2, r7, r1
 801387a:	23a0      	movs	r3, #160	@ 0xa0
 801387c:	05db      	lsls	r3, r3, #23
 801387e:	0011      	movs	r1, r2
 8013880:	0018      	movs	r0, r3
 8013882:	f001 ff59 	bl	8015738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013886:	2200      	movs	r2, #0
 8013888:	2100      	movs	r1, #0
 801388a:	201b      	movs	r0, #27
 801388c:	f001 fb02 	bl	8014e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013890:	201b      	movs	r0, #27
 8013892:	f001 fb14 	bl	8014ebe <HAL_NVIC_EnableIRQ>
}
 8013896:	e0ac      	b.n	80139f2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a5b      	ldr	r2, [pc, #364]	@ (8013a0c <HAL_UART_MspInit+0x25c>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d000      	beq.n	80138a4 <HAL_UART_MspInit+0xf4>
 80138a2:	e0a6      	b.n	80139f2 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 80138a4:	4b56      	ldr	r3, [pc, #344]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80138a8:	4b55      	ldr	r3, [pc, #340]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138aa:	2180      	movs	r1, #128	@ 0x80
 80138ac:	0309      	lsls	r1, r1, #12
 80138ae:	430a      	orrs	r2, r1
 80138b0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80138b2:	4b53      	ldr	r3, [pc, #332]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138b6:	4b52      	ldr	r3, [pc, #328]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138b8:	2101      	movs	r1, #1
 80138ba:	430a      	orrs	r2, r1
 80138bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80138be:	4b50      	ldr	r3, [pc, #320]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138c2:	2201      	movs	r2, #1
 80138c4:	4013      	ands	r3, r2
 80138c6:	613b      	str	r3, [r7, #16]
 80138c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80138ca:	4b4d      	ldr	r3, [pc, #308]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138ce:	4b4c      	ldr	r3, [pc, #304]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138d0:	2104      	movs	r1, #4
 80138d2:	430a      	orrs	r2, r1
 80138d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80138d6:	4b4a      	ldr	r3, [pc, #296]	@ (8013a00 <HAL_UART_MspInit+0x250>)
 80138d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138da:	2204      	movs	r2, #4
 80138dc:	4013      	ands	r3, r2
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80138e2:	241c      	movs	r4, #28
 80138e4:	193b      	adds	r3, r7, r4
 80138e6:	2202      	movs	r2, #2
 80138e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138ea:	193b      	adds	r3, r7, r4
 80138ec:	2202      	movs	r2, #2
 80138ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138f0:	193b      	adds	r3, r7, r4
 80138f2:	2200      	movs	r2, #0
 80138f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138f6:	193b      	adds	r3, r7, r4
 80138f8:	2203      	movs	r2, #3
 80138fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80138fc:	193b      	adds	r3, r7, r4
 80138fe:	2206      	movs	r2, #6
 8013900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013902:	193a      	adds	r2, r7, r4
 8013904:	23a0      	movs	r3, #160	@ 0xa0
 8013906:	05db      	lsls	r3, r3, #23
 8013908:	0011      	movs	r1, r2
 801390a:	0018      	movs	r0, r3
 801390c:	f001 ff14 	bl	8015738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013910:	0021      	movs	r1, r4
 8013912:	187b      	adds	r3, r7, r1
 8013914:	2280      	movs	r2, #128	@ 0x80
 8013916:	00d2      	lsls	r2, r2, #3
 8013918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801391a:	187b      	adds	r3, r7, r1
 801391c:	2202      	movs	r2, #2
 801391e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013920:	187b      	adds	r3, r7, r1
 8013922:	2200      	movs	r2, #0
 8013924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013926:	187b      	adds	r3, r7, r1
 8013928:	2203      	movs	r2, #3
 801392a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801392c:	187b      	adds	r3, r7, r1
 801392e:	2206      	movs	r2, #6
 8013930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013932:	187b      	adds	r3, r7, r1
 8013934:	4a33      	ldr	r2, [pc, #204]	@ (8013a04 <HAL_UART_MspInit+0x254>)
 8013936:	0019      	movs	r1, r3
 8013938:	0010      	movs	r0, r2
 801393a:	f001 fefd 	bl	8015738 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 801393e:	4b34      	ldr	r3, [pc, #208]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013940:	4a34      	ldr	r2, [pc, #208]	@ (8013a14 <HAL_UART_MspInit+0x264>)
 8013942:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013944:	4b32      	ldr	r3, [pc, #200]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013946:	220c      	movs	r2, #12
 8013948:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801394a:	4b31      	ldr	r3, [pc, #196]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 801394c:	2200      	movs	r2, #0
 801394e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013950:	4b2f      	ldr	r3, [pc, #188]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013952:	2200      	movs	r2, #0
 8013954:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013956:	4b2e      	ldr	r3, [pc, #184]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013958:	2280      	movs	r2, #128	@ 0x80
 801395a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801395c:	4b2c      	ldr	r3, [pc, #176]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 801395e:	2200      	movs	r2, #0
 8013960:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013962:	4b2b      	ldr	r3, [pc, #172]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013964:	2200      	movs	r2, #0
 8013966:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013968:	4b29      	ldr	r3, [pc, #164]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 801396a:	2220      	movs	r2, #32
 801396c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 801396e:	4b28      	ldr	r3, [pc, #160]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013970:	2200      	movs	r2, #0
 8013972:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013974:	4b26      	ldr	r3, [pc, #152]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013976:	0018      	movs	r0, r3
 8013978:	f001 fac2 	bl	8014f00 <HAL_DMA_Init>
 801397c:	1e03      	subs	r3, r0, #0
 801397e:	d001      	beq.n	8013984 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013980:	f7f9 fb7e 	bl	800d080 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4a22      	ldr	r2, [pc, #136]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 8013988:	675a      	str	r2, [r3, #116]	@ 0x74
 801398a:	4b21      	ldr	r3, [pc, #132]	@ (8013a10 <HAL_UART_MspInit+0x260>)
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013990:	4b21      	ldr	r3, [pc, #132]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 8013992:	4a22      	ldr	r2, [pc, #136]	@ (8013a1c <HAL_UART_MspInit+0x26c>)
 8013994:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013996:	4b20      	ldr	r3, [pc, #128]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 8013998:	220c      	movs	r2, #12
 801399a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801399c:	4b1e      	ldr	r3, [pc, #120]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 801399e:	2210      	movs	r2, #16
 80139a0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80139a2:	4b1d      	ldr	r3, [pc, #116]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80139a8:	4b1b      	ldr	r3, [pc, #108]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139aa:	2280      	movs	r2, #128	@ 0x80
 80139ac:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80139ae:	4b1a      	ldr	r3, [pc, #104]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80139b4:	4b18      	ldr	r3, [pc, #96]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80139ba:	4b17      	ldr	r3, [pc, #92]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139bc:	2200      	movs	r2, #0
 80139be:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80139c0:	4b15      	ldr	r3, [pc, #84]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80139c6:	4b14      	ldr	r3, [pc, #80]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139c8:	0018      	movs	r0, r3
 80139ca:	f001 fa99 	bl	8014f00 <HAL_DMA_Init>
 80139ce:	1e03      	subs	r3, r0, #0
 80139d0:	d001      	beq.n	80139d6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 80139d2:	f7f9 fb55 	bl	800d080 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4a0f      	ldr	r2, [pc, #60]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139da:	671a      	str	r2, [r3, #112]	@ 0x70
 80139dc:	4b0e      	ldr	r3, [pc, #56]	@ (8013a18 <HAL_UART_MspInit+0x268>)
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80139e2:	2200      	movs	r2, #0
 80139e4:	2100      	movs	r1, #0
 80139e6:	200e      	movs	r0, #14
 80139e8:	f001 fa54 	bl	8014e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80139ec:	200e      	movs	r0, #14
 80139ee:	f001 fa66 	bl	8014ebe <HAL_NVIC_EnableIRQ>
}
 80139f2:	46c0      	nop			@ (mov r8, r8)
 80139f4:	46bd      	mov	sp, r7
 80139f6:	b00d      	add	sp, #52	@ 0x34
 80139f8:	bd90      	pop	{r4, r7, pc}
 80139fa:	46c0      	nop			@ (mov r8, r8)
 80139fc:	40004800 	.word	0x40004800
 8013a00:	40021000 	.word	0x40021000
 8013a04:	50000800 	.word	0x50000800
 8013a08:	40013800 	.word	0x40013800
 8013a0c:	40004c00 	.word	0x40004c00
 8013a10:	200022b0 	.word	0x200022b0
 8013a14:	4002006c 	.word	0x4002006c
 8013a18:	200022f8 	.word	0x200022f8
 8013a1c:	40020080 	.word	0x40020080

08013a20 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b086      	sub	sp, #24
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013a28:	f000 fd90 	bl	801454c <HAL_GetTick>
 8013a2c:	0003      	movs	r3, r0
 8013a2e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013a30:	4b1c      	ldr	r3, [pc, #112]	@ (8013aa4 <TimestampIsReached+0x84>)
 8013a32:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013a34:	697a      	ldr	r2, [r7, #20]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d307      	bcc.n	8013a4c <TimestampIsReached+0x2c>
 8013a3c:	697a      	ldr	r2, [r7, #20]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	693a      	ldr	r2, [r7, #16]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d901      	bls.n	8013a4c <TimestampIsReached+0x2c>
 8013a48:	2201      	movs	r2, #1
 8013a4a:	e000      	b.n	8013a4e <TimestampIsReached+0x2e>
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	230f      	movs	r3, #15
 8013a50:	18fb      	adds	r3, r7, r3
 8013a52:	701a      	strb	r2, [r3, #0]
 8013a54:	781a      	ldrb	r2, [r3, #0]
 8013a56:	2101      	movs	r1, #1
 8013a58:	400a      	ands	r2, r1
 8013a5a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013a5c:	697a      	ldr	r2, [r7, #20]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d207      	bcs.n	8013a74 <TimestampIsReached+0x54>
 8013a64:	687a      	ldr	r2, [r7, #4]
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	693a      	ldr	r2, [r7, #16]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d201      	bcs.n	8013a74 <TimestampIsReached+0x54>
 8013a70:	2201      	movs	r2, #1
 8013a72:	e000      	b.n	8013a76 <TimestampIsReached+0x56>
 8013a74:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013a76:	200e      	movs	r0, #14
 8013a78:	183b      	adds	r3, r7, r0
 8013a7a:	701a      	strb	r2, [r3, #0]
 8013a7c:	781a      	ldrb	r2, [r3, #0]
 8013a7e:	2101      	movs	r1, #1
 8013a80:	400a      	ands	r2, r1
 8013a82:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013a84:	230f      	movs	r3, #15
 8013a86:	18fb      	adds	r3, r7, r3
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d103      	bne.n	8013a96 <TimestampIsReached+0x76>
 8013a8e:	183b      	adds	r3, r7, r0
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d001      	beq.n	8013a9a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013a96:	2301      	movs	r3, #1
 8013a98:	e000      	b.n	8013a9c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013a9a:	2300      	movs	r3, #0
}
 8013a9c:	0018      	movs	r0, r3
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	b006      	add	sp, #24
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	7fffffff 	.word	0x7fffffff

08013aa8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013ab0:	f000 fd4c 	bl	801454c <HAL_GetTick>
 8013ab4:	0002      	movs	r2, r0
 8013ab6:	4904      	ldr	r1, [pc, #16]	@ (8013ac8 <AddTimestamp+0x20>)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	0018      	movs	r0, r3
 8013abc:	f012 f990 	bl	8025de0 <siprintf>
}
 8013ac0:	46c0      	nop			@ (mov r8, r8)
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	b002      	add	sp, #8
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	0802d9d4 	.word	0x0802d9d4

08013acc <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013acc:	b40c      	push	{r2, r3}
 8013ace:	b5b0      	push	{r4, r5, r7, lr}
 8013ad0:	b0a4      	sub	sp, #144	@ 0x90
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	0002      	movs	r2, r0
 8013ad6:	6039      	str	r1, [r7, #0]
 8013ad8:	1dfb      	adds	r3, r7, #7
 8013ada:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013adc:	4b23      	ldr	r3, [pc, #140]	@ (8013b6c <CreateLine+0xa0>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	1dfa      	adds	r2, r7, #7
 8013ae2:	7812      	ldrb	r2, [r2, #0]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d839      	bhi.n	8013b5c <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	4921      	ldr	r1, [pc, #132]	@ (8013b70 <CreateLine+0xa4>)
 8013aec:	240c      	movs	r4, #12
 8013aee:	193b      	adds	r3, r7, r4
 8013af0:	0018      	movs	r0, r3
 8013af2:	f012 f975 	bl	8025de0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8013af6:	4b1d      	ldr	r3, [pc, #116]	@ (8013b6c <CreateLine+0xa0>)
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d909      	bls.n	8013b12 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013afe:	193b      	adds	r3, r7, r4
 8013b00:	0018      	movs	r0, r3
 8013b02:	f7ec fb33 	bl	800016c <strlen>
 8013b06:	0002      	movs	r2, r0
 8013b08:	193b      	adds	r3, r7, r4
 8013b0a:	189b      	adds	r3, r3, r2
 8013b0c:	0018      	movs	r0, r3
 8013b0e:	f7ff ffcb 	bl	8013aa8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8013b12:	240c      	movs	r4, #12
 8013b14:	193b      	adds	r3, r7, r4
 8013b16:	0018      	movs	r0, r3
 8013b18:	f7ec fb28 	bl	800016c <strlen>
 8013b1c:	0003      	movs	r3, r0
 8013b1e:	218c      	movs	r1, #140	@ 0x8c
 8013b20:	187a      	adds	r2, r7, r1
 8013b22:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013b24:	239c      	movs	r3, #156	@ 0x9c
 8013b26:	2508      	movs	r5, #8
 8013b28:	195b      	adds	r3, r3, r5
 8013b2a:	19db      	adds	r3, r3, r7
 8013b2c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8013b2e:	193a      	adds	r2, r7, r4
 8013b30:	187b      	adds	r3, r7, r1
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	18d0      	adds	r0, r2, r3
 8013b36:	187b      	adds	r3, r7, r1
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2280      	movs	r2, #128	@ 0x80
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	0019      	movs	r1, r3
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	2298      	movs	r2, #152	@ 0x98
 8013b44:	1952      	adds	r2, r2, r5
 8013b46:	19d2      	adds	r2, r2, r7
 8013b48:	6812      	ldr	r2, [r2, #0]
 8013b4a:	f012 f9e5 	bl	8025f18 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8013b4e:	193a      	adds	r2, r7, r4
 8013b50:	4b08      	ldr	r3, [pc, #32]	@ (8013b74 <CreateLine+0xa8>)
 8013b52:	0011      	movs	r1, r2
 8013b54:	0018      	movs	r0, r3
 8013b56:	f012 f8d3 	bl	8025d00 <iprintf>
 8013b5a:	e000      	b.n	8013b5e <CreateLine+0x92>
    return;
 8013b5c:	46c0      	nop			@ (mov r8, r8)
}
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	b024      	add	sp, #144	@ 0x90
 8013b62:	bcb0      	pop	{r4, r5, r7}
 8013b64:	bc08      	pop	{r3}
 8013b66:	b002      	add	sp, #8
 8013b68:	4718      	bx	r3
 8013b6a:	46c0      	nop			@ (mov r8, r8)
 8013b6c:	200000f0 	.word	0x200000f0
 8013b70:	0802d9e0 	.word	0x0802d9e0
 8013b74:	0802d9e4 	.word	0x0802d9e4

08013b78 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b084      	sub	sp, #16
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	68b9      	ldr	r1, [r7, #8]
 8013b8a:	4804      	ldr	r0, [pc, #16]	@ (8013b9c <_write+0x24>)
 8013b8c:	2364      	movs	r3, #100	@ 0x64
 8013b8e:	f009 fa33 	bl	801cff8 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8013b92:	687b      	ldr	r3, [r7, #4]
}
 8013b94:	0018      	movs	r0, r3
 8013b96:	46bd      	mov	sp, r7
 8013b98:	b004      	add	sp, #16
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	20002140 	.word	0x20002140

08013ba0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	0002      	movs	r2, r0
 8013ba8:	1dfb      	adds	r3, r7, #7
 8013baa:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013bac:	4b03      	ldr	r3, [pc, #12]	@ (8013bbc <SetVerboseLevel+0x1c>)
 8013bae:	1dfa      	adds	r2, r7, #7
 8013bb0:	7812      	ldrb	r2, [r2, #0]
 8013bb2:	701a      	strb	r2, [r3, #0]
}
 8013bb4:	46c0      	nop			@ (mov r8, r8)
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	b002      	add	sp, #8
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	200000f0 	.word	0x200000f0

08013bc0 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8013bc4:	4b02      	ldr	r3, [pc, #8]	@ (8013bd0 <GetVerboseLevel+0x10>)
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	0018      	movs	r0, r3
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	46c0      	nop			@ (mov r8, r8)
 8013bd0:	200000f0 	.word	0x200000f0

08013bd4 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8013bda:	4a0f      	ldr	r2, [pc, #60]	@ (8013c18 <BinaryReleaseInfo+0x44>)
 8013bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8013c1c <BinaryReleaseInfo+0x48>)
 8013bde:	0019      	movs	r1, r3
 8013be0:	2002      	movs	r0, #2
 8013be2:	f7ff ff73 	bl	8013acc <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8013be6:	480e      	ldr	r0, [pc, #56]	@ (8013c20 <BinaryReleaseInfo+0x4c>)
 8013be8:	4a0e      	ldr	r2, [pc, #56]	@ (8013c24 <BinaryReleaseInfo+0x50>)
 8013bea:	490c      	ldr	r1, [pc, #48]	@ (8013c1c <BinaryReleaseInfo+0x48>)
 8013bec:	4b0e      	ldr	r3, [pc, #56]	@ (8013c28 <BinaryReleaseInfo+0x54>)
 8013bee:	9300      	str	r3, [sp, #0]
 8013bf0:	0003      	movs	r3, r0
 8013bf2:	2002      	movs	r0, #2
 8013bf4:	f7ff ff6a 	bl	8013acc <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8013c2c <BinaryReleaseInfo+0x58>)
 8013bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8013c30 <BinaryReleaseInfo+0x5c>)
 8013bfc:	4907      	ldr	r1, [pc, #28]	@ (8013c1c <BinaryReleaseInfo+0x48>)
 8013bfe:	2002      	movs	r0, #2
 8013c00:	f7ff ff64 	bl	8013acc <CreateLine>
#ifdef DEBUG
  Info("Software version: %s, Debug build", SRC_VERSION);
 8013c04:	4b0b      	ldr	r3, [pc, #44]	@ (8013c34 <BinaryReleaseInfo+0x60>)
 8013c06:	4a0c      	ldr	r2, [pc, #48]	@ (8013c38 <BinaryReleaseInfo+0x64>)
 8013c08:	4904      	ldr	r1, [pc, #16]	@ (8013c1c <BinaryReleaseInfo+0x48>)
 8013c0a:	2002      	movs	r0, #2
 8013c0c:	f7ff ff5e 	bl	8013acc <CreateLine>
#else
  Info("Software version: %s, Release build", SRC_VERSION);
#endif
}
 8013c10:	46c0      	nop			@ (mov r8, r8)
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	46c0      	nop			@ (mov r8, r8)
 8013c18:	0802d9ec 	.word	0x0802d9ec
 8013c1c:	0802da18 	.word	0x0802da18
 8013c20:	0802da1c 	.word	0x0802da1c
 8013c24:	0802da28 	.word	0x0802da28
 8013c28:	0802da3c 	.word	0x0802da3c
 8013c2c:	0802da48 	.word	0x0802da48
 8013c30:	0802da54 	.word	0x0802da54
 8013c34:	0802da5c 	.word	0x0802da5c
 8013c38:	0802da64 	.word	0x0802da64

08013c3c <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	60b9      	str	r1, [r7, #8]
 8013c46:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	68f9      	ldr	r1, [r7, #12]
 8013c4e:	4803      	ldr	r0, [pc, #12]	@ (8013c5c <errorHandler+0x20>)
 8013c50:	f012 f856 	bl	8025d00 <iprintf>
//    while (true)
//    {
//    }
}
 8013c54:	46c0      	nop			@ (mov r8, r8)
 8013c56:	46bd      	mov	sp, r7
 8013c58:	b004      	add	sp, #16
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	0802da88 	.word	0x0802da88

08013c60 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013c60:	b590      	push	{r4, r7, lr}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6039      	str	r1, [r7, #0]
 8013c68:	0011      	movs	r1, r2
 8013c6a:	1dfb      	adds	r3, r7, #7
 8013c6c:	1c02      	adds	r2, r0, #0
 8013c6e:	701a      	strb	r2, [r3, #0]
 8013c70:	1dbb      	adds	r3, r7, #6
 8013c72:	1c0a      	adds	r2, r1, #0
 8013c74:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8013c76:	4b0a      	ldr	r3, [pc, #40]	@ (8013ca0 <ReadRegister+0x40>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d00a      	beq.n	8013c94 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8013c7e:	4b08      	ldr	r3, [pc, #32]	@ (8013ca0 <ReadRegister+0x40>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	1dba      	adds	r2, r7, #6
 8013c84:	7814      	ldrb	r4, [r2, #0]
 8013c86:	6839      	ldr	r1, [r7, #0]
 8013c88:	1dfa      	adds	r2, r7, #7
 8013c8a:	7810      	ldrb	r0, [r2, #0]
 8013c8c:	0022      	movs	r2, r4
 8013c8e:	4798      	blx	r3
 8013c90:	0003      	movs	r3, r0
 8013c92:	e000      	b.n	8013c96 <ReadRegister+0x36>
	}
	return false;
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	0018      	movs	r0, r3
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	b003      	add	sp, #12
 8013c9c:	bd90      	pop	{r4, r7, pc}
 8013c9e:	46c0      	nop			@ (mov r8, r8)
 8013ca0:	20002348 	.word	0x20002348

08013ca4 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013ca4:	b590      	push	{r4, r7, lr}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6039      	str	r1, [r7, #0]
 8013cac:	0011      	movs	r1, r2
 8013cae:	1dfb      	adds	r3, r7, #7
 8013cb0:	1c02      	adds	r2, r0, #0
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	1dbb      	adds	r3, r7, #6
 8013cb6:	1c0a      	adds	r2, r1, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8013cba:	4b0a      	ldr	r3, [pc, #40]	@ (8013ce4 <WriteRegister+0x40>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00a      	beq.n	8013cd8 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8013cc2:	4b08      	ldr	r3, [pc, #32]	@ (8013ce4 <WriteRegister+0x40>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	1dba      	adds	r2, r7, #6
 8013cc8:	7814      	ldrb	r4, [r2, #0]
 8013cca:	6839      	ldr	r1, [r7, #0]
 8013ccc:	1dfa      	adds	r2, r7, #7
 8013cce:	7810      	ldrb	r0, [r2, #0]
 8013cd0:	0022      	movs	r2, r4
 8013cd2:	4798      	blx	r3
 8013cd4:	0003      	movs	r3, r0
 8013cd6:	e000      	b.n	8013cda <WriteRegister+0x36>
  }
  return false;
 8013cd8:	2300      	movs	r3, #0
}
 8013cda:	0018      	movs	r0, r3
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	b003      	add	sp, #12
 8013ce0:	bd90      	pop	{r4, r7, pc}
 8013ce2:	46c0      	nop			@ (mov r8, r8)
 8013ce4:	2000234c 	.word	0x2000234c

08013ce8 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	000a      	movs	r2, r1
 8013cf2:	1cfb      	adds	r3, r7, #3
 8013cf4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8013cf6:	230f      	movs	r3, #15
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	22ff      	movs	r2, #255	@ 0xff
 8013cfc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8013cfe:	230e      	movs	r3, #14
 8013d00:	18fb      	adds	r3, r7, r3
 8013d02:	2200      	movs	r2, #0
 8013d04:	701a      	strb	r2, [r3, #0]
 8013d06:	e038      	b.n	8013d7a <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8013d08:	230e      	movs	r3, #14
 8013d0a:	18fb      	adds	r3, r7, r3
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	18d3      	adds	r3, r2, r3
 8013d12:	7819      	ldrb	r1, [r3, #0]
 8013d14:	220f      	movs	r2, #15
 8013d16:	18bb      	adds	r3, r7, r2
 8013d18:	18ba      	adds	r2, r7, r2
 8013d1a:	7812      	ldrb	r2, [r2, #0]
 8013d1c:	404a      	eors	r2, r1
 8013d1e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8013d20:	230d      	movs	r3, #13
 8013d22:	18fb      	adds	r3, r7, r3
 8013d24:	2200      	movs	r2, #0
 8013d26:	701a      	strb	r2, [r3, #0]
 8013d28:	e01c      	b.n	8013d64 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8013d2a:	210f      	movs	r1, #15
 8013d2c:	187b      	adds	r3, r7, r1
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	b25b      	sxtb	r3, r3
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	da0a      	bge.n	8013d4c <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	b25b      	sxtb	r3, r3
 8013d3c:	18db      	adds	r3, r3, r3
 8013d3e:	b25b      	sxtb	r3, r3
 8013d40:	2231      	movs	r2, #49	@ 0x31
 8013d42:	4053      	eors	r3, r2
 8013d44:	b25a      	sxtb	r2, r3
 8013d46:	187b      	adds	r3, r7, r1
 8013d48:	701a      	strb	r2, [r3, #0]
 8013d4a:	e005      	b.n	8013d58 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8013d4c:	230f      	movs	r3, #15
 8013d4e:	18fa      	adds	r2, r7, r3
 8013d50:	18fb      	adds	r3, r7, r3
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	18db      	adds	r3, r3, r3
 8013d56:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8013d58:	210d      	movs	r1, #13
 8013d5a:	187b      	adds	r3, r7, r1
 8013d5c:	781a      	ldrb	r2, [r3, #0]
 8013d5e:	187b      	adds	r3, r7, r1
 8013d60:	3201      	adds	r2, #1
 8013d62:	701a      	strb	r2, [r3, #0]
 8013d64:	230d      	movs	r3, #13
 8013d66:	18fb      	adds	r3, r7, r3
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	2b07      	cmp	r3, #7
 8013d6c:	d9dd      	bls.n	8013d2a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8013d6e:	210e      	movs	r1, #14
 8013d70:	187b      	adds	r3, r7, r1
 8013d72:	781a      	ldrb	r2, [r3, #0]
 8013d74:	187b      	adds	r3, r7, r1
 8013d76:	3201      	adds	r2, #1
 8013d78:	701a      	strb	r2, [r3, #0]
 8013d7a:	230e      	movs	r3, #14
 8013d7c:	18fa      	adds	r2, r7, r3
 8013d7e:	1cfb      	adds	r3, r7, #3
 8013d80:	7812      	ldrb	r2, [r2, #0]
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d3bf      	bcc.n	8013d08 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8013d88:	230f      	movs	r3, #15
 8013d8a:	18fb      	adds	r3, r7, r3
 8013d8c:	781b      	ldrb	r3, [r3, #0]
}
 8013d8e:	0018      	movs	r0, r3
 8013d90:	46bd      	mov	sp, r7
 8013d92:	b004      	add	sp, #16
 8013d94:	bd80      	pop	{r7, pc}
	...

08013d98 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8013d98:	b5b0      	push	{r4, r5, r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	1c18      	adds	r0, r3, #0
 8013da8:	f7ef fd74 	bl	8003894 <__aeabi_f2d>
 8013dac:	4a2e      	ldr	r2, [pc, #184]	@ (8013e68 <HIDS_DewPointCalculation+0xd0>)
 8013dae:	4b2f      	ldr	r3, [pc, #188]	@ (8013e6c <HIDS_DewPointCalculation+0xd4>)
 8013db0:	f7ee fdd0 	bl	8002954 <__aeabi_dmul>
 8013db4:	0002      	movs	r2, r0
 8013db6:	000b      	movs	r3, r1
 8013db8:	0014      	movs	r4, r2
 8013dba:	001d      	movs	r5, r3
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	1c18      	adds	r0, r3, #0
 8013dc2:	f7ef fd67 	bl	8003894 <__aeabi_f2d>
 8013dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8013e70 <HIDS_DewPointCalculation+0xd8>)
 8013dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8013e74 <HIDS_DewPointCalculation+0xdc>)
 8013dca:	f7ed fdc3 	bl	8001954 <__aeabi_dadd>
 8013dce:	0002      	movs	r2, r0
 8013dd0:	000b      	movs	r3, r1
 8013dd2:	0020      	movs	r0, r4
 8013dd4:	0029      	movs	r1, r5
 8013dd6:	f7ee f983 	bl	80020e0 <__aeabi_ddiv>
 8013dda:	0002      	movs	r2, r0
 8013ddc:	000b      	movs	r3, r1
 8013dde:	0014      	movs	r4, r2
 8013de0:	001d      	movs	r5, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	1c18      	adds	r0, r3, #0
 8013de8:	f7ef fd54 	bl	8003894 <__aeabi_f2d>
 8013dec:	2200      	movs	r2, #0
 8013dee:	4b22      	ldr	r3, [pc, #136]	@ (8013e78 <HIDS_DewPointCalculation+0xe0>)
 8013df0:	f7ee f976 	bl	80020e0 <__aeabi_ddiv>
 8013df4:	0002      	movs	r2, r0
 8013df6:	000b      	movs	r3, r1
 8013df8:	0010      	movs	r0, r2
 8013dfa:	0019      	movs	r1, r3
 8013dfc:	f014 feea 	bl	8028bd4 <log>
 8013e00:	0002      	movs	r2, r0
 8013e02:	000b      	movs	r3, r1
 8013e04:	0020      	movs	r0, r4
 8013e06:	0029      	movs	r1, r5
 8013e08:	f7ed fda4 	bl	8001954 <__aeabi_dadd>
 8013e0c:	0002      	movs	r2, r0
 8013e0e:	000b      	movs	r3, r1
 8013e10:	0010      	movs	r0, r2
 8013e12:	0019      	movs	r1, r3
 8013e14:	f7ef fd86 	bl	8003924 <__aeabi_d2f>
 8013e18:	1c03      	adds	r3, r0, #0
 8013e1a:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7ef fd39 	bl	8003894 <__aeabi_f2d>
 8013e22:	4a13      	ldr	r2, [pc, #76]	@ (8013e70 <HIDS_DewPointCalculation+0xd8>)
 8013e24:	4b13      	ldr	r3, [pc, #76]	@ (8013e74 <HIDS_DewPointCalculation+0xdc>)
 8013e26:	f7ee fd95 	bl	8002954 <__aeabi_dmul>
 8013e2a:	0002      	movs	r2, r0
 8013e2c:	000b      	movs	r3, r1
 8013e2e:	0014      	movs	r4, r2
 8013e30:	001d      	movs	r5, r3
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f7ef fd2e 	bl	8003894 <__aeabi_f2d>
 8013e38:	0002      	movs	r2, r0
 8013e3a:	000b      	movs	r3, r1
 8013e3c:	480a      	ldr	r0, [pc, #40]	@ (8013e68 <HIDS_DewPointCalculation+0xd0>)
 8013e3e:	490b      	ldr	r1, [pc, #44]	@ (8013e6c <HIDS_DewPointCalculation+0xd4>)
 8013e40:	f7ef f86e 	bl	8002f20 <__aeabi_dsub>
 8013e44:	0002      	movs	r2, r0
 8013e46:	000b      	movs	r3, r1
 8013e48:	0020      	movs	r0, r4
 8013e4a:	0029      	movs	r1, r5
 8013e4c:	f7ee f948 	bl	80020e0 <__aeabi_ddiv>
 8013e50:	0002      	movs	r2, r0
 8013e52:	000b      	movs	r3, r1
 8013e54:	0010      	movs	r0, r2
 8013e56:	0019      	movs	r1, r3
 8013e58:	f7ef fd64 	bl	8003924 <__aeabi_d2f>
 8013e5c:	1c03      	adds	r3, r0, #0
}
 8013e5e:	1c18      	adds	r0, r3, #0
 8013e60:	46bd      	mov	sp, r7
 8013e62:	b004      	add	sp, #16
 8013e64:	bdb0      	pop	{r4, r5, r7, pc}
 8013e66:	46c0      	nop			@ (mov r8, r8)
 8013e68:	b851eb85 	.word	0xb851eb85
 8013e6c:	4031451e 	.word	0x4031451e
 8013e70:	66666666 	.word	0x66666666
 8013e74:	406db666 	.word	0x406db666
 8013e78:	40590000 	.word	0x40590000

08013e7c <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8013e82:	4b0d      	ldr	r3, [pc, #52]	@ (8013eb8 <HIDS_EnableHeater+0x3c>)
 8013e84:	781a      	ldrb	r2, [r3, #0]
 8013e86:	1dfb      	adds	r3, r7, #7
 8013e88:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8013e8a:	1dfb      	adds	r3, r7, #7
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	0019      	movs	r1, r3
 8013e90:	2044      	movs	r0, #68	@ 0x44
 8013e92:	f7ff ff07 	bl	8013ca4 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8013e96:	1dfb      	adds	r3, r7, #7
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	4a08      	ldr	r2, [pc, #32]	@ (8013ebc <HIDS_EnableHeater+0x40>)
 8013e9c:	4908      	ldr	r1, [pc, #32]	@ (8013ec0 <HIDS_EnableHeater+0x44>)
 8013e9e:	2002      	movs	r0, #2
 8013ea0:	f7ff fe14 	bl	8013acc <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8013ea4:	f7f6 f846 	bl	8009f34 <getPosixTime>
 8013ea8:	0002      	movs	r2, r0
 8013eaa:	4b06      	ldr	r3, [pc, #24]	@ (8013ec4 <HIDS_EnableHeater+0x48>)
 8013eac:	601a      	str	r2, [r3, #0]
}
 8013eae:	46c0      	nop			@ (mov r8, r8)
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	b002      	add	sp, #8
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	46c0      	nop			@ (mov r8, r8)
 8013eb8:	200000f1 	.word	0x200000f1
 8013ebc:	0802dab0 	.word	0x0802dab0
 8013ec0:	0802dad0 	.word	0x0802dad0
 8013ec4:	20002360 	.word	0x20002360

08013ec8 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8013ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8013efc <HIDS_Init+0x34>)
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8013ed8:	4b09      	ldr	r3, [pc, #36]	@ (8013f00 <HIDS_Init+0x38>)
 8013eda:	683a      	ldr	r2, [r7, #0]
 8013edc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8013ede:	4b09      	ldr	r3, [pc, #36]	@ (8013f04 <HIDS_Init+0x3c>)
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	0018      	movs	r0, r3
 8013ee4:	f000 f840 	bl	8013f68 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8013ee8:	4b07      	ldr	r3, [pc, #28]	@ (8013f08 <HIDS_Init+0x40>)
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	0018      	movs	r0, r3
 8013eee:	f000 f82b 	bl	8013f48 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8013ef2:	46c0      	nop			@ (mov r8, r8)
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	b002      	add	sp, #8
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	46c0      	nop			@ (mov r8, r8)
 8013efc:	20002348 	.word	0x20002348
 8013f00:	2000234c 	.word	0x2000234c
 8013f04:	200000f2 	.word	0x200000f2
 8013f08:	200000f1 	.word	0x200000f1

08013f0c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8013f10:	f000 fb1c 	bl	801454c <HAL_GetTick>
 8013f14:	0002      	movs	r2, r0
 8013f16:	4b08      	ldr	r3, [pc, #32]	@ (8013f38 <HIDS_StartMeasurement+0x2c>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	18d2      	adds	r2, r2, r3
 8013f1c:	4b07      	ldr	r3, [pc, #28]	@ (8013f3c <HIDS_StartMeasurement+0x30>)
 8013f1e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8013f20:	4b07      	ldr	r3, [pc, #28]	@ (8013f40 <HIDS_StartMeasurement+0x34>)
 8013f22:	2201      	movs	r2, #1
 8013f24:	0019      	movs	r1, r3
 8013f26:	2044      	movs	r0, #68	@ 0x44
 8013f28:	f7ff febc 	bl	8013ca4 <WriteRegister>
  MeasurementDone = false;
 8013f2c:	4b05      	ldr	r3, [pc, #20]	@ (8013f44 <HIDS_StartMeasurement+0x38>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	701a      	strb	r2, [r3, #0]
}
 8013f32:	46c0      	nop			@ (mov r8, r8)
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	200000f8 	.word	0x200000f8
 8013f3c:	200000f4 	.word	0x200000f4
 8013f40:	200000f2 	.word	0x200000f2
 8013f44:	20002364 	.word	0x20002364

08013f48 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	0002      	movs	r2, r0
 8013f50:	1dfb      	adds	r3, r7, #7
 8013f52:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8013f54:	4b03      	ldr	r3, [pc, #12]	@ (8013f64 <HIDS_SetHeaterMode+0x1c>)
 8013f56:	1dfa      	adds	r2, r7, #7
 8013f58:	7812      	ldrb	r2, [r2, #0]
 8013f5a:	701a      	strb	r2, [r3, #0]
}
 8013f5c:	46c0      	nop			@ (mov r8, r8)
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	b002      	add	sp, #8
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	200000f1 	.word	0x200000f1

08013f68 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	0002      	movs	r2, r0
 8013f70:	1dfb      	adds	r3, r7, #7
 8013f72:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8013f74:	4b03      	ldr	r3, [pc, #12]	@ (8013f84 <HIDS_SetMeasurementMode+0x1c>)
 8013f76:	1dfa      	adds	r2, r7, #7
 8013f78:	7812      	ldrb	r2, [r2, #0]
 8013f7a:	701a      	strb	r2, [r3, #0]
}
 8013f7c:	46c0      	nop			@ (mov r8, r8)
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	b002      	add	sp, #8
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	200000f2 	.word	0x200000f2

08013f88 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8013f90:	f000 fadc 	bl	801454c <HAL_GetTick>
 8013f94:	0002      	movs	r2, r0
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	18d2      	adds	r2, r2, r3
 8013f9a:	4b03      	ldr	r3, [pc, #12]	@ (8013fa8 <setHIDSTimeStamp+0x20>)
 8013f9c:	601a      	str	r2, [r3, #0]
}
 8013f9e:	46c0      	nop			@ (mov r8, r8)
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	b002      	add	sp, #8
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	46c0      	nop			@ (mov r8, r8)
 8013fa8:	20002368 	.word	0x20002368

08013fac <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8013fac:	b590      	push	{r4, r7, lr}
 8013fae:	b085      	sub	sp, #20
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	781a      	ldrb	r2, [r3, #0]
 8013fb8:	210c      	movs	r1, #12
 8013fba:	187b      	adds	r3, r7, r1
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	785a      	ldrb	r2, [r3, #1]
 8013fc2:	187b      	adds	r3, r7, r1
 8013fc4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8013fc6:	240f      	movs	r4, #15
 8013fc8:	193b      	adds	r3, r7, r4
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	7892      	ldrb	r2, [r2, #2]
 8013fce:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8013fd0:	187b      	adds	r3, r7, r1
 8013fd2:	2102      	movs	r1, #2
 8013fd4:	0018      	movs	r0, r3
 8013fd6:	f7ff fe87 	bl	8013ce8 <CalculateCRC>
 8013fda:	0003      	movs	r3, r0
 8013fdc:	001a      	movs	r2, r3
 8013fde:	193b      	adds	r3, r7, r4
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	d007      	beq.n	8013ff6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8013fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8014050 <CheckCRC+0xa4>)
 8013fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8014054 <CheckCRC+0xa8>)
 8013fea:	0019      	movs	r1, r3
 8013fec:	2001      	movs	r0, #1
 8013fee:	f7ff fd6d 	bl	8013acc <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	e027      	b.n	8014046 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	78da      	ldrb	r2, [r3, #3]
 8013ffa:	2108      	movs	r1, #8
 8013ffc:	187b      	adds	r3, r7, r1
 8013ffe:	701a      	strb	r2, [r3, #0]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	791a      	ldrb	r2, [r3, #4]
 8014004:	187b      	adds	r3, r7, r1
 8014006:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014008:	240e      	movs	r4, #14
 801400a:	193b      	adds	r3, r7, r4
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	7952      	ldrb	r2, [r2, #5]
 8014010:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8014012:	187b      	adds	r3, r7, r1
 8014014:	2102      	movs	r1, #2
 8014016:	0018      	movs	r0, r3
 8014018:	f7ff fe66 	bl	8013ce8 <CalculateCRC>
 801401c:	0003      	movs	r3, r0
 801401e:	001a      	movs	r2, r3
 8014020:	193b      	adds	r3, r7, r4
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	4293      	cmp	r3, r2
 8014026:	d00d      	beq.n	8014044 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014028:	4a0b      	ldr	r2, [pc, #44]	@ (8014058 <CheckCRC+0xac>)
 801402a:	4b0a      	ldr	r3, [pc, #40]	@ (8014054 <CheckCRC+0xa8>)
 801402c:	0019      	movs	r1, r3
 801402e:	2001      	movs	r0, #1
 8014030:	f7ff fd4c 	bl	8013acc <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8014034:	4a09      	ldr	r2, [pc, #36]	@ (801405c <CheckCRC+0xb0>)
 8014036:	4b0a      	ldr	r3, [pc, #40]	@ (8014060 <CheckCRC+0xb4>)
 8014038:	2185      	movs	r1, #133	@ 0x85
 801403a:	0018      	movs	r0, r3
 801403c:	f7ff fdfe 	bl	8013c3c <errorHandler>
		return false;
 8014040:	2300      	movs	r3, #0
 8014042:	e000      	b.n	8014046 <CheckCRC+0x9a>
	}
	return true;
 8014044:	2301      	movs	r3, #1
}
 8014046:	0018      	movs	r0, r3
 8014048:	46bd      	mov	sp, r7
 801404a:	b005      	add	sp, #20
 801404c:	bd90      	pop	{r4, r7, pc}
 801404e:	46c0      	nop			@ (mov r8, r8)
 8014050:	0802dad4 	.word	0x0802dad4
 8014054:	0802dafc 	.word	0x0802dafc
 8014058:	0802db00 	.word	0x0802db00
 801405c:	0802db2c 	.word	0x0802db2c
 8014060:	0802e1f4 	.word	0x0802e1f4

08014064 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 801406a:	1dbb      	adds	r3, r7, #6
 801406c:	2289      	movs	r2, #137	@ 0x89
 801406e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8014070:	1dbb      	adds	r3, r7, #6
 8014072:	2201      	movs	r2, #1
 8014074:	0019      	movs	r1, r3
 8014076:	2044      	movs	r0, #68	@ 0x44
 8014078:	f7ff fe14 	bl	8013ca4 <WriteRegister>
	HAL_Delay(30);
 801407c:	201e      	movs	r0, #30
 801407e:	f000 fa6f 	bl	8014560 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8014082:	4b14      	ldr	r3, [pc, #80]	@ (80140d4 <HIDS_DeviceConnected+0x70>)
 8014084:	2206      	movs	r2, #6
 8014086:	0019      	movs	r1, r3
 8014088:	2044      	movs	r0, #68	@ 0x44
 801408a:	f7ff fde9 	bl	8013c60 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801408e:	1dfb      	adds	r3, r7, #7
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]
 8014094:	e011      	b.n	80140ba <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8014096:	1dfb      	adds	r3, r7, #7
 8014098:	7818      	ldrb	r0, [r3, #0]
 801409a:	1dfb      	adds	r3, r7, #7
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	4a0d      	ldr	r2, [pc, #52]	@ (80140d4 <HIDS_DeviceConnected+0x70>)
 80140a0:	5cd3      	ldrb	r3, [r2, r3]
 80140a2:	4a0d      	ldr	r2, [pc, #52]	@ (80140d8 <HIDS_DeviceConnected+0x74>)
 80140a4:	490d      	ldr	r1, [pc, #52]	@ (80140dc <HIDS_DeviceConnected+0x78>)
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	0003      	movs	r3, r0
 80140aa:	2002      	movs	r0, #2
 80140ac:	f7ff fd0e 	bl	8013acc <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80140b0:	1dfb      	adds	r3, r7, #7
 80140b2:	781a      	ldrb	r2, [r3, #0]
 80140b4:	1dfb      	adds	r3, r7, #7
 80140b6:	3201      	adds	r2, #1
 80140b8:	701a      	strb	r2, [r3, #0]
 80140ba:	1dfb      	adds	r3, r7, #7
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	2b05      	cmp	r3, #5
 80140c0:	d9e9      	bls.n	8014096 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80140c2:	4b04      	ldr	r3, [pc, #16]	@ (80140d4 <HIDS_DeviceConnected+0x70>)
 80140c4:	0018      	movs	r0, r3
 80140c6:	f7ff ff71 	bl	8013fac <CheckCRC>
 80140ca:	0003      	movs	r3, r0
}
 80140cc:	0018      	movs	r0, r3
 80140ce:	46bd      	mov	sp, r7
 80140d0:	b002      	add	sp, #8
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	20002350 	.word	0x20002350
 80140d8:	0802db44 	.word	0x0802db44
 80140dc:	0802dad0 	.word	0x0802dad0

080140e0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80140e0:	b580      	push	{r7, lr}
 80140e2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80140e4:	4b04      	ldr	r3, [pc, #16]	@ (80140f8 <HIDS_MeasurementReady+0x18>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	0018      	movs	r0, r3
 80140ea:	f7ff fc99 	bl	8013a20 <TimestampIsReached>
 80140ee:	0003      	movs	r3, r0
}
 80140f0:	0018      	movs	r0, r3
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	46c0      	nop			@ (mov r8, r8)
 80140f8:	200000f4 	.word	0x200000f4

080140fc <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b084      	sub	sp, #16
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8014106:	4b41      	ldr	r3, [pc, #260]	@ (801420c <HIDS_GetMeasurementValues+0x110>)
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d001      	beq.n	8014112 <HIDS_GetMeasurementValues+0x16>
 801410e:	2301      	movs	r3, #1
 8014110:	e077      	b.n	8014202 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8014112:	f7ff ffe5 	bl	80140e0 <HIDS_MeasurementReady>
 8014116:	0003      	movs	r3, r0
 8014118:	001a      	movs	r2, r3
 801411a:	2301      	movs	r3, #1
 801411c:	4053      	eors	r3, r2
 801411e:	b2db      	uxtb	r3, r3
 8014120:	2b00      	cmp	r3, #0
 8014122:	d001      	beq.n	8014128 <HIDS_GetMeasurementValues+0x2c>
 8014124:	2300      	movs	r3, #0
 8014126:	e06c      	b.n	8014202 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014128:	4b39      	ldr	r3, [pc, #228]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 801412a:	2206      	movs	r2, #6
 801412c:	0019      	movs	r1, r3
 801412e:	2044      	movs	r0, #68	@ 0x44
 8014130:	f7ff fd96 	bl	8013c60 <ReadRegister>
 8014134:	0003      	movs	r3, r0
 8014136:	001a      	movs	r2, r3
 8014138:	2301      	movs	r3, #1
 801413a:	4053      	eors	r3, r2
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d005      	beq.n	801414e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8014142:	4a34      	ldr	r2, [pc, #208]	@ (8014214 <HIDS_GetMeasurementValues+0x118>)
 8014144:	4b34      	ldr	r3, [pc, #208]	@ (8014218 <HIDS_GetMeasurementValues+0x11c>)
 8014146:	0019      	movs	r1, r3
 8014148:	2001      	movs	r0, #1
 801414a:	f7ff fcbf 	bl	8013acc <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 801414e:	4b30      	ldr	r3, [pc, #192]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 8014150:	0018      	movs	r0, r3
 8014152:	f7ff ff2b 	bl	8013fac <CheckCRC>
 8014156:	0003      	movs	r3, r0
 8014158:	001a      	movs	r2, r3
 801415a:	2301      	movs	r3, #1
 801415c:	4053      	eors	r3, r2
 801415e:	b2db      	uxtb	r3, r3
 8014160:	2b00      	cmp	r3, #0
 8014162:	d001      	beq.n	8014168 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8014164:	2300      	movs	r3, #0
 8014166:	e04c      	b.n	8014202 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8014168:	4b29      	ldr	r3, [pc, #164]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	021b      	lsls	r3, r3, #8
 801416e:	4a28      	ldr	r2, [pc, #160]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 8014170:	7852      	ldrb	r2, [r2, #1]
 8014172:	4313      	orrs	r3, r2
 8014174:	22af      	movs	r2, #175	@ 0xaf
 8014176:	4353      	muls	r3, r2
 8014178:	0018      	movs	r0, r3
 801417a:	f7ef fb39 	bl	80037f0 <__aeabi_i2d>
 801417e:	2200      	movs	r2, #0
 8014180:	4b26      	ldr	r3, [pc, #152]	@ (801421c <HIDS_GetMeasurementValues+0x120>)
 8014182:	f7ed ffad 	bl	80020e0 <__aeabi_ddiv>
 8014186:	0002      	movs	r2, r0
 8014188:	000b      	movs	r3, r1
 801418a:	0010      	movs	r0, r2
 801418c:	0019      	movs	r1, r3
 801418e:	f7ef fbc9 	bl	8003924 <__aeabi_d2f>
 8014192:	1c03      	adds	r3, r0, #0
 8014194:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8014196:	4922      	ldr	r1, [pc, #136]	@ (8014220 <HIDS_GetMeasurementValues+0x124>)
 8014198:	68f8      	ldr	r0, [r7, #12]
 801419a:	f7ed f8ab 	bl	80012f4 <__aeabi_fsub>
 801419e:	1c03      	adds	r3, r0, #0
 80141a0:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80141a2:	4b1b      	ldr	r3, [pc, #108]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 80141a4:	78db      	ldrb	r3, [r3, #3]
 80141a6:	021b      	lsls	r3, r3, #8
 80141a8:	4a19      	ldr	r2, [pc, #100]	@ (8014210 <HIDS_GetMeasurementValues+0x114>)
 80141aa:	7912      	ldrb	r2, [r2, #4]
 80141ac:	431a      	orrs	r2, r3
 80141ae:	0013      	movs	r3, r2
 80141b0:	015b      	lsls	r3, r3, #5
 80141b2:	1a9b      	subs	r3, r3, r2
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	189b      	adds	r3, r3, r2
 80141b8:	0018      	movs	r0, r3
 80141ba:	f7ef fb19 	bl	80037f0 <__aeabi_i2d>
 80141be:	2200      	movs	r2, #0
 80141c0:	4b16      	ldr	r3, [pc, #88]	@ (801421c <HIDS_GetMeasurementValues+0x120>)
 80141c2:	f7ed ff8d 	bl	80020e0 <__aeabi_ddiv>
 80141c6:	0002      	movs	r2, r0
 80141c8:	000b      	movs	r3, r1
 80141ca:	0010      	movs	r0, r2
 80141cc:	0019      	movs	r1, r3
 80141ce:	f7ef fba9 	bl	8003924 <__aeabi_d2f>
 80141d2:	1c03      	adds	r3, r0, #0
 80141d4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80141d6:	4913      	ldr	r1, [pc, #76]	@ (8014224 <HIDS_GetMeasurementValues+0x128>)
 80141d8:	68b8      	ldr	r0, [r7, #8]
 80141da:	f7ed f88b 	bl	80012f4 <__aeabi_fsub>
 80141de:	1c03      	adds	r3, r0, #0
 80141e0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	0011      	movs	r1, r2
 80141f4:	0018      	movs	r0, r3
 80141f6:	f7fc ff5f 	bl	80110b8 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80141fa:	4b04      	ldr	r3, [pc, #16]	@ (801420c <HIDS_GetMeasurementValues+0x110>)
 80141fc:	2201      	movs	r2, #1
 80141fe:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8014200:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8014202:	0018      	movs	r0, r3
 8014204:	46bd      	mov	sp, r7
 8014206:	b004      	add	sp, #16
 8014208:	bd80      	pop	{r7, pc}
 801420a:	46c0      	nop			@ (mov r8, r8)
 801420c:	20002364 	.word	0x20002364
 8014210:	20002358 	.word	0x20002358
 8014214:	0802db64 	.word	0x0802db64
 8014218:	0802dafc 	.word	0x0802dafc
 801421c:	40efffe0 	.word	0x40efffe0
 8014220:	42340000 	.word	0x42340000
 8014224:	40c00000 	.word	0x40c00000

08014228 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014228:	b580      	push	{r7, lr}
 801422a:	af00      	add	r7, sp, #0
  humid = 0.0;
 801422c:	4b04      	ldr	r3, [pc, #16]	@ (8014240 <ResetHIDSresults+0x18>)
 801422e:	2200      	movs	r2, #0
 8014230:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8014232:	4b04      	ldr	r3, [pc, #16]	@ (8014244 <ResetHIDSresults+0x1c>)
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]
}
 8014238:	46c0      	nop			@ (mov r8, r8)
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	46c0      	nop			@ (mov r8, r8)
 8014240:	20002340 	.word	0x20002340
 8014244:	20002344 	.word	0x20002344

08014248 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014248:	b5b0      	push	{r4, r5, r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 801424e:	4b69      	ldr	r3, [pc, #420]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b06      	cmp	r3, #6
 8014254:	d900      	bls.n	8014258 <HIDS_Upkeep+0x10>
 8014256:	e0bd      	b.n	80143d4 <HIDS_Upkeep+0x18c>
 8014258:	009a      	lsls	r2, r3, #2
 801425a:	4b67      	ldr	r3, [pc, #412]	@ (80143f8 <HIDS_Upkeep+0x1b0>)
 801425c:	18d3      	adds	r3, r2, r3
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8014262:	4a66      	ldr	r2, [pc, #408]	@ (80143fc <HIDS_Upkeep+0x1b4>)
 8014264:	4b66      	ldr	r3, [pc, #408]	@ (8014400 <HIDS_Upkeep+0x1b8>)
 8014266:	0019      	movs	r1, r3
 8014268:	2003      	movs	r0, #3
 801426a:	f7ff fc2f 	bl	8013acc <CreateLine>
      break;
 801426e:	e0bc      	b.n	80143ea <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8014270:	f7ff ffda 	bl	8014228 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8014274:	4b5f      	ldr	r3, [pc, #380]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 8014276:	2201      	movs	r2, #1
 8014278:	701a      	strb	r2, [r3, #0]
      break;
 801427a:	e0b6      	b.n	80143ea <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 801427c:	f7f9 fc2e 	bl	800dadc <getSensorLock>
 8014280:	1e03      	subs	r3, r0, #0
 8014282:	d000      	beq.n	8014286 <HIDS_Upkeep+0x3e>
 8014284:	e0aa      	b.n	80143dc <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8014286:	2001      	movs	r0, #1
 8014288:	f7f9 fc14 	bl	800dab4 <setSensorLock>
      SetMeasurementIndicator();
 801428c:	f7fe f970 	bl	8012570 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014290:	f7ff fe3c 	bl	8013f0c <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8014294:	200a      	movs	r0, #10
 8014296:	f000 f963 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 801429a:	2000      	movs	r0, #0
 801429c:	f7f9 fc0a 	bl	800dab4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 80142a0:	4b54      	ldr	r3, [pc, #336]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80142a2:	2202      	movs	r2, #2
 80142a4:	701a      	strb	r2, [r3, #0]
      break;
 80142a6:	e0a0      	b.n	80143ea <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 80142a8:	f7f9 fc18 	bl	800dadc <getSensorLock>
 80142ac:	1e03      	subs	r3, r0, #0
 80142ae:	d000      	beq.n	80142b2 <HIDS_Upkeep+0x6a>
 80142b0:	e096      	b.n	80143e0 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 80142b2:	2001      	movs	r0, #1
 80142b4:	f7f9 fbfe 	bl	800dab4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 80142b8:	4a52      	ldr	r2, [pc, #328]	@ (8014404 <HIDS_Upkeep+0x1bc>)
 80142ba:	4b53      	ldr	r3, [pc, #332]	@ (8014408 <HIDS_Upkeep+0x1c0>)
 80142bc:	0011      	movs	r1, r2
 80142be:	0018      	movs	r0, r3
 80142c0:	f7ff ff1c 	bl	80140fc <HIDS_GetMeasurementValues>
 80142c4:	1e03      	subs	r3, r0, #0
 80142c6:	d002      	beq.n	80142ce <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80142c8:	4b4a      	ldr	r3, [pc, #296]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80142ca:	2203      	movs	r2, #3
 80142cc:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 80142ce:	200a      	movs	r0, #10
 80142d0:	f000 f946 	bl	8014560 <HAL_Delay>
      setSensorLock(FREE);
 80142d4:	2000      	movs	r0, #0
 80142d6:	f7f9 fbed 	bl	800dab4 <setSensorLock>
      break;
 80142da:	e086      	b.n	80143ea <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80142dc:	4b4a      	ldr	r3, [pc, #296]	@ (8014408 <HIDS_Upkeep+0x1c0>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	1c18      	adds	r0, r3, #0
 80142e2:	f7ef fad7 	bl	8003894 <__aeabi_f2d>
 80142e6:	0004      	movs	r4, r0
 80142e8:	000d      	movs	r5, r1
 80142ea:	4b46      	ldr	r3, [pc, #280]	@ (8014404 <HIDS_Upkeep+0x1bc>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	1c18      	adds	r0, r3, #0
 80142f0:	f7ef fad0 	bl	8003894 <__aeabi_f2d>
 80142f4:	0002      	movs	r2, r0
 80142f6:	000b      	movs	r3, r1
 80142f8:	4844      	ldr	r0, [pc, #272]	@ (801440c <HIDS_Upkeep+0x1c4>)
 80142fa:	4941      	ldr	r1, [pc, #260]	@ (8014400 <HIDS_Upkeep+0x1b8>)
 80142fc:	9202      	str	r2, [sp, #8]
 80142fe:	9303      	str	r3, [sp, #12]
 8014300:	9400      	str	r4, [sp, #0]
 8014302:	9501      	str	r5, [sp, #4]
 8014304:	0002      	movs	r2, r0
 8014306:	2003      	movs	r0, #3
 8014308:	f7ff fbe0 	bl	8013acc <CreateLine>
      setHIDS(temp, humid);
 801430c:	4b3d      	ldr	r3, [pc, #244]	@ (8014404 <HIDS_Upkeep+0x1bc>)
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	4b3d      	ldr	r3, [pc, #244]	@ (8014408 <HIDS_Upkeep+0x1c0>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	1c19      	adds	r1, r3, #0
 8014316:	1c10      	adds	r0, r2, #0
 8014318:	f7f0 fba4 	bl	8004a64 <setHIDS>
      ResetMeasurementIndicator();
 801431c:	f7fe f940 	bl	80125a0 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014320:	4b38      	ldr	r3, [pc, #224]	@ (8014404 <HIDS_Upkeep+0x1bc>)
 8014322:	681c      	ldr	r4, [r3, #0]
 8014324:	4a37      	ldr	r2, [pc, #220]	@ (8014404 <HIDS_Upkeep+0x1bc>)
 8014326:	4b38      	ldr	r3, [pc, #224]	@ (8014408 <HIDS_Upkeep+0x1c0>)
 8014328:	0011      	movs	r1, r2
 801432a:	0018      	movs	r0, r3
 801432c:	f7ff fd34 	bl	8013d98 <HIDS_DewPointCalculation>
 8014330:	1c03      	adds	r3, r0, #0
 8014332:	1c19      	adds	r1, r3, #0
 8014334:	1c20      	adds	r0, r4, #0
 8014336:	f7ec ffdd 	bl	80012f4 <__aeabi_fsub>
 801433a:	1c03      	adds	r3, r0, #0
 801433c:	21fe      	movs	r1, #254	@ 0xfe
 801433e:	0589      	lsls	r1, r1, #22
 8014340:	1c18      	adds	r0, r3, #0
 8014342:	f7ec f8f5 	bl	8000530 <__aeabi_fcmplt>
 8014346:	1e03      	subs	r3, r0, #0
 8014348:	d023      	beq.n	8014392 <HIDS_Upkeep+0x14a>
 801434a:	f7f5 fdf3 	bl	8009f34 <getPosixTime>
 801434e:	0002      	movs	r2, r0
 8014350:	4b2f      	ldr	r3, [pc, #188]	@ (8014410 <HIDS_Upkeep+0x1c8>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	1ad2      	subs	r2, r2, r3
 8014356:	23e1      	movs	r3, #225	@ 0xe1
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	429a      	cmp	r2, r3
 801435c:	d919      	bls.n	8014392 <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 801435e:	4a2d      	ldr	r2, [pc, #180]	@ (8014414 <HIDS_Upkeep+0x1cc>)
 8014360:	4b2d      	ldr	r3, [pc, #180]	@ (8014418 <HIDS_Upkeep+0x1d0>)
 8014362:	0019      	movs	r1, r3
 8014364:	2002      	movs	r0, #2
 8014366:	f7ff fbb1 	bl	8013acc <CreateLine>
        if (getSensorLock() != FREE) {
 801436a:	f7f9 fbb7 	bl	800dadc <getSensorLock>
 801436e:	1e03      	subs	r3, r0, #0
 8014370:	d138      	bne.n	80143e4 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8014372:	f7ff fd83 	bl	8013e7c <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8014376:	200a      	movs	r0, #10
 8014378:	f000 f8f2 	bl	8014560 <HAL_Delay>
        setSensorLock(FREE);
 801437c:	2000      	movs	r0, #0
 801437e:	f7f9 fb99 	bl	800dab4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8014382:	f000 f8e3 	bl	801454c <HAL_GetTick>
 8014386:	0003      	movs	r3, r0
 8014388:	4a24      	ldr	r2, [pc, #144]	@ (801441c <HIDS_Upkeep+0x1d4>)
 801438a:	189a      	adds	r2, r3, r2
 801438c:	4b24      	ldr	r3, [pc, #144]	@ (8014420 <HIDS_Upkeep+0x1d8>)
 801438e:	601a      	str	r2, [r3, #0]
 8014390:	e011      	b.n	80143b6 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8014392:	f000 f8db 	bl	801454c <HAL_GetTick>
 8014396:	0004      	movs	r4, r0
 8014398:	f7f5 f9c2 	bl	8009720 <Check_USB_PowerOn>
 801439c:	1e03      	subs	r3, r0, #0
 801439e:	d103      	bne.n	80143a8 <HIDS_Upkeep+0x160>
 80143a0:	4b20      	ldr	r3, [pc, #128]	@ (8014424 <HIDS_Upkeep+0x1dc>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d001      	beq.n	80143ac <HIDS_Upkeep+0x164>
 80143a8:	4b1f      	ldr	r3, [pc, #124]	@ (8014428 <HIDS_Upkeep+0x1e0>)
 80143aa:	e001      	b.n	80143b0 <HIDS_Upkeep+0x168>
 80143ac:	23fa      	movs	r3, #250	@ 0xfa
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	191a      	adds	r2, r3, r4
 80143b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014420 <HIDS_Upkeep+0x1d8>)
 80143b4:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 80143b6:	4b0f      	ldr	r3, [pc, #60]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80143b8:	2206      	movs	r2, #6
 80143ba:	701a      	strb	r2, [r3, #0]
      break;
 80143bc:	e015      	b.n	80143ea <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 80143be:	4b18      	ldr	r3, [pc, #96]	@ (8014420 <HIDS_Upkeep+0x1d8>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	0018      	movs	r0, r3
 80143c4:	f7ff fb2c 	bl	8013a20 <TimestampIsReached>
 80143c8:	1e03      	subs	r3, r0, #0
 80143ca:	d00d      	beq.n	80143e8 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 80143cc:	4b09      	ldr	r3, [pc, #36]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80143ce:	2200      	movs	r2, #0
 80143d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80143d2:	e009      	b.n	80143e8 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80143d4:	4b07      	ldr	r3, [pc, #28]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80143d6:	2200      	movs	r2, #0
 80143d8:	701a      	strb	r2, [r3, #0]
      break;
 80143da:	e006      	b.n	80143ea <HIDS_Upkeep+0x1a2>
        break;
 80143dc:	46c0      	nop			@ (mov r8, r8)
 80143de:	e004      	b.n	80143ea <HIDS_Upkeep+0x1a2>
        break;
 80143e0:	46c0      	nop			@ (mov r8, r8)
 80143e2:	e002      	b.n	80143ea <HIDS_Upkeep+0x1a2>
          break;
 80143e4:	46c0      	nop			@ (mov r8, r8)
 80143e6:	e000      	b.n	80143ea <HIDS_Upkeep+0x1a2>
      break;
 80143e8:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80143ea:	4b02      	ldr	r3, [pc, #8]	@ (80143f4 <HIDS_Upkeep+0x1ac>)
 80143ec:	781b      	ldrb	r3, [r3, #0]
}
 80143ee:	0018      	movs	r0, r3
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bdb0      	pop	{r4, r5, r7, pc}
 80143f4:	2000236c 	.word	0x2000236c
 80143f8:	0802e1d8 	.word	0x0802e1d8
 80143fc:	0802db98 	.word	0x0802db98
 8014400:	0802dbcc 	.word	0x0802dbcc
 8014404:	20002344 	.word	0x20002344
 8014408:	20002340 	.word	0x20002340
 801440c:	0802dbd0 	.word	0x0802dbd0
 8014410:	20002360 	.word	0x20002360
 8014414:	0802dc04 	.word	0x0802dc04
 8014418:	0802dad0 	.word	0x0802dad0
 801441c:	00002ee0 	.word	0x00002ee0
 8014420:	20002368 	.word	0x20002368
 8014424:	20001faa 	.word	0x20001faa
 8014428:	00002710 	.word	0x00002710

0801442c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 801442c:	480d      	ldr	r0, [pc, #52]	@ (8014464 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 801442e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014430:	f7fe ff50 	bl	80132d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014434:	480c      	ldr	r0, [pc, #48]	@ (8014468 <LoopForever+0x6>)
  ldr r1, =_edata
 8014436:	490d      	ldr	r1, [pc, #52]	@ (801446c <LoopForever+0xa>)
  ldr r2, =_sidata
 8014438:	4a0d      	ldr	r2, [pc, #52]	@ (8014470 <LoopForever+0xe>)
  movs r3, #0
 801443a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801443c:	e002      	b.n	8014444 <LoopCopyDataInit>

0801443e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801443e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014442:	3304      	adds	r3, #4

08014444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014448:	d3f9      	bcc.n	801443e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801444a:	4a0a      	ldr	r2, [pc, #40]	@ (8014474 <LoopForever+0x12>)
  ldr r4, =_ebss
 801444c:	4c0a      	ldr	r4, [pc, #40]	@ (8014478 <LoopForever+0x16>)
  movs r3, #0
 801444e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014450:	e001      	b.n	8014456 <LoopFillZerobss>

08014452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014454:	3204      	adds	r2, #4

08014456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014458:	d3fb      	bcc.n	8014452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801445a:	f011 fed5 	bl	8026208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801445e:	f7f8 fa4b 	bl	800c8f8 <main>

08014462 <LoopForever>:

LoopForever:
    b LoopForever
 8014462:	e7fe      	b.n	8014462 <LoopForever>
   ldr   r0, =_estack
 8014464:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801446c:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8014470:	0802ebc0 	.word	0x0802ebc0
  ldr r2, =_sbss
 8014474:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8014478:	20003774 	.word	0x20003774

0801447c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801447c:	e7fe      	b.n	801447c <ADC1_COMP_IRQHandler>
	...

08014480 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014486:	1dfb      	adds	r3, r7, #7
 8014488:	2200      	movs	r2, #0
 801448a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 801448c:	4b0b      	ldr	r3, [pc, #44]	@ (80144bc <HAL_Init+0x3c>)
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	4b0a      	ldr	r3, [pc, #40]	@ (80144bc <HAL_Init+0x3c>)
 8014492:	2140      	movs	r1, #64	@ 0x40
 8014494:	430a      	orrs	r2, r1
 8014496:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014498:	2003      	movs	r0, #3
 801449a:	f000 f811 	bl	80144c0 <HAL_InitTick>
 801449e:	1e03      	subs	r3, r0, #0
 80144a0:	d003      	beq.n	80144aa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80144a2:	1dfb      	adds	r3, r7, #7
 80144a4:	2201      	movs	r2, #1
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	e001      	b.n	80144ae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80144aa:	f7fe fdc7 	bl	801303c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80144ae:	1dfb      	adds	r3, r7, #7
 80144b0:	781b      	ldrb	r3, [r3, #0]
}
 80144b2:	0018      	movs	r0, r3
 80144b4:	46bd      	mov	sp, r7
 80144b6:	b002      	add	sp, #8
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	46c0      	nop			@ (mov r8, r8)
 80144bc:	40022000 	.word	0x40022000

080144c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80144c8:	4b14      	ldr	r3, [pc, #80]	@ (801451c <HAL_InitTick+0x5c>)
 80144ca:	681c      	ldr	r4, [r3, #0]
 80144cc:	4b14      	ldr	r3, [pc, #80]	@ (8014520 <HAL_InitTick+0x60>)
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	0019      	movs	r1, r3
 80144d2:	23fa      	movs	r3, #250	@ 0xfa
 80144d4:	0098      	lsls	r0, r3, #2
 80144d6:	f7eb fe65 	bl	80001a4 <__udivsi3>
 80144da:	0003      	movs	r3, r0
 80144dc:	0019      	movs	r1, r3
 80144de:	0020      	movs	r0, r4
 80144e0:	f7eb fe60 	bl	80001a4 <__udivsi3>
 80144e4:	0003      	movs	r3, r0
 80144e6:	0018      	movs	r0, r3
 80144e8:	f000 fcfd 	bl	8014ee6 <HAL_SYSTICK_Config>
 80144ec:	1e03      	subs	r3, r0, #0
 80144ee:	d001      	beq.n	80144f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80144f0:	2301      	movs	r3, #1
 80144f2:	e00f      	b.n	8014514 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b03      	cmp	r3, #3
 80144f8:	d80b      	bhi.n	8014512 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80144fa:	6879      	ldr	r1, [r7, #4]
 80144fc:	2301      	movs	r3, #1
 80144fe:	425b      	negs	r3, r3
 8014500:	2200      	movs	r2, #0
 8014502:	0018      	movs	r0, r3
 8014504:	f000 fcc6 	bl	8014e94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014508:	4b06      	ldr	r3, [pc, #24]	@ (8014524 <HAL_InitTick+0x64>)
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	e000      	b.n	8014514 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8014512:	2301      	movs	r3, #1
}
 8014514:	0018      	movs	r0, r3
 8014516:	46bd      	mov	sp, r7
 8014518:	b003      	add	sp, #12
 801451a:	bd90      	pop	{r4, r7, pc}
 801451c:	200000ec 	.word	0x200000ec
 8014520:	20000100 	.word	0x20000100
 8014524:	200000fc 	.word	0x200000fc

08014528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801452c:	4b05      	ldr	r3, [pc, #20]	@ (8014544 <HAL_IncTick+0x1c>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	001a      	movs	r2, r3
 8014532:	4b05      	ldr	r3, [pc, #20]	@ (8014548 <HAL_IncTick+0x20>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	18d2      	adds	r2, r2, r3
 8014538:	4b03      	ldr	r3, [pc, #12]	@ (8014548 <HAL_IncTick+0x20>)
 801453a:	601a      	str	r2, [r3, #0]
}
 801453c:	46c0      	nop			@ (mov r8, r8)
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	46c0      	nop			@ (mov r8, r8)
 8014544:	20000100 	.word	0x20000100
 8014548:	20002370 	.word	0x20002370

0801454c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	af00      	add	r7, sp, #0
  return uwTick;
 8014550:	4b02      	ldr	r3, [pc, #8]	@ (801455c <HAL_GetTick+0x10>)
 8014552:	681b      	ldr	r3, [r3, #0]
}
 8014554:	0018      	movs	r0, r3
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	46c0      	nop			@ (mov r8, r8)
 801455c:	20002370 	.word	0x20002370

08014560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014568:	f7ff fff0 	bl	801454c <HAL_GetTick>
 801456c:	0003      	movs	r3, r0
 801456e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	3301      	adds	r3, #1
 8014578:	d005      	beq.n	8014586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801457a:	4b0a      	ldr	r3, [pc, #40]	@ (80145a4 <HAL_Delay+0x44>)
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	001a      	movs	r2, r3
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	189b      	adds	r3, r3, r2
 8014584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014586:	46c0      	nop			@ (mov r8, r8)
 8014588:	f7ff ffe0 	bl	801454c <HAL_GetTick>
 801458c:	0002      	movs	r2, r0
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	68fa      	ldr	r2, [r7, #12]
 8014594:	429a      	cmp	r2, r3
 8014596:	d8f7      	bhi.n	8014588 <HAL_Delay+0x28>
  {
  }
}
 8014598:	46c0      	nop			@ (mov r8, r8)
 801459a:	46c0      	nop			@ (mov r8, r8)
 801459c:	46bd      	mov	sp, r7
 801459e:	b004      	add	sp, #16
 80145a0:	bd80      	pop	{r7, pc}
 80145a2:	46c0      	nop			@ (mov r8, r8)
 80145a4:	20000100 	.word	0x20000100

080145a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80145ac:	4b04      	ldr	r3, [pc, #16]	@ (80145c0 <HAL_SuspendTick+0x18>)
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	4b03      	ldr	r3, [pc, #12]	@ (80145c0 <HAL_SuspendTick+0x18>)
 80145b2:	2102      	movs	r1, #2
 80145b4:	438a      	bics	r2, r1
 80145b6:	601a      	str	r2, [r3, #0]
}
 80145b8:	46c0      	nop			@ (mov r8, r8)
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	46c0      	nop			@ (mov r8, r8)
 80145c0:	e000e010 	.word	0xe000e010

080145c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80145c8:	4b04      	ldr	r3, [pc, #16]	@ (80145dc <HAL_ResumeTick+0x18>)
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	4b03      	ldr	r3, [pc, #12]	@ (80145dc <HAL_ResumeTick+0x18>)
 80145ce:	2102      	movs	r1, #2
 80145d0:	430a      	orrs	r2, r1
 80145d2:	601a      	str	r2, [r3, #0]
}
 80145d4:	46c0      	nop			@ (mov r8, r8)
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	46c0      	nop			@ (mov r8, r8)
 80145dc:	e000e010 	.word	0xe000e010

080145e0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80145e4:	4b02      	ldr	r3, [pc, #8]	@ (80145f0 <HAL_GetUIDw0+0x10>)
 80145e6:	681b      	ldr	r3, [r3, #0]
}
 80145e8:	0018      	movs	r0, r3
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	46c0      	nop			@ (mov r8, r8)
 80145f0:	1ff80050 	.word	0x1ff80050

080145f4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80145f8:	4b02      	ldr	r3, [pc, #8]	@ (8014604 <HAL_GetUIDw1+0x10>)
 80145fa:	681b      	ldr	r3, [r3, #0]
}
 80145fc:	0018      	movs	r0, r3
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	46c0      	nop			@ (mov r8, r8)
 8014604:	1ff80054 	.word	0x1ff80054

08014608 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 801460c:	4b02      	ldr	r3, [pc, #8]	@ (8014618 <HAL_GetUIDw2+0x10>)
 801460e:	681b      	ldr	r3, [r3, #0]
}
 8014610:	0018      	movs	r0, r3
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	46c0      	nop			@ (mov r8, r8)
 8014618:	1ff80064 	.word	0x1ff80064

0801461c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d101      	bne.n	801462e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 801462a:	2301      	movs	r3, #1
 801462c:	e159      	b.n	80148e2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10a      	bne.n	801464c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2250      	movs	r2, #80	@ 0x50
 8014640:	2100      	movs	r1, #0
 8014642:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	0018      	movs	r0, r3
 8014648:	f7f6 f88e 	bl	800a768 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014650:	2210      	movs	r2, #16
 8014652:	4013      	ands	r3, r2
 8014654:	2b10      	cmp	r3, #16
 8014656:	d005      	beq.n	8014664 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	2204      	movs	r2, #4
 8014660:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014662:	d00b      	beq.n	801467c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014668:	2210      	movs	r2, #16
 801466a:	431a      	orrs	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2250      	movs	r2, #80	@ 0x50
 8014674:	2100      	movs	r1, #0
 8014676:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014678:	2301      	movs	r3, #1
 801467a:	e132      	b.n	80148e2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014680:	4a9a      	ldr	r2, [pc, #616]	@ (80148ec <HAL_ADC_Init+0x2d0>)
 8014682:	4013      	ands	r3, r2
 8014684:	2202      	movs	r2, #2
 8014686:	431a      	orrs	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	2203      	movs	r2, #3
 8014694:	4013      	ands	r3, r2
 8014696:	2b01      	cmp	r3, #1
 8014698:	d108      	bne.n	80146ac <HAL_ADC_Init+0x90>
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2201      	movs	r2, #1
 80146a2:	4013      	ands	r3, r2
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d101      	bne.n	80146ac <HAL_ADC_Init+0x90>
 80146a8:	2301      	movs	r3, #1
 80146aa:	e000      	b.n	80146ae <HAL_ADC_Init+0x92>
 80146ac:	2300      	movs	r3, #0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d149      	bne.n	8014746 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	685a      	ldr	r2, [r3, #4]
 80146b6:	23c0      	movs	r3, #192	@ 0xc0
 80146b8:	061b      	lsls	r3, r3, #24
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d00b      	beq.n	80146d6 <HAL_ADC_Init+0xba>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	685a      	ldr	r2, [r3, #4]
 80146c2:	2380      	movs	r3, #128	@ 0x80
 80146c4:	05db      	lsls	r3, r3, #23
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d005      	beq.n	80146d6 <HAL_ADC_Init+0xba>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	685a      	ldr	r2, [r3, #4]
 80146ce:	2380      	movs	r3, #128	@ 0x80
 80146d0:	061b      	lsls	r3, r3, #24
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d111      	bne.n	80146fa <HAL_ADC_Init+0xde>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	691a      	ldr	r2, [r3, #16]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	0092      	lsls	r2, r2, #2
 80146e2:	0892      	lsrs	r2, r2, #2
 80146e4:	611a      	str	r2, [r3, #16]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	6919      	ldr	r1, [r3, #16]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	685a      	ldr	r2, [r3, #4]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	430a      	orrs	r2, r1
 80146f6:	611a      	str	r2, [r3, #16]
 80146f8:	e014      	b.n	8014724 <HAL_ADC_Init+0x108>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	691a      	ldr	r2, [r3, #16]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	0092      	lsls	r2, r2, #2
 8014706:	0892      	lsrs	r2, r2, #2
 8014708:	611a      	str	r2, [r3, #16]
 801470a:	4b79      	ldr	r3, [pc, #484]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	4b78      	ldr	r3, [pc, #480]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 8014710:	4978      	ldr	r1, [pc, #480]	@ (80148f4 <HAL_ADC_Init+0x2d8>)
 8014712:	400a      	ands	r2, r1
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	4b76      	ldr	r3, [pc, #472]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 8014718:	6819      	ldr	r1, [r3, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	685a      	ldr	r2, [r3, #4]
 801471e:	4b74      	ldr	r3, [pc, #464]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 8014720:	430a      	orrs	r2, r1
 8014722:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	68da      	ldr	r2, [r3, #12]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	2118      	movs	r1, #24
 8014730:	438a      	bics	r2, r1
 8014732:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68d9      	ldr	r1, [r3, #12]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	689a      	ldr	r2, [r3, #8]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	430a      	orrs	r2, r1
 8014744:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014746:	4b6a      	ldr	r3, [pc, #424]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	4b69      	ldr	r3, [pc, #420]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 801474c:	496a      	ldr	r1, [pc, #424]	@ (80148f8 <HAL_ADC_Init+0x2dc>)
 801474e:	400a      	ands	r2, r1
 8014750:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014752:	4b67      	ldr	r3, [pc, #412]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 8014754:	6819      	ldr	r1, [r3, #0]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801475a:	065a      	lsls	r2, r3, #25
 801475c:	4b64      	ldr	r3, [pc, #400]	@ (80148f0 <HAL_ADC_Init+0x2d4>)
 801475e:	430a      	orrs	r2, r1
 8014760:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	689a      	ldr	r2, [r3, #8]
 8014768:	2380      	movs	r3, #128	@ 0x80
 801476a:	055b      	lsls	r3, r3, #21
 801476c:	4013      	ands	r3, r2
 801476e:	d108      	bne.n	8014782 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	689a      	ldr	r2, [r3, #8]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2180      	movs	r1, #128	@ 0x80
 801477c:	0549      	lsls	r1, r1, #21
 801477e:	430a      	orrs	r2, r1
 8014780:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	68da      	ldr	r2, [r3, #12]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	495b      	ldr	r1, [pc, #364]	@ (80148fc <HAL_ADC_Init+0x2e0>)
 801478e:	400a      	ands	r2, r1
 8014790:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68d9      	ldr	r1, [r3, #12]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d101      	bne.n	80147a8 <HAL_ADC_Init+0x18c>
 80147a4:	2304      	movs	r3, #4
 80147a6:	e000      	b.n	80147aa <HAL_ADC_Init+0x18e>
 80147a8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80147aa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2020      	movs	r0, #32
 80147b0:	5c1b      	ldrb	r3, [r3, r0]
 80147b2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80147b4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	202c      	movs	r0, #44	@ 0x2c
 80147ba:	5c1b      	ldrb	r3, [r3, r0]
 80147bc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80147be:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80147c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	699b      	ldr	r3, [r3, #24]
 80147ca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80147cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	69db      	ldr	r3, [r3, #28]
 80147d2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80147d4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	430a      	orrs	r2, r1
 80147dc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147e2:	23c2      	movs	r3, #194	@ 0xc2
 80147e4:	33ff      	adds	r3, #255	@ 0xff
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d00b      	beq.n	8014802 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	68d9      	ldr	r1, [r3, #12]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80147f8:	431a      	orrs	r2, r3
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	430a      	orrs	r2, r1
 8014800:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2221      	movs	r2, #33	@ 0x21
 8014806:	5c9b      	ldrb	r3, [r3, r2]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d11a      	bne.n	8014842 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2220      	movs	r2, #32
 8014810:	5c9b      	ldrb	r3, [r3, r2]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d109      	bne.n	801482a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	68da      	ldr	r2, [r3, #12]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2180      	movs	r1, #128	@ 0x80
 8014822:	0249      	lsls	r1, r1, #9
 8014824:	430a      	orrs	r2, r1
 8014826:	60da      	str	r2, [r3, #12]
 8014828:	e00b      	b.n	8014842 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801482e:	2220      	movs	r2, #32
 8014830:	431a      	orrs	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801483a:	2201      	movs	r2, #1
 801483c:	431a      	orrs	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014846:	2b01      	cmp	r3, #1
 8014848:	d11f      	bne.n	801488a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	691a      	ldr	r2, [r3, #16]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	492a      	ldr	r1, [pc, #168]	@ (8014900 <HAL_ADC_Init+0x2e4>)
 8014856:	400a      	ands	r2, r1
 8014858:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6919      	ldr	r1, [r3, #16]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014868:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 801486e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	430a      	orrs	r2, r1
 8014876:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	691a      	ldr	r2, [r3, #16]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2101      	movs	r1, #1
 8014884:	430a      	orrs	r2, r1
 8014886:	611a      	str	r2, [r3, #16]
 8014888:	e00e      	b.n	80148a8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	691b      	ldr	r3, [r3, #16]
 8014890:	2201      	movs	r2, #1
 8014892:	4013      	ands	r3, r2
 8014894:	2b01      	cmp	r3, #1
 8014896:	d107      	bne.n	80148a8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	691a      	ldr	r2, [r3, #16]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	2101      	movs	r1, #1
 80148a4:	438a      	bics	r2, r1
 80148a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	695a      	ldr	r2, [r3, #20]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	2107      	movs	r1, #7
 80148b4:	438a      	bics	r2, r1
 80148b6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	6959      	ldr	r1, [r3, #20]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	430a      	orrs	r2, r1
 80148c8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148d4:	2203      	movs	r2, #3
 80148d6:	4393      	bics	r3, r2
 80148d8:	2201      	movs	r2, #1
 80148da:	431a      	orrs	r2, r3
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80148e0:	2300      	movs	r3, #0
}
 80148e2:	0018      	movs	r0, r3
 80148e4:	46bd      	mov	sp, r7
 80148e6:	b002      	add	sp, #8
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	46c0      	nop			@ (mov r8, r8)
 80148ec:	fffffefd 	.word	0xfffffefd
 80148f0:	40012708 	.word	0x40012708
 80148f4:	ffc3ffff 	.word	0xffc3ffff
 80148f8:	fdffffff 	.word	0xfdffffff
 80148fc:	fffe0219 	.word	0xfffe0219
 8014900:	fffffc03 	.word	0xfffffc03

08014904 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014904:	b590      	push	{r4, r7, lr}
 8014906:	b085      	sub	sp, #20
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801490c:	230f      	movs	r3, #15
 801490e:	18fb      	adds	r3, r7, r3
 8014910:	2200      	movs	r2, #0
 8014912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	2204      	movs	r2, #4
 801491c:	4013      	ands	r3, r2
 801491e:	d138      	bne.n	8014992 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2250      	movs	r2, #80	@ 0x50
 8014924:	5c9b      	ldrb	r3, [r3, r2]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d101      	bne.n	801492e <HAL_ADC_Start+0x2a>
 801492a:	2302      	movs	r3, #2
 801492c:	e038      	b.n	80149a0 <HAL_ADC_Start+0x9c>
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2250      	movs	r2, #80	@ 0x50
 8014932:	2101      	movs	r1, #1
 8014934:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	69db      	ldr	r3, [r3, #28]
 801493a:	2b01      	cmp	r3, #1
 801493c:	d007      	beq.n	801494e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 801493e:	230f      	movs	r3, #15
 8014940:	18fc      	adds	r4, r7, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	0018      	movs	r0, r3
 8014946:	f000 f95f 	bl	8014c08 <ADC_Enable>
 801494a:	0003      	movs	r3, r0
 801494c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801494e:	230f      	movs	r3, #15
 8014950:	18fb      	adds	r3, r7, r3
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d120      	bne.n	801499a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801495c:	4a12      	ldr	r2, [pc, #72]	@ (80149a8 <HAL_ADC_Start+0xa4>)
 801495e:	4013      	ands	r3, r2
 8014960:	2280      	movs	r2, #128	@ 0x80
 8014962:	0052      	lsls	r2, r2, #1
 8014964:	431a      	orrs	r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2200      	movs	r2, #0
 801496e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2250      	movs	r2, #80	@ 0x50
 8014974:	2100      	movs	r1, #0
 8014976:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	221c      	movs	r2, #28
 801497e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	689a      	ldr	r2, [r3, #8]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	2104      	movs	r1, #4
 801498c:	430a      	orrs	r2, r1
 801498e:	609a      	str	r2, [r3, #8]
 8014990:	e003      	b.n	801499a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014992:	230f      	movs	r3, #15
 8014994:	18fb      	adds	r3, r7, r3
 8014996:	2202      	movs	r2, #2
 8014998:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801499a:	230f      	movs	r3, #15
 801499c:	18fb      	adds	r3, r7, r3
 801499e:	781b      	ldrb	r3, [r3, #0]
}
 80149a0:	0018      	movs	r0, r3
 80149a2:	46bd      	mov	sp, r7
 80149a4:	b005      	add	sp, #20
 80149a6:	bd90      	pop	{r4, r7, pc}
 80149a8:	fffff0fe 	.word	0xfffff0fe

080149ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80149b6:	2300      	movs	r3, #0
 80149b8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80149ba:	2300      	movs	r3, #0
 80149bc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	695b      	ldr	r3, [r3, #20]
 80149c2:	2b08      	cmp	r3, #8
 80149c4:	d102      	bne.n	80149cc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80149c6:	2308      	movs	r3, #8
 80149c8:	60fb      	str	r3, [r7, #12]
 80149ca:	e014      	b.n	80149f6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	2201      	movs	r2, #1
 80149d4:	4013      	ands	r3, r2
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d10b      	bne.n	80149f2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149de:	2220      	movs	r2, #32
 80149e0:	431a      	orrs	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2250      	movs	r2, #80	@ 0x50
 80149ea:	2100      	movs	r1, #0
 80149ec:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80149ee:	2301      	movs	r3, #1
 80149f0:	e072      	b.n	8014ad8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80149f2:	230c      	movs	r3, #12
 80149f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80149f6:	f7ff fda9 	bl	801454c <HAL_GetTick>
 80149fa:	0003      	movs	r3, r0
 80149fc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80149fe:	e01f      	b.n	8014a40 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	3301      	adds	r3, #1
 8014a04:	d01c      	beq.n	8014a40 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d007      	beq.n	8014a1c <HAL_ADC_PollForConversion+0x70>
 8014a0c:	f7ff fd9e 	bl	801454c <HAL_GetTick>
 8014a10:	0002      	movs	r2, r0
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	1ad3      	subs	r3, r2, r3
 8014a16:	683a      	ldr	r2, [r7, #0]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d211      	bcs.n	8014a40 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	68fa      	ldr	r2, [r7, #12]
 8014a24:	4013      	ands	r3, r2
 8014a26:	d10b      	bne.n	8014a40 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a2c:	2204      	movs	r2, #4
 8014a2e:	431a      	orrs	r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2250      	movs	r2, #80	@ 0x50
 8014a38:	2100      	movs	r1, #0
 8014a3a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014a3c:	2303      	movs	r3, #3
 8014a3e:	e04b      	b.n	8014ad8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	68fa      	ldr	r2, [r7, #12]
 8014a48:	4013      	ands	r3, r2
 8014a4a:	d0d9      	beq.n	8014a00 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a50:	2280      	movs	r2, #128	@ 0x80
 8014a52:	0092      	lsls	r2, r2, #2
 8014a54:	431a      	orrs	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	68da      	ldr	r2, [r3, #12]
 8014a60:	23c0      	movs	r3, #192	@ 0xc0
 8014a62:	011b      	lsls	r3, r3, #4
 8014a64:	4013      	ands	r3, r2
 8014a66:	d12e      	bne.n	8014ac6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2220      	movs	r2, #32
 8014a6c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d129      	bne.n	8014ac6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2208      	movs	r2, #8
 8014a7a:	4013      	ands	r3, r2
 8014a7c:	2b08      	cmp	r3, #8
 8014a7e:	d122      	bne.n	8014ac6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	689b      	ldr	r3, [r3, #8]
 8014a86:	2204      	movs	r2, #4
 8014a88:	4013      	ands	r3, r2
 8014a8a:	d110      	bne.n	8014aae <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	685a      	ldr	r2, [r3, #4]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	210c      	movs	r1, #12
 8014a98:	438a      	bics	r2, r1
 8014a9a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8014ae0 <HAL_ADC_PollForConversion+0x134>)
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	431a      	orrs	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	655a      	str	r2, [r3, #84]	@ 0x54
 8014aac:	e00b      	b.n	8014ac6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ab2:	2220      	movs	r2, #32
 8014ab4:	431a      	orrs	r2, r3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014abe:	2201      	movs	r2, #1
 8014ac0:	431a      	orrs	r2, r3
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	699b      	ldr	r3, [r3, #24]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d103      	bne.n	8014ad6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	220c      	movs	r2, #12
 8014ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014ad6:	2300      	movs	r3, #0
}
 8014ad8:	0018      	movs	r0, r3
 8014ada:	46bd      	mov	sp, r7
 8014adc:	b004      	add	sp, #16
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	fffffefe 	.word	0xfffffefe

08014ae4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8014af2:	0018      	movs	r0, r3
 8014af4:	46bd      	mov	sp, r7
 8014af6:	b002      	add	sp, #8
 8014af8:	bd80      	pop	{r7, pc}
	...

08014afc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2250      	movs	r2, #80	@ 0x50
 8014b0a:	5c9b      	ldrb	r3, [r3, r2]
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d101      	bne.n	8014b14 <HAL_ADC_ConfigChannel+0x18>
 8014b10:	2302      	movs	r3, #2
 8014b12:	e06c      	b.n	8014bee <HAL_ADC_ConfigChannel+0xf2>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2250      	movs	r2, #80	@ 0x50
 8014b18:	2101      	movs	r1, #1
 8014b1a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	689b      	ldr	r3, [r3, #8]
 8014b22:	2204      	movs	r2, #4
 8014b24:	4013      	ands	r3, r2
 8014b26:	d00b      	beq.n	8014b40 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b2c:	2220      	movs	r2, #32
 8014b2e:	431a      	orrs	r2, r3
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2250      	movs	r2, #80	@ 0x50
 8014b38:	2100      	movs	r1, #0
 8014b3a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	e056      	b.n	8014bee <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	4a2c      	ldr	r2, [pc, #176]	@ (8014bf8 <HAL_ADC_ConfigChannel+0xfc>)
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d028      	beq.n	8014b9c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	035b      	lsls	r3, r3, #13
 8014b56:	0b5a      	lsrs	r2, r3, #13
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	430a      	orrs	r2, r1
 8014b5e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	2380      	movs	r3, #128	@ 0x80
 8014b66:	02db      	lsls	r3, r3, #11
 8014b68:	4013      	ands	r3, r2
 8014b6a:	d009      	beq.n	8014b80 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014b6c:	4b23      	ldr	r3, [pc, #140]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	4b22      	ldr	r3, [pc, #136]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014b72:	2180      	movs	r1, #128	@ 0x80
 8014b74:	0409      	lsls	r1, r1, #16
 8014b76:	430a      	orrs	r2, r1
 8014b78:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014b7a:	200a      	movs	r0, #10
 8014b7c:	f000 f8ac 	bl	8014cd8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	2380      	movs	r3, #128	@ 0x80
 8014b86:	029b      	lsls	r3, r3, #10
 8014b88:	4013      	ands	r3, r2
 8014b8a:	d02b      	beq.n	8014be4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	4b1a      	ldr	r3, [pc, #104]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014b92:	2180      	movs	r1, #128	@ 0x80
 8014b94:	03c9      	lsls	r1, r1, #15
 8014b96:	430a      	orrs	r2, r1
 8014b98:	601a      	str	r2, [r3, #0]
 8014b9a:	e023      	b.n	8014be4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	035b      	lsls	r3, r3, #13
 8014ba8:	0b5b      	lsrs	r3, r3, #13
 8014baa:	43d9      	mvns	r1, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	400a      	ands	r2, r1
 8014bb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	681a      	ldr	r2, [r3, #0]
 8014bb8:	2380      	movs	r3, #128	@ 0x80
 8014bba:	02db      	lsls	r3, r3, #11
 8014bbc:	4013      	ands	r3, r2
 8014bbe:	d005      	beq.n	8014bcc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014bc6:	490e      	ldr	r1, [pc, #56]	@ (8014c00 <HAL_ADC_ConfigChannel+0x104>)
 8014bc8:	400a      	ands	r2, r1
 8014bca:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	681a      	ldr	r2, [r3, #0]
 8014bd0:	2380      	movs	r3, #128	@ 0x80
 8014bd2:	029b      	lsls	r3, r3, #10
 8014bd4:	4013      	ands	r3, r2
 8014bd6:	d005      	beq.n	8014be4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014bd8:	4b08      	ldr	r3, [pc, #32]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	4b07      	ldr	r3, [pc, #28]	@ (8014bfc <HAL_ADC_ConfigChannel+0x100>)
 8014bde:	4909      	ldr	r1, [pc, #36]	@ (8014c04 <HAL_ADC_ConfigChannel+0x108>)
 8014be0:	400a      	ands	r2, r1
 8014be2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2250      	movs	r2, #80	@ 0x50
 8014be8:	2100      	movs	r1, #0
 8014bea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	0018      	movs	r0, r3
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	b002      	add	sp, #8
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	46c0      	nop			@ (mov r8, r8)
 8014bf8:	00001001 	.word	0x00001001
 8014bfc:	40012708 	.word	0x40012708
 8014c00:	ff7fffff 	.word	0xff7fffff
 8014c04:	ffbfffff 	.word	0xffbfffff

08014c08 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014c10:	2300      	movs	r3, #0
 8014c12:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	2203      	movs	r2, #3
 8014c1c:	4013      	ands	r3, r2
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d108      	bne.n	8014c34 <ADC_Enable+0x2c>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2201      	movs	r2, #1
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d101      	bne.n	8014c34 <ADC_Enable+0x2c>
 8014c30:	2301      	movs	r3, #1
 8014c32:	e000      	b.n	8014c36 <ADC_Enable+0x2e>
 8014c34:	2300      	movs	r3, #0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d146      	bne.n	8014cc8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	689b      	ldr	r3, [r3, #8]
 8014c40:	4a24      	ldr	r2, [pc, #144]	@ (8014cd4 <ADC_Enable+0xcc>)
 8014c42:	4013      	ands	r3, r2
 8014c44:	d00d      	beq.n	8014c62 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c4a:	2210      	movs	r2, #16
 8014c4c:	431a      	orrs	r2, r3
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c56:	2201      	movs	r2, #1
 8014c58:	431a      	orrs	r2, r3
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014c5e:	2301      	movs	r3, #1
 8014c60:	e033      	b.n	8014cca <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	689a      	ldr	r2, [r3, #8]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	2101      	movs	r1, #1
 8014c6e:	430a      	orrs	r2, r1
 8014c70:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8014c72:	2001      	movs	r0, #1
 8014c74:	f000 f830 	bl	8014cd8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014c78:	f7ff fc68 	bl	801454c <HAL_GetTick>
 8014c7c:	0003      	movs	r3, r0
 8014c7e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014c80:	e01b      	b.n	8014cba <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014c82:	f7ff fc63 	bl	801454c <HAL_GetTick>
 8014c86:	0002      	movs	r2, r0
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	1ad3      	subs	r3, r2, r3
 8014c8c:	2b0a      	cmp	r3, #10
 8014c8e:	d914      	bls.n	8014cba <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2201      	movs	r2, #1
 8014c98:	4013      	ands	r3, r2
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d00d      	beq.n	8014cba <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ca2:	2210      	movs	r2, #16
 8014ca4:	431a      	orrs	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014cae:	2201      	movs	r2, #1
 8014cb0:	431a      	orrs	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	e007      	b.n	8014cca <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d1dc      	bne.n	8014c82 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014cc8:	2300      	movs	r3, #0
}
 8014cca:	0018      	movs	r0, r3
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	b004      	add	sp, #16
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	46c0      	nop			@ (mov r8, r8)
 8014cd4:	80000017 	.word	0x80000017

08014cd8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8014ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8014d10 <ADC_DelayMicroSecond+0x38>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	490b      	ldr	r1, [pc, #44]	@ (8014d14 <ADC_DelayMicroSecond+0x3c>)
 8014ce6:	0018      	movs	r0, r3
 8014ce8:	f7eb fa5c 	bl	80001a4 <__udivsi3>
 8014cec:	0003      	movs	r3, r0
 8014cee:	001a      	movs	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4353      	muls	r3, r2
 8014cf4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8014cf6:	e002      	b.n	8014cfe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	3b01      	subs	r3, #1
 8014cfc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d1f9      	bne.n	8014cf8 <ADC_DelayMicroSecond+0x20>
  }
}
 8014d04:	46c0      	nop			@ (mov r8, r8)
 8014d06:	46c0      	nop			@ (mov r8, r8)
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	b004      	add	sp, #16
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	46c0      	nop			@ (mov r8, r8)
 8014d10:	200000ec 	.word	0x200000ec
 8014d14:	000f4240 	.word	0x000f4240

08014d18 <__NVIC_EnableIRQ>:
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	0002      	movs	r2, r0
 8014d20:	1dfb      	adds	r3, r7, #7
 8014d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014d24:	1dfb      	adds	r3, r7, #7
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d2a:	d809      	bhi.n	8014d40 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014d2c:	1dfb      	adds	r3, r7, #7
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	001a      	movs	r2, r3
 8014d32:	231f      	movs	r3, #31
 8014d34:	401a      	ands	r2, r3
 8014d36:	4b04      	ldr	r3, [pc, #16]	@ (8014d48 <__NVIC_EnableIRQ+0x30>)
 8014d38:	2101      	movs	r1, #1
 8014d3a:	4091      	lsls	r1, r2
 8014d3c:	000a      	movs	r2, r1
 8014d3e:	601a      	str	r2, [r3, #0]
}
 8014d40:	46c0      	nop			@ (mov r8, r8)
 8014d42:	46bd      	mov	sp, r7
 8014d44:	b002      	add	sp, #8
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	e000e100 	.word	0xe000e100

08014d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014d4c:	b590      	push	{r4, r7, lr}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	0002      	movs	r2, r0
 8014d54:	6039      	str	r1, [r7, #0]
 8014d56:	1dfb      	adds	r3, r7, #7
 8014d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014d5a:	1dfb      	adds	r3, r7, #7
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d60:	d828      	bhi.n	8014db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014d62:	4a2f      	ldr	r2, [pc, #188]	@ (8014e20 <__NVIC_SetPriority+0xd4>)
 8014d64:	1dfb      	adds	r3, r7, #7
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	b25b      	sxtb	r3, r3
 8014d6a:	089b      	lsrs	r3, r3, #2
 8014d6c:	33c0      	adds	r3, #192	@ 0xc0
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	589b      	ldr	r3, [r3, r2]
 8014d72:	1dfa      	adds	r2, r7, #7
 8014d74:	7812      	ldrb	r2, [r2, #0]
 8014d76:	0011      	movs	r1, r2
 8014d78:	2203      	movs	r2, #3
 8014d7a:	400a      	ands	r2, r1
 8014d7c:	00d2      	lsls	r2, r2, #3
 8014d7e:	21ff      	movs	r1, #255	@ 0xff
 8014d80:	4091      	lsls	r1, r2
 8014d82:	000a      	movs	r2, r1
 8014d84:	43d2      	mvns	r2, r2
 8014d86:	401a      	ands	r2, r3
 8014d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	019b      	lsls	r3, r3, #6
 8014d8e:	22ff      	movs	r2, #255	@ 0xff
 8014d90:	401a      	ands	r2, r3
 8014d92:	1dfb      	adds	r3, r7, #7
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	0018      	movs	r0, r3
 8014d98:	2303      	movs	r3, #3
 8014d9a:	4003      	ands	r3, r0
 8014d9c:	00db      	lsls	r3, r3, #3
 8014d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014da0:	481f      	ldr	r0, [pc, #124]	@ (8014e20 <__NVIC_SetPriority+0xd4>)
 8014da2:	1dfb      	adds	r3, r7, #7
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	b25b      	sxtb	r3, r3
 8014da8:	089b      	lsrs	r3, r3, #2
 8014daa:	430a      	orrs	r2, r1
 8014dac:	33c0      	adds	r3, #192	@ 0xc0
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8014db2:	e031      	b.n	8014e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014db4:	4a1b      	ldr	r2, [pc, #108]	@ (8014e24 <__NVIC_SetPriority+0xd8>)
 8014db6:	1dfb      	adds	r3, r7, #7
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	0019      	movs	r1, r3
 8014dbc:	230f      	movs	r3, #15
 8014dbe:	400b      	ands	r3, r1
 8014dc0:	3b08      	subs	r3, #8
 8014dc2:	089b      	lsrs	r3, r3, #2
 8014dc4:	3306      	adds	r3, #6
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	18d3      	adds	r3, r2, r3
 8014dca:	3304      	adds	r3, #4
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	1dfa      	adds	r2, r7, #7
 8014dd0:	7812      	ldrb	r2, [r2, #0]
 8014dd2:	0011      	movs	r1, r2
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	400a      	ands	r2, r1
 8014dd8:	00d2      	lsls	r2, r2, #3
 8014dda:	21ff      	movs	r1, #255	@ 0xff
 8014ddc:	4091      	lsls	r1, r2
 8014dde:	000a      	movs	r2, r1
 8014de0:	43d2      	mvns	r2, r2
 8014de2:	401a      	ands	r2, r3
 8014de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	019b      	lsls	r3, r3, #6
 8014dea:	22ff      	movs	r2, #255	@ 0xff
 8014dec:	401a      	ands	r2, r3
 8014dee:	1dfb      	adds	r3, r7, #7
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	0018      	movs	r0, r3
 8014df4:	2303      	movs	r3, #3
 8014df6:	4003      	ands	r3, r0
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014dfc:	4809      	ldr	r0, [pc, #36]	@ (8014e24 <__NVIC_SetPriority+0xd8>)
 8014dfe:	1dfb      	adds	r3, r7, #7
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	001c      	movs	r4, r3
 8014e04:	230f      	movs	r3, #15
 8014e06:	4023      	ands	r3, r4
 8014e08:	3b08      	subs	r3, #8
 8014e0a:	089b      	lsrs	r3, r3, #2
 8014e0c:	430a      	orrs	r2, r1
 8014e0e:	3306      	adds	r3, #6
 8014e10:	009b      	lsls	r3, r3, #2
 8014e12:	18c3      	adds	r3, r0, r3
 8014e14:	3304      	adds	r3, #4
 8014e16:	601a      	str	r2, [r3, #0]
}
 8014e18:	46c0      	nop			@ (mov r8, r8)
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	b003      	add	sp, #12
 8014e1e:	bd90      	pop	{r4, r7, pc}
 8014e20:	e000e100 	.word	0xe000e100
 8014e24:	e000ed00 	.word	0xe000ed00

08014e28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014e2c:	f3bf 8f4f 	dsb	sy
}
 8014e30:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014e32:	4b04      	ldr	r3, [pc, #16]	@ (8014e44 <__NVIC_SystemReset+0x1c>)
 8014e34:	4a04      	ldr	r2, [pc, #16]	@ (8014e48 <__NVIC_SystemReset+0x20>)
 8014e36:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014e38:	f3bf 8f4f 	dsb	sy
}
 8014e3c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014e3e:	46c0      	nop			@ (mov r8, r8)
 8014e40:	e7fd      	b.n	8014e3e <__NVIC_SystemReset+0x16>
 8014e42:	46c0      	nop			@ (mov r8, r8)
 8014e44:	e000ed00 	.word	0xe000ed00
 8014e48:	05fa0004 	.word	0x05fa0004

08014e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b082      	sub	sp, #8
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	1e5a      	subs	r2, r3, #1
 8014e58:	2380      	movs	r3, #128	@ 0x80
 8014e5a:	045b      	lsls	r3, r3, #17
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d301      	bcc.n	8014e64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014e60:	2301      	movs	r3, #1
 8014e62:	e010      	b.n	8014e86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014e64:	4b0a      	ldr	r3, [pc, #40]	@ (8014e90 <SysTick_Config+0x44>)
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	3a01      	subs	r2, #1
 8014e6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	425b      	negs	r3, r3
 8014e70:	2103      	movs	r1, #3
 8014e72:	0018      	movs	r0, r3
 8014e74:	f7ff ff6a 	bl	8014d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014e78:	4b05      	ldr	r3, [pc, #20]	@ (8014e90 <SysTick_Config+0x44>)
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8014e7e:	4b04      	ldr	r3, [pc, #16]	@ (8014e90 <SysTick_Config+0x44>)
 8014e80:	2207      	movs	r2, #7
 8014e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014e84:	2300      	movs	r3, #0
}
 8014e86:	0018      	movs	r0, r3
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	b002      	add	sp, #8
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	46c0      	nop			@ (mov r8, r8)
 8014e90:	e000e010 	.word	0xe000e010

08014e94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60b9      	str	r1, [r7, #8]
 8014e9c:	607a      	str	r2, [r7, #4]
 8014e9e:	210f      	movs	r1, #15
 8014ea0:	187b      	adds	r3, r7, r1
 8014ea2:	1c02      	adds	r2, r0, #0
 8014ea4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8014ea6:	68ba      	ldr	r2, [r7, #8]
 8014ea8:	187b      	adds	r3, r7, r1
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	b25b      	sxtb	r3, r3
 8014eae:	0011      	movs	r1, r2
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	f7ff ff4b 	bl	8014d4c <__NVIC_SetPriority>
}
 8014eb6:	46c0      	nop			@ (mov r8, r8)
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	b004      	add	sp, #16
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b082      	sub	sp, #8
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	0002      	movs	r2, r0
 8014ec6:	1dfb      	adds	r3, r7, #7
 8014ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014eca:	1dfb      	adds	r3, r7, #7
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	b25b      	sxtb	r3, r3
 8014ed0:	0018      	movs	r0, r3
 8014ed2:	f7ff ff21 	bl	8014d18 <__NVIC_EnableIRQ>
}
 8014ed6:	46c0      	nop			@ (mov r8, r8)
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	b002      	add	sp, #8
 8014edc:	bd80      	pop	{r7, pc}

08014ede <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014ede:	b580      	push	{r7, lr}
 8014ee0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8014ee2:	f7ff ffa1 	bl	8014e28 <__NVIC_SystemReset>

08014ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b082      	sub	sp, #8
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	0018      	movs	r0, r3
 8014ef2:	f7ff ffab 	bl	8014e4c <SysTick_Config>
 8014ef6:	0003      	movs	r3, r0
}
 8014ef8:	0018      	movs	r0, r3
 8014efa:	46bd      	mov	sp, r7
 8014efc:	b002      	add	sp, #8
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d101      	bne.n	8014f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014f0e:	2301      	movs	r3, #1
 8014f10:	e061      	b.n	8014fd6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	4a32      	ldr	r2, [pc, #200]	@ (8014fe0 <HAL_DMA_Init+0xe0>)
 8014f18:	4694      	mov	ip, r2
 8014f1a:	4463      	add	r3, ip
 8014f1c:	2114      	movs	r1, #20
 8014f1e:	0018      	movs	r0, r3
 8014f20:	f7eb f940 	bl	80001a4 <__udivsi3>
 8014f24:	0003      	movs	r3, r0
 8014f26:	009a      	lsls	r2, r3, #2
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8014fe4 <HAL_DMA_Init+0xe4>)
 8014f30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2225      	movs	r2, #37	@ 0x25
 8014f36:	2102      	movs	r1, #2
 8014f38:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	4a28      	ldr	r2, [pc, #160]	@ (8014fe8 <HAL_DMA_Init+0xe8>)
 8014f46:	4013      	ands	r3, r2
 8014f48:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8014f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	691b      	ldr	r3, [r3, #16]
 8014f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	699b      	ldr	r3, [r3, #24]
 8014f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6a1b      	ldr	r3, [r3, #32]
 8014f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	4313      	orrs	r3, r2
 8014f76:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	68fa      	ldr	r2, [r7, #12]
 8014f7e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	689a      	ldr	r2, [r3, #8]
 8014f84:	2380      	movs	r3, #128	@ 0x80
 8014f86:	01db      	lsls	r3, r3, #7
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d018      	beq.n	8014fbe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8014f8c:	4b17      	ldr	r3, [pc, #92]	@ (8014fec <HAL_DMA_Init+0xec>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f94:	211c      	movs	r1, #28
 8014f96:	400b      	ands	r3, r1
 8014f98:	210f      	movs	r1, #15
 8014f9a:	4099      	lsls	r1, r3
 8014f9c:	000b      	movs	r3, r1
 8014f9e:	43d9      	mvns	r1, r3
 8014fa0:	4b12      	ldr	r3, [pc, #72]	@ (8014fec <HAL_DMA_Init+0xec>)
 8014fa2:	400a      	ands	r2, r1
 8014fa4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8014fa6:	4b11      	ldr	r3, [pc, #68]	@ (8014fec <HAL_DMA_Init+0xec>)
 8014fa8:	6819      	ldr	r1, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	685a      	ldr	r2, [r3, #4]
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fb2:	201c      	movs	r0, #28
 8014fb4:	4003      	ands	r3, r0
 8014fb6:	409a      	lsls	r2, r3
 8014fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8014fec <HAL_DMA_Init+0xec>)
 8014fba:	430a      	orrs	r2, r1
 8014fbc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2225      	movs	r2, #37	@ 0x25
 8014fc8:	2101      	movs	r1, #1
 8014fca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2224      	movs	r2, #36	@ 0x24
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	0018      	movs	r0, r3
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	b004      	add	sp, #16
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	46c0      	nop			@ (mov r8, r8)
 8014fe0:	bffdfff8 	.word	0xbffdfff8
 8014fe4:	40020000 	.word	0x40020000
 8014fe8:	ffff800f 	.word	0xffff800f
 8014fec:	400200a8 	.word	0x400200a8

08014ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014ffe:	2317      	movs	r3, #23
 8015000:	18fb      	adds	r3, r7, r3
 8015002:	2200      	movs	r2, #0
 8015004:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	2224      	movs	r2, #36	@ 0x24
 801500a:	5c9b      	ldrb	r3, [r3, r2]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d101      	bne.n	8015014 <HAL_DMA_Start_IT+0x24>
 8015010:	2302      	movs	r3, #2
 8015012:	e04f      	b.n	80150b4 <HAL_DMA_Start_IT+0xc4>
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2224      	movs	r2, #36	@ 0x24
 8015018:	2101      	movs	r1, #1
 801501a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2225      	movs	r2, #37	@ 0x25
 8015020:	5c9b      	ldrb	r3, [r3, r2]
 8015022:	b2db      	uxtb	r3, r3
 8015024:	2b01      	cmp	r3, #1
 8015026:	d13a      	bne.n	801509e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2225      	movs	r2, #37	@ 0x25
 801502c:	2102      	movs	r1, #2
 801502e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2200      	movs	r2, #0
 8015034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2101      	movs	r1, #1
 8015042:	438a      	bics	r2, r1
 8015044:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	68b9      	ldr	r1, [r7, #8]
 801504c:	68f8      	ldr	r0, [r7, #12]
 801504e:	f000 f976 	bl	801533e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015056:	2b00      	cmp	r3, #0
 8015058:	d008      	beq.n	801506c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	210e      	movs	r1, #14
 8015066:	430a      	orrs	r2, r1
 8015068:	601a      	str	r2, [r3, #0]
 801506a:	e00f      	b.n	801508c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2104      	movs	r1, #4
 8015078:	438a      	bics	r2, r1
 801507a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	210a      	movs	r1, #10
 8015088:	430a      	orrs	r2, r1
 801508a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	2101      	movs	r1, #1
 8015098:	430a      	orrs	r2, r1
 801509a:	601a      	str	r2, [r3, #0]
 801509c:	e007      	b.n	80150ae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2224      	movs	r2, #36	@ 0x24
 80150a2:	2100      	movs	r1, #0
 80150a4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80150a6:	2317      	movs	r3, #23
 80150a8:	18fb      	adds	r3, r7, r3
 80150aa:	2202      	movs	r2, #2
 80150ac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80150ae:	2317      	movs	r3, #23
 80150b0:	18fb      	adds	r3, r7, r3
 80150b2:	781b      	ldrb	r3, [r3, #0]
}
 80150b4:	0018      	movs	r0, r3
 80150b6:	46bd      	mov	sp, r7
 80150b8:	b006      	add	sp, #24
 80150ba:	bd80      	pop	{r7, pc}

080150bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80150c4:	230f      	movs	r3, #15
 80150c6:	18fb      	adds	r3, r7, r3
 80150c8:	2200      	movs	r2, #0
 80150ca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2225      	movs	r2, #37	@ 0x25
 80150d0:	5c9b      	ldrb	r3, [r3, r2]
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	2b02      	cmp	r3, #2
 80150d6:	d008      	beq.n	80150ea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2204      	movs	r2, #4
 80150dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2224      	movs	r2, #36	@ 0x24
 80150e2:	2100      	movs	r1, #0
 80150e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80150e6:	2301      	movs	r3, #1
 80150e8:	e024      	b.n	8015134 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	210e      	movs	r1, #14
 80150f6:	438a      	bics	r2, r1
 80150f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	2101      	movs	r1, #1
 8015106:	438a      	bics	r2, r1
 8015108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801510e:	221c      	movs	r2, #28
 8015110:	401a      	ands	r2, r3
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015116:	2101      	movs	r1, #1
 8015118:	4091      	lsls	r1, r2
 801511a:	000a      	movs	r2, r1
 801511c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2225      	movs	r2, #37	@ 0x25
 8015122:	2101      	movs	r1, #1
 8015124:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2224      	movs	r2, #36	@ 0x24
 801512a:	2100      	movs	r1, #0
 801512c:	5499      	strb	r1, [r3, r2]

    return status;
 801512e:	230f      	movs	r3, #15
 8015130:	18fb      	adds	r3, r7, r3
 8015132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015134:	0018      	movs	r0, r3
 8015136:	46bd      	mov	sp, r7
 8015138:	b004      	add	sp, #16
 801513a:	bd80      	pop	{r7, pc}

0801513c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b084      	sub	sp, #16
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015144:	210f      	movs	r1, #15
 8015146:	187b      	adds	r3, r7, r1
 8015148:	2200      	movs	r2, #0
 801514a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2225      	movs	r2, #37	@ 0x25
 8015150:	5c9b      	ldrb	r3, [r3, r2]
 8015152:	b2db      	uxtb	r3, r3
 8015154:	2b02      	cmp	r3, #2
 8015156:	d006      	beq.n	8015166 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2204      	movs	r2, #4
 801515c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801515e:	187b      	adds	r3, r7, r1
 8015160:	2201      	movs	r2, #1
 8015162:	701a      	strb	r2, [r3, #0]
 8015164:	e02a      	b.n	80151bc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	210e      	movs	r1, #14
 8015172:	438a      	bics	r2, r1
 8015174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	2101      	movs	r1, #1
 8015182:	438a      	bics	r2, r1
 8015184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801518a:	221c      	movs	r2, #28
 801518c:	401a      	ands	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015192:	2101      	movs	r1, #1
 8015194:	4091      	lsls	r1, r2
 8015196:	000a      	movs	r2, r1
 8015198:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2225      	movs	r2, #37	@ 0x25
 801519e:	2101      	movs	r1, #1
 80151a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2224      	movs	r2, #36	@ 0x24
 80151a6:	2100      	movs	r1, #0
 80151a8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d004      	beq.n	80151bc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151b6:	687a      	ldr	r2, [r7, #4]
 80151b8:	0010      	movs	r0, r2
 80151ba:	4798      	blx	r3
    }
  }
  return status;
 80151bc:	230f      	movs	r3, #15
 80151be:	18fb      	adds	r3, r7, r3
 80151c0:	781b      	ldrb	r3, [r3, #0]
}
 80151c2:	0018      	movs	r0, r3
 80151c4:	46bd      	mov	sp, r7
 80151c6:	b004      	add	sp, #16
 80151c8:	bd80      	pop	{r7, pc}

080151ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b084      	sub	sp, #16
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80151e6:	221c      	movs	r2, #28
 80151e8:	4013      	ands	r3, r2
 80151ea:	2204      	movs	r2, #4
 80151ec:	409a      	lsls	r2, r3
 80151ee:	0013      	movs	r3, r2
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	4013      	ands	r3, r2
 80151f4:	d026      	beq.n	8015244 <HAL_DMA_IRQHandler+0x7a>
 80151f6:	68bb      	ldr	r3, [r7, #8]
 80151f8:	2204      	movs	r2, #4
 80151fa:	4013      	ands	r3, r2
 80151fc:	d022      	beq.n	8015244 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2220      	movs	r2, #32
 8015206:	4013      	ands	r3, r2
 8015208:	d107      	bne.n	801521a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2104      	movs	r1, #4
 8015216:	438a      	bics	r2, r1
 8015218:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801521e:	221c      	movs	r2, #28
 8015220:	401a      	ands	r2, r3
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015226:	2104      	movs	r1, #4
 8015228:	4091      	lsls	r1, r2
 801522a:	000a      	movs	r2, r1
 801522c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015232:	2b00      	cmp	r3, #0
 8015234:	d100      	bne.n	8015238 <HAL_DMA_IRQHandler+0x6e>
 8015236:	e071      	b.n	801531c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	0010      	movs	r0, r2
 8015240:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8015242:	e06b      	b.n	801531c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015248:	221c      	movs	r2, #28
 801524a:	4013      	ands	r3, r2
 801524c:	2202      	movs	r2, #2
 801524e:	409a      	lsls	r2, r3
 8015250:	0013      	movs	r3, r2
 8015252:	68fa      	ldr	r2, [r7, #12]
 8015254:	4013      	ands	r3, r2
 8015256:	d02d      	beq.n	80152b4 <HAL_DMA_IRQHandler+0xea>
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	2202      	movs	r2, #2
 801525c:	4013      	ands	r3, r2
 801525e:	d029      	beq.n	80152b4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	2220      	movs	r2, #32
 8015268:	4013      	ands	r3, r2
 801526a:	d10b      	bne.n	8015284 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	210a      	movs	r1, #10
 8015278:	438a      	bics	r2, r1
 801527a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2225      	movs	r2, #37	@ 0x25
 8015280:	2101      	movs	r1, #1
 8015282:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015288:	221c      	movs	r2, #28
 801528a:	401a      	ands	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015290:	2102      	movs	r1, #2
 8015292:	4091      	lsls	r1, r2
 8015294:	000a      	movs	r2, r1
 8015296:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2224      	movs	r2, #36	@ 0x24
 801529c:	2100      	movs	r1, #0
 801529e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d039      	beq.n	801531c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	0010      	movs	r0, r2
 80152b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80152b2:	e033      	b.n	801531c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152b8:	221c      	movs	r2, #28
 80152ba:	4013      	ands	r3, r2
 80152bc:	2208      	movs	r2, #8
 80152be:	409a      	lsls	r2, r3
 80152c0:	0013      	movs	r3, r2
 80152c2:	68fa      	ldr	r2, [r7, #12]
 80152c4:	4013      	ands	r3, r2
 80152c6:	d02a      	beq.n	801531e <HAL_DMA_IRQHandler+0x154>
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	2208      	movs	r2, #8
 80152cc:	4013      	ands	r3, r2
 80152ce:	d026      	beq.n	801531e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	210e      	movs	r1, #14
 80152dc:	438a      	bics	r2, r1
 80152de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152e4:	221c      	movs	r2, #28
 80152e6:	401a      	ands	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152ec:	2101      	movs	r1, #1
 80152ee:	4091      	lsls	r1, r2
 80152f0:	000a      	movs	r2, r1
 80152f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2201      	movs	r2, #1
 80152f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2225      	movs	r2, #37	@ 0x25
 80152fe:	2101      	movs	r1, #1
 8015300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2224      	movs	r2, #36	@ 0x24
 8015306:	2100      	movs	r1, #0
 8015308:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	0010      	movs	r0, r2
 801531a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801531c:	46c0      	nop			@ (mov r8, r8)
 801531e:	46c0      	nop			@ (mov r8, r8)
}
 8015320:	46bd      	mov	sp, r7
 8015322:	b004      	add	sp, #16
 8015324:	bd80      	pop	{r7, pc}

08015326 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015326:	b580      	push	{r7, lr}
 8015328:	b082      	sub	sp, #8
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2225      	movs	r2, #37	@ 0x25
 8015332:	5c9b      	ldrb	r3, [r3, r2]
 8015334:	b2db      	uxtb	r3, r3
}
 8015336:	0018      	movs	r0, r3
 8015338:	46bd      	mov	sp, r7
 801533a:	b002      	add	sp, #8
 801533c:	bd80      	pop	{r7, pc}

0801533e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801533e:	b580      	push	{r7, lr}
 8015340:	b084      	sub	sp, #16
 8015342:	af00      	add	r7, sp, #0
 8015344:	60f8      	str	r0, [r7, #12]
 8015346:	60b9      	str	r1, [r7, #8]
 8015348:	607a      	str	r2, [r7, #4]
 801534a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015350:	221c      	movs	r2, #28
 8015352:	401a      	ands	r2, r3
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015358:	2101      	movs	r1, #1
 801535a:	4091      	lsls	r1, r2
 801535c:	000a      	movs	r2, r1
 801535e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	2b10      	cmp	r3, #16
 801536e:	d108      	bne.n	8015382 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	687a      	ldr	r2, [r7, #4]
 8015376:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	68ba      	ldr	r2, [r7, #8]
 801537e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015380:	e007      	b.n	8015392 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	68ba      	ldr	r2, [r7, #8]
 8015388:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	60da      	str	r2, [r3, #12]
}
 8015392:	46c0      	nop			@ (mov r8, r8)
 8015394:	46bd      	mov	sp, r7
 8015396:	b004      	add	sp, #16
 8015398:	bd80      	pop	{r7, pc}
	...

0801539c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80153a4:	f7ff f8d2 	bl	801454c <HAL_GetTick>
 80153a8:	0003      	movs	r3, r0
 80153aa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80153ac:	e00f      	b.n	80153ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	3301      	adds	r3, #1
 80153b2:	d00c      	beq.n	80153ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d007      	beq.n	80153ca <FLASH_WaitForLastOperation+0x2e>
 80153ba:	f7ff f8c7 	bl	801454c <HAL_GetTick>
 80153be:	0002      	movs	r2, r0
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d201      	bcs.n	80153ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80153ca:	2303      	movs	r3, #3
 80153cc:	e052      	b.n	8015474 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80153ce:	4b2b      	ldr	r3, [pc, #172]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 80153d0:	699b      	ldr	r3, [r3, #24]
 80153d2:	2201      	movs	r2, #1
 80153d4:	4013      	ands	r3, r2
 80153d6:	2b01      	cmp	r3, #1
 80153d8:	d0e9      	beq.n	80153ae <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80153da:	4b28      	ldr	r3, [pc, #160]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 80153dc:	699b      	ldr	r3, [r3, #24]
 80153de:	2202      	movs	r2, #2
 80153e0:	4013      	ands	r3, r2
 80153e2:	2b02      	cmp	r3, #2
 80153e4:	d102      	bne.n	80153ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80153e6:	4b25      	ldr	r3, [pc, #148]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 80153e8:	2202      	movs	r2, #2
 80153ea:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80153ec:	4b23      	ldr	r3, [pc, #140]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 80153ee:	699a      	ldr	r2, [r3, #24]
 80153f0:	2380      	movs	r3, #128	@ 0x80
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	401a      	ands	r2, r3
 80153f6:	2380      	movs	r3, #128	@ 0x80
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d035      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80153fe:	4b1f      	ldr	r3, [pc, #124]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 8015400:	699a      	ldr	r2, [r3, #24]
 8015402:	2380      	movs	r3, #128	@ 0x80
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015408:	2380      	movs	r3, #128	@ 0x80
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	429a      	cmp	r2, r3
 801540e:	d02c      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015410:	4b1a      	ldr	r3, [pc, #104]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 8015412:	699a      	ldr	r2, [r3, #24]
 8015414:	2380      	movs	r3, #128	@ 0x80
 8015416:	00db      	lsls	r3, r3, #3
 8015418:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801541a:	2380      	movs	r3, #128	@ 0x80
 801541c:	00db      	lsls	r3, r3, #3
 801541e:	429a      	cmp	r2, r3
 8015420:	d023      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015422:	4b16      	ldr	r3, [pc, #88]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 8015424:	699a      	ldr	r2, [r3, #24]
 8015426:	2380      	movs	r3, #128	@ 0x80
 8015428:	011b      	lsls	r3, r3, #4
 801542a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801542c:	2380      	movs	r3, #128	@ 0x80
 801542e:	011b      	lsls	r3, r3, #4
 8015430:	429a      	cmp	r2, r3
 8015432:	d01a      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015434:	4b11      	ldr	r3, [pc, #68]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 8015436:	699a      	ldr	r2, [r3, #24]
 8015438:	2380      	movs	r3, #128	@ 0x80
 801543a:	019b      	lsls	r3, r3, #6
 801543c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801543e:	2380      	movs	r3, #128	@ 0x80
 8015440:	019b      	lsls	r3, r3, #6
 8015442:	429a      	cmp	r2, r3
 8015444:	d011      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015446:	4b0d      	ldr	r3, [pc, #52]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 8015448:	699a      	ldr	r2, [r3, #24]
 801544a:	2380      	movs	r3, #128	@ 0x80
 801544c:	029b      	lsls	r3, r3, #10
 801544e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015450:	2380      	movs	r3, #128	@ 0x80
 8015452:	029b      	lsls	r3, r3, #10
 8015454:	429a      	cmp	r2, r3
 8015456:	d008      	beq.n	801546a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015458:	4b08      	ldr	r3, [pc, #32]	@ (801547c <FLASH_WaitForLastOperation+0xe0>)
 801545a:	699a      	ldr	r2, [r3, #24]
 801545c:	2380      	movs	r3, #128	@ 0x80
 801545e:	025b      	lsls	r3, r3, #9
 8015460:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015462:	2380      	movs	r3, #128	@ 0x80
 8015464:	025b      	lsls	r3, r3, #9
 8015466:	429a      	cmp	r2, r3
 8015468:	d103      	bne.n	8015472 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801546a:	f000 f809 	bl	8015480 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801546e:	2301      	movs	r3, #1
 8015470:	e000      	b.n	8015474 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015472:	2300      	movs	r3, #0
}
 8015474:	0018      	movs	r0, r3
 8015476:	46bd      	mov	sp, r7
 8015478:	b004      	add	sp, #16
 801547a:	bd80      	pop	{r7, pc}
 801547c:	40022000 	.word	0x40022000

08015480 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8015486:	2300      	movs	r3, #0
 8015488:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801548a:	4b49      	ldr	r3, [pc, #292]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 801548c:	699a      	ldr	r2, [r3, #24]
 801548e:	2380      	movs	r3, #128	@ 0x80
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	401a      	ands	r2, r3
 8015494:	2380      	movs	r3, #128	@ 0x80
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	429a      	cmp	r2, r3
 801549a:	d10a      	bne.n	80154b2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801549c:	4b45      	ldr	r3, [pc, #276]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 801549e:	695b      	ldr	r3, [r3, #20]
 80154a0:	2202      	movs	r2, #2
 80154a2:	431a      	orrs	r2, r3
 80154a4:	4b43      	ldr	r3, [pc, #268]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 80154a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2280      	movs	r2, #128	@ 0x80
 80154ac:	0052      	lsls	r2, r2, #1
 80154ae:	4313      	orrs	r3, r2
 80154b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80154b2:	4b3f      	ldr	r3, [pc, #252]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 80154b4:	699a      	ldr	r2, [r3, #24]
 80154b6:	2380      	movs	r3, #128	@ 0x80
 80154b8:	009b      	lsls	r3, r3, #2
 80154ba:	401a      	ands	r2, r3
 80154bc:	2380      	movs	r3, #128	@ 0x80
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d10a      	bne.n	80154da <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80154c4:	4b3b      	ldr	r3, [pc, #236]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 80154c6:	695b      	ldr	r3, [r3, #20]
 80154c8:	2201      	movs	r2, #1
 80154ca:	431a      	orrs	r2, r3
 80154cc:	4b39      	ldr	r3, [pc, #228]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 80154ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2280      	movs	r2, #128	@ 0x80
 80154d4:	0092      	lsls	r2, r2, #2
 80154d6:	4313      	orrs	r3, r2
 80154d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80154da:	4b35      	ldr	r3, [pc, #212]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 80154dc:	699a      	ldr	r2, [r3, #24]
 80154de:	2380      	movs	r3, #128	@ 0x80
 80154e0:	00db      	lsls	r3, r3, #3
 80154e2:	401a      	ands	r2, r3
 80154e4:	2380      	movs	r3, #128	@ 0x80
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d10a      	bne.n	8015502 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80154ec:	4b31      	ldr	r3, [pc, #196]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 80154ee:	695b      	ldr	r3, [r3, #20]
 80154f0:	2208      	movs	r2, #8
 80154f2:	431a      	orrs	r2, r3
 80154f4:	4b2f      	ldr	r3, [pc, #188]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 80154f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2280      	movs	r2, #128	@ 0x80
 80154fc:	00d2      	lsls	r2, r2, #3
 80154fe:	4313      	orrs	r3, r2
 8015500:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8015502:	4b2b      	ldr	r3, [pc, #172]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 8015504:	699a      	ldr	r2, [r3, #24]
 8015506:	2380      	movs	r3, #128	@ 0x80
 8015508:	011b      	lsls	r3, r3, #4
 801550a:	401a      	ands	r2, r3
 801550c:	2380      	movs	r3, #128	@ 0x80
 801550e:	011b      	lsls	r3, r3, #4
 8015510:	429a      	cmp	r2, r3
 8015512:	d10a      	bne.n	801552a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015514:	4b27      	ldr	r3, [pc, #156]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 8015516:	695b      	ldr	r3, [r3, #20]
 8015518:	2204      	movs	r2, #4
 801551a:	431a      	orrs	r2, r3
 801551c:	4b25      	ldr	r3, [pc, #148]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 801551e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2280      	movs	r2, #128	@ 0x80
 8015524:	0112      	lsls	r2, r2, #4
 8015526:	4313      	orrs	r3, r2
 8015528:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801552a:	4b21      	ldr	r3, [pc, #132]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 801552c:	699a      	ldr	r2, [r3, #24]
 801552e:	2380      	movs	r3, #128	@ 0x80
 8015530:	019b      	lsls	r3, r3, #6
 8015532:	401a      	ands	r2, r3
 8015534:	2380      	movs	r3, #128	@ 0x80
 8015536:	019b      	lsls	r3, r3, #6
 8015538:	429a      	cmp	r2, r3
 801553a:	d10a      	bne.n	8015552 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801553c:	4b1d      	ldr	r3, [pc, #116]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 801553e:	695b      	ldr	r3, [r3, #20]
 8015540:	2210      	movs	r2, #16
 8015542:	431a      	orrs	r2, r3
 8015544:	4b1b      	ldr	r3, [pc, #108]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 8015546:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2280      	movs	r2, #128	@ 0x80
 801554c:	0192      	lsls	r2, r2, #6
 801554e:	4313      	orrs	r3, r2
 8015550:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8015552:	4b17      	ldr	r3, [pc, #92]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 8015554:	699a      	ldr	r2, [r3, #24]
 8015556:	2380      	movs	r3, #128	@ 0x80
 8015558:	029b      	lsls	r3, r3, #10
 801555a:	401a      	ands	r2, r3
 801555c:	2380      	movs	r3, #128	@ 0x80
 801555e:	029b      	lsls	r3, r3, #10
 8015560:	429a      	cmp	r2, r3
 8015562:	d109      	bne.n	8015578 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015564:	4b13      	ldr	r3, [pc, #76]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 8015566:	695b      	ldr	r3, [r3, #20]
 8015568:	2220      	movs	r2, #32
 801556a:	431a      	orrs	r2, r3
 801556c:	4b11      	ldr	r3, [pc, #68]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 801556e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2220      	movs	r2, #32
 8015574:	4313      	orrs	r3, r2
 8015576:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015578:	4b0d      	ldr	r3, [pc, #52]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 801557a:	699a      	ldr	r2, [r3, #24]
 801557c:	2380      	movs	r3, #128	@ 0x80
 801557e:	025b      	lsls	r3, r3, #9
 8015580:	401a      	ands	r2, r3
 8015582:	2380      	movs	r3, #128	@ 0x80
 8015584:	025b      	lsls	r3, r3, #9
 8015586:	429a      	cmp	r2, r3
 8015588:	d10a      	bne.n	80155a0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801558a:	4b0a      	ldr	r3, [pc, #40]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 801558c:	695b      	ldr	r3, [r3, #20]
 801558e:	2240      	movs	r2, #64	@ 0x40
 8015590:	431a      	orrs	r2, r3
 8015592:	4b08      	ldr	r3, [pc, #32]	@ (80155b4 <FLASH_SetErrorCode+0x134>)
 8015594:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2280      	movs	r2, #128	@ 0x80
 801559a:	0252      	lsls	r2, r2, #9
 801559c:	4313      	orrs	r3, r2
 801559e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80155a0:	4b03      	ldr	r3, [pc, #12]	@ (80155b0 <FLASH_SetErrorCode+0x130>)
 80155a2:	687a      	ldr	r2, [r7, #4]
 80155a4:	619a      	str	r2, [r3, #24]
}  
 80155a6:	46c0      	nop			@ (mov r8, r8)
 80155a8:	46bd      	mov	sp, r7
 80155aa:	b002      	add	sp, #8
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	46c0      	nop			@ (mov r8, r8)
 80155b0:	40022000 	.word	0x40022000
 80155b4:	20002374 	.word	0x20002374

080155b8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80155be:	4b12      	ldr	r3, [pc, #72]	@ (8015608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	2201      	movs	r2, #1
 80155c4:	4013      	ands	r3, r2
 80155c6:	d019      	beq.n	80155fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80155c8:	f3ef 8310 	mrs	r3, PRIMASK
 80155cc:	607b      	str	r3, [r7, #4]
  return(result);
 80155ce:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80155d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80155d2:	b672      	cpsid	i
}
 80155d4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80155d6:	4b0c      	ldr	r3, [pc, #48]	@ (8015608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80155d8:	4a0c      	ldr	r2, [pc, #48]	@ (801560c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80155da:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80155dc:	4b0a      	ldr	r3, [pc, #40]	@ (8015608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80155de:	4a0c      	ldr	r2, [pc, #48]	@ (8015610 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80155e0:	60da      	str	r2, [r3, #12]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	f383 8810 	msr	PRIMASK, r3
}
 80155ec:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80155ee:	4b06      	ldr	r3, [pc, #24]	@ (8015608 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	2201      	movs	r2, #1
 80155f4:	4013      	ands	r3, r2
 80155f6:	d001      	beq.n	80155fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80155f8:	2301      	movs	r3, #1
 80155fa:	e000      	b.n	80155fe <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80155fc:	2300      	movs	r3, #0
}
 80155fe:	0018      	movs	r0, r3
 8015600:	46bd      	mov	sp, r7
 8015602:	b004      	add	sp, #16
 8015604:	bd80      	pop	{r7, pc}
 8015606:	46c0      	nop			@ (mov r8, r8)
 8015608:	40022000 	.word	0x40022000
 801560c:	89abcdef 	.word	0x89abcdef
 8015610:	02030405 	.word	0x02030405

08015614 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015618:	4b04      	ldr	r3, [pc, #16]	@ (801562c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801561a:	685a      	ldr	r2, [r3, #4]
 801561c:	4b03      	ldr	r3, [pc, #12]	@ (801562c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801561e:	2101      	movs	r1, #1
 8015620:	430a      	orrs	r2, r1
 8015622:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015624:	2300      	movs	r3, #0
}
 8015626:	0018      	movs	r0, r3
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	40022000 	.word	0x40022000

08015630 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015630:	b5b0      	push	{r4, r5, r7, lr}
 8015632:	b084      	sub	sp, #16
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015638:	250f      	movs	r5, #15
 801563a:	197b      	adds	r3, r7, r5
 801563c:	2200      	movs	r2, #0
 801563e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015640:	197c      	adds	r4, r7, r5
 8015642:	4b0f      	ldr	r3, [pc, #60]	@ (8015680 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015644:	0018      	movs	r0, r3
 8015646:	f7ff fea9 	bl	801539c <FLASH_WaitForLastOperation>
 801564a:	0003      	movs	r3, r0
 801564c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801564e:	0029      	movs	r1, r5
 8015650:	187b      	adds	r3, r7, r1
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d10c      	bne.n	8015672 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015658:	4b0a      	ldr	r3, [pc, #40]	@ (8015684 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801565a:	2200      	movs	r2, #0
 801565c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015664:	187c      	adds	r4, r7, r1
 8015666:	4b06      	ldr	r3, [pc, #24]	@ (8015680 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015668:	0018      	movs	r0, r3
 801566a:	f7ff fe97 	bl	801539c <FLASH_WaitForLastOperation>
 801566e:	0003      	movs	r3, r0
 8015670:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015672:	230f      	movs	r3, #15
 8015674:	18fb      	adds	r3, r7, r3
 8015676:	781b      	ldrb	r3, [r3, #0]
}  
 8015678:	0018      	movs	r0, r3
 801567a:	46bd      	mov	sp, r7
 801567c:	b004      	add	sp, #16
 801567e:	bdb0      	pop	{r4, r5, r7, pc}
 8015680:	0000c350 	.word	0x0000c350
 8015684:	20002374 	.word	0x20002374

08015688 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015688:	b5b0      	push	{r4, r5, r7, lr}
 801568a:	b086      	sub	sp, #24
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015694:	2317      	movs	r3, #23
 8015696:	18fb      	adds	r3, r7, r3
 8015698:	2201      	movs	r2, #1
 801569a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801569c:	4b24      	ldr	r3, [pc, #144]	@ (8015730 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801569e:	7c1b      	ldrb	r3, [r3, #16]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d101      	bne.n	80156a8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80156a4:	2302      	movs	r3, #2
 80156a6:	e03e      	b.n	8015726 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80156a8:	4b21      	ldr	r3, [pc, #132]	@ (8015730 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80156aa:	2201      	movs	r2, #1
 80156ac:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80156ae:	2517      	movs	r5, #23
 80156b0:	197c      	adds	r4, r7, r5
 80156b2:	4b20      	ldr	r3, [pc, #128]	@ (8015734 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80156b4:	0018      	movs	r0, r3
 80156b6:	f7ff fe71 	bl	801539c <FLASH_WaitForLastOperation>
 80156ba:	0003      	movs	r3, r0
 80156bc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80156be:	197b      	adds	r3, r7, r5
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d129      	bne.n	801571a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80156c6:	4b1a      	ldr	r3, [pc, #104]	@ (8015730 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80156c8:	2200      	movs	r2, #0
 80156ca:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d103      	bne.n	80156da <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	601a      	str	r2, [r3, #0]
 80156d8:	e013      	b.n	8015702 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d104      	bne.n	80156ea <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	b292      	uxth	r2, r2
 80156e6:	801a      	strh	r2, [r3, #0]
 80156e8:	e00b      	b.n	8015702 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d104      	bne.n	80156fa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	b2d2      	uxtb	r2, r2
 80156f6:	701a      	strb	r2, [r3, #0]
 80156f8:	e003      	b.n	8015702 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80156fa:	2317      	movs	r3, #23
 80156fc:	18fb      	adds	r3, r7, r3
 80156fe:	2201      	movs	r2, #1
 8015700:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015702:	2217      	movs	r2, #23
 8015704:	18bb      	adds	r3, r7, r2
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d106      	bne.n	801571a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801570c:	18bc      	adds	r4, r7, r2
 801570e:	4b09      	ldr	r3, [pc, #36]	@ (8015734 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015710:	0018      	movs	r0, r3
 8015712:	f7ff fe43 	bl	801539c <FLASH_WaitForLastOperation>
 8015716:	0003      	movs	r3, r0
 8015718:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801571a:	4b05      	ldr	r3, [pc, #20]	@ (8015730 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801571c:	2200      	movs	r2, #0
 801571e:	741a      	strb	r2, [r3, #16]

  return status;
 8015720:	2317      	movs	r3, #23
 8015722:	18fb      	adds	r3, r7, r3
 8015724:	781b      	ldrb	r3, [r3, #0]
}
 8015726:	0018      	movs	r0, r3
 8015728:	46bd      	mov	sp, r7
 801572a:	b006      	add	sp, #24
 801572c:	bdb0      	pop	{r4, r5, r7, pc}
 801572e:	46c0      	nop			@ (mov r8, r8)
 8015730:	20002374 	.word	0x20002374
 8015734:	0000c350 	.word	0x0000c350

08015738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b086      	sub	sp, #24
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015742:	2300      	movs	r3, #0
 8015744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015746:	2300      	movs	r3, #0
 8015748:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801574a:	2300      	movs	r3, #0
 801574c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801574e:	e155      	b.n	80159fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2101      	movs	r1, #1
 8015756:	697a      	ldr	r2, [r7, #20]
 8015758:	4091      	lsls	r1, r2
 801575a:	000a      	movs	r2, r1
 801575c:	4013      	ands	r3, r2
 801575e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d100      	bne.n	8015768 <HAL_GPIO_Init+0x30>
 8015766:	e146      	b.n	80159f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	2203      	movs	r2, #3
 801576e:	4013      	ands	r3, r2
 8015770:	2b01      	cmp	r3, #1
 8015772:	d005      	beq.n	8015780 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	2203      	movs	r2, #3
 801577a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801577c:	2b02      	cmp	r3, #2
 801577e:	d130      	bne.n	80157e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	2203      	movs	r2, #3
 801578c:	409a      	lsls	r2, r3
 801578e:	0013      	movs	r3, r2
 8015790:	43da      	mvns	r2, r3
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	4013      	ands	r3, r2
 8015796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	68da      	ldr	r2, [r3, #12]
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	409a      	lsls	r2, r3
 80157a2:	0013      	movs	r3, r2
 80157a4:	693a      	ldr	r2, [r7, #16]
 80157a6:	4313      	orrs	r3, r2
 80157a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	693a      	ldr	r2, [r7, #16]
 80157ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80157b6:	2201      	movs	r2, #1
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	409a      	lsls	r2, r3
 80157bc:	0013      	movs	r3, r2
 80157be:	43da      	mvns	r2, r3
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	4013      	ands	r3, r2
 80157c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	091b      	lsrs	r3, r3, #4
 80157cc:	2201      	movs	r2, #1
 80157ce:	401a      	ands	r2, r3
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	409a      	lsls	r2, r3
 80157d4:	0013      	movs	r3, r2
 80157d6:	693a      	ldr	r2, [r7, #16]
 80157d8:	4313      	orrs	r3, r2
 80157da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	693a      	ldr	r2, [r7, #16]
 80157e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	2203      	movs	r2, #3
 80157e8:	4013      	ands	r3, r2
 80157ea:	2b03      	cmp	r3, #3
 80157ec:	d017      	beq.n	801581e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	2203      	movs	r2, #3
 80157fa:	409a      	lsls	r2, r3
 80157fc:	0013      	movs	r3, r2
 80157fe:	43da      	mvns	r2, r3
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	4013      	ands	r3, r2
 8015804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	689a      	ldr	r2, [r3, #8]
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	409a      	lsls	r2, r3
 8015810:	0013      	movs	r3, r2
 8015812:	693a      	ldr	r2, [r7, #16]
 8015814:	4313      	orrs	r3, r2
 8015816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	693a      	ldr	r2, [r7, #16]
 801581c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	2203      	movs	r2, #3
 8015824:	4013      	ands	r3, r2
 8015826:	2b02      	cmp	r3, #2
 8015828:	d123      	bne.n	8015872 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	08da      	lsrs	r2, r3, #3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	3208      	adds	r2, #8
 8015832:	0092      	lsls	r2, r2, #2
 8015834:	58d3      	ldr	r3, [r2, r3]
 8015836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	2207      	movs	r2, #7
 801583c:	4013      	ands	r3, r2
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	220f      	movs	r2, #15
 8015842:	409a      	lsls	r2, r3
 8015844:	0013      	movs	r3, r2
 8015846:	43da      	mvns	r2, r3
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	4013      	ands	r3, r2
 801584c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	691a      	ldr	r2, [r3, #16]
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	2107      	movs	r1, #7
 8015856:	400b      	ands	r3, r1
 8015858:	009b      	lsls	r3, r3, #2
 801585a:	409a      	lsls	r2, r3
 801585c:	0013      	movs	r3, r2
 801585e:	693a      	ldr	r2, [r7, #16]
 8015860:	4313      	orrs	r3, r2
 8015862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	08da      	lsrs	r2, r3, #3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	3208      	adds	r2, #8
 801586c:	0092      	lsls	r2, r2, #2
 801586e:	6939      	ldr	r1, [r7, #16]
 8015870:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	2203      	movs	r2, #3
 801587e:	409a      	lsls	r2, r3
 8015880:	0013      	movs	r3, r2
 8015882:	43da      	mvns	r2, r3
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	4013      	ands	r3, r2
 8015888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	2203      	movs	r2, #3
 8015890:	401a      	ands	r2, r3
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	005b      	lsls	r3, r3, #1
 8015896:	409a      	lsls	r2, r3
 8015898:	0013      	movs	r3, r2
 801589a:	693a      	ldr	r2, [r7, #16]
 801589c:	4313      	orrs	r3, r2
 801589e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	693a      	ldr	r2, [r7, #16]
 80158a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	685a      	ldr	r2, [r3, #4]
 80158aa:	23c0      	movs	r3, #192	@ 0xc0
 80158ac:	029b      	lsls	r3, r3, #10
 80158ae:	4013      	ands	r3, r2
 80158b0:	d100      	bne.n	80158b4 <HAL_GPIO_Init+0x17c>
 80158b2:	e0a0      	b.n	80159f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80158b4:	4b57      	ldr	r3, [pc, #348]	@ (8015a14 <HAL_GPIO_Init+0x2dc>)
 80158b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80158b8:	4b56      	ldr	r3, [pc, #344]	@ (8015a14 <HAL_GPIO_Init+0x2dc>)
 80158ba:	2101      	movs	r1, #1
 80158bc:	430a      	orrs	r2, r1
 80158be:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80158c0:	4a55      	ldr	r2, [pc, #340]	@ (8015a18 <HAL_GPIO_Init+0x2e0>)
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	089b      	lsrs	r3, r3, #2
 80158c6:	3302      	adds	r3, #2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	589b      	ldr	r3, [r3, r2]
 80158cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2203      	movs	r2, #3
 80158d2:	4013      	ands	r3, r2
 80158d4:	009b      	lsls	r3, r3, #2
 80158d6:	220f      	movs	r2, #15
 80158d8:	409a      	lsls	r2, r3
 80158da:	0013      	movs	r3, r2
 80158dc:	43da      	mvns	r2, r3
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	4013      	ands	r3, r2
 80158e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	23a0      	movs	r3, #160	@ 0xa0
 80158e8:	05db      	lsls	r3, r3, #23
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d01f      	beq.n	801592e <HAL_GPIO_Init+0x1f6>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4a4a      	ldr	r2, [pc, #296]	@ (8015a1c <HAL_GPIO_Init+0x2e4>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d019      	beq.n	801592a <HAL_GPIO_Init+0x1f2>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4a49      	ldr	r2, [pc, #292]	@ (8015a20 <HAL_GPIO_Init+0x2e8>)
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d013      	beq.n	8015926 <HAL_GPIO_Init+0x1ee>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4a48      	ldr	r2, [pc, #288]	@ (8015a24 <HAL_GPIO_Init+0x2ec>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d00d      	beq.n	8015922 <HAL_GPIO_Init+0x1ea>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4a47      	ldr	r2, [pc, #284]	@ (8015a28 <HAL_GPIO_Init+0x2f0>)
 801590a:	4293      	cmp	r3, r2
 801590c:	d007      	beq.n	801591e <HAL_GPIO_Init+0x1e6>
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4a46      	ldr	r2, [pc, #280]	@ (8015a2c <HAL_GPIO_Init+0x2f4>)
 8015912:	4293      	cmp	r3, r2
 8015914:	d101      	bne.n	801591a <HAL_GPIO_Init+0x1e2>
 8015916:	2305      	movs	r3, #5
 8015918:	e00a      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 801591a:	2306      	movs	r3, #6
 801591c:	e008      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 801591e:	2304      	movs	r3, #4
 8015920:	e006      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 8015922:	2303      	movs	r3, #3
 8015924:	e004      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 8015926:	2302      	movs	r3, #2
 8015928:	e002      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 801592a:	2301      	movs	r3, #1
 801592c:	e000      	b.n	8015930 <HAL_GPIO_Init+0x1f8>
 801592e:	2300      	movs	r3, #0
 8015930:	697a      	ldr	r2, [r7, #20]
 8015932:	2103      	movs	r1, #3
 8015934:	400a      	ands	r2, r1
 8015936:	0092      	lsls	r2, r2, #2
 8015938:	4093      	lsls	r3, r2
 801593a:	693a      	ldr	r2, [r7, #16]
 801593c:	4313      	orrs	r3, r2
 801593e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015940:	4935      	ldr	r1, [pc, #212]	@ (8015a18 <HAL_GPIO_Init+0x2e0>)
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	089b      	lsrs	r3, r3, #2
 8015946:	3302      	adds	r3, #2
 8015948:	009b      	lsls	r3, r3, #2
 801594a:	693a      	ldr	r2, [r7, #16]
 801594c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801594e:	4b38      	ldr	r3, [pc, #224]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 8015950:	689b      	ldr	r3, [r3, #8]
 8015952:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	43da      	mvns	r2, r3
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	4013      	ands	r3, r2
 801595c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	685a      	ldr	r2, [r3, #4]
 8015962:	2380      	movs	r3, #128	@ 0x80
 8015964:	035b      	lsls	r3, r3, #13
 8015966:	4013      	ands	r3, r2
 8015968:	d003      	beq.n	8015972 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801596a:	693a      	ldr	r2, [r7, #16]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	4313      	orrs	r3, r2
 8015970:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015972:	4b2f      	ldr	r3, [pc, #188]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 8015974:	693a      	ldr	r2, [r7, #16]
 8015976:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015978:	4b2d      	ldr	r3, [pc, #180]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	43da      	mvns	r2, r3
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	4013      	ands	r3, r2
 8015986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	685a      	ldr	r2, [r3, #4]
 801598c:	2380      	movs	r3, #128	@ 0x80
 801598e:	039b      	lsls	r3, r3, #14
 8015990:	4013      	ands	r3, r2
 8015992:	d003      	beq.n	801599c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015994:	693a      	ldr	r2, [r7, #16]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	4313      	orrs	r3, r2
 801599a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801599c:	4b24      	ldr	r3, [pc, #144]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 801599e:	693a      	ldr	r2, [r7, #16]
 80159a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80159a2:	4b23      	ldr	r3, [pc, #140]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	43da      	mvns	r2, r3
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	4013      	ands	r3, r2
 80159b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	685a      	ldr	r2, [r3, #4]
 80159b6:	2380      	movs	r3, #128	@ 0x80
 80159b8:	029b      	lsls	r3, r3, #10
 80159ba:	4013      	ands	r3, r2
 80159bc:	d003      	beq.n	80159c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80159be:	693a      	ldr	r2, [r7, #16]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	4313      	orrs	r3, r2
 80159c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80159c6:	4b1a      	ldr	r3, [pc, #104]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 80159c8:	693a      	ldr	r2, [r7, #16]
 80159ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80159cc:	4b18      	ldr	r3, [pc, #96]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	43da      	mvns	r2, r3
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	4013      	ands	r3, r2
 80159da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	685a      	ldr	r2, [r3, #4]
 80159e0:	2380      	movs	r3, #128	@ 0x80
 80159e2:	025b      	lsls	r3, r3, #9
 80159e4:	4013      	ands	r3, r2
 80159e6:	d003      	beq.n	80159f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80159e8:	693a      	ldr	r2, [r7, #16]
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	4313      	orrs	r3, r2
 80159ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80159f0:	4b0f      	ldr	r3, [pc, #60]	@ (8015a30 <HAL_GPIO_Init+0x2f8>)
 80159f2:	693a      	ldr	r2, [r7, #16]
 80159f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80159f6:	697b      	ldr	r3, [r7, #20]
 80159f8:	3301      	adds	r3, #1
 80159fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	40da      	lsrs	r2, r3
 8015a04:	1e13      	subs	r3, r2, #0
 8015a06:	d000      	beq.n	8015a0a <HAL_GPIO_Init+0x2d2>
 8015a08:	e6a2      	b.n	8015750 <HAL_GPIO_Init+0x18>
  }
}
 8015a0a:	46c0      	nop			@ (mov r8, r8)
 8015a0c:	46c0      	nop			@ (mov r8, r8)
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	b006      	add	sp, #24
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	40021000 	.word	0x40021000
 8015a18:	40010000 	.word	0x40010000
 8015a1c:	50000400 	.word	0x50000400
 8015a20:	50000800 	.word	0x50000800
 8015a24:	50000c00 	.word	0x50000c00
 8015a28:	50001000 	.word	0x50001000
 8015a2c:	50001c00 	.word	0x50001c00
 8015a30:	40010400 	.word	0x40010400

08015a34 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b084      	sub	sp, #16
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
 8015a3c:	000a      	movs	r2, r1
 8015a3e:	1cbb      	adds	r3, r7, #2
 8015a40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	691b      	ldr	r3, [r3, #16]
 8015a46:	1cba      	adds	r2, r7, #2
 8015a48:	8812      	ldrh	r2, [r2, #0]
 8015a4a:	4013      	ands	r3, r2
 8015a4c:	d004      	beq.n	8015a58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015a4e:	230f      	movs	r3, #15
 8015a50:	18fb      	adds	r3, r7, r3
 8015a52:	2201      	movs	r2, #1
 8015a54:	701a      	strb	r2, [r3, #0]
 8015a56:	e003      	b.n	8015a60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015a58:	230f      	movs	r3, #15
 8015a5a:	18fb      	adds	r3, r7, r3
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015a60:	230f      	movs	r3, #15
 8015a62:	18fb      	adds	r3, r7, r3
 8015a64:	781b      	ldrb	r3, [r3, #0]
}
 8015a66:	0018      	movs	r0, r3
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	b004      	add	sp, #16
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b082      	sub	sp, #8
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	0008      	movs	r0, r1
 8015a78:	0011      	movs	r1, r2
 8015a7a:	1cbb      	adds	r3, r7, #2
 8015a7c:	1c02      	adds	r2, r0, #0
 8015a7e:	801a      	strh	r2, [r3, #0]
 8015a80:	1c7b      	adds	r3, r7, #1
 8015a82:	1c0a      	adds	r2, r1, #0
 8015a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015a86:	1c7b      	adds	r3, r7, #1
 8015a88:	781b      	ldrb	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d004      	beq.n	8015a98 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015a8e:	1cbb      	adds	r3, r7, #2
 8015a90:	881a      	ldrh	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015a96:	e003      	b.n	8015aa0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015a98:	1cbb      	adds	r3, r7, #2
 8015a9a:	881a      	ldrh	r2, [r3, #0]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015aa0:	46c0      	nop			@ (mov r8, r8)
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	b002      	add	sp, #8
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	0002      	movs	r2, r0
 8015ab0:	1dbb      	adds	r3, r7, #6
 8015ab2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015ab4:	4b09      	ldr	r3, [pc, #36]	@ (8015adc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015ab6:	695b      	ldr	r3, [r3, #20]
 8015ab8:	1dba      	adds	r2, r7, #6
 8015aba:	8812      	ldrh	r2, [r2, #0]
 8015abc:	4013      	ands	r3, r2
 8015abe:	d008      	beq.n	8015ad2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015ac0:	4b06      	ldr	r3, [pc, #24]	@ (8015adc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015ac2:	1dba      	adds	r2, r7, #6
 8015ac4:	8812      	ldrh	r2, [r2, #0]
 8015ac6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015ac8:	1dbb      	adds	r3, r7, #6
 8015aca:	881b      	ldrh	r3, [r3, #0]
 8015acc:	0018      	movs	r0, r3
 8015ace:	f7f7 fab9 	bl	800d044 <HAL_GPIO_EXTI_Callback>
  }
}
 8015ad2:	46c0      	nop			@ (mov r8, r8)
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b002      	add	sp, #8
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	46c0      	nop			@ (mov r8, r8)
 8015adc:	40010400 	.word	0x40010400

08015ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d101      	bne.n	8015af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015aee:	2301      	movs	r3, #1
 8015af0:	e082      	b.n	8015bf8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2241      	movs	r2, #65	@ 0x41
 8015af6:	5c9b      	ldrb	r3, [r3, r2]
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d107      	bne.n	8015b0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2240      	movs	r2, #64	@ 0x40
 8015b02:	2100      	movs	r1, #0
 8015b04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	0018      	movs	r0, r3
 8015b0a:	f7f6 fd4f 	bl	800c5ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2241      	movs	r2, #65	@ 0x41
 8015b12:	2124      	movs	r1, #36	@ 0x24
 8015b14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	2101      	movs	r1, #1
 8015b22:	438a      	bics	r2, r1
 8015b24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	685a      	ldr	r2, [r3, #4]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4934      	ldr	r1, [pc, #208]	@ (8015c00 <HAL_I2C_Init+0x120>)
 8015b30:	400a      	ands	r2, r1
 8015b32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	689a      	ldr	r2, [r3, #8]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4931      	ldr	r1, [pc, #196]	@ (8015c04 <HAL_I2C_Init+0x124>)
 8015b40:	400a      	ands	r2, r1
 8015b42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	d108      	bne.n	8015b5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	689a      	ldr	r2, [r3, #8]
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2180      	movs	r1, #128	@ 0x80
 8015b56:	0209      	lsls	r1, r1, #8
 8015b58:	430a      	orrs	r2, r1
 8015b5a:	609a      	str	r2, [r3, #8]
 8015b5c:	e007      	b.n	8015b6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	689a      	ldr	r2, [r3, #8]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2184      	movs	r1, #132	@ 0x84
 8015b68:	0209      	lsls	r1, r1, #8
 8015b6a:	430a      	orrs	r2, r1
 8015b6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	68db      	ldr	r3, [r3, #12]
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d104      	bne.n	8015b80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2280      	movs	r2, #128	@ 0x80
 8015b7c:	0112      	lsls	r2, r2, #4
 8015b7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	685a      	ldr	r2, [r3, #4]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	491f      	ldr	r1, [pc, #124]	@ (8015c08 <HAL_I2C_Init+0x128>)
 8015b8c:	430a      	orrs	r2, r1
 8015b8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	68da      	ldr	r2, [r3, #12]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	491a      	ldr	r1, [pc, #104]	@ (8015c04 <HAL_I2C_Init+0x124>)
 8015b9c:	400a      	ands	r2, r1
 8015b9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	691a      	ldr	r2, [r3, #16]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	695b      	ldr	r3, [r3, #20]
 8015ba8:	431a      	orrs	r2, r3
 8015baa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	699b      	ldr	r3, [r3, #24]
 8015bb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	430a      	orrs	r2, r1
 8015bb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	69d9      	ldr	r1, [r3, #28]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6a1a      	ldr	r2, [r3, #32]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	430a      	orrs	r2, r1
 8015bc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2101      	movs	r1, #1
 8015bd6:	430a      	orrs	r2, r1
 8015bd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2241      	movs	r2, #65	@ 0x41
 8015be4:	2120      	movs	r1, #32
 8015be6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2242      	movs	r2, #66	@ 0x42
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015bf6:	2300      	movs	r3, #0
}
 8015bf8:	0018      	movs	r0, r3
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	b002      	add	sp, #8
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	f0ffffff 	.word	0xf0ffffff
 8015c04:	ffff7fff 	.word	0xffff7fff
 8015c08:	02008000 	.word	0x02008000

08015c0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015c0c:	b590      	push	{r4, r7, lr}
 8015c0e:	b089      	sub	sp, #36	@ 0x24
 8015c10:	af02      	add	r7, sp, #8
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	0008      	movs	r0, r1
 8015c16:	607a      	str	r2, [r7, #4]
 8015c18:	0019      	movs	r1, r3
 8015c1a:	230a      	movs	r3, #10
 8015c1c:	18fb      	adds	r3, r7, r3
 8015c1e:	1c02      	adds	r2, r0, #0
 8015c20:	801a      	strh	r2, [r3, #0]
 8015c22:	2308      	movs	r3, #8
 8015c24:	18fb      	adds	r3, r7, r3
 8015c26:	1c0a      	adds	r2, r1, #0
 8015c28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2241      	movs	r2, #65	@ 0x41
 8015c2e:	5c9b      	ldrb	r3, [r3, r2]
 8015c30:	b2db      	uxtb	r3, r3
 8015c32:	2b20      	cmp	r3, #32
 8015c34:	d000      	beq.n	8015c38 <HAL_I2C_Master_Transmit+0x2c>
 8015c36:	e0e7      	b.n	8015e08 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	2240      	movs	r2, #64	@ 0x40
 8015c3c:	5c9b      	ldrb	r3, [r3, r2]
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d101      	bne.n	8015c46 <HAL_I2C_Master_Transmit+0x3a>
 8015c42:	2302      	movs	r3, #2
 8015c44:	e0e1      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2240      	movs	r2, #64	@ 0x40
 8015c4a:	2101      	movs	r1, #1
 8015c4c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015c4e:	f7fe fc7d 	bl	801454c <HAL_GetTick>
 8015c52:	0003      	movs	r3, r0
 8015c54:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015c56:	2380      	movs	r3, #128	@ 0x80
 8015c58:	0219      	lsls	r1, r3, #8
 8015c5a:	68f8      	ldr	r0, [r7, #12]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	2319      	movs	r3, #25
 8015c62:	2201      	movs	r2, #1
 8015c64:	f002 faa4 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 8015c68:	1e03      	subs	r3, r0, #0
 8015c6a:	d001      	beq.n	8015c70 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	e0cc      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	2241      	movs	r2, #65	@ 0x41
 8015c74:	2121      	movs	r1, #33	@ 0x21
 8015c76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2242      	movs	r2, #66	@ 0x42
 8015c7c:	2110      	movs	r1, #16
 8015c7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2200      	movs	r2, #0
 8015c84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	2208      	movs	r2, #8
 8015c90:	18ba      	adds	r2, r7, r2
 8015c92:	8812      	ldrh	r2, [r2, #0]
 8015c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ca0:	b29b      	uxth	r3, r3
 8015ca2:	2bff      	cmp	r3, #255	@ 0xff
 8015ca4:	d911      	bls.n	8015cca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	22ff      	movs	r2, #255	@ 0xff
 8015caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	2380      	movs	r3, #128	@ 0x80
 8015cb4:	045c      	lsls	r4, r3, #17
 8015cb6:	230a      	movs	r3, #10
 8015cb8:	18fb      	adds	r3, r7, r3
 8015cba:	8819      	ldrh	r1, [r3, #0]
 8015cbc:	68f8      	ldr	r0, [r7, #12]
 8015cbe:	4b55      	ldr	r3, [pc, #340]	@ (8015e14 <HAL_I2C_Master_Transmit+0x208>)
 8015cc0:	9300      	str	r3, [sp, #0]
 8015cc2:	0023      	movs	r3, r4
 8015cc4:	f002 fcc6 	bl	8018654 <I2C_TransferConfig>
 8015cc8:	e075      	b.n	8015db6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cce:	b29a      	uxth	r2, r3
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cd8:	b2da      	uxtb	r2, r3
 8015cda:	2380      	movs	r3, #128	@ 0x80
 8015cdc:	049c      	lsls	r4, r3, #18
 8015cde:	230a      	movs	r3, #10
 8015ce0:	18fb      	adds	r3, r7, r3
 8015ce2:	8819      	ldrh	r1, [r3, #0]
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8015e14 <HAL_I2C_Master_Transmit+0x208>)
 8015ce8:	9300      	str	r3, [sp, #0]
 8015cea:	0023      	movs	r3, r4
 8015cec:	f002 fcb2 	bl	8018654 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015cf0:	e061      	b.n	8015db6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015cf2:	697a      	ldr	r2, [r7, #20]
 8015cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	0018      	movs	r0, r3
 8015cfa:	f002 faa7 	bl	801824c <I2C_WaitOnTXISFlagUntilTimeout>
 8015cfe:	1e03      	subs	r3, r0, #0
 8015d00:	d001      	beq.n	8015d06 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8015d02:	2301      	movs	r3, #1
 8015d04:	e081      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d0a:	781a      	ldrb	r2, [r3, #0]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d16:	1c5a      	adds	r2, r3, #1
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	3b01      	subs	r3, #1
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d03a      	beq.n	8015db6 <HAL_I2C_Master_Transmit+0x1aa>
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d136      	bne.n	8015db6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d4a:	68f8      	ldr	r0, [r7, #12]
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	9300      	str	r3, [sp, #0]
 8015d50:	0013      	movs	r3, r2
 8015d52:	2200      	movs	r2, #0
 8015d54:	2180      	movs	r1, #128	@ 0x80
 8015d56:	f002 fa2b 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 8015d5a:	1e03      	subs	r3, r0, #0
 8015d5c:	d001      	beq.n	8015d62 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8015d5e:	2301      	movs	r3, #1
 8015d60:	e053      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	2bff      	cmp	r3, #255	@ 0xff
 8015d6a:	d911      	bls.n	8015d90 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	22ff      	movs	r2, #255	@ 0xff
 8015d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d76:	b2da      	uxtb	r2, r3
 8015d78:	2380      	movs	r3, #128	@ 0x80
 8015d7a:	045c      	lsls	r4, r3, #17
 8015d7c:	230a      	movs	r3, #10
 8015d7e:	18fb      	adds	r3, r7, r3
 8015d80:	8819      	ldrh	r1, [r3, #0]
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	2300      	movs	r3, #0
 8015d86:	9300      	str	r3, [sp, #0]
 8015d88:	0023      	movs	r3, r4
 8015d8a:	f002 fc63 	bl	8018654 <I2C_TransferConfig>
 8015d8e:	e012      	b.n	8015db6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d94:	b29a      	uxth	r2, r3
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d9e:	b2da      	uxtb	r2, r3
 8015da0:	2380      	movs	r3, #128	@ 0x80
 8015da2:	049c      	lsls	r4, r3, #18
 8015da4:	230a      	movs	r3, #10
 8015da6:	18fb      	adds	r3, r7, r3
 8015da8:	8819      	ldrh	r1, [r3, #0]
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	2300      	movs	r3, #0
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	0023      	movs	r3, r4
 8015db2:	f002 fc4f 	bl	8018654 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015dba:	b29b      	uxth	r3, r3
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d198      	bne.n	8015cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015dc0:	697a      	ldr	r2, [r7, #20]
 8015dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	0018      	movs	r0, r3
 8015dc8:	f002 fa86 	bl	80182d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015dcc:	1e03      	subs	r3, r0, #0
 8015dce:	d001      	beq.n	8015dd4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	e01a      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2220      	movs	r2, #32
 8015dda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	685a      	ldr	r2, [r3, #4]
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	490c      	ldr	r1, [pc, #48]	@ (8015e18 <HAL_I2C_Master_Transmit+0x20c>)
 8015de8:	400a      	ands	r2, r1
 8015dea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2241      	movs	r2, #65	@ 0x41
 8015df0:	2120      	movs	r1, #32
 8015df2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2242      	movs	r2, #66	@ 0x42
 8015df8:	2100      	movs	r1, #0
 8015dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2240      	movs	r2, #64	@ 0x40
 8015e00:	2100      	movs	r1, #0
 8015e02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015e04:	2300      	movs	r3, #0
 8015e06:	e000      	b.n	8015e0a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015e08:	2302      	movs	r3, #2
  }
}
 8015e0a:	0018      	movs	r0, r3
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	b007      	add	sp, #28
 8015e10:	bd90      	pop	{r4, r7, pc}
 8015e12:	46c0      	nop			@ (mov r8, r8)
 8015e14:	80002000 	.word	0x80002000
 8015e18:	fe00e800 	.word	0xfe00e800

08015e1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015e1c:	b590      	push	{r4, r7, lr}
 8015e1e:	b089      	sub	sp, #36	@ 0x24
 8015e20:	af02      	add	r7, sp, #8
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	0008      	movs	r0, r1
 8015e26:	607a      	str	r2, [r7, #4]
 8015e28:	0019      	movs	r1, r3
 8015e2a:	230a      	movs	r3, #10
 8015e2c:	18fb      	adds	r3, r7, r3
 8015e2e:	1c02      	adds	r2, r0, #0
 8015e30:	801a      	strh	r2, [r3, #0]
 8015e32:	2308      	movs	r3, #8
 8015e34:	18fb      	adds	r3, r7, r3
 8015e36:	1c0a      	adds	r2, r1, #0
 8015e38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	2241      	movs	r2, #65	@ 0x41
 8015e3e:	5c9b      	ldrb	r3, [r3, r2]
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	2b20      	cmp	r3, #32
 8015e44:	d000      	beq.n	8015e48 <HAL_I2C_Master_Receive+0x2c>
 8015e46:	e0e8      	b.n	801601a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2240      	movs	r2, #64	@ 0x40
 8015e4c:	5c9b      	ldrb	r3, [r3, r2]
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d101      	bne.n	8015e56 <HAL_I2C_Master_Receive+0x3a>
 8015e52:	2302      	movs	r3, #2
 8015e54:	e0e2      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2240      	movs	r2, #64	@ 0x40
 8015e5a:	2101      	movs	r1, #1
 8015e5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015e5e:	f7fe fb75 	bl	801454c <HAL_GetTick>
 8015e62:	0003      	movs	r3, r0
 8015e64:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015e66:	2380      	movs	r3, #128	@ 0x80
 8015e68:	0219      	lsls	r1, r3, #8
 8015e6a:	68f8      	ldr	r0, [r7, #12]
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	2319      	movs	r3, #25
 8015e72:	2201      	movs	r2, #1
 8015e74:	f002 f99c 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 8015e78:	1e03      	subs	r3, r0, #0
 8015e7a:	d001      	beq.n	8015e80 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e0cd      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2241      	movs	r2, #65	@ 0x41
 8015e84:	2122      	movs	r1, #34	@ 0x22
 8015e86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2242      	movs	r2, #66	@ 0x42
 8015e8c:	2110      	movs	r1, #16
 8015e8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2200      	movs	r2, #0
 8015e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	2208      	movs	r2, #8
 8015ea0:	18ba      	adds	r2, r7, r2
 8015ea2:	8812      	ldrh	r2, [r2, #0]
 8015ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	2bff      	cmp	r3, #255	@ 0xff
 8015eb4:	d911      	bls.n	8015eda <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	22ff      	movs	r2, #255	@ 0xff
 8015eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ec0:	b2da      	uxtb	r2, r3
 8015ec2:	2380      	movs	r3, #128	@ 0x80
 8015ec4:	045c      	lsls	r4, r3, #17
 8015ec6:	230a      	movs	r3, #10
 8015ec8:	18fb      	adds	r3, r7, r3
 8015eca:	8819      	ldrh	r1, [r3, #0]
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	4b55      	ldr	r3, [pc, #340]	@ (8016024 <HAL_I2C_Master_Receive+0x208>)
 8015ed0:	9300      	str	r3, [sp, #0]
 8015ed2:	0023      	movs	r3, r4
 8015ed4:	f002 fbbe 	bl	8018654 <I2C_TransferConfig>
 8015ed8:	e076      	b.n	8015fc8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ede:	b29a      	uxth	r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ee8:	b2da      	uxtb	r2, r3
 8015eea:	2380      	movs	r3, #128	@ 0x80
 8015eec:	049c      	lsls	r4, r3, #18
 8015eee:	230a      	movs	r3, #10
 8015ef0:	18fb      	adds	r3, r7, r3
 8015ef2:	8819      	ldrh	r1, [r3, #0]
 8015ef4:	68f8      	ldr	r0, [r7, #12]
 8015ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8016024 <HAL_I2C_Master_Receive+0x208>)
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	0023      	movs	r3, r4
 8015efc:	f002 fbaa 	bl	8018654 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015f00:	e062      	b.n	8015fc8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f02:	697a      	ldr	r2, [r7, #20]
 8015f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	0018      	movs	r0, r3
 8015f0a:	f002 fa29 	bl	8018360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015f0e:	1e03      	subs	r3, r0, #0
 8015f10:	d001      	beq.n	8015f16 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8015f12:	2301      	movs	r3, #1
 8015f14:	e082      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f20:	b2d2      	uxtb	r2, r2
 8015f22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f28:	1c5a      	adds	r2, r3, #1
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f32:	3b01      	subs	r3, #1
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	3b01      	subs	r3, #1
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d03a      	beq.n	8015fc8 <HAL_I2C_Master_Receive+0x1ac>
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d136      	bne.n	8015fc8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f5c:	68f8      	ldr	r0, [r7, #12]
 8015f5e:	697b      	ldr	r3, [r7, #20]
 8015f60:	9300      	str	r3, [sp, #0]
 8015f62:	0013      	movs	r3, r2
 8015f64:	2200      	movs	r2, #0
 8015f66:	2180      	movs	r1, #128	@ 0x80
 8015f68:	f002 f922 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 8015f6c:	1e03      	subs	r3, r0, #0
 8015f6e:	d001      	beq.n	8015f74 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8015f70:	2301      	movs	r3, #1
 8015f72:	e053      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	2bff      	cmp	r3, #255	@ 0xff
 8015f7c:	d911      	bls.n	8015fa2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	22ff      	movs	r2, #255	@ 0xff
 8015f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f88:	b2da      	uxtb	r2, r3
 8015f8a:	2380      	movs	r3, #128	@ 0x80
 8015f8c:	045c      	lsls	r4, r3, #17
 8015f8e:	230a      	movs	r3, #10
 8015f90:	18fb      	adds	r3, r7, r3
 8015f92:	8819      	ldrh	r1, [r3, #0]
 8015f94:	68f8      	ldr	r0, [r7, #12]
 8015f96:	2300      	movs	r3, #0
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	0023      	movs	r3, r4
 8015f9c:	f002 fb5a 	bl	8018654 <I2C_TransferConfig>
 8015fa0:	e012      	b.n	8015fc8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fb0:	b2da      	uxtb	r2, r3
 8015fb2:	2380      	movs	r3, #128	@ 0x80
 8015fb4:	049c      	lsls	r4, r3, #18
 8015fb6:	230a      	movs	r3, #10
 8015fb8:	18fb      	adds	r3, r7, r3
 8015fba:	8819      	ldrh	r1, [r3, #0]
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	9300      	str	r3, [sp, #0]
 8015fc2:	0023      	movs	r3, r4
 8015fc4:	f002 fb46 	bl	8018654 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d197      	bne.n	8015f02 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015fd2:	697a      	ldr	r2, [r7, #20]
 8015fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	0018      	movs	r0, r3
 8015fda:	f002 f97d 	bl	80182d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015fde:	1e03      	subs	r3, r0, #0
 8015fe0:	d001      	beq.n	8015fe6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	e01a      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	2220      	movs	r2, #32
 8015fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	685a      	ldr	r2, [r3, #4]
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	490b      	ldr	r1, [pc, #44]	@ (8016028 <HAL_I2C_Master_Receive+0x20c>)
 8015ffa:	400a      	ands	r2, r1
 8015ffc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2241      	movs	r2, #65	@ 0x41
 8016002:	2120      	movs	r1, #32
 8016004:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2242      	movs	r2, #66	@ 0x42
 801600a:	2100      	movs	r1, #0
 801600c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2240      	movs	r2, #64	@ 0x40
 8016012:	2100      	movs	r1, #0
 8016014:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016016:	2300      	movs	r3, #0
 8016018:	e000      	b.n	801601c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 801601a:	2302      	movs	r3, #2
  }
}
 801601c:	0018      	movs	r0, r3
 801601e:	46bd      	mov	sp, r7
 8016020:	b007      	add	sp, #28
 8016022:	bd90      	pop	{r4, r7, pc}
 8016024:	80002400 	.word	0x80002400
 8016028:	fe00e800 	.word	0xfe00e800

0801602c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801602c:	b5b0      	push	{r4, r5, r7, lr}
 801602e:	b088      	sub	sp, #32
 8016030:	af02      	add	r7, sp, #8
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	0008      	movs	r0, r1
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	0019      	movs	r1, r3
 801603a:	230a      	movs	r3, #10
 801603c:	18fb      	adds	r3, r7, r3
 801603e:	1c02      	adds	r2, r0, #0
 8016040:	801a      	strh	r2, [r3, #0]
 8016042:	2308      	movs	r3, #8
 8016044:	18fb      	adds	r3, r7, r3
 8016046:	1c0a      	adds	r2, r1, #0
 8016048:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2241      	movs	r2, #65	@ 0x41
 801604e:	5c9b      	ldrb	r3, [r3, r2]
 8016050:	b2db      	uxtb	r3, r3
 8016052:	2b20      	cmp	r3, #32
 8016054:	d000      	beq.n	8016058 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8016056:	e0dd      	b.n	8016214 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	699a      	ldr	r2, [r3, #24]
 801605e:	2380      	movs	r3, #128	@ 0x80
 8016060:	021b      	lsls	r3, r3, #8
 8016062:	401a      	ands	r2, r3
 8016064:	2380      	movs	r3, #128	@ 0x80
 8016066:	021b      	lsls	r3, r3, #8
 8016068:	429a      	cmp	r2, r3
 801606a:	d101      	bne.n	8016070 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 801606c:	2302      	movs	r3, #2
 801606e:	e0d2      	b.n	8016216 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2240      	movs	r2, #64	@ 0x40
 8016074:	5c9b      	ldrb	r3, [r3, r2]
 8016076:	2b01      	cmp	r3, #1
 8016078:	d101      	bne.n	801607e <HAL_I2C_Master_Transmit_DMA+0x52>
 801607a:	2302      	movs	r3, #2
 801607c:	e0cb      	b.n	8016216 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2240      	movs	r2, #64	@ 0x40
 8016082:	2101      	movs	r1, #1
 8016084:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2241      	movs	r2, #65	@ 0x41
 801608a:	2121      	movs	r1, #33	@ 0x21
 801608c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2242      	movs	r2, #66	@ 0x42
 8016092:	2110      	movs	r1, #16
 8016094:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2200      	movs	r2, #0
 801609a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	687a      	ldr	r2, [r7, #4]
 80160a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2208      	movs	r2, #8
 80160a6:	18ba      	adds	r2, r7, r2
 80160a8:	8812      	ldrh	r2, [r2, #0]
 80160aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	4a5c      	ldr	r2, [pc, #368]	@ (8016220 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80160b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	4a5b      	ldr	r2, [pc, #364]	@ (8016224 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80160b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160bc:	b29b      	uxth	r3, r3
 80160be:	2bff      	cmp	r3, #255	@ 0xff
 80160c0:	d906      	bls.n	80160d0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	22ff      	movs	r2, #255	@ 0xff
 80160c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80160c8:	2380      	movs	r3, #128	@ 0x80
 80160ca:	045b      	lsls	r3, r3, #17
 80160cc:	617b      	str	r3, [r7, #20]
 80160ce:	e007      	b.n	80160e0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160d4:	b29a      	uxth	r2, r3
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80160da:	2380      	movs	r3, #128	@ 0x80
 80160dc:	049b      	lsls	r3, r3, #18
 80160de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d100      	bne.n	80160ea <HAL_I2C_Master_Transmit_DMA+0xbe>
 80160e8:	e078      	b.n	80161dc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d023      	beq.n	801613a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160f6:	4a4c      	ldr	r2, [pc, #304]	@ (8016228 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80160f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160fe:	4a4b      	ldr	r2, [pc, #300]	@ (801622c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8016100:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016106:	2200      	movs	r2, #0
 8016108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801610e:	2200      	movs	r2, #0
 8016110:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	3328      	adds	r3, #40	@ 0x28
 801611e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016124:	2513      	movs	r5, #19
 8016126:	197c      	adds	r4, r7, r5
 8016128:	f7fe ff62 	bl	8014ff0 <HAL_DMA_Start_IT>
 801612c:	0003      	movs	r3, r0
 801612e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016130:	197b      	adds	r3, r7, r5
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d13d      	bne.n	80161b4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8016138:	e013      	b.n	8016162 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2241      	movs	r2, #65	@ 0x41
 801613e:	2120      	movs	r1, #32
 8016140:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2242      	movs	r2, #66	@ 0x42
 8016146:	2100      	movs	r1, #0
 8016148:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801614e:	2280      	movs	r2, #128	@ 0x80
 8016150:	431a      	orrs	r2, r3
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2240      	movs	r2, #64	@ 0x40
 801615a:	2100      	movs	r1, #0
 801615c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801615e:	2301      	movs	r3, #1
 8016160:	e059      	b.n	8016216 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016166:	b2da      	uxtb	r2, r3
 8016168:	697c      	ldr	r4, [r7, #20]
 801616a:	230a      	movs	r3, #10
 801616c:	18fb      	adds	r3, r7, r3
 801616e:	8819      	ldrh	r1, [r3, #0]
 8016170:	68f8      	ldr	r0, [r7, #12]
 8016172:	4b2f      	ldr	r3, [pc, #188]	@ (8016230 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8016174:	9300      	str	r3, [sp, #0]
 8016176:	0023      	movs	r3, r4
 8016178:	f002 fa6c 	bl	8018654 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016180:	b29a      	uxth	r2, r3
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	b29a      	uxth	r2, r3
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2240      	movs	r2, #64	@ 0x40
 8016192:	2100      	movs	r1, #0
 8016194:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2110      	movs	r1, #16
 801619a:	0018      	movs	r0, r3
 801619c:	f002 fa94 	bl	80186c8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2180      	movs	r1, #128	@ 0x80
 80161ac:	01c9      	lsls	r1, r1, #7
 80161ae:	430a      	orrs	r2, r1
 80161b0:	601a      	str	r2, [r3, #0]
 80161b2:	e02d      	b.n	8016210 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2241      	movs	r2, #65	@ 0x41
 80161b8:	2120      	movs	r1, #32
 80161ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2242      	movs	r2, #66	@ 0x42
 80161c0:	2100      	movs	r1, #0
 80161c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161c8:	2210      	movs	r2, #16
 80161ca:	431a      	orrs	r2, r3
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2240      	movs	r2, #64	@ 0x40
 80161d4:	2100      	movs	r1, #0
 80161d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80161d8:	2301      	movs	r3, #1
 80161da:	e01c      	b.n	8016216 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	4a15      	ldr	r2, [pc, #84]	@ (8016234 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80161e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161e6:	b2da      	uxtb	r2, r3
 80161e8:	2380      	movs	r3, #128	@ 0x80
 80161ea:	049c      	lsls	r4, r3, #18
 80161ec:	230a      	movs	r3, #10
 80161ee:	18fb      	adds	r3, r7, r3
 80161f0:	8819      	ldrh	r1, [r3, #0]
 80161f2:	68f8      	ldr	r0, [r7, #12]
 80161f4:	4b0e      	ldr	r3, [pc, #56]	@ (8016230 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80161f6:	9300      	str	r3, [sp, #0]
 80161f8:	0023      	movs	r3, r4
 80161fa:	f002 fa2b 	bl	8018654 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2240      	movs	r2, #64	@ 0x40
 8016202:	2100      	movs	r1, #0
 8016204:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2101      	movs	r1, #1
 801620a:	0018      	movs	r0, r3
 801620c:	f002 fa5c 	bl	80186c8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016210:	2300      	movs	r3, #0
 8016212:	e000      	b.n	8016216 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016214:	2302      	movs	r3, #2
  }
}
 8016216:	0018      	movs	r0, r3
 8016218:	46bd      	mov	sp, r7
 801621a:	b006      	add	sp, #24
 801621c:	bdb0      	pop	{r4, r5, r7, pc}
 801621e:	46c0      	nop			@ (mov r8, r8)
 8016220:	ffff0000 	.word	0xffff0000
 8016224:	08016f05 	.word	0x08016f05
 8016228:	08018001 	.word	0x08018001
 801622c:	08018141 	.word	0x08018141
 8016230:	80002000 	.word	0x80002000
 8016234:	08016a59 	.word	0x08016a59

08016238 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016238:	b5b0      	push	{r4, r5, r7, lr}
 801623a:	b088      	sub	sp, #32
 801623c:	af02      	add	r7, sp, #8
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	0008      	movs	r0, r1
 8016242:	607a      	str	r2, [r7, #4]
 8016244:	0019      	movs	r1, r3
 8016246:	230a      	movs	r3, #10
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	1c02      	adds	r2, r0, #0
 801624c:	801a      	strh	r2, [r3, #0]
 801624e:	2308      	movs	r3, #8
 8016250:	18fb      	adds	r3, r7, r3
 8016252:	1c0a      	adds	r2, r1, #0
 8016254:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2241      	movs	r2, #65	@ 0x41
 801625a:	5c9b      	ldrb	r3, [r3, r2]
 801625c:	b2db      	uxtb	r3, r3
 801625e:	2b20      	cmp	r3, #32
 8016260:	d000      	beq.n	8016264 <HAL_I2C_Master_Receive_DMA+0x2c>
 8016262:	e0dd      	b.n	8016420 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	699a      	ldr	r2, [r3, #24]
 801626a:	2380      	movs	r3, #128	@ 0x80
 801626c:	021b      	lsls	r3, r3, #8
 801626e:	401a      	ands	r2, r3
 8016270:	2380      	movs	r3, #128	@ 0x80
 8016272:	021b      	lsls	r3, r3, #8
 8016274:	429a      	cmp	r2, r3
 8016276:	d101      	bne.n	801627c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016278:	2302      	movs	r3, #2
 801627a:	e0d2      	b.n	8016422 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2240      	movs	r2, #64	@ 0x40
 8016280:	5c9b      	ldrb	r3, [r3, r2]
 8016282:	2b01      	cmp	r3, #1
 8016284:	d101      	bne.n	801628a <HAL_I2C_Master_Receive_DMA+0x52>
 8016286:	2302      	movs	r3, #2
 8016288:	e0cb      	b.n	8016422 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2240      	movs	r2, #64	@ 0x40
 801628e:	2101      	movs	r1, #1
 8016290:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	2241      	movs	r2, #65	@ 0x41
 8016296:	2122      	movs	r1, #34	@ 0x22
 8016298:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2242      	movs	r2, #66	@ 0x42
 801629e:	2110      	movs	r1, #16
 80162a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2200      	movs	r2, #0
 80162a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2208      	movs	r2, #8
 80162b2:	18ba      	adds	r2, r7, r2
 80162b4:	8812      	ldrh	r2, [r2, #0]
 80162b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	4a5c      	ldr	r2, [pc, #368]	@ (801642c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80162bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	4a5b      	ldr	r2, [pc, #364]	@ (8016430 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80162c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	2bff      	cmp	r3, #255	@ 0xff
 80162cc:	d906      	bls.n	80162dc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	22ff      	movs	r2, #255	@ 0xff
 80162d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80162d4:	2380      	movs	r3, #128	@ 0x80
 80162d6:	045b      	lsls	r3, r3, #17
 80162d8:	617b      	str	r3, [r7, #20]
 80162da:	e007      	b.n	80162ec <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80162e6:	2380      	movs	r3, #128	@ 0x80
 80162e8:	049b      	lsls	r3, r3, #18
 80162ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d100      	bne.n	80162f6 <HAL_I2C_Master_Receive_DMA+0xbe>
 80162f4:	e078      	b.n	80163e8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d023      	beq.n	8016346 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016302:	4a4c      	ldr	r2, [pc, #304]	@ (8016434 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8016304:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801630a:	4a4b      	ldr	r2, [pc, #300]	@ (8016438 <HAL_I2C_Master_Receive_DMA+0x200>)
 801630c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016312:	2200      	movs	r2, #0
 8016314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801631a:	2200      	movs	r2, #0
 801631c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	3324      	adds	r3, #36	@ 0x24
 8016328:	0019      	movs	r1, r3
 801632a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016330:	2513      	movs	r5, #19
 8016332:	197c      	adds	r4, r7, r5
 8016334:	f7fe fe5c 	bl	8014ff0 <HAL_DMA_Start_IT>
 8016338:	0003      	movs	r3, r0
 801633a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801633c:	197b      	adds	r3, r7, r5
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d13d      	bne.n	80163c0 <HAL_I2C_Master_Receive_DMA+0x188>
 8016344:	e013      	b.n	801636e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2241      	movs	r2, #65	@ 0x41
 801634a:	2120      	movs	r1, #32
 801634c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2242      	movs	r2, #66	@ 0x42
 8016352:	2100      	movs	r1, #0
 8016354:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801635a:	2280      	movs	r2, #128	@ 0x80
 801635c:	431a      	orrs	r2, r3
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	2240      	movs	r2, #64	@ 0x40
 8016366:	2100      	movs	r1, #0
 8016368:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801636a:	2301      	movs	r3, #1
 801636c:	e059      	b.n	8016422 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016372:	b2da      	uxtb	r2, r3
 8016374:	697c      	ldr	r4, [r7, #20]
 8016376:	230a      	movs	r3, #10
 8016378:	18fb      	adds	r3, r7, r3
 801637a:	8819      	ldrh	r1, [r3, #0]
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	4b2f      	ldr	r3, [pc, #188]	@ (801643c <HAL_I2C_Master_Receive_DMA+0x204>)
 8016380:	9300      	str	r3, [sp, #0]
 8016382:	0023      	movs	r3, r4
 8016384:	f002 f966 	bl	8018654 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801638c:	b29a      	uxth	r2, r3
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016392:	1ad3      	subs	r3, r2, r3
 8016394:	b29a      	uxth	r2, r3
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	2240      	movs	r2, #64	@ 0x40
 801639e:	2100      	movs	r1, #0
 80163a0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2110      	movs	r1, #16
 80163a6:	0018      	movs	r0, r3
 80163a8:	f002 f98e 	bl	80186c8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2180      	movs	r1, #128	@ 0x80
 80163b8:	0209      	lsls	r1, r1, #8
 80163ba:	430a      	orrs	r2, r1
 80163bc:	601a      	str	r2, [r3, #0]
 80163be:	e02d      	b.n	801641c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2241      	movs	r2, #65	@ 0x41
 80163c4:	2120      	movs	r1, #32
 80163c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2242      	movs	r2, #66	@ 0x42
 80163cc:	2100      	movs	r1, #0
 80163ce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163d4:	2210      	movs	r2, #16
 80163d6:	431a      	orrs	r2, r3
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2240      	movs	r2, #64	@ 0x40
 80163e0:	2100      	movs	r1, #0
 80163e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80163e4:	2301      	movs	r3, #1
 80163e6:	e01c      	b.n	8016422 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	4a15      	ldr	r2, [pc, #84]	@ (8016440 <HAL_I2C_Master_Receive_DMA+0x208>)
 80163ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163f2:	b2da      	uxtb	r2, r3
 80163f4:	2380      	movs	r3, #128	@ 0x80
 80163f6:	049c      	lsls	r4, r3, #18
 80163f8:	230a      	movs	r3, #10
 80163fa:	18fb      	adds	r3, r7, r3
 80163fc:	8819      	ldrh	r1, [r3, #0]
 80163fe:	68f8      	ldr	r0, [r7, #12]
 8016400:	4b0e      	ldr	r3, [pc, #56]	@ (801643c <HAL_I2C_Master_Receive_DMA+0x204>)
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	0023      	movs	r3, r4
 8016406:	f002 f925 	bl	8018654 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2240      	movs	r2, #64	@ 0x40
 801640e:	2100      	movs	r1, #0
 8016410:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2101      	movs	r1, #1
 8016416:	0018      	movs	r0, r3
 8016418:	f002 f956 	bl	80186c8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801641c:	2300      	movs	r3, #0
 801641e:	e000      	b.n	8016422 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016420:	2302      	movs	r3, #2
  }
}
 8016422:	0018      	movs	r0, r3
 8016424:	46bd      	mov	sp, r7
 8016426:	b006      	add	sp, #24
 8016428:	bdb0      	pop	{r4, r5, r7, pc}
 801642a:	46c0      	nop			@ (mov r8, r8)
 801642c:	ffff0000 	.word	0xffff0000
 8016430:	08016f05 	.word	0x08016f05
 8016434:	080180a1 	.word	0x080180a1
 8016438:	08018141 	.word	0x08018141
 801643c:	80002400 	.word	0x80002400
 8016440:	08016a59 	.word	0x08016a59

08016444 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016444:	b590      	push	{r4, r7, lr}
 8016446:	b089      	sub	sp, #36	@ 0x24
 8016448:	af02      	add	r7, sp, #8
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	000c      	movs	r4, r1
 801644e:	0010      	movs	r0, r2
 8016450:	0019      	movs	r1, r3
 8016452:	230a      	movs	r3, #10
 8016454:	18fb      	adds	r3, r7, r3
 8016456:	1c22      	adds	r2, r4, #0
 8016458:	801a      	strh	r2, [r3, #0]
 801645a:	2308      	movs	r3, #8
 801645c:	18fb      	adds	r3, r7, r3
 801645e:	1c02      	adds	r2, r0, #0
 8016460:	801a      	strh	r2, [r3, #0]
 8016462:	1dbb      	adds	r3, r7, #6
 8016464:	1c0a      	adds	r2, r1, #0
 8016466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2241      	movs	r2, #65	@ 0x41
 801646c:	5c9b      	ldrb	r3, [r3, r2]
 801646e:	b2db      	uxtb	r3, r3
 8016470:	2b20      	cmp	r3, #32
 8016472:	d000      	beq.n	8016476 <HAL_I2C_Mem_Read+0x32>
 8016474:	e110      	b.n	8016698 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016478:	2b00      	cmp	r3, #0
 801647a:	d004      	beq.n	8016486 <HAL_I2C_Mem_Read+0x42>
 801647c:	232c      	movs	r3, #44	@ 0x2c
 801647e:	18fb      	adds	r3, r7, r3
 8016480:	881b      	ldrh	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d105      	bne.n	8016492 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	2280      	movs	r2, #128	@ 0x80
 801648a:	0092      	lsls	r2, r2, #2
 801648c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801648e:	2301      	movs	r3, #1
 8016490:	e103      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2240      	movs	r2, #64	@ 0x40
 8016496:	5c9b      	ldrb	r3, [r3, r2]
 8016498:	2b01      	cmp	r3, #1
 801649a:	d101      	bne.n	80164a0 <HAL_I2C_Mem_Read+0x5c>
 801649c:	2302      	movs	r3, #2
 801649e:	e0fc      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2240      	movs	r2, #64	@ 0x40
 80164a4:	2101      	movs	r1, #1
 80164a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80164a8:	f7fe f850 	bl	801454c <HAL_GetTick>
 80164ac:	0003      	movs	r3, r0
 80164ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80164b0:	2380      	movs	r3, #128	@ 0x80
 80164b2:	0219      	lsls	r1, r3, #8
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	697b      	ldr	r3, [r7, #20]
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	2319      	movs	r3, #25
 80164bc:	2201      	movs	r2, #1
 80164be:	f001 fe77 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 80164c2:	1e03      	subs	r3, r0, #0
 80164c4:	d001      	beq.n	80164ca <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80164c6:	2301      	movs	r3, #1
 80164c8:	e0e7      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	2241      	movs	r2, #65	@ 0x41
 80164ce:	2122      	movs	r1, #34	@ 0x22
 80164d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	2242      	movs	r2, #66	@ 0x42
 80164d6:	2140      	movs	r1, #64	@ 0x40
 80164d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2200      	movs	r2, #0
 80164de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	222c      	movs	r2, #44	@ 0x2c
 80164ea:	18ba      	adds	r2, r7, r2
 80164ec:	8812      	ldrh	r2, [r2, #0]
 80164ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2200      	movs	r2, #0
 80164f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80164f6:	1dbb      	adds	r3, r7, #6
 80164f8:	881c      	ldrh	r4, [r3, #0]
 80164fa:	2308      	movs	r3, #8
 80164fc:	18fb      	adds	r3, r7, r3
 80164fe:	881a      	ldrh	r2, [r3, #0]
 8016500:	230a      	movs	r3, #10
 8016502:	18fb      	adds	r3, r7, r3
 8016504:	8819      	ldrh	r1, [r3, #0]
 8016506:	68f8      	ldr	r0, [r7, #12]
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	9301      	str	r3, [sp, #4]
 801650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801650e:	9300      	str	r3, [sp, #0]
 8016510:	0023      	movs	r3, r4
 8016512:	f001 f829 	bl	8017568 <I2C_RequestMemoryRead>
 8016516:	1e03      	subs	r3, r0, #0
 8016518:	d005      	beq.n	8016526 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2240      	movs	r2, #64	@ 0x40
 801651e:	2100      	movs	r1, #0
 8016520:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016522:	2301      	movs	r3, #1
 8016524:	e0b9      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801652a:	b29b      	uxth	r3, r3
 801652c:	2bff      	cmp	r3, #255	@ 0xff
 801652e:	d911      	bls.n	8016554 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	22ff      	movs	r2, #255	@ 0xff
 8016534:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801653a:	b2da      	uxtb	r2, r3
 801653c:	2380      	movs	r3, #128	@ 0x80
 801653e:	045c      	lsls	r4, r3, #17
 8016540:	230a      	movs	r3, #10
 8016542:	18fb      	adds	r3, r7, r3
 8016544:	8819      	ldrh	r1, [r3, #0]
 8016546:	68f8      	ldr	r0, [r7, #12]
 8016548:	4b56      	ldr	r3, [pc, #344]	@ (80166a4 <HAL_I2C_Mem_Read+0x260>)
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	0023      	movs	r3, r4
 801654e:	f002 f881 	bl	8018654 <I2C_TransferConfig>
 8016552:	e012      	b.n	801657a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016558:	b29a      	uxth	r2, r3
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016562:	b2da      	uxtb	r2, r3
 8016564:	2380      	movs	r3, #128	@ 0x80
 8016566:	049c      	lsls	r4, r3, #18
 8016568:	230a      	movs	r3, #10
 801656a:	18fb      	adds	r3, r7, r3
 801656c:	8819      	ldrh	r1, [r3, #0]
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	4b4c      	ldr	r3, [pc, #304]	@ (80166a4 <HAL_I2C_Mem_Read+0x260>)
 8016572:	9300      	str	r3, [sp, #0]
 8016574:	0023      	movs	r3, r4
 8016576:	f002 f86d 	bl	8018654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801657a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801657c:	68f8      	ldr	r0, [r7, #12]
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	9300      	str	r3, [sp, #0]
 8016582:	0013      	movs	r3, r2
 8016584:	2200      	movs	r2, #0
 8016586:	2104      	movs	r1, #4
 8016588:	f001 fe12 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 801658c:	1e03      	subs	r3, r0, #0
 801658e:	d001      	beq.n	8016594 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016590:	2301      	movs	r3, #1
 8016592:	e082      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801659e:	b2d2      	uxtb	r2, r2
 80165a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165a6:	1c5a      	adds	r2, r3, #1
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165b0:	3b01      	subs	r3, #1
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165bc:	b29b      	uxth	r3, r3
 80165be:	3b01      	subs	r3, #1
 80165c0:	b29a      	uxth	r2, r3
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d03a      	beq.n	8016646 <HAL_I2C_Mem_Read+0x202>
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d136      	bne.n	8016646 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80165d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	9300      	str	r3, [sp, #0]
 80165e0:	0013      	movs	r3, r2
 80165e2:	2200      	movs	r2, #0
 80165e4:	2180      	movs	r1, #128	@ 0x80
 80165e6:	f001 fde3 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 80165ea:	1e03      	subs	r3, r0, #0
 80165ec:	d001      	beq.n	80165f2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80165ee:	2301      	movs	r3, #1
 80165f0:	e053      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	2bff      	cmp	r3, #255	@ 0xff
 80165fa:	d911      	bls.n	8016620 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	22ff      	movs	r2, #255	@ 0xff
 8016600:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016606:	b2da      	uxtb	r2, r3
 8016608:	2380      	movs	r3, #128	@ 0x80
 801660a:	045c      	lsls	r4, r3, #17
 801660c:	230a      	movs	r3, #10
 801660e:	18fb      	adds	r3, r7, r3
 8016610:	8819      	ldrh	r1, [r3, #0]
 8016612:	68f8      	ldr	r0, [r7, #12]
 8016614:	2300      	movs	r3, #0
 8016616:	9300      	str	r3, [sp, #0]
 8016618:	0023      	movs	r3, r4
 801661a:	f002 f81b 	bl	8018654 <I2C_TransferConfig>
 801661e:	e012      	b.n	8016646 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016624:	b29a      	uxth	r2, r3
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801662e:	b2da      	uxtb	r2, r3
 8016630:	2380      	movs	r3, #128	@ 0x80
 8016632:	049c      	lsls	r4, r3, #18
 8016634:	230a      	movs	r3, #10
 8016636:	18fb      	adds	r3, r7, r3
 8016638:	8819      	ldrh	r1, [r3, #0]
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	2300      	movs	r3, #0
 801663e:	9300      	str	r3, [sp, #0]
 8016640:	0023      	movs	r3, r4
 8016642:	f002 f807 	bl	8018654 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801664a:	b29b      	uxth	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	d194      	bne.n	801657a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016650:	697a      	ldr	r2, [r7, #20]
 8016652:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	0018      	movs	r0, r3
 8016658:	f001 fe3e 	bl	80182d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801665c:	1e03      	subs	r3, r0, #0
 801665e:	d001      	beq.n	8016664 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016660:	2301      	movs	r3, #1
 8016662:	e01a      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2220      	movs	r2, #32
 801666a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	685a      	ldr	r2, [r3, #4]
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	490c      	ldr	r1, [pc, #48]	@ (80166a8 <HAL_I2C_Mem_Read+0x264>)
 8016678:	400a      	ands	r2, r1
 801667a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	2241      	movs	r2, #65	@ 0x41
 8016680:	2120      	movs	r1, #32
 8016682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2242      	movs	r2, #66	@ 0x42
 8016688:	2100      	movs	r1, #0
 801668a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2240      	movs	r2, #64	@ 0x40
 8016690:	2100      	movs	r1, #0
 8016692:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016694:	2300      	movs	r3, #0
 8016696:	e000      	b.n	801669a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016698:	2302      	movs	r3, #2
  }
}
 801669a:	0018      	movs	r0, r3
 801669c:	46bd      	mov	sp, r7
 801669e:	b007      	add	sp, #28
 80166a0:	bd90      	pop	{r4, r7, pc}
 80166a2:	46c0      	nop			@ (mov r8, r8)
 80166a4:	80002400 	.word	0x80002400
 80166a8:	fe00e800 	.word	0xfe00e800

080166ac <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80166ac:	b5b0      	push	{r4, r5, r7, lr}
 80166ae:	b088      	sub	sp, #32
 80166b0:	af02      	add	r7, sp, #8
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	000c      	movs	r4, r1
 80166b6:	0010      	movs	r0, r2
 80166b8:	0019      	movs	r1, r3
 80166ba:	230a      	movs	r3, #10
 80166bc:	18fb      	adds	r3, r7, r3
 80166be:	1c22      	adds	r2, r4, #0
 80166c0:	801a      	strh	r2, [r3, #0]
 80166c2:	2308      	movs	r3, #8
 80166c4:	18fb      	adds	r3, r7, r3
 80166c6:	1c02      	adds	r2, r0, #0
 80166c8:	801a      	strh	r2, [r3, #0]
 80166ca:	1dbb      	adds	r3, r7, #6
 80166cc:	1c0a      	adds	r2, r1, #0
 80166ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2241      	movs	r2, #65	@ 0x41
 80166d4:	5c9b      	ldrb	r3, [r3, r2]
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	2b20      	cmp	r3, #32
 80166da:	d000      	beq.n	80166de <HAL_I2C_Mem_Write_DMA+0x32>
 80166dc:	e0d8      	b.n	8016890 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80166de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d004      	beq.n	80166ee <HAL_I2C_Mem_Write_DMA+0x42>
 80166e4:	232c      	movs	r3, #44	@ 0x2c
 80166e6:	18fb      	adds	r3, r7, r3
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d105      	bne.n	80166fa <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	2280      	movs	r2, #128	@ 0x80
 80166f2:	0092      	lsls	r2, r2, #2
 80166f4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e0cb      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	699a      	ldr	r2, [r3, #24]
 8016700:	2380      	movs	r3, #128	@ 0x80
 8016702:	021b      	lsls	r3, r3, #8
 8016704:	401a      	ands	r2, r3
 8016706:	2380      	movs	r3, #128	@ 0x80
 8016708:	021b      	lsls	r3, r3, #8
 801670a:	429a      	cmp	r2, r3
 801670c:	d101      	bne.n	8016712 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 801670e:	2302      	movs	r3, #2
 8016710:	e0bf      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	2240      	movs	r2, #64	@ 0x40
 8016716:	5c9b      	ldrb	r3, [r3, r2]
 8016718:	2b01      	cmp	r3, #1
 801671a:	d101      	bne.n	8016720 <HAL_I2C_Mem_Write_DMA+0x74>
 801671c:	2302      	movs	r3, #2
 801671e:	e0b8      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2240      	movs	r2, #64	@ 0x40
 8016724:	2101      	movs	r1, #1
 8016726:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2241      	movs	r2, #65	@ 0x41
 801672c:	2121      	movs	r1, #33	@ 0x21
 801672e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2242      	movs	r2, #66	@ 0x42
 8016734:	2140      	movs	r1, #64	@ 0x40
 8016736:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2200      	movs	r2, #0
 801673c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	222c      	movs	r2, #44	@ 0x2c
 8016748:	18ba      	adds	r2, r7, r2
 801674a:	8812      	ldrh	r2, [r2, #0]
 801674c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	4a52      	ldr	r2, [pc, #328]	@ (801689c <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8016752:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	4a52      	ldr	r2, [pc, #328]	@ (80168a0 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8016758:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 801675a:	230a      	movs	r3, #10
 801675c:	18fb      	adds	r3, r7, r3
 801675e:	881a      	ldrh	r2, [r3, #0]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016768:	b29b      	uxth	r3, r3
 801676a:	2bff      	cmp	r3, #255	@ 0xff
 801676c:	d903      	bls.n	8016776 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	22ff      	movs	r2, #255	@ 0xff
 8016772:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016774:	e004      	b.n	8016780 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801677a:	b29a      	uxth	r2, r3
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016780:	1dbb      	adds	r3, r7, #6
 8016782:	881b      	ldrh	r3, [r3, #0]
 8016784:	2b01      	cmp	r3, #1
 8016786:	d10b      	bne.n	80167a0 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016788:	2308      	movs	r3, #8
 801678a:	18fb      	adds	r3, r7, r3
 801678c:	881b      	ldrh	r3, [r3, #0]
 801678e:	b2da      	uxtb	r2, r3
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2201      	movs	r2, #1
 801679a:	4252      	negs	r2, r2
 801679c:	651a      	str	r2, [r3, #80]	@ 0x50
 801679e:	e00e      	b.n	80167be <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80167a0:	2108      	movs	r1, #8
 80167a2:	187b      	adds	r3, r7, r1
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	0a1b      	lsrs	r3, r3, #8
 80167a8:	b29b      	uxth	r3, r3
 80167aa:	b2da      	uxtb	r2, r3
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80167b2:	187b      	adds	r3, r7, r1
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	b2db      	uxtb	r3, r3
 80167b8:	001a      	movs	r2, r3
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d023      	beq.n	801680e <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167ca:	4a36      	ldr	r2, [pc, #216]	@ (80168a4 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80167cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167d2:	4a35      	ldr	r2, [pc, #212]	@ (80168a8 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80167d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167da:	2200      	movs	r2, #0
 80167dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167e2:	2200      	movs	r2, #0
 80167e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80167ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	3328      	adds	r3, #40	@ 0x28
 80167f2:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80167f8:	2517      	movs	r5, #23
 80167fa:	197c      	adds	r4, r7, r5
 80167fc:	f7fe fbf8 	bl	8014ff0 <HAL_DMA_Start_IT>
 8016800:	0003      	movs	r3, r0
 8016802:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8016804:	197b      	adds	r3, r7, r5
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d12d      	bne.n	8016868 <HAL_I2C_Mem_Write_DMA+0x1bc>
 801680c:	e013      	b.n	8016836 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2241      	movs	r2, #65	@ 0x41
 8016812:	2120      	movs	r1, #32
 8016814:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2242      	movs	r2, #66	@ 0x42
 801681a:	2100      	movs	r1, #0
 801681c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016822:	2280      	movs	r2, #128	@ 0x80
 8016824:	431a      	orrs	r2, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2240      	movs	r2, #64	@ 0x40
 801682e:	2100      	movs	r1, #0
 8016830:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016832:	2301      	movs	r3, #1
 8016834:	e02d      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8016836:	1dbb      	adds	r3, r7, #6
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	b2da      	uxtb	r2, r3
 801683c:	2380      	movs	r3, #128	@ 0x80
 801683e:	045c      	lsls	r4, r3, #17
 8016840:	230a      	movs	r3, #10
 8016842:	18fb      	adds	r3, r7, r3
 8016844:	8819      	ldrh	r1, [r3, #0]
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	4b18      	ldr	r3, [pc, #96]	@ (80168ac <HAL_I2C_Mem_Write_DMA+0x200>)
 801684a:	9300      	str	r3, [sp, #0]
 801684c:	0023      	movs	r3, r4
 801684e:	f001 ff01 	bl	8018654 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	2240      	movs	r2, #64	@ 0x40
 8016856:	2100      	movs	r1, #0
 8016858:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	2101      	movs	r1, #1
 801685e:	0018      	movs	r0, r3
 8016860:	f001 ff32 	bl	80186c8 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8016864:	2300      	movs	r3, #0
 8016866:	e014      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2241      	movs	r2, #65	@ 0x41
 801686c:	2120      	movs	r1, #32
 801686e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2242      	movs	r2, #66	@ 0x42
 8016874:	2100      	movs	r1, #0
 8016876:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801687c:	2210      	movs	r2, #16
 801687e:	431a      	orrs	r2, r3
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2240      	movs	r2, #64	@ 0x40
 8016888:	2100      	movs	r1, #0
 801688a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801688c:	2301      	movs	r3, #1
 801688e:	e000      	b.n	8016892 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8016890:	2302      	movs	r3, #2
  }
}
 8016892:	0018      	movs	r0, r3
 8016894:	46bd      	mov	sp, r7
 8016896:	b006      	add	sp, #24
 8016898:	bdb0      	pop	{r4, r5, r7, pc}
 801689a:	46c0      	nop			@ (mov r8, r8)
 801689c:	ffff0000 	.word	0xffff0000
 80168a0:	0801711d 	.word	0x0801711d
 80168a4:	08018001 	.word	0x08018001
 80168a8:	08018141 	.word	0x08018141
 80168ac:	80002000 	.word	0x80002000

080168b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	699b      	ldr	r3, [r3, #24]
 80168be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d005      	beq.n	80168dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168d4:	68ba      	ldr	r2, [r7, #8]
 80168d6:	68f9      	ldr	r1, [r7, #12]
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	4798      	blx	r3
  }
}
 80168dc:	46c0      	nop			@ (mov r8, r8)
 80168de:	46bd      	mov	sp, r7
 80168e0:	b004      	add	sp, #16
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b086      	sub	sp, #24
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	699b      	ldr	r3, [r3, #24]
 80168f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	0a1b      	lsrs	r3, r3, #8
 8016900:	001a      	movs	r2, r3
 8016902:	2301      	movs	r3, #1
 8016904:	4013      	ands	r3, r2
 8016906:	d010      	beq.n	801692a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	09db      	lsrs	r3, r3, #7
 801690c:	001a      	movs	r2, r3
 801690e:	2301      	movs	r3, #1
 8016910:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016912:	d00a      	beq.n	801692a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016918:	2201      	movs	r2, #1
 801691a:	431a      	orrs	r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	2280      	movs	r2, #128	@ 0x80
 8016926:	0052      	lsls	r2, r2, #1
 8016928:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	0a9b      	lsrs	r3, r3, #10
 801692e:	001a      	movs	r2, r3
 8016930:	2301      	movs	r3, #1
 8016932:	4013      	ands	r3, r2
 8016934:	d010      	beq.n	8016958 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	09db      	lsrs	r3, r3, #7
 801693a:	001a      	movs	r2, r3
 801693c:	2301      	movs	r3, #1
 801693e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016940:	d00a      	beq.n	8016958 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016946:	2208      	movs	r2, #8
 8016948:	431a      	orrs	r2, r3
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2280      	movs	r2, #128	@ 0x80
 8016954:	00d2      	lsls	r2, r2, #3
 8016956:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	0a5b      	lsrs	r3, r3, #9
 801695c:	001a      	movs	r2, r3
 801695e:	2301      	movs	r3, #1
 8016960:	4013      	ands	r3, r2
 8016962:	d010      	beq.n	8016986 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	09db      	lsrs	r3, r3, #7
 8016968:	001a      	movs	r2, r3
 801696a:	2301      	movs	r3, #1
 801696c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801696e:	d00a      	beq.n	8016986 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016974:	2202      	movs	r2, #2
 8016976:	431a      	orrs	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2280      	movs	r2, #128	@ 0x80
 8016982:	0092      	lsls	r2, r2, #2
 8016984:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801698a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	220b      	movs	r2, #11
 8016990:	4013      	ands	r3, r2
 8016992:	d005      	beq.n	80169a0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016994:	68fa      	ldr	r2, [r7, #12]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	0011      	movs	r1, r2
 801699a:	0018      	movs	r0, r3
 801699c:	f001 f9e2 	bl	8017d64 <I2C_ITError>
  }
}
 80169a0:	46c0      	nop			@ (mov r8, r8)
 80169a2:	46bd      	mov	sp, r7
 80169a4:	b006      	add	sp, #24
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80169b0:	46c0      	nop			@ (mov r8, r8)
 80169b2:	46bd      	mov	sp, r7
 80169b4:	b002      	add	sp, #8
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80169c0:	46c0      	nop			@ (mov r8, r8)
 80169c2:	46bd      	mov	sp, r7
 80169c4:	b002      	add	sp, #8
 80169c6:	bd80      	pop	{r7, pc}

080169c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80169d0:	46c0      	nop			@ (mov r8, r8)
 80169d2:	46bd      	mov	sp, r7
 80169d4:	b002      	add	sp, #8
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80169e0:	46c0      	nop			@ (mov r8, r8)
 80169e2:	46bd      	mov	sp, r7
 80169e4:	b002      	add	sp, #8
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	0008      	movs	r0, r1
 80169f2:	0011      	movs	r1, r2
 80169f4:	1cfb      	adds	r3, r7, #3
 80169f6:	1c02      	adds	r2, r0, #0
 80169f8:	701a      	strb	r2, [r3, #0]
 80169fa:	003b      	movs	r3, r7
 80169fc:	1c0a      	adds	r2, r1, #0
 80169fe:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016a00:	46c0      	nop			@ (mov r8, r8)
 8016a02:	46bd      	mov	sp, r7
 8016a04:	b002      	add	sp, #8
 8016a06:	bd80      	pop	{r7, pc}

08016a08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016a10:	46c0      	nop			@ (mov r8, r8)
 8016a12:	46bd      	mov	sp, r7
 8016a14:	b002      	add	sp, #8
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b082      	sub	sp, #8
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016a20:	46c0      	nop			@ (mov r8, r8)
 8016a22:	46bd      	mov	sp, r7
 8016a24:	b002      	add	sp, #8
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016a30:	46c0      	nop			@ (mov r8, r8)
 8016a32:	46bd      	mov	sp, r7
 8016a34:	b002      	add	sp, #8
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016a40:	46c0      	nop			@ (mov r8, r8)
 8016a42:	46bd      	mov	sp, r7
 8016a44:	b002      	add	sp, #8
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016a50:	46c0      	nop			@ (mov r8, r8)
 8016a52:	46bd      	mov	sp, r7
 8016a54:	b002      	add	sp, #8
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016a58:	b590      	push	{r4, r7, lr}
 8016a5a:	b089      	sub	sp, #36	@ 0x24
 8016a5c:	af02      	add	r7, sp, #8
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2240      	movs	r2, #64	@ 0x40
 8016a6c:	5c9b      	ldrb	r3, [r3, r2]
 8016a6e:	2b01      	cmp	r3, #1
 8016a70:	d101      	bne.n	8016a76 <I2C_Master_ISR_IT+0x1e>
 8016a72:	2302      	movs	r3, #2
 8016a74:	e12b      	b.n	8016cce <I2C_Master_ISR_IT+0x276>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	2240      	movs	r2, #64	@ 0x40
 8016a7a:	2101      	movs	r1, #1
 8016a7c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	091b      	lsrs	r3, r3, #4
 8016a82:	001a      	movs	r2, r3
 8016a84:	2301      	movs	r3, #1
 8016a86:	4013      	ands	r3, r2
 8016a88:	d014      	beq.n	8016ab4 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	091b      	lsrs	r3, r3, #4
 8016a8e:	001a      	movs	r2, r3
 8016a90:	2301      	movs	r3, #1
 8016a92:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016a94:	d00e      	beq.n	8016ab4 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2210      	movs	r2, #16
 8016a9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016aa2:	2204      	movs	r2, #4
 8016aa4:	431a      	orrs	r2, r3
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	0018      	movs	r0, r3
 8016aae:	f001 fa84 	bl	8017fba <I2C_Flush_TXDR>
 8016ab2:	e0f5      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	089b      	lsrs	r3, r3, #2
 8016ab8:	001a      	movs	r2, r3
 8016aba:	2301      	movs	r3, #1
 8016abc:	4013      	ands	r3, r2
 8016abe:	d023      	beq.n	8016b08 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	089b      	lsrs	r3, r3, #2
 8016ac4:	001a      	movs	r2, r3
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016aca:	d01d      	beq.n	8016b08 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	2204      	movs	r2, #4
 8016ad0:	4393      	bics	r3, r2
 8016ad2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ade:	b2d2      	uxtb	r2, r2
 8016ae0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ae6:	1c5a      	adds	r2, r3, #1
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016af0:	3b01      	subs	r3, #1
 8016af2:	b29a      	uxth	r2, r3
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	3b01      	subs	r3, #1
 8016b00:	b29a      	uxth	r2, r3
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016b06:	e0cb      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	085b      	lsrs	r3, r3, #1
 8016b0c:	001a      	movs	r2, r3
 8016b0e:	2301      	movs	r3, #1
 8016b10:	4013      	ands	r3, r2
 8016b12:	d01e      	beq.n	8016b52 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	085b      	lsrs	r3, r3, #1
 8016b18:	001a      	movs	r2, r3
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016b1e:	d018      	beq.n	8016b52 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b24:	781a      	ldrb	r2, [r3, #0]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b30:	1c5a      	adds	r2, r3, #1
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	3b01      	subs	r3, #1
 8016b4a:	b29a      	uxth	r2, r3
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016b50:	e0a6      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	09db      	lsrs	r3, r3, #7
 8016b56:	001a      	movs	r2, r3
 8016b58:	2301      	movs	r3, #1
 8016b5a:	4013      	ands	r3, r2
 8016b5c:	d100      	bne.n	8016b60 <I2C_Master_ISR_IT+0x108>
 8016b5e:	e06b      	b.n	8016c38 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	099b      	lsrs	r3, r3, #6
 8016b64:	001a      	movs	r2, r3
 8016b66:	2301      	movs	r3, #1
 8016b68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016b6a:	d065      	beq.n	8016c38 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b70:	b29b      	uxth	r3, r3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d04a      	beq.n	8016c0c <I2C_Master_ISR_IT+0x1b4>
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d146      	bne.n	8016c0c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	b29a      	uxth	r2, r3
 8016b86:	2112      	movs	r1, #18
 8016b88:	187b      	adds	r3, r7, r1
 8016b8a:	0592      	lsls	r2, r2, #22
 8016b8c:	0d92      	lsrs	r2, r2, #22
 8016b8e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	2bff      	cmp	r3, #255	@ 0xff
 8016b98:	d910      	bls.n	8016bbc <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	22ff      	movs	r2, #255	@ 0xff
 8016b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ba4:	b2da      	uxtb	r2, r3
 8016ba6:	2380      	movs	r3, #128	@ 0x80
 8016ba8:	045c      	lsls	r4, r3, #17
 8016baa:	187b      	adds	r3, r7, r1
 8016bac:	8819      	ldrh	r1, [r3, #0]
 8016bae:	68f8      	ldr	r0, [r7, #12]
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	9300      	str	r3, [sp, #0]
 8016bb4:	0023      	movs	r3, r4
 8016bb6:	f001 fd4d 	bl	8018654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bba:	e03c      	b.n	8016c36 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bca:	4a43      	ldr	r2, [pc, #268]	@ (8016cd8 <I2C_Master_ISR_IT+0x280>)
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d00e      	beq.n	8016bee <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bd4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016bda:	2312      	movs	r3, #18
 8016bdc:	18fb      	adds	r3, r7, r3
 8016bde:	8819      	ldrh	r1, [r3, #0]
 8016be0:	68f8      	ldr	r0, [r7, #12]
 8016be2:	2300      	movs	r3, #0
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	0023      	movs	r3, r4
 8016be8:	f001 fd34 	bl	8018654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bec:	e023      	b.n	8016c36 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bf2:	b2da      	uxtb	r2, r3
 8016bf4:	2380      	movs	r3, #128	@ 0x80
 8016bf6:	049c      	lsls	r4, r3, #18
 8016bf8:	2312      	movs	r3, #18
 8016bfa:	18fb      	adds	r3, r7, r3
 8016bfc:	8819      	ldrh	r1, [r3, #0]
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	2300      	movs	r3, #0
 8016c02:	9300      	str	r3, [sp, #0]
 8016c04:	0023      	movs	r3, r4
 8016c06:	f001 fd25 	bl	8018654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c0a:	e014      	b.n	8016c36 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	685a      	ldr	r2, [r3, #4]
 8016c12:	2380      	movs	r3, #128	@ 0x80
 8016c14:	049b      	lsls	r3, r3, #18
 8016c16:	401a      	ands	r2, r3
 8016c18:	2380      	movs	r3, #128	@ 0x80
 8016c1a:	049b      	lsls	r3, r3, #18
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d004      	beq.n	8016c2a <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	0018      	movs	r0, r3
 8016c24:	f000 fda6 	bl	8017774 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c28:	e03a      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2140      	movs	r1, #64	@ 0x40
 8016c2e:	0018      	movs	r0, r3
 8016c30:	f001 f898 	bl	8017d64 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c34:	e034      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
 8016c36:	e033      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	099b      	lsrs	r3, r3, #6
 8016c3c:	001a      	movs	r2, r3
 8016c3e:	2301      	movs	r3, #1
 8016c40:	4013      	ands	r3, r2
 8016c42:	d02d      	beq.n	8016ca0 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	099b      	lsrs	r3, r3, #6
 8016c48:	001a      	movs	r2, r3
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016c4e:	d027      	beq.n	8016ca0 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d11d      	bne.n	8016c96 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	685a      	ldr	r2, [r3, #4]
 8016c60:	2380      	movs	r3, #128	@ 0x80
 8016c62:	049b      	lsls	r3, r3, #18
 8016c64:	401a      	ands	r2, r3
 8016c66:	2380      	movs	r3, #128	@ 0x80
 8016c68:	049b      	lsls	r3, r3, #18
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d018      	beq.n	8016ca0 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c72:	4a19      	ldr	r2, [pc, #100]	@ (8016cd8 <I2C_Master_ISR_IT+0x280>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d109      	bne.n	8016c8c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	685a      	ldr	r2, [r3, #4]
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2180      	movs	r1, #128	@ 0x80
 8016c84:	01c9      	lsls	r1, r1, #7
 8016c86:	430a      	orrs	r2, r1
 8016c88:	605a      	str	r2, [r3, #4]
 8016c8a:	e009      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	0018      	movs	r0, r3
 8016c90:	f000 fd70 	bl	8017774 <I2C_ITMasterSeqCplt>
 8016c94:	e004      	b.n	8016ca0 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2140      	movs	r1, #64	@ 0x40
 8016c9a:	0018      	movs	r0, r3
 8016c9c:	f001 f862 	bl	8017d64 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	095b      	lsrs	r3, r3, #5
 8016ca4:	001a      	movs	r2, r3
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	4013      	ands	r3, r2
 8016caa:	d00b      	beq.n	8016cc4 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	095b      	lsrs	r3, r3, #5
 8016cb0:	001a      	movs	r2, r3
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016cb6:	d005      	beq.n	8016cc4 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016cb8:	697a      	ldr	r2, [r7, #20]
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	0011      	movs	r1, r2
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	f000 fe00 	bl	80178c4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	2240      	movs	r2, #64	@ 0x40
 8016cc8:	2100      	movs	r1, #0
 8016cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	0018      	movs	r0, r3
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	b007      	add	sp, #28
 8016cd4:	bd90      	pop	{r4, r7, pc}
 8016cd6:	46c0      	nop			@ (mov r8, r8)
 8016cd8:	ffff0000 	.word	0xffff0000

08016cdc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b086      	sub	sp, #24
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2240      	movs	r2, #64	@ 0x40
 8016cf6:	5c9b      	ldrb	r3, [r3, r2]
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d101      	bne.n	8016d00 <I2C_Slave_ISR_IT+0x24>
 8016cfc:	2302      	movs	r3, #2
 8016cfe:	e0fa      	b.n	8016ef6 <I2C_Slave_ISR_IT+0x21a>
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2240      	movs	r2, #64	@ 0x40
 8016d04:	2101      	movs	r1, #1
 8016d06:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016d08:	693b      	ldr	r3, [r7, #16]
 8016d0a:	095b      	lsrs	r3, r3, #5
 8016d0c:	001a      	movs	r2, r3
 8016d0e:	2301      	movs	r3, #1
 8016d10:	4013      	ands	r3, r2
 8016d12:	d00b      	beq.n	8016d2c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	095b      	lsrs	r3, r3, #5
 8016d18:	001a      	movs	r2, r3
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016d1e:	d005      	beq.n	8016d2c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8016d20:	693a      	ldr	r2, [r7, #16]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	0011      	movs	r1, r2
 8016d26:	0018      	movs	r0, r3
 8016d28:	f000 fe9e 	bl	8017a68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	091b      	lsrs	r3, r3, #4
 8016d30:	001a      	movs	r2, r3
 8016d32:	2301      	movs	r3, #1
 8016d34:	4013      	ands	r3, r2
 8016d36:	d054      	beq.n	8016de2 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	091b      	lsrs	r3, r3, #4
 8016d3c:	001a      	movs	r2, r3
 8016d3e:	2301      	movs	r3, #1
 8016d40:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016d42:	d04e      	beq.n	8016de2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d12d      	bne.n	8016daa <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2241      	movs	r2, #65	@ 0x41
 8016d52:	5c9b      	ldrb	r3, [r3, r2]
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	2b28      	cmp	r3, #40	@ 0x28
 8016d58:	d10b      	bne.n	8016d72 <I2C_Slave_ISR_IT+0x96>
 8016d5a:	697a      	ldr	r2, [r7, #20]
 8016d5c:	2380      	movs	r3, #128	@ 0x80
 8016d5e:	049b      	lsls	r3, r3, #18
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d106      	bne.n	8016d72 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8016d64:	693a      	ldr	r2, [r7, #16]
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	0011      	movs	r1, r2
 8016d6a:	0018      	movs	r0, r3
 8016d6c:	f000 ffa0 	bl	8017cb0 <I2C_ITListenCplt>
 8016d70:	e036      	b.n	8016de0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	2241      	movs	r2, #65	@ 0x41
 8016d76:	5c9b      	ldrb	r3, [r3, r2]
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	2b29      	cmp	r3, #41	@ 0x29
 8016d7c:	d110      	bne.n	8016da0 <I2C_Slave_ISR_IT+0xc4>
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	4a5f      	ldr	r2, [pc, #380]	@ (8016f00 <I2C_Slave_ISR_IT+0x224>)
 8016d82:	4293      	cmp	r3, r2
 8016d84:	d00c      	beq.n	8016da0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2210      	movs	r2, #16
 8016d8c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	0018      	movs	r0, r3
 8016d92:	f001 f912 	bl	8017fba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	0018      	movs	r0, r3
 8016d9a:	f000 fd2d 	bl	80177f8 <I2C_ITSlaveSeqCplt>
 8016d9e:	e01f      	b.n	8016de0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2210      	movs	r2, #16
 8016da6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8016da8:	e09d      	b.n	8016ee6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2210      	movs	r2, #16
 8016db0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016db6:	2204      	movs	r2, #4
 8016db8:	431a      	orrs	r2, r3
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d005      	beq.n	8016dd0 <I2C_Slave_ISR_IT+0xf4>
 8016dc4:	697a      	ldr	r2, [r7, #20]
 8016dc6:	2380      	movs	r3, #128	@ 0x80
 8016dc8:	045b      	lsls	r3, r3, #17
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d000      	beq.n	8016dd0 <I2C_Slave_ISR_IT+0xf4>
 8016dce:	e08a      	b.n	8016ee6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	0011      	movs	r1, r2
 8016dd8:	0018      	movs	r0, r3
 8016dda:	f000 ffc3 	bl	8017d64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016dde:	e082      	b.n	8016ee6 <I2C_Slave_ISR_IT+0x20a>
 8016de0:	e081      	b.n	8016ee6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	089b      	lsrs	r3, r3, #2
 8016de6:	001a      	movs	r2, r3
 8016de8:	2301      	movs	r3, #1
 8016dea:	4013      	ands	r3, r2
 8016dec:	d031      	beq.n	8016e52 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	089b      	lsrs	r3, r3, #2
 8016df2:	001a      	movs	r2, r3
 8016df4:	2301      	movs	r3, #1
 8016df6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016df8:	d02b      	beq.n	8016e52 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d018      	beq.n	8016e36 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e0e:	b2d2      	uxtb	r2, r2
 8016e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e16:	1c5a      	adds	r2, r3, #1
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e20:	3b01      	subs	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	b29a      	uxth	r2, r3
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e3a:	b29b      	uxth	r3, r3
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d154      	bne.n	8016eea <I2C_Slave_ISR_IT+0x20e>
 8016e40:	697b      	ldr	r3, [r7, #20]
 8016e42:	4a2f      	ldr	r2, [pc, #188]	@ (8016f00 <I2C_Slave_ISR_IT+0x224>)
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d050      	beq.n	8016eea <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	0018      	movs	r0, r3
 8016e4c:	f000 fcd4 	bl	80177f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8016e50:	e04b      	b.n	8016eea <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	08db      	lsrs	r3, r3, #3
 8016e56:	001a      	movs	r2, r3
 8016e58:	2301      	movs	r3, #1
 8016e5a:	4013      	ands	r3, r2
 8016e5c:	d00c      	beq.n	8016e78 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	08db      	lsrs	r3, r3, #3
 8016e62:	001a      	movs	r2, r3
 8016e64:	2301      	movs	r3, #1
 8016e66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016e68:	d006      	beq.n	8016e78 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8016e6a:	693a      	ldr	r2, [r7, #16]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	0011      	movs	r1, r2
 8016e70:	0018      	movs	r0, r3
 8016e72:	f000 fbdb 	bl	801762c <I2C_ITAddrCplt>
 8016e76:	e039      	b.n	8016eec <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	085b      	lsrs	r3, r3, #1
 8016e7c:	001a      	movs	r2, r3
 8016e7e:	2301      	movs	r3, #1
 8016e80:	4013      	ands	r3, r2
 8016e82:	d033      	beq.n	8016eec <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	085b      	lsrs	r3, r3, #1
 8016e88:	001a      	movs	r2, r3
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016e8e:	d02d      	beq.n	8016eec <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d018      	beq.n	8016ecc <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e9e:	781a      	ldrb	r2, [r3, #0]
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eaa:	1c5a      	adds	r2, r3, #1
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	3b01      	subs	r3, #1
 8016eb8:	b29a      	uxth	r2, r3
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ec2:	3b01      	subs	r3, #1
 8016ec4:	b29a      	uxth	r2, r3
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016eca:	e00f      	b.n	8016eec <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8016ecc:	697a      	ldr	r2, [r7, #20]
 8016ece:	2380      	movs	r3, #128	@ 0x80
 8016ed0:	045b      	lsls	r3, r3, #17
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d002      	beq.n	8016edc <I2C_Slave_ISR_IT+0x200>
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d107      	bne.n	8016eec <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	0018      	movs	r0, r3
 8016ee0:	f000 fc8a 	bl	80177f8 <I2C_ITSlaveSeqCplt>
 8016ee4:	e002      	b.n	8016eec <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8016ee6:	46c0      	nop			@ (mov r8, r8)
 8016ee8:	e000      	b.n	8016eec <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8016eea:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2240      	movs	r2, #64	@ 0x40
 8016ef0:	2100      	movs	r1, #0
 8016ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ef4:	2300      	movs	r3, #0
}
 8016ef6:	0018      	movs	r0, r3
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	b006      	add	sp, #24
 8016efc:	bd80      	pop	{r7, pc}
 8016efe:	46c0      	nop			@ (mov r8, r8)
 8016f00:	ffff0000 	.word	0xffff0000

08016f04 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8016f04:	b590      	push	{r4, r7, lr}
 8016f06:	b089      	sub	sp, #36	@ 0x24
 8016f08:	af02      	add	r7, sp, #8
 8016f0a:	60f8      	str	r0, [r7, #12]
 8016f0c:	60b9      	str	r1, [r7, #8]
 8016f0e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	2240      	movs	r2, #64	@ 0x40
 8016f14:	5c9b      	ldrb	r3, [r3, r2]
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	d101      	bne.n	8016f1e <I2C_Master_ISR_DMA+0x1a>
 8016f1a:	2302      	movs	r3, #2
 8016f1c:	e0f7      	b.n	801710e <I2C_Master_ISR_DMA+0x20a>
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2240      	movs	r2, #64	@ 0x40
 8016f22:	2101      	movs	r1, #1
 8016f24:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016f26:	68bb      	ldr	r3, [r7, #8]
 8016f28:	091b      	lsrs	r3, r3, #4
 8016f2a:	001a      	movs	r2, r3
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	4013      	ands	r3, r2
 8016f30:	d019      	beq.n	8016f66 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	091b      	lsrs	r3, r3, #4
 8016f36:	001a      	movs	r2, r3
 8016f38:	2301      	movs	r3, #1
 8016f3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016f3c:	d013      	beq.n	8016f66 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2210      	movs	r2, #16
 8016f44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f4a:	2204      	movs	r2, #4
 8016f4c:	431a      	orrs	r2, r3
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	2120      	movs	r1, #32
 8016f56:	0018      	movs	r0, r3
 8016f58:	f001 fbb6 	bl	80186c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	0018      	movs	r0, r3
 8016f60:	f001 f82b 	bl	8017fba <I2C_Flush_TXDR>
 8016f64:	e0ce      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	09db      	lsrs	r3, r3, #7
 8016f6a:	001a      	movs	r2, r3
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	4013      	ands	r3, r2
 8016f70:	d100      	bne.n	8016f74 <I2C_Master_ISR_DMA+0x70>
 8016f72:	e07e      	b.n	8017072 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	099b      	lsrs	r3, r3, #6
 8016f78:	001a      	movs	r2, r3
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016f7e:	d100      	bne.n	8016f82 <I2C_Master_ISR_DMA+0x7e>
 8016f80:	e077      	b.n	8017072 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	681a      	ldr	r2, [r3, #0]
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2140      	movs	r1, #64	@ 0x40
 8016f8e:	438a      	bics	r2, r1
 8016f90:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d055      	beq.n	8017048 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	b29a      	uxth	r2, r3
 8016fa4:	2312      	movs	r3, #18
 8016fa6:	18fb      	adds	r3, r7, r3
 8016fa8:	0592      	lsls	r2, r2, #22
 8016faa:	0d92      	lsrs	r2, r2, #22
 8016fac:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fb2:	b29b      	uxth	r3, r3
 8016fb4:	2bff      	cmp	r3, #255	@ 0xff
 8016fb6:	d906      	bls.n	8016fc6 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	22ff      	movs	r2, #255	@ 0xff
 8016fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8016fbe:	2380      	movs	r3, #128	@ 0x80
 8016fc0:	045b      	lsls	r3, r3, #17
 8016fc2:	617b      	str	r3, [r7, #20]
 8016fc4:	e010      	b.n	8016fe8 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016fca:	b29a      	uxth	r2, r3
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fd4:	4a50      	ldr	r2, [pc, #320]	@ (8017118 <I2C_Master_ISR_DMA+0x214>)
 8016fd6:	4293      	cmp	r3, r2
 8016fd8:	d003      	beq.n	8016fe2 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fde:	617b      	str	r3, [r7, #20]
 8016fe0:	e002      	b.n	8016fe8 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8016fe2:	2380      	movs	r3, #128	@ 0x80
 8016fe4:	049b      	lsls	r3, r3, #18
 8016fe6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fec:	b2da      	uxtb	r2, r3
 8016fee:	697c      	ldr	r4, [r7, #20]
 8016ff0:	2312      	movs	r3, #18
 8016ff2:	18fb      	adds	r3, r7, r3
 8016ff4:	8819      	ldrh	r1, [r3, #0]
 8016ff6:	68f8      	ldr	r0, [r7, #12]
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	9300      	str	r3, [sp, #0]
 8016ffc:	0023      	movs	r3, r4
 8016ffe:	f001 fb29 	bl	8018654 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017006:	b29a      	uxth	r2, r3
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801700c:	1ad3      	subs	r3, r2, r3
 801700e:	b29a      	uxth	r2, r3
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2241      	movs	r2, #65	@ 0x41
 8017018:	5c9b      	ldrb	r3, [r3, r2]
 801701a:	b2db      	uxtb	r3, r3
 801701c:	2b22      	cmp	r3, #34	@ 0x22
 801701e:	d109      	bne.n	8017034 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2180      	movs	r1, #128	@ 0x80
 801702c:	0209      	lsls	r1, r1, #8
 801702e:	430a      	orrs	r2, r1
 8017030:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017032:	e067      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	2180      	movs	r1, #128	@ 0x80
 8017040:	01c9      	lsls	r1, r1, #7
 8017042:	430a      	orrs	r2, r1
 8017044:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017046:	e05d      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	685a      	ldr	r2, [r3, #4]
 801704e:	2380      	movs	r3, #128	@ 0x80
 8017050:	049b      	lsls	r3, r3, #18
 8017052:	401a      	ands	r2, r3
 8017054:	2380      	movs	r3, #128	@ 0x80
 8017056:	049b      	lsls	r3, r3, #18
 8017058:	429a      	cmp	r2, r3
 801705a:	d004      	beq.n	8017066 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	0018      	movs	r0, r3
 8017060:	f000 fb88 	bl	8017774 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8017064:	e04e      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2140      	movs	r1, #64	@ 0x40
 801706a:	0018      	movs	r0, r3
 801706c:	f000 fe7a 	bl	8017d64 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017070:	e048      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	099b      	lsrs	r3, r3, #6
 8017076:	001a      	movs	r2, r3
 8017078:	2301      	movs	r3, #1
 801707a:	4013      	ands	r3, r2
 801707c:	d02e      	beq.n	80170dc <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	099b      	lsrs	r3, r3, #6
 8017082:	001a      	movs	r2, r3
 8017084:	2301      	movs	r3, #1
 8017086:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017088:	d028      	beq.n	80170dc <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801708e:	b29b      	uxth	r3, r3
 8017090:	2b00      	cmp	r3, #0
 8017092:	d11d      	bne.n	80170d0 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	685a      	ldr	r2, [r3, #4]
 801709a:	2380      	movs	r3, #128	@ 0x80
 801709c:	049b      	lsls	r3, r3, #18
 801709e:	401a      	ands	r2, r3
 80170a0:	2380      	movs	r3, #128	@ 0x80
 80170a2:	049b      	lsls	r3, r3, #18
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d02c      	beq.n	8017102 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170ac:	4a1a      	ldr	r2, [pc, #104]	@ (8017118 <I2C_Master_ISR_DMA+0x214>)
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d109      	bne.n	80170c6 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	685a      	ldr	r2, [r3, #4]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2180      	movs	r1, #128	@ 0x80
 80170be:	01c9      	lsls	r1, r1, #7
 80170c0:	430a      	orrs	r2, r1
 80170c2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80170c4:	e01d      	b.n	8017102 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	0018      	movs	r0, r3
 80170ca:	f000 fb53 	bl	8017774 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80170ce:	e018      	b.n	8017102 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	2140      	movs	r1, #64	@ 0x40
 80170d4:	0018      	movs	r0, r3
 80170d6:	f000 fe45 	bl	8017d64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80170da:	e012      	b.n	8017102 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	095b      	lsrs	r3, r3, #5
 80170e0:	001a      	movs	r2, r3
 80170e2:	2301      	movs	r3, #1
 80170e4:	4013      	ands	r3, r2
 80170e6:	d00d      	beq.n	8017104 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	095b      	lsrs	r3, r3, #5
 80170ec:	001a      	movs	r2, r3
 80170ee:	2301      	movs	r3, #1
 80170f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80170f2:	d007      	beq.n	8017104 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	0011      	movs	r1, r2
 80170fa:	0018      	movs	r0, r3
 80170fc:	f000 fbe2 	bl	80178c4 <I2C_ITMasterCplt>
 8017100:	e000      	b.n	8017104 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8017102:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	2240      	movs	r2, #64	@ 0x40
 8017108:	2100      	movs	r1, #0
 801710a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801710c:	2300      	movs	r3, #0
}
 801710e:	0018      	movs	r0, r3
 8017110:	46bd      	mov	sp, r7
 8017112:	b007      	add	sp, #28
 8017114:	bd90      	pop	{r4, r7, pc}
 8017116:	46c0      	nop			@ (mov r8, r8)
 8017118:	ffff0000 	.word	0xffff0000

0801711c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801711c:	b590      	push	{r4, r7, lr}
 801711e:	b089      	sub	sp, #36	@ 0x24
 8017120:	af02      	add	r7, sp, #8
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	60b9      	str	r1, [r7, #8]
 8017126:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017128:	4b92      	ldr	r3, [pc, #584]	@ (8017374 <I2C_Mem_ISR_DMA+0x258>)
 801712a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2240      	movs	r2, #64	@ 0x40
 8017130:	5c9b      	ldrb	r3, [r3, r2]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d101      	bne.n	801713a <I2C_Mem_ISR_DMA+0x1e>
 8017136:	2302      	movs	r3, #2
 8017138:	e118      	b.n	801736c <I2C_Mem_ISR_DMA+0x250>
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	2240      	movs	r2, #64	@ 0x40
 801713e:	2101      	movs	r1, #1
 8017140:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	091b      	lsrs	r3, r3, #4
 8017146:	001a      	movs	r2, r3
 8017148:	2301      	movs	r3, #1
 801714a:	4013      	ands	r3, r2
 801714c:	d019      	beq.n	8017182 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	091b      	lsrs	r3, r3, #4
 8017152:	001a      	movs	r2, r3
 8017154:	2301      	movs	r3, #1
 8017156:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017158:	d013      	beq.n	8017182 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2210      	movs	r2, #16
 8017160:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017166:	2204      	movs	r2, #4
 8017168:	431a      	orrs	r2, r3
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2120      	movs	r1, #32
 8017172:	0018      	movs	r0, r3
 8017174:	f001 faa8 	bl	80186c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	0018      	movs	r0, r3
 801717c:	f000 ff1d 	bl	8017fba <I2C_Flush_TXDR>
 8017180:	e0ef      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	085b      	lsrs	r3, r3, #1
 8017186:	001a      	movs	r2, r3
 8017188:	2301      	movs	r3, #1
 801718a:	4013      	ands	r3, r2
 801718c:	d00f      	beq.n	80171ae <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	085b      	lsrs	r3, r3, #1
 8017192:	001a      	movs	r2, r3
 8017194:	2301      	movs	r3, #1
 8017196:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017198:	d009      	beq.n	80171ae <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	68fa      	ldr	r2, [r7, #12]
 80171a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80171a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2201      	movs	r2, #1
 80171a8:	4252      	negs	r2, r2
 80171aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80171ac:	e0d9      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	09db      	lsrs	r3, r3, #7
 80171b2:	001a      	movs	r2, r3
 80171b4:	2301      	movs	r3, #1
 80171b6:	4013      	ands	r3, r2
 80171b8:	d060      	beq.n	801727c <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	099b      	lsrs	r3, r3, #6
 80171be:	001a      	movs	r2, r3
 80171c0:	2301      	movs	r3, #1
 80171c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80171c4:	d05a      	beq.n	801727c <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2110      	movs	r1, #16
 80171ca:	0018      	movs	r0, r3
 80171cc:	f001 fa7c 	bl	80186c8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d04a      	beq.n	8017270 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171de:	b29b      	uxth	r3, r3
 80171e0:	2bff      	cmp	r3, #255	@ 0xff
 80171e2:	d910      	bls.n	8017206 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	22ff      	movs	r2, #255	@ 0xff
 80171e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80171ee:	b299      	uxth	r1, r3
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	2380      	movs	r3, #128	@ 0x80
 80171f8:	045b      	lsls	r3, r3, #17
 80171fa:	68f8      	ldr	r0, [r7, #12]
 80171fc:	2400      	movs	r4, #0
 80171fe:	9400      	str	r4, [sp, #0]
 8017200:	f001 fa28 	bl	8018654 <I2C_TransferConfig>
 8017204:	e011      	b.n	801722a <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801720a:	b29a      	uxth	r2, r3
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017214:	b299      	uxth	r1, r3
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801721a:	b2da      	uxtb	r2, r3
 801721c:	2380      	movs	r3, #128	@ 0x80
 801721e:	049b      	lsls	r3, r3, #18
 8017220:	68f8      	ldr	r0, [r7, #12]
 8017222:	2400      	movs	r4, #0
 8017224:	9400      	str	r4, [sp, #0]
 8017226:	f001 fa15 	bl	8018654 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801722e:	b29a      	uxth	r2, r3
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	b29a      	uxth	r2, r3
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	2241      	movs	r2, #65	@ 0x41
 8017240:	5c9b      	ldrb	r3, [r3, r2]
 8017242:	b2db      	uxtb	r3, r3
 8017244:	2b22      	cmp	r3, #34	@ 0x22
 8017246:	d109      	bne.n	801725c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	2180      	movs	r1, #128	@ 0x80
 8017254:	0209      	lsls	r1, r1, #8
 8017256:	430a      	orrs	r2, r1
 8017258:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801725a:	e082      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	2180      	movs	r1, #128	@ 0x80
 8017268:	01c9      	lsls	r1, r1, #7
 801726a:	430a      	orrs	r2, r1
 801726c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801726e:	e078      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	2140      	movs	r1, #64	@ 0x40
 8017274:	0018      	movs	r0, r3
 8017276:	f000 fd75 	bl	8017d64 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801727a:	e072      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	099b      	lsrs	r3, r3, #6
 8017280:	001a      	movs	r2, r3
 8017282:	2301      	movs	r3, #1
 8017284:	4013      	ands	r3, r2
 8017286:	d05a      	beq.n	801733e <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	099b      	lsrs	r3, r3, #6
 801728c:	001a      	movs	r2, r3
 801728e:	2301      	movs	r3, #1
 8017290:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017292:	d054      	beq.n	801733e <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	2241      	movs	r2, #65	@ 0x41
 8017298:	5c9b      	ldrb	r3, [r3, r2]
 801729a:	b2db      	uxtb	r3, r3
 801729c:	2b22      	cmp	r3, #34	@ 0x22
 801729e:	d101      	bne.n	80172a4 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 80172a0:	4b35      	ldr	r3, [pc, #212]	@ (8017378 <I2C_Mem_ISR_DMA+0x25c>)
 80172a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	2bff      	cmp	r3, #255	@ 0xff
 80172ac:	d911      	bls.n	80172d2 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	22ff      	movs	r2, #255	@ 0xff
 80172b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172b8:	b299      	uxth	r1, r3
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172be:	b2da      	uxtb	r2, r3
 80172c0:	2380      	movs	r3, #128	@ 0x80
 80172c2:	045c      	lsls	r4, r3, #17
 80172c4:	68f8      	ldr	r0, [r7, #12]
 80172c6:	697b      	ldr	r3, [r7, #20]
 80172c8:	9300      	str	r3, [sp, #0]
 80172ca:	0023      	movs	r3, r4
 80172cc:	f001 f9c2 	bl	8018654 <I2C_TransferConfig>
 80172d0:	e012      	b.n	80172f8 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172d6:	b29a      	uxth	r2, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172e0:	b299      	uxth	r1, r3
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172e6:	b2da      	uxtb	r2, r3
 80172e8:	2380      	movs	r3, #128	@ 0x80
 80172ea:	049c      	lsls	r4, r3, #18
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	0023      	movs	r3, r4
 80172f4:	f001 f9ae 	bl	8018654 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172fc:	b29a      	uxth	r2, r3
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	b29a      	uxth	r2, r3
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	2241      	movs	r2, #65	@ 0x41
 801730e:	5c9b      	ldrb	r3, [r3, r2]
 8017310:	b2db      	uxtb	r3, r3
 8017312:	2b22      	cmp	r3, #34	@ 0x22
 8017314:	d109      	bne.n	801732a <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2180      	movs	r1, #128	@ 0x80
 8017322:	0209      	lsls	r1, r1, #8
 8017324:	430a      	orrs	r2, r1
 8017326:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017328:	e01b      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	681a      	ldr	r2, [r3, #0]
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	2180      	movs	r1, #128	@ 0x80
 8017336:	01c9      	lsls	r1, r1, #7
 8017338:	430a      	orrs	r2, r1
 801733a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801733c:	e011      	b.n	8017362 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801733e:	68bb      	ldr	r3, [r7, #8]
 8017340:	095b      	lsrs	r3, r3, #5
 8017342:	001a      	movs	r2, r3
 8017344:	2301      	movs	r3, #1
 8017346:	4013      	ands	r3, r2
 8017348:	d00b      	beq.n	8017362 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	095b      	lsrs	r3, r3, #5
 801734e:	001a      	movs	r2, r3
 8017350:	2301      	movs	r3, #1
 8017352:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017354:	d005      	beq.n	8017362 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8017356:	68ba      	ldr	r2, [r7, #8]
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	0011      	movs	r1, r2
 801735c:	0018      	movs	r0, r3
 801735e:	f000 fab1 	bl	80178c4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	2240      	movs	r2, #64	@ 0x40
 8017366:	2100      	movs	r1, #0
 8017368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801736a:	2300      	movs	r3, #0
}
 801736c:	0018      	movs	r0, r3
 801736e:	46bd      	mov	sp, r7
 8017370:	b007      	add	sp, #28
 8017372:	bd90      	pop	{r4, r7, pc}
 8017374:	80002000 	.word	0x80002000
 8017378:	80002400 	.word	0x80002400

0801737c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b088      	sub	sp, #32
 8017380:	af00      	add	r7, sp, #0
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801738c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801738e:	2300      	movs	r3, #0
 8017390:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2240      	movs	r2, #64	@ 0x40
 8017396:	5c9b      	ldrb	r3, [r3, r2]
 8017398:	2b01      	cmp	r3, #1
 801739a:	d101      	bne.n	80173a0 <I2C_Slave_ISR_DMA+0x24>
 801739c:	2302      	movs	r3, #2
 801739e:	e0dd      	b.n	801755c <I2C_Slave_ISR_DMA+0x1e0>
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2240      	movs	r2, #64	@ 0x40
 80173a4:	2101      	movs	r1, #1
 80173a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	095b      	lsrs	r3, r3, #5
 80173ac:	001a      	movs	r2, r3
 80173ae:	2301      	movs	r3, #1
 80173b0:	4013      	ands	r3, r2
 80173b2:	d00b      	beq.n	80173cc <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	095b      	lsrs	r3, r3, #5
 80173b8:	001a      	movs	r2, r3
 80173ba:	2301      	movs	r3, #1
 80173bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80173be:	d005      	beq.n	80173cc <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80173c0:	68ba      	ldr	r2, [r7, #8]
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	0011      	movs	r1, r2
 80173c6:	0018      	movs	r0, r3
 80173c8:	f000 fb4e 	bl	8017a68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	091b      	lsrs	r3, r3, #4
 80173d0:	001a      	movs	r2, r3
 80173d2:	2301      	movs	r3, #1
 80173d4:	4013      	ands	r3, r2
 80173d6:	d100      	bne.n	80173da <I2C_Slave_ISR_DMA+0x5e>
 80173d8:	e0a9      	b.n	801752e <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	091b      	lsrs	r3, r3, #4
 80173de:	001a      	movs	r2, r3
 80173e0:	2301      	movs	r3, #1
 80173e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80173e4:	d100      	bne.n	80173e8 <I2C_Slave_ISR_DMA+0x6c>
 80173e6:	e0a2      	b.n	801752e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	0b9b      	lsrs	r3, r3, #14
 80173ec:	001a      	movs	r2, r3
 80173ee:	2301      	movs	r3, #1
 80173f0:	4013      	ands	r3, r2
 80173f2:	d106      	bne.n	8017402 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	0bdb      	lsrs	r3, r3, #15
 80173f8:	001a      	movs	r2, r3
 80173fa:	2301      	movs	r3, #1
 80173fc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80173fe:	d100      	bne.n	8017402 <I2C_Slave_ISR_DMA+0x86>
 8017400:	e08e      	b.n	8017520 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017406:	2b00      	cmp	r3, #0
 8017408:	d00d      	beq.n	8017426 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	0bdb      	lsrs	r3, r3, #15
 801740e:	001a      	movs	r2, r3
 8017410:	2301      	movs	r3, #1
 8017412:	4013      	ands	r3, r2
 8017414:	d007      	beq.n	8017426 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d101      	bne.n	8017426 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8017422:	2301      	movs	r3, #1
 8017424:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801742a:	2b00      	cmp	r3, #0
 801742c:	d00d      	beq.n	801744a <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	0b9b      	lsrs	r3, r3, #14
 8017432:	001a      	movs	r2, r3
 8017434:	2301      	movs	r3, #1
 8017436:	4013      	ands	r3, r2
 8017438:	d007      	beq.n	801744a <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d101      	bne.n	801744a <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8017446:	2301      	movs	r3, #1
 8017448:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801744a:	69fb      	ldr	r3, [r7, #28]
 801744c:	2b01      	cmp	r3, #1
 801744e:	d12d      	bne.n	80174ac <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2241      	movs	r2, #65	@ 0x41
 8017454:	5c9b      	ldrb	r3, [r3, r2]
 8017456:	b2db      	uxtb	r3, r3
 8017458:	2b28      	cmp	r3, #40	@ 0x28
 801745a:	d10b      	bne.n	8017474 <I2C_Slave_ISR_DMA+0xf8>
 801745c:	69ba      	ldr	r2, [r7, #24]
 801745e:	2380      	movs	r3, #128	@ 0x80
 8017460:	049b      	lsls	r3, r3, #18
 8017462:	429a      	cmp	r2, r3
 8017464:	d106      	bne.n	8017474 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8017466:	68ba      	ldr	r2, [r7, #8]
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	0011      	movs	r1, r2
 801746c:	0018      	movs	r0, r3
 801746e:	f000 fc1f 	bl	8017cb0 <I2C_ITListenCplt>
 8017472:	e054      	b.n	801751e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	2241      	movs	r2, #65	@ 0x41
 8017478:	5c9b      	ldrb	r3, [r3, r2]
 801747a:	b2db      	uxtb	r3, r3
 801747c:	2b29      	cmp	r3, #41	@ 0x29
 801747e:	d110      	bne.n	80174a2 <I2C_Slave_ISR_DMA+0x126>
 8017480:	69bb      	ldr	r3, [r7, #24]
 8017482:	4a38      	ldr	r2, [pc, #224]	@ (8017564 <I2C_Slave_ISR_DMA+0x1e8>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d00c      	beq.n	80174a2 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	2210      	movs	r2, #16
 801748e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	0018      	movs	r0, r3
 8017494:	f000 fd91 	bl	8017fba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	0018      	movs	r0, r3
 801749c:	f000 f9ac 	bl	80177f8 <I2C_ITSlaveSeqCplt>
 80174a0:	e03d      	b.n	801751e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	2210      	movs	r2, #16
 80174a8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80174aa:	e03e      	b.n	801752a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2210      	movs	r2, #16
 80174b2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174b8:	2204      	movs	r2, #4
 80174ba:	431a      	orrs	r2, r3
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80174c0:	2317      	movs	r3, #23
 80174c2:	18fb      	adds	r3, r7, r3
 80174c4:	68fa      	ldr	r2, [r7, #12]
 80174c6:	2141      	movs	r1, #65	@ 0x41
 80174c8:	5c52      	ldrb	r2, [r2, r1]
 80174ca:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80174cc:	69bb      	ldr	r3, [r7, #24]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d004      	beq.n	80174dc <I2C_Slave_ISR_DMA+0x160>
 80174d2:	69ba      	ldr	r2, [r7, #24]
 80174d4:	2380      	movs	r3, #128	@ 0x80
 80174d6:	045b      	lsls	r3, r3, #17
 80174d8:	429a      	cmp	r2, r3
 80174da:	d126      	bne.n	801752a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80174dc:	2217      	movs	r2, #23
 80174de:	18bb      	adds	r3, r7, r2
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	2b21      	cmp	r3, #33	@ 0x21
 80174e4:	d003      	beq.n	80174ee <I2C_Slave_ISR_DMA+0x172>
 80174e6:	18bb      	adds	r3, r7, r2
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	2b29      	cmp	r3, #41	@ 0x29
 80174ec:	d103      	bne.n	80174f6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	2221      	movs	r2, #33	@ 0x21
 80174f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80174f4:	e00b      	b.n	801750e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80174f6:	2217      	movs	r2, #23
 80174f8:	18bb      	adds	r3, r7, r2
 80174fa:	781b      	ldrb	r3, [r3, #0]
 80174fc:	2b22      	cmp	r3, #34	@ 0x22
 80174fe:	d003      	beq.n	8017508 <I2C_Slave_ISR_DMA+0x18c>
 8017500:	18bb      	adds	r3, r7, r2
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	2b2a      	cmp	r3, #42	@ 0x2a
 8017506:	d102      	bne.n	801750e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2222      	movs	r2, #34	@ 0x22
 801750c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	0011      	movs	r1, r2
 8017516:	0018      	movs	r0, r3
 8017518:	f000 fc24 	bl	8017d64 <I2C_ITError>
      if (treatdmanack == 1U)
 801751c:	e005      	b.n	801752a <I2C_Slave_ISR_DMA+0x1ae>
 801751e:	e004      	b.n	801752a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	2210      	movs	r2, #16
 8017526:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017528:	e013      	b.n	8017552 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 801752a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801752c:	e011      	b.n	8017552 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	08db      	lsrs	r3, r3, #3
 8017532:	001a      	movs	r2, r3
 8017534:	2301      	movs	r3, #1
 8017536:	4013      	ands	r3, r2
 8017538:	d00b      	beq.n	8017552 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	08db      	lsrs	r3, r3, #3
 801753e:	001a      	movs	r2, r3
 8017540:	2301      	movs	r3, #1
 8017542:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017544:	d005      	beq.n	8017552 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017546:	68ba      	ldr	r2, [r7, #8]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	0011      	movs	r1, r2
 801754c:	0018      	movs	r0, r3
 801754e:	f000 f86d 	bl	801762c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2240      	movs	r2, #64	@ 0x40
 8017556:	2100      	movs	r1, #0
 8017558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801755a:	2300      	movs	r3, #0
}
 801755c:	0018      	movs	r0, r3
 801755e:	46bd      	mov	sp, r7
 8017560:	b008      	add	sp, #32
 8017562:	bd80      	pop	{r7, pc}
 8017564:	ffff0000 	.word	0xffff0000

08017568 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017568:	b5b0      	push	{r4, r5, r7, lr}
 801756a:	b086      	sub	sp, #24
 801756c:	af02      	add	r7, sp, #8
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	000c      	movs	r4, r1
 8017572:	0010      	movs	r0, r2
 8017574:	0019      	movs	r1, r3
 8017576:	250a      	movs	r5, #10
 8017578:	197b      	adds	r3, r7, r5
 801757a:	1c22      	adds	r2, r4, #0
 801757c:	801a      	strh	r2, [r3, #0]
 801757e:	2308      	movs	r3, #8
 8017580:	18fb      	adds	r3, r7, r3
 8017582:	1c02      	adds	r2, r0, #0
 8017584:	801a      	strh	r2, [r3, #0]
 8017586:	1dbb      	adds	r3, r7, #6
 8017588:	1c0a      	adds	r2, r1, #0
 801758a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801758c:	1dbb      	adds	r3, r7, #6
 801758e:	881b      	ldrh	r3, [r3, #0]
 8017590:	b2da      	uxtb	r2, r3
 8017592:	197b      	adds	r3, r7, r5
 8017594:	8819      	ldrh	r1, [r3, #0]
 8017596:	68f8      	ldr	r0, [r7, #12]
 8017598:	4b23      	ldr	r3, [pc, #140]	@ (8017628 <I2C_RequestMemoryRead+0xc0>)
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	2300      	movs	r3, #0
 801759e:	f001 f859 	bl	8018654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80175a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175a4:	6a39      	ldr	r1, [r7, #32]
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	0018      	movs	r0, r3
 80175aa:	f000 fe4f 	bl	801824c <I2C_WaitOnTXISFlagUntilTimeout>
 80175ae:	1e03      	subs	r3, r0, #0
 80175b0:	d001      	beq.n	80175b6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80175b2:	2301      	movs	r3, #1
 80175b4:	e033      	b.n	801761e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80175b6:	1dbb      	adds	r3, r7, #6
 80175b8:	881b      	ldrh	r3, [r3, #0]
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d107      	bne.n	80175ce <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80175be:	2308      	movs	r3, #8
 80175c0:	18fb      	adds	r3, r7, r3
 80175c2:	881b      	ldrh	r3, [r3, #0]
 80175c4:	b2da      	uxtb	r2, r3
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80175cc:	e019      	b.n	8017602 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80175ce:	2308      	movs	r3, #8
 80175d0:	18fb      	adds	r3, r7, r3
 80175d2:	881b      	ldrh	r3, [r3, #0]
 80175d4:	0a1b      	lsrs	r3, r3, #8
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	b2da      	uxtb	r2, r3
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80175e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175e2:	6a39      	ldr	r1, [r7, #32]
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	0018      	movs	r0, r3
 80175e8:	f000 fe30 	bl	801824c <I2C_WaitOnTXISFlagUntilTimeout>
 80175ec:	1e03      	subs	r3, r0, #0
 80175ee:	d001      	beq.n	80175f4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80175f0:	2301      	movs	r3, #1
 80175f2:	e014      	b.n	801761e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80175f4:	2308      	movs	r3, #8
 80175f6:	18fb      	adds	r3, r7, r3
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	b2da      	uxtb	r2, r3
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017602:	6a3a      	ldr	r2, [r7, #32]
 8017604:	68f8      	ldr	r0, [r7, #12]
 8017606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	0013      	movs	r3, r2
 801760c:	2200      	movs	r2, #0
 801760e:	2140      	movs	r1, #64	@ 0x40
 8017610:	f000 fdce 	bl	80181b0 <I2C_WaitOnFlagUntilTimeout>
 8017614:	1e03      	subs	r3, r0, #0
 8017616:	d001      	beq.n	801761c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017618:	2301      	movs	r3, #1
 801761a:	e000      	b.n	801761e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 801761c:	2300      	movs	r3, #0
}
 801761e:	0018      	movs	r0, r3
 8017620:	46bd      	mov	sp, r7
 8017622:	b004      	add	sp, #16
 8017624:	bdb0      	pop	{r4, r5, r7, pc}
 8017626:	46c0      	nop			@ (mov r8, r8)
 8017628:	80002000 	.word	0x80002000

0801762c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801762c:	b5b0      	push	{r4, r5, r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2241      	movs	r2, #65	@ 0x41
 801763a:	5c9b      	ldrb	r3, [r3, r2]
 801763c:	b2db      	uxtb	r3, r3
 801763e:	001a      	movs	r2, r3
 8017640:	2328      	movs	r3, #40	@ 0x28
 8017642:	4013      	ands	r3, r2
 8017644:	2b28      	cmp	r3, #40	@ 0x28
 8017646:	d000      	beq.n	801764a <I2C_ITAddrCplt+0x1e>
 8017648:	e088      	b.n	801775c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	699b      	ldr	r3, [r3, #24]
 8017650:	0c1b      	lsrs	r3, r3, #16
 8017652:	b2da      	uxtb	r2, r3
 8017654:	250f      	movs	r5, #15
 8017656:	197b      	adds	r3, r7, r5
 8017658:	2101      	movs	r1, #1
 801765a:	400a      	ands	r2, r1
 801765c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	0c1b      	lsrs	r3, r3, #16
 8017666:	b29a      	uxth	r2, r3
 8017668:	200c      	movs	r0, #12
 801766a:	183b      	adds	r3, r7, r0
 801766c:	21fe      	movs	r1, #254	@ 0xfe
 801766e:	400a      	ands	r2, r1
 8017670:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	b29a      	uxth	r2, r3
 801767a:	240a      	movs	r4, #10
 801767c:	193b      	adds	r3, r7, r4
 801767e:	0592      	lsls	r2, r2, #22
 8017680:	0d92      	lsrs	r2, r2, #22
 8017682:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	b29a      	uxth	r2, r3
 801768c:	2308      	movs	r3, #8
 801768e:	18fb      	adds	r3, r7, r3
 8017690:	21fe      	movs	r1, #254	@ 0xfe
 8017692:	400a      	ands	r2, r1
 8017694:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	2b02      	cmp	r3, #2
 801769c:	d148      	bne.n	8017730 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801769e:	0021      	movs	r1, r4
 80176a0:	187b      	adds	r3, r7, r1
 80176a2:	881b      	ldrh	r3, [r3, #0]
 80176a4:	09db      	lsrs	r3, r3, #7
 80176a6:	b29a      	uxth	r2, r3
 80176a8:	183b      	adds	r3, r7, r0
 80176aa:	881b      	ldrh	r3, [r3, #0]
 80176ac:	4053      	eors	r3, r2
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	001a      	movs	r2, r3
 80176b2:	2306      	movs	r3, #6
 80176b4:	4013      	ands	r3, r2
 80176b6:	d120      	bne.n	80176fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80176b8:	183b      	adds	r3, r7, r0
 80176ba:	187a      	adds	r2, r7, r1
 80176bc:	8812      	ldrh	r2, [r2, #0]
 80176be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80176c4:	1c5a      	adds	r2, r3, #1
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80176ce:	2b02      	cmp	r3, #2
 80176d0:	d14c      	bne.n	801776c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	2200      	movs	r2, #0
 80176d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	2208      	movs	r2, #8
 80176de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2240      	movs	r2, #64	@ 0x40
 80176e4:	2100      	movs	r1, #0
 80176e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80176e8:	183b      	adds	r3, r7, r0
 80176ea:	881a      	ldrh	r2, [r3, #0]
 80176ec:	197b      	adds	r3, r7, r5
 80176ee:	7819      	ldrb	r1, [r3, #0]
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	0018      	movs	r0, r3
 80176f4:	f7ff f978 	bl	80169e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80176f8:	e038      	b.n	801776c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80176fa:	240c      	movs	r4, #12
 80176fc:	193b      	adds	r3, r7, r4
 80176fe:	2208      	movs	r2, #8
 8017700:	18ba      	adds	r2, r7, r2
 8017702:	8812      	ldrh	r2, [r2, #0]
 8017704:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017706:	2380      	movs	r3, #128	@ 0x80
 8017708:	021a      	lsls	r2, r3, #8
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	0011      	movs	r1, r2
 801770e:	0018      	movs	r0, r3
 8017710:	f001 f868 	bl	80187e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2240      	movs	r2, #64	@ 0x40
 8017718:	2100      	movs	r1, #0
 801771a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801771c:	193b      	adds	r3, r7, r4
 801771e:	881a      	ldrh	r2, [r3, #0]
 8017720:	230f      	movs	r3, #15
 8017722:	18fb      	adds	r3, r7, r3
 8017724:	7819      	ldrb	r1, [r3, #0]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	0018      	movs	r0, r3
 801772a:	f7ff f95d 	bl	80169e8 <HAL_I2C_AddrCallback>
}
 801772e:	e01d      	b.n	801776c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017730:	2380      	movs	r3, #128	@ 0x80
 8017732:	021a      	lsls	r2, r3, #8
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	0011      	movs	r1, r2
 8017738:	0018      	movs	r0, r3
 801773a:	f001 f853 	bl	80187e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	2240      	movs	r2, #64	@ 0x40
 8017742:	2100      	movs	r1, #0
 8017744:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017746:	230c      	movs	r3, #12
 8017748:	18fb      	adds	r3, r7, r3
 801774a:	881a      	ldrh	r2, [r3, #0]
 801774c:	230f      	movs	r3, #15
 801774e:	18fb      	adds	r3, r7, r3
 8017750:	7819      	ldrb	r1, [r3, #0]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	0018      	movs	r0, r3
 8017756:	f7ff f947 	bl	80169e8 <HAL_I2C_AddrCallback>
}
 801775a:	e007      	b.n	801776c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	2208      	movs	r2, #8
 8017762:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2240      	movs	r2, #64	@ 0x40
 8017768:	2100      	movs	r1, #0
 801776a:	5499      	strb	r1, [r3, r2]
}
 801776c:	46c0      	nop			@ (mov r8, r8)
 801776e:	46bd      	mov	sp, r7
 8017770:	b004      	add	sp, #16
 8017772:	bdb0      	pop	{r4, r5, r7, pc}

08017774 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2242      	movs	r2, #66	@ 0x42
 8017780:	2100      	movs	r1, #0
 8017782:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2241      	movs	r2, #65	@ 0x41
 8017788:	5c9b      	ldrb	r3, [r3, r2]
 801778a:	b2db      	uxtb	r3, r3
 801778c:	2b21      	cmp	r3, #33	@ 0x21
 801778e:	d117      	bne.n	80177c0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2241      	movs	r2, #65	@ 0x41
 8017794:	2120      	movs	r1, #32
 8017796:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2211      	movs	r2, #17
 801779c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2200      	movs	r2, #0
 80177a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2101      	movs	r1, #1
 80177a8:	0018      	movs	r0, r3
 80177aa:	f001 f81b 	bl	80187e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2240      	movs	r2, #64	@ 0x40
 80177b2:	2100      	movs	r1, #0
 80177b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	0018      	movs	r0, r3
 80177ba:	f7ff f8f5 	bl	80169a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80177be:	e016      	b.n	80177ee <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2241      	movs	r2, #65	@ 0x41
 80177c4:	2120      	movs	r1, #32
 80177c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2212      	movs	r2, #18
 80177cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2200      	movs	r2, #0
 80177d2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2102      	movs	r1, #2
 80177d8:	0018      	movs	r0, r3
 80177da:	f001 f803 	bl	80187e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2240      	movs	r2, #64	@ 0x40
 80177e2:	2100      	movs	r1, #0
 80177e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	0018      	movs	r0, r3
 80177ea:	f7ff f8e5 	bl	80169b8 <HAL_I2C_MasterRxCpltCallback>
}
 80177ee:	46c0      	nop			@ (mov r8, r8)
 80177f0:	46bd      	mov	sp, r7
 80177f2:	b002      	add	sp, #8
 80177f4:	bd80      	pop	{r7, pc}
	...

080177f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2242      	movs	r2, #66	@ 0x42
 801780c:	2100      	movs	r1, #0
 801780e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	0b9b      	lsrs	r3, r3, #14
 8017814:	001a      	movs	r2, r3
 8017816:	2301      	movs	r3, #1
 8017818:	4013      	ands	r3, r2
 801781a:	d008      	beq.n	801782e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	4925      	ldr	r1, [pc, #148]	@ (80178bc <I2C_ITSlaveSeqCplt+0xc4>)
 8017828:	400a      	ands	r2, r1
 801782a:	601a      	str	r2, [r3, #0]
 801782c:	e00d      	b.n	801784a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	0bdb      	lsrs	r3, r3, #15
 8017832:	001a      	movs	r2, r3
 8017834:	2301      	movs	r3, #1
 8017836:	4013      	ands	r3, r2
 8017838:	d007      	beq.n	801784a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	681a      	ldr	r2, [r3, #0]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	491e      	ldr	r1, [pc, #120]	@ (80178c0 <I2C_ITSlaveSeqCplt+0xc8>)
 8017846:	400a      	ands	r2, r1
 8017848:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2241      	movs	r2, #65	@ 0x41
 801784e:	5c9b      	ldrb	r3, [r3, r2]
 8017850:	b2db      	uxtb	r3, r3
 8017852:	2b29      	cmp	r3, #41	@ 0x29
 8017854:	d114      	bne.n	8017880 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2241      	movs	r2, #65	@ 0x41
 801785a:	2128      	movs	r1, #40	@ 0x28
 801785c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2221      	movs	r2, #33	@ 0x21
 8017862:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2101      	movs	r1, #1
 8017868:	0018      	movs	r0, r3
 801786a:	f000 ffbb 	bl	80187e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	2240      	movs	r2, #64	@ 0x40
 8017872:	2100      	movs	r1, #0
 8017874:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	0018      	movs	r0, r3
 801787a:	f7ff f8a5 	bl	80169c8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801787e:	e019      	b.n	80178b4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2241      	movs	r2, #65	@ 0x41
 8017884:	5c9b      	ldrb	r3, [r3, r2]
 8017886:	b2db      	uxtb	r3, r3
 8017888:	2b2a      	cmp	r3, #42	@ 0x2a
 801788a:	d113      	bne.n	80178b4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	2241      	movs	r2, #65	@ 0x41
 8017890:	2128      	movs	r1, #40	@ 0x28
 8017892:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2222      	movs	r2, #34	@ 0x22
 8017898:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	2102      	movs	r1, #2
 801789e:	0018      	movs	r0, r3
 80178a0:	f000 ffa0 	bl	80187e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2240      	movs	r2, #64	@ 0x40
 80178a8:	2100      	movs	r1, #0
 80178aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	0018      	movs	r0, r3
 80178b0:	f7ff f892 	bl	80169d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80178b4:	46c0      	nop			@ (mov r8, r8)
 80178b6:	46bd      	mov	sp, r7
 80178b8:	b004      	add	sp, #16
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	ffffbfff 	.word	0xffffbfff
 80178c0:	ffff7fff 	.word	0xffff7fff

080178c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b086      	sub	sp, #24
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2220      	movs	r2, #32
 80178d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	2241      	movs	r2, #65	@ 0x41
 80178de:	5c9b      	ldrb	r3, [r3, r2]
 80178e0:	b2db      	uxtb	r3, r3
 80178e2:	2b21      	cmp	r3, #33	@ 0x21
 80178e4:	d108      	bne.n	80178f8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2101      	movs	r1, #1
 80178ea:	0018      	movs	r0, r3
 80178ec:	f000 ff7a 	bl	80187e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2211      	movs	r2, #17
 80178f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80178f6:	e00d      	b.n	8017914 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2241      	movs	r2, #65	@ 0x41
 80178fc:	5c9b      	ldrb	r3, [r3, r2]
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b22      	cmp	r3, #34	@ 0x22
 8017902:	d107      	bne.n	8017914 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2102      	movs	r1, #2
 8017908:	0018      	movs	r0, r3
 801790a:	f000 ff6b 	bl	80187e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	2212      	movs	r2, #18
 8017912:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	685a      	ldr	r2, [r3, #4]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	4950      	ldr	r1, [pc, #320]	@ (8017a60 <I2C_ITMasterCplt+0x19c>)
 8017920:	400a      	ands	r2, r1
 8017922:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2200      	movs	r2, #0
 8017928:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	4a4d      	ldr	r2, [pc, #308]	@ (8017a64 <I2C_ITMasterCplt+0x1a0>)
 801792e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	091b      	lsrs	r3, r3, #4
 8017934:	001a      	movs	r2, r3
 8017936:	2301      	movs	r3, #1
 8017938:	4013      	ands	r3, r2
 801793a:	d009      	beq.n	8017950 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	2210      	movs	r2, #16
 8017942:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017948:	2204      	movs	r2, #4
 801794a:	431a      	orrs	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	2241      	movs	r2, #65	@ 0x41
 8017954:	5c9b      	ldrb	r3, [r3, r2]
 8017956:	b2db      	uxtb	r3, r3
 8017958:	2b60      	cmp	r3, #96	@ 0x60
 801795a:	d10b      	bne.n	8017974 <I2C_ITMasterCplt+0xb0>
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	089b      	lsrs	r3, r3, #2
 8017960:	001a      	movs	r2, r3
 8017962:	2301      	movs	r3, #1
 8017964:	4013      	ands	r3, r2
 8017966:	d005      	beq.n	8017974 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801796e:	b2db      	uxtb	r3, r3
 8017970:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017972:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	0018      	movs	r0, r3
 8017978:	f000 fb1f 	bl	8017fba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017980:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2241      	movs	r2, #65	@ 0x41
 8017986:	5c9b      	ldrb	r3, [r3, r2]
 8017988:	b2db      	uxtb	r3, r3
 801798a:	2b60      	cmp	r3, #96	@ 0x60
 801798c:	d002      	beq.n	8017994 <I2C_ITMasterCplt+0xd0>
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d007      	beq.n	80179a4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	0011      	movs	r1, r2
 801799c:	0018      	movs	r0, r3
 801799e:	f000 f9e1 	bl	8017d64 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80179a2:	e058      	b.n	8017a56 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2241      	movs	r2, #65	@ 0x41
 80179a8:	5c9b      	ldrb	r3, [r3, r2]
 80179aa:	b2db      	uxtb	r3, r3
 80179ac:	2b21      	cmp	r3, #33	@ 0x21
 80179ae:	d126      	bne.n	80179fe <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2241      	movs	r2, #65	@ 0x41
 80179b4:	2120      	movs	r1, #32
 80179b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2200      	movs	r2, #0
 80179bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2242      	movs	r2, #66	@ 0x42
 80179c2:	5c9b      	ldrb	r3, [r3, r2]
 80179c4:	b2db      	uxtb	r3, r3
 80179c6:	2b40      	cmp	r3, #64	@ 0x40
 80179c8:	d10c      	bne.n	80179e4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2242      	movs	r2, #66	@ 0x42
 80179ce:	2100      	movs	r1, #0
 80179d0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2240      	movs	r2, #64	@ 0x40
 80179d6:	2100      	movs	r1, #0
 80179d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	0018      	movs	r0, r3
 80179de:	f7ff f81b 	bl	8016a18 <HAL_I2C_MemTxCpltCallback>
}
 80179e2:	e038      	b.n	8017a56 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2242      	movs	r2, #66	@ 0x42
 80179e8:	2100      	movs	r1, #0
 80179ea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2240      	movs	r2, #64	@ 0x40
 80179f0:	2100      	movs	r1, #0
 80179f2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	0018      	movs	r0, r3
 80179f8:	f7fe ffd6 	bl	80169a8 <HAL_I2C_MasterTxCpltCallback>
}
 80179fc:	e02b      	b.n	8017a56 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	2241      	movs	r2, #65	@ 0x41
 8017a02:	5c9b      	ldrb	r3, [r3, r2]
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	2b22      	cmp	r3, #34	@ 0x22
 8017a08:	d125      	bne.n	8017a56 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2241      	movs	r2, #65	@ 0x41
 8017a0e:	2120      	movs	r1, #32
 8017a10:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	2200      	movs	r2, #0
 8017a16:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2242      	movs	r2, #66	@ 0x42
 8017a1c:	5c9b      	ldrb	r3, [r3, r2]
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	2b40      	cmp	r3, #64	@ 0x40
 8017a22:	d10c      	bne.n	8017a3e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2242      	movs	r2, #66	@ 0x42
 8017a28:	2100      	movs	r1, #0
 8017a2a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2240      	movs	r2, #64	@ 0x40
 8017a30:	2100      	movs	r1, #0
 8017a32:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	0018      	movs	r0, r3
 8017a38:	f7fe fff6 	bl	8016a28 <HAL_I2C_MemRxCpltCallback>
}
 8017a3c:	e00b      	b.n	8017a56 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2242      	movs	r2, #66	@ 0x42
 8017a42:	2100      	movs	r1, #0
 8017a44:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	2240      	movs	r2, #64	@ 0x40
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	0018      	movs	r0, r3
 8017a52:	f7fe ffb1 	bl	80169b8 <HAL_I2C_MasterRxCpltCallback>
}
 8017a56:	46c0      	nop			@ (mov r8, r8)
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	b006      	add	sp, #24
 8017a5c:	bd80      	pop	{r7, pc}
 8017a5e:	46c0      	nop			@ (mov r8, r8)
 8017a60:	fe00e800 	.word	0xfe00e800
 8017a64:	ffff0000 	.word	0xffff0000

08017a68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b086      	sub	sp, #24
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
 8017a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017a7e:	200f      	movs	r0, #15
 8017a80:	183b      	adds	r3, r7, r0
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	2141      	movs	r1, #65	@ 0x41
 8017a86:	5c52      	ldrb	r2, [r2, r1]
 8017a88:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2220      	movs	r2, #32
 8017a90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017a92:	183b      	adds	r3, r7, r0
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	2b21      	cmp	r3, #33	@ 0x21
 8017a98:	d003      	beq.n	8017aa2 <I2C_ITSlaveCplt+0x3a>
 8017a9a:	183b      	adds	r3, r7, r0
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	2b29      	cmp	r3, #41	@ 0x29
 8017aa0:	d109      	bne.n	8017ab6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8017aa2:	4a7d      	ldr	r2, [pc, #500]	@ (8017c98 <I2C_ITSlaveCplt+0x230>)
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	0011      	movs	r1, r2
 8017aa8:	0018      	movs	r0, r3
 8017aaa:	f000 fe9b 	bl	80187e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	2221      	movs	r2, #33	@ 0x21
 8017ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8017ab4:	e011      	b.n	8017ada <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017ab6:	220f      	movs	r2, #15
 8017ab8:	18bb      	adds	r3, r7, r2
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	2b22      	cmp	r3, #34	@ 0x22
 8017abe:	d003      	beq.n	8017ac8 <I2C_ITSlaveCplt+0x60>
 8017ac0:	18bb      	adds	r3, r7, r2
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ac6:	d108      	bne.n	8017ada <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017ac8:	4a74      	ldr	r2, [pc, #464]	@ (8017c9c <I2C_ITSlaveCplt+0x234>)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	0011      	movs	r1, r2
 8017ace:	0018      	movs	r0, r3
 8017ad0:	f000 fe88 	bl	80187e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2222      	movs	r2, #34	@ 0x22
 8017ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	685a      	ldr	r2, [r3, #4]
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2180      	movs	r1, #128	@ 0x80
 8017ae6:	0209      	lsls	r1, r1, #8
 8017ae8:	430a      	orrs	r2, r1
 8017aea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	685a      	ldr	r2, [r3, #4]
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	496a      	ldr	r1, [pc, #424]	@ (8017ca0 <I2C_ITSlaveCplt+0x238>)
 8017af8:	400a      	ands	r2, r1
 8017afa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	0018      	movs	r0, r3
 8017b00:	f000 fa5b 	bl	8017fba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	0b9b      	lsrs	r3, r3, #14
 8017b08:	001a      	movs	r2, r3
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	4013      	ands	r3, r2
 8017b0e:	d013      	beq.n	8017b38 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	4962      	ldr	r1, [pc, #392]	@ (8017ca4 <I2C_ITSlaveCplt+0x23c>)
 8017b1c:	400a      	ands	r2, r1
 8017b1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d020      	beq.n	8017b6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	b29a      	uxth	r2, r3
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017b36:	e018      	b.n	8017b6a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	0bdb      	lsrs	r3, r3, #15
 8017b3c:	001a      	movs	r2, r3
 8017b3e:	2301      	movs	r3, #1
 8017b40:	4013      	ands	r3, r2
 8017b42:	d012      	beq.n	8017b6a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	4956      	ldr	r1, [pc, #344]	@ (8017ca8 <I2C_ITSlaveCplt+0x240>)
 8017b50:	400a      	ands	r2, r1
 8017b52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d006      	beq.n	8017b6a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	685b      	ldr	r3, [r3, #4]
 8017b64:	b29a      	uxth	r2, r3
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	089b      	lsrs	r3, r3, #2
 8017b6e:	001a      	movs	r2, r3
 8017b70:	2301      	movs	r3, #1
 8017b72:	4013      	ands	r3, r2
 8017b74:	d020      	beq.n	8017bb8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	2204      	movs	r2, #4
 8017b7a:	4393      	bics	r3, r2
 8017b7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b88:	b2d2      	uxtb	r2, r2
 8017b8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b90:	1c5a      	adds	r2, r3, #1
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d00c      	beq.n	8017bb8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ba2:	3b01      	subs	r3, #1
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	3b01      	subs	r3, #1
 8017bb2:	b29a      	uxth	r2, r3
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d005      	beq.n	8017bce <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017bc6:	2204      	movs	r2, #4
 8017bc8:	431a      	orrs	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2242      	movs	r2, #66	@ 0x42
 8017bd2:	2100      	movs	r1, #0
 8017bd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2200      	movs	r2, #0
 8017bda:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d013      	beq.n	8017c0c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	0011      	movs	r1, r2
 8017bec:	0018      	movs	r0, r3
 8017bee:	f000 f8b9 	bl	8017d64 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2241      	movs	r2, #65	@ 0x41
 8017bf6:	5c9b      	ldrb	r3, [r3, r2]
 8017bf8:	b2db      	uxtb	r3, r3
 8017bfa:	2b28      	cmp	r3, #40	@ 0x28
 8017bfc:	d147      	bne.n	8017c8e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8017bfe:	697a      	ldr	r2, [r7, #20]
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	0011      	movs	r1, r2
 8017c04:	0018      	movs	r0, r3
 8017c06:	f000 f853 	bl	8017cb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017c0a:	e040      	b.n	8017c8e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c10:	4a26      	ldr	r2, [pc, #152]	@ (8017cac <I2C_ITSlaveCplt+0x244>)
 8017c12:	4293      	cmp	r3, r2
 8017c14:	d016      	beq.n	8017c44 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	0018      	movs	r0, r3
 8017c1a:	f7ff fded 	bl	80177f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	4a22      	ldr	r2, [pc, #136]	@ (8017cac <I2C_ITSlaveCplt+0x244>)
 8017c22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2241      	movs	r2, #65	@ 0x41
 8017c28:	2120      	movs	r1, #32
 8017c2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2200      	movs	r2, #0
 8017c30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2240      	movs	r2, #64	@ 0x40
 8017c36:	2100      	movs	r1, #0
 8017c38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	0018      	movs	r0, r3
 8017c3e:	f7fe fee3 	bl	8016a08 <HAL_I2C_ListenCpltCallback>
}
 8017c42:	e024      	b.n	8017c8e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2241      	movs	r2, #65	@ 0x41
 8017c48:	5c9b      	ldrb	r3, [r3, r2]
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	2b22      	cmp	r3, #34	@ 0x22
 8017c4e:	d10f      	bne.n	8017c70 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2241      	movs	r2, #65	@ 0x41
 8017c54:	2120      	movs	r1, #32
 8017c56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2240      	movs	r2, #64	@ 0x40
 8017c62:	2100      	movs	r1, #0
 8017c64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	0018      	movs	r0, r3
 8017c6a:	f7fe feb5 	bl	80169d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8017c6e:	e00e      	b.n	8017c8e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2241      	movs	r2, #65	@ 0x41
 8017c74:	2120      	movs	r1, #32
 8017c76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2240      	movs	r2, #64	@ 0x40
 8017c82:	2100      	movs	r1, #0
 8017c84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	0018      	movs	r0, r3
 8017c8a:	f7fe fe9d 	bl	80169c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8017c8e:	46c0      	nop			@ (mov r8, r8)
 8017c90:	46bd      	mov	sp, r7
 8017c92:	b006      	add	sp, #24
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	46c0      	nop			@ (mov r8, r8)
 8017c98:	00008001 	.word	0x00008001
 8017c9c:	00008002 	.word	0x00008002
 8017ca0:	fe00e800 	.word	0xfe00e800
 8017ca4:	ffffbfff 	.word	0xffffbfff
 8017ca8:	ffff7fff 	.word	0xffff7fff
 8017cac:	ffff0000 	.word	0xffff0000

08017cb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	4a27      	ldr	r2, [pc, #156]	@ (8017d5c <I2C_ITListenCplt+0xac>)
 8017cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2241      	movs	r2, #65	@ 0x41
 8017cca:	2120      	movs	r1, #32
 8017ccc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2242      	movs	r2, #66	@ 0x42
 8017cd2:	2100      	movs	r1, #0
 8017cd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	089b      	lsrs	r3, r3, #2
 8017ce0:	001a      	movs	r2, r3
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	4013      	ands	r3, r2
 8017ce6:	d022      	beq.n	8017d2e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cf2:	b2d2      	uxtb	r2, r2
 8017cf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cfa:	1c5a      	adds	r2, r3, #1
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d012      	beq.n	8017d2e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d0c:	3b01      	subs	r3, #1
 8017d0e:	b29a      	uxth	r2, r3
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	3b01      	subs	r3, #1
 8017d1c:	b29a      	uxth	r2, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d26:	2204      	movs	r2, #4
 8017d28:	431a      	orrs	r2, r3
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8017d60 <I2C_ITListenCplt+0xb0>)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	0011      	movs	r1, r2
 8017d34:	0018      	movs	r0, r3
 8017d36:	f000 fd55 	bl	80187e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2210      	movs	r2, #16
 8017d40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2240      	movs	r2, #64	@ 0x40
 8017d46:	2100      	movs	r1, #0
 8017d48:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	0018      	movs	r0, r3
 8017d4e:	f7fe fe5b 	bl	8016a08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8017d52:	46c0      	nop			@ (mov r8, r8)
 8017d54:	46bd      	mov	sp, r7
 8017d56:	b002      	add	sp, #8
 8017d58:	bd80      	pop	{r7, pc}
 8017d5a:	46c0      	nop			@ (mov r8, r8)
 8017d5c:	ffff0000 	.word	0xffff0000
 8017d60:	00008003 	.word	0x00008003

08017d64 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b084      	sub	sp, #16
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017d6e:	200f      	movs	r0, #15
 8017d70:	183b      	adds	r3, r7, r0
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	2141      	movs	r1, #65	@ 0x41
 8017d76:	5c52      	ldrb	r2, [r2, r1]
 8017d78:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2242      	movs	r2, #66	@ 0x42
 8017d7e:	2100      	movs	r1, #0
 8017d80:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	4a72      	ldr	r2, [pc, #456]	@ (8017f50 <I2C_ITError+0x1ec>)
 8017d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	431a      	orrs	r2, r3
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8017d9a:	183b      	adds	r3, r7, r0
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	2b28      	cmp	r3, #40	@ 0x28
 8017da0:	d007      	beq.n	8017db2 <I2C_ITError+0x4e>
 8017da2:	183b      	adds	r3, r7, r0
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	2b29      	cmp	r3, #41	@ 0x29
 8017da8:	d003      	beq.n	8017db2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8017daa:	183b      	adds	r3, r7, r0
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8017db0:	d10c      	bne.n	8017dcc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2103      	movs	r1, #3
 8017db6:	0018      	movs	r0, r3
 8017db8:	f000 fd14 	bl	80187e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2241      	movs	r2, #65	@ 0x41
 8017dc0:	2128      	movs	r1, #40	@ 0x28
 8017dc2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	4a63      	ldr	r2, [pc, #396]	@ (8017f54 <I2C_ITError+0x1f0>)
 8017dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8017dca:	e032      	b.n	8017e32 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017dcc:	4a62      	ldr	r2, [pc, #392]	@ (8017f58 <I2C_ITError+0x1f4>)
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	0011      	movs	r1, r2
 8017dd2:	0018      	movs	r0, r3
 8017dd4:	f000 fd06 	bl	80187e4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	0018      	movs	r0, r3
 8017ddc:	f000 f8ed 	bl	8017fba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	2241      	movs	r2, #65	@ 0x41
 8017de4:	5c9b      	ldrb	r3, [r3, r2]
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	2b60      	cmp	r3, #96	@ 0x60
 8017dea:	d01f      	beq.n	8017e2c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2241      	movs	r2, #65	@ 0x41
 8017df0:	2120      	movs	r1, #32
 8017df2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	699b      	ldr	r3, [r3, #24]
 8017dfa:	2220      	movs	r2, #32
 8017dfc:	4013      	ands	r3, r2
 8017dfe:	2b20      	cmp	r3, #32
 8017e00:	d114      	bne.n	8017e2c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	699b      	ldr	r3, [r3, #24]
 8017e08:	2210      	movs	r2, #16
 8017e0a:	4013      	ands	r3, r2
 8017e0c:	2b10      	cmp	r3, #16
 8017e0e:	d109      	bne.n	8017e24 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	2210      	movs	r2, #16
 8017e16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e1c:	2204      	movs	r2, #4
 8017e1e:	431a      	orrs	r2, r3
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	2220      	movs	r2, #32
 8017e2a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e36:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d03b      	beq.n	8017eb8 <I2C_ITError+0x154>
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	2b11      	cmp	r3, #17
 8017e44:	d002      	beq.n	8017e4c <I2C_ITError+0xe8>
 8017e46:	68bb      	ldr	r3, [r7, #8]
 8017e48:	2b21      	cmp	r3, #33	@ 0x21
 8017e4a:	d135      	bne.n	8017eb8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	2380      	movs	r3, #128	@ 0x80
 8017e54:	01db      	lsls	r3, r3, #7
 8017e56:	401a      	ands	r2, r3
 8017e58:	2380      	movs	r3, #128	@ 0x80
 8017e5a:	01db      	lsls	r3, r3, #7
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d107      	bne.n	8017e70 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	681a      	ldr	r2, [r3, #0]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	493c      	ldr	r1, [pc, #240]	@ (8017f5c <I2C_ITError+0x1f8>)
 8017e6c:	400a      	ands	r2, r1
 8017e6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e74:	0018      	movs	r0, r3
 8017e76:	f7fd fa56 	bl	8015326 <HAL_DMA_GetState>
 8017e7a:	0003      	movs	r3, r0
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d016      	beq.n	8017eae <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e84:	4a36      	ldr	r2, [pc, #216]	@ (8017f60 <I2C_ITError+0x1fc>)
 8017e86:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2240      	movs	r2, #64	@ 0x40
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e94:	0018      	movs	r0, r3
 8017e96:	f7fd f951 	bl	801513c <HAL_DMA_Abort_IT>
 8017e9a:	1e03      	subs	r3, r0, #0
 8017e9c:	d051      	beq.n	8017f42 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ea8:	0018      	movs	r0, r3
 8017eaa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017eac:	e049      	b.n	8017f42 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	f000 f859 	bl	8017f68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017eb6:	e044      	b.n	8017f42 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d03b      	beq.n	8017f38 <I2C_ITError+0x1d4>
 8017ec0:	68bb      	ldr	r3, [r7, #8]
 8017ec2:	2b12      	cmp	r3, #18
 8017ec4:	d002      	beq.n	8017ecc <I2C_ITError+0x168>
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	2b22      	cmp	r3, #34	@ 0x22
 8017eca:	d135      	bne.n	8017f38 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	681a      	ldr	r2, [r3, #0]
 8017ed2:	2380      	movs	r3, #128	@ 0x80
 8017ed4:	021b      	lsls	r3, r3, #8
 8017ed6:	401a      	ands	r2, r3
 8017ed8:	2380      	movs	r3, #128	@ 0x80
 8017eda:	021b      	lsls	r3, r3, #8
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d107      	bne.n	8017ef0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	681a      	ldr	r2, [r3, #0]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	491e      	ldr	r1, [pc, #120]	@ (8017f64 <I2C_ITError+0x200>)
 8017eec:	400a      	ands	r2, r1
 8017eee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ef4:	0018      	movs	r0, r3
 8017ef6:	f7fd fa16 	bl	8015326 <HAL_DMA_GetState>
 8017efa:	0003      	movs	r3, r0
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d016      	beq.n	8017f2e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f04:	4a16      	ldr	r2, [pc, #88]	@ (8017f60 <I2C_ITError+0x1fc>)
 8017f06:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2240      	movs	r2, #64	@ 0x40
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f14:	0018      	movs	r0, r3
 8017f16:	f7fd f911 	bl	801513c <HAL_DMA_Abort_IT>
 8017f1a:	1e03      	subs	r3, r0, #0
 8017f1c:	d013      	beq.n	8017f46 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f28:	0018      	movs	r0, r3
 8017f2a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017f2c:	e00b      	b.n	8017f46 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	0018      	movs	r0, r3
 8017f32:	f000 f819 	bl	8017f68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017f36:	e006      	b.n	8017f46 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	0018      	movs	r0, r3
 8017f3c:	f000 f814 	bl	8017f68 <I2C_TreatErrorCallback>
  }
}
 8017f40:	e002      	b.n	8017f48 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017f42:	46c0      	nop			@ (mov r8, r8)
 8017f44:	e000      	b.n	8017f48 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017f46:	46c0      	nop			@ (mov r8, r8)
}
 8017f48:	46c0      	nop			@ (mov r8, r8)
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	b004      	add	sp, #16
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	ffff0000 	.word	0xffff0000
 8017f54:	08016cdd 	.word	0x08016cdd
 8017f58:	00008003 	.word	0x00008003
 8017f5c:	ffffbfff 	.word	0xffffbfff
 8017f60:	08018173 	.word	0x08018173
 8017f64:	ffff7fff 	.word	0xffff7fff

08017f68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	2241      	movs	r2, #65	@ 0x41
 8017f74:	5c9b      	ldrb	r3, [r3, r2]
 8017f76:	b2db      	uxtb	r3, r3
 8017f78:	2b60      	cmp	r3, #96	@ 0x60
 8017f7a:	d10f      	bne.n	8017f9c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2241      	movs	r2, #65	@ 0x41
 8017f80:	2120      	movs	r1, #32
 8017f82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2200      	movs	r2, #0
 8017f88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2240      	movs	r2, #64	@ 0x40
 8017f8e:	2100      	movs	r1, #0
 8017f90:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	0018      	movs	r0, r3
 8017f96:	f7fe fd57 	bl	8016a48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017f9a:	e00a      	b.n	8017fb2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2240      	movs	r2, #64	@ 0x40
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	0018      	movs	r0, r3
 8017fae:	f7fe fd43 	bl	8016a38 <HAL_I2C_ErrorCallback>
}
 8017fb2:	46c0      	nop			@ (mov r8, r8)
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	b002      	add	sp, #8
 8017fb8:	bd80      	pop	{r7, pc}

08017fba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017fba:	b580      	push	{r7, lr}
 8017fbc:	b082      	sub	sp, #8
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	699b      	ldr	r3, [r3, #24]
 8017fc8:	2202      	movs	r2, #2
 8017fca:	4013      	ands	r3, r2
 8017fcc:	2b02      	cmp	r3, #2
 8017fce:	d103      	bne.n	8017fd8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	699b      	ldr	r3, [r3, #24]
 8017fde:	2201      	movs	r2, #1
 8017fe0:	4013      	ands	r3, r2
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d007      	beq.n	8017ff6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	699a      	ldr	r2, [r3, #24]
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	2101      	movs	r1, #1
 8017ff2:	430a      	orrs	r2, r1
 8017ff4:	619a      	str	r2, [r3, #24]
  }
}
 8017ff6:	46c0      	nop			@ (mov r8, r8)
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	b002      	add	sp, #8
 8017ffc:	bd80      	pop	{r7, pc}
	...

08018000 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b084      	sub	sp, #16
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801800c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	681a      	ldr	r2, [r3, #0]
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4920      	ldr	r1, [pc, #128]	@ (801809c <I2C_DMAMasterTransmitCplt+0x9c>)
 801801a:	400a      	ands	r2, r1
 801801c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018022:	b29b      	uxth	r3, r3
 8018024:	2b00      	cmp	r3, #0
 8018026:	d105      	bne.n	8018034 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2120      	movs	r1, #32
 801802c:	0018      	movs	r0, r3
 801802e:	f000 fb4b 	bl	80186c8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8018032:	e02e      	b.n	8018092 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018038:	68fa      	ldr	r2, [r7, #12]
 801803a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801803c:	189a      	adds	r2, r3, r2
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018046:	b29b      	uxth	r3, r3
 8018048:	2bff      	cmp	r3, #255	@ 0xff
 801804a:	d903      	bls.n	8018054 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	22ff      	movs	r2, #255	@ 0xff
 8018050:	851a      	strh	r2, [r3, #40]	@ 0x28
 8018052:	e004      	b.n	801805e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018058:	b29a      	uxth	r2, r3
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018066:	0019      	movs	r1, r3
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	3328      	adds	r3, #40	@ 0x28
 801806e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018074:	f7fc ffbc 	bl	8014ff0 <HAL_DMA_Start_IT>
 8018078:	1e03      	subs	r3, r0, #0
 801807a:	d005      	beq.n	8018088 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	2110      	movs	r1, #16
 8018080:	0018      	movs	r0, r3
 8018082:	f7ff fe6f 	bl	8017d64 <I2C_ITError>
}
 8018086:	e004      	b.n	8018092 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	2140      	movs	r1, #64	@ 0x40
 801808c:	0018      	movs	r0, r3
 801808e:	f000 fb1b 	bl	80186c8 <I2C_Enable_IRQ>
}
 8018092:	46c0      	nop			@ (mov r8, r8)
 8018094:	46bd      	mov	sp, r7
 8018096:	b004      	add	sp, #16
 8018098:	bd80      	pop	{r7, pc}
 801809a:	46c0      	nop			@ (mov r8, r8)
 801809c:	ffffbfff 	.word	0xffffbfff

080180a0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b084      	sub	sp, #16
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	681a      	ldr	r2, [r3, #0]
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	4920      	ldr	r1, [pc, #128]	@ (801813c <I2C_DMAMasterReceiveCplt+0x9c>)
 80180ba:	400a      	ands	r2, r1
 80180bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d105      	bne.n	80180d4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	2120      	movs	r1, #32
 80180cc:	0018      	movs	r0, r3
 80180ce:	f000 fafb 	bl	80186c8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80180d2:	e02e      	b.n	8018132 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180d8:	68fa      	ldr	r2, [r7, #12]
 80180da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80180dc:	189a      	adds	r2, r3, r2
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	2bff      	cmp	r3, #255	@ 0xff
 80180ea:	d903      	bls.n	80180f4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	22ff      	movs	r2, #255	@ 0xff
 80180f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80180f2:	e004      	b.n	80180fe <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80180f8:	b29a      	uxth	r2, r3
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	3324      	adds	r3, #36	@ 0x24
 8018108:	0019      	movs	r1, r3
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801810e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8018114:	f7fc ff6c 	bl	8014ff0 <HAL_DMA_Start_IT>
 8018118:	1e03      	subs	r3, r0, #0
 801811a:	d005      	beq.n	8018128 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	2110      	movs	r1, #16
 8018120:	0018      	movs	r0, r3
 8018122:	f7ff fe1f 	bl	8017d64 <I2C_ITError>
}
 8018126:	e004      	b.n	8018132 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	2140      	movs	r1, #64	@ 0x40
 801812c:	0018      	movs	r0, r3
 801812e:	f000 facb 	bl	80186c8 <I2C_Enable_IRQ>
}
 8018132:	46c0      	nop			@ (mov r8, r8)
 8018134:	46bd      	mov	sp, r7
 8018136:	b004      	add	sp, #16
 8018138:	bd80      	pop	{r7, pc}
 801813a:	46c0      	nop			@ (mov r8, r8)
 801813c:	ffff7fff 	.word	0xffff7fff

08018140 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b084      	sub	sp, #16
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801814c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	685a      	ldr	r2, [r3, #4]
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	2180      	movs	r1, #128	@ 0x80
 801815a:	0209      	lsls	r1, r1, #8
 801815c:	430a      	orrs	r2, r1
 801815e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	2110      	movs	r1, #16
 8018164:	0018      	movs	r0, r3
 8018166:	f7ff fdfd 	bl	8017d64 <I2C_ITError>
}
 801816a:	46c0      	nop			@ (mov r8, r8)
 801816c:	46bd      	mov	sp, r7
 801816e:	b004      	add	sp, #16
 8018170:	bd80      	pop	{r7, pc}

08018172 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018172:	b580      	push	{r7, lr}
 8018174:	b084      	sub	sp, #16
 8018176:	af00      	add	r7, sp, #0
 8018178:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018184:	2b00      	cmp	r3, #0
 8018186:	d003      	beq.n	8018190 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801818c:	2200      	movs	r2, #0
 801818e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018194:	2b00      	cmp	r3, #0
 8018196:	d003      	beq.n	80181a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801819c:	2200      	movs	r2, #0
 801819e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	0018      	movs	r0, r3
 80181a4:	f7ff fee0 	bl	8017f68 <I2C_TreatErrorCallback>
}
 80181a8:	46c0      	nop			@ (mov r8, r8)
 80181aa:	46bd      	mov	sp, r7
 80181ac:	b004      	add	sp, #16
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	603b      	str	r3, [r7, #0]
 80181bc:	1dfb      	adds	r3, r7, #7
 80181be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80181c0:	e030      	b.n	8018224 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	3301      	adds	r3, #1
 80181c6:	d02d      	beq.n	8018224 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80181c8:	f7fc f9c0 	bl	801454c <HAL_GetTick>
 80181cc:	0002      	movs	r2, r0
 80181ce:	69bb      	ldr	r3, [r7, #24]
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d302      	bcc.n	80181de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d122      	bne.n	8018224 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	699b      	ldr	r3, [r3, #24]
 80181e4:	68ba      	ldr	r2, [r7, #8]
 80181e6:	4013      	ands	r3, r2
 80181e8:	68ba      	ldr	r2, [r7, #8]
 80181ea:	1ad3      	subs	r3, r2, r3
 80181ec:	425a      	negs	r2, r3
 80181ee:	4153      	adcs	r3, r2
 80181f0:	b2db      	uxtb	r3, r3
 80181f2:	001a      	movs	r2, r3
 80181f4:	1dfb      	adds	r3, r7, #7
 80181f6:	781b      	ldrb	r3, [r3, #0]
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d113      	bne.n	8018224 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018200:	2220      	movs	r2, #32
 8018202:	431a      	orrs	r2, r3
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2241      	movs	r2, #65	@ 0x41
 801820c:	2120      	movs	r1, #32
 801820e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	2242      	movs	r2, #66	@ 0x42
 8018214:	2100      	movs	r1, #0
 8018216:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2240      	movs	r2, #64	@ 0x40
 801821c:	2100      	movs	r1, #0
 801821e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018220:	2301      	movs	r3, #1
 8018222:	e00f      	b.n	8018244 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	699b      	ldr	r3, [r3, #24]
 801822a:	68ba      	ldr	r2, [r7, #8]
 801822c:	4013      	ands	r3, r2
 801822e:	68ba      	ldr	r2, [r7, #8]
 8018230:	1ad3      	subs	r3, r2, r3
 8018232:	425a      	negs	r2, r3
 8018234:	4153      	adcs	r3, r2
 8018236:	b2db      	uxtb	r3, r3
 8018238:	001a      	movs	r2, r3
 801823a:	1dfb      	adds	r3, r7, #7
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	429a      	cmp	r2, r3
 8018240:	d0bf      	beq.n	80181c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018242:	2300      	movs	r3, #0
}
 8018244:	0018      	movs	r0, r3
 8018246:	46bd      	mov	sp, r7
 8018248:	b004      	add	sp, #16
 801824a:	bd80      	pop	{r7, pc}

0801824c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018258:	e032      	b.n	80182c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801825a:	687a      	ldr	r2, [r7, #4]
 801825c:	68b9      	ldr	r1, [r7, #8]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	0018      	movs	r0, r3
 8018262:	f000 f8ff 	bl	8018464 <I2C_IsErrorOccurred>
 8018266:	1e03      	subs	r3, r0, #0
 8018268:	d001      	beq.n	801826e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801826a:	2301      	movs	r3, #1
 801826c:	e030      	b.n	80182d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	3301      	adds	r3, #1
 8018272:	d025      	beq.n	80182c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018274:	f7fc f96a 	bl	801454c <HAL_GetTick>
 8018278:	0002      	movs	r2, r0
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	1ad3      	subs	r3, r2, r3
 801827e:	68ba      	ldr	r2, [r7, #8]
 8018280:	429a      	cmp	r2, r3
 8018282:	d302      	bcc.n	801828a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d11a      	bne.n	80182c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	699b      	ldr	r3, [r3, #24]
 8018290:	2202      	movs	r2, #2
 8018292:	4013      	ands	r3, r2
 8018294:	2b02      	cmp	r3, #2
 8018296:	d013      	beq.n	80182c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801829c:	2220      	movs	r2, #32
 801829e:	431a      	orrs	r2, r3
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2241      	movs	r2, #65	@ 0x41
 80182a8:	2120      	movs	r1, #32
 80182aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	2242      	movs	r2, #66	@ 0x42
 80182b0:	2100      	movs	r1, #0
 80182b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	2240      	movs	r2, #64	@ 0x40
 80182b8:	2100      	movs	r1, #0
 80182ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80182bc:	2301      	movs	r3, #1
 80182be:	e007      	b.n	80182d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	699b      	ldr	r3, [r3, #24]
 80182c6:	2202      	movs	r2, #2
 80182c8:	4013      	ands	r3, r2
 80182ca:	2b02      	cmp	r3, #2
 80182cc:	d1c5      	bne.n	801825a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80182ce:	2300      	movs	r3, #0
}
 80182d0:	0018      	movs	r0, r3
 80182d2:	46bd      	mov	sp, r7
 80182d4:	b004      	add	sp, #16
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b084      	sub	sp, #16
 80182dc:	af00      	add	r7, sp, #0
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80182e4:	e02f      	b.n	8018346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80182e6:	687a      	ldr	r2, [r7, #4]
 80182e8:	68b9      	ldr	r1, [r7, #8]
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	0018      	movs	r0, r3
 80182ee:	f000 f8b9 	bl	8018464 <I2C_IsErrorOccurred>
 80182f2:	1e03      	subs	r3, r0, #0
 80182f4:	d001      	beq.n	80182fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80182f6:	2301      	movs	r3, #1
 80182f8:	e02d      	b.n	8018356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80182fa:	f7fc f927 	bl	801454c <HAL_GetTick>
 80182fe:	0002      	movs	r2, r0
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	1ad3      	subs	r3, r2, r3
 8018304:	68ba      	ldr	r2, [r7, #8]
 8018306:	429a      	cmp	r2, r3
 8018308:	d302      	bcc.n	8018310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d11a      	bne.n	8018346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	699b      	ldr	r3, [r3, #24]
 8018316:	2220      	movs	r2, #32
 8018318:	4013      	ands	r3, r2
 801831a:	2b20      	cmp	r3, #32
 801831c:	d013      	beq.n	8018346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018322:	2220      	movs	r2, #32
 8018324:	431a      	orrs	r2, r3
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	2241      	movs	r2, #65	@ 0x41
 801832e:	2120      	movs	r1, #32
 8018330:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	2242      	movs	r2, #66	@ 0x42
 8018336:	2100      	movs	r1, #0
 8018338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	2240      	movs	r2, #64	@ 0x40
 801833e:	2100      	movs	r1, #0
 8018340:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018342:	2301      	movs	r3, #1
 8018344:	e007      	b.n	8018356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	699b      	ldr	r3, [r3, #24]
 801834c:	2220      	movs	r2, #32
 801834e:	4013      	ands	r3, r2
 8018350:	2b20      	cmp	r3, #32
 8018352:	d1c8      	bne.n	80182e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018354:	2300      	movs	r3, #0
}
 8018356:	0018      	movs	r0, r3
 8018358:	46bd      	mov	sp, r7
 801835a:	b004      	add	sp, #16
 801835c:	bd80      	pop	{r7, pc}
	...

08018360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	60f8      	str	r0, [r7, #12]
 8018368:	60b9      	str	r1, [r7, #8]
 801836a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801836c:	e06b      	b.n	8018446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	68b9      	ldr	r1, [r7, #8]
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	0018      	movs	r0, r3
 8018376:	f000 f875 	bl	8018464 <I2C_IsErrorOccurred>
 801837a:	1e03      	subs	r3, r0, #0
 801837c:	d001      	beq.n	8018382 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801837e:	2301      	movs	r3, #1
 8018380:	e069      	b.n	8018456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	699b      	ldr	r3, [r3, #24]
 8018388:	2220      	movs	r2, #32
 801838a:	4013      	ands	r3, r2
 801838c:	2b20      	cmp	r3, #32
 801838e:	d138      	bne.n	8018402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	699b      	ldr	r3, [r3, #24]
 8018396:	2204      	movs	r2, #4
 8018398:	4013      	ands	r3, r2
 801839a:	2b04      	cmp	r3, #4
 801839c:	d105      	bne.n	80183aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d001      	beq.n	80183aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80183a6:	2300      	movs	r3, #0
 80183a8:	e055      	b.n	8018456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	699b      	ldr	r3, [r3, #24]
 80183b0:	2210      	movs	r2, #16
 80183b2:	4013      	ands	r3, r2
 80183b4:	2b10      	cmp	r3, #16
 80183b6:	d107      	bne.n	80183c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	2210      	movs	r2, #16
 80183be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2204      	movs	r2, #4
 80183c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80183c6:	e002      	b.n	80183ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	2200      	movs	r2, #0
 80183cc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	2220      	movs	r2, #32
 80183d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	685a      	ldr	r2, [r3, #4]
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	491f      	ldr	r1, [pc, #124]	@ (8018460 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80183e2:	400a      	ands	r2, r1
 80183e4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	2241      	movs	r2, #65	@ 0x41
 80183ea:	2120      	movs	r1, #32
 80183ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	2242      	movs	r2, #66	@ 0x42
 80183f2:	2100      	movs	r1, #0
 80183f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	2240      	movs	r2, #64	@ 0x40
 80183fa:	2100      	movs	r1, #0
 80183fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80183fe:	2301      	movs	r3, #1
 8018400:	e029      	b.n	8018456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018402:	f7fc f8a3 	bl	801454c <HAL_GetTick>
 8018406:	0002      	movs	r2, r0
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	1ad3      	subs	r3, r2, r3
 801840c:	68ba      	ldr	r2, [r7, #8]
 801840e:	429a      	cmp	r2, r3
 8018410:	d302      	bcc.n	8018418 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d116      	bne.n	8018446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	699b      	ldr	r3, [r3, #24]
 801841e:	2204      	movs	r2, #4
 8018420:	4013      	ands	r3, r2
 8018422:	2b04      	cmp	r3, #4
 8018424:	d00f      	beq.n	8018446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801842a:	2220      	movs	r2, #32
 801842c:	431a      	orrs	r2, r3
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	2241      	movs	r2, #65	@ 0x41
 8018436:	2120      	movs	r1, #32
 8018438:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	2240      	movs	r2, #64	@ 0x40
 801843e:	2100      	movs	r1, #0
 8018440:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018442:	2301      	movs	r3, #1
 8018444:	e007      	b.n	8018456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	699b      	ldr	r3, [r3, #24]
 801844c:	2204      	movs	r2, #4
 801844e:	4013      	ands	r3, r2
 8018450:	2b04      	cmp	r3, #4
 8018452:	d18c      	bne.n	801836e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018454:	2300      	movs	r3, #0
}
 8018456:	0018      	movs	r0, r3
 8018458:	46bd      	mov	sp, r7
 801845a:	b004      	add	sp, #16
 801845c:	bd80      	pop	{r7, pc}
 801845e:	46c0      	nop			@ (mov r8, r8)
 8018460:	fe00e800 	.word	0xfe00e800

08018464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b08a      	sub	sp, #40	@ 0x28
 8018468:	af00      	add	r7, sp, #0
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018470:	2327      	movs	r3, #39	@ 0x27
 8018472:	18fb      	adds	r3, r7, r3
 8018474:	2200      	movs	r2, #0
 8018476:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	699b      	ldr	r3, [r3, #24]
 801847e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018480:	2300      	movs	r3, #0
 8018482:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018488:	69bb      	ldr	r3, [r7, #24]
 801848a:	2210      	movs	r2, #16
 801848c:	4013      	ands	r3, r2
 801848e:	d100      	bne.n	8018492 <I2C_IsErrorOccurred+0x2e>
 8018490:	e079      	b.n	8018586 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2210      	movs	r2, #16
 8018498:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801849a:	e057      	b.n	801854c <I2C_IsErrorOccurred+0xe8>
 801849c:	2227      	movs	r2, #39	@ 0x27
 801849e:	18bb      	adds	r3, r7, r2
 80184a0:	18ba      	adds	r2, r7, r2
 80184a2:	7812      	ldrb	r2, [r2, #0]
 80184a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	3301      	adds	r3, #1
 80184aa:	d04f      	beq.n	801854c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80184ac:	f7fc f84e 	bl	801454c <HAL_GetTick>
 80184b0:	0002      	movs	r2, r0
 80184b2:	69fb      	ldr	r3, [r7, #28]
 80184b4:	1ad3      	subs	r3, r2, r3
 80184b6:	68ba      	ldr	r2, [r7, #8]
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d302      	bcc.n	80184c2 <I2C_IsErrorOccurred+0x5e>
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d144      	bne.n	801854c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	685a      	ldr	r2, [r3, #4]
 80184c8:	2380      	movs	r3, #128	@ 0x80
 80184ca:	01db      	lsls	r3, r3, #7
 80184cc:	4013      	ands	r3, r2
 80184ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80184d0:	2013      	movs	r0, #19
 80184d2:	183b      	adds	r3, r7, r0
 80184d4:	68fa      	ldr	r2, [r7, #12]
 80184d6:	2142      	movs	r1, #66	@ 0x42
 80184d8:	5c52      	ldrb	r2, [r2, r1]
 80184da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	699a      	ldr	r2, [r3, #24]
 80184e2:	2380      	movs	r3, #128	@ 0x80
 80184e4:	021b      	lsls	r3, r3, #8
 80184e6:	401a      	ands	r2, r3
 80184e8:	2380      	movs	r3, #128	@ 0x80
 80184ea:	021b      	lsls	r3, r3, #8
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d126      	bne.n	801853e <I2C_IsErrorOccurred+0xda>
 80184f0:	697a      	ldr	r2, [r7, #20]
 80184f2:	2380      	movs	r3, #128	@ 0x80
 80184f4:	01db      	lsls	r3, r3, #7
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d021      	beq.n	801853e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80184fa:	183b      	adds	r3, r7, r0
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	2b20      	cmp	r3, #32
 8018500:	d01d      	beq.n	801853e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	685a      	ldr	r2, [r3, #4]
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2180      	movs	r1, #128	@ 0x80
 801850e:	01c9      	lsls	r1, r1, #7
 8018510:	430a      	orrs	r2, r1
 8018512:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018514:	f7fc f81a 	bl	801454c <HAL_GetTick>
 8018518:	0003      	movs	r3, r0
 801851a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801851c:	e00f      	b.n	801853e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801851e:	f7fc f815 	bl	801454c <HAL_GetTick>
 8018522:	0002      	movs	r2, r0
 8018524:	69fb      	ldr	r3, [r7, #28]
 8018526:	1ad3      	subs	r3, r2, r3
 8018528:	2b19      	cmp	r3, #25
 801852a:	d908      	bls.n	801853e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801852c:	6a3b      	ldr	r3, [r7, #32]
 801852e:	2220      	movs	r2, #32
 8018530:	4313      	orrs	r3, r2
 8018532:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018534:	2327      	movs	r3, #39	@ 0x27
 8018536:	18fb      	adds	r3, r7, r3
 8018538:	2201      	movs	r2, #1
 801853a:	701a      	strb	r2, [r3, #0]

              break;
 801853c:	e006      	b.n	801854c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	699b      	ldr	r3, [r3, #24]
 8018544:	2220      	movs	r2, #32
 8018546:	4013      	ands	r3, r2
 8018548:	2b20      	cmp	r3, #32
 801854a:	d1e8      	bne.n	801851e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	699b      	ldr	r3, [r3, #24]
 8018552:	2220      	movs	r2, #32
 8018554:	4013      	ands	r3, r2
 8018556:	2b20      	cmp	r3, #32
 8018558:	d004      	beq.n	8018564 <I2C_IsErrorOccurred+0x100>
 801855a:	2327      	movs	r3, #39	@ 0x27
 801855c:	18fb      	adds	r3, r7, r3
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d09b      	beq.n	801849c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018564:	2327      	movs	r3, #39	@ 0x27
 8018566:	18fb      	adds	r3, r7, r3
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d103      	bne.n	8018576 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	2220      	movs	r2, #32
 8018574:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018576:	6a3b      	ldr	r3, [r7, #32]
 8018578:	2204      	movs	r2, #4
 801857a:	4313      	orrs	r3, r2
 801857c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801857e:	2327      	movs	r3, #39	@ 0x27
 8018580:	18fb      	adds	r3, r7, r3
 8018582:	2201      	movs	r2, #1
 8018584:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	699b      	ldr	r3, [r3, #24]
 801858c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801858e:	69ba      	ldr	r2, [r7, #24]
 8018590:	2380      	movs	r3, #128	@ 0x80
 8018592:	005b      	lsls	r3, r3, #1
 8018594:	4013      	ands	r3, r2
 8018596:	d00c      	beq.n	80185b2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018598:	6a3b      	ldr	r3, [r7, #32]
 801859a:	2201      	movs	r2, #1
 801859c:	4313      	orrs	r3, r2
 801859e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	2280      	movs	r2, #128	@ 0x80
 80185a6:	0052      	lsls	r2, r2, #1
 80185a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80185aa:	2327      	movs	r3, #39	@ 0x27
 80185ac:	18fb      	adds	r3, r7, r3
 80185ae:	2201      	movs	r2, #1
 80185b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80185b2:	69ba      	ldr	r2, [r7, #24]
 80185b4:	2380      	movs	r3, #128	@ 0x80
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	4013      	ands	r3, r2
 80185ba:	d00c      	beq.n	80185d6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	2208      	movs	r2, #8
 80185c0:	4313      	orrs	r3, r2
 80185c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2280      	movs	r2, #128	@ 0x80
 80185ca:	00d2      	lsls	r2, r2, #3
 80185cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80185ce:	2327      	movs	r3, #39	@ 0x27
 80185d0:	18fb      	adds	r3, r7, r3
 80185d2:	2201      	movs	r2, #1
 80185d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80185d6:	69ba      	ldr	r2, [r7, #24]
 80185d8:	2380      	movs	r3, #128	@ 0x80
 80185da:	009b      	lsls	r3, r3, #2
 80185dc:	4013      	ands	r3, r2
 80185de:	d00c      	beq.n	80185fa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80185e0:	6a3b      	ldr	r3, [r7, #32]
 80185e2:	2202      	movs	r2, #2
 80185e4:	4313      	orrs	r3, r2
 80185e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2280      	movs	r2, #128	@ 0x80
 80185ee:	0092      	lsls	r2, r2, #2
 80185f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80185f2:	2327      	movs	r3, #39	@ 0x27
 80185f4:	18fb      	adds	r3, r7, r3
 80185f6:	2201      	movs	r2, #1
 80185f8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80185fa:	2327      	movs	r3, #39	@ 0x27
 80185fc:	18fb      	adds	r3, r7, r3
 80185fe:	781b      	ldrb	r3, [r3, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d01d      	beq.n	8018640 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	0018      	movs	r0, r3
 8018608:	f7ff fcd7 	bl	8017fba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	685a      	ldr	r2, [r3, #4]
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	490e      	ldr	r1, [pc, #56]	@ (8018650 <I2C_IsErrorOccurred+0x1ec>)
 8018618:	400a      	ands	r2, r1
 801861a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	431a      	orrs	r2, r3
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	2241      	movs	r2, #65	@ 0x41
 801862c:	2120      	movs	r1, #32
 801862e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2242      	movs	r2, #66	@ 0x42
 8018634:	2100      	movs	r1, #0
 8018636:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2240      	movs	r2, #64	@ 0x40
 801863c:	2100      	movs	r1, #0
 801863e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018640:	2327      	movs	r3, #39	@ 0x27
 8018642:	18fb      	adds	r3, r7, r3
 8018644:	781b      	ldrb	r3, [r3, #0]
}
 8018646:	0018      	movs	r0, r3
 8018648:	46bd      	mov	sp, r7
 801864a:	b00a      	add	sp, #40	@ 0x28
 801864c:	bd80      	pop	{r7, pc}
 801864e:	46c0      	nop			@ (mov r8, r8)
 8018650:	fe00e800 	.word	0xfe00e800

08018654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018654:	b590      	push	{r4, r7, lr}
 8018656:	b087      	sub	sp, #28
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	0008      	movs	r0, r1
 801865e:	0011      	movs	r1, r2
 8018660:	607b      	str	r3, [r7, #4]
 8018662:	240a      	movs	r4, #10
 8018664:	193b      	adds	r3, r7, r4
 8018666:	1c02      	adds	r2, r0, #0
 8018668:	801a      	strh	r2, [r3, #0]
 801866a:	2009      	movs	r0, #9
 801866c:	183b      	adds	r3, r7, r0
 801866e:	1c0a      	adds	r2, r1, #0
 8018670:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018672:	193b      	adds	r3, r7, r4
 8018674:	881b      	ldrh	r3, [r3, #0]
 8018676:	059b      	lsls	r3, r3, #22
 8018678:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801867a:	183b      	adds	r3, r7, r0
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	0419      	lsls	r1, r3, #16
 8018680:	23ff      	movs	r3, #255	@ 0xff
 8018682:	041b      	lsls	r3, r3, #16
 8018684:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018686:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801868e:	4313      	orrs	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	085b      	lsrs	r3, r3, #1
 8018694:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801869e:	0d51      	lsrs	r1, r2, #21
 80186a0:	2280      	movs	r2, #128	@ 0x80
 80186a2:	00d2      	lsls	r2, r2, #3
 80186a4:	400a      	ands	r2, r1
 80186a6:	4907      	ldr	r1, [pc, #28]	@ (80186c4 <I2C_TransferConfig+0x70>)
 80186a8:	430a      	orrs	r2, r1
 80186aa:	43d2      	mvns	r2, r2
 80186ac:	401a      	ands	r2, r3
 80186ae:	0011      	movs	r1, r2
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	697a      	ldr	r2, [r7, #20]
 80186b6:	430a      	orrs	r2, r1
 80186b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80186ba:	46c0      	nop			@ (mov r8, r8)
 80186bc:	46bd      	mov	sp, r7
 80186be:	b007      	add	sp, #28
 80186c0:	bd90      	pop	{r4, r7, pc}
 80186c2:	46c0      	nop			@ (mov r8, r8)
 80186c4:	03ff63ff 	.word	0x03ff63ff

080186c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b084      	sub	sp, #16
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	000a      	movs	r2, r1
 80186d2:	1cbb      	adds	r3, r7, #2
 80186d4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80186d6:	2300      	movs	r3, #0
 80186d8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80186de:	4b3e      	ldr	r3, [pc, #248]	@ (80187d8 <I2C_Enable_IRQ+0x110>)
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d035      	beq.n	8018750 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80186e8:	4b3c      	ldr	r3, [pc, #240]	@ (80187dc <I2C_Enable_IRQ+0x114>)
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d030      	beq.n	8018750 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80186f2:	4b3b      	ldr	r3, [pc, #236]	@ (80187e0 <I2C_Enable_IRQ+0x118>)
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d02b      	beq.n	8018750 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80186f8:	1cbb      	adds	r3, r7, #2
 80186fa:	2200      	movs	r2, #0
 80186fc:	5e9b      	ldrsh	r3, [r3, r2]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	da03      	bge.n	801870a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	22b8      	movs	r2, #184	@ 0xb8
 8018706:	4313      	orrs	r3, r2
 8018708:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801870a:	1cbb      	adds	r3, r7, #2
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	2201      	movs	r2, #1
 8018710:	4013      	ands	r3, r2
 8018712:	d003      	beq.n	801871c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	22f2      	movs	r2, #242	@ 0xf2
 8018718:	4313      	orrs	r3, r2
 801871a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801871c:	1cbb      	adds	r3, r7, #2
 801871e:	881b      	ldrh	r3, [r3, #0]
 8018720:	2202      	movs	r2, #2
 8018722:	4013      	ands	r3, r2
 8018724:	d003      	beq.n	801872e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	22f4      	movs	r2, #244	@ 0xf4
 801872a:	4313      	orrs	r3, r2
 801872c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801872e:	1cbb      	adds	r3, r7, #2
 8018730:	881b      	ldrh	r3, [r3, #0]
 8018732:	2b10      	cmp	r3, #16
 8018734:	d103      	bne.n	801873e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2290      	movs	r2, #144	@ 0x90
 801873a:	4313      	orrs	r3, r2
 801873c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801873e:	1cbb      	adds	r3, r7, #2
 8018740:	881b      	ldrh	r3, [r3, #0]
 8018742:	2b20      	cmp	r3, #32
 8018744:	d13c      	bne.n	80187c0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	2220      	movs	r2, #32
 801874a:	4313      	orrs	r3, r2
 801874c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801874e:	e037      	b.n	80187c0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018750:	1cbb      	adds	r3, r7, #2
 8018752:	2200      	movs	r2, #0
 8018754:	5e9b      	ldrsh	r3, [r3, r2]
 8018756:	2b00      	cmp	r3, #0
 8018758:	da03      	bge.n	8018762 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	22b8      	movs	r2, #184	@ 0xb8
 801875e:	4313      	orrs	r3, r2
 8018760:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018762:	1cbb      	adds	r3, r7, #2
 8018764:	881b      	ldrh	r3, [r3, #0]
 8018766:	2201      	movs	r2, #1
 8018768:	4013      	ands	r3, r2
 801876a:	d003      	beq.n	8018774 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	22f2      	movs	r2, #242	@ 0xf2
 8018770:	4313      	orrs	r3, r2
 8018772:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018774:	1cbb      	adds	r3, r7, #2
 8018776:	881b      	ldrh	r3, [r3, #0]
 8018778:	2202      	movs	r2, #2
 801877a:	4013      	ands	r3, r2
 801877c:	d003      	beq.n	8018786 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	22f4      	movs	r2, #244	@ 0xf4
 8018782:	4313      	orrs	r3, r2
 8018784:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018786:	1cbb      	adds	r3, r7, #2
 8018788:	881b      	ldrh	r3, [r3, #0]
 801878a:	2b10      	cmp	r3, #16
 801878c:	d103      	bne.n	8018796 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2290      	movs	r2, #144	@ 0x90
 8018792:	4313      	orrs	r3, r2
 8018794:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018796:	1cbb      	adds	r3, r7, #2
 8018798:	881b      	ldrh	r3, [r3, #0]
 801879a:	2b20      	cmp	r3, #32
 801879c:	d103      	bne.n	80187a6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	2260      	movs	r2, #96	@ 0x60
 80187a2:	4313      	orrs	r3, r2
 80187a4:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80187aa:	4b0d      	ldr	r3, [pc, #52]	@ (80187e0 <I2C_Enable_IRQ+0x118>)
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d007      	beq.n	80187c0 <I2C_Enable_IRQ+0xf8>
 80187b0:	1cbb      	adds	r3, r7, #2
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	2b40      	cmp	r3, #64	@ 0x40
 80187b6:	d103      	bne.n	80187c0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2240      	movs	r2, #64	@ 0x40
 80187bc:	4313      	orrs	r3, r2
 80187be:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	6819      	ldr	r1, [r3, #0]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	68fa      	ldr	r2, [r7, #12]
 80187cc:	430a      	orrs	r2, r1
 80187ce:	601a      	str	r2, [r3, #0]
}
 80187d0:	46c0      	nop			@ (mov r8, r8)
 80187d2:	46bd      	mov	sp, r7
 80187d4:	b004      	add	sp, #16
 80187d6:	bd80      	pop	{r7, pc}
 80187d8:	08016f05 	.word	0x08016f05
 80187dc:	0801737d 	.word	0x0801737d
 80187e0:	0801711d 	.word	0x0801711d

080187e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b084      	sub	sp, #16
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	000a      	movs	r2, r1
 80187ee:	1cbb      	adds	r3, r7, #2
 80187f0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80187f2:	2300      	movs	r3, #0
 80187f4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80187f6:	1cbb      	adds	r3, r7, #2
 80187f8:	881b      	ldrh	r3, [r3, #0]
 80187fa:	2201      	movs	r2, #1
 80187fc:	4013      	ands	r3, r2
 80187fe:	d010      	beq.n	8018822 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2242      	movs	r2, #66	@ 0x42
 8018804:	4313      	orrs	r3, r2
 8018806:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	2241      	movs	r2, #65	@ 0x41
 801880c:	5c9b      	ldrb	r3, [r3, r2]
 801880e:	b2db      	uxtb	r3, r3
 8018810:	001a      	movs	r2, r3
 8018812:	2328      	movs	r3, #40	@ 0x28
 8018814:	4013      	ands	r3, r2
 8018816:	2b28      	cmp	r3, #40	@ 0x28
 8018818:	d003      	beq.n	8018822 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	22b0      	movs	r2, #176	@ 0xb0
 801881e:	4313      	orrs	r3, r2
 8018820:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018822:	1cbb      	adds	r3, r7, #2
 8018824:	881b      	ldrh	r3, [r3, #0]
 8018826:	2202      	movs	r2, #2
 8018828:	4013      	ands	r3, r2
 801882a:	d010      	beq.n	801884e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	2244      	movs	r2, #68	@ 0x44
 8018830:	4313      	orrs	r3, r2
 8018832:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2241      	movs	r2, #65	@ 0x41
 8018838:	5c9b      	ldrb	r3, [r3, r2]
 801883a:	b2db      	uxtb	r3, r3
 801883c:	001a      	movs	r2, r3
 801883e:	2328      	movs	r3, #40	@ 0x28
 8018840:	4013      	ands	r3, r2
 8018842:	2b28      	cmp	r3, #40	@ 0x28
 8018844:	d003      	beq.n	801884e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	22b0      	movs	r2, #176	@ 0xb0
 801884a:	4313      	orrs	r3, r2
 801884c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801884e:	1cbb      	adds	r3, r7, #2
 8018850:	2200      	movs	r2, #0
 8018852:	5e9b      	ldrsh	r3, [r3, r2]
 8018854:	2b00      	cmp	r3, #0
 8018856:	da03      	bge.n	8018860 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	22b8      	movs	r2, #184	@ 0xb8
 801885c:	4313      	orrs	r3, r2
 801885e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018860:	1cbb      	adds	r3, r7, #2
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	2b10      	cmp	r3, #16
 8018866:	d103      	bne.n	8018870 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	2290      	movs	r2, #144	@ 0x90
 801886c:	4313      	orrs	r3, r2
 801886e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018870:	1cbb      	adds	r3, r7, #2
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	2b20      	cmp	r3, #32
 8018876:	d103      	bne.n	8018880 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	2220      	movs	r2, #32
 801887c:	4313      	orrs	r3, r2
 801887e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018880:	1cbb      	adds	r3, r7, #2
 8018882:	881b      	ldrh	r3, [r3, #0]
 8018884:	2b40      	cmp	r3, #64	@ 0x40
 8018886:	d103      	bne.n	8018890 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	2240      	movs	r2, #64	@ 0x40
 801888c:	4313      	orrs	r3, r2
 801888e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	681a      	ldr	r2, [r3, #0]
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	43d9      	mvns	r1, r3
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	400a      	ands	r2, r1
 80188a0:	601a      	str	r2, [r3, #0]
}
 80188a2:	46c0      	nop			@ (mov r8, r8)
 80188a4:	46bd      	mov	sp, r7
 80188a6:	b004      	add	sp, #16
 80188a8:	bd80      	pop	{r7, pc}
	...

080188ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
 80188b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2241      	movs	r2, #65	@ 0x41
 80188ba:	5c9b      	ldrb	r3, [r3, r2]
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	2b20      	cmp	r3, #32
 80188c0:	d138      	bne.n	8018934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2240      	movs	r2, #64	@ 0x40
 80188c6:	5c9b      	ldrb	r3, [r3, r2]
 80188c8:	2b01      	cmp	r3, #1
 80188ca:	d101      	bne.n	80188d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80188cc:	2302      	movs	r3, #2
 80188ce:	e032      	b.n	8018936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	2240      	movs	r2, #64	@ 0x40
 80188d4:	2101      	movs	r1, #1
 80188d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2241      	movs	r2, #65	@ 0x41
 80188dc:	2124      	movs	r1, #36	@ 0x24
 80188de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	681a      	ldr	r2, [r3, #0]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2101      	movs	r1, #1
 80188ec:	438a      	bics	r2, r1
 80188ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	681a      	ldr	r2, [r3, #0]
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	4911      	ldr	r1, [pc, #68]	@ (8018940 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80188fc:	400a      	ands	r2, r1
 80188fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	6819      	ldr	r1, [r3, #0]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	683a      	ldr	r2, [r7, #0]
 801890c:	430a      	orrs	r2, r1
 801890e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	681a      	ldr	r2, [r3, #0]
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2101      	movs	r1, #1
 801891c:	430a      	orrs	r2, r1
 801891e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2241      	movs	r2, #65	@ 0x41
 8018924:	2120      	movs	r1, #32
 8018926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2240      	movs	r2, #64	@ 0x40
 801892c:	2100      	movs	r1, #0
 801892e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018930:	2300      	movs	r3, #0
 8018932:	e000      	b.n	8018936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018934:	2302      	movs	r3, #2
  }
}
 8018936:	0018      	movs	r0, r3
 8018938:	46bd      	mov	sp, r7
 801893a:	b002      	add	sp, #8
 801893c:	bd80      	pop	{r7, pc}
 801893e:	46c0      	nop			@ (mov r8, r8)
 8018940:	ffffefff 	.word	0xffffefff

08018944 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b084      	sub	sp, #16
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2241      	movs	r2, #65	@ 0x41
 8018952:	5c9b      	ldrb	r3, [r3, r2]
 8018954:	b2db      	uxtb	r3, r3
 8018956:	2b20      	cmp	r3, #32
 8018958:	d139      	bne.n	80189ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2240      	movs	r2, #64	@ 0x40
 801895e:	5c9b      	ldrb	r3, [r3, r2]
 8018960:	2b01      	cmp	r3, #1
 8018962:	d101      	bne.n	8018968 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018964:	2302      	movs	r3, #2
 8018966:	e033      	b.n	80189d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2240      	movs	r2, #64	@ 0x40
 801896c:	2101      	movs	r1, #1
 801896e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2241      	movs	r2, #65	@ 0x41
 8018974:	2124      	movs	r1, #36	@ 0x24
 8018976:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	2101      	movs	r1, #1
 8018984:	438a      	bics	r2, r1
 8018986:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	4a11      	ldr	r2, [pc, #68]	@ (80189d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018994:	4013      	ands	r3, r2
 8018996:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	021b      	lsls	r3, r3, #8
 801899c:	68fa      	ldr	r2, [r7, #12]
 801899e:	4313      	orrs	r3, r2
 80189a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	68fa      	ldr	r2, [r7, #12]
 80189a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	681a      	ldr	r2, [r3, #0]
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	2101      	movs	r1, #1
 80189b6:	430a      	orrs	r2, r1
 80189b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2241      	movs	r2, #65	@ 0x41
 80189be:	2120      	movs	r1, #32
 80189c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2240      	movs	r2, #64	@ 0x40
 80189c6:	2100      	movs	r1, #0
 80189c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80189ca:	2300      	movs	r3, #0
 80189cc:	e000      	b.n	80189d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80189ce:	2302      	movs	r3, #2
  }
}
 80189d0:	0018      	movs	r0, r3
 80189d2:	46bd      	mov	sp, r7
 80189d4:	b004      	add	sp, #16
 80189d6:	bd80      	pop	{r7, pc}
 80189d8:	fffff0ff 	.word	0xfffff0ff

080189dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b088      	sub	sp, #32
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d101      	bne.n	80189ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80189ea:	2301      	movs	r3, #1
 80189ec:	e0e1      	b.n	8018bb2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2235      	movs	r2, #53	@ 0x35
 80189f2:	5c9b      	ldrb	r3, [r3, r2]
 80189f4:	b2db      	uxtb	r3, r3
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d107      	bne.n	8018a0a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2234      	movs	r2, #52	@ 0x34
 80189fe:	2100      	movs	r1, #0
 8018a00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	0018      	movs	r0, r3
 8018a06:	f7f3 fed3 	bl	800c7b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	2235      	movs	r2, #53	@ 0x35
 8018a0e:	2102      	movs	r1, #2
 8018a10:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	69da      	ldr	r2, [r3, #28]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	4967      	ldr	r1, [pc, #412]	@ (8018bbc <HAL_I2S_Init+0x1e0>)
 8018a1e:	400a      	ands	r2, r1
 8018a20:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2202      	movs	r2, #2
 8018a28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	695b      	ldr	r3, [r3, #20]
 8018a2e:	2b02      	cmp	r3, #2
 8018a30:	d073      	beq.n	8018b1a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	68db      	ldr	r3, [r3, #12]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d102      	bne.n	8018a40 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018a3a:	2310      	movs	r3, #16
 8018a3c:	617b      	str	r3, [r7, #20]
 8018a3e:	e001      	b.n	8018a44 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018a40:	2320      	movs	r3, #32
 8018a42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	689b      	ldr	r3, [r3, #8]
 8018a48:	2b20      	cmp	r3, #32
 8018a4a:	d802      	bhi.n	8018a52 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	005b      	lsls	r3, r3, #1
 8018a50:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8018a52:	f002 fed3 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 8018a56:	0003      	movs	r3, r0
 8018a58:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	691a      	ldr	r2, [r3, #16]
 8018a5e:	2380      	movs	r3, #128	@ 0x80
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d131      	bne.n	8018aca <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	68db      	ldr	r3, [r3, #12]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d016      	beq.n	8018a9c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	009b      	lsls	r3, r3, #2
 8018a72:	0019      	movs	r1, r3
 8018a74:	68f8      	ldr	r0, [r7, #12]
 8018a76:	f7e7 fb95 	bl	80001a4 <__udivsi3>
 8018a7a:	0003      	movs	r3, r0
 8018a7c:	001a      	movs	r2, r3
 8018a7e:	0013      	movs	r3, r2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	189b      	adds	r3, r3, r2
 8018a84:	005b      	lsls	r3, r3, #1
 8018a86:	001a      	movs	r2, r3
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	695b      	ldr	r3, [r3, #20]
 8018a8c:	0019      	movs	r1, r3
 8018a8e:	0010      	movs	r0, r2
 8018a90:	f7e7 fb88 	bl	80001a4 <__udivsi3>
 8018a94:	0003      	movs	r3, r0
 8018a96:	3305      	adds	r3, #5
 8018a98:	613b      	str	r3, [r7, #16]
 8018a9a:	e02a      	b.n	8018af2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	00db      	lsls	r3, r3, #3
 8018aa0:	0019      	movs	r1, r3
 8018aa2:	68f8      	ldr	r0, [r7, #12]
 8018aa4:	f7e7 fb7e 	bl	80001a4 <__udivsi3>
 8018aa8:	0003      	movs	r3, r0
 8018aaa:	001a      	movs	r2, r3
 8018aac:	0013      	movs	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	189b      	adds	r3, r3, r2
 8018ab2:	005b      	lsls	r3, r3, #1
 8018ab4:	001a      	movs	r2, r3
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	695b      	ldr	r3, [r3, #20]
 8018aba:	0019      	movs	r1, r3
 8018abc:	0010      	movs	r0, r2
 8018abe:	f7e7 fb71 	bl	80001a4 <__udivsi3>
 8018ac2:	0003      	movs	r3, r0
 8018ac4:	3305      	adds	r3, #5
 8018ac6:	613b      	str	r3, [r7, #16]
 8018ac8:	e013      	b.n	8018af2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018aca:	6979      	ldr	r1, [r7, #20]
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f7e7 fb69 	bl	80001a4 <__udivsi3>
 8018ad2:	0003      	movs	r3, r0
 8018ad4:	001a      	movs	r2, r3
 8018ad6:	0013      	movs	r3, r2
 8018ad8:	009b      	lsls	r3, r3, #2
 8018ada:	189b      	adds	r3, r3, r2
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	001a      	movs	r2, r3
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	0019      	movs	r1, r3
 8018ae6:	0010      	movs	r0, r2
 8018ae8:	f7e7 fb5c 	bl	80001a4 <__udivsi3>
 8018aec:	0003      	movs	r3, r0
 8018aee:	3305      	adds	r3, #5
 8018af0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	210a      	movs	r1, #10
 8018af6:	0018      	movs	r0, r3
 8018af8:	f7e7 fb54 	bl	80001a4 <__udivsi3>
 8018afc:	0003      	movs	r3, r0
 8018afe:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	2201      	movs	r2, #1
 8018b04:	4013      	ands	r3, r2
 8018b06:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018b08:	693a      	ldr	r2, [r7, #16]
 8018b0a:	69bb      	ldr	r3, [r7, #24]
 8018b0c:	1ad3      	subs	r3, r2, r3
 8018b0e:	085b      	lsrs	r3, r3, #1
 8018b10:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8018b12:	69bb      	ldr	r3, [r7, #24]
 8018b14:	021b      	lsls	r3, r3, #8
 8018b16:	61bb      	str	r3, [r7, #24]
 8018b18:	e003      	b.n	8018b22 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018b1a:	2302      	movs	r3, #2
 8018b1c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8018b22:	69fb      	ldr	r3, [r7, #28]
 8018b24:	2b01      	cmp	r3, #1
 8018b26:	d902      	bls.n	8018b2e <HAL_I2S_Init+0x152>
 8018b28:	69fb      	ldr	r3, [r7, #28]
 8018b2a:	2bff      	cmp	r3, #255	@ 0xff
 8018b2c:	d907      	bls.n	8018b3e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b32:	2210      	movs	r2, #16
 8018b34:	431a      	orrs	r2, r3
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	e039      	b.n	8018bb2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	691a      	ldr	r2, [r3, #16]
 8018b42:	69bb      	ldr	r3, [r7, #24]
 8018b44:	431a      	orrs	r2, r3
 8018b46:	0011      	movs	r1, r2
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	69fa      	ldr	r2, [r7, #28]
 8018b4e:	430a      	orrs	r2, r1
 8018b50:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	69db      	ldr	r3, [r3, #28]
 8018b58:	4a18      	ldr	r2, [pc, #96]	@ (8018bbc <HAL_I2S_Init+0x1e0>)
 8018b5a:	401a      	ands	r2, r3
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	6859      	ldr	r1, [r3, #4]
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	689b      	ldr	r3, [r3, #8]
 8018b64:	4319      	orrs	r1, r3
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	68db      	ldr	r3, [r3, #12]
 8018b6a:	4319      	orrs	r1, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	699b      	ldr	r3, [r3, #24]
 8018b70:	430b      	orrs	r3, r1
 8018b72:	431a      	orrs	r2, r3
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	2180      	movs	r1, #128	@ 0x80
 8018b7a:	0109      	lsls	r1, r1, #4
 8018b7c:	430a      	orrs	r2, r1
 8018b7e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	689b      	ldr	r3, [r3, #8]
 8018b84:	2b30      	cmp	r3, #48	@ 0x30
 8018b86:	d003      	beq.n	8018b90 <HAL_I2S_Init+0x1b4>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	689b      	ldr	r3, [r3, #8]
 8018b8c:	2bb0      	cmp	r3, #176	@ 0xb0
 8018b8e:	d108      	bne.n	8018ba2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	69da      	ldr	r2, [r3, #28]
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	2180      	movs	r1, #128	@ 0x80
 8018b9c:	0149      	lsls	r1, r1, #5
 8018b9e:	430a      	orrs	r2, r1
 8018ba0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2235      	movs	r2, #53	@ 0x35
 8018bac:	2101      	movs	r1, #1
 8018bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018bb0:	2300      	movs	r3, #0
}
 8018bb2:	0018      	movs	r0, r3
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	b008      	add	sp, #32
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	46c0      	nop			@ (mov r8, r8)
 8018bbc:	fffff040 	.word	0xfffff040

08018bc0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b086      	sub	sp, #24
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	60b9      	str	r1, [r7, #8]
 8018bca:	1dbb      	adds	r3, r7, #6
 8018bcc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d003      	beq.n	8018bdc <HAL_I2S_Receive_DMA+0x1c>
 8018bd4:	1dbb      	adds	r3, r7, #6
 8018bd6:	881b      	ldrh	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d101      	bne.n	8018be0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8018bdc:	2301      	movs	r3, #1
 8018bde:	e0a6      	b.n	8018d2e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	2234      	movs	r2, #52	@ 0x34
 8018be4:	5c9b      	ldrb	r3, [r3, r2]
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	d101      	bne.n	8018bf0 <HAL_I2S_Receive_DMA+0x30>
 8018bec:	2302      	movs	r3, #2
 8018bee:	e09e      	b.n	8018d2e <HAL_I2S_Receive_DMA+0x16e>
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	2234      	movs	r2, #52	@ 0x34
 8018bf4:	2101      	movs	r1, #1
 8018bf6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	2235      	movs	r2, #53	@ 0x35
 8018bfc:	5c9b      	ldrb	r3, [r3, r2]
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	2b01      	cmp	r3, #1
 8018c02:	d005      	beq.n	8018c10 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	2234      	movs	r2, #52	@ 0x34
 8018c08:	2100      	movs	r1, #0
 8018c0a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8018c0c:	2302      	movs	r3, #2
 8018c0e:	e08e      	b.n	8018d2e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	2235      	movs	r2, #53	@ 0x35
 8018c14:	2104      	movs	r1, #4
 8018c16:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	68ba      	ldr	r2, [r7, #8]
 8018c22:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	69db      	ldr	r3, [r3, #28]
 8018c2a:	2207      	movs	r2, #7
 8018c2c:	4013      	ands	r3, r2
 8018c2e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	2b03      	cmp	r3, #3
 8018c34:	d002      	beq.n	8018c3c <HAL_I2S_Receive_DMA+0x7c>
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	2b05      	cmp	r3, #5
 8018c3a:	d10c      	bne.n	8018c56 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8018c3c:	1dbb      	adds	r3, r7, #6
 8018c3e:	881b      	ldrh	r3, [r3, #0]
 8018c40:	18db      	adds	r3, r3, r3
 8018c42:	b29a      	uxth	r2, r3
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8018c48:	1dbb      	adds	r3, r7, #6
 8018c4a:	881b      	ldrh	r3, [r3, #0]
 8018c4c:	18db      	adds	r3, r3, r3
 8018c4e:	b29a      	uxth	r2, r3
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8018c54:	e007      	b.n	8018c66 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	1dba      	adds	r2, r7, #6
 8018c5a:	8812      	ldrh	r2, [r2, #0]
 8018c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	1dba      	adds	r2, r7, #6
 8018c62:	8812      	ldrh	r2, [r2, #0]
 8018c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c6a:	4a33      	ldr	r2, [pc, #204]	@ (8018d38 <HAL_I2S_Receive_DMA+0x178>)
 8018c6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c72:	4a32      	ldr	r2, [pc, #200]	@ (8018d3c <HAL_I2S_Receive_DMA+0x17c>)
 8018c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018c7a:	4a31      	ldr	r2, [pc, #196]	@ (8018d40 <HAL_I2S_Receive_DMA+0x180>)
 8018c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	69da      	ldr	r2, [r3, #28]
 8018c84:	23c0      	movs	r3, #192	@ 0xc0
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	401a      	ands	r2, r3
 8018c8a:	23c0      	movs	r3, #192	@ 0xc0
 8018c8c:	009b      	lsls	r3, r3, #2
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d10a      	bne.n	8018ca8 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018c92:	2300      	movs	r3, #0
 8018c94:	613b      	str	r3, [r7, #16]
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	613b      	str	r3, [r7, #16]
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	689b      	ldr	r3, [r3, #8]
 8018ca4:	613b      	str	r3, [r7, #16]
 8018ca6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	330c      	adds	r3, #12
 8018cb2:	0019      	movs	r1, r3
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cb8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018cbe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018cc0:	f7fc f996 	bl	8014ff0 <HAL_DMA_Start_IT>
 8018cc4:	1e03      	subs	r3, r0, #0
 8018cc6:	d00f      	beq.n	8018ce8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ccc:	2208      	movs	r2, #8
 8018cce:	431a      	orrs	r2, r3
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	2235      	movs	r2, #53	@ 0x35
 8018cd8:	2101      	movs	r1, #1
 8018cda:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	2234      	movs	r2, #52	@ 0x34
 8018ce0:	2100      	movs	r1, #0
 8018ce2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	e022      	b.n	8018d2e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	69da      	ldr	r2, [r3, #28]
 8018cee:	2380      	movs	r3, #128	@ 0x80
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	4013      	ands	r3, r2
 8018cf4:	d108      	bne.n	8018d08 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	69da      	ldr	r2, [r3, #28]
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	2180      	movs	r1, #128	@ 0x80
 8018d02:	00c9      	lsls	r1, r1, #3
 8018d04:	430a      	orrs	r2, r1
 8018d06:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	2201      	movs	r2, #1
 8018d10:	4013      	ands	r3, r2
 8018d12:	d107      	bne.n	8018d24 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	685a      	ldr	r2, [r3, #4]
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2101      	movs	r1, #1
 8018d20:	430a      	orrs	r2, r1
 8018d22:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	2234      	movs	r2, #52	@ 0x34
 8018d28:	2100      	movs	r1, #0
 8018d2a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8018d2c:	2300      	movs	r3, #0
}
 8018d2e:	0018      	movs	r0, r3
 8018d30:	46bd      	mov	sp, r7
 8018d32:	b006      	add	sp, #24
 8018d34:	bd80      	pop	{r7, pc}
 8018d36:	46c0      	nop			@ (mov r8, r8)
 8018d38:	08018f21 	.word	0x08018f21
 8018d3c:	08018edd 	.word	0x08018edd
 8018d40:	08018f3f 	.word	0x08018f3f

08018d44 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b086      	sub	sp, #24
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018d4c:	2317      	movs	r3, #23
 8018d4e:	18fb      	adds	r3, r7, r3
 8018d50:	2200      	movs	r2, #0
 8018d52:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	685a      	ldr	r2, [r3, #4]
 8018d58:	2380      	movs	r3, #128	@ 0x80
 8018d5a:	009b      	lsls	r3, r3, #2
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d003      	beq.n	8018d68 <HAL_I2S_DMAStop+0x24>
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	685b      	ldr	r3, [r3, #4]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d158      	bne.n	8018e1a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d010      	beq.n	8018d92 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d74:	0018      	movs	r0, r3
 8018d76:	f7fc f9a1 	bl	80150bc <HAL_DMA_Abort>
 8018d7a:	1e03      	subs	r3, r0, #0
 8018d7c:	d009      	beq.n	8018d92 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d82:	2208      	movs	r2, #8
 8018d84:	431a      	orrs	r2, r3
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8018d8a:	2317      	movs	r3, #23
 8018d8c:	18fb      	adds	r3, r7, r3
 8018d8e:	2201      	movs	r2, #1
 8018d90:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	2364      	movs	r3, #100	@ 0x64
 8018d96:	2201      	movs	r2, #1
 8018d98:	2102      	movs	r1, #2
 8018d9a:	f000 f8f7 	bl	8018f8c <I2S_WaitFlagStateUntilTimeout>
 8018d9e:	1e03      	subs	r3, r0, #0
 8018da0:	d00d      	beq.n	8018dbe <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018da6:	2201      	movs	r2, #1
 8018da8:	431a      	orrs	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2235      	movs	r2, #53	@ 0x35
 8018db2:	2101      	movs	r1, #1
 8018db4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8018db6:	2317      	movs	r3, #23
 8018db8:	18fb      	adds	r3, r7, r3
 8018dba:	2201      	movs	r2, #1
 8018dbc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	2364      	movs	r3, #100	@ 0x64
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	2180      	movs	r1, #128	@ 0x80
 8018dc6:	f000 f8e1 	bl	8018f8c <I2S_WaitFlagStateUntilTimeout>
 8018dca:	1e03      	subs	r3, r0, #0
 8018dcc:	d00d      	beq.n	8018dea <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018dd2:	2201      	movs	r2, #1
 8018dd4:	431a      	orrs	r2, r3
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2235      	movs	r2, #53	@ 0x35
 8018dde:	2101      	movs	r1, #1
 8018de0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8018de2:	2317      	movs	r3, #23
 8018de4:	18fb      	adds	r3, r7, r3
 8018de6:	2201      	movs	r2, #1
 8018de8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	69da      	ldr	r2, [r3, #28]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	4938      	ldr	r1, [pc, #224]	@ (8018ed8 <HAL_I2S_DMAStop+0x194>)
 8018df6:	400a      	ands	r2, r1
 8018df8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	613b      	str	r3, [r7, #16]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	689b      	ldr	r3, [r3, #8]
 8018e04:	613b      	str	r3, [r7, #16]
 8018e06:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	685a      	ldr	r2, [r3, #4]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2102      	movs	r1, #2
 8018e14:	438a      	bics	r2, r1
 8018e16:	605a      	str	r2, [r3, #4]
 8018e18:	e053      	b.n	8018ec2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	685a      	ldr	r2, [r3, #4]
 8018e1e:	23c0      	movs	r3, #192	@ 0xc0
 8018e20:	009b      	lsls	r3, r3, #2
 8018e22:	429a      	cmp	r2, r3
 8018e24:	d005      	beq.n	8018e32 <HAL_I2S_DMAStop+0xee>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	685a      	ldr	r2, [r3, #4]
 8018e2a:	2380      	movs	r3, #128	@ 0x80
 8018e2c:	005b      	lsls	r3, r3, #1
 8018e2e:	429a      	cmp	r2, r3
 8018e30:	d147      	bne.n	8018ec2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d010      	beq.n	8018e5c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e3e:	0018      	movs	r0, r3
 8018e40:	f7fc f93c 	bl	80150bc <HAL_DMA_Abort>
 8018e44:	1e03      	subs	r3, r0, #0
 8018e46:	d009      	beq.n	8018e5c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e4c:	2208      	movs	r2, #8
 8018e4e:	431a      	orrs	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8018e54:	2317      	movs	r3, #23
 8018e56:	18fb      	adds	r3, r7, r3
 8018e58:	2201      	movs	r2, #1
 8018e5a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	69da      	ldr	r2, [r3, #28]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	491c      	ldr	r1, [pc, #112]	@ (8018ed8 <HAL_I2S_DMAStop+0x194>)
 8018e68:	400a      	ands	r2, r1
 8018e6a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	60fb      	str	r3, [r7, #12]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	60fb      	str	r3, [r7, #12]
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	689b      	ldr	r3, [r3, #8]
 8018e7e:	60fb      	str	r3, [r7, #12]
 8018e80:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	685a      	ldr	r2, [r3, #4]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	438a      	bics	r2, r1
 8018e90:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	685a      	ldr	r2, [r3, #4]
 8018e96:	2380      	movs	r3, #128	@ 0x80
 8018e98:	005b      	lsls	r3, r3, #1
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d10e      	bne.n	8018ebc <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ea2:	2240      	movs	r2, #64	@ 0x40
 8018ea4:	431a      	orrs	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2235      	movs	r2, #53	@ 0x35
 8018eae:	2101      	movs	r1, #1
 8018eb0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8018eb2:	2317      	movs	r3, #23
 8018eb4:	18fb      	adds	r3, r7, r3
 8018eb6:	2201      	movs	r2, #1
 8018eb8:	701a      	strb	r2, [r3, #0]
 8018eba:	e002      	b.n	8018ec2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2235      	movs	r2, #53	@ 0x35
 8018ec6:	2101      	movs	r1, #1
 8018ec8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8018eca:	2317      	movs	r3, #23
 8018ecc:	18fb      	adds	r3, r7, r3
 8018ece:	781b      	ldrb	r3, [r3, #0]
}
 8018ed0:	0018      	movs	r0, r3
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	b006      	add	sp, #24
 8018ed6:	bd80      	pop	{r7, pc}
 8018ed8:	fffffbff 	.word	0xfffffbff

08018edc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b084      	sub	sp, #16
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ee8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	69db      	ldr	r3, [r3, #28]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d10e      	bne.n	8018f10 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	685a      	ldr	r2, [r3, #4]
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2101      	movs	r1, #1
 8018efe:	438a      	bics	r2, r1
 8018f00:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	2200      	movs	r2, #0
 8018f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	2235      	movs	r2, #53	@ 0x35
 8018f0c:	2101      	movs	r1, #1
 8018f0e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	0018      	movs	r0, r3
 8018f14:	f7f8 fc40 	bl	8011798 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018f18:	46c0      	nop			@ (mov r8, r8)
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	b004      	add	sp, #16
 8018f1e:	bd80      	pop	{r7, pc}

08018f20 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f2c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	0018      	movs	r0, r3
 8018f32:	f7f8 fc1f 	bl	8011774 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018f36:	46c0      	nop			@ (mov r8, r8)
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	b004      	add	sp, #16
 8018f3c:	bd80      	pop	{r7, pc}

08018f3e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b084      	sub	sp, #16
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f4a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	685a      	ldr	r2, [r3, #4]
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2103      	movs	r1, #3
 8018f58:	438a      	bics	r2, r1
 8018f5a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	2200      	movs	r2, #0
 8018f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	2235      	movs	r2, #53	@ 0x35
 8018f6c:	2101      	movs	r1, #1
 8018f6e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f74:	2208      	movs	r2, #8
 8018f76:	431a      	orrs	r2, r3
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	0018      	movs	r0, r3
 8018f80:	f7f8 fc58 	bl	8011834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018f84:	46c0      	nop			@ (mov r8, r8)
 8018f86:	46bd      	mov	sp, r7
 8018f88:	b004      	add	sp, #16
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	603b      	str	r3, [r7, #0]
 8018f98:	1dfb      	adds	r3, r7, #7
 8018f9a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8018f9c:	f7fb fad6 	bl	801454c <HAL_GetTick>
 8018fa0:	0003      	movs	r3, r0
 8018fa2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018fa4:	e017      	b.n	8018fd6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	3301      	adds	r3, #1
 8018faa:	d014      	beq.n	8018fd6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8018fac:	f7fb face 	bl	801454c <HAL_GetTick>
 8018fb0:	0002      	movs	r2, r0
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	1ad3      	subs	r3, r2, r3
 8018fb6:	683a      	ldr	r2, [r7, #0]
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d902      	bls.n	8018fc2 <I2S_WaitFlagStateUntilTimeout+0x36>
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d109      	bne.n	8018fd6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	2235      	movs	r2, #53	@ 0x35
 8018fc6:	2101      	movs	r1, #1
 8018fc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	2234      	movs	r2, #52	@ 0x34
 8018fce:	2100      	movs	r1, #0
 8018fd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018fd2:	2303      	movs	r3, #3
 8018fd4:	e00f      	b.n	8018ff6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	689b      	ldr	r3, [r3, #8]
 8018fdc:	68ba      	ldr	r2, [r7, #8]
 8018fde:	4013      	ands	r3, r2
 8018fe0:	68ba      	ldr	r2, [r7, #8]
 8018fe2:	1ad3      	subs	r3, r2, r3
 8018fe4:	425a      	negs	r2, r3
 8018fe6:	4153      	adcs	r3, r2
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	001a      	movs	r2, r3
 8018fec:	1dfb      	adds	r3, r7, #7
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	d1d8      	bne.n	8018fa6 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8018ff4:	2300      	movs	r3, #0
}
 8018ff6:	0018      	movs	r0, r3
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	b006      	add	sp, #24
 8018ffc:	bd80      	pop	{r7, pc}
	...

08019000 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019002:	b08b      	sub	sp, #44	@ 0x2c
 8019004:	af06      	add	r7, sp, #24
 8019006:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d101      	bne.n	8019012 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801900e:	2301      	movs	r3, #1
 8019010:	e0f0      	b.n	80191f4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	4a79      	ldr	r2, [pc, #484]	@ (80191fc <HAL_PCD_Init+0x1fc>)
 8019016:	5c9b      	ldrb	r3, [r3, r2]
 8019018:	b2db      	uxtb	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d108      	bne.n	8019030 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801901e:	687a      	ldr	r2, [r7, #4]
 8019020:	23aa      	movs	r3, #170	@ 0xaa
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	2100      	movs	r1, #0
 8019026:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	0018      	movs	r0, r3
 801902c:	f009 ff6a 	bl	8022f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	4a72      	ldr	r2, [pc, #456]	@ (80191fc <HAL_PCD_Init+0x1fc>)
 8019034:	2103      	movs	r1, #3
 8019036:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	0018      	movs	r0, r3
 801903e:	f005 ff1b 	bl	801ee78 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019042:	230f      	movs	r3, #15
 8019044:	18fb      	adds	r3, r7, r3
 8019046:	2200      	movs	r2, #0
 8019048:	701a      	strb	r2, [r3, #0]
 801904a:	e049      	b.n	80190e0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801904c:	200f      	movs	r0, #15
 801904e:	183b      	adds	r3, r7, r0
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	6879      	ldr	r1, [r7, #4]
 8019054:	1c5a      	adds	r2, r3, #1
 8019056:	0013      	movs	r3, r2
 8019058:	009b      	lsls	r3, r3, #2
 801905a:	189b      	adds	r3, r3, r2
 801905c:	00db      	lsls	r3, r3, #3
 801905e:	18cb      	adds	r3, r1, r3
 8019060:	3301      	adds	r3, #1
 8019062:	2201      	movs	r2, #1
 8019064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019066:	183b      	adds	r3, r7, r0
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	6879      	ldr	r1, [r7, #4]
 801906c:	1c5a      	adds	r2, r3, #1
 801906e:	0013      	movs	r3, r2
 8019070:	009b      	lsls	r3, r3, #2
 8019072:	189b      	adds	r3, r3, r2
 8019074:	00db      	lsls	r3, r3, #3
 8019076:	183a      	adds	r2, r7, r0
 8019078:	7812      	ldrb	r2, [r2, #0]
 801907a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801907c:	183b      	adds	r3, r7, r0
 801907e:	781b      	ldrb	r3, [r3, #0]
 8019080:	6879      	ldr	r1, [r7, #4]
 8019082:	1c5a      	adds	r2, r3, #1
 8019084:	0013      	movs	r3, r2
 8019086:	009b      	lsls	r3, r3, #2
 8019088:	189b      	adds	r3, r3, r2
 801908a:	00db      	lsls	r3, r3, #3
 801908c:	18cb      	adds	r3, r1, r3
 801908e:	3303      	adds	r3, #3
 8019090:	2200      	movs	r2, #0
 8019092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019094:	183b      	adds	r3, r7, r0
 8019096:	781a      	ldrb	r2, [r3, #0]
 8019098:	6879      	ldr	r1, [r7, #4]
 801909a:	0013      	movs	r3, r2
 801909c:	009b      	lsls	r3, r3, #2
 801909e:	189b      	adds	r3, r3, r2
 80190a0:	00db      	lsls	r3, r3, #3
 80190a2:	18cb      	adds	r3, r1, r3
 80190a4:	3338      	adds	r3, #56	@ 0x38
 80190a6:	2200      	movs	r2, #0
 80190a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80190aa:	183b      	adds	r3, r7, r0
 80190ac:	781a      	ldrb	r2, [r3, #0]
 80190ae:	6879      	ldr	r1, [r7, #4]
 80190b0:	0013      	movs	r3, r2
 80190b2:	009b      	lsls	r3, r3, #2
 80190b4:	189b      	adds	r3, r3, r2
 80190b6:	00db      	lsls	r3, r3, #3
 80190b8:	18cb      	adds	r3, r1, r3
 80190ba:	333c      	adds	r3, #60	@ 0x3c
 80190bc:	2200      	movs	r2, #0
 80190be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80190c0:	183b      	adds	r3, r7, r0
 80190c2:	781a      	ldrb	r2, [r3, #0]
 80190c4:	6879      	ldr	r1, [r7, #4]
 80190c6:	0013      	movs	r3, r2
 80190c8:	009b      	lsls	r3, r3, #2
 80190ca:	189b      	adds	r3, r3, r2
 80190cc:	00db      	lsls	r3, r3, #3
 80190ce:	18cb      	adds	r3, r1, r3
 80190d0:	3340      	adds	r3, #64	@ 0x40
 80190d2:	2200      	movs	r2, #0
 80190d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80190d6:	183b      	adds	r3, r7, r0
 80190d8:	781a      	ldrb	r2, [r3, #0]
 80190da:	183b      	adds	r3, r7, r0
 80190dc:	3201      	adds	r2, #1
 80190de:	701a      	strb	r2, [r3, #0]
 80190e0:	210f      	movs	r1, #15
 80190e2:	187b      	adds	r3, r7, r1
 80190e4:	781a      	ldrb	r2, [r3, #0]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d3ae      	bcc.n	801904c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80190ee:	187b      	adds	r3, r7, r1
 80190f0:	2200      	movs	r2, #0
 80190f2:	701a      	strb	r2, [r3, #0]
 80190f4:	e056      	b.n	80191a4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80190f6:	240f      	movs	r4, #15
 80190f8:	193b      	adds	r3, r7, r4
 80190fa:	781a      	ldrb	r2, [r3, #0]
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	236a      	movs	r3, #106	@ 0x6a
 8019100:	33ff      	adds	r3, #255	@ 0xff
 8019102:	0019      	movs	r1, r3
 8019104:	0013      	movs	r3, r2
 8019106:	009b      	lsls	r3, r3, #2
 8019108:	189b      	adds	r3, r3, r2
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	18c3      	adds	r3, r0, r3
 801910e:	185b      	adds	r3, r3, r1
 8019110:	2200      	movs	r2, #0
 8019112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019114:	193b      	adds	r3, r7, r4
 8019116:	781a      	ldrb	r2, [r3, #0]
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	23b4      	movs	r3, #180	@ 0xb4
 801911c:	0059      	lsls	r1, r3, #1
 801911e:	0013      	movs	r3, r2
 8019120:	009b      	lsls	r3, r3, #2
 8019122:	189b      	adds	r3, r3, r2
 8019124:	00db      	lsls	r3, r3, #3
 8019126:	18c3      	adds	r3, r0, r3
 8019128:	185b      	adds	r3, r3, r1
 801912a:	193a      	adds	r2, r7, r4
 801912c:	7812      	ldrb	r2, [r2, #0]
 801912e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019130:	193b      	adds	r3, r7, r4
 8019132:	781a      	ldrb	r2, [r3, #0]
 8019134:	6878      	ldr	r0, [r7, #4]
 8019136:	236c      	movs	r3, #108	@ 0x6c
 8019138:	33ff      	adds	r3, #255	@ 0xff
 801913a:	0019      	movs	r1, r3
 801913c:	0013      	movs	r3, r2
 801913e:	009b      	lsls	r3, r3, #2
 8019140:	189b      	adds	r3, r3, r2
 8019142:	00db      	lsls	r3, r3, #3
 8019144:	18c3      	adds	r3, r0, r3
 8019146:	185b      	adds	r3, r3, r1
 8019148:	2200      	movs	r2, #0
 801914a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801914c:	193b      	adds	r3, r7, r4
 801914e:	781a      	ldrb	r2, [r3, #0]
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	23bc      	movs	r3, #188	@ 0xbc
 8019154:	0059      	lsls	r1, r3, #1
 8019156:	0013      	movs	r3, r2
 8019158:	009b      	lsls	r3, r3, #2
 801915a:	189b      	adds	r3, r3, r2
 801915c:	00db      	lsls	r3, r3, #3
 801915e:	18c3      	adds	r3, r0, r3
 8019160:	185b      	adds	r3, r3, r1
 8019162:	2200      	movs	r2, #0
 8019164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019166:	193b      	adds	r3, r7, r4
 8019168:	781a      	ldrb	r2, [r3, #0]
 801916a:	6878      	ldr	r0, [r7, #4]
 801916c:	23be      	movs	r3, #190	@ 0xbe
 801916e:	0059      	lsls	r1, r3, #1
 8019170:	0013      	movs	r3, r2
 8019172:	009b      	lsls	r3, r3, #2
 8019174:	189b      	adds	r3, r3, r2
 8019176:	00db      	lsls	r3, r3, #3
 8019178:	18c3      	adds	r3, r0, r3
 801917a:	185b      	adds	r3, r3, r1
 801917c:	2200      	movs	r2, #0
 801917e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019180:	193b      	adds	r3, r7, r4
 8019182:	781a      	ldrb	r2, [r3, #0]
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	23c0      	movs	r3, #192	@ 0xc0
 8019188:	0059      	lsls	r1, r3, #1
 801918a:	0013      	movs	r3, r2
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	189b      	adds	r3, r3, r2
 8019190:	00db      	lsls	r3, r3, #3
 8019192:	18c3      	adds	r3, r0, r3
 8019194:	185b      	adds	r3, r3, r1
 8019196:	2200      	movs	r2, #0
 8019198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801919a:	193b      	adds	r3, r7, r4
 801919c:	781a      	ldrb	r2, [r3, #0]
 801919e:	193b      	adds	r3, r7, r4
 80191a0:	3201      	adds	r2, #1
 80191a2:	701a      	strb	r2, [r3, #0]
 80191a4:	230f      	movs	r3, #15
 80191a6:	18fb      	adds	r3, r7, r3
 80191a8:	781a      	ldrb	r2, [r3, #0]
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	685b      	ldr	r3, [r3, #4]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d3a1      	bcc.n	80190f6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	6818      	ldr	r0, [r3, #0]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	466a      	mov	r2, sp
 80191ba:	0011      	movs	r1, r2
 80191bc:	001a      	movs	r2, r3
 80191be:	3210      	adds	r2, #16
 80191c0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80191c2:	c170      	stmia	r1!, {r4, r5, r6}
 80191c4:	ca30      	ldmia	r2!, {r4, r5}
 80191c6:	c130      	stmia	r1!, {r4, r5}
 80191c8:	6859      	ldr	r1, [r3, #4]
 80191ca:	689a      	ldr	r2, [r3, #8]
 80191cc:	68db      	ldr	r3, [r3, #12]
 80191ce:	f005 fe6d 	bl	801eeac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2224      	movs	r2, #36	@ 0x24
 80191d6:	2100      	movs	r1, #0
 80191d8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	4a07      	ldr	r2, [pc, #28]	@ (80191fc <HAL_PCD_Init+0x1fc>)
 80191de:	2101      	movs	r1, #1
 80191e0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	69db      	ldr	r3, [r3, #28]
 80191e6:	2b01      	cmp	r3, #1
 80191e8:	d103      	bne.n	80191f2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	0018      	movs	r0, r3
 80191ee:	f001 fd23 	bl	801ac38 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80191f2:	2300      	movs	r3, #0
}
 80191f4:	0018      	movs	r0, r3
 80191f6:	46bd      	mov	sp, r7
 80191f8:	b005      	add	sp, #20
 80191fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191fc:	000002a9 	.word	0x000002a9

08019200 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	23aa      	movs	r3, #170	@ 0xaa
 801920c:	009b      	lsls	r3, r3, #2
 801920e:	5cd3      	ldrb	r3, [r2, r3]
 8019210:	2b01      	cmp	r3, #1
 8019212:	d101      	bne.n	8019218 <HAL_PCD_Start+0x18>
 8019214:	2302      	movs	r3, #2
 8019216:	e014      	b.n	8019242 <HAL_PCD_Start+0x42>
 8019218:	687a      	ldr	r2, [r7, #4]
 801921a:	23aa      	movs	r3, #170	@ 0xaa
 801921c:	009b      	lsls	r3, r3, #2
 801921e:	2101      	movs	r1, #1
 8019220:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	0018      	movs	r0, r3
 8019228:	f005 fe10 	bl	801ee4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	0018      	movs	r0, r3
 8019232:	f007 fe13 	bl	8020e5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019236:	687a      	ldr	r2, [r7, #4]
 8019238:	23aa      	movs	r3, #170	@ 0xaa
 801923a:	009b      	lsls	r3, r3, #2
 801923c:	2100      	movs	r1, #0
 801923e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019240:	2300      	movs	r3, #0
}
 8019242:	0018      	movs	r0, r3
 8019244:	46bd      	mov	sp, r7
 8019246:	b002      	add	sp, #8
 8019248:	bd80      	pop	{r7, pc}
	...

0801924c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	0018      	movs	r0, r3
 801925a:	f007 fe15 	bl	8020e88 <USB_ReadInterrupts>
 801925e:	0003      	movs	r3, r0
 8019260:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8019262:	68fa      	ldr	r2, [r7, #12]
 8019264:	2380      	movs	r3, #128	@ 0x80
 8019266:	021b      	lsls	r3, r3, #8
 8019268:	4013      	ands	r3, r2
 801926a:	d004      	beq.n	8019276 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	0018      	movs	r0, r3
 8019270:	f000 fb62 	bl	8019938 <PCD_EP_ISR_Handler>

    return;
 8019274:	e11d      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8019276:	68fa      	ldr	r2, [r7, #12]
 8019278:	2380      	movs	r3, #128	@ 0x80
 801927a:	00db      	lsls	r3, r3, #3
 801927c:	4013      	ands	r3, r2
 801927e:	d015      	beq.n	80192ac <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	2244      	movs	r2, #68	@ 0x44
 8019286:	5a9b      	ldrh	r3, [r3, r2]
 8019288:	b29a      	uxth	r2, r3
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	498a      	ldr	r1, [pc, #552]	@ (80194b8 <HAL_PCD_IRQHandler+0x26c>)
 8019290:	400a      	ands	r2, r1
 8019292:	b291      	uxth	r1, r2
 8019294:	2244      	movs	r2, #68	@ 0x44
 8019296:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	0018      	movs	r0, r3
 801929c:	f009 feb5 	bl	802300a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	2100      	movs	r1, #0
 80192a4:	0018      	movs	r0, r3
 80192a6:	f000 f915 	bl	80194d4 <HAL_PCD_SetAddress>

    return;
 80192aa:	e102      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	2380      	movs	r3, #128	@ 0x80
 80192b0:	01db      	lsls	r3, r3, #7
 80192b2:	4013      	ands	r3, r2
 80192b4:	d00c      	beq.n	80192d0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	2244      	movs	r2, #68	@ 0x44
 80192bc:	5a9b      	ldrh	r3, [r3, r2]
 80192be:	b29a      	uxth	r2, r3
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	497d      	ldr	r1, [pc, #500]	@ (80194bc <HAL_PCD_IRQHandler+0x270>)
 80192c6:	400a      	ands	r2, r1
 80192c8:	b291      	uxth	r1, r2
 80192ca:	2244      	movs	r2, #68	@ 0x44
 80192cc:	5299      	strh	r1, [r3, r2]

    return;
 80192ce:	e0f0      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80192d0:	68fa      	ldr	r2, [r7, #12]
 80192d2:	2380      	movs	r3, #128	@ 0x80
 80192d4:	019b      	lsls	r3, r3, #6
 80192d6:	4013      	ands	r3, r2
 80192d8:	d00c      	beq.n	80192f4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	2244      	movs	r2, #68	@ 0x44
 80192e0:	5a9b      	ldrh	r3, [r3, r2]
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	4975      	ldr	r1, [pc, #468]	@ (80194c0 <HAL_PCD_IRQHandler+0x274>)
 80192ea:	400a      	ands	r2, r1
 80192ec:	b291      	uxth	r1, r2
 80192ee:	2244      	movs	r2, #68	@ 0x44
 80192f0:	5299      	strh	r1, [r3, r2]

    return;
 80192f2:	e0de      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80192f4:	68fa      	ldr	r2, [r7, #12]
 80192f6:	2380      	movs	r3, #128	@ 0x80
 80192f8:	015b      	lsls	r3, r3, #5
 80192fa:	4013      	ands	r3, r2
 80192fc:	d038      	beq.n	8019370 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	2240      	movs	r2, #64	@ 0x40
 8019304:	5a9b      	ldrh	r3, [r3, r2]
 8019306:	b29a      	uxth	r2, r3
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2104      	movs	r1, #4
 801930e:	438a      	bics	r2, r1
 8019310:	b291      	uxth	r1, r2
 8019312:	2240      	movs	r2, #64	@ 0x40
 8019314:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	2240      	movs	r2, #64	@ 0x40
 801931c:	5a9b      	ldrh	r3, [r3, r2]
 801931e:	b29a      	uxth	r2, r3
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2108      	movs	r1, #8
 8019326:	438a      	bics	r2, r1
 8019328:	b291      	uxth	r1, r2
 801932a:	2240      	movs	r2, #64	@ 0x40
 801932c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801932e:	687a      	ldr	r2, [r7, #4]
 8019330:	23b8      	movs	r3, #184	@ 0xb8
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	5cd3      	ldrb	r3, [r2, r3]
 8019336:	2b01      	cmp	r3, #1
 8019338:	d109      	bne.n	801934e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	23b8      	movs	r3, #184	@ 0xb8
 801933e:	009b      	lsls	r3, r3, #2
 8019340:	2100      	movs	r1, #0
 8019342:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2100      	movs	r1, #0
 8019348:	0018      	movs	r0, r3
 801934a:	f001 fc9f 	bl	801ac8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	0018      	movs	r0, r3
 8019352:	f009 fe9b 	bl	802308c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	2244      	movs	r2, #68	@ 0x44
 801935c:	5a9b      	ldrh	r3, [r3, r2]
 801935e:	b29a      	uxth	r2, r3
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4957      	ldr	r1, [pc, #348]	@ (80194c4 <HAL_PCD_IRQHandler+0x278>)
 8019366:	400a      	ands	r2, r1
 8019368:	b291      	uxth	r1, r2
 801936a:	2244      	movs	r2, #68	@ 0x44
 801936c:	5299      	strh	r1, [r3, r2]

    return;
 801936e:	e0a0      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019370:	68fa      	ldr	r2, [r7, #12]
 8019372:	2380      	movs	r3, #128	@ 0x80
 8019374:	011b      	lsls	r3, r3, #4
 8019376:	4013      	ands	r3, r2
 8019378:	d028      	beq.n	80193cc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	2240      	movs	r2, #64	@ 0x40
 8019380:	5a9b      	ldrh	r3, [r3, r2]
 8019382:	b29a      	uxth	r2, r3
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	2108      	movs	r1, #8
 801938a:	430a      	orrs	r2, r1
 801938c:	b291      	uxth	r1, r2
 801938e:	2240      	movs	r2, #64	@ 0x40
 8019390:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	2244      	movs	r2, #68	@ 0x44
 8019398:	5a9b      	ldrh	r3, [r3, r2]
 801939a:	b29a      	uxth	r2, r3
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4949      	ldr	r1, [pc, #292]	@ (80194c8 <HAL_PCD_IRQHandler+0x27c>)
 80193a2:	400a      	ands	r2, r1
 80193a4:	b291      	uxth	r1, r2
 80193a6:	2244      	movs	r2, #68	@ 0x44
 80193a8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	2240      	movs	r2, #64	@ 0x40
 80193b0:	5a9b      	ldrh	r3, [r3, r2]
 80193b2:	b29a      	uxth	r2, r3
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2104      	movs	r1, #4
 80193ba:	430a      	orrs	r2, r1
 80193bc:	b291      	uxth	r1, r2
 80193be:	2240      	movs	r2, #64	@ 0x40
 80193c0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	0018      	movs	r0, r3
 80193c6:	f009 fe45 	bl	8023054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80193ca:	e072      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	2280      	movs	r2, #128	@ 0x80
 80193d0:	4013      	ands	r3, r2
 80193d2:	d046      	beq.n	8019462 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	2244      	movs	r2, #68	@ 0x44
 80193da:	5a9b      	ldrh	r3, [r3, r2]
 80193dc:	b29a      	uxth	r2, r3
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2180      	movs	r1, #128	@ 0x80
 80193e4:	438a      	bics	r2, r1
 80193e6:	b291      	uxth	r1, r2
 80193e8:	2244      	movs	r2, #68	@ 0x44
 80193ea:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80193ec:	687a      	ldr	r2, [r7, #4]
 80193ee:	23b8      	movs	r3, #184	@ 0xb8
 80193f0:	009b      	lsls	r3, r3, #2
 80193f2:	5cd3      	ldrb	r3, [r2, r3]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d12f      	bne.n	8019458 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	2240      	movs	r2, #64	@ 0x40
 80193fe:	5a9b      	ldrh	r3, [r3, r2]
 8019400:	b29a      	uxth	r2, r3
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	2104      	movs	r1, #4
 8019408:	430a      	orrs	r2, r1
 801940a:	b291      	uxth	r1, r2
 801940c:	2240      	movs	r2, #64	@ 0x40
 801940e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	2240      	movs	r2, #64	@ 0x40
 8019416:	5a9b      	ldrh	r3, [r3, r2]
 8019418:	b29a      	uxth	r2, r3
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	2108      	movs	r1, #8
 8019420:	430a      	orrs	r2, r1
 8019422:	b291      	uxth	r1, r2
 8019424:	2240      	movs	r2, #64	@ 0x40
 8019426:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	23b8      	movs	r3, #184	@ 0xb8
 801942c:	009b      	lsls	r3, r3, #2
 801942e:	2101      	movs	r1, #1
 8019430:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	2254      	movs	r2, #84	@ 0x54
 8019438:	5a9b      	ldrh	r3, [r3, r2]
 801943a:	b29b      	uxth	r3, r3
 801943c:	089b      	lsrs	r3, r3, #2
 801943e:	223c      	movs	r2, #60	@ 0x3c
 8019440:	4013      	ands	r3, r2
 8019442:	0019      	movs	r1, r3
 8019444:	687a      	ldr	r2, [r7, #4]
 8019446:	23b9      	movs	r3, #185	@ 0xb9
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2101      	movs	r1, #1
 8019450:	0018      	movs	r0, r3
 8019452:	f001 fc1b 	bl	801ac8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019456:	e02c      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	0018      	movs	r0, r3
 801945c:	f009 fdfa 	bl	8023054 <HAL_PCD_SuspendCallback>
    return;
 8019460:	e027      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019462:	68fa      	ldr	r2, [r7, #12]
 8019464:	2380      	movs	r3, #128	@ 0x80
 8019466:	009b      	lsls	r3, r3, #2
 8019468:	4013      	ands	r3, r2
 801946a:	d010      	beq.n	801948e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2244      	movs	r2, #68	@ 0x44
 8019472:	5a9b      	ldrh	r3, [r3, r2]
 8019474:	b29a      	uxth	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4914      	ldr	r1, [pc, #80]	@ (80194cc <HAL_PCD_IRQHandler+0x280>)
 801947c:	400a      	ands	r2, r1
 801947e:	b291      	uxth	r1, r2
 8019480:	2244      	movs	r2, #68	@ 0x44
 8019482:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	0018      	movs	r0, r3
 8019488:	f009 fdb0 	bl	8022fec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801948c:	e011      	b.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801948e:	68fa      	ldr	r2, [r7, #12]
 8019490:	2380      	movs	r3, #128	@ 0x80
 8019492:	005b      	lsls	r3, r3, #1
 8019494:	4013      	ands	r3, r2
 8019496:	d00c      	beq.n	80194b2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2244      	movs	r2, #68	@ 0x44
 801949e:	5a9b      	ldrh	r3, [r3, r2]
 80194a0:	b29a      	uxth	r2, r3
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	490a      	ldr	r1, [pc, #40]	@ (80194d0 <HAL_PCD_IRQHandler+0x284>)
 80194a8:	400a      	ands	r2, r1
 80194aa:	b291      	uxth	r1, r2
 80194ac:	2244      	movs	r2, #68	@ 0x44
 80194ae:	5299      	strh	r1, [r3, r2]

    return;
 80194b0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80194b2:	46bd      	mov	sp, r7
 80194b4:	b004      	add	sp, #16
 80194b6:	bd80      	pop	{r7, pc}
 80194b8:	fffffbff 	.word	0xfffffbff
 80194bc:	ffffbfff 	.word	0xffffbfff
 80194c0:	ffffdfff 	.word	0xffffdfff
 80194c4:	ffffefff 	.word	0xffffefff
 80194c8:	fffff7ff 	.word	0xfffff7ff
 80194cc:	fffffdff 	.word	0xfffffdff
 80194d0:	fffffeff 	.word	0xfffffeff

080194d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b082      	sub	sp, #8
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
 80194dc:	000a      	movs	r2, r1
 80194de:	1cfb      	adds	r3, r7, #3
 80194e0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	23aa      	movs	r3, #170	@ 0xaa
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	5cd3      	ldrb	r3, [r2, r3]
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	d101      	bne.n	80194f2 <HAL_PCD_SetAddress+0x1e>
 80194ee:	2302      	movs	r3, #2
 80194f0:	e017      	b.n	8019522 <HAL_PCD_SetAddress+0x4e>
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	23aa      	movs	r3, #170	@ 0xaa
 80194f6:	009b      	lsls	r3, r3, #2
 80194f8:	2101      	movs	r1, #1
 80194fa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	1cfa      	adds	r2, r7, #3
 8019500:	2124      	movs	r1, #36	@ 0x24
 8019502:	7812      	ldrb	r2, [r2, #0]
 8019504:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	1cfb      	adds	r3, r7, #3
 801950c:	781b      	ldrb	r3, [r3, #0]
 801950e:	0019      	movs	r1, r3
 8019510:	0010      	movs	r0, r2
 8019512:	f007 fc8f 	bl	8020e34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019516:	687a      	ldr	r2, [r7, #4]
 8019518:	23aa      	movs	r3, #170	@ 0xaa
 801951a:	009b      	lsls	r3, r3, #2
 801951c:	2100      	movs	r1, #0
 801951e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019520:	2300      	movs	r3, #0
}
 8019522:	0018      	movs	r0, r3
 8019524:	46bd      	mov	sp, r7
 8019526:	b002      	add	sp, #8
 8019528:	bd80      	pop	{r7, pc}

0801952a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801952a:	b590      	push	{r4, r7, lr}
 801952c:	b085      	sub	sp, #20
 801952e:	af00      	add	r7, sp, #0
 8019530:	6078      	str	r0, [r7, #4]
 8019532:	000c      	movs	r4, r1
 8019534:	0010      	movs	r0, r2
 8019536:	0019      	movs	r1, r3
 8019538:	1cfb      	adds	r3, r7, #3
 801953a:	1c22      	adds	r2, r4, #0
 801953c:	701a      	strb	r2, [r3, #0]
 801953e:	003b      	movs	r3, r7
 8019540:	1c02      	adds	r2, r0, #0
 8019542:	801a      	strh	r2, [r3, #0]
 8019544:	1cbb      	adds	r3, r7, #2
 8019546:	1c0a      	adds	r2, r1, #0
 8019548:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801954a:	230b      	movs	r3, #11
 801954c:	18fb      	adds	r3, r7, r3
 801954e:	2200      	movs	r2, #0
 8019550:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019552:	1cfb      	adds	r3, r7, #3
 8019554:	781b      	ldrb	r3, [r3, #0]
 8019556:	b25b      	sxtb	r3, r3
 8019558:	2b00      	cmp	r3, #0
 801955a:	da0f      	bge.n	801957c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801955c:	1cfb      	adds	r3, r7, #3
 801955e:	781b      	ldrb	r3, [r3, #0]
 8019560:	2207      	movs	r2, #7
 8019562:	4013      	ands	r3, r2
 8019564:	1c5a      	adds	r2, r3, #1
 8019566:	0013      	movs	r3, r2
 8019568:	009b      	lsls	r3, r3, #2
 801956a:	189b      	adds	r3, r3, r2
 801956c:	00db      	lsls	r3, r3, #3
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	18d3      	adds	r3, r2, r3
 8019572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	2201      	movs	r2, #1
 8019578:	705a      	strb	r2, [r3, #1]
 801957a:	e00f      	b.n	801959c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801957c:	1cfb      	adds	r3, r7, #3
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	2207      	movs	r2, #7
 8019582:	401a      	ands	r2, r3
 8019584:	0013      	movs	r3, r2
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	189b      	adds	r3, r3, r2
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	3369      	adds	r3, #105	@ 0x69
 801958e:	33ff      	adds	r3, #255	@ 0xff
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	18d3      	adds	r3, r2, r3
 8019594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	2200      	movs	r2, #0
 801959a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801959c:	1cfb      	adds	r3, r7, #3
 801959e:	781b      	ldrb	r3, [r3, #0]
 80195a0:	2207      	movs	r2, #7
 80195a2:	4013      	ands	r3, r2
 80195a4:	b2da      	uxtb	r2, r3
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80195aa:	003b      	movs	r3, r7
 80195ac:	881a      	ldrh	r2, [r3, #0]
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	1cba      	adds	r2, r7, #2
 80195b6:	7812      	ldrb	r2, [r2, #0]
 80195b8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80195ba:	1cbb      	adds	r3, r7, #2
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	2b02      	cmp	r3, #2
 80195c0:	d102      	bne.n	80195c8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2200      	movs	r2, #0
 80195c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80195c8:	687a      	ldr	r2, [r7, #4]
 80195ca:	23aa      	movs	r3, #170	@ 0xaa
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	5cd3      	ldrb	r3, [r2, r3]
 80195d0:	2b01      	cmp	r3, #1
 80195d2:	d101      	bne.n	80195d8 <HAL_PCD_EP_Open+0xae>
 80195d4:	2302      	movs	r3, #2
 80195d6:	e013      	b.n	8019600 <HAL_PCD_EP_Open+0xd6>
 80195d8:	687a      	ldr	r2, [r7, #4]
 80195da:	23aa      	movs	r3, #170	@ 0xaa
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	2101      	movs	r1, #1
 80195e0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	68fa      	ldr	r2, [r7, #12]
 80195e8:	0011      	movs	r1, r2
 80195ea:	0018      	movs	r0, r3
 80195ec:	f005 fc86 	bl	801eefc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80195f0:	687a      	ldr	r2, [r7, #4]
 80195f2:	23aa      	movs	r3, #170	@ 0xaa
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	2100      	movs	r1, #0
 80195f8:	54d1      	strb	r1, [r2, r3]

  return ret;
 80195fa:	230b      	movs	r3, #11
 80195fc:	18fb      	adds	r3, r7, r3
 80195fe:	781b      	ldrb	r3, [r3, #0]
}
 8019600:	0018      	movs	r0, r3
 8019602:	46bd      	mov	sp, r7
 8019604:	b005      	add	sp, #20
 8019606:	bd90      	pop	{r4, r7, pc}

08019608 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b084      	sub	sp, #16
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
 8019610:	000a      	movs	r2, r1
 8019612:	1cfb      	adds	r3, r7, #3
 8019614:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019616:	1cfb      	adds	r3, r7, #3
 8019618:	781b      	ldrb	r3, [r3, #0]
 801961a:	b25b      	sxtb	r3, r3
 801961c:	2b00      	cmp	r3, #0
 801961e:	da0f      	bge.n	8019640 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019620:	1cfb      	adds	r3, r7, #3
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	2207      	movs	r2, #7
 8019626:	4013      	ands	r3, r2
 8019628:	1c5a      	adds	r2, r3, #1
 801962a:	0013      	movs	r3, r2
 801962c:	009b      	lsls	r3, r3, #2
 801962e:	189b      	adds	r3, r3, r2
 8019630:	00db      	lsls	r3, r3, #3
 8019632:	687a      	ldr	r2, [r7, #4]
 8019634:	18d3      	adds	r3, r2, r3
 8019636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	2201      	movs	r2, #1
 801963c:	705a      	strb	r2, [r3, #1]
 801963e:	e00f      	b.n	8019660 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019640:	1cfb      	adds	r3, r7, #3
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	2207      	movs	r2, #7
 8019646:	401a      	ands	r2, r3
 8019648:	0013      	movs	r3, r2
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	189b      	adds	r3, r3, r2
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	3369      	adds	r3, #105	@ 0x69
 8019652:	33ff      	adds	r3, #255	@ 0xff
 8019654:	687a      	ldr	r2, [r7, #4]
 8019656:	18d3      	adds	r3, r2, r3
 8019658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	2200      	movs	r2, #0
 801965e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019660:	1cfb      	adds	r3, r7, #3
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	2207      	movs	r2, #7
 8019666:	4013      	ands	r3, r2
 8019668:	b2da      	uxtb	r2, r3
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801966e:	687a      	ldr	r2, [r7, #4]
 8019670:	23aa      	movs	r3, #170	@ 0xaa
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	5cd3      	ldrb	r3, [r2, r3]
 8019676:	2b01      	cmp	r3, #1
 8019678:	d101      	bne.n	801967e <HAL_PCD_EP_Close+0x76>
 801967a:	2302      	movs	r3, #2
 801967c:	e011      	b.n	80196a2 <HAL_PCD_EP_Close+0x9a>
 801967e:	687a      	ldr	r2, [r7, #4]
 8019680:	23aa      	movs	r3, #170	@ 0xaa
 8019682:	009b      	lsls	r3, r3, #2
 8019684:	2101      	movs	r1, #1
 8019686:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	68fa      	ldr	r2, [r7, #12]
 801968e:	0011      	movs	r1, r2
 8019690:	0018      	movs	r0, r3
 8019692:	f005 ffd5 	bl	801f640 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019696:	687a      	ldr	r2, [r7, #4]
 8019698:	23aa      	movs	r3, #170	@ 0xaa
 801969a:	009b      	lsls	r3, r3, #2
 801969c:	2100      	movs	r1, #0
 801969e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80196a0:	2300      	movs	r3, #0
}
 80196a2:	0018      	movs	r0, r3
 80196a4:	46bd      	mov	sp, r7
 80196a6:	b004      	add	sp, #16
 80196a8:	bd80      	pop	{r7, pc}

080196aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80196aa:	b580      	push	{r7, lr}
 80196ac:	b086      	sub	sp, #24
 80196ae:	af00      	add	r7, sp, #0
 80196b0:	60f8      	str	r0, [r7, #12]
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	603b      	str	r3, [r7, #0]
 80196b6:	200b      	movs	r0, #11
 80196b8:	183b      	adds	r3, r7, r0
 80196ba:	1c0a      	adds	r2, r1, #0
 80196bc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80196be:	0001      	movs	r1, r0
 80196c0:	187b      	adds	r3, r7, r1
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	2207      	movs	r2, #7
 80196c6:	401a      	ands	r2, r3
 80196c8:	0013      	movs	r3, r2
 80196ca:	009b      	lsls	r3, r3, #2
 80196cc:	189b      	adds	r3, r3, r2
 80196ce:	00db      	lsls	r3, r3, #3
 80196d0:	3369      	adds	r3, #105	@ 0x69
 80196d2:	33ff      	adds	r3, #255	@ 0xff
 80196d4:	68fa      	ldr	r2, [r7, #12]
 80196d6:	18d3      	adds	r3, r2, r3
 80196d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80196da:	697b      	ldr	r3, [r7, #20]
 80196dc:	687a      	ldr	r2, [r7, #4]
 80196de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80196e0:	697b      	ldr	r3, [r7, #20]
 80196e2:	683a      	ldr	r2, [r7, #0]
 80196e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	2200      	movs	r2, #0
 80196ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	2200      	movs	r2, #0
 80196f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80196f2:	187b      	adds	r3, r7, r1
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	2207      	movs	r2, #7
 80196f8:	4013      	ands	r3, r2
 80196fa:	b2da      	uxtb	r2, r3
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	697a      	ldr	r2, [r7, #20]
 8019706:	0011      	movs	r1, r2
 8019708:	0018      	movs	r0, r3
 801970a:	f006 f959 	bl	801f9c0 <USB_EPStartXfer>

  return HAL_OK;
 801970e:	2300      	movs	r3, #0
}
 8019710:	0018      	movs	r0, r3
 8019712:	46bd      	mov	sp, r7
 8019714:	b006      	add	sp, #24
 8019716:	bd80      	pop	{r7, pc}

08019718 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b082      	sub	sp, #8
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
 8019720:	000a      	movs	r2, r1
 8019722:	1cfb      	adds	r3, r7, #3
 8019724:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019726:	1cfb      	adds	r3, r7, #3
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	2207      	movs	r2, #7
 801972c:	401a      	ands	r2, r3
 801972e:	6878      	ldr	r0, [r7, #4]
 8019730:	23c2      	movs	r3, #194	@ 0xc2
 8019732:	0059      	lsls	r1, r3, #1
 8019734:	0013      	movs	r3, r2
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	189b      	adds	r3, r3, r2
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	18c3      	adds	r3, r0, r3
 801973e:	185b      	adds	r3, r3, r1
 8019740:	681b      	ldr	r3, [r3, #0]
}
 8019742:	0018      	movs	r0, r3
 8019744:	46bd      	mov	sp, r7
 8019746:	b002      	add	sp, #8
 8019748:	bd80      	pop	{r7, pc}

0801974a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801974a:	b580      	push	{r7, lr}
 801974c:	b086      	sub	sp, #24
 801974e:	af00      	add	r7, sp, #0
 8019750:	60f8      	str	r0, [r7, #12]
 8019752:	607a      	str	r2, [r7, #4]
 8019754:	603b      	str	r3, [r7, #0]
 8019756:	200b      	movs	r0, #11
 8019758:	183b      	adds	r3, r7, r0
 801975a:	1c0a      	adds	r2, r1, #0
 801975c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801975e:	183b      	adds	r3, r7, r0
 8019760:	781b      	ldrb	r3, [r3, #0]
 8019762:	2207      	movs	r2, #7
 8019764:	4013      	ands	r3, r2
 8019766:	1c5a      	adds	r2, r3, #1
 8019768:	0013      	movs	r3, r2
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	189b      	adds	r3, r3, r2
 801976e:	00db      	lsls	r3, r3, #3
 8019770:	68fa      	ldr	r2, [r7, #12]
 8019772:	18d3      	adds	r3, r2, r3
 8019774:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019776:	697b      	ldr	r3, [r7, #20]
 8019778:	687a      	ldr	r2, [r7, #4]
 801977a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801977c:	697b      	ldr	r3, [r7, #20]
 801977e:	683a      	ldr	r2, [r7, #0]
 8019780:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	2224      	movs	r2, #36	@ 0x24
 8019786:	2101      	movs	r1, #1
 8019788:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801978a:	697b      	ldr	r3, [r7, #20]
 801978c:	683a      	ldr	r2, [r7, #0]
 801978e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019790:	697b      	ldr	r3, [r7, #20]
 8019792:	2200      	movs	r2, #0
 8019794:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019796:	697b      	ldr	r3, [r7, #20]
 8019798:	2201      	movs	r2, #1
 801979a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801979c:	183b      	adds	r3, r7, r0
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	2207      	movs	r2, #7
 80197a2:	4013      	ands	r3, r2
 80197a4:	b2da      	uxtb	r2, r3
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	697a      	ldr	r2, [r7, #20]
 80197b0:	0011      	movs	r1, r2
 80197b2:	0018      	movs	r0, r3
 80197b4:	f006 f904 	bl	801f9c0 <USB_EPStartXfer>

  return HAL_OK;
 80197b8:	2300      	movs	r3, #0
}
 80197ba:	0018      	movs	r0, r3
 80197bc:	46bd      	mov	sp, r7
 80197be:	b006      	add	sp, #24
 80197c0:	bd80      	pop	{r7, pc}

080197c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80197c2:	b580      	push	{r7, lr}
 80197c4:	b084      	sub	sp, #16
 80197c6:	af00      	add	r7, sp, #0
 80197c8:	6078      	str	r0, [r7, #4]
 80197ca:	000a      	movs	r2, r1
 80197cc:	1cfb      	adds	r3, r7, #3
 80197ce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80197d0:	1cfb      	adds	r3, r7, #3
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	2207      	movs	r2, #7
 80197d6:	401a      	ands	r2, r3
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d901      	bls.n	80197e4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80197e0:	2301      	movs	r3, #1
 80197e2:	e046      	b.n	8019872 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80197e4:	1cfb      	adds	r3, r7, #3
 80197e6:	781b      	ldrb	r3, [r3, #0]
 80197e8:	b25b      	sxtb	r3, r3
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	da0f      	bge.n	801980e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80197ee:	1cfb      	adds	r3, r7, #3
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	2207      	movs	r2, #7
 80197f4:	4013      	ands	r3, r2
 80197f6:	1c5a      	adds	r2, r3, #1
 80197f8:	0013      	movs	r3, r2
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	189b      	adds	r3, r3, r2
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	18d3      	adds	r3, r2, r3
 8019804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2201      	movs	r2, #1
 801980a:	705a      	strb	r2, [r3, #1]
 801980c:	e00d      	b.n	801982a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801980e:	1cfb      	adds	r3, r7, #3
 8019810:	781a      	ldrb	r2, [r3, #0]
 8019812:	0013      	movs	r3, r2
 8019814:	009b      	lsls	r3, r3, #2
 8019816:	189b      	adds	r3, r3, r2
 8019818:	00db      	lsls	r3, r3, #3
 801981a:	3369      	adds	r3, #105	@ 0x69
 801981c:	33ff      	adds	r3, #255	@ 0xff
 801981e:	687a      	ldr	r2, [r7, #4]
 8019820:	18d3      	adds	r3, r2, r3
 8019822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2200      	movs	r2, #0
 8019828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2201      	movs	r2, #1
 801982e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019830:	1cfb      	adds	r3, r7, #3
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	2207      	movs	r2, #7
 8019836:	4013      	ands	r3, r2
 8019838:	b2da      	uxtb	r2, r3
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801983e:	687a      	ldr	r2, [r7, #4]
 8019840:	23aa      	movs	r3, #170	@ 0xaa
 8019842:	009b      	lsls	r3, r3, #2
 8019844:	5cd3      	ldrb	r3, [r2, r3]
 8019846:	2b01      	cmp	r3, #1
 8019848:	d101      	bne.n	801984e <HAL_PCD_EP_SetStall+0x8c>
 801984a:	2302      	movs	r3, #2
 801984c:	e011      	b.n	8019872 <HAL_PCD_EP_SetStall+0xb0>
 801984e:	687a      	ldr	r2, [r7, #4]
 8019850:	23aa      	movs	r3, #170	@ 0xaa
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	2101      	movs	r1, #1
 8019856:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	68fa      	ldr	r2, [r7, #12]
 801985e:	0011      	movs	r1, r2
 8019860:	0018      	movs	r0, r3
 8019862:	f007 f9e5 	bl	8020c30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019866:	687a      	ldr	r2, [r7, #4]
 8019868:	23aa      	movs	r3, #170	@ 0xaa
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	2100      	movs	r1, #0
 801986e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019870:	2300      	movs	r3, #0
}
 8019872:	0018      	movs	r0, r3
 8019874:	46bd      	mov	sp, r7
 8019876:	b004      	add	sp, #16
 8019878:	bd80      	pop	{r7, pc}

0801987a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801987a:	b580      	push	{r7, lr}
 801987c:	b084      	sub	sp, #16
 801987e:	af00      	add	r7, sp, #0
 8019880:	6078      	str	r0, [r7, #4]
 8019882:	000a      	movs	r2, r1
 8019884:	1cfb      	adds	r3, r7, #3
 8019886:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019888:	1cfb      	adds	r3, r7, #3
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	220f      	movs	r2, #15
 801988e:	401a      	ands	r2, r3
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	685b      	ldr	r3, [r3, #4]
 8019894:	429a      	cmp	r2, r3
 8019896:	d901      	bls.n	801989c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019898:	2301      	movs	r3, #1
 801989a:	e048      	b.n	801992e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801989c:	1cfb      	adds	r3, r7, #3
 801989e:	781b      	ldrb	r3, [r3, #0]
 80198a0:	b25b      	sxtb	r3, r3
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	da0f      	bge.n	80198c6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80198a6:	1cfb      	adds	r3, r7, #3
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	2207      	movs	r2, #7
 80198ac:	4013      	ands	r3, r2
 80198ae:	1c5a      	adds	r2, r3, #1
 80198b0:	0013      	movs	r3, r2
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	189b      	adds	r3, r3, r2
 80198b6:	00db      	lsls	r3, r3, #3
 80198b8:	687a      	ldr	r2, [r7, #4]
 80198ba:	18d3      	adds	r3, r2, r3
 80198bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	2201      	movs	r2, #1
 80198c2:	705a      	strb	r2, [r3, #1]
 80198c4:	e00f      	b.n	80198e6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80198c6:	1cfb      	adds	r3, r7, #3
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2207      	movs	r2, #7
 80198cc:	401a      	ands	r2, r3
 80198ce:	0013      	movs	r3, r2
 80198d0:	009b      	lsls	r3, r3, #2
 80198d2:	189b      	adds	r3, r3, r2
 80198d4:	00db      	lsls	r3, r3, #3
 80198d6:	3369      	adds	r3, #105	@ 0x69
 80198d8:	33ff      	adds	r3, #255	@ 0xff
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	18d3      	adds	r3, r2, r3
 80198de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	2200      	movs	r2, #0
 80198e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	2200      	movs	r2, #0
 80198ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80198ec:	1cfb      	adds	r3, r7, #3
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	2207      	movs	r2, #7
 80198f2:	4013      	ands	r3, r2
 80198f4:	b2da      	uxtb	r2, r3
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80198fa:	687a      	ldr	r2, [r7, #4]
 80198fc:	23aa      	movs	r3, #170	@ 0xaa
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	5cd3      	ldrb	r3, [r2, r3]
 8019902:	2b01      	cmp	r3, #1
 8019904:	d101      	bne.n	801990a <HAL_PCD_EP_ClrStall+0x90>
 8019906:	2302      	movs	r3, #2
 8019908:	e011      	b.n	801992e <HAL_PCD_EP_ClrStall+0xb4>
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	23aa      	movs	r3, #170	@ 0xaa
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	2101      	movs	r1, #1
 8019912:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	68fa      	ldr	r2, [r7, #12]
 801991a:	0011      	movs	r1, r2
 801991c:	0018      	movs	r0, r3
 801991e:	f007 f9d7 	bl	8020cd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	23aa      	movs	r3, #170	@ 0xaa
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	2100      	movs	r1, #0
 801992a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801992c:	2300      	movs	r3, #0
}
 801992e:	0018      	movs	r0, r3
 8019930:	46bd      	mov	sp, r7
 8019932:	b004      	add	sp, #16
 8019934:	bd80      	pop	{r7, pc}
	...

08019938 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019938:	b5b0      	push	{r4, r5, r7, lr}
 801993a:	b096      	sub	sp, #88	@ 0x58
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019940:	f000 fbec 	bl	801a11c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	681a      	ldr	r2, [r3, #0]
 8019948:	204e      	movs	r0, #78	@ 0x4e
 801994a:	183b      	adds	r3, r7, r0
 801994c:	2144      	movs	r1, #68	@ 0x44
 801994e:	5a52      	ldrh	r2, [r2, r1]
 8019950:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019952:	183b      	adds	r3, r7, r0
 8019954:	881b      	ldrh	r3, [r3, #0]
 8019956:	b2da      	uxtb	r2, r3
 8019958:	244d      	movs	r4, #77	@ 0x4d
 801995a:	193b      	adds	r3, r7, r4
 801995c:	210f      	movs	r1, #15
 801995e:	400a      	ands	r2, r1
 8019960:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019962:	193b      	adds	r3, r7, r4
 8019964:	781b      	ldrb	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d000      	beq.n	801996c <PCD_EP_ISR_Handler+0x34>
 801996a:	e18f      	b.n	8019c8c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801996c:	183b      	adds	r3, r7, r0
 801996e:	881b      	ldrh	r3, [r3, #0]
 8019970:	2210      	movs	r2, #16
 8019972:	4013      	ands	r3, r2
 8019974:	d155      	bne.n	8019a22 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	881b      	ldrh	r3, [r3, #0]
 801997c:	b29a      	uxth	r2, r3
 801997e:	200e      	movs	r0, #14
 8019980:	183b      	adds	r3, r7, r0
 8019982:	49bb      	ldr	r1, [pc, #748]	@ (8019c70 <PCD_EP_ISR_Handler+0x338>)
 8019984:	400a      	ands	r2, r1
 8019986:	801a      	strh	r2, [r3, #0]
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	183a      	adds	r2, r7, r0
 801998e:	8812      	ldrh	r2, [r2, #0]
 8019990:	49b8      	ldr	r1, [pc, #736]	@ (8019c74 <PCD_EP_ISR_Handler+0x33c>)
 8019992:	430a      	orrs	r2, r1
 8019994:	b292      	uxth	r2, r2
 8019996:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	3328      	adds	r3, #40	@ 0x28
 801999c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	2250      	movs	r2, #80	@ 0x50
 80199a4:	5a9b      	ldrh	r3, [r3, r2]
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	001a      	movs	r2, r3
 80199aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	00db      	lsls	r3, r3, #3
 80199b0:	18d2      	adds	r2, r2, r3
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	18d3      	adds	r3, r2, r3
 80199b8:	4aaf      	ldr	r2, [pc, #700]	@ (8019c78 <PCD_EP_ISR_Handler+0x340>)
 80199ba:	4694      	mov	ip, r2
 80199bc:	4463      	add	r3, ip
 80199be:	881b      	ldrh	r3, [r3, #0]
 80199c0:	059b      	lsls	r3, r3, #22
 80199c2:	0d9a      	lsrs	r2, r3, #22
 80199c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80199c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199ca:	695a      	ldr	r2, [r3, #20]
 80199cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199ce:	69db      	ldr	r3, [r3, #28]
 80199d0:	18d2      	adds	r2, r2, r3
 80199d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2100      	movs	r1, #0
 80199da:	0018      	movs	r0, r3
 80199dc:	f009 fae8 	bl	8022fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	2224      	movs	r2, #36	@ 0x24
 80199e4:	5c9b      	ldrb	r3, [r3, r2]
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d101      	bne.n	80199f0 <PCD_EP_ISR_Handler+0xb8>
 80199ec:	f000 fb96 	bl	801a11c <PCD_EP_ISR_Handler+0x7e4>
 80199f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199f2:	699b      	ldr	r3, [r3, #24]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d001      	beq.n	80199fc <PCD_EP_ISR_Handler+0xc4>
 80199f8:	f000 fb90 	bl	801a11c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2224      	movs	r2, #36	@ 0x24
 8019a00:	5c9b      	ldrb	r3, [r3, r2]
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	2280      	movs	r2, #128	@ 0x80
 8019a06:	4252      	negs	r2, r2
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	b2da      	uxtb	r2, r3
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	0011      	movs	r1, r2
 8019a12:	224c      	movs	r2, #76	@ 0x4c
 8019a14:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	2224      	movs	r2, #36	@ 0x24
 8019a1a:	2100      	movs	r1, #0
 8019a1c:	5499      	strb	r1, [r3, r2]
 8019a1e:	f000 fb7d 	bl	801a11c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	3369      	adds	r3, #105	@ 0x69
 8019a26:	33ff      	adds	r3, #255	@ 0xff
 8019a28:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681a      	ldr	r2, [r3, #0]
 8019a2e:	214a      	movs	r1, #74	@ 0x4a
 8019a30:	187b      	adds	r3, r7, r1
 8019a32:	8812      	ldrh	r2, [r2, #0]
 8019a34:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019a36:	187b      	adds	r3, r7, r1
 8019a38:	881a      	ldrh	r2, [r3, #0]
 8019a3a:	2380      	movs	r3, #128	@ 0x80
 8019a3c:	011b      	lsls	r3, r3, #4
 8019a3e:	4013      	ands	r3, r2
 8019a40:	d037      	beq.n	8019ab2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	2250      	movs	r2, #80	@ 0x50
 8019a48:	5a9b      	ldrh	r3, [r3, r2]
 8019a4a:	b29b      	uxth	r3, r3
 8019a4c:	001a      	movs	r2, r3
 8019a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a50:	781b      	ldrb	r3, [r3, #0]
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	18d2      	adds	r2, r2, r3
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	18d3      	adds	r3, r2, r3
 8019a5c:	4a87      	ldr	r2, [pc, #540]	@ (8019c7c <PCD_EP_ISR_Handler+0x344>)
 8019a5e:	4694      	mov	ip, r2
 8019a60:	4463      	add	r3, ip
 8019a62:	881b      	ldrh	r3, [r3, #0]
 8019a64:	059b      	lsls	r3, r3, #22
 8019a66:	0d9a      	lsrs	r2, r3, #22
 8019a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	6818      	ldr	r0, [r3, #0]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	22ac      	movs	r2, #172	@ 0xac
 8019a74:	0092      	lsls	r2, r2, #2
 8019a76:	1899      	adds	r1, r3, r2
 8019a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	f007 fa59 	bl	8020f38 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	881b      	ldrh	r3, [r3, #0]
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	2010      	movs	r0, #16
 8019a90:	183b      	adds	r3, r7, r0
 8019a92:	497b      	ldr	r1, [pc, #492]	@ (8019c80 <PCD_EP_ISR_Handler+0x348>)
 8019a94:	400a      	ands	r2, r1
 8019a96:	801a      	strh	r2, [r3, #0]
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	183a      	adds	r2, r7, r0
 8019a9e:	8812      	ldrh	r2, [r2, #0]
 8019aa0:	2180      	movs	r1, #128	@ 0x80
 8019aa2:	430a      	orrs	r2, r1
 8019aa4:	b292      	uxth	r2, r2
 8019aa6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	0018      	movs	r0, r3
 8019aac:	f009 fa4a 	bl	8022f44 <HAL_PCD_SetupStageCallback>
 8019ab0:	e334      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019ab2:	234a      	movs	r3, #74	@ 0x4a
 8019ab4:	18fb      	adds	r3, r7, r3
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	db00      	blt.n	8019ac0 <PCD_EP_ISR_Handler+0x188>
 8019abe:	e32d      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	881b      	ldrh	r3, [r3, #0]
 8019ac6:	b29a      	uxth	r2, r3
 8019ac8:	201e      	movs	r0, #30
 8019aca:	183b      	adds	r3, r7, r0
 8019acc:	496c      	ldr	r1, [pc, #432]	@ (8019c80 <PCD_EP_ISR_Handler+0x348>)
 8019ace:	400a      	ands	r2, r1
 8019ad0:	801a      	strh	r2, [r3, #0]
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	183a      	adds	r2, r7, r0
 8019ad8:	8812      	ldrh	r2, [r2, #0]
 8019ada:	2180      	movs	r1, #128	@ 0x80
 8019adc:	430a      	orrs	r2, r1
 8019ade:	b292      	uxth	r2, r2
 8019ae0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	2250      	movs	r2, #80	@ 0x50
 8019ae8:	5a9b      	ldrh	r3, [r3, r2]
 8019aea:	b29b      	uxth	r3, r3
 8019aec:	001a      	movs	r2, r3
 8019aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	00db      	lsls	r3, r3, #3
 8019af4:	18d2      	adds	r2, r2, r3
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	18d3      	adds	r3, r2, r3
 8019afc:	4a5f      	ldr	r2, [pc, #380]	@ (8019c7c <PCD_EP_ISR_Handler+0x344>)
 8019afe:	4694      	mov	ip, r2
 8019b00:	4463      	add	r3, ip
 8019b02:	881b      	ldrh	r3, [r3, #0]
 8019b04:	059b      	lsls	r3, r3, #22
 8019b06:	0d9a      	lsrs	r2, r3, #22
 8019b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b0e:	69db      	ldr	r3, [r3, #28]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d01a      	beq.n	8019b4a <PCD_EP_ISR_Handler+0x212>
 8019b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b16:	695b      	ldr	r3, [r3, #20]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d016      	beq.n	8019b4a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6818      	ldr	r0, [r3, #0]
 8019b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b22:	6959      	ldr	r1, [r3, #20]
 8019b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019b2c:	b29b      	uxth	r3, r3
 8019b2e:	f007 fa03 	bl	8020f38 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8019b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b34:	695a      	ldr	r2, [r3, #20]
 8019b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b38:	69db      	ldr	r3, [r3, #28]
 8019b3a:	18d2      	adds	r2, r2, r3
 8019b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2100      	movs	r1, #0
 8019b44:	0018      	movs	r0, r3
 8019b46:	f009 fa12 	bl	8022f6e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681a      	ldr	r2, [r3, #0]
 8019b4e:	214a      	movs	r1, #74	@ 0x4a
 8019b50:	187b      	adds	r3, r7, r1
 8019b52:	8812      	ldrh	r2, [r2, #0]
 8019b54:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8019b56:	187b      	adds	r3, r7, r1
 8019b58:	881a      	ldrh	r2, [r3, #0]
 8019b5a:	2380      	movs	r3, #128	@ 0x80
 8019b5c:	011b      	lsls	r3, r3, #4
 8019b5e:	4013      	ands	r3, r2
 8019b60:	d000      	beq.n	8019b64 <PCD_EP_ISR_Handler+0x22c>
 8019b62:	e2db      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
 8019b64:	187b      	adds	r3, r7, r1
 8019b66:	881a      	ldrh	r2, [r3, #0]
 8019b68:	23c0      	movs	r3, #192	@ 0xc0
 8019b6a:	019b      	lsls	r3, r3, #6
 8019b6c:	401a      	ands	r2, r3
 8019b6e:	23c0      	movs	r3, #192	@ 0xc0
 8019b70:	019b      	lsls	r3, r3, #6
 8019b72:	429a      	cmp	r2, r3
 8019b74:	d100      	bne.n	8019b78 <PCD_EP_ISR_Handler+0x240>
 8019b76:	e2d1      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	61bb      	str	r3, [r7, #24]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2250      	movs	r2, #80	@ 0x50
 8019b84:	5a9b      	ldrh	r3, [r3, r2]
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	001a      	movs	r2, r3
 8019b8a:	69bb      	ldr	r3, [r7, #24]
 8019b8c:	189b      	adds	r3, r3, r2
 8019b8e:	61bb      	str	r3, [r7, #24]
 8019b90:	69bb      	ldr	r3, [r7, #24]
 8019b92:	4a3a      	ldr	r2, [pc, #232]	@ (8019c7c <PCD_EP_ISR_Handler+0x344>)
 8019b94:	4694      	mov	ip, r2
 8019b96:	4463      	add	r3, ip
 8019b98:	617b      	str	r3, [r7, #20]
 8019b9a:	697b      	ldr	r3, [r7, #20]
 8019b9c:	881b      	ldrh	r3, [r3, #0]
 8019b9e:	b29b      	uxth	r3, r3
 8019ba0:	059b      	lsls	r3, r3, #22
 8019ba2:	0d9b      	lsrs	r3, r3, #22
 8019ba4:	b29a      	uxth	r2, r3
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	801a      	strh	r2, [r3, #0]
 8019baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bac:	691b      	ldr	r3, [r3, #16]
 8019bae:	2b3e      	cmp	r3, #62	@ 0x3e
 8019bb0:	d91a      	bls.n	8019be8 <PCD_EP_ISR_Handler+0x2b0>
 8019bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bb4:	691b      	ldr	r3, [r3, #16]
 8019bb6:	095b      	lsrs	r3, r3, #5
 8019bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8019bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bbc:	691b      	ldr	r3, [r3, #16]
 8019bbe:	221f      	movs	r2, #31
 8019bc0:	4013      	ands	r3, r2
 8019bc2:	d102      	bne.n	8019bca <PCD_EP_ISR_Handler+0x292>
 8019bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019bc6:	3b01      	subs	r3, #1
 8019bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	881b      	ldrh	r3, [r3, #0]
 8019bce:	b29a      	uxth	r2, r3
 8019bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019bd2:	b29b      	uxth	r3, r3
 8019bd4:	029b      	lsls	r3, r3, #10
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	4313      	orrs	r3, r2
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	4a25      	ldr	r2, [pc, #148]	@ (8019c74 <PCD_EP_ISR_Handler+0x33c>)
 8019bde:	4313      	orrs	r3, r2
 8019be0:	b29a      	uxth	r2, r3
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	801a      	strh	r2, [r3, #0]
 8019be6:	e023      	b.n	8019c30 <PCD_EP_ISR_Handler+0x2f8>
 8019be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bea:	691b      	ldr	r3, [r3, #16]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d108      	bne.n	8019c02 <PCD_EP_ISR_Handler+0x2ca>
 8019bf0:	697b      	ldr	r3, [r7, #20]
 8019bf2:	881b      	ldrh	r3, [r3, #0]
 8019bf4:	b29b      	uxth	r3, r3
 8019bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8019c74 <PCD_EP_ISR_Handler+0x33c>)
 8019bf8:	4313      	orrs	r3, r2
 8019bfa:	b29a      	uxth	r2, r3
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	801a      	strh	r2, [r3, #0]
 8019c00:	e016      	b.n	8019c30 <PCD_EP_ISR_Handler+0x2f8>
 8019c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c04:	691b      	ldr	r3, [r3, #16]
 8019c06:	085b      	lsrs	r3, r3, #1
 8019c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8019c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c0c:	691b      	ldr	r3, [r3, #16]
 8019c0e:	2201      	movs	r2, #1
 8019c10:	4013      	ands	r3, r2
 8019c12:	d002      	beq.n	8019c1a <PCD_EP_ISR_Handler+0x2e2>
 8019c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c16:	3301      	adds	r3, #1
 8019c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	881b      	ldrh	r3, [r3, #0]
 8019c1e:	b29a      	uxth	r2, r3
 8019c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c22:	b29b      	uxth	r3, r3
 8019c24:	029b      	lsls	r3, r3, #10
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	4313      	orrs	r3, r2
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	881b      	ldrh	r3, [r3, #0]
 8019c36:	b29a      	uxth	r2, r3
 8019c38:	2012      	movs	r0, #18
 8019c3a:	183b      	adds	r3, r7, r0
 8019c3c:	4911      	ldr	r1, [pc, #68]	@ (8019c84 <PCD_EP_ISR_Handler+0x34c>)
 8019c3e:	400a      	ands	r2, r1
 8019c40:	801a      	strh	r2, [r3, #0]
 8019c42:	183b      	adds	r3, r7, r0
 8019c44:	183a      	adds	r2, r7, r0
 8019c46:	8812      	ldrh	r2, [r2, #0]
 8019c48:	2180      	movs	r1, #128	@ 0x80
 8019c4a:	0149      	lsls	r1, r1, #5
 8019c4c:	404a      	eors	r2, r1
 8019c4e:	801a      	strh	r2, [r3, #0]
 8019c50:	183b      	adds	r3, r7, r0
 8019c52:	183a      	adds	r2, r7, r0
 8019c54:	8812      	ldrh	r2, [r2, #0]
 8019c56:	2180      	movs	r1, #128	@ 0x80
 8019c58:	0189      	lsls	r1, r1, #6
 8019c5a:	404a      	eors	r2, r1
 8019c5c:	801a      	strh	r2, [r3, #0]
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	183a      	adds	r2, r7, r0
 8019c64:	8812      	ldrh	r2, [r2, #0]
 8019c66:	4908      	ldr	r1, [pc, #32]	@ (8019c88 <PCD_EP_ISR_Handler+0x350>)
 8019c68:	430a      	orrs	r2, r1
 8019c6a:	b292      	uxth	r2, r2
 8019c6c:	801a      	strh	r2, [r3, #0]
 8019c6e:	e255      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
 8019c70:	ffff8f0f 	.word	0xffff8f0f
 8019c74:	ffff8000 	.word	0xffff8000
 8019c78:	00000402 	.word	0x00000402
 8019c7c:	00000406 	.word	0x00000406
 8019c80:	00000f8f 	.word	0x00000f8f
 8019c84:	ffffbf8f 	.word	0xffffbf8f
 8019c88:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	001a      	movs	r2, r3
 8019c92:	204d      	movs	r0, #77	@ 0x4d
 8019c94:	183b      	adds	r3, r7, r0
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	009b      	lsls	r3, r3, #2
 8019c9a:	18d2      	adds	r2, r2, r3
 8019c9c:	214a      	movs	r1, #74	@ 0x4a
 8019c9e:	187b      	adds	r3, r7, r1
 8019ca0:	8812      	ldrh	r2, [r2, #0]
 8019ca2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019ca4:	187b      	adds	r3, r7, r1
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	5e9b      	ldrsh	r3, [r3, r2]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	db00      	blt.n	8019cb0 <PCD_EP_ISR_Handler+0x378>
 8019cae:	e0fa      	b.n	8019ea6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	001a      	movs	r2, r3
 8019cb6:	183b      	adds	r3, r7, r0
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	009b      	lsls	r3, r3, #2
 8019cbc:	18d3      	adds	r3, r2, r3
 8019cbe:	881b      	ldrh	r3, [r3, #0]
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	2448      	movs	r4, #72	@ 0x48
 8019cc4:	193b      	adds	r3, r7, r4
 8019cc6:	49d1      	ldr	r1, [pc, #836]	@ (801a00c <PCD_EP_ISR_Handler+0x6d4>)
 8019cc8:	400a      	ands	r2, r1
 8019cca:	801a      	strh	r2, [r3, #0]
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	001a      	movs	r2, r3
 8019cd2:	183b      	adds	r3, r7, r0
 8019cd4:	781b      	ldrb	r3, [r3, #0]
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	18d3      	adds	r3, r2, r3
 8019cda:	193a      	adds	r2, r7, r4
 8019cdc:	8812      	ldrh	r2, [r2, #0]
 8019cde:	2180      	movs	r1, #128	@ 0x80
 8019ce0:	430a      	orrs	r2, r1
 8019ce2:	b292      	uxth	r2, r2
 8019ce4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8019ce6:	183b      	adds	r3, r7, r0
 8019ce8:	781a      	ldrb	r2, [r3, #0]
 8019cea:	0013      	movs	r3, r2
 8019cec:	009b      	lsls	r3, r3, #2
 8019cee:	189b      	adds	r3, r3, r2
 8019cf0:	00db      	lsls	r3, r3, #3
 8019cf2:	3369      	adds	r3, #105	@ 0x69
 8019cf4:	33ff      	adds	r3, #255	@ 0xff
 8019cf6:	687a      	ldr	r2, [r7, #4]
 8019cf8:	18d3      	adds	r3, r2, r3
 8019cfa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8019cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019cfe:	7b1b      	ldrb	r3, [r3, #12]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d125      	bne.n	8019d50 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	2250      	movs	r2, #80	@ 0x50
 8019d0a:	5a9b      	ldrh	r3, [r3, r2]
 8019d0c:	b29b      	uxth	r3, r3
 8019d0e:	001a      	movs	r2, r3
 8019d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d12:	781b      	ldrb	r3, [r3, #0]
 8019d14:	00db      	lsls	r3, r3, #3
 8019d16:	18d2      	adds	r2, r2, r3
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	18d3      	adds	r3, r2, r3
 8019d1e:	4abc      	ldr	r2, [pc, #752]	@ (801a010 <PCD_EP_ISR_Handler+0x6d8>)
 8019d20:	4694      	mov	ip, r2
 8019d22:	4463      	add	r3, ip
 8019d24:	881a      	ldrh	r2, [r3, #0]
 8019d26:	2450      	movs	r4, #80	@ 0x50
 8019d28:	193b      	adds	r3, r7, r4
 8019d2a:	0592      	lsls	r2, r2, #22
 8019d2c:	0d92      	lsrs	r2, r2, #22
 8019d2e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8019d30:	193b      	adds	r3, r7, r4
 8019d32:	881b      	ldrh	r3, [r3, #0]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d100      	bne.n	8019d3a <PCD_EP_ISR_Handler+0x402>
 8019d38:	e08d      	b.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6818      	ldr	r0, [r3, #0]
 8019d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d40:	6959      	ldr	r1, [r3, #20]
 8019d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d44:	88da      	ldrh	r2, [r3, #6]
 8019d46:	193b      	adds	r3, r7, r4
 8019d48:	881b      	ldrh	r3, [r3, #0]
 8019d4a:	f007 f8f5 	bl	8020f38 <USB_ReadPMA>
 8019d4e:	e082      	b.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8019d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d52:	78db      	ldrb	r3, [r3, #3]
 8019d54:	2b02      	cmp	r3, #2
 8019d56:	d10c      	bne.n	8019d72 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8019d58:	2350      	movs	r3, #80	@ 0x50
 8019d5a:	18fc      	adds	r4, r7, r3
 8019d5c:	234a      	movs	r3, #74	@ 0x4a
 8019d5e:	18fb      	adds	r3, r7, r3
 8019d60:	881a      	ldrh	r2, [r3, #0]
 8019d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	0018      	movs	r0, r3
 8019d68:	f000 f9ec 	bl	801a144 <HAL_PCD_EP_DB_Receive>
 8019d6c:	0003      	movs	r3, r0
 8019d6e:	8023      	strh	r3, [r4, #0]
 8019d70:	e071      	b.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	001a      	movs	r2, r3
 8019d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d7a:	781b      	ldrb	r3, [r3, #0]
 8019d7c:	009b      	lsls	r3, r3, #2
 8019d7e:	18d3      	adds	r3, r2, r3
 8019d80:	881b      	ldrh	r3, [r3, #0]
 8019d82:	b29a      	uxth	r2, r3
 8019d84:	2052      	movs	r0, #82	@ 0x52
 8019d86:	183b      	adds	r3, r7, r0
 8019d88:	49a2      	ldr	r1, [pc, #648]	@ (801a014 <PCD_EP_ISR_Handler+0x6dc>)
 8019d8a:	400a      	ands	r2, r1
 8019d8c:	801a      	strh	r2, [r3, #0]
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	001a      	movs	r2, r3
 8019d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	009b      	lsls	r3, r3, #2
 8019d9a:	18d3      	adds	r3, r2, r3
 8019d9c:	183a      	adds	r2, r7, r0
 8019d9e:	8812      	ldrh	r2, [r2, #0]
 8019da0:	499d      	ldr	r1, [pc, #628]	@ (801a018 <PCD_EP_ISR_Handler+0x6e0>)
 8019da2:	430a      	orrs	r2, r1
 8019da4:	b292      	uxth	r2, r2
 8019da6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	001a      	movs	r2, r3
 8019dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	009b      	lsls	r3, r3, #2
 8019db4:	18d3      	adds	r3, r2, r3
 8019db6:	881b      	ldrh	r3, [r3, #0]
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	001a      	movs	r2, r3
 8019dbc:	2380      	movs	r3, #128	@ 0x80
 8019dbe:	01db      	lsls	r3, r3, #7
 8019dc0:	4013      	ands	r3, r2
 8019dc2:	d024      	beq.n	8019e0e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2250      	movs	r2, #80	@ 0x50
 8019dca:	5a9b      	ldrh	r3, [r3, r2]
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	001a      	movs	r2, r3
 8019dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	00db      	lsls	r3, r3, #3
 8019dd6:	18d2      	adds	r2, r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	18d3      	adds	r3, r2, r3
 8019dde:	4a8f      	ldr	r2, [pc, #572]	@ (801a01c <PCD_EP_ISR_Handler+0x6e4>)
 8019de0:	4694      	mov	ip, r2
 8019de2:	4463      	add	r3, ip
 8019de4:	881a      	ldrh	r2, [r3, #0]
 8019de6:	2450      	movs	r4, #80	@ 0x50
 8019de8:	193b      	adds	r3, r7, r4
 8019dea:	0592      	lsls	r2, r2, #22
 8019dec:	0d92      	lsrs	r2, r2, #22
 8019dee:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019df0:	193b      	adds	r3, r7, r4
 8019df2:	881b      	ldrh	r3, [r3, #0]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d02e      	beq.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	6818      	ldr	r0, [r3, #0]
 8019dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dfe:	6959      	ldr	r1, [r3, #20]
 8019e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e02:	891a      	ldrh	r2, [r3, #8]
 8019e04:	193b      	adds	r3, r7, r4
 8019e06:	881b      	ldrh	r3, [r3, #0]
 8019e08:	f007 f896 	bl	8020f38 <USB_ReadPMA>
 8019e0c:	e023      	b.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	2250      	movs	r2, #80	@ 0x50
 8019e14:	5a9b      	ldrh	r3, [r3, r2]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	001a      	movs	r2, r3
 8019e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e1c:	781b      	ldrb	r3, [r3, #0]
 8019e1e:	00db      	lsls	r3, r3, #3
 8019e20:	18d2      	adds	r2, r2, r3
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	18d3      	adds	r3, r2, r3
 8019e28:	4a79      	ldr	r2, [pc, #484]	@ (801a010 <PCD_EP_ISR_Handler+0x6d8>)
 8019e2a:	4694      	mov	ip, r2
 8019e2c:	4463      	add	r3, ip
 8019e2e:	881a      	ldrh	r2, [r3, #0]
 8019e30:	2450      	movs	r4, #80	@ 0x50
 8019e32:	193b      	adds	r3, r7, r4
 8019e34:	0592      	lsls	r2, r2, #22
 8019e36:	0d92      	lsrs	r2, r2, #22
 8019e38:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019e3a:	193b      	adds	r3, r7, r4
 8019e3c:	881b      	ldrh	r3, [r3, #0]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d009      	beq.n	8019e56 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	6818      	ldr	r0, [r3, #0]
 8019e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e48:	6959      	ldr	r1, [r3, #20]
 8019e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e4c:	895a      	ldrh	r2, [r3, #10]
 8019e4e:	193b      	adds	r3, r7, r4
 8019e50:	881b      	ldrh	r3, [r3, #0]
 8019e52:	f007 f871 	bl	8020f38 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8019e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e58:	69da      	ldr	r2, [r3, #28]
 8019e5a:	2150      	movs	r1, #80	@ 0x50
 8019e5c:	187b      	adds	r3, r7, r1
 8019e5e:	881b      	ldrh	r3, [r3, #0]
 8019e60:	18d2      	adds	r2, r2, r3
 8019e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8019e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e68:	695a      	ldr	r2, [r3, #20]
 8019e6a:	187b      	adds	r3, r7, r1
 8019e6c:	881b      	ldrh	r3, [r3, #0]
 8019e6e:	18d2      	adds	r2, r2, r3
 8019e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8019e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e76:	699b      	ldr	r3, [r3, #24]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d005      	beq.n	8019e88 <PCD_EP_ISR_Handler+0x550>
 8019e7c:	187b      	adds	r3, r7, r1
 8019e7e:	881a      	ldrh	r2, [r3, #0]
 8019e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e82:	691b      	ldr	r3, [r3, #16]
 8019e84:	429a      	cmp	r2, r3
 8019e86:	d207      	bcs.n	8019e98 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8019e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019e8a:	781a      	ldrb	r2, [r3, #0]
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	0011      	movs	r1, r2
 8019e90:	0018      	movs	r0, r3
 8019e92:	f009 f86c 	bl	8022f6e <HAL_PCD_DataOutStageCallback>
 8019e96:	e006      	b.n	8019ea6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019e9e:	0011      	movs	r1, r2
 8019ea0:	0018      	movs	r0, r3
 8019ea2:	f005 fd8d 	bl	801f9c0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8019ea6:	244a      	movs	r4, #74	@ 0x4a
 8019ea8:	193b      	adds	r3, r7, r4
 8019eaa:	881b      	ldrh	r3, [r3, #0]
 8019eac:	2280      	movs	r2, #128	@ 0x80
 8019eae:	4013      	ands	r3, r2
 8019eb0:	d100      	bne.n	8019eb4 <PCD_EP_ISR_Handler+0x57c>
 8019eb2:	e133      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8019eb4:	204d      	movs	r0, #77	@ 0x4d
 8019eb6:	183b      	adds	r3, r7, r0
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	1c5a      	adds	r2, r3, #1
 8019ebc:	0013      	movs	r3, r2
 8019ebe:	009b      	lsls	r3, r3, #2
 8019ec0:	189b      	adds	r3, r3, r2
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	687a      	ldr	r2, [r7, #4]
 8019ec6:	18d3      	adds	r3, r2, r3
 8019ec8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	001a      	movs	r2, r3
 8019ed0:	183b      	adds	r3, r7, r0
 8019ed2:	781b      	ldrb	r3, [r3, #0]
 8019ed4:	009b      	lsls	r3, r3, #2
 8019ed6:	18d3      	adds	r3, r2, r3
 8019ed8:	881b      	ldrh	r3, [r3, #0]
 8019eda:	b29a      	uxth	r2, r3
 8019edc:	2542      	movs	r5, #66	@ 0x42
 8019ede:	197b      	adds	r3, r7, r5
 8019ee0:	494f      	ldr	r1, [pc, #316]	@ (801a020 <PCD_EP_ISR_Handler+0x6e8>)
 8019ee2:	400a      	ands	r2, r1
 8019ee4:	801a      	strh	r2, [r3, #0]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	001a      	movs	r2, r3
 8019eec:	183b      	adds	r3, r7, r0
 8019eee:	781b      	ldrb	r3, [r3, #0]
 8019ef0:	009b      	lsls	r3, r3, #2
 8019ef2:	18d3      	adds	r3, r2, r3
 8019ef4:	197a      	adds	r2, r7, r5
 8019ef6:	8812      	ldrh	r2, [r2, #0]
 8019ef8:	494a      	ldr	r1, [pc, #296]	@ (801a024 <PCD_EP_ISR_Handler+0x6ec>)
 8019efa:	430a      	orrs	r2, r1
 8019efc:	b292      	uxth	r2, r2
 8019efe:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8019f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f02:	78db      	ldrb	r3, [r3, #3]
 8019f04:	2b01      	cmp	r3, #1
 8019f06:	d000      	beq.n	8019f0a <PCD_EP_ISR_Handler+0x5d2>
 8019f08:	e0af      	b.n	801a06a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8019f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8019f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f12:	7b1b      	ldrb	r3, [r3, #12]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d100      	bne.n	8019f1a <PCD_EP_ISR_Handler+0x5e2>
 8019f18:	e09f      	b.n	801a05a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019f1a:	193b      	adds	r3, r7, r4
 8019f1c:	881b      	ldrh	r3, [r3, #0]
 8019f1e:	2240      	movs	r2, #64	@ 0x40
 8019f20:	4013      	ands	r3, r2
 8019f22:	d046      	beq.n	8019fb2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f26:	785b      	ldrb	r3, [r3, #1]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d125      	bne.n	8019f78 <PCD_EP_ISR_Handler+0x640>
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	2250      	movs	r2, #80	@ 0x50
 8019f38:	5a9b      	ldrh	r3, [r3, r2]
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	001a      	movs	r2, r3
 8019f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f40:	189b      	adds	r3, r3, r2
 8019f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f46:	781b      	ldrb	r3, [r3, #0]
 8019f48:	00da      	lsls	r2, r3, #3
 8019f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f4c:	18d3      	adds	r3, r2, r3
 8019f4e:	4a33      	ldr	r2, [pc, #204]	@ (801a01c <PCD_EP_ISR_Handler+0x6e4>)
 8019f50:	4694      	mov	ip, r2
 8019f52:	4463      	add	r3, ip
 8019f54:	623b      	str	r3, [r7, #32]
 8019f56:	6a3b      	ldr	r3, [r7, #32]
 8019f58:	881b      	ldrh	r3, [r3, #0]
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	059b      	lsls	r3, r3, #22
 8019f5e:	0d9b      	lsrs	r3, r3, #22
 8019f60:	b29a      	uxth	r2, r3
 8019f62:	6a3b      	ldr	r3, [r7, #32]
 8019f64:	801a      	strh	r2, [r3, #0]
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	881b      	ldrh	r3, [r3, #0]
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	4a2d      	ldr	r2, [pc, #180]	@ (801a024 <PCD_EP_ISR_Handler+0x6ec>)
 8019f6e:	4313      	orrs	r3, r2
 8019f70:	b29a      	uxth	r2, r3
 8019f72:	6a3b      	ldr	r3, [r7, #32]
 8019f74:	801a      	strh	r2, [r3, #0]
 8019f76:	e070      	b.n	801a05a <PCD_EP_ISR_Handler+0x722>
 8019f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f7a:	785b      	ldrb	r3, [r3, #1]
 8019f7c:	2b01      	cmp	r3, #1
 8019f7e:	d16c      	bne.n	801a05a <PCD_EP_ISR_Handler+0x722>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	2250      	movs	r2, #80	@ 0x50
 8019f8c:	5a9b      	ldrh	r3, [r3, r2]
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	001a      	movs	r2, r3
 8019f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f94:	189b      	adds	r3, r3, r2
 8019f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f9a:	781b      	ldrb	r3, [r3, #0]
 8019f9c:	00da      	lsls	r2, r3, #3
 8019f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fa0:	18d3      	adds	r3, r2, r3
 8019fa2:	4a1e      	ldr	r2, [pc, #120]	@ (801a01c <PCD_EP_ISR_Handler+0x6e4>)
 8019fa4:	4694      	mov	ip, r2
 8019fa6:	4463      	add	r3, ip
 8019fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fac:	2200      	movs	r2, #0
 8019fae:	801a      	strh	r2, [r3, #0]
 8019fb0:	e053      	b.n	801a05a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fba:	785b      	ldrb	r3, [r3, #1]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d133      	bne.n	801a028 <PCD_EP_ISR_Handler+0x6f0>
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	2250      	movs	r2, #80	@ 0x50
 8019fcc:	5a9b      	ldrh	r3, [r3, r2]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	001a      	movs	r2, r3
 8019fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fd4:	189b      	adds	r3, r3, r2
 8019fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fda:	781b      	ldrb	r3, [r3, #0]
 8019fdc:	00da      	lsls	r2, r3, #3
 8019fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fe0:	18d3      	adds	r3, r2, r3
 8019fe2:	4a0b      	ldr	r2, [pc, #44]	@ (801a010 <PCD_EP_ISR_Handler+0x6d8>)
 8019fe4:	4694      	mov	ip, r2
 8019fe6:	4463      	add	r3, ip
 8019fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fec:	881b      	ldrh	r3, [r3, #0]
 8019fee:	b29b      	uxth	r3, r3
 8019ff0:	059b      	lsls	r3, r3, #22
 8019ff2:	0d9b      	lsrs	r3, r3, #22
 8019ff4:	b29a      	uxth	r2, r3
 8019ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ff8:	801a      	strh	r2, [r3, #0]
 8019ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ffc:	881b      	ldrh	r3, [r3, #0]
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	4a08      	ldr	r2, [pc, #32]	@ (801a024 <PCD_EP_ISR_Handler+0x6ec>)
 801a002:	4313      	orrs	r3, r2
 801a004:	b29a      	uxth	r2, r3
 801a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a008:	801a      	strh	r2, [r3, #0]
 801a00a:	e026      	b.n	801a05a <PCD_EP_ISR_Handler+0x722>
 801a00c:	00000f8f 	.word	0x00000f8f
 801a010:	00000406 	.word	0x00000406
 801a014:	ffff8f8f 	.word	0xffff8f8f
 801a018:	ffff80c0 	.word	0xffff80c0
 801a01c:	00000402 	.word	0x00000402
 801a020:	ffff8f0f 	.word	0xffff8f0f
 801a024:	ffff8000 	.word	0xffff8000
 801a028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a02a:	785b      	ldrb	r3, [r3, #1]
 801a02c:	2b01      	cmp	r3, #1
 801a02e:	d114      	bne.n	801a05a <PCD_EP_ISR_Handler+0x722>
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	2250      	movs	r2, #80	@ 0x50
 801a036:	5a9b      	ldrh	r3, [r3, r2]
 801a038:	b29b      	uxth	r3, r3
 801a03a:	001a      	movs	r2, r3
 801a03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a03e:	189b      	adds	r3, r3, r2
 801a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a044:	781b      	ldrb	r3, [r3, #0]
 801a046:	00da      	lsls	r2, r3, #3
 801a048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a04a:	18d3      	adds	r3, r2, r3
 801a04c:	4a3b      	ldr	r2, [pc, #236]	@ (801a13c <PCD_EP_ISR_Handler+0x804>)
 801a04e:	4694      	mov	ip, r2
 801a050:	4463      	add	r3, ip
 801a052:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a056:	2200      	movs	r2, #0
 801a058:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05c:	781a      	ldrb	r2, [r3, #0]
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	0011      	movs	r1, r2
 801a062:	0018      	movs	r0, r3
 801a064:	f008 ffa4 	bl	8022fb0 <HAL_PCD_DataInStageCallback>
 801a068:	e058      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a06a:	234a      	movs	r3, #74	@ 0x4a
 801a06c:	18fb      	adds	r3, r7, r3
 801a06e:	881a      	ldrh	r2, [r3, #0]
 801a070:	2380      	movs	r3, #128	@ 0x80
 801a072:	005b      	lsls	r3, r3, #1
 801a074:	4013      	ands	r3, r2
 801a076:	d149      	bne.n	801a10c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	2250      	movs	r2, #80	@ 0x50
 801a07e:	5a9b      	ldrh	r3, [r3, r2]
 801a080:	b29b      	uxth	r3, r3
 801a082:	001a      	movs	r2, r3
 801a084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	00db      	lsls	r3, r3, #3
 801a08a:	18d2      	adds	r2, r2, r3
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	18d3      	adds	r3, r2, r3
 801a092:	4a2b      	ldr	r2, [pc, #172]	@ (801a140 <PCD_EP_ISR_Handler+0x808>)
 801a094:	4694      	mov	ip, r2
 801a096:	4463      	add	r3, ip
 801a098:	881a      	ldrh	r2, [r3, #0]
 801a09a:	2140      	movs	r1, #64	@ 0x40
 801a09c:	187b      	adds	r3, r7, r1
 801a09e:	0592      	lsls	r2, r2, #22
 801a0a0:	0d92      	lsrs	r2, r2, #22
 801a0a2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a0a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0a6:	699a      	ldr	r2, [r3, #24]
 801a0a8:	187b      	adds	r3, r7, r1
 801a0aa:	881b      	ldrh	r3, [r3, #0]
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d907      	bls.n	801a0c0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0b2:	699a      	ldr	r2, [r3, #24]
 801a0b4:	187b      	adds	r3, r7, r1
 801a0b6:	881b      	ldrh	r3, [r3, #0]
 801a0b8:	1ad2      	subs	r2, r2, r3
 801a0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0bc:	619a      	str	r2, [r3, #24]
 801a0be:	e002      	b.n	801a0c6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c8:	699b      	ldr	r3, [r3, #24]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d107      	bne.n	801a0de <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0d0:	781a      	ldrb	r2, [r3, #0]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	0011      	movs	r1, r2
 801a0d6:	0018      	movs	r0, r3
 801a0d8:	f008 ff6a 	bl	8022fb0 <HAL_PCD_DataInStageCallback>
 801a0dc:	e01e      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0e0:	695a      	ldr	r2, [r3, #20]
 801a0e2:	2140      	movs	r1, #64	@ 0x40
 801a0e4:	187b      	adds	r3, r7, r1
 801a0e6:	881b      	ldrh	r3, [r3, #0]
 801a0e8:	18d2      	adds	r2, r2, r3
 801a0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a0ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0f0:	69da      	ldr	r2, [r3, #28]
 801a0f2:	187b      	adds	r3, r7, r1
 801a0f4:	881b      	ldrh	r3, [r3, #0]
 801a0f6:	18d2      	adds	r2, r2, r3
 801a0f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a102:	0011      	movs	r1, r2
 801a104:	0018      	movs	r0, r3
 801a106:	f005 fc5b 	bl	801f9c0 <USB_EPStartXfer>
 801a10a:	e007      	b.n	801a11c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a10c:	234a      	movs	r3, #74	@ 0x4a
 801a10e:	18fb      	adds	r3, r7, r3
 801a110:	881a      	ldrh	r2, [r3, #0]
 801a112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	0018      	movs	r0, r3
 801a118:	f000 f930 	bl	801a37c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	2244      	movs	r2, #68	@ 0x44
 801a122:	5a9b      	ldrh	r3, [r3, r2]
 801a124:	b29b      	uxth	r3, r3
 801a126:	b21b      	sxth	r3, r3
 801a128:	2b00      	cmp	r3, #0
 801a12a:	da01      	bge.n	801a130 <PCD_EP_ISR_Handler+0x7f8>
 801a12c:	f7ff fc0a 	bl	8019944 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a130:	2300      	movs	r3, #0
}
 801a132:	0018      	movs	r0, r3
 801a134:	46bd      	mov	sp, r7
 801a136:	b016      	add	sp, #88	@ 0x58
 801a138:	bdb0      	pop	{r4, r5, r7, pc}
 801a13a:	46c0      	nop			@ (mov r8, r8)
 801a13c:	00000406 	.word	0x00000406
 801a140:	00000402 	.word	0x00000402

0801a144 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a144:	b590      	push	{r4, r7, lr}
 801a146:	b089      	sub	sp, #36	@ 0x24
 801a148:	af00      	add	r7, sp, #0
 801a14a:	60f8      	str	r0, [r7, #12]
 801a14c:	60b9      	str	r1, [r7, #8]
 801a14e:	1dbb      	adds	r3, r7, #6
 801a150:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a152:	1dbb      	adds	r3, r7, #6
 801a154:	881a      	ldrh	r2, [r3, #0]
 801a156:	2380      	movs	r3, #128	@ 0x80
 801a158:	01db      	lsls	r3, r3, #7
 801a15a:	4013      	ands	r3, r2
 801a15c:	d100      	bne.n	801a160 <HAL_PCD_EP_DB_Receive+0x1c>
 801a15e:	e07d      	b.n	801a25c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2250      	movs	r2, #80	@ 0x50
 801a166:	5a9b      	ldrh	r3, [r3, r2]
 801a168:	b29b      	uxth	r3, r3
 801a16a:	001a      	movs	r2, r3
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	00db      	lsls	r3, r3, #3
 801a172:	18d2      	adds	r2, r2, r3
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	18d3      	adds	r3, r2, r3
 801a17a:	4a7a      	ldr	r2, [pc, #488]	@ (801a364 <HAL_PCD_EP_DB_Receive+0x220>)
 801a17c:	4694      	mov	ip, r2
 801a17e:	4463      	add	r3, ip
 801a180:	881a      	ldrh	r2, [r3, #0]
 801a182:	211a      	movs	r1, #26
 801a184:	187b      	adds	r3, r7, r1
 801a186:	0592      	lsls	r2, r2, #22
 801a188:	0d92      	lsrs	r2, r2, #22
 801a18a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	699a      	ldr	r2, [r3, #24]
 801a190:	187b      	adds	r3, r7, r1
 801a192:	881b      	ldrh	r3, [r3, #0]
 801a194:	429a      	cmp	r2, r3
 801a196:	d307      	bcc.n	801a1a8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	699a      	ldr	r2, [r3, #24]
 801a19c:	187b      	adds	r3, r7, r1
 801a19e:	881b      	ldrh	r3, [r3, #0]
 801a1a0:	1ad2      	subs	r2, r2, r3
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	619a      	str	r2, [r3, #24]
 801a1a6:	e002      	b.n	801a1ae <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a1a8:	68bb      	ldr	r3, [r7, #8]
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	699b      	ldr	r3, [r3, #24]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d121      	bne.n	801a1fa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	001a      	movs	r2, r3
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	781b      	ldrb	r3, [r3, #0]
 801a1c0:	009b      	lsls	r3, r3, #2
 801a1c2:	18d3      	adds	r3, r2, r3
 801a1c4:	881b      	ldrh	r3, [r3, #0]
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	2018      	movs	r0, #24
 801a1ca:	183b      	adds	r3, r7, r0
 801a1cc:	4966      	ldr	r1, [pc, #408]	@ (801a368 <HAL_PCD_EP_DB_Receive+0x224>)
 801a1ce:	400a      	ands	r2, r1
 801a1d0:	801a      	strh	r2, [r3, #0]
 801a1d2:	183b      	adds	r3, r7, r0
 801a1d4:	183a      	adds	r2, r7, r0
 801a1d6:	8812      	ldrh	r2, [r2, #0]
 801a1d8:	2180      	movs	r1, #128	@ 0x80
 801a1da:	0189      	lsls	r1, r1, #6
 801a1dc:	404a      	eors	r2, r1
 801a1de:	801a      	strh	r2, [r3, #0]
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	001a      	movs	r2, r3
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	781b      	ldrb	r3, [r3, #0]
 801a1ea:	009b      	lsls	r3, r3, #2
 801a1ec:	18d3      	adds	r3, r2, r3
 801a1ee:	183a      	adds	r2, r7, r0
 801a1f0:	8812      	ldrh	r2, [r2, #0]
 801a1f2:	495e      	ldr	r1, [pc, #376]	@ (801a36c <HAL_PCD_EP_DB_Receive+0x228>)
 801a1f4:	430a      	orrs	r2, r1
 801a1f6:	b292      	uxth	r2, r2
 801a1f8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a1fa:	1dbb      	adds	r3, r7, #6
 801a1fc:	881b      	ldrh	r3, [r3, #0]
 801a1fe:	2240      	movs	r2, #64	@ 0x40
 801a200:	4013      	ands	r3, r2
 801a202:	d01a      	beq.n	801a23a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	001a      	movs	r2, r3
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	781b      	ldrb	r3, [r3, #0]
 801a20e:	009b      	lsls	r3, r3, #2
 801a210:	18d3      	adds	r3, r2, r3
 801a212:	881b      	ldrh	r3, [r3, #0]
 801a214:	b29a      	uxth	r2, r3
 801a216:	2016      	movs	r0, #22
 801a218:	183b      	adds	r3, r7, r0
 801a21a:	4955      	ldr	r1, [pc, #340]	@ (801a370 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a21c:	400a      	ands	r2, r1
 801a21e:	801a      	strh	r2, [r3, #0]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	001a      	movs	r2, r3
 801a226:	68bb      	ldr	r3, [r7, #8]
 801a228:	781b      	ldrb	r3, [r3, #0]
 801a22a:	009b      	lsls	r3, r3, #2
 801a22c:	18d3      	adds	r3, r2, r3
 801a22e:	183a      	adds	r2, r7, r0
 801a230:	8812      	ldrh	r2, [r2, #0]
 801a232:	4950      	ldr	r1, [pc, #320]	@ (801a374 <HAL_PCD_EP_DB_Receive+0x230>)
 801a234:	430a      	orrs	r2, r1
 801a236:	b292      	uxth	r2, r2
 801a238:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a23a:	241a      	movs	r4, #26
 801a23c:	193b      	adds	r3, r7, r4
 801a23e:	881b      	ldrh	r3, [r3, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d100      	bne.n	801a246 <HAL_PCD_EP_DB_Receive+0x102>
 801a244:	e086      	b.n	801a354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	6818      	ldr	r0, [r3, #0]
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	6959      	ldr	r1, [r3, #20]
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	891a      	ldrh	r2, [r3, #8]
 801a252:	193b      	adds	r3, r7, r4
 801a254:	881b      	ldrh	r3, [r3, #0]
 801a256:	f006 fe6f 	bl	8020f38 <USB_ReadPMA>
 801a25a:	e07b      	b.n	801a354 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	2250      	movs	r2, #80	@ 0x50
 801a262:	5a9b      	ldrh	r3, [r3, r2]
 801a264:	b29b      	uxth	r3, r3
 801a266:	001a      	movs	r2, r3
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	00db      	lsls	r3, r3, #3
 801a26e:	18d2      	adds	r2, r2, r3
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	18d3      	adds	r3, r2, r3
 801a276:	4a40      	ldr	r2, [pc, #256]	@ (801a378 <HAL_PCD_EP_DB_Receive+0x234>)
 801a278:	4694      	mov	ip, r2
 801a27a:	4463      	add	r3, ip
 801a27c:	881a      	ldrh	r2, [r3, #0]
 801a27e:	211a      	movs	r1, #26
 801a280:	187b      	adds	r3, r7, r1
 801a282:	0592      	lsls	r2, r2, #22
 801a284:	0d92      	lsrs	r2, r2, #22
 801a286:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	699a      	ldr	r2, [r3, #24]
 801a28c:	187b      	adds	r3, r7, r1
 801a28e:	881b      	ldrh	r3, [r3, #0]
 801a290:	429a      	cmp	r2, r3
 801a292:	d307      	bcc.n	801a2a4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a294:	68bb      	ldr	r3, [r7, #8]
 801a296:	699a      	ldr	r2, [r3, #24]
 801a298:	187b      	adds	r3, r7, r1
 801a29a:	881b      	ldrh	r3, [r3, #0]
 801a29c:	1ad2      	subs	r2, r2, r3
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	619a      	str	r2, [r3, #24]
 801a2a2:	e002      	b.n	801a2aa <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a2a4:	68bb      	ldr	r3, [r7, #8]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	699b      	ldr	r3, [r3, #24]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d121      	bne.n	801a2f6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	001a      	movs	r2, r3
 801a2b8:	68bb      	ldr	r3, [r7, #8]
 801a2ba:	781b      	ldrb	r3, [r3, #0]
 801a2bc:	009b      	lsls	r3, r3, #2
 801a2be:	18d3      	adds	r3, r2, r3
 801a2c0:	881b      	ldrh	r3, [r3, #0]
 801a2c2:	b29a      	uxth	r2, r3
 801a2c4:	201e      	movs	r0, #30
 801a2c6:	183b      	adds	r3, r7, r0
 801a2c8:	4927      	ldr	r1, [pc, #156]	@ (801a368 <HAL_PCD_EP_DB_Receive+0x224>)
 801a2ca:	400a      	ands	r2, r1
 801a2cc:	801a      	strh	r2, [r3, #0]
 801a2ce:	183b      	adds	r3, r7, r0
 801a2d0:	183a      	adds	r2, r7, r0
 801a2d2:	8812      	ldrh	r2, [r2, #0]
 801a2d4:	2180      	movs	r1, #128	@ 0x80
 801a2d6:	0189      	lsls	r1, r1, #6
 801a2d8:	404a      	eors	r2, r1
 801a2da:	801a      	strh	r2, [r3, #0]
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	001a      	movs	r2, r3
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	781b      	ldrb	r3, [r3, #0]
 801a2e6:	009b      	lsls	r3, r3, #2
 801a2e8:	18d3      	adds	r3, r2, r3
 801a2ea:	183a      	adds	r2, r7, r0
 801a2ec:	8812      	ldrh	r2, [r2, #0]
 801a2ee:	491f      	ldr	r1, [pc, #124]	@ (801a36c <HAL_PCD_EP_DB_Receive+0x228>)
 801a2f0:	430a      	orrs	r2, r1
 801a2f2:	b292      	uxth	r2, r2
 801a2f4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a2f6:	1dbb      	adds	r3, r7, #6
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	2240      	movs	r2, #64	@ 0x40
 801a2fc:	4013      	ands	r3, r2
 801a2fe:	d11a      	bne.n	801a336 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	001a      	movs	r2, r3
 801a306:	68bb      	ldr	r3, [r7, #8]
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	009b      	lsls	r3, r3, #2
 801a30c:	18d3      	adds	r3, r2, r3
 801a30e:	881b      	ldrh	r3, [r3, #0]
 801a310:	b29a      	uxth	r2, r3
 801a312:	201c      	movs	r0, #28
 801a314:	183b      	adds	r3, r7, r0
 801a316:	4916      	ldr	r1, [pc, #88]	@ (801a370 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a318:	400a      	ands	r2, r1
 801a31a:	801a      	strh	r2, [r3, #0]
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	001a      	movs	r2, r3
 801a322:	68bb      	ldr	r3, [r7, #8]
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	009b      	lsls	r3, r3, #2
 801a328:	18d3      	adds	r3, r2, r3
 801a32a:	183a      	adds	r2, r7, r0
 801a32c:	8812      	ldrh	r2, [r2, #0]
 801a32e:	4911      	ldr	r1, [pc, #68]	@ (801a374 <HAL_PCD_EP_DB_Receive+0x230>)
 801a330:	430a      	orrs	r2, r1
 801a332:	b292      	uxth	r2, r2
 801a334:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a336:	241a      	movs	r4, #26
 801a338:	193b      	adds	r3, r7, r4
 801a33a:	881b      	ldrh	r3, [r3, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d009      	beq.n	801a354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	6818      	ldr	r0, [r3, #0]
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	6959      	ldr	r1, [r3, #20]
 801a348:	68bb      	ldr	r3, [r7, #8]
 801a34a:	895a      	ldrh	r2, [r3, #10]
 801a34c:	193b      	adds	r3, r7, r4
 801a34e:	881b      	ldrh	r3, [r3, #0]
 801a350:	f006 fdf2 	bl	8020f38 <USB_ReadPMA>
    }
  }

  return count;
 801a354:	231a      	movs	r3, #26
 801a356:	18fb      	adds	r3, r7, r3
 801a358:	881b      	ldrh	r3, [r3, #0]
}
 801a35a:	0018      	movs	r0, r3
 801a35c:	46bd      	mov	sp, r7
 801a35e:	b009      	add	sp, #36	@ 0x24
 801a360:	bd90      	pop	{r4, r7, pc}
 801a362:	46c0      	nop			@ (mov r8, r8)
 801a364:	00000402 	.word	0x00000402
 801a368:	ffffbf8f 	.word	0xffffbf8f
 801a36c:	ffff8080 	.word	0xffff8080
 801a370:	ffff8f8f 	.word	0xffff8f8f
 801a374:	ffff80c0 	.word	0xffff80c0
 801a378:	00000406 	.word	0x00000406

0801a37c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b0a4      	sub	sp, #144	@ 0x90
 801a380:	af00      	add	r7, sp, #0
 801a382:	60f8      	str	r0, [r7, #12]
 801a384:	60b9      	str	r1, [r7, #8]
 801a386:	1dbb      	adds	r3, r7, #6
 801a388:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a38a:	1dbb      	adds	r3, r7, #6
 801a38c:	881b      	ldrh	r3, [r3, #0]
 801a38e:	2240      	movs	r2, #64	@ 0x40
 801a390:	4013      	ands	r3, r2
 801a392:	d100      	bne.n	801a396 <HAL_PCD_EP_DB_Transmit+0x1a>
 801a394:	e1e4      	b.n	801a760 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	2250      	movs	r2, #80	@ 0x50
 801a39c:	5a9b      	ldrh	r3, [r3, r2]
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	001a      	movs	r2, r3
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	781b      	ldrb	r3, [r3, #0]
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	18d2      	adds	r2, r2, r3
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	18d3      	adds	r3, r2, r3
 801a3b0:	4ad0      	ldr	r2, [pc, #832]	@ (801a6f4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a3b2:	4694      	mov	ip, r2
 801a3b4:	4463      	add	r3, ip
 801a3b6:	881a      	ldrh	r2, [r3, #0]
 801a3b8:	2186      	movs	r1, #134	@ 0x86
 801a3ba:	187b      	adds	r3, r7, r1
 801a3bc:	0592      	lsls	r2, r2, #22
 801a3be:	0d92      	lsrs	r2, r2, #22
 801a3c0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a3c2:	68bb      	ldr	r3, [r7, #8]
 801a3c4:	699a      	ldr	r2, [r3, #24]
 801a3c6:	187b      	adds	r3, r7, r1
 801a3c8:	881b      	ldrh	r3, [r3, #0]
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d907      	bls.n	801a3de <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a3ce:	68bb      	ldr	r3, [r7, #8]
 801a3d0:	699a      	ldr	r2, [r3, #24]
 801a3d2:	187b      	adds	r3, r7, r1
 801a3d4:	881b      	ldrh	r3, [r3, #0]
 801a3d6:	1ad2      	subs	r2, r2, r3
 801a3d8:	68bb      	ldr	r3, [r7, #8]
 801a3da:	619a      	str	r2, [r3, #24]
 801a3dc:	e002      	b.n	801a3e4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	699b      	ldr	r3, [r3, #24]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d000      	beq.n	801a3ee <HAL_PCD_EP_DB_Transmit+0x72>
 801a3ec:	e0b5      	b.n	801a55a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a3ee:	68bb      	ldr	r3, [r7, #8]
 801a3f0:	785b      	ldrb	r3, [r3, #1]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d125      	bne.n	801a442 <HAL_PCD_EP_DB_Transmit+0xc6>
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2250      	movs	r2, #80	@ 0x50
 801a402:	5a9b      	ldrh	r3, [r3, r2]
 801a404:	b29b      	uxth	r3, r3
 801a406:	001a      	movs	r2, r3
 801a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40a:	189b      	adds	r3, r3, r2
 801a40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	00da      	lsls	r2, r3, #3
 801a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a416:	18d3      	adds	r3, r2, r3
 801a418:	4ab6      	ldr	r2, [pc, #728]	@ (801a6f4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a41a:	4694      	mov	ip, r2
 801a41c:	4463      	add	r3, ip
 801a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a422:	881b      	ldrh	r3, [r3, #0]
 801a424:	b29b      	uxth	r3, r3
 801a426:	059b      	lsls	r3, r3, #22
 801a428:	0d9b      	lsrs	r3, r3, #22
 801a42a:	b29a      	uxth	r2, r3
 801a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a42e:	801a      	strh	r2, [r3, #0]
 801a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a432:	881b      	ldrh	r3, [r3, #0]
 801a434:	b29b      	uxth	r3, r3
 801a436:	4ab0      	ldr	r2, [pc, #704]	@ (801a6f8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a438:	4313      	orrs	r3, r2
 801a43a:	b29a      	uxth	r2, r3
 801a43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a43e:	801a      	strh	r2, [r3, #0]
 801a440:	e01b      	b.n	801a47a <HAL_PCD_EP_DB_Transmit+0xfe>
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	785b      	ldrb	r3, [r3, #1]
 801a446:	2b01      	cmp	r3, #1
 801a448:	d117      	bne.n	801a47a <HAL_PCD_EP_DB_Transmit+0xfe>
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	2250      	movs	r2, #80	@ 0x50
 801a456:	5a9b      	ldrh	r3, [r3, r2]
 801a458:	b29b      	uxth	r3, r3
 801a45a:	001a      	movs	r2, r3
 801a45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a45e:	189b      	adds	r3, r3, r2
 801a460:	637b      	str	r3, [r7, #52]	@ 0x34
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	781b      	ldrb	r3, [r3, #0]
 801a466:	00da      	lsls	r2, r3, #3
 801a468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a46a:	18d3      	adds	r3, r2, r3
 801a46c:	4aa1      	ldr	r2, [pc, #644]	@ (801a6f4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a46e:	4694      	mov	ip, r2
 801a470:	4463      	add	r3, ip
 801a472:	633b      	str	r3, [r7, #48]	@ 0x30
 801a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a476:	2200      	movs	r2, #0
 801a478:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a480:	68bb      	ldr	r3, [r7, #8]
 801a482:	785b      	ldrb	r3, [r3, #1]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d125      	bne.n	801a4d4 <HAL_PCD_EP_DB_Transmit+0x158>
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	61fb      	str	r3, [r7, #28]
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	2250      	movs	r2, #80	@ 0x50
 801a494:	5a9b      	ldrh	r3, [r3, r2]
 801a496:	b29b      	uxth	r3, r3
 801a498:	001a      	movs	r2, r3
 801a49a:	69fb      	ldr	r3, [r7, #28]
 801a49c:	189b      	adds	r3, r3, r2
 801a49e:	61fb      	str	r3, [r7, #28]
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	00da      	lsls	r2, r3, #3
 801a4a6:	69fb      	ldr	r3, [r7, #28]
 801a4a8:	18d3      	adds	r3, r2, r3
 801a4aa:	4a94      	ldr	r2, [pc, #592]	@ (801a6fc <HAL_PCD_EP_DB_Transmit+0x380>)
 801a4ac:	4694      	mov	ip, r2
 801a4ae:	4463      	add	r3, ip
 801a4b0:	61bb      	str	r3, [r7, #24]
 801a4b2:	69bb      	ldr	r3, [r7, #24]
 801a4b4:	881b      	ldrh	r3, [r3, #0]
 801a4b6:	b29b      	uxth	r3, r3
 801a4b8:	059b      	lsls	r3, r3, #22
 801a4ba:	0d9b      	lsrs	r3, r3, #22
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	801a      	strh	r2, [r3, #0]
 801a4c2:	69bb      	ldr	r3, [r7, #24]
 801a4c4:	881b      	ldrh	r3, [r3, #0]
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	4a8b      	ldr	r2, [pc, #556]	@ (801a6f8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a4ca:	4313      	orrs	r3, r2
 801a4cc:	b29a      	uxth	r2, r3
 801a4ce:	69bb      	ldr	r3, [r7, #24]
 801a4d0:	801a      	strh	r2, [r3, #0]
 801a4d2:	e018      	b.n	801a506 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	785b      	ldrb	r3, [r3, #1]
 801a4d8:	2b01      	cmp	r3, #1
 801a4da:	d114      	bne.n	801a506 <HAL_PCD_EP_DB_Transmit+0x18a>
 801a4dc:	68fb      	ldr	r3, [r7, #12]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	2250      	movs	r2, #80	@ 0x50
 801a4e2:	5a9b      	ldrh	r3, [r3, r2]
 801a4e4:	b29b      	uxth	r3, r3
 801a4e6:	001a      	movs	r2, r3
 801a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ea:	189b      	adds	r3, r3, r2
 801a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	00da      	lsls	r2, r3, #3
 801a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4f6:	18d3      	adds	r3, r2, r3
 801a4f8:	4a80      	ldr	r2, [pc, #512]	@ (801a6fc <HAL_PCD_EP_DB_Transmit+0x380>)
 801a4fa:	4694      	mov	ip, r2
 801a4fc:	4463      	add	r3, ip
 801a4fe:	623b      	str	r3, [r7, #32]
 801a500:	6a3b      	ldr	r3, [r7, #32]
 801a502:	2200      	movs	r2, #0
 801a504:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	781a      	ldrb	r2, [r3, #0]
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	0011      	movs	r1, r2
 801a50e:	0018      	movs	r0, r3
 801a510:	f008 fd4e 	bl	8022fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a514:	1dbb      	adds	r3, r7, #6
 801a516:	881a      	ldrh	r2, [r3, #0]
 801a518:	2380      	movs	r3, #128	@ 0x80
 801a51a:	01db      	lsls	r3, r3, #7
 801a51c:	4013      	ands	r3, r2
 801a51e:	d100      	bne.n	801a522 <HAL_PCD_EP_DB_Transmit+0x1a6>
 801a520:	e309      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	001a      	movs	r2, r3
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	009b      	lsls	r3, r3, #2
 801a52e:	18d3      	adds	r3, r2, r3
 801a530:	881b      	ldrh	r3, [r3, #0]
 801a532:	b29a      	uxth	r2, r3
 801a534:	2016      	movs	r0, #22
 801a536:	183b      	adds	r3, r7, r0
 801a538:	4971      	ldr	r1, [pc, #452]	@ (801a700 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a53a:	400a      	ands	r2, r1
 801a53c:	801a      	strh	r2, [r3, #0]
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	001a      	movs	r2, r3
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	781b      	ldrb	r3, [r3, #0]
 801a548:	009b      	lsls	r3, r3, #2
 801a54a:	18d3      	adds	r3, r2, r3
 801a54c:	183a      	adds	r2, r7, r0
 801a54e:	8812      	ldrh	r2, [r2, #0]
 801a550:	496c      	ldr	r1, [pc, #432]	@ (801a704 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a552:	430a      	orrs	r2, r1
 801a554:	b292      	uxth	r2, r2
 801a556:	801a      	strh	r2, [r3, #0]
 801a558:	e2ed      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a55a:	1dbb      	adds	r3, r7, #6
 801a55c:	881a      	ldrh	r2, [r3, #0]
 801a55e:	2380      	movs	r3, #128	@ 0x80
 801a560:	01db      	lsls	r3, r3, #7
 801a562:	4013      	ands	r3, r2
 801a564:	d01a      	beq.n	801a59c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	001a      	movs	r2, r3
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	009b      	lsls	r3, r3, #2
 801a572:	18d3      	adds	r3, r2, r3
 801a574:	881b      	ldrh	r3, [r3, #0]
 801a576:	b29a      	uxth	r2, r3
 801a578:	208a      	movs	r0, #138	@ 0x8a
 801a57a:	183b      	adds	r3, r7, r0
 801a57c:	4960      	ldr	r1, [pc, #384]	@ (801a700 <HAL_PCD_EP_DB_Transmit+0x384>)
 801a57e:	400a      	ands	r2, r1
 801a580:	801a      	strh	r2, [r3, #0]
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	001a      	movs	r2, r3
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	781b      	ldrb	r3, [r3, #0]
 801a58c:	009b      	lsls	r3, r3, #2
 801a58e:	18d3      	adds	r3, r2, r3
 801a590:	183a      	adds	r2, r7, r0
 801a592:	8812      	ldrh	r2, [r2, #0]
 801a594:	495b      	ldr	r1, [pc, #364]	@ (801a704 <HAL_PCD_EP_DB_Transmit+0x388>)
 801a596:	430a      	orrs	r2, r1
 801a598:	b292      	uxth	r2, r2
 801a59a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	2224      	movs	r2, #36	@ 0x24
 801a5a0:	5c9b      	ldrb	r3, [r3, r2]
 801a5a2:	2b01      	cmp	r3, #1
 801a5a4:	d000      	beq.n	801a5a8 <HAL_PCD_EP_DB_Transmit+0x22c>
 801a5a6:	e2c6      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a5a8:	68bb      	ldr	r3, [r7, #8]
 801a5aa:	695a      	ldr	r2, [r3, #20]
 801a5ac:	2186      	movs	r1, #134	@ 0x86
 801a5ae:	187b      	adds	r3, r7, r1
 801a5b0:	881b      	ldrh	r3, [r3, #0]
 801a5b2:	18d2      	adds	r2, r2, r3
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a5b8:	68bb      	ldr	r3, [r7, #8]
 801a5ba:	69da      	ldr	r2, [r3, #28]
 801a5bc:	187b      	adds	r3, r7, r1
 801a5be:	881b      	ldrh	r3, [r3, #0]
 801a5c0:	18d2      	adds	r2, r2, r3
 801a5c2:	68bb      	ldr	r3, [r7, #8]
 801a5c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	6a1a      	ldr	r2, [r3, #32]
 801a5ca:	68bb      	ldr	r3, [r7, #8]
 801a5cc:	691b      	ldr	r3, [r3, #16]
 801a5ce:	429a      	cmp	r2, r3
 801a5d0:	d30c      	bcc.n	801a5ec <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	691b      	ldr	r3, [r3, #16]
 801a5d6:	218c      	movs	r1, #140	@ 0x8c
 801a5d8:	187a      	adds	r2, r7, r1
 801a5da:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a5dc:	68bb      	ldr	r3, [r7, #8]
 801a5de:	6a1a      	ldr	r2, [r3, #32]
 801a5e0:	187b      	adds	r3, r7, r1
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	1ad2      	subs	r2, r2, r3
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	621a      	str	r2, [r3, #32]
 801a5ea:	e01a      	b.n	801a622 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801a5ec:	68bb      	ldr	r3, [r7, #8]
 801a5ee:	6a1b      	ldr	r3, [r3, #32]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d10a      	bne.n	801a60a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801a5f4:	2386      	movs	r3, #134	@ 0x86
 801a5f6:	18fb      	adds	r3, r7, r3
 801a5f8:	881b      	ldrh	r3, [r3, #0]
 801a5fa:	228c      	movs	r2, #140	@ 0x8c
 801a5fc:	18ba      	adds	r2, r7, r2
 801a5fe:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a600:	68bb      	ldr	r3, [r7, #8]
 801a602:	2224      	movs	r2, #36	@ 0x24
 801a604:	2100      	movs	r1, #0
 801a606:	5499      	strb	r1, [r3, r2]
 801a608:	e00b      	b.n	801a622 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801a60a:	68bb      	ldr	r3, [r7, #8]
 801a60c:	2224      	movs	r2, #36	@ 0x24
 801a60e:	2100      	movs	r1, #0
 801a610:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801a612:	68bb      	ldr	r3, [r7, #8]
 801a614:	6a1b      	ldr	r3, [r3, #32]
 801a616:	228c      	movs	r2, #140	@ 0x8c
 801a618:	18ba      	adds	r2, r7, r2
 801a61a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	2200      	movs	r2, #0
 801a620:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	785b      	ldrb	r3, [r3, #1]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d000      	beq.n	801a62c <HAL_PCD_EP_DB_Transmit+0x2b0>
 801a62a:	e06d      	b.n	801a708 <HAL_PCD_EP_DB_Transmit+0x38c>
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2250      	movs	r2, #80	@ 0x50
 801a638:	5a9b      	ldrh	r3, [r3, r2]
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	001a      	movs	r2, r3
 801a63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a640:	189b      	adds	r3, r3, r2
 801a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	00da      	lsls	r2, r3, #3
 801a64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a64c:	18d3      	adds	r3, r2, r3
 801a64e:	4a29      	ldr	r2, [pc, #164]	@ (801a6f4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801a650:	4694      	mov	ip, r2
 801a652:	4463      	add	r3, ip
 801a654:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a658:	881b      	ldrh	r3, [r3, #0]
 801a65a:	b29b      	uxth	r3, r3
 801a65c:	059b      	lsls	r3, r3, #22
 801a65e:	0d9b      	lsrs	r3, r3, #22
 801a660:	b29a      	uxth	r2, r3
 801a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a664:	801a      	strh	r2, [r3, #0]
 801a666:	228c      	movs	r2, #140	@ 0x8c
 801a668:	18bb      	adds	r3, r7, r2
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a66e:	d91a      	bls.n	801a6a6 <HAL_PCD_EP_DB_Transmit+0x32a>
 801a670:	18bb      	adds	r3, r7, r2
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	095b      	lsrs	r3, r3, #5
 801a676:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a678:	18bb      	adds	r3, r7, r2
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	221f      	movs	r2, #31
 801a67e:	4013      	ands	r3, r2
 801a680:	d102      	bne.n	801a688 <HAL_PCD_EP_DB_Transmit+0x30c>
 801a682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a684:	3b01      	subs	r3, #1
 801a686:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a68a:	881b      	ldrh	r3, [r3, #0]
 801a68c:	b29a      	uxth	r2, r3
 801a68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a690:	b29b      	uxth	r3, r3
 801a692:	029b      	lsls	r3, r3, #10
 801a694:	b29b      	uxth	r3, r3
 801a696:	4313      	orrs	r3, r2
 801a698:	b29b      	uxth	r3, r3
 801a69a:	4a17      	ldr	r2, [pc, #92]	@ (801a6f8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a69c:	4313      	orrs	r3, r2
 801a69e:	b29a      	uxth	r2, r3
 801a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6a2:	801a      	strh	r2, [r3, #0]
 801a6a4:	e04f      	b.n	801a746 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a6a6:	238c      	movs	r3, #140	@ 0x8c
 801a6a8:	18fb      	adds	r3, r7, r3
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d108      	bne.n	801a6c2 <HAL_PCD_EP_DB_Transmit+0x346>
 801a6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6b2:	881b      	ldrh	r3, [r3, #0]
 801a6b4:	b29b      	uxth	r3, r3
 801a6b6:	4a10      	ldr	r2, [pc, #64]	@ (801a6f8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a6b8:	4313      	orrs	r3, r2
 801a6ba:	b29a      	uxth	r2, r3
 801a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6be:	801a      	strh	r2, [r3, #0]
 801a6c0:	e041      	b.n	801a746 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a6c2:	228c      	movs	r2, #140	@ 0x8c
 801a6c4:	18bb      	adds	r3, r7, r2
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	085b      	lsrs	r3, r3, #1
 801a6ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a6cc:	18bb      	adds	r3, r7, r2
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	2201      	movs	r2, #1
 801a6d2:	4013      	ands	r3, r2
 801a6d4:	d002      	beq.n	801a6dc <HAL_PCD_EP_DB_Transmit+0x360>
 801a6d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6d8:	3301      	adds	r3, #1
 801a6da:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6de:	881b      	ldrh	r3, [r3, #0]
 801a6e0:	b29a      	uxth	r2, r3
 801a6e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	029b      	lsls	r3, r3, #10
 801a6e8:	b29b      	uxth	r3, r3
 801a6ea:	4313      	orrs	r3, r2
 801a6ec:	b29a      	uxth	r2, r3
 801a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6f0:	801a      	strh	r2, [r3, #0]
 801a6f2:	e028      	b.n	801a746 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a6f4:	00000402 	.word	0x00000402
 801a6f8:	ffff8000 	.word	0xffff8000
 801a6fc:	00000406 	.word	0x00000406
 801a700:	ffff8f8f 	.word	0xffff8f8f
 801a704:	ffffc080 	.word	0xffffc080
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	785b      	ldrb	r3, [r3, #1]
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d11a      	bne.n	801a746 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	647b      	str	r3, [r7, #68]	@ 0x44
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	2250      	movs	r2, #80	@ 0x50
 801a71c:	5a9b      	ldrh	r3, [r3, r2]
 801a71e:	b29b      	uxth	r3, r3
 801a720:	001a      	movs	r2, r3
 801a722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a724:	189b      	adds	r3, r3, r2
 801a726:	647b      	str	r3, [r7, #68]	@ 0x44
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	781b      	ldrb	r3, [r3, #0]
 801a72c:	00da      	lsls	r2, r3, #3
 801a72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a730:	18d3      	adds	r3, r2, r3
 801a732:	4adb      	ldr	r2, [pc, #876]	@ (801aaa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a734:	4694      	mov	ip, r2
 801a736:	4463      	add	r3, ip
 801a738:	643b      	str	r3, [r7, #64]	@ 0x40
 801a73a:	238c      	movs	r3, #140	@ 0x8c
 801a73c:	18fb      	adds	r3, r7, r3
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	b29a      	uxth	r2, r3
 801a742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a744:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	6818      	ldr	r0, [r3, #0]
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	6959      	ldr	r1, [r3, #20]
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	891a      	ldrh	r2, [r3, #8]
 801a752:	238c      	movs	r3, #140	@ 0x8c
 801a754:	18fb      	adds	r3, r7, r3
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	b29b      	uxth	r3, r3
 801a75a:	f006 fba3 	bl	8020ea4 <USB_WritePMA>
 801a75e:	e1ea      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	2250      	movs	r2, #80	@ 0x50
 801a766:	5a9b      	ldrh	r3, [r3, r2]
 801a768:	b29b      	uxth	r3, r3
 801a76a:	001a      	movs	r2, r3
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	781b      	ldrb	r3, [r3, #0]
 801a770:	00db      	lsls	r3, r3, #3
 801a772:	18d2      	adds	r2, r2, r3
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	18d3      	adds	r3, r2, r3
 801a77a:	4aca      	ldr	r2, [pc, #808]	@ (801aaa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a77c:	4694      	mov	ip, r2
 801a77e:	4463      	add	r3, ip
 801a780:	881a      	ldrh	r2, [r3, #0]
 801a782:	2186      	movs	r1, #134	@ 0x86
 801a784:	187b      	adds	r3, r7, r1
 801a786:	0592      	lsls	r2, r2, #22
 801a788:	0d92      	lsrs	r2, r2, #22
 801a78a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	699a      	ldr	r2, [r3, #24]
 801a790:	187b      	adds	r3, r7, r1
 801a792:	881b      	ldrh	r3, [r3, #0]
 801a794:	429a      	cmp	r2, r3
 801a796:	d307      	bcc.n	801a7a8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	699a      	ldr	r2, [r3, #24]
 801a79c:	187b      	adds	r3, r7, r1
 801a79e:	881b      	ldrh	r3, [r3, #0]
 801a7a0:	1ad2      	subs	r2, r2, r3
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	619a      	str	r2, [r3, #24]
 801a7a6:	e002      	b.n	801a7ae <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a7ae:	68bb      	ldr	r3, [r7, #8]
 801a7b0:	699b      	ldr	r3, [r3, #24]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d000      	beq.n	801a7b8 <HAL_PCD_EP_DB_Transmit+0x43c>
 801a7b6:	e0bb      	b.n	801a930 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	785b      	ldrb	r3, [r3, #1]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d125      	bne.n	801a80c <HAL_PCD_EP_DB_Transmit+0x490>
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	2250      	movs	r2, #80	@ 0x50
 801a7cc:	5a9b      	ldrh	r3, [r3, r2]
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	001a      	movs	r2, r3
 801a7d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a7d4:	189b      	adds	r3, r3, r2
 801a7d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	781b      	ldrb	r3, [r3, #0]
 801a7dc:	00da      	lsls	r2, r3, #3
 801a7de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a7e0:	18d3      	adds	r3, r2, r3
 801a7e2:	4aaf      	ldr	r2, [pc, #700]	@ (801aaa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a7e4:	4694      	mov	ip, r2
 801a7e6:	4463      	add	r3, ip
 801a7e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a7ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a7ec:	881b      	ldrh	r3, [r3, #0]
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	059b      	lsls	r3, r3, #22
 801a7f2:	0d9b      	lsrs	r3, r3, #22
 801a7f4:	b29a      	uxth	r2, r3
 801a7f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a7f8:	801a      	strh	r2, [r3, #0]
 801a7fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a7fc:	881b      	ldrh	r3, [r3, #0]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	4aa9      	ldr	r2, [pc, #676]	@ (801aaa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a802:	4313      	orrs	r3, r2
 801a804:	b29a      	uxth	r2, r3
 801a806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a808:	801a      	strh	r2, [r3, #0]
 801a80a:	e01b      	b.n	801a844 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	785b      	ldrb	r3, [r3, #1]
 801a810:	2b01      	cmp	r3, #1
 801a812:	d117      	bne.n	801a844 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	667b      	str	r3, [r7, #100]	@ 0x64
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	2250      	movs	r2, #80	@ 0x50
 801a820:	5a9b      	ldrh	r3, [r3, r2]
 801a822:	b29b      	uxth	r3, r3
 801a824:	001a      	movs	r2, r3
 801a826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a828:	189b      	adds	r3, r3, r2
 801a82a:	667b      	str	r3, [r7, #100]	@ 0x64
 801a82c:	68bb      	ldr	r3, [r7, #8]
 801a82e:	781b      	ldrb	r3, [r3, #0]
 801a830:	00da      	lsls	r2, r3, #3
 801a832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a834:	18d3      	adds	r3, r2, r3
 801a836:	4a9a      	ldr	r2, [pc, #616]	@ (801aaa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a838:	4694      	mov	ip, r2
 801a83a:	4463      	add	r3, ip
 801a83c:	663b      	str	r3, [r7, #96]	@ 0x60
 801a83e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a840:	2200      	movs	r2, #0
 801a842:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	677b      	str	r3, [r7, #116]	@ 0x74
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	785b      	ldrb	r3, [r3, #1]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d12b      	bne.n	801a8aa <HAL_PCD_EP_DB_Transmit+0x52e>
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2250      	movs	r2, #80	@ 0x50
 801a85e:	5a9b      	ldrh	r3, [r3, r2]
 801a860:	b29b      	uxth	r3, r3
 801a862:	001a      	movs	r2, r3
 801a864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a866:	189b      	adds	r3, r3, r2
 801a868:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a86a:	68bb      	ldr	r3, [r7, #8]
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	00da      	lsls	r2, r3, #3
 801a870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a872:	18d3      	adds	r3, r2, r3
 801a874:	4a8b      	ldr	r2, [pc, #556]	@ (801aaa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a876:	4694      	mov	ip, r2
 801a878:	4463      	add	r3, ip
 801a87a:	2180      	movs	r1, #128	@ 0x80
 801a87c:	187a      	adds	r2, r7, r1
 801a87e:	6013      	str	r3, [r2, #0]
 801a880:	187b      	adds	r3, r7, r1
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	881b      	ldrh	r3, [r3, #0]
 801a886:	b29b      	uxth	r3, r3
 801a888:	059b      	lsls	r3, r3, #22
 801a88a:	0d9b      	lsrs	r3, r3, #22
 801a88c:	b29a      	uxth	r2, r3
 801a88e:	187b      	adds	r3, r7, r1
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	801a      	strh	r2, [r3, #0]
 801a894:	187b      	adds	r3, r7, r1
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	881b      	ldrh	r3, [r3, #0]
 801a89a:	b29b      	uxth	r3, r3
 801a89c:	4a82      	ldr	r2, [pc, #520]	@ (801aaa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a89e:	4313      	orrs	r3, r2
 801a8a0:	b29a      	uxth	r2, r3
 801a8a2:	187b      	adds	r3, r7, r1
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	801a      	strh	r2, [r3, #0]
 801a8a8:	e018      	b.n	801a8dc <HAL_PCD_EP_DB_Transmit+0x560>
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	785b      	ldrb	r3, [r3, #1]
 801a8ae:	2b01      	cmp	r3, #1
 801a8b0:	d114      	bne.n	801a8dc <HAL_PCD_EP_DB_Transmit+0x560>
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2250      	movs	r2, #80	@ 0x50
 801a8b8:	5a9b      	ldrh	r3, [r3, r2]
 801a8ba:	b29b      	uxth	r3, r3
 801a8bc:	001a      	movs	r2, r3
 801a8be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8c0:	189b      	adds	r3, r3, r2
 801a8c2:	677b      	str	r3, [r7, #116]	@ 0x74
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	00da      	lsls	r2, r3, #3
 801a8ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8cc:	18d3      	adds	r3, r2, r3
 801a8ce:	4a75      	ldr	r2, [pc, #468]	@ (801aaa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a8d0:	4694      	mov	ip, r2
 801a8d2:	4463      	add	r3, ip
 801a8d4:	673b      	str	r3, [r7, #112]	@ 0x70
 801a8d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8d8:	2200      	movs	r2, #0
 801a8da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	781a      	ldrb	r2, [r3, #0]
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	0011      	movs	r1, r2
 801a8e4:	0018      	movs	r0, r3
 801a8e6:	f008 fb63 	bl	8022fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a8ea:	1dbb      	adds	r3, r7, #6
 801a8ec:	881a      	ldrh	r2, [r3, #0]
 801a8ee:	2380      	movs	r3, #128	@ 0x80
 801a8f0:	01db      	lsls	r3, r3, #7
 801a8f2:	4013      	ands	r3, r2
 801a8f4:	d000      	beq.n	801a8f8 <HAL_PCD_EP_DB_Transmit+0x57c>
 801a8f6:	e11e      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	001a      	movs	r2, r3
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	009b      	lsls	r3, r3, #2
 801a904:	18d3      	adds	r3, r2, r3
 801a906:	881b      	ldrh	r3, [r3, #0]
 801a908:	b29a      	uxth	r2, r3
 801a90a:	2088      	movs	r0, #136	@ 0x88
 801a90c:	183b      	adds	r3, r7, r0
 801a90e:	4967      	ldr	r1, [pc, #412]	@ (801aaac <HAL_PCD_EP_DB_Transmit+0x730>)
 801a910:	400a      	ands	r2, r1
 801a912:	801a      	strh	r2, [r3, #0]
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	001a      	movs	r2, r3
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	009b      	lsls	r3, r3, #2
 801a920:	18d3      	adds	r3, r2, r3
 801a922:	183a      	adds	r2, r7, r0
 801a924:	8812      	ldrh	r2, [r2, #0]
 801a926:	4962      	ldr	r1, [pc, #392]	@ (801aab0 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a928:	430a      	orrs	r2, r1
 801a92a:	b292      	uxth	r2, r2
 801a92c:	801a      	strh	r2, [r3, #0]
 801a92e:	e102      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a930:	1dbb      	adds	r3, r7, #6
 801a932:	881a      	ldrh	r2, [r3, #0]
 801a934:	2380      	movs	r3, #128	@ 0x80
 801a936:	01db      	lsls	r3, r3, #7
 801a938:	4013      	ands	r3, r2
 801a93a:	d11a      	bne.n	801a972 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	001a      	movs	r2, r3
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	781b      	ldrb	r3, [r3, #0]
 801a946:	009b      	lsls	r3, r3, #2
 801a948:	18d3      	adds	r3, r2, r3
 801a94a:	881b      	ldrh	r3, [r3, #0]
 801a94c:	b29a      	uxth	r2, r3
 801a94e:	204e      	movs	r0, #78	@ 0x4e
 801a950:	183b      	adds	r3, r7, r0
 801a952:	4956      	ldr	r1, [pc, #344]	@ (801aaac <HAL_PCD_EP_DB_Transmit+0x730>)
 801a954:	400a      	ands	r2, r1
 801a956:	801a      	strh	r2, [r3, #0]
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	001a      	movs	r2, r3
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	18d3      	adds	r3, r2, r3
 801a966:	183a      	adds	r2, r7, r0
 801a968:	8812      	ldrh	r2, [r2, #0]
 801a96a:	4951      	ldr	r1, [pc, #324]	@ (801aab0 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a96c:	430a      	orrs	r2, r1
 801a96e:	b292      	uxth	r2, r2
 801a970:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	2224      	movs	r2, #36	@ 0x24
 801a976:	5c9b      	ldrb	r3, [r3, r2]
 801a978:	2b01      	cmp	r3, #1
 801a97a:	d000      	beq.n	801a97e <HAL_PCD_EP_DB_Transmit+0x602>
 801a97c:	e0db      	b.n	801ab36 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	695a      	ldr	r2, [r3, #20]
 801a982:	2186      	movs	r1, #134	@ 0x86
 801a984:	187b      	adds	r3, r7, r1
 801a986:	881b      	ldrh	r3, [r3, #0]
 801a988:	18d2      	adds	r2, r2, r3
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	69da      	ldr	r2, [r3, #28]
 801a992:	187b      	adds	r3, r7, r1
 801a994:	881b      	ldrh	r3, [r3, #0]
 801a996:	18d2      	adds	r2, r2, r3
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	6a1a      	ldr	r2, [r3, #32]
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	691b      	ldr	r3, [r3, #16]
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	d30c      	bcc.n	801a9c2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	691b      	ldr	r3, [r3, #16]
 801a9ac:	218c      	movs	r1, #140	@ 0x8c
 801a9ae:	187a      	adds	r2, r7, r1
 801a9b0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	6a1a      	ldr	r2, [r3, #32]
 801a9b6:	187b      	adds	r3, r7, r1
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	1ad2      	subs	r2, r2, r3
 801a9bc:	68bb      	ldr	r3, [r7, #8]
 801a9be:	621a      	str	r2, [r3, #32]
 801a9c0:	e01a      	b.n	801a9f8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	6a1b      	ldr	r3, [r3, #32]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d10a      	bne.n	801a9e0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801a9ca:	2386      	movs	r3, #134	@ 0x86
 801a9cc:	18fb      	adds	r3, r7, r3
 801a9ce:	881b      	ldrh	r3, [r3, #0]
 801a9d0:	228c      	movs	r2, #140	@ 0x8c
 801a9d2:	18ba      	adds	r2, r7, r2
 801a9d4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	2224      	movs	r2, #36	@ 0x24
 801a9da:	2100      	movs	r1, #0
 801a9dc:	5499      	strb	r1, [r3, r2]
 801a9de:	e00b      	b.n	801a9f8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	6a1b      	ldr	r3, [r3, #32]
 801a9e4:	228c      	movs	r2, #140	@ 0x8c
 801a9e6:	18ba      	adds	r2, r7, r2
 801a9e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801a9f0:	68bb      	ldr	r3, [r7, #8]
 801a9f2:	2224      	movs	r2, #36	@ 0x24
 801a9f4:	2100      	movs	r1, #0
 801a9f6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	657b      	str	r3, [r7, #84]	@ 0x54
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	785b      	ldrb	r3, [r3, #1]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d000      	beq.n	801aa08 <HAL_PCD_EP_DB_Transmit+0x68c>
 801aa06:	e06e      	b.n	801aae6 <HAL_PCD_EP_DB_Transmit+0x76a>
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	2250      	movs	r2, #80	@ 0x50
 801aa14:	5a9b      	ldrh	r3, [r3, r2]
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	001a      	movs	r2, r3
 801aa1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aa1c:	189b      	adds	r3, r3, r2
 801aa1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	00da      	lsls	r2, r3, #3
 801aa26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aa28:	18d3      	adds	r3, r2, r3
 801aa2a:	4a1e      	ldr	r2, [pc, #120]	@ (801aaa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 801aa2c:	4694      	mov	ip, r2
 801aa2e:	4463      	add	r3, ip
 801aa30:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa34:	881b      	ldrh	r3, [r3, #0]
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	059b      	lsls	r3, r3, #22
 801aa3a:	0d9b      	lsrs	r3, r3, #22
 801aa3c:	b29a      	uxth	r2, r3
 801aa3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa40:	801a      	strh	r2, [r3, #0]
 801aa42:	228c      	movs	r2, #140	@ 0x8c
 801aa44:	18bb      	adds	r3, r7, r2
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa4a:	d91a      	bls.n	801aa82 <HAL_PCD_EP_DB_Transmit+0x706>
 801aa4c:	18bb      	adds	r3, r7, r2
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	095b      	lsrs	r3, r3, #5
 801aa52:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aa54:	18bb      	adds	r3, r7, r2
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	221f      	movs	r2, #31
 801aa5a:	4013      	ands	r3, r2
 801aa5c:	d102      	bne.n	801aa64 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801aa5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa60:	3b01      	subs	r3, #1
 801aa62:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aa64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa66:	881b      	ldrh	r3, [r3, #0]
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa6c:	b29b      	uxth	r3, r3
 801aa6e:	029b      	lsls	r3, r3, #10
 801aa70:	b29b      	uxth	r3, r3
 801aa72:	4313      	orrs	r3, r2
 801aa74:	b29b      	uxth	r3, r3
 801aa76:	4a0c      	ldr	r2, [pc, #48]	@ (801aaa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aa78:	4313      	orrs	r3, r2
 801aa7a:	b29a      	uxth	r2, r3
 801aa7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa7e:	801a      	strh	r2, [r3, #0]
 801aa80:	e04d      	b.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aa82:	238c      	movs	r3, #140	@ 0x8c
 801aa84:	18fb      	adds	r3, r7, r3
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d113      	bne.n	801aab4 <HAL_PCD_EP_DB_Transmit+0x738>
 801aa8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa8e:	881b      	ldrh	r3, [r3, #0]
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	4a05      	ldr	r2, [pc, #20]	@ (801aaa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801aa94:	4313      	orrs	r3, r2
 801aa96:	b29a      	uxth	r2, r3
 801aa98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aa9a:	801a      	strh	r2, [r3, #0]
 801aa9c:	e03f      	b.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aa9e:	46c0      	nop			@ (mov r8, r8)
 801aaa0:	00000402 	.word	0x00000402
 801aaa4:	00000406 	.word	0x00000406
 801aaa8:	ffff8000 	.word	0xffff8000
 801aaac:	ffff8f8f 	.word	0xffff8f8f
 801aab0:	ffffc080 	.word	0xffffc080
 801aab4:	228c      	movs	r2, #140	@ 0x8c
 801aab6:	18bb      	adds	r3, r7, r2
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	085b      	lsrs	r3, r3, #1
 801aabc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aabe:	18bb      	adds	r3, r7, r2
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	2201      	movs	r2, #1
 801aac4:	4013      	ands	r3, r2
 801aac6:	d002      	beq.n	801aace <HAL_PCD_EP_DB_Transmit+0x752>
 801aac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aaca:	3301      	adds	r3, #1
 801aacc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801aace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aad0:	881b      	ldrh	r3, [r3, #0]
 801aad2:	b29a      	uxth	r2, r3
 801aad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aad6:	b29b      	uxth	r3, r3
 801aad8:	029b      	lsls	r3, r3, #10
 801aada:	b29b      	uxth	r3, r3
 801aadc:	4313      	orrs	r3, r2
 801aade:	b29a      	uxth	r2, r3
 801aae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801aae2:	801a      	strh	r2, [r3, #0]
 801aae4:	e01b      	b.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	785b      	ldrb	r3, [r3, #1]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d117      	bne.n	801ab1e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	2250      	movs	r2, #80	@ 0x50
 801aaf4:	5a9b      	ldrh	r3, [r3, r2]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	001a      	movs	r2, r3
 801aafa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aafc:	189b      	adds	r3, r3, r2
 801aafe:	657b      	str	r3, [r7, #84]	@ 0x54
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	781b      	ldrb	r3, [r3, #0]
 801ab04:	00da      	lsls	r2, r3, #3
 801ab06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab08:	18d3      	adds	r3, r2, r3
 801ab0a:	4a21      	ldr	r2, [pc, #132]	@ (801ab90 <HAL_PCD_EP_DB_Transmit+0x814>)
 801ab0c:	4694      	mov	ip, r2
 801ab0e:	4463      	add	r3, ip
 801ab10:	653b      	str	r3, [r7, #80]	@ 0x50
 801ab12:	238c      	movs	r3, #140	@ 0x8c
 801ab14:	18fb      	adds	r3, r7, r3
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	b29a      	uxth	r2, r3
 801ab1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	6818      	ldr	r0, [r3, #0]
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	6959      	ldr	r1, [r3, #20]
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	895a      	ldrh	r2, [r3, #10]
 801ab2a:	238c      	movs	r3, #140	@ 0x8c
 801ab2c:	18fb      	adds	r3, r7, r3
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	f006 f9b7 	bl	8020ea4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	001a      	movs	r2, r3
 801ab3c:	68bb      	ldr	r3, [r7, #8]
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	18d3      	adds	r3, r2, r3
 801ab44:	881b      	ldrh	r3, [r3, #0]
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	2014      	movs	r0, #20
 801ab4a:	183b      	adds	r3, r7, r0
 801ab4c:	4911      	ldr	r1, [pc, #68]	@ (801ab94 <HAL_PCD_EP_DB_Transmit+0x818>)
 801ab4e:	400a      	ands	r2, r1
 801ab50:	801a      	strh	r2, [r3, #0]
 801ab52:	183b      	adds	r3, r7, r0
 801ab54:	183a      	adds	r2, r7, r0
 801ab56:	8812      	ldrh	r2, [r2, #0]
 801ab58:	2110      	movs	r1, #16
 801ab5a:	404a      	eors	r2, r1
 801ab5c:	801a      	strh	r2, [r3, #0]
 801ab5e:	183b      	adds	r3, r7, r0
 801ab60:	183a      	adds	r2, r7, r0
 801ab62:	8812      	ldrh	r2, [r2, #0]
 801ab64:	2120      	movs	r1, #32
 801ab66:	404a      	eors	r2, r1
 801ab68:	801a      	strh	r2, [r3, #0]
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	001a      	movs	r2, r3
 801ab70:	68bb      	ldr	r3, [r7, #8]
 801ab72:	781b      	ldrb	r3, [r3, #0]
 801ab74:	009b      	lsls	r3, r3, #2
 801ab76:	18d3      	adds	r3, r2, r3
 801ab78:	183a      	adds	r2, r7, r0
 801ab7a:	8812      	ldrh	r2, [r2, #0]
 801ab7c:	4906      	ldr	r1, [pc, #24]	@ (801ab98 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801ab7e:	430a      	orrs	r2, r1
 801ab80:	b292      	uxth	r2, r2
 801ab82:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801ab84:	2300      	movs	r3, #0
}
 801ab86:	0018      	movs	r0, r3
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	b024      	add	sp, #144	@ 0x90
 801ab8c:	bd80      	pop	{r7, pc}
 801ab8e:	46c0      	nop			@ (mov r8, r8)
 801ab90:	00000406 	.word	0x00000406
 801ab94:	ffff8fbf 	.word	0xffff8fbf
 801ab98:	ffff8080 	.word	0xffff8080

0801ab9c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801ab9c:	b590      	push	{r4, r7, lr}
 801ab9e:	b087      	sub	sp, #28
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	60f8      	str	r0, [r7, #12]
 801aba4:	0008      	movs	r0, r1
 801aba6:	0011      	movs	r1, r2
 801aba8:	607b      	str	r3, [r7, #4]
 801abaa:	240a      	movs	r4, #10
 801abac:	193b      	adds	r3, r7, r4
 801abae:	1c02      	adds	r2, r0, #0
 801abb0:	801a      	strh	r2, [r3, #0]
 801abb2:	2308      	movs	r3, #8
 801abb4:	18fb      	adds	r3, r7, r3
 801abb6:	1c0a      	adds	r2, r1, #0
 801abb8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801abba:	0021      	movs	r1, r4
 801abbc:	187b      	adds	r3, r7, r1
 801abbe:	881b      	ldrh	r3, [r3, #0]
 801abc0:	2280      	movs	r2, #128	@ 0x80
 801abc2:	4013      	ands	r3, r2
 801abc4:	b29b      	uxth	r3, r3
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d00c      	beq.n	801abe4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801abca:	187b      	adds	r3, r7, r1
 801abcc:	881b      	ldrh	r3, [r3, #0]
 801abce:	2207      	movs	r2, #7
 801abd0:	4013      	ands	r3, r2
 801abd2:	1c5a      	adds	r2, r3, #1
 801abd4:	0013      	movs	r3, r2
 801abd6:	009b      	lsls	r3, r3, #2
 801abd8:	189b      	adds	r3, r3, r2
 801abda:	00db      	lsls	r3, r3, #3
 801abdc:	68fa      	ldr	r2, [r7, #12]
 801abde:	18d3      	adds	r3, r2, r3
 801abe0:	617b      	str	r3, [r7, #20]
 801abe2:	e00b      	b.n	801abfc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801abe4:	230a      	movs	r3, #10
 801abe6:	18fb      	adds	r3, r7, r3
 801abe8:	881a      	ldrh	r2, [r3, #0]
 801abea:	0013      	movs	r3, r2
 801abec:	009b      	lsls	r3, r3, #2
 801abee:	189b      	adds	r3, r3, r2
 801abf0:	00db      	lsls	r3, r3, #3
 801abf2:	3369      	adds	r3, #105	@ 0x69
 801abf4:	33ff      	adds	r3, #255	@ 0xff
 801abf6:	68fa      	ldr	r2, [r7, #12]
 801abf8:	18d3      	adds	r3, r2, r3
 801abfa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801abfc:	2308      	movs	r3, #8
 801abfe:	18fb      	adds	r3, r7, r3
 801ac00:	881b      	ldrh	r3, [r3, #0]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d107      	bne.n	801ac16 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801ac06:	697b      	ldr	r3, [r7, #20]
 801ac08:	2200      	movs	r2, #0
 801ac0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	b29a      	uxth	r2, r3
 801ac10:	697b      	ldr	r3, [r7, #20]
 801ac12:	80da      	strh	r2, [r3, #6]
 801ac14:	e00b      	b.n	801ac2e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	2201      	movs	r2, #1
 801ac1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	b29a      	uxth	r2, r3
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	0c1b      	lsrs	r3, r3, #16
 801ac28:	b29a      	uxth	r2, r3
 801ac2a:	697b      	ldr	r3, [r7, #20]
 801ac2c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801ac2e:	2300      	movs	r3, #0
}
 801ac30:	0018      	movs	r0, r3
 801ac32:	46bd      	mov	sp, r7
 801ac34:	b007      	add	sp, #28
 801ac36:	bd90      	pop	{r4, r7, pc}

0801ac38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b084      	sub	sp, #16
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	23ba      	movs	r3, #186	@ 0xba
 801ac4a:	009b      	lsls	r3, r3, #2
 801ac4c:	2101      	movs	r1, #1
 801ac4e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801ac50:	687a      	ldr	r2, [r7, #4]
 801ac52:	23b8      	movs	r3, #184	@ 0xb8
 801ac54:	009b      	lsls	r3, r3, #2
 801ac56:	2100      	movs	r1, #0
 801ac58:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	2254      	movs	r2, #84	@ 0x54
 801ac5e:	5a9b      	ldrh	r3, [r3, r2]
 801ac60:	b29b      	uxth	r3, r3
 801ac62:	2201      	movs	r2, #1
 801ac64:	4313      	orrs	r3, r2
 801ac66:	b299      	uxth	r1, r3
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	2254      	movs	r2, #84	@ 0x54
 801ac6c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	2254      	movs	r2, #84	@ 0x54
 801ac72:	5a9b      	ldrh	r3, [r3, r2]
 801ac74:	b29b      	uxth	r3, r3
 801ac76:	2202      	movs	r2, #2
 801ac78:	4313      	orrs	r3, r2
 801ac7a:	b299      	uxth	r1, r3
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	2254      	movs	r2, #84	@ 0x54
 801ac80:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ac82:	2300      	movs	r3, #0
}
 801ac84:	0018      	movs	r0, r3
 801ac86:	46bd      	mov	sp, r7
 801ac88:	b004      	add	sp, #16
 801ac8a:	bd80      	pop	{r7, pc}

0801ac8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b082      	sub	sp, #8
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	6078      	str	r0, [r7, #4]
 801ac94:	000a      	movs	r2, r1
 801ac96:	1cfb      	adds	r3, r7, #3
 801ac98:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801ac9a:	46c0      	nop			@ (mov r8, r8)
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	b002      	add	sp, #8
 801aca0:	bd80      	pop	{r7, pc}
	...

0801aca4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801aca8:	4b04      	ldr	r3, [pc, #16]	@ (801acbc <HAL_PWR_EnableBkUpAccess+0x18>)
 801acaa:	681a      	ldr	r2, [r3, #0]
 801acac:	4b03      	ldr	r3, [pc, #12]	@ (801acbc <HAL_PWR_EnableBkUpAccess+0x18>)
 801acae:	2180      	movs	r1, #128	@ 0x80
 801acb0:	0049      	lsls	r1, r1, #1
 801acb2:	430a      	orrs	r2, r1
 801acb4:	601a      	str	r2, [r3, #0]
}
 801acb6:	46c0      	nop			@ (mov r8, r8)
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}
 801acbc:	40007000 	.word	0x40007000

0801acc0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801acc0:	b580      	push	{r7, lr}
 801acc2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801acc4:	4b04      	ldr	r3, [pc, #16]	@ (801acd8 <HAL_PWR_DisableBkUpAccess+0x18>)
 801acc6:	681a      	ldr	r2, [r3, #0]
 801acc8:	4b03      	ldr	r3, [pc, #12]	@ (801acd8 <HAL_PWR_DisableBkUpAccess+0x18>)
 801acca:	4904      	ldr	r1, [pc, #16]	@ (801acdc <HAL_PWR_DisableBkUpAccess+0x1c>)
 801accc:	400a      	ands	r2, r1
 801acce:	601a      	str	r2, [r3, #0]
}
 801acd0:	46c0      	nop			@ (mov r8, r8)
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	46c0      	nop			@ (mov r8, r8)
 801acd8:	40007000 	.word	0x40007000
 801acdc:	fffffeff 	.word	0xfffffeff

0801ace0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801ace0:	b580      	push	{r7, lr}
 801ace2:	b086      	sub	sp, #24
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	6078      	str	r0, [r7, #4]
 801ace8:	000a      	movs	r2, r1
 801acea:	1cfb      	adds	r3, r7, #3
 801acec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801acee:	2300      	movs	r3, #0
 801acf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801acf2:	4b25      	ldr	r3, [pc, #148]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801acf4:	681a      	ldr	r2, [r3, #0]
 801acf6:	2380      	movs	r3, #128	@ 0x80
 801acf8:	009b      	lsls	r3, r3, #2
 801acfa:	4013      	ands	r3, r2
 801acfc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801acfe:	4b23      	ldr	r3, [pc, #140]	@ (801ad8c <HAL_PWR_EnterSTOPMode+0xac>)
 801ad00:	6a1b      	ldr	r3, [r3, #32]
 801ad02:	2201      	movs	r2, #1
 801ad04:	4013      	ands	r3, r2
 801ad06:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801ad08:	693b      	ldr	r3, [r7, #16]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d008      	beq.n	801ad20 <HAL_PWR_EnterSTOPMode+0x40>
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d005      	beq.n	801ad20 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801ad14:	4b1c      	ldr	r3, [pc, #112]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad16:	681a      	ldr	r2, [r3, #0]
 801ad18:	4b1b      	ldr	r3, [pc, #108]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad1a:	491d      	ldr	r1, [pc, #116]	@ (801ad90 <HAL_PWR_EnterSTOPMode+0xb0>)
 801ad1c:	400a      	ands	r2, r1
 801ad1e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801ad20:	4b19      	ldr	r3, [pc, #100]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	2203      	movs	r2, #3
 801ad2a:	4393      	bics	r3, r2
 801ad2c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801ad2e:	697a      	ldr	r2, [r7, #20]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	4313      	orrs	r3, r2
 801ad34:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801ad36:	4b14      	ldr	r3, [pc, #80]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad38:	697a      	ldr	r2, [r7, #20]
 801ad3a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801ad3c:	4b15      	ldr	r3, [pc, #84]	@ (801ad94 <HAL_PWR_EnterSTOPMode+0xb4>)
 801ad3e:	691a      	ldr	r2, [r3, #16]
 801ad40:	4b14      	ldr	r3, [pc, #80]	@ (801ad94 <HAL_PWR_EnterSTOPMode+0xb4>)
 801ad42:	2104      	movs	r1, #4
 801ad44:	430a      	orrs	r2, r1
 801ad46:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801ad48:	1cfb      	adds	r3, r7, #3
 801ad4a:	781b      	ldrb	r3, [r3, #0]
 801ad4c:	2b01      	cmp	r3, #1
 801ad4e:	d101      	bne.n	801ad54 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801ad50:	bf30      	wfi
 801ad52:	e002      	b.n	801ad5a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801ad54:	bf40      	sev
    __WFE();
 801ad56:	bf20      	wfe
    __WFE();
 801ad58:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801ad5a:	4b0e      	ldr	r3, [pc, #56]	@ (801ad94 <HAL_PWR_EnterSTOPMode+0xb4>)
 801ad5c:	691a      	ldr	r2, [r3, #16]
 801ad5e:	4b0d      	ldr	r3, [pc, #52]	@ (801ad94 <HAL_PWR_EnterSTOPMode+0xb4>)
 801ad60:	2104      	movs	r1, #4
 801ad62:	438a      	bics	r2, r1
 801ad64:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d009      	beq.n	801ad80 <HAL_PWR_EnterSTOPMode+0xa0>
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d006      	beq.n	801ad80 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801ad72:	4b05      	ldr	r3, [pc, #20]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad74:	681a      	ldr	r2, [r3, #0]
 801ad76:	4b04      	ldr	r3, [pc, #16]	@ (801ad88 <HAL_PWR_EnterSTOPMode+0xa8>)
 801ad78:	2180      	movs	r1, #128	@ 0x80
 801ad7a:	0089      	lsls	r1, r1, #2
 801ad7c:	430a      	orrs	r2, r1
 801ad7e:	601a      	str	r2, [r3, #0]
  }
}
 801ad80:	46c0      	nop			@ (mov r8, r8)
 801ad82:	46bd      	mov	sp, r7
 801ad84:	b006      	add	sp, #24
 801ad86:	bd80      	pop	{r7, pc}
 801ad88:	40007000 	.word	0x40007000
 801ad8c:	40010000 	.word	0x40010000
 801ad90:	fffffdff 	.word	0xfffffdff
 801ad94:	e000ed00 	.word	0xe000ed00

0801ad98 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801ad9c:	4b07      	ldr	r3, [pc, #28]	@ (801adbc <HAL_PWR_EnterSTANDBYMode+0x24>)
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	4b06      	ldr	r3, [pc, #24]	@ (801adbc <HAL_PWR_EnterSTANDBYMode+0x24>)
 801ada2:	2102      	movs	r1, #2
 801ada4:	430a      	orrs	r2, r1
 801ada6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801ada8:	4b05      	ldr	r3, [pc, #20]	@ (801adc0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801adaa:	691a      	ldr	r2, [r3, #16]
 801adac:	4b04      	ldr	r3, [pc, #16]	@ (801adc0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801adae:	2104      	movs	r1, #4
 801adb0:	430a      	orrs	r2, r1
 801adb2:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801adb4:	bf30      	wfi
}
 801adb6:	46c0      	nop			@ (mov r8, r8)
 801adb8:	46bd      	mov	sp, r7
 801adba:	bd80      	pop	{r7, pc}
 801adbc:	40007000 	.word	0x40007000
 801adc0:	e000ed00 	.word	0xe000ed00

0801adc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801adc4:	b5b0      	push	{r4, r5, r7, lr}
 801adc6:	b08a      	sub	sp, #40	@ 0x28
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d102      	bne.n	801add8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801add2:	2301      	movs	r3, #1
 801add4:	f000 fbbf 	bl	801b556 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801add8:	4bc9      	ldr	r3, [pc, #804]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801adda:	68db      	ldr	r3, [r3, #12]
 801addc:	220c      	movs	r2, #12
 801adde:	4013      	ands	r3, r2
 801ade0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ade2:	4bc7      	ldr	r3, [pc, #796]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ade4:	68da      	ldr	r2, [r3, #12]
 801ade6:	2380      	movs	r3, #128	@ 0x80
 801ade8:	025b      	lsls	r3, r3, #9
 801adea:	4013      	ands	r3, r2
 801adec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	2201      	movs	r2, #1
 801adf4:	4013      	ands	r3, r2
 801adf6:	d100      	bne.n	801adfa <HAL_RCC_OscConfig+0x36>
 801adf8:	e07e      	b.n	801aef8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801adfa:	69fb      	ldr	r3, [r7, #28]
 801adfc:	2b08      	cmp	r3, #8
 801adfe:	d007      	beq.n	801ae10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801ae00:	69fb      	ldr	r3, [r7, #28]
 801ae02:	2b0c      	cmp	r3, #12
 801ae04:	d112      	bne.n	801ae2c <HAL_RCC_OscConfig+0x68>
 801ae06:	69ba      	ldr	r2, [r7, #24]
 801ae08:	2380      	movs	r3, #128	@ 0x80
 801ae0a:	025b      	lsls	r3, r3, #9
 801ae0c:	429a      	cmp	r2, r3
 801ae0e:	d10d      	bne.n	801ae2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ae10:	4bbb      	ldr	r3, [pc, #748]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae12:	681a      	ldr	r2, [r3, #0]
 801ae14:	2380      	movs	r3, #128	@ 0x80
 801ae16:	029b      	lsls	r3, r3, #10
 801ae18:	4013      	ands	r3, r2
 801ae1a:	d100      	bne.n	801ae1e <HAL_RCC_OscConfig+0x5a>
 801ae1c:	e06b      	b.n	801aef6 <HAL_RCC_OscConfig+0x132>
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	685b      	ldr	r3, [r3, #4]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d167      	bne.n	801aef6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801ae26:	2301      	movs	r3, #1
 801ae28:	f000 fb95 	bl	801b556 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	685a      	ldr	r2, [r3, #4]
 801ae30:	2380      	movs	r3, #128	@ 0x80
 801ae32:	025b      	lsls	r3, r3, #9
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d107      	bne.n	801ae48 <HAL_RCC_OscConfig+0x84>
 801ae38:	4bb1      	ldr	r3, [pc, #708]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae3a:	681a      	ldr	r2, [r3, #0]
 801ae3c:	4bb0      	ldr	r3, [pc, #704]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae3e:	2180      	movs	r1, #128	@ 0x80
 801ae40:	0249      	lsls	r1, r1, #9
 801ae42:	430a      	orrs	r2, r1
 801ae44:	601a      	str	r2, [r3, #0]
 801ae46:	e027      	b.n	801ae98 <HAL_RCC_OscConfig+0xd4>
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	685a      	ldr	r2, [r3, #4]
 801ae4c:	23a0      	movs	r3, #160	@ 0xa0
 801ae4e:	02db      	lsls	r3, r3, #11
 801ae50:	429a      	cmp	r2, r3
 801ae52:	d10e      	bne.n	801ae72 <HAL_RCC_OscConfig+0xae>
 801ae54:	4baa      	ldr	r3, [pc, #680]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae56:	681a      	ldr	r2, [r3, #0]
 801ae58:	4ba9      	ldr	r3, [pc, #676]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae5a:	2180      	movs	r1, #128	@ 0x80
 801ae5c:	02c9      	lsls	r1, r1, #11
 801ae5e:	430a      	orrs	r2, r1
 801ae60:	601a      	str	r2, [r3, #0]
 801ae62:	4ba7      	ldr	r3, [pc, #668]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae64:	681a      	ldr	r2, [r3, #0]
 801ae66:	4ba6      	ldr	r3, [pc, #664]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae68:	2180      	movs	r1, #128	@ 0x80
 801ae6a:	0249      	lsls	r1, r1, #9
 801ae6c:	430a      	orrs	r2, r1
 801ae6e:	601a      	str	r2, [r3, #0]
 801ae70:	e012      	b.n	801ae98 <HAL_RCC_OscConfig+0xd4>
 801ae72:	4ba3      	ldr	r3, [pc, #652]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae74:	681a      	ldr	r2, [r3, #0]
 801ae76:	4ba2      	ldr	r3, [pc, #648]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae78:	49a2      	ldr	r1, [pc, #648]	@ (801b104 <HAL_RCC_OscConfig+0x340>)
 801ae7a:	400a      	ands	r2, r1
 801ae7c:	601a      	str	r2, [r3, #0]
 801ae7e:	4ba0      	ldr	r3, [pc, #640]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	2380      	movs	r3, #128	@ 0x80
 801ae84:	025b      	lsls	r3, r3, #9
 801ae86:	4013      	ands	r3, r2
 801ae88:	60fb      	str	r3, [r7, #12]
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	4b9c      	ldr	r3, [pc, #624]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae8e:	681a      	ldr	r2, [r3, #0]
 801ae90:	4b9b      	ldr	r3, [pc, #620]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801ae92:	499d      	ldr	r1, [pc, #628]	@ (801b108 <HAL_RCC_OscConfig+0x344>)
 801ae94:	400a      	ands	r2, r1
 801ae96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	685b      	ldr	r3, [r3, #4]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d015      	beq.n	801aecc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aea0:	f7f9 fb54 	bl	801454c <HAL_GetTick>
 801aea4:	0003      	movs	r3, r0
 801aea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801aea8:	e009      	b.n	801aebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801aeaa:	f7f9 fb4f 	bl	801454c <HAL_GetTick>
 801aeae:	0002      	movs	r2, r0
 801aeb0:	697b      	ldr	r3, [r7, #20]
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	2b64      	cmp	r3, #100	@ 0x64
 801aeb6:	d902      	bls.n	801aebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801aeb8:	2303      	movs	r3, #3
 801aeba:	f000 fb4c 	bl	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801aebe:	4b90      	ldr	r3, [pc, #576]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801aec0:	681a      	ldr	r2, [r3, #0]
 801aec2:	2380      	movs	r3, #128	@ 0x80
 801aec4:	029b      	lsls	r3, r3, #10
 801aec6:	4013      	ands	r3, r2
 801aec8:	d0ef      	beq.n	801aeaa <HAL_RCC_OscConfig+0xe6>
 801aeca:	e015      	b.n	801aef8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aecc:	f7f9 fb3e 	bl	801454c <HAL_GetTick>
 801aed0:	0003      	movs	r3, r0
 801aed2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801aed4:	e008      	b.n	801aee8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801aed6:	f7f9 fb39 	bl	801454c <HAL_GetTick>
 801aeda:	0002      	movs	r2, r0
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	1ad3      	subs	r3, r2, r3
 801aee0:	2b64      	cmp	r3, #100	@ 0x64
 801aee2:	d901      	bls.n	801aee8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801aee4:	2303      	movs	r3, #3
 801aee6:	e336      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801aee8:	4b85      	ldr	r3, [pc, #532]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801aeea:	681a      	ldr	r2, [r3, #0]
 801aeec:	2380      	movs	r3, #128	@ 0x80
 801aeee:	029b      	lsls	r3, r3, #10
 801aef0:	4013      	ands	r3, r2
 801aef2:	d1f0      	bne.n	801aed6 <HAL_RCC_OscConfig+0x112>
 801aef4:	e000      	b.n	801aef8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801aef6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	2202      	movs	r2, #2
 801aefe:	4013      	ands	r3, r2
 801af00:	d100      	bne.n	801af04 <HAL_RCC_OscConfig+0x140>
 801af02:	e099      	b.n	801b038 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	68db      	ldr	r3, [r3, #12]
 801af08:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af0c:	2220      	movs	r2, #32
 801af0e:	4013      	ands	r3, r2
 801af10:	d009      	beq.n	801af26 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801af12:	4b7b      	ldr	r3, [pc, #492]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af14:	681a      	ldr	r2, [r3, #0]
 801af16:	4b7a      	ldr	r3, [pc, #488]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af18:	2120      	movs	r1, #32
 801af1a:	430a      	orrs	r2, r1
 801af1c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af20:	2220      	movs	r2, #32
 801af22:	4393      	bics	r3, r2
 801af24:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	2b04      	cmp	r3, #4
 801af2a:	d005      	beq.n	801af38 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801af2c:	69fb      	ldr	r3, [r7, #28]
 801af2e:	2b0c      	cmp	r3, #12
 801af30:	d13e      	bne.n	801afb0 <HAL_RCC_OscConfig+0x1ec>
 801af32:	69bb      	ldr	r3, [r7, #24]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d13b      	bne.n	801afb0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801af38:	4b71      	ldr	r3, [pc, #452]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	2204      	movs	r2, #4
 801af3e:	4013      	ands	r3, r2
 801af40:	d004      	beq.n	801af4c <HAL_RCC_OscConfig+0x188>
 801af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af44:	2b00      	cmp	r3, #0
 801af46:	d101      	bne.n	801af4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801af48:	2301      	movs	r3, #1
 801af4a:	e304      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801af4c:	4b6c      	ldr	r3, [pc, #432]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af4e:	685b      	ldr	r3, [r3, #4]
 801af50:	4a6e      	ldr	r2, [pc, #440]	@ (801b10c <HAL_RCC_OscConfig+0x348>)
 801af52:	4013      	ands	r3, r2
 801af54:	0019      	movs	r1, r3
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	691b      	ldr	r3, [r3, #16]
 801af5a:	021a      	lsls	r2, r3, #8
 801af5c:	4b68      	ldr	r3, [pc, #416]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af5e:	430a      	orrs	r2, r1
 801af60:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801af62:	4b67      	ldr	r3, [pc, #412]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2209      	movs	r2, #9
 801af68:	4393      	bics	r3, r2
 801af6a:	0019      	movs	r1, r3
 801af6c:	4b64      	ldr	r3, [pc, #400]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801af70:	430a      	orrs	r2, r1
 801af72:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801af74:	f000 fc42 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 801af78:	0001      	movs	r1, r0
 801af7a:	4b61      	ldr	r3, [pc, #388]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801af7c:	68db      	ldr	r3, [r3, #12]
 801af7e:	091b      	lsrs	r3, r3, #4
 801af80:	220f      	movs	r2, #15
 801af82:	4013      	ands	r3, r2
 801af84:	4a62      	ldr	r2, [pc, #392]	@ (801b110 <HAL_RCC_OscConfig+0x34c>)
 801af86:	5cd3      	ldrb	r3, [r2, r3]
 801af88:	000a      	movs	r2, r1
 801af8a:	40da      	lsrs	r2, r3
 801af8c:	4b61      	ldr	r3, [pc, #388]	@ (801b114 <HAL_RCC_OscConfig+0x350>)
 801af8e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801af90:	4b61      	ldr	r3, [pc, #388]	@ (801b118 <HAL_RCC_OscConfig+0x354>)
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2513      	movs	r5, #19
 801af96:	197c      	adds	r4, r7, r5
 801af98:	0018      	movs	r0, r3
 801af9a:	f7f9 fa91 	bl	80144c0 <HAL_InitTick>
 801af9e:	0003      	movs	r3, r0
 801afa0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801afa2:	197b      	adds	r3, r7, r5
 801afa4:	781b      	ldrb	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d046      	beq.n	801b038 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801afaa:	197b      	adds	r3, r7, r5
 801afac:	781b      	ldrb	r3, [r3, #0]
 801afae:	e2d2      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d027      	beq.n	801b006 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801afb6:	4b52      	ldr	r3, [pc, #328]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	2209      	movs	r2, #9
 801afbc:	4393      	bics	r3, r2
 801afbe:	0019      	movs	r1, r3
 801afc0:	4b4f      	ldr	r3, [pc, #316]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801afc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801afc4:	430a      	orrs	r2, r1
 801afc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801afc8:	f7f9 fac0 	bl	801454c <HAL_GetTick>
 801afcc:	0003      	movs	r3, r0
 801afce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801afd0:	e008      	b.n	801afe4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801afd2:	f7f9 fabb 	bl	801454c <HAL_GetTick>
 801afd6:	0002      	movs	r2, r0
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	1ad3      	subs	r3, r2, r3
 801afdc:	2b02      	cmp	r3, #2
 801afde:	d901      	bls.n	801afe4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801afe0:	2303      	movs	r3, #3
 801afe2:	e2b8      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801afe4:	4b46      	ldr	r3, [pc, #280]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	2204      	movs	r2, #4
 801afea:	4013      	ands	r3, r2
 801afec:	d0f1      	beq.n	801afd2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801afee:	4b44      	ldr	r3, [pc, #272]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	4a46      	ldr	r2, [pc, #280]	@ (801b10c <HAL_RCC_OscConfig+0x348>)
 801aff4:	4013      	ands	r3, r2
 801aff6:	0019      	movs	r1, r3
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	691b      	ldr	r3, [r3, #16]
 801affc:	021a      	lsls	r2, r3, #8
 801affe:	4b40      	ldr	r3, [pc, #256]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b000:	430a      	orrs	r2, r1
 801b002:	605a      	str	r2, [r3, #4]
 801b004:	e018      	b.n	801b038 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b006:	4b3e      	ldr	r3, [pc, #248]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b008:	681a      	ldr	r2, [r3, #0]
 801b00a:	4b3d      	ldr	r3, [pc, #244]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b00c:	2101      	movs	r1, #1
 801b00e:	438a      	bics	r2, r1
 801b010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b012:	f7f9 fa9b 	bl	801454c <HAL_GetTick>
 801b016:	0003      	movs	r3, r0
 801b018:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b01a:	e008      	b.n	801b02e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b01c:	f7f9 fa96 	bl	801454c <HAL_GetTick>
 801b020:	0002      	movs	r2, r0
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	1ad3      	subs	r3, r2, r3
 801b026:	2b02      	cmp	r3, #2
 801b028:	d901      	bls.n	801b02e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b02a:	2303      	movs	r3, #3
 801b02c:	e293      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b02e:	4b34      	ldr	r3, [pc, #208]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	2204      	movs	r2, #4
 801b034:	4013      	ands	r3, r2
 801b036:	d1f1      	bne.n	801b01c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	2210      	movs	r2, #16
 801b03e:	4013      	ands	r3, r2
 801b040:	d100      	bne.n	801b044 <HAL_RCC_OscConfig+0x280>
 801b042:	e0a2      	b.n	801b18a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b044:	69fb      	ldr	r3, [r7, #28]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d140      	bne.n	801b0cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b04a:	4b2d      	ldr	r3, [pc, #180]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b04c:	681a      	ldr	r2, [r3, #0]
 801b04e:	2380      	movs	r3, #128	@ 0x80
 801b050:	009b      	lsls	r3, r3, #2
 801b052:	4013      	ands	r3, r2
 801b054:	d005      	beq.n	801b062 <HAL_RCC_OscConfig+0x29e>
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	69db      	ldr	r3, [r3, #28]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d101      	bne.n	801b062 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b05e:	2301      	movs	r3, #1
 801b060:	e279      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b062:	4b27      	ldr	r3, [pc, #156]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b064:	685b      	ldr	r3, [r3, #4]
 801b066:	4a2d      	ldr	r2, [pc, #180]	@ (801b11c <HAL_RCC_OscConfig+0x358>)
 801b068:	4013      	ands	r3, r2
 801b06a:	0019      	movs	r1, r3
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b070:	4b23      	ldr	r3, [pc, #140]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b072:	430a      	orrs	r2, r1
 801b074:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b076:	4b22      	ldr	r3, [pc, #136]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b078:	685b      	ldr	r3, [r3, #4]
 801b07a:	021b      	lsls	r3, r3, #8
 801b07c:	0a19      	lsrs	r1, r3, #8
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	6a1b      	ldr	r3, [r3, #32]
 801b082:	061a      	lsls	r2, r3, #24
 801b084:	4b1e      	ldr	r3, [pc, #120]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b086:	430a      	orrs	r2, r1
 801b088:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b08e:	0b5b      	lsrs	r3, r3, #13
 801b090:	3301      	adds	r3, #1
 801b092:	2280      	movs	r2, #128	@ 0x80
 801b094:	0212      	lsls	r2, r2, #8
 801b096:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b098:	4b19      	ldr	r3, [pc, #100]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b09a:	68db      	ldr	r3, [r3, #12]
 801b09c:	091b      	lsrs	r3, r3, #4
 801b09e:	210f      	movs	r1, #15
 801b0a0:	400b      	ands	r3, r1
 801b0a2:	491b      	ldr	r1, [pc, #108]	@ (801b110 <HAL_RCC_OscConfig+0x34c>)
 801b0a4:	5ccb      	ldrb	r3, [r1, r3]
 801b0a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b0a8:	4b1a      	ldr	r3, [pc, #104]	@ (801b114 <HAL_RCC_OscConfig+0x350>)
 801b0aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b0ac:	4b1a      	ldr	r3, [pc, #104]	@ (801b118 <HAL_RCC_OscConfig+0x354>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2513      	movs	r5, #19
 801b0b2:	197c      	adds	r4, r7, r5
 801b0b4:	0018      	movs	r0, r3
 801b0b6:	f7f9 fa03 	bl	80144c0 <HAL_InitTick>
 801b0ba:	0003      	movs	r3, r0
 801b0bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b0be:	197b      	adds	r3, r7, r5
 801b0c0:	781b      	ldrb	r3, [r3, #0]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d061      	beq.n	801b18a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b0c6:	197b      	adds	r3, r7, r5
 801b0c8:	781b      	ldrb	r3, [r3, #0]
 801b0ca:	e244      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	69db      	ldr	r3, [r3, #28]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d040      	beq.n	801b156 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b0d4:	4b0a      	ldr	r3, [pc, #40]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b0d6:	681a      	ldr	r2, [r3, #0]
 801b0d8:	4b09      	ldr	r3, [pc, #36]	@ (801b100 <HAL_RCC_OscConfig+0x33c>)
 801b0da:	2180      	movs	r1, #128	@ 0x80
 801b0dc:	0049      	lsls	r1, r1, #1
 801b0de:	430a      	orrs	r2, r1
 801b0e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b0e2:	f7f9 fa33 	bl	801454c <HAL_GetTick>
 801b0e6:	0003      	movs	r3, r0
 801b0e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b0ea:	e019      	b.n	801b120 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b0ec:	f7f9 fa2e 	bl	801454c <HAL_GetTick>
 801b0f0:	0002      	movs	r2, r0
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	1ad3      	subs	r3, r2, r3
 801b0f6:	2b02      	cmp	r3, #2
 801b0f8:	d912      	bls.n	801b120 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b0fa:	2303      	movs	r3, #3
 801b0fc:	e22b      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
 801b0fe:	46c0      	nop			@ (mov r8, r8)
 801b100:	40021000 	.word	0x40021000
 801b104:	fffeffff 	.word	0xfffeffff
 801b108:	fffbffff 	.word	0xfffbffff
 801b10c:	ffffe0ff 	.word	0xffffe0ff
 801b110:	0802e1b4 	.word	0x0802e1b4
 801b114:	200000ec 	.word	0x200000ec
 801b118:	200000fc 	.word	0x200000fc
 801b11c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b120:	4bca      	ldr	r3, [pc, #808]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b122:	681a      	ldr	r2, [r3, #0]
 801b124:	2380      	movs	r3, #128	@ 0x80
 801b126:	009b      	lsls	r3, r3, #2
 801b128:	4013      	ands	r3, r2
 801b12a:	d0df      	beq.n	801b0ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b12c:	4bc7      	ldr	r3, [pc, #796]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b12e:	685b      	ldr	r3, [r3, #4]
 801b130:	4ac7      	ldr	r2, [pc, #796]	@ (801b450 <HAL_RCC_OscConfig+0x68c>)
 801b132:	4013      	ands	r3, r2
 801b134:	0019      	movs	r1, r3
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b13a:	4bc4      	ldr	r3, [pc, #784]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b13c:	430a      	orrs	r2, r1
 801b13e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b140:	4bc2      	ldr	r3, [pc, #776]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b142:	685b      	ldr	r3, [r3, #4]
 801b144:	021b      	lsls	r3, r3, #8
 801b146:	0a19      	lsrs	r1, r3, #8
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6a1b      	ldr	r3, [r3, #32]
 801b14c:	061a      	lsls	r2, r3, #24
 801b14e:	4bbf      	ldr	r3, [pc, #764]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b150:	430a      	orrs	r2, r1
 801b152:	605a      	str	r2, [r3, #4]
 801b154:	e019      	b.n	801b18a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b156:	4bbd      	ldr	r3, [pc, #756]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b158:	681a      	ldr	r2, [r3, #0]
 801b15a:	4bbc      	ldr	r3, [pc, #752]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b15c:	49bd      	ldr	r1, [pc, #756]	@ (801b454 <HAL_RCC_OscConfig+0x690>)
 801b15e:	400a      	ands	r2, r1
 801b160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b162:	f7f9 f9f3 	bl	801454c <HAL_GetTick>
 801b166:	0003      	movs	r3, r0
 801b168:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b16a:	e008      	b.n	801b17e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b16c:	f7f9 f9ee 	bl	801454c <HAL_GetTick>
 801b170:	0002      	movs	r2, r0
 801b172:	697b      	ldr	r3, [r7, #20]
 801b174:	1ad3      	subs	r3, r2, r3
 801b176:	2b02      	cmp	r3, #2
 801b178:	d901      	bls.n	801b17e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b17a:	2303      	movs	r3, #3
 801b17c:	e1eb      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b17e:	4bb3      	ldr	r3, [pc, #716]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b180:	681a      	ldr	r2, [r3, #0]
 801b182:	2380      	movs	r3, #128	@ 0x80
 801b184:	009b      	lsls	r3, r3, #2
 801b186:	4013      	ands	r3, r2
 801b188:	d1f0      	bne.n	801b16c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	2208      	movs	r2, #8
 801b190:	4013      	ands	r3, r2
 801b192:	d036      	beq.n	801b202 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	695b      	ldr	r3, [r3, #20]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d019      	beq.n	801b1d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b19c:	4bab      	ldr	r3, [pc, #684]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b19e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b1a0:	4baa      	ldr	r3, [pc, #680]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b1a2:	2101      	movs	r1, #1
 801b1a4:	430a      	orrs	r2, r1
 801b1a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b1a8:	f7f9 f9d0 	bl	801454c <HAL_GetTick>
 801b1ac:	0003      	movs	r3, r0
 801b1ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b1b0:	e008      	b.n	801b1c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b1b2:	f7f9 f9cb 	bl	801454c <HAL_GetTick>
 801b1b6:	0002      	movs	r2, r0
 801b1b8:	697b      	ldr	r3, [r7, #20]
 801b1ba:	1ad3      	subs	r3, r2, r3
 801b1bc:	2b02      	cmp	r3, #2
 801b1be:	d901      	bls.n	801b1c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b1c0:	2303      	movs	r3, #3
 801b1c2:	e1c8      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b1c4:	4ba1      	ldr	r3, [pc, #644]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b1c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1c8:	2202      	movs	r2, #2
 801b1ca:	4013      	ands	r3, r2
 801b1cc:	d0f1      	beq.n	801b1b2 <HAL_RCC_OscConfig+0x3ee>
 801b1ce:	e018      	b.n	801b202 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b1d0:	4b9e      	ldr	r3, [pc, #632]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b1d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b1d4:	4b9d      	ldr	r3, [pc, #628]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b1d6:	2101      	movs	r1, #1
 801b1d8:	438a      	bics	r2, r1
 801b1da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b1dc:	f7f9 f9b6 	bl	801454c <HAL_GetTick>
 801b1e0:	0003      	movs	r3, r0
 801b1e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b1e4:	e008      	b.n	801b1f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b1e6:	f7f9 f9b1 	bl	801454c <HAL_GetTick>
 801b1ea:	0002      	movs	r2, r0
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	1ad3      	subs	r3, r2, r3
 801b1f0:	2b02      	cmp	r3, #2
 801b1f2:	d901      	bls.n	801b1f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b1f4:	2303      	movs	r3, #3
 801b1f6:	e1ae      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b1f8:	4b94      	ldr	r3, [pc, #592]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b1fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1fc:	2202      	movs	r2, #2
 801b1fe:	4013      	ands	r3, r2
 801b200:	d1f1      	bne.n	801b1e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2204      	movs	r2, #4
 801b208:	4013      	ands	r3, r2
 801b20a:	d100      	bne.n	801b20e <HAL_RCC_OscConfig+0x44a>
 801b20c:	e0ae      	b.n	801b36c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b20e:	2023      	movs	r0, #35	@ 0x23
 801b210:	183b      	adds	r3, r7, r0
 801b212:	2200      	movs	r2, #0
 801b214:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b216:	4b8d      	ldr	r3, [pc, #564]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b21a:	2380      	movs	r3, #128	@ 0x80
 801b21c:	055b      	lsls	r3, r3, #21
 801b21e:	4013      	ands	r3, r2
 801b220:	d109      	bne.n	801b236 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b222:	4b8a      	ldr	r3, [pc, #552]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b226:	4b89      	ldr	r3, [pc, #548]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b228:	2180      	movs	r1, #128	@ 0x80
 801b22a:	0549      	lsls	r1, r1, #21
 801b22c:	430a      	orrs	r2, r1
 801b22e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b230:	183b      	adds	r3, r7, r0
 801b232:	2201      	movs	r2, #1
 801b234:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b236:	4b88      	ldr	r3, [pc, #544]	@ (801b458 <HAL_RCC_OscConfig+0x694>)
 801b238:	681a      	ldr	r2, [r3, #0]
 801b23a:	2380      	movs	r3, #128	@ 0x80
 801b23c:	005b      	lsls	r3, r3, #1
 801b23e:	4013      	ands	r3, r2
 801b240:	d11a      	bne.n	801b278 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b242:	4b85      	ldr	r3, [pc, #532]	@ (801b458 <HAL_RCC_OscConfig+0x694>)
 801b244:	681a      	ldr	r2, [r3, #0]
 801b246:	4b84      	ldr	r3, [pc, #528]	@ (801b458 <HAL_RCC_OscConfig+0x694>)
 801b248:	2180      	movs	r1, #128	@ 0x80
 801b24a:	0049      	lsls	r1, r1, #1
 801b24c:	430a      	orrs	r2, r1
 801b24e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b250:	f7f9 f97c 	bl	801454c <HAL_GetTick>
 801b254:	0003      	movs	r3, r0
 801b256:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b258:	e008      	b.n	801b26c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b25a:	f7f9 f977 	bl	801454c <HAL_GetTick>
 801b25e:	0002      	movs	r2, r0
 801b260:	697b      	ldr	r3, [r7, #20]
 801b262:	1ad3      	subs	r3, r2, r3
 801b264:	2b64      	cmp	r3, #100	@ 0x64
 801b266:	d901      	bls.n	801b26c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b268:	2303      	movs	r3, #3
 801b26a:	e174      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b26c:	4b7a      	ldr	r3, [pc, #488]	@ (801b458 <HAL_RCC_OscConfig+0x694>)
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	2380      	movs	r3, #128	@ 0x80
 801b272:	005b      	lsls	r3, r3, #1
 801b274:	4013      	ands	r3, r2
 801b276:	d0f0      	beq.n	801b25a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	689a      	ldr	r2, [r3, #8]
 801b27c:	2380      	movs	r3, #128	@ 0x80
 801b27e:	005b      	lsls	r3, r3, #1
 801b280:	429a      	cmp	r2, r3
 801b282:	d107      	bne.n	801b294 <HAL_RCC_OscConfig+0x4d0>
 801b284:	4b71      	ldr	r3, [pc, #452]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b288:	4b70      	ldr	r3, [pc, #448]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b28a:	2180      	movs	r1, #128	@ 0x80
 801b28c:	0049      	lsls	r1, r1, #1
 801b28e:	430a      	orrs	r2, r1
 801b290:	651a      	str	r2, [r3, #80]	@ 0x50
 801b292:	e031      	b.n	801b2f8 <HAL_RCC_OscConfig+0x534>
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	689b      	ldr	r3, [r3, #8]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d10c      	bne.n	801b2b6 <HAL_RCC_OscConfig+0x4f2>
 801b29c:	4b6b      	ldr	r3, [pc, #428]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b29e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2a0:	4b6a      	ldr	r3, [pc, #424]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2a2:	496c      	ldr	r1, [pc, #432]	@ (801b454 <HAL_RCC_OscConfig+0x690>)
 801b2a4:	400a      	ands	r2, r1
 801b2a6:	651a      	str	r2, [r3, #80]	@ 0x50
 801b2a8:	4b68      	ldr	r3, [pc, #416]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2ac:	4b67      	ldr	r3, [pc, #412]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2ae:	496b      	ldr	r1, [pc, #428]	@ (801b45c <HAL_RCC_OscConfig+0x698>)
 801b2b0:	400a      	ands	r2, r1
 801b2b2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b2b4:	e020      	b.n	801b2f8 <HAL_RCC_OscConfig+0x534>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	689a      	ldr	r2, [r3, #8]
 801b2ba:	23a0      	movs	r3, #160	@ 0xa0
 801b2bc:	00db      	lsls	r3, r3, #3
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	d10e      	bne.n	801b2e0 <HAL_RCC_OscConfig+0x51c>
 801b2c2:	4b62      	ldr	r3, [pc, #392]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2c6:	4b61      	ldr	r3, [pc, #388]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2c8:	2180      	movs	r1, #128	@ 0x80
 801b2ca:	00c9      	lsls	r1, r1, #3
 801b2cc:	430a      	orrs	r2, r1
 801b2ce:	651a      	str	r2, [r3, #80]	@ 0x50
 801b2d0:	4b5e      	ldr	r3, [pc, #376]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2d4:	4b5d      	ldr	r3, [pc, #372]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2d6:	2180      	movs	r1, #128	@ 0x80
 801b2d8:	0049      	lsls	r1, r1, #1
 801b2da:	430a      	orrs	r2, r1
 801b2dc:	651a      	str	r2, [r3, #80]	@ 0x50
 801b2de:	e00b      	b.n	801b2f8 <HAL_RCC_OscConfig+0x534>
 801b2e0:	4b5a      	ldr	r3, [pc, #360]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2e4:	4b59      	ldr	r3, [pc, #356]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2e6:	495b      	ldr	r1, [pc, #364]	@ (801b454 <HAL_RCC_OscConfig+0x690>)
 801b2e8:	400a      	ands	r2, r1
 801b2ea:	651a      	str	r2, [r3, #80]	@ 0x50
 801b2ec:	4b57      	ldr	r3, [pc, #348]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2f0:	4b56      	ldr	r3, [pc, #344]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b2f2:	495a      	ldr	r1, [pc, #360]	@ (801b45c <HAL_RCC_OscConfig+0x698>)
 801b2f4:	400a      	ands	r2, r1
 801b2f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	689b      	ldr	r3, [r3, #8]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d015      	beq.n	801b32c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b300:	f7f9 f924 	bl	801454c <HAL_GetTick>
 801b304:	0003      	movs	r3, r0
 801b306:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b308:	e009      	b.n	801b31e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b30a:	f7f9 f91f 	bl	801454c <HAL_GetTick>
 801b30e:	0002      	movs	r2, r0
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	1ad3      	subs	r3, r2, r3
 801b314:	4a52      	ldr	r2, [pc, #328]	@ (801b460 <HAL_RCC_OscConfig+0x69c>)
 801b316:	4293      	cmp	r3, r2
 801b318:	d901      	bls.n	801b31e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b31a:	2303      	movs	r3, #3
 801b31c:	e11b      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b31e:	4b4b      	ldr	r3, [pc, #300]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b322:	2380      	movs	r3, #128	@ 0x80
 801b324:	009b      	lsls	r3, r3, #2
 801b326:	4013      	ands	r3, r2
 801b328:	d0ef      	beq.n	801b30a <HAL_RCC_OscConfig+0x546>
 801b32a:	e014      	b.n	801b356 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b32c:	f7f9 f90e 	bl	801454c <HAL_GetTick>
 801b330:	0003      	movs	r3, r0
 801b332:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b334:	e009      	b.n	801b34a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b336:	f7f9 f909 	bl	801454c <HAL_GetTick>
 801b33a:	0002      	movs	r2, r0
 801b33c:	697b      	ldr	r3, [r7, #20]
 801b33e:	1ad3      	subs	r3, r2, r3
 801b340:	4a47      	ldr	r2, [pc, #284]	@ (801b460 <HAL_RCC_OscConfig+0x69c>)
 801b342:	4293      	cmp	r3, r2
 801b344:	d901      	bls.n	801b34a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b346:	2303      	movs	r3, #3
 801b348:	e105      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b34a:	4b40      	ldr	r3, [pc, #256]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b34c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b34e:	2380      	movs	r3, #128	@ 0x80
 801b350:	009b      	lsls	r3, r3, #2
 801b352:	4013      	ands	r3, r2
 801b354:	d1ef      	bne.n	801b336 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b356:	2323      	movs	r3, #35	@ 0x23
 801b358:	18fb      	adds	r3, r7, r3
 801b35a:	781b      	ldrb	r3, [r3, #0]
 801b35c:	2b01      	cmp	r3, #1
 801b35e:	d105      	bne.n	801b36c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b360:	4b3a      	ldr	r3, [pc, #232]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b364:	4b39      	ldr	r3, [pc, #228]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b366:	493f      	ldr	r1, [pc, #252]	@ (801b464 <HAL_RCC_OscConfig+0x6a0>)
 801b368:	400a      	ands	r2, r1
 801b36a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	2220      	movs	r2, #32
 801b372:	4013      	ands	r3, r2
 801b374:	d049      	beq.n	801b40a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	699b      	ldr	r3, [r3, #24]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d026      	beq.n	801b3cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b37e:	4b33      	ldr	r3, [pc, #204]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b380:	689a      	ldr	r2, [r3, #8]
 801b382:	4b32      	ldr	r3, [pc, #200]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b384:	2101      	movs	r1, #1
 801b386:	430a      	orrs	r2, r1
 801b388:	609a      	str	r2, [r3, #8]
 801b38a:	4b30      	ldr	r3, [pc, #192]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b38c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b38e:	4b2f      	ldr	r3, [pc, #188]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b390:	2101      	movs	r1, #1
 801b392:	430a      	orrs	r2, r1
 801b394:	635a      	str	r2, [r3, #52]	@ 0x34
 801b396:	4b34      	ldr	r3, [pc, #208]	@ (801b468 <HAL_RCC_OscConfig+0x6a4>)
 801b398:	6a1a      	ldr	r2, [r3, #32]
 801b39a:	4b33      	ldr	r3, [pc, #204]	@ (801b468 <HAL_RCC_OscConfig+0x6a4>)
 801b39c:	2180      	movs	r1, #128	@ 0x80
 801b39e:	0189      	lsls	r1, r1, #6
 801b3a0:	430a      	orrs	r2, r1
 801b3a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3a4:	f7f9 f8d2 	bl	801454c <HAL_GetTick>
 801b3a8:	0003      	movs	r3, r0
 801b3aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b3ac:	e008      	b.n	801b3c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b3ae:	f7f9 f8cd 	bl	801454c <HAL_GetTick>
 801b3b2:	0002      	movs	r2, r0
 801b3b4:	697b      	ldr	r3, [r7, #20]
 801b3b6:	1ad3      	subs	r3, r2, r3
 801b3b8:	2b02      	cmp	r3, #2
 801b3ba:	d901      	bls.n	801b3c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b3bc:	2303      	movs	r3, #3
 801b3be:	e0ca      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b3c0:	4b22      	ldr	r3, [pc, #136]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b3c2:	689b      	ldr	r3, [r3, #8]
 801b3c4:	2202      	movs	r2, #2
 801b3c6:	4013      	ands	r3, r2
 801b3c8:	d0f1      	beq.n	801b3ae <HAL_RCC_OscConfig+0x5ea>
 801b3ca:	e01e      	b.n	801b40a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b3cc:	4b1f      	ldr	r3, [pc, #124]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b3ce:	689a      	ldr	r2, [r3, #8]
 801b3d0:	4b1e      	ldr	r3, [pc, #120]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b3d2:	2101      	movs	r1, #1
 801b3d4:	438a      	bics	r2, r1
 801b3d6:	609a      	str	r2, [r3, #8]
 801b3d8:	4b23      	ldr	r3, [pc, #140]	@ (801b468 <HAL_RCC_OscConfig+0x6a4>)
 801b3da:	6a1a      	ldr	r2, [r3, #32]
 801b3dc:	4b22      	ldr	r3, [pc, #136]	@ (801b468 <HAL_RCC_OscConfig+0x6a4>)
 801b3de:	4923      	ldr	r1, [pc, #140]	@ (801b46c <HAL_RCC_OscConfig+0x6a8>)
 801b3e0:	400a      	ands	r2, r1
 801b3e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b3e4:	f7f9 f8b2 	bl	801454c <HAL_GetTick>
 801b3e8:	0003      	movs	r3, r0
 801b3ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b3ec:	e008      	b.n	801b400 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b3ee:	f7f9 f8ad 	bl	801454c <HAL_GetTick>
 801b3f2:	0002      	movs	r2, r0
 801b3f4:	697b      	ldr	r3, [r7, #20]
 801b3f6:	1ad3      	subs	r3, r2, r3
 801b3f8:	2b02      	cmp	r3, #2
 801b3fa:	d901      	bls.n	801b400 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b3fc:	2303      	movs	r3, #3
 801b3fe:	e0aa      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b400:	4b12      	ldr	r3, [pc, #72]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	2202      	movs	r2, #2
 801b406:	4013      	ands	r3, r2
 801b408:	d1f1      	bne.n	801b3ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d100      	bne.n	801b414 <HAL_RCC_OscConfig+0x650>
 801b412:	e09f      	b.n	801b554 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b414:	69fb      	ldr	r3, [r7, #28]
 801b416:	2b0c      	cmp	r3, #12
 801b418:	d100      	bne.n	801b41c <HAL_RCC_OscConfig+0x658>
 801b41a:	e078      	b.n	801b50e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b420:	2b02      	cmp	r3, #2
 801b422:	d159      	bne.n	801b4d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b424:	4b09      	ldr	r3, [pc, #36]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b426:	681a      	ldr	r2, [r3, #0]
 801b428:	4b08      	ldr	r3, [pc, #32]	@ (801b44c <HAL_RCC_OscConfig+0x688>)
 801b42a:	4911      	ldr	r1, [pc, #68]	@ (801b470 <HAL_RCC_OscConfig+0x6ac>)
 801b42c:	400a      	ands	r2, r1
 801b42e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b430:	f7f9 f88c 	bl	801454c <HAL_GetTick>
 801b434:	0003      	movs	r3, r0
 801b436:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b438:	e01c      	b.n	801b474 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b43a:	f7f9 f887 	bl	801454c <HAL_GetTick>
 801b43e:	0002      	movs	r2, r0
 801b440:	697b      	ldr	r3, [r7, #20]
 801b442:	1ad3      	subs	r3, r2, r3
 801b444:	2b02      	cmp	r3, #2
 801b446:	d915      	bls.n	801b474 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801b448:	2303      	movs	r3, #3
 801b44a:	e084      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
 801b44c:	40021000 	.word	0x40021000
 801b450:	ffff1fff 	.word	0xffff1fff
 801b454:	fffffeff 	.word	0xfffffeff
 801b458:	40007000 	.word	0x40007000
 801b45c:	fffffbff 	.word	0xfffffbff
 801b460:	00001388 	.word	0x00001388
 801b464:	efffffff 	.word	0xefffffff
 801b468:	40010000 	.word	0x40010000
 801b46c:	ffffdfff 	.word	0xffffdfff
 801b470:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b474:	4b3a      	ldr	r3, [pc, #232]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b476:	681a      	ldr	r2, [r3, #0]
 801b478:	2380      	movs	r3, #128	@ 0x80
 801b47a:	049b      	lsls	r3, r3, #18
 801b47c:	4013      	ands	r3, r2
 801b47e:	d1dc      	bne.n	801b43a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b480:	4b37      	ldr	r3, [pc, #220]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b482:	68db      	ldr	r3, [r3, #12]
 801b484:	4a37      	ldr	r2, [pc, #220]	@ (801b564 <HAL_RCC_OscConfig+0x7a0>)
 801b486:	4013      	ands	r3, r2
 801b488:	0019      	movs	r1, r3
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b492:	431a      	orrs	r2, r3
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b498:	431a      	orrs	r2, r3
 801b49a:	4b31      	ldr	r3, [pc, #196]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b49c:	430a      	orrs	r2, r1
 801b49e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b4a0:	4b2f      	ldr	r3, [pc, #188]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	4b2e      	ldr	r3, [pc, #184]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b4a6:	2180      	movs	r1, #128	@ 0x80
 801b4a8:	0449      	lsls	r1, r1, #17
 801b4aa:	430a      	orrs	r2, r1
 801b4ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4ae:	f7f9 f84d 	bl	801454c <HAL_GetTick>
 801b4b2:	0003      	movs	r3, r0
 801b4b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b4b6:	e008      	b.n	801b4ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b4b8:	f7f9 f848 	bl	801454c <HAL_GetTick>
 801b4bc:	0002      	movs	r2, r0
 801b4be:	697b      	ldr	r3, [r7, #20]
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	2b02      	cmp	r3, #2
 801b4c4:	d901      	bls.n	801b4ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801b4c6:	2303      	movs	r3, #3
 801b4c8:	e045      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801b4ca:	4b25      	ldr	r3, [pc, #148]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b4cc:	681a      	ldr	r2, [r3, #0]
 801b4ce:	2380      	movs	r3, #128	@ 0x80
 801b4d0:	049b      	lsls	r3, r3, #18
 801b4d2:	4013      	ands	r3, r2
 801b4d4:	d0f0      	beq.n	801b4b8 <HAL_RCC_OscConfig+0x6f4>
 801b4d6:	e03d      	b.n	801b554 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b4d8:	4b21      	ldr	r3, [pc, #132]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b4da:	681a      	ldr	r2, [r3, #0]
 801b4dc:	4b20      	ldr	r3, [pc, #128]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b4de:	4922      	ldr	r1, [pc, #136]	@ (801b568 <HAL_RCC_OscConfig+0x7a4>)
 801b4e0:	400a      	ands	r2, r1
 801b4e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4e4:	f7f9 f832 	bl	801454c <HAL_GetTick>
 801b4e8:	0003      	movs	r3, r0
 801b4ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b4ec:	e008      	b.n	801b500 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801b4ee:	f7f9 f82d 	bl	801454c <HAL_GetTick>
 801b4f2:	0002      	movs	r2, r0
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	1ad3      	subs	r3, r2, r3
 801b4f8:	2b02      	cmp	r3, #2
 801b4fa:	d901      	bls.n	801b500 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801b4fc:	2303      	movs	r3, #3
 801b4fe:	e02a      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801b500:	4b17      	ldr	r3, [pc, #92]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	2380      	movs	r3, #128	@ 0x80
 801b506:	049b      	lsls	r3, r3, #18
 801b508:	4013      	ands	r3, r2
 801b50a:	d1f0      	bne.n	801b4ee <HAL_RCC_OscConfig+0x72a>
 801b50c:	e022      	b.n	801b554 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b512:	2b01      	cmp	r3, #1
 801b514:	d101      	bne.n	801b51a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801b516:	2301      	movs	r3, #1
 801b518:	e01d      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801b51a:	4b11      	ldr	r3, [pc, #68]	@ (801b560 <HAL_RCC_OscConfig+0x79c>)
 801b51c:	68db      	ldr	r3, [r3, #12]
 801b51e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b520:	69ba      	ldr	r2, [r7, #24]
 801b522:	2380      	movs	r3, #128	@ 0x80
 801b524:	025b      	lsls	r3, r3, #9
 801b526:	401a      	ands	r2, r3
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b52c:	429a      	cmp	r2, r3
 801b52e:	d10f      	bne.n	801b550 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b530:	69ba      	ldr	r2, [r7, #24]
 801b532:	23f0      	movs	r3, #240	@ 0xf0
 801b534:	039b      	lsls	r3, r3, #14
 801b536:	401a      	ands	r2, r3
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b53c:	429a      	cmp	r2, r3
 801b53e:	d107      	bne.n	801b550 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801b540:	69ba      	ldr	r2, [r7, #24]
 801b542:	23c0      	movs	r3, #192	@ 0xc0
 801b544:	041b      	lsls	r3, r3, #16
 801b546:	401a      	ands	r2, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d001      	beq.n	801b554 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801b550:	2301      	movs	r3, #1
 801b552:	e000      	b.n	801b556 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801b554:	2300      	movs	r3, #0
}
 801b556:	0018      	movs	r0, r3
 801b558:	46bd      	mov	sp, r7
 801b55a:	b00a      	add	sp, #40	@ 0x28
 801b55c:	bdb0      	pop	{r4, r5, r7, pc}
 801b55e:	46c0      	nop			@ (mov r8, r8)
 801b560:	40021000 	.word	0x40021000
 801b564:	ff02ffff 	.word	0xff02ffff
 801b568:	feffffff 	.word	0xfeffffff

0801b56c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b56c:	b5b0      	push	{r4, r5, r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b57c:	2301      	movs	r3, #1
 801b57e:	e128      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b580:	4b96      	ldr	r3, [pc, #600]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	2201      	movs	r2, #1
 801b586:	4013      	ands	r3, r2
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d91e      	bls.n	801b5cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b58e:	4b93      	ldr	r3, [pc, #588]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	2201      	movs	r2, #1
 801b594:	4393      	bics	r3, r2
 801b596:	0019      	movs	r1, r3
 801b598:	4b90      	ldr	r3, [pc, #576]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b59a:	683a      	ldr	r2, [r7, #0]
 801b59c:	430a      	orrs	r2, r1
 801b59e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b5a0:	f7f8 ffd4 	bl	801454c <HAL_GetTick>
 801b5a4:	0003      	movs	r3, r0
 801b5a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b5a8:	e009      	b.n	801b5be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b5aa:	f7f8 ffcf 	bl	801454c <HAL_GetTick>
 801b5ae:	0002      	movs	r2, r0
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	1ad3      	subs	r3, r2, r3
 801b5b4:	4a8a      	ldr	r2, [pc, #552]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b5b6:	4293      	cmp	r3, r2
 801b5b8:	d901      	bls.n	801b5be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801b5ba:	2303      	movs	r3, #3
 801b5bc:	e109      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b5be:	4b87      	ldr	r3, [pc, #540]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	4013      	ands	r3, r2
 801b5c6:	683a      	ldr	r2, [r7, #0]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d1ee      	bne.n	801b5aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	2202      	movs	r2, #2
 801b5d2:	4013      	ands	r3, r2
 801b5d4:	d009      	beq.n	801b5ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b5d6:	4b83      	ldr	r3, [pc, #524]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b5d8:	68db      	ldr	r3, [r3, #12]
 801b5da:	22f0      	movs	r2, #240	@ 0xf0
 801b5dc:	4393      	bics	r3, r2
 801b5de:	0019      	movs	r1, r3
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	689a      	ldr	r2, [r3, #8]
 801b5e4:	4b7f      	ldr	r3, [pc, #508]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b5e6:	430a      	orrs	r2, r1
 801b5e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	2201      	movs	r2, #1
 801b5f0:	4013      	ands	r3, r2
 801b5f2:	d100      	bne.n	801b5f6 <HAL_RCC_ClockConfig+0x8a>
 801b5f4:	e089      	b.n	801b70a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	2b02      	cmp	r3, #2
 801b5fc:	d107      	bne.n	801b60e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b5fe:	4b79      	ldr	r3, [pc, #484]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b600:	681a      	ldr	r2, [r3, #0]
 801b602:	2380      	movs	r3, #128	@ 0x80
 801b604:	029b      	lsls	r3, r3, #10
 801b606:	4013      	ands	r3, r2
 801b608:	d120      	bne.n	801b64c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b60a:	2301      	movs	r3, #1
 801b60c:	e0e1      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	685b      	ldr	r3, [r3, #4]
 801b612:	2b03      	cmp	r3, #3
 801b614:	d107      	bne.n	801b626 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b616:	4b73      	ldr	r3, [pc, #460]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b618:	681a      	ldr	r2, [r3, #0]
 801b61a:	2380      	movs	r3, #128	@ 0x80
 801b61c:	049b      	lsls	r3, r3, #18
 801b61e:	4013      	ands	r3, r2
 801b620:	d114      	bne.n	801b64c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b622:	2301      	movs	r3, #1
 801b624:	e0d5      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	685b      	ldr	r3, [r3, #4]
 801b62a:	2b01      	cmp	r3, #1
 801b62c:	d106      	bne.n	801b63c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b62e:	4b6d      	ldr	r3, [pc, #436]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	2204      	movs	r2, #4
 801b634:	4013      	ands	r3, r2
 801b636:	d109      	bne.n	801b64c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b638:	2301      	movs	r3, #1
 801b63a:	e0ca      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b63c:	4b69      	ldr	r3, [pc, #420]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b63e:	681a      	ldr	r2, [r3, #0]
 801b640:	2380      	movs	r3, #128	@ 0x80
 801b642:	009b      	lsls	r3, r3, #2
 801b644:	4013      	ands	r3, r2
 801b646:	d101      	bne.n	801b64c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b648:	2301      	movs	r3, #1
 801b64a:	e0c2      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b64c:	4b65      	ldr	r3, [pc, #404]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b64e:	68db      	ldr	r3, [r3, #12]
 801b650:	2203      	movs	r2, #3
 801b652:	4393      	bics	r3, r2
 801b654:	0019      	movs	r1, r3
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	685a      	ldr	r2, [r3, #4]
 801b65a:	4b62      	ldr	r3, [pc, #392]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b65c:	430a      	orrs	r2, r1
 801b65e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b660:	f7f8 ff74 	bl	801454c <HAL_GetTick>
 801b664:	0003      	movs	r3, r0
 801b666:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	685b      	ldr	r3, [r3, #4]
 801b66c:	2b02      	cmp	r3, #2
 801b66e:	d111      	bne.n	801b694 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801b670:	e009      	b.n	801b686 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b672:	f7f8 ff6b 	bl	801454c <HAL_GetTick>
 801b676:	0002      	movs	r2, r0
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	1ad3      	subs	r3, r2, r3
 801b67c:	4a58      	ldr	r2, [pc, #352]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b67e:	4293      	cmp	r3, r2
 801b680:	d901      	bls.n	801b686 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801b682:	2303      	movs	r3, #3
 801b684:	e0a5      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801b686:	4b57      	ldr	r3, [pc, #348]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b688:	68db      	ldr	r3, [r3, #12]
 801b68a:	220c      	movs	r2, #12
 801b68c:	4013      	ands	r3, r2
 801b68e:	2b08      	cmp	r3, #8
 801b690:	d1ef      	bne.n	801b672 <HAL_RCC_ClockConfig+0x106>
 801b692:	e03a      	b.n	801b70a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	685b      	ldr	r3, [r3, #4]
 801b698:	2b03      	cmp	r3, #3
 801b69a:	d111      	bne.n	801b6c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b69c:	e009      	b.n	801b6b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b69e:	f7f8 ff55 	bl	801454c <HAL_GetTick>
 801b6a2:	0002      	movs	r2, r0
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	1ad3      	subs	r3, r2, r3
 801b6a8:	4a4d      	ldr	r2, [pc, #308]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b6aa:	4293      	cmp	r3, r2
 801b6ac:	d901      	bls.n	801b6b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801b6ae:	2303      	movs	r3, #3
 801b6b0:	e08f      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b6b2:	4b4c      	ldr	r3, [pc, #304]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b6b4:	68db      	ldr	r3, [r3, #12]
 801b6b6:	220c      	movs	r2, #12
 801b6b8:	4013      	ands	r3, r2
 801b6ba:	2b0c      	cmp	r3, #12
 801b6bc:	d1ef      	bne.n	801b69e <HAL_RCC_ClockConfig+0x132>
 801b6be:	e024      	b.n	801b70a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	685b      	ldr	r3, [r3, #4]
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d11b      	bne.n	801b700 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801b6c8:	e009      	b.n	801b6de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b6ca:	f7f8 ff3f 	bl	801454c <HAL_GetTick>
 801b6ce:	0002      	movs	r2, r0
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	1ad3      	subs	r3, r2, r3
 801b6d4:	4a42      	ldr	r2, [pc, #264]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	d901      	bls.n	801b6de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801b6da:	2303      	movs	r3, #3
 801b6dc:	e079      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801b6de:	4b41      	ldr	r3, [pc, #260]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b6e0:	68db      	ldr	r3, [r3, #12]
 801b6e2:	220c      	movs	r2, #12
 801b6e4:	4013      	ands	r3, r2
 801b6e6:	2b04      	cmp	r3, #4
 801b6e8:	d1ef      	bne.n	801b6ca <HAL_RCC_ClockConfig+0x15e>
 801b6ea:	e00e      	b.n	801b70a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b6ec:	f7f8 ff2e 	bl	801454c <HAL_GetTick>
 801b6f0:	0002      	movs	r2, r0
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	1ad3      	subs	r3, r2, r3
 801b6f6:	4a3a      	ldr	r2, [pc, #232]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	d901      	bls.n	801b700 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801b6fc:	2303      	movs	r3, #3
 801b6fe:	e068      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801b700:	4b38      	ldr	r3, [pc, #224]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b702:	68db      	ldr	r3, [r3, #12]
 801b704:	220c      	movs	r2, #12
 801b706:	4013      	ands	r3, r2
 801b708:	d1f0      	bne.n	801b6ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b70a:	4b34      	ldr	r3, [pc, #208]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	2201      	movs	r2, #1
 801b710:	4013      	ands	r3, r2
 801b712:	683a      	ldr	r2, [r7, #0]
 801b714:	429a      	cmp	r2, r3
 801b716:	d21e      	bcs.n	801b756 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b718:	4b30      	ldr	r3, [pc, #192]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	2201      	movs	r2, #1
 801b71e:	4393      	bics	r3, r2
 801b720:	0019      	movs	r1, r3
 801b722:	4b2e      	ldr	r3, [pc, #184]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b724:	683a      	ldr	r2, [r7, #0]
 801b726:	430a      	orrs	r2, r1
 801b728:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b72a:	f7f8 ff0f 	bl	801454c <HAL_GetTick>
 801b72e:	0003      	movs	r3, r0
 801b730:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b732:	e009      	b.n	801b748 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b734:	f7f8 ff0a 	bl	801454c <HAL_GetTick>
 801b738:	0002      	movs	r2, r0
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	1ad3      	subs	r3, r2, r3
 801b73e:	4a28      	ldr	r2, [pc, #160]	@ (801b7e0 <HAL_RCC_ClockConfig+0x274>)
 801b740:	4293      	cmp	r3, r2
 801b742:	d901      	bls.n	801b748 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801b744:	2303      	movs	r3, #3
 801b746:	e044      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b748:	4b24      	ldr	r3, [pc, #144]	@ (801b7dc <HAL_RCC_ClockConfig+0x270>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	2201      	movs	r2, #1
 801b74e:	4013      	ands	r3, r2
 801b750:	683a      	ldr	r2, [r7, #0]
 801b752:	429a      	cmp	r2, r3
 801b754:	d1ee      	bne.n	801b734 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	2204      	movs	r2, #4
 801b75c:	4013      	ands	r3, r2
 801b75e:	d009      	beq.n	801b774 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b760:	4b20      	ldr	r3, [pc, #128]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b762:	68db      	ldr	r3, [r3, #12]
 801b764:	4a20      	ldr	r2, [pc, #128]	@ (801b7e8 <HAL_RCC_ClockConfig+0x27c>)
 801b766:	4013      	ands	r3, r2
 801b768:	0019      	movs	r1, r3
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	68da      	ldr	r2, [r3, #12]
 801b76e:	4b1d      	ldr	r3, [pc, #116]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b770:	430a      	orrs	r2, r1
 801b772:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2208      	movs	r2, #8
 801b77a:	4013      	ands	r3, r2
 801b77c:	d00a      	beq.n	801b794 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801b77e:	4b19      	ldr	r3, [pc, #100]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b780:	68db      	ldr	r3, [r3, #12]
 801b782:	4a1a      	ldr	r2, [pc, #104]	@ (801b7ec <HAL_RCC_ClockConfig+0x280>)
 801b784:	4013      	ands	r3, r2
 801b786:	0019      	movs	r1, r3
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	691b      	ldr	r3, [r3, #16]
 801b78c:	00da      	lsls	r2, r3, #3
 801b78e:	4b15      	ldr	r3, [pc, #84]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b790:	430a      	orrs	r2, r1
 801b792:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b794:	f000 f832 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 801b798:	0001      	movs	r1, r0
 801b79a:	4b12      	ldr	r3, [pc, #72]	@ (801b7e4 <HAL_RCC_ClockConfig+0x278>)
 801b79c:	68db      	ldr	r3, [r3, #12]
 801b79e:	091b      	lsrs	r3, r3, #4
 801b7a0:	220f      	movs	r2, #15
 801b7a2:	4013      	ands	r3, r2
 801b7a4:	4a12      	ldr	r2, [pc, #72]	@ (801b7f0 <HAL_RCC_ClockConfig+0x284>)
 801b7a6:	5cd3      	ldrb	r3, [r2, r3]
 801b7a8:	000a      	movs	r2, r1
 801b7aa:	40da      	lsrs	r2, r3
 801b7ac:	4b11      	ldr	r3, [pc, #68]	@ (801b7f4 <HAL_RCC_ClockConfig+0x288>)
 801b7ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801b7b0:	4b11      	ldr	r3, [pc, #68]	@ (801b7f8 <HAL_RCC_ClockConfig+0x28c>)
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	250b      	movs	r5, #11
 801b7b6:	197c      	adds	r4, r7, r5
 801b7b8:	0018      	movs	r0, r3
 801b7ba:	f7f8 fe81 	bl	80144c0 <HAL_InitTick>
 801b7be:	0003      	movs	r3, r0
 801b7c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801b7c2:	197b      	adds	r3, r7, r5
 801b7c4:	781b      	ldrb	r3, [r3, #0]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d002      	beq.n	801b7d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801b7ca:	197b      	adds	r3, r7, r5
 801b7cc:	781b      	ldrb	r3, [r3, #0]
 801b7ce:	e000      	b.n	801b7d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801b7d0:	2300      	movs	r3, #0
}
 801b7d2:	0018      	movs	r0, r3
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	b004      	add	sp, #16
 801b7d8:	bdb0      	pop	{r4, r5, r7, pc}
 801b7da:	46c0      	nop			@ (mov r8, r8)
 801b7dc:	40022000 	.word	0x40022000
 801b7e0:	00001388 	.word	0x00001388
 801b7e4:	40021000 	.word	0x40021000
 801b7e8:	fffff8ff 	.word	0xfffff8ff
 801b7ec:	ffffc7ff 	.word	0xffffc7ff
 801b7f0:	0802e1b4 	.word	0x0802e1b4
 801b7f4:	200000ec 	.word	0x200000ec
 801b7f8:	200000fc 	.word	0x200000fc

0801b7fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b7fc:	b5b0      	push	{r4, r5, r7, lr}
 801b7fe:	b08e      	sub	sp, #56	@ 0x38
 801b800:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801b802:	4b4c      	ldr	r3, [pc, #304]	@ (801b934 <HAL_RCC_GetSysClockFreq+0x138>)
 801b804:	68db      	ldr	r3, [r3, #12]
 801b806:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801b808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b80a:	230c      	movs	r3, #12
 801b80c:	4013      	ands	r3, r2
 801b80e:	2b0c      	cmp	r3, #12
 801b810:	d014      	beq.n	801b83c <HAL_RCC_GetSysClockFreq+0x40>
 801b812:	d900      	bls.n	801b816 <HAL_RCC_GetSysClockFreq+0x1a>
 801b814:	e07b      	b.n	801b90e <HAL_RCC_GetSysClockFreq+0x112>
 801b816:	2b04      	cmp	r3, #4
 801b818:	d002      	beq.n	801b820 <HAL_RCC_GetSysClockFreq+0x24>
 801b81a:	2b08      	cmp	r3, #8
 801b81c:	d00b      	beq.n	801b836 <HAL_RCC_GetSysClockFreq+0x3a>
 801b81e:	e076      	b.n	801b90e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b820:	4b44      	ldr	r3, [pc, #272]	@ (801b934 <HAL_RCC_GetSysClockFreq+0x138>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	2210      	movs	r2, #16
 801b826:	4013      	ands	r3, r2
 801b828:	d002      	beq.n	801b830 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801b82a:	4b43      	ldr	r3, [pc, #268]	@ (801b938 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b82c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801b82e:	e07c      	b.n	801b92a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801b830:	4b42      	ldr	r3, [pc, #264]	@ (801b93c <HAL_RCC_GetSysClockFreq+0x140>)
 801b832:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b834:	e079      	b.n	801b92a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801b836:	4b42      	ldr	r3, [pc, #264]	@ (801b940 <HAL_RCC_GetSysClockFreq+0x144>)
 801b838:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b83a:	e076      	b.n	801b92a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b83e:	0c9a      	lsrs	r2, r3, #18
 801b840:	230f      	movs	r3, #15
 801b842:	401a      	ands	r2, r3
 801b844:	4b3f      	ldr	r3, [pc, #252]	@ (801b944 <HAL_RCC_GetSysClockFreq+0x148>)
 801b846:	5c9b      	ldrb	r3, [r3, r2]
 801b848:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801b84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b84c:	0d9a      	lsrs	r2, r3, #22
 801b84e:	2303      	movs	r3, #3
 801b850:	4013      	ands	r3, r2
 801b852:	3301      	adds	r3, #1
 801b854:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b856:	4b37      	ldr	r3, [pc, #220]	@ (801b934 <HAL_RCC_GetSysClockFreq+0x138>)
 801b858:	68da      	ldr	r2, [r3, #12]
 801b85a:	2380      	movs	r3, #128	@ 0x80
 801b85c:	025b      	lsls	r3, r3, #9
 801b85e:	4013      	ands	r3, r2
 801b860:	d01a      	beq.n	801b898 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b864:	61bb      	str	r3, [r7, #24]
 801b866:	2300      	movs	r3, #0
 801b868:	61fb      	str	r3, [r7, #28]
 801b86a:	4a35      	ldr	r2, [pc, #212]	@ (801b940 <HAL_RCC_GetSysClockFreq+0x144>)
 801b86c:	2300      	movs	r3, #0
 801b86e:	69b8      	ldr	r0, [r7, #24]
 801b870:	69f9      	ldr	r1, [r7, #28]
 801b872:	f7e4 fea5 	bl	80005c0 <__aeabi_lmul>
 801b876:	0002      	movs	r2, r0
 801b878:	000b      	movs	r3, r1
 801b87a:	0010      	movs	r0, r2
 801b87c:	0019      	movs	r1, r3
 801b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b880:	613b      	str	r3, [r7, #16]
 801b882:	2300      	movs	r3, #0
 801b884:	617b      	str	r3, [r7, #20]
 801b886:	693a      	ldr	r2, [r7, #16]
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	f7e4 fe79 	bl	8000580 <__aeabi_uldivmod>
 801b88e:	0002      	movs	r2, r0
 801b890:	000b      	movs	r3, r1
 801b892:	0013      	movs	r3, r2
 801b894:	637b      	str	r3, [r7, #52]	@ 0x34
 801b896:	e037      	b.n	801b908 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b898:	4b26      	ldr	r3, [pc, #152]	@ (801b934 <HAL_RCC_GetSysClockFreq+0x138>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	2210      	movs	r2, #16
 801b89e:	4013      	ands	r3, r2
 801b8a0:	d01a      	beq.n	801b8d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801b8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8a4:	60bb      	str	r3, [r7, #8]
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	60fb      	str	r3, [r7, #12]
 801b8aa:	4a23      	ldr	r2, [pc, #140]	@ (801b938 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	68b8      	ldr	r0, [r7, #8]
 801b8b0:	68f9      	ldr	r1, [r7, #12]
 801b8b2:	f7e4 fe85 	bl	80005c0 <__aeabi_lmul>
 801b8b6:	0002      	movs	r2, r0
 801b8b8:	000b      	movs	r3, r1
 801b8ba:	0010      	movs	r0, r2
 801b8bc:	0019      	movs	r1, r3
 801b8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8c0:	603b      	str	r3, [r7, #0]
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	607b      	str	r3, [r7, #4]
 801b8c6:	683a      	ldr	r2, [r7, #0]
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	f7e4 fe59 	bl	8000580 <__aeabi_uldivmod>
 801b8ce:	0002      	movs	r2, r0
 801b8d0:	000b      	movs	r3, r1
 801b8d2:	0013      	movs	r3, r2
 801b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b8d6:	e017      	b.n	801b908 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8da:	0018      	movs	r0, r3
 801b8dc:	2300      	movs	r3, #0
 801b8de:	0019      	movs	r1, r3
 801b8e0:	4a16      	ldr	r2, [pc, #88]	@ (801b93c <HAL_RCC_GetSysClockFreq+0x140>)
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	f7e4 fe6c 	bl	80005c0 <__aeabi_lmul>
 801b8e8:	0002      	movs	r2, r0
 801b8ea:	000b      	movs	r3, r1
 801b8ec:	0010      	movs	r0, r2
 801b8ee:	0019      	movs	r1, r3
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f2:	001c      	movs	r4, r3
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	001d      	movs	r5, r3
 801b8f8:	0022      	movs	r2, r4
 801b8fa:	002b      	movs	r3, r5
 801b8fc:	f7e4 fe40 	bl	8000580 <__aeabi_uldivmod>
 801b900:	0002      	movs	r2, r0
 801b902:	000b      	movs	r3, r1
 801b904:	0013      	movs	r3, r2
 801b906:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801b908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b90a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b90c:	e00d      	b.n	801b92a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801b90e:	4b09      	ldr	r3, [pc, #36]	@ (801b934 <HAL_RCC_GetSysClockFreq+0x138>)
 801b910:	685b      	ldr	r3, [r3, #4]
 801b912:	0b5b      	lsrs	r3, r3, #13
 801b914:	2207      	movs	r2, #7
 801b916:	4013      	ands	r3, r2
 801b918:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801b91a:	6a3b      	ldr	r3, [r7, #32]
 801b91c:	3301      	adds	r3, #1
 801b91e:	2280      	movs	r2, #128	@ 0x80
 801b920:	0212      	lsls	r2, r2, #8
 801b922:	409a      	lsls	r2, r3
 801b924:	0013      	movs	r3, r2
 801b926:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b928:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801b92c:	0018      	movs	r0, r3
 801b92e:	46bd      	mov	sp, r7
 801b930:	b00e      	add	sp, #56	@ 0x38
 801b932:	bdb0      	pop	{r4, r5, r7, pc}
 801b934:	40021000 	.word	0x40021000
 801b938:	003d0900 	.word	0x003d0900
 801b93c:	00f42400 	.word	0x00f42400
 801b940:	007a1200 	.word	0x007a1200
 801b944:	0802e1cc 	.word	0x0802e1cc

0801b948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b94c:	4b02      	ldr	r3, [pc, #8]	@ (801b958 <HAL_RCC_GetHCLKFreq+0x10>)
 801b94e:	681b      	ldr	r3, [r3, #0]
}
 801b950:	0018      	movs	r0, r3
 801b952:	46bd      	mov	sp, r7
 801b954:	bd80      	pop	{r7, pc}
 801b956:	46c0      	nop			@ (mov r8, r8)
 801b958:	200000ec 	.word	0x200000ec

0801b95c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b960:	f7ff fff2 	bl	801b948 <HAL_RCC_GetHCLKFreq>
 801b964:	0001      	movs	r1, r0
 801b966:	4b06      	ldr	r3, [pc, #24]	@ (801b980 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b968:	68db      	ldr	r3, [r3, #12]
 801b96a:	0a1b      	lsrs	r3, r3, #8
 801b96c:	2207      	movs	r2, #7
 801b96e:	4013      	ands	r3, r2
 801b970:	4a04      	ldr	r2, [pc, #16]	@ (801b984 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b972:	5cd3      	ldrb	r3, [r2, r3]
 801b974:	40d9      	lsrs	r1, r3
 801b976:	000b      	movs	r3, r1
}
 801b978:	0018      	movs	r0, r3
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	46c0      	nop			@ (mov r8, r8)
 801b980:	40021000 	.word	0x40021000
 801b984:	0802e1c4 	.word	0x0802e1c4

0801b988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801b98c:	f7ff ffdc 	bl	801b948 <HAL_RCC_GetHCLKFreq>
 801b990:	0001      	movs	r1, r0
 801b992:	4b06      	ldr	r3, [pc, #24]	@ (801b9ac <HAL_RCC_GetPCLK2Freq+0x24>)
 801b994:	68db      	ldr	r3, [r3, #12]
 801b996:	0adb      	lsrs	r3, r3, #11
 801b998:	2207      	movs	r2, #7
 801b99a:	4013      	ands	r3, r2
 801b99c:	4a04      	ldr	r2, [pc, #16]	@ (801b9b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b99e:	5cd3      	ldrb	r3, [r2, r3]
 801b9a0:	40d9      	lsrs	r1, r3
 801b9a2:	000b      	movs	r3, r1
}
 801b9a4:	0018      	movs	r0, r3
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
 801b9aa:	46c0      	nop			@ (mov r8, r8)
 801b9ac:	40021000 	.word	0x40021000
 801b9b0:	0802e1c4 	.word	0x0802e1c4

0801b9b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b086      	sub	sp, #24
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801b9bc:	2017      	movs	r0, #23
 801b9be:	183b      	adds	r3, r7, r0
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	2220      	movs	r2, #32
 801b9ca:	4013      	ands	r3, r2
 801b9cc:	d100      	bne.n	801b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801b9ce:	e0c7      	b.n	801bb60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b9d0:	4b9b      	ldr	r3, [pc, #620]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b9d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b9d4:	2380      	movs	r3, #128	@ 0x80
 801b9d6:	055b      	lsls	r3, r3, #21
 801b9d8:	4013      	ands	r3, r2
 801b9da:	d109      	bne.n	801b9f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b9dc:	4b98      	ldr	r3, [pc, #608]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b9de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b9e0:	4b97      	ldr	r3, [pc, #604]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b9e2:	2180      	movs	r1, #128	@ 0x80
 801b9e4:	0549      	lsls	r1, r1, #21
 801b9e6:	430a      	orrs	r2, r1
 801b9e8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b9ea:	183b      	adds	r3, r7, r0
 801b9ec:	2201      	movs	r2, #1
 801b9ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b9f0:	4b94      	ldr	r3, [pc, #592]	@ (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b9f2:	681a      	ldr	r2, [r3, #0]
 801b9f4:	2380      	movs	r3, #128	@ 0x80
 801b9f6:	005b      	lsls	r3, r3, #1
 801b9f8:	4013      	ands	r3, r2
 801b9fa:	d11a      	bne.n	801ba32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b9fc:	4b91      	ldr	r3, [pc, #580]	@ (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b9fe:	681a      	ldr	r2, [r3, #0]
 801ba00:	4b90      	ldr	r3, [pc, #576]	@ (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801ba02:	2180      	movs	r1, #128	@ 0x80
 801ba04:	0049      	lsls	r1, r1, #1
 801ba06:	430a      	orrs	r2, r1
 801ba08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ba0a:	f7f8 fd9f 	bl	801454c <HAL_GetTick>
 801ba0e:	0003      	movs	r3, r0
 801ba10:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ba12:	e008      	b.n	801ba26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ba14:	f7f8 fd9a 	bl	801454c <HAL_GetTick>
 801ba18:	0002      	movs	r2, r0
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	1ad3      	subs	r3, r2, r3
 801ba1e:	2b64      	cmp	r3, #100	@ 0x64
 801ba20:	d901      	bls.n	801ba26 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801ba22:	2303      	movs	r3, #3
 801ba24:	e107      	b.n	801bc36 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ba26:	4b87      	ldr	r3, [pc, #540]	@ (801bc44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801ba28:	681a      	ldr	r2, [r3, #0]
 801ba2a:	2380      	movs	r3, #128	@ 0x80
 801ba2c:	005b      	lsls	r3, r3, #1
 801ba2e:	4013      	ands	r3, r2
 801ba30:	d0f0      	beq.n	801ba14 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801ba32:	4b83      	ldr	r3, [pc, #524]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ba34:	681a      	ldr	r2, [r3, #0]
 801ba36:	23c0      	movs	r3, #192	@ 0xc0
 801ba38:	039b      	lsls	r3, r3, #14
 801ba3a:	4013      	ands	r3, r2
 801ba3c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	685a      	ldr	r2, [r3, #4]
 801ba42:	23c0      	movs	r3, #192	@ 0xc0
 801ba44:	039b      	lsls	r3, r3, #14
 801ba46:	4013      	ands	r3, r2
 801ba48:	68fa      	ldr	r2, [r7, #12]
 801ba4a:	429a      	cmp	r2, r3
 801ba4c:	d013      	beq.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	685a      	ldr	r2, [r3, #4]
 801ba52:	23c0      	movs	r3, #192	@ 0xc0
 801ba54:	029b      	lsls	r3, r3, #10
 801ba56:	401a      	ands	r2, r3
 801ba58:	23c0      	movs	r3, #192	@ 0xc0
 801ba5a:	029b      	lsls	r3, r3, #10
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	d10a      	bne.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801ba60:	4b77      	ldr	r3, [pc, #476]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ba62:	681a      	ldr	r2, [r3, #0]
 801ba64:	2380      	movs	r3, #128	@ 0x80
 801ba66:	029b      	lsls	r3, r3, #10
 801ba68:	401a      	ands	r2, r3
 801ba6a:	2380      	movs	r3, #128	@ 0x80
 801ba6c:	029b      	lsls	r3, r3, #10
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	d101      	bne.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801ba72:	2301      	movs	r3, #1
 801ba74:	e0df      	b.n	801bc36 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801ba76:	4b72      	ldr	r3, [pc, #456]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ba78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ba7a:	23c0      	movs	r3, #192	@ 0xc0
 801ba7c:	029b      	lsls	r3, r3, #10
 801ba7e:	4013      	ands	r3, r2
 801ba80:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d03b      	beq.n	801bb00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	685a      	ldr	r2, [r3, #4]
 801ba8c:	23c0      	movs	r3, #192	@ 0xc0
 801ba8e:	029b      	lsls	r3, r3, #10
 801ba90:	4013      	ands	r3, r2
 801ba92:	68fa      	ldr	r2, [r7, #12]
 801ba94:	429a      	cmp	r2, r3
 801ba96:	d033      	beq.n	801bb00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	2220      	movs	r2, #32
 801ba9e:	4013      	ands	r3, r2
 801baa0:	d02e      	beq.n	801bb00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801baa2:	4b67      	ldr	r3, [pc, #412]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801baa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801baa6:	4a68      	ldr	r2, [pc, #416]	@ (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801baa8:	4013      	ands	r3, r2
 801baaa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801baac:	4b64      	ldr	r3, [pc, #400]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801baae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bab0:	4b63      	ldr	r3, [pc, #396]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bab2:	2180      	movs	r1, #128	@ 0x80
 801bab4:	0309      	lsls	r1, r1, #12
 801bab6:	430a      	orrs	r2, r1
 801bab8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801baba:	4b61      	ldr	r3, [pc, #388]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801babc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801babe:	4b60      	ldr	r3, [pc, #384]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bac0:	4962      	ldr	r1, [pc, #392]	@ (801bc4c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801bac2:	400a      	ands	r2, r1
 801bac4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801bac6:	4b5e      	ldr	r3, [pc, #376]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bac8:	68fa      	ldr	r2, [r7, #12]
 801baca:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801bacc:	68fa      	ldr	r2, [r7, #12]
 801bace:	2380      	movs	r3, #128	@ 0x80
 801bad0:	005b      	lsls	r3, r3, #1
 801bad2:	4013      	ands	r3, r2
 801bad4:	d014      	beq.n	801bb00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801bad6:	f7f8 fd39 	bl	801454c <HAL_GetTick>
 801bada:	0003      	movs	r3, r0
 801badc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bade:	e009      	b.n	801baf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bae0:	f7f8 fd34 	bl	801454c <HAL_GetTick>
 801bae4:	0002      	movs	r2, r0
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	1ad3      	subs	r3, r2, r3
 801baea:	4a59      	ldr	r2, [pc, #356]	@ (801bc50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801baec:	4293      	cmp	r3, r2
 801baee:	d901      	bls.n	801baf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801baf0:	2303      	movs	r3, #3
 801baf2:	e0a0      	b.n	801bc36 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801baf4:	4b52      	ldr	r3, [pc, #328]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801baf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801baf8:	2380      	movs	r3, #128	@ 0x80
 801bafa:	009b      	lsls	r3, r3, #2
 801bafc:	4013      	ands	r3, r2
 801bafe:	d0ef      	beq.n	801bae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	2220      	movs	r2, #32
 801bb06:	4013      	ands	r3, r2
 801bb08:	d01f      	beq.n	801bb4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	685a      	ldr	r2, [r3, #4]
 801bb0e:	23c0      	movs	r3, #192	@ 0xc0
 801bb10:	029b      	lsls	r3, r3, #10
 801bb12:	401a      	ands	r2, r3
 801bb14:	23c0      	movs	r3, #192	@ 0xc0
 801bb16:	029b      	lsls	r3, r3, #10
 801bb18:	429a      	cmp	r2, r3
 801bb1a:	d10c      	bne.n	801bb36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801bb1c:	4b48      	ldr	r3, [pc, #288]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	4a4c      	ldr	r2, [pc, #304]	@ (801bc54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801bb22:	4013      	ands	r3, r2
 801bb24:	0019      	movs	r1, r3
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	685a      	ldr	r2, [r3, #4]
 801bb2a:	23c0      	movs	r3, #192	@ 0xc0
 801bb2c:	039b      	lsls	r3, r3, #14
 801bb2e:	401a      	ands	r2, r3
 801bb30:	4b43      	ldr	r3, [pc, #268]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb32:	430a      	orrs	r2, r1
 801bb34:	601a      	str	r2, [r3, #0]
 801bb36:	4b42      	ldr	r3, [pc, #264]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	685a      	ldr	r2, [r3, #4]
 801bb3e:	23c0      	movs	r3, #192	@ 0xc0
 801bb40:	029b      	lsls	r3, r3, #10
 801bb42:	401a      	ands	r2, r3
 801bb44:	4b3e      	ldr	r3, [pc, #248]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb46:	430a      	orrs	r2, r1
 801bb48:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801bb4a:	2317      	movs	r3, #23
 801bb4c:	18fb      	adds	r3, r7, r3
 801bb4e:	781b      	ldrb	r3, [r3, #0]
 801bb50:	2b01      	cmp	r3, #1
 801bb52:	d105      	bne.n	801bb60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bb54:	4b3a      	ldr	r3, [pc, #232]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bb58:	4b39      	ldr	r3, [pc, #228]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb5a:	493f      	ldr	r1, [pc, #252]	@ (801bc58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801bb5c:	400a      	ands	r2, r1
 801bb5e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	2201      	movs	r2, #1
 801bb66:	4013      	ands	r3, r2
 801bb68:	d009      	beq.n	801bb7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801bb6a:	4b35      	ldr	r3, [pc, #212]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb6e:	2203      	movs	r2, #3
 801bb70:	4393      	bics	r3, r2
 801bb72:	0019      	movs	r1, r3
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	689a      	ldr	r2, [r3, #8]
 801bb78:	4b31      	ldr	r3, [pc, #196]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb7a:	430a      	orrs	r2, r1
 801bb7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	2202      	movs	r2, #2
 801bb84:	4013      	ands	r3, r2
 801bb86:	d009      	beq.n	801bb9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801bb88:	4b2d      	ldr	r3, [pc, #180]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb8c:	220c      	movs	r2, #12
 801bb8e:	4393      	bics	r3, r2
 801bb90:	0019      	movs	r1, r3
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	68da      	ldr	r2, [r3, #12]
 801bb96:	4b2a      	ldr	r3, [pc, #168]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bb98:	430a      	orrs	r2, r1
 801bb9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	2204      	movs	r2, #4
 801bba2:	4013      	ands	r3, r2
 801bba4:	d009      	beq.n	801bbba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bba6:	4b26      	ldr	r3, [pc, #152]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbaa:	4a2c      	ldr	r2, [pc, #176]	@ (801bc5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801bbac:	4013      	ands	r3, r2
 801bbae:	0019      	movs	r1, r3
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	691a      	ldr	r2, [r3, #16]
 801bbb4:	4b22      	ldr	r3, [pc, #136]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bbb6:	430a      	orrs	r2, r1
 801bbb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	2208      	movs	r2, #8
 801bbc0:	4013      	ands	r3, r2
 801bbc2:	d009      	beq.n	801bbd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801bbc4:	4b1e      	ldr	r3, [pc, #120]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bbc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbc8:	4a25      	ldr	r2, [pc, #148]	@ (801bc60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801bbca:	4013      	ands	r3, r2
 801bbcc:	0019      	movs	r1, r3
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	695a      	ldr	r2, [r3, #20]
 801bbd2:	4b1b      	ldr	r3, [pc, #108]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bbd4:	430a      	orrs	r2, r1
 801bbd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681a      	ldr	r2, [r3, #0]
 801bbdc:	2380      	movs	r3, #128	@ 0x80
 801bbde:	005b      	lsls	r3, r3, #1
 801bbe0:	4013      	ands	r3, r2
 801bbe2:	d009      	beq.n	801bbf8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801bbe4:	4b16      	ldr	r3, [pc, #88]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bbe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbe8:	4a17      	ldr	r2, [pc, #92]	@ (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801bbea:	4013      	ands	r3, r2
 801bbec:	0019      	movs	r1, r3
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	699a      	ldr	r2, [r3, #24]
 801bbf2:	4b13      	ldr	r3, [pc, #76]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bbf4:	430a      	orrs	r2, r1
 801bbf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	2240      	movs	r2, #64	@ 0x40
 801bbfe:	4013      	ands	r3, r2
 801bc00:	d009      	beq.n	801bc16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bc02:	4b0f      	ldr	r3, [pc, #60]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bc04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bc06:	4a17      	ldr	r2, [pc, #92]	@ (801bc64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801bc08:	4013      	ands	r3, r2
 801bc0a:	0019      	movs	r1, r3
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6a1a      	ldr	r2, [r3, #32]
 801bc10:	4b0b      	ldr	r3, [pc, #44]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bc12:	430a      	orrs	r2, r1
 801bc14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	2280      	movs	r2, #128	@ 0x80
 801bc1c:	4013      	ands	r3, r2
 801bc1e:	d009      	beq.n	801bc34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801bc20:	4b07      	ldr	r3, [pc, #28]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bc22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bc24:	4a10      	ldr	r2, [pc, #64]	@ (801bc68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801bc26:	4013      	ands	r3, r2
 801bc28:	0019      	movs	r1, r3
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	69da      	ldr	r2, [r3, #28]
 801bc2e:	4b04      	ldr	r3, [pc, #16]	@ (801bc40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bc30:	430a      	orrs	r2, r1
 801bc32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801bc34:	2300      	movs	r3, #0
}
 801bc36:	0018      	movs	r0, r3
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	b006      	add	sp, #24
 801bc3c:	bd80      	pop	{r7, pc}
 801bc3e:	46c0      	nop			@ (mov r8, r8)
 801bc40:	40021000 	.word	0x40021000
 801bc44:	40007000 	.word	0x40007000
 801bc48:	fffcffff 	.word	0xfffcffff
 801bc4c:	fff7ffff 	.word	0xfff7ffff
 801bc50:	00001388 	.word	0x00001388
 801bc54:	ffcfffff 	.word	0xffcfffff
 801bc58:	efffffff 	.word	0xefffffff
 801bc5c:	fffff3ff 	.word	0xfffff3ff
 801bc60:	ffffcfff 	.word	0xffffcfff
 801bc64:	fbffffff 	.word	0xfbffffff
 801bc68:	fff3ffff 	.word	0xfff3ffff

0801bc6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801bc6c:	b5b0      	push	{r4, r5, r7, lr}
 801bc6e:	b084      	sub	sp, #16
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801bc74:	230f      	movs	r3, #15
 801bc76:	18fb      	adds	r3, r7, r3
 801bc78:	2201      	movs	r2, #1
 801bc7a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d101      	bne.n	801bc86 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801bc82:	2301      	movs	r3, #1
 801bc84:	e088      	b.n	801bd98 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	2221      	movs	r2, #33	@ 0x21
 801bc8a:	5c9b      	ldrb	r3, [r3, r2]
 801bc8c:	b2db      	uxtb	r3, r3
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d107      	bne.n	801bca2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	2220      	movs	r2, #32
 801bc96:	2100      	movs	r1, #0
 801bc98:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	0018      	movs	r0, r3
 801bc9e:	f7f2 fab3 	bl	800e208 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	2221      	movs	r2, #33	@ 0x21
 801bca6:	2102      	movs	r1, #2
 801bca8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	68db      	ldr	r3, [r3, #12]
 801bcb0:	2210      	movs	r2, #16
 801bcb2:	4013      	ands	r3, r2
 801bcb4:	2b10      	cmp	r3, #16
 801bcb6:	d05f      	beq.n	801bd78 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	22ca      	movs	r2, #202	@ 0xca
 801bcbe:	625a      	str	r2, [r3, #36]	@ 0x24
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	2253      	movs	r2, #83	@ 0x53
 801bcc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801bcc8:	250f      	movs	r5, #15
 801bcca:	197c      	adds	r4, r7, r5
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	0018      	movs	r0, r3
 801bcd0:	f000 fa99 	bl	801c206 <RTC_EnterInitMode>
 801bcd4:	0003      	movs	r3, r0
 801bcd6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801bcd8:	0028      	movs	r0, r5
 801bcda:	183b      	adds	r3, r7, r0
 801bcdc:	781b      	ldrb	r3, [r3, #0]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d12c      	bne.n	801bd3c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	689a      	ldr	r2, [r3, #8]
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	492c      	ldr	r1, [pc, #176]	@ (801bda0 <HAL_RTC_Init+0x134>)
 801bcee:	400a      	ands	r2, r1
 801bcf0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	6899      	ldr	r1, [r3, #8]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	685a      	ldr	r2, [r3, #4]
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	691b      	ldr	r3, [r3, #16]
 801bd00:	431a      	orrs	r2, r3
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	699b      	ldr	r3, [r3, #24]
 801bd06:	431a      	orrs	r2, r3
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	430a      	orrs	r2, r1
 801bd0e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	687a      	ldr	r2, [r7, #4]
 801bd16:	68d2      	ldr	r2, [r2, #12]
 801bd18:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	6919      	ldr	r1, [r3, #16]
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	689b      	ldr	r3, [r3, #8]
 801bd24:	041a      	lsls	r2, r3, #16
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	430a      	orrs	r2, r1
 801bd2c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801bd2e:	183c      	adds	r4, r7, r0
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	0018      	movs	r0, r3
 801bd34:	f000 faab 	bl	801c28e <RTC_ExitInitMode>
 801bd38:	0003      	movs	r3, r0
 801bd3a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801bd3c:	230f      	movs	r3, #15
 801bd3e:	18fb      	adds	r3, r7, r3
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d113      	bne.n	801bd6e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	2103      	movs	r1, #3
 801bd52:	438a      	bics	r2, r1
 801bd54:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	69da      	ldr	r2, [r3, #28]
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	695b      	ldr	r3, [r3, #20]
 801bd64:	431a      	orrs	r2, r3
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	430a      	orrs	r2, r1
 801bd6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	22ff      	movs	r2, #255	@ 0xff
 801bd74:	625a      	str	r2, [r3, #36]	@ 0x24
 801bd76:	e003      	b.n	801bd80 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801bd78:	230f      	movs	r3, #15
 801bd7a:	18fb      	adds	r3, r7, r3
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801bd80:	230f      	movs	r3, #15
 801bd82:	18fb      	adds	r3, r7, r3
 801bd84:	781b      	ldrb	r3, [r3, #0]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d103      	bne.n	801bd92 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	2221      	movs	r2, #33	@ 0x21
 801bd8e:	2101      	movs	r1, #1
 801bd90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801bd92:	230f      	movs	r3, #15
 801bd94:	18fb      	adds	r3, r7, r3
 801bd96:	781b      	ldrb	r3, [r3, #0]
}
 801bd98:	0018      	movs	r0, r3
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	b004      	add	sp, #16
 801bd9e:	bdb0      	pop	{r4, r5, r7, pc}
 801bda0:	ff8fffbf 	.word	0xff8fffbf

0801bda4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801bda4:	b5b0      	push	{r4, r5, r7, lr}
 801bda6:	b086      	sub	sp, #24
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	60f8      	str	r0, [r7, #12]
 801bdac:	60b9      	str	r1, [r7, #8]
 801bdae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	2220      	movs	r2, #32
 801bdb8:	5c9b      	ldrb	r3, [r3, r2]
 801bdba:	2b01      	cmp	r3, #1
 801bdbc:	d101      	bne.n	801bdc2 <HAL_RTC_SetTime+0x1e>
 801bdbe:	2302      	movs	r3, #2
 801bdc0:	e092      	b.n	801bee8 <HAL_RTC_SetTime+0x144>
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	2220      	movs	r2, #32
 801bdc6:	2101      	movs	r1, #1
 801bdc8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	2221      	movs	r2, #33	@ 0x21
 801bdce:	2102      	movs	r1, #2
 801bdd0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d125      	bne.n	801be24 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	689b      	ldr	r3, [r3, #8]
 801bdde:	2240      	movs	r2, #64	@ 0x40
 801bde0:	4013      	ands	r3, r2
 801bde2:	d102      	bne.n	801bdea <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801bde4:	68bb      	ldr	r3, [r7, #8]
 801bde6:	2200      	movs	r2, #0
 801bde8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	0018      	movs	r0, r3
 801bdf0:	f000 fa77 	bl	801c2e2 <RTC_ByteToBcd2>
 801bdf4:	0003      	movs	r3, r0
 801bdf6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801bdf8:	68bb      	ldr	r3, [r7, #8]
 801bdfa:	785b      	ldrb	r3, [r3, #1]
 801bdfc:	0018      	movs	r0, r3
 801bdfe:	f000 fa70 	bl	801c2e2 <RTC_ByteToBcd2>
 801be02:	0003      	movs	r3, r0
 801be04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801be06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	789b      	ldrb	r3, [r3, #2]
 801be0c:	0018      	movs	r0, r3
 801be0e:	f000 fa68 	bl	801c2e2 <RTC_ByteToBcd2>
 801be12:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801be14:	0022      	movs	r2, r4
 801be16:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801be18:	68bb      	ldr	r3, [r7, #8]
 801be1a:	78db      	ldrb	r3, [r3, #3]
 801be1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801be1e:	4313      	orrs	r3, r2
 801be20:	617b      	str	r3, [r7, #20]
 801be22:	e017      	b.n	801be54 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	689b      	ldr	r3, [r3, #8]
 801be2a:	2240      	movs	r2, #64	@ 0x40
 801be2c:	4013      	ands	r3, r2
 801be2e:	d102      	bne.n	801be36 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	2200      	movs	r2, #0
 801be34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801be36:	68bb      	ldr	r3, [r7, #8]
 801be38:	781b      	ldrb	r3, [r3, #0]
 801be3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	785b      	ldrb	r3, [r3, #1]
 801be40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801be42:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801be44:	68ba      	ldr	r2, [r7, #8]
 801be46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801be48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	78db      	ldrb	r3, [r3, #3]
 801be4e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801be50:	4313      	orrs	r3, r2
 801be52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	22ca      	movs	r2, #202	@ 0xca
 801be5a:	625a      	str	r2, [r3, #36]	@ 0x24
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	2253      	movs	r2, #83	@ 0x53
 801be62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801be64:	2513      	movs	r5, #19
 801be66:	197c      	adds	r4, r7, r5
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	0018      	movs	r0, r3
 801be6c:	f000 f9cb 	bl	801c206 <RTC_EnterInitMode>
 801be70:	0003      	movs	r3, r0
 801be72:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801be74:	0028      	movs	r0, r5
 801be76:	183b      	adds	r3, r7, r0
 801be78:	781b      	ldrb	r3, [r3, #0]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d120      	bne.n	801bec0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	697a      	ldr	r2, [r7, #20]
 801be84:	491a      	ldr	r1, [pc, #104]	@ (801bef0 <HAL_RTC_SetTime+0x14c>)
 801be86:	400a      	ands	r2, r1
 801be88:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	689a      	ldr	r2, [r3, #8]
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	4917      	ldr	r1, [pc, #92]	@ (801bef4 <HAL_RTC_SetTime+0x150>)
 801be96:	400a      	ands	r2, r1
 801be98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	6899      	ldr	r1, [r3, #8]
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	68da      	ldr	r2, [r3, #12]
 801bea4:	68bb      	ldr	r3, [r7, #8]
 801bea6:	691b      	ldr	r3, [r3, #16]
 801bea8:	431a      	orrs	r2, r3
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	430a      	orrs	r2, r1
 801beb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801beb2:	183c      	adds	r4, r7, r0
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	0018      	movs	r0, r3
 801beb8:	f000 f9e9 	bl	801c28e <RTC_ExitInitMode>
 801bebc:	0003      	movs	r3, r0
 801bebe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801bec0:	2313      	movs	r3, #19
 801bec2:	18fb      	adds	r3, r7, r3
 801bec4:	781b      	ldrb	r3, [r3, #0]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d103      	bne.n	801bed2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	2221      	movs	r2, #33	@ 0x21
 801bece:	2101      	movs	r1, #1
 801bed0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	22ff      	movs	r2, #255	@ 0xff
 801bed8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	2220      	movs	r2, #32
 801bede:	2100      	movs	r1, #0
 801bee0:	5499      	strb	r1, [r3, r2]

  return status;
 801bee2:	2313      	movs	r3, #19
 801bee4:	18fb      	adds	r3, r7, r3
 801bee6:	781b      	ldrb	r3, [r3, #0]
}
 801bee8:	0018      	movs	r0, r3
 801beea:	46bd      	mov	sp, r7
 801beec:	b006      	add	sp, #24
 801beee:	bdb0      	pop	{r4, r5, r7, pc}
 801bef0:	007f7f7f 	.word	0x007f7f7f
 801bef4:	fffbffff 	.word	0xfffbffff

0801bef8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b086      	sub	sp, #24
 801befc:	af00      	add	r7, sp, #0
 801befe:	60f8      	str	r0, [r7, #12]
 801bf00:	60b9      	str	r1, [r7, #8]
 801bf02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801bf04:	2300      	movs	r3, #0
 801bf06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bf0e:	68bb      	ldr	r3, [r7, #8]
 801bf10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	691b      	ldr	r3, [r3, #16]
 801bf18:	045b      	lsls	r3, r3, #17
 801bf1a:	0c5a      	lsrs	r2, r3, #17
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	4a22      	ldr	r2, [pc, #136]	@ (801bfb0 <HAL_RTC_GetTime+0xb8>)
 801bf28:	4013      	ands	r3, r2
 801bf2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801bf2c:	697b      	ldr	r3, [r7, #20]
 801bf2e:	0c1b      	lsrs	r3, r3, #16
 801bf30:	b2db      	uxtb	r3, r3
 801bf32:	223f      	movs	r2, #63	@ 0x3f
 801bf34:	4013      	ands	r3, r2
 801bf36:	b2da      	uxtb	r2, r3
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	0a1b      	lsrs	r3, r3, #8
 801bf40:	b2db      	uxtb	r3, r3
 801bf42:	227f      	movs	r2, #127	@ 0x7f
 801bf44:	4013      	ands	r3, r2
 801bf46:	b2da      	uxtb	r2, r3
 801bf48:	68bb      	ldr	r3, [r7, #8]
 801bf4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	b2db      	uxtb	r3, r3
 801bf50:	227f      	movs	r2, #127	@ 0x7f
 801bf52:	4013      	ands	r3, r2
 801bf54:	b2da      	uxtb	r2, r3
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801bf5a:	697b      	ldr	r3, [r7, #20]
 801bf5c:	0d9b      	lsrs	r3, r3, #22
 801bf5e:	b2db      	uxtb	r3, r3
 801bf60:	2201      	movs	r2, #1
 801bf62:	4013      	ands	r3, r2
 801bf64:	b2da      	uxtb	r2, r3
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d11a      	bne.n	801bfa6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801bf70:	68bb      	ldr	r3, [r7, #8]
 801bf72:	781b      	ldrb	r3, [r3, #0]
 801bf74:	0018      	movs	r0, r3
 801bf76:	f000 f9d5 	bl	801c324 <RTC_Bcd2ToByte>
 801bf7a:	0003      	movs	r3, r0
 801bf7c:	001a      	movs	r2, r3
 801bf7e:	68bb      	ldr	r3, [r7, #8]
 801bf80:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801bf82:	68bb      	ldr	r3, [r7, #8]
 801bf84:	785b      	ldrb	r3, [r3, #1]
 801bf86:	0018      	movs	r0, r3
 801bf88:	f000 f9cc 	bl	801c324 <RTC_Bcd2ToByte>
 801bf8c:	0003      	movs	r3, r0
 801bf8e:	001a      	movs	r2, r3
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801bf94:	68bb      	ldr	r3, [r7, #8]
 801bf96:	789b      	ldrb	r3, [r3, #2]
 801bf98:	0018      	movs	r0, r3
 801bf9a:	f000 f9c3 	bl	801c324 <RTC_Bcd2ToByte>
 801bf9e:	0003      	movs	r3, r0
 801bfa0:	001a      	movs	r2, r3
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801bfa6:	2300      	movs	r3, #0
}
 801bfa8:	0018      	movs	r0, r3
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	b006      	add	sp, #24
 801bfae:	bd80      	pop	{r7, pc}
 801bfb0:	007f7f7f 	.word	0x007f7f7f

0801bfb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801bfb4:	b5b0      	push	{r4, r5, r7, lr}
 801bfb6:	b086      	sub	sp, #24
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	60b9      	str	r1, [r7, #8]
 801bfbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	2220      	movs	r2, #32
 801bfc8:	5c9b      	ldrb	r3, [r3, r2]
 801bfca:	2b01      	cmp	r3, #1
 801bfcc:	d101      	bne.n	801bfd2 <HAL_RTC_SetDate+0x1e>
 801bfce:	2302      	movs	r3, #2
 801bfd0:	e07e      	b.n	801c0d0 <HAL_RTC_SetDate+0x11c>
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	2220      	movs	r2, #32
 801bfd6:	2101      	movs	r1, #1
 801bfd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	2221      	movs	r2, #33	@ 0x21
 801bfde:	2102      	movs	r1, #2
 801bfe0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d10e      	bne.n	801c006 <HAL_RTC_SetDate+0x52>
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	785b      	ldrb	r3, [r3, #1]
 801bfec:	001a      	movs	r2, r3
 801bfee:	2310      	movs	r3, #16
 801bff0:	4013      	ands	r3, r2
 801bff2:	d008      	beq.n	801c006 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	785b      	ldrb	r3, [r3, #1]
 801bff8:	2210      	movs	r2, #16
 801bffa:	4393      	bics	r3, r2
 801bffc:	b2db      	uxtb	r3, r3
 801bffe:	330a      	adds	r3, #10
 801c000:	b2da      	uxtb	r2, r3
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d11c      	bne.n	801c046 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	78db      	ldrb	r3, [r3, #3]
 801c010:	0018      	movs	r0, r3
 801c012:	f000 f966 	bl	801c2e2 <RTC_ByteToBcd2>
 801c016:	0003      	movs	r3, r0
 801c018:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	785b      	ldrb	r3, [r3, #1]
 801c01e:	0018      	movs	r0, r3
 801c020:	f000 f95f 	bl	801c2e2 <RTC_ByteToBcd2>
 801c024:	0003      	movs	r3, r0
 801c026:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c028:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	789b      	ldrb	r3, [r3, #2]
 801c02e:	0018      	movs	r0, r3
 801c030:	f000 f957 	bl	801c2e2 <RTC_ByteToBcd2>
 801c034:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c036:	0022      	movs	r2, r4
 801c038:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c03a:	68bb      	ldr	r3, [r7, #8]
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c040:	4313      	orrs	r3, r2
 801c042:	617b      	str	r3, [r7, #20]
 801c044:	e00e      	b.n	801c064 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c046:	68bb      	ldr	r3, [r7, #8]
 801c048:	78db      	ldrb	r3, [r3, #3]
 801c04a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	785b      	ldrb	r3, [r3, #1]
 801c050:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c052:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c054:	68ba      	ldr	r2, [r7, #8]
 801c056:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c058:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c05a:	68bb      	ldr	r3, [r7, #8]
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c060:	4313      	orrs	r3, r2
 801c062:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	22ca      	movs	r2, #202	@ 0xca
 801c06a:	625a      	str	r2, [r3, #36]	@ 0x24
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	2253      	movs	r2, #83	@ 0x53
 801c072:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c074:	2513      	movs	r5, #19
 801c076:	197c      	adds	r4, r7, r5
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	0018      	movs	r0, r3
 801c07c:	f000 f8c3 	bl	801c206 <RTC_EnterInitMode>
 801c080:	0003      	movs	r3, r0
 801c082:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c084:	0028      	movs	r0, r5
 801c086:	183b      	adds	r3, r7, r0
 801c088:	781b      	ldrb	r3, [r3, #0]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d10c      	bne.n	801c0a8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	697a      	ldr	r2, [r7, #20]
 801c094:	4910      	ldr	r1, [pc, #64]	@ (801c0d8 <HAL_RTC_SetDate+0x124>)
 801c096:	400a      	ands	r2, r1
 801c098:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c09a:	183c      	adds	r4, r7, r0
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	0018      	movs	r0, r3
 801c0a0:	f000 f8f5 	bl	801c28e <RTC_ExitInitMode>
 801c0a4:	0003      	movs	r3, r0
 801c0a6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c0a8:	2313      	movs	r3, #19
 801c0aa:	18fb      	adds	r3, r7, r3
 801c0ac:	781b      	ldrb	r3, [r3, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d103      	bne.n	801c0ba <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	2221      	movs	r2, #33	@ 0x21
 801c0b6:	2101      	movs	r1, #1
 801c0b8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	22ff      	movs	r2, #255	@ 0xff
 801c0c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	2220      	movs	r2, #32
 801c0c6:	2100      	movs	r1, #0
 801c0c8:	5499      	strb	r1, [r3, r2]

  return status;
 801c0ca:	2313      	movs	r3, #19
 801c0cc:	18fb      	adds	r3, r7, r3
 801c0ce:	781b      	ldrb	r3, [r3, #0]
}
 801c0d0:	0018      	movs	r0, r3
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	b006      	add	sp, #24
 801c0d6:	bdb0      	pop	{r4, r5, r7, pc}
 801c0d8:	00ffff3f 	.word	0x00ffff3f

0801c0dc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b086      	sub	sp, #24
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	60b9      	str	r1, [r7, #8]
 801c0e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	685b      	ldr	r3, [r3, #4]
 801c0f2:	4a21      	ldr	r2, [pc, #132]	@ (801c178 <HAL_RTC_GetDate+0x9c>)
 801c0f4:	4013      	ands	r3, r2
 801c0f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	0c1b      	lsrs	r3, r3, #16
 801c0fc:	b2da      	uxtb	r2, r3
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	0a1b      	lsrs	r3, r3, #8
 801c106:	b2db      	uxtb	r3, r3
 801c108:	221f      	movs	r2, #31
 801c10a:	4013      	ands	r3, r2
 801c10c:	b2da      	uxtb	r2, r3
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c112:	697b      	ldr	r3, [r7, #20]
 801c114:	b2db      	uxtb	r3, r3
 801c116:	223f      	movs	r2, #63	@ 0x3f
 801c118:	4013      	ands	r3, r2
 801c11a:	b2da      	uxtb	r2, r3
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	0b5b      	lsrs	r3, r3, #13
 801c124:	b2db      	uxtb	r3, r3
 801c126:	2207      	movs	r2, #7
 801c128:	4013      	ands	r3, r2
 801c12a:	b2da      	uxtb	r2, r3
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d11a      	bne.n	801c16c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c136:	68bb      	ldr	r3, [r7, #8]
 801c138:	78db      	ldrb	r3, [r3, #3]
 801c13a:	0018      	movs	r0, r3
 801c13c:	f000 f8f2 	bl	801c324 <RTC_Bcd2ToByte>
 801c140:	0003      	movs	r3, r0
 801c142:	001a      	movs	r2, r3
 801c144:	68bb      	ldr	r3, [r7, #8]
 801c146:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	785b      	ldrb	r3, [r3, #1]
 801c14c:	0018      	movs	r0, r3
 801c14e:	f000 f8e9 	bl	801c324 <RTC_Bcd2ToByte>
 801c152:	0003      	movs	r3, r0
 801c154:	001a      	movs	r2, r3
 801c156:	68bb      	ldr	r3, [r7, #8]
 801c158:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c15a:	68bb      	ldr	r3, [r7, #8]
 801c15c:	789b      	ldrb	r3, [r3, #2]
 801c15e:	0018      	movs	r0, r3
 801c160:	f000 f8e0 	bl	801c324 <RTC_Bcd2ToByte>
 801c164:	0003      	movs	r3, r0
 801c166:	001a      	movs	r2, r3
 801c168:	68bb      	ldr	r3, [r7, #8]
 801c16a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c16c:	2300      	movs	r3, #0
}
 801c16e:	0018      	movs	r0, r3
 801c170:	46bd      	mov	sp, r7
 801c172:	b006      	add	sp, #24
 801c174:	bd80      	pop	{r7, pc}
 801c176:	46c0      	nop			@ (mov r8, r8)
 801c178:	00ffff3f 	.word	0x00ffff3f

0801c17c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b084      	sub	sp, #16
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c184:	2300      	movs	r3, #0
 801c186:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	4a0e      	ldr	r2, [pc, #56]	@ (801c1c8 <HAL_RTC_WaitForSynchro+0x4c>)
 801c18e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c190:	f7f8 f9dc 	bl	801454c <HAL_GetTick>
 801c194:	0003      	movs	r3, r0
 801c196:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c198:	e00a      	b.n	801c1b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c19a:	f7f8 f9d7 	bl	801454c <HAL_GetTick>
 801c19e:	0002      	movs	r2, r0
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	1ad2      	subs	r2, r2, r3
 801c1a4:	23fa      	movs	r3, #250	@ 0xfa
 801c1a6:	009b      	lsls	r3, r3, #2
 801c1a8:	429a      	cmp	r2, r3
 801c1aa:	d901      	bls.n	801c1b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c1ac:	2303      	movs	r3, #3
 801c1ae:	e006      	b.n	801c1be <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	68db      	ldr	r3, [r3, #12]
 801c1b6:	2220      	movs	r2, #32
 801c1b8:	4013      	ands	r3, r2
 801c1ba:	d0ee      	beq.n	801c19a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c1bc:	2300      	movs	r3, #0
}
 801c1be:	0018      	movs	r0, r3
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	b004      	add	sp, #16
 801c1c4:	bd80      	pop	{r7, pc}
 801c1c6:	46c0      	nop			@ (mov r8, r8)
 801c1c8:	0001ff5f 	.word	0x0001ff5f

0801c1cc <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	22ca      	movs	r2, #202	@ 0xca
 801c1da:	625a      	str	r2, [r3, #36]	@ 0x24
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	2253      	movs	r2, #83	@ 0x53
 801c1e2:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	689a      	ldr	r2, [r3, #8]
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	2180      	movs	r1, #128	@ 0x80
 801c1f0:	0249      	lsls	r1, r1, #9
 801c1f2:	430a      	orrs	r2, r1
 801c1f4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	22ff      	movs	r2, #255	@ 0xff
 801c1fc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c1fe:	46c0      	nop			@ (mov r8, r8)
 801c200:	46bd      	mov	sp, r7
 801c202:	b002      	add	sp, #8
 801c204:	bd80      	pop	{r7, pc}

0801c206 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c206:	b580      	push	{r7, lr}
 801c208:	b084      	sub	sp, #16
 801c20a:	af00      	add	r7, sp, #0
 801c20c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c20e:	2300      	movs	r3, #0
 801c210:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c212:	230f      	movs	r3, #15
 801c214:	18fb      	adds	r3, r7, r3
 801c216:	2200      	movs	r2, #0
 801c218:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	68db      	ldr	r3, [r3, #12]
 801c220:	2240      	movs	r2, #64	@ 0x40
 801c222:	4013      	ands	r3, r2
 801c224:	d12c      	bne.n	801c280 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	68da      	ldr	r2, [r3, #12]
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	2180      	movs	r1, #128	@ 0x80
 801c232:	430a      	orrs	r2, r1
 801c234:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c236:	f7f8 f989 	bl	801454c <HAL_GetTick>
 801c23a:	0003      	movs	r3, r0
 801c23c:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c23e:	e014      	b.n	801c26a <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c240:	f7f8 f984 	bl	801454c <HAL_GetTick>
 801c244:	0002      	movs	r2, r0
 801c246:	68bb      	ldr	r3, [r7, #8]
 801c248:	1ad2      	subs	r2, r2, r3
 801c24a:	200f      	movs	r0, #15
 801c24c:	183b      	adds	r3, r7, r0
 801c24e:	1839      	adds	r1, r7, r0
 801c250:	7809      	ldrb	r1, [r1, #0]
 801c252:	7019      	strb	r1, [r3, #0]
 801c254:	23fa      	movs	r3, #250	@ 0xfa
 801c256:	009b      	lsls	r3, r3, #2
 801c258:	429a      	cmp	r2, r3
 801c25a:	d906      	bls.n	801c26a <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	2221      	movs	r2, #33	@ 0x21
 801c260:	2104      	movs	r1, #4
 801c262:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c264:	183b      	adds	r3, r7, r0
 801c266:	2201      	movs	r2, #1
 801c268:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	68db      	ldr	r3, [r3, #12]
 801c270:	2240      	movs	r2, #64	@ 0x40
 801c272:	4013      	ands	r3, r2
 801c274:	d104      	bne.n	801c280 <RTC_EnterInitMode+0x7a>
 801c276:	230f      	movs	r3, #15
 801c278:	18fb      	adds	r3, r7, r3
 801c27a:	781b      	ldrb	r3, [r3, #0]
 801c27c:	2b01      	cmp	r3, #1
 801c27e:	d1df      	bne.n	801c240 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c280:	230f      	movs	r3, #15
 801c282:	18fb      	adds	r3, r7, r3
 801c284:	781b      	ldrb	r3, [r3, #0]
}
 801c286:	0018      	movs	r0, r3
 801c288:	46bd      	mov	sp, r7
 801c28a:	b004      	add	sp, #16
 801c28c:	bd80      	pop	{r7, pc}

0801c28e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c28e:	b590      	push	{r4, r7, lr}
 801c290:	b085      	sub	sp, #20
 801c292:	af00      	add	r7, sp, #0
 801c294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c296:	240f      	movs	r4, #15
 801c298:	193b      	adds	r3, r7, r4
 801c29a:	2200      	movs	r2, #0
 801c29c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	68da      	ldr	r2, [r3, #12]
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	2180      	movs	r1, #128	@ 0x80
 801c2aa:	438a      	bics	r2, r1
 801c2ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	689b      	ldr	r3, [r3, #8]
 801c2b4:	2220      	movs	r2, #32
 801c2b6:	4013      	ands	r3, r2
 801c2b8:	d10c      	bne.n	801c2d4 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	0018      	movs	r0, r3
 801c2be:	f7ff ff5d 	bl	801c17c <HAL_RTC_WaitForSynchro>
 801c2c2:	1e03      	subs	r3, r0, #0
 801c2c4:	d006      	beq.n	801c2d4 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	2221      	movs	r2, #33	@ 0x21
 801c2ca:	2104      	movs	r1, #4
 801c2cc:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c2ce:	193b      	adds	r3, r7, r4
 801c2d0:	2201      	movs	r2, #1
 801c2d2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c2d4:	230f      	movs	r3, #15
 801c2d6:	18fb      	adds	r3, r7, r3
 801c2d8:	781b      	ldrb	r3, [r3, #0]
}
 801c2da:	0018      	movs	r0, r3
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	b005      	add	sp, #20
 801c2e0:	bd90      	pop	{r4, r7, pc}

0801c2e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c2e2:	b580      	push	{r7, lr}
 801c2e4:	b084      	sub	sp, #16
 801c2e6:	af00      	add	r7, sp, #0
 801c2e8:	0002      	movs	r2, r0
 801c2ea:	1dfb      	adds	r3, r7, #7
 801c2ec:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c2ee:	2300      	movs	r3, #0
 801c2f0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c2f2:	e007      	b.n	801c304 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	3301      	adds	r3, #1
 801c2f8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c2fa:	1dfb      	adds	r3, r7, #7
 801c2fc:	1dfa      	adds	r2, r7, #7
 801c2fe:	7812      	ldrb	r2, [r2, #0]
 801c300:	3a0a      	subs	r2, #10
 801c302:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c304:	1dfb      	adds	r3, r7, #7
 801c306:	781b      	ldrb	r3, [r3, #0]
 801c308:	2b09      	cmp	r3, #9
 801c30a:	d8f3      	bhi.n	801c2f4 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	b2db      	uxtb	r3, r3
 801c310:	011b      	lsls	r3, r3, #4
 801c312:	b2da      	uxtb	r2, r3
 801c314:	1dfb      	adds	r3, r7, #7
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	4313      	orrs	r3, r2
 801c31a:	b2db      	uxtb	r3, r3
}
 801c31c:	0018      	movs	r0, r3
 801c31e:	46bd      	mov	sp, r7
 801c320:	b004      	add	sp, #16
 801c322:	bd80      	pop	{r7, pc}

0801c324 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b084      	sub	sp, #16
 801c328:	af00      	add	r7, sp, #0
 801c32a:	0002      	movs	r2, r0
 801c32c:	1dfb      	adds	r3, r7, #7
 801c32e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c330:	2300      	movs	r3, #0
 801c332:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c334:	1dfb      	adds	r3, r7, #7
 801c336:	781b      	ldrb	r3, [r3, #0]
 801c338:	091b      	lsrs	r3, r3, #4
 801c33a:	b2db      	uxtb	r3, r3
 801c33c:	001a      	movs	r2, r3
 801c33e:	0013      	movs	r3, r2
 801c340:	009b      	lsls	r3, r3, #2
 801c342:	189b      	adds	r3, r3, r2
 801c344:	005b      	lsls	r3, r3, #1
 801c346:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	b2da      	uxtb	r2, r3
 801c34c:	1dfb      	adds	r3, r7, #7
 801c34e:	781b      	ldrb	r3, [r3, #0]
 801c350:	210f      	movs	r1, #15
 801c352:	400b      	ands	r3, r1
 801c354:	b2db      	uxtb	r3, r3
 801c356:	18d3      	adds	r3, r2, r3
 801c358:	b2db      	uxtb	r3, r3
}
 801c35a:	0018      	movs	r0, r3
 801c35c:	46bd      	mov	sp, r7
 801c35e:	b004      	add	sp, #16
 801c360:	bd80      	pop	{r7, pc}
	...

0801c364 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b086      	sub	sp, #24
 801c368:	af00      	add	r7, sp, #0
 801c36a:	60f8      	str	r0, [r7, #12]
 801c36c:	60b9      	str	r1, [r7, #8]
 801c36e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c370:	4b64      	ldr	r3, [pc, #400]	@ (801c504 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	22fa      	movs	r2, #250	@ 0xfa
 801c376:	01d1      	lsls	r1, r2, #7
 801c378:	0018      	movs	r0, r3
 801c37a:	f7e3 ff13 	bl	80001a4 <__udivsi3>
 801c37e:	0003      	movs	r3, r0
 801c380:	001a      	movs	r2, r3
 801c382:	0013      	movs	r3, r2
 801c384:	015b      	lsls	r3, r3, #5
 801c386:	1a9b      	subs	r3, r3, r2
 801c388:	009b      	lsls	r3, r3, #2
 801c38a:	189b      	adds	r3, r3, r2
 801c38c:	00db      	lsls	r3, r3, #3
 801c38e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	2220      	movs	r2, #32
 801c394:	5c9b      	ldrb	r3, [r3, r2]
 801c396:	2b01      	cmp	r3, #1
 801c398:	d101      	bne.n	801c39e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c39a:	2302      	movs	r3, #2
 801c39c:	e0ad      	b.n	801c4fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	2220      	movs	r2, #32
 801c3a2:	2101      	movs	r1, #1
 801c3a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	2221      	movs	r2, #33	@ 0x21
 801c3aa:	2102      	movs	r1, #2
 801c3ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	22ca      	movs	r2, #202	@ 0xca
 801c3b4:	625a      	str	r2, [r3, #36]	@ 0x24
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	2253      	movs	r2, #83	@ 0x53
 801c3bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	689a      	ldr	r2, [r3, #8]
 801c3c4:	2380      	movs	r3, #128	@ 0x80
 801c3c6:	00db      	lsls	r3, r3, #3
 801c3c8:	4013      	ands	r3, r2
 801c3ca:	d019      	beq.n	801c400 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c3cc:	697b      	ldr	r3, [r7, #20]
 801c3ce:	3b01      	subs	r3, #1
 801c3d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c3d2:	697b      	ldr	r3, [r7, #20]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d10d      	bne.n	801c3f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	22ff      	movs	r2, #255	@ 0xff
 801c3de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	2221      	movs	r2, #33	@ 0x21
 801c3e4:	2103      	movs	r1, #3
 801c3e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	2220      	movs	r2, #32
 801c3ec:	2100      	movs	r1, #0
 801c3ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c3f0:	2303      	movs	r3, #3
 801c3f2:	e082      	b.n	801c4fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	68db      	ldr	r3, [r3, #12]
 801c3fa:	2204      	movs	r2, #4
 801c3fc:	4013      	ands	r3, r2
 801c3fe:	d1e5      	bne.n	801c3cc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	689a      	ldr	r2, [r3, #8]
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	493f      	ldr	r1, [pc, #252]	@ (801c508 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801c40c:	400a      	ands	r2, r1
 801c40e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	68db      	ldr	r3, [r3, #12]
 801c416:	22ff      	movs	r2, #255	@ 0xff
 801c418:	401a      	ands	r2, r3
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	493b      	ldr	r1, [pc, #236]	@ (801c50c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801c420:	430a      	orrs	r2, r1
 801c422:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c424:	4b37      	ldr	r3, [pc, #220]	@ (801c504 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	22fa      	movs	r2, #250	@ 0xfa
 801c42a:	01d1      	lsls	r1, r2, #7
 801c42c:	0018      	movs	r0, r3
 801c42e:	f7e3 feb9 	bl	80001a4 <__udivsi3>
 801c432:	0003      	movs	r3, r0
 801c434:	001a      	movs	r2, r3
 801c436:	0013      	movs	r3, r2
 801c438:	015b      	lsls	r3, r3, #5
 801c43a:	1a9b      	subs	r3, r3, r2
 801c43c:	009b      	lsls	r3, r3, #2
 801c43e:	189b      	adds	r3, r3, r2
 801c440:	00db      	lsls	r3, r3, #3
 801c442:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801c444:	697b      	ldr	r3, [r7, #20]
 801c446:	3b01      	subs	r3, #1
 801c448:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801c44a:	697b      	ldr	r3, [r7, #20]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d10d      	bne.n	801c46c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	22ff      	movs	r2, #255	@ 0xff
 801c456:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	2221      	movs	r2, #33	@ 0x21
 801c45c:	2103      	movs	r1, #3
 801c45e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	2220      	movs	r2, #32
 801c464:	2100      	movs	r1, #0
 801c466:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c468:	2303      	movs	r3, #3
 801c46a:	e046      	b.n	801c4fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	68db      	ldr	r3, [r3, #12]
 801c472:	2204      	movs	r2, #4
 801c474:	4013      	ands	r3, r2
 801c476:	d0e5      	beq.n	801c444 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	689a      	ldr	r2, [r3, #8]
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	2107      	movs	r1, #7
 801c484:	438a      	bics	r2, r1
 801c486:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	6899      	ldr	r1, [r3, #8]
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	687a      	ldr	r2, [r7, #4]
 801c494:	430a      	orrs	r2, r1
 801c496:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	68ba      	ldr	r2, [r7, #8]
 801c49e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801c4a0:	4b1b      	ldr	r3, [pc, #108]	@ (801c510 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	4b1a      	ldr	r3, [pc, #104]	@ (801c510 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c4a6:	2180      	movs	r1, #128	@ 0x80
 801c4a8:	0349      	lsls	r1, r1, #13
 801c4aa:	430a      	orrs	r2, r1
 801c4ac:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801c4ae:	4b18      	ldr	r3, [pc, #96]	@ (801c510 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c4b0:	689a      	ldr	r2, [r3, #8]
 801c4b2:	4b17      	ldr	r3, [pc, #92]	@ (801c510 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801c4b4:	2180      	movs	r1, #128	@ 0x80
 801c4b6:	0349      	lsls	r1, r1, #13
 801c4b8:	430a      	orrs	r2, r1
 801c4ba:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	689a      	ldr	r2, [r3, #8]
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	2180      	movs	r1, #128	@ 0x80
 801c4c8:	01c9      	lsls	r1, r1, #7
 801c4ca:	430a      	orrs	r2, r1
 801c4cc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	689a      	ldr	r2, [r3, #8]
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	2180      	movs	r1, #128	@ 0x80
 801c4da:	00c9      	lsls	r1, r1, #3
 801c4dc:	430a      	orrs	r2, r1
 801c4de:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	22ff      	movs	r2, #255	@ 0xff
 801c4e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	2221      	movs	r2, #33	@ 0x21
 801c4ec:	2101      	movs	r1, #1
 801c4ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	2220      	movs	r2, #32
 801c4f4:	2100      	movs	r1, #0
 801c4f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c4f8:	2300      	movs	r3, #0
}
 801c4fa:	0018      	movs	r0, r3
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	b006      	add	sp, #24
 801c500:	bd80      	pop	{r7, pc}
 801c502:	46c0      	nop			@ (mov r8, r8)
 801c504:	200000ec 	.word	0x200000ec
 801c508:	fffffbff 	.word	0xfffffbff
 801c50c:	fffffb7f 	.word	0xfffffb7f
 801c510:	40010400 	.word	0x40010400

0801c514 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b084      	sub	sp, #16
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c51c:	2300      	movs	r3, #0
 801c51e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	2220      	movs	r2, #32
 801c524:	5c9b      	ldrb	r3, [r3, r2]
 801c526:	2b01      	cmp	r3, #1
 801c528:	d101      	bne.n	801c52e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801c52a:	2302      	movs	r3, #2
 801c52c:	e04e      	b.n	801c5cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	2220      	movs	r2, #32
 801c532:	2101      	movs	r1, #1
 801c534:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	2221      	movs	r2, #33	@ 0x21
 801c53a:	2102      	movs	r1, #2
 801c53c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	22ca      	movs	r2, #202	@ 0xca
 801c544:	625a      	str	r2, [r3, #36]	@ 0x24
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	2253      	movs	r2, #83	@ 0x53
 801c54c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	689a      	ldr	r2, [r3, #8]
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	491e      	ldr	r1, [pc, #120]	@ (801c5d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801c55a:	400a      	ands	r2, r1
 801c55c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	689a      	ldr	r2, [r3, #8]
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	491b      	ldr	r1, [pc, #108]	@ (801c5d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801c56a:	400a      	ands	r2, r1
 801c56c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c56e:	f7f7 ffed 	bl	801454c <HAL_GetTick>
 801c572:	0003      	movs	r3, r0
 801c574:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c576:	e016      	b.n	801c5a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c578:	f7f7 ffe8 	bl	801454c <HAL_GetTick>
 801c57c:	0002      	movs	r2, r0
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	1ad2      	subs	r2, r2, r3
 801c582:	23fa      	movs	r3, #250	@ 0xfa
 801c584:	009b      	lsls	r3, r3, #2
 801c586:	429a      	cmp	r2, r3
 801c588:	d90d      	bls.n	801c5a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	22ff      	movs	r2, #255	@ 0xff
 801c590:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	2221      	movs	r2, #33	@ 0x21
 801c596:	2103      	movs	r1, #3
 801c598:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	2220      	movs	r2, #32
 801c59e:	2100      	movs	r1, #0
 801c5a0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801c5a2:	2303      	movs	r3, #3
 801c5a4:	e012      	b.n	801c5cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	68db      	ldr	r3, [r3, #12]
 801c5ac:	2204      	movs	r2, #4
 801c5ae:	4013      	ands	r3, r2
 801c5b0:	d0e2      	beq.n	801c578 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	22ff      	movs	r2, #255	@ 0xff
 801c5b8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	2221      	movs	r2, #33	@ 0x21
 801c5be:	2101      	movs	r1, #1
 801c5c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2220      	movs	r2, #32
 801c5c6:	2100      	movs	r1, #0
 801c5c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c5ca:	2300      	movs	r3, #0
}
 801c5cc:	0018      	movs	r0, r3
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	b004      	add	sp, #16
 801c5d2:	bd80      	pop	{r7, pc}
 801c5d4:	fffffbff 	.word	0xfffffbff
 801c5d8:	ffffbfff 	.word	0xffffbfff

0801c5dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b082      	sub	sp, #8
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801c5e4:	4b13      	ldr	r3, [pc, #76]	@ (801c634 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801c5e6:	2280      	movs	r2, #128	@ 0x80
 801c5e8:	0352      	lsls	r2, r2, #13
 801c5ea:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	689a      	ldr	r2, [r3, #8]
 801c5f2:	2380      	movs	r3, #128	@ 0x80
 801c5f4:	01db      	lsls	r3, r3, #7
 801c5f6:	4013      	ands	r3, r2
 801c5f8:	d014      	beq.n	801c624 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	68da      	ldr	r2, [r3, #12]
 801c600:	2380      	movs	r3, #128	@ 0x80
 801c602:	00db      	lsls	r3, r3, #3
 801c604:	4013      	ands	r3, r2
 801c606:	d00d      	beq.n	801c624 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	68db      	ldr	r3, [r3, #12]
 801c60e:	22ff      	movs	r2, #255	@ 0xff
 801c610:	401a      	ands	r2, r3
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	4908      	ldr	r1, [pc, #32]	@ (801c638 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801c618:	430a      	orrs	r2, r1
 801c61a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	0018      	movs	r0, r3
 801c620:	f000 f80c 	bl	801c63c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2221      	movs	r2, #33	@ 0x21
 801c628:	2101      	movs	r1, #1
 801c62a:	5499      	strb	r1, [r3, r2]
}
 801c62c:	46c0      	nop			@ (mov r8, r8)
 801c62e:	46bd      	mov	sp, r7
 801c630:	b002      	add	sp, #8
 801c632:	bd80      	pop	{r7, pc}
 801c634:	40010400 	.word	0x40010400
 801c638:	fffffb7f 	.word	0xfffffb7f

0801c63c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b082      	sub	sp, #8
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801c644:	46c0      	nop			@ (mov r8, r8)
 801c646:	46bd      	mov	sp, r7
 801c648:	b002      	add	sp, #8
 801c64a:	bd80      	pop	{r7, pc}

0801c64c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b086      	sub	sp, #24
 801c650:	af00      	add	r7, sp, #0
 801c652:	60f8      	str	r0, [r7, #12]
 801c654:	60b9      	str	r1, [r7, #8]
 801c656:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801c658:	2300      	movs	r3, #0
 801c65a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	3350      	adds	r3, #80	@ 0x50
 801c662:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801c664:	68bb      	ldr	r3, [r7, #8]
 801c666:	009b      	lsls	r3, r3, #2
 801c668:	697a      	ldr	r2, [r7, #20]
 801c66a:	18d3      	adds	r3, r2, r3
 801c66c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801c66e:	697b      	ldr	r3, [r7, #20]
 801c670:	687a      	ldr	r2, [r7, #4]
 801c672:	601a      	str	r2, [r3, #0]
}
 801c674:	46c0      	nop			@ (mov r8, r8)
 801c676:	46bd      	mov	sp, r7
 801c678:	b006      	add	sp, #24
 801c67a:	bd80      	pop	{r7, pc}

0801c67c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b084      	sub	sp, #16
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
 801c684:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801c686:	2300      	movs	r3, #0
 801c688:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	3350      	adds	r3, #80	@ 0x50
 801c690:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	009b      	lsls	r3, r3, #2
 801c696:	68fa      	ldr	r2, [r7, #12]
 801c698:	18d3      	adds	r3, r2, r3
 801c69a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	681b      	ldr	r3, [r3, #0]
}
 801c6a0:	0018      	movs	r0, r3
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	b004      	add	sp, #16
 801c6a6:	bd80      	pop	{r7, pc}

0801c6a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	b082      	sub	sp, #8
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d101      	bne.n	801c6ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	e032      	b.n	801c720 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	2239      	movs	r2, #57	@ 0x39
 801c6be:	5c9b      	ldrb	r3, [r3, r2]
 801c6c0:	b2db      	uxtb	r3, r3
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d107      	bne.n	801c6d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	2238      	movs	r2, #56	@ 0x38
 801c6ca:	2100      	movs	r1, #0
 801c6cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f7f6 ff57 	bl	8013584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2239      	movs	r2, #57	@ 0x39
 801c6da:	2102      	movs	r1, #2
 801c6dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	681a      	ldr	r2, [r3, #0]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	3304      	adds	r3, #4
 801c6e6:	0019      	movs	r1, r3
 801c6e8:	0010      	movs	r0, r2
 801c6ea:	f000 fa1d 	bl	801cb28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	223e      	movs	r2, #62	@ 0x3e
 801c6f2:	2101      	movs	r1, #1
 801c6f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	223a      	movs	r2, #58	@ 0x3a
 801c6fa:	2101      	movs	r1, #1
 801c6fc:	5499      	strb	r1, [r3, r2]
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	223b      	movs	r2, #59	@ 0x3b
 801c702:	2101      	movs	r1, #1
 801c704:	5499      	strb	r1, [r3, r2]
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	223c      	movs	r2, #60	@ 0x3c
 801c70a:	2101      	movs	r1, #1
 801c70c:	5499      	strb	r1, [r3, r2]
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	223d      	movs	r2, #61	@ 0x3d
 801c712:	2101      	movs	r1, #1
 801c714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	2239      	movs	r2, #57	@ 0x39
 801c71a:	2101      	movs	r1, #1
 801c71c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c71e:	2300      	movs	r3, #0
}
 801c720:	0018      	movs	r0, r3
 801c722:	46bd      	mov	sp, r7
 801c724:	b002      	add	sp, #8
 801c726:	bd80      	pop	{r7, pc}

0801c728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801c728:	b580      	push	{r7, lr}
 801c72a:	b084      	sub	sp, #16
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2239      	movs	r2, #57	@ 0x39
 801c734:	5c9b      	ldrb	r3, [r3, r2]
 801c736:	b2db      	uxtb	r3, r3
 801c738:	2b01      	cmp	r3, #1
 801c73a:	d001      	beq.n	801c740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801c73c:	2301      	movs	r3, #1
 801c73e:	e033      	b.n	801c7a8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	2239      	movs	r2, #57	@ 0x39
 801c744:	2102      	movs	r1, #2
 801c746:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	681a      	ldr	r2, [r3, #0]
 801c74c:	2380      	movs	r3, #128	@ 0x80
 801c74e:	05db      	lsls	r3, r3, #23
 801c750:	429a      	cmp	r2, r3
 801c752:	d00e      	beq.n	801c772 <HAL_TIM_Base_Start+0x4a>
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4a15      	ldr	r2, [pc, #84]	@ (801c7b0 <HAL_TIM_Base_Start+0x88>)
 801c75a:	4293      	cmp	r3, r2
 801c75c:	d009      	beq.n	801c772 <HAL_TIM_Base_Start+0x4a>
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a14      	ldr	r2, [pc, #80]	@ (801c7b4 <HAL_TIM_Base_Start+0x8c>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d004      	beq.n	801c772 <HAL_TIM_Base_Start+0x4a>
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	4a12      	ldr	r2, [pc, #72]	@ (801c7b8 <HAL_TIM_Base_Start+0x90>)
 801c76e:	4293      	cmp	r3, r2
 801c770:	d111      	bne.n	801c796 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	689b      	ldr	r3, [r3, #8]
 801c778:	2207      	movs	r2, #7
 801c77a:	4013      	ands	r3, r2
 801c77c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2b06      	cmp	r3, #6
 801c782:	d010      	beq.n	801c7a6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	681a      	ldr	r2, [r3, #0]
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	2101      	movs	r1, #1
 801c790:	430a      	orrs	r2, r1
 801c792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c794:	e007      	b.n	801c7a6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	681a      	ldr	r2, [r3, #0]
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	2101      	movs	r1, #1
 801c7a2:	430a      	orrs	r2, r1
 801c7a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c7a6:	2300      	movs	r3, #0
}
 801c7a8:	0018      	movs	r0, r3
 801c7aa:	46bd      	mov	sp, r7
 801c7ac:	b004      	add	sp, #16
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	40000400 	.word	0x40000400
 801c7b4:	40010800 	.word	0x40010800
 801c7b8:	40011400 	.word	0x40011400

0801c7bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	6a1b      	ldr	r3, [r3, #32]
 801c7ca:	4a0a      	ldr	r2, [pc, #40]	@ (801c7f4 <HAL_TIM_Base_Stop+0x38>)
 801c7cc:	4013      	ands	r3, r2
 801c7ce:	d107      	bne.n	801c7e0 <HAL_TIM_Base_Stop+0x24>
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	681a      	ldr	r2, [r3, #0]
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	2101      	movs	r1, #1
 801c7dc:	438a      	bics	r2, r1
 801c7de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	2239      	movs	r2, #57	@ 0x39
 801c7e4:	2101      	movs	r1, #1
 801c7e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801c7e8:	2300      	movs	r3, #0
}
 801c7ea:	0018      	movs	r0, r3
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	b002      	add	sp, #8
 801c7f0:	bd80      	pop	{r7, pc}
 801c7f2:	46c0      	nop			@ (mov r8, r8)
 801c7f4:	00001111 	.word	0x00001111

0801c7f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b082      	sub	sp, #8
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d101      	bne.n	801c80a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801c806:	2301      	movs	r3, #1
 801c808:	e032      	b.n	801c870 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	2239      	movs	r2, #57	@ 0x39
 801c80e:	5c9b      	ldrb	r3, [r3, r2]
 801c810:	b2db      	uxtb	r3, r3
 801c812:	2b00      	cmp	r3, #0
 801c814:	d107      	bne.n	801c826 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	2238      	movs	r2, #56	@ 0x38
 801c81a:	2100      	movs	r1, #0
 801c81c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	0018      	movs	r0, r3
 801c822:	f7f6 fe8b 	bl	801353c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	2239      	movs	r2, #57	@ 0x39
 801c82a:	2102      	movs	r1, #2
 801c82c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	681a      	ldr	r2, [r3, #0]
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	3304      	adds	r3, #4
 801c836:	0019      	movs	r1, r3
 801c838:	0010      	movs	r0, r2
 801c83a:	f000 f975 	bl	801cb28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	223e      	movs	r2, #62	@ 0x3e
 801c842:	2101      	movs	r1, #1
 801c844:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	223a      	movs	r2, #58	@ 0x3a
 801c84a:	2101      	movs	r1, #1
 801c84c:	5499      	strb	r1, [r3, r2]
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	223b      	movs	r2, #59	@ 0x3b
 801c852:	2101      	movs	r1, #1
 801c854:	5499      	strb	r1, [r3, r2]
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	223c      	movs	r2, #60	@ 0x3c
 801c85a:	2101      	movs	r1, #1
 801c85c:	5499      	strb	r1, [r3, r2]
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	223d      	movs	r2, #61	@ 0x3d
 801c862:	2101      	movs	r1, #1
 801c864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	2239      	movs	r2, #57	@ 0x39
 801c86a:	2101      	movs	r1, #1
 801c86c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c86e:	2300      	movs	r3, #0
}
 801c870:	0018      	movs	r0, r3
 801c872:	46bd      	mov	sp, r7
 801c874:	b002      	add	sp, #8
 801c876:	bd80      	pop	{r7, pc}

0801c878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b084      	sub	sp, #16
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
 801c880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801c882:	683b      	ldr	r3, [r7, #0]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d108      	bne.n	801c89a <HAL_TIM_PWM_Start+0x22>
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	223a      	movs	r2, #58	@ 0x3a
 801c88c:	5c9b      	ldrb	r3, [r3, r2]
 801c88e:	b2db      	uxtb	r3, r3
 801c890:	3b01      	subs	r3, #1
 801c892:	1e5a      	subs	r2, r3, #1
 801c894:	4193      	sbcs	r3, r2
 801c896:	b2db      	uxtb	r3, r3
 801c898:	e01f      	b.n	801c8da <HAL_TIM_PWM_Start+0x62>
 801c89a:	683b      	ldr	r3, [r7, #0]
 801c89c:	2b04      	cmp	r3, #4
 801c89e:	d108      	bne.n	801c8b2 <HAL_TIM_PWM_Start+0x3a>
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	223b      	movs	r2, #59	@ 0x3b
 801c8a4:	5c9b      	ldrb	r3, [r3, r2]
 801c8a6:	b2db      	uxtb	r3, r3
 801c8a8:	3b01      	subs	r3, #1
 801c8aa:	1e5a      	subs	r2, r3, #1
 801c8ac:	4193      	sbcs	r3, r2
 801c8ae:	b2db      	uxtb	r3, r3
 801c8b0:	e013      	b.n	801c8da <HAL_TIM_PWM_Start+0x62>
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	2b08      	cmp	r3, #8
 801c8b6:	d108      	bne.n	801c8ca <HAL_TIM_PWM_Start+0x52>
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	223c      	movs	r2, #60	@ 0x3c
 801c8bc:	5c9b      	ldrb	r3, [r3, r2]
 801c8be:	b2db      	uxtb	r3, r3
 801c8c0:	3b01      	subs	r3, #1
 801c8c2:	1e5a      	subs	r2, r3, #1
 801c8c4:	4193      	sbcs	r3, r2
 801c8c6:	b2db      	uxtb	r3, r3
 801c8c8:	e007      	b.n	801c8da <HAL_TIM_PWM_Start+0x62>
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	223d      	movs	r2, #61	@ 0x3d
 801c8ce:	5c9b      	ldrb	r3, [r3, r2]
 801c8d0:	b2db      	uxtb	r3, r3
 801c8d2:	3b01      	subs	r3, #1
 801c8d4:	1e5a      	subs	r2, r3, #1
 801c8d6:	4193      	sbcs	r3, r2
 801c8d8:	b2db      	uxtb	r3, r3
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d001      	beq.n	801c8e2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801c8de:	2301      	movs	r3, #1
 801c8e0:	e052      	b.n	801c988 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801c8e2:	683b      	ldr	r3, [r7, #0]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d104      	bne.n	801c8f2 <HAL_TIM_PWM_Start+0x7a>
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	223a      	movs	r2, #58	@ 0x3a
 801c8ec:	2102      	movs	r1, #2
 801c8ee:	5499      	strb	r1, [r3, r2]
 801c8f0:	e013      	b.n	801c91a <HAL_TIM_PWM_Start+0xa2>
 801c8f2:	683b      	ldr	r3, [r7, #0]
 801c8f4:	2b04      	cmp	r3, #4
 801c8f6:	d104      	bne.n	801c902 <HAL_TIM_PWM_Start+0x8a>
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	223b      	movs	r2, #59	@ 0x3b
 801c8fc:	2102      	movs	r1, #2
 801c8fe:	5499      	strb	r1, [r3, r2]
 801c900:	e00b      	b.n	801c91a <HAL_TIM_PWM_Start+0xa2>
 801c902:	683b      	ldr	r3, [r7, #0]
 801c904:	2b08      	cmp	r3, #8
 801c906:	d104      	bne.n	801c912 <HAL_TIM_PWM_Start+0x9a>
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	223c      	movs	r2, #60	@ 0x3c
 801c90c:	2102      	movs	r1, #2
 801c90e:	5499      	strb	r1, [r3, r2]
 801c910:	e003      	b.n	801c91a <HAL_TIM_PWM_Start+0xa2>
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	223d      	movs	r2, #61	@ 0x3d
 801c916:	2102      	movs	r1, #2
 801c918:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	6839      	ldr	r1, [r7, #0]
 801c920:	2201      	movs	r2, #1
 801c922:	0018      	movs	r0, r3
 801c924:	f000 fa62 	bl	801cdec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	681a      	ldr	r2, [r3, #0]
 801c92c:	2380      	movs	r3, #128	@ 0x80
 801c92e:	05db      	lsls	r3, r3, #23
 801c930:	429a      	cmp	r2, r3
 801c932:	d00e      	beq.n	801c952 <HAL_TIM_PWM_Start+0xda>
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	4a15      	ldr	r2, [pc, #84]	@ (801c990 <HAL_TIM_PWM_Start+0x118>)
 801c93a:	4293      	cmp	r3, r2
 801c93c:	d009      	beq.n	801c952 <HAL_TIM_PWM_Start+0xda>
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	4a14      	ldr	r2, [pc, #80]	@ (801c994 <HAL_TIM_PWM_Start+0x11c>)
 801c944:	4293      	cmp	r3, r2
 801c946:	d004      	beq.n	801c952 <HAL_TIM_PWM_Start+0xda>
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	4a12      	ldr	r2, [pc, #72]	@ (801c998 <HAL_TIM_PWM_Start+0x120>)
 801c94e:	4293      	cmp	r3, r2
 801c950:	d111      	bne.n	801c976 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	689b      	ldr	r3, [r3, #8]
 801c958:	2207      	movs	r2, #7
 801c95a:	4013      	ands	r3, r2
 801c95c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	2b06      	cmp	r3, #6
 801c962:	d010      	beq.n	801c986 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	681a      	ldr	r2, [r3, #0]
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	2101      	movs	r1, #1
 801c970:	430a      	orrs	r2, r1
 801c972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c974:	e007      	b.n	801c986 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	681a      	ldr	r2, [r3, #0]
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	2101      	movs	r1, #1
 801c982:	430a      	orrs	r2, r1
 801c984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c986:	2300      	movs	r3, #0
}
 801c988:	0018      	movs	r0, r3
 801c98a:	46bd      	mov	sp, r7
 801c98c:	b004      	add	sp, #16
 801c98e:	bd80      	pop	{r7, pc}
 801c990:	40000400 	.word	0x40000400
 801c994:	40010800 	.word	0x40010800
 801c998:	40011400 	.word	0x40011400

0801c99c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	b086      	sub	sp, #24
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	60f8      	str	r0, [r7, #12]
 801c9a4:	60b9      	str	r1, [r7, #8]
 801c9a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c9a8:	2317      	movs	r3, #23
 801c9aa:	18fb      	adds	r3, r7, r3
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	2238      	movs	r2, #56	@ 0x38
 801c9b4:	5c9b      	ldrb	r3, [r3, r2]
 801c9b6:	2b01      	cmp	r3, #1
 801c9b8:	d101      	bne.n	801c9be <HAL_TIM_PWM_ConfigChannel+0x22>
 801c9ba:	2302      	movs	r3, #2
 801c9bc:	e0ad      	b.n	801cb1a <HAL_TIM_PWM_ConfigChannel+0x17e>
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	2238      	movs	r2, #56	@ 0x38
 801c9c2:	2101      	movs	r1, #1
 801c9c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	2b0c      	cmp	r3, #12
 801c9ca:	d100      	bne.n	801c9ce <HAL_TIM_PWM_ConfigChannel+0x32>
 801c9cc:	e076      	b.n	801cabc <HAL_TIM_PWM_ConfigChannel+0x120>
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	2b0c      	cmp	r3, #12
 801c9d2:	d900      	bls.n	801c9d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801c9d4:	e095      	b.n	801cb02 <HAL_TIM_PWM_ConfigChannel+0x166>
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	2b08      	cmp	r3, #8
 801c9da:	d04e      	beq.n	801ca7a <HAL_TIM_PWM_ConfigChannel+0xde>
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2b08      	cmp	r3, #8
 801c9e0:	d900      	bls.n	801c9e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 801c9e2:	e08e      	b.n	801cb02 <HAL_TIM_PWM_ConfigChannel+0x166>
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d003      	beq.n	801c9f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	2b04      	cmp	r3, #4
 801c9ee:	d021      	beq.n	801ca34 <HAL_TIM_PWM_ConfigChannel+0x98>
 801c9f0:	e087      	b.n	801cb02 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	68ba      	ldr	r2, [r7, #8]
 801c9f8:	0011      	movs	r1, r2
 801c9fa:	0018      	movs	r0, r3
 801c9fc:	f000 f8f2 	bl	801cbe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	699a      	ldr	r2, [r3, #24]
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	2108      	movs	r1, #8
 801ca0c:	430a      	orrs	r2, r1
 801ca0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	699a      	ldr	r2, [r3, #24]
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	2104      	movs	r1, #4
 801ca1c:	438a      	bics	r2, r1
 801ca1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	6999      	ldr	r1, [r3, #24]
 801ca26:	68bb      	ldr	r3, [r7, #8]
 801ca28:	68da      	ldr	r2, [r3, #12]
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	430a      	orrs	r2, r1
 801ca30:	619a      	str	r2, [r3, #24]
      break;
 801ca32:	e06b      	b.n	801cb0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	68ba      	ldr	r2, [r7, #8]
 801ca3a:	0011      	movs	r1, r2
 801ca3c:	0018      	movs	r0, r3
 801ca3e:	f000 f90d 	bl	801cc5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	699a      	ldr	r2, [r3, #24]
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	2180      	movs	r1, #128	@ 0x80
 801ca4e:	0109      	lsls	r1, r1, #4
 801ca50:	430a      	orrs	r2, r1
 801ca52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	699a      	ldr	r2, [r3, #24]
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	4931      	ldr	r1, [pc, #196]	@ (801cb24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801ca60:	400a      	ands	r2, r1
 801ca62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	6999      	ldr	r1, [r3, #24]
 801ca6a:	68bb      	ldr	r3, [r7, #8]
 801ca6c:	68db      	ldr	r3, [r3, #12]
 801ca6e:	021a      	lsls	r2, r3, #8
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	430a      	orrs	r2, r1
 801ca76:	619a      	str	r2, [r3, #24]
      break;
 801ca78:	e048      	b.n	801cb0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	68ba      	ldr	r2, [r7, #8]
 801ca80:	0011      	movs	r1, r2
 801ca82:	0018      	movs	r0, r3
 801ca84:	f000 f92c 	bl	801cce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	69da      	ldr	r2, [r3, #28]
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	2108      	movs	r1, #8
 801ca94:	430a      	orrs	r2, r1
 801ca96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	69da      	ldr	r2, [r3, #28]
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2104      	movs	r1, #4
 801caa4:	438a      	bics	r2, r1
 801caa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	69d9      	ldr	r1, [r3, #28]
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	68da      	ldr	r2, [r3, #12]
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	430a      	orrs	r2, r1
 801cab8:	61da      	str	r2, [r3, #28]
      break;
 801caba:	e027      	b.n	801cb0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	68ba      	ldr	r2, [r7, #8]
 801cac2:	0011      	movs	r1, r2
 801cac4:	0018      	movs	r0, r3
 801cac6:	f000 f94b 	bl	801cd60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	69da      	ldr	r2, [r3, #28]
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	2180      	movs	r1, #128	@ 0x80
 801cad6:	0109      	lsls	r1, r1, #4
 801cad8:	430a      	orrs	r2, r1
 801cada:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	69da      	ldr	r2, [r3, #28]
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	490f      	ldr	r1, [pc, #60]	@ (801cb24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801cae8:	400a      	ands	r2, r1
 801caea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	69d9      	ldr	r1, [r3, #28]
 801caf2:	68bb      	ldr	r3, [r7, #8]
 801caf4:	68db      	ldr	r3, [r3, #12]
 801caf6:	021a      	lsls	r2, r3, #8
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	430a      	orrs	r2, r1
 801cafe:	61da      	str	r2, [r3, #28]
      break;
 801cb00:	e004      	b.n	801cb0c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801cb02:	2317      	movs	r3, #23
 801cb04:	18fb      	adds	r3, r7, r3
 801cb06:	2201      	movs	r2, #1
 801cb08:	701a      	strb	r2, [r3, #0]
      break;
 801cb0a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	2238      	movs	r2, #56	@ 0x38
 801cb10:	2100      	movs	r1, #0
 801cb12:	5499      	strb	r1, [r3, r2]

  return status;
 801cb14:	2317      	movs	r3, #23
 801cb16:	18fb      	adds	r3, r7, r3
 801cb18:	781b      	ldrb	r3, [r3, #0]
}
 801cb1a:	0018      	movs	r0, r3
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	b006      	add	sp, #24
 801cb20:	bd80      	pop	{r7, pc}
 801cb22:	46c0      	nop			@ (mov r8, r8)
 801cb24:	fffffbff 	.word	0xfffffbff

0801cb28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b084      	sub	sp, #16
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
 801cb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801cb38:	687a      	ldr	r2, [r7, #4]
 801cb3a:	2380      	movs	r3, #128	@ 0x80
 801cb3c:	05db      	lsls	r3, r3, #23
 801cb3e:	429a      	cmp	r2, r3
 801cb40:	d00b      	beq.n	801cb5a <TIM_Base_SetConfig+0x32>
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	4a23      	ldr	r2, [pc, #140]	@ (801cbd4 <TIM_Base_SetConfig+0xac>)
 801cb46:	4293      	cmp	r3, r2
 801cb48:	d007      	beq.n	801cb5a <TIM_Base_SetConfig+0x32>
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	4a22      	ldr	r2, [pc, #136]	@ (801cbd8 <TIM_Base_SetConfig+0xb0>)
 801cb4e:	4293      	cmp	r3, r2
 801cb50:	d003      	beq.n	801cb5a <TIM_Base_SetConfig+0x32>
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	4a21      	ldr	r2, [pc, #132]	@ (801cbdc <TIM_Base_SetConfig+0xb4>)
 801cb56:	4293      	cmp	r3, r2
 801cb58:	d108      	bne.n	801cb6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	2270      	movs	r2, #112	@ 0x70
 801cb5e:	4393      	bics	r3, r2
 801cb60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	685b      	ldr	r3, [r3, #4]
 801cb66:	68fa      	ldr	r2, [r7, #12]
 801cb68:	4313      	orrs	r3, r2
 801cb6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801cb6c:	687a      	ldr	r2, [r7, #4]
 801cb6e:	2380      	movs	r3, #128	@ 0x80
 801cb70:	05db      	lsls	r3, r3, #23
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d00b      	beq.n	801cb8e <TIM_Base_SetConfig+0x66>
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	4a16      	ldr	r2, [pc, #88]	@ (801cbd4 <TIM_Base_SetConfig+0xac>)
 801cb7a:	4293      	cmp	r3, r2
 801cb7c:	d007      	beq.n	801cb8e <TIM_Base_SetConfig+0x66>
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	4a15      	ldr	r2, [pc, #84]	@ (801cbd8 <TIM_Base_SetConfig+0xb0>)
 801cb82:	4293      	cmp	r3, r2
 801cb84:	d003      	beq.n	801cb8e <TIM_Base_SetConfig+0x66>
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	4a14      	ldr	r2, [pc, #80]	@ (801cbdc <TIM_Base_SetConfig+0xb4>)
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	d108      	bne.n	801cba0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	4a13      	ldr	r2, [pc, #76]	@ (801cbe0 <TIM_Base_SetConfig+0xb8>)
 801cb92:	4013      	ands	r3, r2
 801cb94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801cb96:	683b      	ldr	r3, [r7, #0]
 801cb98:	68db      	ldr	r3, [r3, #12]
 801cb9a:	68fa      	ldr	r2, [r7, #12]
 801cb9c:	4313      	orrs	r3, r2
 801cb9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	2280      	movs	r2, #128	@ 0x80
 801cba4:	4393      	bics	r3, r2
 801cba6:	001a      	movs	r2, r3
 801cba8:	683b      	ldr	r3, [r7, #0]
 801cbaa:	691b      	ldr	r3, [r3, #16]
 801cbac:	4313      	orrs	r3, r2
 801cbae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	68fa      	ldr	r2, [r7, #12]
 801cbb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	689a      	ldr	r2, [r3, #8]
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	681a      	ldr	r2, [r3, #0]
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	2201      	movs	r2, #1
 801cbca:	615a      	str	r2, [r3, #20]
}
 801cbcc:	46c0      	nop			@ (mov r8, r8)
 801cbce:	46bd      	mov	sp, r7
 801cbd0:	b004      	add	sp, #16
 801cbd2:	bd80      	pop	{r7, pc}
 801cbd4:	40000400 	.word	0x40000400
 801cbd8:	40010800 	.word	0x40010800
 801cbdc:	40011400 	.word	0x40011400
 801cbe0:	fffffcff 	.word	0xfffffcff

0801cbe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	b086      	sub	sp, #24
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	6078      	str	r0, [r7, #4]
 801cbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	6a1b      	ldr	r3, [r3, #32]
 801cbf2:	2201      	movs	r2, #1
 801cbf4:	4393      	bics	r3, r2
 801cbf6:	001a      	movs	r2, r3
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	6a1b      	ldr	r3, [r3, #32]
 801cc00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	699b      	ldr	r3, [r3, #24]
 801cc0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	2270      	movs	r2, #112	@ 0x70
 801cc12:	4393      	bics	r3, r2
 801cc14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	2203      	movs	r2, #3
 801cc1a:	4393      	bics	r3, r2
 801cc1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cc1e:	683b      	ldr	r3, [r7, #0]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	68fa      	ldr	r2, [r7, #12]
 801cc24:	4313      	orrs	r3, r2
 801cc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801cc28:	697b      	ldr	r3, [r7, #20]
 801cc2a:	2202      	movs	r2, #2
 801cc2c:	4393      	bics	r3, r2
 801cc2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	689b      	ldr	r3, [r3, #8]
 801cc34:	697a      	ldr	r2, [r7, #20]
 801cc36:	4313      	orrs	r3, r2
 801cc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	693a      	ldr	r2, [r7, #16]
 801cc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	68fa      	ldr	r2, [r7, #12]
 801cc44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	685a      	ldr	r2, [r3, #4]
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	697a      	ldr	r2, [r7, #20]
 801cc52:	621a      	str	r2, [r3, #32]
}
 801cc54:	46c0      	nop			@ (mov r8, r8)
 801cc56:	46bd      	mov	sp, r7
 801cc58:	b006      	add	sp, #24
 801cc5a:	bd80      	pop	{r7, pc}

0801cc5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b086      	sub	sp, #24
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
 801cc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	6a1b      	ldr	r3, [r3, #32]
 801cc6a:	2210      	movs	r2, #16
 801cc6c:	4393      	bics	r3, r2
 801cc6e:	001a      	movs	r2, r3
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	6a1b      	ldr	r3, [r3, #32]
 801cc78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	685b      	ldr	r3, [r3, #4]
 801cc7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	699b      	ldr	r3, [r3, #24]
 801cc84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	4a13      	ldr	r2, [pc, #76]	@ (801ccd8 <TIM_OC2_SetConfig+0x7c>)
 801cc8a:	4013      	ands	r3, r2
 801cc8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	4a12      	ldr	r2, [pc, #72]	@ (801ccdc <TIM_OC2_SetConfig+0x80>)
 801cc92:	4013      	ands	r3, r2
 801cc94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cc96:	683b      	ldr	r3, [r7, #0]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	021b      	lsls	r3, r3, #8
 801cc9c:	68fa      	ldr	r2, [r7, #12]
 801cc9e:	4313      	orrs	r3, r2
 801cca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801cca2:	697b      	ldr	r3, [r7, #20]
 801cca4:	2220      	movs	r2, #32
 801cca6:	4393      	bics	r3, r2
 801cca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ccaa:	683b      	ldr	r3, [r7, #0]
 801ccac:	689b      	ldr	r3, [r3, #8]
 801ccae:	011b      	lsls	r3, r3, #4
 801ccb0:	697a      	ldr	r2, [r7, #20]
 801ccb2:	4313      	orrs	r3, r2
 801ccb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	693a      	ldr	r2, [r7, #16]
 801ccba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	68fa      	ldr	r2, [r7, #12]
 801ccc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	685a      	ldr	r2, [r3, #4]
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	697a      	ldr	r2, [r7, #20]
 801ccce:	621a      	str	r2, [r3, #32]
}
 801ccd0:	46c0      	nop			@ (mov r8, r8)
 801ccd2:	46bd      	mov	sp, r7
 801ccd4:	b006      	add	sp, #24
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	ffff8fff 	.word	0xffff8fff
 801ccdc:	fffffcff 	.word	0xfffffcff

0801cce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b086      	sub	sp, #24
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	6a1b      	ldr	r3, [r3, #32]
 801ccee:	4a1a      	ldr	r2, [pc, #104]	@ (801cd58 <TIM_OC3_SetConfig+0x78>)
 801ccf0:	401a      	ands	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6a1b      	ldr	r3, [r3, #32]
 801ccfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	685b      	ldr	r3, [r3, #4]
 801cd00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	69db      	ldr	r3, [r3, #28]
 801cd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	2270      	movs	r2, #112	@ 0x70
 801cd0c:	4393      	bics	r3, r2
 801cd0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	2203      	movs	r2, #3
 801cd14:	4393      	bics	r3, r2
 801cd16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cd18:	683b      	ldr	r3, [r7, #0]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	68fa      	ldr	r2, [r7, #12]
 801cd1e:	4313      	orrs	r3, r2
 801cd20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801cd22:	697b      	ldr	r3, [r7, #20]
 801cd24:	4a0d      	ldr	r2, [pc, #52]	@ (801cd5c <TIM_OC3_SetConfig+0x7c>)
 801cd26:	4013      	ands	r3, r2
 801cd28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801cd2a:	683b      	ldr	r3, [r7, #0]
 801cd2c:	689b      	ldr	r3, [r3, #8]
 801cd2e:	021b      	lsls	r3, r3, #8
 801cd30:	697a      	ldr	r2, [r7, #20]
 801cd32:	4313      	orrs	r3, r2
 801cd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	693a      	ldr	r2, [r7, #16]
 801cd3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	68fa      	ldr	r2, [r7, #12]
 801cd40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	685a      	ldr	r2, [r3, #4]
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	697a      	ldr	r2, [r7, #20]
 801cd4e:	621a      	str	r2, [r3, #32]
}
 801cd50:	46c0      	nop			@ (mov r8, r8)
 801cd52:	46bd      	mov	sp, r7
 801cd54:	b006      	add	sp, #24
 801cd56:	bd80      	pop	{r7, pc}
 801cd58:	fffffeff 	.word	0xfffffeff
 801cd5c:	fffffdff 	.word	0xfffffdff

0801cd60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b086      	sub	sp, #24
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	6a1b      	ldr	r3, [r3, #32]
 801cd6e:	4a1b      	ldr	r2, [pc, #108]	@ (801cddc <TIM_OC4_SetConfig+0x7c>)
 801cd70:	401a      	ands	r2, r3
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	6a1b      	ldr	r3, [r3, #32]
 801cd7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	685b      	ldr	r3, [r3, #4]
 801cd80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	69db      	ldr	r3, [r3, #28]
 801cd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	4a15      	ldr	r2, [pc, #84]	@ (801cde0 <TIM_OC4_SetConfig+0x80>)
 801cd8c:	4013      	ands	r3, r2
 801cd8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	4a14      	ldr	r2, [pc, #80]	@ (801cde4 <TIM_OC4_SetConfig+0x84>)
 801cd94:	4013      	ands	r3, r2
 801cd96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cd98:	683b      	ldr	r3, [r7, #0]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	021b      	lsls	r3, r3, #8
 801cd9e:	68fa      	ldr	r2, [r7, #12]
 801cda0:	4313      	orrs	r3, r2
 801cda2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801cda4:	697b      	ldr	r3, [r7, #20]
 801cda6:	4a10      	ldr	r2, [pc, #64]	@ (801cde8 <TIM_OC4_SetConfig+0x88>)
 801cda8:	4013      	ands	r3, r2
 801cdaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	689b      	ldr	r3, [r3, #8]
 801cdb0:	031b      	lsls	r3, r3, #12
 801cdb2:	697a      	ldr	r2, [r7, #20]
 801cdb4:	4313      	orrs	r3, r2
 801cdb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	693a      	ldr	r2, [r7, #16]
 801cdbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	68fa      	ldr	r2, [r7, #12]
 801cdc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801cdc4:	683b      	ldr	r3, [r7, #0]
 801cdc6:	685a      	ldr	r2, [r3, #4]
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	697a      	ldr	r2, [r7, #20]
 801cdd0:	621a      	str	r2, [r3, #32]
}
 801cdd2:	46c0      	nop			@ (mov r8, r8)
 801cdd4:	46bd      	mov	sp, r7
 801cdd6:	b006      	add	sp, #24
 801cdd8:	bd80      	pop	{r7, pc}
 801cdda:	46c0      	nop			@ (mov r8, r8)
 801cddc:	ffffefff 	.word	0xffffefff
 801cde0:	ffff8fff 	.word	0xffff8fff
 801cde4:	fffffcff 	.word	0xfffffcff
 801cde8:	ffffdfff 	.word	0xffffdfff

0801cdec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b086      	sub	sp, #24
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	60f8      	str	r0, [r7, #12]
 801cdf4:	60b9      	str	r1, [r7, #8]
 801cdf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801cdf8:	68bb      	ldr	r3, [r7, #8]
 801cdfa:	221f      	movs	r2, #31
 801cdfc:	4013      	ands	r3, r2
 801cdfe:	2201      	movs	r2, #1
 801ce00:	409a      	lsls	r2, r3
 801ce02:	0013      	movs	r3, r2
 801ce04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	6a1b      	ldr	r3, [r3, #32]
 801ce0a:	697a      	ldr	r2, [r7, #20]
 801ce0c:	43d2      	mvns	r2, r2
 801ce0e:	401a      	ands	r2, r3
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	6a1a      	ldr	r2, [r3, #32]
 801ce18:	68bb      	ldr	r3, [r7, #8]
 801ce1a:	211f      	movs	r1, #31
 801ce1c:	400b      	ands	r3, r1
 801ce1e:	6879      	ldr	r1, [r7, #4]
 801ce20:	4099      	lsls	r1, r3
 801ce22:	000b      	movs	r3, r1
 801ce24:	431a      	orrs	r2, r3
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	621a      	str	r2, [r3, #32]
}
 801ce2a:	46c0      	nop			@ (mov r8, r8)
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	b006      	add	sp, #24
 801ce30:	bd80      	pop	{r7, pc}
	...

0801ce34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b084      	sub	sp, #16
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
 801ce3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2238      	movs	r2, #56	@ 0x38
 801ce42:	5c9b      	ldrb	r3, [r3, r2]
 801ce44:	2b01      	cmp	r3, #1
 801ce46:	d101      	bne.n	801ce4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ce48:	2302      	movs	r3, #2
 801ce4a:	e047      	b.n	801cedc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	2238      	movs	r2, #56	@ 0x38
 801ce50:	2101      	movs	r1, #1
 801ce52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2239      	movs	r2, #57	@ 0x39
 801ce58:	2102      	movs	r1, #2
 801ce5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	685b      	ldr	r3, [r3, #4]
 801ce62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	689b      	ldr	r3, [r3, #8]
 801ce6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	2270      	movs	r2, #112	@ 0x70
 801ce70:	4393      	bics	r3, r2
 801ce72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801ce74:	683b      	ldr	r3, [r7, #0]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	68fa      	ldr	r2, [r7, #12]
 801ce7a:	4313      	orrs	r3, r2
 801ce7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	68fa      	ldr	r2, [r7, #12]
 801ce84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681a      	ldr	r2, [r3, #0]
 801ce8a:	2380      	movs	r3, #128	@ 0x80
 801ce8c:	05db      	lsls	r3, r3, #23
 801ce8e:	429a      	cmp	r2, r3
 801ce90:	d00e      	beq.n	801ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	4a13      	ldr	r2, [pc, #76]	@ (801cee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801ce98:	4293      	cmp	r3, r2
 801ce9a:	d009      	beq.n	801ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	4a11      	ldr	r2, [pc, #68]	@ (801cee8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801cea2:	4293      	cmp	r3, r2
 801cea4:	d004      	beq.n	801ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	4a10      	ldr	r2, [pc, #64]	@ (801ceec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801ceac:	4293      	cmp	r3, r2
 801ceae:	d10c      	bne.n	801ceca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801ceb0:	68bb      	ldr	r3, [r7, #8]
 801ceb2:	2280      	movs	r2, #128	@ 0x80
 801ceb4:	4393      	bics	r3, r2
 801ceb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801ceb8:	683b      	ldr	r3, [r7, #0]
 801ceba:	685b      	ldr	r3, [r3, #4]
 801cebc:	68ba      	ldr	r2, [r7, #8]
 801cebe:	4313      	orrs	r3, r2
 801cec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	68ba      	ldr	r2, [r7, #8]
 801cec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2239      	movs	r2, #57	@ 0x39
 801cece:	2101      	movs	r1, #1
 801ced0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2238      	movs	r2, #56	@ 0x38
 801ced6:	2100      	movs	r1, #0
 801ced8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ceda:	2300      	movs	r3, #0
}
 801cedc:	0018      	movs	r0, r3
 801cede:	46bd      	mov	sp, r7
 801cee0:	b004      	add	sp, #16
 801cee2:	bd80      	pop	{r7, pc}
 801cee4:	40000400 	.word	0x40000400
 801cee8:	40010800 	.word	0x40010800
 801ceec:	40011400 	.word	0x40011400

0801cef0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b082      	sub	sp, #8
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
 801cef8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2238      	movs	r2, #56	@ 0x38
 801cefe:	5c9b      	ldrb	r3, [r3, r2]
 801cf00:	2b01      	cmp	r3, #1
 801cf02:	d101      	bne.n	801cf08 <HAL_TIMEx_RemapConfig+0x18>
 801cf04:	2302      	movs	r3, #2
 801cf06:	e00c      	b.n	801cf22 <HAL_TIMEx_RemapConfig+0x32>
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2238      	movs	r2, #56	@ 0x38
 801cf0c:	2101      	movs	r1, #1
 801cf0e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	683a      	ldr	r2, [r7, #0]
 801cf16:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2238      	movs	r2, #56	@ 0x38
 801cf1c:	2100      	movs	r1, #0
 801cf1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cf20:	2300      	movs	r3, #0
}
 801cf22:	0018      	movs	r0, r3
 801cf24:	46bd      	mov	sp, r7
 801cf26:	b002      	add	sp, #8
 801cf28:	bd80      	pop	{r7, pc}
	...

0801cf2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b082      	sub	sp, #8
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d101      	bne.n	801cf3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801cf3a:	2301      	movs	r3, #1
 801cf3c:	e053      	b.n	801cfe6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d116      	bne.n	801cf74 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	2278      	movs	r2, #120	@ 0x78
 801cf4a:	2100      	movs	r1, #0
 801cf4c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	0018      	movs	r0, r3
 801cf52:	f000 fd65 	bl	801da20 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	22b0      	movs	r2, #176	@ 0xb0
 801cf5a:	589b      	ldr	r3, [r3, r2]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d103      	bne.n	801cf68 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	21b0      	movs	r1, #176	@ 0xb0
 801cf64:	4a22      	ldr	r2, [pc, #136]	@ (801cff0 <HAL_UART_Init+0xc4>)
 801cf66:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	22b0      	movs	r2, #176	@ 0xb0
 801cf6c:	589b      	ldr	r3, [r3, r2]
 801cf6e:	687a      	ldr	r2, [r7, #4]
 801cf70:	0010      	movs	r0, r2
 801cf72:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	2224      	movs	r2, #36	@ 0x24
 801cf78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	681a      	ldr	r2, [r3, #0]
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	2101      	movs	r1, #1
 801cf86:	438a      	bics	r2, r1
 801cf88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	0018      	movs	r0, r3
 801cf8e:	f000 fd8b 	bl	801daa8 <UART_SetConfig>
 801cf92:	0003      	movs	r3, r0
 801cf94:	2b01      	cmp	r3, #1
 801cf96:	d101      	bne.n	801cf9c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801cf98:	2301      	movs	r3, #1
 801cf9a:	e024      	b.n	801cfe6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d003      	beq.n	801cfac <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	0018      	movs	r0, r3
 801cfa8:	f001 f81c 	bl	801dfe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	685a      	ldr	r2, [r3, #4]
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	490f      	ldr	r1, [pc, #60]	@ (801cff4 <HAL_UART_Init+0xc8>)
 801cfb8:	400a      	ands	r2, r1
 801cfba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	689a      	ldr	r2, [r3, #8]
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	212a      	movs	r1, #42	@ 0x2a
 801cfc8:	438a      	bics	r2, r1
 801cfca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	681a      	ldr	r2, [r3, #0]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	2101      	movs	r1, #1
 801cfd8:	430a      	orrs	r2, r1
 801cfda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	0018      	movs	r0, r3
 801cfe0:	f001 f8b4 	bl	801e14c <UART_CheckIdleState>
 801cfe4:	0003      	movs	r3, r0
}
 801cfe6:	0018      	movs	r0, r3
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	b002      	add	sp, #8
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	46c0      	nop			@ (mov r8, r8)
 801cff0:	080137b1 	.word	0x080137b1
 801cff4:	ffffb7ff 	.word	0xffffb7ff

0801cff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b08a      	sub	sp, #40	@ 0x28
 801cffc:	af02      	add	r7, sp, #8
 801cffe:	60f8      	str	r0, [r7, #12]
 801d000:	60b9      	str	r1, [r7, #8]
 801d002:	603b      	str	r3, [r7, #0]
 801d004:	1dbb      	adds	r3, r7, #6
 801d006:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d00c:	2b20      	cmp	r3, #32
 801d00e:	d000      	beq.n	801d012 <HAL_UART_Transmit+0x1a>
 801d010:	e08c      	b.n	801d12c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d012:	68bb      	ldr	r3, [r7, #8]
 801d014:	2b00      	cmp	r3, #0
 801d016:	d003      	beq.n	801d020 <HAL_UART_Transmit+0x28>
 801d018:	1dbb      	adds	r3, r7, #6
 801d01a:	881b      	ldrh	r3, [r3, #0]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d101      	bne.n	801d024 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d020:	2301      	movs	r3, #1
 801d022:	e084      	b.n	801d12e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	689a      	ldr	r2, [r3, #8]
 801d028:	2380      	movs	r3, #128	@ 0x80
 801d02a:	015b      	lsls	r3, r3, #5
 801d02c:	429a      	cmp	r2, r3
 801d02e:	d109      	bne.n	801d044 <HAL_UART_Transmit+0x4c>
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	691b      	ldr	r3, [r3, #16]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d105      	bne.n	801d044 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d038:	68bb      	ldr	r3, [r7, #8]
 801d03a:	2201      	movs	r2, #1
 801d03c:	4013      	ands	r3, r2
 801d03e:	d001      	beq.n	801d044 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d040:	2301      	movs	r3, #1
 801d042:	e074      	b.n	801d12e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	2284      	movs	r2, #132	@ 0x84
 801d048:	2100      	movs	r1, #0
 801d04a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	2221      	movs	r2, #33	@ 0x21
 801d050:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d052:	f7f7 fa7b 	bl	801454c <HAL_GetTick>
 801d056:	0003      	movs	r3, r0
 801d058:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	1dba      	adds	r2, r7, #6
 801d05e:	2150      	movs	r1, #80	@ 0x50
 801d060:	8812      	ldrh	r2, [r2, #0]
 801d062:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	1dba      	adds	r2, r7, #6
 801d068:	2152      	movs	r1, #82	@ 0x52
 801d06a:	8812      	ldrh	r2, [r2, #0]
 801d06c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	689a      	ldr	r2, [r3, #8]
 801d072:	2380      	movs	r3, #128	@ 0x80
 801d074:	015b      	lsls	r3, r3, #5
 801d076:	429a      	cmp	r2, r3
 801d078:	d108      	bne.n	801d08c <HAL_UART_Transmit+0x94>
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	691b      	ldr	r3, [r3, #16]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d104      	bne.n	801d08c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d082:	2300      	movs	r3, #0
 801d084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d086:	68bb      	ldr	r3, [r7, #8]
 801d088:	61bb      	str	r3, [r7, #24]
 801d08a:	e003      	b.n	801d094 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d090:	2300      	movs	r3, #0
 801d092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d094:	e02f      	b.n	801d0f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d096:	697a      	ldr	r2, [r7, #20]
 801d098:	68f8      	ldr	r0, [r7, #12]
 801d09a:	683b      	ldr	r3, [r7, #0]
 801d09c:	9300      	str	r3, [sp, #0]
 801d09e:	0013      	movs	r3, r2
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	2180      	movs	r1, #128	@ 0x80
 801d0a4:	f001 f8fa 	bl	801e29c <UART_WaitOnFlagUntilTimeout>
 801d0a8:	1e03      	subs	r3, r0, #0
 801d0aa:	d004      	beq.n	801d0b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	2220      	movs	r2, #32
 801d0b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d0b2:	2303      	movs	r3, #3
 801d0b4:	e03b      	b.n	801d12e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d0b6:	69fb      	ldr	r3, [r7, #28]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d10b      	bne.n	801d0d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d0bc:	69bb      	ldr	r3, [r7, #24]
 801d0be:	881b      	ldrh	r3, [r3, #0]
 801d0c0:	001a      	movs	r2, r3
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	05d2      	lsls	r2, r2, #23
 801d0c8:	0dd2      	lsrs	r2, r2, #23
 801d0ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d0cc:	69bb      	ldr	r3, [r7, #24]
 801d0ce:	3302      	adds	r3, #2
 801d0d0:	61bb      	str	r3, [r7, #24]
 801d0d2:	e007      	b.n	801d0e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d0d4:	69fb      	ldr	r3, [r7, #28]
 801d0d6:	781a      	ldrb	r2, [r3, #0]
 801d0d8:	68fb      	ldr	r3, [r7, #12]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d0de:	69fb      	ldr	r3, [r7, #28]
 801d0e0:	3301      	adds	r3, #1
 801d0e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	2252      	movs	r2, #82	@ 0x52
 801d0e8:	5a9b      	ldrh	r3, [r3, r2]
 801d0ea:	b29b      	uxth	r3, r3
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	b299      	uxth	r1, r3
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	2252      	movs	r2, #82	@ 0x52
 801d0f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	2252      	movs	r2, #82	@ 0x52
 801d0fa:	5a9b      	ldrh	r3, [r3, r2]
 801d0fc:	b29b      	uxth	r3, r3
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d1c9      	bne.n	801d096 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d102:	697a      	ldr	r2, [r7, #20]
 801d104:	68f8      	ldr	r0, [r7, #12]
 801d106:	683b      	ldr	r3, [r7, #0]
 801d108:	9300      	str	r3, [sp, #0]
 801d10a:	0013      	movs	r3, r2
 801d10c:	2200      	movs	r2, #0
 801d10e:	2140      	movs	r1, #64	@ 0x40
 801d110:	f001 f8c4 	bl	801e29c <UART_WaitOnFlagUntilTimeout>
 801d114:	1e03      	subs	r3, r0, #0
 801d116:	d004      	beq.n	801d122 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	2220      	movs	r2, #32
 801d11c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d11e:	2303      	movs	r3, #3
 801d120:	e005      	b.n	801d12e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	2220      	movs	r2, #32
 801d126:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d128:	2300      	movs	r3, #0
 801d12a:	e000      	b.n	801d12e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d12c:	2302      	movs	r3, #2
  }
}
 801d12e:	0018      	movs	r0, r3
 801d130:	46bd      	mov	sp, r7
 801d132:	b008      	add	sp, #32
 801d134:	bd80      	pop	{r7, pc}
	...

0801d138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b088      	sub	sp, #32
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	60f8      	str	r0, [r7, #12]
 801d140:	60b9      	str	r1, [r7, #8]
 801d142:	1dbb      	adds	r3, r7, #6
 801d144:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	2280      	movs	r2, #128	@ 0x80
 801d14a:	589b      	ldr	r3, [r3, r2]
 801d14c:	2b20      	cmp	r3, #32
 801d14e:	d14a      	bne.n	801d1e6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d003      	beq.n	801d15e <HAL_UART_Receive_IT+0x26>
 801d156:	1dbb      	adds	r3, r7, #6
 801d158:	881b      	ldrh	r3, [r3, #0]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d101      	bne.n	801d162 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d15e:	2301      	movs	r3, #1
 801d160:	e042      	b.n	801d1e8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	689a      	ldr	r2, [r3, #8]
 801d166:	2380      	movs	r3, #128	@ 0x80
 801d168:	015b      	lsls	r3, r3, #5
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d109      	bne.n	801d182 <HAL_UART_Receive_IT+0x4a>
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	691b      	ldr	r3, [r3, #16]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d105      	bne.n	801d182 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d176:	68bb      	ldr	r3, [r7, #8]
 801d178:	2201      	movs	r2, #1
 801d17a:	4013      	ands	r3, r2
 801d17c:	d001      	beq.n	801d182 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d17e:	2301      	movs	r3, #1
 801d180:	e032      	b.n	801d1e8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	2200      	movs	r2, #0
 801d186:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	4a18      	ldr	r2, [pc, #96]	@ (801d1f0 <HAL_UART_Receive_IT+0xb8>)
 801d18e:	4293      	cmp	r3, r2
 801d190:	d020      	beq.n	801d1d4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	685a      	ldr	r2, [r3, #4]
 801d198:	2380      	movs	r3, #128	@ 0x80
 801d19a:	041b      	lsls	r3, r3, #16
 801d19c:	4013      	ands	r3, r2
 801d19e:	d019      	beq.n	801d1d4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d1a4:	613b      	str	r3, [r7, #16]
  return(result);
 801d1a6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d1a8:	61fb      	str	r3, [r7, #28]
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1ae:	697b      	ldr	r3, [r7, #20]
 801d1b0:	f383 8810 	msr	PRIMASK, r3
}
 801d1b4:	46c0      	nop			@ (mov r8, r8)
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	681a      	ldr	r2, [r3, #0]
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	2180      	movs	r1, #128	@ 0x80
 801d1c2:	04c9      	lsls	r1, r1, #19
 801d1c4:	430a      	orrs	r2, r1
 801d1c6:	601a      	str	r2, [r3, #0]
 801d1c8:	69fb      	ldr	r3, [r7, #28]
 801d1ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1cc:	69bb      	ldr	r3, [r7, #24]
 801d1ce:	f383 8810 	msr	PRIMASK, r3
}
 801d1d2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d1d4:	1dbb      	adds	r3, r7, #6
 801d1d6:	881a      	ldrh	r2, [r3, #0]
 801d1d8:	68b9      	ldr	r1, [r7, #8]
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	0018      	movs	r0, r3
 801d1de:	f001 f8c7 	bl	801e370 <UART_Start_Receive_IT>
 801d1e2:	0003      	movs	r3, r0
 801d1e4:	e000      	b.n	801d1e8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d1e6:	2302      	movs	r3, #2
  }
}
 801d1e8:	0018      	movs	r0, r3
 801d1ea:	46bd      	mov	sp, r7
 801d1ec:	b008      	add	sp, #32
 801d1ee:	bd80      	pop	{r7, pc}
 801d1f0:	40004800 	.word	0x40004800

0801d1f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b088      	sub	sp, #32
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	60f8      	str	r0, [r7, #12]
 801d1fc:	60b9      	str	r1, [r7, #8]
 801d1fe:	1dbb      	adds	r3, r7, #6
 801d200:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d206:	2b20      	cmp	r3, #32
 801d208:	d000      	beq.n	801d20c <HAL_UART_Transmit_DMA+0x18>
 801d20a:	e077      	b.n	801d2fc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d003      	beq.n	801d21a <HAL_UART_Transmit_DMA+0x26>
 801d212:	1dbb      	adds	r3, r7, #6
 801d214:	881b      	ldrh	r3, [r3, #0]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d101      	bne.n	801d21e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d21a:	2301      	movs	r3, #1
 801d21c:	e06f      	b.n	801d2fe <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	689a      	ldr	r2, [r3, #8]
 801d222:	2380      	movs	r3, #128	@ 0x80
 801d224:	015b      	lsls	r3, r3, #5
 801d226:	429a      	cmp	r2, r3
 801d228:	d109      	bne.n	801d23e <HAL_UART_Transmit_DMA+0x4a>
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	691b      	ldr	r3, [r3, #16]
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d105      	bne.n	801d23e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d232:	68bb      	ldr	r3, [r7, #8]
 801d234:	2201      	movs	r2, #1
 801d236:	4013      	ands	r3, r2
 801d238:	d001      	beq.n	801d23e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d23a:	2301      	movs	r3, #1
 801d23c:	e05f      	b.n	801d2fe <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d23e:	68fb      	ldr	r3, [r7, #12]
 801d240:	68ba      	ldr	r2, [r7, #8]
 801d242:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	1dba      	adds	r2, r7, #6
 801d248:	2150      	movs	r1, #80	@ 0x50
 801d24a:	8812      	ldrh	r2, [r2, #0]
 801d24c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	1dba      	adds	r2, r7, #6
 801d252:	2152      	movs	r1, #82	@ 0x52
 801d254:	8812      	ldrh	r2, [r2, #0]
 801d256:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	2284      	movs	r2, #132	@ 0x84
 801d25c:	2100      	movs	r1, #0
 801d25e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	2221      	movs	r2, #33	@ 0x21
 801d264:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d027      	beq.n	801d2be <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d272:	4a25      	ldr	r2, [pc, #148]	@ (801d308 <HAL_UART_Transmit_DMA+0x114>)
 801d274:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d27a:	4a24      	ldr	r2, [pc, #144]	@ (801d30c <HAL_UART_Transmit_DMA+0x118>)
 801d27c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d282:	4a23      	ldr	r2, [pc, #140]	@ (801d310 <HAL_UART_Transmit_DMA+0x11c>)
 801d284:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d28a:	2200      	movs	r2, #0
 801d28c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d296:	0019      	movs	r1, r3
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	3328      	adds	r3, #40	@ 0x28
 801d29e:	001a      	movs	r2, r3
 801d2a0:	1dbb      	adds	r3, r7, #6
 801d2a2:	881b      	ldrh	r3, [r3, #0]
 801d2a4:	f7f7 fea4 	bl	8014ff0 <HAL_DMA_Start_IT>
 801d2a8:	1e03      	subs	r3, r0, #0
 801d2aa:	d008      	beq.n	801d2be <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	2284      	movs	r2, #132	@ 0x84
 801d2b0:	2110      	movs	r1, #16
 801d2b2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	2220      	movs	r2, #32
 801d2b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d2ba:	2301      	movs	r3, #1
 801d2bc:	e01f      	b.n	801d2fe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	2240      	movs	r2, #64	@ 0x40
 801d2c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2c6:	f3ef 8310 	mrs	r3, PRIMASK
 801d2ca:	613b      	str	r3, [r7, #16]
  return(result);
 801d2cc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d2ce:	61fb      	str	r3, [r7, #28]
 801d2d0:	2301      	movs	r3, #1
 801d2d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2d4:	697b      	ldr	r3, [r7, #20]
 801d2d6:	f383 8810 	msr	PRIMASK, r3
}
 801d2da:	46c0      	nop			@ (mov r8, r8)
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	689a      	ldr	r2, [r3, #8]
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	2180      	movs	r1, #128	@ 0x80
 801d2e8:	430a      	orrs	r2, r1
 801d2ea:	609a      	str	r2, [r3, #8]
 801d2ec:	69fb      	ldr	r3, [r7, #28]
 801d2ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2f0:	69bb      	ldr	r3, [r7, #24]
 801d2f2:	f383 8810 	msr	PRIMASK, r3
}
 801d2f6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	e000      	b.n	801d2fe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d2fc:	2302      	movs	r3, #2
  }
}
 801d2fe:	0018      	movs	r0, r3
 801d300:	46bd      	mov	sp, r7
 801d302:	b008      	add	sp, #32
 801d304:	bd80      	pop	{r7, pc}
 801d306:	46c0      	nop			@ (mov r8, r8)
 801d308:	0801e755 	.word	0x0801e755
 801d30c:	0801e7f1 	.word	0x0801e7f1
 801d310:	0801e991 	.word	0x0801e991

0801d314 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d314:	b580      	push	{r7, lr}
 801d316:	b088      	sub	sp, #32
 801d318:	af00      	add	r7, sp, #0
 801d31a:	60f8      	str	r0, [r7, #12]
 801d31c:	60b9      	str	r1, [r7, #8]
 801d31e:	1dbb      	adds	r3, r7, #6
 801d320:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	2280      	movs	r2, #128	@ 0x80
 801d326:	589b      	ldr	r3, [r3, r2]
 801d328:	2b20      	cmp	r3, #32
 801d32a:	d14a      	bne.n	801d3c2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d32c:	68bb      	ldr	r3, [r7, #8]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d003      	beq.n	801d33a <HAL_UART_Receive_DMA+0x26>
 801d332:	1dbb      	adds	r3, r7, #6
 801d334:	881b      	ldrh	r3, [r3, #0]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d101      	bne.n	801d33e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d33a:	2301      	movs	r3, #1
 801d33c:	e042      	b.n	801d3c4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	689a      	ldr	r2, [r3, #8]
 801d342:	2380      	movs	r3, #128	@ 0x80
 801d344:	015b      	lsls	r3, r3, #5
 801d346:	429a      	cmp	r2, r3
 801d348:	d109      	bne.n	801d35e <HAL_UART_Receive_DMA+0x4a>
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	691b      	ldr	r3, [r3, #16]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d105      	bne.n	801d35e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d352:	68bb      	ldr	r3, [r7, #8]
 801d354:	2201      	movs	r2, #1
 801d356:	4013      	ands	r3, r2
 801d358:	d001      	beq.n	801d35e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d35a:	2301      	movs	r3, #1
 801d35c:	e032      	b.n	801d3c4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	2200      	movs	r2, #0
 801d362:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	4a18      	ldr	r2, [pc, #96]	@ (801d3cc <HAL_UART_Receive_DMA+0xb8>)
 801d36a:	4293      	cmp	r3, r2
 801d36c:	d020      	beq.n	801d3b0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d36e:	68fb      	ldr	r3, [r7, #12]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	685a      	ldr	r2, [r3, #4]
 801d374:	2380      	movs	r3, #128	@ 0x80
 801d376:	041b      	lsls	r3, r3, #16
 801d378:	4013      	ands	r3, r2
 801d37a:	d019      	beq.n	801d3b0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d37c:	f3ef 8310 	mrs	r3, PRIMASK
 801d380:	613b      	str	r3, [r7, #16]
  return(result);
 801d382:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d384:	61fb      	str	r3, [r7, #28]
 801d386:	2301      	movs	r3, #1
 801d388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d38a:	697b      	ldr	r3, [r7, #20]
 801d38c:	f383 8810 	msr	PRIMASK, r3
}
 801d390:	46c0      	nop			@ (mov r8, r8)
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	681a      	ldr	r2, [r3, #0]
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	2180      	movs	r1, #128	@ 0x80
 801d39e:	04c9      	lsls	r1, r1, #19
 801d3a0:	430a      	orrs	r2, r1
 801d3a2:	601a      	str	r2, [r3, #0]
 801d3a4:	69fb      	ldr	r3, [r7, #28]
 801d3a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3a8:	69bb      	ldr	r3, [r7, #24]
 801d3aa:	f383 8810 	msr	PRIMASK, r3
}
 801d3ae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d3b0:	1dbb      	adds	r3, r7, #6
 801d3b2:	881a      	ldrh	r2, [r3, #0]
 801d3b4:	68b9      	ldr	r1, [r7, #8]
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	f001 f8a3 	bl	801e504 <UART_Start_Receive_DMA>
 801d3be:	0003      	movs	r3, r0
 801d3c0:	e000      	b.n	801d3c4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d3c2:	2302      	movs	r3, #2
  }
}
 801d3c4:	0018      	movs	r0, r3
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	b008      	add	sp, #32
 801d3ca:	bd80      	pop	{r7, pc}
 801d3cc:	40004800 	.word	0x40004800

0801d3d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d3d0:	b590      	push	{r4, r7, lr}
 801d3d2:	b0ab      	sub	sp, #172	@ 0xac
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	69db      	ldr	r3, [r3, #28]
 801d3de:	22a4      	movs	r2, #164	@ 0xa4
 801d3e0:	18b9      	adds	r1, r7, r2
 801d3e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	20a0      	movs	r0, #160	@ 0xa0
 801d3ec:	1839      	adds	r1, r7, r0
 801d3ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	689b      	ldr	r3, [r3, #8]
 801d3f6:	219c      	movs	r1, #156	@ 0x9c
 801d3f8:	1879      	adds	r1, r7, r1
 801d3fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d3fc:	0011      	movs	r1, r2
 801d3fe:	18bb      	adds	r3, r7, r2
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	4a9c      	ldr	r2, [pc, #624]	@ (801d674 <HAL_UART_IRQHandler+0x2a4>)
 801d404:	4013      	ands	r3, r2
 801d406:	2298      	movs	r2, #152	@ 0x98
 801d408:	18bc      	adds	r4, r7, r2
 801d40a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801d40c:	18bb      	adds	r3, r7, r2
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	2b00      	cmp	r3, #0
 801d412:	d114      	bne.n	801d43e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d414:	187b      	adds	r3, r7, r1
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	2220      	movs	r2, #32
 801d41a:	4013      	ands	r3, r2
 801d41c:	d00f      	beq.n	801d43e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d41e:	183b      	adds	r3, r7, r0
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	2220      	movs	r2, #32
 801d424:	4013      	ands	r3, r2
 801d426:	d00a      	beq.n	801d43e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d100      	bne.n	801d432 <HAL_UART_IRQHandler+0x62>
 801d430:	e2aa      	b.n	801d988 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d436:	687a      	ldr	r2, [r7, #4]
 801d438:	0010      	movs	r0, r2
 801d43a:	4798      	blx	r3
      }
      return;
 801d43c:	e2a4      	b.n	801d988 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801d43e:	2398      	movs	r3, #152	@ 0x98
 801d440:	18fb      	adds	r3, r7, r3
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d100      	bne.n	801d44a <HAL_UART_IRQHandler+0x7a>
 801d448:	e11a      	b.n	801d680 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d44a:	239c      	movs	r3, #156	@ 0x9c
 801d44c:	18fb      	adds	r3, r7, r3
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	2201      	movs	r2, #1
 801d452:	4013      	ands	r3, r2
 801d454:	d106      	bne.n	801d464 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d456:	23a0      	movs	r3, #160	@ 0xa0
 801d458:	18fb      	adds	r3, r7, r3
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	4a86      	ldr	r2, [pc, #536]	@ (801d678 <HAL_UART_IRQHandler+0x2a8>)
 801d45e:	4013      	ands	r3, r2
 801d460:	d100      	bne.n	801d464 <HAL_UART_IRQHandler+0x94>
 801d462:	e10d      	b.n	801d680 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d464:	23a4      	movs	r3, #164	@ 0xa4
 801d466:	18fb      	adds	r3, r7, r3
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	2201      	movs	r2, #1
 801d46c:	4013      	ands	r3, r2
 801d46e:	d012      	beq.n	801d496 <HAL_UART_IRQHandler+0xc6>
 801d470:	23a0      	movs	r3, #160	@ 0xa0
 801d472:	18fb      	adds	r3, r7, r3
 801d474:	681a      	ldr	r2, [r3, #0]
 801d476:	2380      	movs	r3, #128	@ 0x80
 801d478:	005b      	lsls	r3, r3, #1
 801d47a:	4013      	ands	r3, r2
 801d47c:	d00b      	beq.n	801d496 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	2201      	movs	r2, #1
 801d484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2284      	movs	r2, #132	@ 0x84
 801d48a:	589b      	ldr	r3, [r3, r2]
 801d48c:	2201      	movs	r2, #1
 801d48e:	431a      	orrs	r2, r3
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	2184      	movs	r1, #132	@ 0x84
 801d494:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d496:	23a4      	movs	r3, #164	@ 0xa4
 801d498:	18fb      	adds	r3, r7, r3
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	2202      	movs	r2, #2
 801d49e:	4013      	ands	r3, r2
 801d4a0:	d011      	beq.n	801d4c6 <HAL_UART_IRQHandler+0xf6>
 801d4a2:	239c      	movs	r3, #156	@ 0x9c
 801d4a4:	18fb      	adds	r3, r7, r3
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	2201      	movs	r2, #1
 801d4aa:	4013      	ands	r3, r2
 801d4ac:	d00b      	beq.n	801d4c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	2202      	movs	r2, #2
 801d4b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2284      	movs	r2, #132	@ 0x84
 801d4ba:	589b      	ldr	r3, [r3, r2]
 801d4bc:	2204      	movs	r2, #4
 801d4be:	431a      	orrs	r2, r3
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	2184      	movs	r1, #132	@ 0x84
 801d4c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d4c6:	23a4      	movs	r3, #164	@ 0xa4
 801d4c8:	18fb      	adds	r3, r7, r3
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	2204      	movs	r2, #4
 801d4ce:	4013      	ands	r3, r2
 801d4d0:	d011      	beq.n	801d4f6 <HAL_UART_IRQHandler+0x126>
 801d4d2:	239c      	movs	r3, #156	@ 0x9c
 801d4d4:	18fb      	adds	r3, r7, r3
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	2201      	movs	r2, #1
 801d4da:	4013      	ands	r3, r2
 801d4dc:	d00b      	beq.n	801d4f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	2204      	movs	r2, #4
 801d4e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	2284      	movs	r2, #132	@ 0x84
 801d4ea:	589b      	ldr	r3, [r3, r2]
 801d4ec:	2202      	movs	r2, #2
 801d4ee:	431a      	orrs	r2, r3
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	2184      	movs	r1, #132	@ 0x84
 801d4f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d4f6:	23a4      	movs	r3, #164	@ 0xa4
 801d4f8:	18fb      	adds	r3, r7, r3
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	2208      	movs	r2, #8
 801d4fe:	4013      	ands	r3, r2
 801d500:	d017      	beq.n	801d532 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d502:	23a0      	movs	r3, #160	@ 0xa0
 801d504:	18fb      	adds	r3, r7, r3
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	2220      	movs	r2, #32
 801d50a:	4013      	ands	r3, r2
 801d50c:	d105      	bne.n	801d51a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d50e:	239c      	movs	r3, #156	@ 0x9c
 801d510:	18fb      	adds	r3, r7, r3
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	2201      	movs	r2, #1
 801d516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d518:	d00b      	beq.n	801d532 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	2208      	movs	r2, #8
 801d520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	2284      	movs	r2, #132	@ 0x84
 801d526:	589b      	ldr	r3, [r3, r2]
 801d528:	2208      	movs	r2, #8
 801d52a:	431a      	orrs	r2, r3
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	2184      	movs	r1, #132	@ 0x84
 801d530:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d532:	23a4      	movs	r3, #164	@ 0xa4
 801d534:	18fb      	adds	r3, r7, r3
 801d536:	681a      	ldr	r2, [r3, #0]
 801d538:	2380      	movs	r3, #128	@ 0x80
 801d53a:	011b      	lsls	r3, r3, #4
 801d53c:	4013      	ands	r3, r2
 801d53e:	d013      	beq.n	801d568 <HAL_UART_IRQHandler+0x198>
 801d540:	23a0      	movs	r3, #160	@ 0xa0
 801d542:	18fb      	adds	r3, r7, r3
 801d544:	681a      	ldr	r2, [r3, #0]
 801d546:	2380      	movs	r3, #128	@ 0x80
 801d548:	04db      	lsls	r3, r3, #19
 801d54a:	4013      	ands	r3, r2
 801d54c:	d00c      	beq.n	801d568 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	2280      	movs	r2, #128	@ 0x80
 801d554:	0112      	lsls	r2, r2, #4
 801d556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	2284      	movs	r2, #132	@ 0x84
 801d55c:	589b      	ldr	r3, [r3, r2]
 801d55e:	2220      	movs	r2, #32
 801d560:	431a      	orrs	r2, r3
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	2184      	movs	r1, #132	@ 0x84
 801d566:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2284      	movs	r2, #132	@ 0x84
 801d56c:	589b      	ldr	r3, [r3, r2]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d100      	bne.n	801d574 <HAL_UART_IRQHandler+0x1a4>
 801d572:	e20b      	b.n	801d98c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d574:	23a4      	movs	r3, #164	@ 0xa4
 801d576:	18fb      	adds	r3, r7, r3
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	2220      	movs	r2, #32
 801d57c:	4013      	ands	r3, r2
 801d57e:	d00e      	beq.n	801d59e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d580:	23a0      	movs	r3, #160	@ 0xa0
 801d582:	18fb      	adds	r3, r7, r3
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2220      	movs	r2, #32
 801d588:	4013      	ands	r3, r2
 801d58a:	d008      	beq.n	801d59e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d590:	2b00      	cmp	r3, #0
 801d592:	d004      	beq.n	801d59e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d598:	687a      	ldr	r2, [r7, #4]
 801d59a:	0010      	movs	r0, r2
 801d59c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	2284      	movs	r2, #132	@ 0x84
 801d5a2:	589b      	ldr	r3, [r3, r2]
 801d5a4:	2194      	movs	r1, #148	@ 0x94
 801d5a6:	187a      	adds	r2, r7, r1
 801d5a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	689b      	ldr	r3, [r3, #8]
 801d5b0:	2240      	movs	r2, #64	@ 0x40
 801d5b2:	4013      	ands	r3, r2
 801d5b4:	2b40      	cmp	r3, #64	@ 0x40
 801d5b6:	d004      	beq.n	801d5c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d5b8:	187b      	adds	r3, r7, r1
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	2228      	movs	r2, #40	@ 0x28
 801d5be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d5c0:	d04b      	beq.n	801d65a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	0018      	movs	r0, r3
 801d5c6:	f001 f861 	bl	801e68c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	689b      	ldr	r3, [r3, #8]
 801d5d0:	2240      	movs	r2, #64	@ 0x40
 801d5d2:	4013      	ands	r3, r2
 801d5d4:	2b40      	cmp	r3, #64	@ 0x40
 801d5d6:	d139      	bne.n	801d64c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d5dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801d5de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d5e0:	2090      	movs	r0, #144	@ 0x90
 801d5e2:	183a      	adds	r2, r7, r0
 801d5e4:	6013      	str	r3, [r2, #0]
 801d5e6:	2301      	movs	r3, #1
 801d5e8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d5ec:	f383 8810 	msr	PRIMASK, r3
}
 801d5f0:	46c0      	nop			@ (mov r8, r8)
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	689a      	ldr	r2, [r3, #8]
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	2140      	movs	r1, #64	@ 0x40
 801d5fe:	438a      	bics	r2, r1
 801d600:	609a      	str	r2, [r3, #8]
 801d602:	183b      	adds	r3, r7, r0
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d60a:	f383 8810 	msr	PRIMASK, r3
}
 801d60e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d614:	2b00      	cmp	r3, #0
 801d616:	d012      	beq.n	801d63e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d61c:	4a17      	ldr	r2, [pc, #92]	@ (801d67c <HAL_UART_IRQHandler+0x2ac>)
 801d61e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d624:	0018      	movs	r0, r3
 801d626:	f7f7 fd89 	bl	801513c <HAL_DMA_Abort_IT>
 801d62a:	1e03      	subs	r3, r0, #0
 801d62c:	d020      	beq.n	801d670 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d638:	0018      	movs	r0, r3
 801d63a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d63c:	e018      	b.n	801d670 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	2298      	movs	r2, #152	@ 0x98
 801d642:	589b      	ldr	r3, [r3, r2]
 801d644:	687a      	ldr	r2, [r7, #4]
 801d646:	0010      	movs	r0, r2
 801d648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d64a:	e011      	b.n	801d670 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	2298      	movs	r2, #152	@ 0x98
 801d650:	589b      	ldr	r3, [r3, r2]
 801d652:	687a      	ldr	r2, [r7, #4]
 801d654:	0010      	movs	r0, r2
 801d656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d658:	e00a      	b.n	801d670 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	2298      	movs	r2, #152	@ 0x98
 801d65e:	589b      	ldr	r3, [r3, r2]
 801d660:	687a      	ldr	r2, [r7, #4]
 801d662:	0010      	movs	r0, r2
 801d664:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	2284      	movs	r2, #132	@ 0x84
 801d66a:	2100      	movs	r1, #0
 801d66c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801d66e:	e18d      	b.n	801d98c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d670:	46c0      	nop			@ (mov r8, r8)
    return;
 801d672:	e18b      	b.n	801d98c <HAL_UART_IRQHandler+0x5bc>
 801d674:	0000080f 	.word	0x0000080f
 801d678:	04000120 	.word	0x04000120
 801d67c:	0801ea19 	.word	0x0801ea19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d684:	2b01      	cmp	r3, #1
 801d686:	d000      	beq.n	801d68a <HAL_UART_IRQHandler+0x2ba>
 801d688:	e13d      	b.n	801d906 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801d68a:	23a4      	movs	r3, #164	@ 0xa4
 801d68c:	18fb      	adds	r3, r7, r3
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	2210      	movs	r2, #16
 801d692:	4013      	ands	r3, r2
 801d694:	d100      	bne.n	801d698 <HAL_UART_IRQHandler+0x2c8>
 801d696:	e136      	b.n	801d906 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801d698:	23a0      	movs	r3, #160	@ 0xa0
 801d69a:	18fb      	adds	r3, r7, r3
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	2210      	movs	r2, #16
 801d6a0:	4013      	ands	r3, r2
 801d6a2:	d100      	bne.n	801d6a6 <HAL_UART_IRQHandler+0x2d6>
 801d6a4:	e12f      	b.n	801d906 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	2210      	movs	r2, #16
 801d6ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	689b      	ldr	r3, [r3, #8]
 801d6b4:	2240      	movs	r2, #64	@ 0x40
 801d6b6:	4013      	ands	r3, r2
 801d6b8:	2b40      	cmp	r3, #64	@ 0x40
 801d6ba:	d000      	beq.n	801d6be <HAL_UART_IRQHandler+0x2ee>
 801d6bc:	e0a2      	b.n	801d804 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	685a      	ldr	r2, [r3, #4]
 801d6c6:	217e      	movs	r1, #126	@ 0x7e
 801d6c8:	187b      	adds	r3, r7, r1
 801d6ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801d6cc:	187b      	adds	r3, r7, r1
 801d6ce:	881b      	ldrh	r3, [r3, #0]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d100      	bne.n	801d6d6 <HAL_UART_IRQHandler+0x306>
 801d6d4:	e15c      	b.n	801d990 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	2258      	movs	r2, #88	@ 0x58
 801d6da:	5a9b      	ldrh	r3, [r3, r2]
 801d6dc:	187a      	adds	r2, r7, r1
 801d6de:	8812      	ldrh	r2, [r2, #0]
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	d300      	bcc.n	801d6e6 <HAL_UART_IRQHandler+0x316>
 801d6e4:	e154      	b.n	801d990 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	187a      	adds	r2, r7, r1
 801d6ea:	215a      	movs	r1, #90	@ 0x5a
 801d6ec:	8812      	ldrh	r2, [r2, #0]
 801d6ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	2220      	movs	r2, #32
 801d6fa:	4013      	ands	r3, r2
 801d6fc:	d16f      	bne.n	801d7de <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6fe:	f3ef 8310 	mrs	r3, PRIMASK
 801d702:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d706:	67bb      	str	r3, [r7, #120]	@ 0x78
 801d708:	2301      	movs	r3, #1
 801d70a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d70e:	f383 8810 	msr	PRIMASK, r3
}
 801d712:	46c0      	nop			@ (mov r8, r8)
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	681a      	ldr	r2, [r3, #0]
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	49a0      	ldr	r1, [pc, #640]	@ (801d9a0 <HAL_UART_IRQHandler+0x5d0>)
 801d720:	400a      	ands	r2, r1
 801d722:	601a      	str	r2, [r3, #0]
 801d724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d726:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d72a:	f383 8810 	msr	PRIMASK, r3
}
 801d72e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d730:	f3ef 8310 	mrs	r3, PRIMASK
 801d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801d736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d738:	677b      	str	r3, [r7, #116]	@ 0x74
 801d73a:	2301      	movs	r3, #1
 801d73c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d740:	f383 8810 	msr	PRIMASK, r3
}
 801d744:	46c0      	nop			@ (mov r8, r8)
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	689a      	ldr	r2, [r3, #8]
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	2101      	movs	r1, #1
 801d752:	438a      	bics	r2, r1
 801d754:	609a      	str	r2, [r3, #8]
 801d756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d758:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d75c:	f383 8810 	msr	PRIMASK, r3
}
 801d760:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d762:	f3ef 8310 	mrs	r3, PRIMASK
 801d766:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801d768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d76a:	673b      	str	r3, [r7, #112]	@ 0x70
 801d76c:	2301      	movs	r3, #1
 801d76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d772:	f383 8810 	msr	PRIMASK, r3
}
 801d776:	46c0      	nop			@ (mov r8, r8)
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	689a      	ldr	r2, [r3, #8]
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	2140      	movs	r1, #64	@ 0x40
 801d784:	438a      	bics	r2, r1
 801d786:	609a      	str	r2, [r3, #8]
 801d788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d78a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d78c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d78e:	f383 8810 	msr	PRIMASK, r3
}
 801d792:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	2280      	movs	r2, #128	@ 0x80
 801d798:	2120      	movs	r1, #32
 801d79a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	2200      	movs	r2, #0
 801d7a0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7a2:	f3ef 8310 	mrs	r3, PRIMASK
 801d7a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801d7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d7aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d7ac:	2301      	movs	r3, #1
 801d7ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d7b2:	f383 8810 	msr	PRIMASK, r3
}
 801d7b6:	46c0      	nop			@ (mov r8, r8)
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	681a      	ldr	r2, [r3, #0]
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	2110      	movs	r1, #16
 801d7c4:	438a      	bics	r2, r1
 801d7c6:	601a      	str	r2, [r3, #0]
 801d7c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d7ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d7ce:	f383 8810 	msr	PRIMASK, r3
}
 801d7d2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d7d8:	0018      	movs	r0, r3
 801d7da:	f7f7 fc6f 	bl	80150bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	2202      	movs	r2, #2
 801d7e2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	22ac      	movs	r2, #172	@ 0xac
 801d7e8:	589b      	ldr	r3, [r3, r2]
 801d7ea:	687a      	ldr	r2, [r7, #4]
 801d7ec:	2158      	movs	r1, #88	@ 0x58
 801d7ee:	5a51      	ldrh	r1, [r2, r1]
 801d7f0:	687a      	ldr	r2, [r7, #4]
 801d7f2:	205a      	movs	r0, #90	@ 0x5a
 801d7f4:	5a12      	ldrh	r2, [r2, r0]
 801d7f6:	b292      	uxth	r2, r2
 801d7f8:	1a8a      	subs	r2, r1, r2
 801d7fa:	b291      	uxth	r1, r2
 801d7fc:	687a      	ldr	r2, [r7, #4]
 801d7fe:	0010      	movs	r0, r2
 801d800:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d802:	e0c5      	b.n	801d990 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	2258      	movs	r2, #88	@ 0x58
 801d808:	5a99      	ldrh	r1, [r3, r2]
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	225a      	movs	r2, #90	@ 0x5a
 801d80e:	5a9b      	ldrh	r3, [r3, r2]
 801d810:	b29a      	uxth	r2, r3
 801d812:	208e      	movs	r0, #142	@ 0x8e
 801d814:	183b      	adds	r3, r7, r0
 801d816:	1a8a      	subs	r2, r1, r2
 801d818:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	225a      	movs	r2, #90	@ 0x5a
 801d81e:	5a9b      	ldrh	r3, [r3, r2]
 801d820:	b29b      	uxth	r3, r3
 801d822:	2b00      	cmp	r3, #0
 801d824:	d100      	bne.n	801d828 <HAL_UART_IRQHandler+0x458>
 801d826:	e0b5      	b.n	801d994 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801d828:	183b      	adds	r3, r7, r0
 801d82a:	881b      	ldrh	r3, [r3, #0]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d100      	bne.n	801d832 <HAL_UART_IRQHandler+0x462>
 801d830:	e0b0      	b.n	801d994 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d832:	f3ef 8310 	mrs	r3, PRIMASK
 801d836:	60fb      	str	r3, [r7, #12]
  return(result);
 801d838:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d83a:	2488      	movs	r4, #136	@ 0x88
 801d83c:	193a      	adds	r2, r7, r4
 801d83e:	6013      	str	r3, [r2, #0]
 801d840:	2301      	movs	r3, #1
 801d842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d844:	693b      	ldr	r3, [r7, #16]
 801d846:	f383 8810 	msr	PRIMASK, r3
}
 801d84a:	46c0      	nop			@ (mov r8, r8)
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	681a      	ldr	r2, [r3, #0]
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	4953      	ldr	r1, [pc, #332]	@ (801d9a4 <HAL_UART_IRQHandler+0x5d4>)
 801d858:	400a      	ands	r2, r1
 801d85a:	601a      	str	r2, [r3, #0]
 801d85c:	193b      	adds	r3, r7, r4
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d862:	697b      	ldr	r3, [r7, #20]
 801d864:	f383 8810 	msr	PRIMASK, r3
}
 801d868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d86a:	f3ef 8310 	mrs	r3, PRIMASK
 801d86e:	61bb      	str	r3, [r7, #24]
  return(result);
 801d870:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d872:	2484      	movs	r4, #132	@ 0x84
 801d874:	193a      	adds	r2, r7, r4
 801d876:	6013      	str	r3, [r2, #0]
 801d878:	2301      	movs	r3, #1
 801d87a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d87c:	69fb      	ldr	r3, [r7, #28]
 801d87e:	f383 8810 	msr	PRIMASK, r3
}
 801d882:	46c0      	nop			@ (mov r8, r8)
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	689a      	ldr	r2, [r3, #8]
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	2101      	movs	r1, #1
 801d890:	438a      	bics	r2, r1
 801d892:	609a      	str	r2, [r3, #8]
 801d894:	193b      	adds	r3, r7, r4
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d89a:	6a3b      	ldr	r3, [r7, #32]
 801d89c:	f383 8810 	msr	PRIMASK, r3
}
 801d8a0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	2280      	movs	r2, #128	@ 0x80
 801d8a6:	2120      	movs	r1, #32
 801d8a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8b6:	f3ef 8310 	mrs	r3, PRIMASK
 801d8ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d8be:	2480      	movs	r4, #128	@ 0x80
 801d8c0:	193a      	adds	r2, r7, r4
 801d8c2:	6013      	str	r3, [r2, #0]
 801d8c4:	2301      	movs	r3, #1
 801d8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8ca:	f383 8810 	msr	PRIMASK, r3
}
 801d8ce:	46c0      	nop			@ (mov r8, r8)
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	681a      	ldr	r2, [r3, #0]
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	2110      	movs	r1, #16
 801d8dc:	438a      	bics	r2, r1
 801d8de:	601a      	str	r2, [r3, #0]
 801d8e0:	193b      	adds	r3, r7, r4
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8e8:	f383 8810 	msr	PRIMASK, r3
}
 801d8ec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	2202      	movs	r2, #2
 801d8f2:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	22ac      	movs	r2, #172	@ 0xac
 801d8f8:	589b      	ldr	r3, [r3, r2]
 801d8fa:	183a      	adds	r2, r7, r0
 801d8fc:	8811      	ldrh	r1, [r2, #0]
 801d8fe:	687a      	ldr	r2, [r7, #4]
 801d900:	0010      	movs	r0, r2
 801d902:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d904:	e046      	b.n	801d994 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801d906:	23a4      	movs	r3, #164	@ 0xa4
 801d908:	18fb      	adds	r3, r7, r3
 801d90a:	681a      	ldr	r2, [r3, #0]
 801d90c:	2380      	movs	r3, #128	@ 0x80
 801d90e:	035b      	lsls	r3, r3, #13
 801d910:	4013      	ands	r3, r2
 801d912:	d012      	beq.n	801d93a <HAL_UART_IRQHandler+0x56a>
 801d914:	239c      	movs	r3, #156	@ 0x9c
 801d916:	18fb      	adds	r3, r7, r3
 801d918:	681a      	ldr	r2, [r3, #0]
 801d91a:	2380      	movs	r3, #128	@ 0x80
 801d91c:	03db      	lsls	r3, r3, #15
 801d91e:	4013      	ands	r3, r2
 801d920:	d00b      	beq.n	801d93a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	2280      	movs	r2, #128	@ 0x80
 801d928:	0352      	lsls	r2, r2, #13
 801d92a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	22a8      	movs	r2, #168	@ 0xa8
 801d930:	589b      	ldr	r3, [r3, r2]
 801d932:	687a      	ldr	r2, [r7, #4]
 801d934:	0010      	movs	r0, r2
 801d936:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801d938:	e02f      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801d93a:	23a4      	movs	r3, #164	@ 0xa4
 801d93c:	18fb      	adds	r3, r7, r3
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	2280      	movs	r2, #128	@ 0x80
 801d942:	4013      	ands	r3, r2
 801d944:	d00f      	beq.n	801d966 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801d946:	23a0      	movs	r3, #160	@ 0xa0
 801d948:	18fb      	adds	r3, r7, r3
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	2280      	movs	r2, #128	@ 0x80
 801d94e:	4013      	ands	r3, r2
 801d950:	d009      	beq.n	801d966 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d956:	2b00      	cmp	r3, #0
 801d958:	d01e      	beq.n	801d998 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d95e:	687a      	ldr	r2, [r7, #4]
 801d960:	0010      	movs	r0, r2
 801d962:	4798      	blx	r3
    }
    return;
 801d964:	e018      	b.n	801d998 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801d966:	23a4      	movs	r3, #164	@ 0xa4
 801d968:	18fb      	adds	r3, r7, r3
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	2240      	movs	r2, #64	@ 0x40
 801d96e:	4013      	ands	r3, r2
 801d970:	d013      	beq.n	801d99a <HAL_UART_IRQHandler+0x5ca>
 801d972:	23a0      	movs	r3, #160	@ 0xa0
 801d974:	18fb      	adds	r3, r7, r3
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	2240      	movs	r2, #64	@ 0x40
 801d97a:	4013      	ands	r3, r2
 801d97c:	d00d      	beq.n	801d99a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	0018      	movs	r0, r3
 801d982:	f001 f862 	bl	801ea4a <UART_EndTransmit_IT>
    return;
 801d986:	e008      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d988:	46c0      	nop			@ (mov r8, r8)
 801d98a:	e006      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
    return;
 801d98c:	46c0      	nop			@ (mov r8, r8)
 801d98e:	e004      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d990:	46c0      	nop			@ (mov r8, r8)
 801d992:	e002      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
      return;
 801d994:	46c0      	nop			@ (mov r8, r8)
 801d996:	e000      	b.n	801d99a <HAL_UART_IRQHandler+0x5ca>
    return;
 801d998:	46c0      	nop			@ (mov r8, r8)
  }

}
 801d99a:	46bd      	mov	sp, r7
 801d99c:	b02b      	add	sp, #172	@ 0xac
 801d99e:	bd90      	pop	{r4, r7, pc}
 801d9a0:	fffffeff 	.word	0xfffffeff
 801d9a4:	fffffedf 	.word	0xfffffedf

0801d9a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d9a8:	b580      	push	{r7, lr}
 801d9aa:	b082      	sub	sp, #8
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801d9b0:	46c0      	nop			@ (mov r8, r8)
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	b002      	add	sp, #8
 801d9b6:	bd80      	pop	{r7, pc}

0801d9b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d9b8:	b580      	push	{r7, lr}
 801d9ba:	b082      	sub	sp, #8
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801d9c0:	46c0      	nop			@ (mov r8, r8)
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	b002      	add	sp, #8
 801d9c6:	bd80      	pop	{r7, pc}

0801d9c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d9c8:	b580      	push	{r7, lr}
 801d9ca:	b082      	sub	sp, #8
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801d9d0:	46c0      	nop			@ (mov r8, r8)
 801d9d2:	46bd      	mov	sp, r7
 801d9d4:	b002      	add	sp, #8
 801d9d6:	bd80      	pop	{r7, pc}

0801d9d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b082      	sub	sp, #8
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801d9e0:	46c0      	nop			@ (mov r8, r8)
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	b002      	add	sp, #8
 801d9e6:	bd80      	pop	{r7, pc}

0801d9e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	b082      	sub	sp, #8
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801d9f0:	46c0      	nop			@ (mov r8, r8)
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	b002      	add	sp, #8
 801d9f6:	bd80      	pop	{r7, pc}

0801d9f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b082      	sub	sp, #8
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801da00:	46c0      	nop			@ (mov r8, r8)
 801da02:	46bd      	mov	sp, r7
 801da04:	b002      	add	sp, #8
 801da06:	bd80      	pop	{r7, pc}

0801da08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801da08:	b580      	push	{r7, lr}
 801da0a:	b082      	sub	sp, #8
 801da0c:	af00      	add	r7, sp, #0
 801da0e:	6078      	str	r0, [r7, #4]
 801da10:	000a      	movs	r2, r1
 801da12:	1cbb      	adds	r3, r7, #2
 801da14:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801da16:	46c0      	nop			@ (mov r8, r8)
 801da18:	46bd      	mov	sp, r7
 801da1a:	b002      	add	sp, #8
 801da1c:	bd80      	pop	{r7, pc}
	...

0801da20 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801da20:	b580      	push	{r7, lr}
 801da22:	b082      	sub	sp, #8
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	2188      	movs	r1, #136	@ 0x88
 801da2c:	4a14      	ldr	r2, [pc, #80]	@ (801da80 <UART_InitCallbacksToDefault+0x60>)
 801da2e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	218c      	movs	r1, #140	@ 0x8c
 801da34:	4a13      	ldr	r2, [pc, #76]	@ (801da84 <UART_InitCallbacksToDefault+0x64>)
 801da36:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	2190      	movs	r1, #144	@ 0x90
 801da3c:	4a12      	ldr	r2, [pc, #72]	@ (801da88 <UART_InitCallbacksToDefault+0x68>)
 801da3e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	2194      	movs	r1, #148	@ 0x94
 801da44:	4a11      	ldr	r2, [pc, #68]	@ (801da8c <UART_InitCallbacksToDefault+0x6c>)
 801da46:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	2198      	movs	r1, #152	@ 0x98
 801da4c:	4a10      	ldr	r2, [pc, #64]	@ (801da90 <UART_InitCallbacksToDefault+0x70>)
 801da4e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	219c      	movs	r1, #156	@ 0x9c
 801da54:	4a0f      	ldr	r2, [pc, #60]	@ (801da94 <UART_InitCallbacksToDefault+0x74>)
 801da56:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	21a0      	movs	r1, #160	@ 0xa0
 801da5c:	4a0e      	ldr	r2, [pc, #56]	@ (801da98 <UART_InitCallbacksToDefault+0x78>)
 801da5e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	21a4      	movs	r1, #164	@ 0xa4
 801da64:	4a0d      	ldr	r2, [pc, #52]	@ (801da9c <UART_InitCallbacksToDefault+0x7c>)
 801da66:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	21a8      	movs	r1, #168	@ 0xa8
 801da6c:	4a0c      	ldr	r2, [pc, #48]	@ (801daa0 <UART_InitCallbacksToDefault+0x80>)
 801da6e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	21ac      	movs	r1, #172	@ 0xac
 801da74:	4a0b      	ldr	r2, [pc, #44]	@ (801daa4 <UART_InitCallbacksToDefault+0x84>)
 801da76:	505a      	str	r2, [r3, r1]

}
 801da78:	46c0      	nop			@ (mov r8, r8)
 801da7a:	46bd      	mov	sp, r7
 801da7c:	b002      	add	sp, #8
 801da7e:	bd80      	pop	{r7, pc}
 801da80:	0801d9b9 	.word	0x0801d9b9
 801da84:	0801d9a9 	.word	0x0801d9a9
 801da88:	0801d9c9 	.word	0x0801d9c9
 801da8c:	0800d015 	.word	0x0800d015
 801da90:	0800507d 	.word	0x0800507d
 801da94:	0801d9d9 	.word	0x0801d9d9
 801da98:	0801d9e9 	.word	0x0801d9e9
 801da9c:	0801d9f9 	.word	0x0801d9f9
 801daa0:	0801ee3d 	.word	0x0801ee3d
 801daa4:	0801da09 	.word	0x0801da09

0801daa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801daa8:	b5b0      	push	{r4, r5, r7, lr}
 801daaa:	b08e      	sub	sp, #56	@ 0x38
 801daac:	af00      	add	r7, sp, #0
 801daae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801dab0:	231a      	movs	r3, #26
 801dab2:	2218      	movs	r2, #24
 801dab4:	189b      	adds	r3, r3, r2
 801dab6:	19db      	adds	r3, r3, r7
 801dab8:	2200      	movs	r2, #0
 801daba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dabc:	69fb      	ldr	r3, [r7, #28]
 801dabe:	689a      	ldr	r2, [r3, #8]
 801dac0:	69fb      	ldr	r3, [r7, #28]
 801dac2:	691b      	ldr	r3, [r3, #16]
 801dac4:	431a      	orrs	r2, r3
 801dac6:	69fb      	ldr	r3, [r7, #28]
 801dac8:	695b      	ldr	r3, [r3, #20]
 801daca:	431a      	orrs	r2, r3
 801dacc:	69fb      	ldr	r3, [r7, #28]
 801dace:	69db      	ldr	r3, [r3, #28]
 801dad0:	4313      	orrs	r3, r2
 801dad2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dad4:	69fb      	ldr	r3, [r7, #28]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4ac3      	ldr	r2, [pc, #780]	@ (801dde8 <UART_SetConfig+0x340>)
 801dadc:	4013      	ands	r3, r2
 801dade:	0019      	movs	r1, r3
 801dae0:	69fb      	ldr	r3, [r7, #28]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dae6:	430a      	orrs	r2, r1
 801dae8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801daea:	69fb      	ldr	r3, [r7, #28]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	685b      	ldr	r3, [r3, #4]
 801daf0:	4abe      	ldr	r2, [pc, #760]	@ (801ddec <UART_SetConfig+0x344>)
 801daf2:	4013      	ands	r3, r2
 801daf4:	0019      	movs	r1, r3
 801daf6:	69fb      	ldr	r3, [r7, #28]
 801daf8:	68da      	ldr	r2, [r3, #12]
 801dafa:	69fb      	ldr	r3, [r7, #28]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	430a      	orrs	r2, r1
 801db00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801db02:	69fb      	ldr	r3, [r7, #28]
 801db04:	699b      	ldr	r3, [r3, #24]
 801db06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801db08:	69fb      	ldr	r3, [r7, #28]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	4ab8      	ldr	r2, [pc, #736]	@ (801ddf0 <UART_SetConfig+0x348>)
 801db0e:	4293      	cmp	r3, r2
 801db10:	d004      	beq.n	801db1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801db12:	69fb      	ldr	r3, [r7, #28]
 801db14:	6a1b      	ldr	r3, [r3, #32]
 801db16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801db18:	4313      	orrs	r3, r2
 801db1a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801db1c:	69fb      	ldr	r3, [r7, #28]
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	689b      	ldr	r3, [r3, #8]
 801db22:	4ab4      	ldr	r2, [pc, #720]	@ (801ddf4 <UART_SetConfig+0x34c>)
 801db24:	4013      	ands	r3, r2
 801db26:	0019      	movs	r1, r3
 801db28:	69fb      	ldr	r3, [r7, #28]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801db2e:	430a      	orrs	r2, r1
 801db30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801db32:	69fb      	ldr	r3, [r7, #28]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	4ab0      	ldr	r2, [pc, #704]	@ (801ddf8 <UART_SetConfig+0x350>)
 801db38:	4293      	cmp	r3, r2
 801db3a:	d131      	bne.n	801dba0 <UART_SetConfig+0xf8>
 801db3c:	4baf      	ldr	r3, [pc, #700]	@ (801ddfc <UART_SetConfig+0x354>)
 801db3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801db40:	2203      	movs	r2, #3
 801db42:	4013      	ands	r3, r2
 801db44:	2b03      	cmp	r3, #3
 801db46:	d01d      	beq.n	801db84 <UART_SetConfig+0xdc>
 801db48:	d823      	bhi.n	801db92 <UART_SetConfig+0xea>
 801db4a:	2b02      	cmp	r3, #2
 801db4c:	d00c      	beq.n	801db68 <UART_SetConfig+0xc0>
 801db4e:	d820      	bhi.n	801db92 <UART_SetConfig+0xea>
 801db50:	2b00      	cmp	r3, #0
 801db52:	d002      	beq.n	801db5a <UART_SetConfig+0xb2>
 801db54:	2b01      	cmp	r3, #1
 801db56:	d00e      	beq.n	801db76 <UART_SetConfig+0xce>
 801db58:	e01b      	b.n	801db92 <UART_SetConfig+0xea>
 801db5a:	231b      	movs	r3, #27
 801db5c:	2218      	movs	r2, #24
 801db5e:	189b      	adds	r3, r3, r2
 801db60:	19db      	adds	r3, r3, r7
 801db62:	2201      	movs	r2, #1
 801db64:	701a      	strb	r2, [r3, #0]
 801db66:	e0b4      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801db68:	231b      	movs	r3, #27
 801db6a:	2218      	movs	r2, #24
 801db6c:	189b      	adds	r3, r3, r2
 801db6e:	19db      	adds	r3, r3, r7
 801db70:	2202      	movs	r2, #2
 801db72:	701a      	strb	r2, [r3, #0]
 801db74:	e0ad      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801db76:	231b      	movs	r3, #27
 801db78:	2218      	movs	r2, #24
 801db7a:	189b      	adds	r3, r3, r2
 801db7c:	19db      	adds	r3, r3, r7
 801db7e:	2204      	movs	r2, #4
 801db80:	701a      	strb	r2, [r3, #0]
 801db82:	e0a6      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801db84:	231b      	movs	r3, #27
 801db86:	2218      	movs	r2, #24
 801db88:	189b      	adds	r3, r3, r2
 801db8a:	19db      	adds	r3, r3, r7
 801db8c:	2208      	movs	r2, #8
 801db8e:	701a      	strb	r2, [r3, #0]
 801db90:	e09f      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801db92:	231b      	movs	r3, #27
 801db94:	2218      	movs	r2, #24
 801db96:	189b      	adds	r3, r3, r2
 801db98:	19db      	adds	r3, r3, r7
 801db9a:	2210      	movs	r2, #16
 801db9c:	701a      	strb	r2, [r3, #0]
 801db9e:	e098      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dba0:	69fb      	ldr	r3, [r7, #28]
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	4a96      	ldr	r2, [pc, #600]	@ (801de00 <UART_SetConfig+0x358>)
 801dba6:	4293      	cmp	r3, r2
 801dba8:	d131      	bne.n	801dc0e <UART_SetConfig+0x166>
 801dbaa:	4b94      	ldr	r3, [pc, #592]	@ (801ddfc <UART_SetConfig+0x354>)
 801dbac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dbae:	220c      	movs	r2, #12
 801dbb0:	4013      	ands	r3, r2
 801dbb2:	2b0c      	cmp	r3, #12
 801dbb4:	d01d      	beq.n	801dbf2 <UART_SetConfig+0x14a>
 801dbb6:	d823      	bhi.n	801dc00 <UART_SetConfig+0x158>
 801dbb8:	2b08      	cmp	r3, #8
 801dbba:	d00c      	beq.n	801dbd6 <UART_SetConfig+0x12e>
 801dbbc:	d820      	bhi.n	801dc00 <UART_SetConfig+0x158>
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d002      	beq.n	801dbc8 <UART_SetConfig+0x120>
 801dbc2:	2b04      	cmp	r3, #4
 801dbc4:	d00e      	beq.n	801dbe4 <UART_SetConfig+0x13c>
 801dbc6:	e01b      	b.n	801dc00 <UART_SetConfig+0x158>
 801dbc8:	231b      	movs	r3, #27
 801dbca:	2218      	movs	r2, #24
 801dbcc:	189b      	adds	r3, r3, r2
 801dbce:	19db      	adds	r3, r3, r7
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	701a      	strb	r2, [r3, #0]
 801dbd4:	e07d      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dbd6:	231b      	movs	r3, #27
 801dbd8:	2218      	movs	r2, #24
 801dbda:	189b      	adds	r3, r3, r2
 801dbdc:	19db      	adds	r3, r3, r7
 801dbde:	2202      	movs	r2, #2
 801dbe0:	701a      	strb	r2, [r3, #0]
 801dbe2:	e076      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dbe4:	231b      	movs	r3, #27
 801dbe6:	2218      	movs	r2, #24
 801dbe8:	189b      	adds	r3, r3, r2
 801dbea:	19db      	adds	r3, r3, r7
 801dbec:	2204      	movs	r2, #4
 801dbee:	701a      	strb	r2, [r3, #0]
 801dbf0:	e06f      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dbf2:	231b      	movs	r3, #27
 801dbf4:	2218      	movs	r2, #24
 801dbf6:	189b      	adds	r3, r3, r2
 801dbf8:	19db      	adds	r3, r3, r7
 801dbfa:	2208      	movs	r2, #8
 801dbfc:	701a      	strb	r2, [r3, #0]
 801dbfe:	e068      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc00:	231b      	movs	r3, #27
 801dc02:	2218      	movs	r2, #24
 801dc04:	189b      	adds	r3, r3, r2
 801dc06:	19db      	adds	r3, r3, r7
 801dc08:	2210      	movs	r2, #16
 801dc0a:	701a      	strb	r2, [r3, #0]
 801dc0c:	e061      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc0e:	69fb      	ldr	r3, [r7, #28]
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	4a7c      	ldr	r2, [pc, #496]	@ (801de04 <UART_SetConfig+0x35c>)
 801dc14:	4293      	cmp	r3, r2
 801dc16:	d106      	bne.n	801dc26 <UART_SetConfig+0x17e>
 801dc18:	231b      	movs	r3, #27
 801dc1a:	2218      	movs	r2, #24
 801dc1c:	189b      	adds	r3, r3, r2
 801dc1e:	19db      	adds	r3, r3, r7
 801dc20:	2200      	movs	r2, #0
 801dc22:	701a      	strb	r2, [r3, #0]
 801dc24:	e055      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc26:	69fb      	ldr	r3, [r7, #28]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	4a77      	ldr	r2, [pc, #476]	@ (801de08 <UART_SetConfig+0x360>)
 801dc2c:	4293      	cmp	r3, r2
 801dc2e:	d106      	bne.n	801dc3e <UART_SetConfig+0x196>
 801dc30:	231b      	movs	r3, #27
 801dc32:	2218      	movs	r2, #24
 801dc34:	189b      	adds	r3, r3, r2
 801dc36:	19db      	adds	r3, r3, r7
 801dc38:	2200      	movs	r2, #0
 801dc3a:	701a      	strb	r2, [r3, #0]
 801dc3c:	e049      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc3e:	69fb      	ldr	r3, [r7, #28]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	4a6b      	ldr	r2, [pc, #428]	@ (801ddf0 <UART_SetConfig+0x348>)
 801dc44:	4293      	cmp	r3, r2
 801dc46:	d13e      	bne.n	801dcc6 <UART_SetConfig+0x21e>
 801dc48:	4b6c      	ldr	r3, [pc, #432]	@ (801ddfc <UART_SetConfig+0x354>)
 801dc4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801dc4c:	23c0      	movs	r3, #192	@ 0xc0
 801dc4e:	011b      	lsls	r3, r3, #4
 801dc50:	4013      	ands	r3, r2
 801dc52:	22c0      	movs	r2, #192	@ 0xc0
 801dc54:	0112      	lsls	r2, r2, #4
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d027      	beq.n	801dcaa <UART_SetConfig+0x202>
 801dc5a:	22c0      	movs	r2, #192	@ 0xc0
 801dc5c:	0112      	lsls	r2, r2, #4
 801dc5e:	4293      	cmp	r3, r2
 801dc60:	d82a      	bhi.n	801dcb8 <UART_SetConfig+0x210>
 801dc62:	2280      	movs	r2, #128	@ 0x80
 801dc64:	0112      	lsls	r2, r2, #4
 801dc66:	4293      	cmp	r3, r2
 801dc68:	d011      	beq.n	801dc8e <UART_SetConfig+0x1e6>
 801dc6a:	2280      	movs	r2, #128	@ 0x80
 801dc6c:	0112      	lsls	r2, r2, #4
 801dc6e:	4293      	cmp	r3, r2
 801dc70:	d822      	bhi.n	801dcb8 <UART_SetConfig+0x210>
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d004      	beq.n	801dc80 <UART_SetConfig+0x1d8>
 801dc76:	2280      	movs	r2, #128	@ 0x80
 801dc78:	00d2      	lsls	r2, r2, #3
 801dc7a:	4293      	cmp	r3, r2
 801dc7c:	d00e      	beq.n	801dc9c <UART_SetConfig+0x1f4>
 801dc7e:	e01b      	b.n	801dcb8 <UART_SetConfig+0x210>
 801dc80:	231b      	movs	r3, #27
 801dc82:	2218      	movs	r2, #24
 801dc84:	189b      	adds	r3, r3, r2
 801dc86:	19db      	adds	r3, r3, r7
 801dc88:	2200      	movs	r2, #0
 801dc8a:	701a      	strb	r2, [r3, #0]
 801dc8c:	e021      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc8e:	231b      	movs	r3, #27
 801dc90:	2218      	movs	r2, #24
 801dc92:	189b      	adds	r3, r3, r2
 801dc94:	19db      	adds	r3, r3, r7
 801dc96:	2202      	movs	r2, #2
 801dc98:	701a      	strb	r2, [r3, #0]
 801dc9a:	e01a      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dc9c:	231b      	movs	r3, #27
 801dc9e:	2218      	movs	r2, #24
 801dca0:	189b      	adds	r3, r3, r2
 801dca2:	19db      	adds	r3, r3, r7
 801dca4:	2204      	movs	r2, #4
 801dca6:	701a      	strb	r2, [r3, #0]
 801dca8:	e013      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dcaa:	231b      	movs	r3, #27
 801dcac:	2218      	movs	r2, #24
 801dcae:	189b      	adds	r3, r3, r2
 801dcb0:	19db      	adds	r3, r3, r7
 801dcb2:	2208      	movs	r2, #8
 801dcb4:	701a      	strb	r2, [r3, #0]
 801dcb6:	e00c      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dcb8:	231b      	movs	r3, #27
 801dcba:	2218      	movs	r2, #24
 801dcbc:	189b      	adds	r3, r3, r2
 801dcbe:	19db      	adds	r3, r3, r7
 801dcc0:	2210      	movs	r2, #16
 801dcc2:	701a      	strb	r2, [r3, #0]
 801dcc4:	e005      	b.n	801dcd2 <UART_SetConfig+0x22a>
 801dcc6:	231b      	movs	r3, #27
 801dcc8:	2218      	movs	r2, #24
 801dcca:	189b      	adds	r3, r3, r2
 801dccc:	19db      	adds	r3, r3, r7
 801dcce:	2210      	movs	r2, #16
 801dcd0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801dcd2:	69fb      	ldr	r3, [r7, #28]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	4a46      	ldr	r2, [pc, #280]	@ (801ddf0 <UART_SetConfig+0x348>)
 801dcd8:	4293      	cmp	r3, r2
 801dcda:	d000      	beq.n	801dcde <UART_SetConfig+0x236>
 801dcdc:	e09a      	b.n	801de14 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801dcde:	231b      	movs	r3, #27
 801dce0:	2218      	movs	r2, #24
 801dce2:	189b      	adds	r3, r3, r2
 801dce4:	19db      	adds	r3, r3, r7
 801dce6:	781b      	ldrb	r3, [r3, #0]
 801dce8:	2b08      	cmp	r3, #8
 801dcea:	d01d      	beq.n	801dd28 <UART_SetConfig+0x280>
 801dcec:	dc20      	bgt.n	801dd30 <UART_SetConfig+0x288>
 801dcee:	2b04      	cmp	r3, #4
 801dcf0:	d015      	beq.n	801dd1e <UART_SetConfig+0x276>
 801dcf2:	dc1d      	bgt.n	801dd30 <UART_SetConfig+0x288>
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d002      	beq.n	801dcfe <UART_SetConfig+0x256>
 801dcf8:	2b02      	cmp	r3, #2
 801dcfa:	d005      	beq.n	801dd08 <UART_SetConfig+0x260>
 801dcfc:	e018      	b.n	801dd30 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801dcfe:	f7fd fe2d 	bl	801b95c <HAL_RCC_GetPCLK1Freq>
 801dd02:	0003      	movs	r3, r0
 801dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801dd06:	e01c      	b.n	801dd42 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dd08:	4b3c      	ldr	r3, [pc, #240]	@ (801ddfc <UART_SetConfig+0x354>)
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	2210      	movs	r2, #16
 801dd0e:	4013      	ands	r3, r2
 801dd10:	d002      	beq.n	801dd18 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801dd12:	4b3e      	ldr	r3, [pc, #248]	@ (801de0c <UART_SetConfig+0x364>)
 801dd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801dd16:	e014      	b.n	801dd42 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801dd18:	4b3d      	ldr	r3, [pc, #244]	@ (801de10 <UART_SetConfig+0x368>)
 801dd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801dd1c:	e011      	b.n	801dd42 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801dd1e:	f7fd fd6d 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 801dd22:	0003      	movs	r3, r0
 801dd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801dd26:	e00c      	b.n	801dd42 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801dd28:	2380      	movs	r3, #128	@ 0x80
 801dd2a:	021b      	lsls	r3, r3, #8
 801dd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801dd2e:	e008      	b.n	801dd42 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801dd30:	2300      	movs	r3, #0
 801dd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801dd34:	231a      	movs	r3, #26
 801dd36:	2218      	movs	r2, #24
 801dd38:	189b      	adds	r3, r3, r2
 801dd3a:	19db      	adds	r3, r3, r7
 801dd3c:	2201      	movs	r2, #1
 801dd3e:	701a      	strb	r2, [r3, #0]
        break;
 801dd40:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801dd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d100      	bne.n	801dd4a <UART_SetConfig+0x2a2>
 801dd48:	e133      	b.n	801dfb2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801dd4a:	69fb      	ldr	r3, [r7, #28]
 801dd4c:	685a      	ldr	r2, [r3, #4]
 801dd4e:	0013      	movs	r3, r2
 801dd50:	005b      	lsls	r3, r3, #1
 801dd52:	189b      	adds	r3, r3, r2
 801dd54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dd56:	429a      	cmp	r2, r3
 801dd58:	d305      	bcc.n	801dd66 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801dd5a:	69fb      	ldr	r3, [r7, #28]
 801dd5c:	685b      	ldr	r3, [r3, #4]
 801dd5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801dd60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dd62:	429a      	cmp	r2, r3
 801dd64:	d906      	bls.n	801dd74 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801dd66:	231a      	movs	r3, #26
 801dd68:	2218      	movs	r2, #24
 801dd6a:	189b      	adds	r3, r3, r2
 801dd6c:	19db      	adds	r3, r3, r7
 801dd6e:	2201      	movs	r2, #1
 801dd70:	701a      	strb	r2, [r3, #0]
 801dd72:	e11e      	b.n	801dfb2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801dd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd76:	613b      	str	r3, [r7, #16]
 801dd78:	2300      	movs	r3, #0
 801dd7a:	617b      	str	r3, [r7, #20]
 801dd7c:	6939      	ldr	r1, [r7, #16]
 801dd7e:	697a      	ldr	r2, [r7, #20]
 801dd80:	000b      	movs	r3, r1
 801dd82:	0e1b      	lsrs	r3, r3, #24
 801dd84:	0010      	movs	r0, r2
 801dd86:	0205      	lsls	r5, r0, #8
 801dd88:	431d      	orrs	r5, r3
 801dd8a:	000b      	movs	r3, r1
 801dd8c:	021c      	lsls	r4, r3, #8
 801dd8e:	69fb      	ldr	r3, [r7, #28]
 801dd90:	685b      	ldr	r3, [r3, #4]
 801dd92:	085b      	lsrs	r3, r3, #1
 801dd94:	60bb      	str	r3, [r7, #8]
 801dd96:	2300      	movs	r3, #0
 801dd98:	60fb      	str	r3, [r7, #12]
 801dd9a:	68b8      	ldr	r0, [r7, #8]
 801dd9c:	68f9      	ldr	r1, [r7, #12]
 801dd9e:	1900      	adds	r0, r0, r4
 801dda0:	4169      	adcs	r1, r5
 801dda2:	69fb      	ldr	r3, [r7, #28]
 801dda4:	685b      	ldr	r3, [r3, #4]
 801dda6:	603b      	str	r3, [r7, #0]
 801dda8:	2300      	movs	r3, #0
 801ddaa:	607b      	str	r3, [r7, #4]
 801ddac:	683a      	ldr	r2, [r7, #0]
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	f7e2 fbe6 	bl	8000580 <__aeabi_uldivmod>
 801ddb4:	0002      	movs	r2, r0
 801ddb6:	000b      	movs	r3, r1
 801ddb8:	0013      	movs	r3, r2
 801ddba:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ddbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ddbe:	23c0      	movs	r3, #192	@ 0xc0
 801ddc0:	009b      	lsls	r3, r3, #2
 801ddc2:	429a      	cmp	r2, r3
 801ddc4:	d309      	bcc.n	801ddda <UART_SetConfig+0x332>
 801ddc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ddc8:	2380      	movs	r3, #128	@ 0x80
 801ddca:	035b      	lsls	r3, r3, #13
 801ddcc:	429a      	cmp	r2, r3
 801ddce:	d204      	bcs.n	801ddda <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801ddd0:	69fb      	ldr	r3, [r7, #28]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ddd6:	60da      	str	r2, [r3, #12]
 801ddd8:	e0eb      	b.n	801dfb2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801ddda:	231a      	movs	r3, #26
 801dddc:	2218      	movs	r2, #24
 801ddde:	189b      	adds	r3, r3, r2
 801dde0:	19db      	adds	r3, r3, r7
 801dde2:	2201      	movs	r2, #1
 801dde4:	701a      	strb	r2, [r3, #0]
 801dde6:	e0e4      	b.n	801dfb2 <UART_SetConfig+0x50a>
 801dde8:	efff69f3 	.word	0xefff69f3
 801ddec:	ffffcfff 	.word	0xffffcfff
 801ddf0:	40004800 	.word	0x40004800
 801ddf4:	fffff4ff 	.word	0xfffff4ff
 801ddf8:	40013800 	.word	0x40013800
 801ddfc:	40021000 	.word	0x40021000
 801de00:	40004400 	.word	0x40004400
 801de04:	40004c00 	.word	0x40004c00
 801de08:	40005000 	.word	0x40005000
 801de0c:	003d0900 	.word	0x003d0900
 801de10:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801de14:	69fb      	ldr	r3, [r7, #28]
 801de16:	69da      	ldr	r2, [r3, #28]
 801de18:	2380      	movs	r3, #128	@ 0x80
 801de1a:	021b      	lsls	r3, r3, #8
 801de1c:	429a      	cmp	r2, r3
 801de1e:	d000      	beq.n	801de22 <UART_SetConfig+0x37a>
 801de20:	e070      	b.n	801df04 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801de22:	231b      	movs	r3, #27
 801de24:	2218      	movs	r2, #24
 801de26:	189b      	adds	r3, r3, r2
 801de28:	19db      	adds	r3, r3, r7
 801de2a:	781b      	ldrb	r3, [r3, #0]
 801de2c:	2b08      	cmp	r3, #8
 801de2e:	d822      	bhi.n	801de76 <UART_SetConfig+0x3ce>
 801de30:	009a      	lsls	r2, r3, #2
 801de32:	4b67      	ldr	r3, [pc, #412]	@ (801dfd0 <UART_SetConfig+0x528>)
 801de34:	18d3      	adds	r3, r2, r3
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801de3a:	f7fd fd8f 	bl	801b95c <HAL_RCC_GetPCLK1Freq>
 801de3e:	0003      	movs	r3, r0
 801de40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801de42:	e021      	b.n	801de88 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801de44:	f7fd fda0 	bl	801b988 <HAL_RCC_GetPCLK2Freq>
 801de48:	0003      	movs	r3, r0
 801de4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801de4c:	e01c      	b.n	801de88 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801de4e:	4b61      	ldr	r3, [pc, #388]	@ (801dfd4 <UART_SetConfig+0x52c>)
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	2210      	movs	r2, #16
 801de54:	4013      	ands	r3, r2
 801de56:	d002      	beq.n	801de5e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801de58:	4b5f      	ldr	r3, [pc, #380]	@ (801dfd8 <UART_SetConfig+0x530>)
 801de5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801de5c:	e014      	b.n	801de88 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801de5e:	4b5f      	ldr	r3, [pc, #380]	@ (801dfdc <UART_SetConfig+0x534>)
 801de60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801de62:	e011      	b.n	801de88 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801de64:	f7fd fcca 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 801de68:	0003      	movs	r3, r0
 801de6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801de6c:	e00c      	b.n	801de88 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801de6e:	2380      	movs	r3, #128	@ 0x80
 801de70:	021b      	lsls	r3, r3, #8
 801de72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801de74:	e008      	b.n	801de88 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801de76:	2300      	movs	r3, #0
 801de78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801de7a:	231a      	movs	r3, #26
 801de7c:	2218      	movs	r2, #24
 801de7e:	189b      	adds	r3, r3, r2
 801de80:	19db      	adds	r3, r3, r7
 801de82:	2201      	movs	r2, #1
 801de84:	701a      	strb	r2, [r3, #0]
        break;
 801de86:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801de88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d100      	bne.n	801de90 <UART_SetConfig+0x3e8>
 801de8e:	e090      	b.n	801dfb2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801de90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de92:	005a      	lsls	r2, r3, #1
 801de94:	69fb      	ldr	r3, [r7, #28]
 801de96:	685b      	ldr	r3, [r3, #4]
 801de98:	085b      	lsrs	r3, r3, #1
 801de9a:	18d2      	adds	r2, r2, r3
 801de9c:	69fb      	ldr	r3, [r7, #28]
 801de9e:	685b      	ldr	r3, [r3, #4]
 801dea0:	0019      	movs	r1, r3
 801dea2:	0010      	movs	r0, r2
 801dea4:	f7e2 f97e 	bl	80001a4 <__udivsi3>
 801dea8:	0003      	movs	r3, r0
 801deaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deae:	2b0f      	cmp	r3, #15
 801deb0:	d921      	bls.n	801def6 <UART_SetConfig+0x44e>
 801deb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801deb4:	2380      	movs	r3, #128	@ 0x80
 801deb6:	025b      	lsls	r3, r3, #9
 801deb8:	429a      	cmp	r2, r3
 801deba:	d21c      	bcs.n	801def6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801debc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801debe:	b29a      	uxth	r2, r3
 801dec0:	200e      	movs	r0, #14
 801dec2:	2418      	movs	r4, #24
 801dec4:	1903      	adds	r3, r0, r4
 801dec6:	19db      	adds	r3, r3, r7
 801dec8:	210f      	movs	r1, #15
 801deca:	438a      	bics	r2, r1
 801decc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801dece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ded0:	085b      	lsrs	r3, r3, #1
 801ded2:	b29b      	uxth	r3, r3
 801ded4:	2207      	movs	r2, #7
 801ded6:	4013      	ands	r3, r2
 801ded8:	b299      	uxth	r1, r3
 801deda:	1903      	adds	r3, r0, r4
 801dedc:	19db      	adds	r3, r3, r7
 801dede:	1902      	adds	r2, r0, r4
 801dee0:	19d2      	adds	r2, r2, r7
 801dee2:	8812      	ldrh	r2, [r2, #0]
 801dee4:	430a      	orrs	r2, r1
 801dee6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801dee8:	69fb      	ldr	r3, [r7, #28]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	1902      	adds	r2, r0, r4
 801deee:	19d2      	adds	r2, r2, r7
 801def0:	8812      	ldrh	r2, [r2, #0]
 801def2:	60da      	str	r2, [r3, #12]
 801def4:	e05d      	b.n	801dfb2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801def6:	231a      	movs	r3, #26
 801def8:	2218      	movs	r2, #24
 801defa:	189b      	adds	r3, r3, r2
 801defc:	19db      	adds	r3, r3, r7
 801defe:	2201      	movs	r2, #1
 801df00:	701a      	strb	r2, [r3, #0]
 801df02:	e056      	b.n	801dfb2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801df04:	231b      	movs	r3, #27
 801df06:	2218      	movs	r2, #24
 801df08:	189b      	adds	r3, r3, r2
 801df0a:	19db      	adds	r3, r3, r7
 801df0c:	781b      	ldrb	r3, [r3, #0]
 801df0e:	2b08      	cmp	r3, #8
 801df10:	d822      	bhi.n	801df58 <UART_SetConfig+0x4b0>
 801df12:	009a      	lsls	r2, r3, #2
 801df14:	4b32      	ldr	r3, [pc, #200]	@ (801dfe0 <UART_SetConfig+0x538>)
 801df16:	18d3      	adds	r3, r2, r3
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801df1c:	f7fd fd1e 	bl	801b95c <HAL_RCC_GetPCLK1Freq>
 801df20:	0003      	movs	r3, r0
 801df22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801df24:	e021      	b.n	801df6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801df26:	f7fd fd2f 	bl	801b988 <HAL_RCC_GetPCLK2Freq>
 801df2a:	0003      	movs	r3, r0
 801df2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801df2e:	e01c      	b.n	801df6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801df30:	4b28      	ldr	r3, [pc, #160]	@ (801dfd4 <UART_SetConfig+0x52c>)
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	2210      	movs	r2, #16
 801df36:	4013      	ands	r3, r2
 801df38:	d002      	beq.n	801df40 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801df3a:	4b27      	ldr	r3, [pc, #156]	@ (801dfd8 <UART_SetConfig+0x530>)
 801df3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801df3e:	e014      	b.n	801df6a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801df40:	4b26      	ldr	r3, [pc, #152]	@ (801dfdc <UART_SetConfig+0x534>)
 801df42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801df44:	e011      	b.n	801df6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801df46:	f7fd fc59 	bl	801b7fc <HAL_RCC_GetSysClockFreq>
 801df4a:	0003      	movs	r3, r0
 801df4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801df4e:	e00c      	b.n	801df6a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801df50:	2380      	movs	r3, #128	@ 0x80
 801df52:	021b      	lsls	r3, r3, #8
 801df54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801df56:	e008      	b.n	801df6a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801df58:	2300      	movs	r3, #0
 801df5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801df5c:	231a      	movs	r3, #26
 801df5e:	2218      	movs	r2, #24
 801df60:	189b      	adds	r3, r3, r2
 801df62:	19db      	adds	r3, r3, r7
 801df64:	2201      	movs	r2, #1
 801df66:	701a      	strb	r2, [r3, #0]
        break;
 801df68:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801df6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d020      	beq.n	801dfb2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801df70:	69fb      	ldr	r3, [r7, #28]
 801df72:	685b      	ldr	r3, [r3, #4]
 801df74:	085a      	lsrs	r2, r3, #1
 801df76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df78:	18d2      	adds	r2, r2, r3
 801df7a:	69fb      	ldr	r3, [r7, #28]
 801df7c:	685b      	ldr	r3, [r3, #4]
 801df7e:	0019      	movs	r1, r3
 801df80:	0010      	movs	r0, r2
 801df82:	f7e2 f90f 	bl	80001a4 <__udivsi3>
 801df86:	0003      	movs	r3, r0
 801df88:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801df8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df8c:	2b0f      	cmp	r3, #15
 801df8e:	d90a      	bls.n	801dfa6 <UART_SetConfig+0x4fe>
 801df90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801df92:	2380      	movs	r3, #128	@ 0x80
 801df94:	025b      	lsls	r3, r3, #9
 801df96:	429a      	cmp	r2, r3
 801df98:	d205      	bcs.n	801dfa6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801df9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df9c:	b29a      	uxth	r2, r3
 801df9e:	69fb      	ldr	r3, [r7, #28]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	60da      	str	r2, [r3, #12]
 801dfa4:	e005      	b.n	801dfb2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801dfa6:	231a      	movs	r3, #26
 801dfa8:	2218      	movs	r2, #24
 801dfaa:	189b      	adds	r3, r3, r2
 801dfac:	19db      	adds	r3, r3, r7
 801dfae:	2201      	movs	r2, #1
 801dfb0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801dfb2:	69fb      	ldr	r3, [r7, #28]
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801dfb8:	69fb      	ldr	r3, [r7, #28]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801dfbe:	231a      	movs	r3, #26
 801dfc0:	2218      	movs	r2, #24
 801dfc2:	189b      	adds	r3, r3, r2
 801dfc4:	19db      	adds	r3, r3, r7
 801dfc6:	781b      	ldrb	r3, [r3, #0]
}
 801dfc8:	0018      	movs	r0, r3
 801dfca:	46bd      	mov	sp, r7
 801dfcc:	b00e      	add	sp, #56	@ 0x38
 801dfce:	bdb0      	pop	{r4, r5, r7, pc}
 801dfd0:	0802e200 	.word	0x0802e200
 801dfd4:	40021000 	.word	0x40021000
 801dfd8:	003d0900 	.word	0x003d0900
 801dfdc:	00f42400 	.word	0x00f42400
 801dfe0:	0802e224 	.word	0x0802e224

0801dfe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	b082      	sub	sp, #8
 801dfe8:	af00      	add	r7, sp, #0
 801dfea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dff0:	2201      	movs	r2, #1
 801dff2:	4013      	ands	r3, r2
 801dff4:	d00b      	beq.n	801e00e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	685b      	ldr	r3, [r3, #4]
 801dffc:	4a4a      	ldr	r2, [pc, #296]	@ (801e128 <UART_AdvFeatureConfig+0x144>)
 801dffe:	4013      	ands	r3, r2
 801e000:	0019      	movs	r1, r3
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	430a      	orrs	r2, r1
 801e00c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e012:	2202      	movs	r2, #2
 801e014:	4013      	ands	r3, r2
 801e016:	d00b      	beq.n	801e030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	685b      	ldr	r3, [r3, #4]
 801e01e:	4a43      	ldr	r2, [pc, #268]	@ (801e12c <UART_AdvFeatureConfig+0x148>)
 801e020:	4013      	ands	r3, r2
 801e022:	0019      	movs	r1, r3
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	430a      	orrs	r2, r1
 801e02e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e034:	2204      	movs	r2, #4
 801e036:	4013      	ands	r3, r2
 801e038:	d00b      	beq.n	801e052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	685b      	ldr	r3, [r3, #4]
 801e040:	4a3b      	ldr	r2, [pc, #236]	@ (801e130 <UART_AdvFeatureConfig+0x14c>)
 801e042:	4013      	ands	r3, r2
 801e044:	0019      	movs	r1, r3
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	430a      	orrs	r2, r1
 801e050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e056:	2208      	movs	r2, #8
 801e058:	4013      	ands	r3, r2
 801e05a:	d00b      	beq.n	801e074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	685b      	ldr	r3, [r3, #4]
 801e062:	4a34      	ldr	r2, [pc, #208]	@ (801e134 <UART_AdvFeatureConfig+0x150>)
 801e064:	4013      	ands	r3, r2
 801e066:	0019      	movs	r1, r3
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	430a      	orrs	r2, r1
 801e072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e078:	2210      	movs	r2, #16
 801e07a:	4013      	ands	r3, r2
 801e07c:	d00b      	beq.n	801e096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	689b      	ldr	r3, [r3, #8]
 801e084:	4a2c      	ldr	r2, [pc, #176]	@ (801e138 <UART_AdvFeatureConfig+0x154>)
 801e086:	4013      	ands	r3, r2
 801e088:	0019      	movs	r1, r3
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	430a      	orrs	r2, r1
 801e094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e09a:	2220      	movs	r2, #32
 801e09c:	4013      	ands	r3, r2
 801e09e:	d00b      	beq.n	801e0b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	689b      	ldr	r3, [r3, #8]
 801e0a6:	4a25      	ldr	r2, [pc, #148]	@ (801e13c <UART_AdvFeatureConfig+0x158>)
 801e0a8:	4013      	ands	r3, r2
 801e0aa:	0019      	movs	r1, r3
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	430a      	orrs	r2, r1
 801e0b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e0bc:	2240      	movs	r2, #64	@ 0x40
 801e0be:	4013      	ands	r3, r2
 801e0c0:	d01d      	beq.n	801e0fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	685b      	ldr	r3, [r3, #4]
 801e0c8:	4a1d      	ldr	r2, [pc, #116]	@ (801e140 <UART_AdvFeatureConfig+0x15c>)
 801e0ca:	4013      	ands	r3, r2
 801e0cc:	0019      	movs	r1, r3
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	430a      	orrs	r2, r1
 801e0d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e0de:	2380      	movs	r3, #128	@ 0x80
 801e0e0:	035b      	lsls	r3, r3, #13
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	d10b      	bne.n	801e0fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	685b      	ldr	r3, [r3, #4]
 801e0ec:	4a15      	ldr	r2, [pc, #84]	@ (801e144 <UART_AdvFeatureConfig+0x160>)
 801e0ee:	4013      	ands	r3, r2
 801e0f0:	0019      	movs	r1, r3
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	430a      	orrs	r2, r1
 801e0fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e102:	2280      	movs	r2, #128	@ 0x80
 801e104:	4013      	ands	r3, r2
 801e106:	d00b      	beq.n	801e120 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	685b      	ldr	r3, [r3, #4]
 801e10e:	4a0e      	ldr	r2, [pc, #56]	@ (801e148 <UART_AdvFeatureConfig+0x164>)
 801e110:	4013      	ands	r3, r2
 801e112:	0019      	movs	r1, r3
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	430a      	orrs	r2, r1
 801e11e:	605a      	str	r2, [r3, #4]
  }
}
 801e120:	46c0      	nop			@ (mov r8, r8)
 801e122:	46bd      	mov	sp, r7
 801e124:	b002      	add	sp, #8
 801e126:	bd80      	pop	{r7, pc}
 801e128:	fffdffff 	.word	0xfffdffff
 801e12c:	fffeffff 	.word	0xfffeffff
 801e130:	fffbffff 	.word	0xfffbffff
 801e134:	ffff7fff 	.word	0xffff7fff
 801e138:	ffffefff 	.word	0xffffefff
 801e13c:	ffffdfff 	.word	0xffffdfff
 801e140:	ffefffff 	.word	0xffefffff
 801e144:	ff9fffff 	.word	0xff9fffff
 801e148:	fff7ffff 	.word	0xfff7ffff

0801e14c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b092      	sub	sp, #72	@ 0x48
 801e150:	af02      	add	r7, sp, #8
 801e152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	2284      	movs	r2, #132	@ 0x84
 801e158:	2100      	movs	r1, #0
 801e15a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e15c:	f7f6 f9f6 	bl	801454c <HAL_GetTick>
 801e160:	0003      	movs	r3, r0
 801e162:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	2208      	movs	r2, #8
 801e16c:	4013      	ands	r3, r2
 801e16e:	2b08      	cmp	r3, #8
 801e170:	d12c      	bne.n	801e1cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e174:	2280      	movs	r2, #128	@ 0x80
 801e176:	0391      	lsls	r1, r2, #14
 801e178:	6878      	ldr	r0, [r7, #4]
 801e17a:	4a46      	ldr	r2, [pc, #280]	@ (801e294 <UART_CheckIdleState+0x148>)
 801e17c:	9200      	str	r2, [sp, #0]
 801e17e:	2200      	movs	r2, #0
 801e180:	f000 f88c 	bl	801e29c <UART_WaitOnFlagUntilTimeout>
 801e184:	1e03      	subs	r3, r0, #0
 801e186:	d021      	beq.n	801e1cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e188:	f3ef 8310 	mrs	r3, PRIMASK
 801e18c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e190:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e192:	2301      	movs	r3, #1
 801e194:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e198:	f383 8810 	msr	PRIMASK, r3
}
 801e19c:	46c0      	nop			@ (mov r8, r8)
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	681a      	ldr	r2, [r3, #0]
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	2180      	movs	r1, #128	@ 0x80
 801e1aa:	438a      	bics	r2, r1
 801e1ac:	601a      	str	r2, [r3, #0]
 801e1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1b4:	f383 8810 	msr	PRIMASK, r3
}
 801e1b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	2220      	movs	r2, #32
 801e1be:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2278      	movs	r2, #120	@ 0x78
 801e1c4:	2100      	movs	r1, #0
 801e1c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e1c8:	2303      	movs	r3, #3
 801e1ca:	e05f      	b.n	801e28c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	2204      	movs	r2, #4
 801e1d4:	4013      	ands	r3, r2
 801e1d6:	2b04      	cmp	r3, #4
 801e1d8:	d146      	bne.n	801e268 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1dc:	2280      	movs	r2, #128	@ 0x80
 801e1de:	03d1      	lsls	r1, r2, #15
 801e1e0:	6878      	ldr	r0, [r7, #4]
 801e1e2:	4a2c      	ldr	r2, [pc, #176]	@ (801e294 <UART_CheckIdleState+0x148>)
 801e1e4:	9200      	str	r2, [sp, #0]
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	f000 f858 	bl	801e29c <UART_WaitOnFlagUntilTimeout>
 801e1ec:	1e03      	subs	r3, r0, #0
 801e1ee:	d03b      	beq.n	801e268 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1f0:	f3ef 8310 	mrs	r3, PRIMASK
 801e1f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1fe:	693b      	ldr	r3, [r7, #16]
 801e200:	f383 8810 	msr	PRIMASK, r3
}
 801e204:	46c0      	nop			@ (mov r8, r8)
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	681a      	ldr	r2, [r3, #0]
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	4921      	ldr	r1, [pc, #132]	@ (801e298 <UART_CheckIdleState+0x14c>)
 801e212:	400a      	ands	r2, r1
 801e214:	601a      	str	r2, [r3, #0]
 801e216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e21a:	697b      	ldr	r3, [r7, #20]
 801e21c:	f383 8810 	msr	PRIMASK, r3
}
 801e220:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e222:	f3ef 8310 	mrs	r3, PRIMASK
 801e226:	61bb      	str	r3, [r7, #24]
  return(result);
 801e228:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e22a:	633b      	str	r3, [r7, #48]	@ 0x30
 801e22c:	2301      	movs	r3, #1
 801e22e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e230:	69fb      	ldr	r3, [r7, #28]
 801e232:	f383 8810 	msr	PRIMASK, r3
}
 801e236:	46c0      	nop			@ (mov r8, r8)
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	689a      	ldr	r2, [r3, #8]
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	2101      	movs	r1, #1
 801e244:	438a      	bics	r2, r1
 801e246:	609a      	str	r2, [r3, #8]
 801e248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e24a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e24c:	6a3b      	ldr	r3, [r7, #32]
 801e24e:	f383 8810 	msr	PRIMASK, r3
}
 801e252:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	2280      	movs	r2, #128	@ 0x80
 801e258:	2120      	movs	r1, #32
 801e25a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	2278      	movs	r2, #120	@ 0x78
 801e260:	2100      	movs	r1, #0
 801e262:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e264:	2303      	movs	r3, #3
 801e266:	e011      	b.n	801e28c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	2220      	movs	r2, #32
 801e26c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	2280      	movs	r2, #128	@ 0x80
 801e272:	2120      	movs	r1, #32
 801e274:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	2200      	movs	r2, #0
 801e27a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	2200      	movs	r2, #0
 801e280:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	2278      	movs	r2, #120	@ 0x78
 801e286:	2100      	movs	r1, #0
 801e288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e28a:	2300      	movs	r3, #0
}
 801e28c:	0018      	movs	r0, r3
 801e28e:	46bd      	mov	sp, r7
 801e290:	b010      	add	sp, #64	@ 0x40
 801e292:	bd80      	pop	{r7, pc}
 801e294:	01ffffff 	.word	0x01ffffff
 801e298:	fffffedf 	.word	0xfffffedf

0801e29c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e29c:	b580      	push	{r7, lr}
 801e29e:	b084      	sub	sp, #16
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	60f8      	str	r0, [r7, #12]
 801e2a4:	60b9      	str	r1, [r7, #8]
 801e2a6:	603b      	str	r3, [r7, #0]
 801e2a8:	1dfb      	adds	r3, r7, #7
 801e2aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e2ac:	e04b      	b.n	801e346 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e2ae:	69bb      	ldr	r3, [r7, #24]
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	d048      	beq.n	801e346 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e2b4:	f7f6 f94a 	bl	801454c <HAL_GetTick>
 801e2b8:	0002      	movs	r2, r0
 801e2ba:	683b      	ldr	r3, [r7, #0]
 801e2bc:	1ad3      	subs	r3, r2, r3
 801e2be:	69ba      	ldr	r2, [r7, #24]
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d302      	bcc.n	801e2ca <UART_WaitOnFlagUntilTimeout+0x2e>
 801e2c4:	69bb      	ldr	r3, [r7, #24]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d101      	bne.n	801e2ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e2ca:	2303      	movs	r3, #3
 801e2cc:	e04b      	b.n	801e366 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	2204      	movs	r2, #4
 801e2d6:	4013      	ands	r3, r2
 801e2d8:	d035      	beq.n	801e346 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	69db      	ldr	r3, [r3, #28]
 801e2e0:	2208      	movs	r2, #8
 801e2e2:	4013      	ands	r3, r2
 801e2e4:	2b08      	cmp	r3, #8
 801e2e6:	d111      	bne.n	801e30c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	2208      	movs	r2, #8
 801e2ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	0018      	movs	r0, r3
 801e2f4:	f000 f9ca 	bl	801e68c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e2f8:	68fb      	ldr	r3, [r7, #12]
 801e2fa:	2284      	movs	r2, #132	@ 0x84
 801e2fc:	2108      	movs	r1, #8
 801e2fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e300:	68fb      	ldr	r3, [r7, #12]
 801e302:	2278      	movs	r2, #120	@ 0x78
 801e304:	2100      	movs	r1, #0
 801e306:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e308:	2301      	movs	r3, #1
 801e30a:	e02c      	b.n	801e366 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	69da      	ldr	r2, [r3, #28]
 801e312:	2380      	movs	r3, #128	@ 0x80
 801e314:	011b      	lsls	r3, r3, #4
 801e316:	401a      	ands	r2, r3
 801e318:	2380      	movs	r3, #128	@ 0x80
 801e31a:	011b      	lsls	r3, r3, #4
 801e31c:	429a      	cmp	r2, r3
 801e31e:	d112      	bne.n	801e346 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	2280      	movs	r2, #128	@ 0x80
 801e326:	0112      	lsls	r2, r2, #4
 801e328:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	0018      	movs	r0, r3
 801e32e:	f000 f9ad 	bl	801e68c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	2284      	movs	r2, #132	@ 0x84
 801e336:	2120      	movs	r1, #32
 801e338:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	2278      	movs	r2, #120	@ 0x78
 801e33e:	2100      	movs	r1, #0
 801e340:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e342:	2303      	movs	r3, #3
 801e344:	e00f      	b.n	801e366 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	69db      	ldr	r3, [r3, #28]
 801e34c:	68ba      	ldr	r2, [r7, #8]
 801e34e:	4013      	ands	r3, r2
 801e350:	68ba      	ldr	r2, [r7, #8]
 801e352:	1ad3      	subs	r3, r2, r3
 801e354:	425a      	negs	r2, r3
 801e356:	4153      	adcs	r3, r2
 801e358:	b2db      	uxtb	r3, r3
 801e35a:	001a      	movs	r2, r3
 801e35c:	1dfb      	adds	r3, r7, #7
 801e35e:	781b      	ldrb	r3, [r3, #0]
 801e360:	429a      	cmp	r2, r3
 801e362:	d0a4      	beq.n	801e2ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e364:	2300      	movs	r3, #0
}
 801e366:	0018      	movs	r0, r3
 801e368:	46bd      	mov	sp, r7
 801e36a:	b004      	add	sp, #16
 801e36c:	bd80      	pop	{r7, pc}
	...

0801e370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b090      	sub	sp, #64	@ 0x40
 801e374:	af00      	add	r7, sp, #0
 801e376:	60f8      	str	r0, [r7, #12]
 801e378:	60b9      	str	r1, [r7, #8]
 801e37a:	1dbb      	adds	r3, r7, #6
 801e37c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	68ba      	ldr	r2, [r7, #8]
 801e382:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	1dba      	adds	r2, r7, #6
 801e388:	2158      	movs	r1, #88	@ 0x58
 801e38a:	8812      	ldrh	r2, [r2, #0]
 801e38c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	1dba      	adds	r2, r7, #6
 801e392:	215a      	movs	r1, #90	@ 0x5a
 801e394:	8812      	ldrh	r2, [r2, #0]
 801e396:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	2200      	movs	r2, #0
 801e39c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	689a      	ldr	r2, [r3, #8]
 801e3a2:	2380      	movs	r3, #128	@ 0x80
 801e3a4:	015b      	lsls	r3, r3, #5
 801e3a6:	429a      	cmp	r2, r3
 801e3a8:	d10d      	bne.n	801e3c6 <UART_Start_Receive_IT+0x56>
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	691b      	ldr	r3, [r3, #16]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d104      	bne.n	801e3bc <UART_Start_Receive_IT+0x4c>
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	225c      	movs	r2, #92	@ 0x5c
 801e3b6:	4950      	ldr	r1, [pc, #320]	@ (801e4f8 <UART_Start_Receive_IT+0x188>)
 801e3b8:	5299      	strh	r1, [r3, r2]
 801e3ba:	e02e      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	225c      	movs	r2, #92	@ 0x5c
 801e3c0:	21ff      	movs	r1, #255	@ 0xff
 801e3c2:	5299      	strh	r1, [r3, r2]
 801e3c4:	e029      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	689b      	ldr	r3, [r3, #8]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d10d      	bne.n	801e3ea <UART_Start_Receive_IT+0x7a>
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	691b      	ldr	r3, [r3, #16]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d104      	bne.n	801e3e0 <UART_Start_Receive_IT+0x70>
 801e3d6:	68fb      	ldr	r3, [r7, #12]
 801e3d8:	225c      	movs	r2, #92	@ 0x5c
 801e3da:	21ff      	movs	r1, #255	@ 0xff
 801e3dc:	5299      	strh	r1, [r3, r2]
 801e3de:	e01c      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	225c      	movs	r2, #92	@ 0x5c
 801e3e4:	217f      	movs	r1, #127	@ 0x7f
 801e3e6:	5299      	strh	r1, [r3, r2]
 801e3e8:	e017      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	689a      	ldr	r2, [r3, #8]
 801e3ee:	2380      	movs	r3, #128	@ 0x80
 801e3f0:	055b      	lsls	r3, r3, #21
 801e3f2:	429a      	cmp	r2, r3
 801e3f4:	d10d      	bne.n	801e412 <UART_Start_Receive_IT+0xa2>
 801e3f6:	68fb      	ldr	r3, [r7, #12]
 801e3f8:	691b      	ldr	r3, [r3, #16]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d104      	bne.n	801e408 <UART_Start_Receive_IT+0x98>
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	225c      	movs	r2, #92	@ 0x5c
 801e402:	217f      	movs	r1, #127	@ 0x7f
 801e404:	5299      	strh	r1, [r3, r2]
 801e406:	e008      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	225c      	movs	r2, #92	@ 0x5c
 801e40c:	213f      	movs	r1, #63	@ 0x3f
 801e40e:	5299      	strh	r1, [r3, r2]
 801e410:	e003      	b.n	801e41a <UART_Start_Receive_IT+0xaa>
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	225c      	movs	r2, #92	@ 0x5c
 801e416:	2100      	movs	r1, #0
 801e418:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	2284      	movs	r2, #132	@ 0x84
 801e41e:	2100      	movs	r1, #0
 801e420:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e422:	68fb      	ldr	r3, [r7, #12]
 801e424:	2280      	movs	r2, #128	@ 0x80
 801e426:	2122      	movs	r1, #34	@ 0x22
 801e428:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e42a:	f3ef 8310 	mrs	r3, PRIMASK
 801e42e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e430:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e434:	2301      	movs	r3, #1
 801e436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e43a:	f383 8810 	msr	PRIMASK, r3
}
 801e43e:	46c0      	nop			@ (mov r8, r8)
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	689a      	ldr	r2, [r3, #8]
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	2101      	movs	r1, #1
 801e44c:	430a      	orrs	r2, r1
 801e44e:	609a      	str	r2, [r3, #8]
 801e450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e452:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e456:	f383 8810 	msr	PRIMASK, r3
}
 801e45a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	689a      	ldr	r2, [r3, #8]
 801e460:	2380      	movs	r3, #128	@ 0x80
 801e462:	015b      	lsls	r3, r3, #5
 801e464:	429a      	cmp	r2, r3
 801e466:	d107      	bne.n	801e478 <UART_Start_Receive_IT+0x108>
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	691b      	ldr	r3, [r3, #16]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d103      	bne.n	801e478 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	4a22      	ldr	r2, [pc, #136]	@ (801e4fc <UART_Start_Receive_IT+0x18c>)
 801e474:	669a      	str	r2, [r3, #104]	@ 0x68
 801e476:	e002      	b.n	801e47e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	4a21      	ldr	r2, [pc, #132]	@ (801e500 <UART_Start_Receive_IT+0x190>)
 801e47c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	691b      	ldr	r3, [r3, #16]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d019      	beq.n	801e4ba <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e486:	f3ef 8310 	mrs	r3, PRIMASK
 801e48a:	61fb      	str	r3, [r7, #28]
  return(result);
 801e48c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e48e:	637b      	str	r3, [r7, #52]	@ 0x34
 801e490:	2301      	movs	r3, #1
 801e492:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e494:	6a3b      	ldr	r3, [r7, #32]
 801e496:	f383 8810 	msr	PRIMASK, r3
}
 801e49a:	46c0      	nop			@ (mov r8, r8)
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	681a      	ldr	r2, [r3, #0]
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	2190      	movs	r1, #144	@ 0x90
 801e4a8:	0049      	lsls	r1, r1, #1
 801e4aa:	430a      	orrs	r2, r1
 801e4ac:	601a      	str	r2, [r3, #0]
 801e4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e4b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e4b4:	f383 8810 	msr	PRIMASK, r3
}
 801e4b8:	e018      	b.n	801e4ec <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e4ba:	f3ef 8310 	mrs	r3, PRIMASK
 801e4be:	613b      	str	r3, [r7, #16]
  return(result);
 801e4c0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801e4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e4c4:	2301      	movs	r3, #1
 801e4c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	f383 8810 	msr	PRIMASK, r3
}
 801e4ce:	46c0      	nop			@ (mov r8, r8)
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	681a      	ldr	r2, [r3, #0]
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	2120      	movs	r1, #32
 801e4dc:	430a      	orrs	r2, r1
 801e4de:	601a      	str	r2, [r3, #0]
 801e4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4e4:	69bb      	ldr	r3, [r7, #24]
 801e4e6:	f383 8810 	msr	PRIMASK, r3
}
 801e4ea:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801e4ec:	2300      	movs	r3, #0
}
 801e4ee:	0018      	movs	r0, r3
 801e4f0:	46bd      	mov	sp, r7
 801e4f2:	b010      	add	sp, #64	@ 0x40
 801e4f4:	bd80      	pop	{r7, pc}
 801e4f6:	46c0      	nop			@ (mov r8, r8)
 801e4f8:	000001ff 	.word	0x000001ff
 801e4fc:	0801ec71 	.word	0x0801ec71
 801e500:	0801eaa5 	.word	0x0801eaa5

0801e504 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b090      	sub	sp, #64	@ 0x40
 801e508:	af00      	add	r7, sp, #0
 801e50a:	60f8      	str	r0, [r7, #12]
 801e50c:	60b9      	str	r1, [r7, #8]
 801e50e:	1dbb      	adds	r3, r7, #6
 801e510:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801e512:	68fb      	ldr	r3, [r7, #12]
 801e514:	68ba      	ldr	r2, [r7, #8]
 801e516:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	1dba      	adds	r2, r7, #6
 801e51c:	2158      	movs	r1, #88	@ 0x58
 801e51e:	8812      	ldrh	r2, [r2, #0]
 801e520:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	2284      	movs	r2, #132	@ 0x84
 801e526:	2100      	movs	r1, #0
 801e528:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e52a:	68fb      	ldr	r3, [r7, #12]
 801e52c:	2280      	movs	r2, #128	@ 0x80
 801e52e:	2122      	movs	r1, #34	@ 0x22
 801e530:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e536:	2b00      	cmp	r3, #0
 801e538:	d028      	beq.n	801e58c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e53e:	4a3e      	ldr	r2, [pc, #248]	@ (801e638 <UART_Start_Receive_DMA+0x134>)
 801e540:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801e542:	68fb      	ldr	r3, [r7, #12]
 801e544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e546:	4a3d      	ldr	r2, [pc, #244]	@ (801e63c <UART_Start_Receive_DMA+0x138>)
 801e548:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801e54a:	68fb      	ldr	r3, [r7, #12]
 801e54c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e54e:	4a3c      	ldr	r2, [pc, #240]	@ (801e640 <UART_Start_Receive_DMA+0x13c>)
 801e550:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e556:	2200      	movs	r2, #0
 801e558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	3324      	adds	r3, #36	@ 0x24
 801e564:	0019      	movs	r1, r3
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e56a:	001a      	movs	r2, r3
 801e56c:	1dbb      	adds	r3, r7, #6
 801e56e:	881b      	ldrh	r3, [r3, #0]
 801e570:	f7f6 fd3e 	bl	8014ff0 <HAL_DMA_Start_IT>
 801e574:	1e03      	subs	r3, r0, #0
 801e576:	d009      	beq.n	801e58c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	2284      	movs	r2, #132	@ 0x84
 801e57c:	2110      	movs	r1, #16
 801e57e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	2280      	movs	r2, #128	@ 0x80
 801e584:	2120      	movs	r1, #32
 801e586:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801e588:	2301      	movs	r3, #1
 801e58a:	e050      	b.n	801e62e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	691b      	ldr	r3, [r3, #16]
 801e590:	2b00      	cmp	r3, #0
 801e592:	d019      	beq.n	801e5c8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e594:	f3ef 8310 	mrs	r3, PRIMASK
 801e598:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801e59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e59e:	2301      	movs	r3, #1
 801e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e5a4:	f383 8810 	msr	PRIMASK, r3
}
 801e5a8:	46c0      	nop			@ (mov r8, r8)
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	681a      	ldr	r2, [r3, #0]
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	2180      	movs	r1, #128	@ 0x80
 801e5b6:	0049      	lsls	r1, r1, #1
 801e5b8:	430a      	orrs	r2, r1
 801e5ba:	601a      	str	r2, [r3, #0]
 801e5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5c2:	f383 8810 	msr	PRIMASK, r3
}
 801e5c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5c8:	f3ef 8310 	mrs	r3, PRIMASK
 801e5cc:	613b      	str	r3, [r7, #16]
  return(result);
 801e5ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e5d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e5d2:	2301      	movs	r3, #1
 801e5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5d6:	697b      	ldr	r3, [r7, #20]
 801e5d8:	f383 8810 	msr	PRIMASK, r3
}
 801e5dc:	46c0      	nop			@ (mov r8, r8)
 801e5de:	68fb      	ldr	r3, [r7, #12]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	689a      	ldr	r2, [r3, #8]
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	2101      	movs	r1, #1
 801e5ea:	430a      	orrs	r2, r1
 801e5ec:	609a      	str	r2, [r3, #8]
 801e5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5f2:	69bb      	ldr	r3, [r7, #24]
 801e5f4:	f383 8810 	msr	PRIMASK, r3
}
 801e5f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5fa:	f3ef 8310 	mrs	r3, PRIMASK
 801e5fe:	61fb      	str	r3, [r7, #28]
  return(result);
 801e600:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e602:	637b      	str	r3, [r7, #52]	@ 0x34
 801e604:	2301      	movs	r3, #1
 801e606:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e608:	6a3b      	ldr	r3, [r7, #32]
 801e60a:	f383 8810 	msr	PRIMASK, r3
}
 801e60e:	46c0      	nop			@ (mov r8, r8)
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	689a      	ldr	r2, [r3, #8]
 801e616:	68fb      	ldr	r3, [r7, #12]
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	2140      	movs	r1, #64	@ 0x40
 801e61c:	430a      	orrs	r2, r1
 801e61e:	609a      	str	r2, [r3, #8]
 801e620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e622:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e626:	f383 8810 	msr	PRIMASK, r3
}
 801e62a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801e62c:	2300      	movs	r3, #0
}
 801e62e:	0018      	movs	r0, r3
 801e630:	46bd      	mov	sp, r7
 801e632:	b010      	add	sp, #64	@ 0x40
 801e634:	bd80      	pop	{r7, pc}
 801e636:	46c0      	nop			@ (mov r8, r8)
 801e638:	0801e815 	.word	0x0801e815
 801e63c:	0801e949 	.word	0x0801e949
 801e640:	0801e991 	.word	0x0801e991

0801e644 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801e644:	b580      	push	{r7, lr}
 801e646:	b086      	sub	sp, #24
 801e648:	af00      	add	r7, sp, #0
 801e64a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e64c:	f3ef 8310 	mrs	r3, PRIMASK
 801e650:	60bb      	str	r3, [r7, #8]
  return(result);
 801e652:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801e654:	617b      	str	r3, [r7, #20]
 801e656:	2301      	movs	r3, #1
 801e658:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	f383 8810 	msr	PRIMASK, r3
}
 801e660:	46c0      	nop			@ (mov r8, r8)
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	681a      	ldr	r2, [r3, #0]
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	21c0      	movs	r1, #192	@ 0xc0
 801e66e:	438a      	bics	r2, r1
 801e670:	601a      	str	r2, [r3, #0]
 801e672:	697b      	ldr	r3, [r7, #20]
 801e674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e676:	693b      	ldr	r3, [r7, #16]
 801e678:	f383 8810 	msr	PRIMASK, r3
}
 801e67c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	2220      	movs	r2, #32
 801e682:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801e684:	46c0      	nop			@ (mov r8, r8)
 801e686:	46bd      	mov	sp, r7
 801e688:	b006      	add	sp, #24
 801e68a:	bd80      	pop	{r7, pc}

0801e68c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b08e      	sub	sp, #56	@ 0x38
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e694:	f3ef 8310 	mrs	r3, PRIMASK
 801e698:	617b      	str	r3, [r7, #20]
  return(result);
 801e69a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e69c:	637b      	str	r3, [r7, #52]	@ 0x34
 801e69e:	2301      	movs	r3, #1
 801e6a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6a2:	69bb      	ldr	r3, [r7, #24]
 801e6a4:	f383 8810 	msr	PRIMASK, r3
}
 801e6a8:	46c0      	nop			@ (mov r8, r8)
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	681b      	ldr	r3, [r3, #0]
 801e6ae:	681a      	ldr	r2, [r3, #0]
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	4926      	ldr	r1, [pc, #152]	@ (801e750 <UART_EndRxTransfer+0xc4>)
 801e6b6:	400a      	ands	r2, r1
 801e6b8:	601a      	str	r2, [r3, #0]
 801e6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6be:	69fb      	ldr	r3, [r7, #28]
 801e6c0:	f383 8810 	msr	PRIMASK, r3
}
 801e6c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6c6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6ca:	623b      	str	r3, [r7, #32]
  return(result);
 801e6cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e6ce:	633b      	str	r3, [r7, #48]	@ 0x30
 801e6d0:	2301      	movs	r3, #1
 801e6d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6d6:	f383 8810 	msr	PRIMASK, r3
}
 801e6da:	46c0      	nop			@ (mov r8, r8)
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	689a      	ldr	r2, [r3, #8]
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	2101      	movs	r1, #1
 801e6e8:	438a      	bics	r2, r1
 801e6ea:	609a      	str	r2, [r3, #8]
 801e6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6f2:	f383 8810 	msr	PRIMASK, r3
}
 801e6f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e6fc:	2b01      	cmp	r3, #1
 801e6fe:	d118      	bne.n	801e732 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e700:	f3ef 8310 	mrs	r3, PRIMASK
 801e704:	60bb      	str	r3, [r7, #8]
  return(result);
 801e706:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e70a:	2301      	movs	r3, #1
 801e70c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	f383 8810 	msr	PRIMASK, r3
}
 801e714:	46c0      	nop			@ (mov r8, r8)
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	681a      	ldr	r2, [r3, #0]
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	2110      	movs	r1, #16
 801e722:	438a      	bics	r2, r1
 801e724:	601a      	str	r2, [r3, #0]
 801e726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e72a:	693b      	ldr	r3, [r7, #16]
 801e72c:	f383 8810 	msr	PRIMASK, r3
}
 801e730:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	2280      	movs	r2, #128	@ 0x80
 801e736:	2120      	movs	r1, #32
 801e738:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	2200      	movs	r2, #0
 801e73e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	2200      	movs	r2, #0
 801e744:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801e746:	46c0      	nop			@ (mov r8, r8)
 801e748:	46bd      	mov	sp, r7
 801e74a:	b00e      	add	sp, #56	@ 0x38
 801e74c:	bd80      	pop	{r7, pc}
 801e74e:	46c0      	nop			@ (mov r8, r8)
 801e750:	fffffedf 	.word	0xfffffedf

0801e754 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b08c      	sub	sp, #48	@ 0x30
 801e758:	af00      	add	r7, sp, #0
 801e75a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e760:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	2220      	movs	r2, #32
 801e76a:	4013      	ands	r3, r2
 801e76c:	d135      	bne.n	801e7da <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801e76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e770:	2252      	movs	r2, #82	@ 0x52
 801e772:	2100      	movs	r1, #0
 801e774:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e776:	f3ef 8310 	mrs	r3, PRIMASK
 801e77a:	60fb      	str	r3, [r7, #12]
  return(result);
 801e77c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801e77e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e780:	2301      	movs	r3, #1
 801e782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e784:	693b      	ldr	r3, [r7, #16]
 801e786:	f383 8810 	msr	PRIMASK, r3
}
 801e78a:	46c0      	nop			@ (mov r8, r8)
 801e78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	689a      	ldr	r2, [r3, #8]
 801e792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	2180      	movs	r1, #128	@ 0x80
 801e798:	438a      	bics	r2, r1
 801e79a:	609a      	str	r2, [r3, #8]
 801e79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e79e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7a0:	697b      	ldr	r3, [r7, #20]
 801e7a2:	f383 8810 	msr	PRIMASK, r3
}
 801e7a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e7ac:	61bb      	str	r3, [r7, #24]
  return(result);
 801e7ae:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
 801e7b2:	2301      	movs	r3, #1
 801e7b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7b6:	69fb      	ldr	r3, [r7, #28]
 801e7b8:	f383 8810 	msr	PRIMASK, r3
}
 801e7bc:	46c0      	nop			@ (mov r8, r8)
 801e7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	681a      	ldr	r2, [r3, #0]
 801e7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	2140      	movs	r1, #64	@ 0x40
 801e7ca:	430a      	orrs	r2, r1
 801e7cc:	601a      	str	r2, [r3, #0]
 801e7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7d2:	6a3b      	ldr	r3, [r7, #32]
 801e7d4:	f383 8810 	msr	PRIMASK, r3
}
 801e7d8:	e006      	b.n	801e7e8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801e7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7dc:	228c      	movs	r2, #140	@ 0x8c
 801e7de:	589b      	ldr	r3, [r3, r2]
 801e7e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e7e2:	0010      	movs	r0, r2
 801e7e4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e7e6:	46c0      	nop			@ (mov r8, r8)
 801e7e8:	46c0      	nop			@ (mov r8, r8)
 801e7ea:	46bd      	mov	sp, r7
 801e7ec:	b00c      	add	sp, #48	@ 0x30
 801e7ee:	bd80      	pop	{r7, pc}

0801e7f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	b084      	sub	sp, #16
 801e7f4:	af00      	add	r7, sp, #0
 801e7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e7fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	2288      	movs	r2, #136	@ 0x88
 801e802:	589b      	ldr	r3, [r3, r2]
 801e804:	68fa      	ldr	r2, [r7, #12]
 801e806:	0010      	movs	r0, r2
 801e808:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e80a:	46c0      	nop			@ (mov r8, r8)
 801e80c:	46bd      	mov	sp, r7
 801e80e:	b004      	add	sp, #16
 801e810:	bd80      	pop	{r7, pc}
	...

0801e814 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b094      	sub	sp, #80	@ 0x50
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e820:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	2220      	movs	r2, #32
 801e82a:	4013      	ands	r3, r2
 801e82c:	d16f      	bne.n	801e90e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801e82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e830:	225a      	movs	r2, #90	@ 0x5a
 801e832:	2100      	movs	r1, #0
 801e834:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e836:	f3ef 8310 	mrs	r3, PRIMASK
 801e83a:	61bb      	str	r3, [r7, #24]
  return(result);
 801e83c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e83e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e840:	2301      	movs	r3, #1
 801e842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e844:	69fb      	ldr	r3, [r7, #28]
 801e846:	f383 8810 	msr	PRIMASK, r3
}
 801e84a:	46c0      	nop			@ (mov r8, r8)
 801e84c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	681a      	ldr	r2, [r3, #0]
 801e852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	493b      	ldr	r1, [pc, #236]	@ (801e944 <UART_DMAReceiveCplt+0x130>)
 801e858:	400a      	ands	r2, r1
 801e85a:	601a      	str	r2, [r3, #0]
 801e85c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e85e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e860:	6a3b      	ldr	r3, [r7, #32]
 801e862:	f383 8810 	msr	PRIMASK, r3
}
 801e866:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e868:	f3ef 8310 	mrs	r3, PRIMASK
 801e86c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e870:	647b      	str	r3, [r7, #68]	@ 0x44
 801e872:	2301      	movs	r3, #1
 801e874:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e878:	f383 8810 	msr	PRIMASK, r3
}
 801e87c:	46c0      	nop			@ (mov r8, r8)
 801e87e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	689a      	ldr	r2, [r3, #8]
 801e884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	2101      	movs	r1, #1
 801e88a:	438a      	bics	r2, r1
 801e88c:	609a      	str	r2, [r3, #8]
 801e88e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e894:	f383 8810 	msr	PRIMASK, r3
}
 801e898:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e89a:	f3ef 8310 	mrs	r3, PRIMASK
 801e89e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e8a2:	643b      	str	r3, [r7, #64]	@ 0x40
 801e8a4:	2301      	movs	r3, #1
 801e8a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8aa:	f383 8810 	msr	PRIMASK, r3
}
 801e8ae:	46c0      	nop			@ (mov r8, r8)
 801e8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	689a      	ldr	r2, [r3, #8]
 801e8b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	2140      	movs	r1, #64	@ 0x40
 801e8bc:	438a      	bics	r2, r1
 801e8be:	609a      	str	r2, [r3, #8]
 801e8c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8c6:	f383 8810 	msr	PRIMASK, r3
}
 801e8ca:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801e8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8ce:	2280      	movs	r2, #128	@ 0x80
 801e8d0:	2120      	movs	r1, #32
 801e8d2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e8d8:	2b01      	cmp	r3, #1
 801e8da:	d118      	bne.n	801e90e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8e2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e8e6:	2301      	movs	r3, #1
 801e8e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8ea:	693b      	ldr	r3, [r7, #16]
 801e8ec:	f383 8810 	msr	PRIMASK, r3
}
 801e8f0:	46c0      	nop			@ (mov r8, r8)
 801e8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	681a      	ldr	r2, [r3, #0]
 801e8f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	2110      	movs	r1, #16
 801e8fe:	438a      	bics	r2, r1
 801e900:	601a      	str	r2, [r3, #0]
 801e902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e906:	697b      	ldr	r3, [r7, #20]
 801e908:	f383 8810 	msr	PRIMASK, r3
}
 801e90c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e910:	2200      	movs	r2, #0
 801e912:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e918:	2b01      	cmp	r3, #1
 801e91a:	d109      	bne.n	801e930 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801e91c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e91e:	22ac      	movs	r2, #172	@ 0xac
 801e920:	589b      	ldr	r3, [r3, r2]
 801e922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e924:	2158      	movs	r1, #88	@ 0x58
 801e926:	5a51      	ldrh	r1, [r2, r1]
 801e928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e92a:	0010      	movs	r0, r2
 801e92c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e92e:	e005      	b.n	801e93c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801e930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e932:	2294      	movs	r2, #148	@ 0x94
 801e934:	589b      	ldr	r3, [r3, r2]
 801e936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e938:	0010      	movs	r0, r2
 801e93a:	4798      	blx	r3
}
 801e93c:	46c0      	nop			@ (mov r8, r8)
 801e93e:	46bd      	mov	sp, r7
 801e940:	b014      	add	sp, #80	@ 0x50
 801e942:	bd80      	pop	{r7, pc}
 801e944:	fffffeff 	.word	0xfffffeff

0801e948 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b084      	sub	sp, #16
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e954:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	2201      	movs	r2, #1
 801e95a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e960:	2b01      	cmp	r3, #1
 801e962:	d10b      	bne.n	801e97c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	22ac      	movs	r2, #172	@ 0xac
 801e968:	589b      	ldr	r3, [r3, r2]
 801e96a:	68fa      	ldr	r2, [r7, #12]
 801e96c:	2158      	movs	r1, #88	@ 0x58
 801e96e:	5a52      	ldrh	r2, [r2, r1]
 801e970:	0852      	lsrs	r2, r2, #1
 801e972:	b291      	uxth	r1, r2
 801e974:	68fa      	ldr	r2, [r7, #12]
 801e976:	0010      	movs	r0, r2
 801e978:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e97a:	e005      	b.n	801e988 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	2290      	movs	r2, #144	@ 0x90
 801e980:	589b      	ldr	r3, [r3, r2]
 801e982:	68fa      	ldr	r2, [r7, #12]
 801e984:	0010      	movs	r0, r2
 801e986:	4798      	blx	r3
}
 801e988:	46c0      	nop			@ (mov r8, r8)
 801e98a:	46bd      	mov	sp, r7
 801e98c:	b004      	add	sp, #16
 801e98e:	bd80      	pop	{r7, pc}

0801e990 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801e990:	b580      	push	{r7, lr}
 801e992:	b086      	sub	sp, #24
 801e994:	af00      	add	r7, sp, #0
 801e996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e99c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801e99e:	697b      	ldr	r3, [r7, #20]
 801e9a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e9a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801e9a4:	697b      	ldr	r3, [r7, #20]
 801e9a6:	2280      	movs	r2, #128	@ 0x80
 801e9a8:	589b      	ldr	r3, [r3, r2]
 801e9aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801e9ac:	697b      	ldr	r3, [r7, #20]
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	689b      	ldr	r3, [r3, #8]
 801e9b2:	2280      	movs	r2, #128	@ 0x80
 801e9b4:	4013      	ands	r3, r2
 801e9b6:	2b80      	cmp	r3, #128	@ 0x80
 801e9b8:	d10a      	bne.n	801e9d0 <UART_DMAError+0x40>
 801e9ba:	693b      	ldr	r3, [r7, #16]
 801e9bc:	2b21      	cmp	r3, #33	@ 0x21
 801e9be:	d107      	bne.n	801e9d0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801e9c0:	697b      	ldr	r3, [r7, #20]
 801e9c2:	2252      	movs	r2, #82	@ 0x52
 801e9c4:	2100      	movs	r1, #0
 801e9c6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801e9c8:	697b      	ldr	r3, [r7, #20]
 801e9ca:	0018      	movs	r0, r3
 801e9cc:	f7ff fe3a 	bl	801e644 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801e9d0:	697b      	ldr	r3, [r7, #20]
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	689b      	ldr	r3, [r3, #8]
 801e9d6:	2240      	movs	r2, #64	@ 0x40
 801e9d8:	4013      	ands	r3, r2
 801e9da:	2b40      	cmp	r3, #64	@ 0x40
 801e9dc:	d10a      	bne.n	801e9f4 <UART_DMAError+0x64>
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	2b22      	cmp	r3, #34	@ 0x22
 801e9e2:	d107      	bne.n	801e9f4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801e9e4:	697b      	ldr	r3, [r7, #20]
 801e9e6:	225a      	movs	r2, #90	@ 0x5a
 801e9e8:	2100      	movs	r1, #0
 801e9ea:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801e9ec:	697b      	ldr	r3, [r7, #20]
 801e9ee:	0018      	movs	r0, r3
 801e9f0:	f7ff fe4c 	bl	801e68c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e9f4:	697b      	ldr	r3, [r7, #20]
 801e9f6:	2284      	movs	r2, #132	@ 0x84
 801e9f8:	589b      	ldr	r3, [r3, r2]
 801e9fa:	2210      	movs	r2, #16
 801e9fc:	431a      	orrs	r2, r3
 801e9fe:	697b      	ldr	r3, [r7, #20]
 801ea00:	2184      	movs	r1, #132	@ 0x84
 801ea02:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ea04:	697b      	ldr	r3, [r7, #20]
 801ea06:	2298      	movs	r2, #152	@ 0x98
 801ea08:	589b      	ldr	r3, [r3, r2]
 801ea0a:	697a      	ldr	r2, [r7, #20]
 801ea0c:	0010      	movs	r0, r2
 801ea0e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ea10:	46c0      	nop			@ (mov r8, r8)
 801ea12:	46bd      	mov	sp, r7
 801ea14:	b006      	add	sp, #24
 801ea16:	bd80      	pop	{r7, pc}

0801ea18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b084      	sub	sp, #16
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ea26:	68fb      	ldr	r3, [r7, #12]
 801ea28:	225a      	movs	r2, #90	@ 0x5a
 801ea2a:	2100      	movs	r1, #0
 801ea2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	2252      	movs	r2, #82	@ 0x52
 801ea32:	2100      	movs	r1, #0
 801ea34:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	2298      	movs	r2, #152	@ 0x98
 801ea3a:	589b      	ldr	r3, [r3, r2]
 801ea3c:	68fa      	ldr	r2, [r7, #12]
 801ea3e:	0010      	movs	r0, r2
 801ea40:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ea42:	46c0      	nop			@ (mov r8, r8)
 801ea44:	46bd      	mov	sp, r7
 801ea46:	b004      	add	sp, #16
 801ea48:	bd80      	pop	{r7, pc}

0801ea4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ea4a:	b580      	push	{r7, lr}
 801ea4c:	b086      	sub	sp, #24
 801ea4e:	af00      	add	r7, sp, #0
 801ea50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea52:	f3ef 8310 	mrs	r3, PRIMASK
 801ea56:	60bb      	str	r3, [r7, #8]
  return(result);
 801ea58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ea5a:	617b      	str	r3, [r7, #20]
 801ea5c:	2301      	movs	r3, #1
 801ea5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea60:	68fb      	ldr	r3, [r7, #12]
 801ea62:	f383 8810 	msr	PRIMASK, r3
}
 801ea66:	46c0      	nop			@ (mov r8, r8)
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	681a      	ldr	r2, [r3, #0]
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	2140      	movs	r1, #64	@ 0x40
 801ea74:	438a      	bics	r2, r1
 801ea76:	601a      	str	r2, [r3, #0]
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea7c:	693b      	ldr	r3, [r7, #16]
 801ea7e:	f383 8810 	msr	PRIMASK, r3
}
 801ea82:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2220      	movs	r2, #32
 801ea88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	2200      	movs	r2, #0
 801ea8e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	228c      	movs	r2, #140	@ 0x8c
 801ea94:	589b      	ldr	r3, [r3, r2]
 801ea96:	687a      	ldr	r2, [r7, #4]
 801ea98:	0010      	movs	r0, r2
 801ea9a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ea9c:	46c0      	nop			@ (mov r8, r8)
 801ea9e:	46bd      	mov	sp, r7
 801eaa0:	b006      	add	sp, #24
 801eaa2:	bd80      	pop	{r7, pc}

0801eaa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b094      	sub	sp, #80	@ 0x50
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801eaac:	204e      	movs	r0, #78	@ 0x4e
 801eaae:	183b      	adds	r3, r7, r0
 801eab0:	687a      	ldr	r2, [r7, #4]
 801eab2:	215c      	movs	r1, #92	@ 0x5c
 801eab4:	5a52      	ldrh	r2, [r2, r1]
 801eab6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	2280      	movs	r2, #128	@ 0x80
 801eabc:	589b      	ldr	r3, [r3, r2]
 801eabe:	2b22      	cmp	r3, #34	@ 0x22
 801eac0:	d000      	beq.n	801eac4 <UART_RxISR_8BIT+0x20>
 801eac2:	e0c2      	b.n	801ec4a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801eaca:	214c      	movs	r1, #76	@ 0x4c
 801eacc:	187b      	adds	r3, r7, r1
 801eace:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801ead0:	187b      	adds	r3, r7, r1
 801ead2:	881b      	ldrh	r3, [r3, #0]
 801ead4:	b2da      	uxtb	r2, r3
 801ead6:	183b      	adds	r3, r7, r0
 801ead8:	881b      	ldrh	r3, [r3, #0]
 801eada:	b2d9      	uxtb	r1, r3
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eae0:	400a      	ands	r2, r1
 801eae2:	b2d2      	uxtb	r2, r2
 801eae4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eaea:	1c5a      	adds	r2, r3, #1
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	225a      	movs	r2, #90	@ 0x5a
 801eaf4:	5a9b      	ldrh	r3, [r3, r2]
 801eaf6:	b29b      	uxth	r3, r3
 801eaf8:	3b01      	subs	r3, #1
 801eafa:	b299      	uxth	r1, r3
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	225a      	movs	r2, #90	@ 0x5a
 801eb00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	225a      	movs	r2, #90	@ 0x5a
 801eb06:	5a9b      	ldrh	r3, [r3, r2]
 801eb08:	b29b      	uxth	r3, r3
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d000      	beq.n	801eb10 <UART_RxISR_8BIT+0x6c>
 801eb0e:	e0a4      	b.n	801ec5a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb10:	f3ef 8310 	mrs	r3, PRIMASK
 801eb14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eb18:	64bb      	str	r3, [r7, #72]	@ 0x48
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb20:	f383 8810 	msr	PRIMASK, r3
}
 801eb24:	46c0      	nop			@ (mov r8, r8)
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	681a      	ldr	r2, [r3, #0]
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	494c      	ldr	r1, [pc, #304]	@ (801ec64 <UART_RxISR_8BIT+0x1c0>)
 801eb32:	400a      	ands	r2, r1
 801eb34:	601a      	str	r2, [r3, #0]
 801eb36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb3c:	f383 8810 	msr	PRIMASK, r3
}
 801eb40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb42:	f3ef 8310 	mrs	r3, PRIMASK
 801eb46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801eb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb4a:	647b      	str	r3, [r7, #68]	@ 0x44
 801eb4c:	2301      	movs	r3, #1
 801eb4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb52:	f383 8810 	msr	PRIMASK, r3
}
 801eb56:	46c0      	nop			@ (mov r8, r8)
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	689a      	ldr	r2, [r3, #8]
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	2101      	movs	r1, #1
 801eb64:	438a      	bics	r2, r1
 801eb66:	609a      	str	r2, [r3, #8]
 801eb68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eb6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eb6e:	f383 8810 	msr	PRIMASK, r3
}
 801eb72:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	2280      	movs	r2, #128	@ 0x80
 801eb78:	2120      	movs	r1, #32
 801eb7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	2200      	movs	r2, #0
 801eb80:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	2200      	movs	r2, #0
 801eb86:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	4a36      	ldr	r2, [pc, #216]	@ (801ec68 <UART_RxISR_8BIT+0x1c4>)
 801eb8e:	4293      	cmp	r3, r2
 801eb90:	d01f      	beq.n	801ebd2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	685a      	ldr	r2, [r3, #4]
 801eb98:	2380      	movs	r3, #128	@ 0x80
 801eb9a:	041b      	lsls	r3, r3, #16
 801eb9c:	4013      	ands	r3, r2
 801eb9e:	d018      	beq.n	801ebd2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eba0:	f3ef 8310 	mrs	r3, PRIMASK
 801eba4:	61bb      	str	r3, [r7, #24]
  return(result);
 801eba6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801eba8:	643b      	str	r3, [r7, #64]	@ 0x40
 801ebaa:	2301      	movs	r3, #1
 801ebac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebae:	69fb      	ldr	r3, [r7, #28]
 801ebb0:	f383 8810 	msr	PRIMASK, r3
}
 801ebb4:	46c0      	nop			@ (mov r8, r8)
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	681a      	ldr	r2, [r3, #0]
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	492a      	ldr	r1, [pc, #168]	@ (801ec6c <UART_RxISR_8BIT+0x1c8>)
 801ebc2:	400a      	ands	r2, r1
 801ebc4:	601a      	str	r2, [r3, #0]
 801ebc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ebc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebca:	6a3b      	ldr	r3, [r7, #32]
 801ebcc:	f383 8810 	msr	PRIMASK, r3
}
 801ebd0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ebd6:	2b01      	cmp	r3, #1
 801ebd8:	d130      	bne.n	801ec3c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	2200      	movs	r2, #0
 801ebde:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebe0:	f3ef 8310 	mrs	r3, PRIMASK
 801ebe4:	60fb      	str	r3, [r7, #12]
  return(result);
 801ebe6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ebe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ebea:	2301      	movs	r3, #1
 801ebec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebee:	693b      	ldr	r3, [r7, #16]
 801ebf0:	f383 8810 	msr	PRIMASK, r3
}
 801ebf4:	46c0      	nop			@ (mov r8, r8)
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	681b      	ldr	r3, [r3, #0]
 801ebfa:	681a      	ldr	r2, [r3, #0]
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	2110      	movs	r1, #16
 801ec02:	438a      	bics	r2, r1
 801ec04:	601a      	str	r2, [r3, #0]
 801ec06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ec08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec0a:	697b      	ldr	r3, [r7, #20]
 801ec0c:	f383 8810 	msr	PRIMASK, r3
}
 801ec10:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	69db      	ldr	r3, [r3, #28]
 801ec18:	2210      	movs	r2, #16
 801ec1a:	4013      	ands	r3, r2
 801ec1c:	2b10      	cmp	r3, #16
 801ec1e:	d103      	bne.n	801ec28 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	2210      	movs	r2, #16
 801ec26:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	22ac      	movs	r2, #172	@ 0xac
 801ec2c:	589b      	ldr	r3, [r3, r2]
 801ec2e:	687a      	ldr	r2, [r7, #4]
 801ec30:	2158      	movs	r1, #88	@ 0x58
 801ec32:	5a51      	ldrh	r1, [r2, r1]
 801ec34:	687a      	ldr	r2, [r7, #4]
 801ec36:	0010      	movs	r0, r2
 801ec38:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ec3a:	e00e      	b.n	801ec5a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	2294      	movs	r2, #148	@ 0x94
 801ec40:	589b      	ldr	r3, [r3, r2]
 801ec42:	687a      	ldr	r2, [r7, #4]
 801ec44:	0010      	movs	r0, r2
 801ec46:	4798      	blx	r3
}
 801ec48:	e007      	b.n	801ec5a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	699a      	ldr	r2, [r3, #24]
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	2108      	movs	r1, #8
 801ec56:	430a      	orrs	r2, r1
 801ec58:	619a      	str	r2, [r3, #24]
}
 801ec5a:	46c0      	nop			@ (mov r8, r8)
 801ec5c:	46bd      	mov	sp, r7
 801ec5e:	b014      	add	sp, #80	@ 0x50
 801ec60:	bd80      	pop	{r7, pc}
 801ec62:	46c0      	nop			@ (mov r8, r8)
 801ec64:	fffffedf 	.word	0xfffffedf
 801ec68:	40004800 	.word	0x40004800
 801ec6c:	fbffffff 	.word	0xfbffffff

0801ec70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b094      	sub	sp, #80	@ 0x50
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801ec78:	204e      	movs	r0, #78	@ 0x4e
 801ec7a:	183b      	adds	r3, r7, r0
 801ec7c:	687a      	ldr	r2, [r7, #4]
 801ec7e:	215c      	movs	r1, #92	@ 0x5c
 801ec80:	5a52      	ldrh	r2, [r2, r1]
 801ec82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	2280      	movs	r2, #128	@ 0x80
 801ec88:	589b      	ldr	r3, [r3, r2]
 801ec8a:	2b22      	cmp	r3, #34	@ 0x22
 801ec8c:	d000      	beq.n	801ec90 <UART_RxISR_16BIT+0x20>
 801ec8e:	e0c2      	b.n	801ee16 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ec96:	214c      	movs	r1, #76	@ 0x4c
 801ec98:	187b      	adds	r3, r7, r1
 801ec9a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eca0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801eca2:	187b      	adds	r3, r7, r1
 801eca4:	183a      	adds	r2, r7, r0
 801eca6:	881b      	ldrh	r3, [r3, #0]
 801eca8:	8812      	ldrh	r2, [r2, #0]
 801ecaa:	4013      	ands	r3, r2
 801ecac:	b29a      	uxth	r2, r3
 801ecae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ecb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ecb6:	1c9a      	adds	r2, r3, #2
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	225a      	movs	r2, #90	@ 0x5a
 801ecc0:	5a9b      	ldrh	r3, [r3, r2]
 801ecc2:	b29b      	uxth	r3, r3
 801ecc4:	3b01      	subs	r3, #1
 801ecc6:	b299      	uxth	r1, r3
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	225a      	movs	r2, #90	@ 0x5a
 801eccc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	225a      	movs	r2, #90	@ 0x5a
 801ecd2:	5a9b      	ldrh	r3, [r3, r2]
 801ecd4:	b29b      	uxth	r3, r3
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d000      	beq.n	801ecdc <UART_RxISR_16BIT+0x6c>
 801ecda:	e0a4      	b.n	801ee26 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecdc:	f3ef 8310 	mrs	r3, PRIMASK
 801ece0:	623b      	str	r3, [r7, #32]
  return(result);
 801ece2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ece4:	647b      	str	r3, [r7, #68]	@ 0x44
 801ece6:	2301      	movs	r3, #1
 801ece8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecec:	f383 8810 	msr	PRIMASK, r3
}
 801ecf0:	46c0      	nop			@ (mov r8, r8)
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	681a      	ldr	r2, [r3, #0]
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	494c      	ldr	r1, [pc, #304]	@ (801ee30 <UART_RxISR_16BIT+0x1c0>)
 801ecfe:	400a      	ands	r2, r1
 801ed00:	601a      	str	r2, [r3, #0]
 801ed02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ed04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed08:	f383 8810 	msr	PRIMASK, r3
}
 801ed0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ed12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ed16:	643b      	str	r3, [r7, #64]	@ 0x40
 801ed18:	2301      	movs	r3, #1
 801ed1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ed1e:	f383 8810 	msr	PRIMASK, r3
}
 801ed22:	46c0      	nop			@ (mov r8, r8)
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	689a      	ldr	r2, [r3, #8]
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	2101      	movs	r1, #1
 801ed30:	438a      	bics	r2, r1
 801ed32:	609a      	str	r2, [r3, #8]
 801ed34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed3a:	f383 8810 	msr	PRIMASK, r3
}
 801ed3e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	2280      	movs	r2, #128	@ 0x80
 801ed44:	2120      	movs	r1, #32
 801ed46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	2200      	movs	r2, #0
 801ed4c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	2200      	movs	r2, #0
 801ed52:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	4a36      	ldr	r2, [pc, #216]	@ (801ee34 <UART_RxISR_16BIT+0x1c4>)
 801ed5a:	4293      	cmp	r3, r2
 801ed5c:	d01f      	beq.n	801ed9e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	685a      	ldr	r2, [r3, #4]
 801ed64:	2380      	movs	r3, #128	@ 0x80
 801ed66:	041b      	lsls	r3, r3, #16
 801ed68:	4013      	ands	r3, r2
 801ed6a:	d018      	beq.n	801ed9e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ed70:	617b      	str	r3, [r7, #20]
  return(result);
 801ed72:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ed74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed76:	2301      	movs	r3, #1
 801ed78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed7a:	69bb      	ldr	r3, [r7, #24]
 801ed7c:	f383 8810 	msr	PRIMASK, r3
}
 801ed80:	46c0      	nop			@ (mov r8, r8)
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	681a      	ldr	r2, [r3, #0]
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	492a      	ldr	r1, [pc, #168]	@ (801ee38 <UART_RxISR_16BIT+0x1c8>)
 801ed8e:	400a      	ands	r2, r1
 801ed90:	601a      	str	r2, [r3, #0]
 801ed92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ed94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed96:	69fb      	ldr	r3, [r7, #28]
 801ed98:	f383 8810 	msr	PRIMASK, r3
}
 801ed9c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eda2:	2b01      	cmp	r3, #1
 801eda4:	d130      	bne.n	801ee08 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	2200      	movs	r2, #0
 801edaa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edac:	f3ef 8310 	mrs	r3, PRIMASK
 801edb0:	60bb      	str	r3, [r7, #8]
  return(result);
 801edb2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801edb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801edb6:	2301      	movs	r3, #1
 801edb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	f383 8810 	msr	PRIMASK, r3
}
 801edc0:	46c0      	nop			@ (mov r8, r8)
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	681a      	ldr	r2, [r3, #0]
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	2110      	movs	r1, #16
 801edce:	438a      	bics	r2, r1
 801edd0:	601a      	str	r2, [r3, #0]
 801edd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edd6:	693b      	ldr	r3, [r7, #16]
 801edd8:	f383 8810 	msr	PRIMASK, r3
}
 801eddc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	681b      	ldr	r3, [r3, #0]
 801ede2:	69db      	ldr	r3, [r3, #28]
 801ede4:	2210      	movs	r2, #16
 801ede6:	4013      	ands	r3, r2
 801ede8:	2b10      	cmp	r3, #16
 801edea:	d103      	bne.n	801edf4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	2210      	movs	r2, #16
 801edf2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	22ac      	movs	r2, #172	@ 0xac
 801edf8:	589b      	ldr	r3, [r3, r2]
 801edfa:	687a      	ldr	r2, [r7, #4]
 801edfc:	2158      	movs	r1, #88	@ 0x58
 801edfe:	5a51      	ldrh	r1, [r2, r1]
 801ee00:	687a      	ldr	r2, [r7, #4]
 801ee02:	0010      	movs	r0, r2
 801ee04:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ee06:	e00e      	b.n	801ee26 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	2294      	movs	r2, #148	@ 0x94
 801ee0c:	589b      	ldr	r3, [r3, r2]
 801ee0e:	687a      	ldr	r2, [r7, #4]
 801ee10:	0010      	movs	r0, r2
 801ee12:	4798      	blx	r3
}
 801ee14:	e007      	b.n	801ee26 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	699a      	ldr	r2, [r3, #24]
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	2108      	movs	r1, #8
 801ee22:	430a      	orrs	r2, r1
 801ee24:	619a      	str	r2, [r3, #24]
}
 801ee26:	46c0      	nop			@ (mov r8, r8)
 801ee28:	46bd      	mov	sp, r7
 801ee2a:	b014      	add	sp, #80	@ 0x50
 801ee2c:	bd80      	pop	{r7, pc}
 801ee2e:	46c0      	nop			@ (mov r8, r8)
 801ee30:	fffffedf 	.word	0xfffffedf
 801ee34:	40004800 	.word	0x40004800
 801ee38:	fbffffff 	.word	0xfbffffff

0801ee3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ee3c:	b580      	push	{r7, lr}
 801ee3e:	b082      	sub	sp, #8
 801ee40:	af00      	add	r7, sp, #0
 801ee42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ee44:	46c0      	nop			@ (mov r8, r8)
 801ee46:	46bd      	mov	sp, r7
 801ee48:	b002      	add	sp, #8
 801ee4a:	bd80      	pop	{r7, pc}

0801ee4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801ee4c:	b580      	push	{r7, lr}
 801ee4e:	b084      	sub	sp, #16
 801ee50:	af00      	add	r7, sp, #0
 801ee52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	2244      	movs	r2, #68	@ 0x44
 801ee58:	2100      	movs	r1, #0
 801ee5a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ee5c:	4b05      	ldr	r3, [pc, #20]	@ (801ee74 <USB_EnableGlobalInt+0x28>)
 801ee5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801ee60:	68fb      	ldr	r3, [r7, #12]
 801ee62:	b299      	uxth	r1, r3
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	2240      	movs	r2, #64	@ 0x40
 801ee68:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ee6a:	2300      	movs	r3, #0
}
 801ee6c:	0018      	movs	r0, r3
 801ee6e:	46bd      	mov	sp, r7
 801ee70:	b004      	add	sp, #16
 801ee72:	bd80      	pop	{r7, pc}
 801ee74:	0000bf80 	.word	0x0000bf80

0801ee78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801ee78:	b580      	push	{r7, lr}
 801ee7a:	b084      	sub	sp, #16
 801ee7c:	af00      	add	r7, sp, #0
 801ee7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ee80:	4b09      	ldr	r3, [pc, #36]	@ (801eea8 <USB_DisableGlobalInt+0x30>)
 801ee82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	2240      	movs	r2, #64	@ 0x40
 801ee88:	5a9b      	ldrh	r3, [r3, r2]
 801ee8a:	b29b      	uxth	r3, r3
 801ee8c:	68fa      	ldr	r2, [r7, #12]
 801ee8e:	b292      	uxth	r2, r2
 801ee90:	43d2      	mvns	r2, r2
 801ee92:	b292      	uxth	r2, r2
 801ee94:	4013      	ands	r3, r2
 801ee96:	b299      	uxth	r1, r3
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	2240      	movs	r2, #64	@ 0x40
 801ee9c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ee9e:	2300      	movs	r3, #0
}
 801eea0:	0018      	movs	r0, r3
 801eea2:	46bd      	mov	sp, r7
 801eea4:	b004      	add	sp, #16
 801eea6:	bd80      	pop	{r7, pc}
 801eea8:	0000bf80 	.word	0x0000bf80

0801eeac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801eeac:	b084      	sub	sp, #16
 801eeae:	b590      	push	{r4, r7, lr}
 801eeb0:	b083      	sub	sp, #12
 801eeb2:	af00      	add	r7, sp, #0
 801eeb4:	6078      	str	r0, [r7, #4]
 801eeb6:	2004      	movs	r0, #4
 801eeb8:	2410      	movs	r4, #16
 801eeba:	1900      	adds	r0, r0, r4
 801eebc:	2408      	movs	r4, #8
 801eebe:	46a4      	mov	ip, r4
 801eec0:	44bc      	add	ip, r7
 801eec2:	4460      	add	r0, ip
 801eec4:	6001      	str	r1, [r0, #0]
 801eec6:	6042      	str	r2, [r0, #4]
 801eec8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	2240      	movs	r2, #64	@ 0x40
 801eece:	2101      	movs	r1, #1
 801eed0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	2240      	movs	r2, #64	@ 0x40
 801eed6:	2100      	movs	r1, #0
 801eed8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	2244      	movs	r2, #68	@ 0x44
 801eede:	2100      	movs	r1, #0
 801eee0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	2250      	movs	r2, #80	@ 0x50
 801eee6:	2100      	movs	r1, #0
 801eee8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801eeea:	2300      	movs	r3, #0
}
 801eeec:	0018      	movs	r0, r3
 801eeee:	46bd      	mov	sp, r7
 801eef0:	b003      	add	sp, #12
 801eef2:	bc90      	pop	{r4, r7}
 801eef4:	bc08      	pop	{r3}
 801eef6:	b004      	add	sp, #16
 801eef8:	4718      	bx	r3
	...

0801eefc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801eefc:	b580      	push	{r7, lr}
 801eefe:	b09c      	sub	sp, #112	@ 0x70
 801ef00:	af00      	add	r7, sp, #0
 801ef02:	6078      	str	r0, [r7, #4]
 801ef04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801ef06:	236f      	movs	r3, #111	@ 0x6f
 801ef08:	18fb      	adds	r3, r7, r3
 801ef0a:	2200      	movs	r2, #0
 801ef0c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801ef0e:	687a      	ldr	r2, [r7, #4]
 801ef10:	683b      	ldr	r3, [r7, #0]
 801ef12:	781b      	ldrb	r3, [r3, #0]
 801ef14:	009b      	lsls	r3, r3, #2
 801ef16:	18d3      	adds	r3, r2, r3
 801ef18:	881b      	ldrh	r3, [r3, #0]
 801ef1a:	b29a      	uxth	r2, r3
 801ef1c:	236c      	movs	r3, #108	@ 0x6c
 801ef1e:	18fb      	adds	r3, r7, r3
 801ef20:	49a3      	ldr	r1, [pc, #652]	@ (801f1b0 <USB_ActivateEndpoint+0x2b4>)
 801ef22:	400a      	ands	r2, r1
 801ef24:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801ef26:	683b      	ldr	r3, [r7, #0]
 801ef28:	78db      	ldrb	r3, [r3, #3]
 801ef2a:	2b03      	cmp	r3, #3
 801ef2c:	d017      	beq.n	801ef5e <USB_ActivateEndpoint+0x62>
 801ef2e:	dc28      	bgt.n	801ef82 <USB_ActivateEndpoint+0x86>
 801ef30:	2b02      	cmp	r3, #2
 801ef32:	d00e      	beq.n	801ef52 <USB_ActivateEndpoint+0x56>
 801ef34:	dc25      	bgt.n	801ef82 <USB_ActivateEndpoint+0x86>
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d002      	beq.n	801ef40 <USB_ActivateEndpoint+0x44>
 801ef3a:	2b01      	cmp	r3, #1
 801ef3c:	d018      	beq.n	801ef70 <USB_ActivateEndpoint+0x74>
 801ef3e:	e020      	b.n	801ef82 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801ef40:	226c      	movs	r2, #108	@ 0x6c
 801ef42:	18bb      	adds	r3, r7, r2
 801ef44:	18ba      	adds	r2, r7, r2
 801ef46:	8812      	ldrh	r2, [r2, #0]
 801ef48:	2180      	movs	r1, #128	@ 0x80
 801ef4a:	0089      	lsls	r1, r1, #2
 801ef4c:	430a      	orrs	r2, r1
 801ef4e:	801a      	strh	r2, [r3, #0]
      break;
 801ef50:	e01c      	b.n	801ef8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801ef52:	226c      	movs	r2, #108	@ 0x6c
 801ef54:	18bb      	adds	r3, r7, r2
 801ef56:	18ba      	adds	r2, r7, r2
 801ef58:	8812      	ldrh	r2, [r2, #0]
 801ef5a:	801a      	strh	r2, [r3, #0]
      break;
 801ef5c:	e016      	b.n	801ef8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801ef5e:	226c      	movs	r2, #108	@ 0x6c
 801ef60:	18bb      	adds	r3, r7, r2
 801ef62:	18ba      	adds	r2, r7, r2
 801ef64:	8812      	ldrh	r2, [r2, #0]
 801ef66:	21c0      	movs	r1, #192	@ 0xc0
 801ef68:	00c9      	lsls	r1, r1, #3
 801ef6a:	430a      	orrs	r2, r1
 801ef6c:	801a      	strh	r2, [r3, #0]
      break;
 801ef6e:	e00d      	b.n	801ef8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801ef70:	226c      	movs	r2, #108	@ 0x6c
 801ef72:	18bb      	adds	r3, r7, r2
 801ef74:	18ba      	adds	r2, r7, r2
 801ef76:	8812      	ldrh	r2, [r2, #0]
 801ef78:	2180      	movs	r1, #128	@ 0x80
 801ef7a:	00c9      	lsls	r1, r1, #3
 801ef7c:	430a      	orrs	r2, r1
 801ef7e:	801a      	strh	r2, [r3, #0]
      break;
 801ef80:	e004      	b.n	801ef8c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801ef82:	236f      	movs	r3, #111	@ 0x6f
 801ef84:	18fb      	adds	r3, r7, r3
 801ef86:	2201      	movs	r2, #1
 801ef88:	701a      	strb	r2, [r3, #0]
      break;
 801ef8a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801ef8c:	687a      	ldr	r2, [r7, #4]
 801ef8e:	683b      	ldr	r3, [r7, #0]
 801ef90:	781b      	ldrb	r3, [r3, #0]
 801ef92:	009b      	lsls	r3, r3, #2
 801ef94:	18d3      	adds	r3, r2, r3
 801ef96:	226c      	movs	r2, #108	@ 0x6c
 801ef98:	18ba      	adds	r2, r7, r2
 801ef9a:	8812      	ldrh	r2, [r2, #0]
 801ef9c:	4985      	ldr	r1, [pc, #532]	@ (801f1b4 <USB_ActivateEndpoint+0x2b8>)
 801ef9e:	430a      	orrs	r2, r1
 801efa0:	b292      	uxth	r2, r2
 801efa2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801efa4:	687a      	ldr	r2, [r7, #4]
 801efa6:	683b      	ldr	r3, [r7, #0]
 801efa8:	781b      	ldrb	r3, [r3, #0]
 801efaa:	009b      	lsls	r3, r3, #2
 801efac:	18d3      	adds	r3, r2, r3
 801efae:	881b      	ldrh	r3, [r3, #0]
 801efb0:	b29b      	uxth	r3, r3
 801efb2:	b21b      	sxth	r3, r3
 801efb4:	4a80      	ldr	r2, [pc, #512]	@ (801f1b8 <USB_ActivateEndpoint+0x2bc>)
 801efb6:	4013      	ands	r3, r2
 801efb8:	b21a      	sxth	r2, r3
 801efba:	683b      	ldr	r3, [r7, #0]
 801efbc:	781b      	ldrb	r3, [r3, #0]
 801efbe:	b21b      	sxth	r3, r3
 801efc0:	4313      	orrs	r3, r2
 801efc2:	b21a      	sxth	r2, r3
 801efc4:	2166      	movs	r1, #102	@ 0x66
 801efc6:	187b      	adds	r3, r7, r1
 801efc8:	801a      	strh	r2, [r3, #0]
 801efca:	687a      	ldr	r2, [r7, #4]
 801efcc:	683b      	ldr	r3, [r7, #0]
 801efce:	781b      	ldrb	r3, [r3, #0]
 801efd0:	009b      	lsls	r3, r3, #2
 801efd2:	18d3      	adds	r3, r2, r3
 801efd4:	187a      	adds	r2, r7, r1
 801efd6:	8812      	ldrh	r2, [r2, #0]
 801efd8:	4976      	ldr	r1, [pc, #472]	@ (801f1b4 <USB_ActivateEndpoint+0x2b8>)
 801efda:	430a      	orrs	r2, r1
 801efdc:	b292      	uxth	r2, r2
 801efde:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801efe0:	683b      	ldr	r3, [r7, #0]
 801efe2:	7b1b      	ldrb	r3, [r3, #12]
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	d000      	beq.n	801efea <USB_ActivateEndpoint+0xee>
 801efe8:	e178      	b.n	801f2dc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	785b      	ldrb	r3, [r3, #1]
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d100      	bne.n	801eff4 <USB_ActivateEndpoint+0xf8>
 801eff2:	e07a      	b.n	801f0ea <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	61bb      	str	r3, [r7, #24]
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	2250      	movs	r2, #80	@ 0x50
 801effc:	5a9b      	ldrh	r3, [r3, r2]
 801effe:	b29b      	uxth	r3, r3
 801f000:	001a      	movs	r2, r3
 801f002:	69bb      	ldr	r3, [r7, #24]
 801f004:	189b      	adds	r3, r3, r2
 801f006:	61bb      	str	r3, [r7, #24]
 801f008:	683b      	ldr	r3, [r7, #0]
 801f00a:	781b      	ldrb	r3, [r3, #0]
 801f00c:	00da      	lsls	r2, r3, #3
 801f00e:	69bb      	ldr	r3, [r7, #24]
 801f010:	18d3      	adds	r3, r2, r3
 801f012:	2280      	movs	r2, #128	@ 0x80
 801f014:	00d2      	lsls	r2, r2, #3
 801f016:	4694      	mov	ip, r2
 801f018:	4463      	add	r3, ip
 801f01a:	617b      	str	r3, [r7, #20]
 801f01c:	683b      	ldr	r3, [r7, #0]
 801f01e:	88db      	ldrh	r3, [r3, #6]
 801f020:	085b      	lsrs	r3, r3, #1
 801f022:	b29b      	uxth	r3, r3
 801f024:	18db      	adds	r3, r3, r3
 801f026:	b29a      	uxth	r2, r3
 801f028:	697b      	ldr	r3, [r7, #20]
 801f02a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f02c:	687a      	ldr	r2, [r7, #4]
 801f02e:	683b      	ldr	r3, [r7, #0]
 801f030:	781b      	ldrb	r3, [r3, #0]
 801f032:	009b      	lsls	r3, r3, #2
 801f034:	18d2      	adds	r2, r2, r3
 801f036:	2112      	movs	r1, #18
 801f038:	187b      	adds	r3, r7, r1
 801f03a:	8812      	ldrh	r2, [r2, #0]
 801f03c:	801a      	strh	r2, [r3, #0]
 801f03e:	187b      	adds	r3, r7, r1
 801f040:	881b      	ldrh	r3, [r3, #0]
 801f042:	2240      	movs	r2, #64	@ 0x40
 801f044:	4013      	ands	r3, r2
 801f046:	d016      	beq.n	801f076 <USB_ActivateEndpoint+0x17a>
 801f048:	687a      	ldr	r2, [r7, #4]
 801f04a:	683b      	ldr	r3, [r7, #0]
 801f04c:	781b      	ldrb	r3, [r3, #0]
 801f04e:	009b      	lsls	r3, r3, #2
 801f050:	18d3      	adds	r3, r2, r3
 801f052:	881b      	ldrh	r3, [r3, #0]
 801f054:	b29a      	uxth	r2, r3
 801f056:	2010      	movs	r0, #16
 801f058:	183b      	adds	r3, r7, r0
 801f05a:	4957      	ldr	r1, [pc, #348]	@ (801f1b8 <USB_ActivateEndpoint+0x2bc>)
 801f05c:	400a      	ands	r2, r1
 801f05e:	801a      	strh	r2, [r3, #0]
 801f060:	687a      	ldr	r2, [r7, #4]
 801f062:	683b      	ldr	r3, [r7, #0]
 801f064:	781b      	ldrb	r3, [r3, #0]
 801f066:	009b      	lsls	r3, r3, #2
 801f068:	18d3      	adds	r3, r2, r3
 801f06a:	183a      	adds	r2, r7, r0
 801f06c:	8812      	ldrh	r2, [r2, #0]
 801f06e:	4953      	ldr	r1, [pc, #332]	@ (801f1bc <USB_ActivateEndpoint+0x2c0>)
 801f070:	430a      	orrs	r2, r1
 801f072:	b292      	uxth	r2, r2
 801f074:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f076:	683b      	ldr	r3, [r7, #0]
 801f078:	78db      	ldrb	r3, [r3, #3]
 801f07a:	2b01      	cmp	r3, #1
 801f07c:	d01d      	beq.n	801f0ba <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f07e:	687a      	ldr	r2, [r7, #4]
 801f080:	683b      	ldr	r3, [r7, #0]
 801f082:	781b      	ldrb	r3, [r3, #0]
 801f084:	009b      	lsls	r3, r3, #2
 801f086:	18d3      	adds	r3, r2, r3
 801f088:	881b      	ldrh	r3, [r3, #0]
 801f08a:	b29a      	uxth	r2, r3
 801f08c:	200c      	movs	r0, #12
 801f08e:	183b      	adds	r3, r7, r0
 801f090:	494b      	ldr	r1, [pc, #300]	@ (801f1c0 <USB_ActivateEndpoint+0x2c4>)
 801f092:	400a      	ands	r2, r1
 801f094:	801a      	strh	r2, [r3, #0]
 801f096:	183b      	adds	r3, r7, r0
 801f098:	183a      	adds	r2, r7, r0
 801f09a:	8812      	ldrh	r2, [r2, #0]
 801f09c:	2120      	movs	r1, #32
 801f09e:	404a      	eors	r2, r1
 801f0a0:	801a      	strh	r2, [r3, #0]
 801f0a2:	687a      	ldr	r2, [r7, #4]
 801f0a4:	683b      	ldr	r3, [r7, #0]
 801f0a6:	781b      	ldrb	r3, [r3, #0]
 801f0a8:	009b      	lsls	r3, r3, #2
 801f0aa:	18d3      	adds	r3, r2, r3
 801f0ac:	183a      	adds	r2, r7, r0
 801f0ae:	8812      	ldrh	r2, [r2, #0]
 801f0b0:	4940      	ldr	r1, [pc, #256]	@ (801f1b4 <USB_ActivateEndpoint+0x2b8>)
 801f0b2:	430a      	orrs	r2, r1
 801f0b4:	b292      	uxth	r2, r2
 801f0b6:	801a      	strh	r2, [r3, #0]
 801f0b8:	e2b4      	b.n	801f624 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f0ba:	687a      	ldr	r2, [r7, #4]
 801f0bc:	683b      	ldr	r3, [r7, #0]
 801f0be:	781b      	ldrb	r3, [r3, #0]
 801f0c0:	009b      	lsls	r3, r3, #2
 801f0c2:	18d3      	adds	r3, r2, r3
 801f0c4:	881b      	ldrh	r3, [r3, #0]
 801f0c6:	b29a      	uxth	r2, r3
 801f0c8:	200e      	movs	r0, #14
 801f0ca:	183b      	adds	r3, r7, r0
 801f0cc:	493c      	ldr	r1, [pc, #240]	@ (801f1c0 <USB_ActivateEndpoint+0x2c4>)
 801f0ce:	400a      	ands	r2, r1
 801f0d0:	801a      	strh	r2, [r3, #0]
 801f0d2:	687a      	ldr	r2, [r7, #4]
 801f0d4:	683b      	ldr	r3, [r7, #0]
 801f0d6:	781b      	ldrb	r3, [r3, #0]
 801f0d8:	009b      	lsls	r3, r3, #2
 801f0da:	18d3      	adds	r3, r2, r3
 801f0dc:	183a      	adds	r2, r7, r0
 801f0de:	8812      	ldrh	r2, [r2, #0]
 801f0e0:	4934      	ldr	r1, [pc, #208]	@ (801f1b4 <USB_ActivateEndpoint+0x2b8>)
 801f0e2:	430a      	orrs	r2, r1
 801f0e4:	b292      	uxth	r2, r2
 801f0e6:	801a      	strh	r2, [r3, #0]
 801f0e8:	e29c      	b.n	801f624 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	633b      	str	r3, [r7, #48]	@ 0x30
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	2250      	movs	r2, #80	@ 0x50
 801f0f2:	5a9b      	ldrh	r3, [r3, r2]
 801f0f4:	b29b      	uxth	r3, r3
 801f0f6:	001a      	movs	r2, r3
 801f0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0fa:	189b      	adds	r3, r3, r2
 801f0fc:	633b      	str	r3, [r7, #48]	@ 0x30
 801f0fe:	683b      	ldr	r3, [r7, #0]
 801f100:	781b      	ldrb	r3, [r3, #0]
 801f102:	00da      	lsls	r2, r3, #3
 801f104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f106:	18d3      	adds	r3, r2, r3
 801f108:	4a2e      	ldr	r2, [pc, #184]	@ (801f1c4 <USB_ActivateEndpoint+0x2c8>)
 801f10a:	4694      	mov	ip, r2
 801f10c:	4463      	add	r3, ip
 801f10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f110:	683b      	ldr	r3, [r7, #0]
 801f112:	88db      	ldrh	r3, [r3, #6]
 801f114:	085b      	lsrs	r3, r3, #1
 801f116:	b29b      	uxth	r3, r3
 801f118:	18db      	adds	r3, r3, r3
 801f11a:	b29a      	uxth	r2, r3
 801f11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f11e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	2250      	movs	r2, #80	@ 0x50
 801f128:	5a9b      	ldrh	r3, [r3, r2]
 801f12a:	b29b      	uxth	r3, r3
 801f12c:	001a      	movs	r2, r3
 801f12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f130:	189b      	adds	r3, r3, r2
 801f132:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f134:	683b      	ldr	r3, [r7, #0]
 801f136:	781b      	ldrb	r3, [r3, #0]
 801f138:	00da      	lsls	r2, r3, #3
 801f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f13c:	18d3      	adds	r3, r2, r3
 801f13e:	4a22      	ldr	r2, [pc, #136]	@ (801f1c8 <USB_ActivateEndpoint+0x2cc>)
 801f140:	4694      	mov	ip, r2
 801f142:	4463      	add	r3, ip
 801f144:	627b      	str	r3, [r7, #36]	@ 0x24
 801f146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f148:	881b      	ldrh	r3, [r3, #0]
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	059b      	lsls	r3, r3, #22
 801f14e:	0d9b      	lsrs	r3, r3, #22
 801f150:	b29a      	uxth	r2, r3
 801f152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f154:	801a      	strh	r2, [r3, #0]
 801f156:	683b      	ldr	r3, [r7, #0]
 801f158:	691b      	ldr	r3, [r3, #16]
 801f15a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f15c:	d91a      	bls.n	801f194 <USB_ActivateEndpoint+0x298>
 801f15e:	683b      	ldr	r3, [r7, #0]
 801f160:	691b      	ldr	r3, [r3, #16]
 801f162:	095b      	lsrs	r3, r3, #5
 801f164:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f166:	683b      	ldr	r3, [r7, #0]
 801f168:	691b      	ldr	r3, [r3, #16]
 801f16a:	221f      	movs	r2, #31
 801f16c:	4013      	ands	r3, r2
 801f16e:	d102      	bne.n	801f176 <USB_ActivateEndpoint+0x27a>
 801f170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f172:	3b01      	subs	r3, #1
 801f174:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f178:	881b      	ldrh	r3, [r3, #0]
 801f17a:	b29a      	uxth	r2, r3
 801f17c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f17e:	b29b      	uxth	r3, r3
 801f180:	029b      	lsls	r3, r3, #10
 801f182:	b29b      	uxth	r3, r3
 801f184:	4313      	orrs	r3, r2
 801f186:	b29b      	uxth	r3, r3
 801f188:	4a10      	ldr	r2, [pc, #64]	@ (801f1cc <USB_ActivateEndpoint+0x2d0>)
 801f18a:	4313      	orrs	r3, r2
 801f18c:	b29a      	uxth	r2, r3
 801f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f190:	801a      	strh	r2, [r3, #0]
 801f192:	e034      	b.n	801f1fe <USB_ActivateEndpoint+0x302>
 801f194:	683b      	ldr	r3, [r7, #0]
 801f196:	691b      	ldr	r3, [r3, #16]
 801f198:	2b00      	cmp	r3, #0
 801f19a:	d119      	bne.n	801f1d0 <USB_ActivateEndpoint+0x2d4>
 801f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f19e:	881b      	ldrh	r3, [r3, #0]
 801f1a0:	b29b      	uxth	r3, r3
 801f1a2:	4a0a      	ldr	r2, [pc, #40]	@ (801f1cc <USB_ActivateEndpoint+0x2d0>)
 801f1a4:	4313      	orrs	r3, r2
 801f1a6:	b29a      	uxth	r2, r3
 801f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1aa:	801a      	strh	r2, [r3, #0]
 801f1ac:	e027      	b.n	801f1fe <USB_ActivateEndpoint+0x302>
 801f1ae:	46c0      	nop			@ (mov r8, r8)
 801f1b0:	ffff898f 	.word	0xffff898f
 801f1b4:	ffff8080 	.word	0xffff8080
 801f1b8:	ffff8f8f 	.word	0xffff8f8f
 801f1bc:	ffff80c0 	.word	0xffff80c0
 801f1c0:	ffff8fbf 	.word	0xffff8fbf
 801f1c4:	00000404 	.word	0x00000404
 801f1c8:	00000406 	.word	0x00000406
 801f1cc:	ffff8000 	.word	0xffff8000
 801f1d0:	683b      	ldr	r3, [r7, #0]
 801f1d2:	691b      	ldr	r3, [r3, #16]
 801f1d4:	085b      	lsrs	r3, r3, #1
 801f1d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f1d8:	683b      	ldr	r3, [r7, #0]
 801f1da:	691b      	ldr	r3, [r3, #16]
 801f1dc:	2201      	movs	r2, #1
 801f1de:	4013      	ands	r3, r2
 801f1e0:	d002      	beq.n	801f1e8 <USB_ActivateEndpoint+0x2ec>
 801f1e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f1e4:	3301      	adds	r3, #1
 801f1e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1ea:	881b      	ldrh	r3, [r3, #0]
 801f1ec:	b29a      	uxth	r2, r3
 801f1ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f1f0:	b29b      	uxth	r3, r3
 801f1f2:	029b      	lsls	r3, r3, #10
 801f1f4:	b29b      	uxth	r3, r3
 801f1f6:	4313      	orrs	r3, r2
 801f1f8:	b29a      	uxth	r2, r3
 801f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f1fe:	687a      	ldr	r2, [r7, #4]
 801f200:	683b      	ldr	r3, [r7, #0]
 801f202:	781b      	ldrb	r3, [r3, #0]
 801f204:	009b      	lsls	r3, r3, #2
 801f206:	18d2      	adds	r2, r2, r3
 801f208:	2122      	movs	r1, #34	@ 0x22
 801f20a:	187b      	adds	r3, r7, r1
 801f20c:	8812      	ldrh	r2, [r2, #0]
 801f20e:	801a      	strh	r2, [r3, #0]
 801f210:	187b      	adds	r3, r7, r1
 801f212:	881a      	ldrh	r2, [r3, #0]
 801f214:	2380      	movs	r3, #128	@ 0x80
 801f216:	01db      	lsls	r3, r3, #7
 801f218:	4013      	ands	r3, r2
 801f21a:	d016      	beq.n	801f24a <USB_ActivateEndpoint+0x34e>
 801f21c:	687a      	ldr	r2, [r7, #4]
 801f21e:	683b      	ldr	r3, [r7, #0]
 801f220:	781b      	ldrb	r3, [r3, #0]
 801f222:	009b      	lsls	r3, r3, #2
 801f224:	18d3      	adds	r3, r2, r3
 801f226:	881b      	ldrh	r3, [r3, #0]
 801f228:	b29a      	uxth	r2, r3
 801f22a:	2020      	movs	r0, #32
 801f22c:	183b      	adds	r3, r7, r0
 801f22e:	49dd      	ldr	r1, [pc, #884]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f230:	400a      	ands	r2, r1
 801f232:	801a      	strh	r2, [r3, #0]
 801f234:	687a      	ldr	r2, [r7, #4]
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	781b      	ldrb	r3, [r3, #0]
 801f23a:	009b      	lsls	r3, r3, #2
 801f23c:	18d3      	adds	r3, r2, r3
 801f23e:	183a      	adds	r2, r7, r0
 801f240:	8812      	ldrh	r2, [r2, #0]
 801f242:	49d9      	ldr	r1, [pc, #868]	@ (801f5a8 <USB_ActivateEndpoint+0x6ac>)
 801f244:	430a      	orrs	r2, r1
 801f246:	b292      	uxth	r2, r2
 801f248:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	781b      	ldrb	r3, [r3, #0]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d125      	bne.n	801f29e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f252:	687a      	ldr	r2, [r7, #4]
 801f254:	683b      	ldr	r3, [r7, #0]
 801f256:	781b      	ldrb	r3, [r3, #0]
 801f258:	009b      	lsls	r3, r3, #2
 801f25a:	18d3      	adds	r3, r2, r3
 801f25c:	881b      	ldrh	r3, [r3, #0]
 801f25e:	b29a      	uxth	r2, r3
 801f260:	201c      	movs	r0, #28
 801f262:	183b      	adds	r3, r7, r0
 801f264:	49d1      	ldr	r1, [pc, #836]	@ (801f5ac <USB_ActivateEndpoint+0x6b0>)
 801f266:	400a      	ands	r2, r1
 801f268:	801a      	strh	r2, [r3, #0]
 801f26a:	183b      	adds	r3, r7, r0
 801f26c:	183a      	adds	r2, r7, r0
 801f26e:	8812      	ldrh	r2, [r2, #0]
 801f270:	2180      	movs	r1, #128	@ 0x80
 801f272:	0149      	lsls	r1, r1, #5
 801f274:	404a      	eors	r2, r1
 801f276:	801a      	strh	r2, [r3, #0]
 801f278:	183b      	adds	r3, r7, r0
 801f27a:	183a      	adds	r2, r7, r0
 801f27c:	8812      	ldrh	r2, [r2, #0]
 801f27e:	2180      	movs	r1, #128	@ 0x80
 801f280:	0189      	lsls	r1, r1, #6
 801f282:	404a      	eors	r2, r1
 801f284:	801a      	strh	r2, [r3, #0]
 801f286:	687a      	ldr	r2, [r7, #4]
 801f288:	683b      	ldr	r3, [r7, #0]
 801f28a:	781b      	ldrb	r3, [r3, #0]
 801f28c:	009b      	lsls	r3, r3, #2
 801f28e:	18d3      	adds	r3, r2, r3
 801f290:	183a      	adds	r2, r7, r0
 801f292:	8812      	ldrh	r2, [r2, #0]
 801f294:	49c6      	ldr	r1, [pc, #792]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f296:	430a      	orrs	r2, r1
 801f298:	b292      	uxth	r2, r2
 801f29a:	801a      	strh	r2, [r3, #0]
 801f29c:	e1c2      	b.n	801f624 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f29e:	687a      	ldr	r2, [r7, #4]
 801f2a0:	683b      	ldr	r3, [r7, #0]
 801f2a2:	781b      	ldrb	r3, [r3, #0]
 801f2a4:	009b      	lsls	r3, r3, #2
 801f2a6:	18d3      	adds	r3, r2, r3
 801f2a8:	881b      	ldrh	r3, [r3, #0]
 801f2aa:	b29a      	uxth	r2, r3
 801f2ac:	201e      	movs	r0, #30
 801f2ae:	183b      	adds	r3, r7, r0
 801f2b0:	49be      	ldr	r1, [pc, #760]	@ (801f5ac <USB_ActivateEndpoint+0x6b0>)
 801f2b2:	400a      	ands	r2, r1
 801f2b4:	801a      	strh	r2, [r3, #0]
 801f2b6:	183b      	adds	r3, r7, r0
 801f2b8:	183a      	adds	r2, r7, r0
 801f2ba:	8812      	ldrh	r2, [r2, #0]
 801f2bc:	2180      	movs	r1, #128	@ 0x80
 801f2be:	0189      	lsls	r1, r1, #6
 801f2c0:	404a      	eors	r2, r1
 801f2c2:	801a      	strh	r2, [r3, #0]
 801f2c4:	687a      	ldr	r2, [r7, #4]
 801f2c6:	683b      	ldr	r3, [r7, #0]
 801f2c8:	781b      	ldrb	r3, [r3, #0]
 801f2ca:	009b      	lsls	r3, r3, #2
 801f2cc:	18d3      	adds	r3, r2, r3
 801f2ce:	183a      	adds	r2, r7, r0
 801f2d0:	8812      	ldrh	r2, [r2, #0]
 801f2d2:	49b7      	ldr	r1, [pc, #732]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f2d4:	430a      	orrs	r2, r1
 801f2d6:	b292      	uxth	r2, r2
 801f2d8:	801a      	strh	r2, [r3, #0]
 801f2da:	e1a3      	b.n	801f624 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f2dc:	683b      	ldr	r3, [r7, #0]
 801f2de:	78db      	ldrb	r3, [r3, #3]
 801f2e0:	2b02      	cmp	r3, #2
 801f2e2:	d117      	bne.n	801f314 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f2e4:	687a      	ldr	r2, [r7, #4]
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	781b      	ldrb	r3, [r3, #0]
 801f2ea:	009b      	lsls	r3, r3, #2
 801f2ec:	18d3      	adds	r3, r2, r3
 801f2ee:	881b      	ldrh	r3, [r3, #0]
 801f2f0:	b29a      	uxth	r2, r3
 801f2f2:	2062      	movs	r0, #98	@ 0x62
 801f2f4:	183b      	adds	r3, r7, r0
 801f2f6:	49ab      	ldr	r1, [pc, #684]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f2f8:	400a      	ands	r2, r1
 801f2fa:	801a      	strh	r2, [r3, #0]
 801f2fc:	687a      	ldr	r2, [r7, #4]
 801f2fe:	683b      	ldr	r3, [r7, #0]
 801f300:	781b      	ldrb	r3, [r3, #0]
 801f302:	009b      	lsls	r3, r3, #2
 801f304:	18d3      	adds	r3, r2, r3
 801f306:	183a      	adds	r2, r7, r0
 801f308:	8812      	ldrh	r2, [r2, #0]
 801f30a:	49aa      	ldr	r1, [pc, #680]	@ (801f5b4 <USB_ActivateEndpoint+0x6b8>)
 801f30c:	430a      	orrs	r2, r1
 801f30e:	b292      	uxth	r2, r2
 801f310:	801a      	strh	r2, [r3, #0]
 801f312:	e016      	b.n	801f342 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f314:	687a      	ldr	r2, [r7, #4]
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	781b      	ldrb	r3, [r3, #0]
 801f31a:	009b      	lsls	r3, r3, #2
 801f31c:	18d3      	adds	r3, r2, r3
 801f31e:	881b      	ldrh	r3, [r3, #0]
 801f320:	b29a      	uxth	r2, r3
 801f322:	2064      	movs	r0, #100	@ 0x64
 801f324:	183b      	adds	r3, r7, r0
 801f326:	49a4      	ldr	r1, [pc, #656]	@ (801f5b8 <USB_ActivateEndpoint+0x6bc>)
 801f328:	400a      	ands	r2, r1
 801f32a:	801a      	strh	r2, [r3, #0]
 801f32c:	687a      	ldr	r2, [r7, #4]
 801f32e:	683b      	ldr	r3, [r7, #0]
 801f330:	781b      	ldrb	r3, [r3, #0]
 801f332:	009b      	lsls	r3, r3, #2
 801f334:	18d3      	adds	r3, r2, r3
 801f336:	183a      	adds	r2, r7, r0
 801f338:	8812      	ldrh	r2, [r2, #0]
 801f33a:	499d      	ldr	r1, [pc, #628]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f33c:	430a      	orrs	r2, r1
 801f33e:	b292      	uxth	r2, r2
 801f340:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	2250      	movs	r2, #80	@ 0x50
 801f34a:	5a9b      	ldrh	r3, [r3, r2]
 801f34c:	b29b      	uxth	r3, r3
 801f34e:	001a      	movs	r2, r3
 801f350:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f352:	189b      	adds	r3, r3, r2
 801f354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f356:	683b      	ldr	r3, [r7, #0]
 801f358:	781b      	ldrb	r3, [r3, #0]
 801f35a:	00da      	lsls	r2, r3, #3
 801f35c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f35e:	18d3      	adds	r3, r2, r3
 801f360:	2280      	movs	r2, #128	@ 0x80
 801f362:	00d2      	lsls	r2, r2, #3
 801f364:	4694      	mov	ip, r2
 801f366:	4463      	add	r3, ip
 801f368:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f36a:	683b      	ldr	r3, [r7, #0]
 801f36c:	891b      	ldrh	r3, [r3, #8]
 801f36e:	085b      	lsrs	r3, r3, #1
 801f370:	b29b      	uxth	r3, r3
 801f372:	18db      	adds	r3, r3, r3
 801f374:	b29a      	uxth	r2, r3
 801f376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f378:	801a      	strh	r2, [r3, #0]
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	2250      	movs	r2, #80	@ 0x50
 801f382:	5a9b      	ldrh	r3, [r3, r2]
 801f384:	b29b      	uxth	r3, r3
 801f386:	001a      	movs	r2, r3
 801f388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f38a:	189b      	adds	r3, r3, r2
 801f38c:	657b      	str	r3, [r7, #84]	@ 0x54
 801f38e:	683b      	ldr	r3, [r7, #0]
 801f390:	781b      	ldrb	r3, [r3, #0]
 801f392:	00da      	lsls	r2, r3, #3
 801f394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f396:	18d3      	adds	r3, r2, r3
 801f398:	4a88      	ldr	r2, [pc, #544]	@ (801f5bc <USB_ActivateEndpoint+0x6c0>)
 801f39a:	4694      	mov	ip, r2
 801f39c:	4463      	add	r3, ip
 801f39e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f3a0:	683b      	ldr	r3, [r7, #0]
 801f3a2:	895b      	ldrh	r3, [r3, #10]
 801f3a4:	085b      	lsrs	r3, r3, #1
 801f3a6:	b29b      	uxth	r3, r3
 801f3a8:	18db      	adds	r3, r3, r3
 801f3aa:	b29a      	uxth	r2, r3
 801f3ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f3ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f3b0:	683b      	ldr	r3, [r7, #0]
 801f3b2:	785b      	ldrb	r3, [r3, #1]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d000      	beq.n	801f3ba <USB_ActivateEndpoint+0x4be>
 801f3b8:	e087      	b.n	801f4ca <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f3ba:	687a      	ldr	r2, [r7, #4]
 801f3bc:	683b      	ldr	r3, [r7, #0]
 801f3be:	781b      	ldrb	r3, [r3, #0]
 801f3c0:	009b      	lsls	r3, r3, #2
 801f3c2:	18d2      	adds	r2, r2, r3
 801f3c4:	2140      	movs	r1, #64	@ 0x40
 801f3c6:	187b      	adds	r3, r7, r1
 801f3c8:	8812      	ldrh	r2, [r2, #0]
 801f3ca:	801a      	strh	r2, [r3, #0]
 801f3cc:	187b      	adds	r3, r7, r1
 801f3ce:	881a      	ldrh	r2, [r3, #0]
 801f3d0:	2380      	movs	r3, #128	@ 0x80
 801f3d2:	01db      	lsls	r3, r3, #7
 801f3d4:	4013      	ands	r3, r2
 801f3d6:	d016      	beq.n	801f406 <USB_ActivateEndpoint+0x50a>
 801f3d8:	687a      	ldr	r2, [r7, #4]
 801f3da:	683b      	ldr	r3, [r7, #0]
 801f3dc:	781b      	ldrb	r3, [r3, #0]
 801f3de:	009b      	lsls	r3, r3, #2
 801f3e0:	18d3      	adds	r3, r2, r3
 801f3e2:	881b      	ldrh	r3, [r3, #0]
 801f3e4:	b29a      	uxth	r2, r3
 801f3e6:	203e      	movs	r0, #62	@ 0x3e
 801f3e8:	183b      	adds	r3, r7, r0
 801f3ea:	496e      	ldr	r1, [pc, #440]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f3ec:	400a      	ands	r2, r1
 801f3ee:	801a      	strh	r2, [r3, #0]
 801f3f0:	687a      	ldr	r2, [r7, #4]
 801f3f2:	683b      	ldr	r3, [r7, #0]
 801f3f4:	781b      	ldrb	r3, [r3, #0]
 801f3f6:	009b      	lsls	r3, r3, #2
 801f3f8:	18d3      	adds	r3, r2, r3
 801f3fa:	183a      	adds	r2, r7, r0
 801f3fc:	8812      	ldrh	r2, [r2, #0]
 801f3fe:	496a      	ldr	r1, [pc, #424]	@ (801f5a8 <USB_ActivateEndpoint+0x6ac>)
 801f400:	430a      	orrs	r2, r1
 801f402:	b292      	uxth	r2, r2
 801f404:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f406:	687a      	ldr	r2, [r7, #4]
 801f408:	683b      	ldr	r3, [r7, #0]
 801f40a:	781b      	ldrb	r3, [r3, #0]
 801f40c:	009b      	lsls	r3, r3, #2
 801f40e:	18d2      	adds	r2, r2, r3
 801f410:	213c      	movs	r1, #60	@ 0x3c
 801f412:	187b      	adds	r3, r7, r1
 801f414:	8812      	ldrh	r2, [r2, #0]
 801f416:	801a      	strh	r2, [r3, #0]
 801f418:	187b      	adds	r3, r7, r1
 801f41a:	881b      	ldrh	r3, [r3, #0]
 801f41c:	2240      	movs	r2, #64	@ 0x40
 801f41e:	4013      	ands	r3, r2
 801f420:	d016      	beq.n	801f450 <USB_ActivateEndpoint+0x554>
 801f422:	687a      	ldr	r2, [r7, #4]
 801f424:	683b      	ldr	r3, [r7, #0]
 801f426:	781b      	ldrb	r3, [r3, #0]
 801f428:	009b      	lsls	r3, r3, #2
 801f42a:	18d3      	adds	r3, r2, r3
 801f42c:	881b      	ldrh	r3, [r3, #0]
 801f42e:	b29a      	uxth	r2, r3
 801f430:	203a      	movs	r0, #58	@ 0x3a
 801f432:	183b      	adds	r3, r7, r0
 801f434:	495b      	ldr	r1, [pc, #364]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f436:	400a      	ands	r2, r1
 801f438:	801a      	strh	r2, [r3, #0]
 801f43a:	687a      	ldr	r2, [r7, #4]
 801f43c:	683b      	ldr	r3, [r7, #0]
 801f43e:	781b      	ldrb	r3, [r3, #0]
 801f440:	009b      	lsls	r3, r3, #2
 801f442:	18d3      	adds	r3, r2, r3
 801f444:	183a      	adds	r2, r7, r0
 801f446:	8812      	ldrh	r2, [r2, #0]
 801f448:	495d      	ldr	r1, [pc, #372]	@ (801f5c0 <USB_ActivateEndpoint+0x6c4>)
 801f44a:	430a      	orrs	r2, r1
 801f44c:	b292      	uxth	r2, r2
 801f44e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f450:	687a      	ldr	r2, [r7, #4]
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	781b      	ldrb	r3, [r3, #0]
 801f456:	009b      	lsls	r3, r3, #2
 801f458:	18d3      	adds	r3, r2, r3
 801f45a:	881b      	ldrh	r3, [r3, #0]
 801f45c:	b29a      	uxth	r2, r3
 801f45e:	2038      	movs	r0, #56	@ 0x38
 801f460:	183b      	adds	r3, r7, r0
 801f462:	4952      	ldr	r1, [pc, #328]	@ (801f5ac <USB_ActivateEndpoint+0x6b0>)
 801f464:	400a      	ands	r2, r1
 801f466:	801a      	strh	r2, [r3, #0]
 801f468:	183b      	adds	r3, r7, r0
 801f46a:	183a      	adds	r2, r7, r0
 801f46c:	8812      	ldrh	r2, [r2, #0]
 801f46e:	2180      	movs	r1, #128	@ 0x80
 801f470:	0149      	lsls	r1, r1, #5
 801f472:	404a      	eors	r2, r1
 801f474:	801a      	strh	r2, [r3, #0]
 801f476:	183b      	adds	r3, r7, r0
 801f478:	183a      	adds	r2, r7, r0
 801f47a:	8812      	ldrh	r2, [r2, #0]
 801f47c:	2180      	movs	r1, #128	@ 0x80
 801f47e:	0189      	lsls	r1, r1, #6
 801f480:	404a      	eors	r2, r1
 801f482:	801a      	strh	r2, [r3, #0]
 801f484:	687a      	ldr	r2, [r7, #4]
 801f486:	683b      	ldr	r3, [r7, #0]
 801f488:	781b      	ldrb	r3, [r3, #0]
 801f48a:	009b      	lsls	r3, r3, #2
 801f48c:	18d3      	adds	r3, r2, r3
 801f48e:	183a      	adds	r2, r7, r0
 801f490:	8812      	ldrh	r2, [r2, #0]
 801f492:	4947      	ldr	r1, [pc, #284]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f494:	430a      	orrs	r2, r1
 801f496:	b292      	uxth	r2, r2
 801f498:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f49a:	687a      	ldr	r2, [r7, #4]
 801f49c:	683b      	ldr	r3, [r7, #0]
 801f49e:	781b      	ldrb	r3, [r3, #0]
 801f4a0:	009b      	lsls	r3, r3, #2
 801f4a2:	18d3      	adds	r3, r2, r3
 801f4a4:	881b      	ldrh	r3, [r3, #0]
 801f4a6:	b29a      	uxth	r2, r3
 801f4a8:	2036      	movs	r0, #54	@ 0x36
 801f4aa:	183b      	adds	r3, r7, r0
 801f4ac:	4945      	ldr	r1, [pc, #276]	@ (801f5c4 <USB_ActivateEndpoint+0x6c8>)
 801f4ae:	400a      	ands	r2, r1
 801f4b0:	801a      	strh	r2, [r3, #0]
 801f4b2:	687a      	ldr	r2, [r7, #4]
 801f4b4:	683b      	ldr	r3, [r7, #0]
 801f4b6:	781b      	ldrb	r3, [r3, #0]
 801f4b8:	009b      	lsls	r3, r3, #2
 801f4ba:	18d3      	adds	r3, r2, r3
 801f4bc:	183a      	adds	r2, r7, r0
 801f4be:	8812      	ldrh	r2, [r2, #0]
 801f4c0:	493b      	ldr	r1, [pc, #236]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f4c2:	430a      	orrs	r2, r1
 801f4c4:	b292      	uxth	r2, r2
 801f4c6:	801a      	strh	r2, [r3, #0]
 801f4c8:	e0ac      	b.n	801f624 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f4ca:	687a      	ldr	r2, [r7, #4]
 801f4cc:	683b      	ldr	r3, [r7, #0]
 801f4ce:	781b      	ldrb	r3, [r3, #0]
 801f4d0:	009b      	lsls	r3, r3, #2
 801f4d2:	18d2      	adds	r2, r2, r3
 801f4d4:	214e      	movs	r1, #78	@ 0x4e
 801f4d6:	187b      	adds	r3, r7, r1
 801f4d8:	8812      	ldrh	r2, [r2, #0]
 801f4da:	801a      	strh	r2, [r3, #0]
 801f4dc:	187b      	adds	r3, r7, r1
 801f4de:	881a      	ldrh	r2, [r3, #0]
 801f4e0:	2380      	movs	r3, #128	@ 0x80
 801f4e2:	01db      	lsls	r3, r3, #7
 801f4e4:	4013      	ands	r3, r2
 801f4e6:	d016      	beq.n	801f516 <USB_ActivateEndpoint+0x61a>
 801f4e8:	687a      	ldr	r2, [r7, #4]
 801f4ea:	683b      	ldr	r3, [r7, #0]
 801f4ec:	781b      	ldrb	r3, [r3, #0]
 801f4ee:	009b      	lsls	r3, r3, #2
 801f4f0:	18d3      	adds	r3, r2, r3
 801f4f2:	881b      	ldrh	r3, [r3, #0]
 801f4f4:	b29a      	uxth	r2, r3
 801f4f6:	204c      	movs	r0, #76	@ 0x4c
 801f4f8:	183b      	adds	r3, r7, r0
 801f4fa:	492a      	ldr	r1, [pc, #168]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f4fc:	400a      	ands	r2, r1
 801f4fe:	801a      	strh	r2, [r3, #0]
 801f500:	687a      	ldr	r2, [r7, #4]
 801f502:	683b      	ldr	r3, [r7, #0]
 801f504:	781b      	ldrb	r3, [r3, #0]
 801f506:	009b      	lsls	r3, r3, #2
 801f508:	18d3      	adds	r3, r2, r3
 801f50a:	183a      	adds	r2, r7, r0
 801f50c:	8812      	ldrh	r2, [r2, #0]
 801f50e:	4926      	ldr	r1, [pc, #152]	@ (801f5a8 <USB_ActivateEndpoint+0x6ac>)
 801f510:	430a      	orrs	r2, r1
 801f512:	b292      	uxth	r2, r2
 801f514:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f516:	687a      	ldr	r2, [r7, #4]
 801f518:	683b      	ldr	r3, [r7, #0]
 801f51a:	781b      	ldrb	r3, [r3, #0]
 801f51c:	009b      	lsls	r3, r3, #2
 801f51e:	18d2      	adds	r2, r2, r3
 801f520:	214a      	movs	r1, #74	@ 0x4a
 801f522:	187b      	adds	r3, r7, r1
 801f524:	8812      	ldrh	r2, [r2, #0]
 801f526:	801a      	strh	r2, [r3, #0]
 801f528:	187b      	adds	r3, r7, r1
 801f52a:	881b      	ldrh	r3, [r3, #0]
 801f52c:	2240      	movs	r2, #64	@ 0x40
 801f52e:	4013      	ands	r3, r2
 801f530:	d016      	beq.n	801f560 <USB_ActivateEndpoint+0x664>
 801f532:	687a      	ldr	r2, [r7, #4]
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	781b      	ldrb	r3, [r3, #0]
 801f538:	009b      	lsls	r3, r3, #2
 801f53a:	18d3      	adds	r3, r2, r3
 801f53c:	881b      	ldrh	r3, [r3, #0]
 801f53e:	b29a      	uxth	r2, r3
 801f540:	2048      	movs	r0, #72	@ 0x48
 801f542:	183b      	adds	r3, r7, r0
 801f544:	4917      	ldr	r1, [pc, #92]	@ (801f5a4 <USB_ActivateEndpoint+0x6a8>)
 801f546:	400a      	ands	r2, r1
 801f548:	801a      	strh	r2, [r3, #0]
 801f54a:	687a      	ldr	r2, [r7, #4]
 801f54c:	683b      	ldr	r3, [r7, #0]
 801f54e:	781b      	ldrb	r3, [r3, #0]
 801f550:	009b      	lsls	r3, r3, #2
 801f552:	18d3      	adds	r3, r2, r3
 801f554:	183a      	adds	r2, r7, r0
 801f556:	8812      	ldrh	r2, [r2, #0]
 801f558:	4919      	ldr	r1, [pc, #100]	@ (801f5c0 <USB_ActivateEndpoint+0x6c4>)
 801f55a:	430a      	orrs	r2, r1
 801f55c:	b292      	uxth	r2, r2
 801f55e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f560:	683b      	ldr	r3, [r7, #0]
 801f562:	78db      	ldrb	r3, [r3, #3]
 801f564:	2b01      	cmp	r3, #1
 801f566:	d02f      	beq.n	801f5c8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f568:	687a      	ldr	r2, [r7, #4]
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	781b      	ldrb	r3, [r3, #0]
 801f56e:	009b      	lsls	r3, r3, #2
 801f570:	18d3      	adds	r3, r2, r3
 801f572:	881b      	ldrh	r3, [r3, #0]
 801f574:	b29a      	uxth	r2, r3
 801f576:	2044      	movs	r0, #68	@ 0x44
 801f578:	183b      	adds	r3, r7, r0
 801f57a:	4912      	ldr	r1, [pc, #72]	@ (801f5c4 <USB_ActivateEndpoint+0x6c8>)
 801f57c:	400a      	ands	r2, r1
 801f57e:	801a      	strh	r2, [r3, #0]
 801f580:	183b      	adds	r3, r7, r0
 801f582:	183a      	adds	r2, r7, r0
 801f584:	8812      	ldrh	r2, [r2, #0]
 801f586:	2120      	movs	r1, #32
 801f588:	404a      	eors	r2, r1
 801f58a:	801a      	strh	r2, [r3, #0]
 801f58c:	687a      	ldr	r2, [r7, #4]
 801f58e:	683b      	ldr	r3, [r7, #0]
 801f590:	781b      	ldrb	r3, [r3, #0]
 801f592:	009b      	lsls	r3, r3, #2
 801f594:	18d3      	adds	r3, r2, r3
 801f596:	183a      	adds	r2, r7, r0
 801f598:	8812      	ldrh	r2, [r2, #0]
 801f59a:	4905      	ldr	r1, [pc, #20]	@ (801f5b0 <USB_ActivateEndpoint+0x6b4>)
 801f59c:	430a      	orrs	r2, r1
 801f59e:	b292      	uxth	r2, r2
 801f5a0:	801a      	strh	r2, [r3, #0]
 801f5a2:	e028      	b.n	801f5f6 <USB_ActivateEndpoint+0x6fa>
 801f5a4:	ffff8f8f 	.word	0xffff8f8f
 801f5a8:	ffffc080 	.word	0xffffc080
 801f5ac:	ffffbf8f 	.word	0xffffbf8f
 801f5b0:	ffff8080 	.word	0xffff8080
 801f5b4:	ffff8180 	.word	0xffff8180
 801f5b8:	ffff8e8f 	.word	0xffff8e8f
 801f5bc:	00000404 	.word	0x00000404
 801f5c0:	ffff80c0 	.word	0xffff80c0
 801f5c4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f5c8:	687a      	ldr	r2, [r7, #4]
 801f5ca:	683b      	ldr	r3, [r7, #0]
 801f5cc:	781b      	ldrb	r3, [r3, #0]
 801f5ce:	009b      	lsls	r3, r3, #2
 801f5d0:	18d3      	adds	r3, r2, r3
 801f5d2:	881b      	ldrh	r3, [r3, #0]
 801f5d4:	b29a      	uxth	r2, r3
 801f5d6:	2046      	movs	r0, #70	@ 0x46
 801f5d8:	183b      	adds	r3, r7, r0
 801f5da:	4916      	ldr	r1, [pc, #88]	@ (801f634 <USB_ActivateEndpoint+0x738>)
 801f5dc:	400a      	ands	r2, r1
 801f5de:	801a      	strh	r2, [r3, #0]
 801f5e0:	687a      	ldr	r2, [r7, #4]
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	781b      	ldrb	r3, [r3, #0]
 801f5e6:	009b      	lsls	r3, r3, #2
 801f5e8:	18d3      	adds	r3, r2, r3
 801f5ea:	183a      	adds	r2, r7, r0
 801f5ec:	8812      	ldrh	r2, [r2, #0]
 801f5ee:	4912      	ldr	r1, [pc, #72]	@ (801f638 <USB_ActivateEndpoint+0x73c>)
 801f5f0:	430a      	orrs	r2, r1
 801f5f2:	b292      	uxth	r2, r2
 801f5f4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f5f6:	687a      	ldr	r2, [r7, #4]
 801f5f8:	683b      	ldr	r3, [r7, #0]
 801f5fa:	781b      	ldrb	r3, [r3, #0]
 801f5fc:	009b      	lsls	r3, r3, #2
 801f5fe:	18d3      	adds	r3, r2, r3
 801f600:	881b      	ldrh	r3, [r3, #0]
 801f602:	b29a      	uxth	r2, r3
 801f604:	2042      	movs	r0, #66	@ 0x42
 801f606:	183b      	adds	r3, r7, r0
 801f608:	490c      	ldr	r1, [pc, #48]	@ (801f63c <USB_ActivateEndpoint+0x740>)
 801f60a:	400a      	ands	r2, r1
 801f60c:	801a      	strh	r2, [r3, #0]
 801f60e:	687a      	ldr	r2, [r7, #4]
 801f610:	683b      	ldr	r3, [r7, #0]
 801f612:	781b      	ldrb	r3, [r3, #0]
 801f614:	009b      	lsls	r3, r3, #2
 801f616:	18d3      	adds	r3, r2, r3
 801f618:	183a      	adds	r2, r7, r0
 801f61a:	8812      	ldrh	r2, [r2, #0]
 801f61c:	4906      	ldr	r1, [pc, #24]	@ (801f638 <USB_ActivateEndpoint+0x73c>)
 801f61e:	430a      	orrs	r2, r1
 801f620:	b292      	uxth	r2, r2
 801f622:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801f624:	236f      	movs	r3, #111	@ 0x6f
 801f626:	18fb      	adds	r3, r7, r3
 801f628:	781b      	ldrb	r3, [r3, #0]
}
 801f62a:	0018      	movs	r0, r3
 801f62c:	46bd      	mov	sp, r7
 801f62e:	b01c      	add	sp, #112	@ 0x70
 801f630:	bd80      	pop	{r7, pc}
 801f632:	46c0      	nop			@ (mov r8, r8)
 801f634:	ffff8fbf 	.word	0xffff8fbf
 801f638:	ffff8080 	.word	0xffff8080
 801f63c:	ffffbf8f 	.word	0xffffbf8f

0801f640 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f640:	b580      	push	{r7, lr}
 801f642:	b08c      	sub	sp, #48	@ 0x30
 801f644:	af00      	add	r7, sp, #0
 801f646:	6078      	str	r0, [r7, #4]
 801f648:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	7b1b      	ldrb	r3, [r3, #12]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d000      	beq.n	801f654 <USB_DeactivateEndpoint+0x14>
 801f652:	e07e      	b.n	801f752 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	785b      	ldrb	r3, [r3, #1]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d03c      	beq.n	801f6d6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f65c:	687a      	ldr	r2, [r7, #4]
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	781b      	ldrb	r3, [r3, #0]
 801f662:	009b      	lsls	r3, r3, #2
 801f664:	18d2      	adds	r2, r2, r3
 801f666:	210c      	movs	r1, #12
 801f668:	187b      	adds	r3, r7, r1
 801f66a:	8812      	ldrh	r2, [r2, #0]
 801f66c:	801a      	strh	r2, [r3, #0]
 801f66e:	187b      	adds	r3, r7, r1
 801f670:	881b      	ldrh	r3, [r3, #0]
 801f672:	2240      	movs	r2, #64	@ 0x40
 801f674:	4013      	ands	r3, r2
 801f676:	d016      	beq.n	801f6a6 <USB_DeactivateEndpoint+0x66>
 801f678:	687a      	ldr	r2, [r7, #4]
 801f67a:	683b      	ldr	r3, [r7, #0]
 801f67c:	781b      	ldrb	r3, [r3, #0]
 801f67e:	009b      	lsls	r3, r3, #2
 801f680:	18d3      	adds	r3, r2, r3
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	b29a      	uxth	r2, r3
 801f686:	200a      	movs	r0, #10
 801f688:	183b      	adds	r3, r7, r0
 801f68a:	49c7      	ldr	r1, [pc, #796]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f68c:	400a      	ands	r2, r1
 801f68e:	801a      	strh	r2, [r3, #0]
 801f690:	687a      	ldr	r2, [r7, #4]
 801f692:	683b      	ldr	r3, [r7, #0]
 801f694:	781b      	ldrb	r3, [r3, #0]
 801f696:	009b      	lsls	r3, r3, #2
 801f698:	18d3      	adds	r3, r2, r3
 801f69a:	183a      	adds	r2, r7, r0
 801f69c:	8812      	ldrh	r2, [r2, #0]
 801f69e:	49c3      	ldr	r1, [pc, #780]	@ (801f9ac <USB_DeactivateEndpoint+0x36c>)
 801f6a0:	430a      	orrs	r2, r1
 801f6a2:	b292      	uxth	r2, r2
 801f6a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f6a6:	687a      	ldr	r2, [r7, #4]
 801f6a8:	683b      	ldr	r3, [r7, #0]
 801f6aa:	781b      	ldrb	r3, [r3, #0]
 801f6ac:	009b      	lsls	r3, r3, #2
 801f6ae:	18d3      	adds	r3, r2, r3
 801f6b0:	881b      	ldrh	r3, [r3, #0]
 801f6b2:	b29a      	uxth	r2, r3
 801f6b4:	2008      	movs	r0, #8
 801f6b6:	183b      	adds	r3, r7, r0
 801f6b8:	49bd      	ldr	r1, [pc, #756]	@ (801f9b0 <USB_DeactivateEndpoint+0x370>)
 801f6ba:	400a      	ands	r2, r1
 801f6bc:	801a      	strh	r2, [r3, #0]
 801f6be:	687a      	ldr	r2, [r7, #4]
 801f6c0:	683b      	ldr	r3, [r7, #0]
 801f6c2:	781b      	ldrb	r3, [r3, #0]
 801f6c4:	009b      	lsls	r3, r3, #2
 801f6c6:	18d3      	adds	r3, r2, r3
 801f6c8:	183a      	adds	r2, r7, r0
 801f6ca:	8812      	ldrh	r2, [r2, #0]
 801f6cc:	49b9      	ldr	r1, [pc, #740]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f6ce:	430a      	orrs	r2, r1
 801f6d0:	b292      	uxth	r2, r2
 801f6d2:	801a      	strh	r2, [r3, #0]
 801f6d4:	e163      	b.n	801f99e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f6d6:	687a      	ldr	r2, [r7, #4]
 801f6d8:	683b      	ldr	r3, [r7, #0]
 801f6da:	781b      	ldrb	r3, [r3, #0]
 801f6dc:	009b      	lsls	r3, r3, #2
 801f6de:	18d2      	adds	r2, r2, r3
 801f6e0:	2112      	movs	r1, #18
 801f6e2:	187b      	adds	r3, r7, r1
 801f6e4:	8812      	ldrh	r2, [r2, #0]
 801f6e6:	801a      	strh	r2, [r3, #0]
 801f6e8:	187b      	adds	r3, r7, r1
 801f6ea:	881a      	ldrh	r2, [r3, #0]
 801f6ec:	2380      	movs	r3, #128	@ 0x80
 801f6ee:	01db      	lsls	r3, r3, #7
 801f6f0:	4013      	ands	r3, r2
 801f6f2:	d016      	beq.n	801f722 <USB_DeactivateEndpoint+0xe2>
 801f6f4:	687a      	ldr	r2, [r7, #4]
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	781b      	ldrb	r3, [r3, #0]
 801f6fa:	009b      	lsls	r3, r3, #2
 801f6fc:	18d3      	adds	r3, r2, r3
 801f6fe:	881b      	ldrh	r3, [r3, #0]
 801f700:	b29a      	uxth	r2, r3
 801f702:	2010      	movs	r0, #16
 801f704:	183b      	adds	r3, r7, r0
 801f706:	49a8      	ldr	r1, [pc, #672]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f708:	400a      	ands	r2, r1
 801f70a:	801a      	strh	r2, [r3, #0]
 801f70c:	687a      	ldr	r2, [r7, #4]
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	781b      	ldrb	r3, [r3, #0]
 801f712:	009b      	lsls	r3, r3, #2
 801f714:	18d3      	adds	r3, r2, r3
 801f716:	183a      	adds	r2, r7, r0
 801f718:	8812      	ldrh	r2, [r2, #0]
 801f71a:	49a7      	ldr	r1, [pc, #668]	@ (801f9b8 <USB_DeactivateEndpoint+0x378>)
 801f71c:	430a      	orrs	r2, r1
 801f71e:	b292      	uxth	r2, r2
 801f720:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f722:	687a      	ldr	r2, [r7, #4]
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	781b      	ldrb	r3, [r3, #0]
 801f728:	009b      	lsls	r3, r3, #2
 801f72a:	18d3      	adds	r3, r2, r3
 801f72c:	881b      	ldrh	r3, [r3, #0]
 801f72e:	b29a      	uxth	r2, r3
 801f730:	200e      	movs	r0, #14
 801f732:	183b      	adds	r3, r7, r0
 801f734:	49a1      	ldr	r1, [pc, #644]	@ (801f9bc <USB_DeactivateEndpoint+0x37c>)
 801f736:	400a      	ands	r2, r1
 801f738:	801a      	strh	r2, [r3, #0]
 801f73a:	687a      	ldr	r2, [r7, #4]
 801f73c:	683b      	ldr	r3, [r7, #0]
 801f73e:	781b      	ldrb	r3, [r3, #0]
 801f740:	009b      	lsls	r3, r3, #2
 801f742:	18d3      	adds	r3, r2, r3
 801f744:	183a      	adds	r2, r7, r0
 801f746:	8812      	ldrh	r2, [r2, #0]
 801f748:	499a      	ldr	r1, [pc, #616]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f74a:	430a      	orrs	r2, r1
 801f74c:	b292      	uxth	r2, r2
 801f74e:	801a      	strh	r2, [r3, #0]
 801f750:	e125      	b.n	801f99e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	785b      	ldrb	r3, [r3, #1]
 801f756:	2b00      	cmp	r3, #0
 801f758:	d000      	beq.n	801f75c <USB_DeactivateEndpoint+0x11c>
 801f75a:	e090      	b.n	801f87e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f75c:	687a      	ldr	r2, [r7, #4]
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	781b      	ldrb	r3, [r3, #0]
 801f762:	009b      	lsls	r3, r3, #2
 801f764:	18d2      	adds	r2, r2, r3
 801f766:	2120      	movs	r1, #32
 801f768:	187b      	adds	r3, r7, r1
 801f76a:	8812      	ldrh	r2, [r2, #0]
 801f76c:	801a      	strh	r2, [r3, #0]
 801f76e:	187b      	adds	r3, r7, r1
 801f770:	881a      	ldrh	r2, [r3, #0]
 801f772:	2380      	movs	r3, #128	@ 0x80
 801f774:	01db      	lsls	r3, r3, #7
 801f776:	4013      	ands	r3, r2
 801f778:	d016      	beq.n	801f7a8 <USB_DeactivateEndpoint+0x168>
 801f77a:	687a      	ldr	r2, [r7, #4]
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	781b      	ldrb	r3, [r3, #0]
 801f780:	009b      	lsls	r3, r3, #2
 801f782:	18d3      	adds	r3, r2, r3
 801f784:	881b      	ldrh	r3, [r3, #0]
 801f786:	b29a      	uxth	r2, r3
 801f788:	201e      	movs	r0, #30
 801f78a:	183b      	adds	r3, r7, r0
 801f78c:	4986      	ldr	r1, [pc, #536]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f78e:	400a      	ands	r2, r1
 801f790:	801a      	strh	r2, [r3, #0]
 801f792:	687a      	ldr	r2, [r7, #4]
 801f794:	683b      	ldr	r3, [r7, #0]
 801f796:	781b      	ldrb	r3, [r3, #0]
 801f798:	009b      	lsls	r3, r3, #2
 801f79a:	18d3      	adds	r3, r2, r3
 801f79c:	183a      	adds	r2, r7, r0
 801f79e:	8812      	ldrh	r2, [r2, #0]
 801f7a0:	4985      	ldr	r1, [pc, #532]	@ (801f9b8 <USB_DeactivateEndpoint+0x378>)
 801f7a2:	430a      	orrs	r2, r1
 801f7a4:	b292      	uxth	r2, r2
 801f7a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f7a8:	687a      	ldr	r2, [r7, #4]
 801f7aa:	683b      	ldr	r3, [r7, #0]
 801f7ac:	781b      	ldrb	r3, [r3, #0]
 801f7ae:	009b      	lsls	r3, r3, #2
 801f7b0:	18d2      	adds	r2, r2, r3
 801f7b2:	211c      	movs	r1, #28
 801f7b4:	187b      	adds	r3, r7, r1
 801f7b6:	8812      	ldrh	r2, [r2, #0]
 801f7b8:	801a      	strh	r2, [r3, #0]
 801f7ba:	187b      	adds	r3, r7, r1
 801f7bc:	881b      	ldrh	r3, [r3, #0]
 801f7be:	2240      	movs	r2, #64	@ 0x40
 801f7c0:	4013      	ands	r3, r2
 801f7c2:	d016      	beq.n	801f7f2 <USB_DeactivateEndpoint+0x1b2>
 801f7c4:	687a      	ldr	r2, [r7, #4]
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	781b      	ldrb	r3, [r3, #0]
 801f7ca:	009b      	lsls	r3, r3, #2
 801f7cc:	18d3      	adds	r3, r2, r3
 801f7ce:	881b      	ldrh	r3, [r3, #0]
 801f7d0:	b29a      	uxth	r2, r3
 801f7d2:	201a      	movs	r0, #26
 801f7d4:	183b      	adds	r3, r7, r0
 801f7d6:	4974      	ldr	r1, [pc, #464]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f7d8:	400a      	ands	r2, r1
 801f7da:	801a      	strh	r2, [r3, #0]
 801f7dc:	687a      	ldr	r2, [r7, #4]
 801f7de:	683b      	ldr	r3, [r7, #0]
 801f7e0:	781b      	ldrb	r3, [r3, #0]
 801f7e2:	009b      	lsls	r3, r3, #2
 801f7e4:	18d3      	adds	r3, r2, r3
 801f7e6:	183a      	adds	r2, r7, r0
 801f7e8:	8812      	ldrh	r2, [r2, #0]
 801f7ea:	4970      	ldr	r1, [pc, #448]	@ (801f9ac <USB_DeactivateEndpoint+0x36c>)
 801f7ec:	430a      	orrs	r2, r1
 801f7ee:	b292      	uxth	r2, r2
 801f7f0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801f7f2:	687a      	ldr	r2, [r7, #4]
 801f7f4:	683b      	ldr	r3, [r7, #0]
 801f7f6:	781b      	ldrb	r3, [r3, #0]
 801f7f8:	009b      	lsls	r3, r3, #2
 801f7fa:	18d3      	adds	r3, r2, r3
 801f7fc:	881b      	ldrh	r3, [r3, #0]
 801f7fe:	b29a      	uxth	r2, r3
 801f800:	2018      	movs	r0, #24
 801f802:	183b      	adds	r3, r7, r0
 801f804:	4968      	ldr	r1, [pc, #416]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f806:	400a      	ands	r2, r1
 801f808:	801a      	strh	r2, [r3, #0]
 801f80a:	687a      	ldr	r2, [r7, #4]
 801f80c:	683b      	ldr	r3, [r7, #0]
 801f80e:	781b      	ldrb	r3, [r3, #0]
 801f810:	009b      	lsls	r3, r3, #2
 801f812:	18d3      	adds	r3, r2, r3
 801f814:	183a      	adds	r2, r7, r0
 801f816:	8812      	ldrh	r2, [r2, #0]
 801f818:	4964      	ldr	r1, [pc, #400]	@ (801f9ac <USB_DeactivateEndpoint+0x36c>)
 801f81a:	430a      	orrs	r2, r1
 801f81c:	b292      	uxth	r2, r2
 801f81e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f820:	687a      	ldr	r2, [r7, #4]
 801f822:	683b      	ldr	r3, [r7, #0]
 801f824:	781b      	ldrb	r3, [r3, #0]
 801f826:	009b      	lsls	r3, r3, #2
 801f828:	18d3      	adds	r3, r2, r3
 801f82a:	881b      	ldrh	r3, [r3, #0]
 801f82c:	b29a      	uxth	r2, r3
 801f82e:	2016      	movs	r0, #22
 801f830:	183b      	adds	r3, r7, r0
 801f832:	4962      	ldr	r1, [pc, #392]	@ (801f9bc <USB_DeactivateEndpoint+0x37c>)
 801f834:	400a      	ands	r2, r1
 801f836:	801a      	strh	r2, [r3, #0]
 801f838:	687a      	ldr	r2, [r7, #4]
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	781b      	ldrb	r3, [r3, #0]
 801f83e:	009b      	lsls	r3, r3, #2
 801f840:	18d3      	adds	r3, r2, r3
 801f842:	183a      	adds	r2, r7, r0
 801f844:	8812      	ldrh	r2, [r2, #0]
 801f846:	495b      	ldr	r1, [pc, #364]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f848:	430a      	orrs	r2, r1
 801f84a:	b292      	uxth	r2, r2
 801f84c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f84e:	687a      	ldr	r2, [r7, #4]
 801f850:	683b      	ldr	r3, [r7, #0]
 801f852:	781b      	ldrb	r3, [r3, #0]
 801f854:	009b      	lsls	r3, r3, #2
 801f856:	18d3      	adds	r3, r2, r3
 801f858:	881b      	ldrh	r3, [r3, #0]
 801f85a:	b29a      	uxth	r2, r3
 801f85c:	2014      	movs	r0, #20
 801f85e:	183b      	adds	r3, r7, r0
 801f860:	4953      	ldr	r1, [pc, #332]	@ (801f9b0 <USB_DeactivateEndpoint+0x370>)
 801f862:	400a      	ands	r2, r1
 801f864:	801a      	strh	r2, [r3, #0]
 801f866:	687a      	ldr	r2, [r7, #4]
 801f868:	683b      	ldr	r3, [r7, #0]
 801f86a:	781b      	ldrb	r3, [r3, #0]
 801f86c:	009b      	lsls	r3, r3, #2
 801f86e:	18d3      	adds	r3, r2, r3
 801f870:	183a      	adds	r2, r7, r0
 801f872:	8812      	ldrh	r2, [r2, #0]
 801f874:	494f      	ldr	r1, [pc, #316]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f876:	430a      	orrs	r2, r1
 801f878:	b292      	uxth	r2, r2
 801f87a:	801a      	strh	r2, [r3, #0]
 801f87c:	e08f      	b.n	801f99e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f87e:	687a      	ldr	r2, [r7, #4]
 801f880:	683b      	ldr	r3, [r7, #0]
 801f882:	781b      	ldrb	r3, [r3, #0]
 801f884:	009b      	lsls	r3, r3, #2
 801f886:	18d2      	adds	r2, r2, r3
 801f888:	212e      	movs	r1, #46	@ 0x2e
 801f88a:	187b      	adds	r3, r7, r1
 801f88c:	8812      	ldrh	r2, [r2, #0]
 801f88e:	801a      	strh	r2, [r3, #0]
 801f890:	187b      	adds	r3, r7, r1
 801f892:	881a      	ldrh	r2, [r3, #0]
 801f894:	2380      	movs	r3, #128	@ 0x80
 801f896:	01db      	lsls	r3, r3, #7
 801f898:	4013      	ands	r3, r2
 801f89a:	d016      	beq.n	801f8ca <USB_DeactivateEndpoint+0x28a>
 801f89c:	687a      	ldr	r2, [r7, #4]
 801f89e:	683b      	ldr	r3, [r7, #0]
 801f8a0:	781b      	ldrb	r3, [r3, #0]
 801f8a2:	009b      	lsls	r3, r3, #2
 801f8a4:	18d3      	adds	r3, r2, r3
 801f8a6:	881b      	ldrh	r3, [r3, #0]
 801f8a8:	b29a      	uxth	r2, r3
 801f8aa:	202c      	movs	r0, #44	@ 0x2c
 801f8ac:	183b      	adds	r3, r7, r0
 801f8ae:	493e      	ldr	r1, [pc, #248]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f8b0:	400a      	ands	r2, r1
 801f8b2:	801a      	strh	r2, [r3, #0]
 801f8b4:	687a      	ldr	r2, [r7, #4]
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	781b      	ldrb	r3, [r3, #0]
 801f8ba:	009b      	lsls	r3, r3, #2
 801f8bc:	18d3      	adds	r3, r2, r3
 801f8be:	183a      	adds	r2, r7, r0
 801f8c0:	8812      	ldrh	r2, [r2, #0]
 801f8c2:	493d      	ldr	r1, [pc, #244]	@ (801f9b8 <USB_DeactivateEndpoint+0x378>)
 801f8c4:	430a      	orrs	r2, r1
 801f8c6:	b292      	uxth	r2, r2
 801f8c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f8ca:	687a      	ldr	r2, [r7, #4]
 801f8cc:	683b      	ldr	r3, [r7, #0]
 801f8ce:	781b      	ldrb	r3, [r3, #0]
 801f8d0:	009b      	lsls	r3, r3, #2
 801f8d2:	18d2      	adds	r2, r2, r3
 801f8d4:	212a      	movs	r1, #42	@ 0x2a
 801f8d6:	187b      	adds	r3, r7, r1
 801f8d8:	8812      	ldrh	r2, [r2, #0]
 801f8da:	801a      	strh	r2, [r3, #0]
 801f8dc:	187b      	adds	r3, r7, r1
 801f8de:	881b      	ldrh	r3, [r3, #0]
 801f8e0:	2240      	movs	r2, #64	@ 0x40
 801f8e2:	4013      	ands	r3, r2
 801f8e4:	d016      	beq.n	801f914 <USB_DeactivateEndpoint+0x2d4>
 801f8e6:	687a      	ldr	r2, [r7, #4]
 801f8e8:	683b      	ldr	r3, [r7, #0]
 801f8ea:	781b      	ldrb	r3, [r3, #0]
 801f8ec:	009b      	lsls	r3, r3, #2
 801f8ee:	18d3      	adds	r3, r2, r3
 801f8f0:	881b      	ldrh	r3, [r3, #0]
 801f8f2:	b29a      	uxth	r2, r3
 801f8f4:	2028      	movs	r0, #40	@ 0x28
 801f8f6:	183b      	adds	r3, r7, r0
 801f8f8:	492b      	ldr	r1, [pc, #172]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f8fa:	400a      	ands	r2, r1
 801f8fc:	801a      	strh	r2, [r3, #0]
 801f8fe:	687a      	ldr	r2, [r7, #4]
 801f900:	683b      	ldr	r3, [r7, #0]
 801f902:	781b      	ldrb	r3, [r3, #0]
 801f904:	009b      	lsls	r3, r3, #2
 801f906:	18d3      	adds	r3, r2, r3
 801f908:	183a      	adds	r2, r7, r0
 801f90a:	8812      	ldrh	r2, [r2, #0]
 801f90c:	4927      	ldr	r1, [pc, #156]	@ (801f9ac <USB_DeactivateEndpoint+0x36c>)
 801f90e:	430a      	orrs	r2, r1
 801f910:	b292      	uxth	r2, r2
 801f912:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801f914:	687a      	ldr	r2, [r7, #4]
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	781b      	ldrb	r3, [r3, #0]
 801f91a:	009b      	lsls	r3, r3, #2
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	881b      	ldrh	r3, [r3, #0]
 801f920:	b29a      	uxth	r2, r3
 801f922:	2026      	movs	r0, #38	@ 0x26
 801f924:	183b      	adds	r3, r7, r0
 801f926:	4920      	ldr	r1, [pc, #128]	@ (801f9a8 <USB_DeactivateEndpoint+0x368>)
 801f928:	400a      	ands	r2, r1
 801f92a:	801a      	strh	r2, [r3, #0]
 801f92c:	687a      	ldr	r2, [r7, #4]
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	781b      	ldrb	r3, [r3, #0]
 801f932:	009b      	lsls	r3, r3, #2
 801f934:	18d3      	adds	r3, r2, r3
 801f936:	183a      	adds	r2, r7, r0
 801f938:	8812      	ldrh	r2, [r2, #0]
 801f93a:	491f      	ldr	r1, [pc, #124]	@ (801f9b8 <USB_DeactivateEndpoint+0x378>)
 801f93c:	430a      	orrs	r2, r1
 801f93e:	b292      	uxth	r2, r2
 801f940:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f942:	687a      	ldr	r2, [r7, #4]
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	781b      	ldrb	r3, [r3, #0]
 801f948:	009b      	lsls	r3, r3, #2
 801f94a:	18d3      	adds	r3, r2, r3
 801f94c:	881b      	ldrh	r3, [r3, #0]
 801f94e:	b29a      	uxth	r2, r3
 801f950:	2024      	movs	r0, #36	@ 0x24
 801f952:	183b      	adds	r3, r7, r0
 801f954:	4916      	ldr	r1, [pc, #88]	@ (801f9b0 <USB_DeactivateEndpoint+0x370>)
 801f956:	400a      	ands	r2, r1
 801f958:	801a      	strh	r2, [r3, #0]
 801f95a:	687a      	ldr	r2, [r7, #4]
 801f95c:	683b      	ldr	r3, [r7, #0]
 801f95e:	781b      	ldrb	r3, [r3, #0]
 801f960:	009b      	lsls	r3, r3, #2
 801f962:	18d3      	adds	r3, r2, r3
 801f964:	183a      	adds	r2, r7, r0
 801f966:	8812      	ldrh	r2, [r2, #0]
 801f968:	4912      	ldr	r1, [pc, #72]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f96a:	430a      	orrs	r2, r1
 801f96c:	b292      	uxth	r2, r2
 801f96e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f970:	687a      	ldr	r2, [r7, #4]
 801f972:	683b      	ldr	r3, [r7, #0]
 801f974:	781b      	ldrb	r3, [r3, #0]
 801f976:	009b      	lsls	r3, r3, #2
 801f978:	18d3      	adds	r3, r2, r3
 801f97a:	881b      	ldrh	r3, [r3, #0]
 801f97c:	b29a      	uxth	r2, r3
 801f97e:	2022      	movs	r0, #34	@ 0x22
 801f980:	183b      	adds	r3, r7, r0
 801f982:	490e      	ldr	r1, [pc, #56]	@ (801f9bc <USB_DeactivateEndpoint+0x37c>)
 801f984:	400a      	ands	r2, r1
 801f986:	801a      	strh	r2, [r3, #0]
 801f988:	687a      	ldr	r2, [r7, #4]
 801f98a:	683b      	ldr	r3, [r7, #0]
 801f98c:	781b      	ldrb	r3, [r3, #0]
 801f98e:	009b      	lsls	r3, r3, #2
 801f990:	18d3      	adds	r3, r2, r3
 801f992:	183a      	adds	r2, r7, r0
 801f994:	8812      	ldrh	r2, [r2, #0]
 801f996:	4907      	ldr	r1, [pc, #28]	@ (801f9b4 <USB_DeactivateEndpoint+0x374>)
 801f998:	430a      	orrs	r2, r1
 801f99a:	b292      	uxth	r2, r2
 801f99c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801f99e:	2300      	movs	r3, #0
}
 801f9a0:	0018      	movs	r0, r3
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	b00c      	add	sp, #48	@ 0x30
 801f9a6:	bd80      	pop	{r7, pc}
 801f9a8:	ffff8f8f 	.word	0xffff8f8f
 801f9ac:	ffff80c0 	.word	0xffff80c0
 801f9b0:	ffff8fbf 	.word	0xffff8fbf
 801f9b4:	ffff8080 	.word	0xffff8080
 801f9b8:	ffffc080 	.word	0xffffc080
 801f9bc:	ffffbf8f 	.word	0xffffbf8f

0801f9c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f9c0:	b590      	push	{r4, r7, lr}
 801f9c2:	b0c3      	sub	sp, #268	@ 0x10c
 801f9c4:	af00      	add	r7, sp, #0
 801f9c6:	6078      	str	r0, [r7, #4]
 801f9c8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801f9ca:	683b      	ldr	r3, [r7, #0]
 801f9cc:	785b      	ldrb	r3, [r3, #1]
 801f9ce:	2b01      	cmp	r3, #1
 801f9d0:	d001      	beq.n	801f9d6 <USB_EPStartXfer+0x16>
 801f9d2:	f000 fd2d 	bl	8020430 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801f9d6:	683b      	ldr	r3, [r7, #0]
 801f9d8:	699a      	ldr	r2, [r3, #24]
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	691b      	ldr	r3, [r3, #16]
 801f9de:	429a      	cmp	r2, r3
 801f9e0:	d905      	bls.n	801f9ee <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801f9e2:	683b      	ldr	r3, [r7, #0]
 801f9e4:	691b      	ldr	r3, [r3, #16]
 801f9e6:	1d7a      	adds	r2, r7, #5
 801f9e8:	32ff      	adds	r2, #255	@ 0xff
 801f9ea:	6013      	str	r3, [r2, #0]
 801f9ec:	e004      	b.n	801f9f8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801f9ee:	683b      	ldr	r3, [r7, #0]
 801f9f0:	699b      	ldr	r3, [r3, #24]
 801f9f2:	1d7a      	adds	r2, r7, #5
 801f9f4:	32ff      	adds	r2, #255	@ 0xff
 801f9f6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801f9f8:	683b      	ldr	r3, [r7, #0]
 801f9fa:	7b1b      	ldrb	r3, [r3, #12]
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	d125      	bne.n	801fa4c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fa00:	683b      	ldr	r3, [r7, #0]
 801fa02:	6959      	ldr	r1, [r3, #20]
 801fa04:	683b      	ldr	r3, [r7, #0]
 801fa06:	88da      	ldrh	r2, [r3, #6]
 801fa08:	1d7b      	adds	r3, r7, #5
 801fa0a:	33ff      	adds	r3, #255	@ 0xff
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	b29b      	uxth	r3, r3
 801fa10:	6878      	ldr	r0, [r7, #4]
 801fa12:	f001 fa47 	bl	8020ea4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	613b      	str	r3, [r7, #16]
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	2250      	movs	r2, #80	@ 0x50
 801fa1e:	5a9b      	ldrh	r3, [r3, r2]
 801fa20:	b29b      	uxth	r3, r3
 801fa22:	001a      	movs	r2, r3
 801fa24:	693b      	ldr	r3, [r7, #16]
 801fa26:	189b      	adds	r3, r3, r2
 801fa28:	613b      	str	r3, [r7, #16]
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	781b      	ldrb	r3, [r3, #0]
 801fa2e:	00da      	lsls	r2, r3, #3
 801fa30:	693b      	ldr	r3, [r7, #16]
 801fa32:	18d3      	adds	r3, r2, r3
 801fa34:	4ad7      	ldr	r2, [pc, #860]	@ (801fd94 <USB_EPStartXfer+0x3d4>)
 801fa36:	4694      	mov	ip, r2
 801fa38:	4463      	add	r3, ip
 801fa3a:	60fb      	str	r3, [r7, #12]
 801fa3c:	1d7b      	adds	r3, r7, #5
 801fa3e:	33ff      	adds	r3, #255	@ 0xff
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	b29a      	uxth	r2, r3
 801fa44:	68fb      	ldr	r3, [r7, #12]
 801fa46:	801a      	strh	r2, [r3, #0]
 801fa48:	f000 fccd 	bl	80203e6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801fa4c:	683b      	ldr	r3, [r7, #0]
 801fa4e:	78db      	ldrb	r3, [r3, #3]
 801fa50:	2b02      	cmp	r3, #2
 801fa52:	d000      	beq.n	801fa56 <USB_EPStartXfer+0x96>
 801fa54:	e362      	b.n	802011c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801fa56:	683b      	ldr	r3, [r7, #0]
 801fa58:	6a1a      	ldr	r2, [r3, #32]
 801fa5a:	683b      	ldr	r3, [r7, #0]
 801fa5c:	691b      	ldr	r3, [r3, #16]
 801fa5e:	429a      	cmp	r2, r3
 801fa60:	d800      	bhi.n	801fa64 <USB_EPStartXfer+0xa4>
 801fa62:	e309      	b.n	8020078 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801fa64:	687a      	ldr	r2, [r7, #4]
 801fa66:	683b      	ldr	r3, [r7, #0]
 801fa68:	781b      	ldrb	r3, [r3, #0]
 801fa6a:	009b      	lsls	r3, r3, #2
 801fa6c:	18d3      	adds	r3, r2, r3
 801fa6e:	881b      	ldrh	r3, [r3, #0]
 801fa70:	b29a      	uxth	r2, r3
 801fa72:	2056      	movs	r0, #86	@ 0x56
 801fa74:	183b      	adds	r3, r7, r0
 801fa76:	49c8      	ldr	r1, [pc, #800]	@ (801fd98 <USB_EPStartXfer+0x3d8>)
 801fa78:	400a      	ands	r2, r1
 801fa7a:	801a      	strh	r2, [r3, #0]
 801fa7c:	687a      	ldr	r2, [r7, #4]
 801fa7e:	683b      	ldr	r3, [r7, #0]
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	009b      	lsls	r3, r3, #2
 801fa84:	18d3      	adds	r3, r2, r3
 801fa86:	183a      	adds	r2, r7, r0
 801fa88:	8812      	ldrh	r2, [r2, #0]
 801fa8a:	49c4      	ldr	r1, [pc, #784]	@ (801fd9c <USB_EPStartXfer+0x3dc>)
 801fa8c:	430a      	orrs	r2, r1
 801fa8e:	b292      	uxth	r2, r2
 801fa90:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801fa92:	683b      	ldr	r3, [r7, #0]
 801fa94:	6a1a      	ldr	r2, [r3, #32]
 801fa96:	1d7b      	adds	r3, r7, #5
 801fa98:	33ff      	adds	r3, #255	@ 0xff
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	1ad2      	subs	r2, r2, r3
 801fa9e:	683b      	ldr	r3, [r7, #0]
 801faa0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801faa2:	687a      	ldr	r2, [r7, #4]
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	781b      	ldrb	r3, [r3, #0]
 801faa8:	009b      	lsls	r3, r3, #2
 801faaa:	18d3      	adds	r3, r2, r3
 801faac:	881b      	ldrh	r3, [r3, #0]
 801faae:	b29b      	uxth	r3, r3
 801fab0:	001a      	movs	r2, r3
 801fab2:	2340      	movs	r3, #64	@ 0x40
 801fab4:	4013      	ands	r3, r2
 801fab6:	d100      	bne.n	801faba <USB_EPStartXfer+0xfa>
 801fab8:	e176      	b.n	801fda8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	633b      	str	r3, [r7, #48]	@ 0x30
 801fabe:	683b      	ldr	r3, [r7, #0]
 801fac0:	785b      	ldrb	r3, [r3, #1]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d000      	beq.n	801fac8 <USB_EPStartXfer+0x108>
 801fac6:	e074      	b.n	801fbb2 <USB_EPStartXfer+0x1f2>
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	62bb      	str	r3, [r7, #40]	@ 0x28
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	2250      	movs	r2, #80	@ 0x50
 801fad0:	5a9b      	ldrh	r3, [r3, r2]
 801fad2:	b29b      	uxth	r3, r3
 801fad4:	001a      	movs	r2, r3
 801fad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fad8:	189b      	adds	r3, r3, r2
 801fada:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fadc:	683b      	ldr	r3, [r7, #0]
 801fade:	781b      	ldrb	r3, [r3, #0]
 801fae0:	00da      	lsls	r2, r3, #3
 801fae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fae4:	18d3      	adds	r3, r2, r3
 801fae6:	4aae      	ldr	r2, [pc, #696]	@ (801fda0 <USB_EPStartXfer+0x3e0>)
 801fae8:	4694      	mov	ip, r2
 801faea:	4463      	add	r3, ip
 801faec:	627b      	str	r3, [r7, #36]	@ 0x24
 801faee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801faf0:	881b      	ldrh	r3, [r3, #0]
 801faf2:	b29b      	uxth	r3, r3
 801faf4:	059b      	lsls	r3, r3, #22
 801faf6:	0d9b      	lsrs	r3, r3, #22
 801faf8:	b29a      	uxth	r2, r3
 801fafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fafc:	801a      	strh	r2, [r3, #0]
 801fafe:	1d7b      	adds	r3, r7, #5
 801fb00:	33ff      	adds	r3, #255	@ 0xff
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	2b3e      	cmp	r3, #62	@ 0x3e
 801fb06:	d924      	bls.n	801fb52 <USB_EPStartXfer+0x192>
 801fb08:	1d7b      	adds	r3, r7, #5
 801fb0a:	33ff      	adds	r3, #255	@ 0xff
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	095b      	lsrs	r3, r3, #5
 801fb10:	1c7a      	adds	r2, r7, #1
 801fb12:	32ff      	adds	r2, #255	@ 0xff
 801fb14:	6013      	str	r3, [r2, #0]
 801fb16:	1d7b      	adds	r3, r7, #5
 801fb18:	33ff      	adds	r3, #255	@ 0xff
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	221f      	movs	r2, #31
 801fb1e:	4013      	ands	r3, r2
 801fb20:	d106      	bne.n	801fb30 <USB_EPStartXfer+0x170>
 801fb22:	1c7b      	adds	r3, r7, #1
 801fb24:	33ff      	adds	r3, #255	@ 0xff
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	3b01      	subs	r3, #1
 801fb2a:	1c7a      	adds	r2, r7, #1
 801fb2c:	32ff      	adds	r2, #255	@ 0xff
 801fb2e:	6013      	str	r3, [r2, #0]
 801fb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb32:	881b      	ldrh	r3, [r3, #0]
 801fb34:	b29a      	uxth	r2, r3
 801fb36:	1c7b      	adds	r3, r7, #1
 801fb38:	33ff      	adds	r3, #255	@ 0xff
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	029b      	lsls	r3, r3, #10
 801fb40:	b29b      	uxth	r3, r3
 801fb42:	4313      	orrs	r3, r2
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	4a97      	ldr	r2, [pc, #604]	@ (801fda4 <USB_EPStartXfer+0x3e4>)
 801fb48:	4313      	orrs	r3, r2
 801fb4a:	b29a      	uxth	r2, r3
 801fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb4e:	801a      	strh	r2, [r3, #0]
 801fb50:	e04a      	b.n	801fbe8 <USB_EPStartXfer+0x228>
 801fb52:	1d7b      	adds	r3, r7, #5
 801fb54:	33ff      	adds	r3, #255	@ 0xff
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d108      	bne.n	801fb6e <USB_EPStartXfer+0x1ae>
 801fb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb5e:	881b      	ldrh	r3, [r3, #0]
 801fb60:	b29b      	uxth	r3, r3
 801fb62:	4a90      	ldr	r2, [pc, #576]	@ (801fda4 <USB_EPStartXfer+0x3e4>)
 801fb64:	4313      	orrs	r3, r2
 801fb66:	b29a      	uxth	r2, r3
 801fb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb6a:	801a      	strh	r2, [r3, #0]
 801fb6c:	e03c      	b.n	801fbe8 <USB_EPStartXfer+0x228>
 801fb6e:	1d7b      	adds	r3, r7, #5
 801fb70:	33ff      	adds	r3, #255	@ 0xff
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	085b      	lsrs	r3, r3, #1
 801fb76:	1c7a      	adds	r2, r7, #1
 801fb78:	32ff      	adds	r2, #255	@ 0xff
 801fb7a:	6013      	str	r3, [r2, #0]
 801fb7c:	1d7b      	adds	r3, r7, #5
 801fb7e:	33ff      	adds	r3, #255	@ 0xff
 801fb80:	681b      	ldr	r3, [r3, #0]
 801fb82:	2201      	movs	r2, #1
 801fb84:	4013      	ands	r3, r2
 801fb86:	d006      	beq.n	801fb96 <USB_EPStartXfer+0x1d6>
 801fb88:	1c7b      	adds	r3, r7, #1
 801fb8a:	33ff      	adds	r3, #255	@ 0xff
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	3301      	adds	r3, #1
 801fb90:	1c7a      	adds	r2, r7, #1
 801fb92:	32ff      	adds	r2, #255	@ 0xff
 801fb94:	6013      	str	r3, [r2, #0]
 801fb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb98:	881b      	ldrh	r3, [r3, #0]
 801fb9a:	b29a      	uxth	r2, r3
 801fb9c:	1c7b      	adds	r3, r7, #1
 801fb9e:	33ff      	adds	r3, #255	@ 0xff
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	b29b      	uxth	r3, r3
 801fba4:	029b      	lsls	r3, r3, #10
 801fba6:	b29b      	uxth	r3, r3
 801fba8:	4313      	orrs	r3, r2
 801fbaa:	b29a      	uxth	r2, r3
 801fbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fbae:	801a      	strh	r2, [r3, #0]
 801fbb0:	e01a      	b.n	801fbe8 <USB_EPStartXfer+0x228>
 801fbb2:	683b      	ldr	r3, [r7, #0]
 801fbb4:	785b      	ldrb	r3, [r3, #1]
 801fbb6:	2b01      	cmp	r3, #1
 801fbb8:	d116      	bne.n	801fbe8 <USB_EPStartXfer+0x228>
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	2250      	movs	r2, #80	@ 0x50
 801fbbe:	5a9b      	ldrh	r3, [r3, r2]
 801fbc0:	b29b      	uxth	r3, r3
 801fbc2:	001a      	movs	r2, r3
 801fbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbc6:	189b      	adds	r3, r3, r2
 801fbc8:	633b      	str	r3, [r7, #48]	@ 0x30
 801fbca:	683b      	ldr	r3, [r7, #0]
 801fbcc:	781b      	ldrb	r3, [r3, #0]
 801fbce:	00da      	lsls	r2, r3, #3
 801fbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbd2:	18d3      	adds	r3, r2, r3
 801fbd4:	4a72      	ldr	r2, [pc, #456]	@ (801fda0 <USB_EPStartXfer+0x3e0>)
 801fbd6:	4694      	mov	ip, r2
 801fbd8:	4463      	add	r3, ip
 801fbda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fbdc:	1d7b      	adds	r3, r7, #5
 801fbde:	33ff      	adds	r3, #255	@ 0xff
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	b29a      	uxth	r2, r3
 801fbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fbe6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801fbe8:	2076      	movs	r0, #118	@ 0x76
 801fbea:	183b      	adds	r3, r7, r0
 801fbec:	683a      	ldr	r2, [r7, #0]
 801fbee:	8952      	ldrh	r2, [r2, #10]
 801fbf0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fbf2:	683b      	ldr	r3, [r7, #0]
 801fbf4:	6959      	ldr	r1, [r3, #20]
 801fbf6:	1d7b      	adds	r3, r7, #5
 801fbf8:	33ff      	adds	r3, #255	@ 0xff
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	b29c      	uxth	r4, r3
 801fbfe:	183b      	adds	r3, r7, r0
 801fc00:	881a      	ldrh	r2, [r3, #0]
 801fc02:	6878      	ldr	r0, [r7, #4]
 801fc04:	0023      	movs	r3, r4
 801fc06:	f001 f94d 	bl	8020ea4 <USB_WritePMA>
            ep->xfer_buff += len;
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	695a      	ldr	r2, [r3, #20]
 801fc0e:	1d7b      	adds	r3, r7, #5
 801fc10:	33ff      	adds	r3, #255	@ 0xff
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	18d2      	adds	r2, r2, r3
 801fc16:	683b      	ldr	r3, [r7, #0]
 801fc18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801fc1a:	683b      	ldr	r3, [r7, #0]
 801fc1c:	6a1a      	ldr	r2, [r3, #32]
 801fc1e:	683b      	ldr	r3, [r7, #0]
 801fc20:	691b      	ldr	r3, [r3, #16]
 801fc22:	429a      	cmp	r2, r3
 801fc24:	d908      	bls.n	801fc38 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801fc26:	683b      	ldr	r3, [r7, #0]
 801fc28:	6a1a      	ldr	r2, [r3, #32]
 801fc2a:	1d7b      	adds	r3, r7, #5
 801fc2c:	33ff      	adds	r3, #255	@ 0xff
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	1ad2      	subs	r2, r2, r3
 801fc32:	683b      	ldr	r3, [r7, #0]
 801fc34:	621a      	str	r2, [r3, #32]
 801fc36:	e007      	b.n	801fc48 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	6a1b      	ldr	r3, [r3, #32]
 801fc3c:	1d7a      	adds	r2, r7, #5
 801fc3e:	32ff      	adds	r2, #255	@ 0xff
 801fc40:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	2200      	movs	r2, #0
 801fc46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801fc48:	683b      	ldr	r3, [r7, #0]
 801fc4a:	785b      	ldrb	r3, [r3, #1]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d000      	beq.n	801fc52 <USB_EPStartXfer+0x292>
 801fc50:	e070      	b.n	801fd34 <USB_EPStartXfer+0x374>
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	61bb      	str	r3, [r7, #24]
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	2250      	movs	r2, #80	@ 0x50
 801fc5a:	5a9b      	ldrh	r3, [r3, r2]
 801fc5c:	b29b      	uxth	r3, r3
 801fc5e:	001a      	movs	r2, r3
 801fc60:	69bb      	ldr	r3, [r7, #24]
 801fc62:	189b      	adds	r3, r3, r2
 801fc64:	61bb      	str	r3, [r7, #24]
 801fc66:	683b      	ldr	r3, [r7, #0]
 801fc68:	781b      	ldrb	r3, [r3, #0]
 801fc6a:	00da      	lsls	r2, r3, #3
 801fc6c:	69bb      	ldr	r3, [r7, #24]
 801fc6e:	18d3      	adds	r3, r2, r3
 801fc70:	4a48      	ldr	r2, [pc, #288]	@ (801fd94 <USB_EPStartXfer+0x3d4>)
 801fc72:	4694      	mov	ip, r2
 801fc74:	4463      	add	r3, ip
 801fc76:	617b      	str	r3, [r7, #20]
 801fc78:	697b      	ldr	r3, [r7, #20]
 801fc7a:	881b      	ldrh	r3, [r3, #0]
 801fc7c:	b29b      	uxth	r3, r3
 801fc7e:	059b      	lsls	r3, r3, #22
 801fc80:	0d9b      	lsrs	r3, r3, #22
 801fc82:	b29a      	uxth	r2, r3
 801fc84:	697b      	ldr	r3, [r7, #20]
 801fc86:	801a      	strh	r2, [r3, #0]
 801fc88:	1d7b      	adds	r3, r7, #5
 801fc8a:	33ff      	adds	r3, #255	@ 0xff
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fc90:	d922      	bls.n	801fcd8 <USB_EPStartXfer+0x318>
 801fc92:	1d7b      	adds	r3, r7, #5
 801fc94:	33ff      	adds	r3, #255	@ 0xff
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	095b      	lsrs	r3, r3, #5
 801fc9a:	21fc      	movs	r1, #252	@ 0xfc
 801fc9c:	187a      	adds	r2, r7, r1
 801fc9e:	6013      	str	r3, [r2, #0]
 801fca0:	1d7b      	adds	r3, r7, #5
 801fca2:	33ff      	adds	r3, #255	@ 0xff
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	221f      	movs	r2, #31
 801fca8:	4013      	ands	r3, r2
 801fcaa:	d104      	bne.n	801fcb6 <USB_EPStartXfer+0x2f6>
 801fcac:	187b      	adds	r3, r7, r1
 801fcae:	681b      	ldr	r3, [r3, #0]
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	187a      	adds	r2, r7, r1
 801fcb4:	6013      	str	r3, [r2, #0]
 801fcb6:	697b      	ldr	r3, [r7, #20]
 801fcb8:	881b      	ldrh	r3, [r3, #0]
 801fcba:	b29a      	uxth	r2, r3
 801fcbc:	23fc      	movs	r3, #252	@ 0xfc
 801fcbe:	18fb      	adds	r3, r7, r3
 801fcc0:	681b      	ldr	r3, [r3, #0]
 801fcc2:	b29b      	uxth	r3, r3
 801fcc4:	029b      	lsls	r3, r3, #10
 801fcc6:	b29b      	uxth	r3, r3
 801fcc8:	4313      	orrs	r3, r2
 801fcca:	b29b      	uxth	r3, r3
 801fccc:	4a35      	ldr	r2, [pc, #212]	@ (801fda4 <USB_EPStartXfer+0x3e4>)
 801fcce:	4313      	orrs	r3, r2
 801fcd0:	b29a      	uxth	r2, r3
 801fcd2:	697b      	ldr	r3, [r7, #20]
 801fcd4:	801a      	strh	r2, [r3, #0]
 801fcd6:	e04a      	b.n	801fd6e <USB_EPStartXfer+0x3ae>
 801fcd8:	1d7b      	adds	r3, r7, #5
 801fcda:	33ff      	adds	r3, #255	@ 0xff
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d108      	bne.n	801fcf4 <USB_EPStartXfer+0x334>
 801fce2:	697b      	ldr	r3, [r7, #20]
 801fce4:	881b      	ldrh	r3, [r3, #0]
 801fce6:	b29b      	uxth	r3, r3
 801fce8:	4a2e      	ldr	r2, [pc, #184]	@ (801fda4 <USB_EPStartXfer+0x3e4>)
 801fcea:	4313      	orrs	r3, r2
 801fcec:	b29a      	uxth	r2, r3
 801fcee:	697b      	ldr	r3, [r7, #20]
 801fcf0:	801a      	strh	r2, [r3, #0]
 801fcf2:	e03c      	b.n	801fd6e <USB_EPStartXfer+0x3ae>
 801fcf4:	1d7b      	adds	r3, r7, #5
 801fcf6:	33ff      	adds	r3, #255	@ 0xff
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	085b      	lsrs	r3, r3, #1
 801fcfc:	21fc      	movs	r1, #252	@ 0xfc
 801fcfe:	187a      	adds	r2, r7, r1
 801fd00:	6013      	str	r3, [r2, #0]
 801fd02:	1d7b      	adds	r3, r7, #5
 801fd04:	33ff      	adds	r3, #255	@ 0xff
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	2201      	movs	r2, #1
 801fd0a:	4013      	ands	r3, r2
 801fd0c:	d004      	beq.n	801fd18 <USB_EPStartXfer+0x358>
 801fd0e:	187b      	adds	r3, r7, r1
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	3301      	adds	r3, #1
 801fd14:	187a      	adds	r2, r7, r1
 801fd16:	6013      	str	r3, [r2, #0]
 801fd18:	697b      	ldr	r3, [r7, #20]
 801fd1a:	881b      	ldrh	r3, [r3, #0]
 801fd1c:	b29a      	uxth	r2, r3
 801fd1e:	23fc      	movs	r3, #252	@ 0xfc
 801fd20:	18fb      	adds	r3, r7, r3
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	b29b      	uxth	r3, r3
 801fd26:	029b      	lsls	r3, r3, #10
 801fd28:	b29b      	uxth	r3, r3
 801fd2a:	4313      	orrs	r3, r2
 801fd2c:	b29a      	uxth	r2, r3
 801fd2e:	697b      	ldr	r3, [r7, #20]
 801fd30:	801a      	strh	r2, [r3, #0]
 801fd32:	e01c      	b.n	801fd6e <USB_EPStartXfer+0x3ae>
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	785b      	ldrb	r3, [r3, #1]
 801fd38:	2b01      	cmp	r3, #1
 801fd3a:	d118      	bne.n	801fd6e <USB_EPStartXfer+0x3ae>
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	623b      	str	r3, [r7, #32]
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	2250      	movs	r2, #80	@ 0x50
 801fd44:	5a9b      	ldrh	r3, [r3, r2]
 801fd46:	b29b      	uxth	r3, r3
 801fd48:	001a      	movs	r2, r3
 801fd4a:	6a3b      	ldr	r3, [r7, #32]
 801fd4c:	189b      	adds	r3, r3, r2
 801fd4e:	623b      	str	r3, [r7, #32]
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	781b      	ldrb	r3, [r3, #0]
 801fd54:	00da      	lsls	r2, r3, #3
 801fd56:	6a3b      	ldr	r3, [r7, #32]
 801fd58:	18d3      	adds	r3, r2, r3
 801fd5a:	4a0e      	ldr	r2, [pc, #56]	@ (801fd94 <USB_EPStartXfer+0x3d4>)
 801fd5c:	4694      	mov	ip, r2
 801fd5e:	4463      	add	r3, ip
 801fd60:	61fb      	str	r3, [r7, #28]
 801fd62:	1d7b      	adds	r3, r7, #5
 801fd64:	33ff      	adds	r3, #255	@ 0xff
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	b29a      	uxth	r2, r3
 801fd6a:	69fb      	ldr	r3, [r7, #28]
 801fd6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801fd6e:	2076      	movs	r0, #118	@ 0x76
 801fd70:	183b      	adds	r3, r7, r0
 801fd72:	683a      	ldr	r2, [r7, #0]
 801fd74:	8912      	ldrh	r2, [r2, #8]
 801fd76:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fd78:	683b      	ldr	r3, [r7, #0]
 801fd7a:	6959      	ldr	r1, [r3, #20]
 801fd7c:	1d7b      	adds	r3, r7, #5
 801fd7e:	33ff      	adds	r3, #255	@ 0xff
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	b29c      	uxth	r4, r3
 801fd84:	183b      	adds	r3, r7, r0
 801fd86:	881a      	ldrh	r2, [r3, #0]
 801fd88:	6878      	ldr	r0, [r7, #4]
 801fd8a:	0023      	movs	r3, r4
 801fd8c:	f001 f88a 	bl	8020ea4 <USB_WritePMA>
 801fd90:	e329      	b.n	80203e6 <USB_EPStartXfer+0xa26>
 801fd92:	46c0      	nop			@ (mov r8, r8)
 801fd94:	00000402 	.word	0x00000402
 801fd98:	ffff8f8f 	.word	0xffff8f8f
 801fd9c:	ffff8180 	.word	0xffff8180
 801fda0:	00000406 	.word	0x00000406
 801fda4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801fda8:	683b      	ldr	r3, [r7, #0]
 801fdaa:	785b      	ldrb	r3, [r3, #1]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d000      	beq.n	801fdb2 <USB_EPStartXfer+0x3f2>
 801fdb0:	e070      	b.n	801fe94 <USB_EPStartXfer+0x4d4>
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	2250      	movs	r2, #80	@ 0x50
 801fdba:	5a9b      	ldrh	r3, [r3, r2]
 801fdbc:	b29b      	uxth	r3, r3
 801fdbe:	001a      	movs	r2, r3
 801fdc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fdc2:	189b      	adds	r3, r3, r2
 801fdc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	00da      	lsls	r2, r3, #3
 801fdcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fdce:	18d3      	adds	r3, r2, r3
 801fdd0:	4acd      	ldr	r2, [pc, #820]	@ (8020108 <USB_EPStartXfer+0x748>)
 801fdd2:	4694      	mov	ip, r2
 801fdd4:	4463      	add	r3, ip
 801fdd6:	647b      	str	r3, [r7, #68]	@ 0x44
 801fdd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fdda:	881b      	ldrh	r3, [r3, #0]
 801fddc:	b29b      	uxth	r3, r3
 801fdde:	059b      	lsls	r3, r3, #22
 801fde0:	0d9b      	lsrs	r3, r3, #22
 801fde2:	b29a      	uxth	r2, r3
 801fde4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fde6:	801a      	strh	r2, [r3, #0]
 801fde8:	1d7b      	adds	r3, r7, #5
 801fdea:	33ff      	adds	r3, #255	@ 0xff
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	2b3e      	cmp	r3, #62	@ 0x3e
 801fdf0:	d922      	bls.n	801fe38 <USB_EPStartXfer+0x478>
 801fdf2:	1d7b      	adds	r3, r7, #5
 801fdf4:	33ff      	adds	r3, #255	@ 0xff
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	095b      	lsrs	r3, r3, #5
 801fdfa:	21f8      	movs	r1, #248	@ 0xf8
 801fdfc:	187a      	adds	r2, r7, r1
 801fdfe:	6013      	str	r3, [r2, #0]
 801fe00:	1d7b      	adds	r3, r7, #5
 801fe02:	33ff      	adds	r3, #255	@ 0xff
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	221f      	movs	r2, #31
 801fe08:	4013      	ands	r3, r2
 801fe0a:	d104      	bne.n	801fe16 <USB_EPStartXfer+0x456>
 801fe0c:	187b      	adds	r3, r7, r1
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	3b01      	subs	r3, #1
 801fe12:	187a      	adds	r2, r7, r1
 801fe14:	6013      	str	r3, [r2, #0]
 801fe16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe18:	881b      	ldrh	r3, [r3, #0]
 801fe1a:	b29a      	uxth	r2, r3
 801fe1c:	23f8      	movs	r3, #248	@ 0xf8
 801fe1e:	18fb      	adds	r3, r7, r3
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	b29b      	uxth	r3, r3
 801fe24:	029b      	lsls	r3, r3, #10
 801fe26:	b29b      	uxth	r3, r3
 801fe28:	4313      	orrs	r3, r2
 801fe2a:	b29b      	uxth	r3, r3
 801fe2c:	4ab7      	ldr	r2, [pc, #732]	@ (802010c <USB_EPStartXfer+0x74c>)
 801fe2e:	4313      	orrs	r3, r2
 801fe30:	b29a      	uxth	r2, r3
 801fe32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe34:	801a      	strh	r2, [r3, #0]
 801fe36:	e04a      	b.n	801fece <USB_EPStartXfer+0x50e>
 801fe38:	1d7b      	adds	r3, r7, #5
 801fe3a:	33ff      	adds	r3, #255	@ 0xff
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d108      	bne.n	801fe54 <USB_EPStartXfer+0x494>
 801fe42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe44:	881b      	ldrh	r3, [r3, #0]
 801fe46:	b29b      	uxth	r3, r3
 801fe48:	4ab0      	ldr	r2, [pc, #704]	@ (802010c <USB_EPStartXfer+0x74c>)
 801fe4a:	4313      	orrs	r3, r2
 801fe4c:	b29a      	uxth	r2, r3
 801fe4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe50:	801a      	strh	r2, [r3, #0]
 801fe52:	e03c      	b.n	801fece <USB_EPStartXfer+0x50e>
 801fe54:	1d7b      	adds	r3, r7, #5
 801fe56:	33ff      	adds	r3, #255	@ 0xff
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	085b      	lsrs	r3, r3, #1
 801fe5c:	21f8      	movs	r1, #248	@ 0xf8
 801fe5e:	187a      	adds	r2, r7, r1
 801fe60:	6013      	str	r3, [r2, #0]
 801fe62:	1d7b      	adds	r3, r7, #5
 801fe64:	33ff      	adds	r3, #255	@ 0xff
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	2201      	movs	r2, #1
 801fe6a:	4013      	ands	r3, r2
 801fe6c:	d004      	beq.n	801fe78 <USB_EPStartXfer+0x4b8>
 801fe6e:	187b      	adds	r3, r7, r1
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	3301      	adds	r3, #1
 801fe74:	187a      	adds	r2, r7, r1
 801fe76:	6013      	str	r3, [r2, #0]
 801fe78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe7a:	881b      	ldrh	r3, [r3, #0]
 801fe7c:	b29a      	uxth	r2, r3
 801fe7e:	23f8      	movs	r3, #248	@ 0xf8
 801fe80:	18fb      	adds	r3, r7, r3
 801fe82:	681b      	ldr	r3, [r3, #0]
 801fe84:	b29b      	uxth	r3, r3
 801fe86:	029b      	lsls	r3, r3, #10
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	4313      	orrs	r3, r2
 801fe8c:	b29a      	uxth	r2, r3
 801fe8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801fe90:	801a      	strh	r2, [r3, #0]
 801fe92:	e01c      	b.n	801fece <USB_EPStartXfer+0x50e>
 801fe94:	683b      	ldr	r3, [r7, #0]
 801fe96:	785b      	ldrb	r3, [r3, #1]
 801fe98:	2b01      	cmp	r3, #1
 801fe9a:	d118      	bne.n	801fece <USB_EPStartXfer+0x50e>
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	653b      	str	r3, [r7, #80]	@ 0x50
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	2250      	movs	r2, #80	@ 0x50
 801fea4:	5a9b      	ldrh	r3, [r3, r2]
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	001a      	movs	r2, r3
 801feaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801feac:	189b      	adds	r3, r3, r2
 801feae:	653b      	str	r3, [r7, #80]	@ 0x50
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	781b      	ldrb	r3, [r3, #0]
 801feb4:	00da      	lsls	r2, r3, #3
 801feb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801feb8:	18d3      	adds	r3, r2, r3
 801feba:	4a93      	ldr	r2, [pc, #588]	@ (8020108 <USB_EPStartXfer+0x748>)
 801febc:	4694      	mov	ip, r2
 801febe:	4463      	add	r3, ip
 801fec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fec2:	1d7b      	adds	r3, r7, #5
 801fec4:	33ff      	adds	r3, #255	@ 0xff
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	b29a      	uxth	r2, r3
 801feca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801fece:	2076      	movs	r0, #118	@ 0x76
 801fed0:	183b      	adds	r3, r7, r0
 801fed2:	683a      	ldr	r2, [r7, #0]
 801fed4:	8912      	ldrh	r2, [r2, #8]
 801fed6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fed8:	683b      	ldr	r3, [r7, #0]
 801feda:	6959      	ldr	r1, [r3, #20]
 801fedc:	1d7b      	adds	r3, r7, #5
 801fede:	33ff      	adds	r3, #255	@ 0xff
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	b29c      	uxth	r4, r3
 801fee4:	183b      	adds	r3, r7, r0
 801fee6:	881a      	ldrh	r2, [r3, #0]
 801fee8:	6878      	ldr	r0, [r7, #4]
 801feea:	0023      	movs	r3, r4
 801feec:	f000 ffda 	bl	8020ea4 <USB_WritePMA>
            ep->xfer_buff += len;
 801fef0:	683b      	ldr	r3, [r7, #0]
 801fef2:	695a      	ldr	r2, [r3, #20]
 801fef4:	1d7b      	adds	r3, r7, #5
 801fef6:	33ff      	adds	r3, #255	@ 0xff
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	18d2      	adds	r2, r2, r3
 801fefc:	683b      	ldr	r3, [r7, #0]
 801fefe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801ff00:	683b      	ldr	r3, [r7, #0]
 801ff02:	6a1a      	ldr	r2, [r3, #32]
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	691b      	ldr	r3, [r3, #16]
 801ff08:	429a      	cmp	r2, r3
 801ff0a:	d908      	bls.n	801ff1e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801ff0c:	683b      	ldr	r3, [r7, #0]
 801ff0e:	6a1a      	ldr	r2, [r3, #32]
 801ff10:	1d7b      	adds	r3, r7, #5
 801ff12:	33ff      	adds	r3, #255	@ 0xff
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	1ad2      	subs	r2, r2, r3
 801ff18:	683b      	ldr	r3, [r7, #0]
 801ff1a:	621a      	str	r2, [r3, #32]
 801ff1c:	e007      	b.n	801ff2e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801ff1e:	683b      	ldr	r3, [r7, #0]
 801ff20:	6a1b      	ldr	r3, [r3, #32]
 801ff22:	1d7a      	adds	r2, r7, #5
 801ff24:	32ff      	adds	r2, #255	@ 0xff
 801ff26:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801ff28:	683b      	ldr	r3, [r7, #0]
 801ff2a:	2200      	movs	r2, #0
 801ff2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	643b      	str	r3, [r7, #64]	@ 0x40
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	785b      	ldrb	r3, [r3, #1]
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	d000      	beq.n	801ff3c <USB_EPStartXfer+0x57c>
 801ff3a:	e070      	b.n	802001e <USB_EPStartXfer+0x65e>
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	2250      	movs	r2, #80	@ 0x50
 801ff44:	5a9b      	ldrh	r3, [r3, r2]
 801ff46:	b29b      	uxth	r3, r3
 801ff48:	001a      	movs	r2, r3
 801ff4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff4c:	189b      	adds	r3, r3, r2
 801ff4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ff50:	683b      	ldr	r3, [r7, #0]
 801ff52:	781b      	ldrb	r3, [r3, #0]
 801ff54:	00da      	lsls	r2, r3, #3
 801ff56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff58:	18d3      	adds	r3, r2, r3
 801ff5a:	4a6d      	ldr	r2, [pc, #436]	@ (8020110 <USB_EPStartXfer+0x750>)
 801ff5c:	4694      	mov	ip, r2
 801ff5e:	4463      	add	r3, ip
 801ff60:	637b      	str	r3, [r7, #52]	@ 0x34
 801ff62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff64:	881b      	ldrh	r3, [r3, #0]
 801ff66:	b29b      	uxth	r3, r3
 801ff68:	059b      	lsls	r3, r3, #22
 801ff6a:	0d9b      	lsrs	r3, r3, #22
 801ff6c:	b29a      	uxth	r2, r3
 801ff6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ff70:	801a      	strh	r2, [r3, #0]
 801ff72:	1d7b      	adds	r3, r7, #5
 801ff74:	33ff      	adds	r3, #255	@ 0xff
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff7a:	d922      	bls.n	801ffc2 <USB_EPStartXfer+0x602>
 801ff7c:	1d7b      	adds	r3, r7, #5
 801ff7e:	33ff      	adds	r3, #255	@ 0xff
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	095b      	lsrs	r3, r3, #5
 801ff84:	21f4      	movs	r1, #244	@ 0xf4
 801ff86:	187a      	adds	r2, r7, r1
 801ff88:	6013      	str	r3, [r2, #0]
 801ff8a:	1d7b      	adds	r3, r7, #5
 801ff8c:	33ff      	adds	r3, #255	@ 0xff
 801ff8e:	681b      	ldr	r3, [r3, #0]
 801ff90:	221f      	movs	r2, #31
 801ff92:	4013      	ands	r3, r2
 801ff94:	d104      	bne.n	801ffa0 <USB_EPStartXfer+0x5e0>
 801ff96:	187b      	adds	r3, r7, r1
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	3b01      	subs	r3, #1
 801ff9c:	187a      	adds	r2, r7, r1
 801ff9e:	6013      	str	r3, [r2, #0]
 801ffa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffa2:	881b      	ldrh	r3, [r3, #0]
 801ffa4:	b29a      	uxth	r2, r3
 801ffa6:	23f4      	movs	r3, #244	@ 0xf4
 801ffa8:	18fb      	adds	r3, r7, r3
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	b29b      	uxth	r3, r3
 801ffae:	029b      	lsls	r3, r3, #10
 801ffb0:	b29b      	uxth	r3, r3
 801ffb2:	4313      	orrs	r3, r2
 801ffb4:	b29b      	uxth	r3, r3
 801ffb6:	4a55      	ldr	r2, [pc, #340]	@ (802010c <USB_EPStartXfer+0x74c>)
 801ffb8:	4313      	orrs	r3, r2
 801ffba:	b29a      	uxth	r2, r3
 801ffbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffbe:	801a      	strh	r2, [r3, #0]
 801ffc0:	e048      	b.n	8020054 <USB_EPStartXfer+0x694>
 801ffc2:	1d7b      	adds	r3, r7, #5
 801ffc4:	33ff      	adds	r3, #255	@ 0xff
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d108      	bne.n	801ffde <USB_EPStartXfer+0x61e>
 801ffcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffce:	881b      	ldrh	r3, [r3, #0]
 801ffd0:	b29b      	uxth	r3, r3
 801ffd2:	4a4e      	ldr	r2, [pc, #312]	@ (802010c <USB_EPStartXfer+0x74c>)
 801ffd4:	4313      	orrs	r3, r2
 801ffd6:	b29a      	uxth	r2, r3
 801ffd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffda:	801a      	strh	r2, [r3, #0]
 801ffdc:	e03a      	b.n	8020054 <USB_EPStartXfer+0x694>
 801ffde:	1d7b      	adds	r3, r7, #5
 801ffe0:	33ff      	adds	r3, #255	@ 0xff
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	085b      	lsrs	r3, r3, #1
 801ffe6:	21f4      	movs	r1, #244	@ 0xf4
 801ffe8:	187a      	adds	r2, r7, r1
 801ffea:	6013      	str	r3, [r2, #0]
 801ffec:	1d7b      	adds	r3, r7, #5
 801ffee:	33ff      	adds	r3, #255	@ 0xff
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	2201      	movs	r2, #1
 801fff4:	4013      	ands	r3, r2
 801fff6:	d004      	beq.n	8020002 <USB_EPStartXfer+0x642>
 801fff8:	187b      	adds	r3, r7, r1
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	3301      	adds	r3, #1
 801fffe:	187a      	adds	r2, r7, r1
 8020000:	6013      	str	r3, [r2, #0]
 8020002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020004:	881b      	ldrh	r3, [r3, #0]
 8020006:	b29a      	uxth	r2, r3
 8020008:	23f4      	movs	r3, #244	@ 0xf4
 802000a:	18fb      	adds	r3, r7, r3
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	b29b      	uxth	r3, r3
 8020010:	029b      	lsls	r3, r3, #10
 8020012:	b29b      	uxth	r3, r3
 8020014:	4313      	orrs	r3, r2
 8020016:	b29a      	uxth	r2, r3
 8020018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802001a:	801a      	strh	r2, [r3, #0]
 802001c:	e01a      	b.n	8020054 <USB_EPStartXfer+0x694>
 802001e:	683b      	ldr	r3, [r7, #0]
 8020020:	785b      	ldrb	r3, [r3, #1]
 8020022:	2b01      	cmp	r3, #1
 8020024:	d116      	bne.n	8020054 <USB_EPStartXfer+0x694>
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	2250      	movs	r2, #80	@ 0x50
 802002a:	5a9b      	ldrh	r3, [r3, r2]
 802002c:	b29b      	uxth	r3, r3
 802002e:	001a      	movs	r2, r3
 8020030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020032:	189b      	adds	r3, r3, r2
 8020034:	643b      	str	r3, [r7, #64]	@ 0x40
 8020036:	683b      	ldr	r3, [r7, #0]
 8020038:	781b      	ldrb	r3, [r3, #0]
 802003a:	00da      	lsls	r2, r3, #3
 802003c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802003e:	18d3      	adds	r3, r2, r3
 8020040:	4a33      	ldr	r2, [pc, #204]	@ (8020110 <USB_EPStartXfer+0x750>)
 8020042:	4694      	mov	ip, r2
 8020044:	4463      	add	r3, ip
 8020046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020048:	1d7b      	adds	r3, r7, #5
 802004a:	33ff      	adds	r3, #255	@ 0xff
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	b29a      	uxth	r2, r3
 8020050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020052:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8020054:	2076      	movs	r0, #118	@ 0x76
 8020056:	183b      	adds	r3, r7, r0
 8020058:	683a      	ldr	r2, [r7, #0]
 802005a:	8952      	ldrh	r2, [r2, #10]
 802005c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	6959      	ldr	r1, [r3, #20]
 8020062:	1d7b      	adds	r3, r7, #5
 8020064:	33ff      	adds	r3, #255	@ 0xff
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	b29c      	uxth	r4, r3
 802006a:	183b      	adds	r3, r7, r0
 802006c:	881a      	ldrh	r2, [r3, #0]
 802006e:	6878      	ldr	r0, [r7, #4]
 8020070:	0023      	movs	r3, r4
 8020072:	f000 ff17 	bl	8020ea4 <USB_WritePMA>
 8020076:	e1b6      	b.n	80203e6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020078:	683b      	ldr	r3, [r7, #0]
 802007a:	6a1b      	ldr	r3, [r3, #32]
 802007c:	1d7a      	adds	r2, r7, #5
 802007e:	32ff      	adds	r2, #255	@ 0xff
 8020080:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8020082:	687a      	ldr	r2, [r7, #4]
 8020084:	683b      	ldr	r3, [r7, #0]
 8020086:	781b      	ldrb	r3, [r3, #0]
 8020088:	009b      	lsls	r3, r3, #2
 802008a:	18d3      	adds	r3, r2, r3
 802008c:	881b      	ldrh	r3, [r3, #0]
 802008e:	b29a      	uxth	r2, r3
 8020090:	2062      	movs	r0, #98	@ 0x62
 8020092:	183b      	adds	r3, r7, r0
 8020094:	491f      	ldr	r1, [pc, #124]	@ (8020114 <USB_EPStartXfer+0x754>)
 8020096:	400a      	ands	r2, r1
 8020098:	801a      	strh	r2, [r3, #0]
 802009a:	687a      	ldr	r2, [r7, #4]
 802009c:	683b      	ldr	r3, [r7, #0]
 802009e:	781b      	ldrb	r3, [r3, #0]
 80200a0:	009b      	lsls	r3, r3, #2
 80200a2:	18d3      	adds	r3, r2, r3
 80200a4:	183a      	adds	r2, r7, r0
 80200a6:	8812      	ldrh	r2, [r2, #0]
 80200a8:	491b      	ldr	r1, [pc, #108]	@ (8020118 <USB_EPStartXfer+0x758>)
 80200aa:	430a      	orrs	r2, r1
 80200ac:	b292      	uxth	r2, r2
 80200ae:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	2250      	movs	r2, #80	@ 0x50
 80200b8:	5a9b      	ldrh	r3, [r3, r2]
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	001a      	movs	r2, r3
 80200be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80200c0:	189b      	adds	r3, r3, r2
 80200c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80200c4:	683b      	ldr	r3, [r7, #0]
 80200c6:	781b      	ldrb	r3, [r3, #0]
 80200c8:	00da      	lsls	r2, r3, #3
 80200ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80200cc:	18d3      	adds	r3, r2, r3
 80200ce:	4a0e      	ldr	r2, [pc, #56]	@ (8020108 <USB_EPStartXfer+0x748>)
 80200d0:	4694      	mov	ip, r2
 80200d2:	4463      	add	r3, ip
 80200d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80200d6:	1d7b      	adds	r3, r7, #5
 80200d8:	33ff      	adds	r3, #255	@ 0xff
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	b29a      	uxth	r2, r3
 80200de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80200e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80200e2:	2076      	movs	r0, #118	@ 0x76
 80200e4:	183b      	adds	r3, r7, r0
 80200e6:	683a      	ldr	r2, [r7, #0]
 80200e8:	8912      	ldrh	r2, [r2, #8]
 80200ea:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80200ec:	683b      	ldr	r3, [r7, #0]
 80200ee:	6959      	ldr	r1, [r3, #20]
 80200f0:	1d7b      	adds	r3, r7, #5
 80200f2:	33ff      	adds	r3, #255	@ 0xff
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	b29c      	uxth	r4, r3
 80200f8:	183b      	adds	r3, r7, r0
 80200fa:	881a      	ldrh	r2, [r3, #0]
 80200fc:	6878      	ldr	r0, [r7, #4]
 80200fe:	0023      	movs	r3, r4
 8020100:	f000 fed0 	bl	8020ea4 <USB_WritePMA>
 8020104:	e16f      	b.n	80203e6 <USB_EPStartXfer+0xa26>
 8020106:	46c0      	nop			@ (mov r8, r8)
 8020108:	00000402 	.word	0x00000402
 802010c:	ffff8000 	.word	0xffff8000
 8020110:	00000406 	.word	0x00000406
 8020114:	ffff8e8f 	.word	0xffff8e8f
 8020118:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 802011c:	683b      	ldr	r3, [r7, #0]
 802011e:	6a1a      	ldr	r2, [r3, #32]
 8020120:	1d7b      	adds	r3, r7, #5
 8020122:	33ff      	adds	r3, #255	@ 0xff
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	1ad2      	subs	r2, r2, r3
 8020128:	683b      	ldr	r3, [r7, #0]
 802012a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802012c:	687a      	ldr	r2, [r7, #4]
 802012e:	683b      	ldr	r3, [r7, #0]
 8020130:	781b      	ldrb	r3, [r3, #0]
 8020132:	009b      	lsls	r3, r3, #2
 8020134:	18d3      	adds	r3, r2, r3
 8020136:	881b      	ldrh	r3, [r3, #0]
 8020138:	b29b      	uxth	r3, r3
 802013a:	001a      	movs	r2, r3
 802013c:	2340      	movs	r3, #64	@ 0x40
 802013e:	4013      	ands	r3, r2
 8020140:	d100      	bne.n	8020144 <USB_EPStartXfer+0x784>
 8020142:	e0a4      	b.n	802028e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	673b      	str	r3, [r7, #112]	@ 0x70
 8020148:	683b      	ldr	r3, [r7, #0]
 802014a:	785b      	ldrb	r3, [r3, #1]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d000      	beq.n	8020152 <USB_EPStartXfer+0x792>
 8020150:	e070      	b.n	8020234 <USB_EPStartXfer+0x874>
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	2250      	movs	r2, #80	@ 0x50
 802015a:	5a9b      	ldrh	r3, [r3, r2]
 802015c:	b29b      	uxth	r3, r3
 802015e:	001a      	movs	r2, r3
 8020160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020162:	189b      	adds	r3, r3, r2
 8020164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	781b      	ldrb	r3, [r3, #0]
 802016a:	00da      	lsls	r2, r3, #3
 802016c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802016e:	18d3      	adds	r3, r2, r3
 8020170:	4abc      	ldr	r2, [pc, #752]	@ (8020464 <USB_EPStartXfer+0xaa4>)
 8020172:	4694      	mov	ip, r2
 8020174:	4463      	add	r3, ip
 8020176:	667b      	str	r3, [r7, #100]	@ 0x64
 8020178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802017a:	881b      	ldrh	r3, [r3, #0]
 802017c:	b29b      	uxth	r3, r3
 802017e:	059b      	lsls	r3, r3, #22
 8020180:	0d9b      	lsrs	r3, r3, #22
 8020182:	b29a      	uxth	r2, r3
 8020184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020186:	801a      	strh	r2, [r3, #0]
 8020188:	1d7b      	adds	r3, r7, #5
 802018a:	33ff      	adds	r3, #255	@ 0xff
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020190:	d922      	bls.n	80201d8 <USB_EPStartXfer+0x818>
 8020192:	1d7b      	adds	r3, r7, #5
 8020194:	33ff      	adds	r3, #255	@ 0xff
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	095b      	lsrs	r3, r3, #5
 802019a:	21f0      	movs	r1, #240	@ 0xf0
 802019c:	187a      	adds	r2, r7, r1
 802019e:	6013      	str	r3, [r2, #0]
 80201a0:	1d7b      	adds	r3, r7, #5
 80201a2:	33ff      	adds	r3, #255	@ 0xff
 80201a4:	681b      	ldr	r3, [r3, #0]
 80201a6:	221f      	movs	r2, #31
 80201a8:	4013      	ands	r3, r2
 80201aa:	d104      	bne.n	80201b6 <USB_EPStartXfer+0x7f6>
 80201ac:	187b      	adds	r3, r7, r1
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	3b01      	subs	r3, #1
 80201b2:	187a      	adds	r2, r7, r1
 80201b4:	6013      	str	r3, [r2, #0]
 80201b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80201b8:	881b      	ldrh	r3, [r3, #0]
 80201ba:	b29a      	uxth	r2, r3
 80201bc:	23f0      	movs	r3, #240	@ 0xf0
 80201be:	18fb      	adds	r3, r7, r3
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	b29b      	uxth	r3, r3
 80201c4:	029b      	lsls	r3, r3, #10
 80201c6:	b29b      	uxth	r3, r3
 80201c8:	4313      	orrs	r3, r2
 80201ca:	b29b      	uxth	r3, r3
 80201cc:	4aa6      	ldr	r2, [pc, #664]	@ (8020468 <USB_EPStartXfer+0xaa8>)
 80201ce:	4313      	orrs	r3, r2
 80201d0:	b29a      	uxth	r2, r3
 80201d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80201d4:	801a      	strh	r2, [r3, #0]
 80201d6:	e048      	b.n	802026a <USB_EPStartXfer+0x8aa>
 80201d8:	1d7b      	adds	r3, r7, #5
 80201da:	33ff      	adds	r3, #255	@ 0xff
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d108      	bne.n	80201f4 <USB_EPStartXfer+0x834>
 80201e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80201e4:	881b      	ldrh	r3, [r3, #0]
 80201e6:	b29b      	uxth	r3, r3
 80201e8:	4a9f      	ldr	r2, [pc, #636]	@ (8020468 <USB_EPStartXfer+0xaa8>)
 80201ea:	4313      	orrs	r3, r2
 80201ec:	b29a      	uxth	r2, r3
 80201ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80201f0:	801a      	strh	r2, [r3, #0]
 80201f2:	e03a      	b.n	802026a <USB_EPStartXfer+0x8aa>
 80201f4:	1d7b      	adds	r3, r7, #5
 80201f6:	33ff      	adds	r3, #255	@ 0xff
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	085b      	lsrs	r3, r3, #1
 80201fc:	21f0      	movs	r1, #240	@ 0xf0
 80201fe:	187a      	adds	r2, r7, r1
 8020200:	6013      	str	r3, [r2, #0]
 8020202:	1d7b      	adds	r3, r7, #5
 8020204:	33ff      	adds	r3, #255	@ 0xff
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	2201      	movs	r2, #1
 802020a:	4013      	ands	r3, r2
 802020c:	d004      	beq.n	8020218 <USB_EPStartXfer+0x858>
 802020e:	187b      	adds	r3, r7, r1
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	3301      	adds	r3, #1
 8020214:	187a      	adds	r2, r7, r1
 8020216:	6013      	str	r3, [r2, #0]
 8020218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802021a:	881b      	ldrh	r3, [r3, #0]
 802021c:	b29a      	uxth	r2, r3
 802021e:	23f0      	movs	r3, #240	@ 0xf0
 8020220:	18fb      	adds	r3, r7, r3
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	b29b      	uxth	r3, r3
 8020226:	029b      	lsls	r3, r3, #10
 8020228:	b29b      	uxth	r3, r3
 802022a:	4313      	orrs	r3, r2
 802022c:	b29a      	uxth	r2, r3
 802022e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020230:	801a      	strh	r2, [r3, #0]
 8020232:	e01a      	b.n	802026a <USB_EPStartXfer+0x8aa>
 8020234:	683b      	ldr	r3, [r7, #0]
 8020236:	785b      	ldrb	r3, [r3, #1]
 8020238:	2b01      	cmp	r3, #1
 802023a:	d116      	bne.n	802026a <USB_EPStartXfer+0x8aa>
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	2250      	movs	r2, #80	@ 0x50
 8020240:	5a9b      	ldrh	r3, [r3, r2]
 8020242:	b29b      	uxth	r3, r3
 8020244:	001a      	movs	r2, r3
 8020246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020248:	189b      	adds	r3, r3, r2
 802024a:	673b      	str	r3, [r7, #112]	@ 0x70
 802024c:	683b      	ldr	r3, [r7, #0]
 802024e:	781b      	ldrb	r3, [r3, #0]
 8020250:	00da      	lsls	r2, r3, #3
 8020252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020254:	18d3      	adds	r3, r2, r3
 8020256:	4a83      	ldr	r2, [pc, #524]	@ (8020464 <USB_EPStartXfer+0xaa4>)
 8020258:	4694      	mov	ip, r2
 802025a:	4463      	add	r3, ip
 802025c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802025e:	1d7b      	adds	r3, r7, #5
 8020260:	33ff      	adds	r3, #255	@ 0xff
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	b29a      	uxth	r2, r3
 8020266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020268:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 802026a:	2076      	movs	r0, #118	@ 0x76
 802026c:	183b      	adds	r3, r7, r0
 802026e:	683a      	ldr	r2, [r7, #0]
 8020270:	8952      	ldrh	r2, [r2, #10]
 8020272:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020274:	683b      	ldr	r3, [r7, #0]
 8020276:	6959      	ldr	r1, [r3, #20]
 8020278:	1d7b      	adds	r3, r7, #5
 802027a:	33ff      	adds	r3, #255	@ 0xff
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	b29c      	uxth	r4, r3
 8020280:	183b      	adds	r3, r7, r0
 8020282:	881a      	ldrh	r2, [r3, #0]
 8020284:	6878      	ldr	r0, [r7, #4]
 8020286:	0023      	movs	r3, r4
 8020288:	f000 fe0c 	bl	8020ea4 <USB_WritePMA>
 802028c:	e0ab      	b.n	80203e6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 802028e:	683b      	ldr	r3, [r7, #0]
 8020290:	785b      	ldrb	r3, [r3, #1]
 8020292:	2b00      	cmp	r3, #0
 8020294:	d000      	beq.n	8020298 <USB_EPStartXfer+0x8d8>
 8020296:	e070      	b.n	802037a <USB_EPStartXfer+0x9ba>
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	2250      	movs	r2, #80	@ 0x50
 80202a0:	5a9b      	ldrh	r3, [r3, r2]
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	001a      	movs	r2, r3
 80202a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80202a8:	189b      	adds	r3, r3, r2
 80202aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80202ac:	683b      	ldr	r3, [r7, #0]
 80202ae:	781b      	ldrb	r3, [r3, #0]
 80202b0:	00da      	lsls	r2, r3, #3
 80202b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80202b4:	18d3      	adds	r3, r2, r3
 80202b6:	4a6d      	ldr	r2, [pc, #436]	@ (802046c <USB_EPStartXfer+0xaac>)
 80202b8:	4694      	mov	ip, r2
 80202ba:	4463      	add	r3, ip
 80202bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80202be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80202c0:	881b      	ldrh	r3, [r3, #0]
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	059b      	lsls	r3, r3, #22
 80202c6:	0d9b      	lsrs	r3, r3, #22
 80202c8:	b29a      	uxth	r2, r3
 80202ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80202cc:	801a      	strh	r2, [r3, #0]
 80202ce:	1d7b      	adds	r3, r7, #5
 80202d0:	33ff      	adds	r3, #255	@ 0xff
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80202d6:	d922      	bls.n	802031e <USB_EPStartXfer+0x95e>
 80202d8:	1d7b      	adds	r3, r7, #5
 80202da:	33ff      	adds	r3, #255	@ 0xff
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	095b      	lsrs	r3, r3, #5
 80202e0:	21ec      	movs	r1, #236	@ 0xec
 80202e2:	187a      	adds	r2, r7, r1
 80202e4:	6013      	str	r3, [r2, #0]
 80202e6:	1d7b      	adds	r3, r7, #5
 80202e8:	33ff      	adds	r3, #255	@ 0xff
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	221f      	movs	r2, #31
 80202ee:	4013      	ands	r3, r2
 80202f0:	d104      	bne.n	80202fc <USB_EPStartXfer+0x93c>
 80202f2:	187b      	adds	r3, r7, r1
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	3b01      	subs	r3, #1
 80202f8:	187a      	adds	r2, r7, r1
 80202fa:	6013      	str	r3, [r2, #0]
 80202fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80202fe:	881b      	ldrh	r3, [r3, #0]
 8020300:	b29a      	uxth	r2, r3
 8020302:	23ec      	movs	r3, #236	@ 0xec
 8020304:	18fb      	adds	r3, r7, r3
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	b29b      	uxth	r3, r3
 802030a:	029b      	lsls	r3, r3, #10
 802030c:	b29b      	uxth	r3, r3
 802030e:	4313      	orrs	r3, r2
 8020310:	b29b      	uxth	r3, r3
 8020312:	4a55      	ldr	r2, [pc, #340]	@ (8020468 <USB_EPStartXfer+0xaa8>)
 8020314:	4313      	orrs	r3, r2
 8020316:	b29a      	uxth	r2, r3
 8020318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802031a:	801a      	strh	r2, [r3, #0]
 802031c:	e052      	b.n	80203c4 <USB_EPStartXfer+0xa04>
 802031e:	1d7b      	adds	r3, r7, #5
 8020320:	33ff      	adds	r3, #255	@ 0xff
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	2b00      	cmp	r3, #0
 8020326:	d108      	bne.n	802033a <USB_EPStartXfer+0x97a>
 8020328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802032a:	881b      	ldrh	r3, [r3, #0]
 802032c:	b29b      	uxth	r3, r3
 802032e:	4a4e      	ldr	r2, [pc, #312]	@ (8020468 <USB_EPStartXfer+0xaa8>)
 8020330:	4313      	orrs	r3, r2
 8020332:	b29a      	uxth	r2, r3
 8020334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020336:	801a      	strh	r2, [r3, #0]
 8020338:	e044      	b.n	80203c4 <USB_EPStartXfer+0xa04>
 802033a:	1d7b      	adds	r3, r7, #5
 802033c:	33ff      	adds	r3, #255	@ 0xff
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	085b      	lsrs	r3, r3, #1
 8020342:	21ec      	movs	r1, #236	@ 0xec
 8020344:	187a      	adds	r2, r7, r1
 8020346:	6013      	str	r3, [r2, #0]
 8020348:	1d7b      	adds	r3, r7, #5
 802034a:	33ff      	adds	r3, #255	@ 0xff
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	2201      	movs	r2, #1
 8020350:	4013      	ands	r3, r2
 8020352:	d004      	beq.n	802035e <USB_EPStartXfer+0x99e>
 8020354:	187b      	adds	r3, r7, r1
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	3301      	adds	r3, #1
 802035a:	187a      	adds	r2, r7, r1
 802035c:	6013      	str	r3, [r2, #0]
 802035e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020360:	881b      	ldrh	r3, [r3, #0]
 8020362:	b29a      	uxth	r2, r3
 8020364:	23ec      	movs	r3, #236	@ 0xec
 8020366:	18fb      	adds	r3, r7, r3
 8020368:	681b      	ldr	r3, [r3, #0]
 802036a:	b29b      	uxth	r3, r3
 802036c:	029b      	lsls	r3, r3, #10
 802036e:	b29b      	uxth	r3, r3
 8020370:	4313      	orrs	r3, r2
 8020372:	b29a      	uxth	r2, r3
 8020374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020376:	801a      	strh	r2, [r3, #0]
 8020378:	e024      	b.n	80203c4 <USB_EPStartXfer+0xa04>
 802037a:	683b      	ldr	r3, [r7, #0]
 802037c:	785b      	ldrb	r3, [r3, #1]
 802037e:	2b01      	cmp	r3, #1
 8020380:	d120      	bne.n	80203c4 <USB_EPStartXfer+0xa04>
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	2184      	movs	r1, #132	@ 0x84
 8020386:	187a      	adds	r2, r7, r1
 8020388:	6013      	str	r3, [r2, #0]
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	2250      	movs	r2, #80	@ 0x50
 802038e:	5a9b      	ldrh	r3, [r3, r2]
 8020390:	b29b      	uxth	r3, r3
 8020392:	001a      	movs	r2, r3
 8020394:	187b      	adds	r3, r7, r1
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	189b      	adds	r3, r3, r2
 802039a:	187a      	adds	r2, r7, r1
 802039c:	6013      	str	r3, [r2, #0]
 802039e:	683b      	ldr	r3, [r7, #0]
 80203a0:	781b      	ldrb	r3, [r3, #0]
 80203a2:	00da      	lsls	r2, r3, #3
 80203a4:	187b      	adds	r3, r7, r1
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	18d3      	adds	r3, r2, r3
 80203aa:	4a30      	ldr	r2, [pc, #192]	@ (802046c <USB_EPStartXfer+0xaac>)
 80203ac:	4694      	mov	ip, r2
 80203ae:	4463      	add	r3, ip
 80203b0:	2180      	movs	r1, #128	@ 0x80
 80203b2:	187a      	adds	r2, r7, r1
 80203b4:	6013      	str	r3, [r2, #0]
 80203b6:	1d7b      	adds	r3, r7, #5
 80203b8:	33ff      	adds	r3, #255	@ 0xff
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	b29a      	uxth	r2, r3
 80203be:	187b      	adds	r3, r7, r1
 80203c0:	681b      	ldr	r3, [r3, #0]
 80203c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80203c4:	2076      	movs	r0, #118	@ 0x76
 80203c6:	183b      	adds	r3, r7, r0
 80203c8:	683a      	ldr	r2, [r7, #0]
 80203ca:	8912      	ldrh	r2, [r2, #8]
 80203cc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	6959      	ldr	r1, [r3, #20]
 80203d2:	1d7b      	adds	r3, r7, #5
 80203d4:	33ff      	adds	r3, #255	@ 0xff
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	b29c      	uxth	r4, r3
 80203da:	183b      	adds	r3, r7, r0
 80203dc:	881a      	ldrh	r2, [r3, #0]
 80203de:	6878      	ldr	r0, [r7, #4]
 80203e0:	0023      	movs	r3, r4
 80203e2:	f000 fd5f 	bl	8020ea4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80203e6:	687a      	ldr	r2, [r7, #4]
 80203e8:	683b      	ldr	r3, [r7, #0]
 80203ea:	781b      	ldrb	r3, [r3, #0]
 80203ec:	009b      	lsls	r3, r3, #2
 80203ee:	18d3      	adds	r3, r2, r3
 80203f0:	881b      	ldrh	r3, [r3, #0]
 80203f2:	b29a      	uxth	r2, r3
 80203f4:	200a      	movs	r0, #10
 80203f6:	183b      	adds	r3, r7, r0
 80203f8:	491d      	ldr	r1, [pc, #116]	@ (8020470 <USB_EPStartXfer+0xab0>)
 80203fa:	400a      	ands	r2, r1
 80203fc:	801a      	strh	r2, [r3, #0]
 80203fe:	183b      	adds	r3, r7, r0
 8020400:	183a      	adds	r2, r7, r0
 8020402:	8812      	ldrh	r2, [r2, #0]
 8020404:	2110      	movs	r1, #16
 8020406:	404a      	eors	r2, r1
 8020408:	801a      	strh	r2, [r3, #0]
 802040a:	183b      	adds	r3, r7, r0
 802040c:	183a      	adds	r2, r7, r0
 802040e:	8812      	ldrh	r2, [r2, #0]
 8020410:	2120      	movs	r1, #32
 8020412:	404a      	eors	r2, r1
 8020414:	801a      	strh	r2, [r3, #0]
 8020416:	687a      	ldr	r2, [r7, #4]
 8020418:	683b      	ldr	r3, [r7, #0]
 802041a:	781b      	ldrb	r3, [r3, #0]
 802041c:	009b      	lsls	r3, r3, #2
 802041e:	18d3      	adds	r3, r2, r3
 8020420:	183a      	adds	r2, r7, r0
 8020422:	8812      	ldrh	r2, [r2, #0]
 8020424:	4913      	ldr	r1, [pc, #76]	@ (8020474 <USB_EPStartXfer+0xab4>)
 8020426:	430a      	orrs	r2, r1
 8020428:	b292      	uxth	r2, r2
 802042a:	801a      	strh	r2, [r3, #0]
 802042c:	f000 fbf4 	bl	8020c18 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	7b1b      	ldrb	r3, [r3, #12]
 8020434:	2b00      	cmp	r3, #0
 8020436:	d000      	beq.n	802043a <USB_EPStartXfer+0xa7a>
 8020438:	e0a9      	b.n	802058e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 802043a:	683b      	ldr	r3, [r7, #0]
 802043c:	699a      	ldr	r2, [r3, #24]
 802043e:	683b      	ldr	r3, [r7, #0]
 8020440:	691b      	ldr	r3, [r3, #16]
 8020442:	429a      	cmp	r2, r3
 8020444:	d918      	bls.n	8020478 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020446:	683b      	ldr	r3, [r7, #0]
 8020448:	691b      	ldr	r3, [r3, #16]
 802044a:	1d7a      	adds	r2, r7, #5
 802044c:	32ff      	adds	r2, #255	@ 0xff
 802044e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020450:	683b      	ldr	r3, [r7, #0]
 8020452:	699a      	ldr	r2, [r3, #24]
 8020454:	1d7b      	adds	r3, r7, #5
 8020456:	33ff      	adds	r3, #255	@ 0xff
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	1ad2      	subs	r2, r2, r3
 802045c:	683b      	ldr	r3, [r7, #0]
 802045e:	619a      	str	r2, [r3, #24]
 8020460:	e012      	b.n	8020488 <USB_EPStartXfer+0xac8>
 8020462:	46c0      	nop			@ (mov r8, r8)
 8020464:	00000406 	.word	0x00000406
 8020468:	ffff8000 	.word	0xffff8000
 802046c:	00000402 	.word	0x00000402
 8020470:	ffff8fbf 	.word	0xffff8fbf
 8020474:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020478:	683b      	ldr	r3, [r7, #0]
 802047a:	699b      	ldr	r3, [r3, #24]
 802047c:	1d7a      	adds	r2, r7, #5
 802047e:	32ff      	adds	r2, #255	@ 0xff
 8020480:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020482:	683b      	ldr	r3, [r7, #0]
 8020484:	2200      	movs	r2, #0
 8020486:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	2190      	movs	r1, #144	@ 0x90
 802048c:	187a      	adds	r2, r7, r1
 802048e:	6013      	str	r3, [r2, #0]
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	2250      	movs	r2, #80	@ 0x50
 8020494:	5a9b      	ldrh	r3, [r3, r2]
 8020496:	b29b      	uxth	r3, r3
 8020498:	001a      	movs	r2, r3
 802049a:	187b      	adds	r3, r7, r1
 802049c:	681b      	ldr	r3, [r3, #0]
 802049e:	189b      	adds	r3, r3, r2
 80204a0:	187a      	adds	r2, r7, r1
 80204a2:	6013      	str	r3, [r2, #0]
 80204a4:	683b      	ldr	r3, [r7, #0]
 80204a6:	781b      	ldrb	r3, [r3, #0]
 80204a8:	00da      	lsls	r2, r3, #3
 80204aa:	187b      	adds	r3, r7, r1
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	18d3      	adds	r3, r2, r3
 80204b0:	4acf      	ldr	r2, [pc, #828]	@ (80207f0 <USB_EPStartXfer+0xe30>)
 80204b2:	4694      	mov	ip, r2
 80204b4:	4463      	add	r3, ip
 80204b6:	218c      	movs	r1, #140	@ 0x8c
 80204b8:	187a      	adds	r2, r7, r1
 80204ba:	6013      	str	r3, [r2, #0]
 80204bc:	187b      	adds	r3, r7, r1
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	881b      	ldrh	r3, [r3, #0]
 80204c2:	b29b      	uxth	r3, r3
 80204c4:	059b      	lsls	r3, r3, #22
 80204c6:	0d9b      	lsrs	r3, r3, #22
 80204c8:	b29a      	uxth	r2, r3
 80204ca:	187b      	adds	r3, r7, r1
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	801a      	strh	r2, [r3, #0]
 80204d0:	1d7b      	adds	r3, r7, #5
 80204d2:	33ff      	adds	r3, #255	@ 0xff
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80204d8:	d925      	bls.n	8020526 <USB_EPStartXfer+0xb66>
 80204da:	1d7b      	adds	r3, r7, #5
 80204dc:	33ff      	adds	r3, #255	@ 0xff
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	095b      	lsrs	r3, r3, #5
 80204e2:	21e8      	movs	r1, #232	@ 0xe8
 80204e4:	187a      	adds	r2, r7, r1
 80204e6:	6013      	str	r3, [r2, #0]
 80204e8:	1d7b      	adds	r3, r7, #5
 80204ea:	33ff      	adds	r3, #255	@ 0xff
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	221f      	movs	r2, #31
 80204f0:	4013      	ands	r3, r2
 80204f2:	d104      	bne.n	80204fe <USB_EPStartXfer+0xb3e>
 80204f4:	187b      	adds	r3, r7, r1
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	3b01      	subs	r3, #1
 80204fa:	187a      	adds	r2, r7, r1
 80204fc:	6013      	str	r3, [r2, #0]
 80204fe:	218c      	movs	r1, #140	@ 0x8c
 8020500:	187b      	adds	r3, r7, r1
 8020502:	681b      	ldr	r3, [r3, #0]
 8020504:	881b      	ldrh	r3, [r3, #0]
 8020506:	b29a      	uxth	r2, r3
 8020508:	23e8      	movs	r3, #232	@ 0xe8
 802050a:	18fb      	adds	r3, r7, r3
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	b29b      	uxth	r3, r3
 8020510:	029b      	lsls	r3, r3, #10
 8020512:	b29b      	uxth	r3, r3
 8020514:	4313      	orrs	r3, r2
 8020516:	b29b      	uxth	r3, r3
 8020518:	4ab6      	ldr	r2, [pc, #728]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 802051a:	4313      	orrs	r3, r2
 802051c:	b29a      	uxth	r2, r3
 802051e:	187b      	adds	r3, r7, r1
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	801a      	strh	r2, [r3, #0]
 8020524:	e353      	b.n	8020bce <USB_EPStartXfer+0x120e>
 8020526:	1d7b      	adds	r3, r7, #5
 8020528:	33ff      	adds	r3, #255	@ 0xff
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	2b00      	cmp	r3, #0
 802052e:	d10b      	bne.n	8020548 <USB_EPStartXfer+0xb88>
 8020530:	218c      	movs	r1, #140	@ 0x8c
 8020532:	187b      	adds	r3, r7, r1
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	881b      	ldrh	r3, [r3, #0]
 8020538:	b29b      	uxth	r3, r3
 802053a:	4aae      	ldr	r2, [pc, #696]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 802053c:	4313      	orrs	r3, r2
 802053e:	b29a      	uxth	r2, r3
 8020540:	187b      	adds	r3, r7, r1
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	801a      	strh	r2, [r3, #0]
 8020546:	e342      	b.n	8020bce <USB_EPStartXfer+0x120e>
 8020548:	1d7b      	adds	r3, r7, #5
 802054a:	33ff      	adds	r3, #255	@ 0xff
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	085b      	lsrs	r3, r3, #1
 8020550:	21e8      	movs	r1, #232	@ 0xe8
 8020552:	187a      	adds	r2, r7, r1
 8020554:	6013      	str	r3, [r2, #0]
 8020556:	1d7b      	adds	r3, r7, #5
 8020558:	33ff      	adds	r3, #255	@ 0xff
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	2201      	movs	r2, #1
 802055e:	4013      	ands	r3, r2
 8020560:	d004      	beq.n	802056c <USB_EPStartXfer+0xbac>
 8020562:	187b      	adds	r3, r7, r1
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	3301      	adds	r3, #1
 8020568:	187a      	adds	r2, r7, r1
 802056a:	6013      	str	r3, [r2, #0]
 802056c:	218c      	movs	r1, #140	@ 0x8c
 802056e:	187b      	adds	r3, r7, r1
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	881b      	ldrh	r3, [r3, #0]
 8020574:	b29a      	uxth	r2, r3
 8020576:	23e8      	movs	r3, #232	@ 0xe8
 8020578:	18fb      	adds	r3, r7, r3
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	b29b      	uxth	r3, r3
 802057e:	029b      	lsls	r3, r3, #10
 8020580:	b29b      	uxth	r3, r3
 8020582:	4313      	orrs	r3, r2
 8020584:	b29a      	uxth	r2, r3
 8020586:	187b      	adds	r3, r7, r1
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	801a      	strh	r2, [r3, #0]
 802058c:	e31f      	b.n	8020bce <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 802058e:	683b      	ldr	r3, [r7, #0]
 8020590:	78db      	ldrb	r3, [r3, #3]
 8020592:	2b02      	cmp	r3, #2
 8020594:	d000      	beq.n	8020598 <USB_EPStartXfer+0xbd8>
 8020596:	e191      	b.n	80208bc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020598:	683b      	ldr	r3, [r7, #0]
 802059a:	785b      	ldrb	r3, [r3, #1]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d000      	beq.n	80205a2 <USB_EPStartXfer+0xbe2>
 80205a0:	e07c      	b.n	802069c <USB_EPStartXfer+0xcdc>
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	21ac      	movs	r1, #172	@ 0xac
 80205a6:	187a      	adds	r2, r7, r1
 80205a8:	6013      	str	r3, [r2, #0]
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	2250      	movs	r2, #80	@ 0x50
 80205ae:	5a9b      	ldrh	r3, [r3, r2]
 80205b0:	b29b      	uxth	r3, r3
 80205b2:	001a      	movs	r2, r3
 80205b4:	187b      	adds	r3, r7, r1
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	189b      	adds	r3, r3, r2
 80205ba:	187a      	adds	r2, r7, r1
 80205bc:	6013      	str	r3, [r2, #0]
 80205be:	683b      	ldr	r3, [r7, #0]
 80205c0:	781b      	ldrb	r3, [r3, #0]
 80205c2:	00da      	lsls	r2, r3, #3
 80205c4:	187b      	adds	r3, r7, r1
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	18d3      	adds	r3, r2, r3
 80205ca:	4a8b      	ldr	r2, [pc, #556]	@ (80207f8 <USB_EPStartXfer+0xe38>)
 80205cc:	4694      	mov	ip, r2
 80205ce:	4463      	add	r3, ip
 80205d0:	21a8      	movs	r1, #168	@ 0xa8
 80205d2:	187a      	adds	r2, r7, r1
 80205d4:	6013      	str	r3, [r2, #0]
 80205d6:	187b      	adds	r3, r7, r1
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	881b      	ldrh	r3, [r3, #0]
 80205dc:	b29b      	uxth	r3, r3
 80205de:	059b      	lsls	r3, r3, #22
 80205e0:	0d9b      	lsrs	r3, r3, #22
 80205e2:	b29a      	uxth	r2, r3
 80205e4:	187b      	adds	r3, r7, r1
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	801a      	strh	r2, [r3, #0]
 80205ea:	683b      	ldr	r3, [r7, #0]
 80205ec:	691b      	ldr	r3, [r3, #16]
 80205ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80205f0:	d923      	bls.n	802063a <USB_EPStartXfer+0xc7a>
 80205f2:	683b      	ldr	r3, [r7, #0]
 80205f4:	691b      	ldr	r3, [r3, #16]
 80205f6:	095b      	lsrs	r3, r3, #5
 80205f8:	21e4      	movs	r1, #228	@ 0xe4
 80205fa:	187a      	adds	r2, r7, r1
 80205fc:	6013      	str	r3, [r2, #0]
 80205fe:	683b      	ldr	r3, [r7, #0]
 8020600:	691b      	ldr	r3, [r3, #16]
 8020602:	221f      	movs	r2, #31
 8020604:	4013      	ands	r3, r2
 8020606:	d104      	bne.n	8020612 <USB_EPStartXfer+0xc52>
 8020608:	187b      	adds	r3, r7, r1
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	3b01      	subs	r3, #1
 802060e:	187a      	adds	r2, r7, r1
 8020610:	6013      	str	r3, [r2, #0]
 8020612:	21a8      	movs	r1, #168	@ 0xa8
 8020614:	187b      	adds	r3, r7, r1
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	881b      	ldrh	r3, [r3, #0]
 802061a:	b29a      	uxth	r2, r3
 802061c:	23e4      	movs	r3, #228	@ 0xe4
 802061e:	18fb      	adds	r3, r7, r3
 8020620:	681b      	ldr	r3, [r3, #0]
 8020622:	b29b      	uxth	r3, r3
 8020624:	029b      	lsls	r3, r3, #10
 8020626:	b29b      	uxth	r3, r3
 8020628:	4313      	orrs	r3, r2
 802062a:	b29b      	uxth	r3, r3
 802062c:	4a71      	ldr	r2, [pc, #452]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 802062e:	4313      	orrs	r3, r2
 8020630:	b29a      	uxth	r2, r3
 8020632:	187b      	adds	r3, r7, r1
 8020634:	681b      	ldr	r3, [r3, #0]
 8020636:	801a      	strh	r2, [r3, #0]
 8020638:	e054      	b.n	80206e4 <USB_EPStartXfer+0xd24>
 802063a:	683b      	ldr	r3, [r7, #0]
 802063c:	691b      	ldr	r3, [r3, #16]
 802063e:	2b00      	cmp	r3, #0
 8020640:	d10b      	bne.n	802065a <USB_EPStartXfer+0xc9a>
 8020642:	21a8      	movs	r1, #168	@ 0xa8
 8020644:	187b      	adds	r3, r7, r1
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	881b      	ldrh	r3, [r3, #0]
 802064a:	b29b      	uxth	r3, r3
 802064c:	4a69      	ldr	r2, [pc, #420]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 802064e:	4313      	orrs	r3, r2
 8020650:	b29a      	uxth	r2, r3
 8020652:	187b      	adds	r3, r7, r1
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	801a      	strh	r2, [r3, #0]
 8020658:	e044      	b.n	80206e4 <USB_EPStartXfer+0xd24>
 802065a:	683b      	ldr	r3, [r7, #0]
 802065c:	691b      	ldr	r3, [r3, #16]
 802065e:	085b      	lsrs	r3, r3, #1
 8020660:	21e4      	movs	r1, #228	@ 0xe4
 8020662:	187a      	adds	r2, r7, r1
 8020664:	6013      	str	r3, [r2, #0]
 8020666:	683b      	ldr	r3, [r7, #0]
 8020668:	691b      	ldr	r3, [r3, #16]
 802066a:	2201      	movs	r2, #1
 802066c:	4013      	ands	r3, r2
 802066e:	d004      	beq.n	802067a <USB_EPStartXfer+0xcba>
 8020670:	187b      	adds	r3, r7, r1
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	3301      	adds	r3, #1
 8020676:	187a      	adds	r2, r7, r1
 8020678:	6013      	str	r3, [r2, #0]
 802067a:	21a8      	movs	r1, #168	@ 0xa8
 802067c:	187b      	adds	r3, r7, r1
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	881b      	ldrh	r3, [r3, #0]
 8020682:	b29a      	uxth	r2, r3
 8020684:	23e4      	movs	r3, #228	@ 0xe4
 8020686:	18fb      	adds	r3, r7, r3
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	b29b      	uxth	r3, r3
 802068c:	029b      	lsls	r3, r3, #10
 802068e:	b29b      	uxth	r3, r3
 8020690:	4313      	orrs	r3, r2
 8020692:	b29a      	uxth	r2, r3
 8020694:	187b      	adds	r3, r7, r1
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	801a      	strh	r2, [r3, #0]
 802069a:	e023      	b.n	80206e4 <USB_EPStartXfer+0xd24>
 802069c:	683b      	ldr	r3, [r7, #0]
 802069e:	785b      	ldrb	r3, [r3, #1]
 80206a0:	2b01      	cmp	r3, #1
 80206a2:	d11f      	bne.n	80206e4 <USB_EPStartXfer+0xd24>
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	21b4      	movs	r1, #180	@ 0xb4
 80206a8:	187a      	adds	r2, r7, r1
 80206aa:	6013      	str	r3, [r2, #0]
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	2250      	movs	r2, #80	@ 0x50
 80206b0:	5a9b      	ldrh	r3, [r3, r2]
 80206b2:	b29b      	uxth	r3, r3
 80206b4:	001a      	movs	r2, r3
 80206b6:	187b      	adds	r3, r7, r1
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	189b      	adds	r3, r3, r2
 80206bc:	187a      	adds	r2, r7, r1
 80206be:	6013      	str	r3, [r2, #0]
 80206c0:	683b      	ldr	r3, [r7, #0]
 80206c2:	781b      	ldrb	r3, [r3, #0]
 80206c4:	00da      	lsls	r2, r3, #3
 80206c6:	187b      	adds	r3, r7, r1
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	18d3      	adds	r3, r2, r3
 80206cc:	4a4a      	ldr	r2, [pc, #296]	@ (80207f8 <USB_EPStartXfer+0xe38>)
 80206ce:	4694      	mov	ip, r2
 80206d0:	4463      	add	r3, ip
 80206d2:	21b0      	movs	r1, #176	@ 0xb0
 80206d4:	187a      	adds	r2, r7, r1
 80206d6:	6013      	str	r3, [r2, #0]
 80206d8:	683b      	ldr	r3, [r7, #0]
 80206da:	691b      	ldr	r3, [r3, #16]
 80206dc:	b29a      	uxth	r2, r3
 80206de:	187b      	adds	r3, r7, r1
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	801a      	strh	r2, [r3, #0]
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	22a4      	movs	r2, #164	@ 0xa4
 80206e8:	18ba      	adds	r2, r7, r2
 80206ea:	6013      	str	r3, [r2, #0]
 80206ec:	683b      	ldr	r3, [r7, #0]
 80206ee:	785b      	ldrb	r3, [r3, #1]
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d000      	beq.n	80206f6 <USB_EPStartXfer+0xd36>
 80206f4:	e082      	b.n	80207fc <USB_EPStartXfer+0xe3c>
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	219c      	movs	r1, #156	@ 0x9c
 80206fa:	187a      	adds	r2, r7, r1
 80206fc:	6013      	str	r3, [r2, #0]
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	2250      	movs	r2, #80	@ 0x50
 8020702:	5a9b      	ldrh	r3, [r3, r2]
 8020704:	b29b      	uxth	r3, r3
 8020706:	001a      	movs	r2, r3
 8020708:	187b      	adds	r3, r7, r1
 802070a:	681b      	ldr	r3, [r3, #0]
 802070c:	189b      	adds	r3, r3, r2
 802070e:	187a      	adds	r2, r7, r1
 8020710:	6013      	str	r3, [r2, #0]
 8020712:	683b      	ldr	r3, [r7, #0]
 8020714:	781b      	ldrb	r3, [r3, #0]
 8020716:	00da      	lsls	r2, r3, #3
 8020718:	187b      	adds	r3, r7, r1
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	18d3      	adds	r3, r2, r3
 802071e:	4a34      	ldr	r2, [pc, #208]	@ (80207f0 <USB_EPStartXfer+0xe30>)
 8020720:	4694      	mov	ip, r2
 8020722:	4463      	add	r3, ip
 8020724:	2198      	movs	r1, #152	@ 0x98
 8020726:	187a      	adds	r2, r7, r1
 8020728:	6013      	str	r3, [r2, #0]
 802072a:	187b      	adds	r3, r7, r1
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	881b      	ldrh	r3, [r3, #0]
 8020730:	b29b      	uxth	r3, r3
 8020732:	059b      	lsls	r3, r3, #22
 8020734:	0d9b      	lsrs	r3, r3, #22
 8020736:	b29a      	uxth	r2, r3
 8020738:	187b      	adds	r3, r7, r1
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	801a      	strh	r2, [r3, #0]
 802073e:	683b      	ldr	r3, [r7, #0]
 8020740:	691b      	ldr	r3, [r3, #16]
 8020742:	2b3e      	cmp	r3, #62	@ 0x3e
 8020744:	d923      	bls.n	802078e <USB_EPStartXfer+0xdce>
 8020746:	683b      	ldr	r3, [r7, #0]
 8020748:	691b      	ldr	r3, [r3, #16]
 802074a:	095b      	lsrs	r3, r3, #5
 802074c:	21e0      	movs	r1, #224	@ 0xe0
 802074e:	187a      	adds	r2, r7, r1
 8020750:	6013      	str	r3, [r2, #0]
 8020752:	683b      	ldr	r3, [r7, #0]
 8020754:	691b      	ldr	r3, [r3, #16]
 8020756:	221f      	movs	r2, #31
 8020758:	4013      	ands	r3, r2
 802075a:	d104      	bne.n	8020766 <USB_EPStartXfer+0xda6>
 802075c:	187b      	adds	r3, r7, r1
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	3b01      	subs	r3, #1
 8020762:	187a      	adds	r2, r7, r1
 8020764:	6013      	str	r3, [r2, #0]
 8020766:	2198      	movs	r1, #152	@ 0x98
 8020768:	187b      	adds	r3, r7, r1
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	881b      	ldrh	r3, [r3, #0]
 802076e:	b29a      	uxth	r2, r3
 8020770:	23e0      	movs	r3, #224	@ 0xe0
 8020772:	18fb      	adds	r3, r7, r3
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	b29b      	uxth	r3, r3
 8020778:	029b      	lsls	r3, r3, #10
 802077a:	b29b      	uxth	r3, r3
 802077c:	4313      	orrs	r3, r2
 802077e:	b29b      	uxth	r3, r3
 8020780:	4a1c      	ldr	r2, [pc, #112]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 8020782:	4313      	orrs	r3, r2
 8020784:	b29a      	uxth	r2, r3
 8020786:	187b      	adds	r3, r7, r1
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	801a      	strh	r2, [r3, #0]
 802078c:	e057      	b.n	802083e <USB_EPStartXfer+0xe7e>
 802078e:	683b      	ldr	r3, [r7, #0]
 8020790:	691b      	ldr	r3, [r3, #16]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d10b      	bne.n	80207ae <USB_EPStartXfer+0xdee>
 8020796:	2198      	movs	r1, #152	@ 0x98
 8020798:	187b      	adds	r3, r7, r1
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	881b      	ldrh	r3, [r3, #0]
 802079e:	b29b      	uxth	r3, r3
 80207a0:	4a14      	ldr	r2, [pc, #80]	@ (80207f4 <USB_EPStartXfer+0xe34>)
 80207a2:	4313      	orrs	r3, r2
 80207a4:	b29a      	uxth	r2, r3
 80207a6:	187b      	adds	r3, r7, r1
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	801a      	strh	r2, [r3, #0]
 80207ac:	e047      	b.n	802083e <USB_EPStartXfer+0xe7e>
 80207ae:	683b      	ldr	r3, [r7, #0]
 80207b0:	691b      	ldr	r3, [r3, #16]
 80207b2:	085b      	lsrs	r3, r3, #1
 80207b4:	21e0      	movs	r1, #224	@ 0xe0
 80207b6:	187a      	adds	r2, r7, r1
 80207b8:	6013      	str	r3, [r2, #0]
 80207ba:	683b      	ldr	r3, [r7, #0]
 80207bc:	691b      	ldr	r3, [r3, #16]
 80207be:	2201      	movs	r2, #1
 80207c0:	4013      	ands	r3, r2
 80207c2:	d004      	beq.n	80207ce <USB_EPStartXfer+0xe0e>
 80207c4:	187b      	adds	r3, r7, r1
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	3301      	adds	r3, #1
 80207ca:	187a      	adds	r2, r7, r1
 80207cc:	6013      	str	r3, [r2, #0]
 80207ce:	2198      	movs	r1, #152	@ 0x98
 80207d0:	187b      	adds	r3, r7, r1
 80207d2:	681b      	ldr	r3, [r3, #0]
 80207d4:	881b      	ldrh	r3, [r3, #0]
 80207d6:	b29a      	uxth	r2, r3
 80207d8:	23e0      	movs	r3, #224	@ 0xe0
 80207da:	18fb      	adds	r3, r7, r3
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	b29b      	uxth	r3, r3
 80207e0:	029b      	lsls	r3, r3, #10
 80207e2:	b29b      	uxth	r3, r3
 80207e4:	4313      	orrs	r3, r2
 80207e6:	b29a      	uxth	r2, r3
 80207e8:	187b      	adds	r3, r7, r1
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	801a      	strh	r2, [r3, #0]
 80207ee:	e026      	b.n	802083e <USB_EPStartXfer+0xe7e>
 80207f0:	00000406 	.word	0x00000406
 80207f4:	ffff8000 	.word	0xffff8000
 80207f8:	00000402 	.word	0x00000402
 80207fc:	683b      	ldr	r3, [r7, #0]
 80207fe:	785b      	ldrb	r3, [r3, #1]
 8020800:	2b01      	cmp	r3, #1
 8020802:	d11c      	bne.n	802083e <USB_EPStartXfer+0xe7e>
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	2250      	movs	r2, #80	@ 0x50
 8020808:	5a9b      	ldrh	r3, [r3, r2]
 802080a:	b29b      	uxth	r3, r3
 802080c:	001a      	movs	r2, r3
 802080e:	21a4      	movs	r1, #164	@ 0xa4
 8020810:	187b      	adds	r3, r7, r1
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	189b      	adds	r3, r3, r2
 8020816:	187a      	adds	r2, r7, r1
 8020818:	6013      	str	r3, [r2, #0]
 802081a:	683b      	ldr	r3, [r7, #0]
 802081c:	781b      	ldrb	r3, [r3, #0]
 802081e:	00da      	lsls	r2, r3, #3
 8020820:	187b      	adds	r3, r7, r1
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	18d3      	adds	r3, r2, r3
 8020826:	4ad2      	ldr	r2, [pc, #840]	@ (8020b70 <USB_EPStartXfer+0x11b0>)
 8020828:	4694      	mov	ip, r2
 802082a:	4463      	add	r3, ip
 802082c:	21a0      	movs	r1, #160	@ 0xa0
 802082e:	187a      	adds	r2, r7, r1
 8020830:	6013      	str	r3, [r2, #0]
 8020832:	683b      	ldr	r3, [r7, #0]
 8020834:	691b      	ldr	r3, [r3, #16]
 8020836:	b29a      	uxth	r2, r3
 8020838:	187b      	adds	r3, r7, r1
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 802083e:	683b      	ldr	r3, [r7, #0]
 8020840:	69db      	ldr	r3, [r3, #28]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d100      	bne.n	8020848 <USB_EPStartXfer+0xe88>
 8020846:	e1c2      	b.n	8020bce <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020848:	687a      	ldr	r2, [r7, #4]
 802084a:	683b      	ldr	r3, [r7, #0]
 802084c:	781b      	ldrb	r3, [r3, #0]
 802084e:	009b      	lsls	r3, r3, #2
 8020850:	18d2      	adds	r2, r2, r3
 8020852:	2196      	movs	r1, #150	@ 0x96
 8020854:	187b      	adds	r3, r7, r1
 8020856:	8812      	ldrh	r2, [r2, #0]
 8020858:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 802085a:	187b      	adds	r3, r7, r1
 802085c:	881a      	ldrh	r2, [r3, #0]
 802085e:	2380      	movs	r3, #128	@ 0x80
 8020860:	01db      	lsls	r3, r3, #7
 8020862:	4013      	ands	r3, r2
 8020864:	d004      	beq.n	8020870 <USB_EPStartXfer+0xeb0>
 8020866:	187b      	adds	r3, r7, r1
 8020868:	881b      	ldrh	r3, [r3, #0]
 802086a:	2240      	movs	r2, #64	@ 0x40
 802086c:	4013      	ands	r3, r2
 802086e:	d10d      	bne.n	802088c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020870:	2196      	movs	r1, #150	@ 0x96
 8020872:	187b      	adds	r3, r7, r1
 8020874:	881a      	ldrh	r2, [r3, #0]
 8020876:	2380      	movs	r3, #128	@ 0x80
 8020878:	01db      	lsls	r3, r3, #7
 802087a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 802087c:	d000      	beq.n	8020880 <USB_EPStartXfer+0xec0>
 802087e:	e1a6      	b.n	8020bce <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020880:	187b      	adds	r3, r7, r1
 8020882:	881b      	ldrh	r3, [r3, #0]
 8020884:	2240      	movs	r2, #64	@ 0x40
 8020886:	4013      	ands	r3, r2
 8020888:	d000      	beq.n	802088c <USB_EPStartXfer+0xecc>
 802088a:	e1a0      	b.n	8020bce <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 802088c:	687a      	ldr	r2, [r7, #4]
 802088e:	683b      	ldr	r3, [r7, #0]
 8020890:	781b      	ldrb	r3, [r3, #0]
 8020892:	009b      	lsls	r3, r3, #2
 8020894:	18d3      	adds	r3, r2, r3
 8020896:	881b      	ldrh	r3, [r3, #0]
 8020898:	b29a      	uxth	r2, r3
 802089a:	2094      	movs	r0, #148	@ 0x94
 802089c:	183b      	adds	r3, r7, r0
 802089e:	49b5      	ldr	r1, [pc, #724]	@ (8020b74 <USB_EPStartXfer+0x11b4>)
 80208a0:	400a      	ands	r2, r1
 80208a2:	801a      	strh	r2, [r3, #0]
 80208a4:	687a      	ldr	r2, [r7, #4]
 80208a6:	683b      	ldr	r3, [r7, #0]
 80208a8:	781b      	ldrb	r3, [r3, #0]
 80208aa:	009b      	lsls	r3, r3, #2
 80208ac:	18d3      	adds	r3, r2, r3
 80208ae:	183a      	adds	r2, r7, r0
 80208b0:	8812      	ldrh	r2, [r2, #0]
 80208b2:	49b1      	ldr	r1, [pc, #708]	@ (8020b78 <USB_EPStartXfer+0x11b8>)
 80208b4:	430a      	orrs	r2, r1
 80208b6:	b292      	uxth	r2, r2
 80208b8:	801a      	strh	r2, [r3, #0]
 80208ba:	e188      	b.n	8020bce <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	78db      	ldrb	r3, [r3, #3]
 80208c0:	2b01      	cmp	r3, #1
 80208c2:	d000      	beq.n	80208c6 <USB_EPStartXfer+0xf06>
 80208c4:	e181      	b.n	8020bca <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80208c6:	683b      	ldr	r3, [r7, #0]
 80208c8:	699a      	ldr	r2, [r3, #24]
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	691b      	ldr	r3, [r3, #16]
 80208ce:	429a      	cmp	r2, r3
 80208d0:	d90d      	bls.n	80208ee <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80208d2:	683b      	ldr	r3, [r7, #0]
 80208d4:	691b      	ldr	r3, [r3, #16]
 80208d6:	1d7a      	adds	r2, r7, #5
 80208d8:	32ff      	adds	r2, #255	@ 0xff
 80208da:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80208dc:	683b      	ldr	r3, [r7, #0]
 80208de:	699a      	ldr	r2, [r3, #24]
 80208e0:	1d7b      	adds	r3, r7, #5
 80208e2:	33ff      	adds	r3, #255	@ 0xff
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	1ad2      	subs	r2, r2, r3
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	619a      	str	r2, [r3, #24]
 80208ec:	e007      	b.n	80208fe <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80208ee:	683b      	ldr	r3, [r7, #0]
 80208f0:	699b      	ldr	r3, [r3, #24]
 80208f2:	1d7a      	adds	r2, r7, #5
 80208f4:	32ff      	adds	r2, #255	@ 0xff
 80208f6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80208f8:	683b      	ldr	r3, [r7, #0]
 80208fa:	2200      	movs	r2, #0
 80208fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	785b      	ldrb	r3, [r3, #1]
 8020902:	2b00      	cmp	r3, #0
 8020904:	d000      	beq.n	8020908 <USB_EPStartXfer+0xf48>
 8020906:	e082      	b.n	8020a0e <USB_EPStartXfer+0x104e>
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	21cc      	movs	r1, #204	@ 0xcc
 802090c:	187a      	adds	r2, r7, r1
 802090e:	6013      	str	r3, [r2, #0]
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	2250      	movs	r2, #80	@ 0x50
 8020914:	5a9b      	ldrh	r3, [r3, r2]
 8020916:	b29b      	uxth	r3, r3
 8020918:	001a      	movs	r2, r3
 802091a:	187b      	adds	r3, r7, r1
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	189b      	adds	r3, r3, r2
 8020920:	187a      	adds	r2, r7, r1
 8020922:	6013      	str	r3, [r2, #0]
 8020924:	683b      	ldr	r3, [r7, #0]
 8020926:	781b      	ldrb	r3, [r3, #0]
 8020928:	00da      	lsls	r2, r3, #3
 802092a:	187b      	adds	r3, r7, r1
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	18d3      	adds	r3, r2, r3
 8020930:	4a92      	ldr	r2, [pc, #584]	@ (8020b7c <USB_EPStartXfer+0x11bc>)
 8020932:	4694      	mov	ip, r2
 8020934:	4463      	add	r3, ip
 8020936:	21c8      	movs	r1, #200	@ 0xc8
 8020938:	187a      	adds	r2, r7, r1
 802093a:	6013      	str	r3, [r2, #0]
 802093c:	187b      	adds	r3, r7, r1
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	881b      	ldrh	r3, [r3, #0]
 8020942:	b29b      	uxth	r3, r3
 8020944:	059b      	lsls	r3, r3, #22
 8020946:	0d9b      	lsrs	r3, r3, #22
 8020948:	b29a      	uxth	r2, r3
 802094a:	187b      	adds	r3, r7, r1
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	801a      	strh	r2, [r3, #0]
 8020950:	1d7b      	adds	r3, r7, #5
 8020952:	33ff      	adds	r3, #255	@ 0xff
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	2b3e      	cmp	r3, #62	@ 0x3e
 8020958:	d925      	bls.n	80209a6 <USB_EPStartXfer+0xfe6>
 802095a:	1d7b      	adds	r3, r7, #5
 802095c:	33ff      	adds	r3, #255	@ 0xff
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	095b      	lsrs	r3, r3, #5
 8020962:	21dc      	movs	r1, #220	@ 0xdc
 8020964:	187a      	adds	r2, r7, r1
 8020966:	6013      	str	r3, [r2, #0]
 8020968:	1d7b      	adds	r3, r7, #5
 802096a:	33ff      	adds	r3, #255	@ 0xff
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	221f      	movs	r2, #31
 8020970:	4013      	ands	r3, r2
 8020972:	d104      	bne.n	802097e <USB_EPStartXfer+0xfbe>
 8020974:	187b      	adds	r3, r7, r1
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	3b01      	subs	r3, #1
 802097a:	187a      	adds	r2, r7, r1
 802097c:	6013      	str	r3, [r2, #0]
 802097e:	21c8      	movs	r1, #200	@ 0xc8
 8020980:	187b      	adds	r3, r7, r1
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	881b      	ldrh	r3, [r3, #0]
 8020986:	b29a      	uxth	r2, r3
 8020988:	23dc      	movs	r3, #220	@ 0xdc
 802098a:	18fb      	adds	r3, r7, r3
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	b29b      	uxth	r3, r3
 8020990:	029b      	lsls	r3, r3, #10
 8020992:	b29b      	uxth	r3, r3
 8020994:	4313      	orrs	r3, r2
 8020996:	b29b      	uxth	r3, r3
 8020998:	4a79      	ldr	r2, [pc, #484]	@ (8020b80 <USB_EPStartXfer+0x11c0>)
 802099a:	4313      	orrs	r3, r2
 802099c:	b29a      	uxth	r2, r3
 802099e:	187b      	adds	r3, r7, r1
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	801a      	strh	r2, [r3, #0]
 80209a4:	e058      	b.n	8020a58 <USB_EPStartXfer+0x1098>
 80209a6:	1d7b      	adds	r3, r7, #5
 80209a8:	33ff      	adds	r3, #255	@ 0xff
 80209aa:	681b      	ldr	r3, [r3, #0]
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	d10b      	bne.n	80209c8 <USB_EPStartXfer+0x1008>
 80209b0:	21c8      	movs	r1, #200	@ 0xc8
 80209b2:	187b      	adds	r3, r7, r1
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	881b      	ldrh	r3, [r3, #0]
 80209b8:	b29b      	uxth	r3, r3
 80209ba:	4a71      	ldr	r2, [pc, #452]	@ (8020b80 <USB_EPStartXfer+0x11c0>)
 80209bc:	4313      	orrs	r3, r2
 80209be:	b29a      	uxth	r2, r3
 80209c0:	187b      	adds	r3, r7, r1
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	801a      	strh	r2, [r3, #0]
 80209c6:	e047      	b.n	8020a58 <USB_EPStartXfer+0x1098>
 80209c8:	1d7b      	adds	r3, r7, #5
 80209ca:	33ff      	adds	r3, #255	@ 0xff
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	085b      	lsrs	r3, r3, #1
 80209d0:	21dc      	movs	r1, #220	@ 0xdc
 80209d2:	187a      	adds	r2, r7, r1
 80209d4:	6013      	str	r3, [r2, #0]
 80209d6:	1d7b      	adds	r3, r7, #5
 80209d8:	33ff      	adds	r3, #255	@ 0xff
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	2201      	movs	r2, #1
 80209de:	4013      	ands	r3, r2
 80209e0:	d004      	beq.n	80209ec <USB_EPStartXfer+0x102c>
 80209e2:	187b      	adds	r3, r7, r1
 80209e4:	681b      	ldr	r3, [r3, #0]
 80209e6:	3301      	adds	r3, #1
 80209e8:	187a      	adds	r2, r7, r1
 80209ea:	6013      	str	r3, [r2, #0]
 80209ec:	21c8      	movs	r1, #200	@ 0xc8
 80209ee:	187b      	adds	r3, r7, r1
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	881b      	ldrh	r3, [r3, #0]
 80209f4:	b29a      	uxth	r2, r3
 80209f6:	23dc      	movs	r3, #220	@ 0xdc
 80209f8:	18fb      	adds	r3, r7, r3
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	b29b      	uxth	r3, r3
 80209fe:	029b      	lsls	r3, r3, #10
 8020a00:	b29b      	uxth	r3, r3
 8020a02:	4313      	orrs	r3, r2
 8020a04:	b29a      	uxth	r2, r3
 8020a06:	187b      	adds	r3, r7, r1
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	801a      	strh	r2, [r3, #0]
 8020a0c:	e024      	b.n	8020a58 <USB_EPStartXfer+0x1098>
 8020a0e:	683b      	ldr	r3, [r7, #0]
 8020a10:	785b      	ldrb	r3, [r3, #1]
 8020a12:	2b01      	cmp	r3, #1
 8020a14:	d120      	bne.n	8020a58 <USB_EPStartXfer+0x1098>
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	21d4      	movs	r1, #212	@ 0xd4
 8020a1a:	187a      	adds	r2, r7, r1
 8020a1c:	6013      	str	r3, [r2, #0]
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	2250      	movs	r2, #80	@ 0x50
 8020a22:	5a9b      	ldrh	r3, [r3, r2]
 8020a24:	b29b      	uxth	r3, r3
 8020a26:	001a      	movs	r2, r3
 8020a28:	187b      	adds	r3, r7, r1
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	189b      	adds	r3, r3, r2
 8020a2e:	187a      	adds	r2, r7, r1
 8020a30:	6013      	str	r3, [r2, #0]
 8020a32:	683b      	ldr	r3, [r7, #0]
 8020a34:	781b      	ldrb	r3, [r3, #0]
 8020a36:	00da      	lsls	r2, r3, #3
 8020a38:	187b      	adds	r3, r7, r1
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	18d3      	adds	r3, r2, r3
 8020a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8020b7c <USB_EPStartXfer+0x11bc>)
 8020a40:	4694      	mov	ip, r2
 8020a42:	4463      	add	r3, ip
 8020a44:	21d0      	movs	r1, #208	@ 0xd0
 8020a46:	187a      	adds	r2, r7, r1
 8020a48:	6013      	str	r3, [r2, #0]
 8020a4a:	1d7b      	adds	r3, r7, #5
 8020a4c:	33ff      	adds	r3, #255	@ 0xff
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	b29a      	uxth	r2, r3
 8020a52:	187b      	adds	r3, r7, r1
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	801a      	strh	r2, [r3, #0]
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	22c4      	movs	r2, #196	@ 0xc4
 8020a5c:	18ba      	adds	r2, r7, r2
 8020a5e:	6013      	str	r3, [r2, #0]
 8020a60:	683b      	ldr	r3, [r7, #0]
 8020a62:	785b      	ldrb	r3, [r3, #1]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d000      	beq.n	8020a6a <USB_EPStartXfer+0x10aa>
 8020a68:	e08c      	b.n	8020b84 <USB_EPStartXfer+0x11c4>
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	21bc      	movs	r1, #188	@ 0xbc
 8020a6e:	187a      	adds	r2, r7, r1
 8020a70:	6013      	str	r3, [r2, #0]
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	2250      	movs	r2, #80	@ 0x50
 8020a76:	5a9b      	ldrh	r3, [r3, r2]
 8020a78:	b29b      	uxth	r3, r3
 8020a7a:	001a      	movs	r2, r3
 8020a7c:	187b      	adds	r3, r7, r1
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	189b      	adds	r3, r3, r2
 8020a82:	187a      	adds	r2, r7, r1
 8020a84:	6013      	str	r3, [r2, #0]
 8020a86:	683b      	ldr	r3, [r7, #0]
 8020a88:	781b      	ldrb	r3, [r3, #0]
 8020a8a:	00da      	lsls	r2, r3, #3
 8020a8c:	187b      	adds	r3, r7, r1
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	18d3      	adds	r3, r2, r3
 8020a92:	4a37      	ldr	r2, [pc, #220]	@ (8020b70 <USB_EPStartXfer+0x11b0>)
 8020a94:	4694      	mov	ip, r2
 8020a96:	4463      	add	r3, ip
 8020a98:	21b8      	movs	r1, #184	@ 0xb8
 8020a9a:	187a      	adds	r2, r7, r1
 8020a9c:	6013      	str	r3, [r2, #0]
 8020a9e:	187b      	adds	r3, r7, r1
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	881b      	ldrh	r3, [r3, #0]
 8020aa4:	b29b      	uxth	r3, r3
 8020aa6:	059b      	lsls	r3, r3, #22
 8020aa8:	0d9b      	lsrs	r3, r3, #22
 8020aaa:	b29a      	uxth	r2, r3
 8020aac:	187b      	adds	r3, r7, r1
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	801a      	strh	r2, [r3, #0]
 8020ab2:	1d7b      	adds	r3, r7, #5
 8020ab4:	33ff      	adds	r3, #255	@ 0xff
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8020aba:	d925      	bls.n	8020b08 <USB_EPStartXfer+0x1148>
 8020abc:	1d7b      	adds	r3, r7, #5
 8020abe:	33ff      	adds	r3, #255	@ 0xff
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	095b      	lsrs	r3, r3, #5
 8020ac4:	21d8      	movs	r1, #216	@ 0xd8
 8020ac6:	187a      	adds	r2, r7, r1
 8020ac8:	6013      	str	r3, [r2, #0]
 8020aca:	1d7b      	adds	r3, r7, #5
 8020acc:	33ff      	adds	r3, #255	@ 0xff
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	221f      	movs	r2, #31
 8020ad2:	4013      	ands	r3, r2
 8020ad4:	d104      	bne.n	8020ae0 <USB_EPStartXfer+0x1120>
 8020ad6:	187b      	adds	r3, r7, r1
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	3b01      	subs	r3, #1
 8020adc:	187a      	adds	r2, r7, r1
 8020ade:	6013      	str	r3, [r2, #0]
 8020ae0:	21b8      	movs	r1, #184	@ 0xb8
 8020ae2:	187b      	adds	r3, r7, r1
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	881b      	ldrh	r3, [r3, #0]
 8020ae8:	b29a      	uxth	r2, r3
 8020aea:	23d8      	movs	r3, #216	@ 0xd8
 8020aec:	18fb      	adds	r3, r7, r3
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	b29b      	uxth	r3, r3
 8020af2:	029b      	lsls	r3, r3, #10
 8020af4:	b29b      	uxth	r3, r3
 8020af6:	4313      	orrs	r3, r2
 8020af8:	b29b      	uxth	r3, r3
 8020afa:	4a21      	ldr	r2, [pc, #132]	@ (8020b80 <USB_EPStartXfer+0x11c0>)
 8020afc:	4313      	orrs	r3, r2
 8020afe:	b29a      	uxth	r2, r3
 8020b00:	187b      	adds	r3, r7, r1
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	801a      	strh	r2, [r3, #0]
 8020b06:	e062      	b.n	8020bce <USB_EPStartXfer+0x120e>
 8020b08:	1d7b      	adds	r3, r7, #5
 8020b0a:	33ff      	adds	r3, #255	@ 0xff
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d10b      	bne.n	8020b2a <USB_EPStartXfer+0x116a>
 8020b12:	21b8      	movs	r1, #184	@ 0xb8
 8020b14:	187b      	adds	r3, r7, r1
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	881b      	ldrh	r3, [r3, #0]
 8020b1a:	b29b      	uxth	r3, r3
 8020b1c:	4a18      	ldr	r2, [pc, #96]	@ (8020b80 <USB_EPStartXfer+0x11c0>)
 8020b1e:	4313      	orrs	r3, r2
 8020b20:	b29a      	uxth	r2, r3
 8020b22:	187b      	adds	r3, r7, r1
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	801a      	strh	r2, [r3, #0]
 8020b28:	e051      	b.n	8020bce <USB_EPStartXfer+0x120e>
 8020b2a:	1d7b      	adds	r3, r7, #5
 8020b2c:	33ff      	adds	r3, #255	@ 0xff
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	085b      	lsrs	r3, r3, #1
 8020b32:	21d8      	movs	r1, #216	@ 0xd8
 8020b34:	187a      	adds	r2, r7, r1
 8020b36:	6013      	str	r3, [r2, #0]
 8020b38:	1d7b      	adds	r3, r7, #5
 8020b3a:	33ff      	adds	r3, #255	@ 0xff
 8020b3c:	681b      	ldr	r3, [r3, #0]
 8020b3e:	2201      	movs	r2, #1
 8020b40:	4013      	ands	r3, r2
 8020b42:	d004      	beq.n	8020b4e <USB_EPStartXfer+0x118e>
 8020b44:	187b      	adds	r3, r7, r1
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	3301      	adds	r3, #1
 8020b4a:	187a      	adds	r2, r7, r1
 8020b4c:	6013      	str	r3, [r2, #0]
 8020b4e:	21b8      	movs	r1, #184	@ 0xb8
 8020b50:	187b      	adds	r3, r7, r1
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	881b      	ldrh	r3, [r3, #0]
 8020b56:	b29a      	uxth	r2, r3
 8020b58:	23d8      	movs	r3, #216	@ 0xd8
 8020b5a:	18fb      	adds	r3, r7, r3
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	b29b      	uxth	r3, r3
 8020b60:	029b      	lsls	r3, r3, #10
 8020b62:	b29b      	uxth	r3, r3
 8020b64:	4313      	orrs	r3, r2
 8020b66:	b29a      	uxth	r2, r3
 8020b68:	187b      	adds	r3, r7, r1
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	801a      	strh	r2, [r3, #0]
 8020b6e:	e02e      	b.n	8020bce <USB_EPStartXfer+0x120e>
 8020b70:	00000406 	.word	0x00000406
 8020b74:	ffff8f8f 	.word	0xffff8f8f
 8020b78:	ffff80c0 	.word	0xffff80c0
 8020b7c:	00000402 	.word	0x00000402
 8020b80:	ffff8000 	.word	0xffff8000
 8020b84:	683b      	ldr	r3, [r7, #0]
 8020b86:	785b      	ldrb	r3, [r3, #1]
 8020b88:	2b01      	cmp	r3, #1
 8020b8a:	d120      	bne.n	8020bce <USB_EPStartXfer+0x120e>
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	2250      	movs	r2, #80	@ 0x50
 8020b90:	5a9b      	ldrh	r3, [r3, r2]
 8020b92:	b29b      	uxth	r3, r3
 8020b94:	001a      	movs	r2, r3
 8020b96:	21c4      	movs	r1, #196	@ 0xc4
 8020b98:	187b      	adds	r3, r7, r1
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	189b      	adds	r3, r3, r2
 8020b9e:	187a      	adds	r2, r7, r1
 8020ba0:	6013      	str	r3, [r2, #0]
 8020ba2:	683b      	ldr	r3, [r7, #0]
 8020ba4:	781b      	ldrb	r3, [r3, #0]
 8020ba6:	00da      	lsls	r2, r3, #3
 8020ba8:	187b      	adds	r3, r7, r1
 8020baa:	681b      	ldr	r3, [r3, #0]
 8020bac:	18d3      	adds	r3, r2, r3
 8020bae:	4a1d      	ldr	r2, [pc, #116]	@ (8020c24 <USB_EPStartXfer+0x1264>)
 8020bb0:	4694      	mov	ip, r2
 8020bb2:	4463      	add	r3, ip
 8020bb4:	21c0      	movs	r1, #192	@ 0xc0
 8020bb6:	187a      	adds	r2, r7, r1
 8020bb8:	6013      	str	r3, [r2, #0]
 8020bba:	1d7b      	adds	r3, r7, #5
 8020bbc:	33ff      	adds	r3, #255	@ 0xff
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	b29a      	uxth	r2, r3
 8020bc2:	187b      	adds	r3, r7, r1
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	801a      	strh	r2, [r3, #0]
 8020bc8:	e001      	b.n	8020bce <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8020bca:	2301      	movs	r3, #1
 8020bcc:	e025      	b.n	8020c1a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020bce:	687a      	ldr	r2, [r7, #4]
 8020bd0:	683b      	ldr	r3, [r7, #0]
 8020bd2:	781b      	ldrb	r3, [r3, #0]
 8020bd4:	009b      	lsls	r3, r3, #2
 8020bd6:	18d3      	adds	r3, r2, r3
 8020bd8:	881b      	ldrh	r3, [r3, #0]
 8020bda:	b29a      	uxth	r2, r3
 8020bdc:	208a      	movs	r0, #138	@ 0x8a
 8020bde:	183b      	adds	r3, r7, r0
 8020be0:	4911      	ldr	r1, [pc, #68]	@ (8020c28 <USB_EPStartXfer+0x1268>)
 8020be2:	400a      	ands	r2, r1
 8020be4:	801a      	strh	r2, [r3, #0]
 8020be6:	183b      	adds	r3, r7, r0
 8020be8:	183a      	adds	r2, r7, r0
 8020bea:	8812      	ldrh	r2, [r2, #0]
 8020bec:	2180      	movs	r1, #128	@ 0x80
 8020bee:	0149      	lsls	r1, r1, #5
 8020bf0:	404a      	eors	r2, r1
 8020bf2:	801a      	strh	r2, [r3, #0]
 8020bf4:	183b      	adds	r3, r7, r0
 8020bf6:	183a      	adds	r2, r7, r0
 8020bf8:	8812      	ldrh	r2, [r2, #0]
 8020bfa:	2180      	movs	r1, #128	@ 0x80
 8020bfc:	0189      	lsls	r1, r1, #6
 8020bfe:	404a      	eors	r2, r1
 8020c00:	801a      	strh	r2, [r3, #0]
 8020c02:	687a      	ldr	r2, [r7, #4]
 8020c04:	683b      	ldr	r3, [r7, #0]
 8020c06:	781b      	ldrb	r3, [r3, #0]
 8020c08:	009b      	lsls	r3, r3, #2
 8020c0a:	18d3      	adds	r3, r2, r3
 8020c0c:	183a      	adds	r2, r7, r0
 8020c0e:	8812      	ldrh	r2, [r2, #0]
 8020c10:	4906      	ldr	r1, [pc, #24]	@ (8020c2c <USB_EPStartXfer+0x126c>)
 8020c12:	430a      	orrs	r2, r1
 8020c14:	b292      	uxth	r2, r2
 8020c16:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020c18:	2300      	movs	r3, #0
}
 8020c1a:	0018      	movs	r0, r3
 8020c1c:	46bd      	mov	sp, r7
 8020c1e:	b043      	add	sp, #268	@ 0x10c
 8020c20:	bd90      	pop	{r4, r7, pc}
 8020c22:	46c0      	nop			@ (mov r8, r8)
 8020c24:	00000406 	.word	0x00000406
 8020c28:	ffffbf8f 	.word	0xffffbf8f
 8020c2c:	ffff8080 	.word	0xffff8080

08020c30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b084      	sub	sp, #16
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
 8020c38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	785b      	ldrb	r3, [r3, #1]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d01d      	beq.n	8020c7e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8020c42:	687a      	ldr	r2, [r7, #4]
 8020c44:	683b      	ldr	r3, [r7, #0]
 8020c46:	781b      	ldrb	r3, [r3, #0]
 8020c48:	009b      	lsls	r3, r3, #2
 8020c4a:	18d3      	adds	r3, r2, r3
 8020c4c:	881b      	ldrh	r3, [r3, #0]
 8020c4e:	b29a      	uxth	r2, r3
 8020c50:	200c      	movs	r0, #12
 8020c52:	183b      	adds	r3, r7, r0
 8020c54:	491b      	ldr	r1, [pc, #108]	@ (8020cc4 <USB_EPSetStall+0x94>)
 8020c56:	400a      	ands	r2, r1
 8020c58:	801a      	strh	r2, [r3, #0]
 8020c5a:	183b      	adds	r3, r7, r0
 8020c5c:	183a      	adds	r2, r7, r0
 8020c5e:	8812      	ldrh	r2, [r2, #0]
 8020c60:	2110      	movs	r1, #16
 8020c62:	404a      	eors	r2, r1
 8020c64:	801a      	strh	r2, [r3, #0]
 8020c66:	687a      	ldr	r2, [r7, #4]
 8020c68:	683b      	ldr	r3, [r7, #0]
 8020c6a:	781b      	ldrb	r3, [r3, #0]
 8020c6c:	009b      	lsls	r3, r3, #2
 8020c6e:	18d3      	adds	r3, r2, r3
 8020c70:	183a      	adds	r2, r7, r0
 8020c72:	8812      	ldrh	r2, [r2, #0]
 8020c74:	4914      	ldr	r1, [pc, #80]	@ (8020cc8 <USB_EPSetStall+0x98>)
 8020c76:	430a      	orrs	r2, r1
 8020c78:	b292      	uxth	r2, r2
 8020c7a:	801a      	strh	r2, [r3, #0]
 8020c7c:	e01d      	b.n	8020cba <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8020c7e:	687a      	ldr	r2, [r7, #4]
 8020c80:	683b      	ldr	r3, [r7, #0]
 8020c82:	781b      	ldrb	r3, [r3, #0]
 8020c84:	009b      	lsls	r3, r3, #2
 8020c86:	18d3      	adds	r3, r2, r3
 8020c88:	881b      	ldrh	r3, [r3, #0]
 8020c8a:	b29a      	uxth	r2, r3
 8020c8c:	200e      	movs	r0, #14
 8020c8e:	183b      	adds	r3, r7, r0
 8020c90:	490e      	ldr	r1, [pc, #56]	@ (8020ccc <USB_EPSetStall+0x9c>)
 8020c92:	400a      	ands	r2, r1
 8020c94:	801a      	strh	r2, [r3, #0]
 8020c96:	183b      	adds	r3, r7, r0
 8020c98:	183a      	adds	r2, r7, r0
 8020c9a:	8812      	ldrh	r2, [r2, #0]
 8020c9c:	2180      	movs	r1, #128	@ 0x80
 8020c9e:	0149      	lsls	r1, r1, #5
 8020ca0:	404a      	eors	r2, r1
 8020ca2:	801a      	strh	r2, [r3, #0]
 8020ca4:	687a      	ldr	r2, [r7, #4]
 8020ca6:	683b      	ldr	r3, [r7, #0]
 8020ca8:	781b      	ldrb	r3, [r3, #0]
 8020caa:	009b      	lsls	r3, r3, #2
 8020cac:	18d3      	adds	r3, r2, r3
 8020cae:	183a      	adds	r2, r7, r0
 8020cb0:	8812      	ldrh	r2, [r2, #0]
 8020cb2:	4905      	ldr	r1, [pc, #20]	@ (8020cc8 <USB_EPSetStall+0x98>)
 8020cb4:	430a      	orrs	r2, r1
 8020cb6:	b292      	uxth	r2, r2
 8020cb8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020cba:	2300      	movs	r3, #0
}
 8020cbc:	0018      	movs	r0, r3
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	b004      	add	sp, #16
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	ffff8fbf 	.word	0xffff8fbf
 8020cc8:	ffff8080 	.word	0xffff8080
 8020ccc:	ffffbf8f 	.word	0xffffbf8f

08020cd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020cd0:	b580      	push	{r7, lr}
 8020cd2:	b086      	sub	sp, #24
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	6078      	str	r0, [r7, #4]
 8020cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8020cda:	683b      	ldr	r3, [r7, #0]
 8020cdc:	7b1b      	ldrb	r3, [r3, #12]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d000      	beq.n	8020ce4 <USB_EPClearStall+0x14>
 8020ce2:	e095      	b.n	8020e10 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8020ce4:	683b      	ldr	r3, [r7, #0]
 8020ce6:	785b      	ldrb	r3, [r3, #1]
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d046      	beq.n	8020d7a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8020cec:	687a      	ldr	r2, [r7, #4]
 8020cee:	683b      	ldr	r3, [r7, #0]
 8020cf0:	781b      	ldrb	r3, [r3, #0]
 8020cf2:	009b      	lsls	r3, r3, #2
 8020cf4:	18d2      	adds	r2, r2, r3
 8020cf6:	2110      	movs	r1, #16
 8020cf8:	187b      	adds	r3, r7, r1
 8020cfa:	8812      	ldrh	r2, [r2, #0]
 8020cfc:	801a      	strh	r2, [r3, #0]
 8020cfe:	187b      	adds	r3, r7, r1
 8020d00:	881b      	ldrh	r3, [r3, #0]
 8020d02:	2240      	movs	r2, #64	@ 0x40
 8020d04:	4013      	ands	r3, r2
 8020d06:	d016      	beq.n	8020d36 <USB_EPClearStall+0x66>
 8020d08:	687a      	ldr	r2, [r7, #4]
 8020d0a:	683b      	ldr	r3, [r7, #0]
 8020d0c:	781b      	ldrb	r3, [r3, #0]
 8020d0e:	009b      	lsls	r3, r3, #2
 8020d10:	18d3      	adds	r3, r2, r3
 8020d12:	881b      	ldrh	r3, [r3, #0]
 8020d14:	b29a      	uxth	r2, r3
 8020d16:	200e      	movs	r0, #14
 8020d18:	183b      	adds	r3, r7, r0
 8020d1a:	4940      	ldr	r1, [pc, #256]	@ (8020e1c <USB_EPClearStall+0x14c>)
 8020d1c:	400a      	ands	r2, r1
 8020d1e:	801a      	strh	r2, [r3, #0]
 8020d20:	687a      	ldr	r2, [r7, #4]
 8020d22:	683b      	ldr	r3, [r7, #0]
 8020d24:	781b      	ldrb	r3, [r3, #0]
 8020d26:	009b      	lsls	r3, r3, #2
 8020d28:	18d3      	adds	r3, r2, r3
 8020d2a:	183a      	adds	r2, r7, r0
 8020d2c:	8812      	ldrh	r2, [r2, #0]
 8020d2e:	493c      	ldr	r1, [pc, #240]	@ (8020e20 <USB_EPClearStall+0x150>)
 8020d30:	430a      	orrs	r2, r1
 8020d32:	b292      	uxth	r2, r2
 8020d34:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8020d36:	683b      	ldr	r3, [r7, #0]
 8020d38:	78db      	ldrb	r3, [r3, #3]
 8020d3a:	2b01      	cmp	r3, #1
 8020d3c:	d068      	beq.n	8020e10 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8020d3e:	687a      	ldr	r2, [r7, #4]
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	781b      	ldrb	r3, [r3, #0]
 8020d44:	009b      	lsls	r3, r3, #2
 8020d46:	18d3      	adds	r3, r2, r3
 8020d48:	881b      	ldrh	r3, [r3, #0]
 8020d4a:	b29a      	uxth	r2, r3
 8020d4c:	200c      	movs	r0, #12
 8020d4e:	183b      	adds	r3, r7, r0
 8020d50:	4934      	ldr	r1, [pc, #208]	@ (8020e24 <USB_EPClearStall+0x154>)
 8020d52:	400a      	ands	r2, r1
 8020d54:	801a      	strh	r2, [r3, #0]
 8020d56:	183b      	adds	r3, r7, r0
 8020d58:	183a      	adds	r2, r7, r0
 8020d5a:	8812      	ldrh	r2, [r2, #0]
 8020d5c:	2120      	movs	r1, #32
 8020d5e:	404a      	eors	r2, r1
 8020d60:	801a      	strh	r2, [r3, #0]
 8020d62:	687a      	ldr	r2, [r7, #4]
 8020d64:	683b      	ldr	r3, [r7, #0]
 8020d66:	781b      	ldrb	r3, [r3, #0]
 8020d68:	009b      	lsls	r3, r3, #2
 8020d6a:	18d3      	adds	r3, r2, r3
 8020d6c:	183a      	adds	r2, r7, r0
 8020d6e:	8812      	ldrh	r2, [r2, #0]
 8020d70:	492d      	ldr	r1, [pc, #180]	@ (8020e28 <USB_EPClearStall+0x158>)
 8020d72:	430a      	orrs	r2, r1
 8020d74:	b292      	uxth	r2, r2
 8020d76:	801a      	strh	r2, [r3, #0]
 8020d78:	e04a      	b.n	8020e10 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8020d7a:	687a      	ldr	r2, [r7, #4]
 8020d7c:	683b      	ldr	r3, [r7, #0]
 8020d7e:	781b      	ldrb	r3, [r3, #0]
 8020d80:	009b      	lsls	r3, r3, #2
 8020d82:	18d2      	adds	r2, r2, r3
 8020d84:	2116      	movs	r1, #22
 8020d86:	187b      	adds	r3, r7, r1
 8020d88:	8812      	ldrh	r2, [r2, #0]
 8020d8a:	801a      	strh	r2, [r3, #0]
 8020d8c:	187b      	adds	r3, r7, r1
 8020d8e:	881a      	ldrh	r2, [r3, #0]
 8020d90:	2380      	movs	r3, #128	@ 0x80
 8020d92:	01db      	lsls	r3, r3, #7
 8020d94:	4013      	ands	r3, r2
 8020d96:	d016      	beq.n	8020dc6 <USB_EPClearStall+0xf6>
 8020d98:	687a      	ldr	r2, [r7, #4]
 8020d9a:	683b      	ldr	r3, [r7, #0]
 8020d9c:	781b      	ldrb	r3, [r3, #0]
 8020d9e:	009b      	lsls	r3, r3, #2
 8020da0:	18d3      	adds	r3, r2, r3
 8020da2:	881b      	ldrh	r3, [r3, #0]
 8020da4:	b29a      	uxth	r2, r3
 8020da6:	2014      	movs	r0, #20
 8020da8:	183b      	adds	r3, r7, r0
 8020daa:	491c      	ldr	r1, [pc, #112]	@ (8020e1c <USB_EPClearStall+0x14c>)
 8020dac:	400a      	ands	r2, r1
 8020dae:	801a      	strh	r2, [r3, #0]
 8020db0:	687a      	ldr	r2, [r7, #4]
 8020db2:	683b      	ldr	r3, [r7, #0]
 8020db4:	781b      	ldrb	r3, [r3, #0]
 8020db6:	009b      	lsls	r3, r3, #2
 8020db8:	18d3      	adds	r3, r2, r3
 8020dba:	183a      	adds	r2, r7, r0
 8020dbc:	8812      	ldrh	r2, [r2, #0]
 8020dbe:	491b      	ldr	r1, [pc, #108]	@ (8020e2c <USB_EPClearStall+0x15c>)
 8020dc0:	430a      	orrs	r2, r1
 8020dc2:	b292      	uxth	r2, r2
 8020dc4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020dc6:	687a      	ldr	r2, [r7, #4]
 8020dc8:	683b      	ldr	r3, [r7, #0]
 8020dca:	781b      	ldrb	r3, [r3, #0]
 8020dcc:	009b      	lsls	r3, r3, #2
 8020dce:	18d3      	adds	r3, r2, r3
 8020dd0:	881b      	ldrh	r3, [r3, #0]
 8020dd2:	b29a      	uxth	r2, r3
 8020dd4:	2012      	movs	r0, #18
 8020dd6:	183b      	adds	r3, r7, r0
 8020dd8:	4915      	ldr	r1, [pc, #84]	@ (8020e30 <USB_EPClearStall+0x160>)
 8020dda:	400a      	ands	r2, r1
 8020ddc:	801a      	strh	r2, [r3, #0]
 8020dde:	183b      	adds	r3, r7, r0
 8020de0:	183a      	adds	r2, r7, r0
 8020de2:	8812      	ldrh	r2, [r2, #0]
 8020de4:	2180      	movs	r1, #128	@ 0x80
 8020de6:	0149      	lsls	r1, r1, #5
 8020de8:	404a      	eors	r2, r1
 8020dea:	801a      	strh	r2, [r3, #0]
 8020dec:	183b      	adds	r3, r7, r0
 8020dee:	183a      	adds	r2, r7, r0
 8020df0:	8812      	ldrh	r2, [r2, #0]
 8020df2:	2180      	movs	r1, #128	@ 0x80
 8020df4:	0189      	lsls	r1, r1, #6
 8020df6:	404a      	eors	r2, r1
 8020df8:	801a      	strh	r2, [r3, #0]
 8020dfa:	687a      	ldr	r2, [r7, #4]
 8020dfc:	683b      	ldr	r3, [r7, #0]
 8020dfe:	781b      	ldrb	r3, [r3, #0]
 8020e00:	009b      	lsls	r3, r3, #2
 8020e02:	18d3      	adds	r3, r2, r3
 8020e04:	183a      	adds	r2, r7, r0
 8020e06:	8812      	ldrh	r2, [r2, #0]
 8020e08:	4907      	ldr	r1, [pc, #28]	@ (8020e28 <USB_EPClearStall+0x158>)
 8020e0a:	430a      	orrs	r2, r1
 8020e0c:	b292      	uxth	r2, r2
 8020e0e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8020e10:	2300      	movs	r3, #0
}
 8020e12:	0018      	movs	r0, r3
 8020e14:	46bd      	mov	sp, r7
 8020e16:	b006      	add	sp, #24
 8020e18:	bd80      	pop	{r7, pc}
 8020e1a:	46c0      	nop			@ (mov r8, r8)
 8020e1c:	ffff8f8f 	.word	0xffff8f8f
 8020e20:	ffff80c0 	.word	0xffff80c0
 8020e24:	ffff8fbf 	.word	0xffff8fbf
 8020e28:	ffff8080 	.word	0xffff8080
 8020e2c:	ffffc080 	.word	0xffffc080
 8020e30:	ffffbf8f 	.word	0xffffbf8f

08020e34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8020e34:	b580      	push	{r7, lr}
 8020e36:	b082      	sub	sp, #8
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	6078      	str	r0, [r7, #4]
 8020e3c:	000a      	movs	r2, r1
 8020e3e:	1cfb      	adds	r3, r7, #3
 8020e40:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8020e42:	1cfb      	adds	r3, r7, #3
 8020e44:	781b      	ldrb	r3, [r3, #0]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d103      	bne.n	8020e52 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	224c      	movs	r2, #76	@ 0x4c
 8020e4e:	2180      	movs	r1, #128	@ 0x80
 8020e50:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8020e52:	2300      	movs	r3, #0
}
 8020e54:	0018      	movs	r0, r3
 8020e56:	46bd      	mov	sp, r7
 8020e58:	b002      	add	sp, #8
 8020e5a:	bd80      	pop	{r7, pc}

08020e5c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	2258      	movs	r2, #88	@ 0x58
 8020e68:	5a9b      	ldrh	r3, [r3, r2]
 8020e6a:	b29b      	uxth	r3, r3
 8020e6c:	4a05      	ldr	r2, [pc, #20]	@ (8020e84 <USB_DevConnect+0x28>)
 8020e6e:	4313      	orrs	r3, r2
 8020e70:	b299      	uxth	r1, r3
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	2258      	movs	r2, #88	@ 0x58
 8020e76:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8020e78:	2300      	movs	r3, #0
}
 8020e7a:	0018      	movs	r0, r3
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	b002      	add	sp, #8
 8020e80:	bd80      	pop	{r7, pc}
 8020e82:	46c0      	nop			@ (mov r8, r8)
 8020e84:	ffff8000 	.word	0xffff8000

08020e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b084      	sub	sp, #16
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	2244      	movs	r2, #68	@ 0x44
 8020e94:	5a9b      	ldrh	r3, [r3, r2]
 8020e96:	b29b      	uxth	r3, r3
 8020e98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8020e9a:	68fb      	ldr	r3, [r7, #12]
}
 8020e9c:	0018      	movs	r0, r3
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	b004      	add	sp, #16
 8020ea2:	bd80      	pop	{r7, pc}

08020ea4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020ea4:	b580      	push	{r7, lr}
 8020ea6:	b08a      	sub	sp, #40	@ 0x28
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	60f8      	str	r0, [r7, #12]
 8020eac:	60b9      	str	r1, [r7, #8]
 8020eae:	0019      	movs	r1, r3
 8020eb0:	1dbb      	adds	r3, r7, #6
 8020eb2:	801a      	strh	r2, [r3, #0]
 8020eb4:	1d3b      	adds	r3, r7, #4
 8020eb6:	1c0a      	adds	r2, r1, #0
 8020eb8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8020eba:	1d3b      	adds	r3, r7, #4
 8020ebc:	881b      	ldrh	r3, [r3, #0]
 8020ebe:	3301      	adds	r3, #1
 8020ec0:	085b      	lsrs	r3, r3, #1
 8020ec2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020ec4:	68fb      	ldr	r3, [r7, #12]
 8020ec6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020ec8:	68bb      	ldr	r3, [r7, #8]
 8020eca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020ecc:	1dbb      	adds	r3, r7, #6
 8020ece:	881a      	ldrh	r2, [r3, #0]
 8020ed0:	697b      	ldr	r3, [r7, #20]
 8020ed2:	18d3      	adds	r3, r2, r3
 8020ed4:	2280      	movs	r2, #128	@ 0x80
 8020ed6:	00d2      	lsls	r2, r2, #3
 8020ed8:	4694      	mov	ip, r2
 8020eda:	4463      	add	r3, ip
 8020edc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8020ede:	69bb      	ldr	r3, [r7, #24]
 8020ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8020ee2:	e021      	b.n	8020f28 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8020ee4:	69fb      	ldr	r3, [r7, #28]
 8020ee6:	781a      	ldrb	r2, [r3, #0]
 8020ee8:	2112      	movs	r1, #18
 8020eea:	187b      	adds	r3, r7, r1
 8020eec:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8020eee:	69fb      	ldr	r3, [r7, #28]
 8020ef0:	3301      	adds	r3, #1
 8020ef2:	781b      	ldrb	r3, [r3, #0]
 8020ef4:	b21b      	sxth	r3, r3
 8020ef6:	021b      	lsls	r3, r3, #8
 8020ef8:	b21a      	sxth	r2, r3
 8020efa:	187b      	adds	r3, r7, r1
 8020efc:	2000      	movs	r0, #0
 8020efe:	5e1b      	ldrsh	r3, [r3, r0]
 8020f00:	4313      	orrs	r3, r2
 8020f02:	b21a      	sxth	r2, r3
 8020f04:	187b      	adds	r3, r7, r1
 8020f06:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8020f08:	6a3b      	ldr	r3, [r7, #32]
 8020f0a:	187a      	adds	r2, r7, r1
 8020f0c:	8812      	ldrh	r2, [r2, #0]
 8020f0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8020f10:	6a3b      	ldr	r3, [r7, #32]
 8020f12:	3302      	adds	r3, #2
 8020f14:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8020f16:	69fb      	ldr	r3, [r7, #28]
 8020f18:	3301      	adds	r3, #1
 8020f1a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8020f1c:	69fb      	ldr	r3, [r7, #28]
 8020f1e:	3301      	adds	r3, #1
 8020f20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8020f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f24:	3b01      	subs	r3, #1
 8020f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8020f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d1da      	bne.n	8020ee4 <USB_WritePMA+0x40>
  }
}
 8020f2e:	46c0      	nop			@ (mov r8, r8)
 8020f30:	46c0      	nop			@ (mov r8, r8)
 8020f32:	46bd      	mov	sp, r7
 8020f34:	b00a      	add	sp, #40	@ 0x28
 8020f36:	bd80      	pop	{r7, pc}

08020f38 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020f38:	b580      	push	{r7, lr}
 8020f3a:	b08a      	sub	sp, #40	@ 0x28
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	60f8      	str	r0, [r7, #12]
 8020f40:	60b9      	str	r1, [r7, #8]
 8020f42:	0019      	movs	r1, r3
 8020f44:	1dbb      	adds	r3, r7, #6
 8020f46:	801a      	strh	r2, [r3, #0]
 8020f48:	1d3b      	adds	r3, r7, #4
 8020f4a:	1c0a      	adds	r2, r1, #0
 8020f4c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8020f4e:	1d3b      	adds	r3, r7, #4
 8020f50:	881b      	ldrh	r3, [r3, #0]
 8020f52:	085b      	lsrs	r3, r3, #1
 8020f54:	b29b      	uxth	r3, r3
 8020f56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020f5c:	68bb      	ldr	r3, [r7, #8]
 8020f5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020f60:	1dbb      	adds	r3, r7, #6
 8020f62:	881a      	ldrh	r2, [r3, #0]
 8020f64:	697b      	ldr	r3, [r7, #20]
 8020f66:	18d3      	adds	r3, r2, r3
 8020f68:	2280      	movs	r2, #128	@ 0x80
 8020f6a:	00d2      	lsls	r2, r2, #3
 8020f6c:	4694      	mov	ip, r2
 8020f6e:	4463      	add	r3, ip
 8020f70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8020f72:	69bb      	ldr	r3, [r7, #24]
 8020f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8020f76:	e018      	b.n	8020faa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8020f78:	6a3b      	ldr	r3, [r7, #32]
 8020f7a:	881b      	ldrh	r3, [r3, #0]
 8020f7c:	b29b      	uxth	r3, r3
 8020f7e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8020f80:	6a3b      	ldr	r3, [r7, #32]
 8020f82:	3302      	adds	r3, #2
 8020f84:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020f86:	693b      	ldr	r3, [r7, #16]
 8020f88:	b2da      	uxtb	r2, r3
 8020f8a:	69fb      	ldr	r3, [r7, #28]
 8020f8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8020f8e:	69fb      	ldr	r3, [r7, #28]
 8020f90:	3301      	adds	r3, #1
 8020f92:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8020f94:	693b      	ldr	r3, [r7, #16]
 8020f96:	0a1b      	lsrs	r3, r3, #8
 8020f98:	b2da      	uxtb	r2, r3
 8020f9a:	69fb      	ldr	r3, [r7, #28]
 8020f9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8020f9e:	69fb      	ldr	r3, [r7, #28]
 8020fa0:	3301      	adds	r3, #1
 8020fa2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8020fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fa6:	3b01      	subs	r3, #1
 8020fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8020faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d1e3      	bne.n	8020f78 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8020fb0:	1d3b      	adds	r3, r7, #4
 8020fb2:	881b      	ldrh	r3, [r3, #0]
 8020fb4:	2201      	movs	r2, #1
 8020fb6:	4013      	ands	r3, r2
 8020fb8:	b29b      	uxth	r3, r3
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d007      	beq.n	8020fce <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8020fbe:	6a3b      	ldr	r3, [r7, #32]
 8020fc0:	881b      	ldrh	r3, [r3, #0]
 8020fc2:	b29b      	uxth	r3, r3
 8020fc4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020fc6:	693b      	ldr	r3, [r7, #16]
 8020fc8:	b2da      	uxtb	r2, r3
 8020fca:	69fb      	ldr	r3, [r7, #28]
 8020fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8020fce:	46c0      	nop			@ (mov r8, r8)
 8020fd0:	46bd      	mov	sp, r7
 8020fd2:	b00a      	add	sp, #40	@ 0x28
 8020fd4:	bd80      	pop	{r7, pc}

08020fd6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020fd6:	b580      	push	{r7, lr}
 8020fd8:	b084      	sub	sp, #16
 8020fda:	af00      	add	r7, sp, #0
 8020fdc:	6078      	str	r0, [r7, #4]
 8020fde:	000a      	movs	r2, r1
 8020fe0:	1cfb      	adds	r3, r7, #3
 8020fe2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020fe4:	230f      	movs	r3, #15
 8020fe6:	18fb      	adds	r3, r7, r3
 8020fe8:	2200      	movs	r2, #0
 8020fea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	7c1b      	ldrb	r3, [r3, #16]
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d116      	bne.n	8021022 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020ff4:	2380      	movs	r3, #128	@ 0x80
 8020ff6:	009b      	lsls	r3, r3, #2
 8020ff8:	6878      	ldr	r0, [r7, #4]
 8020ffa:	2202      	movs	r2, #2
 8020ffc:	2181      	movs	r1, #129	@ 0x81
 8020ffe:	f002 f8ec 	bl	80231da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	2201      	movs	r2, #1
 8021006:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021008:	2380      	movs	r3, #128	@ 0x80
 802100a:	009b      	lsls	r3, r3, #2
 802100c:	6878      	ldr	r0, [r7, #4]
 802100e:	2202      	movs	r2, #2
 8021010:	2101      	movs	r1, #1
 8021012:	f002 f8e2 	bl	80231da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021016:	687a      	ldr	r2, [r7, #4]
 8021018:	23b6      	movs	r3, #182	@ 0xb6
 802101a:	005b      	lsls	r3, r3, #1
 802101c:	2101      	movs	r1, #1
 802101e:	50d1      	str	r1, [r2, r3]
 8021020:	e013      	b.n	802104a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8021022:	6878      	ldr	r0, [r7, #4]
 8021024:	2340      	movs	r3, #64	@ 0x40
 8021026:	2202      	movs	r2, #2
 8021028:	2181      	movs	r1, #129	@ 0x81
 802102a:	f002 f8d6 	bl	80231da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	2201      	movs	r2, #1
 8021032:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021034:	6878      	ldr	r0, [r7, #4]
 8021036:	2340      	movs	r3, #64	@ 0x40
 8021038:	2202      	movs	r2, #2
 802103a:	2101      	movs	r1, #1
 802103c:	f002 f8cd 	bl	80231da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021040:	687a      	ldr	r2, [r7, #4]
 8021042:	23b6      	movs	r3, #182	@ 0xb6
 8021044:	005b      	lsls	r3, r3, #1
 8021046:	2101      	movs	r1, #1
 8021048:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802104a:	6878      	ldr	r0, [r7, #4]
 802104c:	2308      	movs	r3, #8
 802104e:	2203      	movs	r2, #3
 8021050:	2182      	movs	r1, #130	@ 0x82
 8021052:	f002 f8c2 	bl	80231da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	2201      	movs	r2, #1
 802105a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802105c:	2387      	movs	r3, #135	@ 0x87
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	0018      	movs	r0, r3
 8021062:	f002 fa53 	bl	802350c <USBD_static_malloc>
 8021066:	0001      	movs	r1, r0
 8021068:	687a      	ldr	r2, [r7, #4]
 802106a:	23ae      	movs	r3, #174	@ 0xae
 802106c:	009b      	lsls	r3, r3, #2
 802106e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021070:	687a      	ldr	r2, [r7, #4]
 8021072:	23ae      	movs	r3, #174	@ 0xae
 8021074:	009b      	lsls	r3, r3, #2
 8021076:	58d3      	ldr	r3, [r2, r3]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d104      	bne.n	8021086 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 802107c:	230f      	movs	r3, #15
 802107e:	18fb      	adds	r3, r7, r3
 8021080:	2201      	movs	r2, #1
 8021082:	701a      	strb	r2, [r3, #0]
 8021084:	e02c      	b.n	80210e0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021086:	687a      	ldr	r2, [r7, #4]
 8021088:	23ae      	movs	r3, #174	@ 0xae
 802108a:	009b      	lsls	r3, r3, #2
 802108c:	58d3      	ldr	r3, [r2, r3]
 802108e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021090:	687a      	ldr	r2, [r7, #4]
 8021092:	23af      	movs	r3, #175	@ 0xaf
 8021094:	009b      	lsls	r3, r3, #2
 8021096:	58d3      	ldr	r3, [r2, r3]
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 802109c:	68ba      	ldr	r2, [r7, #8]
 802109e:	2385      	movs	r3, #133	@ 0x85
 80210a0:	009b      	lsls	r3, r3, #2
 80210a2:	2100      	movs	r1, #0
 80210a4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80210a6:	68ba      	ldr	r2, [r7, #8]
 80210a8:	2386      	movs	r3, #134	@ 0x86
 80210aa:	009b      	lsls	r3, r3, #2
 80210ac:	2100      	movs	r1, #0
 80210ae:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	7c1b      	ldrb	r3, [r3, #16]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d10a      	bne.n	80210ce <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80210b8:	68ba      	ldr	r2, [r7, #8]
 80210ba:	2381      	movs	r3, #129	@ 0x81
 80210bc:	009b      	lsls	r3, r3, #2
 80210be:	58d2      	ldr	r2, [r2, r3]
 80210c0:	2380      	movs	r3, #128	@ 0x80
 80210c2:	009b      	lsls	r3, r3, #2
 80210c4:	6878      	ldr	r0, [r7, #4]
 80210c6:	2101      	movs	r1, #1
 80210c8:	f002 f9d2 	bl	8023470 <USBD_LL_PrepareReceive>
 80210cc:	e008      	b.n	80210e0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80210ce:	68ba      	ldr	r2, [r7, #8]
 80210d0:	2381      	movs	r3, #129	@ 0x81
 80210d2:	009b      	lsls	r3, r3, #2
 80210d4:	58d2      	ldr	r2, [r2, r3]
 80210d6:	6878      	ldr	r0, [r7, #4]
 80210d8:	2340      	movs	r3, #64	@ 0x40
 80210da:	2101      	movs	r1, #1
 80210dc:	f002 f9c8 	bl	8023470 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80210e0:	230f      	movs	r3, #15
 80210e2:	18fb      	adds	r3, r7, r3
 80210e4:	781b      	ldrb	r3, [r3, #0]
}
 80210e6:	0018      	movs	r0, r3
 80210e8:	46bd      	mov	sp, r7
 80210ea:	b004      	add	sp, #16
 80210ec:	bd80      	pop	{r7, pc}

080210ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80210ee:	b580      	push	{r7, lr}
 80210f0:	b084      	sub	sp, #16
 80210f2:	af00      	add	r7, sp, #0
 80210f4:	6078      	str	r0, [r7, #4]
 80210f6:	000a      	movs	r2, r1
 80210f8:	1cfb      	adds	r3, r7, #3
 80210fa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80210fc:	230f      	movs	r3, #15
 80210fe:	18fb      	adds	r3, r7, r3
 8021100:	2200      	movs	r2, #0
 8021102:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	2181      	movs	r1, #129	@ 0x81
 8021108:	0018      	movs	r0, r3
 802110a:	f002 f89d 	bl	8023248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	2200      	movs	r2, #0
 8021112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	2101      	movs	r1, #1
 8021118:	0018      	movs	r0, r3
 802111a:	f002 f895 	bl	8023248 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802111e:	687a      	ldr	r2, [r7, #4]
 8021120:	23b6      	movs	r3, #182	@ 0xb6
 8021122:	005b      	lsls	r3, r3, #1
 8021124:	2100      	movs	r1, #0
 8021126:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	2182      	movs	r1, #130	@ 0x82
 802112c:	0018      	movs	r0, r3
 802112e:	f002 f88b 	bl	8023248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	2200      	movs	r2, #0
 8021136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021138:	687a      	ldr	r2, [r7, #4]
 802113a:	23ae      	movs	r3, #174	@ 0xae
 802113c:	009b      	lsls	r3, r3, #2
 802113e:	58d3      	ldr	r3, [r2, r3]
 8021140:	2b00      	cmp	r3, #0
 8021142:	d011      	beq.n	8021168 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8021144:	687a      	ldr	r2, [r7, #4]
 8021146:	23af      	movs	r3, #175	@ 0xaf
 8021148:	009b      	lsls	r3, r3, #2
 802114a:	58d3      	ldr	r3, [r2, r3]
 802114c:	685b      	ldr	r3, [r3, #4]
 802114e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021150:	687a      	ldr	r2, [r7, #4]
 8021152:	23ae      	movs	r3, #174	@ 0xae
 8021154:	009b      	lsls	r3, r3, #2
 8021156:	58d3      	ldr	r3, [r2, r3]
 8021158:	0018      	movs	r0, r3
 802115a:	f002 f9e3 	bl	8023524 <USBD_static_free>
    pdev->pClassData = NULL;
 802115e:	687a      	ldr	r2, [r7, #4]
 8021160:	23ae      	movs	r3, #174	@ 0xae
 8021162:	009b      	lsls	r3, r3, #2
 8021164:	2100      	movs	r1, #0
 8021166:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021168:	230f      	movs	r3, #15
 802116a:	18fb      	adds	r3, r7, r3
 802116c:	781b      	ldrb	r3, [r3, #0]
}
 802116e:	0018      	movs	r0, r3
 8021170:	46bd      	mov	sp, r7
 8021172:	b004      	add	sp, #16
 8021174:	bd80      	pop	{r7, pc}
	...

08021178 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b086      	sub	sp, #24
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021182:	687a      	ldr	r2, [r7, #4]
 8021184:	23ae      	movs	r3, #174	@ 0xae
 8021186:	009b      	lsls	r3, r3, #2
 8021188:	58d3      	ldr	r3, [r2, r3]
 802118a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 802118c:	230f      	movs	r3, #15
 802118e:	18fb      	adds	r3, r7, r3
 8021190:	2200      	movs	r2, #0
 8021192:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8021194:	230c      	movs	r3, #12
 8021196:	18fb      	adds	r3, r7, r3
 8021198:	2200      	movs	r2, #0
 802119a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 802119c:	2317      	movs	r3, #23
 802119e:	18fb      	adds	r3, r7, r3
 80211a0:	2200      	movs	r2, #0
 80211a2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80211a4:	683b      	ldr	r3, [r7, #0]
 80211a6:	781b      	ldrb	r3, [r3, #0]
 80211a8:	001a      	movs	r2, r3
 80211aa:	2360      	movs	r3, #96	@ 0x60
 80211ac:	4013      	ands	r3, r2
 80211ae:	d03d      	beq.n	802122c <USBD_CDC_Setup+0xb4>
 80211b0:	2b20      	cmp	r3, #32
 80211b2:	d000      	beq.n	80211b6 <USBD_CDC_Setup+0x3e>
 80211b4:	e094      	b.n	80212e0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80211b6:	683b      	ldr	r3, [r7, #0]
 80211b8:	88db      	ldrh	r3, [r3, #6]
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d02b      	beq.n	8021216 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80211be:	683b      	ldr	r3, [r7, #0]
 80211c0:	781b      	ldrb	r3, [r3, #0]
 80211c2:	b25b      	sxtb	r3, r3
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	da12      	bge.n	80211ee <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80211c8:	687a      	ldr	r2, [r7, #4]
 80211ca:	23af      	movs	r3, #175	@ 0xaf
 80211cc:	009b      	lsls	r3, r3, #2
 80211ce:	58d3      	ldr	r3, [r2, r3]
 80211d0:	689b      	ldr	r3, [r3, #8]
 80211d2:	683a      	ldr	r2, [r7, #0]
 80211d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80211d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80211d8:	683a      	ldr	r2, [r7, #0]
 80211da:	88d2      	ldrh	r2, [r2, #6]
 80211dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80211de:	6939      	ldr	r1, [r7, #16]
 80211e0:	683b      	ldr	r3, [r7, #0]
 80211e2:	88da      	ldrh	r2, [r3, #6]
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	0018      	movs	r0, r3
 80211e8:	f001 fbaf 	bl	802294a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80211ec:	e083      	b.n	80212f6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	7859      	ldrb	r1, [r3, #1]
 80211f2:	693a      	ldr	r2, [r7, #16]
 80211f4:	2380      	movs	r3, #128	@ 0x80
 80211f6:	009b      	lsls	r3, r3, #2
 80211f8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80211fa:	683b      	ldr	r3, [r7, #0]
 80211fc:	88db      	ldrh	r3, [r3, #6]
 80211fe:	b2d9      	uxtb	r1, r3
 8021200:	693b      	ldr	r3, [r7, #16]
 8021202:	4a40      	ldr	r2, [pc, #256]	@ (8021304 <USBD_CDC_Setup+0x18c>)
 8021204:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8021206:	6939      	ldr	r1, [r7, #16]
 8021208:	683b      	ldr	r3, [r7, #0]
 802120a:	88da      	ldrh	r2, [r3, #6]
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	0018      	movs	r0, r3
 8021210:	f001 fbce 	bl	80229b0 <USBD_CtlPrepareRx>
      break;
 8021214:	e06f      	b.n	80212f6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8021216:	687a      	ldr	r2, [r7, #4]
 8021218:	23af      	movs	r3, #175	@ 0xaf
 802121a:	009b      	lsls	r3, r3, #2
 802121c:	58d3      	ldr	r3, [r2, r3]
 802121e:	689b      	ldr	r3, [r3, #8]
 8021220:	683a      	ldr	r2, [r7, #0]
 8021222:	7850      	ldrb	r0, [r2, #1]
 8021224:	6839      	ldr	r1, [r7, #0]
 8021226:	2200      	movs	r2, #0
 8021228:	4798      	blx	r3
      break;
 802122a:	e064      	b.n	80212f6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802122c:	683b      	ldr	r3, [r7, #0]
 802122e:	785b      	ldrb	r3, [r3, #1]
 8021230:	2b0b      	cmp	r3, #11
 8021232:	d037      	beq.n	80212a4 <USBD_CDC_Setup+0x12c>
 8021234:	dc47      	bgt.n	80212c6 <USBD_CDC_Setup+0x14e>
 8021236:	2b00      	cmp	r3, #0
 8021238:	d002      	beq.n	8021240 <USBD_CDC_Setup+0xc8>
 802123a:	2b0a      	cmp	r3, #10
 802123c:	d019      	beq.n	8021272 <USBD_CDC_Setup+0xfa>
 802123e:	e042      	b.n	80212c6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021240:	687a      	ldr	r2, [r7, #4]
 8021242:	23a7      	movs	r3, #167	@ 0xa7
 8021244:	009b      	lsls	r3, r3, #2
 8021246:	5cd3      	ldrb	r3, [r2, r3]
 8021248:	2b03      	cmp	r3, #3
 802124a:	d107      	bne.n	802125c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 802124c:	230c      	movs	r3, #12
 802124e:	18f9      	adds	r1, r7, r3
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	2202      	movs	r2, #2
 8021254:	0018      	movs	r0, r3
 8021256:	f001 fb78 	bl	802294a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802125a:	e040      	b.n	80212de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802125c:	683a      	ldr	r2, [r7, #0]
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	0011      	movs	r1, r2
 8021262:	0018      	movs	r0, r3
 8021264:	f001 faf3 	bl	802284e <USBD_CtlError>
            ret = USBD_FAIL;
 8021268:	2317      	movs	r3, #23
 802126a:	18fb      	adds	r3, r7, r3
 802126c:	2202      	movs	r2, #2
 802126e:	701a      	strb	r2, [r3, #0]
          break;
 8021270:	e035      	b.n	80212de <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021272:	687a      	ldr	r2, [r7, #4]
 8021274:	23a7      	movs	r3, #167	@ 0xa7
 8021276:	009b      	lsls	r3, r3, #2
 8021278:	5cd3      	ldrb	r3, [r2, r3]
 802127a:	2b03      	cmp	r3, #3
 802127c:	d107      	bne.n	802128e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802127e:	230f      	movs	r3, #15
 8021280:	18f9      	adds	r1, r7, r3
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	2201      	movs	r2, #1
 8021286:	0018      	movs	r0, r3
 8021288:	f001 fb5f 	bl	802294a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802128c:	e027      	b.n	80212de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802128e:	683a      	ldr	r2, [r7, #0]
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	0011      	movs	r1, r2
 8021294:	0018      	movs	r0, r3
 8021296:	f001 fada 	bl	802284e <USBD_CtlError>
            ret = USBD_FAIL;
 802129a:	2317      	movs	r3, #23
 802129c:	18fb      	adds	r3, r7, r3
 802129e:	2202      	movs	r2, #2
 80212a0:	701a      	strb	r2, [r3, #0]
          break;
 80212a2:	e01c      	b.n	80212de <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80212a4:	687a      	ldr	r2, [r7, #4]
 80212a6:	23a7      	movs	r3, #167	@ 0xa7
 80212a8:	009b      	lsls	r3, r3, #2
 80212aa:	5cd3      	ldrb	r3, [r2, r3]
 80212ac:	2b03      	cmp	r3, #3
 80212ae:	d015      	beq.n	80212dc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80212b0:	683a      	ldr	r2, [r7, #0]
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	0011      	movs	r1, r2
 80212b6:	0018      	movs	r0, r3
 80212b8:	f001 fac9 	bl	802284e <USBD_CtlError>
            ret = USBD_FAIL;
 80212bc:	2317      	movs	r3, #23
 80212be:	18fb      	adds	r3, r7, r3
 80212c0:	2202      	movs	r2, #2
 80212c2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80212c4:	e00a      	b.n	80212dc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80212c6:	683a      	ldr	r2, [r7, #0]
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	0011      	movs	r1, r2
 80212cc:	0018      	movs	r0, r3
 80212ce:	f001 fabe 	bl	802284e <USBD_CtlError>
          ret = USBD_FAIL;
 80212d2:	2317      	movs	r3, #23
 80212d4:	18fb      	adds	r3, r7, r3
 80212d6:	2202      	movs	r2, #2
 80212d8:	701a      	strb	r2, [r3, #0]
          break;
 80212da:	e000      	b.n	80212de <USBD_CDC_Setup+0x166>
          break;
 80212dc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80212de:	e00a      	b.n	80212f6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80212e0:	683a      	ldr	r2, [r7, #0]
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	0011      	movs	r1, r2
 80212e6:	0018      	movs	r0, r3
 80212e8:	f001 fab1 	bl	802284e <USBD_CtlError>
      ret = USBD_FAIL;
 80212ec:	2317      	movs	r3, #23
 80212ee:	18fb      	adds	r3, r7, r3
 80212f0:	2202      	movs	r2, #2
 80212f2:	701a      	strb	r2, [r3, #0]
      break;
 80212f4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80212f6:	2317      	movs	r3, #23
 80212f8:	18fb      	adds	r3, r7, r3
 80212fa:	781b      	ldrb	r3, [r3, #0]
}
 80212fc:	0018      	movs	r0, r3
 80212fe:	46bd      	mov	sp, r7
 8021300:	b006      	add	sp, #24
 8021302:	bd80      	pop	{r7, pc}
 8021304:	00000201 	.word	0x00000201

08021308 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021308:	b580      	push	{r7, lr}
 802130a:	b084      	sub	sp, #16
 802130c:	af00      	add	r7, sp, #0
 802130e:	6078      	str	r0, [r7, #4]
 8021310:	000a      	movs	r2, r1
 8021312:	1cfb      	adds	r3, r7, #3
 8021314:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8021316:	687a      	ldr	r2, [r7, #4]
 8021318:	23ae      	movs	r3, #174	@ 0xae
 802131a:	009b      	lsls	r3, r3, #2
 802131c:	58d3      	ldr	r3, [r2, r3]
 802131e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021320:	687a      	ldr	r2, [r7, #4]
 8021322:	23b0      	movs	r3, #176	@ 0xb0
 8021324:	009b      	lsls	r3, r3, #2
 8021326:	58d3      	ldr	r3, [r2, r3]
 8021328:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 802132a:	687a      	ldr	r2, [r7, #4]
 802132c:	23ae      	movs	r3, #174	@ 0xae
 802132e:	009b      	lsls	r3, r3, #2
 8021330:	58d3      	ldr	r3, [r2, r3]
 8021332:	2b00      	cmp	r3, #0
 8021334:	d03e      	beq.n	80213b4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8021336:	1cfb      	adds	r3, r7, #3
 8021338:	781a      	ldrb	r2, [r3, #0]
 802133a:	6879      	ldr	r1, [r7, #4]
 802133c:	0013      	movs	r3, r2
 802133e:	009b      	lsls	r3, r3, #2
 8021340:	189b      	adds	r3, r3, r2
 8021342:	009b      	lsls	r3, r3, #2
 8021344:	18cb      	adds	r3, r1, r3
 8021346:	331c      	adds	r3, #28
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	2b00      	cmp	r3, #0
 802134c:	d02b      	beq.n	80213a6 <USBD_CDC_DataIn+0x9e>
 802134e:	1cfb      	adds	r3, r7, #3
 8021350:	781a      	ldrb	r2, [r3, #0]
 8021352:	6879      	ldr	r1, [r7, #4]
 8021354:	0013      	movs	r3, r2
 8021356:	009b      	lsls	r3, r3, #2
 8021358:	189b      	adds	r3, r3, r2
 802135a:	009b      	lsls	r3, r3, #2
 802135c:	18cb      	adds	r3, r1, r3
 802135e:	331c      	adds	r3, #28
 8021360:	6818      	ldr	r0, [r3, #0]
 8021362:	1cfb      	adds	r3, r7, #3
 8021364:	781a      	ldrb	r2, [r3, #0]
 8021366:	68b9      	ldr	r1, [r7, #8]
 8021368:	0013      	movs	r3, r2
 802136a:	009b      	lsls	r3, r3, #2
 802136c:	189b      	adds	r3, r3, r2
 802136e:	00db      	lsls	r3, r3, #3
 8021370:	18cb      	adds	r3, r1, r3
 8021372:	3338      	adds	r3, #56	@ 0x38
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	0019      	movs	r1, r3
 8021378:	f7de ff9a 	bl	80002b0 <__aeabi_uidivmod>
 802137c:	1e0b      	subs	r3, r1, #0
 802137e:	d112      	bne.n	80213a6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021380:	1cfb      	adds	r3, r7, #3
 8021382:	781a      	ldrb	r2, [r3, #0]
 8021384:	6879      	ldr	r1, [r7, #4]
 8021386:	0013      	movs	r3, r2
 8021388:	009b      	lsls	r3, r3, #2
 802138a:	189b      	adds	r3, r3, r2
 802138c:	009b      	lsls	r3, r3, #2
 802138e:	18cb      	adds	r3, r1, r3
 8021390:	331c      	adds	r3, #28
 8021392:	2200      	movs	r2, #0
 8021394:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8021396:	1cfb      	adds	r3, r7, #3
 8021398:	7819      	ldrb	r1, [r3, #0]
 802139a:	6878      	ldr	r0, [r7, #4]
 802139c:	2300      	movs	r3, #0
 802139e:	2200      	movs	r2, #0
 80213a0:	f002 f82f 	bl	8023402 <USBD_LL_Transmit>
 80213a4:	e004      	b.n	80213b0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80213a6:	68fa      	ldr	r2, [r7, #12]
 80213a8:	2385      	movs	r3, #133	@ 0x85
 80213aa:	009b      	lsls	r3, r3, #2
 80213ac:	2100      	movs	r1, #0
 80213ae:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80213b0:	2300      	movs	r3, #0
 80213b2:	e000      	b.n	80213b6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80213b4:	2302      	movs	r3, #2
  }
}
 80213b6:	0018      	movs	r0, r3
 80213b8:	46bd      	mov	sp, r7
 80213ba:	b004      	add	sp, #16
 80213bc:	bd80      	pop	{r7, pc}

080213be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80213be:	b580      	push	{r7, lr}
 80213c0:	b084      	sub	sp, #16
 80213c2:	af00      	add	r7, sp, #0
 80213c4:	6078      	str	r0, [r7, #4]
 80213c6:	000a      	movs	r2, r1
 80213c8:	1cfb      	adds	r3, r7, #3
 80213ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80213cc:	687a      	ldr	r2, [r7, #4]
 80213ce:	23ae      	movs	r3, #174	@ 0xae
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	58d3      	ldr	r3, [r2, r3]
 80213d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80213d6:	1cfb      	adds	r3, r7, #3
 80213d8:	781a      	ldrb	r2, [r3, #0]
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	0011      	movs	r1, r2
 80213de:	0018      	movs	r0, r3
 80213e0:	f002 f87d 	bl	80234de <USBD_LL_GetRxDataSize>
 80213e4:	0001      	movs	r1, r0
 80213e6:	68fa      	ldr	r2, [r7, #12]
 80213e8:	2383      	movs	r3, #131	@ 0x83
 80213ea:	009b      	lsls	r3, r3, #2
 80213ec:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80213ee:	687a      	ldr	r2, [r7, #4]
 80213f0:	23ae      	movs	r3, #174	@ 0xae
 80213f2:	009b      	lsls	r3, r3, #2
 80213f4:	58d3      	ldr	r3, [r2, r3]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d011      	beq.n	802141e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80213fa:	687a      	ldr	r2, [r7, #4]
 80213fc:	23af      	movs	r3, #175	@ 0xaf
 80213fe:	009b      	lsls	r3, r3, #2
 8021400:	58d3      	ldr	r3, [r2, r3]
 8021402:	68da      	ldr	r2, [r3, #12]
 8021404:	68f9      	ldr	r1, [r7, #12]
 8021406:	2381      	movs	r3, #129	@ 0x81
 8021408:	009b      	lsls	r3, r3, #2
 802140a:	58c8      	ldr	r0, [r1, r3]
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	2183      	movs	r1, #131	@ 0x83
 8021410:	0089      	lsls	r1, r1, #2
 8021412:	468c      	mov	ip, r1
 8021414:	4463      	add	r3, ip
 8021416:	0019      	movs	r1, r3
 8021418:	4790      	blx	r2

    return USBD_OK;
 802141a:	2300      	movs	r3, #0
 802141c:	e000      	b.n	8021420 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 802141e:	2302      	movs	r3, #2
  }
}
 8021420:	0018      	movs	r0, r3
 8021422:	46bd      	mov	sp, r7
 8021424:	b004      	add	sp, #16
 8021426:	bd80      	pop	{r7, pc}

08021428 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021428:	b590      	push	{r4, r7, lr}
 802142a:	b085      	sub	sp, #20
 802142c:	af00      	add	r7, sp, #0
 802142e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021430:	687a      	ldr	r2, [r7, #4]
 8021432:	23ae      	movs	r3, #174	@ 0xae
 8021434:	009b      	lsls	r3, r3, #2
 8021436:	58d3      	ldr	r3, [r2, r3]
 8021438:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802143a:	687a      	ldr	r2, [r7, #4]
 802143c:	23af      	movs	r3, #175	@ 0xaf
 802143e:	009b      	lsls	r3, r3, #2
 8021440:	58d3      	ldr	r3, [r2, r3]
 8021442:	2b00      	cmp	r3, #0
 8021444:	d018      	beq.n	8021478 <USBD_CDC_EP0_RxReady+0x50>
 8021446:	68fa      	ldr	r2, [r7, #12]
 8021448:	2380      	movs	r3, #128	@ 0x80
 802144a:	009b      	lsls	r3, r3, #2
 802144c:	5cd3      	ldrb	r3, [r2, r3]
 802144e:	2bff      	cmp	r3, #255	@ 0xff
 8021450:	d012      	beq.n	8021478 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021452:	687a      	ldr	r2, [r7, #4]
 8021454:	23af      	movs	r3, #175	@ 0xaf
 8021456:	009b      	lsls	r3, r3, #2
 8021458:	58d3      	ldr	r3, [r2, r3]
 802145a:	689b      	ldr	r3, [r3, #8]
 802145c:	68f9      	ldr	r1, [r7, #12]
 802145e:	2280      	movs	r2, #128	@ 0x80
 8021460:	0092      	lsls	r2, r2, #2
 8021462:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021464:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021466:	68fa      	ldr	r2, [r7, #12]
 8021468:	4c06      	ldr	r4, [pc, #24]	@ (8021484 <USBD_CDC_EP0_RxReady+0x5c>)
 802146a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 802146c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802146e:	68fa      	ldr	r2, [r7, #12]
 8021470:	2380      	movs	r3, #128	@ 0x80
 8021472:	009b      	lsls	r3, r3, #2
 8021474:	21ff      	movs	r1, #255	@ 0xff
 8021476:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021478:	2300      	movs	r3, #0
}
 802147a:	0018      	movs	r0, r3
 802147c:	46bd      	mov	sp, r7
 802147e:	b005      	add	sp, #20
 8021480:	bd90      	pop	{r4, r7, pc}
 8021482:	46c0      	nop			@ (mov r8, r8)
 8021484:	00000201 	.word	0x00000201

08021488 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021488:	b580      	push	{r7, lr}
 802148a:	b082      	sub	sp, #8
 802148c:	af00      	add	r7, sp, #0
 802148e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	2243      	movs	r2, #67	@ 0x43
 8021494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021496:	4b02      	ldr	r3, [pc, #8]	@ (80214a0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021498:	0018      	movs	r0, r3
 802149a:	46bd      	mov	sp, r7
 802149c:	b002      	add	sp, #8
 802149e:	bd80      	pop	{r7, pc}
 80214a0:	2000018c 	.word	0x2000018c

080214a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80214a4:	b580      	push	{r7, lr}
 80214a6:	b082      	sub	sp, #8
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	2243      	movs	r2, #67	@ 0x43
 80214b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80214b2:	4b02      	ldr	r3, [pc, #8]	@ (80214bc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80214b4:	0018      	movs	r0, r3
 80214b6:	46bd      	mov	sp, r7
 80214b8:	b002      	add	sp, #8
 80214ba:	bd80      	pop	{r7, pc}
 80214bc:	20000148 	.word	0x20000148

080214c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80214c0:	b580      	push	{r7, lr}
 80214c2:	b082      	sub	sp, #8
 80214c4:	af00      	add	r7, sp, #0
 80214c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80214c8:	687b      	ldr	r3, [r7, #4]
 80214ca:	2243      	movs	r2, #67	@ 0x43
 80214cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80214ce:	4b02      	ldr	r3, [pc, #8]	@ (80214d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80214d0:	0018      	movs	r0, r3
 80214d2:	46bd      	mov	sp, r7
 80214d4:	b002      	add	sp, #8
 80214d6:	bd80      	pop	{r7, pc}
 80214d8:	200001d0 	.word	0x200001d0

080214dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80214dc:	b580      	push	{r7, lr}
 80214de:	b082      	sub	sp, #8
 80214e0:	af00      	add	r7, sp, #0
 80214e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	220a      	movs	r2, #10
 80214e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80214ea:	4b02      	ldr	r3, [pc, #8]	@ (80214f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80214ec:	0018      	movs	r0, r3
 80214ee:	46bd      	mov	sp, r7
 80214f0:	b002      	add	sp, #8
 80214f2:	bd80      	pop	{r7, pc}
 80214f4:	20000104 	.word	0x20000104

080214f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80214f8:	b580      	push	{r7, lr}
 80214fa:	b084      	sub	sp, #16
 80214fc:	af00      	add	r7, sp, #0
 80214fe:	6078      	str	r0, [r7, #4]
 8021500:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021502:	200f      	movs	r0, #15
 8021504:	183b      	adds	r3, r7, r0
 8021506:	2202      	movs	r2, #2
 8021508:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 802150a:	683b      	ldr	r3, [r7, #0]
 802150c:	2b00      	cmp	r3, #0
 802150e:	d007      	beq.n	8021520 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021510:	687a      	ldr	r2, [r7, #4]
 8021512:	23af      	movs	r3, #175	@ 0xaf
 8021514:	009b      	lsls	r3, r3, #2
 8021516:	6839      	ldr	r1, [r7, #0]
 8021518:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 802151a:	183b      	adds	r3, r7, r0
 802151c:	2200      	movs	r2, #0
 802151e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021520:	230f      	movs	r3, #15
 8021522:	18fb      	adds	r3, r7, r3
 8021524:	781b      	ldrb	r3, [r3, #0]
}
 8021526:	0018      	movs	r0, r3
 8021528:	46bd      	mov	sp, r7
 802152a:	b004      	add	sp, #16
 802152c:	bd80      	pop	{r7, pc}

0802152e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 802152e:	b580      	push	{r7, lr}
 8021530:	b086      	sub	sp, #24
 8021532:	af00      	add	r7, sp, #0
 8021534:	60f8      	str	r0, [r7, #12]
 8021536:	60b9      	str	r1, [r7, #8]
 8021538:	1dbb      	adds	r3, r7, #6
 802153a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802153c:	68fa      	ldr	r2, [r7, #12]
 802153e:	23ae      	movs	r3, #174	@ 0xae
 8021540:	009b      	lsls	r3, r3, #2
 8021542:	58d3      	ldr	r3, [r2, r3]
 8021544:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021546:	697a      	ldr	r2, [r7, #20]
 8021548:	2382      	movs	r3, #130	@ 0x82
 802154a:	009b      	lsls	r3, r3, #2
 802154c:	68b9      	ldr	r1, [r7, #8]
 802154e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021550:	1dbb      	adds	r3, r7, #6
 8021552:	8819      	ldrh	r1, [r3, #0]
 8021554:	697a      	ldr	r2, [r7, #20]
 8021556:	2384      	movs	r3, #132	@ 0x84
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 802155c:	2300      	movs	r3, #0
}
 802155e:	0018      	movs	r0, r3
 8021560:	46bd      	mov	sp, r7
 8021562:	b006      	add	sp, #24
 8021564:	bd80      	pop	{r7, pc}

08021566 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021566:	b580      	push	{r7, lr}
 8021568:	b084      	sub	sp, #16
 802156a:	af00      	add	r7, sp, #0
 802156c:	6078      	str	r0, [r7, #4]
 802156e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021570:	687a      	ldr	r2, [r7, #4]
 8021572:	23ae      	movs	r3, #174	@ 0xae
 8021574:	009b      	lsls	r3, r3, #2
 8021576:	58d3      	ldr	r3, [r2, r3]
 8021578:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 802157a:	68fa      	ldr	r2, [r7, #12]
 802157c:	2381      	movs	r3, #129	@ 0x81
 802157e:	009b      	lsls	r3, r3, #2
 8021580:	6839      	ldr	r1, [r7, #0]
 8021582:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021584:	2300      	movs	r3, #0
}
 8021586:	0018      	movs	r0, r3
 8021588:	46bd      	mov	sp, r7
 802158a:	b004      	add	sp, #16
 802158c:	bd80      	pop	{r7, pc}

0802158e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802158e:	b580      	push	{r7, lr}
 8021590:	b084      	sub	sp, #16
 8021592:	af00      	add	r7, sp, #0
 8021594:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021596:	687a      	ldr	r2, [r7, #4]
 8021598:	23ae      	movs	r3, #174	@ 0xae
 802159a:	009b      	lsls	r3, r3, #2
 802159c:	58d3      	ldr	r3, [r2, r3]
 802159e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80215a0:	687a      	ldr	r2, [r7, #4]
 80215a2:	23ae      	movs	r3, #174	@ 0xae
 80215a4:	009b      	lsls	r3, r3, #2
 80215a6:	58d3      	ldr	r3, [r2, r3]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d022      	beq.n	80215f2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80215ac:	68fa      	ldr	r2, [r7, #12]
 80215ae:	2385      	movs	r3, #133	@ 0x85
 80215b0:	009b      	lsls	r3, r3, #2
 80215b2:	58d3      	ldr	r3, [r2, r3]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d11a      	bne.n	80215ee <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80215b8:	68fa      	ldr	r2, [r7, #12]
 80215ba:	2385      	movs	r3, #133	@ 0x85
 80215bc:	009b      	lsls	r3, r3, #2
 80215be:	2101      	movs	r1, #1
 80215c0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80215c2:	68fa      	ldr	r2, [r7, #12]
 80215c4:	2384      	movs	r3, #132	@ 0x84
 80215c6:	009b      	lsls	r3, r3, #2
 80215c8:	58d2      	ldr	r2, [r2, r3]
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80215ce:	68fa      	ldr	r2, [r7, #12]
 80215d0:	2382      	movs	r3, #130	@ 0x82
 80215d2:	009b      	lsls	r3, r3, #2
 80215d4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80215d6:	68fa      	ldr	r2, [r7, #12]
 80215d8:	2384      	movs	r3, #132	@ 0x84
 80215da:	009b      	lsls	r3, r3, #2
 80215dc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80215de:	b29b      	uxth	r3, r3
 80215e0:	6878      	ldr	r0, [r7, #4]
 80215e2:	000a      	movs	r2, r1
 80215e4:	2181      	movs	r1, #129	@ 0x81
 80215e6:	f001 ff0c 	bl	8023402 <USBD_LL_Transmit>

      return USBD_OK;
 80215ea:	2300      	movs	r3, #0
 80215ec:	e002      	b.n	80215f4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80215ee:	2301      	movs	r3, #1
 80215f0:	e000      	b.n	80215f4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80215f2:	2302      	movs	r3, #2
  }
}
 80215f4:	0018      	movs	r0, r3
 80215f6:	46bd      	mov	sp, r7
 80215f8:	b004      	add	sp, #16
 80215fa:	bd80      	pop	{r7, pc}

080215fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80215fc:	b580      	push	{r7, lr}
 80215fe:	b084      	sub	sp, #16
 8021600:	af00      	add	r7, sp, #0
 8021602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021604:	687a      	ldr	r2, [r7, #4]
 8021606:	23ae      	movs	r3, #174	@ 0xae
 8021608:	009b      	lsls	r3, r3, #2
 802160a:	58d3      	ldr	r3, [r2, r3]
 802160c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 802160e:	687a      	ldr	r2, [r7, #4]
 8021610:	23ae      	movs	r3, #174	@ 0xae
 8021612:	009b      	lsls	r3, r3, #2
 8021614:	58d3      	ldr	r3, [r2, r3]
 8021616:	2b00      	cmp	r3, #0
 8021618:	d019      	beq.n	802164e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	7c1b      	ldrb	r3, [r3, #16]
 802161e:	2b00      	cmp	r3, #0
 8021620:	d10a      	bne.n	8021638 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021622:	68fa      	ldr	r2, [r7, #12]
 8021624:	2381      	movs	r3, #129	@ 0x81
 8021626:	009b      	lsls	r3, r3, #2
 8021628:	58d2      	ldr	r2, [r2, r3]
 802162a:	2380      	movs	r3, #128	@ 0x80
 802162c:	009b      	lsls	r3, r3, #2
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	2101      	movs	r1, #1
 8021632:	f001 ff1d 	bl	8023470 <USBD_LL_PrepareReceive>
 8021636:	e008      	b.n	802164a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021638:	68fa      	ldr	r2, [r7, #12]
 802163a:	2381      	movs	r3, #129	@ 0x81
 802163c:	009b      	lsls	r3, r3, #2
 802163e:	58d2      	ldr	r2, [r2, r3]
 8021640:	6878      	ldr	r0, [r7, #4]
 8021642:	2340      	movs	r3, #64	@ 0x40
 8021644:	2101      	movs	r1, #1
 8021646:	f001 ff13 	bl	8023470 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 802164a:	2300      	movs	r3, #0
 802164c:	e000      	b.n	8021650 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 802164e:	2302      	movs	r3, #2
  }
}
 8021650:	0018      	movs	r0, r3
 8021652:	46bd      	mov	sp, r7
 8021654:	b004      	add	sp, #16
 8021656:	bd80      	pop	{r7, pc}

08021658 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b084      	sub	sp, #16
 802165c:	af00      	add	r7, sp, #0
 802165e:	60f8      	str	r0, [r7, #12]
 8021660:	60b9      	str	r1, [r7, #8]
 8021662:	1dfb      	adds	r3, r7, #7
 8021664:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021666:	68fb      	ldr	r3, [r7, #12]
 8021668:	2b00      	cmp	r3, #0
 802166a:	d101      	bne.n	8021670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 802166c:	2302      	movs	r3, #2
 802166e:	e020      	b.n	80216b2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021670:	68fa      	ldr	r2, [r7, #12]
 8021672:	23ad      	movs	r3, #173	@ 0xad
 8021674:	009b      	lsls	r3, r3, #2
 8021676:	58d3      	ldr	r3, [r2, r3]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d004      	beq.n	8021686 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 802167c:	68fa      	ldr	r2, [r7, #12]
 802167e:	23ad      	movs	r3, #173	@ 0xad
 8021680:	009b      	lsls	r3, r3, #2
 8021682:	2100      	movs	r1, #0
 8021684:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021686:	68bb      	ldr	r3, [r7, #8]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d004      	beq.n	8021696 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802168c:	68fa      	ldr	r2, [r7, #12]
 802168e:	23ac      	movs	r3, #172	@ 0xac
 8021690:	009b      	lsls	r3, r3, #2
 8021692:	68b9      	ldr	r1, [r7, #8]
 8021694:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021696:	68fa      	ldr	r2, [r7, #12]
 8021698:	23a7      	movs	r3, #167	@ 0xa7
 802169a:	009b      	lsls	r3, r3, #2
 802169c:	2101      	movs	r1, #1
 802169e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	1dfa      	adds	r2, r7, #7
 80216a4:	7812      	ldrb	r2, [r2, #0]
 80216a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80216a8:	68fb      	ldr	r3, [r7, #12]
 80216aa:	0018      	movs	r0, r3
 80216ac:	f001 fd0c 	bl	80230c8 <USBD_LL_Init>

  return USBD_OK;
 80216b0:	2300      	movs	r3, #0
}
 80216b2:	0018      	movs	r0, r3
 80216b4:	46bd      	mov	sp, r7
 80216b6:	b004      	add	sp, #16
 80216b8:	bd80      	pop	{r7, pc}

080216ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80216ba:	b580      	push	{r7, lr}
 80216bc:	b084      	sub	sp, #16
 80216be:	af00      	add	r7, sp, #0
 80216c0:	6078      	str	r0, [r7, #4]
 80216c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80216c4:	200f      	movs	r0, #15
 80216c6:	183b      	adds	r3, r7, r0
 80216c8:	2200      	movs	r2, #0
 80216ca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80216cc:	683b      	ldr	r3, [r7, #0]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d008      	beq.n	80216e4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80216d2:	687a      	ldr	r2, [r7, #4]
 80216d4:	23ad      	movs	r3, #173	@ 0xad
 80216d6:	009b      	lsls	r3, r3, #2
 80216d8:	6839      	ldr	r1, [r7, #0]
 80216da:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80216dc:	183b      	adds	r3, r7, r0
 80216de:	2200      	movs	r2, #0
 80216e0:	701a      	strb	r2, [r3, #0]
 80216e2:	e003      	b.n	80216ec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80216e4:	230f      	movs	r3, #15
 80216e6:	18fb      	adds	r3, r7, r3
 80216e8:	2202      	movs	r2, #2
 80216ea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80216ec:	230f      	movs	r3, #15
 80216ee:	18fb      	adds	r3, r7, r3
 80216f0:	781b      	ldrb	r3, [r3, #0]
}
 80216f2:	0018      	movs	r0, r3
 80216f4:	46bd      	mov	sp, r7
 80216f6:	b004      	add	sp, #16
 80216f8:	bd80      	pop	{r7, pc}

080216fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80216fa:	b580      	push	{r7, lr}
 80216fc:	b082      	sub	sp, #8
 80216fe:	af00      	add	r7, sp, #0
 8021700:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	0018      	movs	r0, r3
 8021706:	f001 fd43 	bl	8023190 <USBD_LL_Start>

  return USBD_OK;
 802170a:	2300      	movs	r3, #0
}
 802170c:	0018      	movs	r0, r3
 802170e:	46bd      	mov	sp, r7
 8021710:	b002      	add	sp, #8
 8021712:	bd80      	pop	{r7, pc}

08021714 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021714:	b580      	push	{r7, lr}
 8021716:	b082      	sub	sp, #8
 8021718:	af00      	add	r7, sp, #0
 802171a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802171c:	2300      	movs	r3, #0
}
 802171e:	0018      	movs	r0, r3
 8021720:	46bd      	mov	sp, r7
 8021722:	b002      	add	sp, #8
 8021724:	bd80      	pop	{r7, pc}

08021726 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021726:	b590      	push	{r4, r7, lr}
 8021728:	b085      	sub	sp, #20
 802172a:	af00      	add	r7, sp, #0
 802172c:	6078      	str	r0, [r7, #4]
 802172e:	000a      	movs	r2, r1
 8021730:	1cfb      	adds	r3, r7, #3
 8021732:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021734:	240f      	movs	r4, #15
 8021736:	193b      	adds	r3, r7, r4
 8021738:	2202      	movs	r2, #2
 802173a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	23ad      	movs	r3, #173	@ 0xad
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	58d3      	ldr	r3, [r2, r3]
 8021744:	2b00      	cmp	r3, #0
 8021746:	d00e      	beq.n	8021766 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021748:	687a      	ldr	r2, [r7, #4]
 802174a:	23ad      	movs	r3, #173	@ 0xad
 802174c:	009b      	lsls	r3, r3, #2
 802174e:	58d3      	ldr	r3, [r2, r3]
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	1cfa      	adds	r2, r7, #3
 8021754:	7811      	ldrb	r1, [r2, #0]
 8021756:	687a      	ldr	r2, [r7, #4]
 8021758:	0010      	movs	r0, r2
 802175a:	4798      	blx	r3
 802175c:	1e03      	subs	r3, r0, #0
 802175e:	d102      	bne.n	8021766 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021760:	193b      	adds	r3, r7, r4
 8021762:	2200      	movs	r2, #0
 8021764:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021766:	230f      	movs	r3, #15
 8021768:	18fb      	adds	r3, r7, r3
 802176a:	781b      	ldrb	r3, [r3, #0]
}
 802176c:	0018      	movs	r0, r3
 802176e:	46bd      	mov	sp, r7
 8021770:	b005      	add	sp, #20
 8021772:	bd90      	pop	{r4, r7, pc}

08021774 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021774:	b580      	push	{r7, lr}
 8021776:	b082      	sub	sp, #8
 8021778:	af00      	add	r7, sp, #0
 802177a:	6078      	str	r0, [r7, #4]
 802177c:	000a      	movs	r2, r1
 802177e:	1cfb      	adds	r3, r7, #3
 8021780:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	23ad      	movs	r3, #173	@ 0xad
 8021786:	009b      	lsls	r3, r3, #2
 8021788:	58d3      	ldr	r3, [r2, r3]
 802178a:	685b      	ldr	r3, [r3, #4]
 802178c:	1cfa      	adds	r2, r7, #3
 802178e:	7811      	ldrb	r1, [r2, #0]
 8021790:	687a      	ldr	r2, [r7, #4]
 8021792:	0010      	movs	r0, r2
 8021794:	4798      	blx	r3

  return USBD_OK;
 8021796:	2300      	movs	r3, #0
}
 8021798:	0018      	movs	r0, r3
 802179a:	46bd      	mov	sp, r7
 802179c:	b002      	add	sp, #8
 802179e:	bd80      	pop	{r7, pc}

080217a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80217a0:	b580      	push	{r7, lr}
 80217a2:	b082      	sub	sp, #8
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	6078      	str	r0, [r7, #4]
 80217a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	22aa      	movs	r2, #170	@ 0xaa
 80217ae:	0092      	lsls	r2, r2, #2
 80217b0:	4694      	mov	ip, r2
 80217b2:	4463      	add	r3, ip
 80217b4:	683a      	ldr	r2, [r7, #0]
 80217b6:	0011      	movs	r1, r2
 80217b8:	0018      	movs	r0, r3
 80217ba:	f001 f810 	bl	80227de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80217be:	687a      	ldr	r2, [r7, #4]
 80217c0:	23a5      	movs	r3, #165	@ 0xa5
 80217c2:	009b      	lsls	r3, r3, #2
 80217c4:	2101      	movs	r1, #1
 80217c6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	4a23      	ldr	r2, [pc, #140]	@ (8021858 <USBD_LL_SetupStage+0xb8>)
 80217cc:	5a9b      	ldrh	r3, [r3, r2]
 80217ce:	0019      	movs	r1, r3
 80217d0:	687a      	ldr	r2, [r7, #4]
 80217d2:	23a6      	movs	r3, #166	@ 0xa6
 80217d4:	009b      	lsls	r3, r3, #2
 80217d6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80217d8:	687a      	ldr	r2, [r7, #4]
 80217da:	23aa      	movs	r3, #170	@ 0xaa
 80217dc:	009b      	lsls	r3, r3, #2
 80217de:	5cd3      	ldrb	r3, [r2, r3]
 80217e0:	001a      	movs	r2, r3
 80217e2:	231f      	movs	r3, #31
 80217e4:	4013      	ands	r3, r2
 80217e6:	2b02      	cmp	r3, #2
 80217e8:	d019      	beq.n	802181e <USBD_LL_SetupStage+0x7e>
 80217ea:	d822      	bhi.n	8021832 <USBD_LL_SetupStage+0x92>
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d002      	beq.n	80217f6 <USBD_LL_SetupStage+0x56>
 80217f0:	2b01      	cmp	r3, #1
 80217f2:	d00a      	beq.n	802180a <USBD_LL_SetupStage+0x6a>
 80217f4:	e01d      	b.n	8021832 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	22aa      	movs	r2, #170	@ 0xaa
 80217fa:	0092      	lsls	r2, r2, #2
 80217fc:	189a      	adds	r2, r3, r2
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	0011      	movs	r1, r2
 8021802:	0018      	movs	r0, r3
 8021804:	f000 fa10 	bl	8021c28 <USBD_StdDevReq>
      break;
 8021808:	e020      	b.n	802184c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	22aa      	movs	r2, #170	@ 0xaa
 802180e:	0092      	lsls	r2, r2, #2
 8021810:	189a      	adds	r2, r3, r2
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	0011      	movs	r1, r2
 8021816:	0018      	movs	r0, r3
 8021818:	f000 fa78 	bl	8021d0c <USBD_StdItfReq>
      break;
 802181c:	e016      	b.n	802184c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	22aa      	movs	r2, #170	@ 0xaa
 8021822:	0092      	lsls	r2, r2, #2
 8021824:	189a      	adds	r2, r3, r2
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	0011      	movs	r1, r2
 802182a:	0018      	movs	r0, r3
 802182c:	f000 fac5 	bl	8021dba <USBD_StdEPReq>
      break;
 8021830:	e00c      	b.n	802184c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021832:	687a      	ldr	r2, [r7, #4]
 8021834:	23aa      	movs	r3, #170	@ 0xaa
 8021836:	009b      	lsls	r3, r3, #2
 8021838:	5cd3      	ldrb	r3, [r2, r3]
 802183a:	227f      	movs	r2, #127	@ 0x7f
 802183c:	4393      	bics	r3, r2
 802183e:	b2da      	uxtb	r2, r3
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	0011      	movs	r1, r2
 8021844:	0018      	movs	r0, r3
 8021846:	f001 fd2a 	bl	802329e <USBD_LL_StallEP>
      break;
 802184a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 802184c:	2300      	movs	r3, #0
}
 802184e:	0018      	movs	r0, r3
 8021850:	46bd      	mov	sp, r7
 8021852:	b002      	add	sp, #8
 8021854:	bd80      	pop	{r7, pc}
 8021856:	46c0      	nop			@ (mov r8, r8)
 8021858:	000002ae 	.word	0x000002ae

0802185c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802185c:	b580      	push	{r7, lr}
 802185e:	b086      	sub	sp, #24
 8021860:	af00      	add	r7, sp, #0
 8021862:	60f8      	str	r0, [r7, #12]
 8021864:	607a      	str	r2, [r7, #4]
 8021866:	200b      	movs	r0, #11
 8021868:	183b      	adds	r3, r7, r0
 802186a:	1c0a      	adds	r2, r1, #0
 802186c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802186e:	183b      	adds	r3, r7, r0
 8021870:	781b      	ldrb	r3, [r3, #0]
 8021872:	2b00      	cmp	r3, #0
 8021874:	d154      	bne.n	8021920 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	3355      	adds	r3, #85	@ 0x55
 802187a:	33ff      	adds	r3, #255	@ 0xff
 802187c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802187e:	68fa      	ldr	r2, [r7, #12]
 8021880:	23a5      	movs	r3, #165	@ 0xa5
 8021882:	009b      	lsls	r3, r3, #2
 8021884:	58d3      	ldr	r3, [r2, r3]
 8021886:	2b03      	cmp	r3, #3
 8021888:	d139      	bne.n	80218fe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 802188a:	697b      	ldr	r3, [r7, #20]
 802188c:	68da      	ldr	r2, [r3, #12]
 802188e:	697b      	ldr	r3, [r7, #20]
 8021890:	691b      	ldr	r3, [r3, #16]
 8021892:	429a      	cmp	r2, r3
 8021894:	d919      	bls.n	80218ca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021896:	697b      	ldr	r3, [r7, #20]
 8021898:	68da      	ldr	r2, [r3, #12]
 802189a:	697b      	ldr	r3, [r7, #20]
 802189c:	691b      	ldr	r3, [r3, #16]
 802189e:	1ad2      	subs	r2, r2, r3
 80218a0:	697b      	ldr	r3, [r7, #20]
 80218a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80218a4:	697b      	ldr	r3, [r7, #20]
 80218a6:	68da      	ldr	r2, [r3, #12]
 80218a8:	697b      	ldr	r3, [r7, #20]
 80218aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80218ac:	429a      	cmp	r2, r3
 80218ae:	d203      	bcs.n	80218b8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80218b0:	697b      	ldr	r3, [r7, #20]
 80218b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80218b4:	b29b      	uxth	r3, r3
 80218b6:	e002      	b.n	80218be <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80218b8:	697b      	ldr	r3, [r7, #20]
 80218ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80218bc:	b29b      	uxth	r3, r3
 80218be:	6879      	ldr	r1, [r7, #4]
 80218c0:	68f8      	ldr	r0, [r7, #12]
 80218c2:	001a      	movs	r2, r3
 80218c4:	f001 f898 	bl	80229f8 <USBD_CtlContinueRx>
 80218c8:	e045      	b.n	8021956 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80218ca:	68fa      	ldr	r2, [r7, #12]
 80218cc:	23ad      	movs	r3, #173	@ 0xad
 80218ce:	009b      	lsls	r3, r3, #2
 80218d0:	58d3      	ldr	r3, [r2, r3]
 80218d2:	691b      	ldr	r3, [r3, #16]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d00d      	beq.n	80218f4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80218d8:	68fa      	ldr	r2, [r7, #12]
 80218da:	23a7      	movs	r3, #167	@ 0xa7
 80218dc:	009b      	lsls	r3, r3, #2
 80218de:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80218e0:	2b03      	cmp	r3, #3
 80218e2:	d107      	bne.n	80218f4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80218e4:	68fa      	ldr	r2, [r7, #12]
 80218e6:	23ad      	movs	r3, #173	@ 0xad
 80218e8:	009b      	lsls	r3, r3, #2
 80218ea:	58d3      	ldr	r3, [r2, r3]
 80218ec:	691b      	ldr	r3, [r3, #16]
 80218ee:	68fa      	ldr	r2, [r7, #12]
 80218f0:	0010      	movs	r0, r2
 80218f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80218f4:	68fb      	ldr	r3, [r7, #12]
 80218f6:	0018      	movs	r0, r3
 80218f8:	f001 f891 	bl	8022a1e <USBD_CtlSendStatus>
 80218fc:	e02b      	b.n	8021956 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80218fe:	68fa      	ldr	r2, [r7, #12]
 8021900:	23a5      	movs	r3, #165	@ 0xa5
 8021902:	009b      	lsls	r3, r3, #2
 8021904:	58d3      	ldr	r3, [r2, r3]
 8021906:	2b05      	cmp	r3, #5
 8021908:	d125      	bne.n	8021956 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 802190a:	68fa      	ldr	r2, [r7, #12]
 802190c:	23a5      	movs	r3, #165	@ 0xa5
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	2100      	movs	r1, #0
 8021912:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	2100      	movs	r1, #0
 8021918:	0018      	movs	r0, r3
 802191a:	f001 fcc0 	bl	802329e <USBD_LL_StallEP>
 802191e:	e01a      	b.n	8021956 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021920:	68fa      	ldr	r2, [r7, #12]
 8021922:	23ad      	movs	r3, #173	@ 0xad
 8021924:	009b      	lsls	r3, r3, #2
 8021926:	58d3      	ldr	r3, [r2, r3]
 8021928:	699b      	ldr	r3, [r3, #24]
 802192a:	2b00      	cmp	r3, #0
 802192c:	d011      	beq.n	8021952 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802192e:	68fa      	ldr	r2, [r7, #12]
 8021930:	23a7      	movs	r3, #167	@ 0xa7
 8021932:	009b      	lsls	r3, r3, #2
 8021934:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021936:	2b03      	cmp	r3, #3
 8021938:	d10b      	bne.n	8021952 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 802193a:	68fa      	ldr	r2, [r7, #12]
 802193c:	23ad      	movs	r3, #173	@ 0xad
 802193e:	009b      	lsls	r3, r3, #2
 8021940:	58d3      	ldr	r3, [r2, r3]
 8021942:	699b      	ldr	r3, [r3, #24]
 8021944:	220b      	movs	r2, #11
 8021946:	18ba      	adds	r2, r7, r2
 8021948:	7811      	ldrb	r1, [r2, #0]
 802194a:	68fa      	ldr	r2, [r7, #12]
 802194c:	0010      	movs	r0, r2
 802194e:	4798      	blx	r3
 8021950:	e001      	b.n	8021956 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021952:	2302      	movs	r3, #2
 8021954:	e000      	b.n	8021958 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021956:	2300      	movs	r3, #0
}
 8021958:	0018      	movs	r0, r3
 802195a:	46bd      	mov	sp, r7
 802195c:	b006      	add	sp, #24
 802195e:	bd80      	pop	{r7, pc}

08021960 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	b086      	sub	sp, #24
 8021964:	af00      	add	r7, sp, #0
 8021966:	60f8      	str	r0, [r7, #12]
 8021968:	607a      	str	r2, [r7, #4]
 802196a:	200b      	movs	r0, #11
 802196c:	183b      	adds	r3, r7, r0
 802196e:	1c0a      	adds	r2, r1, #0
 8021970:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021972:	183b      	adds	r3, r7, r0
 8021974:	781b      	ldrb	r3, [r3, #0]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d000      	beq.n	802197c <USBD_LL_DataInStage+0x1c>
 802197a:	e08e      	b.n	8021a9a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 802197c:	68fb      	ldr	r3, [r7, #12]
 802197e:	3314      	adds	r3, #20
 8021980:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021982:	68fa      	ldr	r2, [r7, #12]
 8021984:	23a5      	movs	r3, #165	@ 0xa5
 8021986:	009b      	lsls	r3, r3, #2
 8021988:	58d3      	ldr	r3, [r2, r3]
 802198a:	2b02      	cmp	r3, #2
 802198c:	d164      	bne.n	8021a58 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 802198e:	697b      	ldr	r3, [r7, #20]
 8021990:	68da      	ldr	r2, [r3, #12]
 8021992:	697b      	ldr	r3, [r7, #20]
 8021994:	691b      	ldr	r3, [r3, #16]
 8021996:	429a      	cmp	r2, r3
 8021998:	d915      	bls.n	80219c6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 802199a:	697b      	ldr	r3, [r7, #20]
 802199c:	68da      	ldr	r2, [r3, #12]
 802199e:	697b      	ldr	r3, [r7, #20]
 80219a0:	691b      	ldr	r3, [r3, #16]
 80219a2:	1ad2      	subs	r2, r2, r3
 80219a4:	697b      	ldr	r3, [r7, #20]
 80219a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80219a8:	697b      	ldr	r3, [r7, #20]
 80219aa:	68db      	ldr	r3, [r3, #12]
 80219ac:	b29a      	uxth	r2, r3
 80219ae:	6879      	ldr	r1, [r7, #4]
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	0018      	movs	r0, r3
 80219b4:	f000 ffe9 	bl	802298a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80219b8:	68f8      	ldr	r0, [r7, #12]
 80219ba:	2300      	movs	r3, #0
 80219bc:	2200      	movs	r2, #0
 80219be:	2100      	movs	r1, #0
 80219c0:	f001 fd56 	bl	8023470 <USBD_LL_PrepareReceive>
 80219c4:	e059      	b.n	8021a7a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80219c6:	697b      	ldr	r3, [r7, #20]
 80219c8:	689a      	ldr	r2, [r3, #8]
 80219ca:	697b      	ldr	r3, [r7, #20]
 80219cc:	691b      	ldr	r3, [r3, #16]
 80219ce:	0019      	movs	r1, r3
 80219d0:	0010      	movs	r0, r2
 80219d2:	f7de fc6d 	bl	80002b0 <__aeabi_uidivmod>
 80219d6:	1e0b      	subs	r3, r1, #0
 80219d8:	d11f      	bne.n	8021a1a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80219da:	697b      	ldr	r3, [r7, #20]
 80219dc:	689a      	ldr	r2, [r3, #8]
 80219de:	697b      	ldr	r3, [r7, #20]
 80219e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80219e2:	429a      	cmp	r2, r3
 80219e4:	d319      	bcc.n	8021a1a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80219e6:	697b      	ldr	r3, [r7, #20]
 80219e8:	689a      	ldr	r2, [r3, #8]
 80219ea:	68f9      	ldr	r1, [r7, #12]
 80219ec:	23a6      	movs	r3, #166	@ 0xa6
 80219ee:	009b      	lsls	r3, r3, #2
 80219f0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80219f2:	429a      	cmp	r2, r3
 80219f4:	d211      	bcs.n	8021a1a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80219f6:	68fb      	ldr	r3, [r7, #12]
 80219f8:	2200      	movs	r2, #0
 80219fa:	2100      	movs	r1, #0
 80219fc:	0018      	movs	r0, r3
 80219fe:	f000 ffc4 	bl	802298a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021a02:	68fa      	ldr	r2, [r7, #12]
 8021a04:	23a6      	movs	r3, #166	@ 0xa6
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	2100      	movs	r1, #0
 8021a0a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021a0c:	68f8      	ldr	r0, [r7, #12]
 8021a0e:	2300      	movs	r3, #0
 8021a10:	2200      	movs	r2, #0
 8021a12:	2100      	movs	r1, #0
 8021a14:	f001 fd2c 	bl	8023470 <USBD_LL_PrepareReceive>
 8021a18:	e02f      	b.n	8021a7a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021a1a:	68fa      	ldr	r2, [r7, #12]
 8021a1c:	23ad      	movs	r3, #173	@ 0xad
 8021a1e:	009b      	lsls	r3, r3, #2
 8021a20:	58d3      	ldr	r3, [r2, r3]
 8021a22:	68db      	ldr	r3, [r3, #12]
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d00d      	beq.n	8021a44 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021a28:	68fa      	ldr	r2, [r7, #12]
 8021a2a:	23a7      	movs	r3, #167	@ 0xa7
 8021a2c:	009b      	lsls	r3, r3, #2
 8021a2e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021a30:	2b03      	cmp	r3, #3
 8021a32:	d107      	bne.n	8021a44 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021a34:	68fa      	ldr	r2, [r7, #12]
 8021a36:	23ad      	movs	r3, #173	@ 0xad
 8021a38:	009b      	lsls	r3, r3, #2
 8021a3a:	58d3      	ldr	r3, [r2, r3]
 8021a3c:	68db      	ldr	r3, [r3, #12]
 8021a3e:	68fa      	ldr	r2, [r7, #12]
 8021a40:	0010      	movs	r0, r2
 8021a42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	2180      	movs	r1, #128	@ 0x80
 8021a48:	0018      	movs	r0, r3
 8021a4a:	f001 fc28 	bl	802329e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021a4e:	68fb      	ldr	r3, [r7, #12]
 8021a50:	0018      	movs	r0, r3
 8021a52:	f000 fff8 	bl	8022a46 <USBD_CtlReceiveStatus>
 8021a56:	e010      	b.n	8021a7a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021a58:	68fa      	ldr	r2, [r7, #12]
 8021a5a:	23a5      	movs	r3, #165	@ 0xa5
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	58d3      	ldr	r3, [r2, r3]
 8021a60:	2b04      	cmp	r3, #4
 8021a62:	d005      	beq.n	8021a70 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021a64:	68fa      	ldr	r2, [r7, #12]
 8021a66:	23a5      	movs	r3, #165	@ 0xa5
 8021a68:	009b      	lsls	r3, r3, #2
 8021a6a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d104      	bne.n	8021a7a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021a70:	68fb      	ldr	r3, [r7, #12]
 8021a72:	2180      	movs	r1, #128	@ 0x80
 8021a74:	0018      	movs	r0, r3
 8021a76:	f001 fc12 	bl	802329e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021a7a:	68fa      	ldr	r2, [r7, #12]
 8021a7c:	23a8      	movs	r3, #168	@ 0xa8
 8021a7e:	009b      	lsls	r3, r3, #2
 8021a80:	5cd3      	ldrb	r3, [r2, r3]
 8021a82:	2b01      	cmp	r3, #1
 8021a84:	d124      	bne.n	8021ad0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021a86:	68fb      	ldr	r3, [r7, #12]
 8021a88:	0018      	movs	r0, r3
 8021a8a:	f7ff fe43 	bl	8021714 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021a8e:	68fa      	ldr	r2, [r7, #12]
 8021a90:	23a8      	movs	r3, #168	@ 0xa8
 8021a92:	009b      	lsls	r3, r3, #2
 8021a94:	2100      	movs	r1, #0
 8021a96:	54d1      	strb	r1, [r2, r3]
 8021a98:	e01a      	b.n	8021ad0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021a9a:	68fa      	ldr	r2, [r7, #12]
 8021a9c:	23ad      	movs	r3, #173	@ 0xad
 8021a9e:	009b      	lsls	r3, r3, #2
 8021aa0:	58d3      	ldr	r3, [r2, r3]
 8021aa2:	695b      	ldr	r3, [r3, #20]
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d011      	beq.n	8021acc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021aa8:	68fa      	ldr	r2, [r7, #12]
 8021aaa:	23a7      	movs	r3, #167	@ 0xa7
 8021aac:	009b      	lsls	r3, r3, #2
 8021aae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021ab0:	2b03      	cmp	r3, #3
 8021ab2:	d10b      	bne.n	8021acc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021ab4:	68fa      	ldr	r2, [r7, #12]
 8021ab6:	23ad      	movs	r3, #173	@ 0xad
 8021ab8:	009b      	lsls	r3, r3, #2
 8021aba:	58d3      	ldr	r3, [r2, r3]
 8021abc:	695b      	ldr	r3, [r3, #20]
 8021abe:	220b      	movs	r2, #11
 8021ac0:	18ba      	adds	r2, r7, r2
 8021ac2:	7811      	ldrb	r1, [r2, #0]
 8021ac4:	68fa      	ldr	r2, [r7, #12]
 8021ac6:	0010      	movs	r0, r2
 8021ac8:	4798      	blx	r3
 8021aca:	e001      	b.n	8021ad0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021acc:	2302      	movs	r3, #2
 8021ace:	e000      	b.n	8021ad2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021ad0:	2300      	movs	r3, #0
}
 8021ad2:	0018      	movs	r0, r3
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	b006      	add	sp, #24
 8021ad8:	bd80      	pop	{r7, pc}

08021ada <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021ada:	b580      	push	{r7, lr}
 8021adc:	b082      	sub	sp, #8
 8021ade:	af00      	add	r7, sp, #0
 8021ae0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021ae2:	6878      	ldr	r0, [r7, #4]
 8021ae4:	2340      	movs	r3, #64	@ 0x40
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	2100      	movs	r1, #0
 8021aea:	f001 fb76 	bl	80231da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021aee:	687a      	ldr	r2, [r7, #4]
 8021af0:	23ac      	movs	r3, #172	@ 0xac
 8021af2:	005b      	lsls	r3, r3, #1
 8021af4:	2101      	movs	r1, #1
 8021af6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021af8:	687a      	ldr	r2, [r7, #4]
 8021afa:	23b2      	movs	r3, #178	@ 0xb2
 8021afc:	005b      	lsls	r3, r3, #1
 8021afe:	2140      	movs	r1, #64	@ 0x40
 8021b00:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021b02:	6878      	ldr	r0, [r7, #4]
 8021b04:	2340      	movs	r3, #64	@ 0x40
 8021b06:	2200      	movs	r2, #0
 8021b08:	2180      	movs	r1, #128	@ 0x80
 8021b0a:	f001 fb66 	bl	80231da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	2201      	movs	r2, #1
 8021b12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	2240      	movs	r2, #64	@ 0x40
 8021b18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021b1a:	687a      	ldr	r2, [r7, #4]
 8021b1c:	23a7      	movs	r3, #167	@ 0xa7
 8021b1e:	009b      	lsls	r3, r3, #2
 8021b20:	2101      	movs	r1, #1
 8021b22:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021b24:	687a      	ldr	r2, [r7, #4]
 8021b26:	23a5      	movs	r3, #165	@ 0xa5
 8021b28:	009b      	lsls	r3, r3, #2
 8021b2a:	2100      	movs	r1, #0
 8021b2c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2200      	movs	r2, #0
 8021b32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021b34:	687a      	ldr	r2, [r7, #4]
 8021b36:	23a9      	movs	r3, #169	@ 0xa9
 8021b38:	009b      	lsls	r3, r3, #2
 8021b3a:	2100      	movs	r1, #0
 8021b3c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021b3e:	687a      	ldr	r2, [r7, #4]
 8021b40:	23ae      	movs	r3, #174	@ 0xae
 8021b42:	009b      	lsls	r3, r3, #2
 8021b44:	58d3      	ldr	r3, [r2, r3]
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d00a      	beq.n	8021b60 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021b4a:	687a      	ldr	r2, [r7, #4]
 8021b4c:	23ad      	movs	r3, #173	@ 0xad
 8021b4e:	009b      	lsls	r3, r3, #2
 8021b50:	58d3      	ldr	r3, [r2, r3]
 8021b52:	685a      	ldr	r2, [r3, #4]
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	685b      	ldr	r3, [r3, #4]
 8021b58:	b2d9      	uxtb	r1, r3
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	0018      	movs	r0, r3
 8021b5e:	4790      	blx	r2
  }

  return USBD_OK;
 8021b60:	2300      	movs	r3, #0
}
 8021b62:	0018      	movs	r0, r3
 8021b64:	46bd      	mov	sp, r7
 8021b66:	b002      	add	sp, #8
 8021b68:	bd80      	pop	{r7, pc}

08021b6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021b6a:	b580      	push	{r7, lr}
 8021b6c:	b082      	sub	sp, #8
 8021b6e:	af00      	add	r7, sp, #0
 8021b70:	6078      	str	r0, [r7, #4]
 8021b72:	000a      	movs	r2, r1
 8021b74:	1cfb      	adds	r3, r7, #3
 8021b76:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	1cfa      	adds	r2, r7, #3
 8021b7c:	7812      	ldrb	r2, [r2, #0]
 8021b7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021b80:	2300      	movs	r3, #0
}
 8021b82:	0018      	movs	r0, r3
 8021b84:	46bd      	mov	sp, r7
 8021b86:	b002      	add	sp, #8
 8021b88:	bd80      	pop	{r7, pc}
	...

08021b8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021b8c:	b580      	push	{r7, lr}
 8021b8e:	b082      	sub	sp, #8
 8021b90:	af00      	add	r7, sp, #0
 8021b92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8021b94:	687a      	ldr	r2, [r7, #4]
 8021b96:	23a7      	movs	r3, #167	@ 0xa7
 8021b98:	009b      	lsls	r3, r3, #2
 8021b9a:	5cd1      	ldrb	r1, [r2, r3]
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	4a06      	ldr	r2, [pc, #24]	@ (8021bb8 <USBD_LL_Suspend+0x2c>)
 8021ba0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8021ba2:	687a      	ldr	r2, [r7, #4]
 8021ba4:	23a7      	movs	r3, #167	@ 0xa7
 8021ba6:	009b      	lsls	r3, r3, #2
 8021ba8:	2104      	movs	r1, #4
 8021baa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8021bac:	2300      	movs	r3, #0
}
 8021bae:	0018      	movs	r0, r3
 8021bb0:	46bd      	mov	sp, r7
 8021bb2:	b002      	add	sp, #8
 8021bb4:	bd80      	pop	{r7, pc}
 8021bb6:	46c0      	nop			@ (mov r8, r8)
 8021bb8:	0000029d 	.word	0x0000029d

08021bbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b082      	sub	sp, #8
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021bc4:	687a      	ldr	r2, [r7, #4]
 8021bc6:	23a7      	movs	r3, #167	@ 0xa7
 8021bc8:	009b      	lsls	r3, r3, #2
 8021bca:	5cd3      	ldrb	r3, [r2, r3]
 8021bcc:	2b04      	cmp	r3, #4
 8021bce:	d106      	bne.n	8021bde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	4a05      	ldr	r2, [pc, #20]	@ (8021be8 <USBD_LL_Resume+0x2c>)
 8021bd4:	5c99      	ldrb	r1, [r3, r2]
 8021bd6:	687a      	ldr	r2, [r7, #4]
 8021bd8:	23a7      	movs	r3, #167	@ 0xa7
 8021bda:	009b      	lsls	r3, r3, #2
 8021bdc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8021bde:	2300      	movs	r3, #0
}
 8021be0:	0018      	movs	r0, r3
 8021be2:	46bd      	mov	sp, r7
 8021be4:	b002      	add	sp, #8
 8021be6:	bd80      	pop	{r7, pc}
 8021be8:	0000029d 	.word	0x0000029d

08021bec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021bec:	b580      	push	{r7, lr}
 8021bee:	b082      	sub	sp, #8
 8021bf0:	af00      	add	r7, sp, #0
 8021bf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bf4:	687a      	ldr	r2, [r7, #4]
 8021bf6:	23a7      	movs	r3, #167	@ 0xa7
 8021bf8:	009b      	lsls	r3, r3, #2
 8021bfa:	5cd3      	ldrb	r3, [r2, r3]
 8021bfc:	2b03      	cmp	r3, #3
 8021bfe:	d10e      	bne.n	8021c1e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8021c00:	687a      	ldr	r2, [r7, #4]
 8021c02:	23ad      	movs	r3, #173	@ 0xad
 8021c04:	009b      	lsls	r3, r3, #2
 8021c06:	58d3      	ldr	r3, [r2, r3]
 8021c08:	69db      	ldr	r3, [r3, #28]
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d007      	beq.n	8021c1e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8021c0e:	687a      	ldr	r2, [r7, #4]
 8021c10:	23ad      	movs	r3, #173	@ 0xad
 8021c12:	009b      	lsls	r3, r3, #2
 8021c14:	58d3      	ldr	r3, [r2, r3]
 8021c16:	69db      	ldr	r3, [r3, #28]
 8021c18:	687a      	ldr	r2, [r7, #4]
 8021c1a:	0010      	movs	r0, r2
 8021c1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021c1e:	2300      	movs	r3, #0
}
 8021c20:	0018      	movs	r0, r3
 8021c22:	46bd      	mov	sp, r7
 8021c24:	b002      	add	sp, #8
 8021c26:	bd80      	pop	{r7, pc}

08021c28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8021c28:	b580      	push	{r7, lr}
 8021c2a:	b084      	sub	sp, #16
 8021c2c:	af00      	add	r7, sp, #0
 8021c2e:	6078      	str	r0, [r7, #4]
 8021c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021c32:	230f      	movs	r3, #15
 8021c34:	18fb      	adds	r3, r7, r3
 8021c36:	2200      	movs	r2, #0
 8021c38:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021c3a:	683b      	ldr	r3, [r7, #0]
 8021c3c:	781b      	ldrb	r3, [r3, #0]
 8021c3e:	001a      	movs	r2, r3
 8021c40:	2360      	movs	r3, #96	@ 0x60
 8021c42:	4013      	ands	r3, r2
 8021c44:	2b40      	cmp	r3, #64	@ 0x40
 8021c46:	d004      	beq.n	8021c52 <USBD_StdDevReq+0x2a>
 8021c48:	d84f      	bhi.n	8021cea <USBD_StdDevReq+0xc2>
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d00b      	beq.n	8021c66 <USBD_StdDevReq+0x3e>
 8021c4e:	2b20      	cmp	r3, #32
 8021c50:	d14b      	bne.n	8021cea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8021c52:	687a      	ldr	r2, [r7, #4]
 8021c54:	23ad      	movs	r3, #173	@ 0xad
 8021c56:	009b      	lsls	r3, r3, #2
 8021c58:	58d3      	ldr	r3, [r2, r3]
 8021c5a:	689b      	ldr	r3, [r3, #8]
 8021c5c:	6839      	ldr	r1, [r7, #0]
 8021c5e:	687a      	ldr	r2, [r7, #4]
 8021c60:	0010      	movs	r0, r2
 8021c62:	4798      	blx	r3
      break;
 8021c64:	e048      	b.n	8021cf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	785b      	ldrb	r3, [r3, #1]
 8021c6a:	2b09      	cmp	r3, #9
 8021c6c:	d835      	bhi.n	8021cda <USBD_StdDevReq+0xb2>
 8021c6e:	009a      	lsls	r2, r3, #2
 8021c70:	4b25      	ldr	r3, [pc, #148]	@ (8021d08 <USBD_StdDevReq+0xe0>)
 8021c72:	18d3      	adds	r3, r2, r3
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021c78:	683a      	ldr	r2, [r7, #0]
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	0011      	movs	r1, r2
 8021c7e:	0018      	movs	r0, r3
 8021c80:	f000 fa52 	bl	8022128 <USBD_GetDescriptor>
          break;
 8021c84:	e030      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021c86:	683a      	ldr	r2, [r7, #0]
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	0011      	movs	r1, r2
 8021c8c:	0018      	movs	r0, r3
 8021c8e:	f000 fbfd 	bl	802248c <USBD_SetAddress>
          break;
 8021c92:	e029      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8021c94:	683a      	ldr	r2, [r7, #0]
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	0011      	movs	r1, r2
 8021c9a:	0018      	movs	r0, r3
 8021c9c:	f000 fc4a 	bl	8022534 <USBD_SetConfig>
          break;
 8021ca0:	e022      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021ca2:	683a      	ldr	r2, [r7, #0]
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	0011      	movs	r1, r2
 8021ca8:	0018      	movs	r0, r3
 8021caa:	f000 fce7 	bl	802267c <USBD_GetConfig>
          break;
 8021cae:	e01b      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021cb0:	683a      	ldr	r2, [r7, #0]
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	0011      	movs	r1, r2
 8021cb6:	0018      	movs	r0, r3
 8021cb8:	f000 fd1b 	bl	80226f2 <USBD_GetStatus>
          break;
 8021cbc:	e014      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021cbe:	683a      	ldr	r2, [r7, #0]
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	0011      	movs	r1, r2
 8021cc4:	0018      	movs	r0, r3
 8021cc6:	f000 fd4e 	bl	8022766 <USBD_SetFeature>
          break;
 8021cca:	e00d      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021ccc:	683a      	ldr	r2, [r7, #0]
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	0011      	movs	r1, r2
 8021cd2:	0018      	movs	r0, r3
 8021cd4:	f000 fd5d 	bl	8022792 <USBD_ClrFeature>
          break;
 8021cd8:	e006      	b.n	8021ce8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8021cda:	683a      	ldr	r2, [r7, #0]
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	0011      	movs	r1, r2
 8021ce0:	0018      	movs	r0, r3
 8021ce2:	f000 fdb4 	bl	802284e <USBD_CtlError>
          break;
 8021ce6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021ce8:	e006      	b.n	8021cf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021cea:	683a      	ldr	r2, [r7, #0]
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	0011      	movs	r1, r2
 8021cf0:	0018      	movs	r0, r3
 8021cf2:	f000 fdac 	bl	802284e <USBD_CtlError>
      break;
 8021cf6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021cf8:	230f      	movs	r3, #15
 8021cfa:	18fb      	adds	r3, r7, r3
 8021cfc:	781b      	ldrb	r3, [r3, #0]
}
 8021cfe:	0018      	movs	r0, r3
 8021d00:	46bd      	mov	sp, r7
 8021d02:	b004      	add	sp, #16
 8021d04:	bd80      	pop	{r7, pc}
 8021d06:	46c0      	nop			@ (mov r8, r8)
 8021d08:	0802e248 	.word	0x0802e248

08021d0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8021d0c:	b5b0      	push	{r4, r5, r7, lr}
 8021d0e:	b084      	sub	sp, #16
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
 8021d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021d16:	230f      	movs	r3, #15
 8021d18:	18fb      	adds	r3, r7, r3
 8021d1a:	2200      	movs	r2, #0
 8021d1c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021d1e:	683b      	ldr	r3, [r7, #0]
 8021d20:	781b      	ldrb	r3, [r3, #0]
 8021d22:	001a      	movs	r2, r3
 8021d24:	2360      	movs	r3, #96	@ 0x60
 8021d26:	4013      	ands	r3, r2
 8021d28:	2b40      	cmp	r3, #64	@ 0x40
 8021d2a:	d004      	beq.n	8021d36 <USBD_StdItfReq+0x2a>
 8021d2c:	d839      	bhi.n	8021da2 <USBD_StdItfReq+0x96>
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d001      	beq.n	8021d36 <USBD_StdItfReq+0x2a>
 8021d32:	2b20      	cmp	r3, #32
 8021d34:	d135      	bne.n	8021da2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021d36:	687a      	ldr	r2, [r7, #4]
 8021d38:	23a7      	movs	r3, #167	@ 0xa7
 8021d3a:	009b      	lsls	r3, r3, #2
 8021d3c:	5cd3      	ldrb	r3, [r2, r3]
 8021d3e:	3b01      	subs	r3, #1
 8021d40:	2b02      	cmp	r3, #2
 8021d42:	d825      	bhi.n	8021d90 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021d44:	683b      	ldr	r3, [r7, #0]
 8021d46:	889b      	ldrh	r3, [r3, #4]
 8021d48:	b2db      	uxtb	r3, r3
 8021d4a:	2b01      	cmp	r3, #1
 8021d4c:	d819      	bhi.n	8021d82 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021d4e:	687a      	ldr	r2, [r7, #4]
 8021d50:	23ad      	movs	r3, #173	@ 0xad
 8021d52:	009b      	lsls	r3, r3, #2
 8021d54:	58d3      	ldr	r3, [r2, r3]
 8021d56:	689b      	ldr	r3, [r3, #8]
 8021d58:	250f      	movs	r5, #15
 8021d5a:	197c      	adds	r4, r7, r5
 8021d5c:	6839      	ldr	r1, [r7, #0]
 8021d5e:	687a      	ldr	r2, [r7, #4]
 8021d60:	0010      	movs	r0, r2
 8021d62:	4798      	blx	r3
 8021d64:	0003      	movs	r3, r0
 8021d66:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021d68:	683b      	ldr	r3, [r7, #0]
 8021d6a:	88db      	ldrh	r3, [r3, #6]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d116      	bne.n	8021d9e <USBD_StdItfReq+0x92>
 8021d70:	197b      	adds	r3, r7, r5
 8021d72:	781b      	ldrb	r3, [r3, #0]
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	d112      	bne.n	8021d9e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	0018      	movs	r0, r3
 8021d7c:	f000 fe4f 	bl	8022a1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021d80:	e00d      	b.n	8021d9e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8021d82:	683a      	ldr	r2, [r7, #0]
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	0011      	movs	r1, r2
 8021d88:	0018      	movs	r0, r3
 8021d8a:	f000 fd60 	bl	802284e <USBD_CtlError>
          break;
 8021d8e:	e006      	b.n	8021d9e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8021d90:	683a      	ldr	r2, [r7, #0]
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	0011      	movs	r1, r2
 8021d96:	0018      	movs	r0, r3
 8021d98:	f000 fd59 	bl	802284e <USBD_CtlError>
          break;
 8021d9c:	e000      	b.n	8021da0 <USBD_StdItfReq+0x94>
          break;
 8021d9e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021da0:	e006      	b.n	8021db0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8021da2:	683a      	ldr	r2, [r7, #0]
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	0011      	movs	r1, r2
 8021da8:	0018      	movs	r0, r3
 8021daa:	f000 fd50 	bl	802284e <USBD_CtlError>
      break;
 8021dae:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021db0:	2300      	movs	r3, #0
}
 8021db2:	0018      	movs	r0, r3
 8021db4:	46bd      	mov	sp, r7
 8021db6:	b004      	add	sp, #16
 8021db8:	bdb0      	pop	{r4, r5, r7, pc}

08021dba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8021dba:	b5b0      	push	{r4, r5, r7, lr}
 8021dbc:	b084      	sub	sp, #16
 8021dbe:	af00      	add	r7, sp, #0
 8021dc0:	6078      	str	r0, [r7, #4]
 8021dc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021dc4:	230f      	movs	r3, #15
 8021dc6:	18fb      	adds	r3, r7, r3
 8021dc8:	2200      	movs	r2, #0
 8021dca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8021dcc:	683b      	ldr	r3, [r7, #0]
 8021dce:	889a      	ldrh	r2, [r3, #4]
 8021dd0:	230e      	movs	r3, #14
 8021dd2:	18fb      	adds	r3, r7, r3
 8021dd4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021dd6:	683b      	ldr	r3, [r7, #0]
 8021dd8:	781b      	ldrb	r3, [r3, #0]
 8021dda:	001a      	movs	r2, r3
 8021ddc:	2360      	movs	r3, #96	@ 0x60
 8021dde:	4013      	ands	r3, r2
 8021de0:	2b40      	cmp	r3, #64	@ 0x40
 8021de2:	d006      	beq.n	8021df2 <USBD_StdEPReq+0x38>
 8021de4:	d900      	bls.n	8021de8 <USBD_StdEPReq+0x2e>
 8021de6:	e190      	b.n	802210a <USBD_StdEPReq+0x350>
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d00c      	beq.n	8021e06 <USBD_StdEPReq+0x4c>
 8021dec:	2b20      	cmp	r3, #32
 8021dee:	d000      	beq.n	8021df2 <USBD_StdEPReq+0x38>
 8021df0:	e18b      	b.n	802210a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8021df2:	687a      	ldr	r2, [r7, #4]
 8021df4:	23ad      	movs	r3, #173	@ 0xad
 8021df6:	009b      	lsls	r3, r3, #2
 8021df8:	58d3      	ldr	r3, [r2, r3]
 8021dfa:	689b      	ldr	r3, [r3, #8]
 8021dfc:	6839      	ldr	r1, [r7, #0]
 8021dfe:	687a      	ldr	r2, [r7, #4]
 8021e00:	0010      	movs	r0, r2
 8021e02:	4798      	blx	r3
      break;
 8021e04:	e188      	b.n	8022118 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8021e06:	683b      	ldr	r3, [r7, #0]
 8021e08:	781b      	ldrb	r3, [r3, #0]
 8021e0a:	001a      	movs	r2, r3
 8021e0c:	2360      	movs	r3, #96	@ 0x60
 8021e0e:	4013      	ands	r3, r2
 8021e10:	2b20      	cmp	r3, #32
 8021e12:	d10f      	bne.n	8021e34 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021e14:	687a      	ldr	r2, [r7, #4]
 8021e16:	23ad      	movs	r3, #173	@ 0xad
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	58d3      	ldr	r3, [r2, r3]
 8021e1c:	689b      	ldr	r3, [r3, #8]
 8021e1e:	250f      	movs	r5, #15
 8021e20:	197c      	adds	r4, r7, r5
 8021e22:	6839      	ldr	r1, [r7, #0]
 8021e24:	687a      	ldr	r2, [r7, #4]
 8021e26:	0010      	movs	r0, r2
 8021e28:	4798      	blx	r3
 8021e2a:	0003      	movs	r3, r0
 8021e2c:	7023      	strb	r3, [r4, #0]

        return ret;
 8021e2e:	197b      	adds	r3, r7, r5
 8021e30:	781b      	ldrb	r3, [r3, #0]
 8021e32:	e174      	b.n	802211e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8021e34:	683b      	ldr	r3, [r7, #0]
 8021e36:	785b      	ldrb	r3, [r3, #1]
 8021e38:	2b03      	cmp	r3, #3
 8021e3a:	d007      	beq.n	8021e4c <USBD_StdEPReq+0x92>
 8021e3c:	dd00      	ble.n	8021e40 <USBD_StdEPReq+0x86>
 8021e3e:	e15c      	b.n	80220fa <USBD_StdEPReq+0x340>
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d100      	bne.n	8021e46 <USBD_StdEPReq+0x8c>
 8021e44:	e092      	b.n	8021f6c <USBD_StdEPReq+0x1b2>
 8021e46:	2b01      	cmp	r3, #1
 8021e48:	d04b      	beq.n	8021ee2 <USBD_StdEPReq+0x128>
 8021e4a:	e156      	b.n	80220fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021e4c:	687a      	ldr	r2, [r7, #4]
 8021e4e:	23a7      	movs	r3, #167	@ 0xa7
 8021e50:	009b      	lsls	r3, r3, #2
 8021e52:	5cd3      	ldrb	r3, [r2, r3]
 8021e54:	2b02      	cmp	r3, #2
 8021e56:	d002      	beq.n	8021e5e <USBD_StdEPReq+0xa4>
 8021e58:	2b03      	cmp	r3, #3
 8021e5a:	d01d      	beq.n	8021e98 <USBD_StdEPReq+0xde>
 8021e5c:	e039      	b.n	8021ed2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021e5e:	220e      	movs	r2, #14
 8021e60:	18bb      	adds	r3, r7, r2
 8021e62:	781b      	ldrb	r3, [r3, #0]
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	d010      	beq.n	8021e8a <USBD_StdEPReq+0xd0>
 8021e68:	18bb      	adds	r3, r7, r2
 8021e6a:	781b      	ldrb	r3, [r3, #0]
 8021e6c:	2b80      	cmp	r3, #128	@ 0x80
 8021e6e:	d00c      	beq.n	8021e8a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021e70:	18bb      	adds	r3, r7, r2
 8021e72:	781a      	ldrb	r2, [r3, #0]
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	0011      	movs	r1, r2
 8021e78:	0018      	movs	r0, r3
 8021e7a:	f001 fa10 	bl	802329e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	2180      	movs	r1, #128	@ 0x80
 8021e82:	0018      	movs	r0, r3
 8021e84:	f001 fa0b 	bl	802329e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021e88:	e02a      	b.n	8021ee0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8021e8a:	683a      	ldr	r2, [r7, #0]
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	0011      	movs	r1, r2
 8021e90:	0018      	movs	r0, r3
 8021e92:	f000 fcdc 	bl	802284e <USBD_CtlError>
              break;
 8021e96:	e023      	b.n	8021ee0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021e98:	683b      	ldr	r3, [r7, #0]
 8021e9a:	885b      	ldrh	r3, [r3, #2]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d113      	bne.n	8021ec8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8021ea0:	220e      	movs	r2, #14
 8021ea2:	18bb      	adds	r3, r7, r2
 8021ea4:	781b      	ldrb	r3, [r3, #0]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d00e      	beq.n	8021ec8 <USBD_StdEPReq+0x10e>
 8021eaa:	18bb      	adds	r3, r7, r2
 8021eac:	781b      	ldrb	r3, [r3, #0]
 8021eae:	2b80      	cmp	r3, #128	@ 0x80
 8021eb0:	d00a      	beq.n	8021ec8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021eb2:	683b      	ldr	r3, [r7, #0]
 8021eb4:	88db      	ldrh	r3, [r3, #6]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d106      	bne.n	8021ec8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8021eba:	18bb      	adds	r3, r7, r2
 8021ebc:	781a      	ldrb	r2, [r3, #0]
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	0011      	movs	r1, r2
 8021ec2:	0018      	movs	r0, r3
 8021ec4:	f001 f9eb 	bl	802329e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	0018      	movs	r0, r3
 8021ecc:	f000 fda7 	bl	8022a1e <USBD_CtlSendStatus>

              break;
 8021ed0:	e006      	b.n	8021ee0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8021ed2:	683a      	ldr	r2, [r7, #0]
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	0011      	movs	r1, r2
 8021ed8:	0018      	movs	r0, r3
 8021eda:	f000 fcb8 	bl	802284e <USBD_CtlError>
              break;
 8021ede:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021ee0:	e112      	b.n	8022108 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021ee2:	687a      	ldr	r2, [r7, #4]
 8021ee4:	23a7      	movs	r3, #167	@ 0xa7
 8021ee6:	009b      	lsls	r3, r3, #2
 8021ee8:	5cd3      	ldrb	r3, [r2, r3]
 8021eea:	2b02      	cmp	r3, #2
 8021eec:	d002      	beq.n	8021ef4 <USBD_StdEPReq+0x13a>
 8021eee:	2b03      	cmp	r3, #3
 8021ef0:	d01d      	beq.n	8021f2e <USBD_StdEPReq+0x174>
 8021ef2:	e032      	b.n	8021f5a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021ef4:	220e      	movs	r2, #14
 8021ef6:	18bb      	adds	r3, r7, r2
 8021ef8:	781b      	ldrb	r3, [r3, #0]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d010      	beq.n	8021f20 <USBD_StdEPReq+0x166>
 8021efe:	18bb      	adds	r3, r7, r2
 8021f00:	781b      	ldrb	r3, [r3, #0]
 8021f02:	2b80      	cmp	r3, #128	@ 0x80
 8021f04:	d00c      	beq.n	8021f20 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021f06:	18bb      	adds	r3, r7, r2
 8021f08:	781a      	ldrb	r2, [r3, #0]
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	0011      	movs	r1, r2
 8021f0e:	0018      	movs	r0, r3
 8021f10:	f001 f9c5 	bl	802329e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	2180      	movs	r1, #128	@ 0x80
 8021f18:	0018      	movs	r0, r3
 8021f1a:	f001 f9c0 	bl	802329e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021f1e:	e024      	b.n	8021f6a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8021f20:	683a      	ldr	r2, [r7, #0]
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	0011      	movs	r1, r2
 8021f26:	0018      	movs	r0, r3
 8021f28:	f000 fc91 	bl	802284e <USBD_CtlError>
              break;
 8021f2c:	e01d      	b.n	8021f6a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021f2e:	683b      	ldr	r3, [r7, #0]
 8021f30:	885b      	ldrh	r3, [r3, #2]
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d118      	bne.n	8021f68 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021f36:	210e      	movs	r1, #14
 8021f38:	187b      	adds	r3, r7, r1
 8021f3a:	781b      	ldrb	r3, [r3, #0]
 8021f3c:	227f      	movs	r2, #127	@ 0x7f
 8021f3e:	4013      	ands	r3, r2
 8021f40:	d006      	beq.n	8021f50 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8021f42:	187b      	adds	r3, r7, r1
 8021f44:	781a      	ldrb	r2, [r3, #0]
 8021f46:	687b      	ldr	r3, [r7, #4]
 8021f48:	0011      	movs	r1, r2
 8021f4a:	0018      	movs	r0, r3
 8021f4c:	f001 f9d2 	bl	80232f4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	0018      	movs	r0, r3
 8021f54:	f000 fd63 	bl	8022a1e <USBD_CtlSendStatus>
              }
              break;
 8021f58:	e006      	b.n	8021f68 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8021f5a:	683a      	ldr	r2, [r7, #0]
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	0011      	movs	r1, r2
 8021f60:	0018      	movs	r0, r3
 8021f62:	f000 fc74 	bl	802284e <USBD_CtlError>
              break;
 8021f66:	e000      	b.n	8021f6a <USBD_StdEPReq+0x1b0>
              break;
 8021f68:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021f6a:	e0cd      	b.n	8022108 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021f6c:	687a      	ldr	r2, [r7, #4]
 8021f6e:	23a7      	movs	r3, #167	@ 0xa7
 8021f70:	009b      	lsls	r3, r3, #2
 8021f72:	5cd3      	ldrb	r3, [r2, r3]
 8021f74:	2b02      	cmp	r3, #2
 8021f76:	d002      	beq.n	8021f7e <USBD_StdEPReq+0x1c4>
 8021f78:	2b03      	cmp	r3, #3
 8021f7a:	d03c      	beq.n	8021ff6 <USBD_StdEPReq+0x23c>
 8021f7c:	e0b5      	b.n	80220ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021f7e:	220e      	movs	r2, #14
 8021f80:	18bb      	adds	r3, r7, r2
 8021f82:	781b      	ldrb	r3, [r3, #0]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d00a      	beq.n	8021f9e <USBD_StdEPReq+0x1e4>
 8021f88:	18bb      	adds	r3, r7, r2
 8021f8a:	781b      	ldrb	r3, [r3, #0]
 8021f8c:	2b80      	cmp	r3, #128	@ 0x80
 8021f8e:	d006      	beq.n	8021f9e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8021f90:	683a      	ldr	r2, [r7, #0]
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	0011      	movs	r1, r2
 8021f96:	0018      	movs	r0, r3
 8021f98:	f000 fc59 	bl	802284e <USBD_CtlError>
                break;
 8021f9c:	e0ac      	b.n	80220f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021f9e:	220e      	movs	r2, #14
 8021fa0:	18bb      	adds	r3, r7, r2
 8021fa2:	781b      	ldrb	r3, [r3, #0]
 8021fa4:	b25b      	sxtb	r3, r3
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	da0c      	bge.n	8021fc4 <USBD_StdEPReq+0x20a>
 8021faa:	18bb      	adds	r3, r7, r2
 8021fac:	781b      	ldrb	r3, [r3, #0]
 8021fae:	227f      	movs	r2, #127	@ 0x7f
 8021fb0:	401a      	ands	r2, r3
 8021fb2:	0013      	movs	r3, r2
 8021fb4:	009b      	lsls	r3, r3, #2
 8021fb6:	189b      	adds	r3, r3, r2
 8021fb8:	009b      	lsls	r3, r3, #2
 8021fba:	3310      	adds	r3, #16
 8021fbc:	687a      	ldr	r2, [r7, #4]
 8021fbe:	18d3      	adds	r3, r2, r3
 8021fc0:	3304      	adds	r3, #4
 8021fc2:	e00d      	b.n	8021fe0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021fc4:	230e      	movs	r3, #14
 8021fc6:	18fb      	adds	r3, r7, r3
 8021fc8:	781b      	ldrb	r3, [r3, #0]
 8021fca:	227f      	movs	r2, #127	@ 0x7f
 8021fcc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021fce:	0013      	movs	r3, r2
 8021fd0:	009b      	lsls	r3, r3, #2
 8021fd2:	189b      	adds	r3, r3, r2
 8021fd4:	009b      	lsls	r3, r3, #2
 8021fd6:	3351      	adds	r3, #81	@ 0x51
 8021fd8:	33ff      	adds	r3, #255	@ 0xff
 8021fda:	687a      	ldr	r2, [r7, #4]
 8021fdc:	18d3      	adds	r3, r2, r3
 8021fde:	3304      	adds	r3, #4
 8021fe0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021fe2:	68bb      	ldr	r3, [r7, #8]
 8021fe4:	2200      	movs	r2, #0
 8021fe6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021fe8:	68b9      	ldr	r1, [r7, #8]
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	2202      	movs	r2, #2
 8021fee:	0018      	movs	r0, r3
 8021ff0:	f000 fcab 	bl	802294a <USBD_CtlSendData>
              break;
 8021ff4:	e080      	b.n	80220f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021ff6:	220e      	movs	r2, #14
 8021ff8:	18bb      	adds	r3, r7, r2
 8021ffa:	781b      	ldrb	r3, [r3, #0]
 8021ffc:	b25b      	sxtb	r3, r3
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	da14      	bge.n	802202c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8022002:	18bb      	adds	r3, r7, r2
 8022004:	781b      	ldrb	r3, [r3, #0]
 8022006:	220f      	movs	r2, #15
 8022008:	401a      	ands	r2, r3
 802200a:	6879      	ldr	r1, [r7, #4]
 802200c:	0013      	movs	r3, r2
 802200e:	009b      	lsls	r3, r3, #2
 8022010:	189b      	adds	r3, r3, r2
 8022012:	009b      	lsls	r3, r3, #2
 8022014:	18cb      	adds	r3, r1, r3
 8022016:	3318      	adds	r3, #24
 8022018:	681b      	ldr	r3, [r3, #0]
 802201a:	2b00      	cmp	r3, #0
 802201c:	d11e      	bne.n	802205c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802201e:	683a      	ldr	r2, [r7, #0]
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	0011      	movs	r1, r2
 8022024:	0018      	movs	r0, r3
 8022026:	f000 fc12 	bl	802284e <USBD_CtlError>
                  break;
 802202a:	e065      	b.n	80220f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802202c:	230e      	movs	r3, #14
 802202e:	18fb      	adds	r3, r7, r3
 8022030:	781b      	ldrb	r3, [r3, #0]
 8022032:	220f      	movs	r2, #15
 8022034:	401a      	ands	r2, r3
 8022036:	6878      	ldr	r0, [r7, #4]
 8022038:	23ac      	movs	r3, #172	@ 0xac
 802203a:	0059      	lsls	r1, r3, #1
 802203c:	0013      	movs	r3, r2
 802203e:	009b      	lsls	r3, r3, #2
 8022040:	189b      	adds	r3, r3, r2
 8022042:	009b      	lsls	r3, r3, #2
 8022044:	18c3      	adds	r3, r0, r3
 8022046:	185b      	adds	r3, r3, r1
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	2b00      	cmp	r3, #0
 802204c:	d106      	bne.n	802205c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802204e:	683a      	ldr	r2, [r7, #0]
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	0011      	movs	r1, r2
 8022054:	0018      	movs	r0, r3
 8022056:	f000 fbfa 	bl	802284e <USBD_CtlError>
                  break;
 802205a:	e04d      	b.n	80220f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802205c:	220e      	movs	r2, #14
 802205e:	18bb      	adds	r3, r7, r2
 8022060:	781b      	ldrb	r3, [r3, #0]
 8022062:	b25b      	sxtb	r3, r3
 8022064:	2b00      	cmp	r3, #0
 8022066:	da0c      	bge.n	8022082 <USBD_StdEPReq+0x2c8>
 8022068:	18bb      	adds	r3, r7, r2
 802206a:	781b      	ldrb	r3, [r3, #0]
 802206c:	227f      	movs	r2, #127	@ 0x7f
 802206e:	401a      	ands	r2, r3
 8022070:	0013      	movs	r3, r2
 8022072:	009b      	lsls	r3, r3, #2
 8022074:	189b      	adds	r3, r3, r2
 8022076:	009b      	lsls	r3, r3, #2
 8022078:	3310      	adds	r3, #16
 802207a:	687a      	ldr	r2, [r7, #4]
 802207c:	18d3      	adds	r3, r2, r3
 802207e:	3304      	adds	r3, #4
 8022080:	e00d      	b.n	802209e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022082:	230e      	movs	r3, #14
 8022084:	18fb      	adds	r3, r7, r3
 8022086:	781b      	ldrb	r3, [r3, #0]
 8022088:	227f      	movs	r2, #127	@ 0x7f
 802208a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802208c:	0013      	movs	r3, r2
 802208e:	009b      	lsls	r3, r3, #2
 8022090:	189b      	adds	r3, r3, r2
 8022092:	009b      	lsls	r3, r3, #2
 8022094:	3351      	adds	r3, #81	@ 0x51
 8022096:	33ff      	adds	r3, #255	@ 0xff
 8022098:	687a      	ldr	r2, [r7, #4]
 802209a:	18d3      	adds	r3, r2, r3
 802209c:	3304      	adds	r3, #4
 802209e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80220a0:	220e      	movs	r2, #14
 80220a2:	18bb      	adds	r3, r7, r2
 80220a4:	781b      	ldrb	r3, [r3, #0]
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d003      	beq.n	80220b2 <USBD_StdEPReq+0x2f8>
 80220aa:	18bb      	adds	r3, r7, r2
 80220ac:	781b      	ldrb	r3, [r3, #0]
 80220ae:	2b80      	cmp	r3, #128	@ 0x80
 80220b0:	d103      	bne.n	80220ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80220b2:	68bb      	ldr	r3, [r7, #8]
 80220b4:	2200      	movs	r2, #0
 80220b6:	601a      	str	r2, [r3, #0]
 80220b8:	e010      	b.n	80220dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80220ba:	230e      	movs	r3, #14
 80220bc:	18fb      	adds	r3, r7, r3
 80220be:	781a      	ldrb	r2, [r3, #0]
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	0011      	movs	r1, r2
 80220c4:	0018      	movs	r0, r3
 80220c6:	f001 f940 	bl	802334a <USBD_LL_IsStallEP>
 80220ca:	1e03      	subs	r3, r0, #0
 80220cc:	d003      	beq.n	80220d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80220ce:	68bb      	ldr	r3, [r7, #8]
 80220d0:	2201      	movs	r2, #1
 80220d2:	601a      	str	r2, [r3, #0]
 80220d4:	e002      	b.n	80220dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80220d6:	68bb      	ldr	r3, [r7, #8]
 80220d8:	2200      	movs	r2, #0
 80220da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80220dc:	68b9      	ldr	r1, [r7, #8]
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	2202      	movs	r2, #2
 80220e2:	0018      	movs	r0, r3
 80220e4:	f000 fc31 	bl	802294a <USBD_CtlSendData>
              break;
 80220e8:	e006      	b.n	80220f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80220ea:	683a      	ldr	r2, [r7, #0]
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	0011      	movs	r1, r2
 80220f0:	0018      	movs	r0, r3
 80220f2:	f000 fbac 	bl	802284e <USBD_CtlError>
              break;
 80220f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80220f8:	e006      	b.n	8022108 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80220fa:	683a      	ldr	r2, [r7, #0]
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	0011      	movs	r1, r2
 8022100:	0018      	movs	r0, r3
 8022102:	f000 fba4 	bl	802284e <USBD_CtlError>
          break;
 8022106:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022108:	e006      	b.n	8022118 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 802210a:	683a      	ldr	r2, [r7, #0]
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	0011      	movs	r1, r2
 8022110:	0018      	movs	r0, r3
 8022112:	f000 fb9c 	bl	802284e <USBD_CtlError>
      break;
 8022116:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022118:	230f      	movs	r3, #15
 802211a:	18fb      	adds	r3, r7, r3
 802211c:	781b      	ldrb	r3, [r3, #0]
}
 802211e:	0018      	movs	r0, r3
 8022120:	46bd      	mov	sp, r7
 8022122:	b004      	add	sp, #16
 8022124:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022128 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022128:	b580      	push	{r7, lr}
 802212a:	b084      	sub	sp, #16
 802212c:	af00      	add	r7, sp, #0
 802212e:	6078      	str	r0, [r7, #4]
 8022130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022132:	2308      	movs	r3, #8
 8022134:	18fb      	adds	r3, r7, r3
 8022136:	2200      	movs	r2, #0
 8022138:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 802213a:	2300      	movs	r3, #0
 802213c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802213e:	230b      	movs	r3, #11
 8022140:	18fb      	adds	r3, r7, r3
 8022142:	2200      	movs	r2, #0
 8022144:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8022146:	683b      	ldr	r3, [r7, #0]
 8022148:	885b      	ldrh	r3, [r3, #2]
 802214a:	0a1b      	lsrs	r3, r3, #8
 802214c:	b29b      	uxth	r3, r3
 802214e:	2b07      	cmp	r3, #7
 8022150:	d900      	bls.n	8022154 <USBD_GetDescriptor+0x2c>
 8022152:	e159      	b.n	8022408 <USBD_GetDescriptor+0x2e0>
 8022154:	009a      	lsls	r2, r3, #2
 8022156:	4bcb      	ldr	r3, [pc, #812]	@ (8022484 <USBD_GetDescriptor+0x35c>)
 8022158:	18d3      	adds	r3, r2, r3
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802215e:	687a      	ldr	r2, [r7, #4]
 8022160:	23ac      	movs	r3, #172	@ 0xac
 8022162:	009b      	lsls	r3, r3, #2
 8022164:	58d3      	ldr	r3, [r2, r3]
 8022166:	681b      	ldr	r3, [r3, #0]
 8022168:	687a      	ldr	r2, [r7, #4]
 802216a:	7c12      	ldrb	r2, [r2, #16]
 802216c:	2108      	movs	r1, #8
 802216e:	1879      	adds	r1, r7, r1
 8022170:	0010      	movs	r0, r2
 8022172:	4798      	blx	r3
 8022174:	0003      	movs	r3, r0
 8022176:	60fb      	str	r3, [r7, #12]
      break;
 8022178:	e153      	b.n	8022422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	7c1b      	ldrb	r3, [r3, #16]
 802217e:	2b00      	cmp	r3, #0
 8022180:	d10f      	bne.n	80221a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8022182:	687a      	ldr	r2, [r7, #4]
 8022184:	23ad      	movs	r3, #173	@ 0xad
 8022186:	009b      	lsls	r3, r3, #2
 8022188:	58d3      	ldr	r3, [r2, r3]
 802218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802218c:	2208      	movs	r2, #8
 802218e:	18ba      	adds	r2, r7, r2
 8022190:	0010      	movs	r0, r2
 8022192:	4798      	blx	r3
 8022194:	0003      	movs	r3, r0
 8022196:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022198:	68fb      	ldr	r3, [r7, #12]
 802219a:	3301      	adds	r3, #1
 802219c:	2202      	movs	r2, #2
 802219e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80221a0:	e13f      	b.n	8022422 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80221a2:	687a      	ldr	r2, [r7, #4]
 80221a4:	23ad      	movs	r3, #173	@ 0xad
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	58d3      	ldr	r3, [r2, r3]
 80221aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221ac:	2208      	movs	r2, #8
 80221ae:	18ba      	adds	r2, r7, r2
 80221b0:	0010      	movs	r0, r2
 80221b2:	4798      	blx	r3
 80221b4:	0003      	movs	r3, r0
 80221b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80221b8:	68fb      	ldr	r3, [r7, #12]
 80221ba:	3301      	adds	r3, #1
 80221bc:	2202      	movs	r2, #2
 80221be:	701a      	strb	r2, [r3, #0]
      break;
 80221c0:	e12f      	b.n	8022422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80221c2:	683b      	ldr	r3, [r7, #0]
 80221c4:	885b      	ldrh	r3, [r3, #2]
 80221c6:	b2db      	uxtb	r3, r3
 80221c8:	2b05      	cmp	r3, #5
 80221ca:	d900      	bls.n	80221ce <USBD_GetDescriptor+0xa6>
 80221cc:	e0d0      	b.n	8022370 <USBD_GetDescriptor+0x248>
 80221ce:	009a      	lsls	r2, r3, #2
 80221d0:	4bad      	ldr	r3, [pc, #692]	@ (8022488 <USBD_GetDescriptor+0x360>)
 80221d2:	18d3      	adds	r3, r2, r3
 80221d4:	681b      	ldr	r3, [r3, #0]
 80221d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80221d8:	687a      	ldr	r2, [r7, #4]
 80221da:	23ac      	movs	r3, #172	@ 0xac
 80221dc:	009b      	lsls	r3, r3, #2
 80221de:	58d3      	ldr	r3, [r2, r3]
 80221e0:	685b      	ldr	r3, [r3, #4]
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d00d      	beq.n	8022202 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80221e6:	687a      	ldr	r2, [r7, #4]
 80221e8:	23ac      	movs	r3, #172	@ 0xac
 80221ea:	009b      	lsls	r3, r3, #2
 80221ec:	58d3      	ldr	r3, [r2, r3]
 80221ee:	685b      	ldr	r3, [r3, #4]
 80221f0:	687a      	ldr	r2, [r7, #4]
 80221f2:	7c12      	ldrb	r2, [r2, #16]
 80221f4:	2108      	movs	r1, #8
 80221f6:	1879      	adds	r1, r7, r1
 80221f8:	0010      	movs	r0, r2
 80221fa:	4798      	blx	r3
 80221fc:	0003      	movs	r3, r0
 80221fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022200:	e0c3      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022202:	683a      	ldr	r2, [r7, #0]
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	0011      	movs	r1, r2
 8022208:	0018      	movs	r0, r3
 802220a:	f000 fb20 	bl	802284e <USBD_CtlError>
            err++;
 802220e:	210b      	movs	r1, #11
 8022210:	187b      	adds	r3, r7, r1
 8022212:	781a      	ldrb	r2, [r3, #0]
 8022214:	187b      	adds	r3, r7, r1
 8022216:	3201      	adds	r2, #1
 8022218:	701a      	strb	r2, [r3, #0]
          break;
 802221a:	e0b6      	b.n	802238a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802221c:	687a      	ldr	r2, [r7, #4]
 802221e:	23ac      	movs	r3, #172	@ 0xac
 8022220:	009b      	lsls	r3, r3, #2
 8022222:	58d3      	ldr	r3, [r2, r3]
 8022224:	689b      	ldr	r3, [r3, #8]
 8022226:	2b00      	cmp	r3, #0
 8022228:	d00d      	beq.n	8022246 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802222a:	687a      	ldr	r2, [r7, #4]
 802222c:	23ac      	movs	r3, #172	@ 0xac
 802222e:	009b      	lsls	r3, r3, #2
 8022230:	58d3      	ldr	r3, [r2, r3]
 8022232:	689b      	ldr	r3, [r3, #8]
 8022234:	687a      	ldr	r2, [r7, #4]
 8022236:	7c12      	ldrb	r2, [r2, #16]
 8022238:	2108      	movs	r1, #8
 802223a:	1879      	adds	r1, r7, r1
 802223c:	0010      	movs	r0, r2
 802223e:	4798      	blx	r3
 8022240:	0003      	movs	r3, r0
 8022242:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022244:	e0a1      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022246:	683a      	ldr	r2, [r7, #0]
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	0011      	movs	r1, r2
 802224c:	0018      	movs	r0, r3
 802224e:	f000 fafe 	bl	802284e <USBD_CtlError>
            err++;
 8022252:	210b      	movs	r1, #11
 8022254:	187b      	adds	r3, r7, r1
 8022256:	781a      	ldrb	r2, [r3, #0]
 8022258:	187b      	adds	r3, r7, r1
 802225a:	3201      	adds	r2, #1
 802225c:	701a      	strb	r2, [r3, #0]
          break;
 802225e:	e094      	b.n	802238a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022260:	687a      	ldr	r2, [r7, #4]
 8022262:	23ac      	movs	r3, #172	@ 0xac
 8022264:	009b      	lsls	r3, r3, #2
 8022266:	58d3      	ldr	r3, [r2, r3]
 8022268:	68db      	ldr	r3, [r3, #12]
 802226a:	2b00      	cmp	r3, #0
 802226c:	d00d      	beq.n	802228a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802226e:	687a      	ldr	r2, [r7, #4]
 8022270:	23ac      	movs	r3, #172	@ 0xac
 8022272:	009b      	lsls	r3, r3, #2
 8022274:	58d3      	ldr	r3, [r2, r3]
 8022276:	68db      	ldr	r3, [r3, #12]
 8022278:	687a      	ldr	r2, [r7, #4]
 802227a:	7c12      	ldrb	r2, [r2, #16]
 802227c:	2108      	movs	r1, #8
 802227e:	1879      	adds	r1, r7, r1
 8022280:	0010      	movs	r0, r2
 8022282:	4798      	blx	r3
 8022284:	0003      	movs	r3, r0
 8022286:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022288:	e07f      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802228a:	683a      	ldr	r2, [r7, #0]
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	0011      	movs	r1, r2
 8022290:	0018      	movs	r0, r3
 8022292:	f000 fadc 	bl	802284e <USBD_CtlError>
            err++;
 8022296:	210b      	movs	r1, #11
 8022298:	187b      	adds	r3, r7, r1
 802229a:	781a      	ldrb	r2, [r3, #0]
 802229c:	187b      	adds	r3, r7, r1
 802229e:	3201      	adds	r2, #1
 80222a0:	701a      	strb	r2, [r3, #0]
          break;
 80222a2:	e072      	b.n	802238a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80222a4:	687a      	ldr	r2, [r7, #4]
 80222a6:	23ac      	movs	r3, #172	@ 0xac
 80222a8:	009b      	lsls	r3, r3, #2
 80222aa:	58d3      	ldr	r3, [r2, r3]
 80222ac:	691b      	ldr	r3, [r3, #16]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d00d      	beq.n	80222ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80222b2:	687a      	ldr	r2, [r7, #4]
 80222b4:	23ac      	movs	r3, #172	@ 0xac
 80222b6:	009b      	lsls	r3, r3, #2
 80222b8:	58d3      	ldr	r3, [r2, r3]
 80222ba:	691b      	ldr	r3, [r3, #16]
 80222bc:	687a      	ldr	r2, [r7, #4]
 80222be:	7c12      	ldrb	r2, [r2, #16]
 80222c0:	2108      	movs	r1, #8
 80222c2:	1879      	adds	r1, r7, r1
 80222c4:	0010      	movs	r0, r2
 80222c6:	4798      	blx	r3
 80222c8:	0003      	movs	r3, r0
 80222ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80222cc:	e05d      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80222ce:	683a      	ldr	r2, [r7, #0]
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	0011      	movs	r1, r2
 80222d4:	0018      	movs	r0, r3
 80222d6:	f000 faba 	bl	802284e <USBD_CtlError>
            err++;
 80222da:	210b      	movs	r1, #11
 80222dc:	187b      	adds	r3, r7, r1
 80222de:	781a      	ldrb	r2, [r3, #0]
 80222e0:	187b      	adds	r3, r7, r1
 80222e2:	3201      	adds	r2, #1
 80222e4:	701a      	strb	r2, [r3, #0]
          break;
 80222e6:	e050      	b.n	802238a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80222e8:	687a      	ldr	r2, [r7, #4]
 80222ea:	23ac      	movs	r3, #172	@ 0xac
 80222ec:	009b      	lsls	r3, r3, #2
 80222ee:	58d3      	ldr	r3, [r2, r3]
 80222f0:	695b      	ldr	r3, [r3, #20]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d00d      	beq.n	8022312 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80222f6:	687a      	ldr	r2, [r7, #4]
 80222f8:	23ac      	movs	r3, #172	@ 0xac
 80222fa:	009b      	lsls	r3, r3, #2
 80222fc:	58d3      	ldr	r3, [r2, r3]
 80222fe:	695b      	ldr	r3, [r3, #20]
 8022300:	687a      	ldr	r2, [r7, #4]
 8022302:	7c12      	ldrb	r2, [r2, #16]
 8022304:	2108      	movs	r1, #8
 8022306:	1879      	adds	r1, r7, r1
 8022308:	0010      	movs	r0, r2
 802230a:	4798      	blx	r3
 802230c:	0003      	movs	r3, r0
 802230e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022310:	e03b      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022312:	683a      	ldr	r2, [r7, #0]
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	0011      	movs	r1, r2
 8022318:	0018      	movs	r0, r3
 802231a:	f000 fa98 	bl	802284e <USBD_CtlError>
            err++;
 802231e:	210b      	movs	r1, #11
 8022320:	187b      	adds	r3, r7, r1
 8022322:	781a      	ldrb	r2, [r3, #0]
 8022324:	187b      	adds	r3, r7, r1
 8022326:	3201      	adds	r2, #1
 8022328:	701a      	strb	r2, [r3, #0]
          break;
 802232a:	e02e      	b.n	802238a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802232c:	687a      	ldr	r2, [r7, #4]
 802232e:	23ac      	movs	r3, #172	@ 0xac
 8022330:	009b      	lsls	r3, r3, #2
 8022332:	58d3      	ldr	r3, [r2, r3]
 8022334:	699b      	ldr	r3, [r3, #24]
 8022336:	2b00      	cmp	r3, #0
 8022338:	d00d      	beq.n	8022356 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802233a:	687a      	ldr	r2, [r7, #4]
 802233c:	23ac      	movs	r3, #172	@ 0xac
 802233e:	009b      	lsls	r3, r3, #2
 8022340:	58d3      	ldr	r3, [r2, r3]
 8022342:	699b      	ldr	r3, [r3, #24]
 8022344:	687a      	ldr	r2, [r7, #4]
 8022346:	7c12      	ldrb	r2, [r2, #16]
 8022348:	2108      	movs	r1, #8
 802234a:	1879      	adds	r1, r7, r1
 802234c:	0010      	movs	r0, r2
 802234e:	4798      	blx	r3
 8022350:	0003      	movs	r3, r0
 8022352:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022354:	e019      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022356:	683a      	ldr	r2, [r7, #0]
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	0011      	movs	r1, r2
 802235c:	0018      	movs	r0, r3
 802235e:	f000 fa76 	bl	802284e <USBD_CtlError>
            err++;
 8022362:	210b      	movs	r1, #11
 8022364:	187b      	adds	r3, r7, r1
 8022366:	781a      	ldrb	r2, [r3, #0]
 8022368:	187b      	adds	r3, r7, r1
 802236a:	3201      	adds	r2, #1
 802236c:	701a      	strb	r2, [r3, #0]
          break;
 802236e:	e00c      	b.n	802238a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022370:	683a      	ldr	r2, [r7, #0]
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	0011      	movs	r1, r2
 8022376:	0018      	movs	r0, r3
 8022378:	f000 fa69 	bl	802284e <USBD_CtlError>
          err++;
 802237c:	210b      	movs	r1, #11
 802237e:	187b      	adds	r3, r7, r1
 8022380:	781a      	ldrb	r2, [r3, #0]
 8022382:	187b      	adds	r3, r7, r1
 8022384:	3201      	adds	r2, #1
 8022386:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022388:	e04b      	b.n	8022422 <USBD_GetDescriptor+0x2fa>
 802238a:	e04a      	b.n	8022422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	7c1b      	ldrb	r3, [r3, #16]
 8022390:	2b00      	cmp	r3, #0
 8022392:	d10b      	bne.n	80223ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8022394:	687a      	ldr	r2, [r7, #4]
 8022396:	23ad      	movs	r3, #173	@ 0xad
 8022398:	009b      	lsls	r3, r3, #2
 802239a:	58d3      	ldr	r3, [r2, r3]
 802239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802239e:	2208      	movs	r2, #8
 80223a0:	18ba      	adds	r2, r7, r2
 80223a2:	0010      	movs	r0, r2
 80223a4:	4798      	blx	r3
 80223a6:	0003      	movs	r3, r0
 80223a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80223aa:	e03a      	b.n	8022422 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80223ac:	683a      	ldr	r2, [r7, #0]
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	0011      	movs	r1, r2
 80223b2:	0018      	movs	r0, r3
 80223b4:	f000 fa4b 	bl	802284e <USBD_CtlError>
        err++;
 80223b8:	210b      	movs	r1, #11
 80223ba:	187b      	adds	r3, r7, r1
 80223bc:	781a      	ldrb	r2, [r3, #0]
 80223be:	187b      	adds	r3, r7, r1
 80223c0:	3201      	adds	r2, #1
 80223c2:	701a      	strb	r2, [r3, #0]
      break;
 80223c4:	e02d      	b.n	8022422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	7c1b      	ldrb	r3, [r3, #16]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d10f      	bne.n	80223ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80223ce:	687a      	ldr	r2, [r7, #4]
 80223d0:	23ad      	movs	r3, #173	@ 0xad
 80223d2:	009b      	lsls	r3, r3, #2
 80223d4:	58d3      	ldr	r3, [r2, r3]
 80223d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223d8:	2208      	movs	r2, #8
 80223da:	18ba      	adds	r2, r7, r2
 80223dc:	0010      	movs	r0, r2
 80223de:	4798      	blx	r3
 80223e0:	0003      	movs	r3, r0
 80223e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80223e4:	68fb      	ldr	r3, [r7, #12]
 80223e6:	3301      	adds	r3, #1
 80223e8:	2207      	movs	r2, #7
 80223ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80223ec:	e019      	b.n	8022422 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80223ee:	683a      	ldr	r2, [r7, #0]
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	0011      	movs	r1, r2
 80223f4:	0018      	movs	r0, r3
 80223f6:	f000 fa2a 	bl	802284e <USBD_CtlError>
        err++;
 80223fa:	210b      	movs	r1, #11
 80223fc:	187b      	adds	r3, r7, r1
 80223fe:	781a      	ldrb	r2, [r3, #0]
 8022400:	187b      	adds	r3, r7, r1
 8022402:	3201      	adds	r2, #1
 8022404:	701a      	strb	r2, [r3, #0]
      break;
 8022406:	e00c      	b.n	8022422 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022408:	683a      	ldr	r2, [r7, #0]
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	0011      	movs	r1, r2
 802240e:	0018      	movs	r0, r3
 8022410:	f000 fa1d 	bl	802284e <USBD_CtlError>
      err++;
 8022414:	210b      	movs	r1, #11
 8022416:	187b      	adds	r3, r7, r1
 8022418:	781a      	ldrb	r2, [r3, #0]
 802241a:	187b      	adds	r3, r7, r1
 802241c:	3201      	adds	r2, #1
 802241e:	701a      	strb	r2, [r3, #0]
      break;
 8022420:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022422:	230b      	movs	r3, #11
 8022424:	18fb      	adds	r3, r7, r3
 8022426:	781b      	ldrb	r3, [r3, #0]
 8022428:	2b00      	cmp	r3, #0
 802242a:	d127      	bne.n	802247c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 802242c:	2108      	movs	r1, #8
 802242e:	187b      	adds	r3, r7, r1
 8022430:	881b      	ldrh	r3, [r3, #0]
 8022432:	2b00      	cmp	r3, #0
 8022434:	d019      	beq.n	802246a <USBD_GetDescriptor+0x342>
 8022436:	683b      	ldr	r3, [r7, #0]
 8022438:	88db      	ldrh	r3, [r3, #6]
 802243a:	2b00      	cmp	r3, #0
 802243c:	d015      	beq.n	802246a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 802243e:	683b      	ldr	r3, [r7, #0]
 8022440:	88da      	ldrh	r2, [r3, #6]
 8022442:	187b      	adds	r3, r7, r1
 8022444:	881b      	ldrh	r3, [r3, #0]
 8022446:	1c18      	adds	r0, r3, #0
 8022448:	1c11      	adds	r1, r2, #0
 802244a:	b28a      	uxth	r2, r1
 802244c:	b283      	uxth	r3, r0
 802244e:	429a      	cmp	r2, r3
 8022450:	d900      	bls.n	8022454 <USBD_GetDescriptor+0x32c>
 8022452:	1c01      	adds	r1, r0, #0
 8022454:	b28a      	uxth	r2, r1
 8022456:	2108      	movs	r1, #8
 8022458:	187b      	adds	r3, r7, r1
 802245a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802245c:	187b      	adds	r3, r7, r1
 802245e:	881a      	ldrh	r2, [r3, #0]
 8022460:	68f9      	ldr	r1, [r7, #12]
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	0018      	movs	r0, r3
 8022466:	f000 fa70 	bl	802294a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 802246a:	683b      	ldr	r3, [r7, #0]
 802246c:	88db      	ldrh	r3, [r3, #6]
 802246e:	2b00      	cmp	r3, #0
 8022470:	d105      	bne.n	802247e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	0018      	movs	r0, r3
 8022476:	f000 fad2 	bl	8022a1e <USBD_CtlSendStatus>
 802247a:	e000      	b.n	802247e <USBD_GetDescriptor+0x356>
    return;
 802247c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 802247e:	46bd      	mov	sp, r7
 8022480:	b004      	add	sp, #16
 8022482:	bd80      	pop	{r7, pc}
 8022484:	0802e270 	.word	0x0802e270
 8022488:	0802e290 	.word	0x0802e290

0802248c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802248c:	b590      	push	{r4, r7, lr}
 802248e:	b085      	sub	sp, #20
 8022490:	af00      	add	r7, sp, #0
 8022492:	6078      	str	r0, [r7, #4]
 8022494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022496:	683b      	ldr	r3, [r7, #0]
 8022498:	889b      	ldrh	r3, [r3, #4]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d13d      	bne.n	802251a <USBD_SetAddress+0x8e>
 802249e:	683b      	ldr	r3, [r7, #0]
 80224a0:	88db      	ldrh	r3, [r3, #6]
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d139      	bne.n	802251a <USBD_SetAddress+0x8e>
 80224a6:	683b      	ldr	r3, [r7, #0]
 80224a8:	885b      	ldrh	r3, [r3, #2]
 80224aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80224ac:	d835      	bhi.n	802251a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80224ae:	683b      	ldr	r3, [r7, #0]
 80224b0:	885b      	ldrh	r3, [r3, #2]
 80224b2:	b2da      	uxtb	r2, r3
 80224b4:	230f      	movs	r3, #15
 80224b6:	18fb      	adds	r3, r7, r3
 80224b8:	217f      	movs	r1, #127	@ 0x7f
 80224ba:	400a      	ands	r2, r1
 80224bc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80224be:	687a      	ldr	r2, [r7, #4]
 80224c0:	23a7      	movs	r3, #167	@ 0xa7
 80224c2:	009b      	lsls	r3, r3, #2
 80224c4:	5cd3      	ldrb	r3, [r2, r3]
 80224c6:	2b03      	cmp	r3, #3
 80224c8:	d106      	bne.n	80224d8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80224ca:	683a      	ldr	r2, [r7, #0]
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	0011      	movs	r1, r2
 80224d0:	0018      	movs	r0, r3
 80224d2:	f000 f9bc 	bl	802284e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80224d6:	e027      	b.n	8022528 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	240f      	movs	r4, #15
 80224dc:	193a      	adds	r2, r7, r4
 80224de:	4914      	ldr	r1, [pc, #80]	@ (8022530 <USBD_SetAddress+0xa4>)
 80224e0:	7812      	ldrb	r2, [r2, #0]
 80224e2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80224e4:	193b      	adds	r3, r7, r4
 80224e6:	781a      	ldrb	r2, [r3, #0]
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	0011      	movs	r1, r2
 80224ec:	0018      	movs	r0, r3
 80224ee:	f000 ff5d 	bl	80233ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	0018      	movs	r0, r3
 80224f6:	f000 fa92 	bl	8022a1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80224fa:	193b      	adds	r3, r7, r4
 80224fc:	781b      	ldrb	r3, [r3, #0]
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d005      	beq.n	802250e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022502:	687a      	ldr	r2, [r7, #4]
 8022504:	23a7      	movs	r3, #167	@ 0xa7
 8022506:	009b      	lsls	r3, r3, #2
 8022508:	2102      	movs	r1, #2
 802250a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802250c:	e00c      	b.n	8022528 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802250e:	687a      	ldr	r2, [r7, #4]
 8022510:	23a7      	movs	r3, #167	@ 0xa7
 8022512:	009b      	lsls	r3, r3, #2
 8022514:	2101      	movs	r1, #1
 8022516:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022518:	e006      	b.n	8022528 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802251a:	683a      	ldr	r2, [r7, #0]
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	0011      	movs	r1, r2
 8022520:	0018      	movs	r0, r3
 8022522:	f000 f994 	bl	802284e <USBD_CtlError>
  }
}
 8022526:	46c0      	nop			@ (mov r8, r8)
 8022528:	46c0      	nop			@ (mov r8, r8)
 802252a:	46bd      	mov	sp, r7
 802252c:	b005      	add	sp, #20
 802252e:	bd90      	pop	{r4, r7, pc}
 8022530:	0000029e 	.word	0x0000029e

08022534 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022534:	b580      	push	{r7, lr}
 8022536:	b082      	sub	sp, #8
 8022538:	af00      	add	r7, sp, #0
 802253a:	6078      	str	r0, [r7, #4]
 802253c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802253e:	683b      	ldr	r3, [r7, #0]
 8022540:	885b      	ldrh	r3, [r3, #2]
 8022542:	b2da      	uxtb	r2, r3
 8022544:	4b4c      	ldr	r3, [pc, #304]	@ (8022678 <USBD_SetConfig+0x144>)
 8022546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022548:	4b4b      	ldr	r3, [pc, #300]	@ (8022678 <USBD_SetConfig+0x144>)
 802254a:	781b      	ldrb	r3, [r3, #0]
 802254c:	2b01      	cmp	r3, #1
 802254e:	d906      	bls.n	802255e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022550:	683a      	ldr	r2, [r7, #0]
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	0011      	movs	r1, r2
 8022556:	0018      	movs	r0, r3
 8022558:	f000 f979 	bl	802284e <USBD_CtlError>
 802255c:	e088      	b.n	8022670 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 802255e:	687a      	ldr	r2, [r7, #4]
 8022560:	23a7      	movs	r3, #167	@ 0xa7
 8022562:	009b      	lsls	r3, r3, #2
 8022564:	5cd3      	ldrb	r3, [r2, r3]
 8022566:	2b02      	cmp	r3, #2
 8022568:	d002      	beq.n	8022570 <USBD_SetConfig+0x3c>
 802256a:	2b03      	cmp	r3, #3
 802256c:	d029      	beq.n	80225c2 <USBD_SetConfig+0x8e>
 802256e:	e071      	b.n	8022654 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022570:	4b41      	ldr	r3, [pc, #260]	@ (8022678 <USBD_SetConfig+0x144>)
 8022572:	781b      	ldrb	r3, [r3, #0]
 8022574:	2b00      	cmp	r3, #0
 8022576:	d01f      	beq.n	80225b8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022578:	4b3f      	ldr	r3, [pc, #252]	@ (8022678 <USBD_SetConfig+0x144>)
 802257a:	781b      	ldrb	r3, [r3, #0]
 802257c:	001a      	movs	r2, r3
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022582:	687a      	ldr	r2, [r7, #4]
 8022584:	23a7      	movs	r3, #167	@ 0xa7
 8022586:	009b      	lsls	r3, r3, #2
 8022588:	2103      	movs	r1, #3
 802258a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802258c:	4b3a      	ldr	r3, [pc, #232]	@ (8022678 <USBD_SetConfig+0x144>)
 802258e:	781a      	ldrb	r2, [r3, #0]
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	0011      	movs	r1, r2
 8022594:	0018      	movs	r0, r3
 8022596:	f7ff f8c6 	bl	8021726 <USBD_SetClassConfig>
 802259a:	0003      	movs	r3, r0
 802259c:	2b02      	cmp	r3, #2
 802259e:	d106      	bne.n	80225ae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80225a0:	683a      	ldr	r2, [r7, #0]
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	0011      	movs	r1, r2
 80225a6:	0018      	movs	r0, r3
 80225a8:	f000 f951 	bl	802284e <USBD_CtlError>
            return;
 80225ac:	e060      	b.n	8022670 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	0018      	movs	r0, r3
 80225b2:	f000 fa34 	bl	8022a1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80225b6:	e05b      	b.n	8022670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	0018      	movs	r0, r3
 80225bc:	f000 fa2f 	bl	8022a1e <USBD_CtlSendStatus>
        break;
 80225c0:	e056      	b.n	8022670 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80225c2:	4b2d      	ldr	r3, [pc, #180]	@ (8022678 <USBD_SetConfig+0x144>)
 80225c4:	781b      	ldrb	r3, [r3, #0]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d115      	bne.n	80225f6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80225ca:	687a      	ldr	r2, [r7, #4]
 80225cc:	23a7      	movs	r3, #167	@ 0xa7
 80225ce:	009b      	lsls	r3, r3, #2
 80225d0:	2102      	movs	r1, #2
 80225d2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80225d4:	4b28      	ldr	r3, [pc, #160]	@ (8022678 <USBD_SetConfig+0x144>)
 80225d6:	781b      	ldrb	r3, [r3, #0]
 80225d8:	001a      	movs	r2, r3
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80225de:	4b26      	ldr	r3, [pc, #152]	@ (8022678 <USBD_SetConfig+0x144>)
 80225e0:	781a      	ldrb	r2, [r3, #0]
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	0011      	movs	r1, r2
 80225e6:	0018      	movs	r0, r3
 80225e8:	f7ff f8c4 	bl	8021774 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	0018      	movs	r0, r3
 80225f0:	f000 fa15 	bl	8022a1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80225f4:	e03c      	b.n	8022670 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80225f6:	4b20      	ldr	r3, [pc, #128]	@ (8022678 <USBD_SetConfig+0x144>)
 80225f8:	781b      	ldrb	r3, [r3, #0]
 80225fa:	001a      	movs	r2, r3
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	685b      	ldr	r3, [r3, #4]
 8022600:	429a      	cmp	r2, r3
 8022602:	d022      	beq.n	802264a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	685b      	ldr	r3, [r3, #4]
 8022608:	b2da      	uxtb	r2, r3
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	0011      	movs	r1, r2
 802260e:	0018      	movs	r0, r3
 8022610:	f7ff f8b0 	bl	8021774 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022614:	4b18      	ldr	r3, [pc, #96]	@ (8022678 <USBD_SetConfig+0x144>)
 8022616:	781b      	ldrb	r3, [r3, #0]
 8022618:	001a      	movs	r2, r3
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802261e:	4b16      	ldr	r3, [pc, #88]	@ (8022678 <USBD_SetConfig+0x144>)
 8022620:	781a      	ldrb	r2, [r3, #0]
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	0011      	movs	r1, r2
 8022626:	0018      	movs	r0, r3
 8022628:	f7ff f87d 	bl	8021726 <USBD_SetClassConfig>
 802262c:	0003      	movs	r3, r0
 802262e:	2b02      	cmp	r3, #2
 8022630:	d106      	bne.n	8022640 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022632:	683a      	ldr	r2, [r7, #0]
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	0011      	movs	r1, r2
 8022638:	0018      	movs	r0, r3
 802263a:	f000 f908 	bl	802284e <USBD_CtlError>
            return;
 802263e:	e017      	b.n	8022670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	0018      	movs	r0, r3
 8022644:	f000 f9eb 	bl	8022a1e <USBD_CtlSendStatus>
        break;
 8022648:	e012      	b.n	8022670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	0018      	movs	r0, r3
 802264e:	f000 f9e6 	bl	8022a1e <USBD_CtlSendStatus>
        break;
 8022652:	e00d      	b.n	8022670 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022654:	683a      	ldr	r2, [r7, #0]
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	0011      	movs	r1, r2
 802265a:	0018      	movs	r0, r3
 802265c:	f000 f8f7 	bl	802284e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022660:	4b05      	ldr	r3, [pc, #20]	@ (8022678 <USBD_SetConfig+0x144>)
 8022662:	781a      	ldrb	r2, [r3, #0]
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	0011      	movs	r1, r2
 8022668:	0018      	movs	r0, r3
 802266a:	f7ff f883 	bl	8021774 <USBD_ClrClassConfig>
        break;
 802266e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022670:	46bd      	mov	sp, r7
 8022672:	b002      	add	sp, #8
 8022674:	bd80      	pop	{r7, pc}
 8022676:	46c0      	nop			@ (mov r8, r8)
 8022678:	2000238c 	.word	0x2000238c

0802267c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802267c:	b580      	push	{r7, lr}
 802267e:	b082      	sub	sp, #8
 8022680:	af00      	add	r7, sp, #0
 8022682:	6078      	str	r0, [r7, #4]
 8022684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022686:	683b      	ldr	r3, [r7, #0]
 8022688:	88db      	ldrh	r3, [r3, #6]
 802268a:	2b01      	cmp	r3, #1
 802268c:	d006      	beq.n	802269c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 802268e:	683a      	ldr	r2, [r7, #0]
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	0011      	movs	r1, r2
 8022694:	0018      	movs	r0, r3
 8022696:	f000 f8da 	bl	802284e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802269a:	e026      	b.n	80226ea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 802269c:	687a      	ldr	r2, [r7, #4]
 802269e:	23a7      	movs	r3, #167	@ 0xa7
 80226a0:	009b      	lsls	r3, r3, #2
 80226a2:	5cd3      	ldrb	r3, [r2, r3]
 80226a4:	2b02      	cmp	r3, #2
 80226a6:	dc02      	bgt.n	80226ae <USBD_GetConfig+0x32>
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	dc03      	bgt.n	80226b4 <USBD_GetConfig+0x38>
 80226ac:	e016      	b.n	80226dc <USBD_GetConfig+0x60>
 80226ae:	2b03      	cmp	r3, #3
 80226b0:	d00c      	beq.n	80226cc <USBD_GetConfig+0x50>
 80226b2:	e013      	b.n	80226dc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	2200      	movs	r2, #0
 80226b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	3308      	adds	r3, #8
 80226be:	0019      	movs	r1, r3
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	2201      	movs	r2, #1
 80226c4:	0018      	movs	r0, r3
 80226c6:	f000 f940 	bl	802294a <USBD_CtlSendData>
        break;
 80226ca:	e00e      	b.n	80226ea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	1d19      	adds	r1, r3, #4
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	2201      	movs	r2, #1
 80226d4:	0018      	movs	r0, r3
 80226d6:	f000 f938 	bl	802294a <USBD_CtlSendData>
        break;
 80226da:	e006      	b.n	80226ea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80226dc:	683a      	ldr	r2, [r7, #0]
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	0011      	movs	r1, r2
 80226e2:	0018      	movs	r0, r3
 80226e4:	f000 f8b3 	bl	802284e <USBD_CtlError>
        break;
 80226e8:	46c0      	nop			@ (mov r8, r8)
}
 80226ea:	46c0      	nop			@ (mov r8, r8)
 80226ec:	46bd      	mov	sp, r7
 80226ee:	b002      	add	sp, #8
 80226f0:	bd80      	pop	{r7, pc}

080226f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80226f2:	b580      	push	{r7, lr}
 80226f4:	b082      	sub	sp, #8
 80226f6:	af00      	add	r7, sp, #0
 80226f8:	6078      	str	r0, [r7, #4]
 80226fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80226fc:	687a      	ldr	r2, [r7, #4]
 80226fe:	23a7      	movs	r3, #167	@ 0xa7
 8022700:	009b      	lsls	r3, r3, #2
 8022702:	5cd3      	ldrb	r3, [r2, r3]
 8022704:	3b01      	subs	r3, #1
 8022706:	2b02      	cmp	r3, #2
 8022708:	d822      	bhi.n	8022750 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802270a:	683b      	ldr	r3, [r7, #0]
 802270c:	88db      	ldrh	r3, [r3, #6]
 802270e:	2b02      	cmp	r3, #2
 8022710:	d006      	beq.n	8022720 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022712:	683a      	ldr	r2, [r7, #0]
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	0011      	movs	r1, r2
 8022718:	0018      	movs	r0, r3
 802271a:	f000 f898 	bl	802284e <USBD_CtlError>
        break;
 802271e:	e01e      	b.n	802275e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	2201      	movs	r2, #1
 8022724:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022726:	687a      	ldr	r2, [r7, #4]
 8022728:	23a9      	movs	r3, #169	@ 0xa9
 802272a:	009b      	lsls	r3, r3, #2
 802272c:	58d3      	ldr	r3, [r2, r3]
 802272e:	2b00      	cmp	r3, #0
 8022730:	d005      	beq.n	802273e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	68db      	ldr	r3, [r3, #12]
 8022736:	2202      	movs	r2, #2
 8022738:	431a      	orrs	r2, r3
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	330c      	adds	r3, #12
 8022742:	0019      	movs	r1, r3
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	2202      	movs	r2, #2
 8022748:	0018      	movs	r0, r3
 802274a:	f000 f8fe 	bl	802294a <USBD_CtlSendData>
      break;
 802274e:	e006      	b.n	802275e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022750:	683a      	ldr	r2, [r7, #0]
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	0011      	movs	r1, r2
 8022756:	0018      	movs	r0, r3
 8022758:	f000 f879 	bl	802284e <USBD_CtlError>
      break;
 802275c:	46c0      	nop			@ (mov r8, r8)
  }
}
 802275e:	46c0      	nop			@ (mov r8, r8)
 8022760:	46bd      	mov	sp, r7
 8022762:	b002      	add	sp, #8
 8022764:	bd80      	pop	{r7, pc}

08022766 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022766:	b580      	push	{r7, lr}
 8022768:	b082      	sub	sp, #8
 802276a:	af00      	add	r7, sp, #0
 802276c:	6078      	str	r0, [r7, #4]
 802276e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022770:	683b      	ldr	r3, [r7, #0]
 8022772:	885b      	ldrh	r3, [r3, #2]
 8022774:	2b01      	cmp	r3, #1
 8022776:	d108      	bne.n	802278a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022778:	687a      	ldr	r2, [r7, #4]
 802277a:	23a9      	movs	r3, #169	@ 0xa9
 802277c:	009b      	lsls	r3, r3, #2
 802277e:	2101      	movs	r1, #1
 8022780:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	0018      	movs	r0, r3
 8022786:	f000 f94a 	bl	8022a1e <USBD_CtlSendStatus>
  }
}
 802278a:	46c0      	nop			@ (mov r8, r8)
 802278c:	46bd      	mov	sp, r7
 802278e:	b002      	add	sp, #8
 8022790:	bd80      	pop	{r7, pc}

08022792 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022792:	b580      	push	{r7, lr}
 8022794:	b082      	sub	sp, #8
 8022796:	af00      	add	r7, sp, #0
 8022798:	6078      	str	r0, [r7, #4]
 802279a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802279c:	687a      	ldr	r2, [r7, #4]
 802279e:	23a7      	movs	r3, #167	@ 0xa7
 80227a0:	009b      	lsls	r3, r3, #2
 80227a2:	5cd3      	ldrb	r3, [r2, r3]
 80227a4:	3b01      	subs	r3, #1
 80227a6:	2b02      	cmp	r3, #2
 80227a8:	d80d      	bhi.n	80227c6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80227aa:	683b      	ldr	r3, [r7, #0]
 80227ac:	885b      	ldrh	r3, [r3, #2]
 80227ae:	2b01      	cmp	r3, #1
 80227b0:	d110      	bne.n	80227d4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80227b2:	687a      	ldr	r2, [r7, #4]
 80227b4:	23a9      	movs	r3, #169	@ 0xa9
 80227b6:	009b      	lsls	r3, r3, #2
 80227b8:	2100      	movs	r1, #0
 80227ba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	0018      	movs	r0, r3
 80227c0:	f000 f92d 	bl	8022a1e <USBD_CtlSendStatus>
      }
      break;
 80227c4:	e006      	b.n	80227d4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80227c6:	683a      	ldr	r2, [r7, #0]
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	0011      	movs	r1, r2
 80227cc:	0018      	movs	r0, r3
 80227ce:	f000 f83e 	bl	802284e <USBD_CtlError>
      break;
 80227d2:	e000      	b.n	80227d6 <USBD_ClrFeature+0x44>
      break;
 80227d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80227d6:	46c0      	nop			@ (mov r8, r8)
 80227d8:	46bd      	mov	sp, r7
 80227da:	b002      	add	sp, #8
 80227dc:	bd80      	pop	{r7, pc}

080227de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80227de:	b580      	push	{r7, lr}
 80227e0:	b082      	sub	sp, #8
 80227e2:	af00      	add	r7, sp, #0
 80227e4:	6078      	str	r0, [r7, #4]
 80227e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80227e8:	683b      	ldr	r3, [r7, #0]
 80227ea:	781a      	ldrb	r2, [r3, #0]
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80227f0:	683b      	ldr	r3, [r7, #0]
 80227f2:	785a      	ldrb	r2, [r3, #1]
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80227f8:	683b      	ldr	r3, [r7, #0]
 80227fa:	3302      	adds	r3, #2
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	001a      	movs	r2, r3
 8022800:	683b      	ldr	r3, [r7, #0]
 8022802:	3303      	adds	r3, #3
 8022804:	781b      	ldrb	r3, [r3, #0]
 8022806:	021b      	lsls	r3, r3, #8
 8022808:	b29b      	uxth	r3, r3
 802280a:	18d3      	adds	r3, r2, r3
 802280c:	b29a      	uxth	r2, r3
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022812:	683b      	ldr	r3, [r7, #0]
 8022814:	3304      	adds	r3, #4
 8022816:	781b      	ldrb	r3, [r3, #0]
 8022818:	001a      	movs	r2, r3
 802281a:	683b      	ldr	r3, [r7, #0]
 802281c:	3305      	adds	r3, #5
 802281e:	781b      	ldrb	r3, [r3, #0]
 8022820:	021b      	lsls	r3, r3, #8
 8022822:	b29b      	uxth	r3, r3
 8022824:	18d3      	adds	r3, r2, r3
 8022826:	b29a      	uxth	r2, r3
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 802282c:	683b      	ldr	r3, [r7, #0]
 802282e:	3306      	adds	r3, #6
 8022830:	781b      	ldrb	r3, [r3, #0]
 8022832:	001a      	movs	r2, r3
 8022834:	683b      	ldr	r3, [r7, #0]
 8022836:	3307      	adds	r3, #7
 8022838:	781b      	ldrb	r3, [r3, #0]
 802283a:	021b      	lsls	r3, r3, #8
 802283c:	b29b      	uxth	r3, r3
 802283e:	18d3      	adds	r3, r2, r3
 8022840:	b29a      	uxth	r2, r3
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	80da      	strh	r2, [r3, #6]

}
 8022846:	46c0      	nop			@ (mov r8, r8)
 8022848:	46bd      	mov	sp, r7
 802284a:	b002      	add	sp, #8
 802284c:	bd80      	pop	{r7, pc}

0802284e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 802284e:	b580      	push	{r7, lr}
 8022850:	b082      	sub	sp, #8
 8022852:	af00      	add	r7, sp, #0
 8022854:	6078      	str	r0, [r7, #4]
 8022856:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	2180      	movs	r1, #128	@ 0x80
 802285c:	0018      	movs	r0, r3
 802285e:	f000 fd1e 	bl	802329e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	2100      	movs	r1, #0
 8022866:	0018      	movs	r0, r3
 8022868:	f000 fd19 	bl	802329e <USBD_LL_StallEP>
}
 802286c:	46c0      	nop			@ (mov r8, r8)
 802286e:	46bd      	mov	sp, r7
 8022870:	b002      	add	sp, #8
 8022872:	bd80      	pop	{r7, pc}

08022874 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022874:	b590      	push	{r4, r7, lr}
 8022876:	b087      	sub	sp, #28
 8022878:	af00      	add	r7, sp, #0
 802287a:	60f8      	str	r0, [r7, #12]
 802287c:	60b9      	str	r1, [r7, #8]
 802287e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022880:	2417      	movs	r4, #23
 8022882:	193b      	adds	r3, r7, r4
 8022884:	2200      	movs	r2, #0
 8022886:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	2b00      	cmp	r3, #0
 802288c:	d03c      	beq.n	8022908 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	0018      	movs	r0, r3
 8022892:	f000 f83d 	bl	8022910 <USBD_GetLen>
 8022896:	0003      	movs	r3, r0
 8022898:	3301      	adds	r3, #1
 802289a:	b29b      	uxth	r3, r3
 802289c:	18db      	adds	r3, r3, r3
 802289e:	b29a      	uxth	r2, r3
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80228a4:	193b      	adds	r3, r7, r4
 80228a6:	781b      	ldrb	r3, [r3, #0]
 80228a8:	193a      	adds	r2, r7, r4
 80228aa:	1c59      	adds	r1, r3, #1
 80228ac:	7011      	strb	r1, [r2, #0]
 80228ae:	001a      	movs	r2, r3
 80228b0:	68bb      	ldr	r3, [r7, #8]
 80228b2:	189b      	adds	r3, r3, r2
 80228b4:	687a      	ldr	r2, [r7, #4]
 80228b6:	7812      	ldrb	r2, [r2, #0]
 80228b8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80228ba:	193b      	adds	r3, r7, r4
 80228bc:	781b      	ldrb	r3, [r3, #0]
 80228be:	193a      	adds	r2, r7, r4
 80228c0:	1c59      	adds	r1, r3, #1
 80228c2:	7011      	strb	r1, [r2, #0]
 80228c4:	001a      	movs	r2, r3
 80228c6:	68bb      	ldr	r3, [r7, #8]
 80228c8:	189b      	adds	r3, r3, r2
 80228ca:	2203      	movs	r2, #3
 80228cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80228ce:	e017      	b.n	8022900 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	1c5a      	adds	r2, r3, #1
 80228d4:	60fa      	str	r2, [r7, #12]
 80228d6:	2417      	movs	r4, #23
 80228d8:	193a      	adds	r2, r7, r4
 80228da:	7812      	ldrb	r2, [r2, #0]
 80228dc:	1939      	adds	r1, r7, r4
 80228de:	1c50      	adds	r0, r2, #1
 80228e0:	7008      	strb	r0, [r1, #0]
 80228e2:	0011      	movs	r1, r2
 80228e4:	68ba      	ldr	r2, [r7, #8]
 80228e6:	1852      	adds	r2, r2, r1
 80228e8:	781b      	ldrb	r3, [r3, #0]
 80228ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80228ec:	193b      	adds	r3, r7, r4
 80228ee:	781b      	ldrb	r3, [r3, #0]
 80228f0:	193a      	adds	r2, r7, r4
 80228f2:	1c59      	adds	r1, r3, #1
 80228f4:	7011      	strb	r1, [r2, #0]
 80228f6:	001a      	movs	r2, r3
 80228f8:	68bb      	ldr	r3, [r7, #8]
 80228fa:	189b      	adds	r3, r3, r2
 80228fc:	2200      	movs	r2, #0
 80228fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	781b      	ldrb	r3, [r3, #0]
 8022904:	2b00      	cmp	r3, #0
 8022906:	d1e3      	bne.n	80228d0 <USBD_GetString+0x5c>
    }
  }
}
 8022908:	46c0      	nop			@ (mov r8, r8)
 802290a:	46bd      	mov	sp, r7
 802290c:	b007      	add	sp, #28
 802290e:	bd90      	pop	{r4, r7, pc}

08022910 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022910:	b580      	push	{r7, lr}
 8022912:	b084      	sub	sp, #16
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022918:	230f      	movs	r3, #15
 802291a:	18fb      	adds	r3, r7, r3
 802291c:	2200      	movs	r2, #0
 802291e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022920:	e008      	b.n	8022934 <USBD_GetLen+0x24>
  {
    len++;
 8022922:	210f      	movs	r1, #15
 8022924:	187b      	adds	r3, r7, r1
 8022926:	781a      	ldrb	r2, [r3, #0]
 8022928:	187b      	adds	r3, r7, r1
 802292a:	3201      	adds	r2, #1
 802292c:	701a      	strb	r2, [r3, #0]
    buf++;
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	3301      	adds	r3, #1
 8022932:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	781b      	ldrb	r3, [r3, #0]
 8022938:	2b00      	cmp	r3, #0
 802293a:	d1f2      	bne.n	8022922 <USBD_GetLen+0x12>
  }

  return len;
 802293c:	230f      	movs	r3, #15
 802293e:	18fb      	adds	r3, r7, r3
 8022940:	781b      	ldrb	r3, [r3, #0]
}
 8022942:	0018      	movs	r0, r3
 8022944:	46bd      	mov	sp, r7
 8022946:	b004      	add	sp, #16
 8022948:	bd80      	pop	{r7, pc}

0802294a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 802294a:	b580      	push	{r7, lr}
 802294c:	b084      	sub	sp, #16
 802294e:	af00      	add	r7, sp, #0
 8022950:	60f8      	str	r0, [r7, #12]
 8022952:	60b9      	str	r1, [r7, #8]
 8022954:	1dbb      	adds	r3, r7, #6
 8022956:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022958:	68fa      	ldr	r2, [r7, #12]
 802295a:	23a5      	movs	r3, #165	@ 0xa5
 802295c:	009b      	lsls	r3, r3, #2
 802295e:	2102      	movs	r1, #2
 8022960:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022962:	1dbb      	adds	r3, r7, #6
 8022964:	881a      	ldrh	r2, [r3, #0]
 8022966:	68fb      	ldr	r3, [r7, #12]
 8022968:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 802296a:	1dbb      	adds	r3, r7, #6
 802296c:	881a      	ldrh	r2, [r3, #0]
 802296e:	68fb      	ldr	r3, [r7, #12]
 8022970:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022972:	1dbb      	adds	r3, r7, #6
 8022974:	881b      	ldrh	r3, [r3, #0]
 8022976:	68ba      	ldr	r2, [r7, #8]
 8022978:	68f8      	ldr	r0, [r7, #12]
 802297a:	2100      	movs	r1, #0
 802297c:	f000 fd41 	bl	8023402 <USBD_LL_Transmit>

  return USBD_OK;
 8022980:	2300      	movs	r3, #0
}
 8022982:	0018      	movs	r0, r3
 8022984:	46bd      	mov	sp, r7
 8022986:	b004      	add	sp, #16
 8022988:	bd80      	pop	{r7, pc}

0802298a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 802298a:	b580      	push	{r7, lr}
 802298c:	b084      	sub	sp, #16
 802298e:	af00      	add	r7, sp, #0
 8022990:	60f8      	str	r0, [r7, #12]
 8022992:	60b9      	str	r1, [r7, #8]
 8022994:	1dbb      	adds	r3, r7, #6
 8022996:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022998:	1dbb      	adds	r3, r7, #6
 802299a:	881b      	ldrh	r3, [r3, #0]
 802299c:	68ba      	ldr	r2, [r7, #8]
 802299e:	68f8      	ldr	r0, [r7, #12]
 80229a0:	2100      	movs	r1, #0
 80229a2:	f000 fd2e 	bl	8023402 <USBD_LL_Transmit>

  return USBD_OK;
 80229a6:	2300      	movs	r3, #0
}
 80229a8:	0018      	movs	r0, r3
 80229aa:	46bd      	mov	sp, r7
 80229ac:	b004      	add	sp, #16
 80229ae:	bd80      	pop	{r7, pc}

080229b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80229b0:	b580      	push	{r7, lr}
 80229b2:	b084      	sub	sp, #16
 80229b4:	af00      	add	r7, sp, #0
 80229b6:	60f8      	str	r0, [r7, #12]
 80229b8:	60b9      	str	r1, [r7, #8]
 80229ba:	1dbb      	adds	r3, r7, #6
 80229bc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80229be:	68fa      	ldr	r2, [r7, #12]
 80229c0:	23a5      	movs	r3, #165	@ 0xa5
 80229c2:	009b      	lsls	r3, r3, #2
 80229c4:	2103      	movs	r1, #3
 80229c6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80229c8:	1dbb      	adds	r3, r7, #6
 80229ca:	8819      	ldrh	r1, [r3, #0]
 80229cc:	68fa      	ldr	r2, [r7, #12]
 80229ce:	23ae      	movs	r3, #174	@ 0xae
 80229d0:	005b      	lsls	r3, r3, #1
 80229d2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80229d4:	1dbb      	adds	r3, r7, #6
 80229d6:	8819      	ldrh	r1, [r3, #0]
 80229d8:	68fa      	ldr	r2, [r7, #12]
 80229da:	23b0      	movs	r3, #176	@ 0xb0
 80229dc:	005b      	lsls	r3, r3, #1
 80229de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80229e0:	1dbb      	adds	r3, r7, #6
 80229e2:	881b      	ldrh	r3, [r3, #0]
 80229e4:	68ba      	ldr	r2, [r7, #8]
 80229e6:	68f8      	ldr	r0, [r7, #12]
 80229e8:	2100      	movs	r1, #0
 80229ea:	f000 fd41 	bl	8023470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80229ee:	2300      	movs	r3, #0
}
 80229f0:	0018      	movs	r0, r3
 80229f2:	46bd      	mov	sp, r7
 80229f4:	b004      	add	sp, #16
 80229f6:	bd80      	pop	{r7, pc}

080229f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80229f8:	b580      	push	{r7, lr}
 80229fa:	b084      	sub	sp, #16
 80229fc:	af00      	add	r7, sp, #0
 80229fe:	60f8      	str	r0, [r7, #12]
 8022a00:	60b9      	str	r1, [r7, #8]
 8022a02:	1dbb      	adds	r3, r7, #6
 8022a04:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022a06:	1dbb      	adds	r3, r7, #6
 8022a08:	881b      	ldrh	r3, [r3, #0]
 8022a0a:	68ba      	ldr	r2, [r7, #8]
 8022a0c:	68f8      	ldr	r0, [r7, #12]
 8022a0e:	2100      	movs	r1, #0
 8022a10:	f000 fd2e 	bl	8023470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022a14:	2300      	movs	r3, #0
}
 8022a16:	0018      	movs	r0, r3
 8022a18:	46bd      	mov	sp, r7
 8022a1a:	b004      	add	sp, #16
 8022a1c:	bd80      	pop	{r7, pc}

08022a1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022a1e:	b580      	push	{r7, lr}
 8022a20:	b082      	sub	sp, #8
 8022a22:	af00      	add	r7, sp, #0
 8022a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022a26:	687a      	ldr	r2, [r7, #4]
 8022a28:	23a5      	movs	r3, #165	@ 0xa5
 8022a2a:	009b      	lsls	r3, r3, #2
 8022a2c:	2104      	movs	r1, #4
 8022a2e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022a30:	6878      	ldr	r0, [r7, #4]
 8022a32:	2300      	movs	r3, #0
 8022a34:	2200      	movs	r2, #0
 8022a36:	2100      	movs	r1, #0
 8022a38:	f000 fce3 	bl	8023402 <USBD_LL_Transmit>

  return USBD_OK;
 8022a3c:	2300      	movs	r3, #0
}
 8022a3e:	0018      	movs	r0, r3
 8022a40:	46bd      	mov	sp, r7
 8022a42:	b002      	add	sp, #8
 8022a44:	bd80      	pop	{r7, pc}

08022a46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022a46:	b580      	push	{r7, lr}
 8022a48:	b082      	sub	sp, #8
 8022a4a:	af00      	add	r7, sp, #0
 8022a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022a4e:	687a      	ldr	r2, [r7, #4]
 8022a50:	23a5      	movs	r3, #165	@ 0xa5
 8022a52:	009b      	lsls	r3, r3, #2
 8022a54:	2105      	movs	r1, #5
 8022a56:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022a58:	6878      	ldr	r0, [r7, #4]
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	2100      	movs	r1, #0
 8022a60:	f000 fd06 	bl	8023470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022a64:	2300      	movs	r3, #0
}
 8022a66:	0018      	movs	r0, r3
 8022a68:	46bd      	mov	sp, r7
 8022a6a:	b002      	add	sp, #8
 8022a6c:	bd80      	pop	{r7, pc}
	...

08022a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022a70:	b580      	push	{r7, lr}
 8022a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022a74:	4914      	ldr	r1, [pc, #80]	@ (8022ac8 <MX_USB_DEVICE_Init+0x58>)
 8022a76:	4b15      	ldr	r3, [pc, #84]	@ (8022acc <MX_USB_DEVICE_Init+0x5c>)
 8022a78:	2200      	movs	r2, #0
 8022a7a:	0018      	movs	r0, r3
 8022a7c:	f7fe fdec 	bl	8021658 <USBD_Init>
 8022a80:	1e03      	subs	r3, r0, #0
 8022a82:	d001      	beq.n	8022a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022a84:	f7ea fafc 	bl	800d080 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022a88:	4a11      	ldr	r2, [pc, #68]	@ (8022ad0 <MX_USB_DEVICE_Init+0x60>)
 8022a8a:	4b10      	ldr	r3, [pc, #64]	@ (8022acc <MX_USB_DEVICE_Init+0x5c>)
 8022a8c:	0011      	movs	r1, r2
 8022a8e:	0018      	movs	r0, r3
 8022a90:	f7fe fe13 	bl	80216ba <USBD_RegisterClass>
 8022a94:	1e03      	subs	r3, r0, #0
 8022a96:	d001      	beq.n	8022a9c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022a98:	f7ea faf2 	bl	800d080 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8022ad4 <MX_USB_DEVICE_Init+0x64>)
 8022a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8022acc <MX_USB_DEVICE_Init+0x5c>)
 8022aa0:	0011      	movs	r1, r2
 8022aa2:	0018      	movs	r0, r3
 8022aa4:	f7fe fd28 	bl	80214f8 <USBD_CDC_RegisterInterface>
 8022aa8:	1e03      	subs	r3, r0, #0
 8022aaa:	d001      	beq.n	8022ab0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022aac:	f7ea fae8 	bl	800d080 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022ab0:	4b06      	ldr	r3, [pc, #24]	@ (8022acc <MX_USB_DEVICE_Init+0x5c>)
 8022ab2:	0018      	movs	r0, r3
 8022ab4:	f7fe fe21 	bl	80216fa <USBD_Start>
 8022ab8:	1e03      	subs	r3, r0, #0
 8022aba:	d001      	beq.n	8022ac0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022abc:	f7ea fae0 	bl	800d080 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022ac0:	46c0      	nop			@ (mov r8, r8)
 8022ac2:	46bd      	mov	sp, r7
 8022ac4:	bd80      	pop	{r7, pc}
 8022ac6:	46c0      	nop			@ (mov r8, r8)
 8022ac8:	20000224 	.word	0x20000224
 8022acc:	20002390 	.word	0x20002390
 8022ad0:	20000110 	.word	0x20000110
 8022ad4:	20000214 	.word	0x20000214

08022ad8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022ad8:	b580      	push	{r7, lr}
 8022ada:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022adc:	4907      	ldr	r1, [pc, #28]	@ (8022afc <CDC_Init_FS+0x24>)
 8022ade:	4b08      	ldr	r3, [pc, #32]	@ (8022b00 <CDC_Init_FS+0x28>)
 8022ae0:	2200      	movs	r2, #0
 8022ae2:	0018      	movs	r0, r3
 8022ae4:	f7fe fd23 	bl	802152e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022ae8:	4a06      	ldr	r2, [pc, #24]	@ (8022b04 <CDC_Init_FS+0x2c>)
 8022aea:	4b05      	ldr	r3, [pc, #20]	@ (8022b00 <CDC_Init_FS+0x28>)
 8022aec:	0011      	movs	r1, r2
 8022aee:	0018      	movs	r0, r3
 8022af0:	f7fe fd39 	bl	8021566 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022af4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022af6:	0018      	movs	r0, r3
 8022af8:	46bd      	mov	sp, r7
 8022afa:	bd80      	pop	{r7, pc}
 8022afc:	20002b14 	.word	0x20002b14
 8022b00:	20002390 	.word	0x20002390
 8022b04:	20002714 	.word	0x20002714

08022b08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022b0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8022b0e:	0018      	movs	r0, r3
 8022b10:	46bd      	mov	sp, r7
 8022b12:	bd80      	pop	{r7, pc}

08022b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022b14:	b580      	push	{r7, lr}
 8022b16:	b082      	sub	sp, #8
 8022b18:	af00      	add	r7, sp, #0
 8022b1a:	6039      	str	r1, [r7, #0]
 8022b1c:	0011      	movs	r1, r2
 8022b1e:	1dfb      	adds	r3, r7, #7
 8022b20:	1c02      	adds	r2, r0, #0
 8022b22:	701a      	strb	r2, [r3, #0]
 8022b24:	1d3b      	adds	r3, r7, #4
 8022b26:	1c0a      	adds	r2, r1, #0
 8022b28:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022b2a:	1dfb      	adds	r3, r7, #7
 8022b2c:	781b      	ldrb	r3, [r3, #0]
 8022b2e:	2b23      	cmp	r3, #35	@ 0x23
 8022b30:	d804      	bhi.n	8022b3c <CDC_Control_FS+0x28>
 8022b32:	009a      	lsls	r2, r3, #2
 8022b34:	4b04      	ldr	r3, [pc, #16]	@ (8022b48 <CDC_Control_FS+0x34>)
 8022b36:	18d3      	adds	r3, r2, r3
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022b3c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022b3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022b40:	0018      	movs	r0, r3
 8022b42:	46bd      	mov	sp, r7
 8022b44:	b002      	add	sp, #8
 8022b46:	bd80      	pop	{r7, pc}
 8022b48:	0802e2a8 	.word	0x0802e2a8

08022b4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022b4c:	b580      	push	{r7, lr}
 8022b4e:	b082      	sub	sp, #8
 8022b50:	af00      	add	r7, sp, #0
 8022b52:	6078      	str	r0, [r7, #4]
 8022b54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8022b56:	4b12      	ldr	r3, [pc, #72]	@ (8022ba0 <CDC_Receive_FS+0x54>)
 8022b58:	781b      	ldrb	r3, [r3, #0]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d013      	beq.n	8022b86 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8022b5e:	683b      	ldr	r3, [r7, #0]
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	b29a      	uxth	r2, r3
 8022b64:	2301      	movs	r3, #1
 8022b66:	425b      	negs	r3, r3
 8022b68:	6879      	ldr	r1, [r7, #4]
 8022b6a:	480e      	ldr	r0, [pc, #56]	@ (8022ba4 <CDC_Receive_FS+0x58>)
 8022b6c:	f7fa fa44 	bl	801cff8 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022b70:	687a      	ldr	r2, [r7, #4]
 8022b72:	4b0d      	ldr	r3, [pc, #52]	@ (8022ba8 <CDC_Receive_FS+0x5c>)
 8022b74:	0011      	movs	r1, r2
 8022b76:	0018      	movs	r0, r3
 8022b78:	f7fe fcf5 	bl	8021566 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8022ba8 <CDC_Receive_FS+0x5c>)
 8022b7e:	0018      	movs	r0, r3
 8022b80:	f7fe fd3c 	bl	80215fc <USBD_CDC_ReceivePacket>
 8022b84:	e006      	b.n	8022b94 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8022b86:	683b      	ldr	r3, [r7, #0]
 8022b88:	681a      	ldr	r2, [r3, #0]
 8022b8a:	4b08      	ldr	r3, [pc, #32]	@ (8022bac <CDC_Receive_FS+0x60>)
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	18d2      	adds	r2, r2, r3
 8022b90:	4b06      	ldr	r3, [pc, #24]	@ (8022bac <CDC_Receive_FS+0x60>)
 8022b92:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022b94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022b96:	0018      	movs	r0, r3
 8022b98:	46bd      	mov	sp, r7
 8022b9a:	b002      	add	sp, #8
 8022b9c:	bd80      	pop	{r7, pc}
 8022b9e:	46c0      	nop			@ (mov r8, r8)
 8022ba0:	20002654 	.word	0x20002654
 8022ba4:	20002658 	.word	0x20002658
 8022ba8:	20002390 	.word	0x20002390
 8022bac:	20002710 	.word	0x20002710

08022bb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022bb0:	b5b0      	push	{r4, r5, r7, lr}
 8022bb2:	b084      	sub	sp, #16
 8022bb4:	af00      	add	r7, sp, #0
 8022bb6:	6078      	str	r0, [r7, #4]
 8022bb8:	000a      	movs	r2, r1
 8022bba:	1cbb      	adds	r3, r7, #2
 8022bbc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8022bbe:	230f      	movs	r3, #15
 8022bc0:	18fb      	adds	r3, r7, r3
 8022bc2:	2200      	movs	r2, #0
 8022bc4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022bc6:	4a11      	ldr	r2, [pc, #68]	@ (8022c0c <CDC_Transmit_FS+0x5c>)
 8022bc8:	23ae      	movs	r3, #174	@ 0xae
 8022bca:	009b      	lsls	r3, r3, #2
 8022bcc:	58d3      	ldr	r3, [r2, r3]
 8022bce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022bd0:	68ba      	ldr	r2, [r7, #8]
 8022bd2:	2385      	movs	r3, #133	@ 0x85
 8022bd4:	009b      	lsls	r3, r3, #2
 8022bd6:	58d3      	ldr	r3, [r2, r3]
 8022bd8:	2b00      	cmp	r3, #0
 8022bda:	d001      	beq.n	8022be0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8022bdc:	2301      	movs	r3, #1
 8022bde:	e010      	b.n	8022c02 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8022be0:	1cbb      	adds	r3, r7, #2
 8022be2:	881a      	ldrh	r2, [r3, #0]
 8022be4:	6879      	ldr	r1, [r7, #4]
 8022be6:	4b09      	ldr	r3, [pc, #36]	@ (8022c0c <CDC_Transmit_FS+0x5c>)
 8022be8:	0018      	movs	r0, r3
 8022bea:	f7fe fca0 	bl	802152e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8022bee:	250f      	movs	r5, #15
 8022bf0:	197c      	adds	r4, r7, r5
 8022bf2:	4b06      	ldr	r3, [pc, #24]	@ (8022c0c <CDC_Transmit_FS+0x5c>)
 8022bf4:	0018      	movs	r0, r3
 8022bf6:	f7fe fcca 	bl	802158e <USBD_CDC_TransmitPacket>
 8022bfa:	0003      	movs	r3, r0
 8022bfc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8022bfe:	197b      	adds	r3, r7, r5
 8022c00:	781b      	ldrb	r3, [r3, #0]
}
 8022c02:	0018      	movs	r0, r3
 8022c04:	46bd      	mov	sp, r7
 8022c06:	b004      	add	sp, #16
 8022c08:	bdb0      	pop	{r4, r5, r7, pc}
 8022c0a:	46c0      	nop			@ (mov r8, r8)
 8022c0c:	20002390 	.word	0x20002390

08022c10 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8022c10:	b580      	push	{r7, lr}
 8022c12:	af00      	add	r7, sp, #0
  ESPProg = true;
 8022c14:	4b02      	ldr	r3, [pc, #8]	@ (8022c20 <EnableESPProg+0x10>)
 8022c16:	2201      	movs	r2, #1
 8022c18:	701a      	strb	r2, [r3, #0]
}
 8022c1a:	46c0      	nop			@ (mov r8, r8)
 8022c1c:	46bd      	mov	sp, r7
 8022c1e:	bd80      	pop	{r7, pc}
 8022c20:	20002654 	.word	0x20002654

08022c24 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8022c24:	b580      	push	{r7, lr}
 8022c26:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8022c28:	4b01      	ldr	r3, [pc, #4]	@ (8022c30 <GetUsbRxPointer+0xc>)
}
 8022c2a:	0018      	movs	r0, r3
 8022c2c:	46bd      	mov	sp, r7
 8022c2e:	bd80      	pop	{r7, pc}
 8022c30:	20002714 	.word	0x20002714

08022c34 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8022c34:	b580      	push	{r7, lr}
 8022c36:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8022c38:	4b07      	ldr	r3, [pc, #28]	@ (8022c58 <ResetUsbRxDataSize+0x24>)
 8022c3a:	2200      	movs	r2, #0
 8022c3c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8022c3e:	4a07      	ldr	r2, [pc, #28]	@ (8022c5c <ResetUsbRxDataSize+0x28>)
 8022c40:	4b07      	ldr	r3, [pc, #28]	@ (8022c60 <ResetUsbRxDataSize+0x2c>)
 8022c42:	0011      	movs	r1, r2
 8022c44:	0018      	movs	r0, r3
 8022c46:	f7fe fc8e 	bl	8021566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022c4a:	4b05      	ldr	r3, [pc, #20]	@ (8022c60 <ResetUsbRxDataSize+0x2c>)
 8022c4c:	0018      	movs	r0, r3
 8022c4e:	f7fe fcd5 	bl	80215fc <USBD_CDC_ReceivePacket>
}
 8022c52:	46c0      	nop			@ (mov r8, r8)
 8022c54:	46bd      	mov	sp, r7
 8022c56:	bd80      	pop	{r7, pc}
 8022c58:	20002710 	.word	0x20002710
 8022c5c:	20002714 	.word	0x20002714
 8022c60:	20002390 	.word	0x20002390

08022c64 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8022c64:	b580      	push	{r7, lr}
 8022c66:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8022c68:	4b02      	ldr	r3, [pc, #8]	@ (8022c74 <GetUsbRxDataSize+0x10>)
 8022c6a:	681b      	ldr	r3, [r3, #0]
}
 8022c6c:	0018      	movs	r0, r3
 8022c6e:	46bd      	mov	sp, r7
 8022c70:	bd80      	pop	{r7, pc}
 8022c72:	46c0      	nop			@ (mov r8, r8)
 8022c74:	20002710 	.word	0x20002710

08022c78 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b082      	sub	sp, #8
 8022c7c:	af00      	add	r7, sp, #0
 8022c7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8022c80:	687a      	ldr	r2, [r7, #4]
 8022c82:	4b07      	ldr	r3, [pc, #28]	@ (8022ca0 <GetUsbRxNextChunk+0x28>)
 8022c84:	18d2      	adds	r2, r2, r3
 8022c86:	4b07      	ldr	r3, [pc, #28]	@ (8022ca4 <GetUsbRxNextChunk+0x2c>)
 8022c88:	0011      	movs	r1, r2
 8022c8a:	0018      	movs	r0, r3
 8022c8c:	f7fe fc6b 	bl	8021566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022c90:	4b04      	ldr	r3, [pc, #16]	@ (8022ca4 <GetUsbRxNextChunk+0x2c>)
 8022c92:	0018      	movs	r0, r3
 8022c94:	f7fe fcb2 	bl	80215fc <USBD_CDC_ReceivePacket>
}
 8022c98:	46c0      	nop			@ (mov r8, r8)
 8022c9a:	46bd      	mov	sp, r7
 8022c9c:	b002      	add	sp, #8
 8022c9e:	bd80      	pop	{r7, pc}
 8022ca0:	20002714 	.word	0x20002714
 8022ca4:	20002390 	.word	0x20002390

08022ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b082      	sub	sp, #8
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	0002      	movs	r2, r0
 8022cb0:	6039      	str	r1, [r7, #0]
 8022cb2:	1dfb      	adds	r3, r7, #7
 8022cb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022cb6:	683b      	ldr	r3, [r7, #0]
 8022cb8:	2212      	movs	r2, #18
 8022cba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022cbc:	4b02      	ldr	r3, [pc, #8]	@ (8022cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022cbe:	0018      	movs	r0, r3
 8022cc0:	46bd      	mov	sp, r7
 8022cc2:	b002      	add	sp, #8
 8022cc4:	bd80      	pop	{r7, pc}
 8022cc6:	46c0      	nop			@ (mov r8, r8)
 8022cc8:	20000240 	.word	0x20000240

08022ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b082      	sub	sp, #8
 8022cd0:	af00      	add	r7, sp, #0
 8022cd2:	0002      	movs	r2, r0
 8022cd4:	6039      	str	r1, [r7, #0]
 8022cd6:	1dfb      	adds	r3, r7, #7
 8022cd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022cda:	683b      	ldr	r3, [r7, #0]
 8022cdc:	2204      	movs	r2, #4
 8022cde:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022ce0:	4b02      	ldr	r3, [pc, #8]	@ (8022cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022ce2:	0018      	movs	r0, r3
 8022ce4:	46bd      	mov	sp, r7
 8022ce6:	b002      	add	sp, #8
 8022ce8:	bd80      	pop	{r7, pc}
 8022cea:	46c0      	nop			@ (mov r8, r8)
 8022cec:	20000254 	.word	0x20000254

08022cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022cf0:	b580      	push	{r7, lr}
 8022cf2:	b082      	sub	sp, #8
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	0002      	movs	r2, r0
 8022cf8:	6039      	str	r1, [r7, #0]
 8022cfa:	1dfb      	adds	r3, r7, #7
 8022cfc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8022cfe:	1dfb      	adds	r3, r7, #7
 8022d00:	781b      	ldrb	r3, [r3, #0]
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d106      	bne.n	8022d14 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022d06:	683a      	ldr	r2, [r7, #0]
 8022d08:	4908      	ldr	r1, [pc, #32]	@ (8022d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8022d0a:	4b09      	ldr	r3, [pc, #36]	@ (8022d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8022d0c:	0018      	movs	r0, r3
 8022d0e:	f7ff fdb1 	bl	8022874 <USBD_GetString>
 8022d12:	e005      	b.n	8022d20 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022d14:	683a      	ldr	r2, [r7, #0]
 8022d16:	4905      	ldr	r1, [pc, #20]	@ (8022d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8022d18:	4b05      	ldr	r3, [pc, #20]	@ (8022d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8022d1a:	0018      	movs	r0, r3
 8022d1c:	f7ff fdaa 	bl	8022874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022d20:	4b02      	ldr	r3, [pc, #8]	@ (8022d2c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8022d22:	0018      	movs	r0, r3
 8022d24:	46bd      	mov	sp, r7
 8022d26:	b002      	add	sp, #8
 8022d28:	bd80      	pop	{r7, pc}
 8022d2a:	46c0      	nop			@ (mov r8, r8)
 8022d2c:	20002f14 	.word	0x20002f14
 8022d30:	0802dc40 	.word	0x0802dc40

08022d34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022d34:	b580      	push	{r7, lr}
 8022d36:	b082      	sub	sp, #8
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	0002      	movs	r2, r0
 8022d3c:	6039      	str	r1, [r7, #0]
 8022d3e:	1dfb      	adds	r3, r7, #7
 8022d40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022d42:	683a      	ldr	r2, [r7, #0]
 8022d44:	4904      	ldr	r1, [pc, #16]	@ (8022d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022d46:	4b05      	ldr	r3, [pc, #20]	@ (8022d5c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8022d48:	0018      	movs	r0, r3
 8022d4a:	f7ff fd93 	bl	8022874 <USBD_GetString>
  return USBD_StrDesc;
 8022d4e:	4b02      	ldr	r3, [pc, #8]	@ (8022d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8022d50:	0018      	movs	r0, r3
 8022d52:	46bd      	mov	sp, r7
 8022d54:	b002      	add	sp, #8
 8022d56:	bd80      	pop	{r7, pc}
 8022d58:	20002f14 	.word	0x20002f14
 8022d5c:	0802dc58 	.word	0x0802dc58

08022d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022d60:	b580      	push	{r7, lr}
 8022d62:	b082      	sub	sp, #8
 8022d64:	af00      	add	r7, sp, #0
 8022d66:	0002      	movs	r2, r0
 8022d68:	6039      	str	r1, [r7, #0]
 8022d6a:	1dfb      	adds	r3, r7, #7
 8022d6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022d6e:	683b      	ldr	r3, [r7, #0]
 8022d70:	221a      	movs	r2, #26
 8022d72:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022d74:	f000 f84c 	bl	8022e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022d78:	4b02      	ldr	r3, [pc, #8]	@ (8022d84 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8022d7a:	0018      	movs	r0, r3
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	b002      	add	sp, #8
 8022d80:	bd80      	pop	{r7, pc}
 8022d82:	46c0      	nop			@ (mov r8, r8)
 8022d84:	20000258 	.word	0x20000258

08022d88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022d88:	b580      	push	{r7, lr}
 8022d8a:	b082      	sub	sp, #8
 8022d8c:	af00      	add	r7, sp, #0
 8022d8e:	0002      	movs	r2, r0
 8022d90:	6039      	str	r1, [r7, #0]
 8022d92:	1dfb      	adds	r3, r7, #7
 8022d94:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8022d96:	1dfb      	adds	r3, r7, #7
 8022d98:	781b      	ldrb	r3, [r3, #0]
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d106      	bne.n	8022dac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022d9e:	683a      	ldr	r2, [r7, #0]
 8022da0:	4908      	ldr	r1, [pc, #32]	@ (8022dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022da2:	4b09      	ldr	r3, [pc, #36]	@ (8022dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022da4:	0018      	movs	r0, r3
 8022da6:	f7ff fd65 	bl	8022874 <USBD_GetString>
 8022daa:	e005      	b.n	8022db8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022dac:	683a      	ldr	r2, [r7, #0]
 8022dae:	4905      	ldr	r1, [pc, #20]	@ (8022dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022db0:	4b05      	ldr	r3, [pc, #20]	@ (8022dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022db2:	0018      	movs	r0, r3
 8022db4:	f7ff fd5e 	bl	8022874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022db8:	4b02      	ldr	r3, [pc, #8]	@ (8022dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8022dba:	0018      	movs	r0, r3
 8022dbc:	46bd      	mov	sp, r7
 8022dbe:	b002      	add	sp, #8
 8022dc0:	bd80      	pop	{r7, pc}
 8022dc2:	46c0      	nop			@ (mov r8, r8)
 8022dc4:	20002f14 	.word	0x20002f14
 8022dc8:	0802dc6c 	.word	0x0802dc6c

08022dcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022dcc:	b580      	push	{r7, lr}
 8022dce:	b082      	sub	sp, #8
 8022dd0:	af00      	add	r7, sp, #0
 8022dd2:	0002      	movs	r2, r0
 8022dd4:	6039      	str	r1, [r7, #0]
 8022dd6:	1dfb      	adds	r3, r7, #7
 8022dd8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8022dda:	1dfb      	adds	r3, r7, #7
 8022ddc:	781b      	ldrb	r3, [r3, #0]
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d106      	bne.n	8022df0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022de2:	683a      	ldr	r2, [r7, #0]
 8022de4:	4908      	ldr	r1, [pc, #32]	@ (8022e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022de6:	4b09      	ldr	r3, [pc, #36]	@ (8022e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022de8:	0018      	movs	r0, r3
 8022dea:	f7ff fd43 	bl	8022874 <USBD_GetString>
 8022dee:	e005      	b.n	8022dfc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022df0:	683a      	ldr	r2, [r7, #0]
 8022df2:	4905      	ldr	r1, [pc, #20]	@ (8022e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022df4:	4b05      	ldr	r3, [pc, #20]	@ (8022e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022df6:	0018      	movs	r0, r3
 8022df8:	f7ff fd3c 	bl	8022874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022dfc:	4b02      	ldr	r3, [pc, #8]	@ (8022e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8022dfe:	0018      	movs	r0, r3
 8022e00:	46bd      	mov	sp, r7
 8022e02:	b002      	add	sp, #8
 8022e04:	bd80      	pop	{r7, pc}
 8022e06:	46c0      	nop			@ (mov r8, r8)
 8022e08:	20002f14 	.word	0x20002f14
 8022e0c:	0802dc78 	.word	0x0802dc78

08022e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022e10:	b580      	push	{r7, lr}
 8022e12:	b084      	sub	sp, #16
 8022e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022e16:	4b10      	ldr	r3, [pc, #64]	@ (8022e58 <Get_SerialNum+0x48>)
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8022e5c <Get_SerialNum+0x4c>)
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8022e22:	4b0f      	ldr	r3, [pc, #60]	@ (8022e60 <Get_SerialNum+0x50>)
 8022e24:	681b      	ldr	r3, [r3, #0]
 8022e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022e28:	68fa      	ldr	r2, [r7, #12]
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	18d3      	adds	r3, r2, r3
 8022e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	d00b      	beq.n	8022e4e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8022e36:	490b      	ldr	r1, [pc, #44]	@ (8022e64 <Get_SerialNum+0x54>)
 8022e38:	68fb      	ldr	r3, [r7, #12]
 8022e3a:	2208      	movs	r2, #8
 8022e3c:	0018      	movs	r0, r3
 8022e3e:	f000 f815 	bl	8022e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022e42:	4909      	ldr	r1, [pc, #36]	@ (8022e68 <Get_SerialNum+0x58>)
 8022e44:	68bb      	ldr	r3, [r7, #8]
 8022e46:	2204      	movs	r2, #4
 8022e48:	0018      	movs	r0, r3
 8022e4a:	f000 f80f 	bl	8022e6c <IntToUnicode>
  }
}
 8022e4e:	46c0      	nop			@ (mov r8, r8)
 8022e50:	46bd      	mov	sp, r7
 8022e52:	b004      	add	sp, #16
 8022e54:	bd80      	pop	{r7, pc}
 8022e56:	46c0      	nop			@ (mov r8, r8)
 8022e58:	1ff80050 	.word	0x1ff80050
 8022e5c:	1ff80054 	.word	0x1ff80054
 8022e60:	1ff80058 	.word	0x1ff80058
 8022e64:	2000025a 	.word	0x2000025a
 8022e68:	2000026a 	.word	0x2000026a

08022e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b086      	sub	sp, #24
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	60f8      	str	r0, [r7, #12]
 8022e74:	60b9      	str	r1, [r7, #8]
 8022e76:	1dfb      	adds	r3, r7, #7
 8022e78:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8022e7a:	2117      	movs	r1, #23
 8022e7c:	187b      	adds	r3, r7, r1
 8022e7e:	2200      	movs	r2, #0
 8022e80:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8022e82:	187b      	adds	r3, r7, r1
 8022e84:	2200      	movs	r2, #0
 8022e86:	701a      	strb	r2, [r3, #0]
 8022e88:	e02f      	b.n	8022eea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8022e8a:	68fb      	ldr	r3, [r7, #12]
 8022e8c:	0f1b      	lsrs	r3, r3, #28
 8022e8e:	2b09      	cmp	r3, #9
 8022e90:	d80d      	bhi.n	8022eae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022e92:	68fb      	ldr	r3, [r7, #12]
 8022e94:	0f1b      	lsrs	r3, r3, #28
 8022e96:	b2da      	uxtb	r2, r3
 8022e98:	2317      	movs	r3, #23
 8022e9a:	18fb      	adds	r3, r7, r3
 8022e9c:	781b      	ldrb	r3, [r3, #0]
 8022e9e:	005b      	lsls	r3, r3, #1
 8022ea0:	0019      	movs	r1, r3
 8022ea2:	68bb      	ldr	r3, [r7, #8]
 8022ea4:	185b      	adds	r3, r3, r1
 8022ea6:	3230      	adds	r2, #48	@ 0x30
 8022ea8:	b2d2      	uxtb	r2, r2
 8022eaa:	701a      	strb	r2, [r3, #0]
 8022eac:	e00c      	b.n	8022ec8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022eae:	68fb      	ldr	r3, [r7, #12]
 8022eb0:	0f1b      	lsrs	r3, r3, #28
 8022eb2:	b2da      	uxtb	r2, r3
 8022eb4:	2317      	movs	r3, #23
 8022eb6:	18fb      	adds	r3, r7, r3
 8022eb8:	781b      	ldrb	r3, [r3, #0]
 8022eba:	005b      	lsls	r3, r3, #1
 8022ebc:	0019      	movs	r1, r3
 8022ebe:	68bb      	ldr	r3, [r7, #8]
 8022ec0:	185b      	adds	r3, r3, r1
 8022ec2:	3237      	adds	r2, #55	@ 0x37
 8022ec4:	b2d2      	uxtb	r2, r2
 8022ec6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	011b      	lsls	r3, r3, #4
 8022ecc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022ece:	2117      	movs	r1, #23
 8022ed0:	187b      	adds	r3, r7, r1
 8022ed2:	781b      	ldrb	r3, [r3, #0]
 8022ed4:	005b      	lsls	r3, r3, #1
 8022ed6:	3301      	adds	r3, #1
 8022ed8:	68ba      	ldr	r2, [r7, #8]
 8022eda:	18d3      	adds	r3, r2, r3
 8022edc:	2200      	movs	r2, #0
 8022ede:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022ee0:	187b      	adds	r3, r7, r1
 8022ee2:	781a      	ldrb	r2, [r3, #0]
 8022ee4:	187b      	adds	r3, r7, r1
 8022ee6:	3201      	adds	r2, #1
 8022ee8:	701a      	strb	r2, [r3, #0]
 8022eea:	2317      	movs	r3, #23
 8022eec:	18fa      	adds	r2, r7, r3
 8022eee:	1dfb      	adds	r3, r7, #7
 8022ef0:	7812      	ldrb	r2, [r2, #0]
 8022ef2:	781b      	ldrb	r3, [r3, #0]
 8022ef4:	429a      	cmp	r2, r3
 8022ef6:	d3c8      	bcc.n	8022e8a <IntToUnicode+0x1e>
  }
}
 8022ef8:	46c0      	nop			@ (mov r8, r8)
 8022efa:	46c0      	nop			@ (mov r8, r8)
 8022efc:	46bd      	mov	sp, r7
 8022efe:	b006      	add	sp, #24
 8022f00:	bd80      	pop	{r7, pc}
	...

08022f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022f04:	b580      	push	{r7, lr}
 8022f06:	b082      	sub	sp, #8
 8022f08:	af00      	add	r7, sp, #0
 8022f0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	681b      	ldr	r3, [r3, #0]
 8022f10:	4a0a      	ldr	r2, [pc, #40]	@ (8022f3c <HAL_PCD_MspInit+0x38>)
 8022f12:	4293      	cmp	r3, r2
 8022f14:	d10e      	bne.n	8022f34 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8022f16:	4b0a      	ldr	r3, [pc, #40]	@ (8022f40 <HAL_PCD_MspInit+0x3c>)
 8022f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022f1a:	4b09      	ldr	r3, [pc, #36]	@ (8022f40 <HAL_PCD_MspInit+0x3c>)
 8022f1c:	2180      	movs	r1, #128	@ 0x80
 8022f1e:	0409      	lsls	r1, r1, #16
 8022f20:	430a      	orrs	r2, r1
 8022f22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8022f24:	2200      	movs	r2, #0
 8022f26:	2100      	movs	r1, #0
 8022f28:	201f      	movs	r0, #31
 8022f2a:	f7f1 ffb3 	bl	8014e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8022f2e:	201f      	movs	r0, #31
 8022f30:	f7f1 ffc5 	bl	8014ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8022f34:	46c0      	nop			@ (mov r8, r8)
 8022f36:	46bd      	mov	sp, r7
 8022f38:	b002      	add	sp, #8
 8022f3a:	bd80      	pop	{r7, pc}
 8022f3c:	40005c00 	.word	0x40005c00
 8022f40:	40021000 	.word	0x40021000

08022f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022f44:	b580      	push	{r7, lr}
 8022f46:	b082      	sub	sp, #8
 8022f48:	af00      	add	r7, sp, #0
 8022f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022f4c:	687a      	ldr	r2, [r7, #4]
 8022f4e:	23bc      	movs	r3, #188	@ 0xbc
 8022f50:	009b      	lsls	r3, r3, #2
 8022f52:	58d2      	ldr	r2, [r2, r3]
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	21ac      	movs	r1, #172	@ 0xac
 8022f58:	0089      	lsls	r1, r1, #2
 8022f5a:	468c      	mov	ip, r1
 8022f5c:	4463      	add	r3, ip
 8022f5e:	0019      	movs	r1, r3
 8022f60:	0010      	movs	r0, r2
 8022f62:	f7fe fc1d 	bl	80217a0 <USBD_LL_SetupStage>
}
 8022f66:	46c0      	nop			@ (mov r8, r8)
 8022f68:	46bd      	mov	sp, r7
 8022f6a:	b002      	add	sp, #8
 8022f6c:	bd80      	pop	{r7, pc}

08022f6e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022f6e:	b590      	push	{r4, r7, lr}
 8022f70:	b083      	sub	sp, #12
 8022f72:	af00      	add	r7, sp, #0
 8022f74:	6078      	str	r0, [r7, #4]
 8022f76:	000a      	movs	r2, r1
 8022f78:	1cfb      	adds	r3, r7, #3
 8022f7a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022f7c:	687a      	ldr	r2, [r7, #4]
 8022f7e:	23bc      	movs	r3, #188	@ 0xbc
 8022f80:	009b      	lsls	r3, r3, #2
 8022f82:	58d4      	ldr	r4, [r2, r3]
 8022f84:	1cfb      	adds	r3, r7, #3
 8022f86:	781a      	ldrb	r2, [r3, #0]
 8022f88:	6878      	ldr	r0, [r7, #4]
 8022f8a:	23be      	movs	r3, #190	@ 0xbe
 8022f8c:	0059      	lsls	r1, r3, #1
 8022f8e:	0013      	movs	r3, r2
 8022f90:	009b      	lsls	r3, r3, #2
 8022f92:	189b      	adds	r3, r3, r2
 8022f94:	00db      	lsls	r3, r3, #3
 8022f96:	18c3      	adds	r3, r0, r3
 8022f98:	185b      	adds	r3, r3, r1
 8022f9a:	681a      	ldr	r2, [r3, #0]
 8022f9c:	1cfb      	adds	r3, r7, #3
 8022f9e:	781b      	ldrb	r3, [r3, #0]
 8022fa0:	0019      	movs	r1, r3
 8022fa2:	0020      	movs	r0, r4
 8022fa4:	f7fe fc5a 	bl	802185c <USBD_LL_DataOutStage>
}
 8022fa8:	46c0      	nop			@ (mov r8, r8)
 8022faa:	46bd      	mov	sp, r7
 8022fac:	b003      	add	sp, #12
 8022fae:	bd90      	pop	{r4, r7, pc}

08022fb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022fb0:	b580      	push	{r7, lr}
 8022fb2:	b082      	sub	sp, #8
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	6078      	str	r0, [r7, #4]
 8022fb8:	000a      	movs	r2, r1
 8022fba:	1cfb      	adds	r3, r7, #3
 8022fbc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022fbe:	687a      	ldr	r2, [r7, #4]
 8022fc0:	23bc      	movs	r3, #188	@ 0xbc
 8022fc2:	009b      	lsls	r3, r3, #2
 8022fc4:	58d0      	ldr	r0, [r2, r3]
 8022fc6:	1cfb      	adds	r3, r7, #3
 8022fc8:	781a      	ldrb	r2, [r3, #0]
 8022fca:	6879      	ldr	r1, [r7, #4]
 8022fcc:	0013      	movs	r3, r2
 8022fce:	009b      	lsls	r3, r3, #2
 8022fd0:	189b      	adds	r3, r3, r2
 8022fd2:	00db      	lsls	r3, r3, #3
 8022fd4:	18cb      	adds	r3, r1, r3
 8022fd6:	333c      	adds	r3, #60	@ 0x3c
 8022fd8:	681a      	ldr	r2, [r3, #0]
 8022fda:	1cfb      	adds	r3, r7, #3
 8022fdc:	781b      	ldrb	r3, [r3, #0]
 8022fde:	0019      	movs	r1, r3
 8022fe0:	f7fe fcbe 	bl	8021960 <USBD_LL_DataInStage>
}
 8022fe4:	46c0      	nop			@ (mov r8, r8)
 8022fe6:	46bd      	mov	sp, r7
 8022fe8:	b002      	add	sp, #8
 8022fea:	bd80      	pop	{r7, pc}

08022fec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022fec:	b580      	push	{r7, lr}
 8022fee:	b082      	sub	sp, #8
 8022ff0:	af00      	add	r7, sp, #0
 8022ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022ff4:	687a      	ldr	r2, [r7, #4]
 8022ff6:	23bc      	movs	r3, #188	@ 0xbc
 8022ff8:	009b      	lsls	r3, r3, #2
 8022ffa:	58d3      	ldr	r3, [r2, r3]
 8022ffc:	0018      	movs	r0, r3
 8022ffe:	f7fe fdf5 	bl	8021bec <USBD_LL_SOF>
}
 8023002:	46c0      	nop			@ (mov r8, r8)
 8023004:	46bd      	mov	sp, r7
 8023006:	b002      	add	sp, #8
 8023008:	bd80      	pop	{r7, pc}

0802300a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802300a:	b580      	push	{r7, lr}
 802300c:	b084      	sub	sp, #16
 802300e:	af00      	add	r7, sp, #0
 8023010:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023012:	230f      	movs	r3, #15
 8023014:	18fb      	adds	r3, r7, r3
 8023016:	2201      	movs	r2, #1
 8023018:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	689b      	ldr	r3, [r3, #8]
 802301e:	2b02      	cmp	r3, #2
 8023020:	d001      	beq.n	8023026 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8023022:	f7ea f82d 	bl	800d080 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023026:	687a      	ldr	r2, [r7, #4]
 8023028:	23bc      	movs	r3, #188	@ 0xbc
 802302a:	009b      	lsls	r3, r3, #2
 802302c:	58d2      	ldr	r2, [r2, r3]
 802302e:	230f      	movs	r3, #15
 8023030:	18fb      	adds	r3, r7, r3
 8023032:	781b      	ldrb	r3, [r3, #0]
 8023034:	0019      	movs	r1, r3
 8023036:	0010      	movs	r0, r2
 8023038:	f7fe fd97 	bl	8021b6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802303c:	687a      	ldr	r2, [r7, #4]
 802303e:	23bc      	movs	r3, #188	@ 0xbc
 8023040:	009b      	lsls	r3, r3, #2
 8023042:	58d3      	ldr	r3, [r2, r3]
 8023044:	0018      	movs	r0, r3
 8023046:	f7fe fd48 	bl	8021ada <USBD_LL_Reset>
}
 802304a:	46c0      	nop			@ (mov r8, r8)
 802304c:	46bd      	mov	sp, r7
 802304e:	b004      	add	sp, #16
 8023050:	bd80      	pop	{r7, pc}
	...

08023054 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023054:	b580      	push	{r7, lr}
 8023056:	b082      	sub	sp, #8
 8023058:	af00      	add	r7, sp, #0
 802305a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802305c:	687a      	ldr	r2, [r7, #4]
 802305e:	23bc      	movs	r3, #188	@ 0xbc
 8023060:	009b      	lsls	r3, r3, #2
 8023062:	58d3      	ldr	r3, [r2, r3]
 8023064:	0018      	movs	r0, r3
 8023066:	f7fe fd91 	bl	8021b8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	699b      	ldr	r3, [r3, #24]
 802306e:	2b00      	cmp	r3, #0
 8023070:	d005      	beq.n	802307e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023072:	4b05      	ldr	r3, [pc, #20]	@ (8023088 <HAL_PCD_SuspendCallback+0x34>)
 8023074:	691a      	ldr	r2, [r3, #16]
 8023076:	4b04      	ldr	r3, [pc, #16]	@ (8023088 <HAL_PCD_SuspendCallback+0x34>)
 8023078:	2106      	movs	r1, #6
 802307a:	430a      	orrs	r2, r1
 802307c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802307e:	46c0      	nop			@ (mov r8, r8)
 8023080:	46bd      	mov	sp, r7
 8023082:	b002      	add	sp, #8
 8023084:	bd80      	pop	{r7, pc}
 8023086:	46c0      	nop			@ (mov r8, r8)
 8023088:	e000ed00 	.word	0xe000ed00

0802308c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802308c:	b580      	push	{r7, lr}
 802308e:	b082      	sub	sp, #8
 8023090:	af00      	add	r7, sp, #0
 8023092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	699b      	ldr	r3, [r3, #24]
 8023098:	2b00      	cmp	r3, #0
 802309a:	d007      	beq.n	80230ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802309c:	4b09      	ldr	r3, [pc, #36]	@ (80230c4 <HAL_PCD_ResumeCallback+0x38>)
 802309e:	691a      	ldr	r2, [r3, #16]
 80230a0:	4b08      	ldr	r3, [pc, #32]	@ (80230c4 <HAL_PCD_ResumeCallback+0x38>)
 80230a2:	2106      	movs	r1, #6
 80230a4:	438a      	bics	r2, r1
 80230a6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80230a8:	f000 fa44 	bl	8023534 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80230ac:	687a      	ldr	r2, [r7, #4]
 80230ae:	23bc      	movs	r3, #188	@ 0xbc
 80230b0:	009b      	lsls	r3, r3, #2
 80230b2:	58d3      	ldr	r3, [r2, r3]
 80230b4:	0018      	movs	r0, r3
 80230b6:	f7fe fd81 	bl	8021bbc <USBD_LL_Resume>
}
 80230ba:	46c0      	nop			@ (mov r8, r8)
 80230bc:	46bd      	mov	sp, r7
 80230be:	b002      	add	sp, #8
 80230c0:	bd80      	pop	{r7, pc}
 80230c2:	46c0      	nop			@ (mov r8, r8)
 80230c4:	e000ed00 	.word	0xe000ed00

080230c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b082      	sub	sp, #8
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80230d0:	4a2d      	ldr	r2, [pc, #180]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230d2:	23bc      	movs	r3, #188	@ 0xbc
 80230d4:	009b      	lsls	r3, r3, #2
 80230d6:	6879      	ldr	r1, [r7, #4]
 80230d8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80230da:	687a      	ldr	r2, [r7, #4]
 80230dc:	23b0      	movs	r3, #176	@ 0xb0
 80230de:	009b      	lsls	r3, r3, #2
 80230e0:	4929      	ldr	r1, [pc, #164]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230e2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80230e4:	4b28      	ldr	r3, [pc, #160]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230e6:	4a29      	ldr	r2, [pc, #164]	@ (802318c <USBD_LL_Init+0xc4>)
 80230e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80230ea:	4b27      	ldr	r3, [pc, #156]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230ec:	2208      	movs	r2, #8
 80230ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80230f0:	4b25      	ldr	r3, [pc, #148]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230f2:	2202      	movs	r2, #2
 80230f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80230f6:	4b24      	ldr	r3, [pc, #144]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230f8:	2202      	movs	r2, #2
 80230fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80230fc:	4b22      	ldr	r3, [pc, #136]	@ (8023188 <USBD_LL_Init+0xc0>)
 80230fe:	2200      	movs	r2, #0
 8023100:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8023102:	4b21      	ldr	r3, [pc, #132]	@ (8023188 <USBD_LL_Init+0xc0>)
 8023104:	2200      	movs	r2, #0
 8023106:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8023108:	4b1f      	ldr	r3, [pc, #124]	@ (8023188 <USBD_LL_Init+0xc0>)
 802310a:	2200      	movs	r2, #0
 802310c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802310e:	4b1e      	ldr	r3, [pc, #120]	@ (8023188 <USBD_LL_Init+0xc0>)
 8023110:	0018      	movs	r0, r3
 8023112:	f7f5 ff75 	bl	8019000 <HAL_PCD_Init>
 8023116:	1e03      	subs	r3, r0, #0
 8023118:	d001      	beq.n	802311e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802311a:	f7e9 ffb1 	bl	800d080 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802311e:	687a      	ldr	r2, [r7, #4]
 8023120:	23b0      	movs	r3, #176	@ 0xb0
 8023122:	009b      	lsls	r3, r3, #2
 8023124:	58d0      	ldr	r0, [r2, r3]
 8023126:	2318      	movs	r3, #24
 8023128:	2200      	movs	r2, #0
 802312a:	2100      	movs	r1, #0
 802312c:	f7f7 fd36 	bl	801ab9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023130:	687a      	ldr	r2, [r7, #4]
 8023132:	23b0      	movs	r3, #176	@ 0xb0
 8023134:	009b      	lsls	r3, r3, #2
 8023136:	58d0      	ldr	r0, [r2, r3]
 8023138:	2358      	movs	r3, #88	@ 0x58
 802313a:	2200      	movs	r2, #0
 802313c:	2180      	movs	r1, #128	@ 0x80
 802313e:	f7f7 fd2d 	bl	801ab9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8023142:	687a      	ldr	r2, [r7, #4]
 8023144:	23b0      	movs	r3, #176	@ 0xb0
 8023146:	009b      	lsls	r3, r3, #2
 8023148:	58d0      	ldr	r0, [r2, r3]
 802314a:	23c0      	movs	r3, #192	@ 0xc0
 802314c:	2200      	movs	r2, #0
 802314e:	2181      	movs	r1, #129	@ 0x81
 8023150:	f7f7 fd24 	bl	801ab9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023154:	687a      	ldr	r2, [r7, #4]
 8023156:	23b0      	movs	r3, #176	@ 0xb0
 8023158:	009b      	lsls	r3, r3, #2
 802315a:	58d0      	ldr	r0, [r2, r3]
 802315c:	2388      	movs	r3, #136	@ 0x88
 802315e:	005b      	lsls	r3, r3, #1
 8023160:	2200      	movs	r2, #0
 8023162:	2101      	movs	r1, #1
 8023164:	f7f7 fd1a 	bl	801ab9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023168:	687a      	ldr	r2, [r7, #4]
 802316a:	23b0      	movs	r3, #176	@ 0xb0
 802316c:	009b      	lsls	r3, r3, #2
 802316e:	58d0      	ldr	r0, [r2, r3]
 8023170:	2380      	movs	r3, #128	@ 0x80
 8023172:	005b      	lsls	r3, r3, #1
 8023174:	2200      	movs	r2, #0
 8023176:	2182      	movs	r1, #130	@ 0x82
 8023178:	f7f7 fd10 	bl	801ab9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802317c:	2300      	movs	r3, #0
}
 802317e:	0018      	movs	r0, r3
 8023180:	46bd      	mov	sp, r7
 8023182:	b002      	add	sp, #8
 8023184:	bd80      	pop	{r7, pc}
 8023186:	46c0      	nop			@ (mov r8, r8)
 8023188:	20003114 	.word	0x20003114
 802318c:	40005c00 	.word	0x40005c00

08023190 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8023190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023192:	b085      	sub	sp, #20
 8023194:	af00      	add	r7, sp, #0
 8023196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023198:	210f      	movs	r1, #15
 802319a:	187b      	adds	r3, r7, r1
 802319c:	2200      	movs	r2, #0
 802319e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80231a0:	260e      	movs	r6, #14
 80231a2:	19bb      	adds	r3, r7, r6
 80231a4:	2200      	movs	r2, #0
 80231a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80231a8:	687a      	ldr	r2, [r7, #4]
 80231aa:	23b0      	movs	r3, #176	@ 0xb0
 80231ac:	009b      	lsls	r3, r3, #2
 80231ae:	58d3      	ldr	r3, [r2, r3]
 80231b0:	000d      	movs	r5, r1
 80231b2:	187c      	adds	r4, r7, r1
 80231b4:	0018      	movs	r0, r3
 80231b6:	f7f6 f823 	bl	8019200 <HAL_PCD_Start>
 80231ba:	0003      	movs	r3, r0
 80231bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80231be:	19bc      	adds	r4, r7, r6
 80231c0:	197b      	adds	r3, r7, r5
 80231c2:	781b      	ldrb	r3, [r3, #0]
 80231c4:	0018      	movs	r0, r3
 80231c6:	f000 f9bc 	bl	8023542 <USBD_Get_USB_Status>
 80231ca:	0003      	movs	r3, r0
 80231cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80231ce:	19bb      	adds	r3, r7, r6
 80231d0:	781b      	ldrb	r3, [r3, #0]
}
 80231d2:	0018      	movs	r0, r3
 80231d4:	46bd      	mov	sp, r7
 80231d6:	b005      	add	sp, #20
 80231d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080231da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80231da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231dc:	b085      	sub	sp, #20
 80231de:	af00      	add	r7, sp, #0
 80231e0:	6078      	str	r0, [r7, #4]
 80231e2:	000c      	movs	r4, r1
 80231e4:	0010      	movs	r0, r2
 80231e6:	0019      	movs	r1, r3
 80231e8:	1cfb      	adds	r3, r7, #3
 80231ea:	1c22      	adds	r2, r4, #0
 80231ec:	701a      	strb	r2, [r3, #0]
 80231ee:	1cbb      	adds	r3, r7, #2
 80231f0:	1c02      	adds	r2, r0, #0
 80231f2:	701a      	strb	r2, [r3, #0]
 80231f4:	003b      	movs	r3, r7
 80231f6:	1c0a      	adds	r2, r1, #0
 80231f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80231fa:	260f      	movs	r6, #15
 80231fc:	19bb      	adds	r3, r7, r6
 80231fe:	2200      	movs	r2, #0
 8023200:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023202:	250e      	movs	r5, #14
 8023204:	197b      	adds	r3, r7, r5
 8023206:	2200      	movs	r2, #0
 8023208:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802320a:	687a      	ldr	r2, [r7, #4]
 802320c:	23b0      	movs	r3, #176	@ 0xb0
 802320e:	009b      	lsls	r3, r3, #2
 8023210:	58d0      	ldr	r0, [r2, r3]
 8023212:	19bc      	adds	r4, r7, r6
 8023214:	1cbb      	adds	r3, r7, #2
 8023216:	781d      	ldrb	r5, [r3, #0]
 8023218:	003b      	movs	r3, r7
 802321a:	881a      	ldrh	r2, [r3, #0]
 802321c:	1cfb      	adds	r3, r7, #3
 802321e:	7819      	ldrb	r1, [r3, #0]
 8023220:	002b      	movs	r3, r5
 8023222:	f7f6 f982 	bl	801952a <HAL_PCD_EP_Open>
 8023226:	0003      	movs	r3, r0
 8023228:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802322a:	250e      	movs	r5, #14
 802322c:	197c      	adds	r4, r7, r5
 802322e:	19bb      	adds	r3, r7, r6
 8023230:	781b      	ldrb	r3, [r3, #0]
 8023232:	0018      	movs	r0, r3
 8023234:	f000 f985 	bl	8023542 <USBD_Get_USB_Status>
 8023238:	0003      	movs	r3, r0
 802323a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802323c:	197b      	adds	r3, r7, r5
 802323e:	781b      	ldrb	r3, [r3, #0]
}
 8023240:	0018      	movs	r0, r3
 8023242:	46bd      	mov	sp, r7
 8023244:	b005      	add	sp, #20
 8023246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023248 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023248:	b5f0      	push	{r4, r5, r6, r7, lr}
 802324a:	b085      	sub	sp, #20
 802324c:	af00      	add	r7, sp, #0
 802324e:	6078      	str	r0, [r7, #4]
 8023250:	000a      	movs	r2, r1
 8023252:	1cfb      	adds	r3, r7, #3
 8023254:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023256:	210f      	movs	r1, #15
 8023258:	187b      	adds	r3, r7, r1
 802325a:	2200      	movs	r2, #0
 802325c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802325e:	260e      	movs	r6, #14
 8023260:	19bb      	adds	r3, r7, r6
 8023262:	2200      	movs	r2, #0
 8023264:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023266:	687a      	ldr	r2, [r7, #4]
 8023268:	23b0      	movs	r3, #176	@ 0xb0
 802326a:	009b      	lsls	r3, r3, #2
 802326c:	58d2      	ldr	r2, [r2, r3]
 802326e:	000d      	movs	r5, r1
 8023270:	187c      	adds	r4, r7, r1
 8023272:	1cfb      	adds	r3, r7, #3
 8023274:	781b      	ldrb	r3, [r3, #0]
 8023276:	0019      	movs	r1, r3
 8023278:	0010      	movs	r0, r2
 802327a:	f7f6 f9c5 	bl	8019608 <HAL_PCD_EP_Close>
 802327e:	0003      	movs	r3, r0
 8023280:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023282:	19bc      	adds	r4, r7, r6
 8023284:	197b      	adds	r3, r7, r5
 8023286:	781b      	ldrb	r3, [r3, #0]
 8023288:	0018      	movs	r0, r3
 802328a:	f000 f95a 	bl	8023542 <USBD_Get_USB_Status>
 802328e:	0003      	movs	r3, r0
 8023290:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023292:	19bb      	adds	r3, r7, r6
 8023294:	781b      	ldrb	r3, [r3, #0]
}
 8023296:	0018      	movs	r0, r3
 8023298:	46bd      	mov	sp, r7
 802329a:	b005      	add	sp, #20
 802329c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802329e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802329e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232a0:	b085      	sub	sp, #20
 80232a2:	af00      	add	r7, sp, #0
 80232a4:	6078      	str	r0, [r7, #4]
 80232a6:	000a      	movs	r2, r1
 80232a8:	1cfb      	adds	r3, r7, #3
 80232aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80232ac:	210f      	movs	r1, #15
 80232ae:	187b      	adds	r3, r7, r1
 80232b0:	2200      	movs	r2, #0
 80232b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80232b4:	260e      	movs	r6, #14
 80232b6:	19bb      	adds	r3, r7, r6
 80232b8:	2200      	movs	r2, #0
 80232ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80232bc:	687a      	ldr	r2, [r7, #4]
 80232be:	23b0      	movs	r3, #176	@ 0xb0
 80232c0:	009b      	lsls	r3, r3, #2
 80232c2:	58d2      	ldr	r2, [r2, r3]
 80232c4:	000d      	movs	r5, r1
 80232c6:	187c      	adds	r4, r7, r1
 80232c8:	1cfb      	adds	r3, r7, #3
 80232ca:	781b      	ldrb	r3, [r3, #0]
 80232cc:	0019      	movs	r1, r3
 80232ce:	0010      	movs	r0, r2
 80232d0:	f7f6 fa77 	bl	80197c2 <HAL_PCD_EP_SetStall>
 80232d4:	0003      	movs	r3, r0
 80232d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80232d8:	19bc      	adds	r4, r7, r6
 80232da:	197b      	adds	r3, r7, r5
 80232dc:	781b      	ldrb	r3, [r3, #0]
 80232de:	0018      	movs	r0, r3
 80232e0:	f000 f92f 	bl	8023542 <USBD_Get_USB_Status>
 80232e4:	0003      	movs	r3, r0
 80232e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80232e8:	19bb      	adds	r3, r7, r6
 80232ea:	781b      	ldrb	r3, [r3, #0]
}
 80232ec:	0018      	movs	r0, r3
 80232ee:	46bd      	mov	sp, r7
 80232f0:	b005      	add	sp, #20
 80232f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080232f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80232f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232f6:	b085      	sub	sp, #20
 80232f8:	af00      	add	r7, sp, #0
 80232fa:	6078      	str	r0, [r7, #4]
 80232fc:	000a      	movs	r2, r1
 80232fe:	1cfb      	adds	r3, r7, #3
 8023300:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023302:	210f      	movs	r1, #15
 8023304:	187b      	adds	r3, r7, r1
 8023306:	2200      	movs	r2, #0
 8023308:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802330a:	260e      	movs	r6, #14
 802330c:	19bb      	adds	r3, r7, r6
 802330e:	2200      	movs	r2, #0
 8023310:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023312:	687a      	ldr	r2, [r7, #4]
 8023314:	23b0      	movs	r3, #176	@ 0xb0
 8023316:	009b      	lsls	r3, r3, #2
 8023318:	58d2      	ldr	r2, [r2, r3]
 802331a:	000d      	movs	r5, r1
 802331c:	187c      	adds	r4, r7, r1
 802331e:	1cfb      	adds	r3, r7, #3
 8023320:	781b      	ldrb	r3, [r3, #0]
 8023322:	0019      	movs	r1, r3
 8023324:	0010      	movs	r0, r2
 8023326:	f7f6 faa8 	bl	801987a <HAL_PCD_EP_ClrStall>
 802332a:	0003      	movs	r3, r0
 802332c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802332e:	19bc      	adds	r4, r7, r6
 8023330:	197b      	adds	r3, r7, r5
 8023332:	781b      	ldrb	r3, [r3, #0]
 8023334:	0018      	movs	r0, r3
 8023336:	f000 f904 	bl	8023542 <USBD_Get_USB_Status>
 802333a:	0003      	movs	r3, r0
 802333c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802333e:	19bb      	adds	r3, r7, r6
 8023340:	781b      	ldrb	r3, [r3, #0]
}
 8023342:	0018      	movs	r0, r3
 8023344:	46bd      	mov	sp, r7
 8023346:	b005      	add	sp, #20
 8023348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802334a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802334a:	b580      	push	{r7, lr}
 802334c:	b084      	sub	sp, #16
 802334e:	af00      	add	r7, sp, #0
 8023350:	6078      	str	r0, [r7, #4]
 8023352:	000a      	movs	r2, r1
 8023354:	1cfb      	adds	r3, r7, #3
 8023356:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023358:	687a      	ldr	r2, [r7, #4]
 802335a:	23b0      	movs	r3, #176	@ 0xb0
 802335c:	009b      	lsls	r3, r3, #2
 802335e:	58d3      	ldr	r3, [r2, r3]
 8023360:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023362:	1cfb      	adds	r3, r7, #3
 8023364:	781b      	ldrb	r3, [r3, #0]
 8023366:	b25b      	sxtb	r3, r3
 8023368:	2b00      	cmp	r3, #0
 802336a:	da0d      	bge.n	8023388 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802336c:	1cfb      	adds	r3, r7, #3
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	227f      	movs	r2, #127	@ 0x7f
 8023372:	4013      	ands	r3, r2
 8023374:	68f9      	ldr	r1, [r7, #12]
 8023376:	1c5a      	adds	r2, r3, #1
 8023378:	0013      	movs	r3, r2
 802337a:	009b      	lsls	r3, r3, #2
 802337c:	189b      	adds	r3, r3, r2
 802337e:	00db      	lsls	r3, r3, #3
 8023380:	18cb      	adds	r3, r1, r3
 8023382:	3302      	adds	r3, #2
 8023384:	781b      	ldrb	r3, [r3, #0]
 8023386:	e00d      	b.n	80233a4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023388:	1cfb      	adds	r3, r7, #3
 802338a:	781b      	ldrb	r3, [r3, #0]
 802338c:	227f      	movs	r2, #127	@ 0x7f
 802338e:	401a      	ands	r2, r3
 8023390:	68f8      	ldr	r0, [r7, #12]
 8023392:	23b5      	movs	r3, #181	@ 0xb5
 8023394:	0059      	lsls	r1, r3, #1
 8023396:	0013      	movs	r3, r2
 8023398:	009b      	lsls	r3, r3, #2
 802339a:	189b      	adds	r3, r3, r2
 802339c:	00db      	lsls	r3, r3, #3
 802339e:	18c3      	adds	r3, r0, r3
 80233a0:	185b      	adds	r3, r3, r1
 80233a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80233a4:	0018      	movs	r0, r3
 80233a6:	46bd      	mov	sp, r7
 80233a8:	b004      	add	sp, #16
 80233aa:	bd80      	pop	{r7, pc}

080233ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80233ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233ae:	b085      	sub	sp, #20
 80233b0:	af00      	add	r7, sp, #0
 80233b2:	6078      	str	r0, [r7, #4]
 80233b4:	000a      	movs	r2, r1
 80233b6:	1cfb      	adds	r3, r7, #3
 80233b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80233ba:	210f      	movs	r1, #15
 80233bc:	187b      	adds	r3, r7, r1
 80233be:	2200      	movs	r2, #0
 80233c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80233c2:	260e      	movs	r6, #14
 80233c4:	19bb      	adds	r3, r7, r6
 80233c6:	2200      	movs	r2, #0
 80233c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80233ca:	687a      	ldr	r2, [r7, #4]
 80233cc:	23b0      	movs	r3, #176	@ 0xb0
 80233ce:	009b      	lsls	r3, r3, #2
 80233d0:	58d2      	ldr	r2, [r2, r3]
 80233d2:	000d      	movs	r5, r1
 80233d4:	187c      	adds	r4, r7, r1
 80233d6:	1cfb      	adds	r3, r7, #3
 80233d8:	781b      	ldrb	r3, [r3, #0]
 80233da:	0019      	movs	r1, r3
 80233dc:	0010      	movs	r0, r2
 80233de:	f7f6 f879 	bl	80194d4 <HAL_PCD_SetAddress>
 80233e2:	0003      	movs	r3, r0
 80233e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80233e6:	19bc      	adds	r4, r7, r6
 80233e8:	197b      	adds	r3, r7, r5
 80233ea:	781b      	ldrb	r3, [r3, #0]
 80233ec:	0018      	movs	r0, r3
 80233ee:	f000 f8a8 	bl	8023542 <USBD_Get_USB_Status>
 80233f2:	0003      	movs	r3, r0
 80233f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80233f6:	19bb      	adds	r3, r7, r6
 80233f8:	781b      	ldrb	r3, [r3, #0]
}
 80233fa:	0018      	movs	r0, r3
 80233fc:	46bd      	mov	sp, r7
 80233fe:	b005      	add	sp, #20
 8023400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023402 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023404:	b087      	sub	sp, #28
 8023406:	af00      	add	r7, sp, #0
 8023408:	60f8      	str	r0, [r7, #12]
 802340a:	0008      	movs	r0, r1
 802340c:	607a      	str	r2, [r7, #4]
 802340e:	0019      	movs	r1, r3
 8023410:	230b      	movs	r3, #11
 8023412:	18fb      	adds	r3, r7, r3
 8023414:	1c02      	adds	r2, r0, #0
 8023416:	701a      	strb	r2, [r3, #0]
 8023418:	2408      	movs	r4, #8
 802341a:	193b      	adds	r3, r7, r4
 802341c:	1c0a      	adds	r2, r1, #0
 802341e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023420:	2117      	movs	r1, #23
 8023422:	187b      	adds	r3, r7, r1
 8023424:	2200      	movs	r2, #0
 8023426:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023428:	2516      	movs	r5, #22
 802342a:	197b      	adds	r3, r7, r5
 802342c:	2200      	movs	r2, #0
 802342e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023430:	68fa      	ldr	r2, [r7, #12]
 8023432:	23b0      	movs	r3, #176	@ 0xb0
 8023434:	009b      	lsls	r3, r3, #2
 8023436:	58d0      	ldr	r0, [r2, r3]
 8023438:	193b      	adds	r3, r7, r4
 802343a:	881d      	ldrh	r5, [r3, #0]
 802343c:	000e      	movs	r6, r1
 802343e:	187c      	adds	r4, r7, r1
 8023440:	687a      	ldr	r2, [r7, #4]
 8023442:	230b      	movs	r3, #11
 8023444:	18fb      	adds	r3, r7, r3
 8023446:	7819      	ldrb	r1, [r3, #0]
 8023448:	002b      	movs	r3, r5
 802344a:	f7f6 f97e 	bl	801974a <HAL_PCD_EP_Transmit>
 802344e:	0003      	movs	r3, r0
 8023450:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023452:	2516      	movs	r5, #22
 8023454:	197c      	adds	r4, r7, r5
 8023456:	19bb      	adds	r3, r7, r6
 8023458:	781b      	ldrb	r3, [r3, #0]
 802345a:	0018      	movs	r0, r3
 802345c:	f000 f871 	bl	8023542 <USBD_Get_USB_Status>
 8023460:	0003      	movs	r3, r0
 8023462:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023464:	197b      	adds	r3, r7, r5
 8023466:	781b      	ldrb	r3, [r3, #0]
}
 8023468:	0018      	movs	r0, r3
 802346a:	46bd      	mov	sp, r7
 802346c:	b007      	add	sp, #28
 802346e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023472:	b087      	sub	sp, #28
 8023474:	af00      	add	r7, sp, #0
 8023476:	60f8      	str	r0, [r7, #12]
 8023478:	0008      	movs	r0, r1
 802347a:	607a      	str	r2, [r7, #4]
 802347c:	0019      	movs	r1, r3
 802347e:	230b      	movs	r3, #11
 8023480:	18fb      	adds	r3, r7, r3
 8023482:	1c02      	adds	r2, r0, #0
 8023484:	701a      	strb	r2, [r3, #0]
 8023486:	2408      	movs	r4, #8
 8023488:	193b      	adds	r3, r7, r4
 802348a:	1c0a      	adds	r2, r1, #0
 802348c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802348e:	2117      	movs	r1, #23
 8023490:	187b      	adds	r3, r7, r1
 8023492:	2200      	movs	r2, #0
 8023494:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023496:	2516      	movs	r5, #22
 8023498:	197b      	adds	r3, r7, r5
 802349a:	2200      	movs	r2, #0
 802349c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802349e:	68fa      	ldr	r2, [r7, #12]
 80234a0:	23b0      	movs	r3, #176	@ 0xb0
 80234a2:	009b      	lsls	r3, r3, #2
 80234a4:	58d0      	ldr	r0, [r2, r3]
 80234a6:	193b      	adds	r3, r7, r4
 80234a8:	881d      	ldrh	r5, [r3, #0]
 80234aa:	000e      	movs	r6, r1
 80234ac:	187c      	adds	r4, r7, r1
 80234ae:	687a      	ldr	r2, [r7, #4]
 80234b0:	230b      	movs	r3, #11
 80234b2:	18fb      	adds	r3, r7, r3
 80234b4:	7819      	ldrb	r1, [r3, #0]
 80234b6:	002b      	movs	r3, r5
 80234b8:	f7f6 f8f7 	bl	80196aa <HAL_PCD_EP_Receive>
 80234bc:	0003      	movs	r3, r0
 80234be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80234c0:	2516      	movs	r5, #22
 80234c2:	197c      	adds	r4, r7, r5
 80234c4:	19bb      	adds	r3, r7, r6
 80234c6:	781b      	ldrb	r3, [r3, #0]
 80234c8:	0018      	movs	r0, r3
 80234ca:	f000 f83a 	bl	8023542 <USBD_Get_USB_Status>
 80234ce:	0003      	movs	r3, r0
 80234d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80234d2:	197b      	adds	r3, r7, r5
 80234d4:	781b      	ldrb	r3, [r3, #0]
}
 80234d6:	0018      	movs	r0, r3
 80234d8:	46bd      	mov	sp, r7
 80234da:	b007      	add	sp, #28
 80234dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080234de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80234de:	b580      	push	{r7, lr}
 80234e0:	b082      	sub	sp, #8
 80234e2:	af00      	add	r7, sp, #0
 80234e4:	6078      	str	r0, [r7, #4]
 80234e6:	000a      	movs	r2, r1
 80234e8:	1cfb      	adds	r3, r7, #3
 80234ea:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80234ec:	687a      	ldr	r2, [r7, #4]
 80234ee:	23b0      	movs	r3, #176	@ 0xb0
 80234f0:	009b      	lsls	r3, r3, #2
 80234f2:	58d2      	ldr	r2, [r2, r3]
 80234f4:	1cfb      	adds	r3, r7, #3
 80234f6:	781b      	ldrb	r3, [r3, #0]
 80234f8:	0019      	movs	r1, r3
 80234fa:	0010      	movs	r0, r2
 80234fc:	f7f6 f90c 	bl	8019718 <HAL_PCD_EP_GetRxCount>
 8023500:	0003      	movs	r3, r0
}
 8023502:	0018      	movs	r0, r3
 8023504:	46bd      	mov	sp, r7
 8023506:	b002      	add	sp, #8
 8023508:	bd80      	pop	{r7, pc}
	...

0802350c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 802350c:	b580      	push	{r7, lr}
 802350e:	b082      	sub	sp, #8
 8023510:	af00      	add	r7, sp, #0
 8023512:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023514:	4b02      	ldr	r3, [pc, #8]	@ (8023520 <USBD_static_malloc+0x14>)
}
 8023516:	0018      	movs	r0, r3
 8023518:	46bd      	mov	sp, r7
 802351a:	b002      	add	sp, #8
 802351c:	bd80      	pop	{r7, pc}
 802351e:	46c0      	nop			@ (mov r8, r8)
 8023520:	20003408 	.word	0x20003408

08023524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023524:	b580      	push	{r7, lr}
 8023526:	b082      	sub	sp, #8
 8023528:	af00      	add	r7, sp, #0
 802352a:	6078      	str	r0, [r7, #4]

}
 802352c:	46c0      	nop			@ (mov r8, r8)
 802352e:	46bd      	mov	sp, r7
 8023530:	b002      	add	sp, #8
 8023532:	bd80      	pop	{r7, pc}

08023534 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023534:	b580      	push	{r7, lr}
 8023536:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023538:	f7e9 fc48 	bl	800cdcc <SystemClock_Config>
}
 802353c:	46c0      	nop			@ (mov r8, r8)
 802353e:	46bd      	mov	sp, r7
 8023540:	bd80      	pop	{r7, pc}

08023542 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023542:	b580      	push	{r7, lr}
 8023544:	b084      	sub	sp, #16
 8023546:	af00      	add	r7, sp, #0
 8023548:	0002      	movs	r2, r0
 802354a:	1dfb      	adds	r3, r7, #7
 802354c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802354e:	230f      	movs	r3, #15
 8023550:	18fb      	adds	r3, r7, r3
 8023552:	2200      	movs	r2, #0
 8023554:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023556:	1dfb      	adds	r3, r7, #7
 8023558:	781b      	ldrb	r3, [r3, #0]
 802355a:	2b03      	cmp	r3, #3
 802355c:	d017      	beq.n	802358e <USBD_Get_USB_Status+0x4c>
 802355e:	dc1b      	bgt.n	8023598 <USBD_Get_USB_Status+0x56>
 8023560:	2b02      	cmp	r3, #2
 8023562:	d00f      	beq.n	8023584 <USBD_Get_USB_Status+0x42>
 8023564:	dc18      	bgt.n	8023598 <USBD_Get_USB_Status+0x56>
 8023566:	2b00      	cmp	r3, #0
 8023568:	d002      	beq.n	8023570 <USBD_Get_USB_Status+0x2e>
 802356a:	2b01      	cmp	r3, #1
 802356c:	d005      	beq.n	802357a <USBD_Get_USB_Status+0x38>
 802356e:	e013      	b.n	8023598 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023570:	230f      	movs	r3, #15
 8023572:	18fb      	adds	r3, r7, r3
 8023574:	2200      	movs	r2, #0
 8023576:	701a      	strb	r2, [r3, #0]
    break;
 8023578:	e013      	b.n	80235a2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802357a:	230f      	movs	r3, #15
 802357c:	18fb      	adds	r3, r7, r3
 802357e:	2202      	movs	r2, #2
 8023580:	701a      	strb	r2, [r3, #0]
    break;
 8023582:	e00e      	b.n	80235a2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023584:	230f      	movs	r3, #15
 8023586:	18fb      	adds	r3, r7, r3
 8023588:	2201      	movs	r2, #1
 802358a:	701a      	strb	r2, [r3, #0]
    break;
 802358c:	e009      	b.n	80235a2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802358e:	230f      	movs	r3, #15
 8023590:	18fb      	adds	r3, r7, r3
 8023592:	2202      	movs	r2, #2
 8023594:	701a      	strb	r2, [r3, #0]
    break;
 8023596:	e004      	b.n	80235a2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023598:	230f      	movs	r3, #15
 802359a:	18fb      	adds	r3, r7, r3
 802359c:	2202      	movs	r2, #2
 802359e:	701a      	strb	r2, [r3, #0]
    break;
 80235a0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80235a2:	230f      	movs	r3, #15
 80235a4:	18fb      	adds	r3, r7, r3
 80235a6:	781b      	ldrb	r3, [r3, #0]
}
 80235a8:	0018      	movs	r0, r3
 80235aa:	46bd      	mov	sp, r7
 80235ac:	b004      	add	sp, #16
 80235ae:	bd80      	pop	{r7, pc}

080235b0 <arm_cfft_radix4by2_q31>:
 80235b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235b2:	465f      	mov	r7, fp
 80235b4:	4656      	mov	r6, sl
 80235b6:	464d      	mov	r5, r9
 80235b8:	4644      	mov	r4, r8
 80235ba:	000b      	movs	r3, r1
 80235bc:	b4f0      	push	{r4, r5, r6, r7}
 80235be:	085b      	lsrs	r3, r3, #1
 80235c0:	b08f      	sub	sp, #60	@ 0x3c
 80235c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80235c4:	0007      	movs	r7, r0
 80235c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80235c8:	0011      	movs	r1, r2
 80235ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80235cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d100      	bne.n	80235d4 <arm_cfft_radix4by2_q31+0x24>
 80235d2:	e0a0      	b.n	8023716 <arm_cfft_radix4by2_q31+0x166>
 80235d4:	0002      	movs	r2, r0
 80235d6:	00db      	lsls	r3, r3, #3
 80235d8:	3204      	adds	r2, #4
 80235da:	4691      	mov	r9, r2
 80235dc:	4698      	mov	r8, r3
 80235de:	000a      	movs	r2, r1
 80235e0:	464e      	mov	r6, r9
 80235e2:	4442      	add	r2, r8
 80235e4:	4699      	mov	r9, r3
 80235e6:	4688      	mov	r8, r1
 80235e8:	9208      	str	r2, [sp, #32]
 80235ea:	900d      	str	r0, [sp, #52]	@ 0x34
 80235ec:	4643      	mov	r3, r8
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	469b      	mov	fp, r3
 80235f2:	4643      	mov	r3, r8
 80235f4:	685b      	ldr	r3, [r3, #4]
 80235f6:	469a      	mov	sl, r3
 80235f8:	683b      	ldr	r3, [r7, #0]
 80235fa:	109c      	asrs	r4, r3, #2
 80235fc:	464b      	mov	r3, r9
 80235fe:	58fb      	ldr	r3, [r7, r3]
 8023600:	109a      	asrs	r2, r3, #2
 8023602:	18a3      	adds	r3, r4, r2
 8023604:	603b      	str	r3, [r7, #0]
 8023606:	6833      	ldr	r3, [r6, #0]
 8023608:	1aa4      	subs	r4, r4, r2
 802360a:	109d      	asrs	r5, r3, #2
 802360c:	464b      	mov	r3, r9
 802360e:	58f3      	ldr	r3, [r6, r3]
 8023610:	17e2      	asrs	r2, r4, #31
 8023612:	109b      	asrs	r3, r3, #2
 8023614:	18e9      	adds	r1, r5, r3
 8023616:	6031      	str	r1, [r6, #0]
 8023618:	0011      	movs	r1, r2
 802361a:	465a      	mov	r2, fp
 802361c:	17d2      	asrs	r2, r2, #31
 802361e:	0010      	movs	r0, r2
 8023620:	4652      	mov	r2, sl
 8023622:	1aed      	subs	r5, r5, r3
 8023624:	17eb      	asrs	r3, r5, #31
 8023626:	17d2      	asrs	r2, r2, #31
 8023628:	9307      	str	r3, [sp, #28]
 802362a:	9204      	str	r2, [sp, #16]
 802362c:	0003      	movs	r3, r0
 802362e:	465a      	mov	r2, fp
 8023630:	9006      	str	r0, [sp, #24]
 8023632:	0020      	movs	r0, r4
 8023634:	9105      	str	r1, [sp, #20]
 8023636:	f7dc ffc3 	bl	80005c0 <__aeabi_lmul>
 802363a:	2280      	movs	r2, #128	@ 0x80
 802363c:	2300      	movs	r3, #0
 802363e:	0612      	lsls	r2, r2, #24
 8023640:	1880      	adds	r0, r0, r2
 8023642:	4159      	adcs	r1, r3
 8023644:	2300      	movs	r3, #0
 8023646:	9101      	str	r1, [sp, #4]
 8023648:	9300      	str	r3, [sp, #0]
 802364a:	4652      	mov	r2, sl
 802364c:	9b04      	ldr	r3, [sp, #16]
 802364e:	0028      	movs	r0, r5
 8023650:	17e9      	asrs	r1, r5, #31
 8023652:	f7dc ffb5 	bl	80005c0 <__aeabi_lmul>
 8023656:	9a00      	ldr	r2, [sp, #0]
 8023658:	9b01      	ldr	r3, [sp, #4]
 802365a:	1880      	adds	r0, r0, r2
 802365c:	4159      	adcs	r1, r3
 802365e:	2280      	movs	r2, #128	@ 0x80
 8023660:	2300      	movs	r3, #0
 8023662:	0612      	lsls	r2, r2, #24
 8023664:	1880      	adds	r0, r0, r2
 8023666:	4159      	adcs	r1, r3
 8023668:	464a      	mov	r2, r9
 802366a:	004b      	lsls	r3, r1, #1
 802366c:	50bb      	str	r3, [r7, r2]
 802366e:	4658      	mov	r0, fp
 8023670:	002a      	movs	r2, r5
 8023672:	9b07      	ldr	r3, [sp, #28]
 8023674:	9906      	ldr	r1, [sp, #24]
 8023676:	f7dc ffa3 	bl	80005c0 <__aeabi_lmul>
 802367a:	2280      	movs	r2, #128	@ 0x80
 802367c:	2300      	movs	r3, #0
 802367e:	0612      	lsls	r2, r2, #24
 8023680:	1880      	adds	r0, r0, r2
 8023682:	4159      	adcs	r1, r3
 8023684:	2000      	movs	r0, #0
 8023686:	9103      	str	r1, [sp, #12]
 8023688:	9002      	str	r0, [sp, #8]
 802368a:	4652      	mov	r2, sl
 802368c:	9b04      	ldr	r3, [sp, #16]
 802368e:	0020      	movs	r0, r4
 8023690:	9905      	ldr	r1, [sp, #20]
 8023692:	f7dc ff95 	bl	80005c0 <__aeabi_lmul>
 8023696:	9a02      	ldr	r2, [sp, #8]
 8023698:	9b03      	ldr	r3, [sp, #12]
 802369a:	1a12      	subs	r2, r2, r0
 802369c:	418b      	sbcs	r3, r1
 802369e:	2080      	movs	r0, #128	@ 0x80
 80236a0:	2100      	movs	r1, #0
 80236a2:	0600      	lsls	r0, r0, #24
 80236a4:	1812      	adds	r2, r2, r0
 80236a6:	414b      	adcs	r3, r1
 80236a8:	464a      	mov	r2, r9
 80236aa:	005b      	lsls	r3, r3, #1
 80236ac:	50b3      	str	r3, [r6, r2]
 80236ae:	2308      	movs	r3, #8
 80236b0:	469c      	mov	ip, r3
 80236b2:	9b08      	ldr	r3, [sp, #32]
 80236b4:	44e0      	add	r8, ip
 80236b6:	3708      	adds	r7, #8
 80236b8:	3608      	adds	r6, #8
 80236ba:	4598      	cmp	r8, r3
 80236bc:	d196      	bne.n	80235ec <arm_cfft_radix4by2_q31+0x3c>
 80236be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80236c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80236c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80236c4:	2302      	movs	r3, #2
 80236c6:	003a      	movs	r2, r7
 80236c8:	0029      	movs	r1, r5
 80236ca:	0020      	movs	r0, r4
 80236cc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80236ce:	f000 f957 	bl	8023980 <arm_radix4_butterfly_q31>
 80236d2:	46a4      	mov	ip, r4
 80236d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80236d6:	2302      	movs	r3, #2
 80236d8:	0088      	lsls	r0, r1, #2
 80236da:	4460      	add	r0, ip
 80236dc:	003a      	movs	r2, r7
 80236de:	0029      	movs	r1, r5
 80236e0:	f000 f94e 	bl	8023980 <arm_radix4_butterfly_q31>
 80236e4:	46a4      	mov	ip, r4
 80236e6:	0128      	lsls	r0, r5, #4
 80236e8:	4460      	add	r0, ip
 80236ea:	6833      	ldr	r3, [r6, #0]
 80236ec:	005b      	lsls	r3, r3, #1
 80236ee:	6033      	str	r3, [r6, #0]
 80236f0:	6873      	ldr	r3, [r6, #4]
 80236f2:	005b      	lsls	r3, r3, #1
 80236f4:	6073      	str	r3, [r6, #4]
 80236f6:	68b3      	ldr	r3, [r6, #8]
 80236f8:	005b      	lsls	r3, r3, #1
 80236fa:	60b3      	str	r3, [r6, #8]
 80236fc:	68f3      	ldr	r3, [r6, #12]
 80236fe:	005b      	lsls	r3, r3, #1
 8023700:	60f3      	str	r3, [r6, #12]
 8023702:	3610      	adds	r6, #16
 8023704:	42b0      	cmp	r0, r6
 8023706:	d1f0      	bne.n	80236ea <arm_cfft_radix4by2_q31+0x13a>
 8023708:	b00f      	add	sp, #60	@ 0x3c
 802370a:	bc3c      	pop	{r2, r3, r4, r5}
 802370c:	4690      	mov	r8, r2
 802370e:	4699      	mov	r9, r3
 8023710:	46a2      	mov	sl, r4
 8023712:	46ab      	mov	fp, r5
 8023714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023716:	2302      	movs	r3, #2
 8023718:	2100      	movs	r1, #0
 802371a:	0015      	movs	r5, r2
 802371c:	f000 f930 	bl	8023980 <arm_radix4_butterfly_q31>
 8023720:	46bc      	mov	ip, r7
 8023722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023724:	002a      	movs	r2, r5
 8023726:	0098      	lsls	r0, r3, #2
 8023728:	4460      	add	r0, ip
 802372a:	2302      	movs	r3, #2
 802372c:	2100      	movs	r1, #0
 802372e:	f000 f927 	bl	8023980 <arm_radix4_butterfly_q31>
 8023732:	e7e9      	b.n	8023708 <arm_cfft_radix4by2_q31+0x158>

08023734 <arm_cfft_radix4by2_inverse_q31>:
 8023734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023736:	465f      	mov	r7, fp
 8023738:	4656      	mov	r6, sl
 802373a:	464d      	mov	r5, r9
 802373c:	4644      	mov	r4, r8
 802373e:	000b      	movs	r3, r1
 8023740:	b4f0      	push	{r4, r5, r6, r7}
 8023742:	085b      	lsrs	r3, r3, #1
 8023744:	b08f      	sub	sp, #60	@ 0x3c
 8023746:	910a      	str	r1, [sp, #40]	@ 0x28
 8023748:	0007      	movs	r7, r0
 802374a:	9009      	str	r0, [sp, #36]	@ 0x24
 802374c:	0011      	movs	r1, r2
 802374e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023750:	930c      	str	r3, [sp, #48]	@ 0x30
 8023752:	2b00      	cmp	r3, #0
 8023754:	d100      	bne.n	8023758 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023756:	e0a0      	b.n	802389a <arm_cfft_radix4by2_inverse_q31+0x166>
 8023758:	0002      	movs	r2, r0
 802375a:	00db      	lsls	r3, r3, #3
 802375c:	3204      	adds	r2, #4
 802375e:	4691      	mov	r9, r2
 8023760:	4698      	mov	r8, r3
 8023762:	000a      	movs	r2, r1
 8023764:	464e      	mov	r6, r9
 8023766:	4442      	add	r2, r8
 8023768:	4699      	mov	r9, r3
 802376a:	4688      	mov	r8, r1
 802376c:	9208      	str	r2, [sp, #32]
 802376e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023770:	4643      	mov	r3, r8
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	469b      	mov	fp, r3
 8023776:	4643      	mov	r3, r8
 8023778:	685b      	ldr	r3, [r3, #4]
 802377a:	469a      	mov	sl, r3
 802377c:	683b      	ldr	r3, [r7, #0]
 802377e:	109c      	asrs	r4, r3, #2
 8023780:	464b      	mov	r3, r9
 8023782:	58fb      	ldr	r3, [r7, r3]
 8023784:	109a      	asrs	r2, r3, #2
 8023786:	18a3      	adds	r3, r4, r2
 8023788:	603b      	str	r3, [r7, #0]
 802378a:	6833      	ldr	r3, [r6, #0]
 802378c:	1aa4      	subs	r4, r4, r2
 802378e:	109d      	asrs	r5, r3, #2
 8023790:	464b      	mov	r3, r9
 8023792:	58f3      	ldr	r3, [r6, r3]
 8023794:	17e2      	asrs	r2, r4, #31
 8023796:	109b      	asrs	r3, r3, #2
 8023798:	18e9      	adds	r1, r5, r3
 802379a:	6031      	str	r1, [r6, #0]
 802379c:	0011      	movs	r1, r2
 802379e:	465a      	mov	r2, fp
 80237a0:	17d2      	asrs	r2, r2, #31
 80237a2:	0010      	movs	r0, r2
 80237a4:	4652      	mov	r2, sl
 80237a6:	1aed      	subs	r5, r5, r3
 80237a8:	17eb      	asrs	r3, r5, #31
 80237aa:	17d2      	asrs	r2, r2, #31
 80237ac:	9307      	str	r3, [sp, #28]
 80237ae:	9204      	str	r2, [sp, #16]
 80237b0:	0003      	movs	r3, r0
 80237b2:	465a      	mov	r2, fp
 80237b4:	9006      	str	r0, [sp, #24]
 80237b6:	0020      	movs	r0, r4
 80237b8:	9105      	str	r1, [sp, #20]
 80237ba:	f7dc ff01 	bl	80005c0 <__aeabi_lmul>
 80237be:	2280      	movs	r2, #128	@ 0x80
 80237c0:	2300      	movs	r3, #0
 80237c2:	0612      	lsls	r2, r2, #24
 80237c4:	1880      	adds	r0, r0, r2
 80237c6:	4159      	adcs	r1, r3
 80237c8:	2300      	movs	r3, #0
 80237ca:	9101      	str	r1, [sp, #4]
 80237cc:	9300      	str	r3, [sp, #0]
 80237ce:	4652      	mov	r2, sl
 80237d0:	9b04      	ldr	r3, [sp, #16]
 80237d2:	0028      	movs	r0, r5
 80237d4:	17e9      	asrs	r1, r5, #31
 80237d6:	f7dc fef3 	bl	80005c0 <__aeabi_lmul>
 80237da:	9a00      	ldr	r2, [sp, #0]
 80237dc:	9b01      	ldr	r3, [sp, #4]
 80237de:	1a12      	subs	r2, r2, r0
 80237e0:	418b      	sbcs	r3, r1
 80237e2:	2080      	movs	r0, #128	@ 0x80
 80237e4:	2100      	movs	r1, #0
 80237e6:	0600      	lsls	r0, r0, #24
 80237e8:	1812      	adds	r2, r2, r0
 80237ea:	414b      	adcs	r3, r1
 80237ec:	464a      	mov	r2, r9
 80237ee:	005b      	lsls	r3, r3, #1
 80237f0:	50bb      	str	r3, [r7, r2]
 80237f2:	4658      	mov	r0, fp
 80237f4:	002a      	movs	r2, r5
 80237f6:	9b07      	ldr	r3, [sp, #28]
 80237f8:	9906      	ldr	r1, [sp, #24]
 80237fa:	f7dc fee1 	bl	80005c0 <__aeabi_lmul>
 80237fe:	2280      	movs	r2, #128	@ 0x80
 8023800:	2300      	movs	r3, #0
 8023802:	0612      	lsls	r2, r2, #24
 8023804:	1880      	adds	r0, r0, r2
 8023806:	4159      	adcs	r1, r3
 8023808:	2000      	movs	r0, #0
 802380a:	9103      	str	r1, [sp, #12]
 802380c:	9002      	str	r0, [sp, #8]
 802380e:	4652      	mov	r2, sl
 8023810:	9b04      	ldr	r3, [sp, #16]
 8023812:	0020      	movs	r0, r4
 8023814:	9905      	ldr	r1, [sp, #20]
 8023816:	f7dc fed3 	bl	80005c0 <__aeabi_lmul>
 802381a:	9b02      	ldr	r3, [sp, #8]
 802381c:	9c03      	ldr	r4, [sp, #12]
 802381e:	18c0      	adds	r0, r0, r3
 8023820:	4161      	adcs	r1, r4
 8023822:	2380      	movs	r3, #128	@ 0x80
 8023824:	2400      	movs	r4, #0
 8023826:	061b      	lsls	r3, r3, #24
 8023828:	18c0      	adds	r0, r0, r3
 802382a:	4161      	adcs	r1, r4
 802382c:	464a      	mov	r2, r9
 802382e:	004b      	lsls	r3, r1, #1
 8023830:	50b3      	str	r3, [r6, r2]
 8023832:	2308      	movs	r3, #8
 8023834:	469c      	mov	ip, r3
 8023836:	9b08      	ldr	r3, [sp, #32]
 8023838:	44e0      	add	r8, ip
 802383a:	3708      	adds	r7, #8
 802383c:	3608      	adds	r6, #8
 802383e:	4598      	cmp	r8, r3
 8023840:	d196      	bne.n	8023770 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023842:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023844:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023846:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023848:	2302      	movs	r3, #2
 802384a:	003a      	movs	r2, r7
 802384c:	0029      	movs	r1, r5
 802384e:	0020      	movs	r0, r4
 8023850:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023852:	f000 fb3b 	bl	8023ecc <arm_radix4_butterfly_inverse_q31>
 8023856:	46a4      	mov	ip, r4
 8023858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802385a:	2302      	movs	r3, #2
 802385c:	0088      	lsls	r0, r1, #2
 802385e:	4460      	add	r0, ip
 8023860:	003a      	movs	r2, r7
 8023862:	0029      	movs	r1, r5
 8023864:	f000 fb32 	bl	8023ecc <arm_radix4_butterfly_inverse_q31>
 8023868:	46a4      	mov	ip, r4
 802386a:	0128      	lsls	r0, r5, #4
 802386c:	4460      	add	r0, ip
 802386e:	6833      	ldr	r3, [r6, #0]
 8023870:	005b      	lsls	r3, r3, #1
 8023872:	6033      	str	r3, [r6, #0]
 8023874:	6873      	ldr	r3, [r6, #4]
 8023876:	005b      	lsls	r3, r3, #1
 8023878:	6073      	str	r3, [r6, #4]
 802387a:	68b3      	ldr	r3, [r6, #8]
 802387c:	005b      	lsls	r3, r3, #1
 802387e:	60b3      	str	r3, [r6, #8]
 8023880:	68f3      	ldr	r3, [r6, #12]
 8023882:	005b      	lsls	r3, r3, #1
 8023884:	60f3      	str	r3, [r6, #12]
 8023886:	3610      	adds	r6, #16
 8023888:	42b0      	cmp	r0, r6
 802388a:	d1f0      	bne.n	802386e <arm_cfft_radix4by2_inverse_q31+0x13a>
 802388c:	b00f      	add	sp, #60	@ 0x3c
 802388e:	bc3c      	pop	{r2, r3, r4, r5}
 8023890:	4690      	mov	r8, r2
 8023892:	4699      	mov	r9, r3
 8023894:	46a2      	mov	sl, r4
 8023896:	46ab      	mov	fp, r5
 8023898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802389a:	2302      	movs	r3, #2
 802389c:	2100      	movs	r1, #0
 802389e:	0015      	movs	r5, r2
 80238a0:	f000 fb14 	bl	8023ecc <arm_radix4_butterfly_inverse_q31>
 80238a4:	46bc      	mov	ip, r7
 80238a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80238a8:	002a      	movs	r2, r5
 80238aa:	0098      	lsls	r0, r3, #2
 80238ac:	4460      	add	r0, ip
 80238ae:	2302      	movs	r3, #2
 80238b0:	2100      	movs	r1, #0
 80238b2:	f000 fb0b 	bl	8023ecc <arm_radix4_butterfly_inverse_q31>
 80238b6:	e7e9      	b.n	802388c <arm_cfft_radix4by2_inverse_q31+0x158>

080238b8 <arm_cfft_q31>:
 80238b8:	b570      	push	{r4, r5, r6, lr}
 80238ba:	001e      	movs	r6, r3
 80238bc:	2380      	movs	r3, #128	@ 0x80
 80238be:	000d      	movs	r5, r1
 80238c0:	0004      	movs	r4, r0
 80238c2:	8801      	ldrh	r1, [r0, #0]
 80238c4:	005b      	lsls	r3, r3, #1
 80238c6:	2a01      	cmp	r2, #1
 80238c8:	d028      	beq.n	802391c <arm_cfft_q31+0x64>
 80238ca:	4299      	cmp	r1, r3
 80238cc:	d020      	beq.n	8023910 <arm_cfft_q31+0x58>
 80238ce:	d812      	bhi.n	80238f6 <arm_cfft_q31+0x3e>
 80238d0:	2920      	cmp	r1, #32
 80238d2:	d004      	beq.n	80238de <arm_cfft_q31+0x26>
 80238d4:	d949      	bls.n	802396a <arm_cfft_q31+0xb2>
 80238d6:	2940      	cmp	r1, #64	@ 0x40
 80238d8:	d01a      	beq.n	8023910 <arm_cfft_q31+0x58>
 80238da:	2980      	cmp	r1, #128	@ 0x80
 80238dc:	d103      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 80238de:	6862      	ldr	r2, [r4, #4]
 80238e0:	0028      	movs	r0, r5
 80238e2:	f7ff fe65 	bl	80235b0 <arm_cfft_radix4by2_q31>
 80238e6:	2e00      	cmp	r6, #0
 80238e8:	d004      	beq.n	80238f4 <arm_cfft_q31+0x3c>
 80238ea:	68a2      	ldr	r2, [r4, #8]
 80238ec:	89a1      	ldrh	r1, [r4, #12]
 80238ee:	0028      	movs	r0, r5
 80238f0:	f7dc fc0a 	bl	8000108 <arm_bitreversal_32>
 80238f4:	bd70      	pop	{r4, r5, r6, pc}
 80238f6:	2380      	movs	r3, #128	@ 0x80
 80238f8:	00db      	lsls	r3, r3, #3
 80238fa:	4299      	cmp	r1, r3
 80238fc:	d008      	beq.n	8023910 <arm_cfft_q31+0x58>
 80238fe:	d92f      	bls.n	8023960 <arm_cfft_q31+0xa8>
 8023900:	2380      	movs	r3, #128	@ 0x80
 8023902:	011b      	lsls	r3, r3, #4
 8023904:	4299      	cmp	r1, r3
 8023906:	d0ea      	beq.n	80238de <arm_cfft_q31+0x26>
 8023908:	2380      	movs	r3, #128	@ 0x80
 802390a:	015b      	lsls	r3, r3, #5
 802390c:	4299      	cmp	r1, r3
 802390e:	d1ea      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 8023910:	2301      	movs	r3, #1
 8023912:	6862      	ldr	r2, [r4, #4]
 8023914:	0028      	movs	r0, r5
 8023916:	f000 f833 	bl	8023980 <arm_radix4_butterfly_q31>
 802391a:	e7e4      	b.n	80238e6 <arm_cfft_q31+0x2e>
 802391c:	4299      	cmp	r1, r3
 802391e:	d019      	beq.n	8023954 <arm_cfft_q31+0x9c>
 8023920:	d80b      	bhi.n	802393a <arm_cfft_q31+0x82>
 8023922:	2920      	cmp	r1, #32
 8023924:	d004      	beq.n	8023930 <arm_cfft_q31+0x78>
 8023926:	d928      	bls.n	802397a <arm_cfft_q31+0xc2>
 8023928:	2940      	cmp	r1, #64	@ 0x40
 802392a:	d013      	beq.n	8023954 <arm_cfft_q31+0x9c>
 802392c:	2980      	cmp	r1, #128	@ 0x80
 802392e:	d1da      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 8023930:	6862      	ldr	r2, [r4, #4]
 8023932:	0028      	movs	r0, r5
 8023934:	f7ff fefe 	bl	8023734 <arm_cfft_radix4by2_inverse_q31>
 8023938:	e7d5      	b.n	80238e6 <arm_cfft_q31+0x2e>
 802393a:	2380      	movs	r3, #128	@ 0x80
 802393c:	00db      	lsls	r3, r3, #3
 802393e:	4299      	cmp	r1, r3
 8023940:	d008      	beq.n	8023954 <arm_cfft_q31+0x9c>
 8023942:	d915      	bls.n	8023970 <arm_cfft_q31+0xb8>
 8023944:	2380      	movs	r3, #128	@ 0x80
 8023946:	011b      	lsls	r3, r3, #4
 8023948:	4299      	cmp	r1, r3
 802394a:	d0f1      	beq.n	8023930 <arm_cfft_q31+0x78>
 802394c:	2380      	movs	r3, #128	@ 0x80
 802394e:	015b      	lsls	r3, r3, #5
 8023950:	4299      	cmp	r1, r3
 8023952:	d1c8      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 8023954:	2301      	movs	r3, #1
 8023956:	6862      	ldr	r2, [r4, #4]
 8023958:	0028      	movs	r0, r5
 802395a:	f000 fab7 	bl	8023ecc <arm_radix4_butterfly_inverse_q31>
 802395e:	e7c2      	b.n	80238e6 <arm_cfft_q31+0x2e>
 8023960:	2380      	movs	r3, #128	@ 0x80
 8023962:	009b      	lsls	r3, r3, #2
 8023964:	4299      	cmp	r1, r3
 8023966:	d0ba      	beq.n	80238de <arm_cfft_q31+0x26>
 8023968:	e7bd      	b.n	80238e6 <arm_cfft_q31+0x2e>
 802396a:	2910      	cmp	r1, #16
 802396c:	d1bb      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 802396e:	e7cf      	b.n	8023910 <arm_cfft_q31+0x58>
 8023970:	2380      	movs	r3, #128	@ 0x80
 8023972:	009b      	lsls	r3, r3, #2
 8023974:	4299      	cmp	r1, r3
 8023976:	d0db      	beq.n	8023930 <arm_cfft_q31+0x78>
 8023978:	e7b5      	b.n	80238e6 <arm_cfft_q31+0x2e>
 802397a:	2910      	cmp	r1, #16
 802397c:	d1b3      	bne.n	80238e6 <arm_cfft_q31+0x2e>
 802397e:	e7e9      	b.n	8023954 <arm_cfft_q31+0x9c>

08023980 <arm_radix4_butterfly_q31>:
 8023980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023982:	464d      	mov	r5, r9
 8023984:	4644      	mov	r4, r8
 8023986:	465f      	mov	r7, fp
 8023988:	4656      	mov	r6, sl
 802398a:	469c      	mov	ip, r3
 802398c:	b4f0      	push	{r4, r5, r6, r7}
 802398e:	b0a7      	sub	sp, #156	@ 0x9c
 8023990:	9114      	str	r1, [sp, #80]	@ 0x50
 8023992:	0889      	lsrs	r1, r1, #2
 8023994:	9310      	str	r3, [sp, #64]	@ 0x40
 8023996:	00cb      	lsls	r3, r1, #3
 8023998:	0015      	movs	r5, r2
 802399a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802399c:	18c2      	adds	r2, r0, r3
 802399e:	000c      	movs	r4, r1
 80239a0:	469a      	mov	sl, r3
 80239a2:	9124      	str	r1, [sp, #144]	@ 0x90
 80239a4:	18d1      	adds	r1, r2, r3
 80239a6:	4663      	mov	r3, ip
 80239a8:	468b      	mov	fp, r1
 80239aa:	0119      	lsls	r1, r3, #4
 80239ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80239ae:	00d9      	lsls	r1, r3, #3
 80239b0:	005b      	lsls	r3, r3, #1
 80239b2:	4463      	add	r3, ip
 80239b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80239b6:	00d9      	lsls	r1, r3, #3
 80239b8:	465b      	mov	r3, fp
 80239ba:	44da      	add	sl, fp
 80239bc:	4690      	mov	r8, r2
 80239be:	4683      	mov	fp, r0
 80239c0:	4699      	mov	r9, r3
 80239c2:	9022      	str	r0, [sp, #136]	@ 0x88
 80239c4:	9025      	str	r0, [sp, #148]	@ 0x94
 80239c6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80239c8:	9502      	str	r5, [sp, #8]
 80239ca:	9500      	str	r5, [sp, #0]
 80239cc:	9501      	str	r5, [sp, #4]
 80239ce:	9407      	str	r4, [sp, #28]
 80239d0:	465b      	mov	r3, fp
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	4642      	mov	r2, r8
 80239d6:	111c      	asrs	r4, r3, #4
 80239d8:	464b      	mov	r3, r9
 80239da:	4658      	mov	r0, fp
 80239dc:	681b      	ldr	r3, [r3, #0]
 80239de:	6812      	ldr	r2, [r2, #0]
 80239e0:	111b      	asrs	r3, r3, #4
 80239e2:	18e7      	adds	r7, r4, r3
 80239e4:	1ae3      	subs	r3, r4, r3
 80239e6:	1114      	asrs	r4, r2, #4
 80239e8:	4652      	mov	r2, sl
 80239ea:	6840      	ldr	r0, [r0, #4]
 80239ec:	6812      	ldr	r2, [r2, #0]
 80239ee:	1105      	asrs	r5, r0, #4
 80239f0:	4648      	mov	r0, r9
 80239f2:	9303      	str	r3, [sp, #12]
 80239f4:	1113      	asrs	r3, r2, #4
 80239f6:	18e2      	adds	r2, r4, r3
 80239f8:	465c      	mov	r4, fp
 80239fa:	6840      	ldr	r0, [r0, #4]
 80239fc:	1103      	asrs	r3, r0, #4
 80239fe:	18ee      	adds	r6, r5, r3
 8023a00:	1ae8      	subs	r0, r5, r3
 8023a02:	18bb      	adds	r3, r7, r2
 8023a04:	6023      	str	r3, [r4, #0]
 8023a06:	4644      	mov	r4, r8
 8023a08:	6864      	ldr	r4, [r4, #4]
 8023a0a:	9004      	str	r0, [sp, #16]
 8023a0c:	1125      	asrs	r5, r4, #4
 8023a0e:	4654      	mov	r4, sl
 8023a10:	6864      	ldr	r4, [r4, #4]
 8023a12:	1123      	asrs	r3, r4, #4
 8023a14:	465c      	mov	r4, fp
 8023a16:	18eb      	adds	r3, r5, r3
 8023a18:	18f1      	adds	r1, r6, r3
 8023a1a:	6061      	str	r1, [r4, #4]
 8023a1c:	4655      	mov	r5, sl
 8023a1e:	4644      	mov	r4, r8
 8023a20:	686d      	ldr	r5, [r5, #4]
 8023a22:	6864      	ldr	r4, [r4, #4]
 8023a24:	1129      	asrs	r1, r5, #4
 8023a26:	1124      	asrs	r4, r4, #4
 8023a28:	1a64      	subs	r4, r4, r1
 8023a2a:	4641      	mov	r1, r8
 8023a2c:	6809      	ldr	r1, [r1, #0]
 8023a2e:	9405      	str	r4, [sp, #20]
 8023a30:	1108      	asrs	r0, r1, #4
 8023a32:	4651      	mov	r1, sl
 8023a34:	6809      	ldr	r1, [r1, #0]
 8023a36:	1abc      	subs	r4, r7, r2
 8023a38:	1109      	asrs	r1, r1, #4
 8023a3a:	1a41      	subs	r1, r0, r1
 8023a3c:	17e2      	asrs	r2, r4, #31
 8023a3e:	9106      	str	r1, [sp, #24]
 8023a40:	0011      	movs	r1, r2
 8023a42:	9a01      	ldr	r2, [sp, #4]
 8023a44:	9108      	str	r1, [sp, #32]
 8023a46:	6817      	ldr	r7, [r2, #0]
 8023a48:	17fd      	asrs	r5, r7, #31
 8023a4a:	0028      	movs	r0, r5
 8023a4c:	1af5      	subs	r5, r6, r3
 8023a4e:	17ee      	asrs	r6, r5, #31
 8023a50:	960a      	str	r6, [sp, #40]	@ 0x28
 8023a52:	6856      	ldr	r6, [r2, #4]
 8023a54:	9009      	str	r0, [sp, #36]	@ 0x24
 8023a56:	17f3      	asrs	r3, r6, #31
 8023a58:	003a      	movs	r2, r7
 8023a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a5c:	0003      	movs	r3, r0
 8023a5e:	0020      	movs	r0, r4
 8023a60:	f7dc fdae 	bl	80005c0 <__aeabi_lmul>
 8023a64:	0032      	movs	r2, r6
 8023a66:	17f3      	asrs	r3, r6, #31
 8023a68:	910c      	str	r1, [sp, #48]	@ 0x30
 8023a6a:	0028      	movs	r0, r5
 8023a6c:	17e9      	asrs	r1, r5, #31
 8023a6e:	f7dc fda7 	bl	80005c0 <__aeabi_lmul>
 8023a72:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023a74:	002a      	movs	r2, r5
 8023a76:	4684      	mov	ip, r0
 8023a78:	4640      	mov	r0, r8
 8023a7a:	4461      	add	r1, ip
 8023a7c:	0049      	lsls	r1, r1, #1
 8023a7e:	6001      	str	r1, [r0, #0]
 8023a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023a84:	0038      	movs	r0, r7
 8023a86:	f7dc fd9b 	bl	80005c0 <__aeabi_lmul>
 8023a8a:	0032      	movs	r2, r6
 8023a8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a8e:	000d      	movs	r5, r1
 8023a90:	0020      	movs	r0, r4
 8023a92:	9908      	ldr	r1, [sp, #32]
 8023a94:	f7dc fd94 	bl	80005c0 <__aeabi_lmul>
 8023a98:	4646      	mov	r6, r8
 8023a9a:	1a6d      	subs	r5, r5, r1
 8023a9c:	006d      	lsls	r5, r5, #1
 8023a9e:	6075      	str	r5, [r6, #4]
 8023aa0:	9903      	ldr	r1, [sp, #12]
 8023aa2:	9d05      	ldr	r5, [sp, #20]
 8023aa4:	000c      	movs	r4, r1
 8023aa6:	46ac      	mov	ip, r5
 8023aa8:	4464      	add	r4, ip
 8023aaa:	17e6      	asrs	r6, r4, #31
 8023aac:	0031      	movs	r1, r6
 8023aae:	9b00      	ldr	r3, [sp, #0]
 8023ab0:	9804      	ldr	r0, [sp, #16]
 8023ab2:	681e      	ldr	r6, [r3, #0]
 8023ab4:	17f7      	asrs	r7, r6, #31
 8023ab6:	9709      	str	r7, [sp, #36]	@ 0x24
 8023ab8:	9f06      	ldr	r7, [sp, #24]
 8023aba:	0032      	movs	r2, r6
 8023abc:	1bc7      	subs	r7, r0, r7
 8023abe:	17fd      	asrs	r5, r7, #31
 8023ac0:	950a      	str	r5, [sp, #40]	@ 0x28
 8023ac2:	685d      	ldr	r5, [r3, #4]
 8023ac4:	17f3      	asrs	r3, r6, #31
 8023ac6:	17e8      	asrs	r0, r5, #31
 8023ac8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023aca:	0020      	movs	r0, r4
 8023acc:	9108      	str	r1, [sp, #32]
 8023ace:	f7dc fd77 	bl	80005c0 <__aeabi_lmul>
 8023ad2:	002a      	movs	r2, r5
 8023ad4:	17eb      	asrs	r3, r5, #31
 8023ad6:	910c      	str	r1, [sp, #48]	@ 0x30
 8023ad8:	0038      	movs	r0, r7
 8023ada:	17f9      	asrs	r1, r7, #31
 8023adc:	f7dc fd70 	bl	80005c0 <__aeabi_lmul>
 8023ae0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023ae2:	003a      	movs	r2, r7
 8023ae4:	4684      	mov	ip, r0
 8023ae6:	4648      	mov	r0, r9
 8023ae8:	4461      	add	r1, ip
 8023aea:	0049      	lsls	r1, r1, #1
 8023aec:	6001      	str	r1, [r0, #0]
 8023aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023af0:	0030      	movs	r0, r6
 8023af2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023af4:	f7dc fd64 	bl	80005c0 <__aeabi_lmul>
 8023af8:	002a      	movs	r2, r5
 8023afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023afc:	000e      	movs	r6, r1
 8023afe:	0020      	movs	r0, r4
 8023b00:	9908      	ldr	r1, [sp, #32]
 8023b02:	f7dc fd5d 	bl	80005c0 <__aeabi_lmul>
 8023b06:	464c      	mov	r4, r9
 8023b08:	9d05      	ldr	r5, [sp, #20]
 8023b0a:	1a76      	subs	r6, r6, r1
 8023b0c:	9903      	ldr	r1, [sp, #12]
 8023b0e:	0076      	lsls	r6, r6, #1
 8023b10:	6066      	str	r6, [r4, #4]
 8023b12:	1b4c      	subs	r4, r1, r5
 8023b14:	9e06      	ldr	r6, [sp, #24]
 8023b16:	17e1      	asrs	r1, r4, #31
 8023b18:	9103      	str	r1, [sp, #12]
 8023b1a:	9902      	ldr	r1, [sp, #8]
 8023b1c:	46b4      	mov	ip, r6
 8023b1e:	680f      	ldr	r7, [r1, #0]
 8023b20:	9804      	ldr	r0, [sp, #16]
 8023b22:	17fd      	asrs	r5, r7, #31
 8023b24:	002b      	movs	r3, r5
 8023b26:	684e      	ldr	r6, [r1, #4]
 8023b28:	4460      	add	r0, ip
 8023b2a:	0005      	movs	r5, r0
 8023b2c:	17c0      	asrs	r0, r0, #31
 8023b2e:	9005      	str	r0, [sp, #20]
 8023b30:	17f0      	asrs	r0, r6, #31
 8023b32:	9006      	str	r0, [sp, #24]
 8023b34:	003a      	movs	r2, r7
 8023b36:	0020      	movs	r0, r4
 8023b38:	17e1      	asrs	r1, r4, #31
 8023b3a:	9304      	str	r3, [sp, #16]
 8023b3c:	f7dc fd40 	bl	80005c0 <__aeabi_lmul>
 8023b40:	0032      	movs	r2, r6
 8023b42:	9108      	str	r1, [sp, #32]
 8023b44:	17f3      	asrs	r3, r6, #31
 8023b46:	0028      	movs	r0, r5
 8023b48:	17e9      	asrs	r1, r5, #31
 8023b4a:	f7dc fd39 	bl	80005c0 <__aeabi_lmul>
 8023b4e:	9808      	ldr	r0, [sp, #32]
 8023b50:	002a      	movs	r2, r5
 8023b52:	4684      	mov	ip, r0
 8023b54:	4650      	mov	r0, sl
 8023b56:	4461      	add	r1, ip
 8023b58:	0049      	lsls	r1, r1, #1
 8023b5a:	6001      	str	r1, [r0, #0]
 8023b5c:	9b05      	ldr	r3, [sp, #20]
 8023b5e:	9904      	ldr	r1, [sp, #16]
 8023b60:	0038      	movs	r0, r7
 8023b62:	f7dc fd2d 	bl	80005c0 <__aeabi_lmul>
 8023b66:	0020      	movs	r0, r4
 8023b68:	2408      	movs	r4, #8
 8023b6a:	000d      	movs	r5, r1
 8023b6c:	0032      	movs	r2, r6
 8023b6e:	9b06      	ldr	r3, [sp, #24]
 8023b70:	9903      	ldr	r1, [sp, #12]
 8023b72:	f7dc fd25 	bl	80005c0 <__aeabi_lmul>
 8023b76:	46a4      	mov	ip, r4
 8023b78:	4650      	mov	r0, sl
 8023b7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023b7c:	44e3      	add	fp, ip
 8023b7e:	44e0      	add	r8, ip
 8023b80:	44e1      	add	r9, ip
 8023b82:	44e2      	add	sl, ip
 8023b84:	46a4      	mov	ip, r4
 8023b86:	1a6d      	subs	r5, r5, r1
 8023b88:	006d      	lsls	r5, r5, #1
 8023b8a:	9a01      	ldr	r2, [sp, #4]
 8023b8c:	6045      	str	r5, [r0, #4]
 8023b8e:	9807      	ldr	r0, [sp, #28]
 8023b90:	4462      	add	r2, ip
 8023b92:	3801      	subs	r0, #1
 8023b94:	9201      	str	r2, [sp, #4]
 8023b96:	9007      	str	r0, [sp, #28]
 8023b98:	9b00      	ldr	r3, [sp, #0]
 8023b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023b9c:	9902      	ldr	r1, [sp, #8]
 8023b9e:	4694      	mov	ip, r2
 8023ba0:	4463      	add	r3, ip
 8023ba2:	9300      	str	r3, [sp, #0]
 8023ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023ba6:	469c      	mov	ip, r3
 8023ba8:	4461      	add	r1, ip
 8023baa:	9102      	str	r1, [sp, #8]
 8023bac:	2800      	cmp	r0, #0
 8023bae:	d000      	beq.n	8023bb2 <arm_radix4_butterfly_q31+0x232>
 8023bb0:	e70e      	b.n	80239d0 <arm_radix4_butterfly_q31+0x50>
 8023bb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023bb4:	009b      	lsls	r3, r3, #2
 8023bb6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023bb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023bba:	9320      	str	r3, [sp, #128]	@ 0x80
 8023bbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023bbe:	2b04      	cmp	r3, #4
 8023bc0:	d800      	bhi.n	8023bc4 <arm_radix4_butterfly_q31+0x244>
 8023bc2:	e180      	b.n	8023ec6 <arm_radix4_butterfly_q31+0x546>
 8023bc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023bc6:	0893      	lsrs	r3, r2, #2
 8023bc8:	1e59      	subs	r1, r3, #1
 8023bca:	9321      	str	r3, [sp, #132]	@ 0x84
 8023bcc:	00db      	lsls	r3, r3, #3
 8023bce:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023bd0:	00d3      	lsls	r3, r2, #3
 8023bd2:	9300      	str	r3, [sp, #0]
 8023bd4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023bd6:	911a      	str	r1, [sp, #104]	@ 0x68
 8023bd8:	00da      	lsls	r2, r3, #3
 8023bda:	921e      	str	r2, [sp, #120]	@ 0x78
 8023bdc:	011a      	lsls	r2, r3, #4
 8023bde:	921d      	str	r2, [sp, #116]	@ 0x74
 8023be0:	001a      	movs	r2, r3
 8023be2:	4694      	mov	ip, r2
 8023be4:	005b      	lsls	r3, r3, #1
 8023be6:	4463      	add	r3, ip
 8023be8:	00db      	lsls	r3, r3, #3
 8023bea:	931c      	str	r3, [sp, #112]	@ 0x70
 8023bec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023bee:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023bf0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023bf2:	9318      	str	r3, [sp, #96]	@ 0x60
 8023bf4:	9319      	str	r3, [sp, #100]	@ 0x64
 8023bf6:	9316      	str	r3, [sp, #88]	@ 0x58
 8023bf8:	2300      	movs	r3, #0
 8023bfa:	9315      	str	r3, [sp, #84]	@ 0x54
 8023bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023bfe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023c00:	681a      	ldr	r2, [r3, #0]
 8023c02:	685b      	ldr	r3, [r3, #4]
 8023c04:	9205      	str	r2, [sp, #20]
 8023c06:	9306      	str	r3, [sp, #24]
 8023c08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023c0a:	468c      	mov	ip, r1
 8023c0c:	681a      	ldr	r2, [r3, #0]
 8023c0e:	685b      	ldr	r3, [r3, #4]
 8023c10:	9207      	str	r2, [sp, #28]
 8023c12:	9308      	str	r3, [sp, #32]
 8023c14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023c16:	681a      	ldr	r2, [r3, #0]
 8023c18:	685b      	ldr	r3, [r3, #4]
 8023c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c1c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023c20:	0013      	movs	r3, r2
 8023c22:	4463      	add	r3, ip
 8023c24:	4698      	mov	r8, r3
 8023c26:	0013      	movs	r3, r2
 8023c28:	4442      	add	r2, r8
 8023c2a:	4691      	mov	r9, r2
 8023c2c:	001a      	movs	r2, r3
 8023c2e:	444a      	add	r2, r9
 8023c30:	4692      	mov	sl, r2
 8023c32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023c34:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023c36:	4293      	cmp	r3, r2
 8023c38:	d800      	bhi.n	8023c3c <arm_radix4_butterfly_q31+0x2bc>
 8023c3a:	e0dd      	b.n	8023df8 <arm_radix4_butterfly_q31+0x478>
 8023c3c:	4694      	mov	ip, r2
 8023c3e:	468b      	mov	fp, r1
 8023c40:	4644      	mov	r4, r8
 8023c42:	4655      	mov	r5, sl
 8023c44:	9b07      	ldr	r3, [sp, #28]
 8023c46:	17db      	asrs	r3, r3, #31
 8023c48:	930c      	str	r3, [sp, #48]	@ 0x30
 8023c4a:	9b08      	ldr	r3, [sp, #32]
 8023c4c:	17db      	asrs	r3, r3, #31
 8023c4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023c50:	9b05      	ldr	r3, [sp, #20]
 8023c52:	17db      	asrs	r3, r3, #31
 8023c54:	930e      	str	r3, [sp, #56]	@ 0x38
 8023c56:	9b06      	ldr	r3, [sp, #24]
 8023c58:	17db      	asrs	r3, r3, #31
 8023c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c5e:	17db      	asrs	r3, r3, #31
 8023c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023c64:	17db      	asrs	r3, r3, #31
 8023c66:	9311      	str	r3, [sp, #68]	@ 0x44
 8023c68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023c6a:	4463      	add	r3, ip
 8023c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023c6e:	465b      	mov	r3, fp
 8023c70:	4659      	mov	r1, fp
 8023c72:	681a      	ldr	r2, [r3, #0]
 8023c74:	464b      	mov	r3, r9
 8023c76:	684f      	ldr	r7, [r1, #4]
 8023c78:	4649      	mov	r1, r9
 8023c7a:	681b      	ldr	r3, [r3, #0]
 8023c7c:	18d6      	adds	r6, r2, r3
 8023c7e:	1ad3      	subs	r3, r2, r3
 8023c80:	9301      	str	r3, [sp, #4]
 8023c82:	684b      	ldr	r3, [r1, #4]
 8023c84:	18f8      	adds	r0, r7, r3
 8023c86:	1af9      	subs	r1, r7, r3
 8023c88:	6827      	ldr	r7, [r4, #0]
 8023c8a:	9102      	str	r1, [sp, #8]
 8023c8c:	003a      	movs	r2, r7
 8023c8e:	682f      	ldr	r7, [r5, #0]
 8023c90:	46bc      	mov	ip, r7
 8023c92:	465f      	mov	r7, fp
 8023c94:	4462      	add	r2, ip
 8023c96:	18b3      	adds	r3, r6, r2
 8023c98:	109b      	asrs	r3, r3, #2
 8023c9a:	603b      	str	r3, [r7, #0]
 8023c9c:	6867      	ldr	r7, [r4, #4]
 8023c9e:	1ab6      	subs	r6, r6, r2
 8023ca0:	46b8      	mov	r8, r7
 8023ca2:	686f      	ldr	r7, [r5, #4]
 8023ca4:	17f2      	asrs	r2, r6, #31
 8023ca6:	46bc      	mov	ip, r7
 8023ca8:	44e0      	add	r8, ip
 8023caa:	4643      	mov	r3, r8
 8023cac:	465f      	mov	r7, fp
 8023cae:	18c1      	adds	r1, r0, r3
 8023cb0:	1089      	asrs	r1, r1, #2
 8023cb2:	6079      	str	r1, [r7, #4]
 8023cb4:	9900      	ldr	r1, [sp, #0]
 8023cb6:	4690      	mov	r8, r2
 8023cb8:	468c      	mov	ip, r1
 8023cba:	6867      	ldr	r7, [r4, #4]
 8023cbc:	6869      	ldr	r1, [r5, #4]
 8023cbe:	44e3      	add	fp, ip
 8023cc0:	1a7f      	subs	r7, r7, r1
 8023cc2:	9703      	str	r7, [sp, #12]
 8023cc4:	6829      	ldr	r1, [r5, #0]
 8023cc6:	6827      	ldr	r7, [r4, #0]
 8023cc8:	1a7f      	subs	r7, r7, r1
 8023cca:	9704      	str	r7, [sp, #16]
 8023ccc:	1ac7      	subs	r7, r0, r3
 8023cce:	17fa      	asrs	r2, r7, #31
 8023cd0:	4692      	mov	sl, r2
 8023cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cd4:	9a07      	ldr	r2, [sp, #28]
 8023cd6:	0030      	movs	r0, r6
 8023cd8:	4641      	mov	r1, r8
 8023cda:	f7dc fc71 	bl	80005c0 <__aeabi_lmul>
 8023cde:	9a08      	ldr	r2, [sp, #32]
 8023ce0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ce2:	9112      	str	r1, [sp, #72]	@ 0x48
 8023ce4:	0038      	movs	r0, r7
 8023ce6:	4651      	mov	r1, sl
 8023ce8:	f7dc fc6a 	bl	80005c0 <__aeabi_lmul>
 8023cec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023cee:	9a07      	ldr	r2, [sp, #28]
 8023cf0:	4684      	mov	ip, r0
 8023cf2:	4461      	add	r1, ip
 8023cf4:	1049      	asrs	r1, r1, #1
 8023cf6:	6021      	str	r1, [r4, #0]
 8023cf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cfa:	0038      	movs	r0, r7
 8023cfc:	4651      	mov	r1, sl
 8023cfe:	f7dc fc5f 	bl	80005c0 <__aeabi_lmul>
 8023d02:	9a08      	ldr	r2, [sp, #32]
 8023d04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d06:	000f      	movs	r7, r1
 8023d08:	0030      	movs	r0, r6
 8023d0a:	4641      	mov	r1, r8
 8023d0c:	f7dc fc58 	bl	80005c0 <__aeabi_lmul>
 8023d10:	9b00      	ldr	r3, [sp, #0]
 8023d12:	9a01      	ldr	r2, [sp, #4]
 8023d14:	469c      	mov	ip, r3
 8023d16:	9803      	ldr	r0, [sp, #12]
 8023d18:	1a7f      	subs	r7, r7, r1
 8023d1a:	107f      	asrs	r7, r7, #1
 8023d1c:	6067      	str	r7, [r4, #4]
 8023d1e:	0016      	movs	r6, r2
 8023d20:	4464      	add	r4, ip
 8023d22:	4684      	mov	ip, r0
 8023d24:	4466      	add	r6, ip
 8023d26:	17f2      	asrs	r2, r6, #31
 8023d28:	4690      	mov	r8, r2
 8023d2a:	9902      	ldr	r1, [sp, #8]
 8023d2c:	9f04      	ldr	r7, [sp, #16]
 8023d2e:	0030      	movs	r0, r6
 8023d30:	1bcf      	subs	r7, r1, r7
 8023d32:	17fa      	asrs	r2, r7, #31
 8023d34:	4692      	mov	sl, r2
 8023d36:	4641      	mov	r1, r8
 8023d38:	9a05      	ldr	r2, [sp, #20]
 8023d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d3c:	f7dc fc40 	bl	80005c0 <__aeabi_lmul>
 8023d40:	9a06      	ldr	r2, [sp, #24]
 8023d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023d44:	9112      	str	r1, [sp, #72]	@ 0x48
 8023d46:	0038      	movs	r0, r7
 8023d48:	4651      	mov	r1, sl
 8023d4a:	f7dc fc39 	bl	80005c0 <__aeabi_lmul>
 8023d4e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023d50:	9a05      	ldr	r2, [sp, #20]
 8023d52:	4684      	mov	ip, r0
 8023d54:	4648      	mov	r0, r9
 8023d56:	4461      	add	r1, ip
 8023d58:	1049      	asrs	r1, r1, #1
 8023d5a:	6001      	str	r1, [r0, #0]
 8023d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d5e:	0038      	movs	r0, r7
 8023d60:	4651      	mov	r1, sl
 8023d62:	f7dc fc2d 	bl	80005c0 <__aeabi_lmul>
 8023d66:	9a06      	ldr	r2, [sp, #24]
 8023d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023d6a:	000f      	movs	r7, r1
 8023d6c:	0030      	movs	r0, r6
 8023d6e:	4641      	mov	r1, r8
 8023d70:	f7dc fc26 	bl	80005c0 <__aeabi_lmul>
 8023d74:	464e      	mov	r6, r9
 8023d76:	9a00      	ldr	r2, [sp, #0]
 8023d78:	9b01      	ldr	r3, [sp, #4]
 8023d7a:	4694      	mov	ip, r2
 8023d7c:	9803      	ldr	r0, [sp, #12]
 8023d7e:	1a7f      	subs	r7, r7, r1
 8023d80:	107f      	asrs	r7, r7, #1
 8023d82:	6077      	str	r7, [r6, #4]
 8023d84:	1a1e      	subs	r6, r3, r0
 8023d86:	9b04      	ldr	r3, [sp, #16]
 8023d88:	44e1      	add	r9, ip
 8023d8a:	469c      	mov	ip, r3
 8023d8c:	17f0      	asrs	r0, r6, #31
 8023d8e:	4680      	mov	r8, r0
 8023d90:	9902      	ldr	r1, [sp, #8]
 8023d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023d94:	4461      	add	r1, ip
 8023d96:	17cb      	asrs	r3, r1, #31
 8023d98:	000f      	movs	r7, r1
 8023d9a:	469a      	mov	sl, r3
 8023d9c:	0030      	movs	r0, r6
 8023d9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023da0:	4641      	mov	r1, r8
 8023da2:	f7dc fc0d 	bl	80005c0 <__aeabi_lmul>
 8023da6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023daa:	9101      	str	r1, [sp, #4]
 8023dac:	0038      	movs	r0, r7
 8023dae:	4651      	mov	r1, sl
 8023db0:	f7dc fc06 	bl	80005c0 <__aeabi_lmul>
 8023db4:	9801      	ldr	r0, [sp, #4]
 8023db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023db8:	4684      	mov	ip, r0
 8023dba:	4461      	add	r1, ip
 8023dbc:	1049      	asrs	r1, r1, #1
 8023dbe:	6029      	str	r1, [r5, #0]
 8023dc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023dc2:	0038      	movs	r0, r7
 8023dc4:	4651      	mov	r1, sl
 8023dc6:	f7dc fbfb 	bl	80005c0 <__aeabi_lmul>
 8023dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023dcc:	000f      	movs	r7, r1
 8023dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023dd0:	0030      	movs	r0, r6
 8023dd2:	4641      	mov	r1, r8
 8023dd4:	f7dc fbf4 	bl	80005c0 <__aeabi_lmul>
 8023dd8:	1a7f      	subs	r7, r7, r1
 8023dda:	107f      	asrs	r7, r7, #1
 8023ddc:	606f      	str	r7, [r5, #4]
 8023dde:	9a00      	ldr	r2, [sp, #0]
 8023de0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023de2:	4694      	mov	ip, r2
 8023de4:	4465      	add	r5, ip
 8023de6:	468c      	mov	ip, r1
 8023de8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023dea:	0013      	movs	r3, r2
 8023dec:	4462      	add	r2, ip
 8023dee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023df0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023df2:	429a      	cmp	r2, r3
 8023df4:	d900      	bls.n	8023df8 <arm_radix4_butterfly_q31+0x478>
 8023df6:	e73a      	b.n	8023c6e <arm_radix4_butterfly_q31+0x2ee>
 8023df8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023dfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023dfc:	468c      	mov	ip, r1
 8023dfe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023e00:	4462      	add	r2, ip
 8023e02:	468c      	mov	ip, r1
 8023e04:	9216      	str	r2, [sp, #88]	@ 0x58
 8023e06:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023e08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023e0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023e0c:	4462      	add	r2, ip
 8023e0e:	468c      	mov	ip, r1
 8023e10:	9219      	str	r2, [sp, #100]	@ 0x64
 8023e12:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023e14:	3301      	adds	r3, #1
 8023e16:	4462      	add	r2, ip
 8023e18:	9218      	str	r2, [sp, #96]	@ 0x60
 8023e1a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8023e1e:	3208      	adds	r2, #8
 8023e20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023e22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023e24:	4293      	cmp	r3, r2
 8023e26:	d800      	bhi.n	8023e2a <arm_radix4_butterfly_q31+0x4aa>
 8023e28:	e6e8      	b.n	8023bfc <arm_radix4_butterfly_q31+0x27c>
 8023e2a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023e2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023e2e:	009b      	lsls	r3, r3, #2
 8023e30:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023e32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023e34:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023e36:	089b      	lsrs	r3, r3, #2
 8023e38:	9320      	str	r3, [sp, #128]	@ 0x80
 8023e3a:	2b04      	cmp	r3, #4
 8023e3c:	d900      	bls.n	8023e40 <arm_radix4_butterfly_q31+0x4c0>
 8023e3e:	e6c1      	b.n	8023bc4 <arm_radix4_butterfly_q31+0x244>
 8023e40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023e42:	469a      	mov	sl, r3
 8023e44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023e46:	691c      	ldr	r4, [r3, #16]
 8023e48:	685a      	ldr	r2, [r3, #4]
 8023e4a:	46a1      	mov	r9, r4
 8023e4c:	4690      	mov	r8, r2
 8023e4e:	6819      	ldr	r1, [r3, #0]
 8023e50:	689a      	ldr	r2, [r3, #8]
 8023e52:	699f      	ldr	r7, [r3, #24]
 8023e54:	188d      	adds	r5, r1, r2
 8023e56:	444d      	add	r5, r9
 8023e58:	19ed      	adds	r5, r5, r7
 8023e5a:	69de      	ldr	r6, [r3, #28]
 8023e5c:	601d      	str	r5, [r3, #0]
 8023e5e:	4645      	mov	r5, r8
 8023e60:	46b4      	mov	ip, r6
 8023e62:	68d8      	ldr	r0, [r3, #12]
 8023e64:	695c      	ldr	r4, [r3, #20]
 8023e66:	182d      	adds	r5, r5, r0
 8023e68:	192d      	adds	r5, r5, r4
 8023e6a:	4465      	add	r5, ip
 8023e6c:	605d      	str	r5, [r3, #4]
 8023e6e:	1a8d      	subs	r5, r1, r2
 8023e70:	444d      	add	r5, r9
 8023e72:	1bed      	subs	r5, r5, r7
 8023e74:	609d      	str	r5, [r3, #8]
 8023e76:	4645      	mov	r5, r8
 8023e78:	1a2d      	subs	r5, r5, r0
 8023e7a:	192d      	adds	r5, r5, r4
 8023e7c:	1bad      	subs	r5, r5, r6
 8023e7e:	464e      	mov	r6, r9
 8023e80:	60dd      	str	r5, [r3, #12]
 8023e82:	180d      	adds	r5, r1, r0
 8023e84:	1bad      	subs	r5, r5, r6
 8023e86:	4666      	mov	r6, ip
 8023e88:	1bad      	subs	r5, r5, r6
 8023e8a:	611d      	str	r5, [r3, #16]
 8023e8c:	4645      	mov	r5, r8
 8023e8e:	1aad      	subs	r5, r5, r2
 8023e90:	4442      	add	r2, r8
 8023e92:	1b12      	subs	r2, r2, r4
 8023e94:	1bd2      	subs	r2, r2, r7
 8023e96:	1a08      	subs	r0, r1, r0
 8023e98:	61da      	str	r2, [r3, #28]
 8023e9a:	4649      	mov	r1, r9
 8023e9c:	2201      	movs	r2, #1
 8023e9e:	1a41      	subs	r1, r0, r1
 8023ea0:	4252      	negs	r2, r2
 8023ea2:	4461      	add	r1, ip
 8023ea4:	4694      	mov	ip, r2
 8023ea6:	44e2      	add	sl, ip
 8023ea8:	4652      	mov	r2, sl
 8023eaa:	1b2d      	subs	r5, r5, r4
 8023eac:	19ed      	adds	r5, r5, r7
 8023eae:	615d      	str	r5, [r3, #20]
 8023eb0:	6199      	str	r1, [r3, #24]
 8023eb2:	3320      	adds	r3, #32
 8023eb4:	2a00      	cmp	r2, #0
 8023eb6:	d1c6      	bne.n	8023e46 <arm_radix4_butterfly_q31+0x4c6>
 8023eb8:	b027      	add	sp, #156	@ 0x9c
 8023eba:	bc3c      	pop	{r2, r3, r4, r5}
 8023ebc:	4690      	mov	r8, r2
 8023ebe:	4699      	mov	r9, r3
 8023ec0:	46a2      	mov	sl, r4
 8023ec2:	46ab      	mov	fp, r5
 8023ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ec6:	469a      	mov	sl, r3
 8023ec8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023eca:	e7bc      	b.n	8023e46 <arm_radix4_butterfly_q31+0x4c6>

08023ecc <arm_radix4_butterfly_inverse_q31>:
 8023ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ece:	464d      	mov	r5, r9
 8023ed0:	4644      	mov	r4, r8
 8023ed2:	465f      	mov	r7, fp
 8023ed4:	4656      	mov	r6, sl
 8023ed6:	b4f0      	push	{r4, r5, r6, r7}
 8023ed8:	b0a7      	sub	sp, #156	@ 0x9c
 8023eda:	469c      	mov	ip, r3
 8023edc:	9114      	str	r1, [sp, #80]	@ 0x50
 8023ede:	0889      	lsrs	r1, r1, #2
 8023ee0:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ee2:	00cb      	lsls	r3, r1, #3
 8023ee4:	0015      	movs	r5, r2
 8023ee6:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023ee8:	18c2      	adds	r2, r0, r3
 8023eea:	000c      	movs	r4, r1
 8023eec:	9124      	str	r1, [sp, #144]	@ 0x90
 8023eee:	18d1      	adds	r1, r2, r3
 8023ef0:	468b      	mov	fp, r1
 8023ef2:	469a      	mov	sl, r3
 8023ef4:	4663      	mov	r3, ip
 8023ef6:	44da      	add	sl, fp
 8023ef8:	46d0      	mov	r8, sl
 8023efa:	4681      	mov	r9, r0
 8023efc:	4692      	mov	sl, r2
 8023efe:	0119      	lsls	r1, r3, #4
 8023f00:	910d      	str	r1, [sp, #52]	@ 0x34
 8023f02:	00d9      	lsls	r1, r3, #3
 8023f04:	005b      	lsls	r3, r3, #1
 8023f06:	4463      	add	r3, ip
 8023f08:	910e      	str	r1, [sp, #56]	@ 0x38
 8023f0a:	00d9      	lsls	r1, r3, #3
 8023f0c:	9022      	str	r0, [sp, #136]	@ 0x88
 8023f0e:	9025      	str	r0, [sp, #148]	@ 0x94
 8023f10:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023f12:	9502      	str	r5, [sp, #8]
 8023f14:	9500      	str	r5, [sp, #0]
 8023f16:	9501      	str	r5, [sp, #4]
 8023f18:	9409      	str	r4, [sp, #36]	@ 0x24
 8023f1a:	464b      	mov	r3, r9
 8023f1c:	681b      	ldr	r3, [r3, #0]
 8023f1e:	4652      	mov	r2, sl
 8023f20:	111c      	asrs	r4, r3, #4
 8023f22:	465b      	mov	r3, fp
 8023f24:	4648      	mov	r0, r9
 8023f26:	681b      	ldr	r3, [r3, #0]
 8023f28:	6812      	ldr	r2, [r2, #0]
 8023f2a:	6840      	ldr	r0, [r0, #4]
 8023f2c:	111b      	asrs	r3, r3, #4
 8023f2e:	18e7      	adds	r7, r4, r3
 8023f30:	1ae3      	subs	r3, r4, r3
 8023f32:	1114      	asrs	r4, r2, #4
 8023f34:	4642      	mov	r2, r8
 8023f36:	1105      	asrs	r5, r0, #4
 8023f38:	4658      	mov	r0, fp
 8023f3a:	6812      	ldr	r2, [r2, #0]
 8023f3c:	6840      	ldr	r0, [r0, #4]
 8023f3e:	9303      	str	r3, [sp, #12]
 8023f40:	1113      	asrs	r3, r2, #4
 8023f42:	18e2      	adds	r2, r4, r3
 8023f44:	1103      	asrs	r3, r0, #4
 8023f46:	18ee      	adds	r6, r5, r3
 8023f48:	1ae8      	subs	r0, r5, r3
 8023f4a:	464d      	mov	r5, r9
 8023f4c:	18bb      	adds	r3, r7, r2
 8023f4e:	602b      	str	r3, [r5, #0]
 8023f50:	4641      	mov	r1, r8
 8023f52:	4655      	mov	r5, sl
 8023f54:	6849      	ldr	r1, [r1, #4]
 8023f56:	686d      	ldr	r5, [r5, #4]
 8023f58:	110b      	asrs	r3, r1, #4
 8023f5a:	112d      	asrs	r5, r5, #4
 8023f5c:	18eb      	adds	r3, r5, r3
 8023f5e:	464d      	mov	r5, r9
 8023f60:	18f1      	adds	r1, r6, r3
 8023f62:	6069      	str	r1, [r5, #4]
 8023f64:	4655      	mov	r5, sl
 8023f66:	686d      	ldr	r5, [r5, #4]
 8023f68:	9004      	str	r0, [sp, #16]
 8023f6a:	112c      	asrs	r4, r5, #4
 8023f6c:	4645      	mov	r5, r8
 8023f6e:	686d      	ldr	r5, [r5, #4]
 8023f70:	1129      	asrs	r1, r5, #4
 8023f72:	1a65      	subs	r5, r4, r1
 8023f74:	4651      	mov	r1, sl
 8023f76:	6809      	ldr	r1, [r1, #0]
 8023f78:	1abc      	subs	r4, r7, r2
 8023f7a:	1108      	asrs	r0, r1, #4
 8023f7c:	4641      	mov	r1, r8
 8023f7e:	17e2      	asrs	r2, r4, #31
 8023f80:	6809      	ldr	r1, [r1, #0]
 8023f82:	9207      	str	r2, [sp, #28]
 8023f84:	9a01      	ldr	r2, [sp, #4]
 8023f86:	1109      	asrs	r1, r1, #4
 8023f88:	6817      	ldr	r7, [r2, #0]
 8023f8a:	1a41      	subs	r1, r0, r1
 8023f8c:	9106      	str	r1, [sp, #24]
 8023f8e:	0039      	movs	r1, r7
 8023f90:	17ff      	asrs	r7, r7, #31
 8023f92:	0038      	movs	r0, r7
 8023f94:	9505      	str	r5, [sp, #20]
 8023f96:	1af5      	subs	r5, r6, r3
 8023f98:	17ef      	asrs	r7, r5, #31
 8023f9a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8023f9c:	6857      	ldr	r7, [r2, #4]
 8023f9e:	0003      	movs	r3, r0
 8023fa0:	17fe      	asrs	r6, r7, #31
 8023fa2:	000a      	movs	r2, r1
 8023fa4:	9108      	str	r1, [sp, #32]
 8023fa6:	900a      	str	r0, [sp, #40]	@ 0x28
 8023fa8:	17e1      	asrs	r1, r4, #31
 8023faa:	0020      	movs	r0, r4
 8023fac:	960c      	str	r6, [sp, #48]	@ 0x30
 8023fae:	f7dc fb07 	bl	80005c0 <__aeabi_lmul>
 8023fb2:	003a      	movs	r2, r7
 8023fb4:	17fb      	asrs	r3, r7, #31
 8023fb6:	000e      	movs	r6, r1
 8023fb8:	0028      	movs	r0, r5
 8023fba:	17e9      	asrs	r1, r5, #31
 8023fbc:	f7dc fb00 	bl	80005c0 <__aeabi_lmul>
 8023fc0:	4653      	mov	r3, sl
 8023fc2:	1a76      	subs	r6, r6, r1
 8023fc4:	0076      	lsls	r6, r6, #1
 8023fc6:	601e      	str	r6, [r3, #0]
 8023fc8:	002a      	movs	r2, r5
 8023fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fcc:	9808      	ldr	r0, [sp, #32]
 8023fce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023fd0:	f7dc faf6 	bl	80005c0 <__aeabi_lmul>
 8023fd4:	003a      	movs	r2, r7
 8023fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023fd8:	000d      	movs	r5, r1
 8023fda:	0020      	movs	r0, r4
 8023fdc:	9907      	ldr	r1, [sp, #28]
 8023fde:	f7dc faef 	bl	80005c0 <__aeabi_lmul>
 8023fe2:	4657      	mov	r7, sl
 8023fe4:	186d      	adds	r5, r5, r1
 8023fe6:	006d      	lsls	r5, r5, #1
 8023fe8:	607d      	str	r5, [r7, #4]
 8023fea:	9b03      	ldr	r3, [sp, #12]
 8023fec:	9e06      	ldr	r6, [sp, #24]
 8023fee:	9d05      	ldr	r5, [sp, #20]
 8023ff0:	46b4      	mov	ip, r6
 8023ff2:	1b5d      	subs	r5, r3, r5
 8023ff4:	9b00      	ldr	r3, [sp, #0]
 8023ff6:	17ef      	asrs	r7, r5, #31
 8023ff8:	0039      	movs	r1, r7
 8023ffa:	681f      	ldr	r7, [r3, #0]
 8023ffc:	17fc      	asrs	r4, r7, #31
 8023ffe:	0020      	movs	r0, r4
 8024000:	9c04      	ldr	r4, [sp, #16]
 8024002:	4464      	add	r4, ip
 8024004:	17e6      	asrs	r6, r4, #31
 8024006:	9407      	str	r4, [sp, #28]
 8024008:	9608      	str	r6, [sp, #32]
 802400a:	685e      	ldr	r6, [r3, #4]
 802400c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802400e:	17f2      	asrs	r2, r6, #31
 8024010:	0003      	movs	r3, r0
 8024012:	920c      	str	r2, [sp, #48]	@ 0x30
 8024014:	0028      	movs	r0, r5
 8024016:	003a      	movs	r2, r7
 8024018:	910a      	str	r1, [sp, #40]	@ 0x28
 802401a:	f7dc fad1 	bl	80005c0 <__aeabi_lmul>
 802401e:	0032      	movs	r2, r6
 8024020:	17f3      	asrs	r3, r6, #31
 8024022:	9807      	ldr	r0, [sp, #28]
 8024024:	000c      	movs	r4, r1
 8024026:	9908      	ldr	r1, [sp, #32]
 8024028:	f7dc faca 	bl	80005c0 <__aeabi_lmul>
 802402c:	4658      	mov	r0, fp
 802402e:	1a64      	subs	r4, r4, r1
 8024030:	0064      	lsls	r4, r4, #1
 8024032:	9a07      	ldr	r2, [sp, #28]
 8024034:	6004      	str	r4, [r0, #0]
 8024036:	9b08      	ldr	r3, [sp, #32]
 8024038:	0038      	movs	r0, r7
 802403a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802403c:	f7dc fac0 	bl	80005c0 <__aeabi_lmul>
 8024040:	0032      	movs	r2, r6
 8024042:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024044:	000c      	movs	r4, r1
 8024046:	0028      	movs	r0, r5
 8024048:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802404a:	f7dc fab9 	bl	80005c0 <__aeabi_lmul>
 802404e:	9d05      	ldr	r5, [sp, #20]
 8024050:	465f      	mov	r7, fp
 8024052:	46ac      	mov	ip, r5
 8024054:	1864      	adds	r4, r4, r1
 8024056:	9903      	ldr	r1, [sp, #12]
 8024058:	0064      	lsls	r4, r4, #1
 802405a:	4461      	add	r1, ip
 802405c:	607c      	str	r4, [r7, #4]
 802405e:	000c      	movs	r4, r1
 8024060:	17c9      	asrs	r1, r1, #31
 8024062:	9105      	str	r1, [sp, #20]
 8024064:	9902      	ldr	r1, [sp, #8]
 8024066:	9804      	ldr	r0, [sp, #16]
 8024068:	680d      	ldr	r5, [r1, #0]
 802406a:	9e06      	ldr	r6, [sp, #24]
 802406c:	002b      	movs	r3, r5
 802406e:	17ed      	asrs	r5, r5, #31
 8024070:	684f      	ldr	r7, [r1, #4]
 8024072:	9503      	str	r5, [sp, #12]
 8024074:	1b85      	subs	r5, r0, r6
 8024076:	17e8      	asrs	r0, r5, #31
 8024078:	001a      	movs	r2, r3
 802407a:	9006      	str	r0, [sp, #24]
 802407c:	17fe      	asrs	r6, r7, #31
 802407e:	9304      	str	r3, [sp, #16]
 8024080:	0020      	movs	r0, r4
 8024082:	9b03      	ldr	r3, [sp, #12]
 8024084:	17e1      	asrs	r1, r4, #31
 8024086:	9607      	str	r6, [sp, #28]
 8024088:	f7dc fa9a 	bl	80005c0 <__aeabi_lmul>
 802408c:	003a      	movs	r2, r7
 802408e:	000e      	movs	r6, r1
 8024090:	17fb      	asrs	r3, r7, #31
 8024092:	0028      	movs	r0, r5
 8024094:	17e9      	asrs	r1, r5, #31
 8024096:	f7dc fa93 	bl	80005c0 <__aeabi_lmul>
 802409a:	4640      	mov	r0, r8
 802409c:	1a76      	subs	r6, r6, r1
 802409e:	0076      	lsls	r6, r6, #1
 80240a0:	002a      	movs	r2, r5
 80240a2:	9b06      	ldr	r3, [sp, #24]
 80240a4:	6006      	str	r6, [r0, #0]
 80240a6:	9903      	ldr	r1, [sp, #12]
 80240a8:	9804      	ldr	r0, [sp, #16]
 80240aa:	f7dc fa89 	bl	80005c0 <__aeabi_lmul>
 80240ae:	0020      	movs	r0, r4
 80240b0:	2408      	movs	r4, #8
 80240b2:	9b07      	ldr	r3, [sp, #28]
 80240b4:	000d      	movs	r5, r1
 80240b6:	003a      	movs	r2, r7
 80240b8:	9905      	ldr	r1, [sp, #20]
 80240ba:	f7dc fa81 	bl	80005c0 <__aeabi_lmul>
 80240be:	4640      	mov	r0, r8
 80240c0:	46a4      	mov	ip, r4
 80240c2:	186d      	adds	r5, r5, r1
 80240c4:	006d      	lsls	r5, r5, #1
 80240c6:	6045      	str	r5, [r0, #4]
 80240c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80240ca:	44e1      	add	r9, ip
 80240cc:	3801      	subs	r0, #1
 80240ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80240d0:	9a01      	ldr	r2, [sp, #4]
 80240d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80240d4:	44e2      	add	sl, ip
 80240d6:	44e3      	add	fp, ip
 80240d8:	44e0      	add	r8, ip
 80240da:	46a4      	mov	ip, r4
 80240dc:	4462      	add	r2, ip
 80240de:	9201      	str	r2, [sp, #4]
 80240e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80240e2:	9b00      	ldr	r3, [sp, #0]
 80240e4:	4694      	mov	ip, r2
 80240e6:	4463      	add	r3, ip
 80240e8:	9300      	str	r3, [sp, #0]
 80240ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80240ec:	9902      	ldr	r1, [sp, #8]
 80240ee:	469c      	mov	ip, r3
 80240f0:	4461      	add	r1, ip
 80240f2:	9102      	str	r1, [sp, #8]
 80240f4:	2800      	cmp	r0, #0
 80240f6:	d000      	beq.n	80240fa <arm_radix4_butterfly_inverse_q31+0x22e>
 80240f8:	e70f      	b.n	8023f1a <arm_radix4_butterfly_inverse_q31+0x4e>
 80240fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80240fc:	009b      	lsls	r3, r3, #2
 80240fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024100:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024102:	9320      	str	r3, [sp, #128]	@ 0x80
 8024104:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024106:	2b04      	cmp	r3, #4
 8024108:	d800      	bhi.n	802410c <arm_radix4_butterfly_inverse_q31+0x240>
 802410a:	e17c      	b.n	8024406 <arm_radix4_butterfly_inverse_q31+0x53a>
 802410c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802410e:	0893      	lsrs	r3, r2, #2
 8024110:	1e59      	subs	r1, r3, #1
 8024112:	9321      	str	r3, [sp, #132]	@ 0x84
 8024114:	00db      	lsls	r3, r3, #3
 8024116:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024118:	00d3      	lsls	r3, r2, #3
 802411a:	9300      	str	r3, [sp, #0]
 802411c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802411e:	911a      	str	r1, [sp, #104]	@ 0x68
 8024120:	00da      	lsls	r2, r3, #3
 8024122:	921e      	str	r2, [sp, #120]	@ 0x78
 8024124:	011a      	lsls	r2, r3, #4
 8024126:	921d      	str	r2, [sp, #116]	@ 0x74
 8024128:	001a      	movs	r2, r3
 802412a:	4694      	mov	ip, r2
 802412c:	005b      	lsls	r3, r3, #1
 802412e:	4463      	add	r3, ip
 8024130:	00db      	lsls	r3, r3, #3
 8024132:	931c      	str	r3, [sp, #112]	@ 0x70
 8024134:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024136:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024138:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802413a:	9318      	str	r3, [sp, #96]	@ 0x60
 802413c:	9319      	str	r3, [sp, #100]	@ 0x64
 802413e:	9316      	str	r3, [sp, #88]	@ 0x58
 8024140:	2300      	movs	r3, #0
 8024142:	9315      	str	r3, [sp, #84]	@ 0x54
 8024144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024146:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024148:	681a      	ldr	r2, [r3, #0]
 802414a:	685b      	ldr	r3, [r3, #4]
 802414c:	9205      	str	r2, [sp, #20]
 802414e:	9306      	str	r3, [sp, #24]
 8024150:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024152:	468c      	mov	ip, r1
 8024154:	681a      	ldr	r2, [r3, #0]
 8024156:	685b      	ldr	r3, [r3, #4]
 8024158:	9207      	str	r2, [sp, #28]
 802415a:	9308      	str	r3, [sp, #32]
 802415c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802415e:	681a      	ldr	r2, [r3, #0]
 8024160:	685b      	ldr	r3, [r3, #4]
 8024162:	9209      	str	r2, [sp, #36]	@ 0x24
 8024164:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024166:	930a      	str	r3, [sp, #40]	@ 0x28
 8024168:	0013      	movs	r3, r2
 802416a:	4463      	add	r3, ip
 802416c:	4698      	mov	r8, r3
 802416e:	0013      	movs	r3, r2
 8024170:	4442      	add	r2, r8
 8024172:	4691      	mov	r9, r2
 8024174:	001a      	movs	r2, r3
 8024176:	444a      	add	r2, r9
 8024178:	4692      	mov	sl, r2
 802417a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802417c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802417e:	4293      	cmp	r3, r2
 8024180:	d800      	bhi.n	8024184 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8024182:	e0d9      	b.n	8024338 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024184:	4694      	mov	ip, r2
 8024186:	4644      	mov	r4, r8
 8024188:	4655      	mov	r5, sl
 802418a:	4688      	mov	r8, r1
 802418c:	9b07      	ldr	r3, [sp, #28]
 802418e:	17db      	asrs	r3, r3, #31
 8024190:	930c      	str	r3, [sp, #48]	@ 0x30
 8024192:	9b08      	ldr	r3, [sp, #32]
 8024194:	17db      	asrs	r3, r3, #31
 8024196:	930d      	str	r3, [sp, #52]	@ 0x34
 8024198:	9b05      	ldr	r3, [sp, #20]
 802419a:	17db      	asrs	r3, r3, #31
 802419c:	930e      	str	r3, [sp, #56]	@ 0x38
 802419e:	9b06      	ldr	r3, [sp, #24]
 80241a0:	17db      	asrs	r3, r3, #31
 80241a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80241a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241a6:	17db      	asrs	r3, r3, #31
 80241a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80241aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241ac:	17db      	asrs	r3, r3, #31
 80241ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80241b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80241b2:	4463      	add	r3, ip
 80241b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80241b6:	4643      	mov	r3, r8
 80241b8:	4641      	mov	r1, r8
 80241ba:	681a      	ldr	r2, [r3, #0]
 80241bc:	464b      	mov	r3, r9
 80241be:	684f      	ldr	r7, [r1, #4]
 80241c0:	4649      	mov	r1, r9
 80241c2:	681b      	ldr	r3, [r3, #0]
 80241c4:	18d6      	adds	r6, r2, r3
 80241c6:	1ad3      	subs	r3, r2, r3
 80241c8:	9301      	str	r3, [sp, #4]
 80241ca:	684b      	ldr	r3, [r1, #4]
 80241cc:	1af9      	subs	r1, r7, r3
 80241ce:	9102      	str	r1, [sp, #8]
 80241d0:	6829      	ldr	r1, [r5, #0]
 80241d2:	18f8      	adds	r0, r7, r3
 80241d4:	468c      	mov	ip, r1
 80241d6:	6827      	ldr	r7, [r4, #0]
 80241d8:	4467      	add	r7, ip
 80241da:	003a      	movs	r2, r7
 80241dc:	19f3      	adds	r3, r6, r7
 80241de:	4647      	mov	r7, r8
 80241e0:	109b      	asrs	r3, r3, #2
 80241e2:	603b      	str	r3, [r7, #0]
 80241e4:	6869      	ldr	r1, [r5, #4]
 80241e6:	6867      	ldr	r7, [r4, #4]
 80241e8:	468c      	mov	ip, r1
 80241ea:	4467      	add	r7, ip
 80241ec:	003b      	movs	r3, r7
 80241ee:	19c1      	adds	r1, r0, r7
 80241f0:	4647      	mov	r7, r8
 80241f2:	1ab6      	subs	r6, r6, r2
 80241f4:	1089      	asrs	r1, r1, #2
 80241f6:	6079      	str	r1, [r7, #4]
 80241f8:	17f2      	asrs	r2, r6, #31
 80241fa:	9900      	ldr	r1, [sp, #0]
 80241fc:	4692      	mov	sl, r2
 80241fe:	468c      	mov	ip, r1
 8024200:	6867      	ldr	r7, [r4, #4]
 8024202:	6869      	ldr	r1, [r5, #4]
 8024204:	44e0      	add	r8, ip
 8024206:	1a7f      	subs	r7, r7, r1
 8024208:	9703      	str	r7, [sp, #12]
 802420a:	6821      	ldr	r1, [r4, #0]
 802420c:	682f      	ldr	r7, [r5, #0]
 802420e:	1bc9      	subs	r1, r1, r7
 8024210:	1ac7      	subs	r7, r0, r3
 8024212:	17fa      	asrs	r2, r7, #31
 8024214:	4693      	mov	fp, r2
 8024216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024218:	9a07      	ldr	r2, [sp, #28]
 802421a:	9104      	str	r1, [sp, #16]
 802421c:	0030      	movs	r0, r6
 802421e:	4651      	mov	r1, sl
 8024220:	f7dc f9ce 	bl	80005c0 <__aeabi_lmul>
 8024224:	9a08      	ldr	r2, [sp, #32]
 8024226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024228:	9112      	str	r1, [sp, #72]	@ 0x48
 802422a:	0038      	movs	r0, r7
 802422c:	4659      	mov	r1, fp
 802422e:	f7dc f9c7 	bl	80005c0 <__aeabi_lmul>
 8024232:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024234:	9a07      	ldr	r2, [sp, #28]
 8024236:	1a41      	subs	r1, r0, r1
 8024238:	1049      	asrs	r1, r1, #1
 802423a:	6021      	str	r1, [r4, #0]
 802423c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802423e:	0038      	movs	r0, r7
 8024240:	4659      	mov	r1, fp
 8024242:	f7dc f9bd 	bl	80005c0 <__aeabi_lmul>
 8024246:	9a08      	ldr	r2, [sp, #32]
 8024248:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802424a:	000f      	movs	r7, r1
 802424c:	0030      	movs	r0, r6
 802424e:	4651      	mov	r1, sl
 8024250:	f7dc f9b6 	bl	80005c0 <__aeabi_lmul>
 8024254:	9b00      	ldr	r3, [sp, #0]
 8024256:	187f      	adds	r7, r7, r1
 8024258:	469c      	mov	ip, r3
 802425a:	107f      	asrs	r7, r7, #1
 802425c:	6067      	str	r7, [r4, #4]
 802425e:	9a01      	ldr	r2, [sp, #4]
 8024260:	9f03      	ldr	r7, [sp, #12]
 8024262:	9802      	ldr	r0, [sp, #8]
 8024264:	1bd7      	subs	r7, r2, r7
 8024266:	17fe      	asrs	r6, r7, #31
 8024268:	0031      	movs	r1, r6
 802426a:	9e04      	ldr	r6, [sp, #16]
 802426c:	4682      	mov	sl, r0
 802426e:	4464      	add	r4, ip
 8024270:	46b4      	mov	ip, r6
 8024272:	44e2      	add	sl, ip
 8024274:	4652      	mov	r2, sl
 8024276:	17d2      	asrs	r2, r2, #31
 8024278:	4693      	mov	fp, r2
 802427a:	0038      	movs	r0, r7
 802427c:	9a05      	ldr	r2, [sp, #20]
 802427e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024280:	9112      	str	r1, [sp, #72]	@ 0x48
 8024282:	f7dc f99d 	bl	80005c0 <__aeabi_lmul>
 8024286:	9a06      	ldr	r2, [sp, #24]
 8024288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802428a:	000e      	movs	r6, r1
 802428c:	4650      	mov	r0, sl
 802428e:	4659      	mov	r1, fp
 8024290:	f7dc f996 	bl	80005c0 <__aeabi_lmul>
 8024294:	4648      	mov	r0, r9
 8024296:	1a76      	subs	r6, r6, r1
 8024298:	1076      	asrs	r6, r6, #1
 802429a:	6006      	str	r6, [r0, #0]
 802429c:	9a05      	ldr	r2, [sp, #20]
 802429e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242a0:	4650      	mov	r0, sl
 80242a2:	4659      	mov	r1, fp
 80242a4:	f7dc f98c 	bl	80005c0 <__aeabi_lmul>
 80242a8:	9a06      	ldr	r2, [sp, #24]
 80242aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80242ac:	000e      	movs	r6, r1
 80242ae:	0038      	movs	r0, r7
 80242b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80242b2:	f7dc f985 	bl	80005c0 <__aeabi_lmul>
 80242b6:	9a00      	ldr	r2, [sp, #0]
 80242b8:	9f03      	ldr	r7, [sp, #12]
 80242ba:	4694      	mov	ip, r2
 80242bc:	1876      	adds	r6, r6, r1
 80242be:	4649      	mov	r1, r9
 80242c0:	44e1      	add	r9, ip
 80242c2:	46bc      	mov	ip, r7
 80242c4:	9b01      	ldr	r3, [sp, #4]
 80242c6:	1076      	asrs	r6, r6, #1
 80242c8:	4463      	add	r3, ip
 80242ca:	17df      	asrs	r7, r3, #31
 80242cc:	604e      	str	r6, [r1, #4]
 80242ce:	46ba      	mov	sl, r7
 80242d0:	001e      	movs	r6, r3
 80242d2:	9802      	ldr	r0, [sp, #8]
 80242d4:	9b04      	ldr	r3, [sp, #16]
 80242d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242d8:	1ac7      	subs	r7, r0, r3
 80242da:	17fb      	asrs	r3, r7, #31
 80242dc:	469b      	mov	fp, r3
 80242de:	0030      	movs	r0, r6
 80242e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242e2:	4651      	mov	r1, sl
 80242e4:	f7dc f96c 	bl	80005c0 <__aeabi_lmul>
 80242e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80242ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80242ec:	9101      	str	r1, [sp, #4]
 80242ee:	0038      	movs	r0, r7
 80242f0:	4659      	mov	r1, fp
 80242f2:	f7dc f965 	bl	80005c0 <__aeabi_lmul>
 80242f6:	9801      	ldr	r0, [sp, #4]
 80242f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242fa:	1a41      	subs	r1, r0, r1
 80242fc:	1049      	asrs	r1, r1, #1
 80242fe:	6029      	str	r1, [r5, #0]
 8024300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024302:	0038      	movs	r0, r7
 8024304:	4659      	mov	r1, fp
 8024306:	f7dc f95b 	bl	80005c0 <__aeabi_lmul>
 802430a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802430c:	000f      	movs	r7, r1
 802430e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024310:	0030      	movs	r0, r6
 8024312:	4651      	mov	r1, sl
 8024314:	f7dc f954 	bl	80005c0 <__aeabi_lmul>
 8024318:	187f      	adds	r7, r7, r1
 802431a:	107f      	asrs	r7, r7, #1
 802431c:	606f      	str	r7, [r5, #4]
 802431e:	9a00      	ldr	r2, [sp, #0]
 8024320:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024322:	4694      	mov	ip, r2
 8024324:	4465      	add	r5, ip
 8024326:	468c      	mov	ip, r1
 8024328:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802432a:	0013      	movs	r3, r2
 802432c:	4462      	add	r2, ip
 802432e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024330:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024332:	429a      	cmp	r2, r3
 8024334:	d900      	bls.n	8024338 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024336:	e73e      	b.n	80241b6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024338:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802433a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802433c:	468c      	mov	ip, r1
 802433e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024340:	4462      	add	r2, ip
 8024342:	468c      	mov	ip, r1
 8024344:	9216      	str	r2, [sp, #88]	@ 0x58
 8024346:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802434a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802434c:	4462      	add	r2, ip
 802434e:	468c      	mov	ip, r1
 8024350:	9219      	str	r2, [sp, #100]	@ 0x64
 8024352:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024354:	3301      	adds	r3, #1
 8024356:	4462      	add	r2, ip
 8024358:	9218      	str	r2, [sp, #96]	@ 0x60
 802435a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802435c:	9315      	str	r3, [sp, #84]	@ 0x54
 802435e:	3208      	adds	r2, #8
 8024360:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024362:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024364:	4293      	cmp	r3, r2
 8024366:	d800      	bhi.n	802436a <arm_radix4_butterfly_inverse_q31+0x49e>
 8024368:	e6ec      	b.n	8024144 <arm_radix4_butterfly_inverse_q31+0x278>
 802436a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802436c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802436e:	009b      	lsls	r3, r3, #2
 8024370:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024372:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024374:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024376:	089b      	lsrs	r3, r3, #2
 8024378:	9320      	str	r3, [sp, #128]	@ 0x80
 802437a:	2b04      	cmp	r3, #4
 802437c:	d900      	bls.n	8024380 <arm_radix4_butterfly_inverse_q31+0x4b4>
 802437e:	e6c5      	b.n	802410c <arm_radix4_butterfly_inverse_q31+0x240>
 8024380:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024382:	469a      	mov	sl, r3
 8024384:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024386:	681a      	ldr	r2, [r3, #0]
 8024388:	6918      	ldr	r0, [r3, #16]
 802438a:	4691      	mov	r9, r2
 802438c:	464c      	mov	r4, r9
 802438e:	4680      	mov	r8, r0
 8024390:	69de      	ldr	r6, [r3, #28]
 8024392:	689d      	ldr	r5, [r3, #8]
 8024394:	46b4      	mov	ip, r6
 8024396:	6998      	ldr	r0, [r3, #24]
 8024398:	1964      	adds	r4, r4, r5
 802439a:	6859      	ldr	r1, [r3, #4]
 802439c:	68da      	ldr	r2, [r3, #12]
 802439e:	4444      	add	r4, r8
 80243a0:	695f      	ldr	r7, [r3, #20]
 80243a2:	1824      	adds	r4, r4, r0
 80243a4:	601c      	str	r4, [r3, #0]
 80243a6:	188c      	adds	r4, r1, r2
 80243a8:	19e4      	adds	r4, r4, r7
 80243aa:	4464      	add	r4, ip
 80243ac:	605c      	str	r4, [r3, #4]
 80243ae:	464c      	mov	r4, r9
 80243b0:	1b64      	subs	r4, r4, r5
 80243b2:	4444      	add	r4, r8
 80243b4:	1a24      	subs	r4, r4, r0
 80243b6:	609c      	str	r4, [r3, #8]
 80243b8:	1a8c      	subs	r4, r1, r2
 80243ba:	19e4      	adds	r4, r4, r7
 80243bc:	1ba4      	subs	r4, r4, r6
 80243be:	60dc      	str	r4, [r3, #12]
 80243c0:	464c      	mov	r4, r9
 80243c2:	4646      	mov	r6, r8
 80243c4:	1aa4      	subs	r4, r4, r2
 80243c6:	1ba4      	subs	r4, r4, r6
 80243c8:	4464      	add	r4, ip
 80243ca:	611c      	str	r4, [r3, #16]
 80243cc:	194c      	adds	r4, r1, r5
 80243ce:	1be4      	subs	r4, r4, r7
 80243d0:	1a24      	subs	r4, r4, r0
 80243d2:	615c      	str	r4, [r3, #20]
 80243d4:	4644      	mov	r4, r8
 80243d6:	4666      	mov	r6, ip
 80243d8:	444a      	add	r2, r9
 80243da:	1b12      	subs	r2, r2, r4
 80243dc:	1b92      	subs	r2, r2, r6
 80243de:	619a      	str	r2, [r3, #24]
 80243e0:	1b4a      	subs	r2, r1, r5
 80243e2:	1bd1      	subs	r1, r2, r7
 80243e4:	2201      	movs	r2, #1
 80243e6:	4252      	negs	r2, r2
 80243e8:	4694      	mov	ip, r2
 80243ea:	44e2      	add	sl, ip
 80243ec:	4652      	mov	r2, sl
 80243ee:	1809      	adds	r1, r1, r0
 80243f0:	61d9      	str	r1, [r3, #28]
 80243f2:	3320      	adds	r3, #32
 80243f4:	2a00      	cmp	r2, #0
 80243f6:	d1c6      	bne.n	8024386 <arm_radix4_butterfly_inverse_q31+0x4ba>
 80243f8:	b027      	add	sp, #156	@ 0x9c
 80243fa:	bc3c      	pop	{r2, r3, r4, r5}
 80243fc:	4690      	mov	r8, r2
 80243fe:	4699      	mov	r9, r3
 8024400:	46a2      	mov	sl, r4
 8024402:	46ab      	mov	fp, r5
 8024404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024406:	469a      	mov	sl, r3
 8024408:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802440a:	e7bc      	b.n	8024386 <arm_radix4_butterfly_inverse_q31+0x4ba>

0802440c <arm_cmplx_mag_squared_q31>:
 802440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802440e:	464f      	mov	r7, r9
 8024410:	4646      	mov	r6, r8
 8024412:	0004      	movs	r4, r0
 8024414:	b4c0      	push	{r6, r7}
 8024416:	0016      	movs	r6, r2
 8024418:	000f      	movs	r7, r1
 802441a:	2a00      	cmp	r2, #0
 802441c:	d018      	beq.n	8024450 <arm_cmplx_mag_squared_q31+0x44>
 802441e:	6823      	ldr	r3, [r4, #0]
 8024420:	6822      	ldr	r2, [r4, #0]
 8024422:	17d9      	asrs	r1, r3, #31
 8024424:	6863      	ldr	r3, [r4, #4]
 8024426:	0010      	movs	r0, r2
 8024428:	4698      	mov	r8, r3
 802442a:	17db      	asrs	r3, r3, #31
 802442c:	4699      	mov	r9, r3
 802442e:	000b      	movs	r3, r1
 8024430:	f7dc f8c6 	bl	80005c0 <__aeabi_lmul>
 8024434:	4642      	mov	r2, r8
 8024436:	104d      	asrs	r5, r1, #1
 8024438:	464b      	mov	r3, r9
 802443a:	4640      	mov	r0, r8
 802443c:	4649      	mov	r1, r9
 802443e:	f7dc f8bf 	bl	80005c0 <__aeabi_lmul>
 8024442:	1049      	asrs	r1, r1, #1
 8024444:	1869      	adds	r1, r5, r1
 8024446:	3e01      	subs	r6, #1
 8024448:	c702      	stmia	r7!, {r1}
 802444a:	3408      	adds	r4, #8
 802444c:	2e00      	cmp	r6, #0
 802444e:	d1e6      	bne.n	802441e <arm_cmplx_mag_squared_q31+0x12>
 8024450:	bc0c      	pop	{r2, r3}
 8024452:	4690      	mov	r8, r2
 8024454:	4699      	mov	r9, r3
 8024456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024458 <arm_mult_q31>:
 8024458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802445a:	4646      	mov	r6, r8
 802445c:	464f      	mov	r7, r9
 802445e:	4690      	mov	r8, r2
 8024460:	b4c0      	push	{r6, r7}
 8024462:	001d      	movs	r5, r3
 8024464:	0006      	movs	r6, r0
 8024466:	000f      	movs	r7, r1
 8024468:	2400      	movs	r4, #0
 802446a:	2b00      	cmp	r3, #0
 802446c:	d020      	beq.n	80244b0 <arm_mult_q31+0x58>
 802446e:	4b12      	ldr	r3, [pc, #72]	@ (80244b8 <arm_mult_q31+0x60>)
 8024470:	4699      	mov	r9, r3
 8024472:	e007      	b.n	8024484 <arm_mult_q31+0x2c>
 8024474:	464b      	mov	r3, r9
 8024476:	4059      	eors	r1, r3
 8024478:	4643      	mov	r3, r8
 802447a:	3d01      	subs	r5, #1
 802447c:	5119      	str	r1, [r3, r4]
 802447e:	3404      	adds	r4, #4
 8024480:	2d00      	cmp	r5, #0
 8024482:	d015      	beq.n	80244b0 <arm_mult_q31+0x58>
 8024484:	5933      	ldr	r3, [r6, r4]
 8024486:	593a      	ldr	r2, [r7, r4]
 8024488:	17d9      	asrs	r1, r3, #31
 802448a:	593b      	ldr	r3, [r7, r4]
 802448c:	5930      	ldr	r0, [r6, r4]
 802448e:	17db      	asrs	r3, r3, #31
 8024490:	f7dc f896 	bl	80005c0 <__aeabi_lmul>
 8024494:	004b      	lsls	r3, r1, #1
 8024496:	0fc0      	lsrs	r0, r0, #31
 8024498:	4318      	orrs	r0, r3
 802449a:	17c9      	asrs	r1, r1, #31
 802449c:	17c3      	asrs	r3, r0, #31
 802449e:	428b      	cmp	r3, r1
 80244a0:	d1e8      	bne.n	8024474 <arm_mult_q31+0x1c>
 80244a2:	0001      	movs	r1, r0
 80244a4:	4643      	mov	r3, r8
 80244a6:	3d01      	subs	r5, #1
 80244a8:	5119      	str	r1, [r3, r4]
 80244aa:	3404      	adds	r4, #4
 80244ac:	2d00      	cmp	r5, #0
 80244ae:	d1e9      	bne.n	8024484 <arm_mult_q31+0x2c>
 80244b0:	bc0c      	pop	{r2, r3}
 80244b2:	4690      	mov	r8, r2
 80244b4:	4699      	mov	r9, r3
 80244b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244b8:	7fffffff 	.word	0x7fffffff

080244bc <arm_add_q31>:
 80244bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244be:	465f      	mov	r7, fp
 80244c0:	4656      	mov	r6, sl
 80244c2:	464d      	mov	r5, r9
 80244c4:	4644      	mov	r4, r8
 80244c6:	b4f0      	push	{r4, r5, r6, r7}
 80244c8:	4693      	mov	fp, r2
 80244ca:	b083      	sub	sp, #12
 80244cc:	4681      	mov	r9, r0
 80244ce:	468a      	mov	sl, r1
 80244d0:	4698      	mov	r8, r3
 80244d2:	2200      	movs	r2, #0
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	d020      	beq.n	802451a <arm_add_q31+0x5e>
 80244d8:	4649      	mov	r1, r9
 80244da:	4653      	mov	r3, sl
 80244dc:	588e      	ldr	r6, [r1, r2]
 80244de:	589b      	ldr	r3, [r3, r2]
 80244e0:	17f7      	asrs	r7, r6, #31
 80244e2:	001c      	movs	r4, r3
 80244e4:	0030      	movs	r0, r6
 80244e6:	0039      	movs	r1, r7
 80244e8:	17dd      	asrs	r5, r3, #31
 80244ea:	46b4      	mov	ip, r6
 80244ec:	1900      	adds	r0, r0, r4
 80244ee:	4169      	adcs	r1, r5
 80244f0:	4463      	add	r3, ip
 80244f2:	9000      	str	r0, [sp, #0]
 80244f4:	9101      	str	r1, [sp, #4]
 80244f6:	17d9      	asrs	r1, r3, #31
 80244f8:	468c      	mov	ip, r1
 80244fa:	9901      	ldr	r1, [sp, #4]
 80244fc:	458c      	cmp	ip, r1
 80244fe:	d002      	beq.n	8024506 <arm_add_q31+0x4a>
 8024500:	17cb      	asrs	r3, r1, #31
 8024502:	4909      	ldr	r1, [pc, #36]	@ (8024528 <arm_add_q31+0x6c>)
 8024504:	404b      	eors	r3, r1
 8024506:	4659      	mov	r1, fp
 8024508:	508b      	str	r3, [r1, r2]
 802450a:	2301      	movs	r3, #1
 802450c:	425b      	negs	r3, r3
 802450e:	469c      	mov	ip, r3
 8024510:	44e0      	add	r8, ip
 8024512:	4643      	mov	r3, r8
 8024514:	3204      	adds	r2, #4
 8024516:	2b00      	cmp	r3, #0
 8024518:	d1de      	bne.n	80244d8 <arm_add_q31+0x1c>
 802451a:	b003      	add	sp, #12
 802451c:	bc3c      	pop	{r2, r3, r4, r5}
 802451e:	4690      	mov	r8, r2
 8024520:	4699      	mov	r9, r3
 8024522:	46a2      	mov	sl, r4
 8024524:	46ab      	mov	fp, r5
 8024526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024528:	7fffffff 	.word	0x7fffffff

0802452c <atof>:
 802452c:	b510      	push	{r4, lr}
 802452e:	2100      	movs	r1, #0
 8024530:	f000 fe1e 	bl	8025170 <strtod>
 8024534:	bd10      	pop	{r4, pc}

08024536 <atoi>:
 8024536:	b510      	push	{r4, lr}
 8024538:	220a      	movs	r2, #10
 802453a:	2100      	movs	r1, #0
 802453c:	f000 feb0 	bl	80252a0 <strtol>
 8024540:	bd10      	pop	{r4, pc}
	...

08024544 <sulp>:
 8024544:	b570      	push	{r4, r5, r6, lr}
 8024546:	0016      	movs	r6, r2
 8024548:	000d      	movs	r5, r1
 802454a:	f003 fd0f 	bl	8027f6c <__ulp>
 802454e:	2e00      	cmp	r6, #0
 8024550:	d00d      	beq.n	802456e <sulp+0x2a>
 8024552:	236b      	movs	r3, #107	@ 0x6b
 8024554:	006a      	lsls	r2, r5, #1
 8024556:	0d52      	lsrs	r2, r2, #21
 8024558:	1a9b      	subs	r3, r3, r2
 802455a:	2b00      	cmp	r3, #0
 802455c:	dd07      	ble.n	802456e <sulp+0x2a>
 802455e:	2400      	movs	r4, #0
 8024560:	4a03      	ldr	r2, [pc, #12]	@ (8024570 <sulp+0x2c>)
 8024562:	051b      	lsls	r3, r3, #20
 8024564:	189d      	adds	r5, r3, r2
 8024566:	002b      	movs	r3, r5
 8024568:	0022      	movs	r2, r4
 802456a:	f7de f9f3 	bl	8002954 <__aeabi_dmul>
 802456e:	bd70      	pop	{r4, r5, r6, pc}
 8024570:	3ff00000 	.word	0x3ff00000

08024574 <_strtod_l>:
 8024574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024576:	b0a3      	sub	sp, #140	@ 0x8c
 8024578:	921b      	str	r2, [sp, #108]	@ 0x6c
 802457a:	2200      	movs	r2, #0
 802457c:	2600      	movs	r6, #0
 802457e:	2700      	movs	r7, #0
 8024580:	9005      	str	r0, [sp, #20]
 8024582:	9109      	str	r1, [sp, #36]	@ 0x24
 8024584:	921e      	str	r2, [sp, #120]	@ 0x78
 8024586:	911d      	str	r1, [sp, #116]	@ 0x74
 8024588:	780a      	ldrb	r2, [r1, #0]
 802458a:	2a2b      	cmp	r2, #43	@ 0x2b
 802458c:	d053      	beq.n	8024636 <_strtod_l+0xc2>
 802458e:	d83f      	bhi.n	8024610 <_strtod_l+0x9c>
 8024590:	2a0d      	cmp	r2, #13
 8024592:	d839      	bhi.n	8024608 <_strtod_l+0x94>
 8024594:	2a08      	cmp	r2, #8
 8024596:	d839      	bhi.n	802460c <_strtod_l+0x98>
 8024598:	2a00      	cmp	r2, #0
 802459a:	d042      	beq.n	8024622 <_strtod_l+0xae>
 802459c:	2200      	movs	r2, #0
 802459e:	9212      	str	r2, [sp, #72]	@ 0x48
 80245a0:	2100      	movs	r1, #0
 80245a2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80245a4:	910c      	str	r1, [sp, #48]	@ 0x30
 80245a6:	782a      	ldrb	r2, [r5, #0]
 80245a8:	2a30      	cmp	r2, #48	@ 0x30
 80245aa:	d000      	beq.n	80245ae <_strtod_l+0x3a>
 80245ac:	e083      	b.n	80246b6 <_strtod_l+0x142>
 80245ae:	786a      	ldrb	r2, [r5, #1]
 80245b0:	3120      	adds	r1, #32
 80245b2:	438a      	bics	r2, r1
 80245b4:	2a58      	cmp	r2, #88	@ 0x58
 80245b6:	d000      	beq.n	80245ba <_strtod_l+0x46>
 80245b8:	e073      	b.n	80246a2 <_strtod_l+0x12e>
 80245ba:	9302      	str	r3, [sp, #8]
 80245bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80245be:	4a9b      	ldr	r2, [pc, #620]	@ (802482c <_strtod_l+0x2b8>)
 80245c0:	9301      	str	r3, [sp, #4]
 80245c2:	ab1e      	add	r3, sp, #120	@ 0x78
 80245c4:	9300      	str	r3, [sp, #0]
 80245c6:	9805      	ldr	r0, [sp, #20]
 80245c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80245ca:	a91d      	add	r1, sp, #116	@ 0x74
 80245cc:	f002 fd86 	bl	80270dc <__gethex>
 80245d0:	230f      	movs	r3, #15
 80245d2:	0002      	movs	r2, r0
 80245d4:	401a      	ands	r2, r3
 80245d6:	0004      	movs	r4, r0
 80245d8:	9206      	str	r2, [sp, #24]
 80245da:	4218      	tst	r0, r3
 80245dc:	d005      	beq.n	80245ea <_strtod_l+0x76>
 80245de:	2a06      	cmp	r2, #6
 80245e0:	d12b      	bne.n	802463a <_strtod_l+0xc6>
 80245e2:	2300      	movs	r3, #0
 80245e4:	3501      	adds	r5, #1
 80245e6:	951d      	str	r5, [sp, #116]	@ 0x74
 80245e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80245ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d002      	beq.n	80245f6 <_strtod_l+0x82>
 80245f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80245f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80245f4:	6013      	str	r3, [r2, #0]
 80245f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d019      	beq.n	8024630 <_strtod_l+0xbc>
 80245fc:	2380      	movs	r3, #128	@ 0x80
 80245fe:	0030      	movs	r0, r6
 8024600:	061b      	lsls	r3, r3, #24
 8024602:	18f9      	adds	r1, r7, r3
 8024604:	b023      	add	sp, #140	@ 0x8c
 8024606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024608:	2a20      	cmp	r2, #32
 802460a:	d1c7      	bne.n	802459c <_strtod_l+0x28>
 802460c:	3101      	adds	r1, #1
 802460e:	e7ba      	b.n	8024586 <_strtod_l+0x12>
 8024610:	2a2d      	cmp	r2, #45	@ 0x2d
 8024612:	d1c3      	bne.n	802459c <_strtod_l+0x28>
 8024614:	3a2c      	subs	r2, #44	@ 0x2c
 8024616:	9212      	str	r2, [sp, #72]	@ 0x48
 8024618:	1c4a      	adds	r2, r1, #1
 802461a:	921d      	str	r2, [sp, #116]	@ 0x74
 802461c:	784a      	ldrb	r2, [r1, #1]
 802461e:	2a00      	cmp	r2, #0
 8024620:	d1be      	bne.n	80245a0 <_strtod_l+0x2c>
 8024622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024624:	931d      	str	r3, [sp, #116]	@ 0x74
 8024626:	2300      	movs	r3, #0
 8024628:	9312      	str	r3, [sp, #72]	@ 0x48
 802462a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802462c:	2b00      	cmp	r3, #0
 802462e:	d1df      	bne.n	80245f0 <_strtod_l+0x7c>
 8024630:	0030      	movs	r0, r6
 8024632:	0039      	movs	r1, r7
 8024634:	e7e6      	b.n	8024604 <_strtod_l+0x90>
 8024636:	2200      	movs	r2, #0
 8024638:	e7ed      	b.n	8024616 <_strtod_l+0xa2>
 802463a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802463c:	2a00      	cmp	r2, #0
 802463e:	d007      	beq.n	8024650 <_strtod_l+0xdc>
 8024640:	2135      	movs	r1, #53	@ 0x35
 8024642:	a820      	add	r0, sp, #128	@ 0x80
 8024644:	f003 fd88 	bl	8028158 <__copybits>
 8024648:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802464a:	9805      	ldr	r0, [sp, #20]
 802464c:	f003 f94a 	bl	80278e4 <_Bfree>
 8024650:	9806      	ldr	r0, [sp, #24]
 8024652:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024654:	3801      	subs	r0, #1
 8024656:	2804      	cmp	r0, #4
 8024658:	d806      	bhi.n	8024668 <_strtod_l+0xf4>
 802465a:	f7db fd8f 	bl	800017c <__gnu_thumb1_case_uqi>
 802465e:	0312      	.short	0x0312
 8024660:	1e1c      	.short	0x1e1c
 8024662:	12          	.byte	0x12
 8024663:	00          	.byte	0x00
 8024664:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024666:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024668:	05e4      	lsls	r4, r4, #23
 802466a:	d502      	bpl.n	8024672 <_strtod_l+0xfe>
 802466c:	2380      	movs	r3, #128	@ 0x80
 802466e:	061b      	lsls	r3, r3, #24
 8024670:	431f      	orrs	r7, r3
 8024672:	4b6f      	ldr	r3, [pc, #444]	@ (8024830 <_strtod_l+0x2bc>)
 8024674:	423b      	tst	r3, r7
 8024676:	d1b8      	bne.n	80245ea <_strtod_l+0x76>
 8024678:	f001 fdc0 	bl	80261fc <__errno>
 802467c:	2322      	movs	r3, #34	@ 0x22
 802467e:	6003      	str	r3, [r0, #0]
 8024680:	e7b3      	b.n	80245ea <_strtod_l+0x76>
 8024682:	496c      	ldr	r1, [pc, #432]	@ (8024834 <_strtod_l+0x2c0>)
 8024684:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024686:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024688:	400a      	ands	r2, r1
 802468a:	496b      	ldr	r1, [pc, #428]	@ (8024838 <_strtod_l+0x2c4>)
 802468c:	185b      	adds	r3, r3, r1
 802468e:	051b      	lsls	r3, r3, #20
 8024690:	431a      	orrs	r2, r3
 8024692:	0017      	movs	r7, r2
 8024694:	e7e8      	b.n	8024668 <_strtod_l+0xf4>
 8024696:	4f66      	ldr	r7, [pc, #408]	@ (8024830 <_strtod_l+0x2bc>)
 8024698:	e7e6      	b.n	8024668 <_strtod_l+0xf4>
 802469a:	2601      	movs	r6, #1
 802469c:	4f67      	ldr	r7, [pc, #412]	@ (802483c <_strtod_l+0x2c8>)
 802469e:	4276      	negs	r6, r6
 80246a0:	e7e2      	b.n	8024668 <_strtod_l+0xf4>
 80246a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80246a4:	1c5a      	adds	r2, r3, #1
 80246a6:	921d      	str	r2, [sp, #116]	@ 0x74
 80246a8:	785b      	ldrb	r3, [r3, #1]
 80246aa:	2b30      	cmp	r3, #48	@ 0x30
 80246ac:	d0f9      	beq.n	80246a2 <_strtod_l+0x12e>
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	d09b      	beq.n	80245ea <_strtod_l+0x76>
 80246b2:	2301      	movs	r3, #1
 80246b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80246b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80246b8:	220a      	movs	r2, #10
 80246ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80246bc:	2300      	movs	r3, #0
 80246be:	9310      	str	r3, [sp, #64]	@ 0x40
 80246c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80246c2:	9308      	str	r3, [sp, #32]
 80246c4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80246c6:	7804      	ldrb	r4, [r0, #0]
 80246c8:	0023      	movs	r3, r4
 80246ca:	3b30      	subs	r3, #48	@ 0x30
 80246cc:	b2d9      	uxtb	r1, r3
 80246ce:	2909      	cmp	r1, #9
 80246d0:	d927      	bls.n	8024722 <_strtod_l+0x1ae>
 80246d2:	2201      	movs	r2, #1
 80246d4:	495a      	ldr	r1, [pc, #360]	@ (8024840 <_strtod_l+0x2cc>)
 80246d6:	f001 fd03 	bl	80260e0 <strncmp>
 80246da:	2800      	cmp	r0, #0
 80246dc:	d033      	beq.n	8024746 <_strtod_l+0x1d2>
 80246de:	2000      	movs	r0, #0
 80246e0:	0023      	movs	r3, r4
 80246e2:	4684      	mov	ip, r0
 80246e4:	9a08      	ldr	r2, [sp, #32]
 80246e6:	900e      	str	r0, [sp, #56]	@ 0x38
 80246e8:	9206      	str	r2, [sp, #24]
 80246ea:	2220      	movs	r2, #32
 80246ec:	0019      	movs	r1, r3
 80246ee:	4391      	bics	r1, r2
 80246f0:	000a      	movs	r2, r1
 80246f2:	2100      	movs	r1, #0
 80246f4:	9107      	str	r1, [sp, #28]
 80246f6:	2a45      	cmp	r2, #69	@ 0x45
 80246f8:	d000      	beq.n	80246fc <_strtod_l+0x188>
 80246fa:	e0cb      	b.n	8024894 <_strtod_l+0x320>
 80246fc:	9b06      	ldr	r3, [sp, #24]
 80246fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024700:	4303      	orrs	r3, r0
 8024702:	4313      	orrs	r3, r2
 8024704:	428b      	cmp	r3, r1
 8024706:	d08c      	beq.n	8024622 <_strtod_l+0xae>
 8024708:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802470a:	9309      	str	r3, [sp, #36]	@ 0x24
 802470c:	3301      	adds	r3, #1
 802470e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024712:	785b      	ldrb	r3, [r3, #1]
 8024714:	2b2b      	cmp	r3, #43	@ 0x2b
 8024716:	d07b      	beq.n	8024810 <_strtod_l+0x29c>
 8024718:	000c      	movs	r4, r1
 802471a:	2b2d      	cmp	r3, #45	@ 0x2d
 802471c:	d17e      	bne.n	802481c <_strtod_l+0x2a8>
 802471e:	2401      	movs	r4, #1
 8024720:	e077      	b.n	8024812 <_strtod_l+0x29e>
 8024722:	9908      	ldr	r1, [sp, #32]
 8024724:	2908      	cmp	r1, #8
 8024726:	dc09      	bgt.n	802473c <_strtod_l+0x1c8>
 8024728:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802472a:	4351      	muls	r1, r2
 802472c:	185b      	adds	r3, r3, r1
 802472e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024730:	9b08      	ldr	r3, [sp, #32]
 8024732:	3001      	adds	r0, #1
 8024734:	3301      	adds	r3, #1
 8024736:	9308      	str	r3, [sp, #32]
 8024738:	901d      	str	r0, [sp, #116]	@ 0x74
 802473a:	e7c3      	b.n	80246c4 <_strtod_l+0x150>
 802473c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802473e:	4355      	muls	r5, r2
 8024740:	195b      	adds	r3, r3, r5
 8024742:	9310      	str	r3, [sp, #64]	@ 0x40
 8024744:	e7f4      	b.n	8024730 <_strtod_l+0x1bc>
 8024746:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024748:	1c5a      	adds	r2, r3, #1
 802474a:	921d      	str	r2, [sp, #116]	@ 0x74
 802474c:	9a08      	ldr	r2, [sp, #32]
 802474e:	785b      	ldrb	r3, [r3, #1]
 8024750:	2a00      	cmp	r2, #0
 8024752:	d03e      	beq.n	80247d2 <_strtod_l+0x25e>
 8024754:	900e      	str	r0, [sp, #56]	@ 0x38
 8024756:	9206      	str	r2, [sp, #24]
 8024758:	001a      	movs	r2, r3
 802475a:	3a30      	subs	r2, #48	@ 0x30
 802475c:	2a09      	cmp	r2, #9
 802475e:	d912      	bls.n	8024786 <_strtod_l+0x212>
 8024760:	2201      	movs	r2, #1
 8024762:	4694      	mov	ip, r2
 8024764:	e7c1      	b.n	80246ea <_strtod_l+0x176>
 8024766:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024768:	3001      	adds	r0, #1
 802476a:	1c5a      	adds	r2, r3, #1
 802476c:	921d      	str	r2, [sp, #116]	@ 0x74
 802476e:	785b      	ldrb	r3, [r3, #1]
 8024770:	2b30      	cmp	r3, #48	@ 0x30
 8024772:	d0f8      	beq.n	8024766 <_strtod_l+0x1f2>
 8024774:	001a      	movs	r2, r3
 8024776:	3a31      	subs	r2, #49	@ 0x31
 8024778:	2a08      	cmp	r2, #8
 802477a:	d844      	bhi.n	8024806 <_strtod_l+0x292>
 802477c:	900e      	str	r0, [sp, #56]	@ 0x38
 802477e:	2000      	movs	r0, #0
 8024780:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024782:	9006      	str	r0, [sp, #24]
 8024784:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024786:	001c      	movs	r4, r3
 8024788:	1c42      	adds	r2, r0, #1
 802478a:	3c30      	subs	r4, #48	@ 0x30
 802478c:	2b30      	cmp	r3, #48	@ 0x30
 802478e:	d01a      	beq.n	80247c6 <_strtod_l+0x252>
 8024790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024792:	9906      	ldr	r1, [sp, #24]
 8024794:	189b      	adds	r3, r3, r2
 8024796:	930e      	str	r3, [sp, #56]	@ 0x38
 8024798:	230a      	movs	r3, #10
 802479a:	469c      	mov	ip, r3
 802479c:	9d06      	ldr	r5, [sp, #24]
 802479e:	1c4b      	adds	r3, r1, #1
 80247a0:	1b5d      	subs	r5, r3, r5
 80247a2:	42aa      	cmp	r2, r5
 80247a4:	dc17      	bgt.n	80247d6 <_strtod_l+0x262>
 80247a6:	43c3      	mvns	r3, r0
 80247a8:	9a06      	ldr	r2, [sp, #24]
 80247aa:	17db      	asrs	r3, r3, #31
 80247ac:	4003      	ands	r3, r0
 80247ae:	18d1      	adds	r1, r2, r3
 80247b0:	3201      	adds	r2, #1
 80247b2:	18d3      	adds	r3, r2, r3
 80247b4:	9306      	str	r3, [sp, #24]
 80247b6:	2908      	cmp	r1, #8
 80247b8:	dc1c      	bgt.n	80247f4 <_strtod_l+0x280>
 80247ba:	230a      	movs	r3, #10
 80247bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80247be:	4353      	muls	r3, r2
 80247c0:	2200      	movs	r2, #0
 80247c2:	18e3      	adds	r3, r4, r3
 80247c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80247c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80247c8:	0010      	movs	r0, r2
 80247ca:	1c59      	adds	r1, r3, #1
 80247cc:	911d      	str	r1, [sp, #116]	@ 0x74
 80247ce:	785b      	ldrb	r3, [r3, #1]
 80247d0:	e7c2      	b.n	8024758 <_strtod_l+0x1e4>
 80247d2:	9808      	ldr	r0, [sp, #32]
 80247d4:	e7cc      	b.n	8024770 <_strtod_l+0x1fc>
 80247d6:	2908      	cmp	r1, #8
 80247d8:	dc05      	bgt.n	80247e6 <_strtod_l+0x272>
 80247da:	4665      	mov	r5, ip
 80247dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80247de:	4369      	muls	r1, r5
 80247e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80247e2:	0019      	movs	r1, r3
 80247e4:	e7da      	b.n	802479c <_strtod_l+0x228>
 80247e6:	2b10      	cmp	r3, #16
 80247e8:	dcfb      	bgt.n	80247e2 <_strtod_l+0x26e>
 80247ea:	4661      	mov	r1, ip
 80247ec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80247ee:	434d      	muls	r5, r1
 80247f0:	9510      	str	r5, [sp, #64]	@ 0x40
 80247f2:	e7f6      	b.n	80247e2 <_strtod_l+0x26e>
 80247f4:	2200      	movs	r2, #0
 80247f6:	290f      	cmp	r1, #15
 80247f8:	dce5      	bgt.n	80247c6 <_strtod_l+0x252>
 80247fa:	230a      	movs	r3, #10
 80247fc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80247fe:	435d      	muls	r5, r3
 8024800:	1963      	adds	r3, r4, r5
 8024802:	9310      	str	r3, [sp, #64]	@ 0x40
 8024804:	e7df      	b.n	80247c6 <_strtod_l+0x252>
 8024806:	2200      	movs	r2, #0
 8024808:	920e      	str	r2, [sp, #56]	@ 0x38
 802480a:	9206      	str	r2, [sp, #24]
 802480c:	3201      	adds	r2, #1
 802480e:	e7a8      	b.n	8024762 <_strtod_l+0x1ee>
 8024810:	2400      	movs	r4, #0
 8024812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024814:	3302      	adds	r3, #2
 8024816:	931d      	str	r3, [sp, #116]	@ 0x74
 8024818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802481a:	789b      	ldrb	r3, [r3, #2]
 802481c:	001a      	movs	r2, r3
 802481e:	3a30      	subs	r2, #48	@ 0x30
 8024820:	2a09      	cmp	r2, #9
 8024822:	d913      	bls.n	802484c <_strtod_l+0x2d8>
 8024824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024826:	921d      	str	r2, [sp, #116]	@ 0x74
 8024828:	2200      	movs	r2, #0
 802482a:	e032      	b.n	8024892 <_strtod_l+0x31e>
 802482c:	0802e910 	.word	0x0802e910
 8024830:	7ff00000 	.word	0x7ff00000
 8024834:	ffefffff 	.word	0xffefffff
 8024838:	00000433 	.word	0x00000433
 802483c:	7fffffff 	.word	0x7fffffff
 8024840:	0802e728 	.word	0x0802e728
 8024844:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024846:	1c5a      	adds	r2, r3, #1
 8024848:	921d      	str	r2, [sp, #116]	@ 0x74
 802484a:	785b      	ldrb	r3, [r3, #1]
 802484c:	2b30      	cmp	r3, #48	@ 0x30
 802484e:	d0f9      	beq.n	8024844 <_strtod_l+0x2d0>
 8024850:	2200      	movs	r2, #0
 8024852:	9207      	str	r2, [sp, #28]
 8024854:	001a      	movs	r2, r3
 8024856:	3a31      	subs	r2, #49	@ 0x31
 8024858:	2a08      	cmp	r2, #8
 802485a:	d81b      	bhi.n	8024894 <_strtod_l+0x320>
 802485c:	3b30      	subs	r3, #48	@ 0x30
 802485e:	001a      	movs	r2, r3
 8024860:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024862:	9307      	str	r3, [sp, #28]
 8024864:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024866:	1c59      	adds	r1, r3, #1
 8024868:	911d      	str	r1, [sp, #116]	@ 0x74
 802486a:	785b      	ldrb	r3, [r3, #1]
 802486c:	001d      	movs	r5, r3
 802486e:	3d30      	subs	r5, #48	@ 0x30
 8024870:	2d09      	cmp	r5, #9
 8024872:	d93a      	bls.n	80248ea <_strtod_l+0x376>
 8024874:	9d07      	ldr	r5, [sp, #28]
 8024876:	1b49      	subs	r1, r1, r5
 8024878:	000d      	movs	r5, r1
 802487a:	49b3      	ldr	r1, [pc, #716]	@ (8024b48 <_strtod_l+0x5d4>)
 802487c:	9107      	str	r1, [sp, #28]
 802487e:	2d08      	cmp	r5, #8
 8024880:	dc03      	bgt.n	802488a <_strtod_l+0x316>
 8024882:	9207      	str	r2, [sp, #28]
 8024884:	428a      	cmp	r2, r1
 8024886:	dd00      	ble.n	802488a <_strtod_l+0x316>
 8024888:	9107      	str	r1, [sp, #28]
 802488a:	2c00      	cmp	r4, #0
 802488c:	d002      	beq.n	8024894 <_strtod_l+0x320>
 802488e:	9a07      	ldr	r2, [sp, #28]
 8024890:	4252      	negs	r2, r2
 8024892:	9207      	str	r2, [sp, #28]
 8024894:	9a06      	ldr	r2, [sp, #24]
 8024896:	2a00      	cmp	r2, #0
 8024898:	d14b      	bne.n	8024932 <_strtod_l+0x3be>
 802489a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802489c:	4310      	orrs	r0, r2
 802489e:	d000      	beq.n	80248a2 <_strtod_l+0x32e>
 80248a0:	e6a3      	b.n	80245ea <_strtod_l+0x76>
 80248a2:	4662      	mov	r2, ip
 80248a4:	2a00      	cmp	r2, #0
 80248a6:	d000      	beq.n	80248aa <_strtod_l+0x336>
 80248a8:	e6bb      	b.n	8024622 <_strtod_l+0xae>
 80248aa:	2b69      	cmp	r3, #105	@ 0x69
 80248ac:	d025      	beq.n	80248fa <_strtod_l+0x386>
 80248ae:	dc21      	bgt.n	80248f4 <_strtod_l+0x380>
 80248b0:	2b49      	cmp	r3, #73	@ 0x49
 80248b2:	d022      	beq.n	80248fa <_strtod_l+0x386>
 80248b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80248b6:	d000      	beq.n	80248ba <_strtod_l+0x346>
 80248b8:	e6b3      	b.n	8024622 <_strtod_l+0xae>
 80248ba:	49a4      	ldr	r1, [pc, #656]	@ (8024b4c <_strtod_l+0x5d8>)
 80248bc:	a81d      	add	r0, sp, #116	@ 0x74
 80248be:	f002 fe43 	bl	8027548 <__match>
 80248c2:	2800      	cmp	r0, #0
 80248c4:	d100      	bne.n	80248c8 <_strtod_l+0x354>
 80248c6:	e6ac      	b.n	8024622 <_strtod_l+0xae>
 80248c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80248ca:	781b      	ldrb	r3, [r3, #0]
 80248cc:	2b28      	cmp	r3, #40	@ 0x28
 80248ce:	d12a      	bne.n	8024926 <_strtod_l+0x3b2>
 80248d0:	499f      	ldr	r1, [pc, #636]	@ (8024b50 <_strtod_l+0x5dc>)
 80248d2:	aa20      	add	r2, sp, #128	@ 0x80
 80248d4:	a81d      	add	r0, sp, #116	@ 0x74
 80248d6:	f002 fe4b 	bl	8027570 <__hexnan>
 80248da:	2805      	cmp	r0, #5
 80248dc:	d123      	bne.n	8024926 <_strtod_l+0x3b2>
 80248de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80248e0:	4a9c      	ldr	r2, [pc, #624]	@ (8024b54 <_strtod_l+0x5e0>)
 80248e2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80248e4:	431a      	orrs	r2, r3
 80248e6:	0017      	movs	r7, r2
 80248e8:	e67f      	b.n	80245ea <_strtod_l+0x76>
 80248ea:	210a      	movs	r1, #10
 80248ec:	434a      	muls	r2, r1
 80248ee:	18d2      	adds	r2, r2, r3
 80248f0:	3a30      	subs	r2, #48	@ 0x30
 80248f2:	e7b7      	b.n	8024864 <_strtod_l+0x2f0>
 80248f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80248f6:	d0e0      	beq.n	80248ba <_strtod_l+0x346>
 80248f8:	e693      	b.n	8024622 <_strtod_l+0xae>
 80248fa:	4997      	ldr	r1, [pc, #604]	@ (8024b58 <_strtod_l+0x5e4>)
 80248fc:	a81d      	add	r0, sp, #116	@ 0x74
 80248fe:	f002 fe23 	bl	8027548 <__match>
 8024902:	2800      	cmp	r0, #0
 8024904:	d100      	bne.n	8024908 <_strtod_l+0x394>
 8024906:	e68c      	b.n	8024622 <_strtod_l+0xae>
 8024908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802490a:	4994      	ldr	r1, [pc, #592]	@ (8024b5c <_strtod_l+0x5e8>)
 802490c:	3b01      	subs	r3, #1
 802490e:	a81d      	add	r0, sp, #116	@ 0x74
 8024910:	931d      	str	r3, [sp, #116]	@ 0x74
 8024912:	f002 fe19 	bl	8027548 <__match>
 8024916:	2800      	cmp	r0, #0
 8024918:	d102      	bne.n	8024920 <_strtod_l+0x3ac>
 802491a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802491c:	3301      	adds	r3, #1
 802491e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024920:	2600      	movs	r6, #0
 8024922:	4f8c      	ldr	r7, [pc, #560]	@ (8024b54 <_strtod_l+0x5e0>)
 8024924:	e661      	b.n	80245ea <_strtod_l+0x76>
 8024926:	488e      	ldr	r0, [pc, #568]	@ (8024b60 <_strtod_l+0x5ec>)
 8024928:	f001 fcaa 	bl	8026280 <nan>
 802492c:	0006      	movs	r6, r0
 802492e:	000f      	movs	r7, r1
 8024930:	e65b      	b.n	80245ea <_strtod_l+0x76>
 8024932:	9b07      	ldr	r3, [sp, #28]
 8024934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024936:	1a9b      	subs	r3, r3, r2
 8024938:	930c      	str	r3, [sp, #48]	@ 0x30
 802493a:	9b08      	ldr	r3, [sp, #32]
 802493c:	2b00      	cmp	r3, #0
 802493e:	d101      	bne.n	8024944 <_strtod_l+0x3d0>
 8024940:	9b06      	ldr	r3, [sp, #24]
 8024942:	9308      	str	r3, [sp, #32]
 8024944:	9c06      	ldr	r4, [sp, #24]
 8024946:	2c10      	cmp	r4, #16
 8024948:	dd00      	ble.n	802494c <_strtod_l+0x3d8>
 802494a:	2410      	movs	r4, #16
 802494c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802494e:	f7de ff7d 	bl	800384c <__aeabi_ui2d>
 8024952:	9b06      	ldr	r3, [sp, #24]
 8024954:	0006      	movs	r6, r0
 8024956:	000f      	movs	r7, r1
 8024958:	2b09      	cmp	r3, #9
 802495a:	dc13      	bgt.n	8024984 <_strtod_l+0x410>
 802495c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802495e:	2b00      	cmp	r3, #0
 8024960:	d100      	bne.n	8024964 <_strtod_l+0x3f0>
 8024962:	e642      	b.n	80245ea <_strtod_l+0x76>
 8024964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024966:	2b00      	cmp	r3, #0
 8024968:	dc00      	bgt.n	802496c <_strtod_l+0x3f8>
 802496a:	e07e      	b.n	8024a6a <_strtod_l+0x4f6>
 802496c:	2b16      	cmp	r3, #22
 802496e:	dc63      	bgt.n	8024a38 <_strtod_l+0x4c4>
 8024970:	497c      	ldr	r1, [pc, #496]	@ (8024b64 <_strtod_l+0x5f0>)
 8024972:	00db      	lsls	r3, r3, #3
 8024974:	18c9      	adds	r1, r1, r3
 8024976:	0032      	movs	r2, r6
 8024978:	6808      	ldr	r0, [r1, #0]
 802497a:	6849      	ldr	r1, [r1, #4]
 802497c:	003b      	movs	r3, r7
 802497e:	f7dd ffe9 	bl	8002954 <__aeabi_dmul>
 8024982:	e7d3      	b.n	802492c <_strtod_l+0x3b8>
 8024984:	0022      	movs	r2, r4
 8024986:	4b77      	ldr	r3, [pc, #476]	@ (8024b64 <_strtod_l+0x5f0>)
 8024988:	3a09      	subs	r2, #9
 802498a:	00d2      	lsls	r2, r2, #3
 802498c:	189b      	adds	r3, r3, r2
 802498e:	681a      	ldr	r2, [r3, #0]
 8024990:	685b      	ldr	r3, [r3, #4]
 8024992:	f7dd ffdf 	bl	8002954 <__aeabi_dmul>
 8024996:	0006      	movs	r6, r0
 8024998:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802499a:	000f      	movs	r7, r1
 802499c:	f7de ff56 	bl	800384c <__aeabi_ui2d>
 80249a0:	000b      	movs	r3, r1
 80249a2:	0002      	movs	r2, r0
 80249a4:	0039      	movs	r1, r7
 80249a6:	0030      	movs	r0, r6
 80249a8:	f7dc ffd4 	bl	8001954 <__aeabi_dadd>
 80249ac:	9b06      	ldr	r3, [sp, #24]
 80249ae:	0006      	movs	r6, r0
 80249b0:	000f      	movs	r7, r1
 80249b2:	2b0f      	cmp	r3, #15
 80249b4:	ddd2      	ble.n	802495c <_strtod_l+0x3e8>
 80249b6:	9b06      	ldr	r3, [sp, #24]
 80249b8:	1b1c      	subs	r4, r3, r4
 80249ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80249bc:	18e4      	adds	r4, r4, r3
 80249be:	2c00      	cmp	r4, #0
 80249c0:	dc00      	bgt.n	80249c4 <_strtod_l+0x450>
 80249c2:	e09b      	b.n	8024afc <_strtod_l+0x588>
 80249c4:	220f      	movs	r2, #15
 80249c6:	0023      	movs	r3, r4
 80249c8:	4013      	ands	r3, r2
 80249ca:	4214      	tst	r4, r2
 80249cc:	d00a      	beq.n	80249e4 <_strtod_l+0x470>
 80249ce:	4965      	ldr	r1, [pc, #404]	@ (8024b64 <_strtod_l+0x5f0>)
 80249d0:	00db      	lsls	r3, r3, #3
 80249d2:	18c9      	adds	r1, r1, r3
 80249d4:	0032      	movs	r2, r6
 80249d6:	6808      	ldr	r0, [r1, #0]
 80249d8:	6849      	ldr	r1, [r1, #4]
 80249da:	003b      	movs	r3, r7
 80249dc:	f7dd ffba 	bl	8002954 <__aeabi_dmul>
 80249e0:	0006      	movs	r6, r0
 80249e2:	000f      	movs	r7, r1
 80249e4:	230f      	movs	r3, #15
 80249e6:	439c      	bics	r4, r3
 80249e8:	d073      	beq.n	8024ad2 <_strtod_l+0x55e>
 80249ea:	3326      	adds	r3, #38	@ 0x26
 80249ec:	33ff      	adds	r3, #255	@ 0xff
 80249ee:	429c      	cmp	r4, r3
 80249f0:	dd4b      	ble.n	8024a8a <_strtod_l+0x516>
 80249f2:	2300      	movs	r3, #0
 80249f4:	9306      	str	r3, [sp, #24]
 80249f6:	9307      	str	r3, [sp, #28]
 80249f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80249fa:	9308      	str	r3, [sp, #32]
 80249fc:	2322      	movs	r3, #34	@ 0x22
 80249fe:	2600      	movs	r6, #0
 8024a00:	9a05      	ldr	r2, [sp, #20]
 8024a02:	4f54      	ldr	r7, [pc, #336]	@ (8024b54 <_strtod_l+0x5e0>)
 8024a04:	6013      	str	r3, [r2, #0]
 8024a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024a08:	42b3      	cmp	r3, r6
 8024a0a:	d100      	bne.n	8024a0e <_strtod_l+0x49a>
 8024a0c:	e5ed      	b.n	80245ea <_strtod_l+0x76>
 8024a0e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a10:	9805      	ldr	r0, [sp, #20]
 8024a12:	f002 ff67 	bl	80278e4 <_Bfree>
 8024a16:	9908      	ldr	r1, [sp, #32]
 8024a18:	9805      	ldr	r0, [sp, #20]
 8024a1a:	f002 ff63 	bl	80278e4 <_Bfree>
 8024a1e:	9907      	ldr	r1, [sp, #28]
 8024a20:	9805      	ldr	r0, [sp, #20]
 8024a22:	f002 ff5f 	bl	80278e4 <_Bfree>
 8024a26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024a28:	9805      	ldr	r0, [sp, #20]
 8024a2a:	f002 ff5b 	bl	80278e4 <_Bfree>
 8024a2e:	9906      	ldr	r1, [sp, #24]
 8024a30:	9805      	ldr	r0, [sp, #20]
 8024a32:	f002 ff57 	bl	80278e4 <_Bfree>
 8024a36:	e5d8      	b.n	80245ea <_strtod_l+0x76>
 8024a38:	2325      	movs	r3, #37	@ 0x25
 8024a3a:	9a06      	ldr	r2, [sp, #24]
 8024a3c:	1a9b      	subs	r3, r3, r2
 8024a3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024a40:	4293      	cmp	r3, r2
 8024a42:	dbb8      	blt.n	80249b6 <_strtod_l+0x442>
 8024a44:	240f      	movs	r4, #15
 8024a46:	9b06      	ldr	r3, [sp, #24]
 8024a48:	4d46      	ldr	r5, [pc, #280]	@ (8024b64 <_strtod_l+0x5f0>)
 8024a4a:	1ae4      	subs	r4, r4, r3
 8024a4c:	00e1      	lsls	r1, r4, #3
 8024a4e:	1869      	adds	r1, r5, r1
 8024a50:	0032      	movs	r2, r6
 8024a52:	6808      	ldr	r0, [r1, #0]
 8024a54:	6849      	ldr	r1, [r1, #4]
 8024a56:	003b      	movs	r3, r7
 8024a58:	f7dd ff7c 	bl	8002954 <__aeabi_dmul>
 8024a5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a5e:	1b1c      	subs	r4, r3, r4
 8024a60:	00e4      	lsls	r4, r4, #3
 8024a62:	192d      	adds	r5, r5, r4
 8024a64:	682a      	ldr	r2, [r5, #0]
 8024a66:	686b      	ldr	r3, [r5, #4]
 8024a68:	e789      	b.n	802497e <_strtod_l+0x40a>
 8024a6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a6c:	3316      	adds	r3, #22
 8024a6e:	dba2      	blt.n	80249b6 <_strtod_l+0x442>
 8024a70:	9907      	ldr	r1, [sp, #28]
 8024a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024a74:	4b3b      	ldr	r3, [pc, #236]	@ (8024b64 <_strtod_l+0x5f0>)
 8024a76:	1a52      	subs	r2, r2, r1
 8024a78:	00d2      	lsls	r2, r2, #3
 8024a7a:	189b      	adds	r3, r3, r2
 8024a7c:	0030      	movs	r0, r6
 8024a7e:	681a      	ldr	r2, [r3, #0]
 8024a80:	685b      	ldr	r3, [r3, #4]
 8024a82:	0039      	movs	r1, r7
 8024a84:	f7dd fb2c 	bl	80020e0 <__aeabi_ddiv>
 8024a88:	e750      	b.n	802492c <_strtod_l+0x3b8>
 8024a8a:	2300      	movs	r3, #0
 8024a8c:	0030      	movs	r0, r6
 8024a8e:	0039      	movs	r1, r7
 8024a90:	4d35      	ldr	r5, [pc, #212]	@ (8024b68 <_strtod_l+0x5f4>)
 8024a92:	1124      	asrs	r4, r4, #4
 8024a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a96:	2c01      	cmp	r4, #1
 8024a98:	dc1e      	bgt.n	8024ad8 <_strtod_l+0x564>
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d001      	beq.n	8024aa2 <_strtod_l+0x52e>
 8024a9e:	0006      	movs	r6, r0
 8024aa0:	000f      	movs	r7, r1
 8024aa2:	4b32      	ldr	r3, [pc, #200]	@ (8024b6c <_strtod_l+0x5f8>)
 8024aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024aa6:	18ff      	adds	r7, r7, r3
 8024aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8024b68 <_strtod_l+0x5f4>)
 8024aaa:	00d5      	lsls	r5, r2, #3
 8024aac:	195d      	adds	r5, r3, r5
 8024aae:	0032      	movs	r2, r6
 8024ab0:	6828      	ldr	r0, [r5, #0]
 8024ab2:	6869      	ldr	r1, [r5, #4]
 8024ab4:	003b      	movs	r3, r7
 8024ab6:	f7dd ff4d 	bl	8002954 <__aeabi_dmul>
 8024aba:	4b26      	ldr	r3, [pc, #152]	@ (8024b54 <_strtod_l+0x5e0>)
 8024abc:	4a2c      	ldr	r2, [pc, #176]	@ (8024b70 <_strtod_l+0x5fc>)
 8024abe:	0006      	movs	r6, r0
 8024ac0:	400b      	ands	r3, r1
 8024ac2:	4293      	cmp	r3, r2
 8024ac4:	d895      	bhi.n	80249f2 <_strtod_l+0x47e>
 8024ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8024b74 <_strtod_l+0x600>)
 8024ac8:	4293      	cmp	r3, r2
 8024aca:	d913      	bls.n	8024af4 <_strtod_l+0x580>
 8024acc:	2601      	movs	r6, #1
 8024ace:	4f2a      	ldr	r7, [pc, #168]	@ (8024b78 <_strtod_l+0x604>)
 8024ad0:	4276      	negs	r6, r6
 8024ad2:	2300      	movs	r3, #0
 8024ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ad6:	e086      	b.n	8024be6 <_strtod_l+0x672>
 8024ad8:	2201      	movs	r2, #1
 8024ada:	4214      	tst	r4, r2
 8024adc:	d004      	beq.n	8024ae8 <_strtod_l+0x574>
 8024ade:	682a      	ldr	r2, [r5, #0]
 8024ae0:	686b      	ldr	r3, [r5, #4]
 8024ae2:	f7dd ff37 	bl	8002954 <__aeabi_dmul>
 8024ae6:	2301      	movs	r3, #1
 8024ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024aea:	1064      	asrs	r4, r4, #1
 8024aec:	3201      	adds	r2, #1
 8024aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8024af0:	3508      	adds	r5, #8
 8024af2:	e7d0      	b.n	8024a96 <_strtod_l+0x522>
 8024af4:	23d4      	movs	r3, #212	@ 0xd4
 8024af6:	049b      	lsls	r3, r3, #18
 8024af8:	18cf      	adds	r7, r1, r3
 8024afa:	e7ea      	b.n	8024ad2 <_strtod_l+0x55e>
 8024afc:	2c00      	cmp	r4, #0
 8024afe:	d0e8      	beq.n	8024ad2 <_strtod_l+0x55e>
 8024b00:	4264      	negs	r4, r4
 8024b02:	230f      	movs	r3, #15
 8024b04:	0022      	movs	r2, r4
 8024b06:	401a      	ands	r2, r3
 8024b08:	421c      	tst	r4, r3
 8024b0a:	d00a      	beq.n	8024b22 <_strtod_l+0x5ae>
 8024b0c:	4b15      	ldr	r3, [pc, #84]	@ (8024b64 <_strtod_l+0x5f0>)
 8024b0e:	00d2      	lsls	r2, r2, #3
 8024b10:	189b      	adds	r3, r3, r2
 8024b12:	0030      	movs	r0, r6
 8024b14:	681a      	ldr	r2, [r3, #0]
 8024b16:	685b      	ldr	r3, [r3, #4]
 8024b18:	0039      	movs	r1, r7
 8024b1a:	f7dd fae1 	bl	80020e0 <__aeabi_ddiv>
 8024b1e:	0006      	movs	r6, r0
 8024b20:	000f      	movs	r7, r1
 8024b22:	1124      	asrs	r4, r4, #4
 8024b24:	d0d5      	beq.n	8024ad2 <_strtod_l+0x55e>
 8024b26:	2c1f      	cmp	r4, #31
 8024b28:	dd28      	ble.n	8024b7c <_strtod_l+0x608>
 8024b2a:	2300      	movs	r3, #0
 8024b2c:	9306      	str	r3, [sp, #24]
 8024b2e:	9307      	str	r3, [sp, #28]
 8024b30:	930d      	str	r3, [sp, #52]	@ 0x34
 8024b32:	9308      	str	r3, [sp, #32]
 8024b34:	2322      	movs	r3, #34	@ 0x22
 8024b36:	9a05      	ldr	r2, [sp, #20]
 8024b38:	2600      	movs	r6, #0
 8024b3a:	6013      	str	r3, [r2, #0]
 8024b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024b3e:	2700      	movs	r7, #0
 8024b40:	2b00      	cmp	r3, #0
 8024b42:	d000      	beq.n	8024b46 <_strtod_l+0x5d2>
 8024b44:	e763      	b.n	8024a0e <_strtod_l+0x49a>
 8024b46:	e550      	b.n	80245ea <_strtod_l+0x76>
 8024b48:	00004e1f 	.word	0x00004e1f
 8024b4c:	0802e737 	.word	0x0802e737
 8024b50:	0802e8fc 	.word	0x0802e8fc
 8024b54:	7ff00000 	.word	0x7ff00000
 8024b58:	0802e72f 	.word	0x0802e72f
 8024b5c:	0802e769 	.word	0x0802e769
 8024b60:	0802e8f8 	.word	0x0802e8f8
 8024b64:	0802ea88 	.word	0x0802ea88
 8024b68:	0802ea60 	.word	0x0802ea60
 8024b6c:	fcb00000 	.word	0xfcb00000
 8024b70:	7ca00000 	.word	0x7ca00000
 8024b74:	7c900000 	.word	0x7c900000
 8024b78:	7fefffff 	.word	0x7fefffff
 8024b7c:	2310      	movs	r3, #16
 8024b7e:	0022      	movs	r2, r4
 8024b80:	401a      	ands	r2, r3
 8024b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8024b84:	421c      	tst	r4, r3
 8024b86:	d001      	beq.n	8024b8c <_strtod_l+0x618>
 8024b88:	335a      	adds	r3, #90	@ 0x5a
 8024b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b8c:	0030      	movs	r0, r6
 8024b8e:	0039      	movs	r1, r7
 8024b90:	2300      	movs	r3, #0
 8024b92:	4dc0      	ldr	r5, [pc, #768]	@ (8024e94 <_strtod_l+0x920>)
 8024b94:	2201      	movs	r2, #1
 8024b96:	4214      	tst	r4, r2
 8024b98:	d004      	beq.n	8024ba4 <_strtod_l+0x630>
 8024b9a:	682a      	ldr	r2, [r5, #0]
 8024b9c:	686b      	ldr	r3, [r5, #4]
 8024b9e:	f7dd fed9 	bl	8002954 <__aeabi_dmul>
 8024ba2:	2301      	movs	r3, #1
 8024ba4:	1064      	asrs	r4, r4, #1
 8024ba6:	3508      	adds	r5, #8
 8024ba8:	2c00      	cmp	r4, #0
 8024baa:	d1f3      	bne.n	8024b94 <_strtod_l+0x620>
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d001      	beq.n	8024bb4 <_strtod_l+0x640>
 8024bb0:	0006      	movs	r6, r0
 8024bb2:	000f      	movs	r7, r1
 8024bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	d00d      	beq.n	8024bd6 <_strtod_l+0x662>
 8024bba:	236b      	movs	r3, #107	@ 0x6b
 8024bbc:	007a      	lsls	r2, r7, #1
 8024bbe:	0d52      	lsrs	r2, r2, #21
 8024bc0:	0039      	movs	r1, r7
 8024bc2:	1a9b      	subs	r3, r3, r2
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	dd06      	ble.n	8024bd6 <_strtod_l+0x662>
 8024bc8:	2b1f      	cmp	r3, #31
 8024bca:	dd5c      	ble.n	8024c86 <_strtod_l+0x712>
 8024bcc:	2600      	movs	r6, #0
 8024bce:	2b34      	cmp	r3, #52	@ 0x34
 8024bd0:	dd52      	ble.n	8024c78 <_strtod_l+0x704>
 8024bd2:	27dc      	movs	r7, #220	@ 0xdc
 8024bd4:	04bf      	lsls	r7, r7, #18
 8024bd6:	2200      	movs	r2, #0
 8024bd8:	2300      	movs	r3, #0
 8024bda:	0030      	movs	r0, r6
 8024bdc:	0039      	movs	r1, r7
 8024bde:	f7db fc67 	bl	80004b0 <__aeabi_dcmpeq>
 8024be2:	2800      	cmp	r0, #0
 8024be4:	d1a1      	bne.n	8024b2a <_strtod_l+0x5b6>
 8024be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024be8:	9a08      	ldr	r2, [sp, #32]
 8024bea:	9300      	str	r3, [sp, #0]
 8024bec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024bee:	9b06      	ldr	r3, [sp, #24]
 8024bf0:	9805      	ldr	r0, [sp, #20]
 8024bf2:	f002 fedf 	bl	80279b4 <__s2b>
 8024bf6:	900d      	str	r0, [sp, #52]	@ 0x34
 8024bf8:	2800      	cmp	r0, #0
 8024bfa:	d100      	bne.n	8024bfe <_strtod_l+0x68a>
 8024bfc:	e6f9      	b.n	80249f2 <_strtod_l+0x47e>
 8024bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c00:	9907      	ldr	r1, [sp, #28]
 8024c02:	43db      	mvns	r3, r3
 8024c04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024c06:	17db      	asrs	r3, r3, #31
 8024c08:	1a52      	subs	r2, r2, r1
 8024c0a:	9214      	str	r2, [sp, #80]	@ 0x50
 8024c0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024c0e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8024c10:	17d2      	asrs	r2, r2, #31
 8024c12:	4011      	ands	r1, r2
 8024c14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024c16:	9114      	str	r1, [sp, #80]	@ 0x50
 8024c18:	401a      	ands	r2, r3
 8024c1a:	2300      	movs	r3, #0
 8024c1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8024c1e:	9306      	str	r3, [sp, #24]
 8024c20:	9307      	str	r3, [sp, #28]
 8024c22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024c24:	9805      	ldr	r0, [sp, #20]
 8024c26:	6859      	ldr	r1, [r3, #4]
 8024c28:	f002 fe18 	bl	802785c <_Balloc>
 8024c2c:	9008      	str	r0, [sp, #32]
 8024c2e:	2800      	cmp	r0, #0
 8024c30:	d100      	bne.n	8024c34 <_strtod_l+0x6c0>
 8024c32:	e6e3      	b.n	80249fc <_strtod_l+0x488>
 8024c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024c36:	300c      	adds	r0, #12
 8024c38:	0019      	movs	r1, r3
 8024c3a:	691a      	ldr	r2, [r3, #16]
 8024c3c:	310c      	adds	r1, #12
 8024c3e:	3202      	adds	r2, #2
 8024c40:	0092      	lsls	r2, r2, #2
 8024c42:	f001 fb13 	bl	802626c <memcpy>
 8024c46:	ab20      	add	r3, sp, #128	@ 0x80
 8024c48:	9301      	str	r3, [sp, #4]
 8024c4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024c4c:	9300      	str	r3, [sp, #0]
 8024c4e:	0032      	movs	r2, r6
 8024c50:	003b      	movs	r3, r7
 8024c52:	9805      	ldr	r0, [sp, #20]
 8024c54:	9610      	str	r6, [sp, #64]	@ 0x40
 8024c56:	9711      	str	r7, [sp, #68]	@ 0x44
 8024c58:	f003 f9f4 	bl	8028044 <__d2b>
 8024c5c:	901e      	str	r0, [sp, #120]	@ 0x78
 8024c5e:	2800      	cmp	r0, #0
 8024c60:	d100      	bne.n	8024c64 <_strtod_l+0x6f0>
 8024c62:	e6cb      	b.n	80249fc <_strtod_l+0x488>
 8024c64:	2101      	movs	r1, #1
 8024c66:	9805      	ldr	r0, [sp, #20]
 8024c68:	f002 ff40 	bl	8027aec <__i2b>
 8024c6c:	9007      	str	r0, [sp, #28]
 8024c6e:	2800      	cmp	r0, #0
 8024c70:	d10e      	bne.n	8024c90 <_strtod_l+0x71c>
 8024c72:	2300      	movs	r3, #0
 8024c74:	9307      	str	r3, [sp, #28]
 8024c76:	e6c1      	b.n	80249fc <_strtod_l+0x488>
 8024c78:	234b      	movs	r3, #75	@ 0x4b
 8024c7a:	1a9a      	subs	r2, r3, r2
 8024c7c:	3b4c      	subs	r3, #76	@ 0x4c
 8024c7e:	4093      	lsls	r3, r2
 8024c80:	4019      	ands	r1, r3
 8024c82:	000f      	movs	r7, r1
 8024c84:	e7a7      	b.n	8024bd6 <_strtod_l+0x662>
 8024c86:	2201      	movs	r2, #1
 8024c88:	4252      	negs	r2, r2
 8024c8a:	409a      	lsls	r2, r3
 8024c8c:	4016      	ands	r6, r2
 8024c8e:	e7a2      	b.n	8024bd6 <_strtod_l+0x662>
 8024c90:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024c94:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024c96:	1ad4      	subs	r4, r2, r3
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	db01      	blt.n	8024ca0 <_strtod_l+0x72c>
 8024c9c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8024c9e:	195d      	adds	r5, r3, r5
 8024ca0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024ca2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024ca4:	1a5b      	subs	r3, r3, r1
 8024ca6:	2136      	movs	r1, #54	@ 0x36
 8024ca8:	189b      	adds	r3, r3, r2
 8024caa:	1a8a      	subs	r2, r1, r2
 8024cac:	497a      	ldr	r1, [pc, #488]	@ (8024e98 <_strtod_l+0x924>)
 8024cae:	2001      	movs	r0, #1
 8024cb0:	468c      	mov	ip, r1
 8024cb2:	2100      	movs	r1, #0
 8024cb4:	3b01      	subs	r3, #1
 8024cb6:	9115      	str	r1, [sp, #84]	@ 0x54
 8024cb8:	9016      	str	r0, [sp, #88]	@ 0x58
 8024cba:	4563      	cmp	r3, ip
 8024cbc:	da06      	bge.n	8024ccc <_strtod_l+0x758>
 8024cbe:	4661      	mov	r1, ip
 8024cc0:	1ac9      	subs	r1, r1, r3
 8024cc2:	1a52      	subs	r2, r2, r1
 8024cc4:	291f      	cmp	r1, #31
 8024cc6:	dc3f      	bgt.n	8024d48 <_strtod_l+0x7d4>
 8024cc8:	4088      	lsls	r0, r1
 8024cca:	9016      	str	r0, [sp, #88]	@ 0x58
 8024ccc:	18ab      	adds	r3, r5, r2
 8024cce:	930e      	str	r3, [sp, #56]	@ 0x38
 8024cd0:	18a4      	adds	r4, r4, r2
 8024cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024cd6:	191c      	adds	r4, r3, r4
 8024cd8:	002b      	movs	r3, r5
 8024cda:	4295      	cmp	r5, r2
 8024cdc:	dd00      	ble.n	8024ce0 <_strtod_l+0x76c>
 8024cde:	0013      	movs	r3, r2
 8024ce0:	42a3      	cmp	r3, r4
 8024ce2:	dd00      	ble.n	8024ce6 <_strtod_l+0x772>
 8024ce4:	0023      	movs	r3, r4
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	dd04      	ble.n	8024cf4 <_strtod_l+0x780>
 8024cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024cec:	1ae4      	subs	r4, r4, r3
 8024cee:	1ad2      	subs	r2, r2, r3
 8024cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8024cf2:	1aed      	subs	r5, r5, r3
 8024cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	dd16      	ble.n	8024d28 <_strtod_l+0x7b4>
 8024cfa:	001a      	movs	r2, r3
 8024cfc:	9907      	ldr	r1, [sp, #28]
 8024cfe:	9805      	ldr	r0, [sp, #20]
 8024d00:	f002 ffb6 	bl	8027c70 <__pow5mult>
 8024d04:	9007      	str	r0, [sp, #28]
 8024d06:	2800      	cmp	r0, #0
 8024d08:	d0b3      	beq.n	8024c72 <_strtod_l+0x6fe>
 8024d0a:	0001      	movs	r1, r0
 8024d0c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024d0e:	9805      	ldr	r0, [sp, #20]
 8024d10:	f002 ff04 	bl	8027b1c <__multiply>
 8024d14:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024d16:	2800      	cmp	r0, #0
 8024d18:	d100      	bne.n	8024d1c <_strtod_l+0x7a8>
 8024d1a:	e66f      	b.n	80249fc <_strtod_l+0x488>
 8024d1c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024d1e:	9805      	ldr	r0, [sp, #20]
 8024d20:	f002 fde0 	bl	80278e4 <_Bfree>
 8024d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d26:	931e      	str	r3, [sp, #120]	@ 0x78
 8024d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d2a:	2b00      	cmp	r3, #0
 8024d2c:	dc12      	bgt.n	8024d54 <_strtod_l+0x7e0>
 8024d2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	dd18      	ble.n	8024d66 <_strtod_l+0x7f2>
 8024d34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024d36:	9908      	ldr	r1, [sp, #32]
 8024d38:	9805      	ldr	r0, [sp, #20]
 8024d3a:	f002 ff99 	bl	8027c70 <__pow5mult>
 8024d3e:	9008      	str	r0, [sp, #32]
 8024d40:	2800      	cmp	r0, #0
 8024d42:	d110      	bne.n	8024d66 <_strtod_l+0x7f2>
 8024d44:	2300      	movs	r3, #0
 8024d46:	e658      	b.n	80249fa <_strtod_l+0x486>
 8024d48:	4954      	ldr	r1, [pc, #336]	@ (8024e9c <_strtod_l+0x928>)
 8024d4a:	1acb      	subs	r3, r1, r3
 8024d4c:	0001      	movs	r1, r0
 8024d4e:	4099      	lsls	r1, r3
 8024d50:	9115      	str	r1, [sp, #84]	@ 0x54
 8024d52:	e7ba      	b.n	8024cca <_strtod_l+0x756>
 8024d54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d56:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024d58:	9805      	ldr	r0, [sp, #20]
 8024d5a:	f002 ffe5 	bl	8027d28 <__lshift>
 8024d5e:	901e      	str	r0, [sp, #120]	@ 0x78
 8024d60:	2800      	cmp	r0, #0
 8024d62:	d1e4      	bne.n	8024d2e <_strtod_l+0x7ba>
 8024d64:	e64a      	b.n	80249fc <_strtod_l+0x488>
 8024d66:	2c00      	cmp	r4, #0
 8024d68:	dd07      	ble.n	8024d7a <_strtod_l+0x806>
 8024d6a:	0022      	movs	r2, r4
 8024d6c:	9908      	ldr	r1, [sp, #32]
 8024d6e:	9805      	ldr	r0, [sp, #20]
 8024d70:	f002 ffda 	bl	8027d28 <__lshift>
 8024d74:	9008      	str	r0, [sp, #32]
 8024d76:	2800      	cmp	r0, #0
 8024d78:	d0e4      	beq.n	8024d44 <_strtod_l+0x7d0>
 8024d7a:	2d00      	cmp	r5, #0
 8024d7c:	dd08      	ble.n	8024d90 <_strtod_l+0x81c>
 8024d7e:	002a      	movs	r2, r5
 8024d80:	9907      	ldr	r1, [sp, #28]
 8024d82:	9805      	ldr	r0, [sp, #20]
 8024d84:	f002 ffd0 	bl	8027d28 <__lshift>
 8024d88:	9007      	str	r0, [sp, #28]
 8024d8a:	2800      	cmp	r0, #0
 8024d8c:	d100      	bne.n	8024d90 <_strtod_l+0x81c>
 8024d8e:	e635      	b.n	80249fc <_strtod_l+0x488>
 8024d90:	9a08      	ldr	r2, [sp, #32]
 8024d92:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024d94:	9805      	ldr	r0, [sp, #20]
 8024d96:	f003 f84f 	bl	8027e38 <__mdiff>
 8024d9a:	9006      	str	r0, [sp, #24]
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	d100      	bne.n	8024da2 <_strtod_l+0x82e>
 8024da0:	e62c      	b.n	80249fc <_strtod_l+0x488>
 8024da2:	68c3      	ldr	r3, [r0, #12]
 8024da4:	9907      	ldr	r1, [sp, #28]
 8024da6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024da8:	2300      	movs	r3, #0
 8024daa:	60c3      	str	r3, [r0, #12]
 8024dac:	f003 f828 	bl	8027e00 <__mcmp>
 8024db0:	2800      	cmp	r0, #0
 8024db2:	da3b      	bge.n	8024e2c <_strtod_l+0x8b8>
 8024db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024db6:	4333      	orrs	r3, r6
 8024db8:	d167      	bne.n	8024e8a <_strtod_l+0x916>
 8024dba:	033b      	lsls	r3, r7, #12
 8024dbc:	d165      	bne.n	8024e8a <_strtod_l+0x916>
 8024dbe:	22d6      	movs	r2, #214	@ 0xd6
 8024dc0:	4b37      	ldr	r3, [pc, #220]	@ (8024ea0 <_strtod_l+0x92c>)
 8024dc2:	04d2      	lsls	r2, r2, #19
 8024dc4:	403b      	ands	r3, r7
 8024dc6:	4293      	cmp	r3, r2
 8024dc8:	d95f      	bls.n	8024e8a <_strtod_l+0x916>
 8024dca:	9b06      	ldr	r3, [sp, #24]
 8024dcc:	695b      	ldr	r3, [r3, #20]
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	d103      	bne.n	8024dda <_strtod_l+0x866>
 8024dd2:	9b06      	ldr	r3, [sp, #24]
 8024dd4:	691b      	ldr	r3, [r3, #16]
 8024dd6:	2b01      	cmp	r3, #1
 8024dd8:	dd57      	ble.n	8024e8a <_strtod_l+0x916>
 8024dda:	9906      	ldr	r1, [sp, #24]
 8024ddc:	2201      	movs	r2, #1
 8024dde:	9805      	ldr	r0, [sp, #20]
 8024de0:	f002 ffa2 	bl	8027d28 <__lshift>
 8024de4:	9907      	ldr	r1, [sp, #28]
 8024de6:	9006      	str	r0, [sp, #24]
 8024de8:	f003 f80a 	bl	8027e00 <__mcmp>
 8024dec:	2800      	cmp	r0, #0
 8024dee:	dd4c      	ble.n	8024e8a <_strtod_l+0x916>
 8024df0:	4b2b      	ldr	r3, [pc, #172]	@ (8024ea0 <_strtod_l+0x92c>)
 8024df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024df4:	403b      	ands	r3, r7
 8024df6:	2a00      	cmp	r2, #0
 8024df8:	d074      	beq.n	8024ee4 <_strtod_l+0x970>
 8024dfa:	22d6      	movs	r2, #214	@ 0xd6
 8024dfc:	04d2      	lsls	r2, r2, #19
 8024dfe:	4293      	cmp	r3, r2
 8024e00:	d870      	bhi.n	8024ee4 <_strtod_l+0x970>
 8024e02:	22dc      	movs	r2, #220	@ 0xdc
 8024e04:	0492      	lsls	r2, r2, #18
 8024e06:	4293      	cmp	r3, r2
 8024e08:	d800      	bhi.n	8024e0c <_strtod_l+0x898>
 8024e0a:	e693      	b.n	8024b34 <_strtod_l+0x5c0>
 8024e0c:	0030      	movs	r0, r6
 8024e0e:	0039      	movs	r1, r7
 8024e10:	4b24      	ldr	r3, [pc, #144]	@ (8024ea4 <_strtod_l+0x930>)
 8024e12:	2200      	movs	r2, #0
 8024e14:	f7dd fd9e 	bl	8002954 <__aeabi_dmul>
 8024e18:	4b21      	ldr	r3, [pc, #132]	@ (8024ea0 <_strtod_l+0x92c>)
 8024e1a:	0006      	movs	r6, r0
 8024e1c:	000f      	movs	r7, r1
 8024e1e:	420b      	tst	r3, r1
 8024e20:	d000      	beq.n	8024e24 <_strtod_l+0x8b0>
 8024e22:	e5f4      	b.n	8024a0e <_strtod_l+0x49a>
 8024e24:	2322      	movs	r3, #34	@ 0x22
 8024e26:	9a05      	ldr	r2, [sp, #20]
 8024e28:	6013      	str	r3, [r2, #0]
 8024e2a:	e5f0      	b.n	8024a0e <_strtod_l+0x49a>
 8024e2c:	970e      	str	r7, [sp, #56]	@ 0x38
 8024e2e:	2800      	cmp	r0, #0
 8024e30:	d175      	bne.n	8024f1e <_strtod_l+0x9aa>
 8024e32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024e34:	033b      	lsls	r3, r7, #12
 8024e36:	0b1b      	lsrs	r3, r3, #12
 8024e38:	2a00      	cmp	r2, #0
 8024e3a:	d039      	beq.n	8024eb0 <_strtod_l+0x93c>
 8024e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8024ea8 <_strtod_l+0x934>)
 8024e3e:	4293      	cmp	r3, r2
 8024e40:	d138      	bne.n	8024eb4 <_strtod_l+0x940>
 8024e42:	2101      	movs	r1, #1
 8024e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e46:	4249      	negs	r1, r1
 8024e48:	0032      	movs	r2, r6
 8024e4a:	0008      	movs	r0, r1
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	d00b      	beq.n	8024e68 <_strtod_l+0x8f4>
 8024e50:	24d4      	movs	r4, #212	@ 0xd4
 8024e52:	4b13      	ldr	r3, [pc, #76]	@ (8024ea0 <_strtod_l+0x92c>)
 8024e54:	0008      	movs	r0, r1
 8024e56:	403b      	ands	r3, r7
 8024e58:	04e4      	lsls	r4, r4, #19
 8024e5a:	42a3      	cmp	r3, r4
 8024e5c:	d804      	bhi.n	8024e68 <_strtod_l+0x8f4>
 8024e5e:	306c      	adds	r0, #108	@ 0x6c
 8024e60:	0d1b      	lsrs	r3, r3, #20
 8024e62:	1ac3      	subs	r3, r0, r3
 8024e64:	4099      	lsls	r1, r3
 8024e66:	0008      	movs	r0, r1
 8024e68:	4282      	cmp	r2, r0
 8024e6a:	d123      	bne.n	8024eb4 <_strtod_l+0x940>
 8024e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8024eac <_strtod_l+0x938>)
 8024e6e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024e70:	4299      	cmp	r1, r3
 8024e72:	d102      	bne.n	8024e7a <_strtod_l+0x906>
 8024e74:	3201      	adds	r2, #1
 8024e76:	d100      	bne.n	8024e7a <_strtod_l+0x906>
 8024e78:	e5c0      	b.n	80249fc <_strtod_l+0x488>
 8024e7a:	4b09      	ldr	r3, [pc, #36]	@ (8024ea0 <_strtod_l+0x92c>)
 8024e7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024e7e:	2600      	movs	r6, #0
 8024e80:	401a      	ands	r2, r3
 8024e82:	0013      	movs	r3, r2
 8024e84:	2280      	movs	r2, #128	@ 0x80
 8024e86:	0352      	lsls	r2, r2, #13
 8024e88:	189f      	adds	r7, r3, r2
 8024e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e8c:	2b00      	cmp	r3, #0
 8024e8e:	d1bd      	bne.n	8024e0c <_strtod_l+0x898>
 8024e90:	e5bd      	b.n	8024a0e <_strtod_l+0x49a>
 8024e92:	46c0      	nop			@ (mov r8, r8)
 8024e94:	0802e928 	.word	0x0802e928
 8024e98:	fffffc02 	.word	0xfffffc02
 8024e9c:	fffffbe2 	.word	0xfffffbe2
 8024ea0:	7ff00000 	.word	0x7ff00000
 8024ea4:	39500000 	.word	0x39500000
 8024ea8:	000fffff 	.word	0x000fffff
 8024eac:	7fefffff 	.word	0x7fefffff
 8024eb0:	4333      	orrs	r3, r6
 8024eb2:	d09d      	beq.n	8024df0 <_strtod_l+0x87c>
 8024eb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d01c      	beq.n	8024ef4 <_strtod_l+0x980>
 8024eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ebc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024ebe:	4213      	tst	r3, r2
 8024ec0:	d0e3      	beq.n	8024e8a <_strtod_l+0x916>
 8024ec2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ec4:	0030      	movs	r0, r6
 8024ec6:	0039      	movs	r1, r7
 8024ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	d016      	beq.n	8024efc <_strtod_l+0x988>
 8024ece:	f7ff fb39 	bl	8024544 <sulp>
 8024ed2:	0002      	movs	r2, r0
 8024ed4:	000b      	movs	r3, r1
 8024ed6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024ed8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024eda:	f7dc fd3b 	bl	8001954 <__aeabi_dadd>
 8024ede:	0006      	movs	r6, r0
 8024ee0:	000f      	movs	r7, r1
 8024ee2:	e7d2      	b.n	8024e8a <_strtod_l+0x916>
 8024ee4:	2601      	movs	r6, #1
 8024ee6:	4a92      	ldr	r2, [pc, #584]	@ (8025130 <_strtod_l+0xbbc>)
 8024ee8:	4276      	negs	r6, r6
 8024eea:	189b      	adds	r3, r3, r2
 8024eec:	4a91      	ldr	r2, [pc, #580]	@ (8025134 <_strtod_l+0xbc0>)
 8024eee:	431a      	orrs	r2, r3
 8024ef0:	0017      	movs	r7, r2
 8024ef2:	e7ca      	b.n	8024e8a <_strtod_l+0x916>
 8024ef4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024ef6:	4233      	tst	r3, r6
 8024ef8:	d0c7      	beq.n	8024e8a <_strtod_l+0x916>
 8024efa:	e7e2      	b.n	8024ec2 <_strtod_l+0x94e>
 8024efc:	f7ff fb22 	bl	8024544 <sulp>
 8024f00:	0002      	movs	r2, r0
 8024f02:	000b      	movs	r3, r1
 8024f04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024f06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024f08:	f7de f80a 	bl	8002f20 <__aeabi_dsub>
 8024f0c:	2200      	movs	r2, #0
 8024f0e:	2300      	movs	r3, #0
 8024f10:	0006      	movs	r6, r0
 8024f12:	000f      	movs	r7, r1
 8024f14:	f7db facc 	bl	80004b0 <__aeabi_dcmpeq>
 8024f18:	2800      	cmp	r0, #0
 8024f1a:	d0b6      	beq.n	8024e8a <_strtod_l+0x916>
 8024f1c:	e60a      	b.n	8024b34 <_strtod_l+0x5c0>
 8024f1e:	9907      	ldr	r1, [sp, #28]
 8024f20:	9806      	ldr	r0, [sp, #24]
 8024f22:	f003 f8ef 	bl	8028104 <__ratio>
 8024f26:	2380      	movs	r3, #128	@ 0x80
 8024f28:	2200      	movs	r2, #0
 8024f2a:	05db      	lsls	r3, r3, #23
 8024f2c:	0004      	movs	r4, r0
 8024f2e:	000d      	movs	r5, r1
 8024f30:	f7db face 	bl	80004d0 <__aeabi_dcmple>
 8024f34:	2800      	cmp	r0, #0
 8024f36:	d06c      	beq.n	8025012 <_strtod_l+0xa9e>
 8024f38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	d177      	bne.n	802502e <_strtod_l+0xaba>
 8024f3e:	2e00      	cmp	r6, #0
 8024f40:	d157      	bne.n	8024ff2 <_strtod_l+0xa7e>
 8024f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f44:	031b      	lsls	r3, r3, #12
 8024f46:	d15a      	bne.n	8024ffe <_strtod_l+0xa8a>
 8024f48:	2200      	movs	r2, #0
 8024f4a:	0020      	movs	r0, r4
 8024f4c:	0029      	movs	r1, r5
 8024f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8025138 <_strtod_l+0xbc4>)
 8024f50:	f7db fab4 	bl	80004bc <__aeabi_dcmplt>
 8024f54:	2800      	cmp	r0, #0
 8024f56:	d159      	bne.n	802500c <_strtod_l+0xa98>
 8024f58:	0020      	movs	r0, r4
 8024f5a:	0029      	movs	r1, r5
 8024f5c:	2200      	movs	r2, #0
 8024f5e:	4b77      	ldr	r3, [pc, #476]	@ (802513c <_strtod_l+0xbc8>)
 8024f60:	f7dd fcf8 	bl	8002954 <__aeabi_dmul>
 8024f64:	0004      	movs	r4, r0
 8024f66:	000d      	movs	r5, r1
 8024f68:	2380      	movs	r3, #128	@ 0x80
 8024f6a:	061b      	lsls	r3, r3, #24
 8024f6c:	18eb      	adds	r3, r5, r3
 8024f6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8024f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024f72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024f76:	9216      	str	r2, [sp, #88]	@ 0x58
 8024f78:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024f7a:	4a71      	ldr	r2, [pc, #452]	@ (8025140 <_strtod_l+0xbcc>)
 8024f7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f7e:	4013      	ands	r3, r2
 8024f80:	9315      	str	r3, [sp, #84]	@ 0x54
 8024f82:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024f84:	4b6f      	ldr	r3, [pc, #444]	@ (8025144 <_strtod_l+0xbd0>)
 8024f86:	429a      	cmp	r2, r3
 8024f88:	d000      	beq.n	8024f8c <_strtod_l+0xa18>
 8024f8a:	e087      	b.n	802509c <_strtod_l+0xb28>
 8024f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8025148 <_strtod_l+0xbd4>)
 8024f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024f90:	4694      	mov	ip, r2
 8024f92:	4463      	add	r3, ip
 8024f94:	001f      	movs	r7, r3
 8024f96:	0030      	movs	r0, r6
 8024f98:	0019      	movs	r1, r3
 8024f9a:	f002 ffe7 	bl	8027f6c <__ulp>
 8024f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024fa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024fa2:	f7dd fcd7 	bl	8002954 <__aeabi_dmul>
 8024fa6:	0032      	movs	r2, r6
 8024fa8:	003b      	movs	r3, r7
 8024faa:	f7dc fcd3 	bl	8001954 <__aeabi_dadd>
 8024fae:	4a64      	ldr	r2, [pc, #400]	@ (8025140 <_strtod_l+0xbcc>)
 8024fb0:	4b66      	ldr	r3, [pc, #408]	@ (802514c <_strtod_l+0xbd8>)
 8024fb2:	0006      	movs	r6, r0
 8024fb4:	400a      	ands	r2, r1
 8024fb6:	429a      	cmp	r2, r3
 8024fb8:	d940      	bls.n	802503c <_strtod_l+0xac8>
 8024fba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024fbc:	4a64      	ldr	r2, [pc, #400]	@ (8025150 <_strtod_l+0xbdc>)
 8024fbe:	4293      	cmp	r3, r2
 8024fc0:	d103      	bne.n	8024fca <_strtod_l+0xa56>
 8024fc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024fc4:	3301      	adds	r3, #1
 8024fc6:	d100      	bne.n	8024fca <_strtod_l+0xa56>
 8024fc8:	e518      	b.n	80249fc <_strtod_l+0x488>
 8024fca:	2601      	movs	r6, #1
 8024fcc:	4f60      	ldr	r7, [pc, #384]	@ (8025150 <_strtod_l+0xbdc>)
 8024fce:	4276      	negs	r6, r6
 8024fd0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024fd2:	9805      	ldr	r0, [sp, #20]
 8024fd4:	f002 fc86 	bl	80278e4 <_Bfree>
 8024fd8:	9908      	ldr	r1, [sp, #32]
 8024fda:	9805      	ldr	r0, [sp, #20]
 8024fdc:	f002 fc82 	bl	80278e4 <_Bfree>
 8024fe0:	9907      	ldr	r1, [sp, #28]
 8024fe2:	9805      	ldr	r0, [sp, #20]
 8024fe4:	f002 fc7e 	bl	80278e4 <_Bfree>
 8024fe8:	9906      	ldr	r1, [sp, #24]
 8024fea:	9805      	ldr	r0, [sp, #20]
 8024fec:	f002 fc7a 	bl	80278e4 <_Bfree>
 8024ff0:	e617      	b.n	8024c22 <_strtod_l+0x6ae>
 8024ff2:	2e01      	cmp	r6, #1
 8024ff4:	d103      	bne.n	8024ffe <_strtod_l+0xa8a>
 8024ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d100      	bne.n	8024ffe <_strtod_l+0xa8a>
 8024ffc:	e59a      	b.n	8024b34 <_strtod_l+0x5c0>
 8024ffe:	2300      	movs	r3, #0
 8025000:	4c54      	ldr	r4, [pc, #336]	@ (8025154 <_strtod_l+0xbe0>)
 8025002:	4d4d      	ldr	r5, [pc, #308]	@ (8025138 <_strtod_l+0xbc4>)
 8025004:	930a      	str	r3, [sp, #40]	@ 0x28
 8025006:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025008:	2400      	movs	r4, #0
 802500a:	e7b2      	b.n	8024f72 <_strtod_l+0x9fe>
 802500c:	2400      	movs	r4, #0
 802500e:	4d4b      	ldr	r5, [pc, #300]	@ (802513c <_strtod_l+0xbc8>)
 8025010:	e7aa      	b.n	8024f68 <_strtod_l+0x9f4>
 8025012:	0020      	movs	r0, r4
 8025014:	0029      	movs	r1, r5
 8025016:	4b49      	ldr	r3, [pc, #292]	@ (802513c <_strtod_l+0xbc8>)
 8025018:	2200      	movs	r2, #0
 802501a:	f7dd fc9b 	bl	8002954 <__aeabi_dmul>
 802501e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025020:	0004      	movs	r4, r0
 8025022:	000d      	movs	r5, r1
 8025024:	2b00      	cmp	r3, #0
 8025026:	d09f      	beq.n	8024f68 <_strtod_l+0x9f4>
 8025028:	940a      	str	r4, [sp, #40]	@ 0x28
 802502a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802502c:	e7a1      	b.n	8024f72 <_strtod_l+0x9fe>
 802502e:	2300      	movs	r3, #0
 8025030:	4c41      	ldr	r4, [pc, #260]	@ (8025138 <_strtod_l+0xbc4>)
 8025032:	0025      	movs	r5, r4
 8025034:	930a      	str	r3, [sp, #40]	@ 0x28
 8025036:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025038:	001c      	movs	r4, r3
 802503a:	e79a      	b.n	8024f72 <_strtod_l+0x9fe>
 802503c:	23d4      	movs	r3, #212	@ 0xd4
 802503e:	049b      	lsls	r3, r3, #18
 8025040:	18cf      	adds	r7, r1, r3
 8025042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025044:	9710      	str	r7, [sp, #64]	@ 0x40
 8025046:	2b00      	cmp	r3, #0
 8025048:	d1c2      	bne.n	8024fd0 <_strtod_l+0xa5c>
 802504a:	4b3d      	ldr	r3, [pc, #244]	@ (8025140 <_strtod_l+0xbcc>)
 802504c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802504e:	403b      	ands	r3, r7
 8025050:	429a      	cmp	r2, r3
 8025052:	d1bd      	bne.n	8024fd0 <_strtod_l+0xa5c>
 8025054:	0020      	movs	r0, r4
 8025056:	0029      	movs	r1, r5
 8025058:	f7db fb16 	bl	8000688 <__aeabi_d2lz>
 802505c:	f7db fb4e 	bl	80006fc <__aeabi_l2d>
 8025060:	0002      	movs	r2, r0
 8025062:	000b      	movs	r3, r1
 8025064:	0020      	movs	r0, r4
 8025066:	0029      	movs	r1, r5
 8025068:	f7dd ff5a 	bl	8002f20 <__aeabi_dsub>
 802506c:	033c      	lsls	r4, r7, #12
 802506e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025070:	0b24      	lsrs	r4, r4, #12
 8025072:	4334      	orrs	r4, r6
 8025074:	900e      	str	r0, [sp, #56]	@ 0x38
 8025076:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025078:	4a37      	ldr	r2, [pc, #220]	@ (8025158 <_strtod_l+0xbe4>)
 802507a:	431c      	orrs	r4, r3
 802507c:	d052      	beq.n	8025124 <_strtod_l+0xbb0>
 802507e:	4b37      	ldr	r3, [pc, #220]	@ (802515c <_strtod_l+0xbe8>)
 8025080:	f7db fa1c 	bl	80004bc <__aeabi_dcmplt>
 8025084:	2800      	cmp	r0, #0
 8025086:	d000      	beq.n	802508a <_strtod_l+0xb16>
 8025088:	e4c1      	b.n	8024a0e <_strtod_l+0x49a>
 802508a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802508c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802508e:	4a34      	ldr	r2, [pc, #208]	@ (8025160 <_strtod_l+0xbec>)
 8025090:	4b2a      	ldr	r3, [pc, #168]	@ (802513c <_strtod_l+0xbc8>)
 8025092:	f7db fa27 	bl	80004e4 <__aeabi_dcmpgt>
 8025096:	2800      	cmp	r0, #0
 8025098:	d09a      	beq.n	8024fd0 <_strtod_l+0xa5c>
 802509a:	e4b8      	b.n	8024a0e <_strtod_l+0x49a>
 802509c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d02a      	beq.n	80250f8 <_strtod_l+0xb84>
 80250a2:	23d4      	movs	r3, #212	@ 0xd4
 80250a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80250a6:	04db      	lsls	r3, r3, #19
 80250a8:	429a      	cmp	r2, r3
 80250aa:	d825      	bhi.n	80250f8 <_strtod_l+0xb84>
 80250ac:	0020      	movs	r0, r4
 80250ae:	0029      	movs	r1, r5
 80250b0:	4a2c      	ldr	r2, [pc, #176]	@ (8025164 <_strtod_l+0xbf0>)
 80250b2:	4b2d      	ldr	r3, [pc, #180]	@ (8025168 <_strtod_l+0xbf4>)
 80250b4:	f7db fa0c 	bl	80004d0 <__aeabi_dcmple>
 80250b8:	2800      	cmp	r0, #0
 80250ba:	d016      	beq.n	80250ea <_strtod_l+0xb76>
 80250bc:	0020      	movs	r0, r4
 80250be:	0029      	movs	r1, r5
 80250c0:	f7db fac4 	bl	800064c <__aeabi_d2uiz>
 80250c4:	2800      	cmp	r0, #0
 80250c6:	d100      	bne.n	80250ca <_strtod_l+0xb56>
 80250c8:	3001      	adds	r0, #1
 80250ca:	f7de fbbf 	bl	800384c <__aeabi_ui2d>
 80250ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80250d0:	0004      	movs	r4, r0
 80250d2:	000d      	movs	r5, r1
 80250d4:	2b00      	cmp	r3, #0
 80250d6:	d122      	bne.n	802511e <_strtod_l+0xbaa>
 80250d8:	2380      	movs	r3, #128	@ 0x80
 80250da:	061b      	lsls	r3, r3, #24
 80250dc:	18cb      	adds	r3, r1, r3
 80250de:	9018      	str	r0, [sp, #96]	@ 0x60
 80250e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80250e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80250e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80250e6:	9216      	str	r2, [sp, #88]	@ 0x58
 80250e8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80250ea:	22d6      	movs	r2, #214	@ 0xd6
 80250ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80250ee:	04d2      	lsls	r2, r2, #19
 80250f0:	189b      	adds	r3, r3, r2
 80250f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80250f4:	1a9b      	subs	r3, r3, r2
 80250f6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80250f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80250fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80250fc:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80250fe:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025100:	f002 ff34 	bl	8027f6c <__ulp>
 8025104:	0002      	movs	r2, r0
 8025106:	000b      	movs	r3, r1
 8025108:	0030      	movs	r0, r6
 802510a:	0039      	movs	r1, r7
 802510c:	f7dd fc22 	bl	8002954 <__aeabi_dmul>
 8025110:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025114:	f7dc fc1e 	bl	8001954 <__aeabi_dadd>
 8025118:	0006      	movs	r6, r0
 802511a:	000f      	movs	r7, r1
 802511c:	e791      	b.n	8025042 <_strtod_l+0xace>
 802511e:	9418      	str	r4, [sp, #96]	@ 0x60
 8025120:	9519      	str	r5, [sp, #100]	@ 0x64
 8025122:	e7de      	b.n	80250e2 <_strtod_l+0xb6e>
 8025124:	4b11      	ldr	r3, [pc, #68]	@ (802516c <_strtod_l+0xbf8>)
 8025126:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025128:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802512a:	f7db f9c7 	bl	80004bc <__aeabi_dcmplt>
 802512e:	e7b2      	b.n	8025096 <_strtod_l+0xb22>
 8025130:	fff00000 	.word	0xfff00000
 8025134:	000fffff 	.word	0x000fffff
 8025138:	3ff00000 	.word	0x3ff00000
 802513c:	3fe00000 	.word	0x3fe00000
 8025140:	7ff00000 	.word	0x7ff00000
 8025144:	7fe00000 	.word	0x7fe00000
 8025148:	fcb00000 	.word	0xfcb00000
 802514c:	7c9fffff 	.word	0x7c9fffff
 8025150:	7fefffff 	.word	0x7fefffff
 8025154:	bff00000 	.word	0xbff00000
 8025158:	94a03595 	.word	0x94a03595
 802515c:	3fdfffff 	.word	0x3fdfffff
 8025160:	35afe535 	.word	0x35afe535
 8025164:	ffc00000 	.word	0xffc00000
 8025168:	41dfffff 	.word	0x41dfffff
 802516c:	3fcfffff 	.word	0x3fcfffff

08025170 <strtod>:
 8025170:	b510      	push	{r4, lr}
 8025172:	4c04      	ldr	r4, [pc, #16]	@ (8025184 <strtod+0x14>)
 8025174:	000a      	movs	r2, r1
 8025176:	0001      	movs	r1, r0
 8025178:	4b03      	ldr	r3, [pc, #12]	@ (8025188 <strtod+0x18>)
 802517a:	6820      	ldr	r0, [r4, #0]
 802517c:	f7ff f9fa 	bl	8024574 <_strtod_l>
 8025180:	bd10      	pop	{r4, pc}
 8025182:	46c0      	nop			@ (mov r8, r8)
 8025184:	200003ec 	.word	0x200003ec
 8025188:	20000280 	.word	0x20000280

0802518c <_strtol_l.isra.0>:
 802518c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802518e:	b085      	sub	sp, #20
 8025190:	0017      	movs	r7, r2
 8025192:	001e      	movs	r6, r3
 8025194:	9003      	str	r0, [sp, #12]
 8025196:	9101      	str	r1, [sp, #4]
 8025198:	2b24      	cmp	r3, #36	@ 0x24
 802519a:	d823      	bhi.n	80251e4 <_strtol_l.isra.0+0x58>
 802519c:	000c      	movs	r4, r1
 802519e:	2b01      	cmp	r3, #1
 80251a0:	d020      	beq.n	80251e4 <_strtol_l.isra.0+0x58>
 80251a2:	4b3d      	ldr	r3, [pc, #244]	@ (8025298 <_strtol_l.isra.0+0x10c>)
 80251a4:	2208      	movs	r2, #8
 80251a6:	469c      	mov	ip, r3
 80251a8:	0023      	movs	r3, r4
 80251aa:	4661      	mov	r1, ip
 80251ac:	781d      	ldrb	r5, [r3, #0]
 80251ae:	3401      	adds	r4, #1
 80251b0:	5d48      	ldrb	r0, [r1, r5]
 80251b2:	0001      	movs	r1, r0
 80251b4:	4011      	ands	r1, r2
 80251b6:	4210      	tst	r0, r2
 80251b8:	d1f6      	bne.n	80251a8 <_strtol_l.isra.0+0x1c>
 80251ba:	2d2d      	cmp	r5, #45	@ 0x2d
 80251bc:	d119      	bne.n	80251f2 <_strtol_l.isra.0+0x66>
 80251be:	7825      	ldrb	r5, [r4, #0]
 80251c0:	1c9c      	adds	r4, r3, #2
 80251c2:	2301      	movs	r3, #1
 80251c4:	9300      	str	r3, [sp, #0]
 80251c6:	2210      	movs	r2, #16
 80251c8:	0033      	movs	r3, r6
 80251ca:	4393      	bics	r3, r2
 80251cc:	d11d      	bne.n	802520a <_strtol_l.isra.0+0x7e>
 80251ce:	2d30      	cmp	r5, #48	@ 0x30
 80251d0:	d115      	bne.n	80251fe <_strtol_l.isra.0+0x72>
 80251d2:	2120      	movs	r1, #32
 80251d4:	7823      	ldrb	r3, [r4, #0]
 80251d6:	438b      	bics	r3, r1
 80251d8:	2b58      	cmp	r3, #88	@ 0x58
 80251da:	d110      	bne.n	80251fe <_strtol_l.isra.0+0x72>
 80251dc:	7865      	ldrb	r5, [r4, #1]
 80251de:	3402      	adds	r4, #2
 80251e0:	2610      	movs	r6, #16
 80251e2:	e012      	b.n	802520a <_strtol_l.isra.0+0x7e>
 80251e4:	f001 f80a 	bl	80261fc <__errno>
 80251e8:	2316      	movs	r3, #22
 80251ea:	6003      	str	r3, [r0, #0]
 80251ec:	2000      	movs	r0, #0
 80251ee:	b005      	add	sp, #20
 80251f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251f2:	9100      	str	r1, [sp, #0]
 80251f4:	2d2b      	cmp	r5, #43	@ 0x2b
 80251f6:	d1e6      	bne.n	80251c6 <_strtol_l.isra.0+0x3a>
 80251f8:	7825      	ldrb	r5, [r4, #0]
 80251fa:	1c9c      	adds	r4, r3, #2
 80251fc:	e7e3      	b.n	80251c6 <_strtol_l.isra.0+0x3a>
 80251fe:	2e00      	cmp	r6, #0
 8025200:	d1ee      	bne.n	80251e0 <_strtol_l.isra.0+0x54>
 8025202:	360a      	adds	r6, #10
 8025204:	2d30      	cmp	r5, #48	@ 0x30
 8025206:	d100      	bne.n	802520a <_strtol_l.isra.0+0x7e>
 8025208:	3e02      	subs	r6, #2
 802520a:	4a24      	ldr	r2, [pc, #144]	@ (802529c <_strtol_l.isra.0+0x110>)
 802520c:	9b00      	ldr	r3, [sp, #0]
 802520e:	4694      	mov	ip, r2
 8025210:	4463      	add	r3, ip
 8025212:	0031      	movs	r1, r6
 8025214:	0018      	movs	r0, r3
 8025216:	9302      	str	r3, [sp, #8]
 8025218:	f7db f84a 	bl	80002b0 <__aeabi_uidivmod>
 802521c:	2200      	movs	r2, #0
 802521e:	4684      	mov	ip, r0
 8025220:	0010      	movs	r0, r2
 8025222:	002b      	movs	r3, r5
 8025224:	3b30      	subs	r3, #48	@ 0x30
 8025226:	2b09      	cmp	r3, #9
 8025228:	d811      	bhi.n	802524e <_strtol_l.isra.0+0xc2>
 802522a:	001d      	movs	r5, r3
 802522c:	42ae      	cmp	r6, r5
 802522e:	dd1d      	ble.n	802526c <_strtol_l.isra.0+0xe0>
 8025230:	1c53      	adds	r3, r2, #1
 8025232:	d009      	beq.n	8025248 <_strtol_l.isra.0+0xbc>
 8025234:	2201      	movs	r2, #1
 8025236:	4252      	negs	r2, r2
 8025238:	4584      	cmp	ip, r0
 802523a:	d305      	bcc.n	8025248 <_strtol_l.isra.0+0xbc>
 802523c:	d101      	bne.n	8025242 <_strtol_l.isra.0+0xb6>
 802523e:	42a9      	cmp	r1, r5
 8025240:	db11      	blt.n	8025266 <_strtol_l.isra.0+0xda>
 8025242:	2201      	movs	r2, #1
 8025244:	4370      	muls	r0, r6
 8025246:	1828      	adds	r0, r5, r0
 8025248:	7825      	ldrb	r5, [r4, #0]
 802524a:	3401      	adds	r4, #1
 802524c:	e7e9      	b.n	8025222 <_strtol_l.isra.0+0x96>
 802524e:	002b      	movs	r3, r5
 8025250:	3b41      	subs	r3, #65	@ 0x41
 8025252:	2b19      	cmp	r3, #25
 8025254:	d801      	bhi.n	802525a <_strtol_l.isra.0+0xce>
 8025256:	3d37      	subs	r5, #55	@ 0x37
 8025258:	e7e8      	b.n	802522c <_strtol_l.isra.0+0xa0>
 802525a:	002b      	movs	r3, r5
 802525c:	3b61      	subs	r3, #97	@ 0x61
 802525e:	2b19      	cmp	r3, #25
 8025260:	d804      	bhi.n	802526c <_strtol_l.isra.0+0xe0>
 8025262:	3d57      	subs	r5, #87	@ 0x57
 8025264:	e7e2      	b.n	802522c <_strtol_l.isra.0+0xa0>
 8025266:	2201      	movs	r2, #1
 8025268:	4252      	negs	r2, r2
 802526a:	e7ed      	b.n	8025248 <_strtol_l.isra.0+0xbc>
 802526c:	1c53      	adds	r3, r2, #1
 802526e:	d108      	bne.n	8025282 <_strtol_l.isra.0+0xf6>
 8025270:	2322      	movs	r3, #34	@ 0x22
 8025272:	9a03      	ldr	r2, [sp, #12]
 8025274:	9802      	ldr	r0, [sp, #8]
 8025276:	6013      	str	r3, [r2, #0]
 8025278:	2f00      	cmp	r7, #0
 802527a:	d0b8      	beq.n	80251ee <_strtol_l.isra.0+0x62>
 802527c:	1e63      	subs	r3, r4, #1
 802527e:	9301      	str	r3, [sp, #4]
 8025280:	e007      	b.n	8025292 <_strtol_l.isra.0+0x106>
 8025282:	9b00      	ldr	r3, [sp, #0]
 8025284:	2b00      	cmp	r3, #0
 8025286:	d000      	beq.n	802528a <_strtol_l.isra.0+0xfe>
 8025288:	4240      	negs	r0, r0
 802528a:	2f00      	cmp	r7, #0
 802528c:	d0af      	beq.n	80251ee <_strtol_l.isra.0+0x62>
 802528e:	2a00      	cmp	r2, #0
 8025290:	d1f4      	bne.n	802527c <_strtol_l.isra.0+0xf0>
 8025292:	9b01      	ldr	r3, [sp, #4]
 8025294:	603b      	str	r3, [r7, #0]
 8025296:	e7aa      	b.n	80251ee <_strtol_l.isra.0+0x62>
 8025298:	0802e951 	.word	0x0802e951
 802529c:	7fffffff 	.word	0x7fffffff

080252a0 <strtol>:
 80252a0:	b510      	push	{r4, lr}
 80252a2:	4c04      	ldr	r4, [pc, #16]	@ (80252b4 <strtol+0x14>)
 80252a4:	0013      	movs	r3, r2
 80252a6:	000a      	movs	r2, r1
 80252a8:	0001      	movs	r1, r0
 80252aa:	6820      	ldr	r0, [r4, #0]
 80252ac:	f7ff ff6e 	bl	802518c <_strtol_l.isra.0>
 80252b0:	bd10      	pop	{r4, pc}
 80252b2:	46c0      	nop			@ (mov r8, r8)
 80252b4:	200003ec 	.word	0x200003ec

080252b8 <__cvt>:
 80252b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252ba:	001f      	movs	r7, r3
 80252bc:	2300      	movs	r3, #0
 80252be:	0016      	movs	r6, r2
 80252c0:	b08b      	sub	sp, #44	@ 0x2c
 80252c2:	429f      	cmp	r7, r3
 80252c4:	da04      	bge.n	80252d0 <__cvt+0x18>
 80252c6:	2180      	movs	r1, #128	@ 0x80
 80252c8:	0609      	lsls	r1, r1, #24
 80252ca:	187b      	adds	r3, r7, r1
 80252cc:	001f      	movs	r7, r3
 80252ce:	232d      	movs	r3, #45	@ 0x2d
 80252d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80252d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80252d4:	7013      	strb	r3, [r2, #0]
 80252d6:	2320      	movs	r3, #32
 80252d8:	2203      	movs	r2, #3
 80252da:	439d      	bics	r5, r3
 80252dc:	2d46      	cmp	r5, #70	@ 0x46
 80252de:	d007      	beq.n	80252f0 <__cvt+0x38>
 80252e0:	002b      	movs	r3, r5
 80252e2:	3b45      	subs	r3, #69	@ 0x45
 80252e4:	4259      	negs	r1, r3
 80252e6:	414b      	adcs	r3, r1
 80252e8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80252ea:	3a01      	subs	r2, #1
 80252ec:	18cb      	adds	r3, r1, r3
 80252ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80252f0:	ab09      	add	r3, sp, #36	@ 0x24
 80252f2:	9304      	str	r3, [sp, #16]
 80252f4:	ab08      	add	r3, sp, #32
 80252f6:	9303      	str	r3, [sp, #12]
 80252f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80252fa:	9200      	str	r2, [sp, #0]
 80252fc:	9302      	str	r3, [sp, #8]
 80252fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025300:	0032      	movs	r2, r6
 8025302:	9301      	str	r3, [sp, #4]
 8025304:	003b      	movs	r3, r7
 8025306:	f001 f847 	bl	8026398 <_dtoa_r>
 802530a:	0004      	movs	r4, r0
 802530c:	2d47      	cmp	r5, #71	@ 0x47
 802530e:	d11b      	bne.n	8025348 <__cvt+0x90>
 8025310:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025312:	07db      	lsls	r3, r3, #31
 8025314:	d511      	bpl.n	802533a <__cvt+0x82>
 8025316:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025318:	18c3      	adds	r3, r0, r3
 802531a:	9307      	str	r3, [sp, #28]
 802531c:	2200      	movs	r2, #0
 802531e:	2300      	movs	r3, #0
 8025320:	0030      	movs	r0, r6
 8025322:	0039      	movs	r1, r7
 8025324:	f7db f8c4 	bl	80004b0 <__aeabi_dcmpeq>
 8025328:	2800      	cmp	r0, #0
 802532a:	d001      	beq.n	8025330 <__cvt+0x78>
 802532c:	9b07      	ldr	r3, [sp, #28]
 802532e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025330:	2230      	movs	r2, #48	@ 0x30
 8025332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025334:	9907      	ldr	r1, [sp, #28]
 8025336:	428b      	cmp	r3, r1
 8025338:	d320      	bcc.n	802537c <__cvt+0xc4>
 802533a:	0020      	movs	r0, r4
 802533c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802533e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025340:	1b1b      	subs	r3, r3, r4
 8025342:	6013      	str	r3, [r2, #0]
 8025344:	b00b      	add	sp, #44	@ 0x2c
 8025346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802534a:	18c3      	adds	r3, r0, r3
 802534c:	9307      	str	r3, [sp, #28]
 802534e:	2d46      	cmp	r5, #70	@ 0x46
 8025350:	d1e4      	bne.n	802531c <__cvt+0x64>
 8025352:	7803      	ldrb	r3, [r0, #0]
 8025354:	2b30      	cmp	r3, #48	@ 0x30
 8025356:	d10c      	bne.n	8025372 <__cvt+0xba>
 8025358:	2200      	movs	r2, #0
 802535a:	2300      	movs	r3, #0
 802535c:	0030      	movs	r0, r6
 802535e:	0039      	movs	r1, r7
 8025360:	f7db f8a6 	bl	80004b0 <__aeabi_dcmpeq>
 8025364:	2800      	cmp	r0, #0
 8025366:	d104      	bne.n	8025372 <__cvt+0xba>
 8025368:	2301      	movs	r3, #1
 802536a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802536c:	1a9b      	subs	r3, r3, r2
 802536e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025370:	6013      	str	r3, [r2, #0]
 8025372:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025374:	9a07      	ldr	r2, [sp, #28]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	18d3      	adds	r3, r2, r3
 802537a:	e7ce      	b.n	802531a <__cvt+0x62>
 802537c:	1c59      	adds	r1, r3, #1
 802537e:	9109      	str	r1, [sp, #36]	@ 0x24
 8025380:	701a      	strb	r2, [r3, #0]
 8025382:	e7d6      	b.n	8025332 <__cvt+0x7a>

08025384 <__exponent>:
 8025384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025386:	232b      	movs	r3, #43	@ 0x2b
 8025388:	b085      	sub	sp, #20
 802538a:	0005      	movs	r5, r0
 802538c:	1e0c      	subs	r4, r1, #0
 802538e:	7002      	strb	r2, [r0, #0]
 8025390:	da01      	bge.n	8025396 <__exponent+0x12>
 8025392:	424c      	negs	r4, r1
 8025394:	3302      	adds	r3, #2
 8025396:	706b      	strb	r3, [r5, #1]
 8025398:	2c09      	cmp	r4, #9
 802539a:	dd2c      	ble.n	80253f6 <__exponent+0x72>
 802539c:	ab02      	add	r3, sp, #8
 802539e:	1dde      	adds	r6, r3, #7
 80253a0:	0020      	movs	r0, r4
 80253a2:	210a      	movs	r1, #10
 80253a4:	f7db f86e 	bl	8000484 <__aeabi_idivmod>
 80253a8:	0037      	movs	r7, r6
 80253aa:	3130      	adds	r1, #48	@ 0x30
 80253ac:	3e01      	subs	r6, #1
 80253ae:	0020      	movs	r0, r4
 80253b0:	7031      	strb	r1, [r6, #0]
 80253b2:	210a      	movs	r1, #10
 80253b4:	9401      	str	r4, [sp, #4]
 80253b6:	f7da ff7f 	bl	80002b8 <__divsi3>
 80253ba:	9b01      	ldr	r3, [sp, #4]
 80253bc:	0004      	movs	r4, r0
 80253be:	2b63      	cmp	r3, #99	@ 0x63
 80253c0:	dcee      	bgt.n	80253a0 <__exponent+0x1c>
 80253c2:	1eba      	subs	r2, r7, #2
 80253c4:	1ca8      	adds	r0, r5, #2
 80253c6:	0001      	movs	r1, r0
 80253c8:	0013      	movs	r3, r2
 80253ca:	3430      	adds	r4, #48	@ 0x30
 80253cc:	7014      	strb	r4, [r2, #0]
 80253ce:	ac02      	add	r4, sp, #8
 80253d0:	3407      	adds	r4, #7
 80253d2:	429c      	cmp	r4, r3
 80253d4:	d80a      	bhi.n	80253ec <__exponent+0x68>
 80253d6:	2300      	movs	r3, #0
 80253d8:	4294      	cmp	r4, r2
 80253da:	d303      	bcc.n	80253e4 <__exponent+0x60>
 80253dc:	3309      	adds	r3, #9
 80253de:	aa02      	add	r2, sp, #8
 80253e0:	189b      	adds	r3, r3, r2
 80253e2:	1bdb      	subs	r3, r3, r7
 80253e4:	18c0      	adds	r0, r0, r3
 80253e6:	1b40      	subs	r0, r0, r5
 80253e8:	b005      	add	sp, #20
 80253ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253ec:	781c      	ldrb	r4, [r3, #0]
 80253ee:	3301      	adds	r3, #1
 80253f0:	700c      	strb	r4, [r1, #0]
 80253f2:	3101      	adds	r1, #1
 80253f4:	e7eb      	b.n	80253ce <__exponent+0x4a>
 80253f6:	2330      	movs	r3, #48	@ 0x30
 80253f8:	18e4      	adds	r4, r4, r3
 80253fa:	70ab      	strb	r3, [r5, #2]
 80253fc:	1d28      	adds	r0, r5, #4
 80253fe:	70ec      	strb	r4, [r5, #3]
 8025400:	e7f1      	b.n	80253e6 <__exponent+0x62>
	...

08025404 <_printf_float>:
 8025404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025406:	b097      	sub	sp, #92	@ 0x5c
 8025408:	000d      	movs	r5, r1
 802540a:	920a      	str	r2, [sp, #40]	@ 0x28
 802540c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802540e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025410:	9009      	str	r0, [sp, #36]	@ 0x24
 8025412:	f000 fea1 	bl	8026158 <_localeconv_r>
 8025416:	6803      	ldr	r3, [r0, #0]
 8025418:	0018      	movs	r0, r3
 802541a:	930d      	str	r3, [sp, #52]	@ 0x34
 802541c:	f7da fea6 	bl	800016c <strlen>
 8025420:	2300      	movs	r3, #0
 8025422:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025424:	9314      	str	r3, [sp, #80]	@ 0x50
 8025426:	7e2b      	ldrb	r3, [r5, #24]
 8025428:	2207      	movs	r2, #7
 802542a:	930c      	str	r3, [sp, #48]	@ 0x30
 802542c:	682b      	ldr	r3, [r5, #0]
 802542e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025430:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025432:	6823      	ldr	r3, [r4, #0]
 8025434:	05c9      	lsls	r1, r1, #23
 8025436:	d545      	bpl.n	80254c4 <_printf_float+0xc0>
 8025438:	189b      	adds	r3, r3, r2
 802543a:	4393      	bics	r3, r2
 802543c:	001a      	movs	r2, r3
 802543e:	3208      	adds	r2, #8
 8025440:	6022      	str	r2, [r4, #0]
 8025442:	2201      	movs	r2, #1
 8025444:	681e      	ldr	r6, [r3, #0]
 8025446:	685f      	ldr	r7, [r3, #4]
 8025448:	007b      	lsls	r3, r7, #1
 802544a:	085b      	lsrs	r3, r3, #1
 802544c:	9311      	str	r3, [sp, #68]	@ 0x44
 802544e:	9610      	str	r6, [sp, #64]	@ 0x40
 8025450:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025452:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025454:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025456:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025458:	4ba7      	ldr	r3, [pc, #668]	@ (80256f8 <_printf_float+0x2f4>)
 802545a:	4252      	negs	r2, r2
 802545c:	f7de f96a 	bl	8003734 <__aeabi_dcmpun>
 8025460:	2800      	cmp	r0, #0
 8025462:	d131      	bne.n	80254c8 <_printf_float+0xc4>
 8025464:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025466:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025468:	2201      	movs	r2, #1
 802546a:	4ba3      	ldr	r3, [pc, #652]	@ (80256f8 <_printf_float+0x2f4>)
 802546c:	4252      	negs	r2, r2
 802546e:	f7db f82f 	bl	80004d0 <__aeabi_dcmple>
 8025472:	2800      	cmp	r0, #0
 8025474:	d128      	bne.n	80254c8 <_printf_float+0xc4>
 8025476:	2200      	movs	r2, #0
 8025478:	2300      	movs	r3, #0
 802547a:	0030      	movs	r0, r6
 802547c:	0039      	movs	r1, r7
 802547e:	f7db f81d 	bl	80004bc <__aeabi_dcmplt>
 8025482:	2800      	cmp	r0, #0
 8025484:	d003      	beq.n	802548e <_printf_float+0x8a>
 8025486:	002b      	movs	r3, r5
 8025488:	222d      	movs	r2, #45	@ 0x2d
 802548a:	3343      	adds	r3, #67	@ 0x43
 802548c:	701a      	strb	r2, [r3, #0]
 802548e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025490:	4f9a      	ldr	r7, [pc, #616]	@ (80256fc <_printf_float+0x2f8>)
 8025492:	2b47      	cmp	r3, #71	@ 0x47
 8025494:	d800      	bhi.n	8025498 <_printf_float+0x94>
 8025496:	4f9a      	ldr	r7, [pc, #616]	@ (8025700 <_printf_float+0x2fc>)
 8025498:	2303      	movs	r3, #3
 802549a:	2400      	movs	r4, #0
 802549c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802549e:	612b      	str	r3, [r5, #16]
 80254a0:	3301      	adds	r3, #1
 80254a2:	439a      	bics	r2, r3
 80254a4:	602a      	str	r2, [r5, #0]
 80254a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80254a8:	0029      	movs	r1, r5
 80254aa:	9300      	str	r3, [sp, #0]
 80254ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80254ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80254b0:	aa15      	add	r2, sp, #84	@ 0x54
 80254b2:	f000 f9e5 	bl	8025880 <_printf_common>
 80254b6:	3001      	adds	r0, #1
 80254b8:	d000      	beq.n	80254bc <_printf_float+0xb8>
 80254ba:	e09e      	b.n	80255fa <_printf_float+0x1f6>
 80254bc:	2001      	movs	r0, #1
 80254be:	4240      	negs	r0, r0
 80254c0:	b017      	add	sp, #92	@ 0x5c
 80254c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80254c4:	3307      	adds	r3, #7
 80254c6:	e7b8      	b.n	802543a <_printf_float+0x36>
 80254c8:	0032      	movs	r2, r6
 80254ca:	003b      	movs	r3, r7
 80254cc:	0030      	movs	r0, r6
 80254ce:	0039      	movs	r1, r7
 80254d0:	f7de f930 	bl	8003734 <__aeabi_dcmpun>
 80254d4:	2800      	cmp	r0, #0
 80254d6:	d00b      	beq.n	80254f0 <_printf_float+0xec>
 80254d8:	2f00      	cmp	r7, #0
 80254da:	da03      	bge.n	80254e4 <_printf_float+0xe0>
 80254dc:	002b      	movs	r3, r5
 80254de:	222d      	movs	r2, #45	@ 0x2d
 80254e0:	3343      	adds	r3, #67	@ 0x43
 80254e2:	701a      	strb	r2, [r3, #0]
 80254e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80254e6:	4f87      	ldr	r7, [pc, #540]	@ (8025704 <_printf_float+0x300>)
 80254e8:	2b47      	cmp	r3, #71	@ 0x47
 80254ea:	d8d5      	bhi.n	8025498 <_printf_float+0x94>
 80254ec:	4f86      	ldr	r7, [pc, #536]	@ (8025708 <_printf_float+0x304>)
 80254ee:	e7d3      	b.n	8025498 <_printf_float+0x94>
 80254f0:	2220      	movs	r2, #32
 80254f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80254f4:	686b      	ldr	r3, [r5, #4]
 80254f6:	4394      	bics	r4, r2
 80254f8:	1c5a      	adds	r2, r3, #1
 80254fa:	d146      	bne.n	802558a <_printf_float+0x186>
 80254fc:	3307      	adds	r3, #7
 80254fe:	606b      	str	r3, [r5, #4]
 8025500:	2380      	movs	r3, #128	@ 0x80
 8025502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025504:	00db      	lsls	r3, r3, #3
 8025506:	4313      	orrs	r3, r2
 8025508:	2200      	movs	r2, #0
 802550a:	602b      	str	r3, [r5, #0]
 802550c:	9206      	str	r2, [sp, #24]
 802550e:	aa14      	add	r2, sp, #80	@ 0x50
 8025510:	9205      	str	r2, [sp, #20]
 8025512:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025514:	a90a      	add	r1, sp, #40	@ 0x28
 8025516:	9204      	str	r2, [sp, #16]
 8025518:	aa13      	add	r2, sp, #76	@ 0x4c
 802551a:	9203      	str	r2, [sp, #12]
 802551c:	2223      	movs	r2, #35	@ 0x23
 802551e:	1852      	adds	r2, r2, r1
 8025520:	9202      	str	r2, [sp, #8]
 8025522:	9301      	str	r3, [sp, #4]
 8025524:	686b      	ldr	r3, [r5, #4]
 8025526:	0032      	movs	r2, r6
 8025528:	9300      	str	r3, [sp, #0]
 802552a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802552c:	003b      	movs	r3, r7
 802552e:	f7ff fec3 	bl	80252b8 <__cvt>
 8025532:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025534:	0007      	movs	r7, r0
 8025536:	2c47      	cmp	r4, #71	@ 0x47
 8025538:	d12d      	bne.n	8025596 <_printf_float+0x192>
 802553a:	1cd3      	adds	r3, r2, #3
 802553c:	db02      	blt.n	8025544 <_printf_float+0x140>
 802553e:	686b      	ldr	r3, [r5, #4]
 8025540:	429a      	cmp	r2, r3
 8025542:	dd47      	ble.n	80255d4 <_printf_float+0x1d0>
 8025544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025546:	3b02      	subs	r3, #2
 8025548:	b2db      	uxtb	r3, r3
 802554a:	930c      	str	r3, [sp, #48]	@ 0x30
 802554c:	0028      	movs	r0, r5
 802554e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025550:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025552:	3901      	subs	r1, #1
 8025554:	3050      	adds	r0, #80	@ 0x50
 8025556:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025558:	f7ff ff14 	bl	8025384 <__exponent>
 802555c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802555e:	0004      	movs	r4, r0
 8025560:	1813      	adds	r3, r2, r0
 8025562:	612b      	str	r3, [r5, #16]
 8025564:	2a01      	cmp	r2, #1
 8025566:	dc02      	bgt.n	802556e <_printf_float+0x16a>
 8025568:	682a      	ldr	r2, [r5, #0]
 802556a:	07d2      	lsls	r2, r2, #31
 802556c:	d501      	bpl.n	8025572 <_printf_float+0x16e>
 802556e:	3301      	adds	r3, #1
 8025570:	612b      	str	r3, [r5, #16]
 8025572:	2323      	movs	r3, #35	@ 0x23
 8025574:	aa0a      	add	r2, sp, #40	@ 0x28
 8025576:	189b      	adds	r3, r3, r2
 8025578:	781b      	ldrb	r3, [r3, #0]
 802557a:	2b00      	cmp	r3, #0
 802557c:	d100      	bne.n	8025580 <_printf_float+0x17c>
 802557e:	e792      	b.n	80254a6 <_printf_float+0xa2>
 8025580:	002b      	movs	r3, r5
 8025582:	222d      	movs	r2, #45	@ 0x2d
 8025584:	3343      	adds	r3, #67	@ 0x43
 8025586:	701a      	strb	r2, [r3, #0]
 8025588:	e78d      	b.n	80254a6 <_printf_float+0xa2>
 802558a:	2c47      	cmp	r4, #71	@ 0x47
 802558c:	d1b8      	bne.n	8025500 <_printf_float+0xfc>
 802558e:	2b00      	cmp	r3, #0
 8025590:	d1b6      	bne.n	8025500 <_printf_float+0xfc>
 8025592:	3301      	adds	r3, #1
 8025594:	e7b3      	b.n	80254fe <_printf_float+0xfa>
 8025596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025598:	2b65      	cmp	r3, #101	@ 0x65
 802559a:	d9d7      	bls.n	802554c <_printf_float+0x148>
 802559c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802559e:	2b66      	cmp	r3, #102	@ 0x66
 80255a0:	d11a      	bne.n	80255d8 <_printf_float+0x1d4>
 80255a2:	686b      	ldr	r3, [r5, #4]
 80255a4:	2a00      	cmp	r2, #0
 80255a6:	dd09      	ble.n	80255bc <_printf_float+0x1b8>
 80255a8:	612a      	str	r2, [r5, #16]
 80255aa:	2b00      	cmp	r3, #0
 80255ac:	d102      	bne.n	80255b4 <_printf_float+0x1b0>
 80255ae:	6829      	ldr	r1, [r5, #0]
 80255b0:	07c9      	lsls	r1, r1, #31
 80255b2:	d50b      	bpl.n	80255cc <_printf_float+0x1c8>
 80255b4:	3301      	adds	r3, #1
 80255b6:	189b      	adds	r3, r3, r2
 80255b8:	612b      	str	r3, [r5, #16]
 80255ba:	e007      	b.n	80255cc <_printf_float+0x1c8>
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d103      	bne.n	80255c8 <_printf_float+0x1c4>
 80255c0:	2201      	movs	r2, #1
 80255c2:	6829      	ldr	r1, [r5, #0]
 80255c4:	4211      	tst	r1, r2
 80255c6:	d000      	beq.n	80255ca <_printf_float+0x1c6>
 80255c8:	1c9a      	adds	r2, r3, #2
 80255ca:	612a      	str	r2, [r5, #16]
 80255cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80255ce:	2400      	movs	r4, #0
 80255d0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80255d2:	e7ce      	b.n	8025572 <_printf_float+0x16e>
 80255d4:	2367      	movs	r3, #103	@ 0x67
 80255d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80255d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80255da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80255dc:	4299      	cmp	r1, r3
 80255de:	db06      	blt.n	80255ee <_printf_float+0x1ea>
 80255e0:	682b      	ldr	r3, [r5, #0]
 80255e2:	6129      	str	r1, [r5, #16]
 80255e4:	07db      	lsls	r3, r3, #31
 80255e6:	d5f1      	bpl.n	80255cc <_printf_float+0x1c8>
 80255e8:	3101      	adds	r1, #1
 80255ea:	6129      	str	r1, [r5, #16]
 80255ec:	e7ee      	b.n	80255cc <_printf_float+0x1c8>
 80255ee:	2201      	movs	r2, #1
 80255f0:	2900      	cmp	r1, #0
 80255f2:	dce0      	bgt.n	80255b6 <_printf_float+0x1b2>
 80255f4:	1892      	adds	r2, r2, r2
 80255f6:	1a52      	subs	r2, r2, r1
 80255f8:	e7dd      	b.n	80255b6 <_printf_float+0x1b2>
 80255fa:	682a      	ldr	r2, [r5, #0]
 80255fc:	0553      	lsls	r3, r2, #21
 80255fe:	d408      	bmi.n	8025612 <_printf_float+0x20e>
 8025600:	692b      	ldr	r3, [r5, #16]
 8025602:	003a      	movs	r2, r7
 8025604:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025608:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802560a:	47a0      	blx	r4
 802560c:	3001      	adds	r0, #1
 802560e:	d129      	bne.n	8025664 <_printf_float+0x260>
 8025610:	e754      	b.n	80254bc <_printf_float+0xb8>
 8025612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025614:	2b65      	cmp	r3, #101	@ 0x65
 8025616:	d800      	bhi.n	802561a <_printf_float+0x216>
 8025618:	e0db      	b.n	80257d2 <_printf_float+0x3ce>
 802561a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802561c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 802561e:	2200      	movs	r2, #0
 8025620:	2300      	movs	r3, #0
 8025622:	f7da ff45 	bl	80004b0 <__aeabi_dcmpeq>
 8025626:	2800      	cmp	r0, #0
 8025628:	d033      	beq.n	8025692 <_printf_float+0x28e>
 802562a:	2301      	movs	r3, #1
 802562c:	4a37      	ldr	r2, [pc, #220]	@ (802570c <_printf_float+0x308>)
 802562e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025630:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025632:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025634:	47a0      	blx	r4
 8025636:	3001      	adds	r0, #1
 8025638:	d100      	bne.n	802563c <_printf_float+0x238>
 802563a:	e73f      	b.n	80254bc <_printf_float+0xb8>
 802563c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802563e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025640:	42b3      	cmp	r3, r6
 8025642:	db02      	blt.n	802564a <_printf_float+0x246>
 8025644:	682b      	ldr	r3, [r5, #0]
 8025646:	07db      	lsls	r3, r3, #31
 8025648:	d50c      	bpl.n	8025664 <_printf_float+0x260>
 802564a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802564c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802564e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025650:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025654:	47a0      	blx	r4
 8025656:	2400      	movs	r4, #0
 8025658:	3001      	adds	r0, #1
 802565a:	d100      	bne.n	802565e <_printf_float+0x25a>
 802565c:	e72e      	b.n	80254bc <_printf_float+0xb8>
 802565e:	1e73      	subs	r3, r6, #1
 8025660:	42a3      	cmp	r3, r4
 8025662:	dc0a      	bgt.n	802567a <_printf_float+0x276>
 8025664:	682b      	ldr	r3, [r5, #0]
 8025666:	079b      	lsls	r3, r3, #30
 8025668:	d500      	bpl.n	802566c <_printf_float+0x268>
 802566a:	e106      	b.n	802587a <_printf_float+0x476>
 802566c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802566e:	68e8      	ldr	r0, [r5, #12]
 8025670:	4298      	cmp	r0, r3
 8025672:	db00      	blt.n	8025676 <_printf_float+0x272>
 8025674:	e724      	b.n	80254c0 <_printf_float+0xbc>
 8025676:	0018      	movs	r0, r3
 8025678:	e722      	b.n	80254c0 <_printf_float+0xbc>
 802567a:	002a      	movs	r2, r5
 802567c:	2301      	movs	r3, #1
 802567e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025680:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025682:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025684:	321a      	adds	r2, #26
 8025686:	47b8      	blx	r7
 8025688:	3001      	adds	r0, #1
 802568a:	d100      	bne.n	802568e <_printf_float+0x28a>
 802568c:	e716      	b.n	80254bc <_printf_float+0xb8>
 802568e:	3401      	adds	r4, #1
 8025690:	e7e5      	b.n	802565e <_printf_float+0x25a>
 8025692:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025694:	2b00      	cmp	r3, #0
 8025696:	dc3b      	bgt.n	8025710 <_printf_float+0x30c>
 8025698:	2301      	movs	r3, #1
 802569a:	4a1c      	ldr	r2, [pc, #112]	@ (802570c <_printf_float+0x308>)
 802569c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802569e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80256a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80256a2:	47a0      	blx	r4
 80256a4:	3001      	adds	r0, #1
 80256a6:	d100      	bne.n	80256aa <_printf_float+0x2a6>
 80256a8:	e708      	b.n	80254bc <_printf_float+0xb8>
 80256aa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80256ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256ae:	4333      	orrs	r3, r6
 80256b0:	d102      	bne.n	80256b8 <_printf_float+0x2b4>
 80256b2:	682b      	ldr	r3, [r5, #0]
 80256b4:	07db      	lsls	r3, r3, #31
 80256b6:	d5d5      	bpl.n	8025664 <_printf_float+0x260>
 80256b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80256ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80256bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80256be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80256c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80256c2:	47a0      	blx	r4
 80256c4:	2300      	movs	r3, #0
 80256c6:	3001      	adds	r0, #1
 80256c8:	d100      	bne.n	80256cc <_printf_float+0x2c8>
 80256ca:	e6f7      	b.n	80254bc <_printf_float+0xb8>
 80256cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80256ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80256d2:	425b      	negs	r3, r3
 80256d4:	4293      	cmp	r3, r2
 80256d6:	dc01      	bgt.n	80256dc <_printf_float+0x2d8>
 80256d8:	0033      	movs	r3, r6
 80256da:	e792      	b.n	8025602 <_printf_float+0x1fe>
 80256dc:	002a      	movs	r2, r5
 80256de:	2301      	movs	r3, #1
 80256e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80256e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80256e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80256e6:	321a      	adds	r2, #26
 80256e8:	47a0      	blx	r4
 80256ea:	3001      	adds	r0, #1
 80256ec:	d100      	bne.n	80256f0 <_printf_float+0x2ec>
 80256ee:	e6e5      	b.n	80254bc <_printf_float+0xb8>
 80256f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80256f2:	3301      	adds	r3, #1
 80256f4:	e7ea      	b.n	80256cc <_printf_float+0x2c8>
 80256f6:	46c0      	nop			@ (mov r8, r8)
 80256f8:	7fefffff 	.word	0x7fefffff
 80256fc:	0802e72e 	.word	0x0802e72e
 8025700:	0802e72a 	.word	0x0802e72a
 8025704:	0802e736 	.word	0x0802e736
 8025708:	0802e732 	.word	0x0802e732
 802570c:	0802e73a 	.word	0x0802e73a
 8025710:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025712:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025714:	930c      	str	r3, [sp, #48]	@ 0x30
 8025716:	429e      	cmp	r6, r3
 8025718:	dd00      	ble.n	802571c <_printf_float+0x318>
 802571a:	001e      	movs	r6, r3
 802571c:	2e00      	cmp	r6, #0
 802571e:	dc31      	bgt.n	8025784 <_printf_float+0x380>
 8025720:	43f3      	mvns	r3, r6
 8025722:	2400      	movs	r4, #0
 8025724:	17db      	asrs	r3, r3, #31
 8025726:	4033      	ands	r3, r6
 8025728:	930e      	str	r3, [sp, #56]	@ 0x38
 802572a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802572c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802572e:	1af3      	subs	r3, r6, r3
 8025730:	42a3      	cmp	r3, r4
 8025732:	dc30      	bgt.n	8025796 <_printf_float+0x392>
 8025734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025736:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025738:	429a      	cmp	r2, r3
 802573a:	dc38      	bgt.n	80257ae <_printf_float+0x3aa>
 802573c:	682b      	ldr	r3, [r5, #0]
 802573e:	07db      	lsls	r3, r3, #31
 8025740:	d435      	bmi.n	80257ae <_printf_float+0x3aa>
 8025742:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025746:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025748:	1b9b      	subs	r3, r3, r6
 802574a:	1b14      	subs	r4, r2, r4
 802574c:	429c      	cmp	r4, r3
 802574e:	dd00      	ble.n	8025752 <_printf_float+0x34e>
 8025750:	001c      	movs	r4, r3
 8025752:	2c00      	cmp	r4, #0
 8025754:	dc34      	bgt.n	80257c0 <_printf_float+0x3bc>
 8025756:	43e3      	mvns	r3, r4
 8025758:	2600      	movs	r6, #0
 802575a:	17db      	asrs	r3, r3, #31
 802575c:	401c      	ands	r4, r3
 802575e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025760:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025762:	1ad3      	subs	r3, r2, r3
 8025764:	1b1b      	subs	r3, r3, r4
 8025766:	42b3      	cmp	r3, r6
 8025768:	dc00      	bgt.n	802576c <_printf_float+0x368>
 802576a:	e77b      	b.n	8025664 <_printf_float+0x260>
 802576c:	002a      	movs	r2, r5
 802576e:	2301      	movs	r3, #1
 8025770:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025774:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025776:	321a      	adds	r2, #26
 8025778:	47b8      	blx	r7
 802577a:	3001      	adds	r0, #1
 802577c:	d100      	bne.n	8025780 <_printf_float+0x37c>
 802577e:	e69d      	b.n	80254bc <_printf_float+0xb8>
 8025780:	3601      	adds	r6, #1
 8025782:	e7ec      	b.n	802575e <_printf_float+0x35a>
 8025784:	0033      	movs	r3, r6
 8025786:	003a      	movs	r2, r7
 8025788:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802578a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802578c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802578e:	47a0      	blx	r4
 8025790:	3001      	adds	r0, #1
 8025792:	d1c5      	bne.n	8025720 <_printf_float+0x31c>
 8025794:	e692      	b.n	80254bc <_printf_float+0xb8>
 8025796:	002a      	movs	r2, r5
 8025798:	2301      	movs	r3, #1
 802579a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802579c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802579e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80257a0:	321a      	adds	r2, #26
 80257a2:	47b0      	blx	r6
 80257a4:	3001      	adds	r0, #1
 80257a6:	d100      	bne.n	80257aa <_printf_float+0x3a6>
 80257a8:	e688      	b.n	80254bc <_printf_float+0xb8>
 80257aa:	3401      	adds	r4, #1
 80257ac:	e7bd      	b.n	802572a <_printf_float+0x326>
 80257ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80257b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80257b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80257b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80257b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80257b8:	47a0      	blx	r4
 80257ba:	3001      	adds	r0, #1
 80257bc:	d1c1      	bne.n	8025742 <_printf_float+0x33e>
 80257be:	e67d      	b.n	80254bc <_printf_float+0xb8>
 80257c0:	19ba      	adds	r2, r7, r6
 80257c2:	0023      	movs	r3, r4
 80257c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80257c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80257c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80257ca:	47b0      	blx	r6
 80257cc:	3001      	adds	r0, #1
 80257ce:	d1c2      	bne.n	8025756 <_printf_float+0x352>
 80257d0:	e674      	b.n	80254bc <_printf_float+0xb8>
 80257d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80257d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80257d6:	2b01      	cmp	r3, #1
 80257d8:	dc02      	bgt.n	80257e0 <_printf_float+0x3dc>
 80257da:	2301      	movs	r3, #1
 80257dc:	421a      	tst	r2, r3
 80257de:	d039      	beq.n	8025854 <_printf_float+0x450>
 80257e0:	2301      	movs	r3, #1
 80257e2:	003a      	movs	r2, r7
 80257e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80257e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80257e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80257ea:	47b0      	blx	r6
 80257ec:	3001      	adds	r0, #1
 80257ee:	d100      	bne.n	80257f2 <_printf_float+0x3ee>
 80257f0:	e664      	b.n	80254bc <_printf_float+0xb8>
 80257f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80257f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80257f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80257f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80257fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80257fc:	47b0      	blx	r6
 80257fe:	3001      	adds	r0, #1
 8025800:	d100      	bne.n	8025804 <_printf_float+0x400>
 8025802:	e65b      	b.n	80254bc <_printf_float+0xb8>
 8025804:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025806:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802580a:	2200      	movs	r2, #0
 802580c:	3b01      	subs	r3, #1
 802580e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025810:	2300      	movs	r3, #0
 8025812:	f7da fe4d 	bl	80004b0 <__aeabi_dcmpeq>
 8025816:	2800      	cmp	r0, #0
 8025818:	d11a      	bne.n	8025850 <_printf_float+0x44c>
 802581a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802581c:	1c7a      	adds	r2, r7, #1
 802581e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025820:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025822:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025824:	47b0      	blx	r6
 8025826:	3001      	adds	r0, #1
 8025828:	d10e      	bne.n	8025848 <_printf_float+0x444>
 802582a:	e647      	b.n	80254bc <_printf_float+0xb8>
 802582c:	002a      	movs	r2, r5
 802582e:	2301      	movs	r3, #1
 8025830:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025834:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025836:	321a      	adds	r2, #26
 8025838:	47b8      	blx	r7
 802583a:	3001      	adds	r0, #1
 802583c:	d100      	bne.n	8025840 <_printf_float+0x43c>
 802583e:	e63d      	b.n	80254bc <_printf_float+0xb8>
 8025840:	3601      	adds	r6, #1
 8025842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025844:	429e      	cmp	r6, r3
 8025846:	dbf1      	blt.n	802582c <_printf_float+0x428>
 8025848:	002a      	movs	r2, r5
 802584a:	0023      	movs	r3, r4
 802584c:	3250      	adds	r2, #80	@ 0x50
 802584e:	e6d9      	b.n	8025604 <_printf_float+0x200>
 8025850:	2600      	movs	r6, #0
 8025852:	e7f6      	b.n	8025842 <_printf_float+0x43e>
 8025854:	003a      	movs	r2, r7
 8025856:	e7e2      	b.n	802581e <_printf_float+0x41a>
 8025858:	002a      	movs	r2, r5
 802585a:	2301      	movs	r3, #1
 802585c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802585e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025860:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025862:	3219      	adds	r2, #25
 8025864:	47b0      	blx	r6
 8025866:	3001      	adds	r0, #1
 8025868:	d100      	bne.n	802586c <_printf_float+0x468>
 802586a:	e627      	b.n	80254bc <_printf_float+0xb8>
 802586c:	3401      	adds	r4, #1
 802586e:	68eb      	ldr	r3, [r5, #12]
 8025870:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025872:	1a9b      	subs	r3, r3, r2
 8025874:	42a3      	cmp	r3, r4
 8025876:	dcef      	bgt.n	8025858 <_printf_float+0x454>
 8025878:	e6f8      	b.n	802566c <_printf_float+0x268>
 802587a:	2400      	movs	r4, #0
 802587c:	e7f7      	b.n	802586e <_printf_float+0x46a>
 802587e:	46c0      	nop			@ (mov r8, r8)

08025880 <_printf_common>:
 8025880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025882:	0016      	movs	r6, r2
 8025884:	9301      	str	r3, [sp, #4]
 8025886:	688a      	ldr	r2, [r1, #8]
 8025888:	690b      	ldr	r3, [r1, #16]
 802588a:	000c      	movs	r4, r1
 802588c:	9000      	str	r0, [sp, #0]
 802588e:	4293      	cmp	r3, r2
 8025890:	da00      	bge.n	8025894 <_printf_common+0x14>
 8025892:	0013      	movs	r3, r2
 8025894:	0022      	movs	r2, r4
 8025896:	6033      	str	r3, [r6, #0]
 8025898:	3243      	adds	r2, #67	@ 0x43
 802589a:	7812      	ldrb	r2, [r2, #0]
 802589c:	2a00      	cmp	r2, #0
 802589e:	d001      	beq.n	80258a4 <_printf_common+0x24>
 80258a0:	3301      	adds	r3, #1
 80258a2:	6033      	str	r3, [r6, #0]
 80258a4:	6823      	ldr	r3, [r4, #0]
 80258a6:	069b      	lsls	r3, r3, #26
 80258a8:	d502      	bpl.n	80258b0 <_printf_common+0x30>
 80258aa:	6833      	ldr	r3, [r6, #0]
 80258ac:	3302      	adds	r3, #2
 80258ae:	6033      	str	r3, [r6, #0]
 80258b0:	6822      	ldr	r2, [r4, #0]
 80258b2:	2306      	movs	r3, #6
 80258b4:	0015      	movs	r5, r2
 80258b6:	401d      	ands	r5, r3
 80258b8:	421a      	tst	r2, r3
 80258ba:	d027      	beq.n	802590c <_printf_common+0x8c>
 80258bc:	0023      	movs	r3, r4
 80258be:	3343      	adds	r3, #67	@ 0x43
 80258c0:	781b      	ldrb	r3, [r3, #0]
 80258c2:	1e5a      	subs	r2, r3, #1
 80258c4:	4193      	sbcs	r3, r2
 80258c6:	6822      	ldr	r2, [r4, #0]
 80258c8:	0692      	lsls	r2, r2, #26
 80258ca:	d430      	bmi.n	802592e <_printf_common+0xae>
 80258cc:	0022      	movs	r2, r4
 80258ce:	9901      	ldr	r1, [sp, #4]
 80258d0:	9800      	ldr	r0, [sp, #0]
 80258d2:	9d08      	ldr	r5, [sp, #32]
 80258d4:	3243      	adds	r2, #67	@ 0x43
 80258d6:	47a8      	blx	r5
 80258d8:	3001      	adds	r0, #1
 80258da:	d025      	beq.n	8025928 <_printf_common+0xa8>
 80258dc:	2206      	movs	r2, #6
 80258de:	6823      	ldr	r3, [r4, #0]
 80258e0:	2500      	movs	r5, #0
 80258e2:	4013      	ands	r3, r2
 80258e4:	2b04      	cmp	r3, #4
 80258e6:	d105      	bne.n	80258f4 <_printf_common+0x74>
 80258e8:	6833      	ldr	r3, [r6, #0]
 80258ea:	68e5      	ldr	r5, [r4, #12]
 80258ec:	1aed      	subs	r5, r5, r3
 80258ee:	43eb      	mvns	r3, r5
 80258f0:	17db      	asrs	r3, r3, #31
 80258f2:	401d      	ands	r5, r3
 80258f4:	68a3      	ldr	r3, [r4, #8]
 80258f6:	6922      	ldr	r2, [r4, #16]
 80258f8:	4293      	cmp	r3, r2
 80258fa:	dd01      	ble.n	8025900 <_printf_common+0x80>
 80258fc:	1a9b      	subs	r3, r3, r2
 80258fe:	18ed      	adds	r5, r5, r3
 8025900:	2600      	movs	r6, #0
 8025902:	42b5      	cmp	r5, r6
 8025904:	d120      	bne.n	8025948 <_printf_common+0xc8>
 8025906:	2000      	movs	r0, #0
 8025908:	e010      	b.n	802592c <_printf_common+0xac>
 802590a:	3501      	adds	r5, #1
 802590c:	68e3      	ldr	r3, [r4, #12]
 802590e:	6832      	ldr	r2, [r6, #0]
 8025910:	1a9b      	subs	r3, r3, r2
 8025912:	42ab      	cmp	r3, r5
 8025914:	ddd2      	ble.n	80258bc <_printf_common+0x3c>
 8025916:	0022      	movs	r2, r4
 8025918:	2301      	movs	r3, #1
 802591a:	9901      	ldr	r1, [sp, #4]
 802591c:	9800      	ldr	r0, [sp, #0]
 802591e:	9f08      	ldr	r7, [sp, #32]
 8025920:	3219      	adds	r2, #25
 8025922:	47b8      	blx	r7
 8025924:	3001      	adds	r0, #1
 8025926:	d1f0      	bne.n	802590a <_printf_common+0x8a>
 8025928:	2001      	movs	r0, #1
 802592a:	4240      	negs	r0, r0
 802592c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802592e:	2030      	movs	r0, #48	@ 0x30
 8025930:	18e1      	adds	r1, r4, r3
 8025932:	3143      	adds	r1, #67	@ 0x43
 8025934:	7008      	strb	r0, [r1, #0]
 8025936:	0021      	movs	r1, r4
 8025938:	1c5a      	adds	r2, r3, #1
 802593a:	3145      	adds	r1, #69	@ 0x45
 802593c:	7809      	ldrb	r1, [r1, #0]
 802593e:	18a2      	adds	r2, r4, r2
 8025940:	3243      	adds	r2, #67	@ 0x43
 8025942:	3302      	adds	r3, #2
 8025944:	7011      	strb	r1, [r2, #0]
 8025946:	e7c1      	b.n	80258cc <_printf_common+0x4c>
 8025948:	0022      	movs	r2, r4
 802594a:	2301      	movs	r3, #1
 802594c:	9901      	ldr	r1, [sp, #4]
 802594e:	9800      	ldr	r0, [sp, #0]
 8025950:	9f08      	ldr	r7, [sp, #32]
 8025952:	321a      	adds	r2, #26
 8025954:	47b8      	blx	r7
 8025956:	3001      	adds	r0, #1
 8025958:	d0e6      	beq.n	8025928 <_printf_common+0xa8>
 802595a:	3601      	adds	r6, #1
 802595c:	e7d1      	b.n	8025902 <_printf_common+0x82>
	...

08025960 <_printf_i>:
 8025960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025962:	b08b      	sub	sp, #44	@ 0x2c
 8025964:	9206      	str	r2, [sp, #24]
 8025966:	000a      	movs	r2, r1
 8025968:	3243      	adds	r2, #67	@ 0x43
 802596a:	9307      	str	r3, [sp, #28]
 802596c:	9005      	str	r0, [sp, #20]
 802596e:	9203      	str	r2, [sp, #12]
 8025970:	7e0a      	ldrb	r2, [r1, #24]
 8025972:	000c      	movs	r4, r1
 8025974:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025976:	2a78      	cmp	r2, #120	@ 0x78
 8025978:	d809      	bhi.n	802598e <_printf_i+0x2e>
 802597a:	2a62      	cmp	r2, #98	@ 0x62
 802597c:	d80b      	bhi.n	8025996 <_printf_i+0x36>
 802597e:	2a00      	cmp	r2, #0
 8025980:	d100      	bne.n	8025984 <_printf_i+0x24>
 8025982:	e0ba      	b.n	8025afa <_printf_i+0x19a>
 8025984:	497a      	ldr	r1, [pc, #488]	@ (8025b70 <_printf_i+0x210>)
 8025986:	9104      	str	r1, [sp, #16]
 8025988:	2a58      	cmp	r2, #88	@ 0x58
 802598a:	d100      	bne.n	802598e <_printf_i+0x2e>
 802598c:	e08e      	b.n	8025aac <_printf_i+0x14c>
 802598e:	0025      	movs	r5, r4
 8025990:	3542      	adds	r5, #66	@ 0x42
 8025992:	702a      	strb	r2, [r5, #0]
 8025994:	e022      	b.n	80259dc <_printf_i+0x7c>
 8025996:	0010      	movs	r0, r2
 8025998:	3863      	subs	r0, #99	@ 0x63
 802599a:	2815      	cmp	r0, #21
 802599c:	d8f7      	bhi.n	802598e <_printf_i+0x2e>
 802599e:	f7da fbf7 	bl	8000190 <__gnu_thumb1_case_shi>
 80259a2:	0016      	.short	0x0016
 80259a4:	fff6001f 	.word	0xfff6001f
 80259a8:	fff6fff6 	.word	0xfff6fff6
 80259ac:	001ffff6 	.word	0x001ffff6
 80259b0:	fff6fff6 	.word	0xfff6fff6
 80259b4:	fff6fff6 	.word	0xfff6fff6
 80259b8:	0036009f 	.word	0x0036009f
 80259bc:	fff6007e 	.word	0xfff6007e
 80259c0:	00b0fff6 	.word	0x00b0fff6
 80259c4:	0036fff6 	.word	0x0036fff6
 80259c8:	fff6fff6 	.word	0xfff6fff6
 80259cc:	0082      	.short	0x0082
 80259ce:	0025      	movs	r5, r4
 80259d0:	681a      	ldr	r2, [r3, #0]
 80259d2:	3542      	adds	r5, #66	@ 0x42
 80259d4:	1d11      	adds	r1, r2, #4
 80259d6:	6019      	str	r1, [r3, #0]
 80259d8:	6813      	ldr	r3, [r2, #0]
 80259da:	702b      	strb	r3, [r5, #0]
 80259dc:	2301      	movs	r3, #1
 80259de:	e09e      	b.n	8025b1e <_printf_i+0x1be>
 80259e0:	6818      	ldr	r0, [r3, #0]
 80259e2:	6809      	ldr	r1, [r1, #0]
 80259e4:	1d02      	adds	r2, r0, #4
 80259e6:	060d      	lsls	r5, r1, #24
 80259e8:	d50b      	bpl.n	8025a02 <_printf_i+0xa2>
 80259ea:	6806      	ldr	r6, [r0, #0]
 80259ec:	601a      	str	r2, [r3, #0]
 80259ee:	2e00      	cmp	r6, #0
 80259f0:	da03      	bge.n	80259fa <_printf_i+0x9a>
 80259f2:	232d      	movs	r3, #45	@ 0x2d
 80259f4:	9a03      	ldr	r2, [sp, #12]
 80259f6:	4276      	negs	r6, r6
 80259f8:	7013      	strb	r3, [r2, #0]
 80259fa:	4b5d      	ldr	r3, [pc, #372]	@ (8025b70 <_printf_i+0x210>)
 80259fc:	270a      	movs	r7, #10
 80259fe:	9304      	str	r3, [sp, #16]
 8025a00:	e018      	b.n	8025a34 <_printf_i+0xd4>
 8025a02:	6806      	ldr	r6, [r0, #0]
 8025a04:	601a      	str	r2, [r3, #0]
 8025a06:	0649      	lsls	r1, r1, #25
 8025a08:	d5f1      	bpl.n	80259ee <_printf_i+0x8e>
 8025a0a:	b236      	sxth	r6, r6
 8025a0c:	e7ef      	b.n	80259ee <_printf_i+0x8e>
 8025a0e:	6808      	ldr	r0, [r1, #0]
 8025a10:	6819      	ldr	r1, [r3, #0]
 8025a12:	c940      	ldmia	r1!, {r6}
 8025a14:	0605      	lsls	r5, r0, #24
 8025a16:	d402      	bmi.n	8025a1e <_printf_i+0xbe>
 8025a18:	0640      	lsls	r0, r0, #25
 8025a1a:	d500      	bpl.n	8025a1e <_printf_i+0xbe>
 8025a1c:	b2b6      	uxth	r6, r6
 8025a1e:	6019      	str	r1, [r3, #0]
 8025a20:	4b53      	ldr	r3, [pc, #332]	@ (8025b70 <_printf_i+0x210>)
 8025a22:	270a      	movs	r7, #10
 8025a24:	9304      	str	r3, [sp, #16]
 8025a26:	2a6f      	cmp	r2, #111	@ 0x6f
 8025a28:	d100      	bne.n	8025a2c <_printf_i+0xcc>
 8025a2a:	3f02      	subs	r7, #2
 8025a2c:	0023      	movs	r3, r4
 8025a2e:	2200      	movs	r2, #0
 8025a30:	3343      	adds	r3, #67	@ 0x43
 8025a32:	701a      	strb	r2, [r3, #0]
 8025a34:	6863      	ldr	r3, [r4, #4]
 8025a36:	60a3      	str	r3, [r4, #8]
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	db06      	blt.n	8025a4a <_printf_i+0xea>
 8025a3c:	2104      	movs	r1, #4
 8025a3e:	6822      	ldr	r2, [r4, #0]
 8025a40:	9d03      	ldr	r5, [sp, #12]
 8025a42:	438a      	bics	r2, r1
 8025a44:	6022      	str	r2, [r4, #0]
 8025a46:	4333      	orrs	r3, r6
 8025a48:	d00c      	beq.n	8025a64 <_printf_i+0x104>
 8025a4a:	9d03      	ldr	r5, [sp, #12]
 8025a4c:	0030      	movs	r0, r6
 8025a4e:	0039      	movs	r1, r7
 8025a50:	f7da fc2e 	bl	80002b0 <__aeabi_uidivmod>
 8025a54:	9b04      	ldr	r3, [sp, #16]
 8025a56:	3d01      	subs	r5, #1
 8025a58:	5c5b      	ldrb	r3, [r3, r1]
 8025a5a:	702b      	strb	r3, [r5, #0]
 8025a5c:	0033      	movs	r3, r6
 8025a5e:	0006      	movs	r6, r0
 8025a60:	429f      	cmp	r7, r3
 8025a62:	d9f3      	bls.n	8025a4c <_printf_i+0xec>
 8025a64:	2f08      	cmp	r7, #8
 8025a66:	d109      	bne.n	8025a7c <_printf_i+0x11c>
 8025a68:	6823      	ldr	r3, [r4, #0]
 8025a6a:	07db      	lsls	r3, r3, #31
 8025a6c:	d506      	bpl.n	8025a7c <_printf_i+0x11c>
 8025a6e:	6862      	ldr	r2, [r4, #4]
 8025a70:	6923      	ldr	r3, [r4, #16]
 8025a72:	429a      	cmp	r2, r3
 8025a74:	dc02      	bgt.n	8025a7c <_printf_i+0x11c>
 8025a76:	2330      	movs	r3, #48	@ 0x30
 8025a78:	3d01      	subs	r5, #1
 8025a7a:	702b      	strb	r3, [r5, #0]
 8025a7c:	9b03      	ldr	r3, [sp, #12]
 8025a7e:	1b5b      	subs	r3, r3, r5
 8025a80:	6123      	str	r3, [r4, #16]
 8025a82:	9b07      	ldr	r3, [sp, #28]
 8025a84:	0021      	movs	r1, r4
 8025a86:	9300      	str	r3, [sp, #0]
 8025a88:	9805      	ldr	r0, [sp, #20]
 8025a8a:	9b06      	ldr	r3, [sp, #24]
 8025a8c:	aa09      	add	r2, sp, #36	@ 0x24
 8025a8e:	f7ff fef7 	bl	8025880 <_printf_common>
 8025a92:	3001      	adds	r0, #1
 8025a94:	d148      	bne.n	8025b28 <_printf_i+0x1c8>
 8025a96:	2001      	movs	r0, #1
 8025a98:	4240      	negs	r0, r0
 8025a9a:	b00b      	add	sp, #44	@ 0x2c
 8025a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a9e:	2220      	movs	r2, #32
 8025aa0:	6809      	ldr	r1, [r1, #0]
 8025aa2:	430a      	orrs	r2, r1
 8025aa4:	6022      	str	r2, [r4, #0]
 8025aa6:	2278      	movs	r2, #120	@ 0x78
 8025aa8:	4932      	ldr	r1, [pc, #200]	@ (8025b74 <_printf_i+0x214>)
 8025aaa:	9104      	str	r1, [sp, #16]
 8025aac:	0021      	movs	r1, r4
 8025aae:	3145      	adds	r1, #69	@ 0x45
 8025ab0:	700a      	strb	r2, [r1, #0]
 8025ab2:	6819      	ldr	r1, [r3, #0]
 8025ab4:	6822      	ldr	r2, [r4, #0]
 8025ab6:	c940      	ldmia	r1!, {r6}
 8025ab8:	0610      	lsls	r0, r2, #24
 8025aba:	d402      	bmi.n	8025ac2 <_printf_i+0x162>
 8025abc:	0650      	lsls	r0, r2, #25
 8025abe:	d500      	bpl.n	8025ac2 <_printf_i+0x162>
 8025ac0:	b2b6      	uxth	r6, r6
 8025ac2:	6019      	str	r1, [r3, #0]
 8025ac4:	07d3      	lsls	r3, r2, #31
 8025ac6:	d502      	bpl.n	8025ace <_printf_i+0x16e>
 8025ac8:	2320      	movs	r3, #32
 8025aca:	4313      	orrs	r3, r2
 8025acc:	6023      	str	r3, [r4, #0]
 8025ace:	2e00      	cmp	r6, #0
 8025ad0:	d001      	beq.n	8025ad6 <_printf_i+0x176>
 8025ad2:	2710      	movs	r7, #16
 8025ad4:	e7aa      	b.n	8025a2c <_printf_i+0xcc>
 8025ad6:	2220      	movs	r2, #32
 8025ad8:	6823      	ldr	r3, [r4, #0]
 8025ada:	4393      	bics	r3, r2
 8025adc:	6023      	str	r3, [r4, #0]
 8025ade:	e7f8      	b.n	8025ad2 <_printf_i+0x172>
 8025ae0:	681a      	ldr	r2, [r3, #0]
 8025ae2:	680d      	ldr	r5, [r1, #0]
 8025ae4:	1d10      	adds	r0, r2, #4
 8025ae6:	6949      	ldr	r1, [r1, #20]
 8025ae8:	6018      	str	r0, [r3, #0]
 8025aea:	6813      	ldr	r3, [r2, #0]
 8025aec:	062e      	lsls	r6, r5, #24
 8025aee:	d501      	bpl.n	8025af4 <_printf_i+0x194>
 8025af0:	6019      	str	r1, [r3, #0]
 8025af2:	e002      	b.n	8025afa <_printf_i+0x19a>
 8025af4:	066d      	lsls	r5, r5, #25
 8025af6:	d5fb      	bpl.n	8025af0 <_printf_i+0x190>
 8025af8:	8019      	strh	r1, [r3, #0]
 8025afa:	2300      	movs	r3, #0
 8025afc:	9d03      	ldr	r5, [sp, #12]
 8025afe:	6123      	str	r3, [r4, #16]
 8025b00:	e7bf      	b.n	8025a82 <_printf_i+0x122>
 8025b02:	681a      	ldr	r2, [r3, #0]
 8025b04:	1d11      	adds	r1, r2, #4
 8025b06:	6019      	str	r1, [r3, #0]
 8025b08:	6815      	ldr	r5, [r2, #0]
 8025b0a:	2100      	movs	r1, #0
 8025b0c:	0028      	movs	r0, r5
 8025b0e:	6862      	ldr	r2, [r4, #4]
 8025b10:	f000 fba1 	bl	8026256 <memchr>
 8025b14:	2800      	cmp	r0, #0
 8025b16:	d001      	beq.n	8025b1c <_printf_i+0x1bc>
 8025b18:	1b40      	subs	r0, r0, r5
 8025b1a:	6060      	str	r0, [r4, #4]
 8025b1c:	6863      	ldr	r3, [r4, #4]
 8025b1e:	6123      	str	r3, [r4, #16]
 8025b20:	2300      	movs	r3, #0
 8025b22:	9a03      	ldr	r2, [sp, #12]
 8025b24:	7013      	strb	r3, [r2, #0]
 8025b26:	e7ac      	b.n	8025a82 <_printf_i+0x122>
 8025b28:	002a      	movs	r2, r5
 8025b2a:	6923      	ldr	r3, [r4, #16]
 8025b2c:	9906      	ldr	r1, [sp, #24]
 8025b2e:	9805      	ldr	r0, [sp, #20]
 8025b30:	9d07      	ldr	r5, [sp, #28]
 8025b32:	47a8      	blx	r5
 8025b34:	3001      	adds	r0, #1
 8025b36:	d0ae      	beq.n	8025a96 <_printf_i+0x136>
 8025b38:	6823      	ldr	r3, [r4, #0]
 8025b3a:	079b      	lsls	r3, r3, #30
 8025b3c:	d415      	bmi.n	8025b6a <_printf_i+0x20a>
 8025b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b40:	68e0      	ldr	r0, [r4, #12]
 8025b42:	4298      	cmp	r0, r3
 8025b44:	daa9      	bge.n	8025a9a <_printf_i+0x13a>
 8025b46:	0018      	movs	r0, r3
 8025b48:	e7a7      	b.n	8025a9a <_printf_i+0x13a>
 8025b4a:	0022      	movs	r2, r4
 8025b4c:	2301      	movs	r3, #1
 8025b4e:	9906      	ldr	r1, [sp, #24]
 8025b50:	9805      	ldr	r0, [sp, #20]
 8025b52:	9e07      	ldr	r6, [sp, #28]
 8025b54:	3219      	adds	r2, #25
 8025b56:	47b0      	blx	r6
 8025b58:	3001      	adds	r0, #1
 8025b5a:	d09c      	beq.n	8025a96 <_printf_i+0x136>
 8025b5c:	3501      	adds	r5, #1
 8025b5e:	68e3      	ldr	r3, [r4, #12]
 8025b60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b62:	1a9b      	subs	r3, r3, r2
 8025b64:	42ab      	cmp	r3, r5
 8025b66:	dcf0      	bgt.n	8025b4a <_printf_i+0x1ea>
 8025b68:	e7e9      	b.n	8025b3e <_printf_i+0x1de>
 8025b6a:	2500      	movs	r5, #0
 8025b6c:	e7f7      	b.n	8025b5e <_printf_i+0x1fe>
 8025b6e:	46c0      	nop			@ (mov r8, r8)
 8025b70:	0802e73c 	.word	0x0802e73c
 8025b74:	0802e74d 	.word	0x0802e74d

08025b78 <std>:
 8025b78:	2300      	movs	r3, #0
 8025b7a:	b510      	push	{r4, lr}
 8025b7c:	0004      	movs	r4, r0
 8025b7e:	6003      	str	r3, [r0, #0]
 8025b80:	6043      	str	r3, [r0, #4]
 8025b82:	6083      	str	r3, [r0, #8]
 8025b84:	8181      	strh	r1, [r0, #12]
 8025b86:	6643      	str	r3, [r0, #100]	@ 0x64
 8025b88:	81c2      	strh	r2, [r0, #14]
 8025b8a:	6103      	str	r3, [r0, #16]
 8025b8c:	6143      	str	r3, [r0, #20]
 8025b8e:	6183      	str	r3, [r0, #24]
 8025b90:	0019      	movs	r1, r3
 8025b92:	2208      	movs	r2, #8
 8025b94:	305c      	adds	r0, #92	@ 0x5c
 8025b96:	f000 fa8d 	bl	80260b4 <memset>
 8025b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8025bc8 <std+0x50>)
 8025b9c:	6224      	str	r4, [r4, #32]
 8025b9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8025ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8025bcc <std+0x54>)
 8025ba2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8025bd0 <std+0x58>)
 8025ba6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8025bd4 <std+0x5c>)
 8025baa:	6323      	str	r3, [r4, #48]	@ 0x30
 8025bac:	4b0a      	ldr	r3, [pc, #40]	@ (8025bd8 <std+0x60>)
 8025bae:	429c      	cmp	r4, r3
 8025bb0:	d005      	beq.n	8025bbe <std+0x46>
 8025bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8025bdc <std+0x64>)
 8025bb4:	429c      	cmp	r4, r3
 8025bb6:	d002      	beq.n	8025bbe <std+0x46>
 8025bb8:	4b09      	ldr	r3, [pc, #36]	@ (8025be0 <std+0x68>)
 8025bba:	429c      	cmp	r4, r3
 8025bbc:	d103      	bne.n	8025bc6 <std+0x4e>
 8025bbe:	0020      	movs	r0, r4
 8025bc0:	3058      	adds	r0, #88	@ 0x58
 8025bc2:	f000 fb45 	bl	8026250 <__retarget_lock_init_recursive>
 8025bc6:	bd10      	pop	{r4, pc}
 8025bc8:	08025e25 	.word	0x08025e25
 8025bcc:	08025e4d 	.word	0x08025e4d
 8025bd0:	08025e85 	.word	0x08025e85
 8025bd4:	08025eb1 	.word	0x08025eb1
 8025bd8:	20003628 	.word	0x20003628
 8025bdc:	20003690 	.word	0x20003690
 8025be0:	200036f8 	.word	0x200036f8

08025be4 <stdio_exit_handler>:
 8025be4:	b510      	push	{r4, lr}
 8025be6:	4a03      	ldr	r2, [pc, #12]	@ (8025bf4 <stdio_exit_handler+0x10>)
 8025be8:	4903      	ldr	r1, [pc, #12]	@ (8025bf8 <stdio_exit_handler+0x14>)
 8025bea:	4804      	ldr	r0, [pc, #16]	@ (8025bfc <stdio_exit_handler+0x18>)
 8025bec:	f000 f86c 	bl	8025cc8 <_fwalk_sglue>
 8025bf0:	bd10      	pop	{r4, pc}
 8025bf2:	46c0      	nop			@ (mov r8, r8)
 8025bf4:	20000274 	.word	0x20000274
 8025bf8:	0802884d 	.word	0x0802884d
 8025bfc:	200003f0 	.word	0x200003f0

08025c00 <cleanup_stdio>:
 8025c00:	6841      	ldr	r1, [r0, #4]
 8025c02:	4b0b      	ldr	r3, [pc, #44]	@ (8025c30 <cleanup_stdio+0x30>)
 8025c04:	b510      	push	{r4, lr}
 8025c06:	0004      	movs	r4, r0
 8025c08:	4299      	cmp	r1, r3
 8025c0a:	d001      	beq.n	8025c10 <cleanup_stdio+0x10>
 8025c0c:	f002 fe1e 	bl	802884c <_fflush_r>
 8025c10:	68a1      	ldr	r1, [r4, #8]
 8025c12:	4b08      	ldr	r3, [pc, #32]	@ (8025c34 <cleanup_stdio+0x34>)
 8025c14:	4299      	cmp	r1, r3
 8025c16:	d002      	beq.n	8025c1e <cleanup_stdio+0x1e>
 8025c18:	0020      	movs	r0, r4
 8025c1a:	f002 fe17 	bl	802884c <_fflush_r>
 8025c1e:	68e1      	ldr	r1, [r4, #12]
 8025c20:	4b05      	ldr	r3, [pc, #20]	@ (8025c38 <cleanup_stdio+0x38>)
 8025c22:	4299      	cmp	r1, r3
 8025c24:	d002      	beq.n	8025c2c <cleanup_stdio+0x2c>
 8025c26:	0020      	movs	r0, r4
 8025c28:	f002 fe10 	bl	802884c <_fflush_r>
 8025c2c:	bd10      	pop	{r4, pc}
 8025c2e:	46c0      	nop			@ (mov r8, r8)
 8025c30:	20003628 	.word	0x20003628
 8025c34:	20003690 	.word	0x20003690
 8025c38:	200036f8 	.word	0x200036f8

08025c3c <global_stdio_init.part.0>:
 8025c3c:	b510      	push	{r4, lr}
 8025c3e:	4b09      	ldr	r3, [pc, #36]	@ (8025c64 <global_stdio_init.part.0+0x28>)
 8025c40:	4a09      	ldr	r2, [pc, #36]	@ (8025c68 <global_stdio_init.part.0+0x2c>)
 8025c42:	2104      	movs	r1, #4
 8025c44:	601a      	str	r2, [r3, #0]
 8025c46:	4809      	ldr	r0, [pc, #36]	@ (8025c6c <global_stdio_init.part.0+0x30>)
 8025c48:	2200      	movs	r2, #0
 8025c4a:	f7ff ff95 	bl	8025b78 <std>
 8025c4e:	2201      	movs	r2, #1
 8025c50:	2109      	movs	r1, #9
 8025c52:	4807      	ldr	r0, [pc, #28]	@ (8025c70 <global_stdio_init.part.0+0x34>)
 8025c54:	f7ff ff90 	bl	8025b78 <std>
 8025c58:	2202      	movs	r2, #2
 8025c5a:	2112      	movs	r1, #18
 8025c5c:	4805      	ldr	r0, [pc, #20]	@ (8025c74 <global_stdio_init.part.0+0x38>)
 8025c5e:	f7ff ff8b 	bl	8025b78 <std>
 8025c62:	bd10      	pop	{r4, pc}
 8025c64:	20003760 	.word	0x20003760
 8025c68:	08025be5 	.word	0x08025be5
 8025c6c:	20003628 	.word	0x20003628
 8025c70:	20003690 	.word	0x20003690
 8025c74:	200036f8 	.word	0x200036f8

08025c78 <__sfp_lock_acquire>:
 8025c78:	b510      	push	{r4, lr}
 8025c7a:	4802      	ldr	r0, [pc, #8]	@ (8025c84 <__sfp_lock_acquire+0xc>)
 8025c7c:	f000 fae9 	bl	8026252 <__retarget_lock_acquire_recursive>
 8025c80:	bd10      	pop	{r4, pc}
 8025c82:	46c0      	nop			@ (mov r8, r8)
 8025c84:	20003769 	.word	0x20003769

08025c88 <__sfp_lock_release>:
 8025c88:	b510      	push	{r4, lr}
 8025c8a:	4802      	ldr	r0, [pc, #8]	@ (8025c94 <__sfp_lock_release+0xc>)
 8025c8c:	f000 fae2 	bl	8026254 <__retarget_lock_release_recursive>
 8025c90:	bd10      	pop	{r4, pc}
 8025c92:	46c0      	nop			@ (mov r8, r8)
 8025c94:	20003769 	.word	0x20003769

08025c98 <__sinit>:
 8025c98:	b510      	push	{r4, lr}
 8025c9a:	0004      	movs	r4, r0
 8025c9c:	f7ff ffec 	bl	8025c78 <__sfp_lock_acquire>
 8025ca0:	6a23      	ldr	r3, [r4, #32]
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d002      	beq.n	8025cac <__sinit+0x14>
 8025ca6:	f7ff ffef 	bl	8025c88 <__sfp_lock_release>
 8025caa:	bd10      	pop	{r4, pc}
 8025cac:	4b04      	ldr	r3, [pc, #16]	@ (8025cc0 <__sinit+0x28>)
 8025cae:	6223      	str	r3, [r4, #32]
 8025cb0:	4b04      	ldr	r3, [pc, #16]	@ (8025cc4 <__sinit+0x2c>)
 8025cb2:	681b      	ldr	r3, [r3, #0]
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	d1f6      	bne.n	8025ca6 <__sinit+0xe>
 8025cb8:	f7ff ffc0 	bl	8025c3c <global_stdio_init.part.0>
 8025cbc:	e7f3      	b.n	8025ca6 <__sinit+0xe>
 8025cbe:	46c0      	nop			@ (mov r8, r8)
 8025cc0:	08025c01 	.word	0x08025c01
 8025cc4:	20003760 	.word	0x20003760

08025cc8 <_fwalk_sglue>:
 8025cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025cca:	0014      	movs	r4, r2
 8025ccc:	2600      	movs	r6, #0
 8025cce:	9000      	str	r0, [sp, #0]
 8025cd0:	9101      	str	r1, [sp, #4]
 8025cd2:	68a5      	ldr	r5, [r4, #8]
 8025cd4:	6867      	ldr	r7, [r4, #4]
 8025cd6:	3f01      	subs	r7, #1
 8025cd8:	d504      	bpl.n	8025ce4 <_fwalk_sglue+0x1c>
 8025cda:	6824      	ldr	r4, [r4, #0]
 8025cdc:	2c00      	cmp	r4, #0
 8025cde:	d1f8      	bne.n	8025cd2 <_fwalk_sglue+0xa>
 8025ce0:	0030      	movs	r0, r6
 8025ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025ce4:	89ab      	ldrh	r3, [r5, #12]
 8025ce6:	2b01      	cmp	r3, #1
 8025ce8:	d908      	bls.n	8025cfc <_fwalk_sglue+0x34>
 8025cea:	220e      	movs	r2, #14
 8025cec:	5eab      	ldrsh	r3, [r5, r2]
 8025cee:	3301      	adds	r3, #1
 8025cf0:	d004      	beq.n	8025cfc <_fwalk_sglue+0x34>
 8025cf2:	0029      	movs	r1, r5
 8025cf4:	9800      	ldr	r0, [sp, #0]
 8025cf6:	9b01      	ldr	r3, [sp, #4]
 8025cf8:	4798      	blx	r3
 8025cfa:	4306      	orrs	r6, r0
 8025cfc:	3568      	adds	r5, #104	@ 0x68
 8025cfe:	e7ea      	b.n	8025cd6 <_fwalk_sglue+0xe>

08025d00 <iprintf>:
 8025d00:	b40f      	push	{r0, r1, r2, r3}
 8025d02:	b507      	push	{r0, r1, r2, lr}
 8025d04:	4905      	ldr	r1, [pc, #20]	@ (8025d1c <iprintf+0x1c>)
 8025d06:	ab04      	add	r3, sp, #16
 8025d08:	6808      	ldr	r0, [r1, #0]
 8025d0a:	cb04      	ldmia	r3!, {r2}
 8025d0c:	6881      	ldr	r1, [r0, #8]
 8025d0e:	9301      	str	r3, [sp, #4]
 8025d10:	f002 fbfa 	bl	8028508 <_vfiprintf_r>
 8025d14:	b003      	add	sp, #12
 8025d16:	bc08      	pop	{r3}
 8025d18:	b004      	add	sp, #16
 8025d1a:	4718      	bx	r3
 8025d1c:	200003ec 	.word	0x200003ec

08025d20 <_puts_r>:
 8025d20:	6a03      	ldr	r3, [r0, #32]
 8025d22:	b570      	push	{r4, r5, r6, lr}
 8025d24:	0005      	movs	r5, r0
 8025d26:	000e      	movs	r6, r1
 8025d28:	6884      	ldr	r4, [r0, #8]
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d101      	bne.n	8025d32 <_puts_r+0x12>
 8025d2e:	f7ff ffb3 	bl	8025c98 <__sinit>
 8025d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025d34:	07db      	lsls	r3, r3, #31
 8025d36:	d405      	bmi.n	8025d44 <_puts_r+0x24>
 8025d38:	89a3      	ldrh	r3, [r4, #12]
 8025d3a:	059b      	lsls	r3, r3, #22
 8025d3c:	d402      	bmi.n	8025d44 <_puts_r+0x24>
 8025d3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025d40:	f000 fa87 	bl	8026252 <__retarget_lock_acquire_recursive>
 8025d44:	89a3      	ldrh	r3, [r4, #12]
 8025d46:	071b      	lsls	r3, r3, #28
 8025d48:	d502      	bpl.n	8025d50 <_puts_r+0x30>
 8025d4a:	6923      	ldr	r3, [r4, #16]
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d11f      	bne.n	8025d90 <_puts_r+0x70>
 8025d50:	0021      	movs	r1, r4
 8025d52:	0028      	movs	r0, r5
 8025d54:	f000 f950 	bl	8025ff8 <__swsetup_r>
 8025d58:	2800      	cmp	r0, #0
 8025d5a:	d019      	beq.n	8025d90 <_puts_r+0x70>
 8025d5c:	2501      	movs	r5, #1
 8025d5e:	426d      	negs	r5, r5
 8025d60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025d62:	07db      	lsls	r3, r3, #31
 8025d64:	d405      	bmi.n	8025d72 <_puts_r+0x52>
 8025d66:	89a3      	ldrh	r3, [r4, #12]
 8025d68:	059b      	lsls	r3, r3, #22
 8025d6a:	d402      	bmi.n	8025d72 <_puts_r+0x52>
 8025d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025d6e:	f000 fa71 	bl	8026254 <__retarget_lock_release_recursive>
 8025d72:	0028      	movs	r0, r5
 8025d74:	bd70      	pop	{r4, r5, r6, pc}
 8025d76:	3601      	adds	r6, #1
 8025d78:	60a3      	str	r3, [r4, #8]
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	da04      	bge.n	8025d88 <_puts_r+0x68>
 8025d7e:	69a2      	ldr	r2, [r4, #24]
 8025d80:	429a      	cmp	r2, r3
 8025d82:	dc16      	bgt.n	8025db2 <_puts_r+0x92>
 8025d84:	290a      	cmp	r1, #10
 8025d86:	d014      	beq.n	8025db2 <_puts_r+0x92>
 8025d88:	6823      	ldr	r3, [r4, #0]
 8025d8a:	1c5a      	adds	r2, r3, #1
 8025d8c:	6022      	str	r2, [r4, #0]
 8025d8e:	7019      	strb	r1, [r3, #0]
 8025d90:	68a3      	ldr	r3, [r4, #8]
 8025d92:	7831      	ldrb	r1, [r6, #0]
 8025d94:	3b01      	subs	r3, #1
 8025d96:	2900      	cmp	r1, #0
 8025d98:	d1ed      	bne.n	8025d76 <_puts_r+0x56>
 8025d9a:	60a3      	str	r3, [r4, #8]
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	da0f      	bge.n	8025dc0 <_puts_r+0xa0>
 8025da0:	0022      	movs	r2, r4
 8025da2:	0028      	movs	r0, r5
 8025da4:	310a      	adds	r1, #10
 8025da6:	f000 f8e5 	bl	8025f74 <__swbuf_r>
 8025daa:	3001      	adds	r0, #1
 8025dac:	d0d6      	beq.n	8025d5c <_puts_r+0x3c>
 8025dae:	250a      	movs	r5, #10
 8025db0:	e7d6      	b.n	8025d60 <_puts_r+0x40>
 8025db2:	0022      	movs	r2, r4
 8025db4:	0028      	movs	r0, r5
 8025db6:	f000 f8dd 	bl	8025f74 <__swbuf_r>
 8025dba:	3001      	adds	r0, #1
 8025dbc:	d1e8      	bne.n	8025d90 <_puts_r+0x70>
 8025dbe:	e7cd      	b.n	8025d5c <_puts_r+0x3c>
 8025dc0:	6823      	ldr	r3, [r4, #0]
 8025dc2:	1c5a      	adds	r2, r3, #1
 8025dc4:	6022      	str	r2, [r4, #0]
 8025dc6:	220a      	movs	r2, #10
 8025dc8:	701a      	strb	r2, [r3, #0]
 8025dca:	e7f0      	b.n	8025dae <_puts_r+0x8e>

08025dcc <puts>:
 8025dcc:	b510      	push	{r4, lr}
 8025dce:	4b03      	ldr	r3, [pc, #12]	@ (8025ddc <puts+0x10>)
 8025dd0:	0001      	movs	r1, r0
 8025dd2:	6818      	ldr	r0, [r3, #0]
 8025dd4:	f7ff ffa4 	bl	8025d20 <_puts_r>
 8025dd8:	bd10      	pop	{r4, pc}
 8025dda:	46c0      	nop			@ (mov r8, r8)
 8025ddc:	200003ec 	.word	0x200003ec

08025de0 <siprintf>:
 8025de0:	b40e      	push	{r1, r2, r3}
 8025de2:	b510      	push	{r4, lr}
 8025de4:	2400      	movs	r4, #0
 8025de6:	490c      	ldr	r1, [pc, #48]	@ (8025e18 <siprintf+0x38>)
 8025de8:	b09d      	sub	sp, #116	@ 0x74
 8025dea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025dec:	9002      	str	r0, [sp, #8]
 8025dee:	9006      	str	r0, [sp, #24]
 8025df0:	9107      	str	r1, [sp, #28]
 8025df2:	9104      	str	r1, [sp, #16]
 8025df4:	4809      	ldr	r0, [pc, #36]	@ (8025e1c <siprintf+0x3c>)
 8025df6:	490a      	ldr	r1, [pc, #40]	@ (8025e20 <siprintf+0x40>)
 8025df8:	cb04      	ldmia	r3!, {r2}
 8025dfa:	9105      	str	r1, [sp, #20]
 8025dfc:	6800      	ldr	r0, [r0, #0]
 8025dfe:	a902      	add	r1, sp, #8
 8025e00:	9301      	str	r3, [sp, #4]
 8025e02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025e04:	f002 fa5a 	bl	80282bc <_svfiprintf_r>
 8025e08:	9b02      	ldr	r3, [sp, #8]
 8025e0a:	701c      	strb	r4, [r3, #0]
 8025e0c:	b01d      	add	sp, #116	@ 0x74
 8025e0e:	bc10      	pop	{r4}
 8025e10:	bc08      	pop	{r3}
 8025e12:	b003      	add	sp, #12
 8025e14:	4718      	bx	r3
 8025e16:	46c0      	nop			@ (mov r8, r8)
 8025e18:	7fffffff 	.word	0x7fffffff
 8025e1c:	200003ec 	.word	0x200003ec
 8025e20:	ffff0208 	.word	0xffff0208

08025e24 <__sread>:
 8025e24:	b570      	push	{r4, r5, r6, lr}
 8025e26:	000c      	movs	r4, r1
 8025e28:	250e      	movs	r5, #14
 8025e2a:	5f49      	ldrsh	r1, [r1, r5]
 8025e2c:	f000 f9be 	bl	80261ac <_read_r>
 8025e30:	2800      	cmp	r0, #0
 8025e32:	db03      	blt.n	8025e3c <__sread+0x18>
 8025e34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8025e36:	181b      	adds	r3, r3, r0
 8025e38:	6563      	str	r3, [r4, #84]	@ 0x54
 8025e3a:	bd70      	pop	{r4, r5, r6, pc}
 8025e3c:	89a3      	ldrh	r3, [r4, #12]
 8025e3e:	4a02      	ldr	r2, [pc, #8]	@ (8025e48 <__sread+0x24>)
 8025e40:	4013      	ands	r3, r2
 8025e42:	81a3      	strh	r3, [r4, #12]
 8025e44:	e7f9      	b.n	8025e3a <__sread+0x16>
 8025e46:	46c0      	nop			@ (mov r8, r8)
 8025e48:	ffffefff 	.word	0xffffefff

08025e4c <__swrite>:
 8025e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e4e:	001f      	movs	r7, r3
 8025e50:	898b      	ldrh	r3, [r1, #12]
 8025e52:	0005      	movs	r5, r0
 8025e54:	000c      	movs	r4, r1
 8025e56:	0016      	movs	r6, r2
 8025e58:	05db      	lsls	r3, r3, #23
 8025e5a:	d505      	bpl.n	8025e68 <__swrite+0x1c>
 8025e5c:	230e      	movs	r3, #14
 8025e5e:	5ec9      	ldrsh	r1, [r1, r3]
 8025e60:	2200      	movs	r2, #0
 8025e62:	2302      	movs	r3, #2
 8025e64:	f000 f98e 	bl	8026184 <_lseek_r>
 8025e68:	89a3      	ldrh	r3, [r4, #12]
 8025e6a:	4a05      	ldr	r2, [pc, #20]	@ (8025e80 <__swrite+0x34>)
 8025e6c:	0028      	movs	r0, r5
 8025e6e:	4013      	ands	r3, r2
 8025e70:	81a3      	strh	r3, [r4, #12]
 8025e72:	0032      	movs	r2, r6
 8025e74:	230e      	movs	r3, #14
 8025e76:	5ee1      	ldrsh	r1, [r4, r3]
 8025e78:	003b      	movs	r3, r7
 8025e7a:	f000 f9ab 	bl	80261d4 <_write_r>
 8025e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e80:	ffffefff 	.word	0xffffefff

08025e84 <__sseek>:
 8025e84:	b570      	push	{r4, r5, r6, lr}
 8025e86:	000c      	movs	r4, r1
 8025e88:	250e      	movs	r5, #14
 8025e8a:	5f49      	ldrsh	r1, [r1, r5]
 8025e8c:	f000 f97a 	bl	8026184 <_lseek_r>
 8025e90:	89a3      	ldrh	r3, [r4, #12]
 8025e92:	1c42      	adds	r2, r0, #1
 8025e94:	d103      	bne.n	8025e9e <__sseek+0x1a>
 8025e96:	4a05      	ldr	r2, [pc, #20]	@ (8025eac <__sseek+0x28>)
 8025e98:	4013      	ands	r3, r2
 8025e9a:	81a3      	strh	r3, [r4, #12]
 8025e9c:	bd70      	pop	{r4, r5, r6, pc}
 8025e9e:	2280      	movs	r2, #128	@ 0x80
 8025ea0:	0152      	lsls	r2, r2, #5
 8025ea2:	4313      	orrs	r3, r2
 8025ea4:	81a3      	strh	r3, [r4, #12]
 8025ea6:	6560      	str	r0, [r4, #84]	@ 0x54
 8025ea8:	e7f8      	b.n	8025e9c <__sseek+0x18>
 8025eaa:	46c0      	nop			@ (mov r8, r8)
 8025eac:	ffffefff 	.word	0xffffefff

08025eb0 <__sclose>:
 8025eb0:	b510      	push	{r4, lr}
 8025eb2:	230e      	movs	r3, #14
 8025eb4:	5ec9      	ldrsh	r1, [r1, r3]
 8025eb6:	f000 f953 	bl	8026160 <_close_r>
 8025eba:	bd10      	pop	{r4, pc}

08025ebc <_vsniprintf_r>:
 8025ebc:	b530      	push	{r4, r5, lr}
 8025ebe:	0005      	movs	r5, r0
 8025ec0:	0014      	movs	r4, r2
 8025ec2:	0008      	movs	r0, r1
 8025ec4:	001a      	movs	r2, r3
 8025ec6:	b09b      	sub	sp, #108	@ 0x6c
 8025ec8:	2c00      	cmp	r4, #0
 8025eca:	da05      	bge.n	8025ed8 <_vsniprintf_r+0x1c>
 8025ecc:	238b      	movs	r3, #139	@ 0x8b
 8025ece:	2001      	movs	r0, #1
 8025ed0:	602b      	str	r3, [r5, #0]
 8025ed2:	4240      	negs	r0, r0
 8025ed4:	b01b      	add	sp, #108	@ 0x6c
 8025ed6:	bd30      	pop	{r4, r5, pc}
 8025ed8:	2382      	movs	r3, #130	@ 0x82
 8025eda:	4669      	mov	r1, sp
 8025edc:	009b      	lsls	r3, r3, #2
 8025ede:	818b      	strh	r3, [r1, #12]
 8025ee0:	2100      	movs	r1, #0
 8025ee2:	9000      	str	r0, [sp, #0]
 8025ee4:	9119      	str	r1, [sp, #100]	@ 0x64
 8025ee6:	9004      	str	r0, [sp, #16]
 8025ee8:	428c      	cmp	r4, r1
 8025eea:	d000      	beq.n	8025eee <_vsniprintf_r+0x32>
 8025eec:	1e61      	subs	r1, r4, #1
 8025eee:	2301      	movs	r3, #1
 8025ef0:	9102      	str	r1, [sp, #8]
 8025ef2:	9105      	str	r1, [sp, #20]
 8025ef4:	4669      	mov	r1, sp
 8025ef6:	425b      	negs	r3, r3
 8025ef8:	81cb      	strh	r3, [r1, #14]
 8025efa:	0028      	movs	r0, r5
 8025efc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025efe:	f002 f9dd 	bl	80282bc <_svfiprintf_r>
 8025f02:	1c43      	adds	r3, r0, #1
 8025f04:	da01      	bge.n	8025f0a <_vsniprintf_r+0x4e>
 8025f06:	238b      	movs	r3, #139	@ 0x8b
 8025f08:	602b      	str	r3, [r5, #0]
 8025f0a:	2c00      	cmp	r4, #0
 8025f0c:	d0e2      	beq.n	8025ed4 <_vsniprintf_r+0x18>
 8025f0e:	2200      	movs	r2, #0
 8025f10:	9b00      	ldr	r3, [sp, #0]
 8025f12:	701a      	strb	r2, [r3, #0]
 8025f14:	e7de      	b.n	8025ed4 <_vsniprintf_r+0x18>
	...

08025f18 <vsniprintf>:
 8025f18:	b513      	push	{r0, r1, r4, lr}
 8025f1a:	4c04      	ldr	r4, [pc, #16]	@ (8025f2c <vsniprintf+0x14>)
 8025f1c:	9300      	str	r3, [sp, #0]
 8025f1e:	0013      	movs	r3, r2
 8025f20:	000a      	movs	r2, r1
 8025f22:	0001      	movs	r1, r0
 8025f24:	6820      	ldr	r0, [r4, #0]
 8025f26:	f7ff ffc9 	bl	8025ebc <_vsniprintf_r>
 8025f2a:	bd16      	pop	{r1, r2, r4, pc}
 8025f2c:	200003ec 	.word	0x200003ec

08025f30 <_vsiprintf_r>:
 8025f30:	b510      	push	{r4, lr}
 8025f32:	2400      	movs	r4, #0
 8025f34:	b09a      	sub	sp, #104	@ 0x68
 8025f36:	9100      	str	r1, [sp, #0]
 8025f38:	9104      	str	r1, [sp, #16]
 8025f3a:	4906      	ldr	r1, [pc, #24]	@ (8025f54 <_vsiprintf_r+0x24>)
 8025f3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8025f3e:	9105      	str	r1, [sp, #20]
 8025f40:	9102      	str	r1, [sp, #8]
 8025f42:	4905      	ldr	r1, [pc, #20]	@ (8025f58 <_vsiprintf_r+0x28>)
 8025f44:	9103      	str	r1, [sp, #12]
 8025f46:	4669      	mov	r1, sp
 8025f48:	f002 f9b8 	bl	80282bc <_svfiprintf_r>
 8025f4c:	9b00      	ldr	r3, [sp, #0]
 8025f4e:	701c      	strb	r4, [r3, #0]
 8025f50:	b01a      	add	sp, #104	@ 0x68
 8025f52:	bd10      	pop	{r4, pc}
 8025f54:	7fffffff 	.word	0x7fffffff
 8025f58:	ffff0208 	.word	0xffff0208

08025f5c <vsiprintf>:
 8025f5c:	b510      	push	{r4, lr}
 8025f5e:	4c04      	ldr	r4, [pc, #16]	@ (8025f70 <vsiprintf+0x14>)
 8025f60:	0013      	movs	r3, r2
 8025f62:	000a      	movs	r2, r1
 8025f64:	0001      	movs	r1, r0
 8025f66:	6820      	ldr	r0, [r4, #0]
 8025f68:	f7ff ffe2 	bl	8025f30 <_vsiprintf_r>
 8025f6c:	bd10      	pop	{r4, pc}
 8025f6e:	46c0      	nop			@ (mov r8, r8)
 8025f70:	200003ec 	.word	0x200003ec

08025f74 <__swbuf_r>:
 8025f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f76:	0006      	movs	r6, r0
 8025f78:	000d      	movs	r5, r1
 8025f7a:	0014      	movs	r4, r2
 8025f7c:	2800      	cmp	r0, #0
 8025f7e:	d004      	beq.n	8025f8a <__swbuf_r+0x16>
 8025f80:	6a03      	ldr	r3, [r0, #32]
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d101      	bne.n	8025f8a <__swbuf_r+0x16>
 8025f86:	f7ff fe87 	bl	8025c98 <__sinit>
 8025f8a:	69a3      	ldr	r3, [r4, #24]
 8025f8c:	60a3      	str	r3, [r4, #8]
 8025f8e:	89a3      	ldrh	r3, [r4, #12]
 8025f90:	071b      	lsls	r3, r3, #28
 8025f92:	d502      	bpl.n	8025f9a <__swbuf_r+0x26>
 8025f94:	6923      	ldr	r3, [r4, #16]
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d109      	bne.n	8025fae <__swbuf_r+0x3a>
 8025f9a:	0021      	movs	r1, r4
 8025f9c:	0030      	movs	r0, r6
 8025f9e:	f000 f82b 	bl	8025ff8 <__swsetup_r>
 8025fa2:	2800      	cmp	r0, #0
 8025fa4:	d003      	beq.n	8025fae <__swbuf_r+0x3a>
 8025fa6:	2501      	movs	r5, #1
 8025fa8:	426d      	negs	r5, r5
 8025faa:	0028      	movs	r0, r5
 8025fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025fae:	6923      	ldr	r3, [r4, #16]
 8025fb0:	6820      	ldr	r0, [r4, #0]
 8025fb2:	b2ef      	uxtb	r7, r5
 8025fb4:	1ac0      	subs	r0, r0, r3
 8025fb6:	6963      	ldr	r3, [r4, #20]
 8025fb8:	b2ed      	uxtb	r5, r5
 8025fba:	4283      	cmp	r3, r0
 8025fbc:	dc05      	bgt.n	8025fca <__swbuf_r+0x56>
 8025fbe:	0021      	movs	r1, r4
 8025fc0:	0030      	movs	r0, r6
 8025fc2:	f002 fc43 	bl	802884c <_fflush_r>
 8025fc6:	2800      	cmp	r0, #0
 8025fc8:	d1ed      	bne.n	8025fa6 <__swbuf_r+0x32>
 8025fca:	68a3      	ldr	r3, [r4, #8]
 8025fcc:	3001      	adds	r0, #1
 8025fce:	3b01      	subs	r3, #1
 8025fd0:	60a3      	str	r3, [r4, #8]
 8025fd2:	6823      	ldr	r3, [r4, #0]
 8025fd4:	1c5a      	adds	r2, r3, #1
 8025fd6:	6022      	str	r2, [r4, #0]
 8025fd8:	701f      	strb	r7, [r3, #0]
 8025fda:	6963      	ldr	r3, [r4, #20]
 8025fdc:	4283      	cmp	r3, r0
 8025fde:	d004      	beq.n	8025fea <__swbuf_r+0x76>
 8025fe0:	89a3      	ldrh	r3, [r4, #12]
 8025fe2:	07db      	lsls	r3, r3, #31
 8025fe4:	d5e1      	bpl.n	8025faa <__swbuf_r+0x36>
 8025fe6:	2d0a      	cmp	r5, #10
 8025fe8:	d1df      	bne.n	8025faa <__swbuf_r+0x36>
 8025fea:	0021      	movs	r1, r4
 8025fec:	0030      	movs	r0, r6
 8025fee:	f002 fc2d 	bl	802884c <_fflush_r>
 8025ff2:	2800      	cmp	r0, #0
 8025ff4:	d0d9      	beq.n	8025faa <__swbuf_r+0x36>
 8025ff6:	e7d6      	b.n	8025fa6 <__swbuf_r+0x32>

08025ff8 <__swsetup_r>:
 8025ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80260b0 <__swsetup_r+0xb8>)
 8025ffa:	b570      	push	{r4, r5, r6, lr}
 8025ffc:	0005      	movs	r5, r0
 8025ffe:	6818      	ldr	r0, [r3, #0]
 8026000:	000c      	movs	r4, r1
 8026002:	2800      	cmp	r0, #0
 8026004:	d004      	beq.n	8026010 <__swsetup_r+0x18>
 8026006:	6a03      	ldr	r3, [r0, #32]
 8026008:	2b00      	cmp	r3, #0
 802600a:	d101      	bne.n	8026010 <__swsetup_r+0x18>
 802600c:	f7ff fe44 	bl	8025c98 <__sinit>
 8026010:	220c      	movs	r2, #12
 8026012:	5ea3      	ldrsh	r3, [r4, r2]
 8026014:	071a      	lsls	r2, r3, #28
 8026016:	d423      	bmi.n	8026060 <__swsetup_r+0x68>
 8026018:	06da      	lsls	r2, r3, #27
 802601a:	d407      	bmi.n	802602c <__swsetup_r+0x34>
 802601c:	2209      	movs	r2, #9
 802601e:	602a      	str	r2, [r5, #0]
 8026020:	2240      	movs	r2, #64	@ 0x40
 8026022:	2001      	movs	r0, #1
 8026024:	4313      	orrs	r3, r2
 8026026:	81a3      	strh	r3, [r4, #12]
 8026028:	4240      	negs	r0, r0
 802602a:	e03a      	b.n	80260a2 <__swsetup_r+0xaa>
 802602c:	075b      	lsls	r3, r3, #29
 802602e:	d513      	bpl.n	8026058 <__swsetup_r+0x60>
 8026030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026032:	2900      	cmp	r1, #0
 8026034:	d008      	beq.n	8026048 <__swsetup_r+0x50>
 8026036:	0023      	movs	r3, r4
 8026038:	3344      	adds	r3, #68	@ 0x44
 802603a:	4299      	cmp	r1, r3
 802603c:	d002      	beq.n	8026044 <__swsetup_r+0x4c>
 802603e:	0028      	movs	r0, r5
 8026040:	f000 ff9a 	bl	8026f78 <_free_r>
 8026044:	2300      	movs	r3, #0
 8026046:	6363      	str	r3, [r4, #52]	@ 0x34
 8026048:	2224      	movs	r2, #36	@ 0x24
 802604a:	89a3      	ldrh	r3, [r4, #12]
 802604c:	4393      	bics	r3, r2
 802604e:	81a3      	strh	r3, [r4, #12]
 8026050:	2300      	movs	r3, #0
 8026052:	6063      	str	r3, [r4, #4]
 8026054:	6923      	ldr	r3, [r4, #16]
 8026056:	6023      	str	r3, [r4, #0]
 8026058:	2308      	movs	r3, #8
 802605a:	89a2      	ldrh	r2, [r4, #12]
 802605c:	4313      	orrs	r3, r2
 802605e:	81a3      	strh	r3, [r4, #12]
 8026060:	6923      	ldr	r3, [r4, #16]
 8026062:	2b00      	cmp	r3, #0
 8026064:	d10b      	bne.n	802607e <__swsetup_r+0x86>
 8026066:	21a0      	movs	r1, #160	@ 0xa0
 8026068:	2280      	movs	r2, #128	@ 0x80
 802606a:	89a3      	ldrh	r3, [r4, #12]
 802606c:	0089      	lsls	r1, r1, #2
 802606e:	0092      	lsls	r2, r2, #2
 8026070:	400b      	ands	r3, r1
 8026072:	4293      	cmp	r3, r2
 8026074:	d003      	beq.n	802607e <__swsetup_r+0x86>
 8026076:	0021      	movs	r1, r4
 8026078:	0028      	movs	r0, r5
 802607a:	f002 fc3d 	bl	80288f8 <__smakebuf_r>
 802607e:	220c      	movs	r2, #12
 8026080:	5ea3      	ldrsh	r3, [r4, r2]
 8026082:	2101      	movs	r1, #1
 8026084:	001a      	movs	r2, r3
 8026086:	400a      	ands	r2, r1
 8026088:	420b      	tst	r3, r1
 802608a:	d00b      	beq.n	80260a4 <__swsetup_r+0xac>
 802608c:	2200      	movs	r2, #0
 802608e:	60a2      	str	r2, [r4, #8]
 8026090:	6962      	ldr	r2, [r4, #20]
 8026092:	4252      	negs	r2, r2
 8026094:	61a2      	str	r2, [r4, #24]
 8026096:	2000      	movs	r0, #0
 8026098:	6922      	ldr	r2, [r4, #16]
 802609a:	4282      	cmp	r2, r0
 802609c:	d101      	bne.n	80260a2 <__swsetup_r+0xaa>
 802609e:	061a      	lsls	r2, r3, #24
 80260a0:	d4be      	bmi.n	8026020 <__swsetup_r+0x28>
 80260a2:	bd70      	pop	{r4, r5, r6, pc}
 80260a4:	0799      	lsls	r1, r3, #30
 80260a6:	d400      	bmi.n	80260aa <__swsetup_r+0xb2>
 80260a8:	6962      	ldr	r2, [r4, #20]
 80260aa:	60a2      	str	r2, [r4, #8]
 80260ac:	e7f3      	b.n	8026096 <__swsetup_r+0x9e>
 80260ae:	46c0      	nop			@ (mov r8, r8)
 80260b0:	200003ec 	.word	0x200003ec

080260b4 <memset>:
 80260b4:	0003      	movs	r3, r0
 80260b6:	1882      	adds	r2, r0, r2
 80260b8:	4293      	cmp	r3, r2
 80260ba:	d100      	bne.n	80260be <memset+0xa>
 80260bc:	4770      	bx	lr
 80260be:	7019      	strb	r1, [r3, #0]
 80260c0:	3301      	adds	r3, #1
 80260c2:	e7f9      	b.n	80260b8 <memset+0x4>

080260c4 <strchr>:
 80260c4:	b2c9      	uxtb	r1, r1
 80260c6:	7803      	ldrb	r3, [r0, #0]
 80260c8:	2b00      	cmp	r3, #0
 80260ca:	d004      	beq.n	80260d6 <strchr+0x12>
 80260cc:	428b      	cmp	r3, r1
 80260ce:	d100      	bne.n	80260d2 <strchr+0xe>
 80260d0:	4770      	bx	lr
 80260d2:	3001      	adds	r0, #1
 80260d4:	e7f7      	b.n	80260c6 <strchr+0x2>
 80260d6:	424b      	negs	r3, r1
 80260d8:	4159      	adcs	r1, r3
 80260da:	4249      	negs	r1, r1
 80260dc:	4008      	ands	r0, r1
 80260de:	e7f7      	b.n	80260d0 <strchr+0xc>

080260e0 <strncmp>:
 80260e0:	b530      	push	{r4, r5, lr}
 80260e2:	0005      	movs	r5, r0
 80260e4:	1e10      	subs	r0, r2, #0
 80260e6:	d00b      	beq.n	8026100 <strncmp+0x20>
 80260e8:	2400      	movs	r4, #0
 80260ea:	3a01      	subs	r2, #1
 80260ec:	5d2b      	ldrb	r3, [r5, r4]
 80260ee:	5d08      	ldrb	r0, [r1, r4]
 80260f0:	4283      	cmp	r3, r0
 80260f2:	d104      	bne.n	80260fe <strncmp+0x1e>
 80260f4:	4294      	cmp	r4, r2
 80260f6:	d002      	beq.n	80260fe <strncmp+0x1e>
 80260f8:	3401      	adds	r4, #1
 80260fa:	2b00      	cmp	r3, #0
 80260fc:	d1f6      	bne.n	80260ec <strncmp+0xc>
 80260fe:	1a18      	subs	r0, r3, r0
 8026100:	bd30      	pop	{r4, r5, pc}

08026102 <strncpy>:
 8026102:	0003      	movs	r3, r0
 8026104:	b530      	push	{r4, r5, lr}
 8026106:	001d      	movs	r5, r3
 8026108:	2a00      	cmp	r2, #0
 802610a:	d006      	beq.n	802611a <strncpy+0x18>
 802610c:	780c      	ldrb	r4, [r1, #0]
 802610e:	3a01      	subs	r2, #1
 8026110:	3301      	adds	r3, #1
 8026112:	702c      	strb	r4, [r5, #0]
 8026114:	3101      	adds	r1, #1
 8026116:	2c00      	cmp	r4, #0
 8026118:	d1f5      	bne.n	8026106 <strncpy+0x4>
 802611a:	2100      	movs	r1, #0
 802611c:	189a      	adds	r2, r3, r2
 802611e:	4293      	cmp	r3, r2
 8026120:	d100      	bne.n	8026124 <strncpy+0x22>
 8026122:	bd30      	pop	{r4, r5, pc}
 8026124:	7019      	strb	r1, [r3, #0]
 8026126:	3301      	adds	r3, #1
 8026128:	e7f9      	b.n	802611e <strncpy+0x1c>

0802612a <strstr>:
 802612a:	780a      	ldrb	r2, [r1, #0]
 802612c:	b530      	push	{r4, r5, lr}
 802612e:	2a00      	cmp	r2, #0
 8026130:	d10c      	bne.n	802614c <strstr+0x22>
 8026132:	bd30      	pop	{r4, r5, pc}
 8026134:	429a      	cmp	r2, r3
 8026136:	d108      	bne.n	802614a <strstr+0x20>
 8026138:	2301      	movs	r3, #1
 802613a:	5ccc      	ldrb	r4, [r1, r3]
 802613c:	2c00      	cmp	r4, #0
 802613e:	d0f8      	beq.n	8026132 <strstr+0x8>
 8026140:	5cc5      	ldrb	r5, [r0, r3]
 8026142:	42a5      	cmp	r5, r4
 8026144:	d101      	bne.n	802614a <strstr+0x20>
 8026146:	3301      	adds	r3, #1
 8026148:	e7f7      	b.n	802613a <strstr+0x10>
 802614a:	3001      	adds	r0, #1
 802614c:	7803      	ldrb	r3, [r0, #0]
 802614e:	2b00      	cmp	r3, #0
 8026150:	d1f0      	bne.n	8026134 <strstr+0xa>
 8026152:	0018      	movs	r0, r3
 8026154:	e7ed      	b.n	8026132 <strstr+0x8>
	...

08026158 <_localeconv_r>:
 8026158:	4800      	ldr	r0, [pc, #0]	@ (802615c <_localeconv_r+0x4>)
 802615a:	4770      	bx	lr
 802615c:	20000370 	.word	0x20000370

08026160 <_close_r>:
 8026160:	2300      	movs	r3, #0
 8026162:	b570      	push	{r4, r5, r6, lr}
 8026164:	4d06      	ldr	r5, [pc, #24]	@ (8026180 <_close_r+0x20>)
 8026166:	0004      	movs	r4, r0
 8026168:	0008      	movs	r0, r1
 802616a:	602b      	str	r3, [r5, #0]
 802616c:	f7ed f850 	bl	8013210 <_close>
 8026170:	1c43      	adds	r3, r0, #1
 8026172:	d103      	bne.n	802617c <_close_r+0x1c>
 8026174:	682b      	ldr	r3, [r5, #0]
 8026176:	2b00      	cmp	r3, #0
 8026178:	d000      	beq.n	802617c <_close_r+0x1c>
 802617a:	6023      	str	r3, [r4, #0]
 802617c:	bd70      	pop	{r4, r5, r6, pc}
 802617e:	46c0      	nop			@ (mov r8, r8)
 8026180:	20003764 	.word	0x20003764

08026184 <_lseek_r>:
 8026184:	b570      	push	{r4, r5, r6, lr}
 8026186:	0004      	movs	r4, r0
 8026188:	0008      	movs	r0, r1
 802618a:	0011      	movs	r1, r2
 802618c:	001a      	movs	r2, r3
 802618e:	2300      	movs	r3, #0
 8026190:	4d05      	ldr	r5, [pc, #20]	@ (80261a8 <_lseek_r+0x24>)
 8026192:	602b      	str	r3, [r5, #0]
 8026194:	f7ed f85d 	bl	8013252 <_lseek>
 8026198:	1c43      	adds	r3, r0, #1
 802619a:	d103      	bne.n	80261a4 <_lseek_r+0x20>
 802619c:	682b      	ldr	r3, [r5, #0]
 802619e:	2b00      	cmp	r3, #0
 80261a0:	d000      	beq.n	80261a4 <_lseek_r+0x20>
 80261a2:	6023      	str	r3, [r4, #0]
 80261a4:	bd70      	pop	{r4, r5, r6, pc}
 80261a6:	46c0      	nop			@ (mov r8, r8)
 80261a8:	20003764 	.word	0x20003764

080261ac <_read_r>:
 80261ac:	b570      	push	{r4, r5, r6, lr}
 80261ae:	0004      	movs	r4, r0
 80261b0:	0008      	movs	r0, r1
 80261b2:	0011      	movs	r1, r2
 80261b4:	001a      	movs	r2, r3
 80261b6:	2300      	movs	r3, #0
 80261b8:	4d05      	ldr	r5, [pc, #20]	@ (80261d0 <_read_r+0x24>)
 80261ba:	602b      	str	r3, [r5, #0]
 80261bc:	f7ed f80b 	bl	80131d6 <_read>
 80261c0:	1c43      	adds	r3, r0, #1
 80261c2:	d103      	bne.n	80261cc <_read_r+0x20>
 80261c4:	682b      	ldr	r3, [r5, #0]
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	d000      	beq.n	80261cc <_read_r+0x20>
 80261ca:	6023      	str	r3, [r4, #0]
 80261cc:	bd70      	pop	{r4, r5, r6, pc}
 80261ce:	46c0      	nop			@ (mov r8, r8)
 80261d0:	20003764 	.word	0x20003764

080261d4 <_write_r>:
 80261d4:	b570      	push	{r4, r5, r6, lr}
 80261d6:	0004      	movs	r4, r0
 80261d8:	0008      	movs	r0, r1
 80261da:	0011      	movs	r1, r2
 80261dc:	001a      	movs	r2, r3
 80261de:	2300      	movs	r3, #0
 80261e0:	4d05      	ldr	r5, [pc, #20]	@ (80261f8 <_write_r+0x24>)
 80261e2:	602b      	str	r3, [r5, #0]
 80261e4:	f7ed fcc8 	bl	8013b78 <_write>
 80261e8:	1c43      	adds	r3, r0, #1
 80261ea:	d103      	bne.n	80261f4 <_write_r+0x20>
 80261ec:	682b      	ldr	r3, [r5, #0]
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d000      	beq.n	80261f4 <_write_r+0x20>
 80261f2:	6023      	str	r3, [r4, #0]
 80261f4:	bd70      	pop	{r4, r5, r6, pc}
 80261f6:	46c0      	nop			@ (mov r8, r8)
 80261f8:	20003764 	.word	0x20003764

080261fc <__errno>:
 80261fc:	4b01      	ldr	r3, [pc, #4]	@ (8026204 <__errno+0x8>)
 80261fe:	6818      	ldr	r0, [r3, #0]
 8026200:	4770      	bx	lr
 8026202:	46c0      	nop			@ (mov r8, r8)
 8026204:	200003ec 	.word	0x200003ec

08026208 <__libc_init_array>:
 8026208:	b570      	push	{r4, r5, r6, lr}
 802620a:	2600      	movs	r6, #0
 802620c:	4c0c      	ldr	r4, [pc, #48]	@ (8026240 <__libc_init_array+0x38>)
 802620e:	4d0d      	ldr	r5, [pc, #52]	@ (8026244 <__libc_init_array+0x3c>)
 8026210:	1b64      	subs	r4, r4, r5
 8026212:	10a4      	asrs	r4, r4, #2
 8026214:	42a6      	cmp	r6, r4
 8026216:	d109      	bne.n	802622c <__libc_init_array+0x24>
 8026218:	2600      	movs	r6, #0
 802621a:	f003 ffcb 	bl	802a1b4 <_init>
 802621e:	4c0a      	ldr	r4, [pc, #40]	@ (8026248 <__libc_init_array+0x40>)
 8026220:	4d0a      	ldr	r5, [pc, #40]	@ (802624c <__libc_init_array+0x44>)
 8026222:	1b64      	subs	r4, r4, r5
 8026224:	10a4      	asrs	r4, r4, #2
 8026226:	42a6      	cmp	r6, r4
 8026228:	d105      	bne.n	8026236 <__libc_init_array+0x2e>
 802622a:	bd70      	pop	{r4, r5, r6, pc}
 802622c:	00b3      	lsls	r3, r6, #2
 802622e:	58eb      	ldr	r3, [r5, r3]
 8026230:	4798      	blx	r3
 8026232:	3601      	adds	r6, #1
 8026234:	e7ee      	b.n	8026214 <__libc_init_array+0xc>
 8026236:	00b3      	lsls	r3, r6, #2
 8026238:	58eb      	ldr	r3, [r5, r3]
 802623a:	4798      	blx	r3
 802623c:	3601      	adds	r6, #1
 802623e:	e7f2      	b.n	8026226 <__libc_init_array+0x1e>
 8026240:	0802ebb8 	.word	0x0802ebb8
 8026244:	0802ebb8 	.word	0x0802ebb8
 8026248:	0802ebbc 	.word	0x0802ebbc
 802624c:	0802ebb8 	.word	0x0802ebb8

08026250 <__retarget_lock_init_recursive>:
 8026250:	4770      	bx	lr

08026252 <__retarget_lock_acquire_recursive>:
 8026252:	4770      	bx	lr

08026254 <__retarget_lock_release_recursive>:
 8026254:	4770      	bx	lr

08026256 <memchr>:
 8026256:	b2c9      	uxtb	r1, r1
 8026258:	1882      	adds	r2, r0, r2
 802625a:	4290      	cmp	r0, r2
 802625c:	d101      	bne.n	8026262 <memchr+0xc>
 802625e:	2000      	movs	r0, #0
 8026260:	4770      	bx	lr
 8026262:	7803      	ldrb	r3, [r0, #0]
 8026264:	428b      	cmp	r3, r1
 8026266:	d0fb      	beq.n	8026260 <memchr+0xa>
 8026268:	3001      	adds	r0, #1
 802626a:	e7f6      	b.n	802625a <memchr+0x4>

0802626c <memcpy>:
 802626c:	2300      	movs	r3, #0
 802626e:	b510      	push	{r4, lr}
 8026270:	429a      	cmp	r2, r3
 8026272:	d100      	bne.n	8026276 <memcpy+0xa>
 8026274:	bd10      	pop	{r4, pc}
 8026276:	5ccc      	ldrb	r4, [r1, r3]
 8026278:	54c4      	strb	r4, [r0, r3]
 802627a:	3301      	adds	r3, #1
 802627c:	e7f8      	b.n	8026270 <memcpy+0x4>
	...

08026280 <nan>:
 8026280:	2000      	movs	r0, #0
 8026282:	4901      	ldr	r1, [pc, #4]	@ (8026288 <nan+0x8>)
 8026284:	4770      	bx	lr
 8026286:	46c0      	nop			@ (mov r8, r8)
 8026288:	7ff80000 	.word	0x7ff80000

0802628c <quorem>:
 802628c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802628e:	6903      	ldr	r3, [r0, #16]
 8026290:	690c      	ldr	r4, [r1, #16]
 8026292:	b089      	sub	sp, #36	@ 0x24
 8026294:	9003      	str	r0, [sp, #12]
 8026296:	9106      	str	r1, [sp, #24]
 8026298:	2000      	movs	r0, #0
 802629a:	42a3      	cmp	r3, r4
 802629c:	db63      	blt.n	8026366 <quorem+0xda>
 802629e:	000b      	movs	r3, r1
 80262a0:	3c01      	subs	r4, #1
 80262a2:	3314      	adds	r3, #20
 80262a4:	00a5      	lsls	r5, r4, #2
 80262a6:	9304      	str	r3, [sp, #16]
 80262a8:	195b      	adds	r3, r3, r5
 80262aa:	9305      	str	r3, [sp, #20]
 80262ac:	9b03      	ldr	r3, [sp, #12]
 80262ae:	3314      	adds	r3, #20
 80262b0:	9301      	str	r3, [sp, #4]
 80262b2:	195d      	adds	r5, r3, r5
 80262b4:	9b05      	ldr	r3, [sp, #20]
 80262b6:	682f      	ldr	r7, [r5, #0]
 80262b8:	681e      	ldr	r6, [r3, #0]
 80262ba:	0038      	movs	r0, r7
 80262bc:	3601      	adds	r6, #1
 80262be:	0031      	movs	r1, r6
 80262c0:	f7d9 ff70 	bl	80001a4 <__udivsi3>
 80262c4:	9002      	str	r0, [sp, #8]
 80262c6:	42b7      	cmp	r7, r6
 80262c8:	d327      	bcc.n	802631a <quorem+0x8e>
 80262ca:	9b04      	ldr	r3, [sp, #16]
 80262cc:	2700      	movs	r7, #0
 80262ce:	469c      	mov	ip, r3
 80262d0:	9e01      	ldr	r6, [sp, #4]
 80262d2:	9707      	str	r7, [sp, #28]
 80262d4:	4662      	mov	r2, ip
 80262d6:	ca08      	ldmia	r2!, {r3}
 80262d8:	6830      	ldr	r0, [r6, #0]
 80262da:	4694      	mov	ip, r2
 80262dc:	9a02      	ldr	r2, [sp, #8]
 80262de:	b299      	uxth	r1, r3
 80262e0:	4351      	muls	r1, r2
 80262e2:	0c1b      	lsrs	r3, r3, #16
 80262e4:	4353      	muls	r3, r2
 80262e6:	19c9      	adds	r1, r1, r7
 80262e8:	0c0a      	lsrs	r2, r1, #16
 80262ea:	189b      	adds	r3, r3, r2
 80262ec:	b289      	uxth	r1, r1
 80262ee:	b282      	uxth	r2, r0
 80262f0:	1a52      	subs	r2, r2, r1
 80262f2:	9907      	ldr	r1, [sp, #28]
 80262f4:	0c1f      	lsrs	r7, r3, #16
 80262f6:	1852      	adds	r2, r2, r1
 80262f8:	0c00      	lsrs	r0, r0, #16
 80262fa:	b29b      	uxth	r3, r3
 80262fc:	1411      	asrs	r1, r2, #16
 80262fe:	1ac3      	subs	r3, r0, r3
 8026300:	185b      	adds	r3, r3, r1
 8026302:	1419      	asrs	r1, r3, #16
 8026304:	b292      	uxth	r2, r2
 8026306:	041b      	lsls	r3, r3, #16
 8026308:	431a      	orrs	r2, r3
 802630a:	9b05      	ldr	r3, [sp, #20]
 802630c:	9107      	str	r1, [sp, #28]
 802630e:	c604      	stmia	r6!, {r2}
 8026310:	4563      	cmp	r3, ip
 8026312:	d2df      	bcs.n	80262d4 <quorem+0x48>
 8026314:	682b      	ldr	r3, [r5, #0]
 8026316:	2b00      	cmp	r3, #0
 8026318:	d02b      	beq.n	8026372 <quorem+0xe6>
 802631a:	9906      	ldr	r1, [sp, #24]
 802631c:	9803      	ldr	r0, [sp, #12]
 802631e:	f001 fd6f 	bl	8027e00 <__mcmp>
 8026322:	2800      	cmp	r0, #0
 8026324:	db1e      	blt.n	8026364 <quorem+0xd8>
 8026326:	2600      	movs	r6, #0
 8026328:	9d01      	ldr	r5, [sp, #4]
 802632a:	9904      	ldr	r1, [sp, #16]
 802632c:	c901      	ldmia	r1!, {r0}
 802632e:	682b      	ldr	r3, [r5, #0]
 8026330:	b287      	uxth	r7, r0
 8026332:	b29a      	uxth	r2, r3
 8026334:	1bd2      	subs	r2, r2, r7
 8026336:	1992      	adds	r2, r2, r6
 8026338:	0c00      	lsrs	r0, r0, #16
 802633a:	0c1b      	lsrs	r3, r3, #16
 802633c:	1a1b      	subs	r3, r3, r0
 802633e:	1410      	asrs	r0, r2, #16
 8026340:	181b      	adds	r3, r3, r0
 8026342:	141e      	asrs	r6, r3, #16
 8026344:	b292      	uxth	r2, r2
 8026346:	041b      	lsls	r3, r3, #16
 8026348:	431a      	orrs	r2, r3
 802634a:	9b05      	ldr	r3, [sp, #20]
 802634c:	c504      	stmia	r5!, {r2}
 802634e:	428b      	cmp	r3, r1
 8026350:	d2ec      	bcs.n	802632c <quorem+0xa0>
 8026352:	9a01      	ldr	r2, [sp, #4]
 8026354:	00a3      	lsls	r3, r4, #2
 8026356:	18d3      	adds	r3, r2, r3
 8026358:	681a      	ldr	r2, [r3, #0]
 802635a:	2a00      	cmp	r2, #0
 802635c:	d014      	beq.n	8026388 <quorem+0xfc>
 802635e:	9b02      	ldr	r3, [sp, #8]
 8026360:	3301      	adds	r3, #1
 8026362:	9302      	str	r3, [sp, #8]
 8026364:	9802      	ldr	r0, [sp, #8]
 8026366:	b009      	add	sp, #36	@ 0x24
 8026368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802636a:	682b      	ldr	r3, [r5, #0]
 802636c:	2b00      	cmp	r3, #0
 802636e:	d104      	bne.n	802637a <quorem+0xee>
 8026370:	3c01      	subs	r4, #1
 8026372:	9b01      	ldr	r3, [sp, #4]
 8026374:	3d04      	subs	r5, #4
 8026376:	42ab      	cmp	r3, r5
 8026378:	d3f7      	bcc.n	802636a <quorem+0xde>
 802637a:	9b03      	ldr	r3, [sp, #12]
 802637c:	611c      	str	r4, [r3, #16]
 802637e:	e7cc      	b.n	802631a <quorem+0x8e>
 8026380:	681a      	ldr	r2, [r3, #0]
 8026382:	2a00      	cmp	r2, #0
 8026384:	d104      	bne.n	8026390 <quorem+0x104>
 8026386:	3c01      	subs	r4, #1
 8026388:	9a01      	ldr	r2, [sp, #4]
 802638a:	3b04      	subs	r3, #4
 802638c:	429a      	cmp	r2, r3
 802638e:	d3f7      	bcc.n	8026380 <quorem+0xf4>
 8026390:	9b03      	ldr	r3, [sp, #12]
 8026392:	611c      	str	r4, [r3, #16]
 8026394:	e7e3      	b.n	802635e <quorem+0xd2>
	...

08026398 <_dtoa_r>:
 8026398:	b5f0      	push	{r4, r5, r6, r7, lr}
 802639a:	0014      	movs	r4, r2
 802639c:	001d      	movs	r5, r3
 802639e:	69c6      	ldr	r6, [r0, #28]
 80263a0:	b09d      	sub	sp, #116	@ 0x74
 80263a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80263a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80263a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80263a8:	9003      	str	r0, [sp, #12]
 80263aa:	2e00      	cmp	r6, #0
 80263ac:	d10f      	bne.n	80263ce <_dtoa_r+0x36>
 80263ae:	2010      	movs	r0, #16
 80263b0:	f001 f986 	bl	80276c0 <malloc>
 80263b4:	9b03      	ldr	r3, [sp, #12]
 80263b6:	1e02      	subs	r2, r0, #0
 80263b8:	61d8      	str	r0, [r3, #28]
 80263ba:	d104      	bne.n	80263c6 <_dtoa_r+0x2e>
 80263bc:	21ef      	movs	r1, #239	@ 0xef
 80263be:	4bc7      	ldr	r3, [pc, #796]	@ (80266dc <_dtoa_r+0x344>)
 80263c0:	48c7      	ldr	r0, [pc, #796]	@ (80266e0 <_dtoa_r+0x348>)
 80263c2:	f002 fb23 	bl	8028a0c <__assert_func>
 80263c6:	6046      	str	r6, [r0, #4]
 80263c8:	6086      	str	r6, [r0, #8]
 80263ca:	6006      	str	r6, [r0, #0]
 80263cc:	60c6      	str	r6, [r0, #12]
 80263ce:	9b03      	ldr	r3, [sp, #12]
 80263d0:	69db      	ldr	r3, [r3, #28]
 80263d2:	6819      	ldr	r1, [r3, #0]
 80263d4:	2900      	cmp	r1, #0
 80263d6:	d00b      	beq.n	80263f0 <_dtoa_r+0x58>
 80263d8:	685a      	ldr	r2, [r3, #4]
 80263da:	2301      	movs	r3, #1
 80263dc:	4093      	lsls	r3, r2
 80263de:	604a      	str	r2, [r1, #4]
 80263e0:	608b      	str	r3, [r1, #8]
 80263e2:	9803      	ldr	r0, [sp, #12]
 80263e4:	f001 fa7e 	bl	80278e4 <_Bfree>
 80263e8:	2200      	movs	r2, #0
 80263ea:	9b03      	ldr	r3, [sp, #12]
 80263ec:	69db      	ldr	r3, [r3, #28]
 80263ee:	601a      	str	r2, [r3, #0]
 80263f0:	2d00      	cmp	r5, #0
 80263f2:	da1e      	bge.n	8026432 <_dtoa_r+0x9a>
 80263f4:	2301      	movs	r3, #1
 80263f6:	603b      	str	r3, [r7, #0]
 80263f8:	006b      	lsls	r3, r5, #1
 80263fa:	085b      	lsrs	r3, r3, #1
 80263fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80263fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026400:	4bb8      	ldr	r3, [pc, #736]	@ (80266e4 <_dtoa_r+0x34c>)
 8026402:	4ab8      	ldr	r2, [pc, #736]	@ (80266e4 <_dtoa_r+0x34c>)
 8026404:	403b      	ands	r3, r7
 8026406:	4293      	cmp	r3, r2
 8026408:	d116      	bne.n	8026438 <_dtoa_r+0xa0>
 802640a:	4bb7      	ldr	r3, [pc, #732]	@ (80266e8 <_dtoa_r+0x350>)
 802640c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802640e:	6013      	str	r3, [r2, #0]
 8026410:	033b      	lsls	r3, r7, #12
 8026412:	0b1b      	lsrs	r3, r3, #12
 8026414:	4323      	orrs	r3, r4
 8026416:	d101      	bne.n	802641c <_dtoa_r+0x84>
 8026418:	f000 fd80 	bl	8026f1c <_dtoa_r+0xb84>
 802641c:	4bb3      	ldr	r3, [pc, #716]	@ (80266ec <_dtoa_r+0x354>)
 802641e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026420:	9308      	str	r3, [sp, #32]
 8026422:	2a00      	cmp	r2, #0
 8026424:	d002      	beq.n	802642c <_dtoa_r+0x94>
 8026426:	4bb2      	ldr	r3, [pc, #712]	@ (80266f0 <_dtoa_r+0x358>)
 8026428:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802642a:	6013      	str	r3, [r2, #0]
 802642c:	9808      	ldr	r0, [sp, #32]
 802642e:	b01d      	add	sp, #116	@ 0x74
 8026430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026432:	2300      	movs	r3, #0
 8026434:	603b      	str	r3, [r7, #0]
 8026436:	e7e2      	b.n	80263fe <_dtoa_r+0x66>
 8026438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802643a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802643c:	9212      	str	r2, [sp, #72]	@ 0x48
 802643e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026440:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026442:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026444:	2200      	movs	r2, #0
 8026446:	2300      	movs	r3, #0
 8026448:	f7da f832 	bl	80004b0 <__aeabi_dcmpeq>
 802644c:	1e06      	subs	r6, r0, #0
 802644e:	d00b      	beq.n	8026468 <_dtoa_r+0xd0>
 8026450:	2301      	movs	r3, #1
 8026452:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026454:	6013      	str	r3, [r2, #0]
 8026456:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026458:	2b00      	cmp	r3, #0
 802645a:	d002      	beq.n	8026462 <_dtoa_r+0xca>
 802645c:	4ba5      	ldr	r3, [pc, #660]	@ (80266f4 <_dtoa_r+0x35c>)
 802645e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026460:	6013      	str	r3, [r2, #0]
 8026462:	4ba5      	ldr	r3, [pc, #660]	@ (80266f8 <_dtoa_r+0x360>)
 8026464:	9308      	str	r3, [sp, #32]
 8026466:	e7e1      	b.n	802642c <_dtoa_r+0x94>
 8026468:	ab1a      	add	r3, sp, #104	@ 0x68
 802646a:	9301      	str	r3, [sp, #4]
 802646c:	ab1b      	add	r3, sp, #108	@ 0x6c
 802646e:	9300      	str	r3, [sp, #0]
 8026470:	9803      	ldr	r0, [sp, #12]
 8026472:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026476:	f001 fde5 	bl	8028044 <__d2b>
 802647a:	007a      	lsls	r2, r7, #1
 802647c:	9005      	str	r0, [sp, #20]
 802647e:	0d52      	lsrs	r2, r2, #21
 8026480:	d100      	bne.n	8026484 <_dtoa_r+0xec>
 8026482:	e07b      	b.n	802657c <_dtoa_r+0x1e4>
 8026484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026486:	9618      	str	r6, [sp, #96]	@ 0x60
 8026488:	0319      	lsls	r1, r3, #12
 802648a:	4b9c      	ldr	r3, [pc, #624]	@ (80266fc <_dtoa_r+0x364>)
 802648c:	0b09      	lsrs	r1, r1, #12
 802648e:	430b      	orrs	r3, r1
 8026490:	499b      	ldr	r1, [pc, #620]	@ (8026700 <_dtoa_r+0x368>)
 8026492:	1857      	adds	r7, r2, r1
 8026494:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026496:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026498:	0019      	movs	r1, r3
 802649a:	2200      	movs	r2, #0
 802649c:	4b99      	ldr	r3, [pc, #612]	@ (8026704 <_dtoa_r+0x36c>)
 802649e:	f7dc fd3f 	bl	8002f20 <__aeabi_dsub>
 80264a2:	4a99      	ldr	r2, [pc, #612]	@ (8026708 <_dtoa_r+0x370>)
 80264a4:	4b99      	ldr	r3, [pc, #612]	@ (802670c <_dtoa_r+0x374>)
 80264a6:	f7dc fa55 	bl	8002954 <__aeabi_dmul>
 80264aa:	4a99      	ldr	r2, [pc, #612]	@ (8026710 <_dtoa_r+0x378>)
 80264ac:	4b99      	ldr	r3, [pc, #612]	@ (8026714 <_dtoa_r+0x37c>)
 80264ae:	f7db fa51 	bl	8001954 <__aeabi_dadd>
 80264b2:	0004      	movs	r4, r0
 80264b4:	0038      	movs	r0, r7
 80264b6:	000d      	movs	r5, r1
 80264b8:	f7dd f99a 	bl	80037f0 <__aeabi_i2d>
 80264bc:	4a96      	ldr	r2, [pc, #600]	@ (8026718 <_dtoa_r+0x380>)
 80264be:	4b97      	ldr	r3, [pc, #604]	@ (802671c <_dtoa_r+0x384>)
 80264c0:	f7dc fa48 	bl	8002954 <__aeabi_dmul>
 80264c4:	0002      	movs	r2, r0
 80264c6:	000b      	movs	r3, r1
 80264c8:	0020      	movs	r0, r4
 80264ca:	0029      	movs	r1, r5
 80264cc:	f7db fa42 	bl	8001954 <__aeabi_dadd>
 80264d0:	0004      	movs	r4, r0
 80264d2:	000d      	movs	r5, r1
 80264d4:	f7dd f950 	bl	8003778 <__aeabi_d2iz>
 80264d8:	2200      	movs	r2, #0
 80264da:	9004      	str	r0, [sp, #16]
 80264dc:	2300      	movs	r3, #0
 80264de:	0020      	movs	r0, r4
 80264e0:	0029      	movs	r1, r5
 80264e2:	f7d9 ffeb 	bl	80004bc <__aeabi_dcmplt>
 80264e6:	2800      	cmp	r0, #0
 80264e8:	d00b      	beq.n	8026502 <_dtoa_r+0x16a>
 80264ea:	9804      	ldr	r0, [sp, #16]
 80264ec:	f7dd f980 	bl	80037f0 <__aeabi_i2d>
 80264f0:	002b      	movs	r3, r5
 80264f2:	0022      	movs	r2, r4
 80264f4:	f7d9 ffdc 	bl	80004b0 <__aeabi_dcmpeq>
 80264f8:	4243      	negs	r3, r0
 80264fa:	4158      	adcs	r0, r3
 80264fc:	9b04      	ldr	r3, [sp, #16]
 80264fe:	1a1b      	subs	r3, r3, r0
 8026500:	9304      	str	r3, [sp, #16]
 8026502:	2301      	movs	r3, #1
 8026504:	9315      	str	r3, [sp, #84]	@ 0x54
 8026506:	9b04      	ldr	r3, [sp, #16]
 8026508:	2b16      	cmp	r3, #22
 802650a:	d810      	bhi.n	802652e <_dtoa_r+0x196>
 802650c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802650e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026510:	9a04      	ldr	r2, [sp, #16]
 8026512:	4b83      	ldr	r3, [pc, #524]	@ (8026720 <_dtoa_r+0x388>)
 8026514:	00d2      	lsls	r2, r2, #3
 8026516:	189b      	adds	r3, r3, r2
 8026518:	681a      	ldr	r2, [r3, #0]
 802651a:	685b      	ldr	r3, [r3, #4]
 802651c:	f7d9 ffce 	bl	80004bc <__aeabi_dcmplt>
 8026520:	2800      	cmp	r0, #0
 8026522:	d047      	beq.n	80265b4 <_dtoa_r+0x21c>
 8026524:	9b04      	ldr	r3, [sp, #16]
 8026526:	3b01      	subs	r3, #1
 8026528:	9304      	str	r3, [sp, #16]
 802652a:	2300      	movs	r3, #0
 802652c:	9315      	str	r3, [sp, #84]	@ 0x54
 802652e:	2200      	movs	r2, #0
 8026530:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026532:	9206      	str	r2, [sp, #24]
 8026534:	1bdb      	subs	r3, r3, r7
 8026536:	1e5a      	subs	r2, r3, #1
 8026538:	d53e      	bpl.n	80265b8 <_dtoa_r+0x220>
 802653a:	2201      	movs	r2, #1
 802653c:	1ad3      	subs	r3, r2, r3
 802653e:	9306      	str	r3, [sp, #24]
 8026540:	2300      	movs	r3, #0
 8026542:	930d      	str	r3, [sp, #52]	@ 0x34
 8026544:	9b04      	ldr	r3, [sp, #16]
 8026546:	2b00      	cmp	r3, #0
 8026548:	db38      	blt.n	80265bc <_dtoa_r+0x224>
 802654a:	9a04      	ldr	r2, [sp, #16]
 802654c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802654e:	4694      	mov	ip, r2
 8026550:	4463      	add	r3, ip
 8026552:	930d      	str	r3, [sp, #52]	@ 0x34
 8026554:	2300      	movs	r3, #0
 8026556:	9214      	str	r2, [sp, #80]	@ 0x50
 8026558:	930f      	str	r3, [sp, #60]	@ 0x3c
 802655a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802655c:	2401      	movs	r4, #1
 802655e:	2b09      	cmp	r3, #9
 8026560:	d862      	bhi.n	8026628 <_dtoa_r+0x290>
 8026562:	2b05      	cmp	r3, #5
 8026564:	dd02      	ble.n	802656c <_dtoa_r+0x1d4>
 8026566:	2400      	movs	r4, #0
 8026568:	3b04      	subs	r3, #4
 802656a:	9322      	str	r3, [sp, #136]	@ 0x88
 802656c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802656e:	1e98      	subs	r0, r3, #2
 8026570:	2803      	cmp	r0, #3
 8026572:	d863      	bhi.n	802663c <_dtoa_r+0x2a4>
 8026574:	f7d9 fe02 	bl	800017c <__gnu_thumb1_case_uqi>
 8026578:	2b385654 	.word	0x2b385654
 802657c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802657e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026580:	18f6      	adds	r6, r6, r3
 8026582:	4b68      	ldr	r3, [pc, #416]	@ (8026724 <_dtoa_r+0x38c>)
 8026584:	18f2      	adds	r2, r6, r3
 8026586:	2a20      	cmp	r2, #32
 8026588:	dd0f      	ble.n	80265aa <_dtoa_r+0x212>
 802658a:	2340      	movs	r3, #64	@ 0x40
 802658c:	1a9b      	subs	r3, r3, r2
 802658e:	409f      	lsls	r7, r3
 8026590:	4b65      	ldr	r3, [pc, #404]	@ (8026728 <_dtoa_r+0x390>)
 8026592:	0038      	movs	r0, r7
 8026594:	18f3      	adds	r3, r6, r3
 8026596:	40dc      	lsrs	r4, r3
 8026598:	4320      	orrs	r0, r4
 802659a:	f7dd f957 	bl	800384c <__aeabi_ui2d>
 802659e:	2201      	movs	r2, #1
 80265a0:	4b62      	ldr	r3, [pc, #392]	@ (802672c <_dtoa_r+0x394>)
 80265a2:	1e77      	subs	r7, r6, #1
 80265a4:	18cb      	adds	r3, r1, r3
 80265a6:	9218      	str	r2, [sp, #96]	@ 0x60
 80265a8:	e776      	b.n	8026498 <_dtoa_r+0x100>
 80265aa:	2320      	movs	r3, #32
 80265ac:	0020      	movs	r0, r4
 80265ae:	1a9b      	subs	r3, r3, r2
 80265b0:	4098      	lsls	r0, r3
 80265b2:	e7f2      	b.n	802659a <_dtoa_r+0x202>
 80265b4:	9015      	str	r0, [sp, #84]	@ 0x54
 80265b6:	e7ba      	b.n	802652e <_dtoa_r+0x196>
 80265b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80265ba:	e7c3      	b.n	8026544 <_dtoa_r+0x1ac>
 80265bc:	9b06      	ldr	r3, [sp, #24]
 80265be:	9a04      	ldr	r2, [sp, #16]
 80265c0:	1a9b      	subs	r3, r3, r2
 80265c2:	9306      	str	r3, [sp, #24]
 80265c4:	4253      	negs	r3, r2
 80265c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80265c8:	2300      	movs	r3, #0
 80265ca:	9314      	str	r3, [sp, #80]	@ 0x50
 80265cc:	e7c5      	b.n	802655a <_dtoa_r+0x1c2>
 80265ce:	2301      	movs	r3, #1
 80265d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80265d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80265d4:	4694      	mov	ip, r2
 80265d6:	9b04      	ldr	r3, [sp, #16]
 80265d8:	4463      	add	r3, ip
 80265da:	930e      	str	r3, [sp, #56]	@ 0x38
 80265dc:	3301      	adds	r3, #1
 80265de:	9309      	str	r3, [sp, #36]	@ 0x24
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	dc08      	bgt.n	80265f6 <_dtoa_r+0x25e>
 80265e4:	2301      	movs	r3, #1
 80265e6:	e006      	b.n	80265f6 <_dtoa_r+0x25e>
 80265e8:	2301      	movs	r3, #1
 80265ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80265ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	dd28      	ble.n	8026644 <_dtoa_r+0x2ac>
 80265f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80265f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80265f6:	9a03      	ldr	r2, [sp, #12]
 80265f8:	2100      	movs	r1, #0
 80265fa:	69d0      	ldr	r0, [r2, #28]
 80265fc:	2204      	movs	r2, #4
 80265fe:	0015      	movs	r5, r2
 8026600:	3514      	adds	r5, #20
 8026602:	429d      	cmp	r5, r3
 8026604:	d923      	bls.n	802664e <_dtoa_r+0x2b6>
 8026606:	6041      	str	r1, [r0, #4]
 8026608:	9803      	ldr	r0, [sp, #12]
 802660a:	f001 f927 	bl	802785c <_Balloc>
 802660e:	9008      	str	r0, [sp, #32]
 8026610:	2800      	cmp	r0, #0
 8026612:	d11f      	bne.n	8026654 <_dtoa_r+0x2bc>
 8026614:	21b0      	movs	r1, #176	@ 0xb0
 8026616:	4b46      	ldr	r3, [pc, #280]	@ (8026730 <_dtoa_r+0x398>)
 8026618:	4831      	ldr	r0, [pc, #196]	@ (80266e0 <_dtoa_r+0x348>)
 802661a:	9a08      	ldr	r2, [sp, #32]
 802661c:	31ff      	adds	r1, #255	@ 0xff
 802661e:	e6d0      	b.n	80263c2 <_dtoa_r+0x2a>
 8026620:	2300      	movs	r3, #0
 8026622:	e7e2      	b.n	80265ea <_dtoa_r+0x252>
 8026624:	2300      	movs	r3, #0
 8026626:	e7d3      	b.n	80265d0 <_dtoa_r+0x238>
 8026628:	2300      	movs	r3, #0
 802662a:	9410      	str	r4, [sp, #64]	@ 0x40
 802662c:	9322      	str	r3, [sp, #136]	@ 0x88
 802662e:	3b01      	subs	r3, #1
 8026630:	2200      	movs	r2, #0
 8026632:	930e      	str	r3, [sp, #56]	@ 0x38
 8026634:	9309      	str	r3, [sp, #36]	@ 0x24
 8026636:	3313      	adds	r3, #19
 8026638:	9223      	str	r2, [sp, #140]	@ 0x8c
 802663a:	e7dc      	b.n	80265f6 <_dtoa_r+0x25e>
 802663c:	2301      	movs	r3, #1
 802663e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026640:	3b02      	subs	r3, #2
 8026642:	e7f5      	b.n	8026630 <_dtoa_r+0x298>
 8026644:	2301      	movs	r3, #1
 8026646:	001a      	movs	r2, r3
 8026648:	930e      	str	r3, [sp, #56]	@ 0x38
 802664a:	9309      	str	r3, [sp, #36]	@ 0x24
 802664c:	e7f4      	b.n	8026638 <_dtoa_r+0x2a0>
 802664e:	3101      	adds	r1, #1
 8026650:	0052      	lsls	r2, r2, #1
 8026652:	e7d4      	b.n	80265fe <_dtoa_r+0x266>
 8026654:	9b03      	ldr	r3, [sp, #12]
 8026656:	9a08      	ldr	r2, [sp, #32]
 8026658:	69db      	ldr	r3, [r3, #28]
 802665a:	601a      	str	r2, [r3, #0]
 802665c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802665e:	2b0e      	cmp	r3, #14
 8026660:	d900      	bls.n	8026664 <_dtoa_r+0x2cc>
 8026662:	e0d6      	b.n	8026812 <_dtoa_r+0x47a>
 8026664:	2c00      	cmp	r4, #0
 8026666:	d100      	bne.n	802666a <_dtoa_r+0x2d2>
 8026668:	e0d3      	b.n	8026812 <_dtoa_r+0x47a>
 802666a:	9b04      	ldr	r3, [sp, #16]
 802666c:	2b00      	cmp	r3, #0
 802666e:	dd63      	ble.n	8026738 <_dtoa_r+0x3a0>
 8026670:	210f      	movs	r1, #15
 8026672:	9a04      	ldr	r2, [sp, #16]
 8026674:	4b2a      	ldr	r3, [pc, #168]	@ (8026720 <_dtoa_r+0x388>)
 8026676:	400a      	ands	r2, r1
 8026678:	00d2      	lsls	r2, r2, #3
 802667a:	189b      	adds	r3, r3, r2
 802667c:	681e      	ldr	r6, [r3, #0]
 802667e:	685f      	ldr	r7, [r3, #4]
 8026680:	9b04      	ldr	r3, [sp, #16]
 8026682:	2402      	movs	r4, #2
 8026684:	111d      	asrs	r5, r3, #4
 8026686:	05db      	lsls	r3, r3, #23
 8026688:	d50a      	bpl.n	80266a0 <_dtoa_r+0x308>
 802668a:	4b2a      	ldr	r3, [pc, #168]	@ (8026734 <_dtoa_r+0x39c>)
 802668c:	400d      	ands	r5, r1
 802668e:	6a1a      	ldr	r2, [r3, #32]
 8026690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026692:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026694:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026696:	f7db fd23 	bl	80020e0 <__aeabi_ddiv>
 802669a:	900a      	str	r0, [sp, #40]	@ 0x28
 802669c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802669e:	3401      	adds	r4, #1
 80266a0:	4b24      	ldr	r3, [pc, #144]	@ (8026734 <_dtoa_r+0x39c>)
 80266a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80266a4:	2d00      	cmp	r5, #0
 80266a6:	d108      	bne.n	80266ba <_dtoa_r+0x322>
 80266a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80266aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80266ac:	0032      	movs	r2, r6
 80266ae:	003b      	movs	r3, r7
 80266b0:	f7db fd16 	bl	80020e0 <__aeabi_ddiv>
 80266b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80266b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80266b8:	e059      	b.n	802676e <_dtoa_r+0x3d6>
 80266ba:	2301      	movs	r3, #1
 80266bc:	421d      	tst	r5, r3
 80266be:	d009      	beq.n	80266d4 <_dtoa_r+0x33c>
 80266c0:	18e4      	adds	r4, r4, r3
 80266c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266c4:	0030      	movs	r0, r6
 80266c6:	681a      	ldr	r2, [r3, #0]
 80266c8:	685b      	ldr	r3, [r3, #4]
 80266ca:	0039      	movs	r1, r7
 80266cc:	f7dc f942 	bl	8002954 <__aeabi_dmul>
 80266d0:	0006      	movs	r6, r0
 80266d2:	000f      	movs	r7, r1
 80266d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266d6:	106d      	asrs	r5, r5, #1
 80266d8:	3308      	adds	r3, #8
 80266da:	e7e2      	b.n	80266a2 <_dtoa_r+0x30a>
 80266dc:	0802e773 	.word	0x0802e773
 80266e0:	0802e78a 	.word	0x0802e78a
 80266e4:	7ff00000 	.word	0x7ff00000
 80266e8:	0000270f 	.word	0x0000270f
 80266ec:	0802e76f 	.word	0x0802e76f
 80266f0:	0802e772 	.word	0x0802e772
 80266f4:	0802e73b 	.word	0x0802e73b
 80266f8:	0802e73a 	.word	0x0802e73a
 80266fc:	3ff00000 	.word	0x3ff00000
 8026700:	fffffc01 	.word	0xfffffc01
 8026704:	3ff80000 	.word	0x3ff80000
 8026708:	636f4361 	.word	0x636f4361
 802670c:	3fd287a7 	.word	0x3fd287a7
 8026710:	8b60c8b3 	.word	0x8b60c8b3
 8026714:	3fc68a28 	.word	0x3fc68a28
 8026718:	509f79fb 	.word	0x509f79fb
 802671c:	3fd34413 	.word	0x3fd34413
 8026720:	0802ea88 	.word	0x0802ea88
 8026724:	00000432 	.word	0x00000432
 8026728:	00000412 	.word	0x00000412
 802672c:	fe100000 	.word	0xfe100000
 8026730:	0802e7e2 	.word	0x0802e7e2
 8026734:	0802ea60 	.word	0x0802ea60
 8026738:	9b04      	ldr	r3, [sp, #16]
 802673a:	2402      	movs	r4, #2
 802673c:	2b00      	cmp	r3, #0
 802673e:	d016      	beq.n	802676e <_dtoa_r+0x3d6>
 8026740:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026742:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026744:	220f      	movs	r2, #15
 8026746:	425d      	negs	r5, r3
 8026748:	402a      	ands	r2, r5
 802674a:	4bd5      	ldr	r3, [pc, #852]	@ (8026aa0 <_dtoa_r+0x708>)
 802674c:	00d2      	lsls	r2, r2, #3
 802674e:	189b      	adds	r3, r3, r2
 8026750:	681a      	ldr	r2, [r3, #0]
 8026752:	685b      	ldr	r3, [r3, #4]
 8026754:	f7dc f8fe 	bl	8002954 <__aeabi_dmul>
 8026758:	2701      	movs	r7, #1
 802675a:	2300      	movs	r3, #0
 802675c:	900a      	str	r0, [sp, #40]	@ 0x28
 802675e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026760:	4ed0      	ldr	r6, [pc, #832]	@ (8026aa4 <_dtoa_r+0x70c>)
 8026762:	112d      	asrs	r5, r5, #4
 8026764:	2d00      	cmp	r5, #0
 8026766:	d000      	beq.n	802676a <_dtoa_r+0x3d2>
 8026768:	e095      	b.n	8026896 <_dtoa_r+0x4fe>
 802676a:	2b00      	cmp	r3, #0
 802676c:	d1a2      	bne.n	80266b4 <_dtoa_r+0x31c>
 802676e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026770:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026772:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026774:	2b00      	cmp	r3, #0
 8026776:	d100      	bne.n	802677a <_dtoa_r+0x3e2>
 8026778:	e098      	b.n	80268ac <_dtoa_r+0x514>
 802677a:	2200      	movs	r2, #0
 802677c:	0030      	movs	r0, r6
 802677e:	0039      	movs	r1, r7
 8026780:	4bc9      	ldr	r3, [pc, #804]	@ (8026aa8 <_dtoa_r+0x710>)
 8026782:	f7d9 fe9b 	bl	80004bc <__aeabi_dcmplt>
 8026786:	2800      	cmp	r0, #0
 8026788:	d100      	bne.n	802678c <_dtoa_r+0x3f4>
 802678a:	e08f      	b.n	80268ac <_dtoa_r+0x514>
 802678c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802678e:	2b00      	cmp	r3, #0
 8026790:	d100      	bne.n	8026794 <_dtoa_r+0x3fc>
 8026792:	e08b      	b.n	80268ac <_dtoa_r+0x514>
 8026794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026796:	2b00      	cmp	r3, #0
 8026798:	dd37      	ble.n	802680a <_dtoa_r+0x472>
 802679a:	9b04      	ldr	r3, [sp, #16]
 802679c:	2200      	movs	r2, #0
 802679e:	3b01      	subs	r3, #1
 80267a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80267a2:	0030      	movs	r0, r6
 80267a4:	4bc1      	ldr	r3, [pc, #772]	@ (8026aac <_dtoa_r+0x714>)
 80267a6:	0039      	movs	r1, r7
 80267a8:	f7dc f8d4 	bl	8002954 <__aeabi_dmul>
 80267ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80267ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80267b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80267b2:	3401      	adds	r4, #1
 80267b4:	0020      	movs	r0, r4
 80267b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80267b8:	f7dd f81a 	bl	80037f0 <__aeabi_i2d>
 80267bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80267be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80267c0:	f7dc f8c8 	bl	8002954 <__aeabi_dmul>
 80267c4:	4bba      	ldr	r3, [pc, #744]	@ (8026ab0 <_dtoa_r+0x718>)
 80267c6:	2200      	movs	r2, #0
 80267c8:	f7db f8c4 	bl	8001954 <__aeabi_dadd>
 80267cc:	4bb9      	ldr	r3, [pc, #740]	@ (8026ab4 <_dtoa_r+0x71c>)
 80267ce:	0006      	movs	r6, r0
 80267d0:	18cf      	adds	r7, r1, r3
 80267d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	d16d      	bne.n	80268b4 <_dtoa_r+0x51c>
 80267d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80267da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80267dc:	2200      	movs	r2, #0
 80267de:	4bb6      	ldr	r3, [pc, #728]	@ (8026ab8 <_dtoa_r+0x720>)
 80267e0:	f7dc fb9e 	bl	8002f20 <__aeabi_dsub>
 80267e4:	0032      	movs	r2, r6
 80267e6:	003b      	movs	r3, r7
 80267e8:	0004      	movs	r4, r0
 80267ea:	000d      	movs	r5, r1
 80267ec:	f7d9 fe7a 	bl	80004e4 <__aeabi_dcmpgt>
 80267f0:	2800      	cmp	r0, #0
 80267f2:	d000      	beq.n	80267f6 <_dtoa_r+0x45e>
 80267f4:	e2b6      	b.n	8026d64 <_dtoa_r+0x9cc>
 80267f6:	2180      	movs	r1, #128	@ 0x80
 80267f8:	0609      	lsls	r1, r1, #24
 80267fa:	187b      	adds	r3, r7, r1
 80267fc:	0032      	movs	r2, r6
 80267fe:	0020      	movs	r0, r4
 8026800:	0029      	movs	r1, r5
 8026802:	f7d9 fe5b 	bl	80004bc <__aeabi_dcmplt>
 8026806:	2800      	cmp	r0, #0
 8026808:	d128      	bne.n	802685c <_dtoa_r+0x4c4>
 802680a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802680c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802680e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026810:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026812:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026814:	2b00      	cmp	r3, #0
 8026816:	da00      	bge.n	802681a <_dtoa_r+0x482>
 8026818:	e174      	b.n	8026b04 <_dtoa_r+0x76c>
 802681a:	9a04      	ldr	r2, [sp, #16]
 802681c:	2a0e      	cmp	r2, #14
 802681e:	dd00      	ble.n	8026822 <_dtoa_r+0x48a>
 8026820:	e170      	b.n	8026b04 <_dtoa_r+0x76c>
 8026822:	4b9f      	ldr	r3, [pc, #636]	@ (8026aa0 <_dtoa_r+0x708>)
 8026824:	00d2      	lsls	r2, r2, #3
 8026826:	189b      	adds	r3, r3, r2
 8026828:	685c      	ldr	r4, [r3, #4]
 802682a:	681b      	ldr	r3, [r3, #0]
 802682c:	9306      	str	r3, [sp, #24]
 802682e:	9407      	str	r4, [sp, #28]
 8026830:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026832:	2b00      	cmp	r3, #0
 8026834:	db00      	blt.n	8026838 <_dtoa_r+0x4a0>
 8026836:	e0e7      	b.n	8026a08 <_dtoa_r+0x670>
 8026838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802683a:	2b00      	cmp	r3, #0
 802683c:	dd00      	ble.n	8026840 <_dtoa_r+0x4a8>
 802683e:	e0e3      	b.n	8026a08 <_dtoa_r+0x670>
 8026840:	d10c      	bne.n	802685c <_dtoa_r+0x4c4>
 8026842:	9806      	ldr	r0, [sp, #24]
 8026844:	9907      	ldr	r1, [sp, #28]
 8026846:	2200      	movs	r2, #0
 8026848:	4b9b      	ldr	r3, [pc, #620]	@ (8026ab8 <_dtoa_r+0x720>)
 802684a:	f7dc f883 	bl	8002954 <__aeabi_dmul>
 802684e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026852:	f7d9 fe51 	bl	80004f8 <__aeabi_dcmpge>
 8026856:	2800      	cmp	r0, #0
 8026858:	d100      	bne.n	802685c <_dtoa_r+0x4c4>
 802685a:	e286      	b.n	8026d6a <_dtoa_r+0x9d2>
 802685c:	2600      	movs	r6, #0
 802685e:	0037      	movs	r7, r6
 8026860:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026862:	9c08      	ldr	r4, [sp, #32]
 8026864:	43db      	mvns	r3, r3
 8026866:	930c      	str	r3, [sp, #48]	@ 0x30
 8026868:	9704      	str	r7, [sp, #16]
 802686a:	2700      	movs	r7, #0
 802686c:	0031      	movs	r1, r6
 802686e:	9803      	ldr	r0, [sp, #12]
 8026870:	f001 f838 	bl	80278e4 <_Bfree>
 8026874:	9b04      	ldr	r3, [sp, #16]
 8026876:	2b00      	cmp	r3, #0
 8026878:	d100      	bne.n	802687c <_dtoa_r+0x4e4>
 802687a:	e0bb      	b.n	80269f4 <_dtoa_r+0x65c>
 802687c:	2f00      	cmp	r7, #0
 802687e:	d005      	beq.n	802688c <_dtoa_r+0x4f4>
 8026880:	429f      	cmp	r7, r3
 8026882:	d003      	beq.n	802688c <_dtoa_r+0x4f4>
 8026884:	0039      	movs	r1, r7
 8026886:	9803      	ldr	r0, [sp, #12]
 8026888:	f001 f82c 	bl	80278e4 <_Bfree>
 802688c:	9904      	ldr	r1, [sp, #16]
 802688e:	9803      	ldr	r0, [sp, #12]
 8026890:	f001 f828 	bl	80278e4 <_Bfree>
 8026894:	e0ae      	b.n	80269f4 <_dtoa_r+0x65c>
 8026896:	423d      	tst	r5, r7
 8026898:	d005      	beq.n	80268a6 <_dtoa_r+0x50e>
 802689a:	6832      	ldr	r2, [r6, #0]
 802689c:	6873      	ldr	r3, [r6, #4]
 802689e:	f7dc f859 	bl	8002954 <__aeabi_dmul>
 80268a2:	003b      	movs	r3, r7
 80268a4:	3401      	adds	r4, #1
 80268a6:	106d      	asrs	r5, r5, #1
 80268a8:	3608      	adds	r6, #8
 80268aa:	e75b      	b.n	8026764 <_dtoa_r+0x3cc>
 80268ac:	9b04      	ldr	r3, [sp, #16]
 80268ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80268b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80268b2:	e77f      	b.n	80267b4 <_dtoa_r+0x41c>
 80268b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80268b6:	4b7a      	ldr	r3, [pc, #488]	@ (8026aa0 <_dtoa_r+0x708>)
 80268b8:	3a01      	subs	r2, #1
 80268ba:	00d2      	lsls	r2, r2, #3
 80268bc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80268be:	189b      	adds	r3, r3, r2
 80268c0:	681a      	ldr	r2, [r3, #0]
 80268c2:	685b      	ldr	r3, [r3, #4]
 80268c4:	2900      	cmp	r1, #0
 80268c6:	d04c      	beq.n	8026962 <_dtoa_r+0x5ca>
 80268c8:	2000      	movs	r0, #0
 80268ca:	497c      	ldr	r1, [pc, #496]	@ (8026abc <_dtoa_r+0x724>)
 80268cc:	f7db fc08 	bl	80020e0 <__aeabi_ddiv>
 80268d0:	0032      	movs	r2, r6
 80268d2:	003b      	movs	r3, r7
 80268d4:	f7dc fb24 	bl	8002f20 <__aeabi_dsub>
 80268d8:	9a08      	ldr	r2, [sp, #32]
 80268da:	0006      	movs	r6, r0
 80268dc:	4694      	mov	ip, r2
 80268de:	000f      	movs	r7, r1
 80268e0:	9b08      	ldr	r3, [sp, #32]
 80268e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80268e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80268e6:	4463      	add	r3, ip
 80268e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80268ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80268ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80268ee:	f7dc ff43 	bl	8003778 <__aeabi_d2iz>
 80268f2:	0005      	movs	r5, r0
 80268f4:	f7dc ff7c 	bl	80037f0 <__aeabi_i2d>
 80268f8:	0002      	movs	r2, r0
 80268fa:	000b      	movs	r3, r1
 80268fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80268fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026900:	f7dc fb0e 	bl	8002f20 <__aeabi_dsub>
 8026904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026906:	3530      	adds	r5, #48	@ 0x30
 8026908:	1c5c      	adds	r4, r3, #1
 802690a:	701d      	strb	r5, [r3, #0]
 802690c:	0032      	movs	r2, r6
 802690e:	003b      	movs	r3, r7
 8026910:	900a      	str	r0, [sp, #40]	@ 0x28
 8026912:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026914:	f7d9 fdd2 	bl	80004bc <__aeabi_dcmplt>
 8026918:	2800      	cmp	r0, #0
 802691a:	d16b      	bne.n	80269f4 <_dtoa_r+0x65c>
 802691c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802691e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026920:	2000      	movs	r0, #0
 8026922:	4961      	ldr	r1, [pc, #388]	@ (8026aa8 <_dtoa_r+0x710>)
 8026924:	f7dc fafc 	bl	8002f20 <__aeabi_dsub>
 8026928:	0032      	movs	r2, r6
 802692a:	003b      	movs	r3, r7
 802692c:	f7d9 fdc6 	bl	80004bc <__aeabi_dcmplt>
 8026930:	2800      	cmp	r0, #0
 8026932:	d000      	beq.n	8026936 <_dtoa_r+0x59e>
 8026934:	e0c6      	b.n	8026ac4 <_dtoa_r+0x72c>
 8026936:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026938:	42a3      	cmp	r3, r4
 802693a:	d100      	bne.n	802693e <_dtoa_r+0x5a6>
 802693c:	e765      	b.n	802680a <_dtoa_r+0x472>
 802693e:	2200      	movs	r2, #0
 8026940:	0030      	movs	r0, r6
 8026942:	0039      	movs	r1, r7
 8026944:	4b59      	ldr	r3, [pc, #356]	@ (8026aac <_dtoa_r+0x714>)
 8026946:	f7dc f805 	bl	8002954 <__aeabi_dmul>
 802694a:	2200      	movs	r2, #0
 802694c:	0006      	movs	r6, r0
 802694e:	000f      	movs	r7, r1
 8026950:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026952:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026954:	4b55      	ldr	r3, [pc, #340]	@ (8026aac <_dtoa_r+0x714>)
 8026956:	f7db fffd 	bl	8002954 <__aeabi_dmul>
 802695a:	9416      	str	r4, [sp, #88]	@ 0x58
 802695c:	900a      	str	r0, [sp, #40]	@ 0x28
 802695e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026960:	e7c3      	b.n	80268ea <_dtoa_r+0x552>
 8026962:	0030      	movs	r0, r6
 8026964:	0039      	movs	r1, r7
 8026966:	f7db fff5 	bl	8002954 <__aeabi_dmul>
 802696a:	9d08      	ldr	r5, [sp, #32]
 802696c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802696e:	002b      	movs	r3, r5
 8026970:	4694      	mov	ip, r2
 8026972:	9016      	str	r0, [sp, #88]	@ 0x58
 8026974:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026976:	4463      	add	r3, ip
 8026978:	9319      	str	r3, [sp, #100]	@ 0x64
 802697a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802697c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802697e:	f7dc fefb 	bl	8003778 <__aeabi_d2iz>
 8026982:	0004      	movs	r4, r0
 8026984:	f7dc ff34 	bl	80037f0 <__aeabi_i2d>
 8026988:	000b      	movs	r3, r1
 802698a:	0002      	movs	r2, r0
 802698c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802698e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026990:	f7dc fac6 	bl	8002f20 <__aeabi_dsub>
 8026994:	3430      	adds	r4, #48	@ 0x30
 8026996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026998:	702c      	strb	r4, [r5, #0]
 802699a:	3501      	adds	r5, #1
 802699c:	0006      	movs	r6, r0
 802699e:	000f      	movs	r7, r1
 80269a0:	42ab      	cmp	r3, r5
 80269a2:	d12a      	bne.n	80269fa <_dtoa_r+0x662>
 80269a4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80269a6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80269a8:	9b08      	ldr	r3, [sp, #32]
 80269aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80269ac:	469c      	mov	ip, r3
 80269ae:	2200      	movs	r2, #0
 80269b0:	4b42      	ldr	r3, [pc, #264]	@ (8026abc <_dtoa_r+0x724>)
 80269b2:	4464      	add	r4, ip
 80269b4:	f7da ffce 	bl	8001954 <__aeabi_dadd>
 80269b8:	0002      	movs	r2, r0
 80269ba:	000b      	movs	r3, r1
 80269bc:	0030      	movs	r0, r6
 80269be:	0039      	movs	r1, r7
 80269c0:	f7d9 fd90 	bl	80004e4 <__aeabi_dcmpgt>
 80269c4:	2800      	cmp	r0, #0
 80269c6:	d000      	beq.n	80269ca <_dtoa_r+0x632>
 80269c8:	e07c      	b.n	8026ac4 <_dtoa_r+0x72c>
 80269ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80269cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80269ce:	2000      	movs	r0, #0
 80269d0:	493a      	ldr	r1, [pc, #232]	@ (8026abc <_dtoa_r+0x724>)
 80269d2:	f7dc faa5 	bl	8002f20 <__aeabi_dsub>
 80269d6:	0002      	movs	r2, r0
 80269d8:	000b      	movs	r3, r1
 80269da:	0030      	movs	r0, r6
 80269dc:	0039      	movs	r1, r7
 80269de:	f7d9 fd6d 	bl	80004bc <__aeabi_dcmplt>
 80269e2:	2800      	cmp	r0, #0
 80269e4:	d100      	bne.n	80269e8 <_dtoa_r+0x650>
 80269e6:	e710      	b.n	802680a <_dtoa_r+0x472>
 80269e8:	0023      	movs	r3, r4
 80269ea:	3c01      	subs	r4, #1
 80269ec:	7822      	ldrb	r2, [r4, #0]
 80269ee:	2a30      	cmp	r2, #48	@ 0x30
 80269f0:	d0fa      	beq.n	80269e8 <_dtoa_r+0x650>
 80269f2:	001c      	movs	r4, r3
 80269f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80269f6:	9304      	str	r3, [sp, #16]
 80269f8:	e042      	b.n	8026a80 <_dtoa_r+0x6e8>
 80269fa:	2200      	movs	r2, #0
 80269fc:	4b2b      	ldr	r3, [pc, #172]	@ (8026aac <_dtoa_r+0x714>)
 80269fe:	f7db ffa9 	bl	8002954 <__aeabi_dmul>
 8026a02:	900a      	str	r0, [sp, #40]	@ 0x28
 8026a04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026a06:	e7b8      	b.n	802697a <_dtoa_r+0x5e2>
 8026a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a0a:	9d08      	ldr	r5, [sp, #32]
 8026a0c:	3b01      	subs	r3, #1
 8026a0e:	195b      	adds	r3, r3, r5
 8026a10:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026a12:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026a14:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a16:	9a06      	ldr	r2, [sp, #24]
 8026a18:	9b07      	ldr	r3, [sp, #28]
 8026a1a:	0030      	movs	r0, r6
 8026a1c:	0039      	movs	r1, r7
 8026a1e:	f7db fb5f 	bl	80020e0 <__aeabi_ddiv>
 8026a22:	f7dc fea9 	bl	8003778 <__aeabi_d2iz>
 8026a26:	9009      	str	r0, [sp, #36]	@ 0x24
 8026a28:	f7dc fee2 	bl	80037f0 <__aeabi_i2d>
 8026a2c:	9a06      	ldr	r2, [sp, #24]
 8026a2e:	9b07      	ldr	r3, [sp, #28]
 8026a30:	f7db ff90 	bl	8002954 <__aeabi_dmul>
 8026a34:	0002      	movs	r2, r0
 8026a36:	000b      	movs	r3, r1
 8026a38:	0030      	movs	r0, r6
 8026a3a:	0039      	movs	r1, r7
 8026a3c:	f7dc fa70 	bl	8002f20 <__aeabi_dsub>
 8026a40:	002b      	movs	r3, r5
 8026a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026a44:	3501      	adds	r5, #1
 8026a46:	3230      	adds	r2, #48	@ 0x30
 8026a48:	701a      	strb	r2, [r3, #0]
 8026a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026a4c:	002c      	movs	r4, r5
 8026a4e:	429a      	cmp	r2, r3
 8026a50:	d14b      	bne.n	8026aea <_dtoa_r+0x752>
 8026a52:	0002      	movs	r2, r0
 8026a54:	000b      	movs	r3, r1
 8026a56:	f7da ff7d 	bl	8001954 <__aeabi_dadd>
 8026a5a:	9a06      	ldr	r2, [sp, #24]
 8026a5c:	9b07      	ldr	r3, [sp, #28]
 8026a5e:	0006      	movs	r6, r0
 8026a60:	000f      	movs	r7, r1
 8026a62:	f7d9 fd3f 	bl	80004e4 <__aeabi_dcmpgt>
 8026a66:	2800      	cmp	r0, #0
 8026a68:	d12a      	bne.n	8026ac0 <_dtoa_r+0x728>
 8026a6a:	9a06      	ldr	r2, [sp, #24]
 8026a6c:	9b07      	ldr	r3, [sp, #28]
 8026a6e:	0030      	movs	r0, r6
 8026a70:	0039      	movs	r1, r7
 8026a72:	f7d9 fd1d 	bl	80004b0 <__aeabi_dcmpeq>
 8026a76:	2800      	cmp	r0, #0
 8026a78:	d002      	beq.n	8026a80 <_dtoa_r+0x6e8>
 8026a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a7c:	07dd      	lsls	r5, r3, #31
 8026a7e:	d41f      	bmi.n	8026ac0 <_dtoa_r+0x728>
 8026a80:	9905      	ldr	r1, [sp, #20]
 8026a82:	9803      	ldr	r0, [sp, #12]
 8026a84:	f000 ff2e 	bl	80278e4 <_Bfree>
 8026a88:	2300      	movs	r3, #0
 8026a8a:	7023      	strb	r3, [r4, #0]
 8026a8c:	9b04      	ldr	r3, [sp, #16]
 8026a8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026a90:	3301      	adds	r3, #1
 8026a92:	6013      	str	r3, [r2, #0]
 8026a94:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026a96:	2b00      	cmp	r3, #0
 8026a98:	d100      	bne.n	8026a9c <_dtoa_r+0x704>
 8026a9a:	e4c7      	b.n	802642c <_dtoa_r+0x94>
 8026a9c:	601c      	str	r4, [r3, #0]
 8026a9e:	e4c5      	b.n	802642c <_dtoa_r+0x94>
 8026aa0:	0802ea88 	.word	0x0802ea88
 8026aa4:	0802ea60 	.word	0x0802ea60
 8026aa8:	3ff00000 	.word	0x3ff00000
 8026aac:	40240000 	.word	0x40240000
 8026ab0:	401c0000 	.word	0x401c0000
 8026ab4:	fcc00000 	.word	0xfcc00000
 8026ab8:	40140000 	.word	0x40140000
 8026abc:	3fe00000 	.word	0x3fe00000
 8026ac0:	9b04      	ldr	r3, [sp, #16]
 8026ac2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026ac4:	0023      	movs	r3, r4
 8026ac6:	001c      	movs	r4, r3
 8026ac8:	3b01      	subs	r3, #1
 8026aca:	781a      	ldrb	r2, [r3, #0]
 8026acc:	2a39      	cmp	r2, #57	@ 0x39
 8026ace:	d108      	bne.n	8026ae2 <_dtoa_r+0x74a>
 8026ad0:	9a08      	ldr	r2, [sp, #32]
 8026ad2:	429a      	cmp	r2, r3
 8026ad4:	d1f7      	bne.n	8026ac6 <_dtoa_r+0x72e>
 8026ad6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026ad8:	9908      	ldr	r1, [sp, #32]
 8026ada:	3201      	adds	r2, #1
 8026adc:	920c      	str	r2, [sp, #48]	@ 0x30
 8026ade:	2230      	movs	r2, #48	@ 0x30
 8026ae0:	700a      	strb	r2, [r1, #0]
 8026ae2:	781a      	ldrb	r2, [r3, #0]
 8026ae4:	3201      	adds	r2, #1
 8026ae6:	701a      	strb	r2, [r3, #0]
 8026ae8:	e784      	b.n	80269f4 <_dtoa_r+0x65c>
 8026aea:	2200      	movs	r2, #0
 8026aec:	4bc6      	ldr	r3, [pc, #792]	@ (8026e08 <_dtoa_r+0xa70>)
 8026aee:	f7db ff31 	bl	8002954 <__aeabi_dmul>
 8026af2:	2200      	movs	r2, #0
 8026af4:	2300      	movs	r3, #0
 8026af6:	0006      	movs	r6, r0
 8026af8:	000f      	movs	r7, r1
 8026afa:	f7d9 fcd9 	bl	80004b0 <__aeabi_dcmpeq>
 8026afe:	2800      	cmp	r0, #0
 8026b00:	d089      	beq.n	8026a16 <_dtoa_r+0x67e>
 8026b02:	e7bd      	b.n	8026a80 <_dtoa_r+0x6e8>
 8026b04:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026b06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026b08:	9c06      	ldr	r4, [sp, #24]
 8026b0a:	2f00      	cmp	r7, #0
 8026b0c:	d014      	beq.n	8026b38 <_dtoa_r+0x7a0>
 8026b0e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026b10:	2a01      	cmp	r2, #1
 8026b12:	dd00      	ble.n	8026b16 <_dtoa_r+0x77e>
 8026b14:	e0e4      	b.n	8026ce0 <_dtoa_r+0x948>
 8026b16:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026b18:	2a00      	cmp	r2, #0
 8026b1a:	d100      	bne.n	8026b1e <_dtoa_r+0x786>
 8026b1c:	e0da      	b.n	8026cd4 <_dtoa_r+0x93c>
 8026b1e:	4abb      	ldr	r2, [pc, #748]	@ (8026e0c <_dtoa_r+0xa74>)
 8026b20:	189b      	adds	r3, r3, r2
 8026b22:	9a06      	ldr	r2, [sp, #24]
 8026b24:	2101      	movs	r1, #1
 8026b26:	18d2      	adds	r2, r2, r3
 8026b28:	9206      	str	r2, [sp, #24]
 8026b2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026b2c:	9803      	ldr	r0, [sp, #12]
 8026b2e:	18d3      	adds	r3, r2, r3
 8026b30:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b32:	f000 ffdb 	bl	8027aec <__i2b>
 8026b36:	0007      	movs	r7, r0
 8026b38:	2c00      	cmp	r4, #0
 8026b3a:	d00e      	beq.n	8026b5a <_dtoa_r+0x7c2>
 8026b3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026b3e:	2b00      	cmp	r3, #0
 8026b40:	dd0b      	ble.n	8026b5a <_dtoa_r+0x7c2>
 8026b42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026b44:	0023      	movs	r3, r4
 8026b46:	4294      	cmp	r4, r2
 8026b48:	dd00      	ble.n	8026b4c <_dtoa_r+0x7b4>
 8026b4a:	0013      	movs	r3, r2
 8026b4c:	9a06      	ldr	r2, [sp, #24]
 8026b4e:	1ae4      	subs	r4, r4, r3
 8026b50:	1ad2      	subs	r2, r2, r3
 8026b52:	9206      	str	r2, [sp, #24]
 8026b54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026b56:	1ad3      	subs	r3, r2, r3
 8026b58:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026b5c:	2b00      	cmp	r3, #0
 8026b5e:	d021      	beq.n	8026ba4 <_dtoa_r+0x80c>
 8026b60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026b62:	2b00      	cmp	r3, #0
 8026b64:	d100      	bne.n	8026b68 <_dtoa_r+0x7d0>
 8026b66:	e0d3      	b.n	8026d10 <_dtoa_r+0x978>
 8026b68:	9e05      	ldr	r6, [sp, #20]
 8026b6a:	2d00      	cmp	r5, #0
 8026b6c:	d014      	beq.n	8026b98 <_dtoa_r+0x800>
 8026b6e:	0039      	movs	r1, r7
 8026b70:	002a      	movs	r2, r5
 8026b72:	9803      	ldr	r0, [sp, #12]
 8026b74:	f001 f87c 	bl	8027c70 <__pow5mult>
 8026b78:	9a05      	ldr	r2, [sp, #20]
 8026b7a:	0001      	movs	r1, r0
 8026b7c:	0007      	movs	r7, r0
 8026b7e:	9803      	ldr	r0, [sp, #12]
 8026b80:	f000 ffcc 	bl	8027b1c <__multiply>
 8026b84:	0006      	movs	r6, r0
 8026b86:	9905      	ldr	r1, [sp, #20]
 8026b88:	9803      	ldr	r0, [sp, #12]
 8026b8a:	f000 feab 	bl	80278e4 <_Bfree>
 8026b8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026b90:	9605      	str	r6, [sp, #20]
 8026b92:	1b5b      	subs	r3, r3, r5
 8026b94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026b96:	d005      	beq.n	8026ba4 <_dtoa_r+0x80c>
 8026b98:	0031      	movs	r1, r6
 8026b9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026b9c:	9803      	ldr	r0, [sp, #12]
 8026b9e:	f001 f867 	bl	8027c70 <__pow5mult>
 8026ba2:	9005      	str	r0, [sp, #20]
 8026ba4:	2101      	movs	r1, #1
 8026ba6:	9803      	ldr	r0, [sp, #12]
 8026ba8:	f000 ffa0 	bl	8027aec <__i2b>
 8026bac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026bae:	0006      	movs	r6, r0
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d100      	bne.n	8026bb6 <_dtoa_r+0x81e>
 8026bb4:	e1bc      	b.n	8026f30 <_dtoa_r+0xb98>
 8026bb6:	001a      	movs	r2, r3
 8026bb8:	0001      	movs	r1, r0
 8026bba:	9803      	ldr	r0, [sp, #12]
 8026bbc:	f001 f858 	bl	8027c70 <__pow5mult>
 8026bc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026bc2:	0006      	movs	r6, r0
 8026bc4:	2500      	movs	r5, #0
 8026bc6:	2b01      	cmp	r3, #1
 8026bc8:	dc16      	bgt.n	8026bf8 <_dtoa_r+0x860>
 8026bca:	2500      	movs	r5, #0
 8026bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026bce:	42ab      	cmp	r3, r5
 8026bd0:	d10e      	bne.n	8026bf0 <_dtoa_r+0x858>
 8026bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026bd4:	031b      	lsls	r3, r3, #12
 8026bd6:	42ab      	cmp	r3, r5
 8026bd8:	d10a      	bne.n	8026bf0 <_dtoa_r+0x858>
 8026bda:	4b8d      	ldr	r3, [pc, #564]	@ (8026e10 <_dtoa_r+0xa78>)
 8026bdc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026bde:	4213      	tst	r3, r2
 8026be0:	d006      	beq.n	8026bf0 <_dtoa_r+0x858>
 8026be2:	9b06      	ldr	r3, [sp, #24]
 8026be4:	3501      	adds	r5, #1
 8026be6:	3301      	adds	r3, #1
 8026be8:	9306      	str	r3, [sp, #24]
 8026bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026bec:	3301      	adds	r3, #1
 8026bee:	930d      	str	r3, [sp, #52]	@ 0x34
 8026bf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026bf2:	2001      	movs	r0, #1
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	d008      	beq.n	8026c0a <_dtoa_r+0x872>
 8026bf8:	6933      	ldr	r3, [r6, #16]
 8026bfa:	3303      	adds	r3, #3
 8026bfc:	009b      	lsls	r3, r3, #2
 8026bfe:	18f3      	adds	r3, r6, r3
 8026c00:	6858      	ldr	r0, [r3, #4]
 8026c02:	f000 ff23 	bl	8027a4c <__hi0bits>
 8026c06:	2320      	movs	r3, #32
 8026c08:	1a18      	subs	r0, r3, r0
 8026c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026c0c:	1818      	adds	r0, r3, r0
 8026c0e:	0002      	movs	r2, r0
 8026c10:	231f      	movs	r3, #31
 8026c12:	401a      	ands	r2, r3
 8026c14:	4218      	tst	r0, r3
 8026c16:	d100      	bne.n	8026c1a <_dtoa_r+0x882>
 8026c18:	e081      	b.n	8026d1e <_dtoa_r+0x986>
 8026c1a:	3301      	adds	r3, #1
 8026c1c:	1a9b      	subs	r3, r3, r2
 8026c1e:	2b04      	cmp	r3, #4
 8026c20:	dd79      	ble.n	8026d16 <_dtoa_r+0x97e>
 8026c22:	231c      	movs	r3, #28
 8026c24:	1a9b      	subs	r3, r3, r2
 8026c26:	9a06      	ldr	r2, [sp, #24]
 8026c28:	18e4      	adds	r4, r4, r3
 8026c2a:	18d2      	adds	r2, r2, r3
 8026c2c:	9206      	str	r2, [sp, #24]
 8026c2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026c30:	18d3      	adds	r3, r2, r3
 8026c32:	930d      	str	r3, [sp, #52]	@ 0x34
 8026c34:	9b06      	ldr	r3, [sp, #24]
 8026c36:	2b00      	cmp	r3, #0
 8026c38:	dd05      	ble.n	8026c46 <_dtoa_r+0x8ae>
 8026c3a:	001a      	movs	r2, r3
 8026c3c:	9905      	ldr	r1, [sp, #20]
 8026c3e:	9803      	ldr	r0, [sp, #12]
 8026c40:	f001 f872 	bl	8027d28 <__lshift>
 8026c44:	9005      	str	r0, [sp, #20]
 8026c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026c48:	2b00      	cmp	r3, #0
 8026c4a:	dd05      	ble.n	8026c58 <_dtoa_r+0x8c0>
 8026c4c:	0031      	movs	r1, r6
 8026c4e:	001a      	movs	r2, r3
 8026c50:	9803      	ldr	r0, [sp, #12]
 8026c52:	f001 f869 	bl	8027d28 <__lshift>
 8026c56:	0006      	movs	r6, r0
 8026c58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	d061      	beq.n	8026d22 <_dtoa_r+0x98a>
 8026c5e:	0031      	movs	r1, r6
 8026c60:	9805      	ldr	r0, [sp, #20]
 8026c62:	f001 f8cd 	bl	8027e00 <__mcmp>
 8026c66:	2800      	cmp	r0, #0
 8026c68:	da5b      	bge.n	8026d22 <_dtoa_r+0x98a>
 8026c6a:	9b04      	ldr	r3, [sp, #16]
 8026c6c:	220a      	movs	r2, #10
 8026c6e:	3b01      	subs	r3, #1
 8026c70:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c72:	9905      	ldr	r1, [sp, #20]
 8026c74:	2300      	movs	r3, #0
 8026c76:	9803      	ldr	r0, [sp, #12]
 8026c78:	f000 fe58 	bl	802792c <__multadd>
 8026c7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026c7e:	9005      	str	r0, [sp, #20]
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	d100      	bne.n	8026c86 <_dtoa_r+0x8ee>
 8026c84:	e15b      	b.n	8026f3e <_dtoa_r+0xba6>
 8026c86:	2300      	movs	r3, #0
 8026c88:	0039      	movs	r1, r7
 8026c8a:	220a      	movs	r2, #10
 8026c8c:	9803      	ldr	r0, [sp, #12]
 8026c8e:	f000 fe4d 	bl	802792c <__multadd>
 8026c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c94:	0007      	movs	r7, r0
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	dc4d      	bgt.n	8026d36 <_dtoa_r+0x99e>
 8026c9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c9c:	2b02      	cmp	r3, #2
 8026c9e:	dd46      	ble.n	8026d2e <_dtoa_r+0x996>
 8026ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	d000      	beq.n	8026ca8 <_dtoa_r+0x910>
 8026ca6:	e5db      	b.n	8026860 <_dtoa_r+0x4c8>
 8026ca8:	0031      	movs	r1, r6
 8026caa:	2205      	movs	r2, #5
 8026cac:	9803      	ldr	r0, [sp, #12]
 8026cae:	f000 fe3d 	bl	802792c <__multadd>
 8026cb2:	0006      	movs	r6, r0
 8026cb4:	0001      	movs	r1, r0
 8026cb6:	9805      	ldr	r0, [sp, #20]
 8026cb8:	f001 f8a2 	bl	8027e00 <__mcmp>
 8026cbc:	2800      	cmp	r0, #0
 8026cbe:	dc00      	bgt.n	8026cc2 <_dtoa_r+0x92a>
 8026cc0:	e5ce      	b.n	8026860 <_dtoa_r+0x4c8>
 8026cc2:	9b08      	ldr	r3, [sp, #32]
 8026cc4:	9a08      	ldr	r2, [sp, #32]
 8026cc6:	1c5c      	adds	r4, r3, #1
 8026cc8:	2331      	movs	r3, #49	@ 0x31
 8026cca:	7013      	strb	r3, [r2, #0]
 8026ccc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026cce:	3301      	adds	r3, #1
 8026cd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cd2:	e5c9      	b.n	8026868 <_dtoa_r+0x4d0>
 8026cd4:	2336      	movs	r3, #54	@ 0x36
 8026cd6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8026cd8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026cda:	1a9b      	subs	r3, r3, r2
 8026cdc:	9c06      	ldr	r4, [sp, #24]
 8026cde:	e720      	b.n	8026b22 <_dtoa_r+0x78a>
 8026ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ce2:	1e5d      	subs	r5, r3, #1
 8026ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026ce6:	42ab      	cmp	r3, r5
 8026ce8:	db08      	blt.n	8026cfc <_dtoa_r+0x964>
 8026cea:	1b5d      	subs	r5, r3, r5
 8026cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cee:	2b00      	cmp	r3, #0
 8026cf0:	daf4      	bge.n	8026cdc <_dtoa_r+0x944>
 8026cf2:	9b06      	ldr	r3, [sp, #24]
 8026cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026cf6:	1a9c      	subs	r4, r3, r2
 8026cf8:	2300      	movs	r3, #0
 8026cfa:	e712      	b.n	8026b22 <_dtoa_r+0x78a>
 8026cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026cfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026d00:	1aeb      	subs	r3, r5, r3
 8026d02:	18d3      	adds	r3, r2, r3
 8026d04:	9314      	str	r3, [sp, #80]	@ 0x50
 8026d06:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026d08:	9c06      	ldr	r4, [sp, #24]
 8026d0a:	2500      	movs	r5, #0
 8026d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d0e:	e708      	b.n	8026b22 <_dtoa_r+0x78a>
 8026d10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026d12:	9905      	ldr	r1, [sp, #20]
 8026d14:	e742      	b.n	8026b9c <_dtoa_r+0x804>
 8026d16:	2b04      	cmp	r3, #4
 8026d18:	d08c      	beq.n	8026c34 <_dtoa_r+0x89c>
 8026d1a:	331c      	adds	r3, #28
 8026d1c:	e783      	b.n	8026c26 <_dtoa_r+0x88e>
 8026d1e:	0013      	movs	r3, r2
 8026d20:	e7fb      	b.n	8026d1a <_dtoa_r+0x982>
 8026d22:	9b04      	ldr	r3, [sp, #16]
 8026d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d28:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d2a:	2b00      	cmp	r3, #0
 8026d2c:	ddb5      	ble.n	8026c9a <_dtoa_r+0x902>
 8026d2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026d30:	2b00      	cmp	r3, #0
 8026d32:	d100      	bne.n	8026d36 <_dtoa_r+0x99e>
 8026d34:	e107      	b.n	8026f46 <_dtoa_r+0xbae>
 8026d36:	2c00      	cmp	r4, #0
 8026d38:	dd05      	ble.n	8026d46 <_dtoa_r+0x9ae>
 8026d3a:	0039      	movs	r1, r7
 8026d3c:	0022      	movs	r2, r4
 8026d3e:	9803      	ldr	r0, [sp, #12]
 8026d40:	f000 fff2 	bl	8027d28 <__lshift>
 8026d44:	0007      	movs	r7, r0
 8026d46:	9704      	str	r7, [sp, #16]
 8026d48:	2d00      	cmp	r5, #0
 8026d4a:	d020      	beq.n	8026d8e <_dtoa_r+0x9f6>
 8026d4c:	6879      	ldr	r1, [r7, #4]
 8026d4e:	9803      	ldr	r0, [sp, #12]
 8026d50:	f000 fd84 	bl	802785c <_Balloc>
 8026d54:	1e04      	subs	r4, r0, #0
 8026d56:	d10c      	bne.n	8026d72 <_dtoa_r+0x9da>
 8026d58:	0022      	movs	r2, r4
 8026d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8026e14 <_dtoa_r+0xa7c>)
 8026d5c:	482e      	ldr	r0, [pc, #184]	@ (8026e18 <_dtoa_r+0xa80>)
 8026d5e:	492f      	ldr	r1, [pc, #188]	@ (8026e1c <_dtoa_r+0xa84>)
 8026d60:	f7ff fb2f 	bl	80263c2 <_dtoa_r+0x2a>
 8026d64:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8026d66:	0037      	movs	r7, r6
 8026d68:	e7ab      	b.n	8026cc2 <_dtoa_r+0x92a>
 8026d6a:	9b04      	ldr	r3, [sp, #16]
 8026d6c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8026d6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d70:	e7f9      	b.n	8026d66 <_dtoa_r+0x9ce>
 8026d72:	0039      	movs	r1, r7
 8026d74:	693a      	ldr	r2, [r7, #16]
 8026d76:	310c      	adds	r1, #12
 8026d78:	3202      	adds	r2, #2
 8026d7a:	0092      	lsls	r2, r2, #2
 8026d7c:	300c      	adds	r0, #12
 8026d7e:	f7ff fa75 	bl	802626c <memcpy>
 8026d82:	2201      	movs	r2, #1
 8026d84:	0021      	movs	r1, r4
 8026d86:	9803      	ldr	r0, [sp, #12]
 8026d88:	f000 ffce 	bl	8027d28 <__lshift>
 8026d8c:	9004      	str	r0, [sp, #16]
 8026d8e:	9b08      	ldr	r3, [sp, #32]
 8026d90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026d92:	9306      	str	r3, [sp, #24]
 8026d94:	3b01      	subs	r3, #1
 8026d96:	189b      	adds	r3, r3, r2
 8026d98:	2201      	movs	r2, #1
 8026d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d9e:	4013      	ands	r3, r2
 8026da0:	930e      	str	r3, [sp, #56]	@ 0x38
 8026da2:	0031      	movs	r1, r6
 8026da4:	9805      	ldr	r0, [sp, #20]
 8026da6:	f7ff fa71 	bl	802628c <quorem>
 8026daa:	0039      	movs	r1, r7
 8026dac:	0005      	movs	r5, r0
 8026dae:	900a      	str	r0, [sp, #40]	@ 0x28
 8026db0:	9805      	ldr	r0, [sp, #20]
 8026db2:	f001 f825 	bl	8027e00 <__mcmp>
 8026db6:	9a04      	ldr	r2, [sp, #16]
 8026db8:	900d      	str	r0, [sp, #52]	@ 0x34
 8026dba:	0031      	movs	r1, r6
 8026dbc:	9803      	ldr	r0, [sp, #12]
 8026dbe:	f001 f83b 	bl	8027e38 <__mdiff>
 8026dc2:	2201      	movs	r2, #1
 8026dc4:	68c3      	ldr	r3, [r0, #12]
 8026dc6:	0004      	movs	r4, r0
 8026dc8:	3530      	adds	r5, #48	@ 0x30
 8026dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	d104      	bne.n	8026dda <_dtoa_r+0xa42>
 8026dd0:	0001      	movs	r1, r0
 8026dd2:	9805      	ldr	r0, [sp, #20]
 8026dd4:	f001 f814 	bl	8027e00 <__mcmp>
 8026dd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8026dda:	0021      	movs	r1, r4
 8026ddc:	9803      	ldr	r0, [sp, #12]
 8026dde:	f000 fd81 	bl	80278e4 <_Bfree>
 8026de2:	9b06      	ldr	r3, [sp, #24]
 8026de4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026de6:	1c5c      	adds	r4, r3, #1
 8026de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026dea:	4313      	orrs	r3, r2
 8026dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026dee:	4313      	orrs	r3, r2
 8026df0:	d116      	bne.n	8026e20 <_dtoa_r+0xa88>
 8026df2:	2d39      	cmp	r5, #57	@ 0x39
 8026df4:	d02f      	beq.n	8026e56 <_dtoa_r+0xabe>
 8026df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	dd01      	ble.n	8026e00 <_dtoa_r+0xa68>
 8026dfc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8026dfe:	3531      	adds	r5, #49	@ 0x31
 8026e00:	9b06      	ldr	r3, [sp, #24]
 8026e02:	701d      	strb	r5, [r3, #0]
 8026e04:	e532      	b.n	802686c <_dtoa_r+0x4d4>
 8026e06:	46c0      	nop			@ (mov r8, r8)
 8026e08:	40240000 	.word	0x40240000
 8026e0c:	00000433 	.word	0x00000433
 8026e10:	7ff00000 	.word	0x7ff00000
 8026e14:	0802e7e2 	.word	0x0802e7e2
 8026e18:	0802e78a 	.word	0x0802e78a
 8026e1c:	000002ef 	.word	0x000002ef
 8026e20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026e22:	2b00      	cmp	r3, #0
 8026e24:	db04      	blt.n	8026e30 <_dtoa_r+0xa98>
 8026e26:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026e28:	4313      	orrs	r3, r2
 8026e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026e2c:	4313      	orrs	r3, r2
 8026e2e:	d11e      	bne.n	8026e6e <_dtoa_r+0xad6>
 8026e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	dde4      	ble.n	8026e00 <_dtoa_r+0xa68>
 8026e36:	9905      	ldr	r1, [sp, #20]
 8026e38:	2201      	movs	r2, #1
 8026e3a:	9803      	ldr	r0, [sp, #12]
 8026e3c:	f000 ff74 	bl	8027d28 <__lshift>
 8026e40:	0031      	movs	r1, r6
 8026e42:	9005      	str	r0, [sp, #20]
 8026e44:	f000 ffdc 	bl	8027e00 <__mcmp>
 8026e48:	2800      	cmp	r0, #0
 8026e4a:	dc02      	bgt.n	8026e52 <_dtoa_r+0xaba>
 8026e4c:	d1d8      	bne.n	8026e00 <_dtoa_r+0xa68>
 8026e4e:	07eb      	lsls	r3, r5, #31
 8026e50:	d5d6      	bpl.n	8026e00 <_dtoa_r+0xa68>
 8026e52:	2d39      	cmp	r5, #57	@ 0x39
 8026e54:	d1d2      	bne.n	8026dfc <_dtoa_r+0xa64>
 8026e56:	2339      	movs	r3, #57	@ 0x39
 8026e58:	9a06      	ldr	r2, [sp, #24]
 8026e5a:	7013      	strb	r3, [r2, #0]
 8026e5c:	0023      	movs	r3, r4
 8026e5e:	001c      	movs	r4, r3
 8026e60:	3b01      	subs	r3, #1
 8026e62:	781a      	ldrb	r2, [r3, #0]
 8026e64:	2a39      	cmp	r2, #57	@ 0x39
 8026e66:	d050      	beq.n	8026f0a <_dtoa_r+0xb72>
 8026e68:	3201      	adds	r2, #1
 8026e6a:	701a      	strb	r2, [r3, #0]
 8026e6c:	e4fe      	b.n	802686c <_dtoa_r+0x4d4>
 8026e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e70:	2b00      	cmp	r3, #0
 8026e72:	dd03      	ble.n	8026e7c <_dtoa_r+0xae4>
 8026e74:	2d39      	cmp	r5, #57	@ 0x39
 8026e76:	d0ee      	beq.n	8026e56 <_dtoa_r+0xabe>
 8026e78:	3501      	adds	r5, #1
 8026e7a:	e7c1      	b.n	8026e00 <_dtoa_r+0xa68>
 8026e7c:	9b06      	ldr	r3, [sp, #24]
 8026e7e:	9a06      	ldr	r2, [sp, #24]
 8026e80:	701d      	strb	r5, [r3, #0]
 8026e82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026e84:	4293      	cmp	r3, r2
 8026e86:	d02b      	beq.n	8026ee0 <_dtoa_r+0xb48>
 8026e88:	2300      	movs	r3, #0
 8026e8a:	220a      	movs	r2, #10
 8026e8c:	9905      	ldr	r1, [sp, #20]
 8026e8e:	9803      	ldr	r0, [sp, #12]
 8026e90:	f000 fd4c 	bl	802792c <__multadd>
 8026e94:	9b04      	ldr	r3, [sp, #16]
 8026e96:	9005      	str	r0, [sp, #20]
 8026e98:	429f      	cmp	r7, r3
 8026e9a:	d109      	bne.n	8026eb0 <_dtoa_r+0xb18>
 8026e9c:	0039      	movs	r1, r7
 8026e9e:	2300      	movs	r3, #0
 8026ea0:	220a      	movs	r2, #10
 8026ea2:	9803      	ldr	r0, [sp, #12]
 8026ea4:	f000 fd42 	bl	802792c <__multadd>
 8026ea8:	0007      	movs	r7, r0
 8026eaa:	9004      	str	r0, [sp, #16]
 8026eac:	9406      	str	r4, [sp, #24]
 8026eae:	e778      	b.n	8026da2 <_dtoa_r+0xa0a>
 8026eb0:	0039      	movs	r1, r7
 8026eb2:	2300      	movs	r3, #0
 8026eb4:	220a      	movs	r2, #10
 8026eb6:	9803      	ldr	r0, [sp, #12]
 8026eb8:	f000 fd38 	bl	802792c <__multadd>
 8026ebc:	2300      	movs	r3, #0
 8026ebe:	0007      	movs	r7, r0
 8026ec0:	220a      	movs	r2, #10
 8026ec2:	9904      	ldr	r1, [sp, #16]
 8026ec4:	9803      	ldr	r0, [sp, #12]
 8026ec6:	f000 fd31 	bl	802792c <__multadd>
 8026eca:	9004      	str	r0, [sp, #16]
 8026ecc:	e7ee      	b.n	8026eac <_dtoa_r+0xb14>
 8026ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026ed0:	2401      	movs	r4, #1
 8026ed2:	2b00      	cmp	r3, #0
 8026ed4:	dd00      	ble.n	8026ed8 <_dtoa_r+0xb40>
 8026ed6:	001c      	movs	r4, r3
 8026ed8:	9704      	str	r7, [sp, #16]
 8026eda:	2700      	movs	r7, #0
 8026edc:	9b08      	ldr	r3, [sp, #32]
 8026ede:	191c      	adds	r4, r3, r4
 8026ee0:	9905      	ldr	r1, [sp, #20]
 8026ee2:	2201      	movs	r2, #1
 8026ee4:	9803      	ldr	r0, [sp, #12]
 8026ee6:	f000 ff1f 	bl	8027d28 <__lshift>
 8026eea:	0031      	movs	r1, r6
 8026eec:	9005      	str	r0, [sp, #20]
 8026eee:	f000 ff87 	bl	8027e00 <__mcmp>
 8026ef2:	2800      	cmp	r0, #0
 8026ef4:	dcb2      	bgt.n	8026e5c <_dtoa_r+0xac4>
 8026ef6:	d101      	bne.n	8026efc <_dtoa_r+0xb64>
 8026ef8:	07ed      	lsls	r5, r5, #31
 8026efa:	d4af      	bmi.n	8026e5c <_dtoa_r+0xac4>
 8026efc:	0023      	movs	r3, r4
 8026efe:	001c      	movs	r4, r3
 8026f00:	3b01      	subs	r3, #1
 8026f02:	781a      	ldrb	r2, [r3, #0]
 8026f04:	2a30      	cmp	r2, #48	@ 0x30
 8026f06:	d0fa      	beq.n	8026efe <_dtoa_r+0xb66>
 8026f08:	e4b0      	b.n	802686c <_dtoa_r+0x4d4>
 8026f0a:	9a08      	ldr	r2, [sp, #32]
 8026f0c:	429a      	cmp	r2, r3
 8026f0e:	d1a6      	bne.n	8026e5e <_dtoa_r+0xac6>
 8026f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026f12:	3301      	adds	r3, #1
 8026f14:	930c      	str	r3, [sp, #48]	@ 0x30
 8026f16:	2331      	movs	r3, #49	@ 0x31
 8026f18:	7013      	strb	r3, [r2, #0]
 8026f1a:	e4a7      	b.n	802686c <_dtoa_r+0x4d4>
 8026f1c:	4b14      	ldr	r3, [pc, #80]	@ (8026f70 <_dtoa_r+0xbd8>)
 8026f1e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026f20:	9308      	str	r3, [sp, #32]
 8026f22:	4b14      	ldr	r3, [pc, #80]	@ (8026f74 <_dtoa_r+0xbdc>)
 8026f24:	2a00      	cmp	r2, #0
 8026f26:	d001      	beq.n	8026f2c <_dtoa_r+0xb94>
 8026f28:	f7ff fa7e 	bl	8026428 <_dtoa_r+0x90>
 8026f2c:	f7ff fa7e 	bl	802642c <_dtoa_r+0x94>
 8026f30:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026f32:	2b01      	cmp	r3, #1
 8026f34:	dc00      	bgt.n	8026f38 <_dtoa_r+0xba0>
 8026f36:	e648      	b.n	8026bca <_dtoa_r+0x832>
 8026f38:	2001      	movs	r0, #1
 8026f3a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026f3c:	e665      	b.n	8026c0a <_dtoa_r+0x872>
 8026f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f40:	2b00      	cmp	r3, #0
 8026f42:	dc00      	bgt.n	8026f46 <_dtoa_r+0xbae>
 8026f44:	e6a9      	b.n	8026c9a <_dtoa_r+0x902>
 8026f46:	2400      	movs	r4, #0
 8026f48:	0031      	movs	r1, r6
 8026f4a:	9805      	ldr	r0, [sp, #20]
 8026f4c:	f7ff f99e 	bl	802628c <quorem>
 8026f50:	9b08      	ldr	r3, [sp, #32]
 8026f52:	3030      	adds	r0, #48	@ 0x30
 8026f54:	5518      	strb	r0, [r3, r4]
 8026f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f58:	3401      	adds	r4, #1
 8026f5a:	0005      	movs	r5, r0
 8026f5c:	42a3      	cmp	r3, r4
 8026f5e:	ddb6      	ble.n	8026ece <_dtoa_r+0xb36>
 8026f60:	2300      	movs	r3, #0
 8026f62:	220a      	movs	r2, #10
 8026f64:	9905      	ldr	r1, [sp, #20]
 8026f66:	9803      	ldr	r0, [sp, #12]
 8026f68:	f000 fce0 	bl	802792c <__multadd>
 8026f6c:	9005      	str	r0, [sp, #20]
 8026f6e:	e7eb      	b.n	8026f48 <_dtoa_r+0xbb0>
 8026f70:	0802e766 	.word	0x0802e766
 8026f74:	0802e76e 	.word	0x0802e76e

08026f78 <_free_r>:
 8026f78:	b570      	push	{r4, r5, r6, lr}
 8026f7a:	0005      	movs	r5, r0
 8026f7c:	1e0c      	subs	r4, r1, #0
 8026f7e:	d010      	beq.n	8026fa2 <_free_r+0x2a>
 8026f80:	3c04      	subs	r4, #4
 8026f82:	6823      	ldr	r3, [r4, #0]
 8026f84:	2b00      	cmp	r3, #0
 8026f86:	da00      	bge.n	8026f8a <_free_r+0x12>
 8026f88:	18e4      	adds	r4, r4, r3
 8026f8a:	0028      	movs	r0, r5
 8026f8c:	f000 fc56 	bl	802783c <__malloc_lock>
 8026f90:	4a1d      	ldr	r2, [pc, #116]	@ (8027008 <_free_r+0x90>)
 8026f92:	6813      	ldr	r3, [r2, #0]
 8026f94:	2b00      	cmp	r3, #0
 8026f96:	d105      	bne.n	8026fa4 <_free_r+0x2c>
 8026f98:	6063      	str	r3, [r4, #4]
 8026f9a:	6014      	str	r4, [r2, #0]
 8026f9c:	0028      	movs	r0, r5
 8026f9e:	f000 fc55 	bl	802784c <__malloc_unlock>
 8026fa2:	bd70      	pop	{r4, r5, r6, pc}
 8026fa4:	42a3      	cmp	r3, r4
 8026fa6:	d908      	bls.n	8026fba <_free_r+0x42>
 8026fa8:	6820      	ldr	r0, [r4, #0]
 8026faa:	1821      	adds	r1, r4, r0
 8026fac:	428b      	cmp	r3, r1
 8026fae:	d1f3      	bne.n	8026f98 <_free_r+0x20>
 8026fb0:	6819      	ldr	r1, [r3, #0]
 8026fb2:	685b      	ldr	r3, [r3, #4]
 8026fb4:	1809      	adds	r1, r1, r0
 8026fb6:	6021      	str	r1, [r4, #0]
 8026fb8:	e7ee      	b.n	8026f98 <_free_r+0x20>
 8026fba:	001a      	movs	r2, r3
 8026fbc:	685b      	ldr	r3, [r3, #4]
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	d001      	beq.n	8026fc6 <_free_r+0x4e>
 8026fc2:	42a3      	cmp	r3, r4
 8026fc4:	d9f9      	bls.n	8026fba <_free_r+0x42>
 8026fc6:	6811      	ldr	r1, [r2, #0]
 8026fc8:	1850      	adds	r0, r2, r1
 8026fca:	42a0      	cmp	r0, r4
 8026fcc:	d10b      	bne.n	8026fe6 <_free_r+0x6e>
 8026fce:	6820      	ldr	r0, [r4, #0]
 8026fd0:	1809      	adds	r1, r1, r0
 8026fd2:	1850      	adds	r0, r2, r1
 8026fd4:	6011      	str	r1, [r2, #0]
 8026fd6:	4283      	cmp	r3, r0
 8026fd8:	d1e0      	bne.n	8026f9c <_free_r+0x24>
 8026fda:	6818      	ldr	r0, [r3, #0]
 8026fdc:	685b      	ldr	r3, [r3, #4]
 8026fde:	1841      	adds	r1, r0, r1
 8026fe0:	6011      	str	r1, [r2, #0]
 8026fe2:	6053      	str	r3, [r2, #4]
 8026fe4:	e7da      	b.n	8026f9c <_free_r+0x24>
 8026fe6:	42a0      	cmp	r0, r4
 8026fe8:	d902      	bls.n	8026ff0 <_free_r+0x78>
 8026fea:	230c      	movs	r3, #12
 8026fec:	602b      	str	r3, [r5, #0]
 8026fee:	e7d5      	b.n	8026f9c <_free_r+0x24>
 8026ff0:	6820      	ldr	r0, [r4, #0]
 8026ff2:	1821      	adds	r1, r4, r0
 8026ff4:	428b      	cmp	r3, r1
 8026ff6:	d103      	bne.n	8027000 <_free_r+0x88>
 8026ff8:	6819      	ldr	r1, [r3, #0]
 8026ffa:	685b      	ldr	r3, [r3, #4]
 8026ffc:	1809      	adds	r1, r1, r0
 8026ffe:	6021      	str	r1, [r4, #0]
 8027000:	6063      	str	r3, [r4, #4]
 8027002:	6054      	str	r4, [r2, #4]
 8027004:	e7ca      	b.n	8026f9c <_free_r+0x24>
 8027006:	46c0      	nop			@ (mov r8, r8)
 8027008:	20003770 	.word	0x20003770

0802700c <rshift>:
 802700c:	0002      	movs	r2, r0
 802700e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027010:	6904      	ldr	r4, [r0, #16]
 8027012:	b085      	sub	sp, #20
 8027014:	3214      	adds	r2, #20
 8027016:	114b      	asrs	r3, r1, #5
 8027018:	0016      	movs	r6, r2
 802701a:	9302      	str	r3, [sp, #8]
 802701c:	429c      	cmp	r4, r3
 802701e:	dd31      	ble.n	8027084 <rshift+0x78>
 8027020:	261f      	movs	r6, #31
 8027022:	000f      	movs	r7, r1
 8027024:	009b      	lsls	r3, r3, #2
 8027026:	00a5      	lsls	r5, r4, #2
 8027028:	18d3      	adds	r3, r2, r3
 802702a:	4037      	ands	r7, r6
 802702c:	1955      	adds	r5, r2, r5
 802702e:	9300      	str	r3, [sp, #0]
 8027030:	9701      	str	r7, [sp, #4]
 8027032:	4231      	tst	r1, r6
 8027034:	d10d      	bne.n	8027052 <rshift+0x46>
 8027036:	0016      	movs	r6, r2
 8027038:	0019      	movs	r1, r3
 802703a:	428d      	cmp	r5, r1
 802703c:	d836      	bhi.n	80270ac <rshift+0xa0>
 802703e:	9b00      	ldr	r3, [sp, #0]
 8027040:	2600      	movs	r6, #0
 8027042:	3b03      	subs	r3, #3
 8027044:	429d      	cmp	r5, r3
 8027046:	d302      	bcc.n	802704e <rshift+0x42>
 8027048:	9b02      	ldr	r3, [sp, #8]
 802704a:	1ae4      	subs	r4, r4, r3
 802704c:	00a6      	lsls	r6, r4, #2
 802704e:	1996      	adds	r6, r2, r6
 8027050:	e018      	b.n	8027084 <rshift+0x78>
 8027052:	2120      	movs	r1, #32
 8027054:	9e01      	ldr	r6, [sp, #4]
 8027056:	9f01      	ldr	r7, [sp, #4]
 8027058:	1b89      	subs	r1, r1, r6
 802705a:	9e00      	ldr	r6, [sp, #0]
 802705c:	9103      	str	r1, [sp, #12]
 802705e:	ce02      	ldmia	r6!, {r1}
 8027060:	4694      	mov	ip, r2
 8027062:	40f9      	lsrs	r1, r7
 8027064:	42b5      	cmp	r5, r6
 8027066:	d816      	bhi.n	8027096 <rshift+0x8a>
 8027068:	9b00      	ldr	r3, [sp, #0]
 802706a:	2600      	movs	r6, #0
 802706c:	3301      	adds	r3, #1
 802706e:	429d      	cmp	r5, r3
 8027070:	d303      	bcc.n	802707a <rshift+0x6e>
 8027072:	9b02      	ldr	r3, [sp, #8]
 8027074:	1ae4      	subs	r4, r4, r3
 8027076:	00a6      	lsls	r6, r4, #2
 8027078:	3e04      	subs	r6, #4
 802707a:	1996      	adds	r6, r2, r6
 802707c:	6031      	str	r1, [r6, #0]
 802707e:	2900      	cmp	r1, #0
 8027080:	d000      	beq.n	8027084 <rshift+0x78>
 8027082:	3604      	adds	r6, #4
 8027084:	1ab1      	subs	r1, r6, r2
 8027086:	1089      	asrs	r1, r1, #2
 8027088:	6101      	str	r1, [r0, #16]
 802708a:	4296      	cmp	r6, r2
 802708c:	d101      	bne.n	8027092 <rshift+0x86>
 802708e:	2300      	movs	r3, #0
 8027090:	6143      	str	r3, [r0, #20]
 8027092:	b005      	add	sp, #20
 8027094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027096:	6837      	ldr	r7, [r6, #0]
 8027098:	9b03      	ldr	r3, [sp, #12]
 802709a:	409f      	lsls	r7, r3
 802709c:	430f      	orrs	r7, r1
 802709e:	4661      	mov	r1, ip
 80270a0:	c180      	stmia	r1!, {r7}
 80270a2:	468c      	mov	ip, r1
 80270a4:	9b01      	ldr	r3, [sp, #4]
 80270a6:	ce02      	ldmia	r6!, {r1}
 80270a8:	40d9      	lsrs	r1, r3
 80270aa:	e7db      	b.n	8027064 <rshift+0x58>
 80270ac:	c980      	ldmia	r1!, {r7}
 80270ae:	c680      	stmia	r6!, {r7}
 80270b0:	e7c3      	b.n	802703a <rshift+0x2e>

080270b2 <__hexdig_fun>:
 80270b2:	0002      	movs	r2, r0
 80270b4:	3a30      	subs	r2, #48	@ 0x30
 80270b6:	0003      	movs	r3, r0
 80270b8:	2a09      	cmp	r2, #9
 80270ba:	d802      	bhi.n	80270c2 <__hexdig_fun+0x10>
 80270bc:	3b20      	subs	r3, #32
 80270be:	b2d8      	uxtb	r0, r3
 80270c0:	4770      	bx	lr
 80270c2:	0002      	movs	r2, r0
 80270c4:	3a61      	subs	r2, #97	@ 0x61
 80270c6:	2a05      	cmp	r2, #5
 80270c8:	d801      	bhi.n	80270ce <__hexdig_fun+0x1c>
 80270ca:	3b47      	subs	r3, #71	@ 0x47
 80270cc:	e7f7      	b.n	80270be <__hexdig_fun+0xc>
 80270ce:	001a      	movs	r2, r3
 80270d0:	3a41      	subs	r2, #65	@ 0x41
 80270d2:	2000      	movs	r0, #0
 80270d4:	2a05      	cmp	r2, #5
 80270d6:	d8f3      	bhi.n	80270c0 <__hexdig_fun+0xe>
 80270d8:	3b27      	subs	r3, #39	@ 0x27
 80270da:	e7f0      	b.n	80270be <__hexdig_fun+0xc>

080270dc <__gethex>:
 80270dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270de:	b089      	sub	sp, #36	@ 0x24
 80270e0:	9307      	str	r3, [sp, #28]
 80270e2:	680b      	ldr	r3, [r1, #0]
 80270e4:	9201      	str	r2, [sp, #4]
 80270e6:	9003      	str	r0, [sp, #12]
 80270e8:	9106      	str	r1, [sp, #24]
 80270ea:	1c9a      	adds	r2, r3, #2
 80270ec:	0011      	movs	r1, r2
 80270ee:	3201      	adds	r2, #1
 80270f0:	1e50      	subs	r0, r2, #1
 80270f2:	7800      	ldrb	r0, [r0, #0]
 80270f4:	2830      	cmp	r0, #48	@ 0x30
 80270f6:	d0f9      	beq.n	80270ec <__gethex+0x10>
 80270f8:	1acb      	subs	r3, r1, r3
 80270fa:	3b02      	subs	r3, #2
 80270fc:	9305      	str	r3, [sp, #20]
 80270fe:	9100      	str	r1, [sp, #0]
 8027100:	f7ff ffd7 	bl	80270b2 <__hexdig_fun>
 8027104:	2300      	movs	r3, #0
 8027106:	001d      	movs	r5, r3
 8027108:	9302      	str	r3, [sp, #8]
 802710a:	4298      	cmp	r0, r3
 802710c:	d11e      	bne.n	802714c <__gethex+0x70>
 802710e:	2201      	movs	r2, #1
 8027110:	49a6      	ldr	r1, [pc, #664]	@ (80273ac <__gethex+0x2d0>)
 8027112:	9800      	ldr	r0, [sp, #0]
 8027114:	f7fe ffe4 	bl	80260e0 <strncmp>
 8027118:	0007      	movs	r7, r0
 802711a:	42a8      	cmp	r0, r5
 802711c:	d000      	beq.n	8027120 <__gethex+0x44>
 802711e:	e06a      	b.n	80271f6 <__gethex+0x11a>
 8027120:	9b00      	ldr	r3, [sp, #0]
 8027122:	7858      	ldrb	r0, [r3, #1]
 8027124:	1c5c      	adds	r4, r3, #1
 8027126:	f7ff ffc4 	bl	80270b2 <__hexdig_fun>
 802712a:	2301      	movs	r3, #1
 802712c:	9302      	str	r3, [sp, #8]
 802712e:	42a8      	cmp	r0, r5
 8027130:	d02f      	beq.n	8027192 <__gethex+0xb6>
 8027132:	9400      	str	r4, [sp, #0]
 8027134:	9b00      	ldr	r3, [sp, #0]
 8027136:	7818      	ldrb	r0, [r3, #0]
 8027138:	2830      	cmp	r0, #48	@ 0x30
 802713a:	d009      	beq.n	8027150 <__gethex+0x74>
 802713c:	f7ff ffb9 	bl	80270b2 <__hexdig_fun>
 8027140:	4242      	negs	r2, r0
 8027142:	4142      	adcs	r2, r0
 8027144:	2301      	movs	r3, #1
 8027146:	0025      	movs	r5, r4
 8027148:	9202      	str	r2, [sp, #8]
 802714a:	9305      	str	r3, [sp, #20]
 802714c:	9c00      	ldr	r4, [sp, #0]
 802714e:	e004      	b.n	802715a <__gethex+0x7e>
 8027150:	9b00      	ldr	r3, [sp, #0]
 8027152:	3301      	adds	r3, #1
 8027154:	9300      	str	r3, [sp, #0]
 8027156:	e7ed      	b.n	8027134 <__gethex+0x58>
 8027158:	3401      	adds	r4, #1
 802715a:	7820      	ldrb	r0, [r4, #0]
 802715c:	f7ff ffa9 	bl	80270b2 <__hexdig_fun>
 8027160:	1e07      	subs	r7, r0, #0
 8027162:	d1f9      	bne.n	8027158 <__gethex+0x7c>
 8027164:	2201      	movs	r2, #1
 8027166:	0020      	movs	r0, r4
 8027168:	4990      	ldr	r1, [pc, #576]	@ (80273ac <__gethex+0x2d0>)
 802716a:	f7fe ffb9 	bl	80260e0 <strncmp>
 802716e:	2800      	cmp	r0, #0
 8027170:	d10d      	bne.n	802718e <__gethex+0xb2>
 8027172:	2d00      	cmp	r5, #0
 8027174:	d106      	bne.n	8027184 <__gethex+0xa8>
 8027176:	3401      	adds	r4, #1
 8027178:	0025      	movs	r5, r4
 802717a:	7820      	ldrb	r0, [r4, #0]
 802717c:	f7ff ff99 	bl	80270b2 <__hexdig_fun>
 8027180:	2800      	cmp	r0, #0
 8027182:	d102      	bne.n	802718a <__gethex+0xae>
 8027184:	1b2d      	subs	r5, r5, r4
 8027186:	00af      	lsls	r7, r5, #2
 8027188:	e003      	b.n	8027192 <__gethex+0xb6>
 802718a:	3401      	adds	r4, #1
 802718c:	e7f5      	b.n	802717a <__gethex+0x9e>
 802718e:	2d00      	cmp	r5, #0
 8027190:	d1f8      	bne.n	8027184 <__gethex+0xa8>
 8027192:	2220      	movs	r2, #32
 8027194:	7823      	ldrb	r3, [r4, #0]
 8027196:	0026      	movs	r6, r4
 8027198:	4393      	bics	r3, r2
 802719a:	2b50      	cmp	r3, #80	@ 0x50
 802719c:	d11d      	bne.n	80271da <__gethex+0xfe>
 802719e:	7863      	ldrb	r3, [r4, #1]
 80271a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80271a2:	d02d      	beq.n	8027200 <__gethex+0x124>
 80271a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80271a6:	d02f      	beq.n	8027208 <__gethex+0x12c>
 80271a8:	2300      	movs	r3, #0
 80271aa:	1c66      	adds	r6, r4, #1
 80271ac:	9304      	str	r3, [sp, #16]
 80271ae:	7830      	ldrb	r0, [r6, #0]
 80271b0:	f7ff ff7f 	bl	80270b2 <__hexdig_fun>
 80271b4:	1e43      	subs	r3, r0, #1
 80271b6:	b2db      	uxtb	r3, r3
 80271b8:	0005      	movs	r5, r0
 80271ba:	2b18      	cmp	r3, #24
 80271bc:	d82a      	bhi.n	8027214 <__gethex+0x138>
 80271be:	7870      	ldrb	r0, [r6, #1]
 80271c0:	f7ff ff77 	bl	80270b2 <__hexdig_fun>
 80271c4:	1e43      	subs	r3, r0, #1
 80271c6:	b2db      	uxtb	r3, r3
 80271c8:	3601      	adds	r6, #1
 80271ca:	3d10      	subs	r5, #16
 80271cc:	2b18      	cmp	r3, #24
 80271ce:	d91d      	bls.n	802720c <__gethex+0x130>
 80271d0:	9b04      	ldr	r3, [sp, #16]
 80271d2:	2b00      	cmp	r3, #0
 80271d4:	d000      	beq.n	80271d8 <__gethex+0xfc>
 80271d6:	426d      	negs	r5, r5
 80271d8:	197f      	adds	r7, r7, r5
 80271da:	9b06      	ldr	r3, [sp, #24]
 80271dc:	601e      	str	r6, [r3, #0]
 80271de:	9b02      	ldr	r3, [sp, #8]
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	d019      	beq.n	8027218 <__gethex+0x13c>
 80271e4:	9b05      	ldr	r3, [sp, #20]
 80271e6:	2606      	movs	r6, #6
 80271e8:	425a      	negs	r2, r3
 80271ea:	4153      	adcs	r3, r2
 80271ec:	425b      	negs	r3, r3
 80271ee:	401e      	ands	r6, r3
 80271f0:	0030      	movs	r0, r6
 80271f2:	b009      	add	sp, #36	@ 0x24
 80271f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80271f6:	2301      	movs	r3, #1
 80271f8:	2700      	movs	r7, #0
 80271fa:	9c00      	ldr	r4, [sp, #0]
 80271fc:	9302      	str	r3, [sp, #8]
 80271fe:	e7c8      	b.n	8027192 <__gethex+0xb6>
 8027200:	2300      	movs	r3, #0
 8027202:	9304      	str	r3, [sp, #16]
 8027204:	1ca6      	adds	r6, r4, #2
 8027206:	e7d2      	b.n	80271ae <__gethex+0xd2>
 8027208:	2301      	movs	r3, #1
 802720a:	e7fa      	b.n	8027202 <__gethex+0x126>
 802720c:	230a      	movs	r3, #10
 802720e:	435d      	muls	r5, r3
 8027210:	182d      	adds	r5, r5, r0
 8027212:	e7d4      	b.n	80271be <__gethex+0xe2>
 8027214:	0026      	movs	r6, r4
 8027216:	e7e0      	b.n	80271da <__gethex+0xfe>
 8027218:	9b00      	ldr	r3, [sp, #0]
 802721a:	9902      	ldr	r1, [sp, #8]
 802721c:	1ae3      	subs	r3, r4, r3
 802721e:	3b01      	subs	r3, #1
 8027220:	2b07      	cmp	r3, #7
 8027222:	dc0a      	bgt.n	802723a <__gethex+0x15e>
 8027224:	9803      	ldr	r0, [sp, #12]
 8027226:	f000 fb19 	bl	802785c <_Balloc>
 802722a:	1e05      	subs	r5, r0, #0
 802722c:	d108      	bne.n	8027240 <__gethex+0x164>
 802722e:	002a      	movs	r2, r5
 8027230:	21e4      	movs	r1, #228	@ 0xe4
 8027232:	4b5f      	ldr	r3, [pc, #380]	@ (80273b0 <__gethex+0x2d4>)
 8027234:	485f      	ldr	r0, [pc, #380]	@ (80273b4 <__gethex+0x2d8>)
 8027236:	f001 fbe9 	bl	8028a0c <__assert_func>
 802723a:	3101      	adds	r1, #1
 802723c:	105b      	asrs	r3, r3, #1
 802723e:	e7ef      	b.n	8027220 <__gethex+0x144>
 8027240:	0003      	movs	r3, r0
 8027242:	3314      	adds	r3, #20
 8027244:	9302      	str	r3, [sp, #8]
 8027246:	9305      	str	r3, [sp, #20]
 8027248:	2300      	movs	r3, #0
 802724a:	001e      	movs	r6, r3
 802724c:	9304      	str	r3, [sp, #16]
 802724e:	9b00      	ldr	r3, [sp, #0]
 8027250:	42a3      	cmp	r3, r4
 8027252:	d338      	bcc.n	80272c6 <__gethex+0x1ea>
 8027254:	9c05      	ldr	r4, [sp, #20]
 8027256:	9b02      	ldr	r3, [sp, #8]
 8027258:	c440      	stmia	r4!, {r6}
 802725a:	1ae4      	subs	r4, r4, r3
 802725c:	10a4      	asrs	r4, r4, #2
 802725e:	0030      	movs	r0, r6
 8027260:	612c      	str	r4, [r5, #16]
 8027262:	f000 fbf3 	bl	8027a4c <__hi0bits>
 8027266:	9b01      	ldr	r3, [sp, #4]
 8027268:	0164      	lsls	r4, r4, #5
 802726a:	681b      	ldr	r3, [r3, #0]
 802726c:	1a26      	subs	r6, r4, r0
 802726e:	9300      	str	r3, [sp, #0]
 8027270:	429e      	cmp	r6, r3
 8027272:	dd52      	ble.n	802731a <__gethex+0x23e>
 8027274:	1af6      	subs	r6, r6, r3
 8027276:	0031      	movs	r1, r6
 8027278:	0028      	movs	r0, r5
 802727a:	f000 ff8e 	bl	802819a <__any_on>
 802727e:	1e04      	subs	r4, r0, #0
 8027280:	d00f      	beq.n	80272a2 <__gethex+0x1c6>
 8027282:	2401      	movs	r4, #1
 8027284:	211f      	movs	r1, #31
 8027286:	0020      	movs	r0, r4
 8027288:	1e73      	subs	r3, r6, #1
 802728a:	4019      	ands	r1, r3
 802728c:	4088      	lsls	r0, r1
 802728e:	0001      	movs	r1, r0
 8027290:	115a      	asrs	r2, r3, #5
 8027292:	9802      	ldr	r0, [sp, #8]
 8027294:	0092      	lsls	r2, r2, #2
 8027296:	5812      	ldr	r2, [r2, r0]
 8027298:	420a      	tst	r2, r1
 802729a:	d002      	beq.n	80272a2 <__gethex+0x1c6>
 802729c:	42a3      	cmp	r3, r4
 802729e:	dc34      	bgt.n	802730a <__gethex+0x22e>
 80272a0:	2402      	movs	r4, #2
 80272a2:	0031      	movs	r1, r6
 80272a4:	0028      	movs	r0, r5
 80272a6:	f7ff feb1 	bl	802700c <rshift>
 80272aa:	19bf      	adds	r7, r7, r6
 80272ac:	9b01      	ldr	r3, [sp, #4]
 80272ae:	689b      	ldr	r3, [r3, #8]
 80272b0:	42bb      	cmp	r3, r7
 80272b2:	da42      	bge.n	802733a <__gethex+0x25e>
 80272b4:	0029      	movs	r1, r5
 80272b6:	9803      	ldr	r0, [sp, #12]
 80272b8:	f000 fb14 	bl	80278e4 <_Bfree>
 80272bc:	2300      	movs	r3, #0
 80272be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80272c0:	26a3      	movs	r6, #163	@ 0xa3
 80272c2:	6013      	str	r3, [r2, #0]
 80272c4:	e794      	b.n	80271f0 <__gethex+0x114>
 80272c6:	3c01      	subs	r4, #1
 80272c8:	7823      	ldrb	r3, [r4, #0]
 80272ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80272cc:	d012      	beq.n	80272f4 <__gethex+0x218>
 80272ce:	9b04      	ldr	r3, [sp, #16]
 80272d0:	2b20      	cmp	r3, #32
 80272d2:	d104      	bne.n	80272de <__gethex+0x202>
 80272d4:	9b05      	ldr	r3, [sp, #20]
 80272d6:	c340      	stmia	r3!, {r6}
 80272d8:	2600      	movs	r6, #0
 80272da:	9305      	str	r3, [sp, #20]
 80272dc:	9604      	str	r6, [sp, #16]
 80272de:	7820      	ldrb	r0, [r4, #0]
 80272e0:	f7ff fee7 	bl	80270b2 <__hexdig_fun>
 80272e4:	230f      	movs	r3, #15
 80272e6:	4018      	ands	r0, r3
 80272e8:	9b04      	ldr	r3, [sp, #16]
 80272ea:	4098      	lsls	r0, r3
 80272ec:	3304      	adds	r3, #4
 80272ee:	4306      	orrs	r6, r0
 80272f0:	9304      	str	r3, [sp, #16]
 80272f2:	e7ac      	b.n	802724e <__gethex+0x172>
 80272f4:	9b00      	ldr	r3, [sp, #0]
 80272f6:	42a3      	cmp	r3, r4
 80272f8:	d8e9      	bhi.n	80272ce <__gethex+0x1f2>
 80272fa:	2201      	movs	r2, #1
 80272fc:	0020      	movs	r0, r4
 80272fe:	492b      	ldr	r1, [pc, #172]	@ (80273ac <__gethex+0x2d0>)
 8027300:	f7fe feee 	bl	80260e0 <strncmp>
 8027304:	2800      	cmp	r0, #0
 8027306:	d1e2      	bne.n	80272ce <__gethex+0x1f2>
 8027308:	e7a1      	b.n	802724e <__gethex+0x172>
 802730a:	0028      	movs	r0, r5
 802730c:	1eb1      	subs	r1, r6, #2
 802730e:	f000 ff44 	bl	802819a <__any_on>
 8027312:	2800      	cmp	r0, #0
 8027314:	d0c4      	beq.n	80272a0 <__gethex+0x1c4>
 8027316:	2403      	movs	r4, #3
 8027318:	e7c3      	b.n	80272a2 <__gethex+0x1c6>
 802731a:	9b00      	ldr	r3, [sp, #0]
 802731c:	2400      	movs	r4, #0
 802731e:	429e      	cmp	r6, r3
 8027320:	dac4      	bge.n	80272ac <__gethex+0x1d0>
 8027322:	1b9e      	subs	r6, r3, r6
 8027324:	0029      	movs	r1, r5
 8027326:	0032      	movs	r2, r6
 8027328:	9803      	ldr	r0, [sp, #12]
 802732a:	f000 fcfd 	bl	8027d28 <__lshift>
 802732e:	0003      	movs	r3, r0
 8027330:	3314      	adds	r3, #20
 8027332:	0005      	movs	r5, r0
 8027334:	1bbf      	subs	r7, r7, r6
 8027336:	9302      	str	r3, [sp, #8]
 8027338:	e7b8      	b.n	80272ac <__gethex+0x1d0>
 802733a:	9b01      	ldr	r3, [sp, #4]
 802733c:	685e      	ldr	r6, [r3, #4]
 802733e:	42be      	cmp	r6, r7
 8027340:	dd6f      	ble.n	8027422 <__gethex+0x346>
 8027342:	9b00      	ldr	r3, [sp, #0]
 8027344:	1bf6      	subs	r6, r6, r7
 8027346:	42b3      	cmp	r3, r6
 8027348:	dc36      	bgt.n	80273b8 <__gethex+0x2dc>
 802734a:	9b01      	ldr	r3, [sp, #4]
 802734c:	68db      	ldr	r3, [r3, #12]
 802734e:	2b02      	cmp	r3, #2
 8027350:	d024      	beq.n	802739c <__gethex+0x2c0>
 8027352:	2b03      	cmp	r3, #3
 8027354:	d026      	beq.n	80273a4 <__gethex+0x2c8>
 8027356:	2b01      	cmp	r3, #1
 8027358:	d117      	bne.n	802738a <__gethex+0x2ae>
 802735a:	9b00      	ldr	r3, [sp, #0]
 802735c:	42b3      	cmp	r3, r6
 802735e:	d114      	bne.n	802738a <__gethex+0x2ae>
 8027360:	2b01      	cmp	r3, #1
 8027362:	d10b      	bne.n	802737c <__gethex+0x2a0>
 8027364:	9b01      	ldr	r3, [sp, #4]
 8027366:	9a07      	ldr	r2, [sp, #28]
 8027368:	685b      	ldr	r3, [r3, #4]
 802736a:	2662      	movs	r6, #98	@ 0x62
 802736c:	6013      	str	r3, [r2, #0]
 802736e:	2301      	movs	r3, #1
 8027370:	9a02      	ldr	r2, [sp, #8]
 8027372:	612b      	str	r3, [r5, #16]
 8027374:	6013      	str	r3, [r2, #0]
 8027376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027378:	601d      	str	r5, [r3, #0]
 802737a:	e739      	b.n	80271f0 <__gethex+0x114>
 802737c:	9900      	ldr	r1, [sp, #0]
 802737e:	0028      	movs	r0, r5
 8027380:	3901      	subs	r1, #1
 8027382:	f000 ff0a 	bl	802819a <__any_on>
 8027386:	2800      	cmp	r0, #0
 8027388:	d1ec      	bne.n	8027364 <__gethex+0x288>
 802738a:	0029      	movs	r1, r5
 802738c:	9803      	ldr	r0, [sp, #12]
 802738e:	f000 faa9 	bl	80278e4 <_Bfree>
 8027392:	2300      	movs	r3, #0
 8027394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027396:	2650      	movs	r6, #80	@ 0x50
 8027398:	6013      	str	r3, [r2, #0]
 802739a:	e729      	b.n	80271f0 <__gethex+0x114>
 802739c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802739e:	2b00      	cmp	r3, #0
 80273a0:	d1f3      	bne.n	802738a <__gethex+0x2ae>
 80273a2:	e7df      	b.n	8027364 <__gethex+0x288>
 80273a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d1dc      	bne.n	8027364 <__gethex+0x288>
 80273aa:	e7ee      	b.n	802738a <__gethex+0x2ae>
 80273ac:	0802e728 	.word	0x0802e728
 80273b0:	0802e7e2 	.word	0x0802e7e2
 80273b4:	0802e7f3 	.word	0x0802e7f3
 80273b8:	1e77      	subs	r7, r6, #1
 80273ba:	2c00      	cmp	r4, #0
 80273bc:	d12f      	bne.n	802741e <__gethex+0x342>
 80273be:	2f00      	cmp	r7, #0
 80273c0:	d004      	beq.n	80273cc <__gethex+0x2f0>
 80273c2:	0039      	movs	r1, r7
 80273c4:	0028      	movs	r0, r5
 80273c6:	f000 fee8 	bl	802819a <__any_on>
 80273ca:	0004      	movs	r4, r0
 80273cc:	231f      	movs	r3, #31
 80273ce:	117a      	asrs	r2, r7, #5
 80273d0:	401f      	ands	r7, r3
 80273d2:	3b1e      	subs	r3, #30
 80273d4:	40bb      	lsls	r3, r7
 80273d6:	9902      	ldr	r1, [sp, #8]
 80273d8:	0092      	lsls	r2, r2, #2
 80273da:	5852      	ldr	r2, [r2, r1]
 80273dc:	421a      	tst	r2, r3
 80273de:	d001      	beq.n	80273e4 <__gethex+0x308>
 80273e0:	2302      	movs	r3, #2
 80273e2:	431c      	orrs	r4, r3
 80273e4:	9b00      	ldr	r3, [sp, #0]
 80273e6:	0031      	movs	r1, r6
 80273e8:	1b9b      	subs	r3, r3, r6
 80273ea:	2602      	movs	r6, #2
 80273ec:	0028      	movs	r0, r5
 80273ee:	9300      	str	r3, [sp, #0]
 80273f0:	f7ff fe0c 	bl	802700c <rshift>
 80273f4:	9b01      	ldr	r3, [sp, #4]
 80273f6:	685f      	ldr	r7, [r3, #4]
 80273f8:	2c00      	cmp	r4, #0
 80273fa:	d03f      	beq.n	802747c <__gethex+0x3a0>
 80273fc:	9b01      	ldr	r3, [sp, #4]
 80273fe:	68db      	ldr	r3, [r3, #12]
 8027400:	2b02      	cmp	r3, #2
 8027402:	d010      	beq.n	8027426 <__gethex+0x34a>
 8027404:	2b03      	cmp	r3, #3
 8027406:	d012      	beq.n	802742e <__gethex+0x352>
 8027408:	2b01      	cmp	r3, #1
 802740a:	d106      	bne.n	802741a <__gethex+0x33e>
 802740c:	07a2      	lsls	r2, r4, #30
 802740e:	d504      	bpl.n	802741a <__gethex+0x33e>
 8027410:	9a02      	ldr	r2, [sp, #8]
 8027412:	6812      	ldr	r2, [r2, #0]
 8027414:	4314      	orrs	r4, r2
 8027416:	421c      	tst	r4, r3
 8027418:	d10c      	bne.n	8027434 <__gethex+0x358>
 802741a:	2310      	movs	r3, #16
 802741c:	e02d      	b.n	802747a <__gethex+0x39e>
 802741e:	2401      	movs	r4, #1
 8027420:	e7d4      	b.n	80273cc <__gethex+0x2f0>
 8027422:	2601      	movs	r6, #1
 8027424:	e7e8      	b.n	80273f8 <__gethex+0x31c>
 8027426:	2301      	movs	r3, #1
 8027428:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802742a:	1a9b      	subs	r3, r3, r2
 802742c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802742e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027430:	2b00      	cmp	r3, #0
 8027432:	d0f2      	beq.n	802741a <__gethex+0x33e>
 8027434:	692b      	ldr	r3, [r5, #16]
 8027436:	2000      	movs	r0, #0
 8027438:	9302      	str	r3, [sp, #8]
 802743a:	009b      	lsls	r3, r3, #2
 802743c:	9304      	str	r3, [sp, #16]
 802743e:	002b      	movs	r3, r5
 8027440:	9a04      	ldr	r2, [sp, #16]
 8027442:	3314      	adds	r3, #20
 8027444:	1899      	adds	r1, r3, r2
 8027446:	681a      	ldr	r2, [r3, #0]
 8027448:	1c54      	adds	r4, r2, #1
 802744a:	d01c      	beq.n	8027486 <__gethex+0x3aa>
 802744c:	3201      	adds	r2, #1
 802744e:	601a      	str	r2, [r3, #0]
 8027450:	002b      	movs	r3, r5
 8027452:	3314      	adds	r3, #20
 8027454:	2e02      	cmp	r6, #2
 8027456:	d13f      	bne.n	80274d8 <__gethex+0x3fc>
 8027458:	9a01      	ldr	r2, [sp, #4]
 802745a:	9900      	ldr	r1, [sp, #0]
 802745c:	6812      	ldr	r2, [r2, #0]
 802745e:	3a01      	subs	r2, #1
 8027460:	428a      	cmp	r2, r1
 8027462:	d109      	bne.n	8027478 <__gethex+0x39c>
 8027464:	000a      	movs	r2, r1
 8027466:	201f      	movs	r0, #31
 8027468:	4010      	ands	r0, r2
 802746a:	2201      	movs	r2, #1
 802746c:	4082      	lsls	r2, r0
 802746e:	1149      	asrs	r1, r1, #5
 8027470:	0089      	lsls	r1, r1, #2
 8027472:	58cb      	ldr	r3, [r1, r3]
 8027474:	4213      	tst	r3, r2
 8027476:	d13d      	bne.n	80274f4 <__gethex+0x418>
 8027478:	2320      	movs	r3, #32
 802747a:	431e      	orrs	r6, r3
 802747c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802747e:	601d      	str	r5, [r3, #0]
 8027480:	9b07      	ldr	r3, [sp, #28]
 8027482:	601f      	str	r7, [r3, #0]
 8027484:	e6b4      	b.n	80271f0 <__gethex+0x114>
 8027486:	c301      	stmia	r3!, {r0}
 8027488:	4299      	cmp	r1, r3
 802748a:	d8dc      	bhi.n	8027446 <__gethex+0x36a>
 802748c:	68ab      	ldr	r3, [r5, #8]
 802748e:	9a02      	ldr	r2, [sp, #8]
 8027490:	429a      	cmp	r2, r3
 8027492:	db18      	blt.n	80274c6 <__gethex+0x3ea>
 8027494:	6869      	ldr	r1, [r5, #4]
 8027496:	9803      	ldr	r0, [sp, #12]
 8027498:	3101      	adds	r1, #1
 802749a:	f000 f9df 	bl	802785c <_Balloc>
 802749e:	1e04      	subs	r4, r0, #0
 80274a0:	d104      	bne.n	80274ac <__gethex+0x3d0>
 80274a2:	0022      	movs	r2, r4
 80274a4:	2184      	movs	r1, #132	@ 0x84
 80274a6:	4b1d      	ldr	r3, [pc, #116]	@ (802751c <__gethex+0x440>)
 80274a8:	481d      	ldr	r0, [pc, #116]	@ (8027520 <__gethex+0x444>)
 80274aa:	e6c4      	b.n	8027236 <__gethex+0x15a>
 80274ac:	0029      	movs	r1, r5
 80274ae:	692a      	ldr	r2, [r5, #16]
 80274b0:	310c      	adds	r1, #12
 80274b2:	3202      	adds	r2, #2
 80274b4:	0092      	lsls	r2, r2, #2
 80274b6:	300c      	adds	r0, #12
 80274b8:	f7fe fed8 	bl	802626c <memcpy>
 80274bc:	0029      	movs	r1, r5
 80274be:	9803      	ldr	r0, [sp, #12]
 80274c0:	f000 fa10 	bl	80278e4 <_Bfree>
 80274c4:	0025      	movs	r5, r4
 80274c6:	692b      	ldr	r3, [r5, #16]
 80274c8:	1c5a      	adds	r2, r3, #1
 80274ca:	612a      	str	r2, [r5, #16]
 80274cc:	2201      	movs	r2, #1
 80274ce:	3304      	adds	r3, #4
 80274d0:	009b      	lsls	r3, r3, #2
 80274d2:	18eb      	adds	r3, r5, r3
 80274d4:	605a      	str	r2, [r3, #4]
 80274d6:	e7bb      	b.n	8027450 <__gethex+0x374>
 80274d8:	692a      	ldr	r2, [r5, #16]
 80274da:	9902      	ldr	r1, [sp, #8]
 80274dc:	428a      	cmp	r2, r1
 80274de:	dd0b      	ble.n	80274f8 <__gethex+0x41c>
 80274e0:	2101      	movs	r1, #1
 80274e2:	0028      	movs	r0, r5
 80274e4:	f7ff fd92 	bl	802700c <rshift>
 80274e8:	9b01      	ldr	r3, [sp, #4]
 80274ea:	3701      	adds	r7, #1
 80274ec:	689b      	ldr	r3, [r3, #8]
 80274ee:	42bb      	cmp	r3, r7
 80274f0:	da00      	bge.n	80274f4 <__gethex+0x418>
 80274f2:	e6df      	b.n	80272b4 <__gethex+0x1d8>
 80274f4:	2601      	movs	r6, #1
 80274f6:	e7bf      	b.n	8027478 <__gethex+0x39c>
 80274f8:	221f      	movs	r2, #31
 80274fa:	9c00      	ldr	r4, [sp, #0]
 80274fc:	9900      	ldr	r1, [sp, #0]
 80274fe:	4014      	ands	r4, r2
 8027500:	4211      	tst	r1, r2
 8027502:	d0f7      	beq.n	80274f4 <__gethex+0x418>
 8027504:	9a04      	ldr	r2, [sp, #16]
 8027506:	189b      	adds	r3, r3, r2
 8027508:	3b04      	subs	r3, #4
 802750a:	6818      	ldr	r0, [r3, #0]
 802750c:	f000 fa9e 	bl	8027a4c <__hi0bits>
 8027510:	2320      	movs	r3, #32
 8027512:	1b1b      	subs	r3, r3, r4
 8027514:	4298      	cmp	r0, r3
 8027516:	dbe3      	blt.n	80274e0 <__gethex+0x404>
 8027518:	e7ec      	b.n	80274f4 <__gethex+0x418>
 802751a:	46c0      	nop			@ (mov r8, r8)
 802751c:	0802e7e2 	.word	0x0802e7e2
 8027520:	0802e7f3 	.word	0x0802e7f3

08027524 <L_shift>:
 8027524:	2308      	movs	r3, #8
 8027526:	b570      	push	{r4, r5, r6, lr}
 8027528:	2520      	movs	r5, #32
 802752a:	1a9a      	subs	r2, r3, r2
 802752c:	0092      	lsls	r2, r2, #2
 802752e:	1aad      	subs	r5, r5, r2
 8027530:	6843      	ldr	r3, [r0, #4]
 8027532:	6804      	ldr	r4, [r0, #0]
 8027534:	001e      	movs	r6, r3
 8027536:	40ae      	lsls	r6, r5
 8027538:	40d3      	lsrs	r3, r2
 802753a:	4334      	orrs	r4, r6
 802753c:	6004      	str	r4, [r0, #0]
 802753e:	6043      	str	r3, [r0, #4]
 8027540:	3004      	adds	r0, #4
 8027542:	4288      	cmp	r0, r1
 8027544:	d3f4      	bcc.n	8027530 <L_shift+0xc>
 8027546:	bd70      	pop	{r4, r5, r6, pc}

08027548 <__match>:
 8027548:	b530      	push	{r4, r5, lr}
 802754a:	6803      	ldr	r3, [r0, #0]
 802754c:	780c      	ldrb	r4, [r1, #0]
 802754e:	3301      	adds	r3, #1
 8027550:	2c00      	cmp	r4, #0
 8027552:	d102      	bne.n	802755a <__match+0x12>
 8027554:	6003      	str	r3, [r0, #0]
 8027556:	2001      	movs	r0, #1
 8027558:	bd30      	pop	{r4, r5, pc}
 802755a:	781a      	ldrb	r2, [r3, #0]
 802755c:	0015      	movs	r5, r2
 802755e:	3d41      	subs	r5, #65	@ 0x41
 8027560:	2d19      	cmp	r5, #25
 8027562:	d800      	bhi.n	8027566 <__match+0x1e>
 8027564:	3220      	adds	r2, #32
 8027566:	3101      	adds	r1, #1
 8027568:	42a2      	cmp	r2, r4
 802756a:	d0ef      	beq.n	802754c <__match+0x4>
 802756c:	2000      	movs	r0, #0
 802756e:	e7f3      	b.n	8027558 <__match+0x10>

08027570 <__hexnan>:
 8027570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027572:	680b      	ldr	r3, [r1, #0]
 8027574:	b08b      	sub	sp, #44	@ 0x2c
 8027576:	9201      	str	r2, [sp, #4]
 8027578:	9901      	ldr	r1, [sp, #4]
 802757a:	115a      	asrs	r2, r3, #5
 802757c:	0092      	lsls	r2, r2, #2
 802757e:	188a      	adds	r2, r1, r2
 8027580:	9202      	str	r2, [sp, #8]
 8027582:	0019      	movs	r1, r3
 8027584:	221f      	movs	r2, #31
 8027586:	4011      	ands	r1, r2
 8027588:	9008      	str	r0, [sp, #32]
 802758a:	9106      	str	r1, [sp, #24]
 802758c:	4213      	tst	r3, r2
 802758e:	d002      	beq.n	8027596 <__hexnan+0x26>
 8027590:	9b02      	ldr	r3, [sp, #8]
 8027592:	3304      	adds	r3, #4
 8027594:	9302      	str	r3, [sp, #8]
 8027596:	9b02      	ldr	r3, [sp, #8]
 8027598:	2500      	movs	r5, #0
 802759a:	1f1f      	subs	r7, r3, #4
 802759c:	003e      	movs	r6, r7
 802759e:	003c      	movs	r4, r7
 80275a0:	9b08      	ldr	r3, [sp, #32]
 80275a2:	603d      	str	r5, [r7, #0]
 80275a4:	681b      	ldr	r3, [r3, #0]
 80275a6:	9507      	str	r5, [sp, #28]
 80275a8:	9305      	str	r3, [sp, #20]
 80275aa:	9503      	str	r5, [sp, #12]
 80275ac:	9b05      	ldr	r3, [sp, #20]
 80275ae:	3301      	adds	r3, #1
 80275b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80275b2:	9b05      	ldr	r3, [sp, #20]
 80275b4:	785b      	ldrb	r3, [r3, #1]
 80275b6:	9304      	str	r3, [sp, #16]
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	d028      	beq.n	802760e <__hexnan+0x9e>
 80275bc:	9804      	ldr	r0, [sp, #16]
 80275be:	f7ff fd78 	bl	80270b2 <__hexdig_fun>
 80275c2:	2800      	cmp	r0, #0
 80275c4:	d155      	bne.n	8027672 <__hexnan+0x102>
 80275c6:	9b04      	ldr	r3, [sp, #16]
 80275c8:	2b20      	cmp	r3, #32
 80275ca:	d819      	bhi.n	8027600 <__hexnan+0x90>
 80275cc:	9b03      	ldr	r3, [sp, #12]
 80275ce:	9a07      	ldr	r2, [sp, #28]
 80275d0:	4293      	cmp	r3, r2
 80275d2:	dd12      	ble.n	80275fa <__hexnan+0x8a>
 80275d4:	42b4      	cmp	r4, r6
 80275d6:	d206      	bcs.n	80275e6 <__hexnan+0x76>
 80275d8:	2d07      	cmp	r5, #7
 80275da:	dc04      	bgt.n	80275e6 <__hexnan+0x76>
 80275dc:	002a      	movs	r2, r5
 80275de:	0031      	movs	r1, r6
 80275e0:	0020      	movs	r0, r4
 80275e2:	f7ff ff9f 	bl	8027524 <L_shift>
 80275e6:	9b01      	ldr	r3, [sp, #4]
 80275e8:	2508      	movs	r5, #8
 80275ea:	429c      	cmp	r4, r3
 80275ec:	d905      	bls.n	80275fa <__hexnan+0x8a>
 80275ee:	1f26      	subs	r6, r4, #4
 80275f0:	2500      	movs	r5, #0
 80275f2:	0034      	movs	r4, r6
 80275f4:	9b03      	ldr	r3, [sp, #12]
 80275f6:	6035      	str	r5, [r6, #0]
 80275f8:	9307      	str	r3, [sp, #28]
 80275fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80275fc:	9305      	str	r3, [sp, #20]
 80275fe:	e7d5      	b.n	80275ac <__hexnan+0x3c>
 8027600:	9b04      	ldr	r3, [sp, #16]
 8027602:	2b29      	cmp	r3, #41	@ 0x29
 8027604:	d15a      	bne.n	80276bc <__hexnan+0x14c>
 8027606:	9b05      	ldr	r3, [sp, #20]
 8027608:	9a08      	ldr	r2, [sp, #32]
 802760a:	3302      	adds	r3, #2
 802760c:	6013      	str	r3, [r2, #0]
 802760e:	9b03      	ldr	r3, [sp, #12]
 8027610:	2b00      	cmp	r3, #0
 8027612:	d053      	beq.n	80276bc <__hexnan+0x14c>
 8027614:	42b4      	cmp	r4, r6
 8027616:	d206      	bcs.n	8027626 <__hexnan+0xb6>
 8027618:	2d07      	cmp	r5, #7
 802761a:	dc04      	bgt.n	8027626 <__hexnan+0xb6>
 802761c:	002a      	movs	r2, r5
 802761e:	0031      	movs	r1, r6
 8027620:	0020      	movs	r0, r4
 8027622:	f7ff ff7f 	bl	8027524 <L_shift>
 8027626:	9b01      	ldr	r3, [sp, #4]
 8027628:	429c      	cmp	r4, r3
 802762a:	d936      	bls.n	802769a <__hexnan+0x12a>
 802762c:	001a      	movs	r2, r3
 802762e:	0023      	movs	r3, r4
 8027630:	cb02      	ldmia	r3!, {r1}
 8027632:	c202      	stmia	r2!, {r1}
 8027634:	429f      	cmp	r7, r3
 8027636:	d2fb      	bcs.n	8027630 <__hexnan+0xc0>
 8027638:	9b02      	ldr	r3, [sp, #8]
 802763a:	1c62      	adds	r2, r4, #1
 802763c:	1ed9      	subs	r1, r3, #3
 802763e:	2304      	movs	r3, #4
 8027640:	4291      	cmp	r1, r2
 8027642:	d305      	bcc.n	8027650 <__hexnan+0xe0>
 8027644:	9b02      	ldr	r3, [sp, #8]
 8027646:	3b04      	subs	r3, #4
 8027648:	1b1b      	subs	r3, r3, r4
 802764a:	089b      	lsrs	r3, r3, #2
 802764c:	3301      	adds	r3, #1
 802764e:	009b      	lsls	r3, r3, #2
 8027650:	9a01      	ldr	r2, [sp, #4]
 8027652:	18d3      	adds	r3, r2, r3
 8027654:	2200      	movs	r2, #0
 8027656:	c304      	stmia	r3!, {r2}
 8027658:	429f      	cmp	r7, r3
 802765a:	d2fc      	bcs.n	8027656 <__hexnan+0xe6>
 802765c:	683b      	ldr	r3, [r7, #0]
 802765e:	2b00      	cmp	r3, #0
 8027660:	d104      	bne.n	802766c <__hexnan+0xfc>
 8027662:	9b01      	ldr	r3, [sp, #4]
 8027664:	429f      	cmp	r7, r3
 8027666:	d127      	bne.n	80276b8 <__hexnan+0x148>
 8027668:	2301      	movs	r3, #1
 802766a:	603b      	str	r3, [r7, #0]
 802766c:	2005      	movs	r0, #5
 802766e:	b00b      	add	sp, #44	@ 0x2c
 8027670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027672:	9b03      	ldr	r3, [sp, #12]
 8027674:	3501      	adds	r5, #1
 8027676:	3301      	adds	r3, #1
 8027678:	9303      	str	r3, [sp, #12]
 802767a:	2d08      	cmp	r5, #8
 802767c:	dd06      	ble.n	802768c <__hexnan+0x11c>
 802767e:	9b01      	ldr	r3, [sp, #4]
 8027680:	429c      	cmp	r4, r3
 8027682:	d9ba      	bls.n	80275fa <__hexnan+0x8a>
 8027684:	2300      	movs	r3, #0
 8027686:	2501      	movs	r5, #1
 8027688:	3c04      	subs	r4, #4
 802768a:	6023      	str	r3, [r4, #0]
 802768c:	220f      	movs	r2, #15
 802768e:	6823      	ldr	r3, [r4, #0]
 8027690:	4010      	ands	r0, r2
 8027692:	011b      	lsls	r3, r3, #4
 8027694:	4303      	orrs	r3, r0
 8027696:	6023      	str	r3, [r4, #0]
 8027698:	e7af      	b.n	80275fa <__hexnan+0x8a>
 802769a:	9b06      	ldr	r3, [sp, #24]
 802769c:	2b00      	cmp	r3, #0
 802769e:	d0dd      	beq.n	802765c <__hexnan+0xec>
 80276a0:	2320      	movs	r3, #32
 80276a2:	9a06      	ldr	r2, [sp, #24]
 80276a4:	9902      	ldr	r1, [sp, #8]
 80276a6:	1a9b      	subs	r3, r3, r2
 80276a8:	2201      	movs	r2, #1
 80276aa:	4252      	negs	r2, r2
 80276ac:	40da      	lsrs	r2, r3
 80276ae:	3904      	subs	r1, #4
 80276b0:	680b      	ldr	r3, [r1, #0]
 80276b2:	4013      	ands	r3, r2
 80276b4:	600b      	str	r3, [r1, #0]
 80276b6:	e7d1      	b.n	802765c <__hexnan+0xec>
 80276b8:	3f04      	subs	r7, #4
 80276ba:	e7cf      	b.n	802765c <__hexnan+0xec>
 80276bc:	2004      	movs	r0, #4
 80276be:	e7d6      	b.n	802766e <__hexnan+0xfe>

080276c0 <malloc>:
 80276c0:	b510      	push	{r4, lr}
 80276c2:	4b03      	ldr	r3, [pc, #12]	@ (80276d0 <malloc+0x10>)
 80276c4:	0001      	movs	r1, r0
 80276c6:	6818      	ldr	r0, [r3, #0]
 80276c8:	f000 f826 	bl	8027718 <_malloc_r>
 80276cc:	bd10      	pop	{r4, pc}
 80276ce:	46c0      	nop			@ (mov r8, r8)
 80276d0:	200003ec 	.word	0x200003ec

080276d4 <sbrk_aligned>:
 80276d4:	b570      	push	{r4, r5, r6, lr}
 80276d6:	4e0f      	ldr	r6, [pc, #60]	@ (8027714 <sbrk_aligned+0x40>)
 80276d8:	000d      	movs	r5, r1
 80276da:	6831      	ldr	r1, [r6, #0]
 80276dc:	0004      	movs	r4, r0
 80276de:	2900      	cmp	r1, #0
 80276e0:	d102      	bne.n	80276e8 <sbrk_aligned+0x14>
 80276e2:	f001 f981 	bl	80289e8 <_sbrk_r>
 80276e6:	6030      	str	r0, [r6, #0]
 80276e8:	0029      	movs	r1, r5
 80276ea:	0020      	movs	r0, r4
 80276ec:	f001 f97c 	bl	80289e8 <_sbrk_r>
 80276f0:	1c43      	adds	r3, r0, #1
 80276f2:	d103      	bne.n	80276fc <sbrk_aligned+0x28>
 80276f4:	2501      	movs	r5, #1
 80276f6:	426d      	negs	r5, r5
 80276f8:	0028      	movs	r0, r5
 80276fa:	bd70      	pop	{r4, r5, r6, pc}
 80276fc:	2303      	movs	r3, #3
 80276fe:	1cc5      	adds	r5, r0, #3
 8027700:	439d      	bics	r5, r3
 8027702:	42a8      	cmp	r0, r5
 8027704:	d0f8      	beq.n	80276f8 <sbrk_aligned+0x24>
 8027706:	1a29      	subs	r1, r5, r0
 8027708:	0020      	movs	r0, r4
 802770a:	f001 f96d 	bl	80289e8 <_sbrk_r>
 802770e:	3001      	adds	r0, #1
 8027710:	d1f2      	bne.n	80276f8 <sbrk_aligned+0x24>
 8027712:	e7ef      	b.n	80276f4 <sbrk_aligned+0x20>
 8027714:	2000376c 	.word	0x2000376c

08027718 <_malloc_r>:
 8027718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802771a:	2203      	movs	r2, #3
 802771c:	1ccb      	adds	r3, r1, #3
 802771e:	4393      	bics	r3, r2
 8027720:	3308      	adds	r3, #8
 8027722:	0005      	movs	r5, r0
 8027724:	001f      	movs	r7, r3
 8027726:	2b0c      	cmp	r3, #12
 8027728:	d234      	bcs.n	8027794 <_malloc_r+0x7c>
 802772a:	270c      	movs	r7, #12
 802772c:	42b9      	cmp	r1, r7
 802772e:	d833      	bhi.n	8027798 <_malloc_r+0x80>
 8027730:	0028      	movs	r0, r5
 8027732:	f000 f883 	bl	802783c <__malloc_lock>
 8027736:	4e37      	ldr	r6, [pc, #220]	@ (8027814 <_malloc_r+0xfc>)
 8027738:	6833      	ldr	r3, [r6, #0]
 802773a:	001c      	movs	r4, r3
 802773c:	2c00      	cmp	r4, #0
 802773e:	d12f      	bne.n	80277a0 <_malloc_r+0x88>
 8027740:	0039      	movs	r1, r7
 8027742:	0028      	movs	r0, r5
 8027744:	f7ff ffc6 	bl	80276d4 <sbrk_aligned>
 8027748:	0004      	movs	r4, r0
 802774a:	1c43      	adds	r3, r0, #1
 802774c:	d15f      	bne.n	802780e <_malloc_r+0xf6>
 802774e:	6834      	ldr	r4, [r6, #0]
 8027750:	9400      	str	r4, [sp, #0]
 8027752:	9b00      	ldr	r3, [sp, #0]
 8027754:	2b00      	cmp	r3, #0
 8027756:	d14a      	bne.n	80277ee <_malloc_r+0xd6>
 8027758:	2c00      	cmp	r4, #0
 802775a:	d052      	beq.n	8027802 <_malloc_r+0xea>
 802775c:	6823      	ldr	r3, [r4, #0]
 802775e:	0028      	movs	r0, r5
 8027760:	18e3      	adds	r3, r4, r3
 8027762:	9900      	ldr	r1, [sp, #0]
 8027764:	9301      	str	r3, [sp, #4]
 8027766:	f001 f93f 	bl	80289e8 <_sbrk_r>
 802776a:	9b01      	ldr	r3, [sp, #4]
 802776c:	4283      	cmp	r3, r0
 802776e:	d148      	bne.n	8027802 <_malloc_r+0xea>
 8027770:	6823      	ldr	r3, [r4, #0]
 8027772:	0028      	movs	r0, r5
 8027774:	1aff      	subs	r7, r7, r3
 8027776:	0039      	movs	r1, r7
 8027778:	f7ff ffac 	bl	80276d4 <sbrk_aligned>
 802777c:	3001      	adds	r0, #1
 802777e:	d040      	beq.n	8027802 <_malloc_r+0xea>
 8027780:	6823      	ldr	r3, [r4, #0]
 8027782:	19db      	adds	r3, r3, r7
 8027784:	6023      	str	r3, [r4, #0]
 8027786:	6833      	ldr	r3, [r6, #0]
 8027788:	685a      	ldr	r2, [r3, #4]
 802778a:	2a00      	cmp	r2, #0
 802778c:	d133      	bne.n	80277f6 <_malloc_r+0xde>
 802778e:	9b00      	ldr	r3, [sp, #0]
 8027790:	6033      	str	r3, [r6, #0]
 8027792:	e019      	b.n	80277c8 <_malloc_r+0xb0>
 8027794:	2b00      	cmp	r3, #0
 8027796:	dac9      	bge.n	802772c <_malloc_r+0x14>
 8027798:	230c      	movs	r3, #12
 802779a:	602b      	str	r3, [r5, #0]
 802779c:	2000      	movs	r0, #0
 802779e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80277a0:	6821      	ldr	r1, [r4, #0]
 80277a2:	1bc9      	subs	r1, r1, r7
 80277a4:	d420      	bmi.n	80277e8 <_malloc_r+0xd0>
 80277a6:	290b      	cmp	r1, #11
 80277a8:	d90a      	bls.n	80277c0 <_malloc_r+0xa8>
 80277aa:	19e2      	adds	r2, r4, r7
 80277ac:	6027      	str	r7, [r4, #0]
 80277ae:	42a3      	cmp	r3, r4
 80277b0:	d104      	bne.n	80277bc <_malloc_r+0xa4>
 80277b2:	6032      	str	r2, [r6, #0]
 80277b4:	6863      	ldr	r3, [r4, #4]
 80277b6:	6011      	str	r1, [r2, #0]
 80277b8:	6053      	str	r3, [r2, #4]
 80277ba:	e005      	b.n	80277c8 <_malloc_r+0xb0>
 80277bc:	605a      	str	r2, [r3, #4]
 80277be:	e7f9      	b.n	80277b4 <_malloc_r+0x9c>
 80277c0:	6862      	ldr	r2, [r4, #4]
 80277c2:	42a3      	cmp	r3, r4
 80277c4:	d10e      	bne.n	80277e4 <_malloc_r+0xcc>
 80277c6:	6032      	str	r2, [r6, #0]
 80277c8:	0028      	movs	r0, r5
 80277ca:	f000 f83f 	bl	802784c <__malloc_unlock>
 80277ce:	0020      	movs	r0, r4
 80277d0:	2207      	movs	r2, #7
 80277d2:	300b      	adds	r0, #11
 80277d4:	1d23      	adds	r3, r4, #4
 80277d6:	4390      	bics	r0, r2
 80277d8:	1ac2      	subs	r2, r0, r3
 80277da:	4298      	cmp	r0, r3
 80277dc:	d0df      	beq.n	802779e <_malloc_r+0x86>
 80277de:	1a1b      	subs	r3, r3, r0
 80277e0:	50a3      	str	r3, [r4, r2]
 80277e2:	e7dc      	b.n	802779e <_malloc_r+0x86>
 80277e4:	605a      	str	r2, [r3, #4]
 80277e6:	e7ef      	b.n	80277c8 <_malloc_r+0xb0>
 80277e8:	0023      	movs	r3, r4
 80277ea:	6864      	ldr	r4, [r4, #4]
 80277ec:	e7a6      	b.n	802773c <_malloc_r+0x24>
 80277ee:	9c00      	ldr	r4, [sp, #0]
 80277f0:	6863      	ldr	r3, [r4, #4]
 80277f2:	9300      	str	r3, [sp, #0]
 80277f4:	e7ad      	b.n	8027752 <_malloc_r+0x3a>
 80277f6:	001a      	movs	r2, r3
 80277f8:	685b      	ldr	r3, [r3, #4]
 80277fa:	42a3      	cmp	r3, r4
 80277fc:	d1fb      	bne.n	80277f6 <_malloc_r+0xde>
 80277fe:	2300      	movs	r3, #0
 8027800:	e7da      	b.n	80277b8 <_malloc_r+0xa0>
 8027802:	230c      	movs	r3, #12
 8027804:	0028      	movs	r0, r5
 8027806:	602b      	str	r3, [r5, #0]
 8027808:	f000 f820 	bl	802784c <__malloc_unlock>
 802780c:	e7c6      	b.n	802779c <_malloc_r+0x84>
 802780e:	6007      	str	r7, [r0, #0]
 8027810:	e7da      	b.n	80277c8 <_malloc_r+0xb0>
 8027812:	46c0      	nop			@ (mov r8, r8)
 8027814:	20003770 	.word	0x20003770

08027818 <__ascii_mbtowc>:
 8027818:	b082      	sub	sp, #8
 802781a:	2900      	cmp	r1, #0
 802781c:	d100      	bne.n	8027820 <__ascii_mbtowc+0x8>
 802781e:	a901      	add	r1, sp, #4
 8027820:	1e10      	subs	r0, r2, #0
 8027822:	d006      	beq.n	8027832 <__ascii_mbtowc+0x1a>
 8027824:	2b00      	cmp	r3, #0
 8027826:	d006      	beq.n	8027836 <__ascii_mbtowc+0x1e>
 8027828:	7813      	ldrb	r3, [r2, #0]
 802782a:	600b      	str	r3, [r1, #0]
 802782c:	7810      	ldrb	r0, [r2, #0]
 802782e:	1e43      	subs	r3, r0, #1
 8027830:	4198      	sbcs	r0, r3
 8027832:	b002      	add	sp, #8
 8027834:	4770      	bx	lr
 8027836:	2002      	movs	r0, #2
 8027838:	4240      	negs	r0, r0
 802783a:	e7fa      	b.n	8027832 <__ascii_mbtowc+0x1a>

0802783c <__malloc_lock>:
 802783c:	b510      	push	{r4, lr}
 802783e:	4802      	ldr	r0, [pc, #8]	@ (8027848 <__malloc_lock+0xc>)
 8027840:	f7fe fd07 	bl	8026252 <__retarget_lock_acquire_recursive>
 8027844:	bd10      	pop	{r4, pc}
 8027846:	46c0      	nop			@ (mov r8, r8)
 8027848:	20003768 	.word	0x20003768

0802784c <__malloc_unlock>:
 802784c:	b510      	push	{r4, lr}
 802784e:	4802      	ldr	r0, [pc, #8]	@ (8027858 <__malloc_unlock+0xc>)
 8027850:	f7fe fd00 	bl	8026254 <__retarget_lock_release_recursive>
 8027854:	bd10      	pop	{r4, pc}
 8027856:	46c0      	nop			@ (mov r8, r8)
 8027858:	20003768 	.word	0x20003768

0802785c <_Balloc>:
 802785c:	b570      	push	{r4, r5, r6, lr}
 802785e:	69c5      	ldr	r5, [r0, #28]
 8027860:	0006      	movs	r6, r0
 8027862:	000c      	movs	r4, r1
 8027864:	2d00      	cmp	r5, #0
 8027866:	d10e      	bne.n	8027886 <_Balloc+0x2a>
 8027868:	2010      	movs	r0, #16
 802786a:	f7ff ff29 	bl	80276c0 <malloc>
 802786e:	1e02      	subs	r2, r0, #0
 8027870:	61f0      	str	r0, [r6, #28]
 8027872:	d104      	bne.n	802787e <_Balloc+0x22>
 8027874:	216b      	movs	r1, #107	@ 0x6b
 8027876:	4b19      	ldr	r3, [pc, #100]	@ (80278dc <_Balloc+0x80>)
 8027878:	4819      	ldr	r0, [pc, #100]	@ (80278e0 <_Balloc+0x84>)
 802787a:	f001 f8c7 	bl	8028a0c <__assert_func>
 802787e:	6045      	str	r5, [r0, #4]
 8027880:	6085      	str	r5, [r0, #8]
 8027882:	6005      	str	r5, [r0, #0]
 8027884:	60c5      	str	r5, [r0, #12]
 8027886:	69f5      	ldr	r5, [r6, #28]
 8027888:	68eb      	ldr	r3, [r5, #12]
 802788a:	2b00      	cmp	r3, #0
 802788c:	d013      	beq.n	80278b6 <_Balloc+0x5a>
 802788e:	69f3      	ldr	r3, [r6, #28]
 8027890:	00a2      	lsls	r2, r4, #2
 8027892:	68db      	ldr	r3, [r3, #12]
 8027894:	189b      	adds	r3, r3, r2
 8027896:	6818      	ldr	r0, [r3, #0]
 8027898:	2800      	cmp	r0, #0
 802789a:	d118      	bne.n	80278ce <_Balloc+0x72>
 802789c:	2101      	movs	r1, #1
 802789e:	000d      	movs	r5, r1
 80278a0:	40a5      	lsls	r5, r4
 80278a2:	1d6a      	adds	r2, r5, #5
 80278a4:	0030      	movs	r0, r6
 80278a6:	0092      	lsls	r2, r2, #2
 80278a8:	f001 f8ce 	bl	8028a48 <_calloc_r>
 80278ac:	2800      	cmp	r0, #0
 80278ae:	d00c      	beq.n	80278ca <_Balloc+0x6e>
 80278b0:	6044      	str	r4, [r0, #4]
 80278b2:	6085      	str	r5, [r0, #8]
 80278b4:	e00d      	b.n	80278d2 <_Balloc+0x76>
 80278b6:	2221      	movs	r2, #33	@ 0x21
 80278b8:	2104      	movs	r1, #4
 80278ba:	0030      	movs	r0, r6
 80278bc:	f001 f8c4 	bl	8028a48 <_calloc_r>
 80278c0:	69f3      	ldr	r3, [r6, #28]
 80278c2:	60e8      	str	r0, [r5, #12]
 80278c4:	68db      	ldr	r3, [r3, #12]
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d1e1      	bne.n	802788e <_Balloc+0x32>
 80278ca:	2000      	movs	r0, #0
 80278cc:	bd70      	pop	{r4, r5, r6, pc}
 80278ce:	6802      	ldr	r2, [r0, #0]
 80278d0:	601a      	str	r2, [r3, #0]
 80278d2:	2300      	movs	r3, #0
 80278d4:	6103      	str	r3, [r0, #16]
 80278d6:	60c3      	str	r3, [r0, #12]
 80278d8:	e7f8      	b.n	80278cc <_Balloc+0x70>
 80278da:	46c0      	nop			@ (mov r8, r8)
 80278dc:	0802e773 	.word	0x0802e773
 80278e0:	0802e853 	.word	0x0802e853

080278e4 <_Bfree>:
 80278e4:	b570      	push	{r4, r5, r6, lr}
 80278e6:	69c6      	ldr	r6, [r0, #28]
 80278e8:	0005      	movs	r5, r0
 80278ea:	000c      	movs	r4, r1
 80278ec:	2e00      	cmp	r6, #0
 80278ee:	d10e      	bne.n	802790e <_Bfree+0x2a>
 80278f0:	2010      	movs	r0, #16
 80278f2:	f7ff fee5 	bl	80276c0 <malloc>
 80278f6:	1e02      	subs	r2, r0, #0
 80278f8:	61e8      	str	r0, [r5, #28]
 80278fa:	d104      	bne.n	8027906 <_Bfree+0x22>
 80278fc:	218f      	movs	r1, #143	@ 0x8f
 80278fe:	4b09      	ldr	r3, [pc, #36]	@ (8027924 <_Bfree+0x40>)
 8027900:	4809      	ldr	r0, [pc, #36]	@ (8027928 <_Bfree+0x44>)
 8027902:	f001 f883 	bl	8028a0c <__assert_func>
 8027906:	6046      	str	r6, [r0, #4]
 8027908:	6086      	str	r6, [r0, #8]
 802790a:	6006      	str	r6, [r0, #0]
 802790c:	60c6      	str	r6, [r0, #12]
 802790e:	2c00      	cmp	r4, #0
 8027910:	d007      	beq.n	8027922 <_Bfree+0x3e>
 8027912:	69eb      	ldr	r3, [r5, #28]
 8027914:	6862      	ldr	r2, [r4, #4]
 8027916:	68db      	ldr	r3, [r3, #12]
 8027918:	0092      	lsls	r2, r2, #2
 802791a:	189b      	adds	r3, r3, r2
 802791c:	681a      	ldr	r2, [r3, #0]
 802791e:	6022      	str	r2, [r4, #0]
 8027920:	601c      	str	r4, [r3, #0]
 8027922:	bd70      	pop	{r4, r5, r6, pc}
 8027924:	0802e773 	.word	0x0802e773
 8027928:	0802e853 	.word	0x0802e853

0802792c <__multadd>:
 802792c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802792e:	000f      	movs	r7, r1
 8027930:	9001      	str	r0, [sp, #4]
 8027932:	000c      	movs	r4, r1
 8027934:	001e      	movs	r6, r3
 8027936:	2000      	movs	r0, #0
 8027938:	690d      	ldr	r5, [r1, #16]
 802793a:	3714      	adds	r7, #20
 802793c:	683b      	ldr	r3, [r7, #0]
 802793e:	3001      	adds	r0, #1
 8027940:	b299      	uxth	r1, r3
 8027942:	4351      	muls	r1, r2
 8027944:	0c1b      	lsrs	r3, r3, #16
 8027946:	4353      	muls	r3, r2
 8027948:	1989      	adds	r1, r1, r6
 802794a:	0c0e      	lsrs	r6, r1, #16
 802794c:	199b      	adds	r3, r3, r6
 802794e:	0c1e      	lsrs	r6, r3, #16
 8027950:	b289      	uxth	r1, r1
 8027952:	041b      	lsls	r3, r3, #16
 8027954:	185b      	adds	r3, r3, r1
 8027956:	c708      	stmia	r7!, {r3}
 8027958:	4285      	cmp	r5, r0
 802795a:	dcef      	bgt.n	802793c <__multadd+0x10>
 802795c:	2e00      	cmp	r6, #0
 802795e:	d022      	beq.n	80279a6 <__multadd+0x7a>
 8027960:	68a3      	ldr	r3, [r4, #8]
 8027962:	42ab      	cmp	r3, r5
 8027964:	dc19      	bgt.n	802799a <__multadd+0x6e>
 8027966:	6861      	ldr	r1, [r4, #4]
 8027968:	9801      	ldr	r0, [sp, #4]
 802796a:	3101      	adds	r1, #1
 802796c:	f7ff ff76 	bl	802785c <_Balloc>
 8027970:	1e07      	subs	r7, r0, #0
 8027972:	d105      	bne.n	8027980 <__multadd+0x54>
 8027974:	003a      	movs	r2, r7
 8027976:	21ba      	movs	r1, #186	@ 0xba
 8027978:	4b0c      	ldr	r3, [pc, #48]	@ (80279ac <__multadd+0x80>)
 802797a:	480d      	ldr	r0, [pc, #52]	@ (80279b0 <__multadd+0x84>)
 802797c:	f001 f846 	bl	8028a0c <__assert_func>
 8027980:	0021      	movs	r1, r4
 8027982:	6922      	ldr	r2, [r4, #16]
 8027984:	310c      	adds	r1, #12
 8027986:	3202      	adds	r2, #2
 8027988:	0092      	lsls	r2, r2, #2
 802798a:	300c      	adds	r0, #12
 802798c:	f7fe fc6e 	bl	802626c <memcpy>
 8027990:	0021      	movs	r1, r4
 8027992:	9801      	ldr	r0, [sp, #4]
 8027994:	f7ff ffa6 	bl	80278e4 <_Bfree>
 8027998:	003c      	movs	r4, r7
 802799a:	1d2b      	adds	r3, r5, #4
 802799c:	009b      	lsls	r3, r3, #2
 802799e:	18e3      	adds	r3, r4, r3
 80279a0:	3501      	adds	r5, #1
 80279a2:	605e      	str	r6, [r3, #4]
 80279a4:	6125      	str	r5, [r4, #16]
 80279a6:	0020      	movs	r0, r4
 80279a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80279aa:	46c0      	nop			@ (mov r8, r8)
 80279ac:	0802e7e2 	.word	0x0802e7e2
 80279b0:	0802e853 	.word	0x0802e853

080279b4 <__s2b>:
 80279b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80279b6:	0007      	movs	r7, r0
 80279b8:	0018      	movs	r0, r3
 80279ba:	000c      	movs	r4, r1
 80279bc:	3008      	adds	r0, #8
 80279be:	2109      	movs	r1, #9
 80279c0:	9301      	str	r3, [sp, #4]
 80279c2:	0015      	movs	r5, r2
 80279c4:	f7d8 fc78 	bl	80002b8 <__divsi3>
 80279c8:	2301      	movs	r3, #1
 80279ca:	2100      	movs	r1, #0
 80279cc:	4283      	cmp	r3, r0
 80279ce:	db0a      	blt.n	80279e6 <__s2b+0x32>
 80279d0:	0038      	movs	r0, r7
 80279d2:	f7ff ff43 	bl	802785c <_Balloc>
 80279d6:	1e01      	subs	r1, r0, #0
 80279d8:	d108      	bne.n	80279ec <__s2b+0x38>
 80279da:	000a      	movs	r2, r1
 80279dc:	4b19      	ldr	r3, [pc, #100]	@ (8027a44 <__s2b+0x90>)
 80279de:	481a      	ldr	r0, [pc, #104]	@ (8027a48 <__s2b+0x94>)
 80279e0:	31d3      	adds	r1, #211	@ 0xd3
 80279e2:	f001 f813 	bl	8028a0c <__assert_func>
 80279e6:	005b      	lsls	r3, r3, #1
 80279e8:	3101      	adds	r1, #1
 80279ea:	e7ef      	b.n	80279cc <__s2b+0x18>
 80279ec:	9b08      	ldr	r3, [sp, #32]
 80279ee:	6143      	str	r3, [r0, #20]
 80279f0:	2301      	movs	r3, #1
 80279f2:	6103      	str	r3, [r0, #16]
 80279f4:	2d09      	cmp	r5, #9
 80279f6:	dd18      	ble.n	8027a2a <__s2b+0x76>
 80279f8:	0023      	movs	r3, r4
 80279fa:	3309      	adds	r3, #9
 80279fc:	001e      	movs	r6, r3
 80279fe:	9300      	str	r3, [sp, #0]
 8027a00:	1964      	adds	r4, r4, r5
 8027a02:	7833      	ldrb	r3, [r6, #0]
 8027a04:	220a      	movs	r2, #10
 8027a06:	0038      	movs	r0, r7
 8027a08:	3b30      	subs	r3, #48	@ 0x30
 8027a0a:	f7ff ff8f 	bl	802792c <__multadd>
 8027a0e:	3601      	adds	r6, #1
 8027a10:	0001      	movs	r1, r0
 8027a12:	42a6      	cmp	r6, r4
 8027a14:	d1f5      	bne.n	8027a02 <__s2b+0x4e>
 8027a16:	002c      	movs	r4, r5
 8027a18:	9b00      	ldr	r3, [sp, #0]
 8027a1a:	3c08      	subs	r4, #8
 8027a1c:	191c      	adds	r4, r3, r4
 8027a1e:	002e      	movs	r6, r5
 8027a20:	9b01      	ldr	r3, [sp, #4]
 8027a22:	429e      	cmp	r6, r3
 8027a24:	db04      	blt.n	8027a30 <__s2b+0x7c>
 8027a26:	0008      	movs	r0, r1
 8027a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027a2a:	2509      	movs	r5, #9
 8027a2c:	340a      	adds	r4, #10
 8027a2e:	e7f6      	b.n	8027a1e <__s2b+0x6a>
 8027a30:	1b63      	subs	r3, r4, r5
 8027a32:	5d9b      	ldrb	r3, [r3, r6]
 8027a34:	220a      	movs	r2, #10
 8027a36:	0038      	movs	r0, r7
 8027a38:	3b30      	subs	r3, #48	@ 0x30
 8027a3a:	f7ff ff77 	bl	802792c <__multadd>
 8027a3e:	3601      	adds	r6, #1
 8027a40:	0001      	movs	r1, r0
 8027a42:	e7ed      	b.n	8027a20 <__s2b+0x6c>
 8027a44:	0802e7e2 	.word	0x0802e7e2
 8027a48:	0802e853 	.word	0x0802e853

08027a4c <__hi0bits>:
 8027a4c:	2280      	movs	r2, #128	@ 0x80
 8027a4e:	0003      	movs	r3, r0
 8027a50:	0252      	lsls	r2, r2, #9
 8027a52:	2000      	movs	r0, #0
 8027a54:	4293      	cmp	r3, r2
 8027a56:	d201      	bcs.n	8027a5c <__hi0bits+0x10>
 8027a58:	041b      	lsls	r3, r3, #16
 8027a5a:	3010      	adds	r0, #16
 8027a5c:	2280      	movs	r2, #128	@ 0x80
 8027a5e:	0452      	lsls	r2, r2, #17
 8027a60:	4293      	cmp	r3, r2
 8027a62:	d201      	bcs.n	8027a68 <__hi0bits+0x1c>
 8027a64:	3008      	adds	r0, #8
 8027a66:	021b      	lsls	r3, r3, #8
 8027a68:	2280      	movs	r2, #128	@ 0x80
 8027a6a:	0552      	lsls	r2, r2, #21
 8027a6c:	4293      	cmp	r3, r2
 8027a6e:	d201      	bcs.n	8027a74 <__hi0bits+0x28>
 8027a70:	3004      	adds	r0, #4
 8027a72:	011b      	lsls	r3, r3, #4
 8027a74:	2280      	movs	r2, #128	@ 0x80
 8027a76:	05d2      	lsls	r2, r2, #23
 8027a78:	4293      	cmp	r3, r2
 8027a7a:	d201      	bcs.n	8027a80 <__hi0bits+0x34>
 8027a7c:	3002      	adds	r0, #2
 8027a7e:	009b      	lsls	r3, r3, #2
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	db03      	blt.n	8027a8c <__hi0bits+0x40>
 8027a84:	3001      	adds	r0, #1
 8027a86:	4213      	tst	r3, r2
 8027a88:	d100      	bne.n	8027a8c <__hi0bits+0x40>
 8027a8a:	2020      	movs	r0, #32
 8027a8c:	4770      	bx	lr

08027a8e <__lo0bits>:
 8027a8e:	6803      	ldr	r3, [r0, #0]
 8027a90:	0001      	movs	r1, r0
 8027a92:	2207      	movs	r2, #7
 8027a94:	0018      	movs	r0, r3
 8027a96:	4010      	ands	r0, r2
 8027a98:	4213      	tst	r3, r2
 8027a9a:	d00d      	beq.n	8027ab8 <__lo0bits+0x2a>
 8027a9c:	3a06      	subs	r2, #6
 8027a9e:	2000      	movs	r0, #0
 8027aa0:	4213      	tst	r3, r2
 8027aa2:	d105      	bne.n	8027ab0 <__lo0bits+0x22>
 8027aa4:	3002      	adds	r0, #2
 8027aa6:	4203      	tst	r3, r0
 8027aa8:	d003      	beq.n	8027ab2 <__lo0bits+0x24>
 8027aaa:	40d3      	lsrs	r3, r2
 8027aac:	0010      	movs	r0, r2
 8027aae:	600b      	str	r3, [r1, #0]
 8027ab0:	4770      	bx	lr
 8027ab2:	089b      	lsrs	r3, r3, #2
 8027ab4:	600b      	str	r3, [r1, #0]
 8027ab6:	e7fb      	b.n	8027ab0 <__lo0bits+0x22>
 8027ab8:	b29a      	uxth	r2, r3
 8027aba:	2a00      	cmp	r2, #0
 8027abc:	d101      	bne.n	8027ac2 <__lo0bits+0x34>
 8027abe:	2010      	movs	r0, #16
 8027ac0:	0c1b      	lsrs	r3, r3, #16
 8027ac2:	b2da      	uxtb	r2, r3
 8027ac4:	2a00      	cmp	r2, #0
 8027ac6:	d101      	bne.n	8027acc <__lo0bits+0x3e>
 8027ac8:	3008      	adds	r0, #8
 8027aca:	0a1b      	lsrs	r3, r3, #8
 8027acc:	071a      	lsls	r2, r3, #28
 8027ace:	d101      	bne.n	8027ad4 <__lo0bits+0x46>
 8027ad0:	3004      	adds	r0, #4
 8027ad2:	091b      	lsrs	r3, r3, #4
 8027ad4:	079a      	lsls	r2, r3, #30
 8027ad6:	d101      	bne.n	8027adc <__lo0bits+0x4e>
 8027ad8:	3002      	adds	r0, #2
 8027ada:	089b      	lsrs	r3, r3, #2
 8027adc:	07da      	lsls	r2, r3, #31
 8027ade:	d4e9      	bmi.n	8027ab4 <__lo0bits+0x26>
 8027ae0:	3001      	adds	r0, #1
 8027ae2:	085b      	lsrs	r3, r3, #1
 8027ae4:	d1e6      	bne.n	8027ab4 <__lo0bits+0x26>
 8027ae6:	2020      	movs	r0, #32
 8027ae8:	e7e2      	b.n	8027ab0 <__lo0bits+0x22>
	...

08027aec <__i2b>:
 8027aec:	b510      	push	{r4, lr}
 8027aee:	000c      	movs	r4, r1
 8027af0:	2101      	movs	r1, #1
 8027af2:	f7ff feb3 	bl	802785c <_Balloc>
 8027af6:	2800      	cmp	r0, #0
 8027af8:	d107      	bne.n	8027b0a <__i2b+0x1e>
 8027afa:	2146      	movs	r1, #70	@ 0x46
 8027afc:	4c05      	ldr	r4, [pc, #20]	@ (8027b14 <__i2b+0x28>)
 8027afe:	0002      	movs	r2, r0
 8027b00:	4b05      	ldr	r3, [pc, #20]	@ (8027b18 <__i2b+0x2c>)
 8027b02:	0020      	movs	r0, r4
 8027b04:	31ff      	adds	r1, #255	@ 0xff
 8027b06:	f000 ff81 	bl	8028a0c <__assert_func>
 8027b0a:	2301      	movs	r3, #1
 8027b0c:	6144      	str	r4, [r0, #20]
 8027b0e:	6103      	str	r3, [r0, #16]
 8027b10:	bd10      	pop	{r4, pc}
 8027b12:	46c0      	nop			@ (mov r8, r8)
 8027b14:	0802e853 	.word	0x0802e853
 8027b18:	0802e7e2 	.word	0x0802e7e2

08027b1c <__multiply>:
 8027b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b1e:	0014      	movs	r4, r2
 8027b20:	690a      	ldr	r2, [r1, #16]
 8027b22:	6923      	ldr	r3, [r4, #16]
 8027b24:	000d      	movs	r5, r1
 8027b26:	b089      	sub	sp, #36	@ 0x24
 8027b28:	429a      	cmp	r2, r3
 8027b2a:	db02      	blt.n	8027b32 <__multiply+0x16>
 8027b2c:	0023      	movs	r3, r4
 8027b2e:	000c      	movs	r4, r1
 8027b30:	001d      	movs	r5, r3
 8027b32:	6927      	ldr	r7, [r4, #16]
 8027b34:	692e      	ldr	r6, [r5, #16]
 8027b36:	6861      	ldr	r1, [r4, #4]
 8027b38:	19bb      	adds	r3, r7, r6
 8027b3a:	9300      	str	r3, [sp, #0]
 8027b3c:	68a3      	ldr	r3, [r4, #8]
 8027b3e:	19ba      	adds	r2, r7, r6
 8027b40:	4293      	cmp	r3, r2
 8027b42:	da00      	bge.n	8027b46 <__multiply+0x2a>
 8027b44:	3101      	adds	r1, #1
 8027b46:	f7ff fe89 	bl	802785c <_Balloc>
 8027b4a:	4684      	mov	ip, r0
 8027b4c:	2800      	cmp	r0, #0
 8027b4e:	d106      	bne.n	8027b5e <__multiply+0x42>
 8027b50:	21b1      	movs	r1, #177	@ 0xb1
 8027b52:	4662      	mov	r2, ip
 8027b54:	4b44      	ldr	r3, [pc, #272]	@ (8027c68 <__multiply+0x14c>)
 8027b56:	4845      	ldr	r0, [pc, #276]	@ (8027c6c <__multiply+0x150>)
 8027b58:	0049      	lsls	r1, r1, #1
 8027b5a:	f000 ff57 	bl	8028a0c <__assert_func>
 8027b5e:	0002      	movs	r2, r0
 8027b60:	19bb      	adds	r3, r7, r6
 8027b62:	3214      	adds	r2, #20
 8027b64:	009b      	lsls	r3, r3, #2
 8027b66:	18d3      	adds	r3, r2, r3
 8027b68:	9301      	str	r3, [sp, #4]
 8027b6a:	2100      	movs	r1, #0
 8027b6c:	0013      	movs	r3, r2
 8027b6e:	9801      	ldr	r0, [sp, #4]
 8027b70:	4283      	cmp	r3, r0
 8027b72:	d328      	bcc.n	8027bc6 <__multiply+0xaa>
 8027b74:	0023      	movs	r3, r4
 8027b76:	00bf      	lsls	r7, r7, #2
 8027b78:	3314      	adds	r3, #20
 8027b7a:	9304      	str	r3, [sp, #16]
 8027b7c:	3514      	adds	r5, #20
 8027b7e:	19db      	adds	r3, r3, r7
 8027b80:	00b6      	lsls	r6, r6, #2
 8027b82:	9302      	str	r3, [sp, #8]
 8027b84:	19ab      	adds	r3, r5, r6
 8027b86:	9307      	str	r3, [sp, #28]
 8027b88:	2304      	movs	r3, #4
 8027b8a:	9305      	str	r3, [sp, #20]
 8027b8c:	0023      	movs	r3, r4
 8027b8e:	9902      	ldr	r1, [sp, #8]
 8027b90:	3315      	adds	r3, #21
 8027b92:	4299      	cmp	r1, r3
 8027b94:	d305      	bcc.n	8027ba2 <__multiply+0x86>
 8027b96:	1b0c      	subs	r4, r1, r4
 8027b98:	3c15      	subs	r4, #21
 8027b9a:	08a4      	lsrs	r4, r4, #2
 8027b9c:	3401      	adds	r4, #1
 8027b9e:	00a3      	lsls	r3, r4, #2
 8027ba0:	9305      	str	r3, [sp, #20]
 8027ba2:	9b07      	ldr	r3, [sp, #28]
 8027ba4:	429d      	cmp	r5, r3
 8027ba6:	d310      	bcc.n	8027bca <__multiply+0xae>
 8027ba8:	9b00      	ldr	r3, [sp, #0]
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	dd05      	ble.n	8027bba <__multiply+0x9e>
 8027bae:	9b01      	ldr	r3, [sp, #4]
 8027bb0:	3b04      	subs	r3, #4
 8027bb2:	9301      	str	r3, [sp, #4]
 8027bb4:	681b      	ldr	r3, [r3, #0]
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	d052      	beq.n	8027c60 <__multiply+0x144>
 8027bba:	4663      	mov	r3, ip
 8027bbc:	4660      	mov	r0, ip
 8027bbe:	9a00      	ldr	r2, [sp, #0]
 8027bc0:	611a      	str	r2, [r3, #16]
 8027bc2:	b009      	add	sp, #36	@ 0x24
 8027bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027bc6:	c302      	stmia	r3!, {r1}
 8027bc8:	e7d1      	b.n	8027b6e <__multiply+0x52>
 8027bca:	682c      	ldr	r4, [r5, #0]
 8027bcc:	b2a4      	uxth	r4, r4
 8027bce:	2c00      	cmp	r4, #0
 8027bd0:	d01f      	beq.n	8027c12 <__multiply+0xf6>
 8027bd2:	2300      	movs	r3, #0
 8027bd4:	0017      	movs	r7, r2
 8027bd6:	9e04      	ldr	r6, [sp, #16]
 8027bd8:	9303      	str	r3, [sp, #12]
 8027bda:	ce08      	ldmia	r6!, {r3}
 8027bdc:	6839      	ldr	r1, [r7, #0]
 8027bde:	9306      	str	r3, [sp, #24]
 8027be0:	466b      	mov	r3, sp
 8027be2:	8b1b      	ldrh	r3, [r3, #24]
 8027be4:	b288      	uxth	r0, r1
 8027be6:	4363      	muls	r3, r4
 8027be8:	181b      	adds	r3, r3, r0
 8027bea:	9803      	ldr	r0, [sp, #12]
 8027bec:	0c09      	lsrs	r1, r1, #16
 8027bee:	181b      	adds	r3, r3, r0
 8027bf0:	9806      	ldr	r0, [sp, #24]
 8027bf2:	0c00      	lsrs	r0, r0, #16
 8027bf4:	4360      	muls	r0, r4
 8027bf6:	1840      	adds	r0, r0, r1
 8027bf8:	0c19      	lsrs	r1, r3, #16
 8027bfa:	1841      	adds	r1, r0, r1
 8027bfc:	0c08      	lsrs	r0, r1, #16
 8027bfe:	b29b      	uxth	r3, r3
 8027c00:	0409      	lsls	r1, r1, #16
 8027c02:	4319      	orrs	r1, r3
 8027c04:	9b02      	ldr	r3, [sp, #8]
 8027c06:	9003      	str	r0, [sp, #12]
 8027c08:	c702      	stmia	r7!, {r1}
 8027c0a:	42b3      	cmp	r3, r6
 8027c0c:	d8e5      	bhi.n	8027bda <__multiply+0xbe>
 8027c0e:	9b05      	ldr	r3, [sp, #20]
 8027c10:	50d0      	str	r0, [r2, r3]
 8027c12:	682c      	ldr	r4, [r5, #0]
 8027c14:	0c24      	lsrs	r4, r4, #16
 8027c16:	d020      	beq.n	8027c5a <__multiply+0x13e>
 8027c18:	2100      	movs	r1, #0
 8027c1a:	0010      	movs	r0, r2
 8027c1c:	6813      	ldr	r3, [r2, #0]
 8027c1e:	9e04      	ldr	r6, [sp, #16]
 8027c20:	9103      	str	r1, [sp, #12]
 8027c22:	6831      	ldr	r1, [r6, #0]
 8027c24:	6807      	ldr	r7, [r0, #0]
 8027c26:	b289      	uxth	r1, r1
 8027c28:	4361      	muls	r1, r4
 8027c2a:	0c3f      	lsrs	r7, r7, #16
 8027c2c:	19c9      	adds	r1, r1, r7
 8027c2e:	9f03      	ldr	r7, [sp, #12]
 8027c30:	b29b      	uxth	r3, r3
 8027c32:	19c9      	adds	r1, r1, r7
 8027c34:	040f      	lsls	r7, r1, #16
 8027c36:	431f      	orrs	r7, r3
 8027c38:	6007      	str	r7, [r0, #0]
 8027c3a:	ce80      	ldmia	r6!, {r7}
 8027c3c:	6843      	ldr	r3, [r0, #4]
 8027c3e:	0c3f      	lsrs	r7, r7, #16
 8027c40:	4367      	muls	r7, r4
 8027c42:	b29b      	uxth	r3, r3
 8027c44:	0c09      	lsrs	r1, r1, #16
 8027c46:	18fb      	adds	r3, r7, r3
 8027c48:	185b      	adds	r3, r3, r1
 8027c4a:	0c19      	lsrs	r1, r3, #16
 8027c4c:	9103      	str	r1, [sp, #12]
 8027c4e:	9902      	ldr	r1, [sp, #8]
 8027c50:	3004      	adds	r0, #4
 8027c52:	42b1      	cmp	r1, r6
 8027c54:	d8e5      	bhi.n	8027c22 <__multiply+0x106>
 8027c56:	9905      	ldr	r1, [sp, #20]
 8027c58:	5053      	str	r3, [r2, r1]
 8027c5a:	3504      	adds	r5, #4
 8027c5c:	3204      	adds	r2, #4
 8027c5e:	e7a0      	b.n	8027ba2 <__multiply+0x86>
 8027c60:	9b00      	ldr	r3, [sp, #0]
 8027c62:	3b01      	subs	r3, #1
 8027c64:	9300      	str	r3, [sp, #0]
 8027c66:	e79f      	b.n	8027ba8 <__multiply+0x8c>
 8027c68:	0802e7e2 	.word	0x0802e7e2
 8027c6c:	0802e853 	.word	0x0802e853

08027c70 <__pow5mult>:
 8027c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027c72:	2303      	movs	r3, #3
 8027c74:	0015      	movs	r5, r2
 8027c76:	0007      	movs	r7, r0
 8027c78:	000e      	movs	r6, r1
 8027c7a:	401a      	ands	r2, r3
 8027c7c:	421d      	tst	r5, r3
 8027c7e:	d008      	beq.n	8027c92 <__pow5mult+0x22>
 8027c80:	4925      	ldr	r1, [pc, #148]	@ (8027d18 <__pow5mult+0xa8>)
 8027c82:	3a01      	subs	r2, #1
 8027c84:	0092      	lsls	r2, r2, #2
 8027c86:	5852      	ldr	r2, [r2, r1]
 8027c88:	2300      	movs	r3, #0
 8027c8a:	0031      	movs	r1, r6
 8027c8c:	f7ff fe4e 	bl	802792c <__multadd>
 8027c90:	0006      	movs	r6, r0
 8027c92:	10ad      	asrs	r5, r5, #2
 8027c94:	d03d      	beq.n	8027d12 <__pow5mult+0xa2>
 8027c96:	69fc      	ldr	r4, [r7, #28]
 8027c98:	2c00      	cmp	r4, #0
 8027c9a:	d10f      	bne.n	8027cbc <__pow5mult+0x4c>
 8027c9c:	2010      	movs	r0, #16
 8027c9e:	f7ff fd0f 	bl	80276c0 <malloc>
 8027ca2:	1e02      	subs	r2, r0, #0
 8027ca4:	61f8      	str	r0, [r7, #28]
 8027ca6:	d105      	bne.n	8027cb4 <__pow5mult+0x44>
 8027ca8:	21b4      	movs	r1, #180	@ 0xb4
 8027caa:	4b1c      	ldr	r3, [pc, #112]	@ (8027d1c <__pow5mult+0xac>)
 8027cac:	481c      	ldr	r0, [pc, #112]	@ (8027d20 <__pow5mult+0xb0>)
 8027cae:	31ff      	adds	r1, #255	@ 0xff
 8027cb0:	f000 feac 	bl	8028a0c <__assert_func>
 8027cb4:	6044      	str	r4, [r0, #4]
 8027cb6:	6084      	str	r4, [r0, #8]
 8027cb8:	6004      	str	r4, [r0, #0]
 8027cba:	60c4      	str	r4, [r0, #12]
 8027cbc:	69fb      	ldr	r3, [r7, #28]
 8027cbe:	689c      	ldr	r4, [r3, #8]
 8027cc0:	9301      	str	r3, [sp, #4]
 8027cc2:	2c00      	cmp	r4, #0
 8027cc4:	d108      	bne.n	8027cd8 <__pow5mult+0x68>
 8027cc6:	0038      	movs	r0, r7
 8027cc8:	4916      	ldr	r1, [pc, #88]	@ (8027d24 <__pow5mult+0xb4>)
 8027cca:	f7ff ff0f 	bl	8027aec <__i2b>
 8027cce:	9b01      	ldr	r3, [sp, #4]
 8027cd0:	0004      	movs	r4, r0
 8027cd2:	6098      	str	r0, [r3, #8]
 8027cd4:	2300      	movs	r3, #0
 8027cd6:	6003      	str	r3, [r0, #0]
 8027cd8:	2301      	movs	r3, #1
 8027cda:	421d      	tst	r5, r3
 8027cdc:	d00a      	beq.n	8027cf4 <__pow5mult+0x84>
 8027cde:	0031      	movs	r1, r6
 8027ce0:	0022      	movs	r2, r4
 8027ce2:	0038      	movs	r0, r7
 8027ce4:	f7ff ff1a 	bl	8027b1c <__multiply>
 8027ce8:	0031      	movs	r1, r6
 8027cea:	9001      	str	r0, [sp, #4]
 8027cec:	0038      	movs	r0, r7
 8027cee:	f7ff fdf9 	bl	80278e4 <_Bfree>
 8027cf2:	9e01      	ldr	r6, [sp, #4]
 8027cf4:	106d      	asrs	r5, r5, #1
 8027cf6:	d00c      	beq.n	8027d12 <__pow5mult+0xa2>
 8027cf8:	6820      	ldr	r0, [r4, #0]
 8027cfa:	2800      	cmp	r0, #0
 8027cfc:	d107      	bne.n	8027d0e <__pow5mult+0x9e>
 8027cfe:	0022      	movs	r2, r4
 8027d00:	0021      	movs	r1, r4
 8027d02:	0038      	movs	r0, r7
 8027d04:	f7ff ff0a 	bl	8027b1c <__multiply>
 8027d08:	2300      	movs	r3, #0
 8027d0a:	6020      	str	r0, [r4, #0]
 8027d0c:	6003      	str	r3, [r0, #0]
 8027d0e:	0004      	movs	r4, r0
 8027d10:	e7e2      	b.n	8027cd8 <__pow5mult+0x68>
 8027d12:	0030      	movs	r0, r6
 8027d14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027d16:	46c0      	nop			@ (mov r8, r8)
 8027d18:	0802ea54 	.word	0x0802ea54
 8027d1c:	0802e773 	.word	0x0802e773
 8027d20:	0802e853 	.word	0x0802e853
 8027d24:	00000271 	.word	0x00000271

08027d28 <__lshift>:
 8027d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027d2a:	000c      	movs	r4, r1
 8027d2c:	0016      	movs	r6, r2
 8027d2e:	6923      	ldr	r3, [r4, #16]
 8027d30:	1157      	asrs	r7, r2, #5
 8027d32:	b085      	sub	sp, #20
 8027d34:	18fb      	adds	r3, r7, r3
 8027d36:	9301      	str	r3, [sp, #4]
 8027d38:	3301      	adds	r3, #1
 8027d3a:	9300      	str	r3, [sp, #0]
 8027d3c:	6849      	ldr	r1, [r1, #4]
 8027d3e:	68a3      	ldr	r3, [r4, #8]
 8027d40:	9002      	str	r0, [sp, #8]
 8027d42:	9a00      	ldr	r2, [sp, #0]
 8027d44:	4293      	cmp	r3, r2
 8027d46:	db10      	blt.n	8027d6a <__lshift+0x42>
 8027d48:	9802      	ldr	r0, [sp, #8]
 8027d4a:	f7ff fd87 	bl	802785c <_Balloc>
 8027d4e:	2300      	movs	r3, #0
 8027d50:	0001      	movs	r1, r0
 8027d52:	0005      	movs	r5, r0
 8027d54:	001a      	movs	r2, r3
 8027d56:	3114      	adds	r1, #20
 8027d58:	4298      	cmp	r0, r3
 8027d5a:	d10c      	bne.n	8027d76 <__lshift+0x4e>
 8027d5c:	21ef      	movs	r1, #239	@ 0xef
 8027d5e:	002a      	movs	r2, r5
 8027d60:	4b25      	ldr	r3, [pc, #148]	@ (8027df8 <__lshift+0xd0>)
 8027d62:	4826      	ldr	r0, [pc, #152]	@ (8027dfc <__lshift+0xd4>)
 8027d64:	0049      	lsls	r1, r1, #1
 8027d66:	f000 fe51 	bl	8028a0c <__assert_func>
 8027d6a:	3101      	adds	r1, #1
 8027d6c:	005b      	lsls	r3, r3, #1
 8027d6e:	e7e8      	b.n	8027d42 <__lshift+0x1a>
 8027d70:	0098      	lsls	r0, r3, #2
 8027d72:	500a      	str	r2, [r1, r0]
 8027d74:	3301      	adds	r3, #1
 8027d76:	42bb      	cmp	r3, r7
 8027d78:	dbfa      	blt.n	8027d70 <__lshift+0x48>
 8027d7a:	43fb      	mvns	r3, r7
 8027d7c:	17db      	asrs	r3, r3, #31
 8027d7e:	401f      	ands	r7, r3
 8027d80:	00bf      	lsls	r7, r7, #2
 8027d82:	0023      	movs	r3, r4
 8027d84:	201f      	movs	r0, #31
 8027d86:	19c9      	adds	r1, r1, r7
 8027d88:	0037      	movs	r7, r6
 8027d8a:	6922      	ldr	r2, [r4, #16]
 8027d8c:	3314      	adds	r3, #20
 8027d8e:	0092      	lsls	r2, r2, #2
 8027d90:	189a      	adds	r2, r3, r2
 8027d92:	4007      	ands	r7, r0
 8027d94:	4206      	tst	r6, r0
 8027d96:	d029      	beq.n	8027dec <__lshift+0xc4>
 8027d98:	3001      	adds	r0, #1
 8027d9a:	1bc0      	subs	r0, r0, r7
 8027d9c:	9003      	str	r0, [sp, #12]
 8027d9e:	468c      	mov	ip, r1
 8027da0:	2000      	movs	r0, #0
 8027da2:	681e      	ldr	r6, [r3, #0]
 8027da4:	40be      	lsls	r6, r7
 8027da6:	4306      	orrs	r6, r0
 8027da8:	4660      	mov	r0, ip
 8027daa:	c040      	stmia	r0!, {r6}
 8027dac:	4684      	mov	ip, r0
 8027dae:	9e03      	ldr	r6, [sp, #12]
 8027db0:	cb01      	ldmia	r3!, {r0}
 8027db2:	40f0      	lsrs	r0, r6
 8027db4:	429a      	cmp	r2, r3
 8027db6:	d8f4      	bhi.n	8027da2 <__lshift+0x7a>
 8027db8:	0026      	movs	r6, r4
 8027dba:	3615      	adds	r6, #21
 8027dbc:	2304      	movs	r3, #4
 8027dbe:	42b2      	cmp	r2, r6
 8027dc0:	d304      	bcc.n	8027dcc <__lshift+0xa4>
 8027dc2:	1b13      	subs	r3, r2, r4
 8027dc4:	3b15      	subs	r3, #21
 8027dc6:	089b      	lsrs	r3, r3, #2
 8027dc8:	3301      	adds	r3, #1
 8027dca:	009b      	lsls	r3, r3, #2
 8027dcc:	50c8      	str	r0, [r1, r3]
 8027dce:	2800      	cmp	r0, #0
 8027dd0:	d002      	beq.n	8027dd8 <__lshift+0xb0>
 8027dd2:	9b01      	ldr	r3, [sp, #4]
 8027dd4:	3302      	adds	r3, #2
 8027dd6:	9300      	str	r3, [sp, #0]
 8027dd8:	9b00      	ldr	r3, [sp, #0]
 8027dda:	9802      	ldr	r0, [sp, #8]
 8027ddc:	3b01      	subs	r3, #1
 8027dde:	0021      	movs	r1, r4
 8027de0:	612b      	str	r3, [r5, #16]
 8027de2:	f7ff fd7f 	bl	80278e4 <_Bfree>
 8027de6:	0028      	movs	r0, r5
 8027de8:	b005      	add	sp, #20
 8027dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027dec:	cb01      	ldmia	r3!, {r0}
 8027dee:	c101      	stmia	r1!, {r0}
 8027df0:	429a      	cmp	r2, r3
 8027df2:	d8fb      	bhi.n	8027dec <__lshift+0xc4>
 8027df4:	e7f0      	b.n	8027dd8 <__lshift+0xb0>
 8027df6:	46c0      	nop			@ (mov r8, r8)
 8027df8:	0802e7e2 	.word	0x0802e7e2
 8027dfc:	0802e853 	.word	0x0802e853

08027e00 <__mcmp>:
 8027e00:	b530      	push	{r4, r5, lr}
 8027e02:	690b      	ldr	r3, [r1, #16]
 8027e04:	6904      	ldr	r4, [r0, #16]
 8027e06:	0002      	movs	r2, r0
 8027e08:	1ae0      	subs	r0, r4, r3
 8027e0a:	429c      	cmp	r4, r3
 8027e0c:	d10f      	bne.n	8027e2e <__mcmp+0x2e>
 8027e0e:	3214      	adds	r2, #20
 8027e10:	009b      	lsls	r3, r3, #2
 8027e12:	3114      	adds	r1, #20
 8027e14:	0014      	movs	r4, r2
 8027e16:	18c9      	adds	r1, r1, r3
 8027e18:	18d2      	adds	r2, r2, r3
 8027e1a:	3a04      	subs	r2, #4
 8027e1c:	3904      	subs	r1, #4
 8027e1e:	6815      	ldr	r5, [r2, #0]
 8027e20:	680b      	ldr	r3, [r1, #0]
 8027e22:	429d      	cmp	r5, r3
 8027e24:	d004      	beq.n	8027e30 <__mcmp+0x30>
 8027e26:	2001      	movs	r0, #1
 8027e28:	429d      	cmp	r5, r3
 8027e2a:	d200      	bcs.n	8027e2e <__mcmp+0x2e>
 8027e2c:	3802      	subs	r0, #2
 8027e2e:	bd30      	pop	{r4, r5, pc}
 8027e30:	4294      	cmp	r4, r2
 8027e32:	d3f2      	bcc.n	8027e1a <__mcmp+0x1a>
 8027e34:	e7fb      	b.n	8027e2e <__mcmp+0x2e>
	...

08027e38 <__mdiff>:
 8027e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e3a:	000c      	movs	r4, r1
 8027e3c:	b087      	sub	sp, #28
 8027e3e:	9000      	str	r0, [sp, #0]
 8027e40:	0011      	movs	r1, r2
 8027e42:	0020      	movs	r0, r4
 8027e44:	0017      	movs	r7, r2
 8027e46:	f7ff ffdb 	bl	8027e00 <__mcmp>
 8027e4a:	1e05      	subs	r5, r0, #0
 8027e4c:	d110      	bne.n	8027e70 <__mdiff+0x38>
 8027e4e:	0001      	movs	r1, r0
 8027e50:	9800      	ldr	r0, [sp, #0]
 8027e52:	f7ff fd03 	bl	802785c <_Balloc>
 8027e56:	1e02      	subs	r2, r0, #0
 8027e58:	d104      	bne.n	8027e64 <__mdiff+0x2c>
 8027e5a:	4b40      	ldr	r3, [pc, #256]	@ (8027f5c <__mdiff+0x124>)
 8027e5c:	4840      	ldr	r0, [pc, #256]	@ (8027f60 <__mdiff+0x128>)
 8027e5e:	4941      	ldr	r1, [pc, #260]	@ (8027f64 <__mdiff+0x12c>)
 8027e60:	f000 fdd4 	bl	8028a0c <__assert_func>
 8027e64:	2301      	movs	r3, #1
 8027e66:	6145      	str	r5, [r0, #20]
 8027e68:	6103      	str	r3, [r0, #16]
 8027e6a:	0010      	movs	r0, r2
 8027e6c:	b007      	add	sp, #28
 8027e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027e70:	2600      	movs	r6, #0
 8027e72:	42b0      	cmp	r0, r6
 8027e74:	da03      	bge.n	8027e7e <__mdiff+0x46>
 8027e76:	0023      	movs	r3, r4
 8027e78:	003c      	movs	r4, r7
 8027e7a:	001f      	movs	r7, r3
 8027e7c:	3601      	adds	r6, #1
 8027e7e:	6861      	ldr	r1, [r4, #4]
 8027e80:	9800      	ldr	r0, [sp, #0]
 8027e82:	f7ff fceb 	bl	802785c <_Balloc>
 8027e86:	1e02      	subs	r2, r0, #0
 8027e88:	d103      	bne.n	8027e92 <__mdiff+0x5a>
 8027e8a:	4b34      	ldr	r3, [pc, #208]	@ (8027f5c <__mdiff+0x124>)
 8027e8c:	4834      	ldr	r0, [pc, #208]	@ (8027f60 <__mdiff+0x128>)
 8027e8e:	4936      	ldr	r1, [pc, #216]	@ (8027f68 <__mdiff+0x130>)
 8027e90:	e7e6      	b.n	8027e60 <__mdiff+0x28>
 8027e92:	6923      	ldr	r3, [r4, #16]
 8027e94:	3414      	adds	r4, #20
 8027e96:	9300      	str	r3, [sp, #0]
 8027e98:	009b      	lsls	r3, r3, #2
 8027e9a:	18e3      	adds	r3, r4, r3
 8027e9c:	0021      	movs	r1, r4
 8027e9e:	9401      	str	r4, [sp, #4]
 8027ea0:	003c      	movs	r4, r7
 8027ea2:	9302      	str	r3, [sp, #8]
 8027ea4:	693b      	ldr	r3, [r7, #16]
 8027ea6:	3414      	adds	r4, #20
 8027ea8:	009b      	lsls	r3, r3, #2
 8027eaa:	18e3      	adds	r3, r4, r3
 8027eac:	9303      	str	r3, [sp, #12]
 8027eae:	0003      	movs	r3, r0
 8027eb0:	60c6      	str	r6, [r0, #12]
 8027eb2:	468c      	mov	ip, r1
 8027eb4:	2000      	movs	r0, #0
 8027eb6:	3314      	adds	r3, #20
 8027eb8:	9304      	str	r3, [sp, #16]
 8027eba:	9305      	str	r3, [sp, #20]
 8027ebc:	4663      	mov	r3, ip
 8027ebe:	cb20      	ldmia	r3!, {r5}
 8027ec0:	b2a9      	uxth	r1, r5
 8027ec2:	000e      	movs	r6, r1
 8027ec4:	469c      	mov	ip, r3
 8027ec6:	cc08      	ldmia	r4!, {r3}
 8027ec8:	0c2d      	lsrs	r5, r5, #16
 8027eca:	b299      	uxth	r1, r3
 8027ecc:	1a71      	subs	r1, r6, r1
 8027ece:	1809      	adds	r1, r1, r0
 8027ed0:	0c1b      	lsrs	r3, r3, #16
 8027ed2:	1408      	asrs	r0, r1, #16
 8027ed4:	1aeb      	subs	r3, r5, r3
 8027ed6:	181b      	adds	r3, r3, r0
 8027ed8:	1418      	asrs	r0, r3, #16
 8027eda:	b289      	uxth	r1, r1
 8027edc:	041b      	lsls	r3, r3, #16
 8027ede:	4319      	orrs	r1, r3
 8027ee0:	9b05      	ldr	r3, [sp, #20]
 8027ee2:	c302      	stmia	r3!, {r1}
 8027ee4:	9305      	str	r3, [sp, #20]
 8027ee6:	9b03      	ldr	r3, [sp, #12]
 8027ee8:	42a3      	cmp	r3, r4
 8027eea:	d8e7      	bhi.n	8027ebc <__mdiff+0x84>
 8027eec:	0039      	movs	r1, r7
 8027eee:	9c03      	ldr	r4, [sp, #12]
 8027ef0:	3115      	adds	r1, #21
 8027ef2:	2304      	movs	r3, #4
 8027ef4:	428c      	cmp	r4, r1
 8027ef6:	d304      	bcc.n	8027f02 <__mdiff+0xca>
 8027ef8:	1be3      	subs	r3, r4, r7
 8027efa:	3b15      	subs	r3, #21
 8027efc:	089b      	lsrs	r3, r3, #2
 8027efe:	3301      	adds	r3, #1
 8027f00:	009b      	lsls	r3, r3, #2
 8027f02:	9901      	ldr	r1, [sp, #4]
 8027f04:	18cd      	adds	r5, r1, r3
 8027f06:	9904      	ldr	r1, [sp, #16]
 8027f08:	002e      	movs	r6, r5
 8027f0a:	18cb      	adds	r3, r1, r3
 8027f0c:	001f      	movs	r7, r3
 8027f0e:	9902      	ldr	r1, [sp, #8]
 8027f10:	428e      	cmp	r6, r1
 8027f12:	d311      	bcc.n	8027f38 <__mdiff+0x100>
 8027f14:	9c02      	ldr	r4, [sp, #8]
 8027f16:	1ee9      	subs	r1, r5, #3
 8027f18:	2000      	movs	r0, #0
 8027f1a:	428c      	cmp	r4, r1
 8027f1c:	d304      	bcc.n	8027f28 <__mdiff+0xf0>
 8027f1e:	0021      	movs	r1, r4
 8027f20:	3103      	adds	r1, #3
 8027f22:	1b49      	subs	r1, r1, r5
 8027f24:	0889      	lsrs	r1, r1, #2
 8027f26:	0088      	lsls	r0, r1, #2
 8027f28:	181b      	adds	r3, r3, r0
 8027f2a:	3b04      	subs	r3, #4
 8027f2c:	6819      	ldr	r1, [r3, #0]
 8027f2e:	2900      	cmp	r1, #0
 8027f30:	d010      	beq.n	8027f54 <__mdiff+0x11c>
 8027f32:	9b00      	ldr	r3, [sp, #0]
 8027f34:	6113      	str	r3, [r2, #16]
 8027f36:	e798      	b.n	8027e6a <__mdiff+0x32>
 8027f38:	4684      	mov	ip, r0
 8027f3a:	ce02      	ldmia	r6!, {r1}
 8027f3c:	b288      	uxth	r0, r1
 8027f3e:	4460      	add	r0, ip
 8027f40:	1400      	asrs	r0, r0, #16
 8027f42:	0c0c      	lsrs	r4, r1, #16
 8027f44:	1904      	adds	r4, r0, r4
 8027f46:	4461      	add	r1, ip
 8027f48:	1420      	asrs	r0, r4, #16
 8027f4a:	b289      	uxth	r1, r1
 8027f4c:	0424      	lsls	r4, r4, #16
 8027f4e:	4321      	orrs	r1, r4
 8027f50:	c702      	stmia	r7!, {r1}
 8027f52:	e7dc      	b.n	8027f0e <__mdiff+0xd6>
 8027f54:	9900      	ldr	r1, [sp, #0]
 8027f56:	3901      	subs	r1, #1
 8027f58:	9100      	str	r1, [sp, #0]
 8027f5a:	e7e6      	b.n	8027f2a <__mdiff+0xf2>
 8027f5c:	0802e7e2 	.word	0x0802e7e2
 8027f60:	0802e853 	.word	0x0802e853
 8027f64:	00000237 	.word	0x00000237
 8027f68:	00000245 	.word	0x00000245

08027f6c <__ulp>:
 8027f6c:	b510      	push	{r4, lr}
 8027f6e:	2400      	movs	r4, #0
 8027f70:	4b0c      	ldr	r3, [pc, #48]	@ (8027fa4 <__ulp+0x38>)
 8027f72:	4a0d      	ldr	r2, [pc, #52]	@ (8027fa8 <__ulp+0x3c>)
 8027f74:	400b      	ands	r3, r1
 8027f76:	189b      	adds	r3, r3, r2
 8027f78:	42a3      	cmp	r3, r4
 8027f7a:	dc06      	bgt.n	8027f8a <__ulp+0x1e>
 8027f7c:	425b      	negs	r3, r3
 8027f7e:	151a      	asrs	r2, r3, #20
 8027f80:	2a13      	cmp	r2, #19
 8027f82:	dc05      	bgt.n	8027f90 <__ulp+0x24>
 8027f84:	2380      	movs	r3, #128	@ 0x80
 8027f86:	031b      	lsls	r3, r3, #12
 8027f88:	4113      	asrs	r3, r2
 8027f8a:	0019      	movs	r1, r3
 8027f8c:	0020      	movs	r0, r4
 8027f8e:	bd10      	pop	{r4, pc}
 8027f90:	3a14      	subs	r2, #20
 8027f92:	2401      	movs	r4, #1
 8027f94:	2a1e      	cmp	r2, #30
 8027f96:	dc02      	bgt.n	8027f9e <__ulp+0x32>
 8027f98:	2480      	movs	r4, #128	@ 0x80
 8027f9a:	0624      	lsls	r4, r4, #24
 8027f9c:	40d4      	lsrs	r4, r2
 8027f9e:	2300      	movs	r3, #0
 8027fa0:	e7f3      	b.n	8027f8a <__ulp+0x1e>
 8027fa2:	46c0      	nop			@ (mov r8, r8)
 8027fa4:	7ff00000 	.word	0x7ff00000
 8027fa8:	fcc00000 	.word	0xfcc00000

08027fac <__b2d>:
 8027fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027fae:	0006      	movs	r6, r0
 8027fb0:	6903      	ldr	r3, [r0, #16]
 8027fb2:	3614      	adds	r6, #20
 8027fb4:	009b      	lsls	r3, r3, #2
 8027fb6:	18f3      	adds	r3, r6, r3
 8027fb8:	1f1d      	subs	r5, r3, #4
 8027fba:	682c      	ldr	r4, [r5, #0]
 8027fbc:	000f      	movs	r7, r1
 8027fbe:	0020      	movs	r0, r4
 8027fc0:	9301      	str	r3, [sp, #4]
 8027fc2:	f7ff fd43 	bl	8027a4c <__hi0bits>
 8027fc6:	2220      	movs	r2, #32
 8027fc8:	1a12      	subs	r2, r2, r0
 8027fca:	603a      	str	r2, [r7, #0]
 8027fcc:	0003      	movs	r3, r0
 8027fce:	4a1c      	ldr	r2, [pc, #112]	@ (8028040 <__b2d+0x94>)
 8027fd0:	280a      	cmp	r0, #10
 8027fd2:	dc15      	bgt.n	8028000 <__b2d+0x54>
 8027fd4:	210b      	movs	r1, #11
 8027fd6:	0027      	movs	r7, r4
 8027fd8:	1a09      	subs	r1, r1, r0
 8027fda:	40cf      	lsrs	r7, r1
 8027fdc:	433a      	orrs	r2, r7
 8027fde:	468c      	mov	ip, r1
 8027fe0:	0011      	movs	r1, r2
 8027fe2:	2200      	movs	r2, #0
 8027fe4:	42ae      	cmp	r6, r5
 8027fe6:	d202      	bcs.n	8027fee <__b2d+0x42>
 8027fe8:	9a01      	ldr	r2, [sp, #4]
 8027fea:	3a08      	subs	r2, #8
 8027fec:	6812      	ldr	r2, [r2, #0]
 8027fee:	3315      	adds	r3, #21
 8027ff0:	409c      	lsls	r4, r3
 8027ff2:	4663      	mov	r3, ip
 8027ff4:	0027      	movs	r7, r4
 8027ff6:	40da      	lsrs	r2, r3
 8027ff8:	4317      	orrs	r7, r2
 8027ffa:	0038      	movs	r0, r7
 8027ffc:	b003      	add	sp, #12
 8027ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028000:	2700      	movs	r7, #0
 8028002:	42ae      	cmp	r6, r5
 8028004:	d202      	bcs.n	802800c <__b2d+0x60>
 8028006:	9d01      	ldr	r5, [sp, #4]
 8028008:	3d08      	subs	r5, #8
 802800a:	682f      	ldr	r7, [r5, #0]
 802800c:	210b      	movs	r1, #11
 802800e:	4249      	negs	r1, r1
 8028010:	468c      	mov	ip, r1
 8028012:	449c      	add	ip, r3
 8028014:	2b0b      	cmp	r3, #11
 8028016:	d010      	beq.n	802803a <__b2d+0x8e>
 8028018:	4661      	mov	r1, ip
 802801a:	2320      	movs	r3, #32
 802801c:	408c      	lsls	r4, r1
 802801e:	1a5b      	subs	r3, r3, r1
 8028020:	0039      	movs	r1, r7
 8028022:	40d9      	lsrs	r1, r3
 8028024:	430c      	orrs	r4, r1
 8028026:	4322      	orrs	r2, r4
 8028028:	0011      	movs	r1, r2
 802802a:	2200      	movs	r2, #0
 802802c:	42b5      	cmp	r5, r6
 802802e:	d901      	bls.n	8028034 <__b2d+0x88>
 8028030:	3d04      	subs	r5, #4
 8028032:	682a      	ldr	r2, [r5, #0]
 8028034:	4664      	mov	r4, ip
 8028036:	40a7      	lsls	r7, r4
 8028038:	e7dd      	b.n	8027ff6 <__b2d+0x4a>
 802803a:	4322      	orrs	r2, r4
 802803c:	0011      	movs	r1, r2
 802803e:	e7dc      	b.n	8027ffa <__b2d+0x4e>
 8028040:	3ff00000 	.word	0x3ff00000

08028044 <__d2b>:
 8028044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028046:	2101      	movs	r1, #1
 8028048:	0016      	movs	r6, r2
 802804a:	001f      	movs	r7, r3
 802804c:	f7ff fc06 	bl	802785c <_Balloc>
 8028050:	1e04      	subs	r4, r0, #0
 8028052:	d105      	bne.n	8028060 <__d2b+0x1c>
 8028054:	0022      	movs	r2, r4
 8028056:	4b25      	ldr	r3, [pc, #148]	@ (80280ec <__d2b+0xa8>)
 8028058:	4825      	ldr	r0, [pc, #148]	@ (80280f0 <__d2b+0xac>)
 802805a:	4926      	ldr	r1, [pc, #152]	@ (80280f4 <__d2b+0xb0>)
 802805c:	f000 fcd6 	bl	8028a0c <__assert_func>
 8028060:	033b      	lsls	r3, r7, #12
 8028062:	007d      	lsls	r5, r7, #1
 8028064:	0b1b      	lsrs	r3, r3, #12
 8028066:	0d6d      	lsrs	r5, r5, #21
 8028068:	d002      	beq.n	8028070 <__d2b+0x2c>
 802806a:	2280      	movs	r2, #128	@ 0x80
 802806c:	0352      	lsls	r2, r2, #13
 802806e:	4313      	orrs	r3, r2
 8028070:	9301      	str	r3, [sp, #4]
 8028072:	2e00      	cmp	r6, #0
 8028074:	d025      	beq.n	80280c2 <__d2b+0x7e>
 8028076:	4668      	mov	r0, sp
 8028078:	9600      	str	r6, [sp, #0]
 802807a:	f7ff fd08 	bl	8027a8e <__lo0bits>
 802807e:	9b01      	ldr	r3, [sp, #4]
 8028080:	9900      	ldr	r1, [sp, #0]
 8028082:	2800      	cmp	r0, #0
 8028084:	d01b      	beq.n	80280be <__d2b+0x7a>
 8028086:	2220      	movs	r2, #32
 8028088:	001e      	movs	r6, r3
 802808a:	1a12      	subs	r2, r2, r0
 802808c:	4096      	lsls	r6, r2
 802808e:	0032      	movs	r2, r6
 8028090:	40c3      	lsrs	r3, r0
 8028092:	430a      	orrs	r2, r1
 8028094:	6162      	str	r2, [r4, #20]
 8028096:	9301      	str	r3, [sp, #4]
 8028098:	9e01      	ldr	r6, [sp, #4]
 802809a:	61a6      	str	r6, [r4, #24]
 802809c:	1e73      	subs	r3, r6, #1
 802809e:	419e      	sbcs	r6, r3
 80280a0:	3601      	adds	r6, #1
 80280a2:	6126      	str	r6, [r4, #16]
 80280a4:	2d00      	cmp	r5, #0
 80280a6:	d014      	beq.n	80280d2 <__d2b+0x8e>
 80280a8:	2635      	movs	r6, #53	@ 0x35
 80280aa:	4b13      	ldr	r3, [pc, #76]	@ (80280f8 <__d2b+0xb4>)
 80280ac:	18ed      	adds	r5, r5, r3
 80280ae:	9b08      	ldr	r3, [sp, #32]
 80280b0:	182d      	adds	r5, r5, r0
 80280b2:	601d      	str	r5, [r3, #0]
 80280b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80280b6:	1a36      	subs	r6, r6, r0
 80280b8:	601e      	str	r6, [r3, #0]
 80280ba:	0020      	movs	r0, r4
 80280bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280be:	6161      	str	r1, [r4, #20]
 80280c0:	e7ea      	b.n	8028098 <__d2b+0x54>
 80280c2:	a801      	add	r0, sp, #4
 80280c4:	f7ff fce3 	bl	8027a8e <__lo0bits>
 80280c8:	9b01      	ldr	r3, [sp, #4]
 80280ca:	2601      	movs	r6, #1
 80280cc:	6163      	str	r3, [r4, #20]
 80280ce:	3020      	adds	r0, #32
 80280d0:	e7e7      	b.n	80280a2 <__d2b+0x5e>
 80280d2:	4b0a      	ldr	r3, [pc, #40]	@ (80280fc <__d2b+0xb8>)
 80280d4:	18c0      	adds	r0, r0, r3
 80280d6:	9b08      	ldr	r3, [sp, #32]
 80280d8:	6018      	str	r0, [r3, #0]
 80280da:	4b09      	ldr	r3, [pc, #36]	@ (8028100 <__d2b+0xbc>)
 80280dc:	18f3      	adds	r3, r6, r3
 80280de:	009b      	lsls	r3, r3, #2
 80280e0:	18e3      	adds	r3, r4, r3
 80280e2:	6958      	ldr	r0, [r3, #20]
 80280e4:	f7ff fcb2 	bl	8027a4c <__hi0bits>
 80280e8:	0176      	lsls	r6, r6, #5
 80280ea:	e7e3      	b.n	80280b4 <__d2b+0x70>
 80280ec:	0802e7e2 	.word	0x0802e7e2
 80280f0:	0802e853 	.word	0x0802e853
 80280f4:	0000030f 	.word	0x0000030f
 80280f8:	fffffbcd 	.word	0xfffffbcd
 80280fc:	fffffbce 	.word	0xfffffbce
 8028100:	3fffffff 	.word	0x3fffffff

08028104 <__ratio>:
 8028104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028106:	b087      	sub	sp, #28
 8028108:	000f      	movs	r7, r1
 802810a:	a904      	add	r1, sp, #16
 802810c:	0006      	movs	r6, r0
 802810e:	f7ff ff4d 	bl	8027fac <__b2d>
 8028112:	9000      	str	r0, [sp, #0]
 8028114:	9101      	str	r1, [sp, #4]
 8028116:	9b00      	ldr	r3, [sp, #0]
 8028118:	9c01      	ldr	r4, [sp, #4]
 802811a:	0038      	movs	r0, r7
 802811c:	a905      	add	r1, sp, #20
 802811e:	9302      	str	r3, [sp, #8]
 8028120:	9403      	str	r4, [sp, #12]
 8028122:	f7ff ff43 	bl	8027fac <__b2d>
 8028126:	000d      	movs	r5, r1
 8028128:	0002      	movs	r2, r0
 802812a:	000b      	movs	r3, r1
 802812c:	6930      	ldr	r0, [r6, #16]
 802812e:	6939      	ldr	r1, [r7, #16]
 8028130:	9e04      	ldr	r6, [sp, #16]
 8028132:	1a40      	subs	r0, r0, r1
 8028134:	9905      	ldr	r1, [sp, #20]
 8028136:	0140      	lsls	r0, r0, #5
 8028138:	1a71      	subs	r1, r6, r1
 802813a:	1841      	adds	r1, r0, r1
 802813c:	0508      	lsls	r0, r1, #20
 802813e:	2900      	cmp	r1, #0
 8028140:	dd08      	ble.n	8028154 <__ratio+0x50>
 8028142:	9901      	ldr	r1, [sp, #4]
 8028144:	1841      	adds	r1, r0, r1
 8028146:	9103      	str	r1, [sp, #12]
 8028148:	9802      	ldr	r0, [sp, #8]
 802814a:	9903      	ldr	r1, [sp, #12]
 802814c:	f7d9 ffc8 	bl	80020e0 <__aeabi_ddiv>
 8028150:	b007      	add	sp, #28
 8028152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028154:	1a2b      	subs	r3, r5, r0
 8028156:	e7f7      	b.n	8028148 <__ratio+0x44>

08028158 <__copybits>:
 8028158:	b570      	push	{r4, r5, r6, lr}
 802815a:	0014      	movs	r4, r2
 802815c:	0005      	movs	r5, r0
 802815e:	3901      	subs	r1, #1
 8028160:	6913      	ldr	r3, [r2, #16]
 8028162:	1149      	asrs	r1, r1, #5
 8028164:	3101      	adds	r1, #1
 8028166:	0089      	lsls	r1, r1, #2
 8028168:	3414      	adds	r4, #20
 802816a:	009b      	lsls	r3, r3, #2
 802816c:	1841      	adds	r1, r0, r1
 802816e:	18e3      	adds	r3, r4, r3
 8028170:	42a3      	cmp	r3, r4
 8028172:	d80d      	bhi.n	8028190 <__copybits+0x38>
 8028174:	0014      	movs	r4, r2
 8028176:	3411      	adds	r4, #17
 8028178:	2500      	movs	r5, #0
 802817a:	42a3      	cmp	r3, r4
 802817c:	d303      	bcc.n	8028186 <__copybits+0x2e>
 802817e:	1a9b      	subs	r3, r3, r2
 8028180:	3b11      	subs	r3, #17
 8028182:	089b      	lsrs	r3, r3, #2
 8028184:	009d      	lsls	r5, r3, #2
 8028186:	2300      	movs	r3, #0
 8028188:	1940      	adds	r0, r0, r5
 802818a:	4281      	cmp	r1, r0
 802818c:	d803      	bhi.n	8028196 <__copybits+0x3e>
 802818e:	bd70      	pop	{r4, r5, r6, pc}
 8028190:	cc40      	ldmia	r4!, {r6}
 8028192:	c540      	stmia	r5!, {r6}
 8028194:	e7ec      	b.n	8028170 <__copybits+0x18>
 8028196:	c008      	stmia	r0!, {r3}
 8028198:	e7f7      	b.n	802818a <__copybits+0x32>

0802819a <__any_on>:
 802819a:	0002      	movs	r2, r0
 802819c:	6900      	ldr	r0, [r0, #16]
 802819e:	b510      	push	{r4, lr}
 80281a0:	3214      	adds	r2, #20
 80281a2:	114b      	asrs	r3, r1, #5
 80281a4:	4298      	cmp	r0, r3
 80281a6:	db13      	blt.n	80281d0 <__any_on+0x36>
 80281a8:	dd0c      	ble.n	80281c4 <__any_on+0x2a>
 80281aa:	241f      	movs	r4, #31
 80281ac:	0008      	movs	r0, r1
 80281ae:	4020      	ands	r0, r4
 80281b0:	4221      	tst	r1, r4
 80281b2:	d007      	beq.n	80281c4 <__any_on+0x2a>
 80281b4:	0099      	lsls	r1, r3, #2
 80281b6:	588c      	ldr	r4, [r1, r2]
 80281b8:	0021      	movs	r1, r4
 80281ba:	40c1      	lsrs	r1, r0
 80281bc:	4081      	lsls	r1, r0
 80281be:	2001      	movs	r0, #1
 80281c0:	428c      	cmp	r4, r1
 80281c2:	d104      	bne.n	80281ce <__any_on+0x34>
 80281c4:	009b      	lsls	r3, r3, #2
 80281c6:	18d3      	adds	r3, r2, r3
 80281c8:	4293      	cmp	r3, r2
 80281ca:	d803      	bhi.n	80281d4 <__any_on+0x3a>
 80281cc:	2000      	movs	r0, #0
 80281ce:	bd10      	pop	{r4, pc}
 80281d0:	0003      	movs	r3, r0
 80281d2:	e7f7      	b.n	80281c4 <__any_on+0x2a>
 80281d4:	3b04      	subs	r3, #4
 80281d6:	6819      	ldr	r1, [r3, #0]
 80281d8:	2900      	cmp	r1, #0
 80281da:	d0f5      	beq.n	80281c8 <__any_on+0x2e>
 80281dc:	2001      	movs	r0, #1
 80281de:	e7f6      	b.n	80281ce <__any_on+0x34>

080281e0 <__ascii_wctomb>:
 80281e0:	0003      	movs	r3, r0
 80281e2:	1e08      	subs	r0, r1, #0
 80281e4:	d005      	beq.n	80281f2 <__ascii_wctomb+0x12>
 80281e6:	2aff      	cmp	r2, #255	@ 0xff
 80281e8:	d904      	bls.n	80281f4 <__ascii_wctomb+0x14>
 80281ea:	228a      	movs	r2, #138	@ 0x8a
 80281ec:	2001      	movs	r0, #1
 80281ee:	601a      	str	r2, [r3, #0]
 80281f0:	4240      	negs	r0, r0
 80281f2:	4770      	bx	lr
 80281f4:	2001      	movs	r0, #1
 80281f6:	700a      	strb	r2, [r1, #0]
 80281f8:	e7fb      	b.n	80281f2 <__ascii_wctomb+0x12>
	...

080281fc <__ssputs_r>:
 80281fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80281fe:	688e      	ldr	r6, [r1, #8]
 8028200:	b085      	sub	sp, #20
 8028202:	001f      	movs	r7, r3
 8028204:	000c      	movs	r4, r1
 8028206:	680b      	ldr	r3, [r1, #0]
 8028208:	9002      	str	r0, [sp, #8]
 802820a:	9203      	str	r2, [sp, #12]
 802820c:	42be      	cmp	r6, r7
 802820e:	d830      	bhi.n	8028272 <__ssputs_r+0x76>
 8028210:	210c      	movs	r1, #12
 8028212:	5e62      	ldrsh	r2, [r4, r1]
 8028214:	2190      	movs	r1, #144	@ 0x90
 8028216:	00c9      	lsls	r1, r1, #3
 8028218:	420a      	tst	r2, r1
 802821a:	d028      	beq.n	802826e <__ssputs_r+0x72>
 802821c:	2003      	movs	r0, #3
 802821e:	6921      	ldr	r1, [r4, #16]
 8028220:	1a5b      	subs	r3, r3, r1
 8028222:	9301      	str	r3, [sp, #4]
 8028224:	6963      	ldr	r3, [r4, #20]
 8028226:	4343      	muls	r3, r0
 8028228:	9801      	ldr	r0, [sp, #4]
 802822a:	0fdd      	lsrs	r5, r3, #31
 802822c:	18ed      	adds	r5, r5, r3
 802822e:	1c7b      	adds	r3, r7, #1
 8028230:	181b      	adds	r3, r3, r0
 8028232:	106d      	asrs	r5, r5, #1
 8028234:	42ab      	cmp	r3, r5
 8028236:	d900      	bls.n	802823a <__ssputs_r+0x3e>
 8028238:	001d      	movs	r5, r3
 802823a:	0552      	lsls	r2, r2, #21
 802823c:	d528      	bpl.n	8028290 <__ssputs_r+0x94>
 802823e:	0029      	movs	r1, r5
 8028240:	9802      	ldr	r0, [sp, #8]
 8028242:	f7ff fa69 	bl	8027718 <_malloc_r>
 8028246:	1e06      	subs	r6, r0, #0
 8028248:	d02c      	beq.n	80282a4 <__ssputs_r+0xa8>
 802824a:	9a01      	ldr	r2, [sp, #4]
 802824c:	6921      	ldr	r1, [r4, #16]
 802824e:	f7fe f80d 	bl	802626c <memcpy>
 8028252:	89a2      	ldrh	r2, [r4, #12]
 8028254:	4b18      	ldr	r3, [pc, #96]	@ (80282b8 <__ssputs_r+0xbc>)
 8028256:	401a      	ands	r2, r3
 8028258:	2380      	movs	r3, #128	@ 0x80
 802825a:	4313      	orrs	r3, r2
 802825c:	81a3      	strh	r3, [r4, #12]
 802825e:	9b01      	ldr	r3, [sp, #4]
 8028260:	6126      	str	r6, [r4, #16]
 8028262:	18f6      	adds	r6, r6, r3
 8028264:	6026      	str	r6, [r4, #0]
 8028266:	003e      	movs	r6, r7
 8028268:	6165      	str	r5, [r4, #20]
 802826a:	1aed      	subs	r5, r5, r3
 802826c:	60a5      	str	r5, [r4, #8]
 802826e:	42be      	cmp	r6, r7
 8028270:	d900      	bls.n	8028274 <__ssputs_r+0x78>
 8028272:	003e      	movs	r6, r7
 8028274:	0032      	movs	r2, r6
 8028276:	9903      	ldr	r1, [sp, #12]
 8028278:	6820      	ldr	r0, [r4, #0]
 802827a:	f000 fb7e 	bl	802897a <memmove>
 802827e:	2000      	movs	r0, #0
 8028280:	68a3      	ldr	r3, [r4, #8]
 8028282:	1b9b      	subs	r3, r3, r6
 8028284:	60a3      	str	r3, [r4, #8]
 8028286:	6823      	ldr	r3, [r4, #0]
 8028288:	199b      	adds	r3, r3, r6
 802828a:	6023      	str	r3, [r4, #0]
 802828c:	b005      	add	sp, #20
 802828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028290:	002a      	movs	r2, r5
 8028292:	9802      	ldr	r0, [sp, #8]
 8028294:	f000 fc05 	bl	8028aa2 <_realloc_r>
 8028298:	1e06      	subs	r6, r0, #0
 802829a:	d1e0      	bne.n	802825e <__ssputs_r+0x62>
 802829c:	6921      	ldr	r1, [r4, #16]
 802829e:	9802      	ldr	r0, [sp, #8]
 80282a0:	f7fe fe6a 	bl	8026f78 <_free_r>
 80282a4:	230c      	movs	r3, #12
 80282a6:	2001      	movs	r0, #1
 80282a8:	9a02      	ldr	r2, [sp, #8]
 80282aa:	4240      	negs	r0, r0
 80282ac:	6013      	str	r3, [r2, #0]
 80282ae:	89a2      	ldrh	r2, [r4, #12]
 80282b0:	3334      	adds	r3, #52	@ 0x34
 80282b2:	4313      	orrs	r3, r2
 80282b4:	81a3      	strh	r3, [r4, #12]
 80282b6:	e7e9      	b.n	802828c <__ssputs_r+0x90>
 80282b8:	fffffb7f 	.word	0xfffffb7f

080282bc <_svfiprintf_r>:
 80282bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282be:	b0a1      	sub	sp, #132	@ 0x84
 80282c0:	9003      	str	r0, [sp, #12]
 80282c2:	001d      	movs	r5, r3
 80282c4:	898b      	ldrh	r3, [r1, #12]
 80282c6:	000f      	movs	r7, r1
 80282c8:	0016      	movs	r6, r2
 80282ca:	061b      	lsls	r3, r3, #24
 80282cc:	d511      	bpl.n	80282f2 <_svfiprintf_r+0x36>
 80282ce:	690b      	ldr	r3, [r1, #16]
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	d10e      	bne.n	80282f2 <_svfiprintf_r+0x36>
 80282d4:	2140      	movs	r1, #64	@ 0x40
 80282d6:	f7ff fa1f 	bl	8027718 <_malloc_r>
 80282da:	6038      	str	r0, [r7, #0]
 80282dc:	6138      	str	r0, [r7, #16]
 80282de:	2800      	cmp	r0, #0
 80282e0:	d105      	bne.n	80282ee <_svfiprintf_r+0x32>
 80282e2:	230c      	movs	r3, #12
 80282e4:	9a03      	ldr	r2, [sp, #12]
 80282e6:	6013      	str	r3, [r2, #0]
 80282e8:	2001      	movs	r0, #1
 80282ea:	4240      	negs	r0, r0
 80282ec:	e0cf      	b.n	802848e <_svfiprintf_r+0x1d2>
 80282ee:	2340      	movs	r3, #64	@ 0x40
 80282f0:	617b      	str	r3, [r7, #20]
 80282f2:	2300      	movs	r3, #0
 80282f4:	ac08      	add	r4, sp, #32
 80282f6:	6163      	str	r3, [r4, #20]
 80282f8:	3320      	adds	r3, #32
 80282fa:	7663      	strb	r3, [r4, #25]
 80282fc:	3310      	adds	r3, #16
 80282fe:	76a3      	strb	r3, [r4, #26]
 8028300:	9507      	str	r5, [sp, #28]
 8028302:	0035      	movs	r5, r6
 8028304:	782b      	ldrb	r3, [r5, #0]
 8028306:	2b00      	cmp	r3, #0
 8028308:	d001      	beq.n	802830e <_svfiprintf_r+0x52>
 802830a:	2b25      	cmp	r3, #37	@ 0x25
 802830c:	d148      	bne.n	80283a0 <_svfiprintf_r+0xe4>
 802830e:	1bab      	subs	r3, r5, r6
 8028310:	9305      	str	r3, [sp, #20]
 8028312:	42b5      	cmp	r5, r6
 8028314:	d00b      	beq.n	802832e <_svfiprintf_r+0x72>
 8028316:	0032      	movs	r2, r6
 8028318:	0039      	movs	r1, r7
 802831a:	9803      	ldr	r0, [sp, #12]
 802831c:	f7ff ff6e 	bl	80281fc <__ssputs_r>
 8028320:	3001      	adds	r0, #1
 8028322:	d100      	bne.n	8028326 <_svfiprintf_r+0x6a>
 8028324:	e0ae      	b.n	8028484 <_svfiprintf_r+0x1c8>
 8028326:	6963      	ldr	r3, [r4, #20]
 8028328:	9a05      	ldr	r2, [sp, #20]
 802832a:	189b      	adds	r3, r3, r2
 802832c:	6163      	str	r3, [r4, #20]
 802832e:	782b      	ldrb	r3, [r5, #0]
 8028330:	2b00      	cmp	r3, #0
 8028332:	d100      	bne.n	8028336 <_svfiprintf_r+0x7a>
 8028334:	e0a6      	b.n	8028484 <_svfiprintf_r+0x1c8>
 8028336:	2201      	movs	r2, #1
 8028338:	2300      	movs	r3, #0
 802833a:	4252      	negs	r2, r2
 802833c:	6062      	str	r2, [r4, #4]
 802833e:	a904      	add	r1, sp, #16
 8028340:	3254      	adds	r2, #84	@ 0x54
 8028342:	1852      	adds	r2, r2, r1
 8028344:	1c6e      	adds	r6, r5, #1
 8028346:	6023      	str	r3, [r4, #0]
 8028348:	60e3      	str	r3, [r4, #12]
 802834a:	60a3      	str	r3, [r4, #8]
 802834c:	7013      	strb	r3, [r2, #0]
 802834e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028350:	4b54      	ldr	r3, [pc, #336]	@ (80284a4 <_svfiprintf_r+0x1e8>)
 8028352:	2205      	movs	r2, #5
 8028354:	0018      	movs	r0, r3
 8028356:	7831      	ldrb	r1, [r6, #0]
 8028358:	9305      	str	r3, [sp, #20]
 802835a:	f7fd ff7c 	bl	8026256 <memchr>
 802835e:	1c75      	adds	r5, r6, #1
 8028360:	2800      	cmp	r0, #0
 8028362:	d11f      	bne.n	80283a4 <_svfiprintf_r+0xe8>
 8028364:	6822      	ldr	r2, [r4, #0]
 8028366:	06d3      	lsls	r3, r2, #27
 8028368:	d504      	bpl.n	8028374 <_svfiprintf_r+0xb8>
 802836a:	2353      	movs	r3, #83	@ 0x53
 802836c:	a904      	add	r1, sp, #16
 802836e:	185b      	adds	r3, r3, r1
 8028370:	2120      	movs	r1, #32
 8028372:	7019      	strb	r1, [r3, #0]
 8028374:	0713      	lsls	r3, r2, #28
 8028376:	d504      	bpl.n	8028382 <_svfiprintf_r+0xc6>
 8028378:	2353      	movs	r3, #83	@ 0x53
 802837a:	a904      	add	r1, sp, #16
 802837c:	185b      	adds	r3, r3, r1
 802837e:	212b      	movs	r1, #43	@ 0x2b
 8028380:	7019      	strb	r1, [r3, #0]
 8028382:	7833      	ldrb	r3, [r6, #0]
 8028384:	2b2a      	cmp	r3, #42	@ 0x2a
 8028386:	d016      	beq.n	80283b6 <_svfiprintf_r+0xfa>
 8028388:	0035      	movs	r5, r6
 802838a:	2100      	movs	r1, #0
 802838c:	200a      	movs	r0, #10
 802838e:	68e3      	ldr	r3, [r4, #12]
 8028390:	782a      	ldrb	r2, [r5, #0]
 8028392:	1c6e      	adds	r6, r5, #1
 8028394:	3a30      	subs	r2, #48	@ 0x30
 8028396:	2a09      	cmp	r2, #9
 8028398:	d950      	bls.n	802843c <_svfiprintf_r+0x180>
 802839a:	2900      	cmp	r1, #0
 802839c:	d111      	bne.n	80283c2 <_svfiprintf_r+0x106>
 802839e:	e017      	b.n	80283d0 <_svfiprintf_r+0x114>
 80283a0:	3501      	adds	r5, #1
 80283a2:	e7af      	b.n	8028304 <_svfiprintf_r+0x48>
 80283a4:	9b05      	ldr	r3, [sp, #20]
 80283a6:	6822      	ldr	r2, [r4, #0]
 80283a8:	1ac0      	subs	r0, r0, r3
 80283aa:	2301      	movs	r3, #1
 80283ac:	4083      	lsls	r3, r0
 80283ae:	4313      	orrs	r3, r2
 80283b0:	002e      	movs	r6, r5
 80283b2:	6023      	str	r3, [r4, #0]
 80283b4:	e7cc      	b.n	8028350 <_svfiprintf_r+0x94>
 80283b6:	9b07      	ldr	r3, [sp, #28]
 80283b8:	1d19      	adds	r1, r3, #4
 80283ba:	681b      	ldr	r3, [r3, #0]
 80283bc:	9107      	str	r1, [sp, #28]
 80283be:	2b00      	cmp	r3, #0
 80283c0:	db01      	blt.n	80283c6 <_svfiprintf_r+0x10a>
 80283c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80283c4:	e004      	b.n	80283d0 <_svfiprintf_r+0x114>
 80283c6:	425b      	negs	r3, r3
 80283c8:	60e3      	str	r3, [r4, #12]
 80283ca:	2302      	movs	r3, #2
 80283cc:	4313      	orrs	r3, r2
 80283ce:	6023      	str	r3, [r4, #0]
 80283d0:	782b      	ldrb	r3, [r5, #0]
 80283d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80283d4:	d10c      	bne.n	80283f0 <_svfiprintf_r+0x134>
 80283d6:	786b      	ldrb	r3, [r5, #1]
 80283d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80283da:	d134      	bne.n	8028446 <_svfiprintf_r+0x18a>
 80283dc:	9b07      	ldr	r3, [sp, #28]
 80283de:	3502      	adds	r5, #2
 80283e0:	1d1a      	adds	r2, r3, #4
 80283e2:	681b      	ldr	r3, [r3, #0]
 80283e4:	9207      	str	r2, [sp, #28]
 80283e6:	2b00      	cmp	r3, #0
 80283e8:	da01      	bge.n	80283ee <_svfiprintf_r+0x132>
 80283ea:	2301      	movs	r3, #1
 80283ec:	425b      	negs	r3, r3
 80283ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80283f0:	4e2d      	ldr	r6, [pc, #180]	@ (80284a8 <_svfiprintf_r+0x1ec>)
 80283f2:	2203      	movs	r2, #3
 80283f4:	0030      	movs	r0, r6
 80283f6:	7829      	ldrb	r1, [r5, #0]
 80283f8:	f7fd ff2d 	bl	8026256 <memchr>
 80283fc:	2800      	cmp	r0, #0
 80283fe:	d006      	beq.n	802840e <_svfiprintf_r+0x152>
 8028400:	2340      	movs	r3, #64	@ 0x40
 8028402:	1b80      	subs	r0, r0, r6
 8028404:	4083      	lsls	r3, r0
 8028406:	6822      	ldr	r2, [r4, #0]
 8028408:	3501      	adds	r5, #1
 802840a:	4313      	orrs	r3, r2
 802840c:	6023      	str	r3, [r4, #0]
 802840e:	7829      	ldrb	r1, [r5, #0]
 8028410:	2206      	movs	r2, #6
 8028412:	4826      	ldr	r0, [pc, #152]	@ (80284ac <_svfiprintf_r+0x1f0>)
 8028414:	1c6e      	adds	r6, r5, #1
 8028416:	7621      	strb	r1, [r4, #24]
 8028418:	f7fd ff1d 	bl	8026256 <memchr>
 802841c:	2800      	cmp	r0, #0
 802841e:	d038      	beq.n	8028492 <_svfiprintf_r+0x1d6>
 8028420:	4b23      	ldr	r3, [pc, #140]	@ (80284b0 <_svfiprintf_r+0x1f4>)
 8028422:	2b00      	cmp	r3, #0
 8028424:	d122      	bne.n	802846c <_svfiprintf_r+0x1b0>
 8028426:	2207      	movs	r2, #7
 8028428:	9b07      	ldr	r3, [sp, #28]
 802842a:	3307      	adds	r3, #7
 802842c:	4393      	bics	r3, r2
 802842e:	3308      	adds	r3, #8
 8028430:	9307      	str	r3, [sp, #28]
 8028432:	6963      	ldr	r3, [r4, #20]
 8028434:	9a04      	ldr	r2, [sp, #16]
 8028436:	189b      	adds	r3, r3, r2
 8028438:	6163      	str	r3, [r4, #20]
 802843a:	e762      	b.n	8028302 <_svfiprintf_r+0x46>
 802843c:	4343      	muls	r3, r0
 802843e:	0035      	movs	r5, r6
 8028440:	2101      	movs	r1, #1
 8028442:	189b      	adds	r3, r3, r2
 8028444:	e7a4      	b.n	8028390 <_svfiprintf_r+0xd4>
 8028446:	2300      	movs	r3, #0
 8028448:	200a      	movs	r0, #10
 802844a:	0019      	movs	r1, r3
 802844c:	3501      	adds	r5, #1
 802844e:	6063      	str	r3, [r4, #4]
 8028450:	782a      	ldrb	r2, [r5, #0]
 8028452:	1c6e      	adds	r6, r5, #1
 8028454:	3a30      	subs	r2, #48	@ 0x30
 8028456:	2a09      	cmp	r2, #9
 8028458:	d903      	bls.n	8028462 <_svfiprintf_r+0x1a6>
 802845a:	2b00      	cmp	r3, #0
 802845c:	d0c8      	beq.n	80283f0 <_svfiprintf_r+0x134>
 802845e:	9109      	str	r1, [sp, #36]	@ 0x24
 8028460:	e7c6      	b.n	80283f0 <_svfiprintf_r+0x134>
 8028462:	4341      	muls	r1, r0
 8028464:	0035      	movs	r5, r6
 8028466:	2301      	movs	r3, #1
 8028468:	1889      	adds	r1, r1, r2
 802846a:	e7f1      	b.n	8028450 <_svfiprintf_r+0x194>
 802846c:	aa07      	add	r2, sp, #28
 802846e:	9200      	str	r2, [sp, #0]
 8028470:	0021      	movs	r1, r4
 8028472:	003a      	movs	r2, r7
 8028474:	4b0f      	ldr	r3, [pc, #60]	@ (80284b4 <_svfiprintf_r+0x1f8>)
 8028476:	9803      	ldr	r0, [sp, #12]
 8028478:	f7fc ffc4 	bl	8025404 <_printf_float>
 802847c:	9004      	str	r0, [sp, #16]
 802847e:	9b04      	ldr	r3, [sp, #16]
 8028480:	3301      	adds	r3, #1
 8028482:	d1d6      	bne.n	8028432 <_svfiprintf_r+0x176>
 8028484:	89bb      	ldrh	r3, [r7, #12]
 8028486:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028488:	065b      	lsls	r3, r3, #25
 802848a:	d500      	bpl.n	802848e <_svfiprintf_r+0x1d2>
 802848c:	e72c      	b.n	80282e8 <_svfiprintf_r+0x2c>
 802848e:	b021      	add	sp, #132	@ 0x84
 8028490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028492:	aa07      	add	r2, sp, #28
 8028494:	9200      	str	r2, [sp, #0]
 8028496:	0021      	movs	r1, r4
 8028498:	003a      	movs	r2, r7
 802849a:	4b06      	ldr	r3, [pc, #24]	@ (80284b4 <_svfiprintf_r+0x1f8>)
 802849c:	9803      	ldr	r0, [sp, #12]
 802849e:	f7fd fa5f 	bl	8025960 <_printf_i>
 80284a2:	e7eb      	b.n	802847c <_svfiprintf_r+0x1c0>
 80284a4:	0802e8ac 	.word	0x0802e8ac
 80284a8:	0802e8b2 	.word	0x0802e8b2
 80284ac:	0802e8b6 	.word	0x0802e8b6
 80284b0:	08025405 	.word	0x08025405
 80284b4:	080281fd 	.word	0x080281fd

080284b8 <__sfputc_r>:
 80284b8:	6893      	ldr	r3, [r2, #8]
 80284ba:	b510      	push	{r4, lr}
 80284bc:	3b01      	subs	r3, #1
 80284be:	6093      	str	r3, [r2, #8]
 80284c0:	2b00      	cmp	r3, #0
 80284c2:	da04      	bge.n	80284ce <__sfputc_r+0x16>
 80284c4:	6994      	ldr	r4, [r2, #24]
 80284c6:	42a3      	cmp	r3, r4
 80284c8:	db07      	blt.n	80284da <__sfputc_r+0x22>
 80284ca:	290a      	cmp	r1, #10
 80284cc:	d005      	beq.n	80284da <__sfputc_r+0x22>
 80284ce:	6813      	ldr	r3, [r2, #0]
 80284d0:	1c58      	adds	r0, r3, #1
 80284d2:	6010      	str	r0, [r2, #0]
 80284d4:	7019      	strb	r1, [r3, #0]
 80284d6:	0008      	movs	r0, r1
 80284d8:	bd10      	pop	{r4, pc}
 80284da:	f7fd fd4b 	bl	8025f74 <__swbuf_r>
 80284de:	0001      	movs	r1, r0
 80284e0:	e7f9      	b.n	80284d6 <__sfputc_r+0x1e>

080284e2 <__sfputs_r>:
 80284e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284e4:	0006      	movs	r6, r0
 80284e6:	000f      	movs	r7, r1
 80284e8:	0014      	movs	r4, r2
 80284ea:	18d5      	adds	r5, r2, r3
 80284ec:	42ac      	cmp	r4, r5
 80284ee:	d101      	bne.n	80284f4 <__sfputs_r+0x12>
 80284f0:	2000      	movs	r0, #0
 80284f2:	e007      	b.n	8028504 <__sfputs_r+0x22>
 80284f4:	7821      	ldrb	r1, [r4, #0]
 80284f6:	003a      	movs	r2, r7
 80284f8:	0030      	movs	r0, r6
 80284fa:	f7ff ffdd 	bl	80284b8 <__sfputc_r>
 80284fe:	3401      	adds	r4, #1
 8028500:	1c43      	adds	r3, r0, #1
 8028502:	d1f3      	bne.n	80284ec <__sfputs_r+0xa>
 8028504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028508 <_vfiprintf_r>:
 8028508:	b5f0      	push	{r4, r5, r6, r7, lr}
 802850a:	b0a1      	sub	sp, #132	@ 0x84
 802850c:	000f      	movs	r7, r1
 802850e:	0015      	movs	r5, r2
 8028510:	001e      	movs	r6, r3
 8028512:	9003      	str	r0, [sp, #12]
 8028514:	2800      	cmp	r0, #0
 8028516:	d004      	beq.n	8028522 <_vfiprintf_r+0x1a>
 8028518:	6a03      	ldr	r3, [r0, #32]
 802851a:	2b00      	cmp	r3, #0
 802851c:	d101      	bne.n	8028522 <_vfiprintf_r+0x1a>
 802851e:	f7fd fbbb 	bl	8025c98 <__sinit>
 8028522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028524:	07db      	lsls	r3, r3, #31
 8028526:	d405      	bmi.n	8028534 <_vfiprintf_r+0x2c>
 8028528:	89bb      	ldrh	r3, [r7, #12]
 802852a:	059b      	lsls	r3, r3, #22
 802852c:	d402      	bmi.n	8028534 <_vfiprintf_r+0x2c>
 802852e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028530:	f7fd fe8f 	bl	8026252 <__retarget_lock_acquire_recursive>
 8028534:	89bb      	ldrh	r3, [r7, #12]
 8028536:	071b      	lsls	r3, r3, #28
 8028538:	d502      	bpl.n	8028540 <_vfiprintf_r+0x38>
 802853a:	693b      	ldr	r3, [r7, #16]
 802853c:	2b00      	cmp	r3, #0
 802853e:	d113      	bne.n	8028568 <_vfiprintf_r+0x60>
 8028540:	0039      	movs	r1, r7
 8028542:	9803      	ldr	r0, [sp, #12]
 8028544:	f7fd fd58 	bl	8025ff8 <__swsetup_r>
 8028548:	2800      	cmp	r0, #0
 802854a:	d00d      	beq.n	8028568 <_vfiprintf_r+0x60>
 802854c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802854e:	07db      	lsls	r3, r3, #31
 8028550:	d503      	bpl.n	802855a <_vfiprintf_r+0x52>
 8028552:	2001      	movs	r0, #1
 8028554:	4240      	negs	r0, r0
 8028556:	b021      	add	sp, #132	@ 0x84
 8028558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802855a:	89bb      	ldrh	r3, [r7, #12]
 802855c:	059b      	lsls	r3, r3, #22
 802855e:	d4f8      	bmi.n	8028552 <_vfiprintf_r+0x4a>
 8028560:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028562:	f7fd fe77 	bl	8026254 <__retarget_lock_release_recursive>
 8028566:	e7f4      	b.n	8028552 <_vfiprintf_r+0x4a>
 8028568:	2300      	movs	r3, #0
 802856a:	ac08      	add	r4, sp, #32
 802856c:	6163      	str	r3, [r4, #20]
 802856e:	3320      	adds	r3, #32
 8028570:	7663      	strb	r3, [r4, #25]
 8028572:	3310      	adds	r3, #16
 8028574:	76a3      	strb	r3, [r4, #26]
 8028576:	9607      	str	r6, [sp, #28]
 8028578:	002e      	movs	r6, r5
 802857a:	7833      	ldrb	r3, [r6, #0]
 802857c:	2b00      	cmp	r3, #0
 802857e:	d001      	beq.n	8028584 <_vfiprintf_r+0x7c>
 8028580:	2b25      	cmp	r3, #37	@ 0x25
 8028582:	d148      	bne.n	8028616 <_vfiprintf_r+0x10e>
 8028584:	1b73      	subs	r3, r6, r5
 8028586:	9305      	str	r3, [sp, #20]
 8028588:	42ae      	cmp	r6, r5
 802858a:	d00b      	beq.n	80285a4 <_vfiprintf_r+0x9c>
 802858c:	002a      	movs	r2, r5
 802858e:	0039      	movs	r1, r7
 8028590:	9803      	ldr	r0, [sp, #12]
 8028592:	f7ff ffa6 	bl	80284e2 <__sfputs_r>
 8028596:	3001      	adds	r0, #1
 8028598:	d100      	bne.n	802859c <_vfiprintf_r+0x94>
 802859a:	e0ae      	b.n	80286fa <_vfiprintf_r+0x1f2>
 802859c:	6963      	ldr	r3, [r4, #20]
 802859e:	9a05      	ldr	r2, [sp, #20]
 80285a0:	189b      	adds	r3, r3, r2
 80285a2:	6163      	str	r3, [r4, #20]
 80285a4:	7833      	ldrb	r3, [r6, #0]
 80285a6:	2b00      	cmp	r3, #0
 80285a8:	d100      	bne.n	80285ac <_vfiprintf_r+0xa4>
 80285aa:	e0a6      	b.n	80286fa <_vfiprintf_r+0x1f2>
 80285ac:	2201      	movs	r2, #1
 80285ae:	2300      	movs	r3, #0
 80285b0:	4252      	negs	r2, r2
 80285b2:	6062      	str	r2, [r4, #4]
 80285b4:	a904      	add	r1, sp, #16
 80285b6:	3254      	adds	r2, #84	@ 0x54
 80285b8:	1852      	adds	r2, r2, r1
 80285ba:	1c75      	adds	r5, r6, #1
 80285bc:	6023      	str	r3, [r4, #0]
 80285be:	60e3      	str	r3, [r4, #12]
 80285c0:	60a3      	str	r3, [r4, #8]
 80285c2:	7013      	strb	r3, [r2, #0]
 80285c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80285c6:	4b59      	ldr	r3, [pc, #356]	@ (802872c <_vfiprintf_r+0x224>)
 80285c8:	2205      	movs	r2, #5
 80285ca:	0018      	movs	r0, r3
 80285cc:	7829      	ldrb	r1, [r5, #0]
 80285ce:	9305      	str	r3, [sp, #20]
 80285d0:	f7fd fe41 	bl	8026256 <memchr>
 80285d4:	1c6e      	adds	r6, r5, #1
 80285d6:	2800      	cmp	r0, #0
 80285d8:	d11f      	bne.n	802861a <_vfiprintf_r+0x112>
 80285da:	6822      	ldr	r2, [r4, #0]
 80285dc:	06d3      	lsls	r3, r2, #27
 80285de:	d504      	bpl.n	80285ea <_vfiprintf_r+0xe2>
 80285e0:	2353      	movs	r3, #83	@ 0x53
 80285e2:	a904      	add	r1, sp, #16
 80285e4:	185b      	adds	r3, r3, r1
 80285e6:	2120      	movs	r1, #32
 80285e8:	7019      	strb	r1, [r3, #0]
 80285ea:	0713      	lsls	r3, r2, #28
 80285ec:	d504      	bpl.n	80285f8 <_vfiprintf_r+0xf0>
 80285ee:	2353      	movs	r3, #83	@ 0x53
 80285f0:	a904      	add	r1, sp, #16
 80285f2:	185b      	adds	r3, r3, r1
 80285f4:	212b      	movs	r1, #43	@ 0x2b
 80285f6:	7019      	strb	r1, [r3, #0]
 80285f8:	782b      	ldrb	r3, [r5, #0]
 80285fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80285fc:	d016      	beq.n	802862c <_vfiprintf_r+0x124>
 80285fe:	002e      	movs	r6, r5
 8028600:	2100      	movs	r1, #0
 8028602:	200a      	movs	r0, #10
 8028604:	68e3      	ldr	r3, [r4, #12]
 8028606:	7832      	ldrb	r2, [r6, #0]
 8028608:	1c75      	adds	r5, r6, #1
 802860a:	3a30      	subs	r2, #48	@ 0x30
 802860c:	2a09      	cmp	r2, #9
 802860e:	d950      	bls.n	80286b2 <_vfiprintf_r+0x1aa>
 8028610:	2900      	cmp	r1, #0
 8028612:	d111      	bne.n	8028638 <_vfiprintf_r+0x130>
 8028614:	e017      	b.n	8028646 <_vfiprintf_r+0x13e>
 8028616:	3601      	adds	r6, #1
 8028618:	e7af      	b.n	802857a <_vfiprintf_r+0x72>
 802861a:	9b05      	ldr	r3, [sp, #20]
 802861c:	6822      	ldr	r2, [r4, #0]
 802861e:	1ac0      	subs	r0, r0, r3
 8028620:	2301      	movs	r3, #1
 8028622:	4083      	lsls	r3, r0
 8028624:	4313      	orrs	r3, r2
 8028626:	0035      	movs	r5, r6
 8028628:	6023      	str	r3, [r4, #0]
 802862a:	e7cc      	b.n	80285c6 <_vfiprintf_r+0xbe>
 802862c:	9b07      	ldr	r3, [sp, #28]
 802862e:	1d19      	adds	r1, r3, #4
 8028630:	681b      	ldr	r3, [r3, #0]
 8028632:	9107      	str	r1, [sp, #28]
 8028634:	2b00      	cmp	r3, #0
 8028636:	db01      	blt.n	802863c <_vfiprintf_r+0x134>
 8028638:	930b      	str	r3, [sp, #44]	@ 0x2c
 802863a:	e004      	b.n	8028646 <_vfiprintf_r+0x13e>
 802863c:	425b      	negs	r3, r3
 802863e:	60e3      	str	r3, [r4, #12]
 8028640:	2302      	movs	r3, #2
 8028642:	4313      	orrs	r3, r2
 8028644:	6023      	str	r3, [r4, #0]
 8028646:	7833      	ldrb	r3, [r6, #0]
 8028648:	2b2e      	cmp	r3, #46	@ 0x2e
 802864a:	d10c      	bne.n	8028666 <_vfiprintf_r+0x15e>
 802864c:	7873      	ldrb	r3, [r6, #1]
 802864e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028650:	d134      	bne.n	80286bc <_vfiprintf_r+0x1b4>
 8028652:	9b07      	ldr	r3, [sp, #28]
 8028654:	3602      	adds	r6, #2
 8028656:	1d1a      	adds	r2, r3, #4
 8028658:	681b      	ldr	r3, [r3, #0]
 802865a:	9207      	str	r2, [sp, #28]
 802865c:	2b00      	cmp	r3, #0
 802865e:	da01      	bge.n	8028664 <_vfiprintf_r+0x15c>
 8028660:	2301      	movs	r3, #1
 8028662:	425b      	negs	r3, r3
 8028664:	9309      	str	r3, [sp, #36]	@ 0x24
 8028666:	4d32      	ldr	r5, [pc, #200]	@ (8028730 <_vfiprintf_r+0x228>)
 8028668:	2203      	movs	r2, #3
 802866a:	0028      	movs	r0, r5
 802866c:	7831      	ldrb	r1, [r6, #0]
 802866e:	f7fd fdf2 	bl	8026256 <memchr>
 8028672:	2800      	cmp	r0, #0
 8028674:	d006      	beq.n	8028684 <_vfiprintf_r+0x17c>
 8028676:	2340      	movs	r3, #64	@ 0x40
 8028678:	1b40      	subs	r0, r0, r5
 802867a:	4083      	lsls	r3, r0
 802867c:	6822      	ldr	r2, [r4, #0]
 802867e:	3601      	adds	r6, #1
 8028680:	4313      	orrs	r3, r2
 8028682:	6023      	str	r3, [r4, #0]
 8028684:	7831      	ldrb	r1, [r6, #0]
 8028686:	2206      	movs	r2, #6
 8028688:	482a      	ldr	r0, [pc, #168]	@ (8028734 <_vfiprintf_r+0x22c>)
 802868a:	1c75      	adds	r5, r6, #1
 802868c:	7621      	strb	r1, [r4, #24]
 802868e:	f7fd fde2 	bl	8026256 <memchr>
 8028692:	2800      	cmp	r0, #0
 8028694:	d040      	beq.n	8028718 <_vfiprintf_r+0x210>
 8028696:	4b28      	ldr	r3, [pc, #160]	@ (8028738 <_vfiprintf_r+0x230>)
 8028698:	2b00      	cmp	r3, #0
 802869a:	d122      	bne.n	80286e2 <_vfiprintf_r+0x1da>
 802869c:	2207      	movs	r2, #7
 802869e:	9b07      	ldr	r3, [sp, #28]
 80286a0:	3307      	adds	r3, #7
 80286a2:	4393      	bics	r3, r2
 80286a4:	3308      	adds	r3, #8
 80286a6:	9307      	str	r3, [sp, #28]
 80286a8:	6963      	ldr	r3, [r4, #20]
 80286aa:	9a04      	ldr	r2, [sp, #16]
 80286ac:	189b      	adds	r3, r3, r2
 80286ae:	6163      	str	r3, [r4, #20]
 80286b0:	e762      	b.n	8028578 <_vfiprintf_r+0x70>
 80286b2:	4343      	muls	r3, r0
 80286b4:	002e      	movs	r6, r5
 80286b6:	2101      	movs	r1, #1
 80286b8:	189b      	adds	r3, r3, r2
 80286ba:	e7a4      	b.n	8028606 <_vfiprintf_r+0xfe>
 80286bc:	2300      	movs	r3, #0
 80286be:	200a      	movs	r0, #10
 80286c0:	0019      	movs	r1, r3
 80286c2:	3601      	adds	r6, #1
 80286c4:	6063      	str	r3, [r4, #4]
 80286c6:	7832      	ldrb	r2, [r6, #0]
 80286c8:	1c75      	adds	r5, r6, #1
 80286ca:	3a30      	subs	r2, #48	@ 0x30
 80286cc:	2a09      	cmp	r2, #9
 80286ce:	d903      	bls.n	80286d8 <_vfiprintf_r+0x1d0>
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d0c8      	beq.n	8028666 <_vfiprintf_r+0x15e>
 80286d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80286d6:	e7c6      	b.n	8028666 <_vfiprintf_r+0x15e>
 80286d8:	4341      	muls	r1, r0
 80286da:	002e      	movs	r6, r5
 80286dc:	2301      	movs	r3, #1
 80286de:	1889      	adds	r1, r1, r2
 80286e0:	e7f1      	b.n	80286c6 <_vfiprintf_r+0x1be>
 80286e2:	aa07      	add	r2, sp, #28
 80286e4:	9200      	str	r2, [sp, #0]
 80286e6:	0021      	movs	r1, r4
 80286e8:	003a      	movs	r2, r7
 80286ea:	4b14      	ldr	r3, [pc, #80]	@ (802873c <_vfiprintf_r+0x234>)
 80286ec:	9803      	ldr	r0, [sp, #12]
 80286ee:	f7fc fe89 	bl	8025404 <_printf_float>
 80286f2:	9004      	str	r0, [sp, #16]
 80286f4:	9b04      	ldr	r3, [sp, #16]
 80286f6:	3301      	adds	r3, #1
 80286f8:	d1d6      	bne.n	80286a8 <_vfiprintf_r+0x1a0>
 80286fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80286fc:	07db      	lsls	r3, r3, #31
 80286fe:	d405      	bmi.n	802870c <_vfiprintf_r+0x204>
 8028700:	89bb      	ldrh	r3, [r7, #12]
 8028702:	059b      	lsls	r3, r3, #22
 8028704:	d402      	bmi.n	802870c <_vfiprintf_r+0x204>
 8028706:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028708:	f7fd fda4 	bl	8026254 <__retarget_lock_release_recursive>
 802870c:	89bb      	ldrh	r3, [r7, #12]
 802870e:	065b      	lsls	r3, r3, #25
 8028710:	d500      	bpl.n	8028714 <_vfiprintf_r+0x20c>
 8028712:	e71e      	b.n	8028552 <_vfiprintf_r+0x4a>
 8028714:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028716:	e71e      	b.n	8028556 <_vfiprintf_r+0x4e>
 8028718:	aa07      	add	r2, sp, #28
 802871a:	9200      	str	r2, [sp, #0]
 802871c:	0021      	movs	r1, r4
 802871e:	003a      	movs	r2, r7
 8028720:	4b06      	ldr	r3, [pc, #24]	@ (802873c <_vfiprintf_r+0x234>)
 8028722:	9803      	ldr	r0, [sp, #12]
 8028724:	f7fd f91c 	bl	8025960 <_printf_i>
 8028728:	e7e3      	b.n	80286f2 <_vfiprintf_r+0x1ea>
 802872a:	46c0      	nop			@ (mov r8, r8)
 802872c:	0802e8ac 	.word	0x0802e8ac
 8028730:	0802e8b2 	.word	0x0802e8b2
 8028734:	0802e8b6 	.word	0x0802e8b6
 8028738:	08025405 	.word	0x08025405
 802873c:	080284e3 	.word	0x080284e3

08028740 <__sflush_r>:
 8028740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028742:	220c      	movs	r2, #12
 8028744:	5e8b      	ldrsh	r3, [r1, r2]
 8028746:	0005      	movs	r5, r0
 8028748:	000c      	movs	r4, r1
 802874a:	071a      	lsls	r2, r3, #28
 802874c:	d456      	bmi.n	80287fc <__sflush_r+0xbc>
 802874e:	684a      	ldr	r2, [r1, #4]
 8028750:	2a00      	cmp	r2, #0
 8028752:	dc02      	bgt.n	802875a <__sflush_r+0x1a>
 8028754:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028756:	2a00      	cmp	r2, #0
 8028758:	dd4e      	ble.n	80287f8 <__sflush_r+0xb8>
 802875a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 802875c:	2f00      	cmp	r7, #0
 802875e:	d04b      	beq.n	80287f8 <__sflush_r+0xb8>
 8028760:	2200      	movs	r2, #0
 8028762:	2080      	movs	r0, #128	@ 0x80
 8028764:	682e      	ldr	r6, [r5, #0]
 8028766:	602a      	str	r2, [r5, #0]
 8028768:	001a      	movs	r2, r3
 802876a:	0140      	lsls	r0, r0, #5
 802876c:	6a21      	ldr	r1, [r4, #32]
 802876e:	4002      	ands	r2, r0
 8028770:	4203      	tst	r3, r0
 8028772:	d033      	beq.n	80287dc <__sflush_r+0x9c>
 8028774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028776:	89a3      	ldrh	r3, [r4, #12]
 8028778:	075b      	lsls	r3, r3, #29
 802877a:	d506      	bpl.n	802878a <__sflush_r+0x4a>
 802877c:	6863      	ldr	r3, [r4, #4]
 802877e:	1ad2      	subs	r2, r2, r3
 8028780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028782:	2b00      	cmp	r3, #0
 8028784:	d001      	beq.n	802878a <__sflush_r+0x4a>
 8028786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028788:	1ad2      	subs	r2, r2, r3
 802878a:	2300      	movs	r3, #0
 802878c:	0028      	movs	r0, r5
 802878e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028790:	6a21      	ldr	r1, [r4, #32]
 8028792:	47b8      	blx	r7
 8028794:	89a2      	ldrh	r2, [r4, #12]
 8028796:	1c43      	adds	r3, r0, #1
 8028798:	d106      	bne.n	80287a8 <__sflush_r+0x68>
 802879a:	6829      	ldr	r1, [r5, #0]
 802879c:	291d      	cmp	r1, #29
 802879e:	d846      	bhi.n	802882e <__sflush_r+0xee>
 80287a0:	4b29      	ldr	r3, [pc, #164]	@ (8028848 <__sflush_r+0x108>)
 80287a2:	40cb      	lsrs	r3, r1
 80287a4:	07db      	lsls	r3, r3, #31
 80287a6:	d542      	bpl.n	802882e <__sflush_r+0xee>
 80287a8:	2300      	movs	r3, #0
 80287aa:	6063      	str	r3, [r4, #4]
 80287ac:	6923      	ldr	r3, [r4, #16]
 80287ae:	6023      	str	r3, [r4, #0]
 80287b0:	04d2      	lsls	r2, r2, #19
 80287b2:	d505      	bpl.n	80287c0 <__sflush_r+0x80>
 80287b4:	1c43      	adds	r3, r0, #1
 80287b6:	d102      	bne.n	80287be <__sflush_r+0x7e>
 80287b8:	682b      	ldr	r3, [r5, #0]
 80287ba:	2b00      	cmp	r3, #0
 80287bc:	d100      	bne.n	80287c0 <__sflush_r+0x80>
 80287be:	6560      	str	r0, [r4, #84]	@ 0x54
 80287c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80287c2:	602e      	str	r6, [r5, #0]
 80287c4:	2900      	cmp	r1, #0
 80287c6:	d017      	beq.n	80287f8 <__sflush_r+0xb8>
 80287c8:	0023      	movs	r3, r4
 80287ca:	3344      	adds	r3, #68	@ 0x44
 80287cc:	4299      	cmp	r1, r3
 80287ce:	d002      	beq.n	80287d6 <__sflush_r+0x96>
 80287d0:	0028      	movs	r0, r5
 80287d2:	f7fe fbd1 	bl	8026f78 <_free_r>
 80287d6:	2300      	movs	r3, #0
 80287d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80287da:	e00d      	b.n	80287f8 <__sflush_r+0xb8>
 80287dc:	2301      	movs	r3, #1
 80287de:	0028      	movs	r0, r5
 80287e0:	47b8      	blx	r7
 80287e2:	0002      	movs	r2, r0
 80287e4:	1c43      	adds	r3, r0, #1
 80287e6:	d1c6      	bne.n	8028776 <__sflush_r+0x36>
 80287e8:	682b      	ldr	r3, [r5, #0]
 80287ea:	2b00      	cmp	r3, #0
 80287ec:	d0c3      	beq.n	8028776 <__sflush_r+0x36>
 80287ee:	2b1d      	cmp	r3, #29
 80287f0:	d001      	beq.n	80287f6 <__sflush_r+0xb6>
 80287f2:	2b16      	cmp	r3, #22
 80287f4:	d11a      	bne.n	802882c <__sflush_r+0xec>
 80287f6:	602e      	str	r6, [r5, #0]
 80287f8:	2000      	movs	r0, #0
 80287fa:	e01e      	b.n	802883a <__sflush_r+0xfa>
 80287fc:	690e      	ldr	r6, [r1, #16]
 80287fe:	2e00      	cmp	r6, #0
 8028800:	d0fa      	beq.n	80287f8 <__sflush_r+0xb8>
 8028802:	680f      	ldr	r7, [r1, #0]
 8028804:	600e      	str	r6, [r1, #0]
 8028806:	1bba      	subs	r2, r7, r6
 8028808:	9201      	str	r2, [sp, #4]
 802880a:	2200      	movs	r2, #0
 802880c:	079b      	lsls	r3, r3, #30
 802880e:	d100      	bne.n	8028812 <__sflush_r+0xd2>
 8028810:	694a      	ldr	r2, [r1, #20]
 8028812:	60a2      	str	r2, [r4, #8]
 8028814:	9b01      	ldr	r3, [sp, #4]
 8028816:	2b00      	cmp	r3, #0
 8028818:	ddee      	ble.n	80287f8 <__sflush_r+0xb8>
 802881a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802881c:	0032      	movs	r2, r6
 802881e:	001f      	movs	r7, r3
 8028820:	0028      	movs	r0, r5
 8028822:	9b01      	ldr	r3, [sp, #4]
 8028824:	6a21      	ldr	r1, [r4, #32]
 8028826:	47b8      	blx	r7
 8028828:	2800      	cmp	r0, #0
 802882a:	dc07      	bgt.n	802883c <__sflush_r+0xfc>
 802882c:	89a2      	ldrh	r2, [r4, #12]
 802882e:	2340      	movs	r3, #64	@ 0x40
 8028830:	2001      	movs	r0, #1
 8028832:	4313      	orrs	r3, r2
 8028834:	b21b      	sxth	r3, r3
 8028836:	81a3      	strh	r3, [r4, #12]
 8028838:	4240      	negs	r0, r0
 802883a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802883c:	9b01      	ldr	r3, [sp, #4]
 802883e:	1836      	adds	r6, r6, r0
 8028840:	1a1b      	subs	r3, r3, r0
 8028842:	9301      	str	r3, [sp, #4]
 8028844:	e7e6      	b.n	8028814 <__sflush_r+0xd4>
 8028846:	46c0      	nop			@ (mov r8, r8)
 8028848:	20400001 	.word	0x20400001

0802884c <_fflush_r>:
 802884c:	690b      	ldr	r3, [r1, #16]
 802884e:	b570      	push	{r4, r5, r6, lr}
 8028850:	0005      	movs	r5, r0
 8028852:	000c      	movs	r4, r1
 8028854:	2b00      	cmp	r3, #0
 8028856:	d102      	bne.n	802885e <_fflush_r+0x12>
 8028858:	2500      	movs	r5, #0
 802885a:	0028      	movs	r0, r5
 802885c:	bd70      	pop	{r4, r5, r6, pc}
 802885e:	2800      	cmp	r0, #0
 8028860:	d004      	beq.n	802886c <_fflush_r+0x20>
 8028862:	6a03      	ldr	r3, [r0, #32]
 8028864:	2b00      	cmp	r3, #0
 8028866:	d101      	bne.n	802886c <_fflush_r+0x20>
 8028868:	f7fd fa16 	bl	8025c98 <__sinit>
 802886c:	220c      	movs	r2, #12
 802886e:	5ea3      	ldrsh	r3, [r4, r2]
 8028870:	2b00      	cmp	r3, #0
 8028872:	d0f1      	beq.n	8028858 <_fflush_r+0xc>
 8028874:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028876:	07d2      	lsls	r2, r2, #31
 8028878:	d404      	bmi.n	8028884 <_fflush_r+0x38>
 802887a:	059b      	lsls	r3, r3, #22
 802887c:	d402      	bmi.n	8028884 <_fflush_r+0x38>
 802887e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028880:	f7fd fce7 	bl	8026252 <__retarget_lock_acquire_recursive>
 8028884:	0028      	movs	r0, r5
 8028886:	0021      	movs	r1, r4
 8028888:	f7ff ff5a 	bl	8028740 <__sflush_r>
 802888c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802888e:	0005      	movs	r5, r0
 8028890:	07db      	lsls	r3, r3, #31
 8028892:	d4e2      	bmi.n	802885a <_fflush_r+0xe>
 8028894:	89a3      	ldrh	r3, [r4, #12]
 8028896:	059b      	lsls	r3, r3, #22
 8028898:	d4df      	bmi.n	802885a <_fflush_r+0xe>
 802889a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802889c:	f7fd fcda 	bl	8026254 <__retarget_lock_release_recursive>
 80288a0:	e7db      	b.n	802885a <_fflush_r+0xe>
	...

080288a4 <__swhatbuf_r>:
 80288a4:	b570      	push	{r4, r5, r6, lr}
 80288a6:	000e      	movs	r6, r1
 80288a8:	001d      	movs	r5, r3
 80288aa:	230e      	movs	r3, #14
 80288ac:	5ec9      	ldrsh	r1, [r1, r3]
 80288ae:	0014      	movs	r4, r2
 80288b0:	b096      	sub	sp, #88	@ 0x58
 80288b2:	2900      	cmp	r1, #0
 80288b4:	da0c      	bge.n	80288d0 <__swhatbuf_r+0x2c>
 80288b6:	89b2      	ldrh	r2, [r6, #12]
 80288b8:	2380      	movs	r3, #128	@ 0x80
 80288ba:	0011      	movs	r1, r2
 80288bc:	4019      	ands	r1, r3
 80288be:	421a      	tst	r2, r3
 80288c0:	d114      	bne.n	80288ec <__swhatbuf_r+0x48>
 80288c2:	2380      	movs	r3, #128	@ 0x80
 80288c4:	00db      	lsls	r3, r3, #3
 80288c6:	2000      	movs	r0, #0
 80288c8:	6029      	str	r1, [r5, #0]
 80288ca:	6023      	str	r3, [r4, #0]
 80288cc:	b016      	add	sp, #88	@ 0x58
 80288ce:	bd70      	pop	{r4, r5, r6, pc}
 80288d0:	466a      	mov	r2, sp
 80288d2:	f000 f865 	bl	80289a0 <_fstat_r>
 80288d6:	2800      	cmp	r0, #0
 80288d8:	dbed      	blt.n	80288b6 <__swhatbuf_r+0x12>
 80288da:	23f0      	movs	r3, #240	@ 0xf0
 80288dc:	9901      	ldr	r1, [sp, #4]
 80288de:	021b      	lsls	r3, r3, #8
 80288e0:	4019      	ands	r1, r3
 80288e2:	4b04      	ldr	r3, [pc, #16]	@ (80288f4 <__swhatbuf_r+0x50>)
 80288e4:	18c9      	adds	r1, r1, r3
 80288e6:	424b      	negs	r3, r1
 80288e8:	4159      	adcs	r1, r3
 80288ea:	e7ea      	b.n	80288c2 <__swhatbuf_r+0x1e>
 80288ec:	2100      	movs	r1, #0
 80288ee:	2340      	movs	r3, #64	@ 0x40
 80288f0:	e7e9      	b.n	80288c6 <__swhatbuf_r+0x22>
 80288f2:	46c0      	nop			@ (mov r8, r8)
 80288f4:	ffffe000 	.word	0xffffe000

080288f8 <__smakebuf_r>:
 80288f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288fa:	2602      	movs	r6, #2
 80288fc:	898b      	ldrh	r3, [r1, #12]
 80288fe:	0005      	movs	r5, r0
 8028900:	000c      	movs	r4, r1
 8028902:	b085      	sub	sp, #20
 8028904:	4233      	tst	r3, r6
 8028906:	d007      	beq.n	8028918 <__smakebuf_r+0x20>
 8028908:	0023      	movs	r3, r4
 802890a:	3347      	adds	r3, #71	@ 0x47
 802890c:	6023      	str	r3, [r4, #0]
 802890e:	6123      	str	r3, [r4, #16]
 8028910:	2301      	movs	r3, #1
 8028912:	6163      	str	r3, [r4, #20]
 8028914:	b005      	add	sp, #20
 8028916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028918:	ab03      	add	r3, sp, #12
 802891a:	aa02      	add	r2, sp, #8
 802891c:	f7ff ffc2 	bl	80288a4 <__swhatbuf_r>
 8028920:	9f02      	ldr	r7, [sp, #8]
 8028922:	9001      	str	r0, [sp, #4]
 8028924:	0039      	movs	r1, r7
 8028926:	0028      	movs	r0, r5
 8028928:	f7fe fef6 	bl	8027718 <_malloc_r>
 802892c:	2800      	cmp	r0, #0
 802892e:	d108      	bne.n	8028942 <__smakebuf_r+0x4a>
 8028930:	220c      	movs	r2, #12
 8028932:	5ea3      	ldrsh	r3, [r4, r2]
 8028934:	059a      	lsls	r2, r3, #22
 8028936:	d4ed      	bmi.n	8028914 <__smakebuf_r+0x1c>
 8028938:	2203      	movs	r2, #3
 802893a:	4393      	bics	r3, r2
 802893c:	431e      	orrs	r6, r3
 802893e:	81a6      	strh	r6, [r4, #12]
 8028940:	e7e2      	b.n	8028908 <__smakebuf_r+0x10>
 8028942:	2380      	movs	r3, #128	@ 0x80
 8028944:	89a2      	ldrh	r2, [r4, #12]
 8028946:	6020      	str	r0, [r4, #0]
 8028948:	4313      	orrs	r3, r2
 802894a:	81a3      	strh	r3, [r4, #12]
 802894c:	9b03      	ldr	r3, [sp, #12]
 802894e:	6120      	str	r0, [r4, #16]
 8028950:	6167      	str	r7, [r4, #20]
 8028952:	2b00      	cmp	r3, #0
 8028954:	d00c      	beq.n	8028970 <__smakebuf_r+0x78>
 8028956:	0028      	movs	r0, r5
 8028958:	230e      	movs	r3, #14
 802895a:	5ee1      	ldrsh	r1, [r4, r3]
 802895c:	f000 f832 	bl	80289c4 <_isatty_r>
 8028960:	2800      	cmp	r0, #0
 8028962:	d005      	beq.n	8028970 <__smakebuf_r+0x78>
 8028964:	2303      	movs	r3, #3
 8028966:	89a2      	ldrh	r2, [r4, #12]
 8028968:	439a      	bics	r2, r3
 802896a:	3b02      	subs	r3, #2
 802896c:	4313      	orrs	r3, r2
 802896e:	81a3      	strh	r3, [r4, #12]
 8028970:	89a3      	ldrh	r3, [r4, #12]
 8028972:	9a01      	ldr	r2, [sp, #4]
 8028974:	4313      	orrs	r3, r2
 8028976:	81a3      	strh	r3, [r4, #12]
 8028978:	e7cc      	b.n	8028914 <__smakebuf_r+0x1c>

0802897a <memmove>:
 802897a:	b510      	push	{r4, lr}
 802897c:	4288      	cmp	r0, r1
 802897e:	d902      	bls.n	8028986 <memmove+0xc>
 8028980:	188b      	adds	r3, r1, r2
 8028982:	4298      	cmp	r0, r3
 8028984:	d308      	bcc.n	8028998 <memmove+0x1e>
 8028986:	2300      	movs	r3, #0
 8028988:	429a      	cmp	r2, r3
 802898a:	d007      	beq.n	802899c <memmove+0x22>
 802898c:	5ccc      	ldrb	r4, [r1, r3]
 802898e:	54c4      	strb	r4, [r0, r3]
 8028990:	3301      	adds	r3, #1
 8028992:	e7f9      	b.n	8028988 <memmove+0xe>
 8028994:	5c8b      	ldrb	r3, [r1, r2]
 8028996:	5483      	strb	r3, [r0, r2]
 8028998:	3a01      	subs	r2, #1
 802899a:	d2fb      	bcs.n	8028994 <memmove+0x1a>
 802899c:	bd10      	pop	{r4, pc}
	...

080289a0 <_fstat_r>:
 80289a0:	2300      	movs	r3, #0
 80289a2:	b570      	push	{r4, r5, r6, lr}
 80289a4:	4d06      	ldr	r5, [pc, #24]	@ (80289c0 <_fstat_r+0x20>)
 80289a6:	0004      	movs	r4, r0
 80289a8:	0008      	movs	r0, r1
 80289aa:	0011      	movs	r1, r2
 80289ac:	602b      	str	r3, [r5, #0]
 80289ae:	f7ea fc39 	bl	8013224 <_fstat>
 80289b2:	1c43      	adds	r3, r0, #1
 80289b4:	d103      	bne.n	80289be <_fstat_r+0x1e>
 80289b6:	682b      	ldr	r3, [r5, #0]
 80289b8:	2b00      	cmp	r3, #0
 80289ba:	d000      	beq.n	80289be <_fstat_r+0x1e>
 80289bc:	6023      	str	r3, [r4, #0]
 80289be:	bd70      	pop	{r4, r5, r6, pc}
 80289c0:	20003764 	.word	0x20003764

080289c4 <_isatty_r>:
 80289c4:	2300      	movs	r3, #0
 80289c6:	b570      	push	{r4, r5, r6, lr}
 80289c8:	4d06      	ldr	r5, [pc, #24]	@ (80289e4 <_isatty_r+0x20>)
 80289ca:	0004      	movs	r4, r0
 80289cc:	0008      	movs	r0, r1
 80289ce:	602b      	str	r3, [r5, #0]
 80289d0:	f7ea fc36 	bl	8013240 <_isatty>
 80289d4:	1c43      	adds	r3, r0, #1
 80289d6:	d103      	bne.n	80289e0 <_isatty_r+0x1c>
 80289d8:	682b      	ldr	r3, [r5, #0]
 80289da:	2b00      	cmp	r3, #0
 80289dc:	d000      	beq.n	80289e0 <_isatty_r+0x1c>
 80289de:	6023      	str	r3, [r4, #0]
 80289e0:	bd70      	pop	{r4, r5, r6, pc}
 80289e2:	46c0      	nop			@ (mov r8, r8)
 80289e4:	20003764 	.word	0x20003764

080289e8 <_sbrk_r>:
 80289e8:	2300      	movs	r3, #0
 80289ea:	b570      	push	{r4, r5, r6, lr}
 80289ec:	4d06      	ldr	r5, [pc, #24]	@ (8028a08 <_sbrk_r+0x20>)
 80289ee:	0004      	movs	r4, r0
 80289f0:	0008      	movs	r0, r1
 80289f2:	602b      	str	r3, [r5, #0]
 80289f4:	f7ea fc38 	bl	8013268 <_sbrk>
 80289f8:	1c43      	adds	r3, r0, #1
 80289fa:	d103      	bne.n	8028a04 <_sbrk_r+0x1c>
 80289fc:	682b      	ldr	r3, [r5, #0]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d000      	beq.n	8028a04 <_sbrk_r+0x1c>
 8028a02:	6023      	str	r3, [r4, #0]
 8028a04:	bd70      	pop	{r4, r5, r6, pc}
 8028a06:	46c0      	nop			@ (mov r8, r8)
 8028a08:	20003764 	.word	0x20003764

08028a0c <__assert_func>:
 8028a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028a0e:	0014      	movs	r4, r2
 8028a10:	001a      	movs	r2, r3
 8028a12:	4b09      	ldr	r3, [pc, #36]	@ (8028a38 <__assert_func+0x2c>)
 8028a14:	0005      	movs	r5, r0
 8028a16:	681b      	ldr	r3, [r3, #0]
 8028a18:	000e      	movs	r6, r1
 8028a1a:	68d8      	ldr	r0, [r3, #12]
 8028a1c:	4b07      	ldr	r3, [pc, #28]	@ (8028a3c <__assert_func+0x30>)
 8028a1e:	2c00      	cmp	r4, #0
 8028a20:	d101      	bne.n	8028a26 <__assert_func+0x1a>
 8028a22:	4b07      	ldr	r3, [pc, #28]	@ (8028a40 <__assert_func+0x34>)
 8028a24:	001c      	movs	r4, r3
 8028a26:	4907      	ldr	r1, [pc, #28]	@ (8028a44 <__assert_func+0x38>)
 8028a28:	9301      	str	r3, [sp, #4]
 8028a2a:	9402      	str	r4, [sp, #8]
 8028a2c:	002b      	movs	r3, r5
 8028a2e:	9600      	str	r6, [sp, #0]
 8028a30:	f000 f868 	bl	8028b04 <fiprintf>
 8028a34:	f000 f876 	bl	8028b24 <abort>
 8028a38:	200003ec 	.word	0x200003ec
 8028a3c:	0802e8bd 	.word	0x0802e8bd
 8028a40:	0802e8f8 	.word	0x0802e8f8
 8028a44:	0802e8ca 	.word	0x0802e8ca

08028a48 <_calloc_r>:
 8028a48:	b570      	push	{r4, r5, r6, lr}
 8028a4a:	0c0b      	lsrs	r3, r1, #16
 8028a4c:	0c15      	lsrs	r5, r2, #16
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d11e      	bne.n	8028a90 <_calloc_r+0x48>
 8028a52:	2d00      	cmp	r5, #0
 8028a54:	d10c      	bne.n	8028a70 <_calloc_r+0x28>
 8028a56:	b289      	uxth	r1, r1
 8028a58:	b294      	uxth	r4, r2
 8028a5a:	434c      	muls	r4, r1
 8028a5c:	0021      	movs	r1, r4
 8028a5e:	f7fe fe5b 	bl	8027718 <_malloc_r>
 8028a62:	1e05      	subs	r5, r0, #0
 8028a64:	d01b      	beq.n	8028a9e <_calloc_r+0x56>
 8028a66:	0022      	movs	r2, r4
 8028a68:	2100      	movs	r1, #0
 8028a6a:	f7fd fb23 	bl	80260b4 <memset>
 8028a6e:	e016      	b.n	8028a9e <_calloc_r+0x56>
 8028a70:	1c2b      	adds	r3, r5, #0
 8028a72:	1c0c      	adds	r4, r1, #0
 8028a74:	b289      	uxth	r1, r1
 8028a76:	b292      	uxth	r2, r2
 8028a78:	434a      	muls	r2, r1
 8028a7a:	b29b      	uxth	r3, r3
 8028a7c:	b2a1      	uxth	r1, r4
 8028a7e:	4359      	muls	r1, r3
 8028a80:	0c14      	lsrs	r4, r2, #16
 8028a82:	190c      	adds	r4, r1, r4
 8028a84:	0c23      	lsrs	r3, r4, #16
 8028a86:	d107      	bne.n	8028a98 <_calloc_r+0x50>
 8028a88:	0424      	lsls	r4, r4, #16
 8028a8a:	b292      	uxth	r2, r2
 8028a8c:	4314      	orrs	r4, r2
 8028a8e:	e7e5      	b.n	8028a5c <_calloc_r+0x14>
 8028a90:	2d00      	cmp	r5, #0
 8028a92:	d101      	bne.n	8028a98 <_calloc_r+0x50>
 8028a94:	1c14      	adds	r4, r2, #0
 8028a96:	e7ed      	b.n	8028a74 <_calloc_r+0x2c>
 8028a98:	230c      	movs	r3, #12
 8028a9a:	2500      	movs	r5, #0
 8028a9c:	6003      	str	r3, [r0, #0]
 8028a9e:	0028      	movs	r0, r5
 8028aa0:	bd70      	pop	{r4, r5, r6, pc}

08028aa2 <_realloc_r>:
 8028aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028aa4:	0006      	movs	r6, r0
 8028aa6:	000c      	movs	r4, r1
 8028aa8:	0015      	movs	r5, r2
 8028aaa:	2900      	cmp	r1, #0
 8028aac:	d105      	bne.n	8028aba <_realloc_r+0x18>
 8028aae:	0011      	movs	r1, r2
 8028ab0:	f7fe fe32 	bl	8027718 <_malloc_r>
 8028ab4:	0004      	movs	r4, r0
 8028ab6:	0020      	movs	r0, r4
 8028ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028aba:	2a00      	cmp	r2, #0
 8028abc:	d103      	bne.n	8028ac6 <_realloc_r+0x24>
 8028abe:	f7fe fa5b 	bl	8026f78 <_free_r>
 8028ac2:	002c      	movs	r4, r5
 8028ac4:	e7f7      	b.n	8028ab6 <_realloc_r+0x14>
 8028ac6:	f000 f834 	bl	8028b32 <_malloc_usable_size_r>
 8028aca:	0007      	movs	r7, r0
 8028acc:	4285      	cmp	r5, r0
 8028ace:	d802      	bhi.n	8028ad6 <_realloc_r+0x34>
 8028ad0:	0843      	lsrs	r3, r0, #1
 8028ad2:	42ab      	cmp	r3, r5
 8028ad4:	d3ef      	bcc.n	8028ab6 <_realloc_r+0x14>
 8028ad6:	0029      	movs	r1, r5
 8028ad8:	0030      	movs	r0, r6
 8028ada:	f7fe fe1d 	bl	8027718 <_malloc_r>
 8028ade:	9001      	str	r0, [sp, #4]
 8028ae0:	2800      	cmp	r0, #0
 8028ae2:	d101      	bne.n	8028ae8 <_realloc_r+0x46>
 8028ae4:	9c01      	ldr	r4, [sp, #4]
 8028ae6:	e7e6      	b.n	8028ab6 <_realloc_r+0x14>
 8028ae8:	002a      	movs	r2, r5
 8028aea:	42bd      	cmp	r5, r7
 8028aec:	d900      	bls.n	8028af0 <_realloc_r+0x4e>
 8028aee:	003a      	movs	r2, r7
 8028af0:	0021      	movs	r1, r4
 8028af2:	9801      	ldr	r0, [sp, #4]
 8028af4:	f7fd fbba 	bl	802626c <memcpy>
 8028af8:	0021      	movs	r1, r4
 8028afa:	0030      	movs	r0, r6
 8028afc:	f7fe fa3c 	bl	8026f78 <_free_r>
 8028b00:	e7f0      	b.n	8028ae4 <_realloc_r+0x42>
	...

08028b04 <fiprintf>:
 8028b04:	b40e      	push	{r1, r2, r3}
 8028b06:	b517      	push	{r0, r1, r2, r4, lr}
 8028b08:	4c05      	ldr	r4, [pc, #20]	@ (8028b20 <fiprintf+0x1c>)
 8028b0a:	ab05      	add	r3, sp, #20
 8028b0c:	cb04      	ldmia	r3!, {r2}
 8028b0e:	0001      	movs	r1, r0
 8028b10:	6820      	ldr	r0, [r4, #0]
 8028b12:	9301      	str	r3, [sp, #4]
 8028b14:	f7ff fcf8 	bl	8028508 <_vfiprintf_r>
 8028b18:	bc1e      	pop	{r1, r2, r3, r4}
 8028b1a:	bc08      	pop	{r3}
 8028b1c:	b003      	add	sp, #12
 8028b1e:	4718      	bx	r3
 8028b20:	200003ec 	.word	0x200003ec

08028b24 <abort>:
 8028b24:	2006      	movs	r0, #6
 8028b26:	b510      	push	{r4, lr}
 8028b28:	f000 f834 	bl	8028b94 <raise>
 8028b2c:	2001      	movs	r0, #1
 8028b2e:	f7ea fb45 	bl	80131bc <_exit>

08028b32 <_malloc_usable_size_r>:
 8028b32:	1f0b      	subs	r3, r1, #4
 8028b34:	681b      	ldr	r3, [r3, #0]
 8028b36:	1f18      	subs	r0, r3, #4
 8028b38:	2b00      	cmp	r3, #0
 8028b3a:	da01      	bge.n	8028b40 <_malloc_usable_size_r+0xe>
 8028b3c:	580b      	ldr	r3, [r1, r0]
 8028b3e:	18c0      	adds	r0, r0, r3
 8028b40:	4770      	bx	lr

08028b42 <_raise_r>:
 8028b42:	b570      	push	{r4, r5, r6, lr}
 8028b44:	0004      	movs	r4, r0
 8028b46:	000d      	movs	r5, r1
 8028b48:	291f      	cmp	r1, #31
 8028b4a:	d904      	bls.n	8028b56 <_raise_r+0x14>
 8028b4c:	2316      	movs	r3, #22
 8028b4e:	6003      	str	r3, [r0, #0]
 8028b50:	2001      	movs	r0, #1
 8028b52:	4240      	negs	r0, r0
 8028b54:	bd70      	pop	{r4, r5, r6, pc}
 8028b56:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028b58:	2b00      	cmp	r3, #0
 8028b5a:	d004      	beq.n	8028b66 <_raise_r+0x24>
 8028b5c:	008a      	lsls	r2, r1, #2
 8028b5e:	189b      	adds	r3, r3, r2
 8028b60:	681a      	ldr	r2, [r3, #0]
 8028b62:	2a00      	cmp	r2, #0
 8028b64:	d108      	bne.n	8028b78 <_raise_r+0x36>
 8028b66:	0020      	movs	r0, r4
 8028b68:	f000 f830 	bl	8028bcc <_getpid_r>
 8028b6c:	002a      	movs	r2, r5
 8028b6e:	0001      	movs	r1, r0
 8028b70:	0020      	movs	r0, r4
 8028b72:	f000 f819 	bl	8028ba8 <_kill_r>
 8028b76:	e7ed      	b.n	8028b54 <_raise_r+0x12>
 8028b78:	2a01      	cmp	r2, #1
 8028b7a:	d009      	beq.n	8028b90 <_raise_r+0x4e>
 8028b7c:	1c51      	adds	r1, r2, #1
 8028b7e:	d103      	bne.n	8028b88 <_raise_r+0x46>
 8028b80:	2316      	movs	r3, #22
 8028b82:	6003      	str	r3, [r0, #0]
 8028b84:	2001      	movs	r0, #1
 8028b86:	e7e5      	b.n	8028b54 <_raise_r+0x12>
 8028b88:	2100      	movs	r1, #0
 8028b8a:	0028      	movs	r0, r5
 8028b8c:	6019      	str	r1, [r3, #0]
 8028b8e:	4790      	blx	r2
 8028b90:	2000      	movs	r0, #0
 8028b92:	e7df      	b.n	8028b54 <_raise_r+0x12>

08028b94 <raise>:
 8028b94:	b510      	push	{r4, lr}
 8028b96:	4b03      	ldr	r3, [pc, #12]	@ (8028ba4 <raise+0x10>)
 8028b98:	0001      	movs	r1, r0
 8028b9a:	6818      	ldr	r0, [r3, #0]
 8028b9c:	f7ff ffd1 	bl	8028b42 <_raise_r>
 8028ba0:	bd10      	pop	{r4, pc}
 8028ba2:	46c0      	nop			@ (mov r8, r8)
 8028ba4:	200003ec 	.word	0x200003ec

08028ba8 <_kill_r>:
 8028ba8:	2300      	movs	r3, #0
 8028baa:	b570      	push	{r4, r5, r6, lr}
 8028bac:	4d06      	ldr	r5, [pc, #24]	@ (8028bc8 <_kill_r+0x20>)
 8028bae:	0004      	movs	r4, r0
 8028bb0:	0008      	movs	r0, r1
 8028bb2:	0011      	movs	r1, r2
 8028bb4:	602b      	str	r3, [r5, #0]
 8028bb6:	f7ea faf1 	bl	801319c <_kill>
 8028bba:	1c43      	adds	r3, r0, #1
 8028bbc:	d103      	bne.n	8028bc6 <_kill_r+0x1e>
 8028bbe:	682b      	ldr	r3, [r5, #0]
 8028bc0:	2b00      	cmp	r3, #0
 8028bc2:	d000      	beq.n	8028bc6 <_kill_r+0x1e>
 8028bc4:	6023      	str	r3, [r4, #0]
 8028bc6:	bd70      	pop	{r4, r5, r6, pc}
 8028bc8:	20003764 	.word	0x20003764

08028bcc <_getpid_r>:
 8028bcc:	b510      	push	{r4, lr}
 8028bce:	f7ea fadf 	bl	8013190 <_getpid>
 8028bd2:	bd10      	pop	{r4, pc}

08028bd4 <log>:
 8028bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bd6:	0004      	movs	r4, r0
 8028bd8:	000d      	movs	r5, r1
 8028bda:	f000 f98d 	bl	8028ef8 <__ieee754_log>
 8028bde:	0022      	movs	r2, r4
 8028be0:	0006      	movs	r6, r0
 8028be2:	000f      	movs	r7, r1
 8028be4:	002b      	movs	r3, r5
 8028be6:	0020      	movs	r0, r4
 8028be8:	0029      	movs	r1, r5
 8028bea:	f7da fda3 	bl	8003734 <__aeabi_dcmpun>
 8028bee:	2800      	cmp	r0, #0
 8028bf0:	d115      	bne.n	8028c1e <log+0x4a>
 8028bf2:	2200      	movs	r2, #0
 8028bf4:	2300      	movs	r3, #0
 8028bf6:	0020      	movs	r0, r4
 8028bf8:	0029      	movs	r1, r5
 8028bfa:	f7d7 fc73 	bl	80004e4 <__aeabi_dcmpgt>
 8028bfe:	2800      	cmp	r0, #0
 8028c00:	d10d      	bne.n	8028c1e <log+0x4a>
 8028c02:	2200      	movs	r2, #0
 8028c04:	2300      	movs	r3, #0
 8028c06:	0020      	movs	r0, r4
 8028c08:	0029      	movs	r1, r5
 8028c0a:	f7d7 fc51 	bl	80004b0 <__aeabi_dcmpeq>
 8028c0e:	2800      	cmp	r0, #0
 8028c10:	d008      	beq.n	8028c24 <log+0x50>
 8028c12:	f7fd faf3 	bl	80261fc <__errno>
 8028c16:	2322      	movs	r3, #34	@ 0x22
 8028c18:	2600      	movs	r6, #0
 8028c1a:	4f07      	ldr	r7, [pc, #28]	@ (8028c38 <log+0x64>)
 8028c1c:	6003      	str	r3, [r0, #0]
 8028c1e:	0030      	movs	r0, r6
 8028c20:	0039      	movs	r1, r7
 8028c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028c24:	f7fd faea 	bl	80261fc <__errno>
 8028c28:	2321      	movs	r3, #33	@ 0x21
 8028c2a:	6003      	str	r3, [r0, #0]
 8028c2c:	4803      	ldr	r0, [pc, #12]	@ (8028c3c <log+0x68>)
 8028c2e:	f7fd fb27 	bl	8026280 <nan>
 8028c32:	0006      	movs	r6, r0
 8028c34:	000f      	movs	r7, r1
 8028c36:	e7f2      	b.n	8028c1e <log+0x4a>
 8028c38:	fff00000 	.word	0xfff00000
 8028c3c:	0802e8f8 	.word	0x0802e8f8

08028c40 <pow>:
 8028c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028c42:	0014      	movs	r4, r2
 8028c44:	001d      	movs	r5, r3
 8028c46:	9000      	str	r0, [sp, #0]
 8028c48:	9101      	str	r1, [sp, #4]
 8028c4a:	f000 fb07 	bl	802925c <__ieee754_pow>
 8028c4e:	0022      	movs	r2, r4
 8028c50:	0006      	movs	r6, r0
 8028c52:	000f      	movs	r7, r1
 8028c54:	002b      	movs	r3, r5
 8028c56:	0020      	movs	r0, r4
 8028c58:	0029      	movs	r1, r5
 8028c5a:	f7da fd6b 	bl	8003734 <__aeabi_dcmpun>
 8028c5e:	2800      	cmp	r0, #0
 8028c60:	d13f      	bne.n	8028ce2 <pow+0xa2>
 8028c62:	9800      	ldr	r0, [sp, #0]
 8028c64:	9901      	ldr	r1, [sp, #4]
 8028c66:	2200      	movs	r2, #0
 8028c68:	2300      	movs	r3, #0
 8028c6a:	f7d7 fc21 	bl	80004b0 <__aeabi_dcmpeq>
 8028c6e:	2800      	cmp	r0, #0
 8028c70:	d019      	beq.n	8028ca6 <pow+0x66>
 8028c72:	2200      	movs	r2, #0
 8028c74:	2300      	movs	r3, #0
 8028c76:	0020      	movs	r0, r4
 8028c78:	0029      	movs	r1, r5
 8028c7a:	f7d7 fc19 	bl	80004b0 <__aeabi_dcmpeq>
 8028c7e:	2800      	cmp	r0, #0
 8028c80:	d146      	bne.n	8028d10 <pow+0xd0>
 8028c82:	0020      	movs	r0, r4
 8028c84:	0029      	movs	r1, r5
 8028c86:	f000 f88d 	bl	8028da4 <finite>
 8028c8a:	2800      	cmp	r0, #0
 8028c8c:	d029      	beq.n	8028ce2 <pow+0xa2>
 8028c8e:	2200      	movs	r2, #0
 8028c90:	2300      	movs	r3, #0
 8028c92:	0020      	movs	r0, r4
 8028c94:	0029      	movs	r1, r5
 8028c96:	f7d7 fc11 	bl	80004bc <__aeabi_dcmplt>
 8028c9a:	2800      	cmp	r0, #0
 8028c9c:	d021      	beq.n	8028ce2 <pow+0xa2>
 8028c9e:	f7fd faad 	bl	80261fc <__errno>
 8028ca2:	2322      	movs	r3, #34	@ 0x22
 8028ca4:	e01c      	b.n	8028ce0 <pow+0xa0>
 8028ca6:	0030      	movs	r0, r6
 8028ca8:	0039      	movs	r1, r7
 8028caa:	f000 f87b 	bl	8028da4 <finite>
 8028cae:	2800      	cmp	r0, #0
 8028cb0:	d11b      	bne.n	8028cea <pow+0xaa>
 8028cb2:	9800      	ldr	r0, [sp, #0]
 8028cb4:	9901      	ldr	r1, [sp, #4]
 8028cb6:	f000 f875 	bl	8028da4 <finite>
 8028cba:	2800      	cmp	r0, #0
 8028cbc:	d015      	beq.n	8028cea <pow+0xaa>
 8028cbe:	0020      	movs	r0, r4
 8028cc0:	0029      	movs	r1, r5
 8028cc2:	f000 f86f 	bl	8028da4 <finite>
 8028cc6:	2800      	cmp	r0, #0
 8028cc8:	d00f      	beq.n	8028cea <pow+0xaa>
 8028cca:	0032      	movs	r2, r6
 8028ccc:	003b      	movs	r3, r7
 8028cce:	0030      	movs	r0, r6
 8028cd0:	0039      	movs	r1, r7
 8028cd2:	f7da fd2f 	bl	8003734 <__aeabi_dcmpun>
 8028cd6:	2800      	cmp	r0, #0
 8028cd8:	d0e1      	beq.n	8028c9e <pow+0x5e>
 8028cda:	f7fd fa8f 	bl	80261fc <__errno>
 8028cde:	2321      	movs	r3, #33	@ 0x21
 8028ce0:	6003      	str	r3, [r0, #0]
 8028ce2:	0030      	movs	r0, r6
 8028ce4:	0039      	movs	r1, r7
 8028ce6:	b003      	add	sp, #12
 8028ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028cea:	2200      	movs	r2, #0
 8028cec:	2300      	movs	r3, #0
 8028cee:	0030      	movs	r0, r6
 8028cf0:	0039      	movs	r1, r7
 8028cf2:	f7d7 fbdd 	bl	80004b0 <__aeabi_dcmpeq>
 8028cf6:	2800      	cmp	r0, #0
 8028cf8:	d0f3      	beq.n	8028ce2 <pow+0xa2>
 8028cfa:	9800      	ldr	r0, [sp, #0]
 8028cfc:	9901      	ldr	r1, [sp, #4]
 8028cfe:	f000 f851 	bl	8028da4 <finite>
 8028d02:	2800      	cmp	r0, #0
 8028d04:	d0ed      	beq.n	8028ce2 <pow+0xa2>
 8028d06:	0020      	movs	r0, r4
 8028d08:	0029      	movs	r1, r5
 8028d0a:	f000 f84b 	bl	8028da4 <finite>
 8028d0e:	e7c4      	b.n	8028c9a <pow+0x5a>
 8028d10:	2600      	movs	r6, #0
 8028d12:	4f01      	ldr	r7, [pc, #4]	@ (8028d18 <pow+0xd8>)
 8028d14:	e7e5      	b.n	8028ce2 <pow+0xa2>
 8028d16:	46c0      	nop			@ (mov r8, r8)
 8028d18:	3ff00000 	.word	0x3ff00000

08028d1c <expf>:
 8028d1c:	b570      	push	{r4, r5, r6, lr}
 8028d1e:	1c04      	adds	r4, r0, #0
 8028d20:	f000 ffb8 	bl	8029c94 <__ieee754_expf>
 8028d24:	1c05      	adds	r5, r0, #0
 8028d26:	1c20      	adds	r0, r4, #0
 8028d28:	f000 f844 	bl	8028db4 <finitef>
 8028d2c:	2800      	cmp	r0, #0
 8028d2e:	d00b      	beq.n	8028d48 <expf+0x2c>
 8028d30:	490c      	ldr	r1, [pc, #48]	@ (8028d64 <expf+0x48>)
 8028d32:	1c20      	adds	r0, r4, #0
 8028d34:	f7d7 fc10 	bl	8000558 <__aeabi_fcmpgt>
 8028d38:	2800      	cmp	r0, #0
 8028d3a:	d007      	beq.n	8028d4c <expf+0x30>
 8028d3c:	f7fd fa5e 	bl	80261fc <__errno>
 8028d40:	25ff      	movs	r5, #255	@ 0xff
 8028d42:	2322      	movs	r3, #34	@ 0x22
 8028d44:	05ed      	lsls	r5, r5, #23
 8028d46:	6003      	str	r3, [r0, #0]
 8028d48:	1c28      	adds	r0, r5, #0
 8028d4a:	bd70      	pop	{r4, r5, r6, pc}
 8028d4c:	4906      	ldr	r1, [pc, #24]	@ (8028d68 <expf+0x4c>)
 8028d4e:	1c20      	adds	r0, r4, #0
 8028d50:	f7d7 fbee 	bl	8000530 <__aeabi_fcmplt>
 8028d54:	2800      	cmp	r0, #0
 8028d56:	d0f7      	beq.n	8028d48 <expf+0x2c>
 8028d58:	f7fd fa50 	bl	80261fc <__errno>
 8028d5c:	2322      	movs	r3, #34	@ 0x22
 8028d5e:	2500      	movs	r5, #0
 8028d60:	6003      	str	r3, [r0, #0]
 8028d62:	e7f1      	b.n	8028d48 <expf+0x2c>
 8028d64:	42b17217 	.word	0x42b17217
 8028d68:	c2cff1b5 	.word	0xc2cff1b5

08028d6c <sqrtf>:
 8028d6c:	b570      	push	{r4, r5, r6, lr}
 8028d6e:	1c05      	adds	r5, r0, #0
 8028d70:	f000 f82a 	bl	8028dc8 <__ieee754_sqrtf>
 8028d74:	1c29      	adds	r1, r5, #0
 8028d76:	1c04      	adds	r4, r0, #0
 8028d78:	1c28      	adds	r0, r5, #0
 8028d7a:	f7d8 fd1f 	bl	80017bc <__aeabi_fcmpun>
 8028d7e:	2800      	cmp	r0, #0
 8028d80:	d10e      	bne.n	8028da0 <sqrtf+0x34>
 8028d82:	2100      	movs	r1, #0
 8028d84:	1c28      	adds	r0, r5, #0
 8028d86:	f7d7 fbd3 	bl	8000530 <__aeabi_fcmplt>
 8028d8a:	2800      	cmp	r0, #0
 8028d8c:	d008      	beq.n	8028da0 <sqrtf+0x34>
 8028d8e:	f7fd fa35 	bl	80261fc <__errno>
 8028d92:	2321      	movs	r3, #33	@ 0x21
 8028d94:	2100      	movs	r1, #0
 8028d96:	6003      	str	r3, [r0, #0]
 8028d98:	1c08      	adds	r0, r1, #0
 8028d9a:	f7d7 ff83 	bl	8000ca4 <__aeabi_fdiv>
 8028d9e:	1c04      	adds	r4, r0, #0
 8028da0:	1c20      	adds	r0, r4, #0
 8028da2:	bd70      	pop	{r4, r5, r6, pc}

08028da4 <finite>:
 8028da4:	4b02      	ldr	r3, [pc, #8]	@ (8028db0 <finite+0xc>)
 8028da6:	0048      	lsls	r0, r1, #1
 8028da8:	0840      	lsrs	r0, r0, #1
 8028daa:	18c0      	adds	r0, r0, r3
 8028dac:	0fc0      	lsrs	r0, r0, #31
 8028dae:	4770      	bx	lr
 8028db0:	80100000 	.word	0x80100000

08028db4 <finitef>:
 8028db4:	22ff      	movs	r2, #255	@ 0xff
 8028db6:	0043      	lsls	r3, r0, #1
 8028db8:	085b      	lsrs	r3, r3, #1
 8028dba:	2001      	movs	r0, #1
 8028dbc:	05d2      	lsls	r2, r2, #23
 8028dbe:	4293      	cmp	r3, r2
 8028dc0:	db00      	blt.n	8028dc4 <finitef+0x10>
 8028dc2:	2000      	movs	r0, #0
 8028dc4:	4770      	bx	lr
	...

08028dc8 <__ieee754_sqrtf>:
 8028dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028dca:	21ff      	movs	r1, #255	@ 0xff
 8028dcc:	0042      	lsls	r2, r0, #1
 8028dce:	0003      	movs	r3, r0
 8028dd0:	1c04      	adds	r4, r0, #0
 8028dd2:	0852      	lsrs	r2, r2, #1
 8028dd4:	05c9      	lsls	r1, r1, #23
 8028dd6:	428a      	cmp	r2, r1
 8028dd8:	d309      	bcc.n	8028dee <__ieee754_sqrtf+0x26>
 8028dda:	1c01      	adds	r1, r0, #0
 8028ddc:	f7d8 f930 	bl	8001040 <__aeabi_fmul>
 8028de0:	1c01      	adds	r1, r0, #0
 8028de2:	1c20      	adds	r0, r4, #0
 8028de4:	f7d7 fd6c 	bl	80008c0 <__aeabi_fadd>
 8028de8:	1c04      	adds	r4, r0, #0
 8028dea:	1c20      	adds	r0, r4, #0
 8028dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028dee:	2a00      	cmp	r2, #0
 8028df0:	d0fb      	beq.n	8028dea <__ieee754_sqrtf+0x22>
 8028df2:	2800      	cmp	r0, #0
 8028df4:	da06      	bge.n	8028e04 <__ieee754_sqrtf+0x3c>
 8028df6:	1c01      	adds	r1, r0, #0
 8028df8:	f7d8 fa7c 	bl	80012f4 <__aeabi_fsub>
 8028dfc:	1c01      	adds	r1, r0, #0
 8028dfe:	f7d7 ff51 	bl	8000ca4 <__aeabi_fdiv>
 8028e02:	e7f1      	b.n	8028de8 <__ieee754_sqrtf+0x20>
 8028e04:	0002      	movs	r2, r0
 8028e06:	400a      	ands	r2, r1
 8028e08:	4208      	tst	r0, r1
 8028e0a:	d040      	beq.n	8028e8e <__ieee754_sqrtf+0xc6>
 8028e0c:	15c1      	asrs	r1, r0, #23
 8028e0e:	2280      	movs	r2, #128	@ 0x80
 8028e10:	000f      	movs	r7, r1
 8028e12:	025b      	lsls	r3, r3, #9
 8028e14:	0a5b      	lsrs	r3, r3, #9
 8028e16:	0412      	lsls	r2, r2, #16
 8028e18:	3f7f      	subs	r7, #127	@ 0x7f
 8028e1a:	4313      	orrs	r3, r2
 8028e1c:	07c9      	lsls	r1, r1, #31
 8028e1e:	d400      	bmi.n	8028e22 <__ieee754_sqrtf+0x5a>
 8028e20:	005b      	lsls	r3, r3, #1
 8028e22:	2400      	movs	r4, #0
 8028e24:	2180      	movs	r1, #128	@ 0x80
 8028e26:	2019      	movs	r0, #25
 8028e28:	0026      	movs	r6, r4
 8028e2a:	107f      	asrs	r7, r7, #1
 8028e2c:	005b      	lsls	r3, r3, #1
 8028e2e:	0449      	lsls	r1, r1, #17
 8028e30:	1875      	adds	r5, r6, r1
 8028e32:	001a      	movs	r2, r3
 8028e34:	429d      	cmp	r5, r3
 8028e36:	dc02      	bgt.n	8028e3e <__ieee754_sqrtf+0x76>
 8028e38:	186e      	adds	r6, r5, r1
 8028e3a:	1b5a      	subs	r2, r3, r5
 8028e3c:	1864      	adds	r4, r4, r1
 8028e3e:	3801      	subs	r0, #1
 8028e40:	0053      	lsls	r3, r2, #1
 8028e42:	0849      	lsrs	r1, r1, #1
 8028e44:	2800      	cmp	r0, #0
 8028e46:	d1f3      	bne.n	8028e30 <__ieee754_sqrtf+0x68>
 8028e48:	2a00      	cmp	r2, #0
 8028e4a:	d019      	beq.n	8028e80 <__ieee754_sqrtf+0xb8>
 8028e4c:	4d16      	ldr	r5, [pc, #88]	@ (8028ea8 <__ieee754_sqrtf+0xe0>)
 8028e4e:	4e17      	ldr	r6, [pc, #92]	@ (8028eac <__ieee754_sqrtf+0xe4>)
 8028e50:	6828      	ldr	r0, [r5, #0]
 8028e52:	6831      	ldr	r1, [r6, #0]
 8028e54:	682b      	ldr	r3, [r5, #0]
 8028e56:	9301      	str	r3, [sp, #4]
 8028e58:	f7d8 fa4c 	bl	80012f4 <__aeabi_fsub>
 8028e5c:	1c01      	adds	r1, r0, #0
 8028e5e:	9801      	ldr	r0, [sp, #4]
 8028e60:	f7d7 fb70 	bl	8000544 <__aeabi_fcmple>
 8028e64:	2800      	cmp	r0, #0
 8028e66:	d00b      	beq.n	8028e80 <__ieee754_sqrtf+0xb8>
 8028e68:	6828      	ldr	r0, [r5, #0]
 8028e6a:	6831      	ldr	r1, [r6, #0]
 8028e6c:	f7d7 fd28 	bl	80008c0 <__aeabi_fadd>
 8028e70:	682d      	ldr	r5, [r5, #0]
 8028e72:	1c01      	adds	r1, r0, #0
 8028e74:	1c28      	adds	r0, r5, #0
 8028e76:	f7d7 fb5b 	bl	8000530 <__aeabi_fcmplt>
 8028e7a:	2800      	cmp	r0, #0
 8028e7c:	d010      	beq.n	8028ea0 <__ieee754_sqrtf+0xd8>
 8028e7e:	3402      	adds	r4, #2
 8028e80:	23fc      	movs	r3, #252	@ 0xfc
 8028e82:	1064      	asrs	r4, r4, #1
 8028e84:	059b      	lsls	r3, r3, #22
 8028e86:	18e3      	adds	r3, r4, r3
 8028e88:	05fc      	lsls	r4, r7, #23
 8028e8a:	18e4      	adds	r4, r4, r3
 8028e8c:	e7ad      	b.n	8028dea <__ieee754_sqrtf+0x22>
 8028e8e:	2080      	movs	r0, #128	@ 0x80
 8028e90:	0400      	lsls	r0, r0, #16
 8028e92:	005b      	lsls	r3, r3, #1
 8028e94:	0011      	movs	r1, r2
 8028e96:	3201      	adds	r2, #1
 8028e98:	4203      	tst	r3, r0
 8028e9a:	d0fa      	beq.n	8028e92 <__ieee754_sqrtf+0xca>
 8028e9c:	4249      	negs	r1, r1
 8028e9e:	e7b6      	b.n	8028e0e <__ieee754_sqrtf+0x46>
 8028ea0:	2301      	movs	r3, #1
 8028ea2:	3401      	adds	r4, #1
 8028ea4:	439c      	bics	r4, r3
 8028ea6:	e7eb      	b.n	8028e80 <__ieee754_sqrtf+0xb8>
 8028ea8:	0802eb54 	.word	0x0802eb54
 8028eac:	0802eb50 	.word	0x0802eb50

08028eb0 <roundf>:
 8028eb0:	0dc3      	lsrs	r3, r0, #23
 8028eb2:	b2db      	uxtb	r3, r3
 8028eb4:	3b7f      	subs	r3, #127	@ 0x7f
 8028eb6:	0002      	movs	r2, r0
 8028eb8:	b510      	push	{r4, lr}
 8028eba:	2b16      	cmp	r3, #22
 8028ebc:	dc13      	bgt.n	8028ee6 <roundf+0x36>
 8028ebe:	2b00      	cmp	r3, #0
 8028ec0:	da07      	bge.n	8028ed2 <roundf+0x22>
 8028ec2:	0fc2      	lsrs	r2, r0, #31
 8028ec4:	07d0      	lsls	r0, r2, #31
 8028ec6:	3301      	adds	r3, #1
 8028ec8:	d102      	bne.n	8028ed0 <roundf+0x20>
 8028eca:	23fe      	movs	r3, #254	@ 0xfe
 8028ecc:	059b      	lsls	r3, r3, #22
 8028ece:	4318      	orrs	r0, r3
 8028ed0:	bd10      	pop	{r4, pc}
 8028ed2:	4908      	ldr	r1, [pc, #32]	@ (8028ef4 <roundf+0x44>)
 8028ed4:	4119      	asrs	r1, r3
 8028ed6:	4208      	tst	r0, r1
 8028ed8:	d0fa      	beq.n	8028ed0 <roundf+0x20>
 8028eda:	2080      	movs	r0, #128	@ 0x80
 8028edc:	03c0      	lsls	r0, r0, #15
 8028ede:	4118      	asrs	r0, r3
 8028ee0:	1880      	adds	r0, r0, r2
 8028ee2:	4388      	bics	r0, r1
 8028ee4:	e7f4      	b.n	8028ed0 <roundf+0x20>
 8028ee6:	2b80      	cmp	r3, #128	@ 0x80
 8028ee8:	d1f2      	bne.n	8028ed0 <roundf+0x20>
 8028eea:	1c01      	adds	r1, r0, #0
 8028eec:	f7d7 fce8 	bl	80008c0 <__aeabi_fadd>
 8028ef0:	e7ee      	b.n	8028ed0 <roundf+0x20>
 8028ef2:	46c0      	nop			@ (mov r8, r8)
 8028ef4:	007fffff 	.word	0x007fffff

08028ef8 <__ieee754_log>:
 8028ef8:	2380      	movs	r3, #128	@ 0x80
 8028efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028efc:	035b      	lsls	r3, r3, #13
 8028efe:	000e      	movs	r6, r1
 8028f00:	b08d      	sub	sp, #52	@ 0x34
 8028f02:	4299      	cmp	r1, r3
 8028f04:	da23      	bge.n	8028f4e <__ieee754_log+0x56>
 8028f06:	004b      	lsls	r3, r1, #1
 8028f08:	085b      	lsrs	r3, r3, #1
 8028f0a:	4303      	orrs	r3, r0
 8028f0c:	d107      	bne.n	8028f1e <__ieee754_log+0x26>
 8028f0e:	2200      	movs	r2, #0
 8028f10:	2300      	movs	r3, #0
 8028f12:	2000      	movs	r0, #0
 8028f14:	49b4      	ldr	r1, [pc, #720]	@ (80291e8 <__ieee754_log+0x2f0>)
 8028f16:	f7d9 f8e3 	bl	80020e0 <__aeabi_ddiv>
 8028f1a:	b00d      	add	sp, #52	@ 0x34
 8028f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f1e:	2900      	cmp	r1, #0
 8028f20:	da06      	bge.n	8028f30 <__ieee754_log+0x38>
 8028f22:	0002      	movs	r2, r0
 8028f24:	000b      	movs	r3, r1
 8028f26:	f7d9 fffb 	bl	8002f20 <__aeabi_dsub>
 8028f2a:	2200      	movs	r2, #0
 8028f2c:	2300      	movs	r3, #0
 8028f2e:	e7f2      	b.n	8028f16 <__ieee754_log+0x1e>
 8028f30:	4bae      	ldr	r3, [pc, #696]	@ (80291ec <__ieee754_log+0x2f4>)
 8028f32:	2200      	movs	r2, #0
 8028f34:	f7d9 fd0e 	bl	8002954 <__aeabi_dmul>
 8028f38:	2336      	movs	r3, #54	@ 0x36
 8028f3a:	000e      	movs	r6, r1
 8028f3c:	425b      	negs	r3, r3
 8028f3e:	4aac      	ldr	r2, [pc, #688]	@ (80291f0 <__ieee754_log+0x2f8>)
 8028f40:	4296      	cmp	r6, r2
 8028f42:	dd06      	ble.n	8028f52 <__ieee754_log+0x5a>
 8028f44:	0002      	movs	r2, r0
 8028f46:	000b      	movs	r3, r1
 8028f48:	f7d8 fd04 	bl	8001954 <__aeabi_dadd>
 8028f4c:	e7e5      	b.n	8028f1a <__ieee754_log+0x22>
 8028f4e:	2300      	movs	r3, #0
 8028f50:	e7f5      	b.n	8028f3e <__ieee754_log+0x46>
 8028f52:	4ca8      	ldr	r4, [pc, #672]	@ (80291f4 <__ieee754_log+0x2fc>)
 8028f54:	1532      	asrs	r2, r6, #20
 8028f56:	1912      	adds	r2, r2, r4
 8028f58:	0336      	lsls	r6, r6, #12
 8028f5a:	4ca7      	ldr	r4, [pc, #668]	@ (80291f8 <__ieee754_log+0x300>)
 8028f5c:	18d2      	adds	r2, r2, r3
 8028f5e:	0b33      	lsrs	r3, r6, #12
 8028f60:	9302      	str	r3, [sp, #8]
 8028f62:	191b      	adds	r3, r3, r4
 8028f64:	2480      	movs	r4, #128	@ 0x80
 8028f66:	0364      	lsls	r4, r4, #13
 8028f68:	4023      	ands	r3, r4
 8028f6a:	4ca4      	ldr	r4, [pc, #656]	@ (80291fc <__ieee754_log+0x304>)
 8028f6c:	9d02      	ldr	r5, [sp, #8]
 8028f6e:	405c      	eors	r4, r3
 8028f70:	151b      	asrs	r3, r3, #20
 8028f72:	189b      	adds	r3, r3, r2
 8028f74:	4325      	orrs	r5, r4
 8028f76:	2200      	movs	r2, #0
 8028f78:	9300      	str	r3, [sp, #0]
 8028f7a:	0029      	movs	r1, r5
 8028f7c:	4b9f      	ldr	r3, [pc, #636]	@ (80291fc <__ieee754_log+0x304>)
 8028f7e:	f7d9 ffcf 	bl	8002f20 <__aeabi_dsub>
 8028f82:	9b02      	ldr	r3, [sp, #8]
 8028f84:	0006      	movs	r6, r0
 8028f86:	3302      	adds	r3, #2
 8028f88:	031b      	lsls	r3, r3, #12
 8028f8a:	000f      	movs	r7, r1
 8028f8c:	2200      	movs	r2, #0
 8028f8e:	0b1b      	lsrs	r3, r3, #12
 8028f90:	2b02      	cmp	r3, #2
 8028f92:	dc64      	bgt.n	802905e <__ieee754_log+0x166>
 8028f94:	2300      	movs	r3, #0
 8028f96:	f7d7 fa8b 	bl	80004b0 <__aeabi_dcmpeq>
 8028f9a:	2800      	cmp	r0, #0
 8028f9c:	d019      	beq.n	8028fd2 <__ieee754_log+0xda>
 8028f9e:	9b00      	ldr	r3, [sp, #0]
 8028fa0:	2b00      	cmp	r3, #0
 8028fa2:	d100      	bne.n	8028fa6 <__ieee754_log+0xae>
 8028fa4:	e11c      	b.n	80291e0 <__ieee754_log+0x2e8>
 8028fa6:	0018      	movs	r0, r3
 8028fa8:	f7da fc22 	bl	80037f0 <__aeabi_i2d>
 8028fac:	4a94      	ldr	r2, [pc, #592]	@ (8029200 <__ieee754_log+0x308>)
 8028fae:	4b95      	ldr	r3, [pc, #596]	@ (8029204 <__ieee754_log+0x30c>)
 8028fb0:	0004      	movs	r4, r0
 8028fb2:	000d      	movs	r5, r1
 8028fb4:	f7d9 fcce 	bl	8002954 <__aeabi_dmul>
 8028fb8:	4a93      	ldr	r2, [pc, #588]	@ (8029208 <__ieee754_log+0x310>)
 8028fba:	0006      	movs	r6, r0
 8028fbc:	000f      	movs	r7, r1
 8028fbe:	4b93      	ldr	r3, [pc, #588]	@ (802920c <__ieee754_log+0x314>)
 8028fc0:	0020      	movs	r0, r4
 8028fc2:	0029      	movs	r1, r5
 8028fc4:	f7d9 fcc6 	bl	8002954 <__aeabi_dmul>
 8028fc8:	0002      	movs	r2, r0
 8028fca:	000b      	movs	r3, r1
 8028fcc:	0030      	movs	r0, r6
 8028fce:	0039      	movs	r1, r7
 8028fd0:	e7ba      	b.n	8028f48 <__ieee754_log+0x50>
 8028fd2:	4a8f      	ldr	r2, [pc, #572]	@ (8029210 <__ieee754_log+0x318>)
 8028fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8029214 <__ieee754_log+0x31c>)
 8028fd6:	0030      	movs	r0, r6
 8028fd8:	0039      	movs	r1, r7
 8028fda:	f7d9 fcbb 	bl	8002954 <__aeabi_dmul>
 8028fde:	0002      	movs	r2, r0
 8028fe0:	000b      	movs	r3, r1
 8028fe2:	2000      	movs	r0, #0
 8028fe4:	498c      	ldr	r1, [pc, #560]	@ (8029218 <__ieee754_log+0x320>)
 8028fe6:	f7d9 ff9b 	bl	8002f20 <__aeabi_dsub>
 8028fea:	0032      	movs	r2, r6
 8028fec:	0004      	movs	r4, r0
 8028fee:	000d      	movs	r5, r1
 8028ff0:	003b      	movs	r3, r7
 8028ff2:	0030      	movs	r0, r6
 8028ff4:	0039      	movs	r1, r7
 8028ff6:	f7d9 fcad 	bl	8002954 <__aeabi_dmul>
 8028ffa:	000b      	movs	r3, r1
 8028ffc:	0002      	movs	r2, r0
 8028ffe:	0029      	movs	r1, r5
 8029000:	0020      	movs	r0, r4
 8029002:	f7d9 fca7 	bl	8002954 <__aeabi_dmul>
 8029006:	9b00      	ldr	r3, [sp, #0]
 8029008:	9002      	str	r0, [sp, #8]
 802900a:	9103      	str	r1, [sp, #12]
 802900c:	2b00      	cmp	r3, #0
 802900e:	d106      	bne.n	802901e <__ieee754_log+0x126>
 8029010:	0002      	movs	r2, r0
 8029012:	000b      	movs	r3, r1
 8029014:	0030      	movs	r0, r6
 8029016:	0039      	movs	r1, r7
 8029018:	f7d9 ff82 	bl	8002f20 <__aeabi_dsub>
 802901c:	e77d      	b.n	8028f1a <__ieee754_log+0x22>
 802901e:	9800      	ldr	r0, [sp, #0]
 8029020:	f7da fbe6 	bl	80037f0 <__aeabi_i2d>
 8029024:	4a76      	ldr	r2, [pc, #472]	@ (8029200 <__ieee754_log+0x308>)
 8029026:	4b77      	ldr	r3, [pc, #476]	@ (8029204 <__ieee754_log+0x30c>)
 8029028:	0004      	movs	r4, r0
 802902a:	000d      	movs	r5, r1
 802902c:	f7d9 fc92 	bl	8002954 <__aeabi_dmul>
 8029030:	4a75      	ldr	r2, [pc, #468]	@ (8029208 <__ieee754_log+0x310>)
 8029032:	9000      	str	r0, [sp, #0]
 8029034:	9101      	str	r1, [sp, #4]
 8029036:	4b75      	ldr	r3, [pc, #468]	@ (802920c <__ieee754_log+0x314>)
 8029038:	0020      	movs	r0, r4
 802903a:	0029      	movs	r1, r5
 802903c:	f7d9 fc8a 	bl	8002954 <__aeabi_dmul>
 8029040:	0002      	movs	r2, r0
 8029042:	000b      	movs	r3, r1
 8029044:	9802      	ldr	r0, [sp, #8]
 8029046:	9903      	ldr	r1, [sp, #12]
 8029048:	f7d9 ff6a 	bl	8002f20 <__aeabi_dsub>
 802904c:	0032      	movs	r2, r6
 802904e:	003b      	movs	r3, r7
 8029050:	f7d9 ff66 	bl	8002f20 <__aeabi_dsub>
 8029054:	0002      	movs	r2, r0
 8029056:	000b      	movs	r3, r1
 8029058:	9800      	ldr	r0, [sp, #0]
 802905a:	9901      	ldr	r1, [sp, #4]
 802905c:	e7dc      	b.n	8029018 <__ieee754_log+0x120>
 802905e:	2380      	movs	r3, #128	@ 0x80
 8029060:	05db      	lsls	r3, r3, #23
 8029062:	f7d8 fc77 	bl	8001954 <__aeabi_dadd>
 8029066:	0002      	movs	r2, r0
 8029068:	000b      	movs	r3, r1
 802906a:	0030      	movs	r0, r6
 802906c:	0039      	movs	r1, r7
 802906e:	f7d9 f837 	bl	80020e0 <__aeabi_ddiv>
 8029072:	9004      	str	r0, [sp, #16]
 8029074:	9105      	str	r1, [sp, #20]
 8029076:	9800      	ldr	r0, [sp, #0]
 8029078:	f7da fbba 	bl	80037f0 <__aeabi_i2d>
 802907c:	9a04      	ldr	r2, [sp, #16]
 802907e:	9b05      	ldr	r3, [sp, #20]
 8029080:	9006      	str	r0, [sp, #24]
 8029082:	9107      	str	r1, [sp, #28]
 8029084:	0010      	movs	r0, r2
 8029086:	0019      	movs	r1, r3
 8029088:	f7d9 fc64 	bl	8002954 <__aeabi_dmul>
 802908c:	4a63      	ldr	r2, [pc, #396]	@ (802921c <__ieee754_log+0x324>)
 802908e:	9b02      	ldr	r3, [sp, #8]
 8029090:	4694      	mov	ip, r2
 8029092:	4463      	add	r3, ip
 8029094:	0002      	movs	r2, r0
 8029096:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029098:	000b      	movs	r3, r1
 802909a:	9008      	str	r0, [sp, #32]
 802909c:	9109      	str	r1, [sp, #36]	@ 0x24
 802909e:	f7d9 fc59 	bl	8002954 <__aeabi_dmul>
 80290a2:	0004      	movs	r4, r0
 80290a4:	000d      	movs	r5, r1
 80290a6:	4a5e      	ldr	r2, [pc, #376]	@ (8029220 <__ieee754_log+0x328>)
 80290a8:	4b5e      	ldr	r3, [pc, #376]	@ (8029224 <__ieee754_log+0x32c>)
 80290aa:	f7d9 fc53 	bl	8002954 <__aeabi_dmul>
 80290ae:	4a5e      	ldr	r2, [pc, #376]	@ (8029228 <__ieee754_log+0x330>)
 80290b0:	4b5e      	ldr	r3, [pc, #376]	@ (802922c <__ieee754_log+0x334>)
 80290b2:	f7d8 fc4f 	bl	8001954 <__aeabi_dadd>
 80290b6:	0022      	movs	r2, r4
 80290b8:	002b      	movs	r3, r5
 80290ba:	f7d9 fc4b 	bl	8002954 <__aeabi_dmul>
 80290be:	4a5c      	ldr	r2, [pc, #368]	@ (8029230 <__ieee754_log+0x338>)
 80290c0:	4b5c      	ldr	r3, [pc, #368]	@ (8029234 <__ieee754_log+0x33c>)
 80290c2:	f7d8 fc47 	bl	8001954 <__aeabi_dadd>
 80290c6:	0022      	movs	r2, r4
 80290c8:	002b      	movs	r3, r5
 80290ca:	f7d9 fc43 	bl	8002954 <__aeabi_dmul>
 80290ce:	4a5a      	ldr	r2, [pc, #360]	@ (8029238 <__ieee754_log+0x340>)
 80290d0:	4b5a      	ldr	r3, [pc, #360]	@ (802923c <__ieee754_log+0x344>)
 80290d2:	f7d8 fc3f 	bl	8001954 <__aeabi_dadd>
 80290d6:	9a08      	ldr	r2, [sp, #32]
 80290d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80290da:	f7d9 fc3b 	bl	8002954 <__aeabi_dmul>
 80290de:	4a58      	ldr	r2, [pc, #352]	@ (8029240 <__ieee754_log+0x348>)
 80290e0:	9008      	str	r0, [sp, #32]
 80290e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80290e4:	4b57      	ldr	r3, [pc, #348]	@ (8029244 <__ieee754_log+0x34c>)
 80290e6:	0020      	movs	r0, r4
 80290e8:	0029      	movs	r1, r5
 80290ea:	f7d9 fc33 	bl	8002954 <__aeabi_dmul>
 80290ee:	4a56      	ldr	r2, [pc, #344]	@ (8029248 <__ieee754_log+0x350>)
 80290f0:	4b56      	ldr	r3, [pc, #344]	@ (802924c <__ieee754_log+0x354>)
 80290f2:	f7d8 fc2f 	bl	8001954 <__aeabi_dadd>
 80290f6:	0022      	movs	r2, r4
 80290f8:	002b      	movs	r3, r5
 80290fa:	f7d9 fc2b 	bl	8002954 <__aeabi_dmul>
 80290fe:	4a54      	ldr	r2, [pc, #336]	@ (8029250 <__ieee754_log+0x358>)
 8029100:	4b54      	ldr	r3, [pc, #336]	@ (8029254 <__ieee754_log+0x35c>)
 8029102:	f7d8 fc27 	bl	8001954 <__aeabi_dadd>
 8029106:	0022      	movs	r2, r4
 8029108:	002b      	movs	r3, r5
 802910a:	f7d9 fc23 	bl	8002954 <__aeabi_dmul>
 802910e:	0002      	movs	r2, r0
 8029110:	000b      	movs	r3, r1
 8029112:	9808      	ldr	r0, [sp, #32]
 8029114:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029116:	f7d8 fc1d 	bl	8001954 <__aeabi_dadd>
 802911a:	9a02      	ldr	r2, [sp, #8]
 802911c:	4b4e      	ldr	r3, [pc, #312]	@ (8029258 <__ieee754_log+0x360>)
 802911e:	0004      	movs	r4, r0
 8029120:	1a9b      	subs	r3, r3, r2
 8029122:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029124:	000d      	movs	r5, r1
 8029126:	4313      	orrs	r3, r2
 8029128:	2b00      	cmp	r3, #0
 802912a:	dd34      	ble.n	8029196 <__ieee754_log+0x29e>
 802912c:	2200      	movs	r2, #0
 802912e:	4b3a      	ldr	r3, [pc, #232]	@ (8029218 <__ieee754_log+0x320>)
 8029130:	0030      	movs	r0, r6
 8029132:	0039      	movs	r1, r7
 8029134:	f7d9 fc0e 	bl	8002954 <__aeabi_dmul>
 8029138:	0032      	movs	r2, r6
 802913a:	003b      	movs	r3, r7
 802913c:	f7d9 fc0a 	bl	8002954 <__aeabi_dmul>
 8029140:	0002      	movs	r2, r0
 8029142:	000b      	movs	r3, r1
 8029144:	9002      	str	r0, [sp, #8]
 8029146:	9103      	str	r1, [sp, #12]
 8029148:	0020      	movs	r0, r4
 802914a:	0029      	movs	r1, r5
 802914c:	f7d8 fc02 	bl	8001954 <__aeabi_dadd>
 8029150:	9a04      	ldr	r2, [sp, #16]
 8029152:	9b05      	ldr	r3, [sp, #20]
 8029154:	f7d9 fbfe 	bl	8002954 <__aeabi_dmul>
 8029158:	9b00      	ldr	r3, [sp, #0]
 802915a:	0004      	movs	r4, r0
 802915c:	000d      	movs	r5, r1
 802915e:	2b00      	cmp	r3, #0
 8029160:	d106      	bne.n	8029170 <__ieee754_log+0x278>
 8029162:	0002      	movs	r2, r0
 8029164:	000b      	movs	r3, r1
 8029166:	9802      	ldr	r0, [sp, #8]
 8029168:	9903      	ldr	r1, [sp, #12]
 802916a:	f7d9 fed9 	bl	8002f20 <__aeabi_dsub>
 802916e:	e74f      	b.n	8029010 <__ieee754_log+0x118>
 8029170:	4a23      	ldr	r2, [pc, #140]	@ (8029200 <__ieee754_log+0x308>)
 8029172:	4b24      	ldr	r3, [pc, #144]	@ (8029204 <__ieee754_log+0x30c>)
 8029174:	9806      	ldr	r0, [sp, #24]
 8029176:	9907      	ldr	r1, [sp, #28]
 8029178:	f7d9 fbec 	bl	8002954 <__aeabi_dmul>
 802917c:	4a22      	ldr	r2, [pc, #136]	@ (8029208 <__ieee754_log+0x310>)
 802917e:	9000      	str	r0, [sp, #0]
 8029180:	9101      	str	r1, [sp, #4]
 8029182:	9806      	ldr	r0, [sp, #24]
 8029184:	9907      	ldr	r1, [sp, #28]
 8029186:	4b21      	ldr	r3, [pc, #132]	@ (802920c <__ieee754_log+0x314>)
 8029188:	f7d9 fbe4 	bl	8002954 <__aeabi_dmul>
 802918c:	0022      	movs	r2, r4
 802918e:	002b      	movs	r3, r5
 8029190:	f7d8 fbe0 	bl	8001954 <__aeabi_dadd>
 8029194:	e754      	b.n	8029040 <__ieee754_log+0x148>
 8029196:	0002      	movs	r2, r0
 8029198:	000b      	movs	r3, r1
 802919a:	0030      	movs	r0, r6
 802919c:	0039      	movs	r1, r7
 802919e:	f7d9 febf 	bl	8002f20 <__aeabi_dsub>
 80291a2:	9a04      	ldr	r2, [sp, #16]
 80291a4:	9b05      	ldr	r3, [sp, #20]
 80291a6:	f7d9 fbd5 	bl	8002954 <__aeabi_dmul>
 80291aa:	9b00      	ldr	r3, [sp, #0]
 80291ac:	0004      	movs	r4, r0
 80291ae:	000d      	movs	r5, r1
 80291b0:	2b00      	cmp	r3, #0
 80291b2:	d102      	bne.n	80291ba <__ieee754_log+0x2c2>
 80291b4:	0002      	movs	r2, r0
 80291b6:	000b      	movs	r3, r1
 80291b8:	e72c      	b.n	8029014 <__ieee754_log+0x11c>
 80291ba:	4a11      	ldr	r2, [pc, #68]	@ (8029200 <__ieee754_log+0x308>)
 80291bc:	4b11      	ldr	r3, [pc, #68]	@ (8029204 <__ieee754_log+0x30c>)
 80291be:	9806      	ldr	r0, [sp, #24]
 80291c0:	9907      	ldr	r1, [sp, #28]
 80291c2:	f7d9 fbc7 	bl	8002954 <__aeabi_dmul>
 80291c6:	4a10      	ldr	r2, [pc, #64]	@ (8029208 <__ieee754_log+0x310>)
 80291c8:	9000      	str	r0, [sp, #0]
 80291ca:	9101      	str	r1, [sp, #4]
 80291cc:	9806      	ldr	r0, [sp, #24]
 80291ce:	9907      	ldr	r1, [sp, #28]
 80291d0:	4b0e      	ldr	r3, [pc, #56]	@ (802920c <__ieee754_log+0x314>)
 80291d2:	f7d9 fbbf 	bl	8002954 <__aeabi_dmul>
 80291d6:	0002      	movs	r2, r0
 80291d8:	000b      	movs	r3, r1
 80291da:	0020      	movs	r0, r4
 80291dc:	0029      	movs	r1, r5
 80291de:	e733      	b.n	8029048 <__ieee754_log+0x150>
 80291e0:	2000      	movs	r0, #0
 80291e2:	2100      	movs	r1, #0
 80291e4:	e699      	b.n	8028f1a <__ieee754_log+0x22>
 80291e6:	46c0      	nop			@ (mov r8, r8)
 80291e8:	c3500000 	.word	0xc3500000
 80291ec:	43500000 	.word	0x43500000
 80291f0:	7fefffff 	.word	0x7fefffff
 80291f4:	fffffc01 	.word	0xfffffc01
 80291f8:	00095f64 	.word	0x00095f64
 80291fc:	3ff00000 	.word	0x3ff00000
 8029200:	fee00000 	.word	0xfee00000
 8029204:	3fe62e42 	.word	0x3fe62e42
 8029208:	35793c76 	.word	0x35793c76
 802920c:	3dea39ef 	.word	0x3dea39ef
 8029210:	55555555 	.word	0x55555555
 8029214:	3fd55555 	.word	0x3fd55555
 8029218:	3fe00000 	.word	0x3fe00000
 802921c:	fff9eb86 	.word	0xfff9eb86
 8029220:	df3e5244 	.word	0xdf3e5244
 8029224:	3fc2f112 	.word	0x3fc2f112
 8029228:	96cb03de 	.word	0x96cb03de
 802922c:	3fc74664 	.word	0x3fc74664
 8029230:	94229359 	.word	0x94229359
 8029234:	3fd24924 	.word	0x3fd24924
 8029238:	55555593 	.word	0x55555593
 802923c:	3fe55555 	.word	0x3fe55555
 8029240:	d078c69f 	.word	0xd078c69f
 8029244:	3fc39a09 	.word	0x3fc39a09
 8029248:	1d8e78af 	.word	0x1d8e78af
 802924c:	3fcc71c5 	.word	0x3fcc71c5
 8029250:	9997fa04 	.word	0x9997fa04
 8029254:	3fd99999 	.word	0x3fd99999
 8029258:	0006b851 	.word	0x0006b851

0802925c <__ieee754_pow>:
 802925c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802925e:	b095      	sub	sp, #84	@ 0x54
 8029260:	9204      	str	r2, [sp, #16]
 8029262:	9305      	str	r3, [sp, #20]
 8029264:	9b04      	ldr	r3, [sp, #16]
 8029266:	9f05      	ldr	r7, [sp, #20]
 8029268:	001a      	movs	r2, r3
 802926a:	007d      	lsls	r5, r7, #1
 802926c:	086d      	lsrs	r5, r5, #1
 802926e:	9002      	str	r0, [sp, #8]
 8029270:	9103      	str	r1, [sp, #12]
 8029272:	432a      	orrs	r2, r5
 8029274:	d11a      	bne.n	80292ac <__ieee754_pow+0x50>
 8029276:	2180      	movs	r1, #128	@ 0x80
 8029278:	9a02      	ldr	r2, [sp, #8]
 802927a:	9803      	ldr	r0, [sp, #12]
 802927c:	0309      	lsls	r1, r1, #12
 802927e:	4048      	eors	r0, r1
 8029280:	0003      	movs	r3, r0
 8029282:	1892      	adds	r2, r2, r2
 8029284:	415b      	adcs	r3, r3
 8029286:	4996      	ldr	r1, [pc, #600]	@ (80294e0 <__ieee754_pow+0x284>)
 8029288:	428b      	cmp	r3, r1
 802928a:	d806      	bhi.n	802929a <__ieee754_pow+0x3e>
 802928c:	d001      	beq.n	8029292 <__ieee754_pow+0x36>
 802928e:	f000 fcce 	bl	8029c2e <__ieee754_pow+0x9d2>
 8029292:	2a00      	cmp	r2, #0
 8029294:	d101      	bne.n	802929a <__ieee754_pow+0x3e>
 8029296:	f000 fcca 	bl	8029c2e <__ieee754_pow+0x9d2>
 802929a:	9a04      	ldr	r2, [sp, #16]
 802929c:	9b05      	ldr	r3, [sp, #20]
 802929e:	9802      	ldr	r0, [sp, #8]
 80292a0:	9903      	ldr	r1, [sp, #12]
 80292a2:	f7d8 fb57 	bl	8001954 <__aeabi_dadd>
 80292a6:	9000      	str	r0, [sp, #0]
 80292a8:	9101      	str	r1, [sp, #4]
 80292aa:	e08e      	b.n	80293ca <__ieee754_pow+0x16e>
 80292ac:	9a03      	ldr	r2, [sp, #12]
 80292ae:	9206      	str	r2, [sp, #24]
 80292b0:	9a02      	ldr	r2, [sp, #8]
 80292b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80292b4:	9a03      	ldr	r2, [sp, #12]
 80292b6:	0054      	lsls	r4, r2, #1
 80292b8:	4a8a      	ldr	r2, [pc, #552]	@ (80294e4 <__ieee754_pow+0x288>)
 80292ba:	0864      	lsrs	r4, r4, #1
 80292bc:	4294      	cmp	r4, r2
 80292be:	d80e      	bhi.n	80292de <__ieee754_pow+0x82>
 80292c0:	d105      	bne.n	80292ce <__ieee754_pow+0x72>
 80292c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80292c4:	2a00      	cmp	r2, #0
 80292c6:	d1e8      	bne.n	802929a <__ieee754_pow+0x3e>
 80292c8:	42a5      	cmp	r5, r4
 80292ca:	d8e6      	bhi.n	802929a <__ieee754_pow+0x3e>
 80292cc:	e002      	b.n	80292d4 <__ieee754_pow+0x78>
 80292ce:	4a85      	ldr	r2, [pc, #532]	@ (80294e4 <__ieee754_pow+0x288>)
 80292d0:	4295      	cmp	r5, r2
 80292d2:	d804      	bhi.n	80292de <__ieee754_pow+0x82>
 80292d4:	4a83      	ldr	r2, [pc, #524]	@ (80294e4 <__ieee754_pow+0x288>)
 80292d6:	4295      	cmp	r5, r2
 80292d8:	d10c      	bne.n	80292f4 <__ieee754_pow+0x98>
 80292da:	2b00      	cmp	r3, #0
 80292dc:	d00a      	beq.n	80292f4 <__ieee754_pow+0x98>
 80292de:	4a82      	ldr	r2, [pc, #520]	@ (80294e8 <__ieee754_pow+0x28c>)
 80292e0:	9b03      	ldr	r3, [sp, #12]
 80292e2:	189b      	adds	r3, r3, r2
 80292e4:	9a02      	ldr	r2, [sp, #8]
 80292e6:	4313      	orrs	r3, r2
 80292e8:	d1d7      	bne.n	802929a <__ieee754_pow+0x3e>
 80292ea:	2180      	movs	r1, #128	@ 0x80
 80292ec:	9a04      	ldr	r2, [sp, #16]
 80292ee:	9805      	ldr	r0, [sp, #20]
 80292f0:	0309      	lsls	r1, r1, #12
 80292f2:	e7c4      	b.n	802927e <__ieee754_pow+0x22>
 80292f4:	2600      	movs	r6, #0
 80292f6:	9a06      	ldr	r2, [sp, #24]
 80292f8:	9408      	str	r4, [sp, #32]
 80292fa:	42b2      	cmp	r2, r6
 80292fc:	da42      	bge.n	8029384 <__ieee754_pow+0x128>
 80292fe:	4a7b      	ldr	r2, [pc, #492]	@ (80294ec <__ieee754_pow+0x290>)
 8029300:	4295      	cmp	r5, r2
 8029302:	d83e      	bhi.n	8029382 <__ieee754_pow+0x126>
 8029304:	4a7a      	ldr	r2, [pc, #488]	@ (80294f0 <__ieee754_pow+0x294>)
 8029306:	4295      	cmp	r5, r2
 8029308:	d910      	bls.n	802932c <__ieee754_pow+0xd0>
 802930a:	497a      	ldr	r1, [pc, #488]	@ (80294f4 <__ieee754_pow+0x298>)
 802930c:	152a      	asrs	r2, r5, #20
 802930e:	1852      	adds	r2, r2, r1
 8029310:	2a14      	cmp	r2, #20
 8029312:	dd18      	ble.n	8029346 <__ieee754_pow+0xea>
 8029314:	2134      	movs	r1, #52	@ 0x34
 8029316:	1a89      	subs	r1, r1, r2
 8029318:	9a04      	ldr	r2, [sp, #16]
 802931a:	40ca      	lsrs	r2, r1
 802931c:	0010      	movs	r0, r2
 802931e:	4088      	lsls	r0, r1
 8029320:	4298      	cmp	r0, r3
 8029322:	d103      	bne.n	802932c <__ieee754_pow+0xd0>
 8029324:	2101      	movs	r1, #1
 8029326:	3602      	adds	r6, #2
 8029328:	400a      	ands	r2, r1
 802932a:	1ab6      	subs	r6, r6, r2
 802932c:	2b00      	cmp	r3, #0
 802932e:	d15b      	bne.n	80293e8 <__ieee754_pow+0x18c>
 8029330:	2380      	movs	r3, #128	@ 0x80
 8029332:	05db      	lsls	r3, r3, #23
 8029334:	429f      	cmp	r7, r3
 8029336:	d14c      	bne.n	80293d2 <__ieee754_pow+0x176>
 8029338:	9a02      	ldr	r2, [sp, #8]
 802933a:	9b03      	ldr	r3, [sp, #12]
 802933c:	0010      	movs	r0, r2
 802933e:	0019      	movs	r1, r3
 8029340:	f7d9 fb08 	bl	8002954 <__aeabi_dmul>
 8029344:	e7af      	b.n	80292a6 <__ieee754_pow+0x4a>
 8029346:	2b00      	cmp	r3, #0
 8029348:	d14e      	bne.n	80293e8 <__ieee754_pow+0x18c>
 802934a:	3314      	adds	r3, #20
 802934c:	1a9a      	subs	r2, r3, r2
 802934e:	002b      	movs	r3, r5
 8029350:	4113      	asrs	r3, r2
 8029352:	0019      	movs	r1, r3
 8029354:	4091      	lsls	r1, r2
 8029356:	42a9      	cmp	r1, r5
 8029358:	d103      	bne.n	8029362 <__ieee754_pow+0x106>
 802935a:	2201      	movs	r2, #1
 802935c:	2602      	movs	r6, #2
 802935e:	4013      	ands	r3, r2
 8029360:	1af6      	subs	r6, r6, r3
 8029362:	4b65      	ldr	r3, [pc, #404]	@ (80294f8 <__ieee754_pow+0x29c>)
 8029364:	429d      	cmp	r5, r3
 8029366:	d1e3      	bne.n	8029330 <__ieee754_pow+0xd4>
 8029368:	9b02      	ldr	r3, [sp, #8]
 802936a:	9c03      	ldr	r4, [sp, #12]
 802936c:	9300      	str	r3, [sp, #0]
 802936e:	9401      	str	r4, [sp, #4]
 8029370:	2f00      	cmp	r7, #0
 8029372:	da2a      	bge.n	80293ca <__ieee754_pow+0x16e>
 8029374:	001a      	movs	r2, r3
 8029376:	2000      	movs	r0, #0
 8029378:	0023      	movs	r3, r4
 802937a:	495f      	ldr	r1, [pc, #380]	@ (80294f8 <__ieee754_pow+0x29c>)
 802937c:	f7d8 feb0 	bl	80020e0 <__aeabi_ddiv>
 8029380:	e791      	b.n	80292a6 <__ieee754_pow+0x4a>
 8029382:	2602      	movs	r6, #2
 8029384:	2b00      	cmp	r3, #0
 8029386:	d12f      	bne.n	80293e8 <__ieee754_pow+0x18c>
 8029388:	4b56      	ldr	r3, [pc, #344]	@ (80294e4 <__ieee754_pow+0x288>)
 802938a:	429d      	cmp	r5, r3
 802938c:	d1e9      	bne.n	8029362 <__ieee754_pow+0x106>
 802938e:	4b56      	ldr	r3, [pc, #344]	@ (80294e8 <__ieee754_pow+0x28c>)
 8029390:	9a02      	ldr	r2, [sp, #8]
 8029392:	18e3      	adds	r3, r4, r3
 8029394:	4313      	orrs	r3, r2
 8029396:	d101      	bne.n	802939c <__ieee754_pow+0x140>
 8029398:	f000 fc49 	bl	8029c2e <__ieee754_pow+0x9d2>
 802939c:	4b54      	ldr	r3, [pc, #336]	@ (80294f0 <__ieee754_pow+0x294>)
 802939e:	429c      	cmp	r4, r3
 80293a0:	d909      	bls.n	80293b6 <__ieee754_pow+0x15a>
 80293a2:	9b04      	ldr	r3, [sp, #16]
 80293a4:	9c05      	ldr	r4, [sp, #20]
 80293a6:	9300      	str	r3, [sp, #0]
 80293a8:	9401      	str	r4, [sp, #4]
 80293aa:	2f00      	cmp	r7, #0
 80293ac:	da0d      	bge.n	80293ca <__ieee754_pow+0x16e>
 80293ae:	2300      	movs	r3, #0
 80293b0:	2400      	movs	r4, #0
 80293b2:	f000 fc3e 	bl	8029c32 <__ieee754_pow+0x9d6>
 80293b6:	2f00      	cmp	r7, #0
 80293b8:	daf9      	bge.n	80293ae <__ieee754_pow+0x152>
 80293ba:	2280      	movs	r2, #128	@ 0x80
 80293bc:	0612      	lsls	r2, r2, #24
 80293be:	4694      	mov	ip, r2
 80293c0:	9b04      	ldr	r3, [sp, #16]
 80293c2:	9300      	str	r3, [sp, #0]
 80293c4:	9b05      	ldr	r3, [sp, #20]
 80293c6:	4463      	add	r3, ip
 80293c8:	9301      	str	r3, [sp, #4]
 80293ca:	9800      	ldr	r0, [sp, #0]
 80293cc:	9901      	ldr	r1, [sp, #4]
 80293ce:	b015      	add	sp, #84	@ 0x54
 80293d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293d2:	4b4a      	ldr	r3, [pc, #296]	@ (80294fc <__ieee754_pow+0x2a0>)
 80293d4:	429f      	cmp	r7, r3
 80293d6:	d107      	bne.n	80293e8 <__ieee754_pow+0x18c>
 80293d8:	9b06      	ldr	r3, [sp, #24]
 80293da:	2b00      	cmp	r3, #0
 80293dc:	db04      	blt.n	80293e8 <__ieee754_pow+0x18c>
 80293de:	9802      	ldr	r0, [sp, #8]
 80293e0:	9903      	ldr	r1, [sp, #12]
 80293e2:	f000 fe03 	bl	8029fec <__ieee754_sqrt>
 80293e6:	e75e      	b.n	80292a6 <__ieee754_pow+0x4a>
 80293e8:	9802      	ldr	r0, [sp, #8]
 80293ea:	9903      	ldr	r1, [sp, #12]
 80293ec:	f000 fc4e 	bl	8029c8c <fabs>
 80293f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80293f2:	9000      	str	r0, [sp, #0]
 80293f4:	9101      	str	r1, [sp, #4]
 80293f6:	2b00      	cmp	r3, #0
 80293f8:	d12c      	bne.n	8029454 <__ieee754_pow+0x1f8>
 80293fa:	9b03      	ldr	r3, [sp, #12]
 80293fc:	4a3e      	ldr	r2, [pc, #248]	@ (80294f8 <__ieee754_pow+0x29c>)
 80293fe:	009b      	lsls	r3, r3, #2
 8029400:	089b      	lsrs	r3, r3, #2
 8029402:	4293      	cmp	r3, r2
 8029404:	d001      	beq.n	802940a <__ieee754_pow+0x1ae>
 8029406:	2c00      	cmp	r4, #0
 8029408:	d124      	bne.n	8029454 <__ieee754_pow+0x1f8>
 802940a:	2f00      	cmp	r7, #0
 802940c:	da07      	bge.n	802941e <__ieee754_pow+0x1c2>
 802940e:	9a00      	ldr	r2, [sp, #0]
 8029410:	9b01      	ldr	r3, [sp, #4]
 8029412:	2000      	movs	r0, #0
 8029414:	4938      	ldr	r1, [pc, #224]	@ (80294f8 <__ieee754_pow+0x29c>)
 8029416:	f7d8 fe63 	bl	80020e0 <__aeabi_ddiv>
 802941a:	9000      	str	r0, [sp, #0]
 802941c:	9101      	str	r1, [sp, #4]
 802941e:	9b06      	ldr	r3, [sp, #24]
 8029420:	2b00      	cmp	r3, #0
 8029422:	dad2      	bge.n	80293ca <__ieee754_pow+0x16e>
 8029424:	4b30      	ldr	r3, [pc, #192]	@ (80294e8 <__ieee754_pow+0x28c>)
 8029426:	18e4      	adds	r4, r4, r3
 8029428:	4334      	orrs	r4, r6
 802942a:	d108      	bne.n	802943e <__ieee754_pow+0x1e2>
 802942c:	9a00      	ldr	r2, [sp, #0]
 802942e:	9b01      	ldr	r3, [sp, #4]
 8029430:	0010      	movs	r0, r2
 8029432:	0019      	movs	r1, r3
 8029434:	f7d9 fd74 	bl	8002f20 <__aeabi_dsub>
 8029438:	0002      	movs	r2, r0
 802943a:	000b      	movs	r3, r1
 802943c:	e79e      	b.n	802937c <__ieee754_pow+0x120>
 802943e:	2e01      	cmp	r6, #1
 8029440:	d1c3      	bne.n	80293ca <__ieee754_pow+0x16e>
 8029442:	9800      	ldr	r0, [sp, #0]
 8029444:	2180      	movs	r1, #128	@ 0x80
 8029446:	0002      	movs	r2, r0
 8029448:	9801      	ldr	r0, [sp, #4]
 802944a:	0609      	lsls	r1, r1, #24
 802944c:	1843      	adds	r3, r0, r1
 802944e:	9200      	str	r2, [sp, #0]
 8029450:	9301      	str	r3, [sp, #4]
 8029452:	e7ba      	b.n	80293ca <__ieee754_pow+0x16e>
 8029454:	9b03      	ldr	r3, [sp, #12]
 8029456:	0fdb      	lsrs	r3, r3, #31
 8029458:	3b01      	subs	r3, #1
 802945a:	001a      	movs	r2, r3
 802945c:	4332      	orrs	r2, r6
 802945e:	d102      	bne.n	8029466 <__ieee754_pow+0x20a>
 8029460:	9a02      	ldr	r2, [sp, #8]
 8029462:	9b03      	ldr	r3, [sp, #12]
 8029464:	e7e4      	b.n	8029430 <__ieee754_pow+0x1d4>
 8029466:	3e01      	subs	r6, #1
 8029468:	2200      	movs	r2, #0
 802946a:	431e      	orrs	r6, r3
 802946c:	d013      	beq.n	8029496 <__ieee754_pow+0x23a>
 802946e:	4b22      	ldr	r3, [pc, #136]	@ (80294f8 <__ieee754_pow+0x29c>)
 8029470:	9206      	str	r2, [sp, #24]
 8029472:	9307      	str	r3, [sp, #28]
 8029474:	2384      	movs	r3, #132	@ 0x84
 8029476:	05db      	lsls	r3, r3, #23
 8029478:	429d      	cmp	r5, r3
 802947a:	d800      	bhi.n	802947e <__ieee754_pow+0x222>
 802947c:	e0fa      	b.n	8029674 <__ieee754_pow+0x418>
 802947e:	4b20      	ldr	r3, [pc, #128]	@ (8029500 <__ieee754_pow+0x2a4>)
 8029480:	429d      	cmp	r5, r3
 8029482:	d910      	bls.n	80294a6 <__ieee754_pow+0x24a>
 8029484:	4b1a      	ldr	r3, [pc, #104]	@ (80294f0 <__ieee754_pow+0x294>)
 8029486:	429c      	cmp	r4, r3
 8029488:	d807      	bhi.n	802949a <__ieee754_pow+0x23e>
 802948a:	2f00      	cmp	r7, #0
 802948c:	da07      	bge.n	802949e <__ieee754_pow+0x242>
 802948e:	2000      	movs	r0, #0
 8029490:	f000 fd82 	bl	8029f98 <__math_oflow>
 8029494:	e707      	b.n	80292a6 <__ieee754_pow+0x4a>
 8029496:	4b1b      	ldr	r3, [pc, #108]	@ (8029504 <__ieee754_pow+0x2a8>)
 8029498:	e7ea      	b.n	8029470 <__ieee754_pow+0x214>
 802949a:	2f00      	cmp	r7, #0
 802949c:	dcf7      	bgt.n	802948e <__ieee754_pow+0x232>
 802949e:	2000      	movs	r0, #0
 80294a0:	f000 fd73 	bl	8029f8a <__math_uflow>
 80294a4:	e6ff      	b.n	80292a6 <__ieee754_pow+0x4a>
 80294a6:	4b18      	ldr	r3, [pc, #96]	@ (8029508 <__ieee754_pow+0x2ac>)
 80294a8:	429c      	cmp	r4, r3
 80294aa:	d80a      	bhi.n	80294c2 <__ieee754_pow+0x266>
 80294ac:	9806      	ldr	r0, [sp, #24]
 80294ae:	9907      	ldr	r1, [sp, #28]
 80294b0:	2300      	movs	r3, #0
 80294b2:	2200      	movs	r2, #0
 80294b4:	f7d7 f802 	bl	80004bc <__aeabi_dcmplt>
 80294b8:	1e43      	subs	r3, r0, #1
 80294ba:	4198      	sbcs	r0, r3
 80294bc:	2f00      	cmp	r7, #0
 80294be:	daef      	bge.n	80294a0 <__ieee754_pow+0x244>
 80294c0:	e7e6      	b.n	8029490 <__ieee754_pow+0x234>
 80294c2:	4b0d      	ldr	r3, [pc, #52]	@ (80294f8 <__ieee754_pow+0x29c>)
 80294c4:	2200      	movs	r2, #0
 80294c6:	429c      	cmp	r4, r3
 80294c8:	d920      	bls.n	802950c <__ieee754_pow+0x2b0>
 80294ca:	9806      	ldr	r0, [sp, #24]
 80294cc:	9907      	ldr	r1, [sp, #28]
 80294ce:	2300      	movs	r3, #0
 80294d0:	f7d6 fff4 	bl	80004bc <__aeabi_dcmplt>
 80294d4:	1e43      	subs	r3, r0, #1
 80294d6:	4198      	sbcs	r0, r3
 80294d8:	2f00      	cmp	r7, #0
 80294da:	dcd9      	bgt.n	8029490 <__ieee754_pow+0x234>
 80294dc:	e7e0      	b.n	80294a0 <__ieee754_pow+0x244>
 80294de:	46c0      	nop			@ (mov r8, r8)
 80294e0:	fff00000 	.word	0xfff00000
 80294e4:	7ff00000 	.word	0x7ff00000
 80294e8:	c0100000 	.word	0xc0100000
 80294ec:	433fffff 	.word	0x433fffff
 80294f0:	3fefffff 	.word	0x3fefffff
 80294f4:	fffffc01 	.word	0xfffffc01
 80294f8:	3ff00000 	.word	0x3ff00000
 80294fc:	3fe00000 	.word	0x3fe00000
 8029500:	43f00000 	.word	0x43f00000
 8029504:	bff00000 	.word	0xbff00000
 8029508:	3feffffe 	.word	0x3feffffe
 802950c:	9800      	ldr	r0, [sp, #0]
 802950e:	9901      	ldr	r1, [sp, #4]
 8029510:	4b4d      	ldr	r3, [pc, #308]	@ (8029648 <__ieee754_pow+0x3ec>)
 8029512:	f7d9 fd05 	bl	8002f20 <__aeabi_dsub>
 8029516:	22c0      	movs	r2, #192	@ 0xc0
 8029518:	4b4c      	ldr	r3, [pc, #304]	@ (802964c <__ieee754_pow+0x3f0>)
 802951a:	05d2      	lsls	r2, r2, #23
 802951c:	0006      	movs	r6, r0
 802951e:	000f      	movs	r7, r1
 8029520:	f7d9 fa18 	bl	8002954 <__aeabi_dmul>
 8029524:	4a4a      	ldr	r2, [pc, #296]	@ (8029650 <__ieee754_pow+0x3f4>)
 8029526:	9002      	str	r0, [sp, #8]
 8029528:	9103      	str	r1, [sp, #12]
 802952a:	4b4a      	ldr	r3, [pc, #296]	@ (8029654 <__ieee754_pow+0x3f8>)
 802952c:	0030      	movs	r0, r6
 802952e:	0039      	movs	r1, r7
 8029530:	f7d9 fa10 	bl	8002954 <__aeabi_dmul>
 8029534:	2200      	movs	r2, #0
 8029536:	9000      	str	r0, [sp, #0]
 8029538:	9101      	str	r1, [sp, #4]
 802953a:	4b47      	ldr	r3, [pc, #284]	@ (8029658 <__ieee754_pow+0x3fc>)
 802953c:	0030      	movs	r0, r6
 802953e:	0039      	movs	r1, r7
 8029540:	f7d9 fa08 	bl	8002954 <__aeabi_dmul>
 8029544:	0002      	movs	r2, r0
 8029546:	000b      	movs	r3, r1
 8029548:	4844      	ldr	r0, [pc, #272]	@ (802965c <__ieee754_pow+0x400>)
 802954a:	4945      	ldr	r1, [pc, #276]	@ (8029660 <__ieee754_pow+0x404>)
 802954c:	f7d9 fce8 	bl	8002f20 <__aeabi_dsub>
 8029550:	0032      	movs	r2, r6
 8029552:	003b      	movs	r3, r7
 8029554:	f7d9 f9fe 	bl	8002954 <__aeabi_dmul>
 8029558:	0002      	movs	r2, r0
 802955a:	000b      	movs	r3, r1
 802955c:	2000      	movs	r0, #0
 802955e:	4941      	ldr	r1, [pc, #260]	@ (8029664 <__ieee754_pow+0x408>)
 8029560:	f7d9 fcde 	bl	8002f20 <__aeabi_dsub>
 8029564:	0032      	movs	r2, r6
 8029566:	0004      	movs	r4, r0
 8029568:	000d      	movs	r5, r1
 802956a:	003b      	movs	r3, r7
 802956c:	0030      	movs	r0, r6
 802956e:	0039      	movs	r1, r7
 8029570:	f7d9 f9f0 	bl	8002954 <__aeabi_dmul>
 8029574:	0002      	movs	r2, r0
 8029576:	000b      	movs	r3, r1
 8029578:	0020      	movs	r0, r4
 802957a:	0029      	movs	r1, r5
 802957c:	f7d9 f9ea 	bl	8002954 <__aeabi_dmul>
 8029580:	4a39      	ldr	r2, [pc, #228]	@ (8029668 <__ieee754_pow+0x40c>)
 8029582:	4b32      	ldr	r3, [pc, #200]	@ (802964c <__ieee754_pow+0x3f0>)
 8029584:	f7d9 f9e6 	bl	8002954 <__aeabi_dmul>
 8029588:	0002      	movs	r2, r0
 802958a:	000b      	movs	r3, r1
 802958c:	9800      	ldr	r0, [sp, #0]
 802958e:	9901      	ldr	r1, [sp, #4]
 8029590:	f7d9 fcc6 	bl	8002f20 <__aeabi_dsub>
 8029594:	0002      	movs	r2, r0
 8029596:	000b      	movs	r3, r1
 8029598:	0004      	movs	r4, r0
 802959a:	000d      	movs	r5, r1
 802959c:	9802      	ldr	r0, [sp, #8]
 802959e:	9903      	ldr	r1, [sp, #12]
 80295a0:	f7d8 f9d8 	bl	8001954 <__aeabi_dadd>
 80295a4:	9a02      	ldr	r2, [sp, #8]
 80295a6:	9b03      	ldr	r3, [sp, #12]
 80295a8:	2000      	movs	r0, #0
 80295aa:	9000      	str	r0, [sp, #0]
 80295ac:	9101      	str	r1, [sp, #4]
 80295ae:	f7d9 fcb7 	bl	8002f20 <__aeabi_dsub>
 80295b2:	0002      	movs	r2, r0
 80295b4:	000b      	movs	r3, r1
 80295b6:	0020      	movs	r0, r4
 80295b8:	0029      	movs	r1, r5
 80295ba:	f7d9 fcb1 	bl	8002f20 <__aeabi_dsub>
 80295be:	9c04      	ldr	r4, [sp, #16]
 80295c0:	9d05      	ldr	r5, [sp, #20]
 80295c2:	2400      	movs	r4, #0
 80295c4:	0006      	movs	r6, r0
 80295c6:	000f      	movs	r7, r1
 80295c8:	9804      	ldr	r0, [sp, #16]
 80295ca:	9905      	ldr	r1, [sp, #20]
 80295cc:	0022      	movs	r2, r4
 80295ce:	002b      	movs	r3, r5
 80295d0:	9402      	str	r4, [sp, #8]
 80295d2:	9503      	str	r5, [sp, #12]
 80295d4:	f7d9 fca4 	bl	8002f20 <__aeabi_dsub>
 80295d8:	9a00      	ldr	r2, [sp, #0]
 80295da:	9b01      	ldr	r3, [sp, #4]
 80295dc:	f7d9 f9ba 	bl	8002954 <__aeabi_dmul>
 80295e0:	9a04      	ldr	r2, [sp, #16]
 80295e2:	9b05      	ldr	r3, [sp, #20]
 80295e4:	9008      	str	r0, [sp, #32]
 80295e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80295e8:	0030      	movs	r0, r6
 80295ea:	0039      	movs	r1, r7
 80295ec:	f7d9 f9b2 	bl	8002954 <__aeabi_dmul>
 80295f0:	0002      	movs	r2, r0
 80295f2:	000b      	movs	r3, r1
 80295f4:	9808      	ldr	r0, [sp, #32]
 80295f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80295f8:	f7d8 f9ac 	bl	8001954 <__aeabi_dadd>
 80295fc:	0022      	movs	r2, r4
 80295fe:	002b      	movs	r3, r5
 8029600:	9004      	str	r0, [sp, #16]
 8029602:	9105      	str	r1, [sp, #20]
 8029604:	9800      	ldr	r0, [sp, #0]
 8029606:	9901      	ldr	r1, [sp, #4]
 8029608:	f7d9 f9a4 	bl	8002954 <__aeabi_dmul>
 802960c:	000b      	movs	r3, r1
 802960e:	0002      	movs	r2, r0
 8029610:	9000      	str	r0, [sp, #0]
 8029612:	9101      	str	r1, [sp, #4]
 8029614:	9804      	ldr	r0, [sp, #16]
 8029616:	9905      	ldr	r1, [sp, #20]
 8029618:	f7d8 f99c 	bl	8001954 <__aeabi_dadd>
 802961c:	4b13      	ldr	r3, [pc, #76]	@ (802966c <__ieee754_pow+0x410>)
 802961e:	0006      	movs	r6, r0
 8029620:	000f      	movs	r7, r1
 8029622:	9108      	str	r1, [sp, #32]
 8029624:	4299      	cmp	r1, r3
 8029626:	dc00      	bgt.n	802962a <__ieee754_pow+0x3ce>
 8029628:	e1c0      	b.n	80299ac <__ieee754_pow+0x750>
 802962a:	4b11      	ldr	r3, [pc, #68]	@ (8029670 <__ieee754_pow+0x414>)
 802962c:	18cb      	adds	r3, r1, r3
 802962e:	4303      	orrs	r3, r0
 8029630:	42a3      	cmp	r3, r4
 8029632:	d100      	bne.n	8029636 <__ieee754_pow+0x3da>
 8029634:	e1a1      	b.n	802997a <__ieee754_pow+0x71e>
 8029636:	9806      	ldr	r0, [sp, #24]
 8029638:	9907      	ldr	r1, [sp, #28]
 802963a:	2300      	movs	r3, #0
 802963c:	2200      	movs	r2, #0
 802963e:	f7d6 ff3d 	bl	80004bc <__aeabi_dcmplt>
 8029642:	1e43      	subs	r3, r0, #1
 8029644:	4198      	sbcs	r0, r3
 8029646:	e723      	b.n	8029490 <__ieee754_pow+0x234>
 8029648:	3ff00000 	.word	0x3ff00000
 802964c:	3ff71547 	.word	0x3ff71547
 8029650:	f85ddf44 	.word	0xf85ddf44
 8029654:	3e54ae0b 	.word	0x3e54ae0b
 8029658:	3fd00000 	.word	0x3fd00000
 802965c:	55555555 	.word	0x55555555
 8029660:	3fd55555 	.word	0x3fd55555
 8029664:	3fe00000 	.word	0x3fe00000
 8029668:	652b82fe 	.word	0x652b82fe
 802966c:	408fffff 	.word	0x408fffff
 8029670:	bf700000 	.word	0xbf700000
 8029674:	4bdc      	ldr	r3, [pc, #880]	@ (80299e8 <__ieee754_pow+0x78c>)
 8029676:	9903      	ldr	r1, [sp, #12]
 8029678:	2200      	movs	r2, #0
 802967a:	420b      	tst	r3, r1
 802967c:	d10b      	bne.n	8029696 <__ieee754_pow+0x43a>
 802967e:	9800      	ldr	r0, [sp, #0]
 8029680:	9901      	ldr	r1, [sp, #4]
 8029682:	2200      	movs	r2, #0
 8029684:	4bd9      	ldr	r3, [pc, #868]	@ (80299ec <__ieee754_pow+0x790>)
 8029686:	f7d9 f965 	bl	8002954 <__aeabi_dmul>
 802968a:	2235      	movs	r2, #53	@ 0x35
 802968c:	9000      	str	r0, [sp, #0]
 802968e:	9101      	str	r1, [sp, #4]
 8029690:	9b01      	ldr	r3, [sp, #4]
 8029692:	4252      	negs	r2, r2
 8029694:	9308      	str	r3, [sp, #32]
 8029696:	9b08      	ldr	r3, [sp, #32]
 8029698:	49d5      	ldr	r1, [pc, #852]	@ (80299f0 <__ieee754_pow+0x794>)
 802969a:	151b      	asrs	r3, r3, #20
 802969c:	185b      	adds	r3, r3, r1
 802969e:	189b      	adds	r3, r3, r2
 80296a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80296a2:	9b08      	ldr	r3, [sp, #32]
 80296a4:	4dd3      	ldr	r5, [pc, #844]	@ (80299f4 <__ieee754_pow+0x798>)
 80296a6:	031b      	lsls	r3, r3, #12
 80296a8:	4ad3      	ldr	r2, [pc, #844]	@ (80299f8 <__ieee754_pow+0x79c>)
 80296aa:	0b1b      	lsrs	r3, r3, #12
 80296ac:	2600      	movs	r6, #0
 80296ae:	431d      	orrs	r5, r3
 80296b0:	4293      	cmp	r3, r2
 80296b2:	dd09      	ble.n	80296c8 <__ieee754_pow+0x46c>
 80296b4:	4ad1      	ldr	r2, [pc, #836]	@ (80299fc <__ieee754_pow+0x7a0>)
 80296b6:	3601      	adds	r6, #1
 80296b8:	4293      	cmp	r3, r2
 80296ba:	dd05      	ble.n	80296c8 <__ieee754_pow+0x46c>
 80296bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80296be:	199b      	adds	r3, r3, r6
 80296c0:	2600      	movs	r6, #0
 80296c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80296c4:	4bce      	ldr	r3, [pc, #824]	@ (8029a00 <__ieee754_pow+0x7a4>)
 80296c6:	18ed      	adds	r5, r5, r3
 80296c8:	9800      	ldr	r0, [sp, #0]
 80296ca:	9901      	ldr	r1, [sp, #4]
 80296cc:	0029      	movs	r1, r5
 80296ce:	4bcd      	ldr	r3, [pc, #820]	@ (8029a04 <__ieee754_pow+0x7a8>)
 80296d0:	00f2      	lsls	r2, r6, #3
 80296d2:	189b      	adds	r3, r3, r2
 80296d4:	685c      	ldr	r4, [r3, #4]
 80296d6:	681b      	ldr	r3, [r3, #0]
 80296d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80296da:	930a      	str	r3, [sp, #40]	@ 0x28
 80296dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80296de:	001a      	movs	r2, r3
 80296e0:	0023      	movs	r3, r4
 80296e2:	900c      	str	r0, [sp, #48]	@ 0x30
 80296e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80296e6:	f7d9 fc1b 	bl	8002f20 <__aeabi_dsub>
 80296ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80296ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80296ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80296f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80296f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80296f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80296f6:	f7d8 f92d 	bl	8001954 <__aeabi_dadd>
 80296fa:	0002      	movs	r2, r0
 80296fc:	000b      	movs	r3, r1
 80296fe:	2000      	movs	r0, #0
 8029700:	49bc      	ldr	r1, [pc, #752]	@ (80299f4 <__ieee754_pow+0x798>)
 8029702:	f7d8 fced 	bl	80020e0 <__aeabi_ddiv>
 8029706:	0002      	movs	r2, r0
 8029708:	000b      	movs	r3, r1
 802970a:	9012      	str	r0, [sp, #72]	@ 0x48
 802970c:	9113      	str	r1, [sp, #76]	@ 0x4c
 802970e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029710:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029712:	f7d9 f91f 	bl	8002954 <__aeabi_dmul>
 8029716:	9008      	str	r0, [sp, #32]
 8029718:	9109      	str	r1, [sp, #36]	@ 0x24
 802971a:	9b08      	ldr	r3, [sp, #32]
 802971c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802971e:	2180      	movs	r1, #128	@ 0x80
 8029720:	9302      	str	r3, [sp, #8]
 8029722:	9403      	str	r4, [sp, #12]
 8029724:	2080      	movs	r0, #128	@ 0x80
 8029726:	2300      	movs	r3, #0
 8029728:	2200      	movs	r2, #0
 802972a:	106d      	asrs	r5, r5, #1
 802972c:	0589      	lsls	r1, r1, #22
 802972e:	9302      	str	r3, [sp, #8]
 8029730:	4329      	orrs	r1, r5
 8029732:	0300      	lsls	r0, r0, #12
 8029734:	9b02      	ldr	r3, [sp, #8]
 8029736:	9c03      	ldr	r4, [sp, #12]
 8029738:	1809      	adds	r1, r1, r0
 802973a:	9300      	str	r3, [sp, #0]
 802973c:	9401      	str	r4, [sp, #4]
 802973e:	04b6      	lsls	r6, r6, #18
 8029740:	198b      	adds	r3, r1, r6
 8029742:	9800      	ldr	r0, [sp, #0]
 8029744:	9901      	ldr	r1, [sp, #4]
 8029746:	0014      	movs	r4, r2
 8029748:	001d      	movs	r5, r3
 802974a:	f7d9 f903 	bl	8002954 <__aeabi_dmul>
 802974e:	0002      	movs	r2, r0
 8029750:	000b      	movs	r3, r1
 8029752:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029754:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029756:	f7d9 fbe3 	bl	8002f20 <__aeabi_dsub>
 802975a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802975c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802975e:	0006      	movs	r6, r0
 8029760:	000f      	movs	r7, r1
 8029762:	0020      	movs	r0, r4
 8029764:	0029      	movs	r1, r5
 8029766:	f7d9 fbdb 	bl	8002f20 <__aeabi_dsub>
 802976a:	0002      	movs	r2, r0
 802976c:	000b      	movs	r3, r1
 802976e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029770:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029772:	f7d9 fbd5 	bl	8002f20 <__aeabi_dsub>
 8029776:	9a00      	ldr	r2, [sp, #0]
 8029778:	9b01      	ldr	r3, [sp, #4]
 802977a:	f7d9 f8eb 	bl	8002954 <__aeabi_dmul>
 802977e:	0002      	movs	r2, r0
 8029780:	000b      	movs	r3, r1
 8029782:	0030      	movs	r0, r6
 8029784:	0039      	movs	r1, r7
 8029786:	f7d9 fbcb 	bl	8002f20 <__aeabi_dsub>
 802978a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802978c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802978e:	f7d9 f8e1 	bl	8002954 <__aeabi_dmul>
 8029792:	9a08      	ldr	r2, [sp, #32]
 8029794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029796:	900a      	str	r0, [sp, #40]	@ 0x28
 8029798:	910b      	str	r1, [sp, #44]	@ 0x2c
 802979a:	0010      	movs	r0, r2
 802979c:	0019      	movs	r1, r3
 802979e:	f7d9 f8d9 	bl	8002954 <__aeabi_dmul>
 80297a2:	0006      	movs	r6, r0
 80297a4:	000f      	movs	r7, r1
 80297a6:	4a98      	ldr	r2, [pc, #608]	@ (8029a08 <__ieee754_pow+0x7ac>)
 80297a8:	4b98      	ldr	r3, [pc, #608]	@ (8029a0c <__ieee754_pow+0x7b0>)
 80297aa:	f7d9 f8d3 	bl	8002954 <__aeabi_dmul>
 80297ae:	4a98      	ldr	r2, [pc, #608]	@ (8029a10 <__ieee754_pow+0x7b4>)
 80297b0:	4b98      	ldr	r3, [pc, #608]	@ (8029a14 <__ieee754_pow+0x7b8>)
 80297b2:	f7d8 f8cf 	bl	8001954 <__aeabi_dadd>
 80297b6:	0032      	movs	r2, r6
 80297b8:	003b      	movs	r3, r7
 80297ba:	f7d9 f8cb 	bl	8002954 <__aeabi_dmul>
 80297be:	4a96      	ldr	r2, [pc, #600]	@ (8029a18 <__ieee754_pow+0x7bc>)
 80297c0:	4b96      	ldr	r3, [pc, #600]	@ (8029a1c <__ieee754_pow+0x7c0>)
 80297c2:	f7d8 f8c7 	bl	8001954 <__aeabi_dadd>
 80297c6:	0032      	movs	r2, r6
 80297c8:	003b      	movs	r3, r7
 80297ca:	f7d9 f8c3 	bl	8002954 <__aeabi_dmul>
 80297ce:	4a94      	ldr	r2, [pc, #592]	@ (8029a20 <__ieee754_pow+0x7c4>)
 80297d0:	4b94      	ldr	r3, [pc, #592]	@ (8029a24 <__ieee754_pow+0x7c8>)
 80297d2:	f7d8 f8bf 	bl	8001954 <__aeabi_dadd>
 80297d6:	0032      	movs	r2, r6
 80297d8:	003b      	movs	r3, r7
 80297da:	f7d9 f8bb 	bl	8002954 <__aeabi_dmul>
 80297de:	4a92      	ldr	r2, [pc, #584]	@ (8029a28 <__ieee754_pow+0x7cc>)
 80297e0:	4b92      	ldr	r3, [pc, #584]	@ (8029a2c <__ieee754_pow+0x7d0>)
 80297e2:	f7d8 f8b7 	bl	8001954 <__aeabi_dadd>
 80297e6:	0032      	movs	r2, r6
 80297e8:	003b      	movs	r3, r7
 80297ea:	f7d9 f8b3 	bl	8002954 <__aeabi_dmul>
 80297ee:	4a90      	ldr	r2, [pc, #576]	@ (8029a30 <__ieee754_pow+0x7d4>)
 80297f0:	4b90      	ldr	r3, [pc, #576]	@ (8029a34 <__ieee754_pow+0x7d8>)
 80297f2:	f7d8 f8af 	bl	8001954 <__aeabi_dadd>
 80297f6:	0032      	movs	r2, r6
 80297f8:	0004      	movs	r4, r0
 80297fa:	000d      	movs	r5, r1
 80297fc:	003b      	movs	r3, r7
 80297fe:	0030      	movs	r0, r6
 8029800:	0039      	movs	r1, r7
 8029802:	f7d9 f8a7 	bl	8002954 <__aeabi_dmul>
 8029806:	0002      	movs	r2, r0
 8029808:	000b      	movs	r3, r1
 802980a:	0020      	movs	r0, r4
 802980c:	0029      	movs	r1, r5
 802980e:	f7d9 f8a1 	bl	8002954 <__aeabi_dmul>
 8029812:	9a00      	ldr	r2, [sp, #0]
 8029814:	9b01      	ldr	r3, [sp, #4]
 8029816:	0004      	movs	r4, r0
 8029818:	000d      	movs	r5, r1
 802981a:	9808      	ldr	r0, [sp, #32]
 802981c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802981e:	f7d8 f899 	bl	8001954 <__aeabi_dadd>
 8029822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029824:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029826:	f7d9 f895 	bl	8002954 <__aeabi_dmul>
 802982a:	0022      	movs	r2, r4
 802982c:	002b      	movs	r3, r5
 802982e:	f7d8 f891 	bl	8001954 <__aeabi_dadd>
 8029832:	9a00      	ldr	r2, [sp, #0]
 8029834:	9b01      	ldr	r3, [sp, #4]
 8029836:	900c      	str	r0, [sp, #48]	@ 0x30
 8029838:	910d      	str	r1, [sp, #52]	@ 0x34
 802983a:	0010      	movs	r0, r2
 802983c:	0019      	movs	r1, r3
 802983e:	f7d9 f889 	bl	8002954 <__aeabi_dmul>
 8029842:	2200      	movs	r2, #0
 8029844:	4b7c      	ldr	r3, [pc, #496]	@ (8029a38 <__ieee754_pow+0x7dc>)
 8029846:	0004      	movs	r4, r0
 8029848:	000d      	movs	r5, r1
 802984a:	f7d8 f883 	bl	8001954 <__aeabi_dadd>
 802984e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029852:	f7d8 f87f 	bl	8001954 <__aeabi_dadd>
 8029856:	2000      	movs	r0, #0
 8029858:	000f      	movs	r7, r1
 802985a:	0006      	movs	r6, r0
 802985c:	0002      	movs	r2, r0
 802985e:	000b      	movs	r3, r1
 8029860:	9800      	ldr	r0, [sp, #0]
 8029862:	9901      	ldr	r1, [sp, #4]
 8029864:	f7d9 f876 	bl	8002954 <__aeabi_dmul>
 8029868:	2200      	movs	r2, #0
 802986a:	9000      	str	r0, [sp, #0]
 802986c:	9101      	str	r1, [sp, #4]
 802986e:	4b72      	ldr	r3, [pc, #456]	@ (8029a38 <__ieee754_pow+0x7dc>)
 8029870:	0030      	movs	r0, r6
 8029872:	0039      	movs	r1, r7
 8029874:	f7d9 fb54 	bl	8002f20 <__aeabi_dsub>
 8029878:	0022      	movs	r2, r4
 802987a:	002b      	movs	r3, r5
 802987c:	f7d9 fb50 	bl	8002f20 <__aeabi_dsub>
 8029880:	0002      	movs	r2, r0
 8029882:	000b      	movs	r3, r1
 8029884:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029886:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029888:	f7d9 fb4a 	bl	8002f20 <__aeabi_dsub>
 802988c:	9a08      	ldr	r2, [sp, #32]
 802988e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029890:	f7d9 f860 	bl	8002954 <__aeabi_dmul>
 8029894:	0032      	movs	r2, r6
 8029896:	0004      	movs	r4, r0
 8029898:	000d      	movs	r5, r1
 802989a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802989c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802989e:	003b      	movs	r3, r7
 80298a0:	f7d9 f858 	bl	8002954 <__aeabi_dmul>
 80298a4:	0002      	movs	r2, r0
 80298a6:	000b      	movs	r3, r1
 80298a8:	0020      	movs	r0, r4
 80298aa:	0029      	movs	r1, r5
 80298ac:	f7d8 f852 	bl	8001954 <__aeabi_dadd>
 80298b0:	0004      	movs	r4, r0
 80298b2:	000d      	movs	r5, r1
 80298b4:	0002      	movs	r2, r0
 80298b6:	000b      	movs	r3, r1
 80298b8:	9800      	ldr	r0, [sp, #0]
 80298ba:	9901      	ldr	r1, [sp, #4]
 80298bc:	f7d8 f84a 	bl	8001954 <__aeabi_dadd>
 80298c0:	22e0      	movs	r2, #224	@ 0xe0
 80298c2:	2000      	movs	r0, #0
 80298c4:	4b5d      	ldr	r3, [pc, #372]	@ (8029a3c <__ieee754_pow+0x7e0>)
 80298c6:	0612      	lsls	r2, r2, #24
 80298c8:	0006      	movs	r6, r0
 80298ca:	000f      	movs	r7, r1
 80298cc:	f7d9 f842 	bl	8002954 <__aeabi_dmul>
 80298d0:	9008      	str	r0, [sp, #32]
 80298d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80298d4:	9a00      	ldr	r2, [sp, #0]
 80298d6:	9b01      	ldr	r3, [sp, #4]
 80298d8:	0030      	movs	r0, r6
 80298da:	0039      	movs	r1, r7
 80298dc:	f7d9 fb20 	bl	8002f20 <__aeabi_dsub>
 80298e0:	0002      	movs	r2, r0
 80298e2:	000b      	movs	r3, r1
 80298e4:	0020      	movs	r0, r4
 80298e6:	0029      	movs	r1, r5
 80298e8:	f7d9 fb1a 	bl	8002f20 <__aeabi_dsub>
 80298ec:	4a54      	ldr	r2, [pc, #336]	@ (8029a40 <__ieee754_pow+0x7e4>)
 80298ee:	4b53      	ldr	r3, [pc, #332]	@ (8029a3c <__ieee754_pow+0x7e0>)
 80298f0:	f7d9 f830 	bl	8002954 <__aeabi_dmul>
 80298f4:	4a53      	ldr	r2, [pc, #332]	@ (8029a44 <__ieee754_pow+0x7e8>)
 80298f6:	0004      	movs	r4, r0
 80298f8:	000d      	movs	r5, r1
 80298fa:	0030      	movs	r0, r6
 80298fc:	0039      	movs	r1, r7
 80298fe:	4b52      	ldr	r3, [pc, #328]	@ (8029a48 <__ieee754_pow+0x7ec>)
 8029900:	f7d9 f828 	bl	8002954 <__aeabi_dmul>
 8029904:	0002      	movs	r2, r0
 8029906:	000b      	movs	r3, r1
 8029908:	0020      	movs	r0, r4
 802990a:	0029      	movs	r1, r5
 802990c:	f7d8 f822 	bl	8001954 <__aeabi_dadd>
 8029910:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029912:	4b4e      	ldr	r3, [pc, #312]	@ (8029a4c <__ieee754_pow+0x7f0>)
 8029914:	189b      	adds	r3, r3, r2
 8029916:	681a      	ldr	r2, [r3, #0]
 8029918:	685b      	ldr	r3, [r3, #4]
 802991a:	f7d8 f81b 	bl	8001954 <__aeabi_dadd>
 802991e:	900a      	str	r0, [sp, #40]	@ 0x28
 8029920:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029922:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029924:	f7d9 ff64 	bl	80037f0 <__aeabi_i2d>
 8029928:	0004      	movs	r4, r0
 802992a:	000d      	movs	r5, r1
 802992c:	9808      	ldr	r0, [sp, #32]
 802992e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029930:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029932:	4b47      	ldr	r3, [pc, #284]	@ (8029a50 <__ieee754_pow+0x7f4>)
 8029934:	189b      	adds	r3, r3, r2
 8029936:	681e      	ldr	r6, [r3, #0]
 8029938:	685f      	ldr	r7, [r3, #4]
 802993a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802993c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802993e:	f7d8 f809 	bl	8001954 <__aeabi_dadd>
 8029942:	0032      	movs	r2, r6
 8029944:	003b      	movs	r3, r7
 8029946:	f7d8 f805 	bl	8001954 <__aeabi_dadd>
 802994a:	0022      	movs	r2, r4
 802994c:	002b      	movs	r3, r5
 802994e:	f7d8 f801 	bl	8001954 <__aeabi_dadd>
 8029952:	2000      	movs	r0, #0
 8029954:	0022      	movs	r2, r4
 8029956:	002b      	movs	r3, r5
 8029958:	9000      	str	r0, [sp, #0]
 802995a:	9101      	str	r1, [sp, #4]
 802995c:	f7d9 fae0 	bl	8002f20 <__aeabi_dsub>
 8029960:	0032      	movs	r2, r6
 8029962:	003b      	movs	r3, r7
 8029964:	f7d9 fadc 	bl	8002f20 <__aeabi_dsub>
 8029968:	9a08      	ldr	r2, [sp, #32]
 802996a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802996c:	f7d9 fad8 	bl	8002f20 <__aeabi_dsub>
 8029970:	0002      	movs	r2, r0
 8029972:	000b      	movs	r3, r1
 8029974:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029976:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029978:	e61f      	b.n	80295ba <__ieee754_pow+0x35e>
 802997a:	4a36      	ldr	r2, [pc, #216]	@ (8029a54 <__ieee754_pow+0x7f8>)
 802997c:	4b36      	ldr	r3, [pc, #216]	@ (8029a58 <__ieee754_pow+0x7fc>)
 802997e:	9804      	ldr	r0, [sp, #16]
 8029980:	9905      	ldr	r1, [sp, #20]
 8029982:	f7d7 ffe7 	bl	8001954 <__aeabi_dadd>
 8029986:	9a00      	ldr	r2, [sp, #0]
 8029988:	9b01      	ldr	r3, [sp, #4]
 802998a:	0004      	movs	r4, r0
 802998c:	000d      	movs	r5, r1
 802998e:	0030      	movs	r0, r6
 8029990:	0039      	movs	r1, r7
 8029992:	f7d9 fac5 	bl	8002f20 <__aeabi_dsub>
 8029996:	0002      	movs	r2, r0
 8029998:	000b      	movs	r3, r1
 802999a:	0020      	movs	r0, r4
 802999c:	0029      	movs	r1, r5
 802999e:	f7d6 fda1 	bl	80004e4 <__aeabi_dcmpgt>
 80299a2:	2800      	cmp	r0, #0
 80299a4:	d000      	beq.n	80299a8 <__ieee754_pow+0x74c>
 80299a6:	e646      	b.n	8029636 <__ieee754_pow+0x3da>
 80299a8:	4b2c      	ldr	r3, [pc, #176]	@ (8029a5c <__ieee754_pow+0x800>)
 80299aa:	e063      	b.n	8029a74 <__ieee754_pow+0x818>
 80299ac:	4a2c      	ldr	r2, [pc, #176]	@ (8029a60 <__ieee754_pow+0x804>)
 80299ae:	004b      	lsls	r3, r1, #1
 80299b0:	085b      	lsrs	r3, r3, #1
 80299b2:	4293      	cmp	r3, r2
 80299b4:	d95a      	bls.n	8029a6c <__ieee754_pow+0x810>
 80299b6:	4b2b      	ldr	r3, [pc, #172]	@ (8029a64 <__ieee754_pow+0x808>)
 80299b8:	18cb      	adds	r3, r1, r3
 80299ba:	4303      	orrs	r3, r0
 80299bc:	d008      	beq.n	80299d0 <__ieee754_pow+0x774>
 80299be:	9806      	ldr	r0, [sp, #24]
 80299c0:	9907      	ldr	r1, [sp, #28]
 80299c2:	2300      	movs	r3, #0
 80299c4:	2200      	movs	r2, #0
 80299c6:	f7d6 fd79 	bl	80004bc <__aeabi_dcmplt>
 80299ca:	1e43      	subs	r3, r0, #1
 80299cc:	4198      	sbcs	r0, r3
 80299ce:	e567      	b.n	80294a0 <__ieee754_pow+0x244>
 80299d0:	9a00      	ldr	r2, [sp, #0]
 80299d2:	9b01      	ldr	r3, [sp, #4]
 80299d4:	f7d9 faa4 	bl	8002f20 <__aeabi_dsub>
 80299d8:	9a04      	ldr	r2, [sp, #16]
 80299da:	9b05      	ldr	r3, [sp, #20]
 80299dc:	f7d6 fd8c 	bl	80004f8 <__aeabi_dcmpge>
 80299e0:	2800      	cmp	r0, #0
 80299e2:	d1ec      	bne.n	80299be <__ieee754_pow+0x762>
 80299e4:	4b20      	ldr	r3, [pc, #128]	@ (8029a68 <__ieee754_pow+0x80c>)
 80299e6:	e045      	b.n	8029a74 <__ieee754_pow+0x818>
 80299e8:	7ff00000 	.word	0x7ff00000
 80299ec:	43400000 	.word	0x43400000
 80299f0:	fffffc01 	.word	0xfffffc01
 80299f4:	3ff00000 	.word	0x3ff00000
 80299f8:	0003988e 	.word	0x0003988e
 80299fc:	000bb679 	.word	0x000bb679
 8029a00:	fff00000 	.word	0xfff00000
 8029a04:	0802eb78 	.word	0x0802eb78
 8029a08:	4a454eef 	.word	0x4a454eef
 8029a0c:	3fca7e28 	.word	0x3fca7e28
 8029a10:	93c9db65 	.word	0x93c9db65
 8029a14:	3fcd864a 	.word	0x3fcd864a
 8029a18:	a91d4101 	.word	0xa91d4101
 8029a1c:	3fd17460 	.word	0x3fd17460
 8029a20:	518f264d 	.word	0x518f264d
 8029a24:	3fd55555 	.word	0x3fd55555
 8029a28:	db6fabff 	.word	0xdb6fabff
 8029a2c:	3fdb6db6 	.word	0x3fdb6db6
 8029a30:	33333303 	.word	0x33333303
 8029a34:	3fe33333 	.word	0x3fe33333
 8029a38:	40080000 	.word	0x40080000
 8029a3c:	3feec709 	.word	0x3feec709
 8029a40:	dc3a03fd 	.word	0xdc3a03fd
 8029a44:	145b01f5 	.word	0x145b01f5
 8029a48:	be3e2fe0 	.word	0xbe3e2fe0
 8029a4c:	0802eb58 	.word	0x0802eb58
 8029a50:	0802eb68 	.word	0x0802eb68
 8029a54:	652b82fe 	.word	0x652b82fe
 8029a58:	3c971547 	.word	0x3c971547
 8029a5c:	40900000 	.word	0x40900000
 8029a60:	4090cbff 	.word	0x4090cbff
 8029a64:	3f6f3400 	.word	0x3f6f3400
 8029a68:	4090cc00 	.word	0x4090cc00
 8029a6c:	4a73      	ldr	r2, [pc, #460]	@ (8029c3c <__ieee754_pow+0x9e0>)
 8029a6e:	9402      	str	r4, [sp, #8]
 8029a70:	4293      	cmp	r3, r2
 8029a72:	d925      	bls.n	8029ac0 <__ieee754_pow+0x864>
 8029a74:	4a72      	ldr	r2, [pc, #456]	@ (8029c40 <__ieee754_pow+0x9e4>)
 8029a76:	151b      	asrs	r3, r3, #20
 8029a78:	189b      	adds	r3, r3, r2
 8029a7a:	2280      	movs	r2, #128	@ 0x80
 8029a7c:	0352      	lsls	r2, r2, #13
 8029a7e:	0011      	movs	r1, r2
 8029a80:	4119      	asrs	r1, r3
 8029a82:	19cb      	adds	r3, r1, r7
 8029a84:	005c      	lsls	r4, r3, #1
 8029a86:	496f      	ldr	r1, [pc, #444]	@ (8029c44 <__ieee754_pow+0x9e8>)
 8029a88:	4d6f      	ldr	r5, [pc, #444]	@ (8029c48 <__ieee754_pow+0x9ec>)
 8029a8a:	0d64      	lsrs	r4, r4, #21
 8029a8c:	1864      	adds	r4, r4, r1
 8029a8e:	4125      	asrs	r5, r4
 8029a90:	401d      	ands	r5, r3
 8029a92:	031b      	lsls	r3, r3, #12
 8029a94:	0b1b      	lsrs	r3, r3, #12
 8029a96:	4313      	orrs	r3, r2
 8029a98:	2214      	movs	r2, #20
 8029a9a:	1b12      	subs	r2, r2, r4
 8029a9c:	4113      	asrs	r3, r2
 8029a9e:	9302      	str	r3, [sp, #8]
 8029aa0:	9b08      	ldr	r3, [sp, #32]
 8029aa2:	2000      	movs	r0, #0
 8029aa4:	0029      	movs	r1, r5
 8029aa6:	2b00      	cmp	r3, #0
 8029aa8:	da02      	bge.n	8029ab0 <__ieee754_pow+0x854>
 8029aaa:	9b02      	ldr	r3, [sp, #8]
 8029aac:	425b      	negs	r3, r3
 8029aae:	9302      	str	r3, [sp, #8]
 8029ab0:	0002      	movs	r2, r0
 8029ab2:	000b      	movs	r3, r1
 8029ab4:	9800      	ldr	r0, [sp, #0]
 8029ab6:	9901      	ldr	r1, [sp, #4]
 8029ab8:	f7d9 fa32 	bl	8002f20 <__aeabi_dsub>
 8029abc:	9000      	str	r0, [sp, #0]
 8029abe:	9101      	str	r1, [sp, #4]
 8029ac0:	9a04      	ldr	r2, [sp, #16]
 8029ac2:	9b05      	ldr	r3, [sp, #20]
 8029ac4:	9800      	ldr	r0, [sp, #0]
 8029ac6:	9901      	ldr	r1, [sp, #4]
 8029ac8:	f7d7 ff44 	bl	8001954 <__aeabi_dadd>
 8029acc:	2000      	movs	r0, #0
 8029ace:	2200      	movs	r2, #0
 8029ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8029c4c <__ieee754_pow+0x9f0>)
 8029ad2:	0006      	movs	r6, r0
 8029ad4:	000f      	movs	r7, r1
 8029ad6:	f7d8 ff3d 	bl	8002954 <__aeabi_dmul>
 8029ada:	9a00      	ldr	r2, [sp, #0]
 8029adc:	9b01      	ldr	r3, [sp, #4]
 8029ade:	9008      	str	r0, [sp, #32]
 8029ae0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ae2:	0030      	movs	r0, r6
 8029ae4:	0039      	movs	r1, r7
 8029ae6:	f7d9 fa1b 	bl	8002f20 <__aeabi_dsub>
 8029aea:	0002      	movs	r2, r0
 8029aec:	000b      	movs	r3, r1
 8029aee:	9804      	ldr	r0, [sp, #16]
 8029af0:	9905      	ldr	r1, [sp, #20]
 8029af2:	f7d9 fa15 	bl	8002f20 <__aeabi_dsub>
 8029af6:	4a56      	ldr	r2, [pc, #344]	@ (8029c50 <__ieee754_pow+0x9f4>)
 8029af8:	4b56      	ldr	r3, [pc, #344]	@ (8029c54 <__ieee754_pow+0x9f8>)
 8029afa:	f7d8 ff2b 	bl	8002954 <__aeabi_dmul>
 8029afe:	4a56      	ldr	r2, [pc, #344]	@ (8029c58 <__ieee754_pow+0x9fc>)
 8029b00:	0004      	movs	r4, r0
 8029b02:	000d      	movs	r5, r1
 8029b04:	0030      	movs	r0, r6
 8029b06:	0039      	movs	r1, r7
 8029b08:	4b54      	ldr	r3, [pc, #336]	@ (8029c5c <__ieee754_pow+0xa00>)
 8029b0a:	f7d8 ff23 	bl	8002954 <__aeabi_dmul>
 8029b0e:	0002      	movs	r2, r0
 8029b10:	000b      	movs	r3, r1
 8029b12:	0020      	movs	r0, r4
 8029b14:	0029      	movs	r1, r5
 8029b16:	f7d7 ff1d 	bl	8001954 <__aeabi_dadd>
 8029b1a:	0004      	movs	r4, r0
 8029b1c:	000d      	movs	r5, r1
 8029b1e:	0002      	movs	r2, r0
 8029b20:	000b      	movs	r3, r1
 8029b22:	9808      	ldr	r0, [sp, #32]
 8029b24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029b26:	f7d7 ff15 	bl	8001954 <__aeabi_dadd>
 8029b2a:	9a08      	ldr	r2, [sp, #32]
 8029b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b2e:	0006      	movs	r6, r0
 8029b30:	000f      	movs	r7, r1
 8029b32:	f7d9 f9f5 	bl	8002f20 <__aeabi_dsub>
 8029b36:	0002      	movs	r2, r0
 8029b38:	000b      	movs	r3, r1
 8029b3a:	0020      	movs	r0, r4
 8029b3c:	0029      	movs	r1, r5
 8029b3e:	f7d9 f9ef 	bl	8002f20 <__aeabi_dsub>
 8029b42:	0032      	movs	r2, r6
 8029b44:	9000      	str	r0, [sp, #0]
 8029b46:	9101      	str	r1, [sp, #4]
 8029b48:	003b      	movs	r3, r7
 8029b4a:	0030      	movs	r0, r6
 8029b4c:	0039      	movs	r1, r7
 8029b4e:	f7d8 ff01 	bl	8002954 <__aeabi_dmul>
 8029b52:	0004      	movs	r4, r0
 8029b54:	000d      	movs	r5, r1
 8029b56:	4a42      	ldr	r2, [pc, #264]	@ (8029c60 <__ieee754_pow+0xa04>)
 8029b58:	4b42      	ldr	r3, [pc, #264]	@ (8029c64 <__ieee754_pow+0xa08>)
 8029b5a:	f7d8 fefb 	bl	8002954 <__aeabi_dmul>
 8029b5e:	4a42      	ldr	r2, [pc, #264]	@ (8029c68 <__ieee754_pow+0xa0c>)
 8029b60:	4b42      	ldr	r3, [pc, #264]	@ (8029c6c <__ieee754_pow+0xa10>)
 8029b62:	f7d9 f9dd 	bl	8002f20 <__aeabi_dsub>
 8029b66:	0022      	movs	r2, r4
 8029b68:	002b      	movs	r3, r5
 8029b6a:	f7d8 fef3 	bl	8002954 <__aeabi_dmul>
 8029b6e:	4a40      	ldr	r2, [pc, #256]	@ (8029c70 <__ieee754_pow+0xa14>)
 8029b70:	4b40      	ldr	r3, [pc, #256]	@ (8029c74 <__ieee754_pow+0xa18>)
 8029b72:	f7d7 feef 	bl	8001954 <__aeabi_dadd>
 8029b76:	0022      	movs	r2, r4
 8029b78:	002b      	movs	r3, r5
 8029b7a:	f7d8 feeb 	bl	8002954 <__aeabi_dmul>
 8029b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8029c78 <__ieee754_pow+0xa1c>)
 8029b80:	4b3e      	ldr	r3, [pc, #248]	@ (8029c7c <__ieee754_pow+0xa20>)
 8029b82:	f7d9 f9cd 	bl	8002f20 <__aeabi_dsub>
 8029b86:	0022      	movs	r2, r4
 8029b88:	002b      	movs	r3, r5
 8029b8a:	f7d8 fee3 	bl	8002954 <__aeabi_dmul>
 8029b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8029c80 <__ieee754_pow+0xa24>)
 8029b90:	4b3c      	ldr	r3, [pc, #240]	@ (8029c84 <__ieee754_pow+0xa28>)
 8029b92:	f7d7 fedf 	bl	8001954 <__aeabi_dadd>
 8029b96:	0022      	movs	r2, r4
 8029b98:	002b      	movs	r3, r5
 8029b9a:	f7d8 fedb 	bl	8002954 <__aeabi_dmul>
 8029b9e:	0002      	movs	r2, r0
 8029ba0:	000b      	movs	r3, r1
 8029ba2:	0030      	movs	r0, r6
 8029ba4:	0039      	movs	r1, r7
 8029ba6:	f7d9 f9bb 	bl	8002f20 <__aeabi_dsub>
 8029baa:	0004      	movs	r4, r0
 8029bac:	000d      	movs	r5, r1
 8029bae:	0002      	movs	r2, r0
 8029bb0:	000b      	movs	r3, r1
 8029bb2:	0030      	movs	r0, r6
 8029bb4:	0039      	movs	r1, r7
 8029bb6:	f7d8 fecd 	bl	8002954 <__aeabi_dmul>
 8029bba:	2380      	movs	r3, #128	@ 0x80
 8029bbc:	9004      	str	r0, [sp, #16]
 8029bbe:	9105      	str	r1, [sp, #20]
 8029bc0:	2200      	movs	r2, #0
 8029bc2:	0020      	movs	r0, r4
 8029bc4:	0029      	movs	r1, r5
 8029bc6:	05db      	lsls	r3, r3, #23
 8029bc8:	f7d9 f9aa 	bl	8002f20 <__aeabi_dsub>
 8029bcc:	0002      	movs	r2, r0
 8029bce:	000b      	movs	r3, r1
 8029bd0:	9804      	ldr	r0, [sp, #16]
 8029bd2:	9905      	ldr	r1, [sp, #20]
 8029bd4:	f7d8 fa84 	bl	80020e0 <__aeabi_ddiv>
 8029bd8:	9a00      	ldr	r2, [sp, #0]
 8029bda:	9b01      	ldr	r3, [sp, #4]
 8029bdc:	0004      	movs	r4, r0
 8029bde:	000d      	movs	r5, r1
 8029be0:	0030      	movs	r0, r6
 8029be2:	0039      	movs	r1, r7
 8029be4:	f7d8 feb6 	bl	8002954 <__aeabi_dmul>
 8029be8:	9a00      	ldr	r2, [sp, #0]
 8029bea:	9b01      	ldr	r3, [sp, #4]
 8029bec:	f7d7 feb2 	bl	8001954 <__aeabi_dadd>
 8029bf0:	0002      	movs	r2, r0
 8029bf2:	000b      	movs	r3, r1
 8029bf4:	0020      	movs	r0, r4
 8029bf6:	0029      	movs	r1, r5
 8029bf8:	f7d9 f992 	bl	8002f20 <__aeabi_dsub>
 8029bfc:	0032      	movs	r2, r6
 8029bfe:	003b      	movs	r3, r7
 8029c00:	f7d9 f98e 	bl	8002f20 <__aeabi_dsub>
 8029c04:	0002      	movs	r2, r0
 8029c06:	000b      	movs	r3, r1
 8029c08:	2000      	movs	r0, #0
 8029c0a:	491f      	ldr	r1, [pc, #124]	@ (8029c88 <__ieee754_pow+0xa2c>)
 8029c0c:	f7d9 f988 	bl	8002f20 <__aeabi_dsub>
 8029c10:	9b02      	ldr	r3, [sp, #8]
 8029c12:	051b      	lsls	r3, r3, #20
 8029c14:	185b      	adds	r3, r3, r1
 8029c16:	151a      	asrs	r2, r3, #20
 8029c18:	2a00      	cmp	r2, #0
 8029c1a:	dc06      	bgt.n	8029c2a <__ieee754_pow+0x9ce>
 8029c1c:	9a02      	ldr	r2, [sp, #8]
 8029c1e:	f000 f929 	bl	8029e74 <scalbn>
 8029c22:	9a06      	ldr	r2, [sp, #24]
 8029c24:	9b07      	ldr	r3, [sp, #28]
 8029c26:	f7ff fb8b 	bl	8029340 <__ieee754_pow+0xe4>
 8029c2a:	0019      	movs	r1, r3
 8029c2c:	e7f9      	b.n	8029c22 <__ieee754_pow+0x9c6>
 8029c2e:	2300      	movs	r3, #0
 8029c30:	4c15      	ldr	r4, [pc, #84]	@ (8029c88 <__ieee754_pow+0xa2c>)
 8029c32:	9300      	str	r3, [sp, #0]
 8029c34:	9401      	str	r4, [sp, #4]
 8029c36:	f7ff fbc8 	bl	80293ca <__ieee754_pow+0x16e>
 8029c3a:	46c0      	nop			@ (mov r8, r8)
 8029c3c:	3fe00000 	.word	0x3fe00000
 8029c40:	fffffc02 	.word	0xfffffc02
 8029c44:	fffffc01 	.word	0xfffffc01
 8029c48:	fff00000 	.word	0xfff00000
 8029c4c:	3fe62e43 	.word	0x3fe62e43
 8029c50:	fefa39ef 	.word	0xfefa39ef
 8029c54:	3fe62e42 	.word	0x3fe62e42
 8029c58:	0ca86c39 	.word	0x0ca86c39
 8029c5c:	be205c61 	.word	0xbe205c61
 8029c60:	72bea4d0 	.word	0x72bea4d0
 8029c64:	3e663769 	.word	0x3e663769
 8029c68:	c5d26bf1 	.word	0xc5d26bf1
 8029c6c:	3ebbbd41 	.word	0x3ebbbd41
 8029c70:	af25de2c 	.word	0xaf25de2c
 8029c74:	3f11566a 	.word	0x3f11566a
 8029c78:	16bebd93 	.word	0x16bebd93
 8029c7c:	3f66c16c 	.word	0x3f66c16c
 8029c80:	5555553e 	.word	0x5555553e
 8029c84:	3fc55555 	.word	0x3fc55555
 8029c88:	3ff00000 	.word	0x3ff00000

08029c8c <fabs>:
 8029c8c:	0049      	lsls	r1, r1, #1
 8029c8e:	084b      	lsrs	r3, r1, #1
 8029c90:	0019      	movs	r1, r3
 8029c92:	4770      	bx	lr

08029c94 <__ieee754_expf>:
 8029c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029c96:	21ff      	movs	r1, #255	@ 0xff
 8029c98:	0043      	lsls	r3, r0, #1
 8029c9a:	1c04      	adds	r4, r0, #0
 8029c9c:	085b      	lsrs	r3, r3, #1
 8029c9e:	05c9      	lsls	r1, r1, #23
 8029ca0:	428b      	cmp	r3, r1
 8029ca2:	d904      	bls.n	8029cae <__ieee754_expf+0x1a>
 8029ca4:	1c01      	adds	r1, r0, #0
 8029ca6:	1c20      	adds	r0, r4, #0
 8029ca8:	f7d6 fe0a 	bl	80008c0 <__aeabi_fadd>
 8029cac:	e00d      	b.n	8029cca <__ieee754_expf+0x36>
 8029cae:	0fc6      	lsrs	r6, r0, #31
 8029cb0:	428b      	cmp	r3, r1
 8029cb2:	d104      	bne.n	8029cbe <__ieee754_expf+0x2a>
 8029cb4:	2e00      	cmp	r6, #0
 8029cb6:	d000      	beq.n	8029cba <__ieee754_expf+0x26>
 8029cb8:	e0ba      	b.n	8029e30 <__ieee754_expf+0x19c>
 8029cba:	1c20      	adds	r0, r4, #0
 8029cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029cbe:	495d      	ldr	r1, [pc, #372]	@ (8029e34 <__ieee754_expf+0x1a0>)
 8029cc0:	4288      	cmp	r0, r1
 8029cc2:	dd04      	ble.n	8029cce <__ieee754_expf+0x3a>
 8029cc4:	2000      	movs	r0, #0
 8029cc6:	f000 f98a 	bl	8029fde <__math_oflowf>
 8029cca:	1c04      	adds	r4, r0, #0
 8029ccc:	e7f5      	b.n	8029cba <__ieee754_expf+0x26>
 8029cce:	2800      	cmp	r0, #0
 8029cd0:	da06      	bge.n	8029ce0 <__ieee754_expf+0x4c>
 8029cd2:	4a59      	ldr	r2, [pc, #356]	@ (8029e38 <__ieee754_expf+0x1a4>)
 8029cd4:	4293      	cmp	r3, r2
 8029cd6:	d903      	bls.n	8029ce0 <__ieee754_expf+0x4c>
 8029cd8:	2000      	movs	r0, #0
 8029cda:	f000 f97a 	bl	8029fd2 <__math_uflowf>
 8029cde:	e7f4      	b.n	8029cca <__ieee754_expf+0x36>
 8029ce0:	4a56      	ldr	r2, [pc, #344]	@ (8029e3c <__ieee754_expf+0x1a8>)
 8029ce2:	4293      	cmp	r3, r2
 8029ce4:	d96e      	bls.n	8029dc4 <__ieee754_expf+0x130>
 8029ce6:	4a56      	ldr	r2, [pc, #344]	@ (8029e40 <__ieee754_expf+0x1ac>)
 8029ce8:	00b5      	lsls	r5, r6, #2
 8029cea:	4293      	cmp	r3, r2
 8029cec:	d84e      	bhi.n	8029d8c <__ieee754_expf+0xf8>
 8029cee:	4b55      	ldr	r3, [pc, #340]	@ (8029e44 <__ieee754_expf+0x1b0>)
 8029cf0:	1c20      	adds	r0, r4, #0
 8029cf2:	5959      	ldr	r1, [r3, r5]
 8029cf4:	f7d7 fafe 	bl	80012f4 <__aeabi_fsub>
 8029cf8:	4b53      	ldr	r3, [pc, #332]	@ (8029e48 <__ieee754_expf+0x1b4>)
 8029cfa:	1c07      	adds	r7, r0, #0
 8029cfc:	595b      	ldr	r3, [r3, r5]
 8029cfe:	2501      	movs	r5, #1
 8029d00:	4075      	eors	r5, r6
 8029d02:	9300      	str	r3, [sp, #0]
 8029d04:	1bad      	subs	r5, r5, r6
 8029d06:	9900      	ldr	r1, [sp, #0]
 8029d08:	1c38      	adds	r0, r7, #0
 8029d0a:	f7d7 faf3 	bl	80012f4 <__aeabi_fsub>
 8029d0e:	1c04      	adds	r4, r0, #0
 8029d10:	1c21      	adds	r1, r4, #0
 8029d12:	1c20      	adds	r0, r4, #0
 8029d14:	f7d7 f994 	bl	8001040 <__aeabi_fmul>
 8029d18:	494c      	ldr	r1, [pc, #304]	@ (8029e4c <__ieee754_expf+0x1b8>)
 8029d1a:	1c06      	adds	r6, r0, #0
 8029d1c:	f7d7 f990 	bl	8001040 <__aeabi_fmul>
 8029d20:	494b      	ldr	r1, [pc, #300]	@ (8029e50 <__ieee754_expf+0x1bc>)
 8029d22:	f7d7 fae7 	bl	80012f4 <__aeabi_fsub>
 8029d26:	1c31      	adds	r1, r6, #0
 8029d28:	f7d7 f98a 	bl	8001040 <__aeabi_fmul>
 8029d2c:	4949      	ldr	r1, [pc, #292]	@ (8029e54 <__ieee754_expf+0x1c0>)
 8029d2e:	f7d6 fdc7 	bl	80008c0 <__aeabi_fadd>
 8029d32:	1c31      	adds	r1, r6, #0
 8029d34:	f7d7 f984 	bl	8001040 <__aeabi_fmul>
 8029d38:	4947      	ldr	r1, [pc, #284]	@ (8029e58 <__ieee754_expf+0x1c4>)
 8029d3a:	f7d7 fadb 	bl	80012f4 <__aeabi_fsub>
 8029d3e:	1c31      	adds	r1, r6, #0
 8029d40:	f7d7 f97e 	bl	8001040 <__aeabi_fmul>
 8029d44:	4945      	ldr	r1, [pc, #276]	@ (8029e5c <__ieee754_expf+0x1c8>)
 8029d46:	f7d6 fdbb 	bl	80008c0 <__aeabi_fadd>
 8029d4a:	1c31      	adds	r1, r6, #0
 8029d4c:	f7d7 f978 	bl	8001040 <__aeabi_fmul>
 8029d50:	1c01      	adds	r1, r0, #0
 8029d52:	1c20      	adds	r0, r4, #0
 8029d54:	f7d7 face 	bl	80012f4 <__aeabi_fsub>
 8029d58:	1c01      	adds	r1, r0, #0
 8029d5a:	1c06      	adds	r6, r0, #0
 8029d5c:	1c20      	adds	r0, r4, #0
 8029d5e:	f7d7 f96f 	bl	8001040 <__aeabi_fmul>
 8029d62:	9001      	str	r0, [sp, #4]
 8029d64:	2d00      	cmp	r5, #0
 8029d66:	d140      	bne.n	8029dea <__ieee754_expf+0x156>
 8029d68:	2180      	movs	r1, #128	@ 0x80
 8029d6a:	1c30      	adds	r0, r6, #0
 8029d6c:	05c9      	lsls	r1, r1, #23
 8029d6e:	f7d7 fac1 	bl	80012f4 <__aeabi_fsub>
 8029d72:	1c01      	adds	r1, r0, #0
 8029d74:	9801      	ldr	r0, [sp, #4]
 8029d76:	f7d6 ff95 	bl	8000ca4 <__aeabi_fdiv>
 8029d7a:	1c21      	adds	r1, r4, #0
 8029d7c:	f7d7 faba 	bl	80012f4 <__aeabi_fsub>
 8029d80:	1c01      	adds	r1, r0, #0
 8029d82:	20fe      	movs	r0, #254	@ 0xfe
 8029d84:	0580      	lsls	r0, r0, #22
 8029d86:	f7d7 fab5 	bl	80012f4 <__aeabi_fsub>
 8029d8a:	e79e      	b.n	8029cca <__ieee754_expf+0x36>
 8029d8c:	4934      	ldr	r1, [pc, #208]	@ (8029e60 <__ieee754_expf+0x1cc>)
 8029d8e:	1c20      	adds	r0, r4, #0
 8029d90:	f7d7 f956 	bl	8001040 <__aeabi_fmul>
 8029d94:	4b33      	ldr	r3, [pc, #204]	@ (8029e64 <__ieee754_expf+0x1d0>)
 8029d96:	5959      	ldr	r1, [r3, r5]
 8029d98:	f7d6 fd92 	bl	80008c0 <__aeabi_fadd>
 8029d9c:	f7d7 fd24 	bl	80017e8 <__aeabi_f2iz>
 8029da0:	0005      	movs	r5, r0
 8029da2:	f7d7 fd41 	bl	8001828 <__aeabi_i2f>
 8029da6:	4930      	ldr	r1, [pc, #192]	@ (8029e68 <__ieee754_expf+0x1d4>)
 8029da8:	1c06      	adds	r6, r0, #0
 8029daa:	f7d7 f949 	bl	8001040 <__aeabi_fmul>
 8029dae:	1c01      	adds	r1, r0, #0
 8029db0:	1c20      	adds	r0, r4, #0
 8029db2:	f7d7 fa9f 	bl	80012f4 <__aeabi_fsub>
 8029db6:	492d      	ldr	r1, [pc, #180]	@ (8029e6c <__ieee754_expf+0x1d8>)
 8029db8:	1c07      	adds	r7, r0, #0
 8029dba:	1c30      	adds	r0, r6, #0
 8029dbc:	f7d7 f940 	bl	8001040 <__aeabi_fmul>
 8029dc0:	9000      	str	r0, [sp, #0]
 8029dc2:	e7a0      	b.n	8029d06 <__ieee754_expf+0x72>
 8029dc4:	22d0      	movs	r2, #208	@ 0xd0
 8029dc6:	0592      	lsls	r2, r2, #22
 8029dc8:	4293      	cmp	r3, r2
 8029dca:	d20c      	bcs.n	8029de6 <__ieee754_expf+0x152>
 8029dcc:	4928      	ldr	r1, [pc, #160]	@ (8029e70 <__ieee754_expf+0x1dc>)
 8029dce:	1c20      	adds	r0, r4, #0
 8029dd0:	f7d6 fd76 	bl	80008c0 <__aeabi_fadd>
 8029dd4:	21fe      	movs	r1, #254	@ 0xfe
 8029dd6:	0589      	lsls	r1, r1, #22
 8029dd8:	f7d6 fbbe 	bl	8000558 <__aeabi_fcmpgt>
 8029ddc:	1e05      	subs	r5, r0, #0
 8029dde:	d097      	beq.n	8029d10 <__ieee754_expf+0x7c>
 8029de0:	21fe      	movs	r1, #254	@ 0xfe
 8029de2:	0589      	lsls	r1, r1, #22
 8029de4:	e75f      	b.n	8029ca6 <__ieee754_expf+0x12>
 8029de6:	2500      	movs	r5, #0
 8029de8:	e792      	b.n	8029d10 <__ieee754_expf+0x7c>
 8029dea:	2080      	movs	r0, #128	@ 0x80
 8029dec:	1c31      	adds	r1, r6, #0
 8029dee:	05c0      	lsls	r0, r0, #23
 8029df0:	f7d7 fa80 	bl	80012f4 <__aeabi_fsub>
 8029df4:	1c01      	adds	r1, r0, #0
 8029df6:	9801      	ldr	r0, [sp, #4]
 8029df8:	f7d6 ff54 	bl	8000ca4 <__aeabi_fdiv>
 8029dfc:	1c01      	adds	r1, r0, #0
 8029dfe:	9800      	ldr	r0, [sp, #0]
 8029e00:	f7d7 fa78 	bl	80012f4 <__aeabi_fsub>
 8029e04:	1c39      	adds	r1, r7, #0
 8029e06:	f7d7 fa75 	bl	80012f4 <__aeabi_fsub>
 8029e0a:	1c01      	adds	r1, r0, #0
 8029e0c:	20fe      	movs	r0, #254	@ 0xfe
 8029e0e:	0580      	lsls	r0, r0, #22
 8029e10:	f7d7 fa70 	bl	80012f4 <__aeabi_fsub>
 8029e14:	002b      	movs	r3, r5
 8029e16:	337d      	adds	r3, #125	@ 0x7d
 8029e18:	db02      	blt.n	8029e20 <__ieee754_expf+0x18c>
 8029e1a:	05ec      	lsls	r4, r5, #23
 8029e1c:	1824      	adds	r4, r4, r0
 8029e1e:	e74c      	b.n	8029cba <__ieee754_expf+0x26>
 8029e20:	21d8      	movs	r1, #216	@ 0xd8
 8029e22:	3564      	adds	r5, #100	@ 0x64
 8029e24:	05ed      	lsls	r5, r5, #23
 8029e26:	1828      	adds	r0, r5, r0
 8029e28:	0509      	lsls	r1, r1, #20
 8029e2a:	f7d7 f909 	bl	8001040 <__aeabi_fmul>
 8029e2e:	e74c      	b.n	8029cca <__ieee754_expf+0x36>
 8029e30:	2400      	movs	r4, #0
 8029e32:	e742      	b.n	8029cba <__ieee754_expf+0x26>
 8029e34:	42b17217 	.word	0x42b17217
 8029e38:	42cff1b5 	.word	0x42cff1b5
 8029e3c:	3eb17218 	.word	0x3eb17218
 8029e40:	3f851591 	.word	0x3f851591
 8029e44:	0802eb90 	.word	0x0802eb90
 8029e48:	0802eb88 	.word	0x0802eb88
 8029e4c:	3331bb4c 	.word	0x3331bb4c
 8029e50:	35ddea0e 	.word	0x35ddea0e
 8029e54:	388ab355 	.word	0x388ab355
 8029e58:	3b360b61 	.word	0x3b360b61
 8029e5c:	3e2aaaab 	.word	0x3e2aaaab
 8029e60:	3fb8aa3b 	.word	0x3fb8aa3b
 8029e64:	0802eb98 	.word	0x0802eb98
 8029e68:	3f317180 	.word	0x3f317180
 8029e6c:	3717f7d1 	.word	0x3717f7d1
 8029e70:	7149f2ca 	.word	0x7149f2ca

08029e74 <scalbn>:
 8029e74:	004b      	lsls	r3, r1, #1
 8029e76:	b570      	push	{r4, r5, r6, lr}
 8029e78:	0d5b      	lsrs	r3, r3, #21
 8029e7a:	0014      	movs	r4, r2
 8029e7c:	000d      	movs	r5, r1
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	d10f      	bne.n	8029ea2 <scalbn+0x2e>
 8029e82:	004b      	lsls	r3, r1, #1
 8029e84:	085b      	lsrs	r3, r3, #1
 8029e86:	4303      	orrs	r3, r0
 8029e88:	d012      	beq.n	8029eb0 <scalbn+0x3c>
 8029e8a:	4b23      	ldr	r3, [pc, #140]	@ (8029f18 <scalbn+0xa4>)
 8029e8c:	2200      	movs	r2, #0
 8029e8e:	f7d8 fd61 	bl	8002954 <__aeabi_dmul>
 8029e92:	4b22      	ldr	r3, [pc, #136]	@ (8029f1c <scalbn+0xa8>)
 8029e94:	429c      	cmp	r4, r3
 8029e96:	da0c      	bge.n	8029eb2 <scalbn+0x3e>
 8029e98:	4a21      	ldr	r2, [pc, #132]	@ (8029f20 <scalbn+0xac>)
 8029e9a:	4b22      	ldr	r3, [pc, #136]	@ (8029f24 <scalbn+0xb0>)
 8029e9c:	f7d8 fd5a 	bl	8002954 <__aeabi_dmul>
 8029ea0:	e006      	b.n	8029eb0 <scalbn+0x3c>
 8029ea2:	4a21      	ldr	r2, [pc, #132]	@ (8029f28 <scalbn+0xb4>)
 8029ea4:	4293      	cmp	r3, r2
 8029ea6:	d108      	bne.n	8029eba <scalbn+0x46>
 8029ea8:	0002      	movs	r2, r0
 8029eaa:	000b      	movs	r3, r1
 8029eac:	f7d7 fd52 	bl	8001954 <__aeabi_dadd>
 8029eb0:	bd70      	pop	{r4, r5, r6, pc}
 8029eb2:	000d      	movs	r5, r1
 8029eb4:	004b      	lsls	r3, r1, #1
 8029eb6:	0d5b      	lsrs	r3, r3, #21
 8029eb8:	3b36      	subs	r3, #54	@ 0x36
 8029eba:	4a1c      	ldr	r2, [pc, #112]	@ (8029f2c <scalbn+0xb8>)
 8029ebc:	4294      	cmp	r4, r2
 8029ebe:	dd0a      	ble.n	8029ed6 <scalbn+0x62>
 8029ec0:	4c1b      	ldr	r4, [pc, #108]	@ (8029f30 <scalbn+0xbc>)
 8029ec2:	4d1c      	ldr	r5, [pc, #112]	@ (8029f34 <scalbn+0xc0>)
 8029ec4:	2900      	cmp	r1, #0
 8029ec6:	da01      	bge.n	8029ecc <scalbn+0x58>
 8029ec8:	4c19      	ldr	r4, [pc, #100]	@ (8029f30 <scalbn+0xbc>)
 8029eca:	4d1b      	ldr	r5, [pc, #108]	@ (8029f38 <scalbn+0xc4>)
 8029ecc:	4a18      	ldr	r2, [pc, #96]	@ (8029f30 <scalbn+0xbc>)
 8029ece:	4b19      	ldr	r3, [pc, #100]	@ (8029f34 <scalbn+0xc0>)
 8029ed0:	0020      	movs	r0, r4
 8029ed2:	0029      	movs	r1, r5
 8029ed4:	e7e2      	b.n	8029e9c <scalbn+0x28>
 8029ed6:	18e2      	adds	r2, r4, r3
 8029ed8:	4b18      	ldr	r3, [pc, #96]	@ (8029f3c <scalbn+0xc8>)
 8029eda:	429a      	cmp	r2, r3
 8029edc:	dcf0      	bgt.n	8029ec0 <scalbn+0x4c>
 8029ede:	2a00      	cmp	r2, #0
 8029ee0:	dd05      	ble.n	8029eee <scalbn+0x7a>
 8029ee2:	4b17      	ldr	r3, [pc, #92]	@ (8029f40 <scalbn+0xcc>)
 8029ee4:	0512      	lsls	r2, r2, #20
 8029ee6:	402b      	ands	r3, r5
 8029ee8:	4313      	orrs	r3, r2
 8029eea:	0019      	movs	r1, r3
 8029eec:	e7e0      	b.n	8029eb0 <scalbn+0x3c>
 8029eee:	0013      	movs	r3, r2
 8029ef0:	3335      	adds	r3, #53	@ 0x35
 8029ef2:	da08      	bge.n	8029f06 <scalbn+0x92>
 8029ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8029f20 <scalbn+0xac>)
 8029ef6:	4d0b      	ldr	r5, [pc, #44]	@ (8029f24 <scalbn+0xb0>)
 8029ef8:	2900      	cmp	r1, #0
 8029efa:	da01      	bge.n	8029f00 <scalbn+0x8c>
 8029efc:	4c08      	ldr	r4, [pc, #32]	@ (8029f20 <scalbn+0xac>)
 8029efe:	4d11      	ldr	r5, [pc, #68]	@ (8029f44 <scalbn+0xd0>)
 8029f00:	4a07      	ldr	r2, [pc, #28]	@ (8029f20 <scalbn+0xac>)
 8029f02:	4b08      	ldr	r3, [pc, #32]	@ (8029f24 <scalbn+0xb0>)
 8029f04:	e7e4      	b.n	8029ed0 <scalbn+0x5c>
 8029f06:	4b0e      	ldr	r3, [pc, #56]	@ (8029f40 <scalbn+0xcc>)
 8029f08:	3236      	adds	r2, #54	@ 0x36
 8029f0a:	401d      	ands	r5, r3
 8029f0c:	0512      	lsls	r2, r2, #20
 8029f0e:	432a      	orrs	r2, r5
 8029f10:	0011      	movs	r1, r2
 8029f12:	4b0d      	ldr	r3, [pc, #52]	@ (8029f48 <scalbn+0xd4>)
 8029f14:	2200      	movs	r2, #0
 8029f16:	e7c1      	b.n	8029e9c <scalbn+0x28>
 8029f18:	43500000 	.word	0x43500000
 8029f1c:	ffff3cb0 	.word	0xffff3cb0
 8029f20:	c2f8f359 	.word	0xc2f8f359
 8029f24:	01a56e1f 	.word	0x01a56e1f
 8029f28:	000007ff 	.word	0x000007ff
 8029f2c:	0000c350 	.word	0x0000c350
 8029f30:	8800759c 	.word	0x8800759c
 8029f34:	7e37e43c 	.word	0x7e37e43c
 8029f38:	fe37e43c 	.word	0xfe37e43c
 8029f3c:	000007fe 	.word	0x000007fe
 8029f40:	800fffff 	.word	0x800fffff
 8029f44:	81a56e1f 	.word	0x81a56e1f
 8029f48:	3c900000 	.word	0x3c900000

08029f4c <with_errno>:
 8029f4c:	b570      	push	{r4, r5, r6, lr}
 8029f4e:	000d      	movs	r5, r1
 8029f50:	0016      	movs	r6, r2
 8029f52:	0004      	movs	r4, r0
 8029f54:	f7fc f952 	bl	80261fc <__errno>
 8029f58:	0029      	movs	r1, r5
 8029f5a:	6006      	str	r6, [r0, #0]
 8029f5c:	0020      	movs	r0, r4
 8029f5e:	bd70      	pop	{r4, r5, r6, pc}

08029f60 <xflow>:
 8029f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029f62:	0014      	movs	r4, r2
 8029f64:	001d      	movs	r5, r3
 8029f66:	2800      	cmp	r0, #0
 8029f68:	d002      	beq.n	8029f70 <xflow+0x10>
 8029f6a:	2180      	movs	r1, #128	@ 0x80
 8029f6c:	0609      	lsls	r1, r1, #24
 8029f6e:	185b      	adds	r3, r3, r1
 8029f70:	9200      	str	r2, [sp, #0]
 8029f72:	9301      	str	r3, [sp, #4]
 8029f74:	9a00      	ldr	r2, [sp, #0]
 8029f76:	9b01      	ldr	r3, [sp, #4]
 8029f78:	0020      	movs	r0, r4
 8029f7a:	0029      	movs	r1, r5
 8029f7c:	f7d8 fcea 	bl	8002954 <__aeabi_dmul>
 8029f80:	2222      	movs	r2, #34	@ 0x22
 8029f82:	f7ff ffe3 	bl	8029f4c <with_errno>
 8029f86:	b003      	add	sp, #12
 8029f88:	bd30      	pop	{r4, r5, pc}

08029f8a <__math_uflow>:
 8029f8a:	2380      	movs	r3, #128	@ 0x80
 8029f8c:	b510      	push	{r4, lr}
 8029f8e:	2200      	movs	r2, #0
 8029f90:	055b      	lsls	r3, r3, #21
 8029f92:	f7ff ffe5 	bl	8029f60 <xflow>
 8029f96:	bd10      	pop	{r4, pc}

08029f98 <__math_oflow>:
 8029f98:	23e0      	movs	r3, #224	@ 0xe0
 8029f9a:	b510      	push	{r4, lr}
 8029f9c:	2200      	movs	r2, #0
 8029f9e:	05db      	lsls	r3, r3, #23
 8029fa0:	f7ff ffde 	bl	8029f60 <xflow>
 8029fa4:	bd10      	pop	{r4, pc}

08029fa6 <with_errnof>:
 8029fa6:	b570      	push	{r4, r5, r6, lr}
 8029fa8:	000d      	movs	r5, r1
 8029faa:	1c04      	adds	r4, r0, #0
 8029fac:	f7fc f926 	bl	80261fc <__errno>
 8029fb0:	6005      	str	r5, [r0, #0]
 8029fb2:	1c20      	adds	r0, r4, #0
 8029fb4:	bd70      	pop	{r4, r5, r6, pc}

08029fb6 <xflowf>:
 8029fb6:	b510      	push	{r4, lr}
 8029fb8:	1c0b      	adds	r3, r1, #0
 8029fba:	2800      	cmp	r0, #0
 8029fbc:	d002      	beq.n	8029fc4 <xflowf+0xe>
 8029fbe:	2380      	movs	r3, #128	@ 0x80
 8029fc0:	061b      	lsls	r3, r3, #24
 8029fc2:	18cb      	adds	r3, r1, r3
 8029fc4:	1c18      	adds	r0, r3, #0
 8029fc6:	f7d7 f83b 	bl	8001040 <__aeabi_fmul>
 8029fca:	2122      	movs	r1, #34	@ 0x22
 8029fcc:	f7ff ffeb 	bl	8029fa6 <with_errnof>
 8029fd0:	bd10      	pop	{r4, pc}

08029fd2 <__math_uflowf>:
 8029fd2:	2180      	movs	r1, #128	@ 0x80
 8029fd4:	b510      	push	{r4, lr}
 8029fd6:	0549      	lsls	r1, r1, #21
 8029fd8:	f7ff ffed 	bl	8029fb6 <xflowf>
 8029fdc:	bd10      	pop	{r4, pc}

08029fde <__math_oflowf>:
 8029fde:	21e0      	movs	r1, #224	@ 0xe0
 8029fe0:	b510      	push	{r4, lr}
 8029fe2:	05c9      	lsls	r1, r1, #23
 8029fe4:	f7ff ffe7 	bl	8029fb6 <xflowf>
 8029fe8:	bd10      	pop	{r4, pc}
	...

08029fec <__ieee754_sqrt>:
 8029fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fee:	000a      	movs	r2, r1
 8029ff0:	000d      	movs	r5, r1
 8029ff2:	496b      	ldr	r1, [pc, #428]	@ (802a1a0 <__ieee754_sqrt+0x1b4>)
 8029ff4:	0004      	movs	r4, r0
 8029ff6:	0003      	movs	r3, r0
 8029ff8:	0008      	movs	r0, r1
 8029ffa:	b087      	sub	sp, #28
 8029ffc:	4028      	ands	r0, r5
 8029ffe:	4288      	cmp	r0, r1
 802a000:	d111      	bne.n	802a026 <__ieee754_sqrt+0x3a>
 802a002:	0022      	movs	r2, r4
 802a004:	002b      	movs	r3, r5
 802a006:	0020      	movs	r0, r4
 802a008:	0029      	movs	r1, r5
 802a00a:	f7d8 fca3 	bl	8002954 <__aeabi_dmul>
 802a00e:	0002      	movs	r2, r0
 802a010:	000b      	movs	r3, r1
 802a012:	0020      	movs	r0, r4
 802a014:	0029      	movs	r1, r5
 802a016:	f7d7 fc9d 	bl	8001954 <__aeabi_dadd>
 802a01a:	0004      	movs	r4, r0
 802a01c:	000d      	movs	r5, r1
 802a01e:	0020      	movs	r0, r4
 802a020:	0029      	movs	r1, r5
 802a022:	b007      	add	sp, #28
 802a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a026:	2d00      	cmp	r5, #0
 802a028:	dc11      	bgt.n	802a04e <__ieee754_sqrt+0x62>
 802a02a:	0069      	lsls	r1, r5, #1
 802a02c:	0849      	lsrs	r1, r1, #1
 802a02e:	4321      	orrs	r1, r4
 802a030:	d0f5      	beq.n	802a01e <__ieee754_sqrt+0x32>
 802a032:	2000      	movs	r0, #0
 802a034:	4285      	cmp	r5, r0
 802a036:	d010      	beq.n	802a05a <__ieee754_sqrt+0x6e>
 802a038:	0022      	movs	r2, r4
 802a03a:	002b      	movs	r3, r5
 802a03c:	0020      	movs	r0, r4
 802a03e:	0029      	movs	r1, r5
 802a040:	f7d8 ff6e 	bl	8002f20 <__aeabi_dsub>
 802a044:	0002      	movs	r2, r0
 802a046:	000b      	movs	r3, r1
 802a048:	f7d8 f84a 	bl	80020e0 <__aeabi_ddiv>
 802a04c:	e7e5      	b.n	802a01a <__ieee754_sqrt+0x2e>
 802a04e:	1528      	asrs	r0, r5, #20
 802a050:	d115      	bne.n	802a07e <__ieee754_sqrt+0x92>
 802a052:	2480      	movs	r4, #128	@ 0x80
 802a054:	2100      	movs	r1, #0
 802a056:	0364      	lsls	r4, r4, #13
 802a058:	e007      	b.n	802a06a <__ieee754_sqrt+0x7e>
 802a05a:	0ada      	lsrs	r2, r3, #11
 802a05c:	3815      	subs	r0, #21
 802a05e:	055b      	lsls	r3, r3, #21
 802a060:	2a00      	cmp	r2, #0
 802a062:	d0fa      	beq.n	802a05a <__ieee754_sqrt+0x6e>
 802a064:	e7f5      	b.n	802a052 <__ieee754_sqrt+0x66>
 802a066:	0052      	lsls	r2, r2, #1
 802a068:	3101      	adds	r1, #1
 802a06a:	4222      	tst	r2, r4
 802a06c:	d0fb      	beq.n	802a066 <__ieee754_sqrt+0x7a>
 802a06e:	1e4c      	subs	r4, r1, #1
 802a070:	1b00      	subs	r0, r0, r4
 802a072:	2420      	movs	r4, #32
 802a074:	001d      	movs	r5, r3
 802a076:	1a64      	subs	r4, r4, r1
 802a078:	40e5      	lsrs	r5, r4
 802a07a:	408b      	lsls	r3, r1
 802a07c:	432a      	orrs	r2, r5
 802a07e:	4949      	ldr	r1, [pc, #292]	@ (802a1a4 <__ieee754_sqrt+0x1b8>)
 802a080:	0312      	lsls	r2, r2, #12
 802a082:	1844      	adds	r4, r0, r1
 802a084:	2180      	movs	r1, #128	@ 0x80
 802a086:	0b12      	lsrs	r2, r2, #12
 802a088:	0349      	lsls	r1, r1, #13
 802a08a:	4311      	orrs	r1, r2
 802a08c:	07c0      	lsls	r0, r0, #31
 802a08e:	d403      	bmi.n	802a098 <__ieee754_sqrt+0xac>
 802a090:	0fda      	lsrs	r2, r3, #31
 802a092:	0049      	lsls	r1, r1, #1
 802a094:	1851      	adds	r1, r2, r1
 802a096:	005b      	lsls	r3, r3, #1
 802a098:	2500      	movs	r5, #0
 802a09a:	1062      	asrs	r2, r4, #1
 802a09c:	0049      	lsls	r1, r1, #1
 802a09e:	2480      	movs	r4, #128	@ 0x80
 802a0a0:	9205      	str	r2, [sp, #20]
 802a0a2:	0fda      	lsrs	r2, r3, #31
 802a0a4:	1852      	adds	r2, r2, r1
 802a0a6:	2016      	movs	r0, #22
 802a0a8:	0029      	movs	r1, r5
 802a0aa:	005b      	lsls	r3, r3, #1
 802a0ac:	03a4      	lsls	r4, r4, #14
 802a0ae:	190e      	adds	r6, r1, r4
 802a0b0:	4296      	cmp	r6, r2
 802a0b2:	dc02      	bgt.n	802a0ba <__ieee754_sqrt+0xce>
 802a0b4:	1931      	adds	r1, r6, r4
 802a0b6:	1b92      	subs	r2, r2, r6
 802a0b8:	192d      	adds	r5, r5, r4
 802a0ba:	0fde      	lsrs	r6, r3, #31
 802a0bc:	0052      	lsls	r2, r2, #1
 802a0be:	3801      	subs	r0, #1
 802a0c0:	1992      	adds	r2, r2, r6
 802a0c2:	005b      	lsls	r3, r3, #1
 802a0c4:	0864      	lsrs	r4, r4, #1
 802a0c6:	2800      	cmp	r0, #0
 802a0c8:	d1f1      	bne.n	802a0ae <__ieee754_sqrt+0xc2>
 802a0ca:	2620      	movs	r6, #32
 802a0cc:	2780      	movs	r7, #128	@ 0x80
 802a0ce:	0004      	movs	r4, r0
 802a0d0:	9604      	str	r6, [sp, #16]
 802a0d2:	063f      	lsls	r7, r7, #24
 802a0d4:	183e      	adds	r6, r7, r0
 802a0d6:	46b4      	mov	ip, r6
 802a0d8:	428a      	cmp	r2, r1
 802a0da:	dc02      	bgt.n	802a0e2 <__ieee754_sqrt+0xf6>
 802a0dc:	d114      	bne.n	802a108 <__ieee754_sqrt+0x11c>
 802a0de:	429e      	cmp	r6, r3
 802a0e0:	d812      	bhi.n	802a108 <__ieee754_sqrt+0x11c>
 802a0e2:	4660      	mov	r0, ip
 802a0e4:	4666      	mov	r6, ip
 802a0e6:	19c0      	adds	r0, r0, r7
 802a0e8:	9100      	str	r1, [sp, #0]
 802a0ea:	2e00      	cmp	r6, #0
 802a0ec:	da03      	bge.n	802a0f6 <__ieee754_sqrt+0x10a>
 802a0ee:	43c6      	mvns	r6, r0
 802a0f0:	0ff6      	lsrs	r6, r6, #31
 802a0f2:	198e      	adds	r6, r1, r6
 802a0f4:	9600      	str	r6, [sp, #0]
 802a0f6:	1a52      	subs	r2, r2, r1
 802a0f8:	4563      	cmp	r3, ip
 802a0fa:	4189      	sbcs	r1, r1
 802a0fc:	4249      	negs	r1, r1
 802a0fe:	1a52      	subs	r2, r2, r1
 802a100:	4661      	mov	r1, ip
 802a102:	1a5b      	subs	r3, r3, r1
 802a104:	9900      	ldr	r1, [sp, #0]
 802a106:	19e4      	adds	r4, r4, r7
 802a108:	0fde      	lsrs	r6, r3, #31
 802a10a:	0052      	lsls	r2, r2, #1
 802a10c:	1992      	adds	r2, r2, r6
 802a10e:	9e04      	ldr	r6, [sp, #16]
 802a110:	005b      	lsls	r3, r3, #1
 802a112:	3e01      	subs	r6, #1
 802a114:	087f      	lsrs	r7, r7, #1
 802a116:	9604      	str	r6, [sp, #16]
 802a118:	2e00      	cmp	r6, #0
 802a11a:	d1db      	bne.n	802a0d4 <__ieee754_sqrt+0xe8>
 802a11c:	431a      	orrs	r2, r3
 802a11e:	d01f      	beq.n	802a160 <__ieee754_sqrt+0x174>
 802a120:	4e21      	ldr	r6, [pc, #132]	@ (802a1a8 <__ieee754_sqrt+0x1bc>)
 802a122:	4f22      	ldr	r7, [pc, #136]	@ (802a1ac <__ieee754_sqrt+0x1c0>)
 802a124:	6830      	ldr	r0, [r6, #0]
 802a126:	6871      	ldr	r1, [r6, #4]
 802a128:	683a      	ldr	r2, [r7, #0]
 802a12a:	687b      	ldr	r3, [r7, #4]
 802a12c:	9200      	str	r2, [sp, #0]
 802a12e:	9301      	str	r3, [sp, #4]
 802a130:	6832      	ldr	r2, [r6, #0]
 802a132:	6873      	ldr	r3, [r6, #4]
 802a134:	9202      	str	r2, [sp, #8]
 802a136:	9303      	str	r3, [sp, #12]
 802a138:	9a00      	ldr	r2, [sp, #0]
 802a13a:	9b01      	ldr	r3, [sp, #4]
 802a13c:	f7d8 fef0 	bl	8002f20 <__aeabi_dsub>
 802a140:	0002      	movs	r2, r0
 802a142:	000b      	movs	r3, r1
 802a144:	9802      	ldr	r0, [sp, #8]
 802a146:	9903      	ldr	r1, [sp, #12]
 802a148:	f7d6 f9c2 	bl	80004d0 <__aeabi_dcmple>
 802a14c:	2800      	cmp	r0, #0
 802a14e:	d007      	beq.n	802a160 <__ieee754_sqrt+0x174>
 802a150:	6830      	ldr	r0, [r6, #0]
 802a152:	6871      	ldr	r1, [r6, #4]
 802a154:	683a      	ldr	r2, [r7, #0]
 802a156:	687b      	ldr	r3, [r7, #4]
 802a158:	1c67      	adds	r7, r4, #1
 802a15a:	d10c      	bne.n	802a176 <__ieee754_sqrt+0x18a>
 802a15c:	9c04      	ldr	r4, [sp, #16]
 802a15e:	3501      	adds	r5, #1
 802a160:	4a13      	ldr	r2, [pc, #76]	@ (802a1b0 <__ieee754_sqrt+0x1c4>)
 802a162:	106b      	asrs	r3, r5, #1
 802a164:	189b      	adds	r3, r3, r2
 802a166:	9a05      	ldr	r2, [sp, #20]
 802a168:	07ed      	lsls	r5, r5, #31
 802a16a:	0864      	lsrs	r4, r4, #1
 802a16c:	0512      	lsls	r2, r2, #20
 802a16e:	4325      	orrs	r5, r4
 802a170:	0028      	movs	r0, r5
 802a172:	18d1      	adds	r1, r2, r3
 802a174:	e751      	b.n	802a01a <__ieee754_sqrt+0x2e>
 802a176:	f7d7 fbed 	bl	8001954 <__aeabi_dadd>
 802a17a:	6877      	ldr	r7, [r6, #4]
 802a17c:	6836      	ldr	r6, [r6, #0]
 802a17e:	0002      	movs	r2, r0
 802a180:	000b      	movs	r3, r1
 802a182:	0030      	movs	r0, r6
 802a184:	0039      	movs	r1, r7
 802a186:	f7d6 f999 	bl	80004bc <__aeabi_dcmplt>
 802a18a:	2800      	cmp	r0, #0
 802a18c:	d004      	beq.n	802a198 <__ieee754_sqrt+0x1ac>
 802a18e:	3402      	adds	r4, #2
 802a190:	4263      	negs	r3, r4
 802a192:	4163      	adcs	r3, r4
 802a194:	18ed      	adds	r5, r5, r3
 802a196:	e7e3      	b.n	802a160 <__ieee754_sqrt+0x174>
 802a198:	2301      	movs	r3, #1
 802a19a:	3401      	adds	r4, #1
 802a19c:	439c      	bics	r4, r3
 802a19e:	e7df      	b.n	802a160 <__ieee754_sqrt+0x174>
 802a1a0:	7ff00000 	.word	0x7ff00000
 802a1a4:	fffffc01 	.word	0xfffffc01
 802a1a8:	0802eba8 	.word	0x0802eba8
 802a1ac:	0802eba0 	.word	0x0802eba0
 802a1b0:	3fe00000 	.word	0x3fe00000

0802a1b4 <_init>:
 802a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1b6:	46c0      	nop			@ (mov r8, r8)
 802a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a1ba:	bc08      	pop	{r3}
 802a1bc:	469e      	mov	lr, r3
 802a1be:	4770      	bx	lr

0802a1c0 <_fini>:
 802a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1c2:	46c0      	nop			@ (mov r8, r8)
 802a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a1c6:	bc08      	pop	{r3}
 802a1c8:	469e      	mov	lr, r3
 802a1ca:	4770      	bx	lr
