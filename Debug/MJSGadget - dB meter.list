
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000297d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d80  08029898  08029898  0002a898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e618  0802e618  00030430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e618  0802e618  0002f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e620  0802e620  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e620  0802e620  0002f620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e624  0802e624  0002f624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  0802e628  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031e4  20000430  0802ea58  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003614  0802ea58  00030614  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   000369ee  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d22  00000000  00000000  00066e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d90  00000000  00000000  00070b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021ef  00000000  00000000  000738f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242dc  00000000  00000000  00075ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004636d  00000000  00000000  00099dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a30bc  00000000  00000000  000e0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001831ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb64  00000000  00000000  001832a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018ee04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018ee71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001913ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000430 	.word	0x20000430
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802987c 	.word	0x0802987c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000434 	.word	0x20000434
 8000104:	0802987c 	.word	0x0802987c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802d714 	.word	0x0802d714
 8000ec8:	0802d754 	.word	0x0802d754
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802d790 	.word	0x0802d790
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	2000045c 	.word	0x2000045c
 8003ad8:	2000048c 	.word	0x2000048c

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000458 	.word	0x20000458
 8003b38:	2000048c 	.word	0x2000048c

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000454 	.word	0x20000454

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 f85c 	bl	8013c14 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000450 	.word	0x20000450

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000458 	.word	0x20000458
 8003b98:	2000045c 	.word	0x2000045c

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 f833 	bl	8013c28 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f faab 	bl	8013194 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000044c 	.word	0x2000044c
 8003c80:	08029898 	.word	0x08029898
 8003c84:	080298a4 	.word	0x080298a4
 8003c88:	080298a8 	.word	0x080298a8
 8003c8c:	080298b4 	.word	0x080298b4
 8003c90:	080298d4 	.word	0x080298d4
 8003c94:	2000048c 	.word	0x2000048c

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f00f ffb8 	bl	8013c28 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f00f ffa4 	bl	8013c28 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f fa37 	bl	8013194 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f00f ff7e 	bl	8013c28 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000494 	.word	0x20000494
 8003d40:	20000495 	.word	0x20000495
 8003d44:	2000044c 	.word	0x2000044c
 8003d48:	080298d8 	.word	0x080298d8
 8003d4c:	080298a4 	.word	0x080298a4
 8003d50:	080298dc 	.word	0x080298dc
 8003d54:	080298d4 	.word	0x080298d4

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f00f ff60 	bl	8013c28 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f00f ff54 	bl	8013c28 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f f9d9 	bl	8013194 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f00f ff20 	bl	8013c28 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	2000048c 	.word	0x2000048c
 8003e00:	2000044c 	.word	0x2000044c
 8003e04:	08029908 	.word	0x08029908
 8003e08:	080298d4 	.word	0x080298d4

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f00f feed 	bl	8013c28 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	2000048c 	.word	0x2000048c

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f f966 	bl	8013194 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f f927 	bl	8013194 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	2000048c 	.word	0x2000048c
 8003f58:	08029924 	.word	0x08029924
 8003f5c:	08029944 	.word	0x08029944
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	08029948 	.word	0x08029948
 8003f68:	080298d4 	.word	0x080298d4

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f f900 	bl	8013194 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000044c 	.word	0x2000044c
 8003fa4:	0802997c 	.word	0x0802997c
 8003fa8:	080298d4 	.word	0x080298d4

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f f8e0 	bl	8013194 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f00f fe23 	bl	8013c28 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f00f fe12 	bl	8013c28 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	2000044c 	.word	0x2000044c
 8004094:	08029990 	.word	0x08029990
 8004098:	080298d4 	.word	0x080298d4
 800409c:	20000484 	.word	0x20000484
 80040a0:	2000048c 	.word	0x2000048c

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f f864 	bl	8013194 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f00f fda7 	bl	8013c28 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 f8e7 	bl	8028308 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 f8c3 	bl	8028308 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 f89f 	bl	8028308 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 f87b 	bl	8028308 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 f851 	bl	8028308 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 f82d 	bl	8028308 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 f809 	bl	8028308 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f023 ffe5 	bl	8028308 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	2000044c 	.word	0x2000044c
 8004378:	080299ac 	.word	0x080299ac
 800437c:	080298d4 	.word	0x080298d4
 8004380:	20000460 	.word	0x20000460

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc8      	ldr	r3, [pc, #800]	@ (8004780 <ENS_Upkeep+0x328>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00e fe40 	bl	80130e8 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc3      	ldr	r3, [pc, #780]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e21c      	b.n	80048b6 <ENS_Upkeep+0x45e>
  }
  switch(ENSState) {
 800447c:	4bc1      	ldr	r3, [pc, #772]	@ (8004784 <ENS_Upkeep+0x32c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e200      	b.n	8004888 <ENS_Upkeep+0x430>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbf      	ldr	r3, [pc, #764]	@ (8004788 <ENS_Upkeep+0x330>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abe      	ldr	r2, [pc, #760]	@ (800478c <ENS_Upkeep+0x334>)
 8004492:	4bbf      	ldr	r3, [pc, #764]	@ (8004790 <ENS_Upkeep+0x338>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00e fe7c 	bl	8013194 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800449c:	f00f fbba 	bl	8013c14 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4abc      	ldr	r2, [pc, #752]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb6      	ldr	r3, [pc, #728]	@ (8004780 <ENS_Upkeep+0x328>)
 80044a8:	601a      	str	r2, [r3, #0]
    break;
 80044aa:	e202      	b.n	80048b2 <ENS_Upkeep+0x45a>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044ac:	f008 ff00 	bl	800d2b0 <getSensorLock>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d000      	beq.n	80044b6 <ENS_Upkeep+0x5e>
 80044b4:	e1f4      	b.n	80048a0 <ENS_Upkeep+0x448>
      break;
    }
    setSensorLock(ENS160);
 80044b6:	2004      	movs	r0, #4
 80044b8:	f008 fee6 	bl	800d288 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	2002      	movs	r0, #2
 80044c0:	f7ff fca4 	bl	8003e0c <ENS160_setMode>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <ENS_Upkeep+0x7c>
 80044d0:	4bb1      	ldr	r3, [pc, #708]	@ (8004798 <ENS_Upkeep+0x340>)
 80044d2:	e000      	b.n	80044d6 <ENS_Upkeep+0x7e>
 80044d4:	4bb1      	ldr	r3, [pc, #708]	@ (800479c <ENS_Upkeep+0x344>)
 80044d6:	4ab2      	ldr	r2, [pc, #712]	@ (80047a0 <ENS_Upkeep+0x348>)
 80044d8:	49ad      	ldr	r1, [pc, #692]	@ (8004790 <ENS_Upkeep+0x338>)
 80044da:	2003      	movs	r0, #3
 80044dc:	f00e fe5a 	bl	8013194 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044e0:	200a      	movs	r0, #10
 80044e2:	f00f fba1 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f008 fece 	bl	800d288 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80044ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2203      	movs	r2, #3
 80044f0:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80044f2:	f00f fb8f 	bl	8013c14 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	22fa      	movs	r2, #250	@ 0xfa
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	189a      	adds	r2, r3, r2
 80044fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <ENS_Upkeep+0x328>)
 8004500:	601a      	str	r2, [r3, #0]
    break;
 8004502:	e1d6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004504:	f008 fed4 	bl	800d2b0 <getSensorLock>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d000      	beq.n	800450e <ENS_Upkeep+0xb6>
 800450c:	e1ca      	b.n	80048a4 <ENS_Upkeep+0x44c>
      break;
    }
    setSensorLock(ENS160);
 800450e:	2004      	movs	r0, #4
 8004510:	f008 feba 	bl	800d288 <setSensorLock>
    status = ENS160_readStatus();
 8004514:	1d7c      	adds	r4, r7, #5
 8004516:	f7ff fd29 	bl	8003f6c <ENS160_readStatus>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 800451e:	200a      	movs	r0, #10
 8004520:	f00f fb82 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 8004524:	2000      	movs	r0, #0
 8004526:	f008 feaf 	bl	800d288 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800452a:	1d7b      	adds	r3, r7, #5
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	d02e      	beq.n	8004592 <ENS_Upkeep+0x13a>
      switch (status >> 2) {
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d013      	beq.n	8004568 <ENS_Upkeep+0x110>
 8004540:	dc19      	bgt.n	8004576 <ENS_Upkeep+0x11e>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <ENS_Upkeep+0xf4>
 8004546:	2b02      	cmp	r3, #2
 8004548:	d007      	beq.n	800455a <ENS_Upkeep+0x102>
 800454a:	e014      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 1:
        Debug("ENS160 Warm-Up phase");
 800454c:	4a95      	ldr	r2, [pc, #596]	@ (80047a4 <ENS_Upkeep+0x34c>)
 800454e:	4b90      	ldr	r3, [pc, #576]	@ (8004790 <ENS_Upkeep+0x338>)
 8004550:	0019      	movs	r1, r3
 8004552:	2003      	movs	r0, #3
 8004554:	f00e fe1e 	bl	8013194 <CreateLine>
        break;
 8004558:	e00d      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800455a:	4a93      	ldr	r2, [pc, #588]	@ (80047a8 <ENS_Upkeep+0x350>)
 800455c:	4b8c      	ldr	r3, [pc, #560]	@ (8004790 <ENS_Upkeep+0x338>)
 800455e:	0019      	movs	r1, r3
 8004560:	2003      	movs	r0, #3
 8004562:	f00e fe17 	bl	8013194 <CreateLine>
        break;
 8004566:	e006      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 3:
        Debug("ENS160 Invalid output");
 8004568:	4a90      	ldr	r2, [pc, #576]	@ (80047ac <ENS_Upkeep+0x354>)
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <ENS_Upkeep+0x338>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f00e fe10 	bl	8013194 <CreateLine>
        break;
 8004574:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004576:	1d7b      	adds	r3, r7, #5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	4013      	ands	r3, r2
 800457e:	d108      	bne.n	8004592 <ENS_Upkeep+0x13a>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004580:	f00f fb48 	bl	8013c14 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	22fa      	movs	r2, #250	@ 0xfa
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	189a      	adds	r2, r3, r2
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <ENS_Upkeep+0x328>)
 800458e:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004590:	e18f      	b.n	80048b2 <ENS_Upkeep+0x45a>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004594:	2204      	movs	r2, #4
 8004596:	701a      	strb	r2, [r3, #0]
    break;
 8004598:	e18b      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800459a:	f008 fe89 	bl	800d2b0 <getSensorLock>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d036      	beq.n	8004610 <ENS_Upkeep+0x1b8>
 80045a2:	f008 fe85 	bl	800d2b0 <getSensorLock>
 80045a6:	0003      	movs	r3, r0
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d031      	beq.n	8004610 <ENS_Upkeep+0x1b8>
      uint8_t locktype = getSensorLock();
 80045ac:	1dbc      	adds	r4, r7, #6
 80045ae:	f008 fe7f 	bl	800d2b0 <getSensorLock>
 80045b2:	0003      	movs	r3, r0
 80045b4:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <ENS_Upkeep+0x19a>
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d013      	beq.n	80045ee <ENS_Upkeep+0x196>
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d00d      	beq.n	80045ea <ENS_Upkeep+0x192>
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <ENS_Upkeep+0x18e>
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <ENS_Upkeep+0x18a>
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045e0:	e008      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045e4:	e006      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e6:	4b74      	ldr	r3, [pc, #464]	@ (80047b8 <ENS_Upkeep+0x360>)
 80045e8:	e004      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ea:	4b74      	ldr	r3, [pc, #464]	@ (80047bc <ENS_Upkeep+0x364>)
 80045ec:	e002      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ee:	4b74      	ldr	r3, [pc, #464]	@ (80047c0 <ENS_Upkeep+0x368>)
 80045f0:	e000      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <ENS_Upkeep+0x36c>)
 80045f4:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <ENS_Upkeep+0x370>)
 80045f6:	4966      	ldr	r1, [pc, #408]	@ (8004790 <ENS_Upkeep+0x338>)
 80045f8:	2003      	movs	r0, #3
 80045fa:	f00e fdcb 	bl	8013194 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80045fe:	f00f fb09 	bl	8013c14 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	334e      	adds	r3, #78	@ 0x4e
 8004606:	33ff      	adds	r3, #255	@ 0xff
 8004608:	001a      	movs	r2, r3
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <ENS_Upkeep+0x328>)
 800460c:	601a      	str	r2, [r3, #0]
      break;
 800460e:	e150      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    setSensorLock(ENS160);
 8004610:	2004      	movs	r0, #4
 8004612:	f008 fe39 	bl	800d288 <setSensorLock>
    status = ENS160_readStatus();
 8004616:	1d7c      	adds	r4, r7, #5
 8004618:	f7ff fca8 	bl	8003f6c <ENS160_readStatus>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d10e      	bne.n	8004648 <ENS_Upkeep+0x1f0>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800462a:	f00f faf3 	bl	8013c14 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	33f5      	adds	r3, #245	@ 0xf5
 8004632:	33ff      	adds	r3, #255	@ 0xff
 8004634:	001a      	movs	r2, r3
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <ENS_Upkeep+0x328>)
 8004638:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800463a:	200a      	movs	r0, #10
 800463c:	f00f faf4 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 8004640:	2000      	movs	r0, #0
 8004642:	f008 fe21 	bl	800d288 <setSensorLock>
      break;
 8004646:	e134      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    ENS160_measure(false);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff fcaf 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 800464e:	200a      	movs	r0, #10
 8004650:	f00f faea 	bl	8013c28 <HAL_Delay>
    ENS160_measureRaw(false);
 8004654:	2000      	movs	r0, #0
 8004656:	f7ff fd25 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f00f fae4 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 8004660:	2000      	movs	r0, #0
 8004662:	f008 fe11 	bl	800d288 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004668:	2206      	movs	r2, #6
 800466a:	701a      	strb	r2, [r3, #0]
    break;
 800466c:	e121      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <ENS_Upkeep+0x374>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d13b      	bne.n	80046ee <ENS_Upkeep+0x296>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	001c      	movs	r4, r3
 800467c:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <ENS_Upkeep+0x378>)
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	0018      	movs	r0, r3
 8004682:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004684:	889b      	ldrh	r3, [r3, #4]
 8004686:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <ENS_Upkeep+0x37c>)
 8004688:	4953      	ldr	r1, [pc, #332]	@ (80047d8 <ENS_Upkeep+0x380>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	9000      	str	r0, [sp, #0]
 800468e:	0023      	movs	r3, r4
 8004690:	2002      	movs	r0, #2
 8004692:	f00e fd7f 	bl	8013194 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004696:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <ENS_Upkeep+0x384>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <ENS_Upkeep+0x384>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a50      	ldr	r2, [pc, #320]	@ (80047e0 <ENS_Upkeep+0x388>)
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0003      	movs	r3, r0
 80046a6:	2002      	movs	r0, #2
 80046a8:	f00e fd74 	bl	8013194 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <ENS_Upkeep+0x384>)
 80046ae:	6898      	ldr	r0, [r3, #8]
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <ENS_Upkeep+0x384>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	@ (80047e4 <ENS_Upkeep+0x38c>)
 80046b6:	4948      	ldr	r1, [pc, #288]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	0003      	movs	r3, r0
 80046bc:	2002      	movs	r0, #2
 80046be:	f00e fd69 	bl	8013194 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046c2:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c4:	6918      	ldr	r0, [r3, #16]
 80046c6:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <ENS_Upkeep+0x390>)
 80046cc:	4942      	ldr	r1, [pc, #264]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	0003      	movs	r3, r0
 80046d2:	2002      	movs	r0, #2
 80046d4:	f00e fd5e 	bl	8013194 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046d8:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <ENS_Upkeep+0x384>)
 80046da:	6998      	ldr	r0, [r3, #24]
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <ENS_Upkeep+0x384>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <ENS_Upkeep+0x394>)
 80046e2:	493d      	ldr	r1, [pc, #244]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0003      	movs	r3, r0
 80046e8:	2002      	movs	r0, #2
 80046ea:	f00e fd53 	bl	8013194 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d103      	bne.n	80046fe <ENS_Upkeep+0x2a6>
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e005      	b.n	800470a <ENS_Upkeep+0x2b2>
 80046fe:	4b33      	ldr	r3, [pc, #204]	@ (80047cc <ENS_Upkeep+0x374>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <ENS_Upkeep+0x374>)
 8004708:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <ENS_Upkeep+0x378>)
 800470c:	7818      	ldrb	r0, [r3, #0]
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004710:	8859      	ldrh	r1, [r3, #2]
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	001a      	movs	r2, r3
 8004718:	f000 f9d8 	bl	8004acc <setENS160>
    ENSState = ENS_LOW_POWER;
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <ENS_Upkeep+0x32c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
    break;
 8004722:	e0c6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004724:	f00f fa76 	bl	8013c14 <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	22fa      	movs	r2, #250	@ 0xfa
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	189a      	adds	r2, r3, r2
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <ENS_Upkeep+0x328>)
 8004732:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004734:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4053      	eors	r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <ENS_Upkeep+0x39c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4053      	eors	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d06a      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <ENS_Upkeep+0x374>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d966      	bls.n	8004826 <ENS_Upkeep+0x3ce>
      if (getSensorLock() != FREE) {
 8004758:	f008 fdaa 	bl	800d2b0 <getSensorLock>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d000      	beq.n	8004762 <ENS_Upkeep+0x30a>
 8004760:	e0a2      	b.n	80048a8 <ENS_Upkeep+0x450>
        break;
      }
      setSensorLock(ENS160);
 8004762:	2004      	movs	r0, #4
 8004764:	f008 fd90 	bl	800d288 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004768:	1cfc      	adds	r4, r7, #3
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fb4e 	bl	8003e0c <ENS160_setMode>
 8004770:	0003      	movs	r3, r0
 8004772:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004774:	1cfb      	adds	r3, r7, #3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03d      	beq.n	80047f8 <ENS_Upkeep+0x3a0>
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <ENS_Upkeep+0x340>)
 800477e:	e03c      	b.n	80047fa <ENS_Upkeep+0x3a2>
 8004780:	20000450 	.word	0x20000450
 8004784:	20000000 	.word	0x20000000
 8004788:	0802d7d0 	.word	0x0802d7d0
 800478c:	080299cc 	.word	0x080299cc
 8004790:	080298d4 	.word	0x080298d4
 8004794:	002f9b80 	.word	0x002f9b80
 8004798:	08029a00 	.word	0x08029a00
 800479c:	08029a08 	.word	0x08029a08
 80047a0:	08029a10 	.word	0x08029a10
 80047a4:	08029a34 	.word	0x08029a34
 80047a8:	08029a4c 	.word	0x08029a4c
 80047ac:	08029a6c 	.word	0x08029a6c
 80047b0:	08029a84 	.word	0x08029a84
 80047b4:	08029a8c 	.word	0x08029a8c
 80047b8:	08029a94 	.word	0x08029a94
 80047bc:	08029a9c 	.word	0x08029a9c
 80047c0:	08029aa4 	.word	0x08029aa4
 80047c4:	08029aac 	.word	0x08029aac
 80047c8:	08029ab4 	.word	0x08029ab4
 80047cc:	20000454 	.word	0x20000454
 80047d0:	20000484 	.word	0x20000484
 80047d4:	08029adc 	.word	0x08029adc
 80047d8:	08029944 	.word	0x08029944
 80047dc:	20000460 	.word	0x20000460
 80047e0:	08029b08 	.word	0x08029b08
 80047e4:	08029b24 	.word	0x08029b24
 80047e8:	08029b40 	.word	0x08029b40
 80047ec:	08029b5c 	.word	0x08029b5c
 80047f0:	20001e49 	.word	0x20001e49
 80047f4:	20001e4a 	.word	0x20001e4a
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <ENS_Upkeep+0x468>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <ENS_Upkeep+0x46c>)
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	0010      	movs	r0, r2
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <ENS_Upkeep+0x470>)
 8004802:	4932      	ldr	r1, [pc, #200]	@ (80048cc <ENS_Upkeep+0x474>)
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	2003      	movs	r0, #3
 8004808:	f00e fcc4 	bl	8013194 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800480c:	200a      	movs	r0, #10
 800480e:	f00f fa0b 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 8004812:	2000      	movs	r0, #0
 8004814:	f008 fd38 	bl	800d288 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004818:	f00f f9fc 	bl	8013c14 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <ENS_Upkeep+0x478>)
 8004820:	189a      	adds	r2, r3, r2
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <ENS_Upkeep+0x47c>)
 8004824:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004828:	2208      	movs	r2, #8
 800482a:	701a      	strb	r2, [r3, #0]
    break;
 800482c:	e041      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800482e:	f008 fd3f 	bl	800d2b0 <getSensorLock>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d13a      	bne.n	80048ac <ENS_Upkeep+0x454>
        break;
      }
      setSensorLock(ENS160);
 8004836:	2004      	movs	r0, #4
 8004838:	f008 fd26 	bl	800d288 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800483c:	1cba      	adds	r2, r7, #2
 800483e:	2301      	movs	r3, #1
 8004840:	2101      	movs	r1, #1
 8004842:	2010      	movs	r0, #16
 8004844:	f7ff f94a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ENS_Upkeep+0x41c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004850:	1dfc      	adds	r4, r7, #7
 8004852:	2002      	movs	r0, #2
 8004854:	f7ff fada 	bl	8003e0c <ENS160_setMode>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <ENS_Upkeep+0x410>
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <ENS_Upkeep+0x484>)
 8004866:	e000      	b.n	800486a <ENS_Upkeep+0x412>
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <ENS_Upkeep+0x468>)
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <ENS_Upkeep+0x488>)
 800486c:	4917      	ldr	r1, [pc, #92]	@ (80048cc <ENS_Upkeep+0x474>)
 800486e:	2003      	movs	r0, #3
 8004870:	f00e fc90 	bl	8013194 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004874:	200a      	movs	r0, #10
 8004876:	f00f f9d7 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 800487a:	2000      	movs	r0, #0
 800487c:	f008 fd04 	bl	800d288 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004882:	2203      	movs	r2, #3
 8004884:	701a      	strb	r2, [r3, #0]
    break;
 8004886:	e014      	b.n	80048b2 <ENS_Upkeep+0x45a>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <ENS_Upkeep+0x480>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800488e:	f008 fd0f 	bl	800d2b0 <getSensorLock>
 8004892:	0003      	movs	r3, r0
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00b      	beq.n	80048b0 <ENS_Upkeep+0x458>
      setSensorLock(FREE);
 8004898:	2000      	movs	r0, #0
 800489a:	f008 fcf5 	bl	800d288 <setSensorLock>
    }
    break;
 800489e:	e007      	b.n	80048b0 <ENS_Upkeep+0x458>
      break;
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e006      	b.n	80048b2 <ENS_Upkeep+0x45a>
      break;
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	e004      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	e002      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	e000      	b.n	80048b2 <ENS_Upkeep+0x45a>
    break;
 80048b0:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <ENS_Upkeep+0x480>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b003      	add	sp, #12
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	08029a08 	.word	0x08029a08
 80048c4:	20000454 	.word	0x20000454
 80048c8:	08029b78 	.word	0x08029b78
 80048cc:	080298d4 	.word	0x080298d4
 80048d0:	0000afc8 	.word	0x0000afc8
 80048d4:	20000450 	.word	0x20000450
 80048d8:	20000000 	.word	0x20000000
 80048dc:	08029a00 	.word	0x08029a00
 80048e0:	08029bb0 	.word	0x08029bb0

080048e4 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80048e8:	4b02      	ldr	r3, [pc, #8]	@ (80048f4 <forceNTPupdate+0x10>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000670 	.word	0x20000670

080048f8 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004900:	f00f f988 	bl	8013c14 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	18d2      	adds	r2, r2, r3
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <setESPTimeStamp+0x20>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	2000066c 	.word	0x2000066c

0800491c <setCharges>:

void setCharges(){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004920:	f004 fbe2 	bl	80090e8 <ReadBatteryVoltage>
 8004924:	1c02      	adds	r2, r0, #0
 8004926:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <setCharges+0x3c>)
 8004928:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800492a:	f004 fc3f 	bl	80091ac <ReadSolarVoltage>
 800492e:	0003      	movs	r3, r0
 8004930:	0018      	movs	r0, r3
 8004932:	f7fe ff5d 	bl	80037f0 <__aeabi_i2d>
 8004936:	2200      	movs	r2, #0
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <setCharges+0x40>)
 800493a:	f7fd fbd1 	bl	80020e0 <__aeabi_ddiv>
 800493e:	0002      	movs	r2, r0
 8004940:	000b      	movs	r3, r1
 8004942:	0010      	movs	r0, r2
 8004944:	0019      	movs	r1, r3
 8004946:	f7fe ffed 	bl	8003924 <__aeabi_d2f>
 800494a:	1c02      	adds	r2, r0, #0
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <setCharges+0x44>)
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	200005c4 	.word	0x200005c4
 800495c:	408f4000 	.word	0x408f4000
 8004960:	200005c8 	.word	0x200005c8

08004964 <checkEEprom>:

bool checkEEprom(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <checkEEprom+0x5c>)
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <checkEEprom+0x60>)
 800496e:	220c      	movs	r2, #12
 8004970:	0019      	movs	r1, r3
 8004972:	f006 fedf 	bl	800b734 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e00e      	b.n	800499c <checkEEprom+0x38>
    configSum += tempConfig[i];
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <checkEEprom+0x5c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	001a      	movs	r2, r3
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <checkEEprom+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <checkEEprom+0x64>)
 8004990:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	3201      	adds	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b0b      	cmp	r3, #11
 80049a2:	d9ec      	bls.n	800497e <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <checkEEprom+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <checkEEprom+0x68>)
 80049b0:	701a      	strb	r2, [r3, #0]
  return test;
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <checkEEprom+0x68>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200006e0 	.word	0x200006e0
 80049c4:	0808000c 	.word	0x0808000c
 80049c8:	200006ec 	.word	0x200006ec
 80049cc:	200006f0 	.word	0x200006f0

080049d0 <checkName>:

bool checkName(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <checkName+0x5c>)
 80049d8:	4815      	ldr	r0, [pc, #84]	@ (8004a30 <checkName+0x60>)
 80049da:	2220      	movs	r2, #32
 80049dc:	0019      	movs	r1, r3
 80049de:	f006 fea9 	bl	800b734 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e00e      	b.n	8004a08 <checkName+0x38>
    configSum += nameConfig[i];
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <checkName+0x5c>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	001a      	movs	r2, r3
 80049f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <checkName+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <checkName+0x64>)
 80049fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d9ec      	bls.n	80049ea <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <checkName+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	4193      	sbcs	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <checkName+0x68>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  return test;
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <checkName+0x68>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	200006f4 	.word	0x200006f4
 8004a30:	08080090 	.word	0x08080090
 8004a34:	20000714 	.word	0x20000714
 8004a38:	20000718 	.word	0x20000718

08004a3c <setHIDS>:

void setHIDS(float temp, float humid){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <setHIDS+0x20>)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <setHIDS+0x20>)
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	2000067c 	.word	0x2000067c

08004a60 <setVOC>:

void setVOC(uint16_t voc) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	0002      	movs	r2, r0
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a6c:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <setVOC+0x20>)
 8004a6e:	1dba      	adds	r2, r7, #6
 8004a70:	2148      	movs	r1, #72	@ 0x48
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	2000067c 	.word	0x2000067c

08004a84 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <setAHT2x+0x20>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <setAHT2x+0x20>)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	2000067c 	.word	0x2000067c

08004aa8 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <setBMP280+0x20>)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <setBMP280+0x20>)
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	2000067c 	.word	0x2000067c

08004acc <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	0004      	movs	r4, r0
 8004ad4:	0008      	movs	r0, r1
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	1c22      	adds	r2, r4, #0
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	1c02      	adds	r2, r0, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	1cbb      	adds	r3, r7, #2
 8004ae6:	1c0a      	adds	r2, r1, #0
 8004ae8:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <setENS160+0x74>)
 8004aec:	1dfa      	adds	r2, r7, #7
 8004aee:	2154      	movs	r1, #84	@ 0x54
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <setENS160+0x74>)
 8004af6:	2255      	movs	r2, #85	@ 0x55
 8004af8:	5c9b      	ldrb	r3, [r3, r2]
 8004afa:	1dfa      	adds	r2, r7, #7
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d904      	bls.n	8004b0c <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b02:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <setENS160+0x74>)
 8004b04:	1dfa      	adds	r2, r7, #7
 8004b06:	2155      	movs	r1, #85	@ 0x55
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <setENS160+0x74>)
 8004b0e:	1d3a      	adds	r2, r7, #4
 8004b10:	214a      	movs	r1, #74	@ 0x4a
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <setENS160+0x74>)
 8004b18:	1cba      	adds	r2, r7, #2
 8004b1a:	2150      	movs	r1, #80	@ 0x50
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <setENS160+0x74>)
 8004b22:	2252      	movs	r2, #82	@ 0x52
 8004b24:	5a9b      	ldrh	r3, [r3, r2]
 8004b26:	1cba      	adds	r2, r7, #2
 8004b28:	8812      	ldrh	r2, [r2, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d904      	bls.n	8004b38 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b2e:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <setENS160+0x74>)
 8004b30:	1cba      	adds	r2, r7, #2
 8004b32:	2152      	movs	r1, #82	@ 0x52
 8004b34:	8812      	ldrh	r2, [r2, #0]
 8004b36:	525a      	strh	r2, [r3, r1]
  }
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	2000067c 	.word	0x2000067c

08004b44 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <setMic+0x28>)
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004b56:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <setMic+0x28>)
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <setMic+0x28>)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	2000067c 	.word	0x2000067c

08004b70 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	0002      	movs	r2, r0
 8004b78:	1dbb      	adds	r3, r7, #6
 8004b7a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fc fe51 	bl	8001828 <__aeabi_i2f>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <setPM1p0+0x50>)
 8004b8a:	1c18      	adds	r0, r3, #0
 8004b8c:	f7fc f88a 	bl	8000ca4 <__aeabi_fdiv>
 8004b90:	1c03      	adds	r3, r0, #0
 8004b92:	1c1a      	adds	r2, r3, #0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <setPM1p0+0x54>)
 8004b96:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004b98:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc4 <setPM1p0+0x54>)
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <setPM1p0+0x54>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	1c19      	adds	r1, r3, #0
 8004ba2:	1c10      	adds	r0, r2, #0
 8004ba4:	f7fb fcd8 	bl	8000558 <__aeabi_fcmpgt>
 8004ba8:	1e03      	subs	r3, r0, #0
 8004baa:	d100      	bne.n	8004bae <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004bac:	e003      	b.n	8004bb6 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004bae:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <setPM1p0+0x54>)
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <setPM1p0+0x54>)
 8004bb4:	60da      	str	r2, [r3, #12]
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	41200000 	.word	0x41200000
 8004bc4:	2000067c 	.word	0x2000067c

08004bc8 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	0002      	movs	r2, r0
 8004bd0:	1dbb      	adds	r3, r7, #6
 8004bd2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fc fe25 	bl	8001828 <__aeabi_i2f>
 8004bde:	1c03      	adds	r3, r0, #0
 8004be0:	490d      	ldr	r1, [pc, #52]	@ (8004c18 <setPM2p5+0x50>)
 8004be2:	1c18      	adds	r0, r3, #0
 8004be4:	f7fc f85e 	bl	8000ca4 <__aeabi_fdiv>
 8004be8:	1c03      	adds	r3, r0, #0
 8004bea:	1c1a      	adds	r2, r3, #0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <setPM2p5+0x54>)
 8004bee:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <setPM2p5+0x54>)
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <setPM2p5+0x54>)
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	1c19      	adds	r1, r3, #0
 8004bfa:	1c10      	adds	r0, r2, #0
 8004bfc:	f7fb fcac 	bl	8000558 <__aeabi_fcmpgt>
 8004c00:	1e03      	subs	r3, r0, #0
 8004c02:	d100      	bne.n	8004c06 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c04:	e003      	b.n	8004c0e <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c06:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <setPM2p5+0x54>)
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <setPM2p5+0x54>)
 8004c0c:	615a      	str	r2, [r3, #20]
}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	41200000 	.word	0x41200000
 8004c1c:	2000067c 	.word	0x2000067c

08004c20 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	0002      	movs	r2, r0
 8004c28:	1dbb      	adds	r3, r7, #6
 8004c2a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c2c:	1dbb      	adds	r3, r7, #6
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7fc fdf9 	bl	8001828 <__aeabi_i2f>
 8004c36:	1c03      	adds	r3, r0, #0
 8004c38:	490d      	ldr	r1, [pc, #52]	@ (8004c70 <setPM4p0+0x50>)
 8004c3a:	1c18      	adds	r0, r3, #0
 8004c3c:	f7fc f832 	bl	8000ca4 <__aeabi_fdiv>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	1c1a      	adds	r2, r3, #0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <setPM4p0+0x54>)
 8004c46:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <setPM4p0+0x54>)
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <setPM4p0+0x54>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	1c19      	adds	r1, r3, #0
 8004c52:	1c10      	adds	r0, r2, #0
 8004c54:	f7fb fc80 	bl	8000558 <__aeabi_fcmpgt>
 8004c58:	1e03      	subs	r3, r0, #0
 8004c5a:	d100      	bne.n	8004c5e <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004c5c:	e003      	b.n	8004c66 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004c5e:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <setPM4p0+0x54>)
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <setPM4p0+0x54>)
 8004c64:	61da      	str	r2, [r3, #28]
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b002      	add	sp, #8
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	41200000 	.word	0x41200000
 8004c74:	2000067c 	.word	0x2000067c

08004c78 <setPM10>:

void setPM10(uint16_t PM10) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	0002      	movs	r2, r0
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004c84:	1dbb      	adds	r3, r7, #6
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fc fdcd 	bl	8001828 <__aeabi_i2f>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <setPM10+0x50>)
 8004c92:	1c18      	adds	r0, r3, #0
 8004c94:	f7fc f806 	bl	8000ca4 <__aeabi_fdiv>
 8004c98:	1c03      	adds	r3, r0, #0
 8004c9a:	1c1a      	adds	r2, r3, #0
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <setPM10+0x54>)
 8004c9e:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <setPM10+0x54>)
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <setPM10+0x54>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c19      	adds	r1, r3, #0
 8004caa:	1c10      	adds	r0, r2, #0
 8004cac:	f7fb fc54 	bl	8000558 <__aeabi_fcmpgt>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d100      	bne.n	8004cb6 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004cb4:	e003      	b.n	8004cbe <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <setPM10+0x54>)
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <setPM10+0x54>)
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	41200000 	.word	0x41200000
 8004ccc:	2000067c 	.word	0x2000067c

08004cd0 <setNOx>:

void setNOx(uint16_t nox) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <setNOx+0x38>)
 8004cde:	1dba      	adds	r2, r7, #6
 8004ce0:	214c      	movs	r1, #76	@ 0x4c
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004ce6:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <setNOx+0x38>)
 8004ce8:	224e      	movs	r2, #78	@ 0x4e
 8004cea:	5a9b      	ldrh	r3, [r3, r2]
 8004cec:	1dba      	adds	r2, r7, #6
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d904      	bls.n	8004cfe <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004cf4:	4b04      	ldr	r3, [pc, #16]	@ (8004d08 <setNOx+0x38>)
 8004cf6:	1dba      	adds	r2, r7, #6
 8004cf8:	214e      	movs	r1, #78	@ 0x4e
 8004cfa:	8812      	ldrh	r2, [r2, #0]
 8004cfc:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	2000067c 	.word	0x2000067c

08004d0c <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d16:	490a      	ldr	r1, [pc, #40]	@ (8004d40 <SetSEN545temphum+0x34>)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fb ffc3 	bl	8000ca4 <__aeabi_fdiv>
 8004d1e:	1c03      	adds	r3, r0, #0
 8004d20:	1c1a      	adds	r2, r3, #0
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <SetSEN545temphum+0x38>)
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d26:	4908      	ldr	r1, [pc, #32]	@ (8004d48 <SetSEN545temphum+0x3c>)
 8004d28:	6838      	ldr	r0, [r7, #0]
 8004d2a:	f7fb ffbb 	bl	8000ca4 <__aeabi_fdiv>
 8004d2e:	1c03      	adds	r3, r0, #0
 8004d30:	1c1a      	adds	r2, r3, #0
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <SetSEN545temphum+0x38>)
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	43480000 	.word	0x43480000
 8004d44:	2000067c 	.word	0x2000067c
 8004d48:	42c80000 	.word	0x42c80000

08004d4c <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004d50:	f008 fe64 	bl	800da1c <sen5x_Get_sen5x_enable_state>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d00f      	beq.n	8004d78 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004d58:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004d64:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004d6a:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d72:	224e      	movs	r2, #78	@ 0x4e
 8004d74:	2100      	movs	r1, #0
 8004d76:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d7a:	2252      	movs	r2, #82	@ 0x52
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <resetMaxMeasurementValues+0x44>)
 8004d82:	2255      	movs	r2, #85	@ 0x55
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	2000067c 	.word	0x2000067c

08004d94 <SetConfigMode>:

void SetConfigMode(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <SetConfigMode+0x30>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	4053      	eors	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <SetConfigMode+0x34>)
 8004da8:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <SetConfigMode+0x38>)
 8004daa:	0019      	movs	r1, r3
 8004dac:	2003      	movs	r0, #3
 8004dae:	f00e f9f1 	bl	8013194 <CreateLine>
  }
  ReconfigSet = true;
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <SetConfigMode+0x30>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <SetConfigMode+0x3c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200005a3 	.word	0x200005a3
 8004dc8:	08029be0 	.word	0x08029be0
 8004dcc:	08029c00 	.word	0x08029c00
 8004dd0:	20000207 	.word	0x20000207

08004dd4 <GetReconfigMode>:

bool GetReconfigMode() {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004dd8:	4b02      	ldr	r3, [pc, #8]	@ (8004de4 <GetReconfigMode+0x10>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	200005a3 	.word	0x200005a3

08004de8 <ESP_GetUID>:

void ESP_GetUID(){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004dec:	f00e ff5c 	bl	8013ca8 <HAL_GetUIDw0>
 8004df0:	0002      	movs	r2, r0
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <ESP_GetUID+0x28>)
 8004df4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004df6:	f00e ff61 	bl	8013cbc <HAL_GetUIDw1>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <ESP_GetUID+0x28>)
 8004dfe:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004e00:	f00e ff66 	bl	8013cd0 <HAL_GetUIDw2>
 8004e04:	0002      	movs	r2, r0
 8004e06:	4b02      	ldr	r3, [pc, #8]	@ (8004e10 <ESP_GetUID+0x28>)
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200005ac 	.word	0x200005ac

08004e14 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <ESP_Init+0x2c>)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <ESP_Init+0x30>)
 8004e24:	2202      	movs	r2, #2
 8004e26:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004e28:	f7ff ffde 	bl	8004de8 <ESP_GetUID>
  beurs = checkEEprom();
 8004e2c:	f7ff fd9a 	bl	8004964 <checkEEprom>
 8004e30:	0003      	movs	r3, r0
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b04      	ldr	r3, [pc, #16]	@ (8004e48 <ESP_Init+0x34>)
 8004e36:	701a      	strb	r2, [r3, #0]
}
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000498 	.word	0x20000498
 8004e44:	2000002c 	.word	0x2000002c
 8004e48:	200005a6 	.word	0x200005a6

08004e4c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	000a      	movs	r2, r1
 8004e56:	1cbb      	adds	r3, r7, #2
 8004e58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <ESP_Send+0x54>)
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	250f      	movs	r5, #15
 8004e60:	197c      	adds	r4, r7, r5
 8004e62:	1cbb      	adds	r3, r7, #2
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0019      	movs	r1, r3
 8004e6a:	f017 fd27 	bl	801c8bc <HAL_UART_Transmit_DMA>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e72:	197b      	adds	r3, r7, r5
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <ESP_Send+0x58>)
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <ESP_Send+0x5c>)
 8004e7e:	0019      	movs	r1, r3
 8004e80:	2001      	movs	r0, #1
 8004e82:	f00e f987 	bl	8013194 <CreateLine>
    return false;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e006      	b.n	8004e98 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <ESP_Send+0x60>)
 8004e8e:	0011      	movs	r1, r2
 8004e90:	0018      	movs	r0, r3
 8004e92:	f020 fa99 	bl	80253c8 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea0:	20000498 	.word	0x20000498
 8004ea4:	08029c04 	.word	0x08029c04
 8004ea8:	08029c24 	.word	0x08029c24
 8004eac:	08029c28 	.word	0x08029c28

08004eb0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	000a      	movs	r2, r1
 8004eba:	1cbb      	adds	r3, r7, #2
 8004ebc:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8005034 <ESP_Receive+0x184>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004ec4:	260f      	movs	r6, #15
 8004ec6:	19bb      	adds	r3, r7, r6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8005038 <ESP_Receive+0x188>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	250d      	movs	r5, #13
 8004ed2:	197c      	adds	r4, r7, r5
 8004ed4:	1cbb      	adds	r3, r7, #2
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0019      	movs	r1, r3
 8004edc:	f017 fd7e 	bl	801c9dc <HAL_UART_Receive_DMA>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004ee4:	002c      	movs	r4, r5
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d100      	bne.n	8004ef0 <ESP_Receive+0x40>
 8004eee:	e09c      	b.n	800502a <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004ef0:	4b51      	ldr	r3, [pc, #324]	@ (8005038 <ESP_Receive+0x188>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2284      	movs	r2, #132	@ 0x84
 8004ef6:	589b      	ldr	r3, [r3, r2]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	@ (800503c <ESP_Receive+0x18c>)
 8004efa:	4951      	ldr	r1, [pc, #324]	@ (8005040 <ESP_Receive+0x190>)
 8004efc:	2001      	movs	r0, #1
 8004efe:	f00e f949 	bl	8013194 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d008      	beq.n	8004f1e <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8005044 <ESP_Receive+0x194>)
 8004f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8005040 <ESP_Receive+0x190>)
 8004f10:	0019      	movs	r1, r3
 8004f12:	2001      	movs	r0, #1
 8004f14:	f00e f93e 	bl	8013194 <CreateLine>
      reset = true;
 8004f18:	19bb      	adds	r3, r7, r6
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f1e:	230d      	movs	r3, #13
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d005      	beq.n	8004f36 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004f2a:	4a47      	ldr	r2, [pc, #284]	@ (8005048 <ESP_Receive+0x198>)
 8004f2c:	4b44      	ldr	r3, [pc, #272]	@ (8005040 <ESP_Receive+0x190>)
 8004f2e:	0019      	movs	r1, r3
 8004f30:	2001      	movs	r0, #1
 8004f32:	f00e f92f 	bl	8013194 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004f36:	230d      	movs	r3, #13
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d005      	beq.n	8004f4e <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004f42:	4a42      	ldr	r2, [pc, #264]	@ (800504c <ESP_Receive+0x19c>)
 8004f44:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <ESP_Receive+0x190>)
 8004f46:	0019      	movs	r1, r3
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f00e f923 	bl	8013194 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004f4e:	230d      	movs	r3, #13
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4013      	ands	r3, r2
 8004f58:	d005      	beq.n	8004f66 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005050 <ESP_Receive+0x1a0>)
 8004f5c:	4b38      	ldr	r3, [pc, #224]	@ (8005040 <ESP_Receive+0x190>)
 8004f5e:	0019      	movs	r1, r3
 8004f60:	2001      	movs	r0, #1
 8004f62:	f00e f917 	bl	8013194 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004f66:	230d      	movs	r3, #13
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d005      	beq.n	8004f7e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004f72:	4a38      	ldr	r2, [pc, #224]	@ (8005054 <ESP_Receive+0x1a4>)
 8004f74:	4b32      	ldr	r3, [pc, #200]	@ (8005040 <ESP_Receive+0x190>)
 8004f76:	0019      	movs	r1, r3
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f00e f90b 	bl	8013194 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004f7e:	230d      	movs	r3, #13
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2220      	movs	r2, #32
 8004f86:	4013      	ands	r3, r2
 8004f88:	d005      	beq.n	8004f96 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004f8a:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <ESP_Receive+0x1a8>)
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005040 <ESP_Receive+0x190>)
 8004f8e:	0019      	movs	r1, r3
 8004f90:	2001      	movs	r0, #1
 8004f92:	f00e f8ff 	bl	8013194 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004f96:	230d      	movs	r3, #13
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2240      	movs	r2, #64	@ 0x40
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d005      	beq.n	8004fae <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800505c <ESP_Receive+0x1ac>)
 8004fa4:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <ESP_Receive+0x190>)
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f00e f8f3 	bl	8013194 <CreateLine>
    }
#endif
    if (reset) {
 8004fae:	230f      	movs	r3, #15
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d033      	beq.n	8005020 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fb8:	4b29      	ldr	r3, [pc, #164]	@ (8005060 <ESP_Receive+0x1b0>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f010 f8b9 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f00e fe2f 	bl	8013c28 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4825      	ldr	r0, [pc, #148]	@ (8005064 <ESP_Receive+0x1b4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	f010 f8af 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f00e fe25 	bl	8013c28 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <ESP_Receive+0x1b0>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f010 f8a6 	bl	8015136 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004fea:	230e      	movs	r3, #14
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e00e      	b.n	8005012 <ESP_Receive+0x162>
        SetAllREDLED();
 8004ff4:	f00c ffc6 	bl	8011f84 <SetAllREDLED>
        SetLEDsOff();
 8004ff8:	f00c ffa8 	bl	8011f4c <SetLEDsOff>
        HAL_Delay(500);
 8004ffc:	23fa      	movs	r3, #250	@ 0xfa
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	0018      	movs	r0, r3
 8005002:	f00e fe11 	bl	8013c28 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8005006:	210e      	movs	r1, #14
 8005008:	187b      	adds	r3, r7, r1
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	187b      	adds	r3, r7, r1
 800500e:	3201      	adds	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	230e      	movs	r3, #14
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b05      	cmp	r3, #5
 800501a:	d9eb      	bls.n	8004ff4 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 800501c:	f00f fac3 	bl	80145a6 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <ESP_Receive+0x184>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
    return false;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <ESP_Receive+0x17c>
  }
  return true;
 800502a:	2301      	movs	r3, #1
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b005      	add	sp, #20
 8005032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005034:	2000049c 	.word	0x2000049c
 8005038:	20000498 	.word	0x20000498
 800503c:	08029c38 	.word	0x08029c38
 8005040:	08029c24 	.word	0x08029c24
 8005044:	08029c68 	.word	0x08029c68
 8005048:	08029c8c 	.word	0x08029c8c
 800504c:	08029cb0 	.word	0x08029cb0
 8005050:	08029cd4 	.word	0x08029cd4
 8005054:	08029cf8 	.word	0x08029cf8
 8005058:	08029d24 	.word	0x08029d24
 800505c:	08029d54 	.word	0x08029d54
 8005060:	50001c00 	.word	0x50001c00
 8005064:	50000800 	.word	0x50000800

08005068 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005070:	4b39      	ldr	r3, [pc, #228]	@ (8005158 <HAL_UART_ErrorCallback+0xf0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d16b      	bne.n	8005152 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2284      	movs	r2, #132	@ 0x84
 800507e:	589b      	ldr	r3, [r3, r2]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d065      	beq.n	8005150 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2284      	movs	r2, #132	@ 0x84
 8005088:	589b      	ldr	r3, [r3, r2]
 800508a:	4a34      	ldr	r2, [pc, #208]	@ (800515c <HAL_UART_ErrorCallback+0xf4>)
 800508c:	4934      	ldr	r1, [pc, #208]	@ (8005160 <HAL_UART_ErrorCallback+0xf8>)
 800508e:	2003      	movs	r0, #3
 8005090:	f00e f880 	bl	8013194 <CreateLine>
    switch (huart->ErrorCode) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2284      	movs	r2, #132	@ 0x84
 8005098:	589b      	ldr	r3, [r3, r2]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d851      	bhi.n	8005142 <HAL_UART_ErrorCallback+0xda>
 800509e:	009a      	lsls	r2, r3, #2
 80050a0:	4b30      	ldr	r3, [pc, #192]	@ (8005164 <HAL_UART_ErrorCallback+0xfc>)
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 80050a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005168 <HAL_UART_ErrorCallback+0x100>)
 80050aa:	4b30      	ldr	r3, [pc, #192]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050ac:	0019      	movs	r1, r3
 80050ae:	2001      	movs	r0, #1
 80050b0:	f00e f870 	bl	8013194 <CreateLine>
        break;
 80050b4:	e04d      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 80050b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_UART_ErrorCallback+0x108>)
 80050b8:	4b2c      	ldr	r3, [pc, #176]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050ba:	0019      	movs	r1, r3
 80050bc:	2001      	movs	r0, #1
 80050be:	f00e f869 	bl	8013194 <CreateLine>
        break;
 80050c2:	e046      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 80050c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <HAL_UART_ErrorCallback+0x10c>)
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050c8:	0019      	movs	r1, r3
 80050ca:	2001      	movs	r0, #1
 80050cc:	f00e f862 	bl	8013194 <CreateLine>
        break;
 80050d0:	e03f      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 80050d2:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <HAL_UART_ErrorCallback+0x110>)
 80050d4:	4b25      	ldr	r3, [pc, #148]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050d6:	0019      	movs	r1, r3
 80050d8:	2001      	movs	r0, #1
 80050da:	f00e f85b 	bl	8013194 <CreateLine>
        break;
 80050de:	e038      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_UART_ErrorCallback+0x114>)
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050e4:	0019      	movs	r1, r3
 80050e6:	2001      	movs	r0, #1
 80050e8:	f00e f854 	bl	8013194 <CreateLine>
        break;
 80050ec:	e031      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 80050ee:	4a24      	ldr	r2, [pc, #144]	@ (8005180 <HAL_UART_ErrorCallback+0x118>)
 80050f0:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 80050f2:	0019      	movs	r1, r3
 80050f4:	2001      	movs	r0, #1
 80050f6:	f00e f84d 	bl	8013194 <CreateLine>
        break;
 80050fa:	e02a      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 80050fc:	4a21      	ldr	r2, [pc, #132]	@ (8005184 <HAL_UART_ErrorCallback+0x11c>)
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005100:	0019      	movs	r1, r3
 8005102:	2001      	movs	r0, #1
 8005104:	f00e f846 	bl	8013194 <CreateLine>
        break;
 8005108:	e023      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 800510a:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_UART_ErrorCallback+0x120>)
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800510e:	0019      	movs	r1, r3
 8005110:	2001      	movs	r0, #1
 8005112:	f00e f83f 	bl	8013194 <CreateLine>
        break;
 8005116:	e01c      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_UART_ErrorCallback+0x124>)
 800511a:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800511c:	0019      	movs	r1, r3
 800511e:	2001      	movs	r0, #1
 8005120:	f00e f838 	bl	8013194 <CreateLine>
        break;
 8005124:	e015      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8005126:	4a1a      	ldr	r2, [pc, #104]	@ (8005190 <HAL_UART_ErrorCallback+0x128>)
 8005128:	4b10      	ldr	r3, [pc, #64]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 800512a:	0019      	movs	r1, r3
 800512c:	2001      	movs	r0, #1
 800512e:	f00e f831 	bl	8013194 <CreateLine>
        break;
 8005132:	e00e      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_UART_ErrorCallback+0x12c>)
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005138:	0019      	movs	r1, r3
 800513a:	2001      	movs	r0, #1
 800513c:	f00e f82a 	bl	8013194 <CreateLine>
        break;
 8005140:	e007      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8005142:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <HAL_UART_ErrorCallback+0x130>)
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_UART_ErrorCallback+0x104>)
 8005146:	0019      	movs	r1, r3
 8005148:	2001      	movs	r0, #1
 800514a:	f00e f823 	bl	8013194 <CreateLine>
 800514e:	e000      	b.n	8005152 <HAL_UART_ErrorCallback+0xea>
      return;
 8005150:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000498 	.word	0x20000498
 800515c:	08029d84 	.word	0x08029d84
 8005160:	08029c00 	.word	0x08029c00
 8005164:	0802d880 	.word	0x0802d880
 8005168:	08029db4 	.word	0x08029db4
 800516c:	08029c24 	.word	0x08029c24
 8005170:	08029de8 	.word	0x08029de8
 8005174:	08029e14 	.word	0x08029e14
 8005178:	08029e48 	.word	0x08029e48
 800517c:	08029e74 	.word	0x08029e74
 8005180:	08029e9c 	.word	0x08029e9c
 8005184:	08029ecc 	.word	0x08029ecc
 8005188:	08029f04 	.word	0x08029f04
 800518c:	08029f3c 	.word	0x08029f3c
 8005190:	08029f64 	.word	0x08029f64
 8005194:	08029f8c 	.word	0x08029f8c
 8005198:	08029fb8 	.word	0x08029fb8

0800519c <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b42      	cmp	r3, #66	@ 0x42
 80051ae:	d905      	bls.n	80051bc <isKeyValid+0x20>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2bff      	cmp	r3, #255	@ 0xff
 80051b6:	d001      	beq.n	80051bc <isKeyValid+0x20>
    return true;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e01d      	b.n	80051f8 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <isKeyValid+0x64>)
 80051c2:	0018      	movs	r0, r3
 80051c4:	f020 f900 	bl	80253c8 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e00c      	b.n	80051e8 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	001a      	movs	r2, r3
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <isKeyValid+0x68>)
 80051da:	0011      	movs	r1, r2
 80051dc:	0018      	movs	r0, r3
 80051de:	f020 f8f3 	bl	80253c8 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b0b      	cmp	r3, #11
 80051ec:	ddef      	ble.n	80051ce <isKeyValid+0x32>
    }
    printf("\r\n");
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <isKeyValid+0x6c>)
 80051f0:	0018      	movs	r0, r3
 80051f2:	f020 f94f 	bl	8025494 <puts>
    return false;
 80051f6:	2300      	movs	r3, #0
  }
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b006      	add	sp, #24
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08029fdc 	.word	0x08029fdc
 8005204:	0802a014 	.word	0x0802a014
 8005208:	0802a01c 	.word	0x0802a01c

0800520c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e010      	b.n	800523e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	001a      	movs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	1898      	adds	r0, r3, r2
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	18d3      	adds	r3, r2, r3
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	001a      	movs	r2, r3
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <uint8ArrayToString+0x44>)
 8005232:	0019      	movs	r1, r3
 8005234:	f020 f938 	bl	80254a8 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b0b      	cmp	r3, #11
 8005242:	ddeb      	ble.n	800521c <uint8ArrayToString+0x10>
  }
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	0802a014 	.word	0x0802a014

08005254 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	b089      	sub	sp, #36	@ 0x24
 8005258:	af04      	add	r7, sp, #16
 800525a:	6039      	str	r1, [r7, #0]
 800525c:	0011      	movs	r1, r2
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	1c02      	adds	r2, r0, #0
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	1dbb      	adds	r3, r7, #6
 8005266:	1c0a      	adds	r2, r1, #0
 8005268:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800526a:	f7ff fbb1 	bl	80049d0 <checkName>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d00a      	beq.n	8005288 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005272:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <CreateMessage+0x2c>)
 8005274:	4803      	ldr	r0, [pc, #12]	@ (8005284 <CreateMessage+0x30>)
 8005276:	2220      	movs	r2, #32
 8005278:	0019      	movs	r1, r3
 800527a:	f006 fa5b 	bl	800b734 <ReadUint8ArrayEEprom>
 800527e:	e009      	b.n	8005294 <CreateMessage+0x40>
 8005280:	2000071c 	.word	0x2000071c
 8005284:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8005288:	4bed      	ldr	r3, [pc, #948]	@ (8005640 <CreateMessage+0x3ec>)
 800528a:	4aee      	ldr	r2, [pc, #952]	@ (8005644 <CreateMessage+0x3f0>)
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	6019      	str	r1, [r3, #0]
 8005290:	7912      	ldrb	r2, [r2, #4]
 8005292:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8005294:	f7ff fb42 	bl	800491c <setCharges>
  uint16_t index = 0;
 8005298:	260e      	movs	r6, #14
 800529a:	19bb      	adds	r3, r7, r6
 800529c:	2200      	movs	r2, #0
 800529e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80052a0:	19bb      	adds	r3, r7, r6
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	4be8      	ldr	r3, [pc, #928]	@ (8005648 <CreateMessage+0x3f4>)
 80052a6:	18d3      	adds	r3, r2, r3
 80052a8:	4ae8      	ldr	r2, [pc, #928]	@ (800564c <CreateMessage+0x3f8>)
 80052aa:	0011      	movs	r1, r2
 80052ac:	0018      	movs	r0, r3
 80052ae:	f020 f8fb 	bl	80254a8 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80052b2:	4be7      	ldr	r3, [pc, #924]	@ (8005650 <CreateMessage+0x3fc>)
 80052b4:	48e7      	ldr	r0, [pc, #924]	@ (8005654 <CreateMessage+0x400>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	0019      	movs	r1, r3
 80052ba:	f006 fa3b 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80052be:	4ae4      	ldr	r2, [pc, #912]	@ (8005650 <CreateMessage+0x3fc>)
 80052c0:	4be5      	ldr	r3, [pc, #916]	@ (8005658 <CreateMessage+0x404>)
 80052c2:	0011      	movs	r1, r2
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff ffa1 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 80052ca:	4be4      	ldr	r3, [pc, #912]	@ (800565c <CreateMessage+0x408>)
 80052cc:	689c      	ldr	r4, [r3, #8]
 80052ce:	4be4      	ldr	r3, [pc, #912]	@ (8005660 <CreateMessage+0x40c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c18      	adds	r0, r3, #0
 80052d4:	f7fe fade 	bl	8003894 <__aeabi_f2d>
 80052d8:	0002      	movs	r2, r0
 80052da:	000b      	movs	r3, r1
 80052dc:	4dd8      	ldr	r5, [pc, #864]	@ (8005640 <CreateMessage+0x3ec>)
 80052de:	49e1      	ldr	r1, [pc, #900]	@ (8005664 <CreateMessage+0x410>)
 80052e0:	48e1      	ldr	r0, [pc, #900]	@ (8005668 <CreateMessage+0x414>)
 80052e2:	9202      	str	r2, [sp, #8]
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	4bdc      	ldr	r3, [pc, #880]	@ (8005658 <CreateMessage+0x404>)
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	002b      	movs	r3, r5
 80052ec:	0022      	movs	r2, r4
 80052ee:	f020 f8db 	bl	80254a8 <siprintf>
#endif
index = strlen(message);
 80052f2:	4bd5      	ldr	r3, [pc, #852]	@ (8005648 <CreateMessage+0x3f4>)
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fa ff39 	bl	800016c <strlen>
 80052fa:	0002      	movs	r2, r0
 80052fc:	19bb      	adds	r3, r7, r6
 80052fe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005300:	1dbb      	adds	r3, r7, #6
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005308:	4bcf      	ldr	r3, [pc, #828]	@ (8005648 <CreateMessage+0x3f4>)
 800530a:	0018      	movs	r0, r3
 800530c:	f7fa ff2e 	bl	800016c <strlen>
 8005310:	0003      	movs	r3, r0
 8005312:	b29a      	uxth	r2, r3
 8005314:	4bcc      	ldr	r3, [pc, #816]	@ (8005648 <CreateMessage+0x3f4>)
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7ff fd97 	bl	8004e4c <ESP_Send>
 800531e:	0003      	movs	r3, r0
 8005320:	001a      	movs	r2, r3
 8005322:	4bd2      	ldr	r3, [pc, #840]	@ (800566c <CreateMessage+0x418>)
 8005324:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005326:	4bd2      	ldr	r3, [pc, #840]	@ (8005670 <CreateMessage+0x41c>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	001a      	movs	r2, r3
 800532c:	4bcf      	ldr	r3, [pc, #828]	@ (800566c <CreateMessage+0x418>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4013      	ands	r3, r2
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	4193      	sbcs	r3, r2
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4bcd      	ldr	r3, [pc, #820]	@ (8005670 <CreateMessage+0x41c>)
 800533a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800533c:	4bc4      	ldr	r3, [pc, #784]	@ (8005650 <CreateMessage+0x3fc>)
 800533e:	48cd      	ldr	r0, [pc, #820]	@ (8005674 <CreateMessage+0x420>)
 8005340:	220c      	movs	r2, #12
 8005342:	0019      	movs	r1, r3
 8005344:	f006 f9f6 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005348:	4ac1      	ldr	r2, [pc, #772]	@ (8005650 <CreateMessage+0x3fc>)
 800534a:	4bc3      	ldr	r3, [pc, #780]	@ (8005658 <CreateMessage+0x404>)
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff ff5c 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8005354:	4bc1      	ldr	r3, [pc, #772]	@ (800565c <CreateMessage+0x408>)
 8005356:	689c      	ldr	r4, [r3, #8]
 8005358:	4bc1      	ldr	r3, [pc, #772]	@ (8005660 <CreateMessage+0x40c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	1c18      	adds	r0, r3, #0
 800535e:	f7fe fa99 	bl	8003894 <__aeabi_f2d>
 8005362:	0002      	movs	r2, r0
 8005364:	000b      	movs	r3, r1
 8005366:	4db6      	ldr	r5, [pc, #728]	@ (8005640 <CreateMessage+0x3ec>)
 8005368:	49c3      	ldr	r1, [pc, #780]	@ (8005678 <CreateMessage+0x424>)
 800536a:	48b7      	ldr	r0, [pc, #732]	@ (8005648 <CreateMessage+0x3f4>)
 800536c:	9202      	str	r2, [sp, #8]
 800536e:	9303      	str	r3, [sp, #12]
 8005370:	4bb9      	ldr	r3, [pc, #740]	@ (8005658 <CreateMessage+0x404>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	002b      	movs	r3, r5
 8005376:	0022      	movs	r2, r4
 8005378:	f020 f896 	bl	80254a8 <siprintf>
#endif
  index += strlen(message);
 800537c:	4bb2      	ldr	r3, [pc, #712]	@ (8005648 <CreateMessage+0x3f4>)
 800537e:	0018      	movs	r0, r3
 8005380:	f7fa fef4 	bl	800016c <strlen>
 8005384:	0003      	movs	r3, r0
 8005386:	b299      	uxth	r1, r3
 8005388:	220e      	movs	r2, #14
 800538a:	18bb      	adds	r3, r7, r2
 800538c:	18ba      	adds	r2, r7, r2
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	188a      	adds	r2, r1, r2
 8005392:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005394:	1dbb      	adds	r3, r7, #6
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d019      	beq.n	80053d0 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800539c:	4baa      	ldr	r3, [pc, #680]	@ (8005648 <CreateMessage+0x3f4>)
 800539e:	0018      	movs	r0, r3
 80053a0:	f7fa fee4 	bl	800016c <strlen>
 80053a4:	0003      	movs	r3, r0
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	4ba7      	ldr	r3, [pc, #668]	@ (8005648 <CreateMessage+0x3f4>)
 80053aa:	0011      	movs	r1, r2
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff fd4d 	bl	8004e4c <ESP_Send>
 80053b2:	0003      	movs	r3, r0
 80053b4:	001a      	movs	r2, r3
 80053b6:	4bad      	ldr	r3, [pc, #692]	@ (800566c <CreateMessage+0x418>)
 80053b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053ba:	4bad      	ldr	r3, [pc, #692]	@ (8005670 <CreateMessage+0x41c>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	001a      	movs	r2, r3
 80053c0:	4baa      	ldr	r3, [pc, #680]	@ (800566c <CreateMessage+0x418>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4013      	ands	r3, r2
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	4193      	sbcs	r3, r2
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005670 <CreateMessage+0x41c>)
 80053ce:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80053d0:	4b9f      	ldr	r3, [pc, #636]	@ (8005650 <CreateMessage+0x3fc>)
 80053d2:	48aa      	ldr	r0, [pc, #680]	@ (800567c <CreateMessage+0x428>)
 80053d4:	220c      	movs	r2, #12
 80053d6:	0019      	movs	r1, r3
 80053d8:	f006 f9ac 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80053dc:	4a9c      	ldr	r2, [pc, #624]	@ (8005650 <CreateMessage+0x3fc>)
 80053de:	4b9e      	ldr	r3, [pc, #632]	@ (8005658 <CreateMessage+0x404>)
 80053e0:	0011      	movs	r1, r2
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff ff12 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 80053e8:	4b9c      	ldr	r3, [pc, #624]	@ (800565c <CreateMessage+0x408>)
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005660 <CreateMessage+0x40c>)
 80053ee:	2148      	movs	r1, #72	@ 0x48
 80053f0:	5a5b      	ldrh	r3, [r3, r1]
 80053f2:	4c93      	ldr	r4, [pc, #588]	@ (8005640 <CreateMessage+0x3ec>)
 80053f4:	49a2      	ldr	r1, [pc, #648]	@ (8005680 <CreateMessage+0x42c>)
 80053f6:	4894      	ldr	r0, [pc, #592]	@ (8005648 <CreateMessage+0x3f4>)
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	4b97      	ldr	r3, [pc, #604]	@ (8005658 <CreateMessage+0x404>)
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	0023      	movs	r3, r4
 8005400:	f020 f852 	bl	80254a8 <siprintf>
#endif
  index += strlen(message);
 8005404:	4b90      	ldr	r3, [pc, #576]	@ (8005648 <CreateMessage+0x3f4>)
 8005406:	0018      	movs	r0, r3
 8005408:	f7fa feb0 	bl	800016c <strlen>
 800540c:	0003      	movs	r3, r0
 800540e:	b299      	uxth	r1, r3
 8005410:	220e      	movs	r2, #14
 8005412:	18bb      	adds	r3, r7, r2
 8005414:	18ba      	adds	r2, r7, r2
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	188a      	adds	r2, r1, r2
 800541a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d019      	beq.n	8005458 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005424:	4b88      	ldr	r3, [pc, #544]	@ (8005648 <CreateMessage+0x3f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fa fea0 	bl	800016c <strlen>
 800542c:	0003      	movs	r3, r0
 800542e:	b29a      	uxth	r2, r3
 8005430:	4b85      	ldr	r3, [pc, #532]	@ (8005648 <CreateMessage+0x3f4>)
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fd09 	bl	8004e4c <ESP_Send>
 800543a:	0003      	movs	r3, r0
 800543c:	001a      	movs	r2, r3
 800543e:	4b8b      	ldr	r3, [pc, #556]	@ (800566c <CreateMessage+0x418>)
 8005440:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005442:	4b8b      	ldr	r3, [pc, #556]	@ (8005670 <CreateMessage+0x41c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	001a      	movs	r2, r3
 8005448:	4b88      	ldr	r3, [pc, #544]	@ (800566c <CreateMessage+0x418>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4013      	ands	r3, r2
 800544e:	1e5a      	subs	r2, r3, #1
 8005450:	4193      	sbcs	r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b86      	ldr	r3, [pc, #536]	@ (8005670 <CreateMessage+0x41c>)
 8005456:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 8005458:	f007 faaa 	bl	800c9b0 <IsBMP280SensorPresent>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d100      	bne.n	8005462 <CreateMessage+0x20e>
 8005460:	e0ab      	b.n	80055ba <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005462:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <CreateMessage+0x3fc>)
 8005464:	4887      	ldr	r0, [pc, #540]	@ (8005684 <CreateMessage+0x430>)
 8005466:	220c      	movs	r2, #12
 8005468:	0019      	movs	r1, r3
 800546a:	f006 f963 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800546e:	4a86      	ldr	r2, [pc, #536]	@ (8005688 <CreateMessage+0x434>)
 8005470:	4986      	ldr	r1, [pc, #536]	@ (800568c <CreateMessage+0x438>)
 8005472:	4b77      	ldr	r3, [pc, #476]	@ (8005650 <CreateMessage+0x3fc>)
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff fe91 	bl	800519c <isKeyValid>
 800547a:	1e03      	subs	r3, r0, #0
 800547c:	d04b      	beq.n	8005516 <CreateMessage+0x2c2>
 800547e:	4b78      	ldr	r3, [pc, #480]	@ (8005660 <CreateMessage+0x40c>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	2100      	movs	r1, #0
 8005484:	1c18      	adds	r0, r3, #0
 8005486:	f7fb f84d 	bl	8000524 <__aeabi_fcmpeq>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d143      	bne.n	8005516 <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 800548e:	4a70      	ldr	r2, [pc, #448]	@ (8005650 <CreateMessage+0x3fc>)
 8005490:	4b71      	ldr	r3, [pc, #452]	@ (8005658 <CreateMessage+0x404>)
 8005492:	0011      	movs	r1, r2
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff feb9 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
 800549a:	4b70      	ldr	r3, [pc, #448]	@ (800565c <CreateMessage+0x408>)
 800549c:	689c      	ldr	r4, [r3, #8]
 800549e:	4b70      	ldr	r3, [pc, #448]	@ (8005660 <CreateMessage+0x40c>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	1c18      	adds	r0, r3, #0
 80054a4:	f7fe f9f6 	bl	8003894 <__aeabi_f2d>
 80054a8:	0002      	movs	r2, r0
 80054aa:	000b      	movs	r3, r1
 80054ac:	4d64      	ldr	r5, [pc, #400]	@ (8005640 <CreateMessage+0x3ec>)
 80054ae:	4978      	ldr	r1, [pc, #480]	@ (8005690 <CreateMessage+0x43c>)
 80054b0:	4865      	ldr	r0, [pc, #404]	@ (8005648 <CreateMessage+0x3f4>)
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	4b68      	ldr	r3, [pc, #416]	@ (8005658 <CreateMessage+0x404>)
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	002b      	movs	r3, r5
 80054bc:	0022      	movs	r2, r4
 80054be:	f01f fff3 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 80054c2:	4b61      	ldr	r3, [pc, #388]	@ (8005648 <CreateMessage+0x3f4>)
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7fa fe51 	bl	800016c <strlen>
 80054ca:	0003      	movs	r3, r0
 80054cc:	b299      	uxth	r1, r3
 80054ce:	220e      	movs	r2, #14
 80054d0:	18bb      	adds	r3, r7, r2
 80054d2:	18ba      	adds	r2, r7, r2
 80054d4:	8812      	ldrh	r2, [r2, #0]
 80054d6:	188a      	adds	r2, r1, r2
 80054d8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054da:	1dbb      	adds	r3, r7, #6
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <CreateMessage+0x3f4>)
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fa fe41 	bl	800016c <strlen>
 80054ea:	0003      	movs	r3, r0
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	4b56      	ldr	r3, [pc, #344]	@ (8005648 <CreateMessage+0x3f4>)
 80054f0:	0011      	movs	r1, r2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7ff fcaa 	bl	8004e4c <ESP_Send>
 80054f8:	0003      	movs	r3, r0
 80054fa:	001a      	movs	r2, r3
 80054fc:	4b5b      	ldr	r3, [pc, #364]	@ (800566c <CreateMessage+0x418>)
 80054fe:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005500:	4b5b      	ldr	r3, [pc, #364]	@ (8005670 <CreateMessage+0x41c>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	001a      	movs	r2, r3
 8005506:	4b59      	ldr	r3, [pc, #356]	@ (800566c <CreateMessage+0x418>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	4013      	ands	r3, r2
 800550c:	1e5a      	subs	r2, r3, #1
 800550e:	4193      	sbcs	r3, r2
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b57      	ldr	r3, [pc, #348]	@ (8005670 <CreateMessage+0x41c>)
 8005514:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005516:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <CreateMessage+0x3fc>)
 8005518:	485e      	ldr	r0, [pc, #376]	@ (8005694 <CreateMessage+0x440>)
 800551a:	220c      	movs	r2, #12
 800551c:	0019      	movs	r1, r3
 800551e:	f006 f909 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005522:	4a5d      	ldr	r2, [pc, #372]	@ (8005698 <CreateMessage+0x444>)
 8005524:	4959      	ldr	r1, [pc, #356]	@ (800568c <CreateMessage+0x438>)
 8005526:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <CreateMessage+0x3fc>)
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fe37 	bl	800519c <isKeyValid>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d043      	beq.n	80055ba <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 8005532:	4a47      	ldr	r2, [pc, #284]	@ (8005650 <CreateMessage+0x3fc>)
 8005534:	4b48      	ldr	r3, [pc, #288]	@ (8005658 <CreateMessage+0x404>)
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f7ff fe67 	bl	800520c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
 800553e:	4b47      	ldr	r3, [pc, #284]	@ (800565c <CreateMessage+0x408>)
 8005540:	689c      	ldr	r4, [r3, #8]
 8005542:	4b47      	ldr	r3, [pc, #284]	@ (8005660 <CreateMessage+0x40c>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	1c18      	adds	r0, r3, #0
 8005548:	f7fe f9a4 	bl	8003894 <__aeabi_f2d>
 800554c:	0002      	movs	r2, r0
 800554e:	000b      	movs	r3, r1
 8005550:	4d3b      	ldr	r5, [pc, #236]	@ (8005640 <CreateMessage+0x3ec>)
 8005552:	4952      	ldr	r1, [pc, #328]	@ (800569c <CreateMessage+0x448>)
 8005554:	483c      	ldr	r0, [pc, #240]	@ (8005648 <CreateMessage+0x3f4>)
 8005556:	9202      	str	r2, [sp, #8]
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <CreateMessage+0x404>)
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	002b      	movs	r3, r5
 8005560:	0022      	movs	r2, r4
 8005562:	f01f ffa1 	bl	80254a8 <siprintf>
  #endif
      index += strlen(message);
 8005566:	4b38      	ldr	r3, [pc, #224]	@ (8005648 <CreateMessage+0x3f4>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fa fdff 	bl	800016c <strlen>
 800556e:	0003      	movs	r3, r0
 8005570:	b299      	uxth	r1, r3
 8005572:	220e      	movs	r2, #14
 8005574:	18bb      	adds	r3, r7, r2
 8005576:	18ba      	adds	r2, r7, r2
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	188a      	adds	r2, r1, r2
 800557c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800557e:	1dbb      	adds	r3, r7, #6
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d019      	beq.n	80055ba <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005586:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <CreateMessage+0x3f4>)
 8005588:	0018      	movs	r0, r3
 800558a:	f7fa fdef 	bl	800016c <strlen>
 800558e:	0003      	movs	r3, r0
 8005590:	b29a      	uxth	r2, r3
 8005592:	4b2d      	ldr	r3, [pc, #180]	@ (8005648 <CreateMessage+0x3f4>)
 8005594:	0011      	movs	r1, r2
 8005596:	0018      	movs	r0, r3
 8005598:	f7ff fc58 	bl	8004e4c <ESP_Send>
 800559c:	0003      	movs	r3, r0
 800559e:	001a      	movs	r2, r3
 80055a0:	4b32      	ldr	r3, [pc, #200]	@ (800566c <CreateMessage+0x418>)
 80055a2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055a4:	4b32      	ldr	r3, [pc, #200]	@ (8005670 <CreateMessage+0x41c>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	001a      	movs	r2, r3
 80055aa:	4b30      	ldr	r3, [pc, #192]	@ (800566c <CreateMessage+0x418>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	4013      	ands	r3, r2
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	4193      	sbcs	r3, r2
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005670 <CreateMessage+0x41c>)
 80055b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80055ba:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <CreateMessage+0x3fc>)
 80055bc:	4838      	ldr	r0, [pc, #224]	@ (80056a0 <CreateMessage+0x44c>)
 80055be:	220c      	movs	r2, #12
 80055c0:	0019      	movs	r1, r3
 80055c2:	f006 f8b7 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055c6:	4a22      	ldr	r2, [pc, #136]	@ (8005650 <CreateMessage+0x3fc>)
 80055c8:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <CreateMessage+0x404>)
 80055ca:	0011      	movs	r1, r2
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7ff fe1d 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80055d2:	4b22      	ldr	r3, [pc, #136]	@ (800565c <CreateMessage+0x408>)
 80055d4:	689c      	ldr	r4, [r3, #8]
 80055d6:	4b22      	ldr	r3, [pc, #136]	@ (8005660 <CreateMessage+0x40c>)
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	1c18      	adds	r0, r3, #0
 80055dc:	f7fe f95a 	bl	8003894 <__aeabi_f2d>
 80055e0:	0002      	movs	r2, r0
 80055e2:	000b      	movs	r3, r1
 80055e4:	4d16      	ldr	r5, [pc, #88]	@ (8005640 <CreateMessage+0x3ec>)
 80055e6:	492f      	ldr	r1, [pc, #188]	@ (80056a4 <CreateMessage+0x450>)
 80055e8:	4817      	ldr	r0, [pc, #92]	@ (8005648 <CreateMessage+0x3f4>)
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	9303      	str	r3, [sp, #12]
 80055ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <CreateMessage+0x404>)
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	002b      	movs	r3, r5
 80055f4:	0022      	movs	r2, r4
 80055f6:	f01f ff57 	bl	80254a8 <siprintf>
#endif
  index += strlen(message);
 80055fa:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <CreateMessage+0x3f4>)
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7fa fdb5 	bl	800016c <strlen>
 8005602:	0003      	movs	r3, r0
 8005604:	b299      	uxth	r1, r3
 8005606:	220e      	movs	r2, #14
 8005608:	18bb      	adds	r3, r7, r2
 800560a:	18ba      	adds	r2, r7, r2
 800560c:	8812      	ldrh	r2, [r2, #0]
 800560e:	188a      	adds	r2, r1, r2
 8005610:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005612:	1dbb      	adds	r3, r7, #6
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d04e      	beq.n	80056b8 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <CreateMessage+0x3f4>)
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa fda5 	bl	800016c <strlen>
 8005622:	0003      	movs	r3, r0
 8005624:	b29a      	uxth	r2, r3
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <CreateMessage+0x3f4>)
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff fc0e 	bl	8004e4c <ESP_Send>
 8005630:	0003      	movs	r3, r0
 8005632:	001a      	movs	r2, r3
 8005634:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <CreateMessage+0x418>)
 8005636:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005638:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <CreateMessage+0x41c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	001a      	movs	r2, r3
 800563e:	e033      	b.n	80056a8 <CreateMessage+0x454>
 8005640:	2000071c 	.word	0x2000071c
 8005644:	0802d814 	.word	0x0802d814
 8005648:	200005cc 	.word	0x200005cc
 800564c:	0802a020 	.word	0x0802a020
 8005650:	2000073c 	.word	0x2000073c
 8005654:	0808000c 	.word	0x0808000c
 8005658:	20000748 	.word	0x20000748
 800565c:	200005ac 	.word	0x200005ac
 8005660:	2000067c 	.word	0x2000067c
 8005664:	0802a024 	.word	0x0802a024
 8005668:	200005cd 	.word	0x200005cd
 800566c:	20000761 	.word	0x20000761
 8005670:	2000002d 	.word	0x2000002d
 8005674:	08080018 	.word	0x08080018
 8005678:	0802a078 	.word	0x0802a078
 800567c:	08080030 	.word	0x08080030
 8005680:	0802a0d0 	.word	0x0802a0d0
 8005684:	0808003c 	.word	0x0808003c
 8005688:	0802a124 	.word	0x0802a124
 800568c:	0802a128 	.word	0x0802a128
 8005690:	0802a130 	.word	0x0802a130
 8005694:	080800e0 	.word	0x080800e0
 8005698:	0802a18c 	.word	0x0802a18c
 800569c:	0802a198 	.word	0x0802a198
 80056a0:	08080048 	.word	0x08080048
 80056a4:	0802a1f4 	.word	0x0802a1f4
 80056a8:	4be8      	ldr	r3, [pc, #928]	@ (8005a4c <CreateMessage+0x7f8>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4013      	ands	r3, r2
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	4193      	sbcs	r3, r2
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4be6      	ldr	r3, [pc, #920]	@ (8005a50 <CreateMessage+0x7fc>)
 80056b6:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 80056b8:	1dfb      	adds	r3, r7, #7
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	4053      	eors	r3, r2
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d100      	bne.n	80056c8 <CreateMessage+0x474>
 80056c6:	e2bd      	b.n	8005c44 <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80056c8:	4be2      	ldr	r3, [pc, #904]	@ (8005a54 <CreateMessage+0x800>)
 80056ca:	48e3      	ldr	r0, [pc, #908]	@ (8005a58 <CreateMessage+0x804>)
 80056cc:	220c      	movs	r2, #12
 80056ce:	0019      	movs	r1, r3
 80056d0:	f006 f830 	bl	800b734 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 80056d4:	4adf      	ldr	r2, [pc, #892]	@ (8005a54 <CreateMessage+0x800>)
 80056d6:	4be1      	ldr	r3, [pc, #900]	@ (8005a5c <CreateMessage+0x808>)
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f7ff fd96 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 80056e0:	4bdf      	ldr	r3, [pc, #892]	@ (8005a60 <CreateMessage+0x80c>)
 80056e2:	689c      	ldr	r4, [r3, #8]
 80056e4:	4bdf      	ldr	r3, [pc, #892]	@ (8005a64 <CreateMessage+0x810>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	1c18      	adds	r0, r3, #0
 80056ea:	f7fe f8d3 	bl	8003894 <__aeabi_f2d>
 80056ee:	0002      	movs	r2, r0
 80056f0:	000b      	movs	r3, r1
 80056f2:	4ddd      	ldr	r5, [pc, #884]	@ (8005a68 <CreateMessage+0x814>)
 80056f4:	49dd      	ldr	r1, [pc, #884]	@ (8005a6c <CreateMessage+0x818>)
 80056f6:	48de      	ldr	r0, [pc, #888]	@ (8005a70 <CreateMessage+0x81c>)
 80056f8:	9202      	str	r2, [sp, #8]
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	4bd7      	ldr	r3, [pc, #860]	@ (8005a5c <CreateMessage+0x808>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	002b      	movs	r3, r5
 8005702:	0022      	movs	r2, r4
 8005704:	f01f fed0 	bl	80254a8 <siprintf>
#endif
    index += strlen(message);
 8005708:	4bd9      	ldr	r3, [pc, #868]	@ (8005a70 <CreateMessage+0x81c>)
 800570a:	0018      	movs	r0, r3
 800570c:	f7fa fd2e 	bl	800016c <strlen>
 8005710:	0003      	movs	r3, r0
 8005712:	b299      	uxth	r1, r3
 8005714:	220e      	movs	r2, #14
 8005716:	18bb      	adds	r3, r7, r2
 8005718:	18ba      	adds	r2, r7, r2
 800571a:	8812      	ldrh	r2, [r2, #0]
 800571c:	188a      	adds	r2, r1, r2
 800571e:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005720:	1dbb      	adds	r3, r7, #6
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005728:	4bd1      	ldr	r3, [pc, #836]	@ (8005a70 <CreateMessage+0x81c>)
 800572a:	0018      	movs	r0, r3
 800572c:	f7fa fd1e 	bl	800016c <strlen>
 8005730:	0003      	movs	r3, r0
 8005732:	b29a      	uxth	r2, r3
 8005734:	4bce      	ldr	r3, [pc, #824]	@ (8005a70 <CreateMessage+0x81c>)
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fb87 	bl	8004e4c <ESP_Send>
 800573e:	0003      	movs	r3, r0
 8005740:	001a      	movs	r2, r3
 8005742:	4bc2      	ldr	r3, [pc, #776]	@ (8005a4c <CreateMessage+0x7f8>)
 8005744:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005746:	4bc2      	ldr	r3, [pc, #776]	@ (8005a50 <CreateMessage+0x7fc>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	001a      	movs	r2, r3
 800574c:	4bbf      	ldr	r3, [pc, #764]	@ (8005a4c <CreateMessage+0x7f8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4013      	ands	r3, r2
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	4193      	sbcs	r3, r2
 8005756:	b2da      	uxtb	r2, r3
 8005758:	4bbd      	ldr	r3, [pc, #756]	@ (8005a50 <CreateMessage+0x7fc>)
 800575a:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 800575c:	4bc5      	ldr	r3, [pc, #788]	@ (8005a74 <CreateMessage+0x820>)
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	2b35      	cmp	r3, #53	@ 0x35
 8005762:	d147      	bne.n	80057f4 <CreateMessage+0x5a0>
 8005764:	f003 fd76 	bl	8009254 <Check_USB_PowerOn>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d043      	beq.n	80057f4 <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 800576c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a54 <CreateMessage+0x800>)
 800576e:	48c2      	ldr	r0, [pc, #776]	@ (8005a78 <CreateMessage+0x824>)
 8005770:	220c      	movs	r2, #12
 8005772:	0019      	movs	r1, r3
 8005774:	f005 ffde 	bl	800b734 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005778:	4ab6      	ldr	r2, [pc, #728]	@ (8005a54 <CreateMessage+0x800>)
 800577a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a5c <CreateMessage+0x808>)
 800577c:	0011      	movs	r1, r2
 800577e:	0018      	movs	r0, r3
 8005780:	f7ff fd44 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8005784:	4bb6      	ldr	r3, [pc, #728]	@ (8005a60 <CreateMessage+0x80c>)
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	4bbc      	ldr	r3, [pc, #752]	@ (8005a7c <CreateMessage+0x828>)
 800578a:	214e      	movs	r1, #78	@ 0x4e
 800578c:	5a5b      	ldrh	r3, [r3, r1]
 800578e:	4cb6      	ldr	r4, [pc, #728]	@ (8005a68 <CreateMessage+0x814>)
 8005790:	49bb      	ldr	r1, [pc, #748]	@ (8005a80 <CreateMessage+0x82c>)
 8005792:	48b7      	ldr	r0, [pc, #732]	@ (8005a70 <CreateMessage+0x81c>)
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	4bb1      	ldr	r3, [pc, #708]	@ (8005a5c <CreateMessage+0x808>)
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	0023      	movs	r3, r4
 800579c:	f01f fe84 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 80057a0:	4bb3      	ldr	r3, [pc, #716]	@ (8005a70 <CreateMessage+0x81c>)
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fa fce2 	bl	800016c <strlen>
 80057a8:	0003      	movs	r3, r0
 80057aa:	b299      	uxth	r1, r3
 80057ac:	220e      	movs	r2, #14
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	18ba      	adds	r2, r7, r2
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	188a      	adds	r2, r1, r2
 80057b6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057b8:	1dbb      	adds	r3, r7, #6
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057c0:	4bab      	ldr	r3, [pc, #684]	@ (8005a70 <CreateMessage+0x81c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fcd2 	bl	800016c <strlen>
 80057c8:	0003      	movs	r3, r0
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005a70 <CreateMessage+0x81c>)
 80057ce:	0011      	movs	r1, r2
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fb3b 	bl	8004e4c <ESP_Send>
 80057d6:	0003      	movs	r3, r0
 80057d8:	001a      	movs	r2, r3
 80057da:	4b9c      	ldr	r3, [pc, #624]	@ (8005a4c <CreateMessage+0x7f8>)
 80057dc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80057de:	4b9c      	ldr	r3, [pc, #624]	@ (8005a50 <CreateMessage+0x7fc>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	001a      	movs	r2, r3
 80057e4:	4b99      	ldr	r3, [pc, #612]	@ (8005a4c <CreateMessage+0x7f8>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b97      	ldr	r3, [pc, #604]	@ (8005a50 <CreateMessage+0x7fc>)
 80057f2:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 80057f4:	4b97      	ldr	r3, [pc, #604]	@ (8005a54 <CreateMessage+0x800>)
 80057f6:	48a3      	ldr	r0, [pc, #652]	@ (8005a84 <CreateMessage+0x830>)
 80057f8:	220c      	movs	r2, #12
 80057fa:	0019      	movs	r1, r3
 80057fc:	f005 ff9a 	bl	800b734 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005800:	4b9c      	ldr	r3, [pc, #624]	@ (8005a74 <CreateMessage+0x820>)
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b34      	cmp	r3, #52	@ 0x34
 8005806:	d003      	beq.n	8005810 <CreateMessage+0x5bc>
 8005808:	4b9a      	ldr	r3, [pc, #616]	@ (8005a74 <CreateMessage+0x820>)
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b35      	cmp	r3, #53	@ 0x35
 800580e:	d14b      	bne.n	80058a8 <CreateMessage+0x654>
 8005810:	4a9d      	ldr	r2, [pc, #628]	@ (8005a88 <CreateMessage+0x834>)
 8005812:	499e      	ldr	r1, [pc, #632]	@ (8005a8c <CreateMessage+0x838>)
 8005814:	4b8f      	ldr	r3, [pc, #572]	@ (8005a54 <CreateMessage+0x800>)
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fcc0 	bl	800519c <isKeyValid>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d043      	beq.n	80058a8 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 8005820:	4a8c      	ldr	r2, [pc, #560]	@ (8005a54 <CreateMessage+0x800>)
 8005822:	4b8e      	ldr	r3, [pc, #568]	@ (8005a5c <CreateMessage+0x808>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fcf0 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 800582c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a60 <CreateMessage+0x80c>)
 800582e:	689c      	ldr	r4, [r3, #8]
 8005830:	4b92      	ldr	r3, [pc, #584]	@ (8005a7c <CreateMessage+0x828>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	1c18      	adds	r0, r3, #0
 8005836:	f7fe f82d 	bl	8003894 <__aeabi_f2d>
 800583a:	0002      	movs	r2, r0
 800583c:	000b      	movs	r3, r1
 800583e:	4d8a      	ldr	r5, [pc, #552]	@ (8005a68 <CreateMessage+0x814>)
 8005840:	4993      	ldr	r1, [pc, #588]	@ (8005a90 <CreateMessage+0x83c>)
 8005842:	488b      	ldr	r0, [pc, #556]	@ (8005a70 <CreateMessage+0x81c>)
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9303      	str	r3, [sp, #12]
 8005848:	4b84      	ldr	r3, [pc, #528]	@ (8005a5c <CreateMessage+0x808>)
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	002b      	movs	r3, r5
 800584e:	0022      	movs	r2, r4
 8005850:	f01f fe2a 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005854:	4b86      	ldr	r3, [pc, #536]	@ (8005a70 <CreateMessage+0x81c>)
 8005856:	0018      	movs	r0, r3
 8005858:	f7fa fc88 	bl	800016c <strlen>
 800585c:	0003      	movs	r3, r0
 800585e:	b299      	uxth	r1, r3
 8005860:	220e      	movs	r2, #14
 8005862:	18bb      	adds	r3, r7, r2
 8005864:	18ba      	adds	r2, r7, r2
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	188a      	adds	r2, r1, r2
 800586a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800586c:	1dbb      	adds	r3, r7, #6
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005874:	4b7e      	ldr	r3, [pc, #504]	@ (8005a70 <CreateMessage+0x81c>)
 8005876:	0018      	movs	r0, r3
 8005878:	f7fa fc78 	bl	800016c <strlen>
 800587c:	0003      	movs	r3, r0
 800587e:	b29a      	uxth	r2, r3
 8005880:	4b7b      	ldr	r3, [pc, #492]	@ (8005a70 <CreateMessage+0x81c>)
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fae1 	bl	8004e4c <ESP_Send>
 800588a:	0003      	movs	r3, r0
 800588c:	001a      	movs	r2, r3
 800588e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a4c <CreateMessage+0x7f8>)
 8005890:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005892:	4b6f      	ldr	r3, [pc, #444]	@ (8005a50 <CreateMessage+0x7fc>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	001a      	movs	r2, r3
 8005898:	4b6c      	ldr	r3, [pc, #432]	@ (8005a4c <CreateMessage+0x7f8>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	4193      	sbcs	r3, r2
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a50 <CreateMessage+0x7fc>)
 80058a6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 80058a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a54 <CreateMessage+0x800>)
 80058aa:	487a      	ldr	r0, [pc, #488]	@ (8005a94 <CreateMessage+0x840>)
 80058ac:	220c      	movs	r2, #12
 80058ae:	0019      	movs	r1, r3
 80058b0:	f005 ff40 	bl	800b734 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 80058b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a74 <CreateMessage+0x820>)
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	2b34      	cmp	r3, #52	@ 0x34
 80058ba:	d003      	beq.n	80058c4 <CreateMessage+0x670>
 80058bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <CreateMessage+0x820>)
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	2b35      	cmp	r3, #53	@ 0x35
 80058c2:	d14b      	bne.n	800595c <CreateMessage+0x708>
 80058c4:	4a74      	ldr	r2, [pc, #464]	@ (8005a98 <CreateMessage+0x844>)
 80058c6:	4971      	ldr	r1, [pc, #452]	@ (8005a8c <CreateMessage+0x838>)
 80058c8:	4b62      	ldr	r3, [pc, #392]	@ (8005a54 <CreateMessage+0x800>)
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fc66 	bl	800519c <isKeyValid>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d043      	beq.n	800595c <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 80058d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a54 <CreateMessage+0x800>)
 80058d6:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <CreateMessage+0x808>)
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fc96 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 80058e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <CreateMessage+0x80c>)
 80058e2:	689c      	ldr	r4, [r3, #8]
 80058e4:	4b65      	ldr	r3, [pc, #404]	@ (8005a7c <CreateMessage+0x828>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	1c18      	adds	r0, r3, #0
 80058ea:	f7fd ffd3 	bl	8003894 <__aeabi_f2d>
 80058ee:	0002      	movs	r2, r0
 80058f0:	000b      	movs	r3, r1
 80058f2:	4d5d      	ldr	r5, [pc, #372]	@ (8005a68 <CreateMessage+0x814>)
 80058f4:	4969      	ldr	r1, [pc, #420]	@ (8005a9c <CreateMessage+0x848>)
 80058f6:	485e      	ldr	r0, [pc, #376]	@ (8005a70 <CreateMessage+0x81c>)
 80058f8:	9202      	str	r2, [sp, #8]
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	4b57      	ldr	r3, [pc, #348]	@ (8005a5c <CreateMessage+0x808>)
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	002b      	movs	r3, r5
 8005902:	0022      	movs	r2, r4
 8005904:	f01f fdd0 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005908:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <CreateMessage+0x81c>)
 800590a:	0018      	movs	r0, r3
 800590c:	f7fa fc2e 	bl	800016c <strlen>
 8005910:	0003      	movs	r3, r0
 8005912:	b299      	uxth	r1, r3
 8005914:	220e      	movs	r2, #14
 8005916:	18bb      	adds	r3, r7, r2
 8005918:	18ba      	adds	r2, r7, r2
 800591a:	8812      	ldrh	r2, [r2, #0]
 800591c:	188a      	adds	r2, r1, r2
 800591e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005920:	1dbb      	adds	r3, r7, #6
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005928:	4b51      	ldr	r3, [pc, #324]	@ (8005a70 <CreateMessage+0x81c>)
 800592a:	0018      	movs	r0, r3
 800592c:	f7fa fc1e 	bl	800016c <strlen>
 8005930:	0003      	movs	r3, r0
 8005932:	b29a      	uxth	r2, r3
 8005934:	4b4e      	ldr	r3, [pc, #312]	@ (8005a70 <CreateMessage+0x81c>)
 8005936:	0011      	movs	r1, r2
 8005938:	0018      	movs	r0, r3
 800593a:	f7ff fa87 	bl	8004e4c <ESP_Send>
 800593e:	0003      	movs	r3, r0
 8005940:	001a      	movs	r2, r3
 8005942:	4b42      	ldr	r3, [pc, #264]	@ (8005a4c <CreateMessage+0x7f8>)
 8005944:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005946:	4b42      	ldr	r3, [pc, #264]	@ (8005a50 <CreateMessage+0x7fc>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	001a      	movs	r2, r3
 800594c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a4c <CreateMessage+0x7f8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4013      	ands	r3, r2
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	4193      	sbcs	r3, r2
 8005956:	b2da      	uxtb	r2, r3
 8005958:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <CreateMessage+0x7fc>)
 800595a:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 800595c:	f008 f85e 	bl	800da1c <sen5x_Get_sen5x_enable_state>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d100      	bne.n	8005966 <CreateMessage+0x712>
 8005964:	e16e      	b.n	8005c44 <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <CreateMessage+0x800>)
 8005968:	484d      	ldr	r0, [pc, #308]	@ (8005aa0 <CreateMessage+0x84c>)
 800596a:	220c      	movs	r2, #12
 800596c:	0019      	movs	r1, r3
 800596e:	f005 fee1 	bl	800b734 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005972:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa4 <CreateMessage+0x850>)
 8005974:	494c      	ldr	r1, [pc, #304]	@ (8005aa8 <CreateMessage+0x854>)
 8005976:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <CreateMessage+0x800>)
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff fc0f 	bl	800519c <isKeyValid>
 800597e:	1e03      	subs	r3, r0, #0
 8005980:	d043      	beq.n	8005a0a <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 8005982:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <CreateMessage+0x800>)
 8005984:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <CreateMessage+0x808>)
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff fc3f 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 800598e:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <CreateMessage+0x80c>)
 8005990:	689c      	ldr	r4, [r3, #8]
 8005992:	4b3a      	ldr	r3, [pc, #232]	@ (8005a7c <CreateMessage+0x828>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	1c18      	adds	r0, r3, #0
 8005998:	f7fd ff7c 	bl	8003894 <__aeabi_f2d>
 800599c:	0002      	movs	r2, r0
 800599e:	000b      	movs	r3, r1
 80059a0:	4d31      	ldr	r5, [pc, #196]	@ (8005a68 <CreateMessage+0x814>)
 80059a2:	4942      	ldr	r1, [pc, #264]	@ (8005aac <CreateMessage+0x858>)
 80059a4:	4832      	ldr	r0, [pc, #200]	@ (8005a70 <CreateMessage+0x81c>)
 80059a6:	9202      	str	r2, [sp, #8]
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	4b2c      	ldr	r3, [pc, #176]	@ (8005a5c <CreateMessage+0x808>)
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	002b      	movs	r3, r5
 80059b0:	0022      	movs	r2, r4
 80059b2:	f01f fd79 	bl	80254a8 <siprintf>
#endif
        index += strlen(message);
 80059b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a70 <CreateMessage+0x81c>)
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fa fbd7 	bl	800016c <strlen>
 80059be:	0003      	movs	r3, r0
 80059c0:	b299      	uxth	r1, r3
 80059c2:	220e      	movs	r2, #14
 80059c4:	18bb      	adds	r3, r7, r2
 80059c6:	18ba      	adds	r2, r7, r2
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	188a      	adds	r2, r1, r2
 80059cc:	801a      	strh	r2, [r3, #0]
        if (send) {
 80059ce:	1dbb      	adds	r3, r7, #6
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d019      	beq.n	8005a0a <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 80059d6:	4b26      	ldr	r3, [pc, #152]	@ (8005a70 <CreateMessage+0x81c>)
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fa fbc7 	bl	800016c <strlen>
 80059de:	0003      	movs	r3, r0
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	4b23      	ldr	r3, [pc, #140]	@ (8005a70 <CreateMessage+0x81c>)
 80059e4:	0011      	movs	r1, r2
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7ff fa30 	bl	8004e4c <ESP_Send>
 80059ec:	0003      	movs	r3, r0
 80059ee:	001a      	movs	r2, r3
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <CreateMessage+0x7f8>)
 80059f2:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 80059f4:	4b16      	ldr	r3, [pc, #88]	@ (8005a50 <CreateMessage+0x7fc>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	001a      	movs	r2, r3
 80059fa:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <CreateMessage+0x7f8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	4013      	ands	r3, r2
 8005a00:	1e5a      	subs	r2, r3, #1
 8005a02:	4193      	sbcs	r3, r2
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <CreateMessage+0x7fc>)
 8005a08:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <CreateMessage+0x800>)
 8005a0c:	4828      	ldr	r0, [pc, #160]	@ (8005ab0 <CreateMessage+0x85c>)
 8005a0e:	220c      	movs	r2, #12
 8005a10:	0019      	movs	r1, r3
 8005a12:	f005 fe8f 	bl	800b734 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005a16:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <CreateMessage+0x800>)
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <CreateMessage+0x808>)
 8005a1a:	0011      	movs	r1, r2
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff fbf5 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <CreateMessage+0x80c>)
 8005a24:	689c      	ldr	r4, [r3, #8]
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <CreateMessage+0x828>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	1c18      	adds	r0, r3, #0
 8005a2c:	f7fd ff32 	bl	8003894 <__aeabi_f2d>
 8005a30:	0002      	movs	r2, r0
 8005a32:	000b      	movs	r3, r1
 8005a34:	4d0c      	ldr	r5, [pc, #48]	@ (8005a68 <CreateMessage+0x814>)
 8005a36:	491f      	ldr	r1, [pc, #124]	@ (8005ab4 <CreateMessage+0x860>)
 8005a38:	480d      	ldr	r0, [pc, #52]	@ (8005a70 <CreateMessage+0x81c>)
 8005a3a:	9202      	str	r2, [sp, #8]
 8005a3c:	9303      	str	r3, [sp, #12]
 8005a3e:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <CreateMessage+0x808>)
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	002b      	movs	r3, r5
 8005a44:	0022      	movs	r2, r4
 8005a46:	f01f fd2f 	bl	80254a8 <siprintf>
 8005a4a:	e035      	b.n	8005ab8 <CreateMessage+0x864>
 8005a4c:	20000761 	.word	0x20000761
 8005a50:	2000002d 	.word	0x2000002d
 8005a54:	2000073c 	.word	0x2000073c
 8005a58:	08080078 	.word	0x08080078
 8005a5c:	20000748 	.word	0x20000748
 8005a60:	200005ac 	.word	0x200005ac
 8005a64:	200005c8 	.word	0x200005c8
 8005a68:	2000071c 	.word	0x2000071c
 8005a6c:	0802a250 	.word	0x0802a250
 8005a70:	200005cc 	.word	0x200005cc
 8005a74:	20000ebc 	.word	0x20000ebc
 8005a78:	08080024 	.word	0x08080024
 8005a7c:	2000067c 	.word	0x2000067c
 8005a80:	0802a2b0 	.word	0x0802a2b0
 8005a84:	08080170 	.word	0x08080170
 8005a88:	0802a304 	.word	0x0802a304
 8005a8c:	0802a310 	.word	0x0802a310
 8005a90:	0802a318 	.word	0x0802a318
 8005a94:	0808017c 	.word	0x0808017c
 8005a98:	0802a374 	.word	0x0802a374
 8005a9c:	0802a380 	.word	0x0802a380
 8005aa0:	080800b0 	.word	0x080800b0
 8005aa4:	0802a3e0 	.word	0x0802a3e0
 8005aa8:	0802a3ec 	.word	0x0802a3ec
 8005aac:	0802a3f0 	.word	0x0802a3f0
 8005ab0:	08080054 	.word	0x08080054
 8005ab4:	0802a448 	.word	0x0802a448
#endif
      index += strlen(message);
 8005ab8:	4beb      	ldr	r3, [pc, #940]	@ (8005e68 <CreateMessage+0xc14>)
 8005aba:	0018      	movs	r0, r3
 8005abc:	f7fa fb56 	bl	800016c <strlen>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	b299      	uxth	r1, r3
 8005ac4:	220e      	movs	r2, #14
 8005ac6:	18bb      	adds	r3, r7, r2
 8005ac8:	18ba      	adds	r2, r7, r2
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	188a      	adds	r2, r1, r2
 8005ace:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ad0:	1dbb      	adds	r3, r7, #6
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d019      	beq.n	8005b0c <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ad8:	4be3      	ldr	r3, [pc, #908]	@ (8005e68 <CreateMessage+0xc14>)
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fa fb46 	bl	800016c <strlen>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	4be0      	ldr	r3, [pc, #896]	@ (8005e68 <CreateMessage+0xc14>)
 8005ae6:	0011      	movs	r1, r2
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff f9af 	bl	8004e4c <ESP_Send>
 8005aee:	0003      	movs	r3, r0
 8005af0:	001a      	movs	r2, r3
 8005af2:	4bde      	ldr	r3, [pc, #888]	@ (8005e6c <CreateMessage+0xc18>)
 8005af4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005af6:	4bde      	ldr	r3, [pc, #888]	@ (8005e70 <CreateMessage+0xc1c>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	001a      	movs	r2, r3
 8005afc:	4bdb      	ldr	r3, [pc, #876]	@ (8005e6c <CreateMessage+0xc18>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4013      	ands	r3, r2
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4bd9      	ldr	r3, [pc, #868]	@ (8005e70 <CreateMessage+0xc1c>)
 8005b0a:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005b0c:	4bd9      	ldr	r3, [pc, #868]	@ (8005e74 <CreateMessage+0xc20>)
 8005b0e:	48da      	ldr	r0, [pc, #872]	@ (8005e78 <CreateMessage+0xc24>)
 8005b10:	220c      	movs	r2, #12
 8005b12:	0019      	movs	r1, r3
 8005b14:	f005 fe0e 	bl	800b734 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005b18:	4ad8      	ldr	r2, [pc, #864]	@ (8005e7c <CreateMessage+0xc28>)
 8005b1a:	49d9      	ldr	r1, [pc, #868]	@ (8005e80 <CreateMessage+0xc2c>)
 8005b1c:	4bd5      	ldr	r3, [pc, #852]	@ (8005e74 <CreateMessage+0xc20>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7ff fb3c 	bl	800519c <isKeyValid>
 8005b24:	1e03      	subs	r3, r0, #0
 8005b26:	d043      	beq.n	8005bb0 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 8005b28:	4ad2      	ldr	r2, [pc, #840]	@ (8005e74 <CreateMessage+0xc20>)
 8005b2a:	4bd6      	ldr	r3, [pc, #856]	@ (8005e84 <CreateMessage+0xc30>)
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7ff fb6c 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005b34:	4bd4      	ldr	r3, [pc, #848]	@ (8005e88 <CreateMessage+0xc34>)
 8005b36:	689c      	ldr	r4, [r3, #8]
 8005b38:	4bd4      	ldr	r3, [pc, #848]	@ (8005e8c <CreateMessage+0xc38>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	1c18      	adds	r0, r3, #0
 8005b3e:	f7fd fea9 	bl	8003894 <__aeabi_f2d>
 8005b42:	0002      	movs	r2, r0
 8005b44:	000b      	movs	r3, r1
 8005b46:	4dd2      	ldr	r5, [pc, #840]	@ (8005e90 <CreateMessage+0xc3c>)
 8005b48:	49d2      	ldr	r1, [pc, #840]	@ (8005e94 <CreateMessage+0xc40>)
 8005b4a:	48c7      	ldr	r0, [pc, #796]	@ (8005e68 <CreateMessage+0xc14>)
 8005b4c:	9202      	str	r2, [sp, #8]
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	4bcc      	ldr	r3, [pc, #816]	@ (8005e84 <CreateMessage+0xc30>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	002b      	movs	r3, r5
 8005b56:	0022      	movs	r2, r4
 8005b58:	f01f fca6 	bl	80254a8 <siprintf>
#endif
        index += strlen(message);
 8005b5c:	4bc2      	ldr	r3, [pc, #776]	@ (8005e68 <CreateMessage+0xc14>)
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fa fb04 	bl	800016c <strlen>
 8005b64:	0003      	movs	r3, r0
 8005b66:	b299      	uxth	r1, r3
 8005b68:	220e      	movs	r2, #14
 8005b6a:	18bb      	adds	r3, r7, r2
 8005b6c:	18ba      	adds	r2, r7, r2
 8005b6e:	8812      	ldrh	r2, [r2, #0]
 8005b70:	188a      	adds	r2, r1, r2
 8005b72:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005b74:	1dbb      	adds	r3, r7, #6
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005b7c:	4bba      	ldr	r3, [pc, #744]	@ (8005e68 <CreateMessage+0xc14>)
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7fa faf4 	bl	800016c <strlen>
 8005b84:	0003      	movs	r3, r0
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	4bb7      	ldr	r3, [pc, #732]	@ (8005e68 <CreateMessage+0xc14>)
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff f95d 	bl	8004e4c <ESP_Send>
 8005b92:	0003      	movs	r3, r0
 8005b94:	001a      	movs	r2, r3
 8005b96:	4bb5      	ldr	r3, [pc, #724]	@ (8005e6c <CreateMessage+0xc18>)
 8005b98:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005b9a:	4bb5      	ldr	r3, [pc, #724]	@ (8005e70 <CreateMessage+0xc1c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	4bb2      	ldr	r3, [pc, #712]	@ (8005e6c <CreateMessage+0xc18>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	4193      	sbcs	r3, r2
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4bb0      	ldr	r3, [pc, #704]	@ (8005e70 <CreateMessage+0xc1c>)
 8005bae:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005bb0:	4bb0      	ldr	r3, [pc, #704]	@ (8005e74 <CreateMessage+0xc20>)
 8005bb2:	48b9      	ldr	r0, [pc, #740]	@ (8005e98 <CreateMessage+0xc44>)
 8005bb4:	220c      	movs	r2, #12
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	f005 fdbc 	bl	800b734 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005bbc:	4aad      	ldr	r2, [pc, #692]	@ (8005e74 <CreateMessage+0xc20>)
 8005bbe:	4bb1      	ldr	r3, [pc, #708]	@ (8005e84 <CreateMessage+0xc30>)
 8005bc0:	0011      	movs	r1, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7ff fb22 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005bc8:	4baf      	ldr	r3, [pc, #700]	@ (8005e88 <CreateMessage+0xc34>)
 8005bca:	689c      	ldr	r4, [r3, #8]
 8005bcc:	4baf      	ldr	r3, [pc, #700]	@ (8005e8c <CreateMessage+0xc38>)
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c18      	adds	r0, r3, #0
 8005bd2:	f7fd fe5f 	bl	8003894 <__aeabi_f2d>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	4dad      	ldr	r5, [pc, #692]	@ (8005e90 <CreateMessage+0xc3c>)
 8005bdc:	49af      	ldr	r1, [pc, #700]	@ (8005e9c <CreateMessage+0xc48>)
 8005bde:	48a2      	ldr	r0, [pc, #648]	@ (8005e68 <CreateMessage+0xc14>)
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	4ba7      	ldr	r3, [pc, #668]	@ (8005e84 <CreateMessage+0xc30>)
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	002b      	movs	r3, r5
 8005bea:	0022      	movs	r2, r4
 8005bec:	f01f fc5c 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005bf0:	4b9d      	ldr	r3, [pc, #628]	@ (8005e68 <CreateMessage+0xc14>)
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fa faba 	bl	800016c <strlen>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	b299      	uxth	r1, r3
 8005bfc:	220e      	movs	r2, #14
 8005bfe:	18bb      	adds	r3, r7, r2
 8005c00:	18ba      	adds	r2, r7, r2
 8005c02:	8812      	ldrh	r2, [r2, #0]
 8005c04:	188a      	adds	r2, r1, r2
 8005c06:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d019      	beq.n	8005c44 <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c10:	4b95      	ldr	r3, [pc, #596]	@ (8005e68 <CreateMessage+0xc14>)
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fa faaa 	bl	800016c <strlen>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	4b92      	ldr	r3, [pc, #584]	@ (8005e68 <CreateMessage+0xc14>)
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7ff f913 	bl	8004e4c <ESP_Send>
 8005c26:	0003      	movs	r3, r0
 8005c28:	001a      	movs	r2, r3
 8005c2a:	4b90      	ldr	r3, [pc, #576]	@ (8005e6c <CreateMessage+0xc18>)
 8005c2c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c2e:	4b90      	ldr	r3, [pc, #576]	@ (8005e70 <CreateMessage+0xc1c>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	001a      	movs	r2, r3
 8005c34:	4b8d      	ldr	r3, [pc, #564]	@ (8005e6c <CreateMessage+0xc18>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	4193      	sbcs	r3, r2
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b8b      	ldr	r3, [pc, #556]	@ (8005e70 <CreateMessage+0xc1c>)
 8005c42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005c44:	f006 feaa 	bl	800c99c <IsAHT20SensorPresent>
 8005c48:	1e03      	subs	r3, r0, #0
 8005c4a:	d100      	bne.n	8005c4e <CreateMessage+0x9fa>
 8005c4c:	e0a3      	b.n	8005d96 <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <CreateMessage+0xc20>)
 8005c50:	4893      	ldr	r0, [pc, #588]	@ (8005ea0 <CreateMessage+0xc4c>)
 8005c52:	220c      	movs	r2, #12
 8005c54:	0019      	movs	r1, r3
 8005c56:	f005 fd6d 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005c5a:	4a92      	ldr	r2, [pc, #584]	@ (8005ea4 <CreateMessage+0xc50>)
 8005c5c:	4992      	ldr	r1, [pc, #584]	@ (8005ea8 <CreateMessage+0xc54>)
 8005c5e:	4b85      	ldr	r3, [pc, #532]	@ (8005e74 <CreateMessage+0xc20>)
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7ff fa9b 	bl	800519c <isKeyValid>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d043      	beq.n	8005cf2 <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c6a:	4a82      	ldr	r2, [pc, #520]	@ (8005e74 <CreateMessage+0xc20>)
 8005c6c:	4b85      	ldr	r3, [pc, #532]	@ (8005e84 <CreateMessage+0xc30>)
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff facb 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
 8005c76:	4b84      	ldr	r3, [pc, #528]	@ (8005e88 <CreateMessage+0xc34>)
 8005c78:	689c      	ldr	r4, [r3, #8]
 8005c7a:	4b84      	ldr	r3, [pc, #528]	@ (8005e8c <CreateMessage+0xc38>)
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	1c18      	adds	r0, r3, #0
 8005c80:	f7fd fe08 	bl	8003894 <__aeabi_f2d>
 8005c84:	0002      	movs	r2, r0
 8005c86:	000b      	movs	r3, r1
 8005c88:	4d81      	ldr	r5, [pc, #516]	@ (8005e90 <CreateMessage+0xc3c>)
 8005c8a:	4988      	ldr	r1, [pc, #544]	@ (8005eac <CreateMessage+0xc58>)
 8005c8c:	4876      	ldr	r0, [pc, #472]	@ (8005e68 <CreateMessage+0xc14>)
 8005c8e:	9202      	str	r2, [sp, #8]
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	4b7c      	ldr	r3, [pc, #496]	@ (8005e84 <CreateMessage+0xc30>)
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	002b      	movs	r3, r5
 8005c98:	0022      	movs	r2, r4
 8005c9a:	f01f fc05 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005c9e:	4b72      	ldr	r3, [pc, #456]	@ (8005e68 <CreateMessage+0xc14>)
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7fa fa63 	bl	800016c <strlen>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	b299      	uxth	r1, r3
 8005caa:	220e      	movs	r2, #14
 8005cac:	18bb      	adds	r3, r7, r2
 8005cae:	18ba      	adds	r2, r7, r2
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	188a      	adds	r2, r1, r2
 8005cb4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <CreateMessage+0xc14>)
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7fa fa53 	bl	800016c <strlen>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <CreateMessage+0xc14>)
 8005ccc:	0011      	movs	r1, r2
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7ff f8bc 	bl	8004e4c <ESP_Send>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	001a      	movs	r2, r3
 8005cd8:	4b64      	ldr	r3, [pc, #400]	@ (8005e6c <CreateMessage+0xc18>)
 8005cda:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cdc:	4b64      	ldr	r3, [pc, #400]	@ (8005e70 <CreateMessage+0xc1c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	4b62      	ldr	r3, [pc, #392]	@ (8005e6c <CreateMessage+0xc18>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	4193      	sbcs	r3, r2
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4b60      	ldr	r3, [pc, #384]	@ (8005e70 <CreateMessage+0xc1c>)
 8005cf0:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005cf2:	4b60      	ldr	r3, [pc, #384]	@ (8005e74 <CreateMessage+0xc20>)
 8005cf4:	486e      	ldr	r0, [pc, #440]	@ (8005eb0 <CreateMessage+0xc5c>)
 8005cf6:	220c      	movs	r2, #12
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	f005 fd1b 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005eb4 <CreateMessage+0xc60>)
 8005d00:	4969      	ldr	r1, [pc, #420]	@ (8005ea8 <CreateMessage+0xc54>)
 8005d02:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <CreateMessage+0xc20>)
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7ff fa49 	bl	800519c <isKeyValid>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d043      	beq.n	8005d96 <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005d0e:	4a59      	ldr	r2, [pc, #356]	@ (8005e74 <CreateMessage+0xc20>)
 8005d10:	4b5c      	ldr	r3, [pc, #368]	@ (8005e84 <CreateMessage+0xc30>)
 8005d12:	0011      	movs	r1, r2
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fa79 	bl	800520c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
 8005d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e88 <CreateMessage+0xc34>)
 8005d1c:	689c      	ldr	r4, [r3, #8]
 8005d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e8c <CreateMessage+0xc38>)
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	1c18      	adds	r0, r3, #0
 8005d24:	f7fd fdb6 	bl	8003894 <__aeabi_f2d>
 8005d28:	0002      	movs	r2, r0
 8005d2a:	000b      	movs	r3, r1
 8005d2c:	4d58      	ldr	r5, [pc, #352]	@ (8005e90 <CreateMessage+0xc3c>)
 8005d2e:	4962      	ldr	r1, [pc, #392]	@ (8005eb8 <CreateMessage+0xc64>)
 8005d30:	484d      	ldr	r0, [pc, #308]	@ (8005e68 <CreateMessage+0xc14>)
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	9303      	str	r3, [sp, #12]
 8005d36:	4b53      	ldr	r3, [pc, #332]	@ (8005e84 <CreateMessage+0xc30>)
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	002b      	movs	r3, r5
 8005d3c:	0022      	movs	r2, r4
 8005d3e:	f01f fbb3 	bl	80254a8 <siprintf>
  #endif
      index += strlen(message);
 8005d42:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <CreateMessage+0xc14>)
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fa fa11 	bl	800016c <strlen>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	b299      	uxth	r1, r3
 8005d4e:	220e      	movs	r2, #14
 8005d50:	18bb      	adds	r3, r7, r2
 8005d52:	18ba      	adds	r2, r7, r2
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	188a      	adds	r2, r1, r2
 8005d58:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d5a:	1dbb      	adds	r3, r7, #6
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d019      	beq.n	8005d96 <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d62:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <CreateMessage+0xc14>)
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fa fa01 	bl	800016c <strlen>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e68 <CreateMessage+0xc14>)
 8005d70:	0011      	movs	r1, r2
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7ff f86a 	bl	8004e4c <ESP_Send>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	001a      	movs	r2, r3
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e6c <CreateMessage+0xc18>)
 8005d7e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d80:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <CreateMessage+0xc1c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	001a      	movs	r2, r3
 8005d86:	4b39      	ldr	r3, [pc, #228]	@ (8005e6c <CreateMessage+0xc18>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	4193      	sbcs	r3, r2
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <CreateMessage+0xc1c>)
 8005d94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005d96:	f006 fe15 	bl	800c9c4 <IsENS160SensorPresent>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d100      	bne.n	8005da0 <CreateMessage+0xb4c>
 8005d9e:	e11b      	b.n	8005fd8 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <CreateMessage+0xc20>)
 8005da2:	4846      	ldr	r0, [pc, #280]	@ (8005ebc <CreateMessage+0xc68>)
 8005da4:	220c      	movs	r2, #12
 8005da6:	0019      	movs	r1, r3
 8005da8:	f005 fcc4 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005dac:	4a44      	ldr	r2, [pc, #272]	@ (8005ec0 <CreateMessage+0xc6c>)
 8005dae:	4945      	ldr	r1, [pc, #276]	@ (8005ec4 <CreateMessage+0xc70>)
 8005db0:	4b30      	ldr	r3, [pc, #192]	@ (8005e74 <CreateMessage+0xc20>)
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7ff f9f2 	bl	800519c <isKeyValid>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d03d      	beq.n	8005e38 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e74 <CreateMessage+0xc20>)
 8005dbe:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <CreateMessage+0xc30>)
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f7ff fa22 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <CreateMessage+0xc34>)
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005e8c <CreateMessage+0xc38>)
 8005dce:	2155      	movs	r1, #85	@ 0x55
 8005dd0:	5c5b      	ldrb	r3, [r3, r1]
 8005dd2:	4c2f      	ldr	r4, [pc, #188]	@ (8005e90 <CreateMessage+0xc3c>)
 8005dd4:	493c      	ldr	r1, [pc, #240]	@ (8005ec8 <CreateMessage+0xc74>)
 8005dd6:	4824      	ldr	r0, [pc, #144]	@ (8005e68 <CreateMessage+0xc14>)
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <CreateMessage+0xc30>)
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	0023      	movs	r3, r4
 8005de0:	f01f fb62 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005de4:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <CreateMessage+0xc14>)
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fa f9c0 	bl	800016c <strlen>
 8005dec:	0003      	movs	r3, r0
 8005dee:	b299      	uxth	r1, r3
 8005df0:	220e      	movs	r2, #14
 8005df2:	18bb      	adds	r3, r7, r2
 8005df4:	18ba      	adds	r2, r7, r2
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	188a      	adds	r2, r1, r2
 8005dfa:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005dfc:	1dbb      	adds	r3, r7, #6
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e04:	4b18      	ldr	r3, [pc, #96]	@ (8005e68 <CreateMessage+0xc14>)
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7fa f9b0 	bl	800016c <strlen>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <CreateMessage+0xc14>)
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff f819 	bl	8004e4c <ESP_Send>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <CreateMessage+0xc18>)
 8005e20:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e22:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <CreateMessage+0xc1c>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	001a      	movs	r2, r3
 8005e28:	4b10      	ldr	r3, [pc, #64]	@ (8005e6c <CreateMessage+0xc18>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	4193      	sbcs	r3, r2
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <CreateMessage+0xc1c>)
 8005e36:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005e38:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <CreateMessage+0xc20>)
 8005e3a:	4824      	ldr	r0, [pc, #144]	@ (8005ecc <CreateMessage+0xc78>)
 8005e3c:	220c      	movs	r2, #12
 8005e3e:	0019      	movs	r1, r3
 8005e40:	f005 fc78 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005e44:	4a22      	ldr	r2, [pc, #136]	@ (8005ed0 <CreateMessage+0xc7c>)
 8005e46:	491f      	ldr	r1, [pc, #124]	@ (8005ec4 <CreateMessage+0xc70>)
 8005e48:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <CreateMessage+0xc20>)
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7ff f9a6 	bl	800519c <isKeyValid>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d075      	beq.n	8005f40 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005e54:	4a07      	ldr	r2, [pc, #28]	@ (8005e74 <CreateMessage+0xc20>)
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <CreateMessage+0xc30>)
 8005e58:	0011      	movs	r1, r2
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7ff f9d6 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <CreateMessage+0xc34>)
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	e036      	b.n	8005ed4 <CreateMessage+0xc80>
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	200005cc 	.word	0x200005cc
 8005e6c:	20000761 	.word	0x20000761
 8005e70:	2000002d 	.word	0x2000002d
 8005e74:	2000073c 	.word	0x2000073c
 8005e78:	080800bc 	.word	0x080800bc
 8005e7c:	0802a3e0 	.word	0x0802a3e0
 8005e80:	0802a4a4 	.word	0x0802a4a4
 8005e84:	20000748 	.word	0x20000748
 8005e88:	200005ac 	.word	0x200005ac
 8005e8c:	2000067c 	.word	0x2000067c
 8005e90:	2000071c 	.word	0x2000071c
 8005e94:	0802a4a8 	.word	0x0802a4a8
 8005e98:	08080060 	.word	0x08080060
 8005e9c:	0802a500 	.word	0x0802a500
 8005ea0:	080800c8 	.word	0x080800c8
 8005ea4:	0802a304 	.word	0x0802a304
 8005ea8:	0802a55c 	.word	0x0802a55c
 8005eac:	0802a564 	.word	0x0802a564
 8005eb0:	080800d4 	.word	0x080800d4
 8005eb4:	0802a374 	.word	0x0802a374
 8005eb8:	0802a5c0 	.word	0x0802a5c0
 8005ebc:	080800ec 	.word	0x080800ec
 8005ec0:	0802a61c 	.word	0x0802a61c
 8005ec4:	0802a630 	.word	0x0802a630
 8005ec8:	0802a638 	.word	0x0802a638
 8005ecc:	080800f8 	.word	0x080800f8
 8005ed0:	0802a690 	.word	0x0802a690
 8005ed4:	4b71      	ldr	r3, [pc, #452]	@ (800609c <CreateMessage+0xe48>)
 8005ed6:	214a      	movs	r1, #74	@ 0x4a
 8005ed8:	5a5b      	ldrh	r3, [r3, r1]
 8005eda:	4c71      	ldr	r4, [pc, #452]	@ (80060a0 <CreateMessage+0xe4c>)
 8005edc:	4971      	ldr	r1, [pc, #452]	@ (80060a4 <CreateMessage+0xe50>)
 8005ede:	4872      	ldr	r0, [pc, #456]	@ (80060a8 <CreateMessage+0xe54>)
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	4b72      	ldr	r3, [pc, #456]	@ (80060ac <CreateMessage+0xe58>)
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	0023      	movs	r3, r4
 8005ee8:	f01f fade 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005eec:	4b6e      	ldr	r3, [pc, #440]	@ (80060a8 <CreateMessage+0xe54>)
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa f93c 	bl	800016c <strlen>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	220e      	movs	r2, #14
 8005efa:	18bb      	adds	r3, r7, r2
 8005efc:	18ba      	adds	r2, r7, r2
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	188a      	adds	r2, r1, r2
 8005f02:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f0c:	4b66      	ldr	r3, [pc, #408]	@ (80060a8 <CreateMessage+0xe54>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	4b63      	ldr	r3, [pc, #396]	@ (80060a8 <CreateMessage+0xe54>)
 8005f1a:	0011      	movs	r1, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fe ff95 	bl	8004e4c <ESP_Send>
 8005f22:	0003      	movs	r3, r0
 8005f24:	001a      	movs	r2, r3
 8005f26:	4b62      	ldr	r3, [pc, #392]	@ (80060b0 <CreateMessage+0xe5c>)
 8005f28:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f2a:	4b62      	ldr	r3, [pc, #392]	@ (80060b4 <CreateMessage+0xe60>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	001a      	movs	r2, r3
 8005f30:	4b5f      	ldr	r3, [pc, #380]	@ (80060b0 <CreateMessage+0xe5c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4013      	ands	r3, r2
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	4193      	sbcs	r3, r2
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80060b4 <CreateMessage+0xe60>)
 8005f3e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005f40:	4b5d      	ldr	r3, [pc, #372]	@ (80060b8 <CreateMessage+0xe64>)
 8005f42:	485e      	ldr	r0, [pc, #376]	@ (80060bc <CreateMessage+0xe68>)
 8005f44:	220c      	movs	r2, #12
 8005f46:	0019      	movs	r1, r3
 8005f48:	f005 fbf4 	bl	800b734 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80060c0 <CreateMessage+0xe6c>)
 8005f4e:	495d      	ldr	r1, [pc, #372]	@ (80060c4 <CreateMessage+0xe70>)
 8005f50:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <CreateMessage+0xe64>)
 8005f52:	0018      	movs	r0, r3
 8005f54:	f7ff f922 	bl	800519c <isKeyValid>
 8005f58:	1e03      	subs	r3, r0, #0
 8005f5a:	d03d      	beq.n	8005fd8 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8005f5c:	4a56      	ldr	r2, [pc, #344]	@ (80060b8 <CreateMessage+0xe64>)
 8005f5e:	4b53      	ldr	r3, [pc, #332]	@ (80060ac <CreateMessage+0xe58>)
 8005f60:	0011      	movs	r1, r2
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7ff f952 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005f68:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <CreateMessage+0xe74>)
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800609c <CreateMessage+0xe48>)
 8005f6e:	2152      	movs	r1, #82	@ 0x52
 8005f70:	5a5b      	ldrh	r3, [r3, r1]
 8005f72:	4c4b      	ldr	r4, [pc, #300]	@ (80060a0 <CreateMessage+0xe4c>)
 8005f74:	4955      	ldr	r1, [pc, #340]	@ (80060cc <CreateMessage+0xe78>)
 8005f76:	484c      	ldr	r0, [pc, #304]	@ (80060a8 <CreateMessage+0xe54>)
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <CreateMessage+0xe58>)
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	0023      	movs	r3, r4
 8005f80:	f01f fa92 	bl	80254a8 <siprintf>
#endif
      index += strlen(message);
 8005f84:	4b48      	ldr	r3, [pc, #288]	@ (80060a8 <CreateMessage+0xe54>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7fa f8f0 	bl	800016c <strlen>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	b299      	uxth	r1, r3
 8005f90:	220e      	movs	r2, #14
 8005f92:	18bb      	adds	r3, r7, r2
 8005f94:	18ba      	adds	r2, r7, r2
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	188a      	adds	r2, r1, r2
 8005f9a:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d019      	beq.n	8005fd8 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fa4:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <CreateMessage+0xe54>)
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fa f8e0 	bl	800016c <strlen>
 8005fac:	0003      	movs	r3, r0
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <CreateMessage+0xe54>)
 8005fb2:	0011      	movs	r1, r2
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7fe ff49 	bl	8004e4c <ESP_Send>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80060b0 <CreateMessage+0xe5c>)
 8005fc0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80060b4 <CreateMessage+0xe60>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <CreateMessage+0xe5c>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	4193      	sbcs	r3, r2
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <CreateMessage+0xe60>)
 8005fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8005fd8:	4b37      	ldr	r3, [pc, #220]	@ (80060b8 <CreateMessage+0xe64>)
 8005fda:	483d      	ldr	r0, [pc, #244]	@ (80060d0 <CreateMessage+0xe7c>)
 8005fdc:	220c      	movs	r2, #12
 8005fde:	0019      	movs	r1, r3
 8005fe0:	f005 fba8 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005fe4:	4a34      	ldr	r2, [pc, #208]	@ (80060b8 <CreateMessage+0xe64>)
 8005fe6:	4b31      	ldr	r3, [pc, #196]	@ (80060ac <CreateMessage+0xe58>)
 8005fe8:	0011      	movs	r1, r2
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff f90e 	bl	800520c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8005ff0:	4b35      	ldr	r3, [pc, #212]	@ (80060c8 <CreateMessage+0xe74>)
 8005ff2:	689c      	ldr	r4, [r3, #8]
 8005ff4:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <CreateMessage+0xe80>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c18      	adds	r0, r3, #0
 8005ffa:	f7fd fc4b 	bl	8003894 <__aeabi_f2d>
 8005ffe:	0002      	movs	r2, r0
 8006000:	000b      	movs	r3, r1
 8006002:	4d27      	ldr	r5, [pc, #156]	@ (80060a0 <CreateMessage+0xe4c>)
 8006004:	4934      	ldr	r1, [pc, #208]	@ (80060d8 <CreateMessage+0xe84>)
 8006006:	4828      	ldr	r0, [pc, #160]	@ (80060a8 <CreateMessage+0xe54>)
 8006008:	9202      	str	r2, [sp, #8]
 800600a:	9303      	str	r3, [sp, #12]
 800600c:	4b27      	ldr	r3, [pc, #156]	@ (80060ac <CreateMessage+0xe58>)
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	002b      	movs	r3, r5
 8006012:	0022      	movs	r2, r4
 8006014:	f01f fa48 	bl	80254a8 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006018:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <CreateMessage+0xe54>)
 800601a:	0018      	movs	r0, r3
 800601c:	f7fa f8a6 	bl	800016c <strlen>
 8006020:	0002      	movs	r2, r0
 8006022:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <CreateMessage+0xe54>)
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <CreateMessage+0xe88>)
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f01f fa3c 	bl	80254a8 <siprintf>
  index += strlen(message);
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <CreateMessage+0xe54>)
 8006032:	0018      	movs	r0, r3
 8006034:	f7fa f89a 	bl	800016c <strlen>
 8006038:	0003      	movs	r3, r0
 800603a:	b299      	uxth	r1, r3
 800603c:	220e      	movs	r2, #14
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	18ba      	adds	r2, r7, r2
 8006042:	8812      	ldrh	r2, [r2, #0]
 8006044:	188a      	adds	r2, r1, r2
 8006046:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006048:	1dbb      	adds	r3, r7, #6
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006050:	4b15      	ldr	r3, [pc, #84]	@ (80060a8 <CreateMessage+0xe54>)
 8006052:	0018      	movs	r0, r3
 8006054:	f7fa f88a 	bl	800016c <strlen>
 8006058:	0003      	movs	r3, r0
 800605a:	b29a      	uxth	r2, r3
 800605c:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <CreateMessage+0xe54>)
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f7fe fef3 	bl	8004e4c <ESP_Send>
 8006066:	0003      	movs	r3, r0
 8006068:	001a      	movs	r2, r3
 800606a:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <CreateMessage+0xe5c>)
 800606c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800606e:	4b11      	ldr	r3, [pc, #68]	@ (80060b4 <CreateMessage+0xe60>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	001a      	movs	r2, r3
 8006074:	4b0e      	ldr	r3, [pc, #56]	@ (80060b0 <CreateMessage+0xe5c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	4193      	sbcs	r3, r2
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <CreateMessage+0xe60>)
 8006082:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006084:	4b0b      	ldr	r3, [pc, #44]	@ (80060b4 <CreateMessage+0xe60>)
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	701a      	strb	r2, [r3, #0]
  return index;
 800608c:	230e      	movs	r3, #14
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
}
 8006092:	0018      	movs	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	b005      	add	sp, #20
 8006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	2000067c 	.word	0x2000067c
 80060a0:	2000071c 	.word	0x2000071c
 80060a4:	0802a698 	.word	0x0802a698
 80060a8:	200005cc 	.word	0x200005cc
 80060ac:	20000748 	.word	0x20000748
 80060b0:	20000761 	.word	0x20000761
 80060b4:	2000002d 	.word	0x2000002d
 80060b8:	2000073c 	.word	0x2000073c
 80060bc:	08080104 	.word	0x08080104
 80060c0:	0802a6f4 	.word	0x0802a6f4
 80060c4:	0802a630 	.word	0x0802a630
 80060c8:	200005ac 	.word	0x200005ac
 80060cc:	0802a6fc 	.word	0x0802a6fc
 80060d0:	0808006c 	.word	0x0808006c
 80060d4:	200005c4 	.word	0x200005c4
 80060d8:	0802a758 	.word	0x0802a758
 80060dc:	0802a7b0 	.word	0x0802a7b0

080060e0 <StartProg>:

void StartProg(){
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80060e4:	2064      	movs	r0, #100	@ 0x64
 80060e6:	f00d fd9f 	bl	8013c28 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <StartProg+0x60>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	2101      	movs	r1, #1
 80060f0:	0018      	movs	r0, r3
 80060f2:	f00f f820 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80060f6:	2064      	movs	r0, #100	@ 0x64
 80060f8:	f00d fd96 	bl	8013c28 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80060fc:	4b10      	ldr	r3, [pc, #64]	@ (8006140 <StartProg+0x60>)
 80060fe:	2200      	movs	r2, #0
 8006100:	2102      	movs	r1, #2
 8006102:	0018      	movs	r0, r3
 8006104:	f00f f817 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006108:	23fa      	movs	r3, #250	@ 0xfa
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	0018      	movs	r0, r3
 800610e:	f00d fd8b 	bl	8013c28 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006112:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <StartProg+0x60>)
 8006114:	2201      	movs	r2, #1
 8006116:	2101      	movs	r1, #1
 8006118:	0018      	movs	r0, r3
 800611a:	f00f f80c 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800611e:	23fa      	movs	r3, #250	@ 0xfa
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	0018      	movs	r0, r3
 8006124:	f00d fd80 	bl	8013c28 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <StartProg+0x60>)
 800612a:	2201      	movs	r2, #1
 800612c:	2102      	movs	r1, #2
 800612e:	0018      	movs	r0, r3
 8006130:	f00f f801 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006134:	2028      	movs	r0, #40	@ 0x28
 8006136:	f00d fd77 	bl	8013c28 <HAL_Delay>
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	50001c00 	.word	0x50001c00

08006144 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006146:	b0d9      	sub	sp, #356	@ 0x164
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	0008      	movs	r0, r1
 800614e:	0011      	movs	r1, r2
 8006150:	4ba3      	ldr	r3, [pc, #652]	@ (80063e0 <ParseBuffer+0x29c>)
 8006152:	24b0      	movs	r4, #176	@ 0xb0
 8006154:	0064      	lsls	r4, r4, #1
 8006156:	191b      	adds	r3, r3, r4
 8006158:	19db      	adds	r3, r3, r7
 800615a:	1c02      	adds	r2, r0, #0
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	4ba1      	ldr	r3, [pc, #644]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006160:	191b      	adds	r3, r3, r4
 8006162:	19db      	adds	r3, r3, r7
 8006164:	1c0a      	adds	r2, r1, #0
 8006166:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	005a      	lsls	r2, r3, #1
 800616c:	2348      	movs	r3, #72	@ 0x48
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2100      	movs	r1, #0
 8006172:	0018      	movs	r0, r3
 8006174:	f01f fb02 	bl	802577c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006178:	2360      	movs	r3, #96	@ 0x60
 800617a:	33ff      	adds	r3, #255	@ 0xff
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2203      	movs	r2, #3
 8006180:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8006182:	23ae      	movs	r3, #174	@ 0xae
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	2200      	movs	r2, #0
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e013      	b.n	80061b6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800618e:	20ae      	movs	r0, #174	@ 0xae
 8006190:	0040      	lsls	r0, r0, #1
 8006192:	183b      	adds	r3, r7, r0
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	18d2      	adds	r2, r2, r3
 800619a:	183b      	adds	r3, r7, r0
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	7811      	ldrb	r1, [r2, #0]
 80061a0:	4a91      	ldr	r2, [pc, #580]	@ (80063e8 <ParseBuffer+0x2a4>)
 80061a2:	24b0      	movs	r4, #176	@ 0xb0
 80061a4:	0064      	lsls	r4, r4, #1
 80061a6:	1912      	adds	r2, r2, r4
 80061a8:	19d2      	adds	r2, r2, r7
 80061aa:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80061ac:	183b      	adds	r3, r7, r0
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	183b      	adds	r3, r7, r0
 80061b2:	3201      	adds	r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	23ae      	movs	r3, #174	@ 0xae
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	18fa      	adds	r2, r7, r3
 80061bc:	4b88      	ldr	r3, [pc, #544]	@ (80063e0 <ParseBuffer+0x29c>)
 80061be:	21b0      	movs	r1, #176	@ 0xb0
 80061c0:	0049      	lsls	r1, r1, #1
 80061c2:	185b      	adds	r3, r3, r1
 80061c4:	19db      	adds	r3, r3, r7
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d3df      	bcc.n	800618e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80061ce:	4b84      	ldr	r3, [pc, #528]	@ (80063e0 <ParseBuffer+0x29c>)
 80061d0:	185b      	adds	r3, r3, r1
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	4a84      	ldr	r2, [pc, #528]	@ (80063e8 <ParseBuffer+0x2a4>)
 80061d8:	1852      	adds	r2, r2, r1
 80061da:	19d2      	adds	r2, r2, r7
 80061dc:	2100      	movs	r1, #0
 80061de:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80061e0:	f00d f852 	bl	8013288 <GetVerboseLevel>
 80061e4:	0003      	movs	r3, r0
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d106      	bne.n	80061f8 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80061ea:	2348      	movs	r3, #72	@ 0x48
 80061ec:	18fa      	adds	r2, r7, r3
 80061ee:	4b7f      	ldr	r3, [pc, #508]	@ (80063ec <ParseBuffer+0x2a8>)
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f01f f8e8 	bl	80253c8 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	26ac      	movs	r6, #172	@ 0xac
 80061fc:	0076      	lsls	r6, r6, #1
 80061fe:	19ba      	adds	r2, r7, r6
 8006200:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006202:	4b7b      	ldr	r3, [pc, #492]	@ (80063f0 <ParseBuffer+0x2ac>)
 8006204:	25b0      	movs	r5, #176	@ 0xb0
 8006206:	006d      	lsls	r5, r5, #1
 8006208:	195b      	adds	r3, r3, r5
 800620a:	19db      	adds	r3, r3, r7
 800620c:	4a79      	ldr	r2, [pc, #484]	@ (80063f4 <ParseBuffer+0x2b0>)
 800620e:	8811      	ldrh	r1, [r2, #0]
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	7892      	ldrb	r2, [r2, #2]
 8006214:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006216:	4b78      	ldr	r3, [pc, #480]	@ (80063f8 <ParseBuffer+0x2b4>)
 8006218:	195b      	adds	r3, r3, r5
 800621a:	19db      	adds	r3, r3, r7
 800621c:	4a77      	ldr	r2, [pc, #476]	@ (80063fc <ParseBuffer+0x2b8>)
 800621e:	6811      	ldr	r1, [r2, #0]
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	8892      	ldrh	r2, [r2, #4]
 8006224:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006226:	4b76      	ldr	r3, [pc, #472]	@ (8006400 <ParseBuffer+0x2bc>)
 8006228:	195b      	adds	r3, r3, r5
 800622a:	19db      	adds	r3, r3, r7
 800622c:	4a75      	ldr	r2, [pc, #468]	@ (8006404 <ParseBuffer+0x2c0>)
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006234:	4b74      	ldr	r3, [pc, #464]	@ (8006408 <ParseBuffer+0x2c4>)
 8006236:	195b      	adds	r3, r3, r5
 8006238:	19db      	adds	r3, r3, r7
 800623a:	4a74      	ldr	r2, [pc, #464]	@ (800640c <ParseBuffer+0x2c8>)
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	6019      	str	r1, [r3, #0]
 8006240:	8892      	ldrh	r2, [r2, #4]
 8006242:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006244:	4b72      	ldr	r3, [pc, #456]	@ (8006410 <ParseBuffer+0x2cc>)
 8006246:	195b      	adds	r3, r3, r5
 8006248:	19db      	adds	r3, r3, r7
 800624a:	223e      	movs	r2, #62	@ 0x3e
 800624c:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800624e:	4b71      	ldr	r3, [pc, #452]	@ (8006414 <ParseBuffer+0x2d0>)
 8006250:	195b      	adds	r3, r3, r5
 8006252:	19db      	adds	r3, r3, r7
 8006254:	4a70      	ldr	r2, [pc, #448]	@ (8006418 <ParseBuffer+0x2d4>)
 8006256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006258:	c313      	stmia	r3!, {r0, r1, r4}
 800625a:	8811      	ldrh	r1, [r2, #0]
 800625c:	8019      	strh	r1, [r3, #0]
 800625e:	7892      	ldrb	r2, [r2, #2]
 8006260:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006262:	4b6e      	ldr	r3, [pc, #440]	@ (800641c <ParseBuffer+0x2d8>)
 8006264:	195b      	adds	r3, r3, r5
 8006266:	19db      	adds	r3, r3, r7
 8006268:	4a6d      	ldr	r2, [pc, #436]	@ (8006420 <ParseBuffer+0x2dc>)
 800626a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800626c:	c313      	stmia	r3!, {r0, r1, r4}
 800626e:	8812      	ldrh	r2, [r2, #0]
 8006270:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006272:	4b5c      	ldr	r3, [pc, #368]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006274:	195b      	adds	r3, r3, r5
 8006276:	19db      	adds	r3, r3, r7
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 800627e:	2344      	movs	r3, #68	@ 0x44
 8006280:	18fa      	adds	r2, r7, r3
 8006282:	2348      	movs	r3, #72	@ 0x48
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	0011      	movs	r1, r2
 8006288:	0018      	movs	r0, r3
 800628a:	f01f fab2 	bl	80257f2 <strstr>
 800628e:	0003      	movs	r3, r0
 8006290:	19ba      	adds	r2, r7, r6
 8006292:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8006294:	4b53      	ldr	r3, [pc, #332]	@ (80063e4 <ParseBuffer+0x2a0>)
 8006296:	22b0      	movs	r2, #176	@ 0xb0
 8006298:	0052      	lsls	r2, r2, #1
 800629a:	189b      	adds	r3, r3, r2
 800629c:	19db      	adds	r3, r3, r7
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10c      	bne.n	80062be <ParseBuffer+0x17a>
    ParsePoint = strstr(tempBuf, ready);
 80062a4:	232c      	movs	r3, #44	@ 0x2c
 80062a6:	18fa      	adds	r2, r7, r3
 80062a8:	2348      	movs	r3, #72	@ 0x48
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f01f fa9f 	bl	80257f2 <strstr>
 80062b4:	0003      	movs	r3, r0
 80062b6:	22ac      	movs	r2, #172	@ 0xac
 80062b8:	0052      	lsls	r2, r2, #1
 80062ba:	18ba      	adds	r2, r7, r2
 80062bc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80062be:	4b49      	ldr	r3, [pc, #292]	@ (80063e4 <ParseBuffer+0x2a0>)
 80062c0:	22b0      	movs	r2, #176	@ 0xb0
 80062c2:	0052      	lsls	r2, r2, #1
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	19db      	adds	r3, r3, r7
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d10c      	bne.n	80062e8 <ParseBuffer+0x1a4>
    ParsePoint = strstr(tempBuf, start);
 80062ce:	2328      	movs	r3, #40	@ 0x28
 80062d0:	18fa      	adds	r2, r7, r3
 80062d2:	2348      	movs	r3, #72	@ 0x48
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f01f fa8a 	bl	80257f2 <strstr>
 80062de:	0003      	movs	r3, r0
 80062e0:	22ac      	movs	r2, #172	@ 0xac
 80062e2:	0052      	lsls	r2, r2, #1
 80062e4:	18ba      	adds	r2, r7, r2
 80062e6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <ParseBuffer+0x2a0>)
 80062ea:	22b0      	movs	r2, #176	@ 0xb0
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d10c      	bne.n	8006312 <ParseBuffer+0x1ce>
    ParsePoint = strstr(tempBuf, TIME);
 80062f8:	2308      	movs	r3, #8
 80062fa:	18fa      	adds	r2, r7, r3
 80062fc:	2348      	movs	r3, #72	@ 0x48
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f01f fa75 	bl	80257f2 <strstr>
 8006308:	0003      	movs	r3, r0
 800630a:	22ac      	movs	r2, #172	@ 0xac
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	18ba      	adds	r2, r7, r2
 8006310:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006312:	233c      	movs	r3, #60	@ 0x3c
 8006314:	18fa      	adds	r2, r7, r3
 8006316:	2448      	movs	r4, #72	@ 0x48
 8006318:	193b      	adds	r3, r7, r4
 800631a:	0011      	movs	r1, r2
 800631c:	0018      	movs	r0, r3
 800631e:	f01f fa68 	bl	80257f2 <strstr>
 8006322:	0003      	movs	r3, r0
 8006324:	22aa      	movs	r2, #170	@ 0xaa
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	18ba      	adds	r2, r7, r2
 800632a:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800632c:	2318      	movs	r3, #24
 800632e:	18fa      	adds	r2, r7, r3
 8006330:	193b      	adds	r3, r7, r4
 8006332:	0011      	movs	r1, r2
 8006334:	0018      	movs	r0, r3
 8006336:	f01f fa5c 	bl	80257f2 <strstr>
 800633a:	0003      	movs	r3, r0
 800633c:	22a8      	movs	r2, #168	@ 0xa8
 800633e:	0052      	lsls	r2, r2, #1
 8006340:	18ba      	adds	r2, r7, r2
 8006342:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8006344:	4a37      	ldr	r2, [pc, #220]	@ (8006424 <ParseBuffer+0x2e0>)
 8006346:	193b      	adds	r3, r7, r4
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f01f fa51 	bl	80257f2 <strstr>
 8006350:	0003      	movs	r3, r0
 8006352:	22a6      	movs	r2, #166	@ 0xa6
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	18ba      	adds	r2, r7, r2
 8006358:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800635a:	2334      	movs	r3, #52	@ 0x34
 800635c:	18fa      	adds	r2, r7, r3
 800635e:	193b      	adds	r3, r7, r4
 8006360:	0011      	movs	r1, r2
 8006362:	0018      	movs	r0, r3
 8006364:	f01f fa45 	bl	80257f2 <strstr>
 8006368:	0003      	movs	r3, r0
 800636a:	22a4      	movs	r2, #164	@ 0xa4
 800636c:	0052      	lsls	r2, r2, #1
 800636e:	18ba      	adds	r2, r7, r2
 8006370:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006372:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <ParseBuffer+0x29c>)
 8006374:	21b0      	movs	r1, #176	@ 0xb0
 8006376:	0049      	lsls	r1, r1, #1
 8006378:	185b      	adds	r3, r3, r1
 800637a:	19db      	adds	r3, r3, r7
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d800      	bhi.n	8006384 <ParseBuffer+0x240>
 8006382:	e0be      	b.n	8006502 <ParseBuffer+0x3be>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8006384:	22ac      	movs	r2, #172	@ 0xac
 8006386:	0052      	lsls	r2, r2, #1
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d051      	beq.n	8006434 <ParseBuffer+0x2f0>
 8006390:	18bb      	adds	r3, r7, r2
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b4f      	cmp	r3, #79	@ 0x4f
 8006398:	d14c      	bne.n	8006434 <ParseBuffer+0x2f0>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800639a:	2360      	movs	r3, #96	@ 0x60
 800639c:	33ff      	adds	r3, #255	@ 0xff
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80063a4:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <ParseBuffer+0x2e4>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b12      	cmp	r3, #18
 80063aa:	d143      	bne.n	8006434 <ParseBuffer+0x2f0>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <ParseBuffer+0x29c>)
 80063ae:	185b      	adds	r3, r3, r1
 80063b0:	19db      	adds	r3, r3, r7
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80063b6:	d10b      	bne.n	80063d0 <ParseBuffer+0x28c>
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <ParseBuffer+0x2a4>)
 80063ba:	185b      	adds	r3, r3, r1
 80063bc:	19db      	adds	r3, r3, r7
 80063be:	2221      	movs	r2, #33	@ 0x21
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	2b32      	cmp	r3, #50	@ 0x32
 80063c4:	d104      	bne.n	80063d0 <ParseBuffer+0x28c>
          ParseTime(tempBuf);
 80063c6:	193b      	adds	r3, r7, r4
 80063c8:	0018      	movs	r0, r3
 80063ca:	f003 f8f7 	bl	80095bc <ParseTime>
 80063ce:	e031      	b.n	8006434 <ParseBuffer+0x2f0>
        }
        else {
          Error("Error getting time");
 80063d0:	4a16      	ldr	r2, [pc, #88]	@ (800642c <ParseBuffer+0x2e8>)
 80063d2:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <ParseBuffer+0x2ec>)
 80063d4:	0019      	movs	r1, r3
 80063d6:	2001      	movs	r0, #1
 80063d8:	f00c fedc 	bl	8013194 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80063dc:	2306      	movs	r3, #6
 80063de:	e094      	b.n	800650a <ParseBuffer+0x3c6>
 80063e0:	fffffea2 	.word	0xfffffea2
 80063e4:	fffffea1 	.word	0xfffffea1
 80063e8:	fffffee8 	.word	0xfffffee8
 80063ec:	0802a7b4 	.word	0x0802a7b4
 80063f0:	fffffee4 	.word	0xfffffee4
 80063f4:	0802a7e0 	.word	0x0802a7e0
 80063f8:	fffffedc 	.word	0xfffffedc
 80063fc:	0802a7e4 	.word	0x0802a7e4
 8006400:	fffffed4 	.word	0xfffffed4
 8006404:	4c494146 	.word	0x4c494146
 8006408:	fffffecc 	.word	0xfffffecc
 800640c:	0802a7ec 	.word	0x0802a7ec
 8006410:	fffffec8 	.word	0xfffffec8
 8006414:	fffffeb8 	.word	0xfffffeb8
 8006418:	0802a7f4 	.word	0x0802a7f4
 800641c:	fffffea8 	.word	0xfffffea8
 8006420:	0802a804 	.word	0x0802a804
 8006424:	0802d7f4 	.word	0x0802d7f4
 8006428:	20000676 	.word	0x20000676
 800642c:	0802a7cc 	.word	0x0802a7cc
 8006430:	08029c24 	.word	0x08029c24
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006434:	22ac      	movs	r2, #172	@ 0xac
 8006436:	0052      	lsls	r2, r2, #1
 8006438:	18bb      	adds	r3, r7, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <ParseBuffer+0x310>
 8006440:	18bb      	adds	r3, r7, r2
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b72      	cmp	r3, #114	@ 0x72
 8006448:	d104      	bne.n	8006454 <ParseBuffer+0x310>
      status = RECEIVE_STATUS_READY;
 800644a:	2360      	movs	r3, #96	@ 0x60
 800644c:	33ff      	adds	r3, #255	@ 0xff
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	2202      	movs	r2, #2
 8006452:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006454:	22ac      	movs	r2, #172	@ 0xac
 8006456:	0052      	lsls	r2, r2, #1
 8006458:	18bb      	adds	r3, r7, r2
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <ParseBuffer+0x330>
 8006460:	18bb      	adds	r3, r7, r2
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b3e      	cmp	r3, #62	@ 0x3e
 8006468:	d104      	bne.n	8006474 <ParseBuffer+0x330>
      status = RECEIVE_STATUS_START;
 800646a:	2360      	movs	r3, #96	@ 0x60
 800646c:	33ff      	adds	r3, #255	@ 0xff
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2205      	movs	r2, #5
 8006472:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006474:	22ac      	movs	r2, #172	@ 0xac
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	18bb      	adds	r3, r7, r2
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <ParseBuffer+0x350>
 8006480:	18bb      	adds	r3, r7, r2
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b2b      	cmp	r3, #43	@ 0x2b
 8006488:	d104      	bne.n	8006494 <ParseBuffer+0x350>
      status = RECEIVE_STATUS_TIME;
 800648a:	2360      	movs	r3, #96	@ 0x60
 800648c:	33ff      	adds	r3, #255	@ 0xff
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	220b      	movs	r2, #11
 8006492:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006494:	22aa      	movs	r2, #170	@ 0xaa
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	18bb      	adds	r3, r7, r2
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <ParseBuffer+0x366>
 80064a0:	18bb      	adds	r3, r7, r2
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b45      	cmp	r3, #69	@ 0x45
 80064a8:	d00a      	beq.n	80064c0 <ParseBuffer+0x37c>
 80064aa:	22a4      	movs	r2, #164	@ 0xa4
 80064ac:	0052      	lsls	r2, r2, #1
 80064ae:	18bb      	adds	r3, r7, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <ParseBuffer+0x386>
 80064b6:	18bb      	adds	r3, r7, r2
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b46      	cmp	r3, #70	@ 0x46
 80064be:	d104      	bne.n	80064ca <ParseBuffer+0x386>
      status = RECEIVE_STATUS_ERROR;
 80064c0:	2360      	movs	r3, #96	@ 0x60
 80064c2:	33ff      	adds	r3, #255	@ 0xff
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	2201      	movs	r2, #1
 80064c8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80064ca:	22a8      	movs	r2, #168	@ 0xa8
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	18bb      	adds	r3, r7, r2
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <ParseBuffer+0x3a2>
 80064d6:	18bb      	adds	r3, r7, r2
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b57      	cmp	r3, #87	@ 0x57
 80064de:	d102      	bne.n	80064e6 <ParseBuffer+0x3a2>
      ConnectionMade = true;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006514 <ParseBuffer+0x3d0>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80064e6:	22a6      	movs	r2, #166	@ 0xa6
 80064e8:	0052      	lsls	r2, r2, #1
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <ParseBuffer+0x3be>
 80064f2:	18bb      	adds	r3, r7, r2
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b32      	cmp	r3, #50	@ 0x32
 80064fa:	d102      	bne.n	8006502 <ParseBuffer+0x3be>
      beurs = true;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <ParseBuffer+0x3d4>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8006502:	2360      	movs	r3, #96	@ 0x60
 8006504:	33ff      	adds	r3, #255	@ 0xff
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	781b      	ldrb	r3, [r3, #0]

}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b059      	add	sp, #356	@ 0x164
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200005a4 	.word	0x200005a4
 8006518:	200005a6 	.word	0x200005a6

0800651c <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8006522:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <PollAwake+0x34>)
 8006524:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f7f9 fe1f 	bl	800016c <strlen>
 800652e:	0003      	movs	r3, r0
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0011      	movs	r1, r2
 8006536:	0018      	movs	r0, r3
 8006538:	f7fe fc88 	bl	8004e4c <ESP_Send>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d001      	beq.n	8006544 <PollAwake+0x28>
    return true;
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <PollAwake+0x2a>
  }
  else{
    return false;
 8006544:	2300      	movs	r3, #0
  }
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b002      	add	sp, #8
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	0802a814 	.word	0x0802a814

08006554 <RFPower>:

bool RFPower(){
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <RFPower+0x34>)
 800655c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	0018      	movs	r0, r3
 8006562:	f7f9 fe03 	bl	800016c <strlen>
 8006566:	0003      	movs	r3, r0
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	0011      	movs	r1, r2
 800656e:	0018      	movs	r0, r3
 8006570:	f7fe fc6c 	bl	8004e4c <ESP_Send>
 8006574:	1e03      	subs	r3, r0, #0
 8006576:	d001      	beq.n	800657c <RFPower+0x28>
    return true;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <RFPower+0x2a>
  }
  else{
    return false;
 800657c:	2300      	movs	r3, #0
  }
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b002      	add	sp, #8
 8006584:	bd80      	pop	{r7, pc}
 8006586:	46c0      	nop			@ (mov r8, r8)
 8006588:	0802a81c 	.word	0x0802a81c

0800658c <CheckRFPower>:

bool CheckRFPower(){
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <CheckRFPower+0x34>)
 8006594:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f7f9 fde7 	bl	800016c <strlen>
 800659e:	0003      	movs	r3, r0
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0011      	movs	r1, r2
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7fe fc50 	bl	8004e4c <ESP_Send>
 80065ac:	1e03      	subs	r3, r0, #0
 80065ae:	d001      	beq.n	80065b4 <CheckRFPower+0x28>
    return true;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80065b4:	2300      	movs	r3, #0
  }
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			@ (mov r8, r8)
 80065c0:	0802a82c 	.word	0x0802a82c

080065c4 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <ATRestore+0x34>)
 80065cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7f9 fdcb 	bl	800016c <strlen>
 80065d6:	0003      	movs	r3, r0
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fe fc34 	bl	8004e4c <ESP_Send>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <ATRestore+0x28>
    return true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <ATRestore+0x2a>
  }
  else{
    return false;
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	0802a83c 	.word	0x0802a83c

080065fc <CWINIT>:

bool CWINIT(){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <CWINIT+0x34>)
 8006604:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fdaf 	bl	800016c <strlen>
 800660e:	0003      	movs	r3, r0
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f7fe fc18 	bl	8004e4c <ESP_Send>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <CWINIT+0x28>
    return true;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <CWINIT+0x2a>
  }
  else{
    return false;
 8006624:	2300      	movs	r3, #0
  }
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	0802a84c 	.word	0x0802a84c

08006634 <CWMODE1>:

bool CWMODE1(){
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <CWMODE1+0x34>)
 800663c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7f9 fd93 	bl	800016c <strlen>
 8006646:	0003      	movs	r3, r0
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0011      	movs	r1, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f7fe fbfc 	bl	8004e4c <ESP_Send>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <CWMODE1+0x28>
    return true;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <CWMODE1+0x2a>
  }
  else{
    return false;
 800665c:	2300      	movs	r3, #0
  }
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	0802a85c 	.word	0x0802a85c

0800666c <CWMODE2>:

bool CWMODE2(){
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <CWMODE2+0x34>)
 8006674:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f7f9 fd77 	bl	800016c <strlen>
 800667e:	0003      	movs	r3, r0
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0011      	movs	r1, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f7fe fbe0 	bl	8004e4c <ESP_Send>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d001      	beq.n	8006694 <CWMODE2+0x28>
    return true;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006694:	2300      	movs	r3, #0
  }
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	0802a86c 	.word	0x0802a86c

080066a4 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <CWAUTOCONN+0x34>)
 80066ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7f9 fd5b 	bl	800016c <strlen>
 80066b6:	0003      	movs	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fe fbc4 	bl	8004e4c <ESP_Send>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <CWAUTOCONN+0x28>
    return true;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80066cc:	2300      	movs	r3, #0
  }
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	0802a87c 	.word	0x0802a87c

080066dc <CWJAP>:

bool CWJAP(){
 80066dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066de:	46c6      	mov	lr, r8
 80066e0:	b500      	push	{lr}
 80066e2:	b0a2      	sub	sp, #136	@ 0x88
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	466b      	mov	r3, sp
 80066e8:	4698      	mov	r8, r3
  beursTest = true;
 80066ea:	4b39      	ldr	r3, [pc, #228]	@ (80067d0 <CWJAP+0xf4>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80066f0:	2618      	movs	r6, #24
 80066f2:	19bb      	adds	r3, r7, r6
 80066f4:	2264      	movs	r2, #100	@ 0x64
 80066f6:	2100      	movs	r1, #0
 80066f8:	0018      	movs	r0, r3
 80066fa:	f01f f83f 	bl	802577c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80066fe:	4b35      	ldr	r3, [pc, #212]	@ (80067d4 <CWJAP+0xf8>)
 8006700:	4a35      	ldr	r2, [pc, #212]	@ (80067d8 <CWJAP+0xfc>)
 8006702:	4936      	ldr	r1, [pc, #216]	@ (80067dc <CWJAP+0x100>)
 8006704:	19b8      	adds	r0, r7, r6
 8006706:	f01e fecf 	bl	80254a8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800670a:	19bb      	adds	r3, r7, r6
 800670c:	0018      	movs	r0, r3
 800670e:	f7f9 fd2d 	bl	800016c <strlen>
 8006712:	0002      	movs	r2, r0
 8006714:	216f      	movs	r1, #111	@ 0x6f
 8006716:	0030      	movs	r0, r6
 8006718:	180b      	adds	r3, r1, r0
 800671a:	19db      	adds	r3, r3, r7
 800671c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800671e:	180b      	adds	r3, r1, r0
 8006720:	19db      	adds	r3, r3, r7
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	2180      	movs	r1, #128	@ 0x80
 800672a:	1879      	adds	r1, r7, r1
 800672c:	600a      	str	r2, [r1, #0]
 800672e:	001a      	movs	r2, r3
 8006730:	60ba      	str	r2, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	60fa      	str	r2, [r7, #12]
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	0002      	movs	r2, r0
 800673c:	0f52      	lsrs	r2, r2, #29
 800673e:	000e      	movs	r6, r1
 8006740:	00f6      	lsls	r6, r6, #3
 8006742:	617e      	str	r6, [r7, #20]
 8006744:	697e      	ldr	r6, [r7, #20]
 8006746:	4316      	orrs	r6, r2
 8006748:	617e      	str	r6, [r7, #20]
 800674a:	0002      	movs	r2, r0
 800674c:	00d2      	lsls	r2, r2, #3
 800674e:	613a      	str	r2, [r7, #16]
 8006750:	001a      	movs	r2, r3
 8006752:	603a      	str	r2, [r7, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	6838      	ldr	r0, [r7, #0]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	0002      	movs	r2, r0
 800675e:	0f52      	lsrs	r2, r2, #29
 8006760:	000e      	movs	r6, r1
 8006762:	00f5      	lsls	r5, r6, #3
 8006764:	4315      	orrs	r5, r2
 8006766:	0002      	movs	r2, r0
 8006768:	00d4      	lsls	r4, r2, #3
 800676a:	3307      	adds	r3, #7
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	466a      	mov	r2, sp
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	469d      	mov	sp, r3
 8006776:	466b      	mov	r3, sp
 8006778:	3300      	adds	r3, #0
 800677a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800677c:	246f      	movs	r4, #111	@ 0x6f
 800677e:	2518      	movs	r5, #24
 8006780:	1963      	adds	r3, r4, r5
 8006782:	19db      	adds	r3, r3, r7
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	001a      	movs	r2, r3
 800678a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800678c:	2100      	movs	r1, #0
 800678e:	0018      	movs	r0, r3
 8006790:	f01e fff4 	bl	802577c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006794:	1963      	adds	r3, r4, r5
 8006796:	19db      	adds	r3, r3, r7
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	1979      	adds	r1, r7, r5
 800679c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800679e:	0018      	movs	r0, r3
 80067a0:	f01f f813 	bl	80257ca <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80067a4:	1963      	adds	r3, r4, r5
 80067a6:	19db      	adds	r3, r3, r7
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fe fb4b 	bl	8004e4c <ESP_Send>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d001      	beq.n	80067be <CWJAP+0xe2>
    return true;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <CWJAP+0xe4>
  }
  else{
    return false;
 80067be:	2300      	movs	r3, #0
 80067c0:	46c5      	mov	sp, r8
  }
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b022      	add	sp, #136	@ 0x88
 80067c8:	bc80      	pop	{r7}
 80067ca:	46b8      	mov	r8, r7
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	200005a5 	.word	0x200005a5
 80067d4:	0802d800 	.word	0x0802d800
 80067d8:	0802d7f4 	.word	0x0802d7f4
 80067dc:	0802a890 	.word	0x0802a890

080067e0 <CWMODE3>:

bool CWMODE3(){
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80067e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <CWMODE3+0x34>)
 80067e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7f9 fcbd 	bl	800016c <strlen>
 80067f2:	0003      	movs	r3, r0
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0011      	movs	r1, r2
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7fe fb26 	bl	8004e4c <ESP_Send>
 8006800:	1e03      	subs	r3, r0, #0
 8006802:	d001      	beq.n	8006808 <CWMODE3+0x28>
    return true;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <CWMODE3+0x2a>
  }
  else{
    return false;
 8006808:	2300      	movs	r3, #0
  }
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	0802a8a8 	.word	0x0802a8a8

08006818 <CWSTATE>:

bool CWSTATE(){
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800681e:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <CWSTATE+0x34>)
 8006820:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f7f9 fca1 	bl	800016c <strlen>
 800682a:	0003      	movs	r3, r0
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f7fe fb0a 	bl	8004e4c <ESP_Send>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d001      	beq.n	8006840 <CWSTATE+0x28>
    return true;
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006840:	2300      	movs	r3, #0
  }
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b002      	add	sp, #8
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	0802a8b8 	.word	0x0802a8b8

08006850 <CWSAP>:

bool CWSAP(){
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006856:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <CWSAP+0x34>)
 8006858:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	0018      	movs	r0, r3
 800685e:	f7f9 fc85 	bl	800016c <strlen>
 8006862:	0003      	movs	r3, r0
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0011      	movs	r1, r2
 800686a:	0018      	movs	r0, r3
 800686c:	f7fe faee 	bl	8004e4c <ESP_Send>
 8006870:	1e03      	subs	r3, r0, #0
 8006872:	d001      	beq.n	8006878 <CWSAP+0x28>
    return true;
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <CWSAP+0x2a>
  }
  else{
    return false;
 8006878:	2300      	movs	r3, #0
  }
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b002      	add	sp, #8
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	0802a8c8 	.word	0x0802a8c8

08006888 <CIPMUX>:

bool CIPMUX(){
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800688e:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <CIPMUX+0x34>)
 8006890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fc69 	bl	800016c <strlen>
 800689a:	0003      	movs	r3, r0
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7fe fad2 	bl	8004e4c <ESP_Send>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d001      	beq.n	80068b0 <CIPMUX+0x28>
    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80068b0:	2300      	movs	r3, #0
  }
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	0802a8ec 	.word	0x0802a8ec

080068c0 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <WEBSERVER+0x34>)
 80068c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7f9 fc4d 	bl	800016c <strlen>
 80068d2:	0003      	movs	r3, r0
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fab6 	bl	8004e4c <ESP_Send>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d001      	beq.n	80068e8 <WEBSERVER+0x28>
    return true;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <WEBSERVER+0x2a>
  }
  else{
    return false;
 80068e8:	2300      	movs	r3, #0
  }
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	0802a8fc 	.word	0x0802a8fc

080068f8 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 80068fe:	1cfb      	adds	r3, r7, #3
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8006904:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <HTTPCPOST+0xa8>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	1dbc      	adds	r4, r7, #6
 800690a:	1cf9      	adds	r1, r7, #3
 800690c:	2200      	movs	r2, #0
 800690e:	0018      	movs	r0, r3
 8006910:	f7fe fca0 	bl	8005254 <CreateMessage>
 8006914:	0003      	movs	r3, r0
 8006916:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006918:	4b21      	ldr	r3, [pc, #132]	@ (80069a0 <HTTPCPOST+0xa8>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8006920:	1dbb      	adds	r3, r7, #6
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	4a1f      	ldr	r2, [pc, #124]	@ (80069a4 <HTTPCPOST+0xac>)
 8006926:	4920      	ldr	r1, [pc, #128]	@ (80069a8 <HTTPCPOST+0xb0>)
 8006928:	4820      	ldr	r0, [pc, #128]	@ (80069ac <HTTPCPOST+0xb4>)
 800692a:	f01e fdbd 	bl	80254a8 <siprintf>
 800692e:	e015      	b.n	800695c <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006930:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <HTTPCPOST+0xb8>)
 8006932:	4820      	ldr	r0, [pc, #128]	@ (80069b4 <HTTPCPOST+0xbc>)
 8006934:	220c      	movs	r2, #12
 8006936:	0019      	movs	r1, r3
 8006938:	f004 fefc 	bl	800b734 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800693c:	4a1c      	ldr	r2, [pc, #112]	@ (80069b0 <HTTPCPOST+0xb8>)
 800693e:	4b1e      	ldr	r3, [pc, #120]	@ (80069b8 <HTTPCPOST+0xc0>)
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f7fe fc62 	bl	800520c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8006948:	1dbb      	adds	r3, r7, #6
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	4c1a      	ldr	r4, [pc, #104]	@ (80069b8 <HTTPCPOST+0xc0>)
 800694e:	4a1b      	ldr	r2, [pc, #108]	@ (80069bc <HTTPCPOST+0xc4>)
 8006950:	491b      	ldr	r1, [pc, #108]	@ (80069c0 <HTTPCPOST+0xc8>)
 8006952:	4816      	ldr	r0, [pc, #88]	@ (80069ac <HTTPCPOST+0xb4>)
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	0023      	movs	r3, r4
 8006958:	f01e fda6 	bl	80254a8 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 800695c:	4b13      	ldr	r3, [pc, #76]	@ (80069ac <HTTPCPOST+0xb4>)
 800695e:	0018      	movs	r0, r3
 8006960:	f7f9 fc04 	bl	800016c <strlen>
 8006964:	0002      	movs	r2, r0
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	8818      	ldrh	r0, [r3, #0]
 800696e:	1cfb      	adds	r3, r7, #3
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4a14      	ldr	r2, [pc, #80]	@ (80069c4 <HTTPCPOST+0xcc>)
 8006974:	4914      	ldr	r1, [pc, #80]	@ (80069c8 <HTTPCPOST+0xd0>)
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	0003      	movs	r3, r0
 800697a:	2003      	movs	r0, #3
 800697c:	f00c fc0a 	bl	8013194 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8006980:	1d3b      	adds	r3, r7, #4
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HTTPCPOST+0xb4>)
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f7fe fa5f 	bl	8004e4c <ESP_Send>
 800698e:	1e03      	subs	r3, r0, #0
 8006990:	d001      	beq.n	8006996 <HTTPCPOST+0x9e>
    return true;
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006996:	2300      	movs	r3, #0
  }
}
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	b003      	add	sp, #12
 800699e:	bd90      	pop	{r4, r7, pc}
 80069a0:	200005a6 	.word	0x200005a6
 80069a4:	0802d81c 	.word	0x0802d81c
 80069a8:	0802a914 	.word	0x0802a914
 80069ac:	200005cc 	.word	0x200005cc
 80069b0:	20000764 	.word	0x20000764
 80069b4:	08080000 	.word	0x08080000
 80069b8:	20000770 	.word	0x20000770
 80069bc:	0802d858 	.word	0x0802d858
 80069c0:	0802a94c 	.word	0x0802a94c
 80069c4:	0802a98c 	.word	0x0802a98c
 80069c8:	08029c00 	.word	0x08029c00

080069cc <SENDDATA>:

bool SENDDATA(){
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af02      	add	r7, sp, #8
  bool result = false;
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 80069d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a14 <SENDDATA+0x48>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	1df9      	adds	r1, r7, #7
 80069de:	2201      	movs	r2, #1
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fe fc37 	bl	8005254 <CreateMessage>
 80069e6:	0003      	movs	r3, r0
 80069e8:	001a      	movs	r2, r3
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <SENDDATA+0x4c>)
 80069ec:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 80069ee:	1dfb      	adds	r3, r7, #7
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	0018      	movs	r0, r3
 80069f4:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <SENDDATA+0x4c>)
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <SENDDATA+0x50>)
 80069fa:	4909      	ldr	r1, [pc, #36]	@ (8006a20 <SENDDATA+0x54>)
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0003      	movs	r3, r0
 8006a00:	2003      	movs	r0, #3
 8006a02:	f00c fbc7 	bl	8013194 <CreateLine>
  return result;
 8006a06:	1dfb      	adds	r3, r7, #7
 8006a08:	781b      	ldrb	r3, [r3, #0]
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	200005a6 	.word	0x200005a6
 8006a18:	200005c0 	.word	0x200005c0
 8006a1c:	0802a9e8 	.word	0x0802a9e8
 8006a20:	08029c00 	.word	0x08029c00

08006a24 <SLEEP>:

bool SLEEP(){
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <SLEEP+0x34>)
 8006a2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7f9 fb9b 	bl	800016c <strlen>
 8006a36:	0003      	movs	r3, r0
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fe fa04 	bl	8004e4c <ESP_Send>
 8006a44:	1e03      	subs	r3, r0, #0
 8006a46:	d001      	beq.n	8006a4c <SLEEP+0x28>
    return true;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <SLEEP+0x2a>
  }
  else{
    return false;
 8006a4c:	2300      	movs	r3, #0
  }
}
 8006a4e:	0018      	movs	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	b002      	add	sp, #8
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	46c0      	nop			@ (mov r8, r8)
 8006a58:	0802aa24 	.word	0x0802aa24

08006a5c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <CIPSNTPCFG+0x3c>)
 8006a64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7f9 fb7f 	bl	800016c <strlen>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0011      	movs	r1, r2
 8006a76:	0018      	movs	r0, r3
 8006a78:	f7fe f9e8 	bl	8004e4c <ESP_Send>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d006      	beq.n	8006a8e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006a80:	23fa      	movs	r3, #250	@ 0xfa
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f00d f8cf 	bl	8013c28 <HAL_Delay>
    return true;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006a8e:	2300      	movs	r3, #0
  }
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	0802aa34 	.word	0x0802aa34

08006a9c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <CIPSNTPTIME+0x34>)
 8006aa4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7f9 fb5f 	bl	800016c <strlen>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0011      	movs	r1, r2
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7fe f9c8 	bl	8004e4c <ESP_Send>
 8006abc:	1e03      	subs	r3, r0, #0
 8006abe:	d001      	beq.n	8006ac4 <CIPSNTPTIME+0x28>
    return true;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006ac4:	2300      	movs	r3, #0
  }
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b002      	add	sp, #8
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	0802aa84 	.word	0x0802aa84

08006ad4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006ada:	4b0b      	ldr	r3, [pc, #44]	@ (8006b08 <CIPSNTPINTV+0x34>)
 8006adc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7f9 fb43 	bl	800016c <strlen>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fe f9ac 	bl	8004e4c <ESP_Send>
 8006af4:	1e03      	subs	r3, r0, #0
 8006af6:	d001      	beq.n	8006afc <CIPSNTPINTV+0x28>
    return true;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006afc:	2300      	movs	r3, #0
  }
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b002      	add	sp, #8
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	0802aa98 	.word	0x0802aa98

08006b0c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006b0c:	b5b0      	push	{r4, r5, r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	0002      	movs	r2, r0
 8006b14:	1dfb      	adds	r3, r7, #7
 8006b16:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006b18:	4b6c      	ldr	r3, [pc, #432]	@ (8006ccc <DMA_ProcessBuffer+0x1c0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	200e      	movs	r0, #14
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	2180      	movs	r1, #128	@ 0x80
 8006b26:	0049      	lsls	r1, r1, #1
 8006b28:	1a8a      	subs	r2, r1, r2
 8006b2a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006b2c:	230d      	movs	r3, #13
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2203      	movs	r2, #3
 8006b32:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006b34:	183b      	adds	r3, r7, r0
 8006b36:	881a      	ldrh	r2, [r3, #0]
 8006b38:	2380      	movs	r3, #128	@ 0x80
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d903      	bls.n	8006b48 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006b40:	183b      	adds	r3, r7, r0
 8006b42:	2280      	movs	r2, #128	@ 0x80
 8006b44:	0052      	lsls	r2, r2, #1
 8006b46:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006b48:	4b61      	ldr	r3, [pc, #388]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	001a      	movs	r2, r3
 8006b50:	230e      	movs	r3, #14
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d131      	bne.n	8006bbe <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006b5a:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b14      	cmp	r3, #20
 8006b60:	d91b      	bls.n	8006b9a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006b62:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006b68:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <DMA_ProcessBuffer+0x1cc>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <DMA_ProcessBuffer+0x74>
 8006b70:	4b5a      	ldr	r3, [pc, #360]	@ (8006cdc <DMA_ProcessBuffer+0x1d0>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006b78:	230d      	movs	r3, #13
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006b80:	4b55      	ldr	r3, [pc, #340]	@ (8006cd8 <DMA_ProcessBuffer+0x1cc>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d103      	bne.n	8006b90 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006b88:	4b55      	ldr	r3, [pc, #340]	@ (8006ce0 <DMA_ProcessBuffer+0x1d4>)
 8006b8a:	220b      	movs	r2, #11
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e016      	b.n	8006bbe <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006b90:	230d      	movs	r3, #13
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	2206      	movs	r2, #6
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e011      	b.n	8006bbe <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006ba4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006ba6:	f00d f835 	bl	8013c14 <HAL_GetTick>
 8006baa:	0003      	movs	r3, r0
 8006bac:	33f5      	adds	r3, #245	@ 0xf5
 8006bae:	33ff      	adds	r3, #255	@ 0xff
 8006bb0:	001a      	movs	r2, r3
 8006bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce4 <DMA_ProcessBuffer+0x1d8>)
 8006bb4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006bb6:	230d      	movs	r3, #13
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2204      	movs	r2, #4
 8006bbc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006bbe:	4b44      	ldr	r3, [pc, #272]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	210e      	movs	r1, #14
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <DMA_ProcessBuffer+0xc6>
 8006bd0:	e075      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006bd2:	4b40      	ldr	r3, [pc, #256]	@ (8006cd4 <DMA_ProcessBuffer+0x1c8>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006bd8:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4b3c      	ldr	r3, [pc, #240]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d109      	bne.n	8006bfc <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bf0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006bf2:	230d      	movs	r3, #13
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e060      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	001a      	movs	r2, r3
 8006c04:	210e      	movs	r1, #14
 8006c06:	187b      	adds	r3, r7, r1
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006c0e:	187b      	adds	r3, r7, r1
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b34      	ldr	r3, [pc, #208]	@ (8006ce8 <DMA_ProcessBuffer+0x1dc>)
 8006c16:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006c18:	230d      	movs	r3, #13
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	220a      	movs	r2, #10
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e04d      	b.n	8006cbe <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006c22:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	001a      	movs	r2, r3
 8006c2a:	210e      	movs	r1, #14
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d917      	bls.n	8006c64 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006c34:	4b26      	ldr	r3, [pc, #152]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006c3e:	18d0      	adds	r0, r2, r3
 8006c40:	4b23      	ldr	r3, [pc, #140]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	001a      	movs	r2, r3
 8006c48:	187b      	adds	r3, r7, r1
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	230d      	movs	r3, #13
 8006c52:	18fc      	adds	r4, r7, r3
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	001a      	movs	r2, r3
 8006c5a:	f7ff fa73 	bl	8006144 <ParseBuffer>
 8006c5e:	0003      	movs	r3, r0
 8006c60:	7023      	strb	r3, [r4, #0]
 8006c62:	e026      	b.n	8006cb2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	001a      	movs	r2, r3
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006c6e:	18d0      	adds	r0, r2, r3
 8006c70:	4b17      	ldr	r3, [pc, #92]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	001a      	movs	r2, r3
 8006c78:	2380      	movs	r3, #128	@ 0x80
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	b299      	uxth	r1, r3
 8006c80:	250d      	movs	r5, #13
 8006c82:	197c      	adds	r4, r7, r5
 8006c84:	1dfb      	adds	r3, r7, #7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	001a      	movs	r2, r3
 8006c8a:	f7ff fa5b 	bl	8006144 <ParseBuffer>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006c92:	210e      	movs	r1, #14
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006c9c:	197c      	adds	r4, r7, r5
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	187b      	adds	r3, r7, r1
 8006ca4:	8819      	ldrh	r1, [r3, #0]
 8006ca6:	4b11      	ldr	r3, [pc, #68]	@ (8006cec <DMA_ProcessBuffer+0x1e0>)
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff fa4b 	bl	8006144 <ParseBuffer>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006cb2:	230e      	movs	r3, #14
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <DMA_ProcessBuffer+0x1c4>)
 8006cbc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006cbe:	230d      	movs	r3, #13
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	20002150 	.word	0x20002150
 8006cd0:	20000789 	.word	0x20000789
 8006cd4:	20000674 	.word	0x20000674
 8006cd8:	20000676 	.word	0x20000676
 8006cdc:	20000001 	.word	0x20000001
 8006ce0:	2000002c 	.word	0x2000002c
 8006ce4:	2000066c 	.word	0x2000066c
 8006ce8:	2000078a 	.word	0x2000078a
 8006cec:	200004a0 	.word	0x200004a0

08006cf0 <clearDMABuffer>:

void clearDMABuffer(){
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006cf4:	2380      	movs	r3, #128	@ 0x80
 8006cf6:	005a      	lsls	r2, r3, #1
 8006cf8:	4b03      	ldr	r3, [pc, #12]	@ (8006d08 <clearDMABuffer+0x18>)
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f01e fd3d 	bl	802577c <memset>
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	200004a0 	.word	0x200004a0

08006d0c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	0002      	movs	r2, r0
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	1dbb      	adds	r3, r7, #6
 8006d1a:	1c0a      	adds	r2, r1, #0
 8006d1c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006d1e:	210f      	movs	r1, #15
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006d26:	1dbb      	adds	r3, r7, #6
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	1dfa      	adds	r2, r7, #7
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	4251      	negs	r1, r2
 8006d36:	414a      	adcs	r2, r1
 8006d38:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006d3a:	1dbb      	adds	r3, r7, #6
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006d42:	230f      	movs	r3, #15
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	1dfa      	adds	r2, r7, #7
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	3a02      	subs	r2, #2
 8006d4c:	4251      	negs	r1, r2
 8006d4e:	414a      	adcs	r2, r1
 8006d50:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006d52:	1dbb      	adds	r3, r7, #6
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d107      	bne.n	8006d6a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006d5a:	230f      	movs	r3, #15
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	1dfa      	adds	r2, r7, #7
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	3a05      	subs	r2, #5
 8006d64:	4251      	negs	r1, r2
 8006d66:	414a      	adcs	r2, r1
 8006d68:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006d6a:	1dbb      	adds	r3, r7, #6
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d107      	bne.n	8006d82 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006d72:	230f      	movs	r3, #15
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	1dfa      	adds	r2, r7, #7
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	3a0b      	subs	r2, #11
 8006d7c:	4251      	negs	r1, r2
 8006d7e:	414a      	adcs	r2, r1
 8006d80:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8006d82:	230f      	movs	r3, #15
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	781b      	ldrb	r3, [r3, #0]
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b004      	add	sp, #16
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006d90:	b590      	push	{r4, r7, lr}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	0002      	movs	r2, r0
 8006d98:	1dfb      	adds	r3, r7, #7
 8006d9a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006d9c:	230f      	movs	r3, #15
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006da4:	1dfb      	adds	r3, r7, #7
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b14      	cmp	r3, #20
 8006daa:	d900      	bls.n	8006dae <AT_Send+0x1e>
 8006dac:	e19e      	b.n	80070ec <AT_Send+0x35c>
 8006dae:	009a      	lsls	r2, r3, #2
 8006db0:	4bd2      	ldr	r3, [pc, #840]	@ (80070fc <AT_Send+0x36c>)
 8006db2:	18d3      	adds	r3, r2, r3
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006db8:	4bd1      	ldr	r3, [pc, #836]	@ (8007100 <AT_Send+0x370>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f00c f993 	bl	80130e8 <TimestampIsReached>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d100      	bne.n	8006dc8 <AT_Send+0x38>
 8006dc6:	e190      	b.n	80070ea <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006dc8:	4ace      	ldr	r2, [pc, #824]	@ (8007104 <AT_Send+0x374>)
 8006dca:	4bcf      	ldr	r3, [pc, #828]	@ (8007108 <AT_Send+0x378>)
 8006dcc:	0019      	movs	r1, r3
 8006dce:	2003      	movs	r0, #3
 8006dd0:	f00c f9e0 	bl	8013194 <CreateLine>
    ATCommandSend = PollAwake();
 8006dd4:	230f      	movs	r3, #15
 8006dd6:	18fc      	adds	r4, r7, r3
 8006dd8:	f7ff fba0 	bl	800651c <PollAwake>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006de0:	f00c ff18 	bl	8013c14 <HAL_GetTick>
 8006de4:	0003      	movs	r3, r0
 8006de6:	3332      	adds	r3, #50	@ 0x32
 8006de8:	001a      	movs	r2, r3
 8006dea:	4bc5      	ldr	r3, [pc, #788]	@ (8007100 <AT_Send+0x370>)
 8006dec:	601a      	str	r2, [r3, #0]
  }
  break;
 8006dee:	e17c      	b.n	80070ea <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006df0:	4ac6      	ldr	r2, [pc, #792]	@ (800710c <AT_Send+0x37c>)
 8006df2:	4bc5      	ldr	r3, [pc, #788]	@ (8007108 <AT_Send+0x378>)
 8006df4:	0019      	movs	r1, r3
 8006df6:	2003      	movs	r0, #3
 8006df8:	f00c f9cc 	bl	8013194 <CreateLine>
    ATCommandSend = RFPower();
 8006dfc:	230f      	movs	r3, #15
 8006dfe:	18fc      	adds	r4, r7, r3
 8006e00:	f7ff fba8 	bl	8006554 <RFPower>
 8006e04:	0003      	movs	r3, r0
 8006e06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e08:	f00c ff04 	bl	8013c14 <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	330a      	adds	r3, #10
 8006e10:	001a      	movs	r2, r3
 8006e12:	4bbb      	ldr	r3, [pc, #748]	@ (8007100 <AT_Send+0x370>)
 8006e14:	601a      	str	r2, [r3, #0]
    break;
 8006e16:	e169      	b.n	80070ec <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006e18:	4abd      	ldr	r2, [pc, #756]	@ (8007110 <AT_Send+0x380>)
 8006e1a:	4bbb      	ldr	r3, [pc, #748]	@ (8007108 <AT_Send+0x378>)
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	2003      	movs	r0, #3
 8006e20:	f00c f9b8 	bl	8013194 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006e24:	230f      	movs	r3, #15
 8006e26:	18fc      	adds	r4, r7, r3
 8006e28:	f7ff fbb0 	bl	800658c <CheckRFPower>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e30:	f00c fef0 	bl	8013c14 <HAL_GetTick>
 8006e34:	0003      	movs	r3, r0
 8006e36:	330a      	adds	r3, #10
 8006e38:	001a      	movs	r2, r3
 8006e3a:	4bb1      	ldr	r3, [pc, #708]	@ (8007100 <AT_Send+0x370>)
 8006e3c:	601a      	str	r2, [r3, #0]
    break;
 8006e3e:	e155      	b.n	80070ec <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006e40:	4ab4      	ldr	r2, [pc, #720]	@ (8007114 <AT_Send+0x384>)
 8006e42:	4bb1      	ldr	r3, [pc, #708]	@ (8007108 <AT_Send+0x378>)
 8006e44:	0019      	movs	r1, r3
 8006e46:	2003      	movs	r0, #3
 8006e48:	f00c f9a4 	bl	8013194 <CreateLine>
    ATCommandSend = ATRestore();
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	18fc      	adds	r4, r7, r3
 8006e50:	f7ff fbb8 	bl	80065c4 <ATRestore>
 8006e54:	0003      	movs	r3, r0
 8006e56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e58:	f00c fedc 	bl	8013c14 <HAL_GetTick>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	3332      	adds	r3, #50	@ 0x32
 8006e60:	001a      	movs	r2, r3
 8006e62:	4ba7      	ldr	r3, [pc, #668]	@ (8007100 <AT_Send+0x370>)
 8006e64:	601a      	str	r2, [r3, #0]
    break;
 8006e66:	e141      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006e68:	4aab      	ldr	r2, [pc, #684]	@ (8007118 <AT_Send+0x388>)
 8006e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007108 <AT_Send+0x378>)
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	2003      	movs	r0, #3
 8006e70:	f00c f990 	bl	8013194 <CreateLine>
    ATCommandSend = CWINIT();
 8006e74:	230f      	movs	r3, #15
 8006e76:	18fc      	adds	r4, r7, r3
 8006e78:	f7ff fbc0 	bl	80065fc <CWINIT>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006e80:	f00c fec8 	bl	8013c14 <HAL_GetTick>
 8006e84:	0003      	movs	r3, r0
 8006e86:	33f5      	adds	r3, #245	@ 0xf5
 8006e88:	33ff      	adds	r3, #255	@ 0xff
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8007100 <AT_Send+0x370>)
 8006e8e:	601a      	str	r2, [r3, #0]
    break;
 8006e90:	e12c      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006e92:	4aa2      	ldr	r2, [pc, #648]	@ (800711c <AT_Send+0x38c>)
 8006e94:	4b9c      	ldr	r3, [pc, #624]	@ (8007108 <AT_Send+0x378>)
 8006e96:	0019      	movs	r1, r3
 8006e98:	2003      	movs	r0, #3
 8006e9a:	f00c f97b 	bl	8013194 <CreateLine>
    ATCommandSend = CWSTATE();
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	18fc      	adds	r4, r7, r3
 8006ea2:	f7ff fcb9 	bl	8006818 <CWSTATE>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006eaa:	f00c feb3 	bl	8013c14 <HAL_GetTick>
 8006eae:	0003      	movs	r3, r0
 8006eb0:	33f5      	adds	r3, #245	@ 0xf5
 8006eb2:	33ff      	adds	r3, #255	@ 0xff
 8006eb4:	001a      	movs	r2, r3
 8006eb6:	4b92      	ldr	r3, [pc, #584]	@ (8007100 <AT_Send+0x370>)
 8006eb8:	601a      	str	r2, [r3, #0]
    break;
 8006eba:	e117      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006ebc:	4a98      	ldr	r2, [pc, #608]	@ (8007120 <AT_Send+0x390>)
 8006ebe:	4b92      	ldr	r3, [pc, #584]	@ (8007108 <AT_Send+0x378>)
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	2003      	movs	r0, #3
 8006ec4:	f00c f966 	bl	8013194 <CreateLine>
    ATCommandSend = CWMODE1();
 8006ec8:	230f      	movs	r3, #15
 8006eca:	18fc      	adds	r4, r7, r3
 8006ecc:	f7ff fbb2 	bl	8006634 <CWMODE1>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ed4:	f00c fe9e 	bl	8013c14 <HAL_GetTick>
 8006ed8:	0003      	movs	r3, r0
 8006eda:	330a      	adds	r3, #10
 8006edc:	001a      	movs	r2, r3
 8006ede:	4b88      	ldr	r3, [pc, #544]	@ (8007100 <AT_Send+0x370>)
 8006ee0:	601a      	str	r2, [r3, #0]
    break;
 8006ee2:	e103      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006ee4:	4a8e      	ldr	r2, [pc, #568]	@ (8007120 <AT_Send+0x390>)
 8006ee6:	4b88      	ldr	r3, [pc, #544]	@ (8007108 <AT_Send+0x378>)
 8006ee8:	0019      	movs	r1, r3
 8006eea:	2003      	movs	r0, #3
 8006eec:	f00c f952 	bl	8013194 <CreateLine>
    ATCommandSend = CWMODE2();
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	18fc      	adds	r4, r7, r3
 8006ef4:	f7ff fbba 	bl	800666c <CWMODE2>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006efc:	f00c fe8a 	bl	8013c14 <HAL_GetTick>
 8006f00:	0003      	movs	r3, r0
 8006f02:	330a      	adds	r3, #10
 8006f04:	001a      	movs	r2, r3
 8006f06:	4b7e      	ldr	r3, [pc, #504]	@ (8007100 <AT_Send+0x370>)
 8006f08:	601a      	str	r2, [r3, #0]
    break;
 8006f0a:	e0ef      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006f0c:	4a85      	ldr	r2, [pc, #532]	@ (8007124 <AT_Send+0x394>)
 8006f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8007108 <AT_Send+0x378>)
 8006f10:	0019      	movs	r1, r3
 8006f12:	2003      	movs	r0, #3
 8006f14:	f00c f93e 	bl	8013194 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006f18:	230f      	movs	r3, #15
 8006f1a:	18fc      	adds	r4, r7, r3
 8006f1c:	f7ff fbc2 	bl	80066a4 <CWAUTOCONN>
 8006f20:	0003      	movs	r3, r0
 8006f22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f24:	f00c fe76 	bl	8013c14 <HAL_GetTick>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	330a      	adds	r3, #10
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	4b74      	ldr	r3, [pc, #464]	@ (8007100 <AT_Send+0x370>)
 8006f30:	601a      	str	r2, [r3, #0]
    break;
 8006f32:	e0db      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006f34:	4a7c      	ldr	r2, [pc, #496]	@ (8007128 <AT_Send+0x398>)
 8006f36:	4b74      	ldr	r3, [pc, #464]	@ (8007108 <AT_Send+0x378>)
 8006f38:	0019      	movs	r1, r3
 8006f3a:	2003      	movs	r0, #3
 8006f3c:	f00c f92a 	bl	8013194 <CreateLine>
    ATCommandSend = CWJAP();
 8006f40:	230f      	movs	r3, #15
 8006f42:	18fc      	adds	r4, r7, r3
 8006f44:	f7ff fbca 	bl	80066dc <CWJAP>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f4c:	f00c fe62 	bl	8013c14 <HAL_GetTick>
 8006f50:	0003      	movs	r3, r0
 8006f52:	3332      	adds	r3, #50	@ 0x32
 8006f54:	001a      	movs	r2, r3
 8006f56:	4b6a      	ldr	r3, [pc, #424]	@ (8007100 <AT_Send+0x370>)
 8006f58:	601a      	str	r2, [r3, #0]
    break;
 8006f5a:	e0c7      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006f5c:	4a73      	ldr	r2, [pc, #460]	@ (800712c <AT_Send+0x39c>)
 8006f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007108 <AT_Send+0x378>)
 8006f60:	0019      	movs	r1, r3
 8006f62:	2003      	movs	r0, #3
 8006f64:	f00c f916 	bl	8013194 <CreateLine>
    ATCommandSend = CWMODE3();
 8006f68:	230f      	movs	r3, #15
 8006f6a:	18fc      	adds	r4, r7, r3
 8006f6c:	f7ff fc38 	bl	80067e0 <CWMODE3>
 8006f70:	0003      	movs	r3, r0
 8006f72:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f74:	f00c fe4e 	bl	8013c14 <HAL_GetTick>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	330a      	adds	r3, #10
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	4b60      	ldr	r3, [pc, #384]	@ (8007100 <AT_Send+0x370>)
 8006f80:	601a      	str	r2, [r3, #0]
    break;
 8006f82:	e0b3      	b.n	80070ec <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006f84:	4a6a      	ldr	r2, [pc, #424]	@ (8007130 <AT_Send+0x3a0>)
 8006f86:	4b60      	ldr	r3, [pc, #384]	@ (8007108 <AT_Send+0x378>)
 8006f88:	0019      	movs	r1, r3
 8006f8a:	2003      	movs	r0, #3
 8006f8c:	f00c f902 	bl	8013194 <CreateLine>
    ATCommandSend = CWSAP();
 8006f90:	230f      	movs	r3, #15
 8006f92:	18fc      	adds	r4, r7, r3
 8006f94:	f7ff fc5c 	bl	8006850 <CWSAP>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f9c:	f00c fe3a 	bl	8013c14 <HAL_GetTick>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	330a      	adds	r3, #10
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	4b56      	ldr	r3, [pc, #344]	@ (8007100 <AT_Send+0x370>)
 8006fa8:	601a      	str	r2, [r3, #0]
    break;
 8006faa:	e09f      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006fac:	4a61      	ldr	r2, [pc, #388]	@ (8007134 <AT_Send+0x3a4>)
 8006fae:	4b56      	ldr	r3, [pc, #344]	@ (8007108 <AT_Send+0x378>)
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	2003      	movs	r0, #3
 8006fb4:	f00c f8ee 	bl	8013194 <CreateLine>
    ATCommandSend = CIPMUX();
 8006fb8:	230f      	movs	r3, #15
 8006fba:	18fc      	adds	r4, r7, r3
 8006fbc:	f7ff fc64 	bl	8006888 <CIPMUX>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fc4:	f00c fe26 	bl	8013c14 <HAL_GetTick>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	330a      	adds	r3, #10
 8006fcc:	001a      	movs	r2, r3
 8006fce:	4b4c      	ldr	r3, [pc, #304]	@ (8007100 <AT_Send+0x370>)
 8006fd0:	601a      	str	r2, [r3, #0]
    break;
 8006fd2:	e08b      	b.n	80070ec <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006fd4:	4a58      	ldr	r2, [pc, #352]	@ (8007138 <AT_Send+0x3a8>)
 8006fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8007108 <AT_Send+0x378>)
 8006fd8:	0019      	movs	r1, r3
 8006fda:	2003      	movs	r0, #3
 8006fdc:	f00c f8da 	bl	8013194 <CreateLine>
    ATCommandSend = WEBSERVER();
 8006fe0:	230f      	movs	r3, #15
 8006fe2:	18fc      	adds	r4, r7, r3
 8006fe4:	f7ff fc6c 	bl	80068c0 <WEBSERVER>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fec:	f00c fe12 	bl	8013c14 <HAL_GetTick>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	330a      	adds	r3, #10
 8006ff4:	001a      	movs	r2, r3
 8006ff6:	4b42      	ldr	r3, [pc, #264]	@ (8007100 <AT_Send+0x370>)
 8006ff8:	601a      	str	r2, [r3, #0]
    break;
 8006ffa:	e077      	b.n	80070ec <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8006ffc:	230f      	movs	r3, #15
 8006ffe:	18fc      	adds	r4, r7, r3
 8007000:	f7ff fc7a 	bl	80068f8 <HTTPCPOST>
 8007004:	0003      	movs	r3, r0
 8007006:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007008:	f00c fe04 	bl	8013c14 <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	33f5      	adds	r3, #245	@ 0xf5
 8007010:	33ff      	adds	r3, #255	@ 0xff
 8007012:	001a      	movs	r2, r3
 8007014:	4b3a      	ldr	r3, [pc, #232]	@ (8007100 <AT_Send+0x370>)
 8007016:	601a      	str	r2, [r3, #0]
    break;
 8007018:	e068      	b.n	80070ec <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800701a:	4a48      	ldr	r2, [pc, #288]	@ (800713c <AT_Send+0x3ac>)
 800701c:	4b3a      	ldr	r3, [pc, #232]	@ (8007108 <AT_Send+0x378>)
 800701e:	0019      	movs	r1, r3
 8007020:	2003      	movs	r0, #3
 8007022:	f00c f8b7 	bl	8013194 <CreateLine>
    ATCommandSend = SENDDATA();
 8007026:	230f      	movs	r3, #15
 8007028:	18fc      	adds	r4, r7, r3
 800702a:	f7ff fccf 	bl	80069cc <SENDDATA>
 800702e:	0003      	movs	r3, r0
 8007030:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007032:	f00c fdef 	bl	8013c14 <HAL_GetTick>
 8007036:	0003      	movs	r3, r0
 8007038:	33f5      	adds	r3, #245	@ 0xf5
 800703a:	33ff      	adds	r3, #255	@ 0xff
 800703c:	001a      	movs	r2, r3
 800703e:	4b30      	ldr	r3, [pc, #192]	@ (8007100 <AT_Send+0x370>)
 8007040:	601a      	str	r2, [r3, #0]
    break;
 8007042:	e053      	b.n	80070ec <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007044:	4a3e      	ldr	r2, [pc, #248]	@ (8007140 <AT_Send+0x3b0>)
 8007046:	4b30      	ldr	r3, [pc, #192]	@ (8007108 <AT_Send+0x378>)
 8007048:	0019      	movs	r1, r3
 800704a:	2003      	movs	r0, #3
 800704c:	f00c f8a2 	bl	8013194 <CreateLine>
    ATCommandSend = SLEEP();
 8007050:	230f      	movs	r3, #15
 8007052:	18fc      	adds	r4, r7, r3
 8007054:	f7ff fce6 	bl	8006a24 <SLEEP>
 8007058:	0003      	movs	r3, r0
 800705a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800705c:	f00c fdda 	bl	8013c14 <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	330a      	adds	r3, #10
 8007064:	001a      	movs	r2, r3
 8007066:	4b26      	ldr	r3, [pc, #152]	@ (8007100 <AT_Send+0x370>)
 8007068:	601a      	str	r2, [r3, #0]
    break;
 800706a:	e03f      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800706c:	4a35      	ldr	r2, [pc, #212]	@ (8007144 <AT_Send+0x3b4>)
 800706e:	4b26      	ldr	r3, [pc, #152]	@ (8007108 <AT_Send+0x378>)
 8007070:	0019      	movs	r1, r3
 8007072:	2003      	movs	r0, #3
 8007074:	f00c f88e 	bl	8013194 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007078:	230f      	movs	r3, #15
 800707a:	18fc      	adds	r4, r7, r3
 800707c:	f7ff fcee 	bl	8006a5c <CIPSNTPCFG>
 8007080:	0003      	movs	r3, r0
 8007082:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007084:	f00c fdc6 	bl	8013c14 <HAL_GetTick>
 8007088:	0003      	movs	r3, r0
 800708a:	330a      	adds	r3, #10
 800708c:	001a      	movs	r2, r3
 800708e:	4b1c      	ldr	r3, [pc, #112]	@ (8007100 <AT_Send+0x370>)
 8007090:	601a      	str	r2, [r3, #0]
    break;
 8007092:	e02b      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8007094:	4a2c      	ldr	r2, [pc, #176]	@ (8007148 <AT_Send+0x3b8>)
 8007096:	4b1c      	ldr	r3, [pc, #112]	@ (8007108 <AT_Send+0x378>)
 8007098:	0019      	movs	r1, r3
 800709a:	2003      	movs	r0, #3
 800709c:	f00c f87a 	bl	8013194 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80070a0:	230f      	movs	r3, #15
 80070a2:	18fc      	adds	r4, r7, r3
 80070a4:	f7ff fcfa 	bl	8006a9c <CIPSNTPTIME>
 80070a8:	0003      	movs	r3, r0
 80070aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80070ac:	f00c fdb2 	bl	8013c14 <HAL_GetTick>
 80070b0:	0003      	movs	r3, r0
 80070b2:	33f5      	adds	r3, #245	@ 0xf5
 80070b4:	33ff      	adds	r3, #255	@ 0xff
 80070b6:	001a      	movs	r2, r3
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <AT_Send+0x370>)
 80070ba:	601a      	str	r2, [r3, #0]
    break;
 80070bc:	e016      	b.n	80070ec <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80070be:	4a23      	ldr	r2, [pc, #140]	@ (800714c <AT_Send+0x3bc>)
 80070c0:	4b11      	ldr	r3, [pc, #68]	@ (8007108 <AT_Send+0x378>)
 80070c2:	0019      	movs	r1, r3
 80070c4:	2003      	movs	r0, #3
 80070c6:	f00c f865 	bl	8013194 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80070ca:	230f      	movs	r3, #15
 80070cc:	18fc      	adds	r4, r7, r3
 80070ce:	f7ff fd01 	bl	8006ad4 <CIPSNTPINTV>
 80070d2:	0003      	movs	r3, r0
 80070d4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070d6:	f00c fd9d 	bl	8013c14 <HAL_GetTick>
 80070da:	0003      	movs	r3, r0
 80070dc:	330a      	adds	r3, #10
 80070de:	001a      	movs	r2, r3
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <AT_Send+0x370>)
 80070e2:	601a      	str	r2, [r3, #0]
    break;
 80070e4:	e002      	b.n	80070ec <AT_Send+0x35c>

  case AT_END:
    break;
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	e000      	b.n	80070ec <AT_Send+0x35c>
  break;
 80070ea:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80070ec:	230f      	movs	r3, #15
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	781b      	ldrb	r3, [r3, #0]
}
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b005      	add	sp, #20
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	46c0      	nop			@ (mov r8, r8)
 80070fc:	0802d8b4 	.word	0x0802d8b4
 8007100:	2000066c 	.word	0x2000066c
 8007104:	0802aab0 	.word	0x0802aab0
 8007108:	08029c00 	.word	0x08029c00
 800710c:	0802aabc 	.word	0x0802aabc
 8007110:	0802aad0 	.word	0x0802aad0
 8007114:	0802aae4 	.word	0x0802aae4
 8007118:	0802aaf4 	.word	0x0802aaf4
 800711c:	0802ab08 	.word	0x0802ab08
 8007120:	0802ab20 	.word	0x0802ab20
 8007124:	0802ab38 	.word	0x0802ab38
 8007128:	0802ab50 	.word	0x0802ab50
 800712c:	0802ab64 	.word	0x0802ab64
 8007130:	0802ab80 	.word	0x0802ab80
 8007134:	0802ab9c 	.word	0x0802ab9c
 8007138:	0802abb8 	.word	0x0802abb8
 800713c:	0802abd4 	.word	0x0802abd4
 8007140:	0802abe4 	.word	0x0802abe4
 8007144:	0802ac08 	.word	0x0802ac08
 8007148:	0802ac1c 	.word	0x0802ac1c
 800714c:	0802ac34 	.word	0x0802ac34

08007150 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800715c:	4b7d      	ldr	r3, [pc, #500]	@ (8007354 <ESP_WakeTest+0x204>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b05      	cmp	r3, #5
 8007162:	d900      	bls.n	8007166 <ESP_WakeTest+0x16>
 8007164:	e0d9      	b.n	800731a <ESP_WakeTest+0x1ca>
 8007166:	009a      	lsls	r2, r3, #2
 8007168:	4b7b      	ldr	r3, [pc, #492]	@ (8007358 <ESP_WakeTest+0x208>)
 800716a:	18d3      	adds	r3, r2, r3
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007170:	4b7a      	ldr	r3, [pc, #488]	@ (800735c <ESP_WakeTest+0x20c>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4053      	eors	r3, r2
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800717e:	2380      	movs	r3, #128	@ 0x80
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4877      	ldr	r0, [pc, #476]	@ (8007360 <ESP_WakeTest+0x210>)
 8007184:	2200      	movs	r2, #0
 8007186:	0019      	movs	r1, r3
 8007188:	f00d ffd5 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800718c:	2032      	movs	r0, #50	@ 0x32
 800718e:	f00c fd4b 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007192:	2380      	movs	r3, #128	@ 0x80
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	4872      	ldr	r0, [pc, #456]	@ (8007360 <ESP_WakeTest+0x210>)
 8007198:	2201      	movs	r2, #1
 800719a:	0019      	movs	r1, r3
 800719c:	f00d ffcb 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071a0:	200a      	movs	r0, #10
 80071a2:	f00c fd41 	bl	8013c28 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80071a6:	4b6f      	ldr	r3, [pc, #444]	@ (8007364 <ESP_WakeTest+0x214>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	2101      	movs	r1, #1
 80071ac:	0018      	movs	r0, r3
 80071ae:	f00d ffc2 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071b2:	200a      	movs	r0, #10
 80071b4:	f00c fd38 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80071b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007364 <ESP_WakeTest+0x214>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	2102      	movs	r1, #2
 80071be:	0018      	movs	r0, r3
 80071c0:	f00d ffb9 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071c4:	200a      	movs	r0, #10
 80071c6:	f00c fd2f 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80071ca:	4b66      	ldr	r3, [pc, #408]	@ (8007364 <ESP_WakeTest+0x214>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	2101      	movs	r1, #1
 80071d0:	0018      	movs	r0, r3
 80071d2:	f00d ffb0 	bl	8015136 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80071d6:	f00c fd1d 	bl	8013c14 <HAL_GetTick>
 80071da:	0003      	movs	r3, r0
 80071dc:	22af      	movs	r2, #175	@ 0xaf
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	189a      	adds	r2, r3, r2
 80071e2:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <ESP_WakeTest+0x218>)
 80071e4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80071e6:	4b5d      	ldr	r3, [pc, #372]	@ (800735c <ESP_WakeTest+0x20c>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80071ec:	2380      	movs	r3, #128	@ 0x80
 80071ee:	005a      	lsls	r2, r3, #1
 80071f0:	4b5e      	ldr	r3, [pc, #376]	@ (800736c <ESP_WakeTest+0x21c>)
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7fd fe5b 	bl	8004eb0 <ESP_Receive>
 80071fa:	1e03      	subs	r3, r0, #0
 80071fc:	d100      	bne.n	8007200 <ESP_WakeTest+0xb0>
 80071fe:	e09f      	b.n	8007340 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8007200:	4b54      	ldr	r3, [pc, #336]	@ (8007354 <ESP_WakeTest+0x204>)
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007206:	e09b      	b.n	8007340 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007208:	4b57      	ldr	r3, [pc, #348]	@ (8007368 <ESP_WakeTest+0x218>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	0018      	movs	r0, r3
 800720e:	f00b ff6b 	bl	80130e8 <TimestampIsReached>
 8007212:	1e03      	subs	r3, r0, #0
 8007214:	d100      	bne.n	8007218 <ESP_WakeTest+0xc8>
 8007216:	e095      	b.n	8007344 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8007218:	4b55      	ldr	r3, [pc, #340]	@ (8007370 <ESP_WakeTest+0x220>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	1dfc      	adds	r4, r7, #7
 800721e:	0018      	movs	r0, r3
 8007220:	f7ff fdb6 	bl	8006d90 <AT_Send>
 8007224:	0003      	movs	r3, r0
 8007226:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d100      	bne.n	8007232 <ESP_WakeTest+0xe2>
 8007230:	e088      	b.n	8007344 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8007232:	4b48      	ldr	r3, [pc, #288]	@ (8007354 <ESP_WakeTest+0x204>)
 8007234:	2202      	movs	r2, #2
 8007236:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007238:	e084      	b.n	8007344 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800723a:	4b4b      	ldr	r3, [pc, #300]	@ (8007368 <ESP_WakeTest+0x218>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0018      	movs	r0, r3
 8007240:	f00b ff52 	bl	80130e8 <TimestampIsReached>
 8007244:	1e03      	subs	r3, r0, #0
 8007246:	d100      	bne.n	800724a <ESP_WakeTest+0xfa>
 8007248:	e07e      	b.n	8007348 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800724a:	4b4a      	ldr	r3, [pc, #296]	@ (8007374 <ESP_WakeTest+0x224>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff fc5c 	bl	8006b0c <DMA_ProcessBuffer>
 8007254:	0003      	movs	r3, r0
 8007256:	001a      	movs	r2, r3
 8007258:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <ESP_WakeTest+0x228>)
 800725a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800725c:	4b46      	ldr	r3, [pc, #280]	@ (8007378 <ESP_WakeTest+0x228>)
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	4b44      	ldr	r3, [pc, #272]	@ (8007374 <ESP_WakeTest+0x224>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	1dbc      	adds	r4, r7, #6
 8007266:	0019      	movs	r1, r3
 8007268:	0010      	movs	r0, r2
 800726a:	f7ff fd4f 	bl	8006d0c <ATCompare>
 800726e:	0003      	movs	r3, r0
 8007270:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007272:	4b41      	ldr	r3, [pc, #260]	@ (8007378 <ESP_WakeTest+0x228>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d102      	bne.n	8007280 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800727a:	4b36      	ldr	r3, [pc, #216]	@ (8007354 <ESP_WakeTest+0x204>)
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007280:	4b3d      	ldr	r3, [pc, #244]	@ (8007378 <ESP_WakeTest+0x228>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b07      	cmp	r3, #7
 8007286:	d104      	bne.n	8007292 <ESP_WakeTest+0x142>
          StartProg();
 8007288:	f7fe ff2a 	bl	80060e0 <StartProg>
          TestState = ESP_TEST_BOOT;
 800728c:	4b31      	ldr	r3, [pc, #196]	@ (8007354 <ESP_WakeTest+0x204>)
 800728e:	2205      	movs	r2, #5
 8007290:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007292:	4b39      	ldr	r3, [pc, #228]	@ (8007378 <ESP_WakeTest+0x228>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d109      	bne.n	80072ae <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800729a:	f00c fcbb 	bl	8013c14 <HAL_GetTick>
 800729e:	0003      	movs	r3, r0
 80072a0:	3332      	adds	r3, #50	@ 0x32
 80072a2:	001a      	movs	r2, r3
 80072a4:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <ESP_WakeTest+0x218>)
 80072a6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80072a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007354 <ESP_WakeTest+0x204>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80072ae:	1dbb      	adds	r3, r7, #6
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d048      	beq.n	8007348 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <ESP_WakeTest+0x204>)
 80072b8:	2203      	movs	r2, #3
 80072ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80072bc:	e044      	b.n	8007348 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80072be:	4b2f      	ldr	r3, [pc, #188]	@ (800737c <ESP_WakeTest+0x22c>)
 80072c0:	22fa      	movs	r2, #250	@ 0xfa
 80072c2:	0112      	lsls	r2, r2, #4
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80072c6:	f00a fc3b 	bl	8011b40 <Calculate_LED_ON>
 80072ca:	0003      	movs	r3, r0
 80072cc:	001a      	movs	r2, r3
 80072ce:	4b2b      	ldr	r3, [pc, #172]	@ (800737c <ESP_WakeTest+0x22c>)
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80072d2:	4b2a      	ldr	r3, [pc, #168]	@ (800737c <ESP_WakeTest+0x22c>)
 80072d4:	22fa      	movs	r2, #250	@ 0xfa
 80072d6:	0112      	lsls	r2, r2, #4
 80072d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80072da:	4b1e      	ldr	r3, [pc, #120]	@ (8007354 <ESP_WakeTest+0x204>)
 80072dc:	2204      	movs	r2, #4
 80072de:	701a      	strb	r2, [r3, #0]

      break;
 80072e0:	e033      	b.n	800734a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80072e2:	4b27      	ldr	r3, [pc, #156]	@ (8007380 <ESP_WakeTest+0x230>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80072e8:	4b1c      	ldr	r3, [pc, #112]	@ (800735c <ESP_WakeTest+0x20c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80072ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007364 <ESP_WakeTest+0x214>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	2101      	movs	r1, #1
 80072f4:	0018      	movs	r0, r3
 80072f6:	f00d ff1e 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80072fa:	2380      	movs	r3, #128	@ 0x80
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	4818      	ldr	r0, [pc, #96]	@ (8007360 <ESP_WakeTest+0x210>)
 8007300:	2200      	movs	r2, #0
 8007302:	0019      	movs	r1, r3
 8007304:	f00d ff17 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007308:	4b16      	ldr	r3, [pc, #88]	@ (8007364 <ESP_WakeTest+0x214>)
 800730a:	2200      	movs	r2, #0
 800730c:	2102      	movs	r1, #2
 800730e:	0018      	movs	r0, r3
 8007310:	f00d ff11 	bl	8015136 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8007314:	f005 fbc4 	bl	800caa0 <SetESPMeasurementDone>
      break;
 8007318:	e017      	b.n	800734a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800731a:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <ESP_WakeTest+0x204>)
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
      break;
 8007320:	e013      	b.n	800734a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007322:	4b16      	ldr	r3, [pc, #88]	@ (800737c <ESP_WakeTest+0x22c>)
 8007324:	22fa      	movs	r2, #250	@ 0xfa
 8007326:	0112      	lsls	r2, r2, #4
 8007328:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800732a:	4b14      	ldr	r3, [pc, #80]	@ (800737c <ESP_WakeTest+0x22c>)
 800732c:	22fa      	movs	r2, #250	@ 0xfa
 800732e:	0112      	lsls	r2, r2, #4
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007332:	f00a fc05 	bl	8011b40 <Calculate_LED_ON>
 8007336:	0003      	movs	r3, r0
 8007338:	001a      	movs	r2, r3
 800733a:	4b10      	ldr	r3, [pc, #64]	@ (800737c <ESP_WakeTest+0x22c>)
 800733c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800733e:	e004      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007340:	46c0      	nop			@ (mov r8, r8)
 8007342:	e002      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007344:	46c0      	nop			@ (mov r8, r8)
 8007346:	e000      	b.n	800734a <ESP_WakeTest+0x1fa>
      break;
 8007348:	46c0      	nop			@ (mov r8, r8)
  }
}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	46bd      	mov	sp, r7
 800734e:	b003      	add	sp, #12
 8007350:	bd90      	pop	{r4, r7, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	20000678 	.word	0x20000678
 8007358:	0802d908 	.word	0x0802d908
 800735c:	200005a0 	.word	0x200005a0
 8007360:	50000800 	.word	0x50000800
 8007364:	50001c00 	.word	0x50001c00
 8007368:	2000066c 	.word	0x2000066c
 800736c:	200004a0 	.word	0x200004a0
 8007370:	20000676 	.word	0x20000676
 8007374:	20000675 	.word	0x20000675
 8007378:	2000002e 	.word	0x2000002e
 800737c:	40000400 	.word	0x40000400
 8007380:	20000001 	.word	0x20000001

08007384 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007384:	b5b0      	push	{r4, r5, r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800738a:	1dfb      	adds	r3, r7, #7
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007390:	4bdf      	ldr	r3, [pc, #892]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	4bdf      	ldr	r3, [pc, #892]	@ (8007714 <ESP_Upkeep+0x390>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d024      	beq.n	80073e6 <ESP_Upkeep+0x62>
 800739c:	f00b ff74 	bl	8013288 <GetVerboseLevel>
 80073a0:	0003      	movs	r3, r0
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d11f      	bne.n	80073e6 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80073a6:	4bda      	ldr	r3, [pc, #872]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	4bda      	ldr	r3, [pc, #872]	@ (8007714 <ESP_Upkeep+0x390>)
 80073ac:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80073ae:	4bd9      	ldr	r3, [pc, #868]	@ (8007714 <ESP_Upkeep+0x390>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d103      	bne.n	80073be <ESP_Upkeep+0x3a>
 80073b6:	4bd8      	ldr	r3, [pc, #864]	@ (8007718 <ESP_Upkeep+0x394>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b0e      	cmp	r3, #14
 80073bc:	d013      	beq.n	80073e6 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80073be:	4bd5      	ldr	r3, [pc, #852]	@ (8007714 <ESP_Upkeep+0x390>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	001d      	movs	r5, r3
 80073c4:	4bd4      	ldr	r3, [pc, #848]	@ (8007718 <ESP_Upkeep+0x394>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	0018      	movs	r0, r3
 80073ca:	4bd4      	ldr	r3, [pc, #848]	@ (800771c <ESP_Upkeep+0x398>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	001c      	movs	r4, r3
 80073d0:	4bd3      	ldr	r3, [pc, #844]	@ (8007720 <ESP_Upkeep+0x39c>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	4ad3      	ldr	r2, [pc, #844]	@ (8007724 <ESP_Upkeep+0x3a0>)
 80073d6:	49d4      	ldr	r1, [pc, #848]	@ (8007728 <ESP_Upkeep+0x3a4>)
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	9401      	str	r4, [sp, #4]
 80073dc:	9000      	str	r0, [sp, #0]
 80073de:	002b      	movs	r3, r5
 80073e0:	2003      	movs	r0, #3
 80073e2:	f00b fed7 	bl	8013194 <CreateLine>
    }
  }
  switch (EspState) {
 80073e6:	4bca      	ldr	r3, [pc, #808]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b0f      	cmp	r3, #15
 80073ec:	d901      	bls.n	80073f2 <ESP_Upkeep+0x6e>
 80073ee:	f000 fc5e 	bl	8007cae <ESP_Upkeep+0x92a>
 80073f2:	009a      	lsls	r2, r3, #2
 80073f4:	4bcd      	ldr	r3, [pc, #820]	@ (800772c <ESP_Upkeep+0x3a8>)
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80073fc:	4bc4      	ldr	r3, [pc, #784]	@ (8007710 <ESP_Upkeep+0x38c>)
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	f000 fc6f 	bl	8007ce4 <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 8007406:	4bca      	ldr	r3, [pc, #808]	@ (8007730 <ESP_Upkeep+0x3ac>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 800740c:	f005 fda8 	bl	800cf60 <AllDevicesReady>
 8007410:	0003      	movs	r3, r0
 8007412:	001a      	movs	r2, r3
 8007414:	2301      	movs	r3, #1
 8007416:	4053      	eors	r3, r2
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <ESP_Upkeep+0x9e>
 800741e:	f000 fc52 	bl	8007cc6 <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 8007422:	f00a fd1f 	bl	8011e64 <SetESPIndicator>
      if(!EspTurnedOn){
 8007426:	4bc3      	ldr	r3, [pc, #780]	@ (8007734 <ESP_Upkeep+0x3b0>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2201      	movs	r2, #1
 800742c:	4053      	eors	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d036      	beq.n	80074a2 <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007434:	2380      	movs	r3, #128	@ 0x80
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	48bf      	ldr	r0, [pc, #764]	@ (8007738 <ESP_Upkeep+0x3b4>)
 800743a:	2200      	movs	r2, #0
 800743c:	0019      	movs	r1, r3
 800743e:	f00d fe7a 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007442:	2001      	movs	r0, #1
 8007444:	f00c fbf0 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	48ba      	ldr	r0, [pc, #744]	@ (8007738 <ESP_Upkeep+0x3b4>)
 800744e:	2201      	movs	r2, #1
 8007450:	0019      	movs	r1, r3
 8007452:	f00d fe70 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007456:	2001      	movs	r0, #1
 8007458:	f00c fbe6 	bl	8013c28 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800745c:	4bb7      	ldr	r3, [pc, #732]	@ (800773c <ESP_Upkeep+0x3b8>)
 800745e:	2200      	movs	r2, #0
 8007460:	2101      	movs	r1, #1
 8007462:	0018      	movs	r0, r3
 8007464:	f00d fe67 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007468:	2001      	movs	r0, #1
 800746a:	f00c fbdd 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800746e:	4bb3      	ldr	r3, [pc, #716]	@ (800773c <ESP_Upkeep+0x3b8>)
 8007470:	2201      	movs	r2, #1
 8007472:	2102      	movs	r1, #2
 8007474:	0018      	movs	r0, r3
 8007476:	f00d fe5e 	bl	8015136 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800747a:	2001      	movs	r0, #1
 800747c:	f00c fbd4 	bl	8013c28 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007480:	4bae      	ldr	r3, [pc, #696]	@ (800773c <ESP_Upkeep+0x3b8>)
 8007482:	2201      	movs	r2, #1
 8007484:	2101      	movs	r1, #1
 8007486:	0018      	movs	r0, r3
 8007488:	f00d fe55 	bl	8015136 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800748c:	f00c fbc2 	bl	8013c14 <HAL_GetTick>
 8007490:	0003      	movs	r3, r0
 8007492:	22af      	movs	r2, #175	@ 0xaf
 8007494:	0092      	lsls	r2, r2, #2
 8007496:	189a      	adds	r2, r3, r2
 8007498:	4ba9      	ldr	r3, [pc, #676]	@ (8007740 <ESP_Upkeep+0x3bc>)
 800749a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800749c:	4ba5      	ldr	r3, [pc, #660]	@ (8007734 <ESP_Upkeep+0x3b0>)
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	005a      	lsls	r2, r3, #1
 80074a6:	4ba7      	ldr	r3, [pc, #668]	@ (8007744 <ESP_Upkeep+0x3c0>)
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7fd fd00 	bl	8004eb0 <ESP_Receive>
 80074b0:	1e03      	subs	r3, r0, #0
 80074b2:	d101      	bne.n	80074b8 <ESP_Upkeep+0x134>
 80074b4:	f000 fc09 	bl	8007cca <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 80074b8:	4b95      	ldr	r3, [pc, #596]	@ (8007710 <ESP_Upkeep+0x38c>)
 80074ba:	220f      	movs	r2, #15
 80074bc:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80074be:	f00c fba9 	bl	8013c14 <HAL_GetTick>
 80074c2:	0003      	movs	r3, r0
 80074c4:	22fa      	movs	r2, #250	@ 0xfa
 80074c6:	00d2      	lsls	r2, r2, #3
 80074c8:	189a      	adds	r2, r3, r2
 80074ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007748 <ESP_Upkeep+0x3c4>)
 80074cc:	601a      	str	r2, [r3, #0]
      }
      break;
 80074ce:	f000 fbfc 	bl	8007cca <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7ff fb1a 	bl	8006b0c <DMA_ProcessBuffer>
 80074d8:	0003      	movs	r3, r0
 80074da:	001a      	movs	r2, r3
 80074dc:	4b9b      	ldr	r3, [pc, #620]	@ (800774c <ESP_Upkeep+0x3c8>)
 80074de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80074e0:	4b9a      	ldr	r3, [pc, #616]	@ (800774c <ESP_Upkeep+0x3c8>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	1dbc      	adds	r4, r7, #6
 80074e6:	2101      	movs	r1, #1
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7ff fc0f 	bl	8006d0c <ATCompare>
 80074ee:	0003      	movs	r3, r0
 80074f0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80074f2:	1dbb      	adds	r3, r7, #6
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <ESP_Upkeep+0x188>
 80074fa:	4b93      	ldr	r3, [pc, #588]	@ (8007748 <ESP_Upkeep+0x3c4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0018      	movs	r0, r3
 8007500:	f00b fdf2 	bl	80130e8 <TimestampIsReached>
 8007504:	1e03      	subs	r3, r0, #0
 8007506:	d101      	bne.n	800750c <ESP_Upkeep+0x188>
 8007508:	f000 fbe1 	bl	8007cce <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 800750c:	4b80      	ldr	r3, [pc, #512]	@ (8007710 <ESP_Upkeep+0x38c>)
 800750e:	220b      	movs	r2, #11
 8007510:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007512:	f000 fbdc 	bl	8007cce <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007516:	4b8e      	ldr	r3, [pc, #568]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007518:	2209      	movs	r2, #9
 800751a:	2114      	movs	r1, #20
 800751c:	0018      	movs	r0, r3
 800751e:	f01e f92d 	bl	802577c <memset>
      if(!InitIsDone || WifiReset){
 8007522:	4b8c      	ldr	r3, [pc, #560]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2201      	movs	r2, #1
 8007528:	4053      	eors	r3, r2
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <ESP_Upkeep+0x1b4>
 8007530:	4b89      	ldr	r3, [pc, #548]	@ (8007758 <ESP_Upkeep+0x3d4>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01a      	beq.n	800756e <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007538:	4b85      	ldr	r3, [pc, #532]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800753a:	4a88      	ldr	r2, [pc, #544]	@ (800775c <ESP_Upkeep+0x3d8>)
 800753c:	6811      	ldr	r1, [r2, #0]
 800753e:	6019      	str	r1, [r3, #0]
 8007540:	8891      	ldrh	r1, [r2, #4]
 8007542:	8099      	strh	r1, [r3, #4]
 8007544:	7992      	ldrb	r2, [r2, #6]
 8007546:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8007548:	4b71      	ldr	r3, [pc, #452]	@ (8007710 <ESP_Upkeep+0x38c>)
 800754a:	2204      	movs	r2, #4
 800754c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800754e:	4b84      	ldr	r3, [pc, #528]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8007554:	4b71      	ldr	r3, [pc, #452]	@ (800771c <ESP_Upkeep+0x398>)
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800755a:	4b81      	ldr	r3, [pc, #516]	@ (8007760 <ESP_Upkeep+0x3dc>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	001a      	movs	r2, r3
 8007560:	4b7b      	ldr	r3, [pc, #492]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007562:	5c9a      	ldrb	r2, [r3, r2]
 8007564:	4b6c      	ldr	r3, [pc, #432]	@ (8007718 <ESP_Upkeep+0x394>)
 8007566:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007568:	4b6d      	ldr	r3, [pc, #436]	@ (8007720 <ESP_Upkeep+0x39c>)
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800756e:	4b79      	ldr	r3, [pc, #484]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01f      	beq.n	80075b6 <ESP_Upkeep+0x232>
 8007576:	4b7b      	ldr	r3, [pc, #492]	@ (8007764 <ESP_Upkeep+0x3e0>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	4053      	eors	r3, r2
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d018      	beq.n	80075b6 <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007584:	4b72      	ldr	r3, [pc, #456]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007586:	4a78      	ldr	r2, [pc, #480]	@ (8007768 <ESP_Upkeep+0x3e4>)
 8007588:	6811      	ldr	r1, [r2, #0]
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	8892      	ldrh	r2, [r2, #4]
 800758e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007590:	4b5f      	ldr	r3, [pc, #380]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007592:	2204      	movs	r2, #4
 8007594:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007596:	4b72      	ldr	r3, [pc, #456]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800759c:	4b5f      	ldr	r3, [pc, #380]	@ (800771c <ESP_Upkeep+0x398>)
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80075a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	001a      	movs	r2, r3
 80075a8:	4b69      	ldr	r3, [pc, #420]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075aa:	5c9a      	ldrb	r2, [r3, r2]
 80075ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007718 <ESP_Upkeep+0x394>)
 80075ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075b0:	4b5b      	ldr	r3, [pc, #364]	@ (8007720 <ESP_Upkeep+0x39c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80075b6:	4b67      	ldr	r3, [pc, #412]	@ (8007754 <ESP_Upkeep+0x3d0>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <ESP_Upkeep+0x27e>
 80075be:	4b69      	ldr	r3, [pc, #420]	@ (8007764 <ESP_Upkeep+0x3e0>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01d      	beq.n	8007602 <ESP_Upkeep+0x27e>
 80075c6:	4b69      	ldr	r3, [pc, #420]	@ (800776c <ESP_Upkeep+0x3e8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2201      	movs	r2, #1
 80075cc:	4053      	eors	r3, r2
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80075d4:	4b66      	ldr	r3, [pc, #408]	@ (8007770 <ESP_Upkeep+0x3ec>)
 80075d6:	881a      	ldrh	r2, [r3, #0]
 80075d8:	4b5d      	ldr	r3, [pc, #372]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075da:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80075dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007710 <ESP_Upkeep+0x38c>)
 80075de:	2204      	movs	r2, #4
 80075e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80075e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80075e8:	4b4c      	ldr	r3, [pc, #304]	@ (800771c <ESP_Upkeep+0x398>)
 80075ea:	2204      	movs	r2, #4
 80075ec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80075ee:	4b5c      	ldr	r3, [pc, #368]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	001a      	movs	r2, r3
 80075f4:	4b56      	ldr	r3, [pc, #344]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80075f6:	5c9a      	ldrb	r2, [r3, r2]
 80075f8:	4b47      	ldr	r3, [pc, #284]	@ (8007718 <ESP_Upkeep+0x394>)
 80075fa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075fc:	4b48      	ldr	r3, [pc, #288]	@ (8007720 <ESP_Upkeep+0x39c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8007602:	4b54      	ldr	r3, [pc, #336]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d02c      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 800760a:	4b56      	ldr	r3, [pc, #344]	@ (8007764 <ESP_Upkeep+0x3e0>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d028      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 8007612:	4b56      	ldr	r3, [pc, #344]	@ (800776c <ESP_Upkeep+0x3e8>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d024      	beq.n	8007664 <ESP_Upkeep+0x2e0>
 800761a:	4b56      	ldr	r3, [pc, #344]	@ (8007774 <ESP_Upkeep+0x3f0>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	4053      	eors	r3, r2
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01d      	beq.n	8007664 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007628:	4b49      	ldr	r3, [pc, #292]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800762a:	4a53      	ldr	r2, [pc, #332]	@ (8007778 <ESP_Upkeep+0x3f4>)
 800762c:	8811      	ldrh	r1, [r2, #0]
 800762e:	8019      	strh	r1, [r3, #0]
 8007630:	7892      	ldrb	r2, [r2, #2]
 8007632:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007634:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <ESP_Upkeep+0x38c>)
 8007636:	2204      	movs	r2, #4
 8007638:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800763a:	4b49      	ldr	r3, [pc, #292]	@ (8007760 <ESP_Upkeep+0x3dc>)
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007640:	4b36      	ldr	r3, [pc, #216]	@ (800771c <ESP_Upkeep+0x398>)
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007646:	f00c fae5 	bl	8013c14 <HAL_GetTick>
 800764a:	0002      	movs	r2, r0
 800764c:	4b4b      	ldr	r3, [pc, #300]	@ (800777c <ESP_Upkeep+0x3f8>)
 800764e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007650:	4b43      	ldr	r3, [pc, #268]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	001a      	movs	r2, r3
 8007656:	4b3e      	ldr	r3, [pc, #248]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007658:	5c9a      	ldrb	r2, [r3, r2]
 800765a:	4b2f      	ldr	r3, [pc, #188]	@ (8007718 <ESP_Upkeep+0x394>)
 800765c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800765e:	4b30      	ldr	r3, [pc, #192]	@ (8007720 <ESP_Upkeep+0x39c>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8007664:	4b3b      	ldr	r3, [pc, #236]	@ (8007754 <ESP_Upkeep+0x3d0>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d027      	beq.n	80076bc <ESP_Upkeep+0x338>
 800766c:	4b3d      	ldr	r3, [pc, #244]	@ (8007764 <ESP_Upkeep+0x3e0>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d023      	beq.n	80076bc <ESP_Upkeep+0x338>
 8007674:	4b3d      	ldr	r3, [pc, #244]	@ (800776c <ESP_Upkeep+0x3e8>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01f      	beq.n	80076bc <ESP_Upkeep+0x338>
 800767c:	4b3d      	ldr	r3, [pc, #244]	@ (8007774 <ESP_Upkeep+0x3f0>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01b      	beq.n	80076bc <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007684:	4b3e      	ldr	r3, [pc, #248]	@ (8007780 <ESP_Upkeep+0x3fc>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	4b31      	ldr	r3, [pc, #196]	@ (8007750 <ESP_Upkeep+0x3cc>)
 800768a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800768c:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <ESP_Upkeep+0x38c>)
 800768e:	2204      	movs	r2, #4
 8007690:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007692:	4b33      	ldr	r3, [pc, #204]	@ (8007760 <ESP_Upkeep+0x3dc>)
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007698:	4b20      	ldr	r3, [pc, #128]	@ (800771c <ESP_Upkeep+0x398>)
 800769a:	2205      	movs	r2, #5
 800769c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800769e:	f00c fab9 	bl	8013c14 <HAL_GetTick>
 80076a2:	0002      	movs	r2, r0
 80076a4:	4b35      	ldr	r3, [pc, #212]	@ (800777c <ESP_Upkeep+0x3f8>)
 80076a6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	001a      	movs	r2, r3
 80076ae:	4b28      	ldr	r3, [pc, #160]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80076b0:	5c9a      	ldrb	r2, [r3, r2]
 80076b2:	4b19      	ldr	r3, [pc, #100]	@ (8007718 <ESP_Upkeep+0x394>)
 80076b4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80076b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <ESP_Upkeep+0x39c>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80076bc:	4b31      	ldr	r3, [pc, #196]	@ (8007784 <ESP_Upkeep+0x400>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <ESP_Upkeep+0x342>
 80076c4:	e305      	b.n	8007cd2 <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80076c6:	4b22      	ldr	r3, [pc, #136]	@ (8007750 <ESP_Upkeep+0x3cc>)
 80076c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007788 <ESP_Upkeep+0x404>)
 80076ca:	6811      	ldr	r1, [r2, #0]
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	7912      	ldrb	r2, [r2, #4]
 80076d0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80076d2:	4a2e      	ldr	r2, [pc, #184]	@ (800778c <ESP_Upkeep+0x408>)
 80076d4:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <ESP_Upkeep+0x3a4>)
 80076d6:	0019      	movs	r1, r3
 80076d8:	2003      	movs	r0, #3
 80076da:	f00b fd5b 	bl	8013194 <CreateLine>
        DisableConnectedDevices();
 80076de:	f005 fdad 	bl	800d23c <DisableConnectedDevices>
        usblog = false;
 80076e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007790 <ESP_Upkeep+0x40c>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <ESP_Upkeep+0x38c>)
 80076ea:	2204      	movs	r2, #4
 80076ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80076ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80076f4:	4b09      	ldr	r3, [pc, #36]	@ (800771c <ESP_Upkeep+0x398>)
 80076f6:	2203      	movs	r2, #3
 80076f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076fa:	4b19      	ldr	r3, [pc, #100]	@ (8007760 <ESP_Upkeep+0x3dc>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	001a      	movs	r2, r3
 8007700:	4b13      	ldr	r3, [pc, #76]	@ (8007750 <ESP_Upkeep+0x3cc>)
 8007702:	5c9a      	ldrb	r2, [r3, r2]
 8007704:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <ESP_Upkeep+0x394>)
 8007706:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <ESP_Upkeep+0x39c>)
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800770e:	e2e0      	b.n	8007cd2 <ESP_Upkeep+0x94e>
 8007710:	2000002c 	.word	0x2000002c
 8007714:	20000003 	.word	0x20000003
 8007718:	20000676 	.word	0x20000676
 800771c:	20000677 	.word	0x20000677
 8007720:	20000675 	.word	0x20000675
 8007724:	0802ac54 	.word	0x0802ac54
 8007728:	08029c00 	.word	0x08029c00
 800772c:	0802d920 	.word	0x0802d920
 8007730:	20000e10 	.word	0x20000e10
 8007734:	200005a0 	.word	0x200005a0
 8007738:	50000800 	.word	0x50000800
 800773c:	50001c00 	.word	0x50001c00
 8007740:	2000066c 	.word	0x2000066c
 8007744:	200004a0 	.word	0x200004a0
 8007748:	2000078c 	.word	0x2000078c
 800774c:	2000002f 	.word	0x2000002f
 8007750:	2000065c 	.word	0x2000065c
 8007754:	200005a1 	.word	0x200005a1
 8007758:	200005a2 	.word	0x200005a2
 800775c:	20000004 	.word	0x20000004
 8007760:	20000666 	.word	0x20000666
 8007764:	200005a4 	.word	0x200005a4
 8007768:	20000014 	.word	0x20000014
 800776c:	200005a5 	.word	0x200005a5
 8007770:	20000010 	.word	0x20000010
 8007774:	20000002 	.word	0x20000002
 8007778:	2000000c 	.word	0x2000000c
 800777c:	200005b8 	.word	0x200005b8
 8007780:	20000024 	.word	0x20000024
 8007784:	200005a3 	.word	0x200005a3
 8007788:	2000001c 	.word	0x2000001c
 800778c:	0802ac80 	.word	0x0802ac80
 8007790:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007794:	4bdd      	ldr	r3, [pc, #884]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	1dfc      	adds	r4, r7, #7
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff faf8 	bl	8006d90 <AT_Send>
 80077a0:	0003      	movs	r3, r0
 80077a2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80077a4:	1dfb      	adds	r3, r7, #7
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d100      	bne.n	80077ae <ESP_Upkeep+0x42a>
 80077ac:	e293      	b.n	8007cd6 <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80077ae:	4bd8      	ldr	r3, [pc, #864]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80077b0:	2203      	movs	r2, #3
 80077b2:	701a      	strb	r2, [r3, #0]
        }
    break;
 80077b4:	e28f      	b.n	8007cd6 <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80077b6:	4bd7      	ldr	r3, [pc, #860]	@ (8007b14 <ESP_Upkeep+0x790>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <ESP_Upkeep+0x44a>
 80077be:	4bd6      	ldr	r3, [pc, #856]	@ (8007b18 <ESP_Upkeep+0x794>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d003      	beq.n	80077ce <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 80077c6:	4bd2      	ldr	r3, [pc, #840]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80077c8:	220b      	movs	r2, #11
 80077ca:	701a      	strb	r2, [r3, #0]
        break;
 80077cc:	e28a      	b.n	8007ce4 <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80077ce:	4bd3      	ldr	r3, [pc, #844]	@ (8007b1c <ESP_Upkeep+0x798>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f00b fc88 	bl	80130e8 <TimestampIsReached>
 80077d8:	1e03      	subs	r3, r0, #0
 80077da:	d100      	bne.n	80077de <ESP_Upkeep+0x45a>
 80077dc:	e27d      	b.n	8007cda <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80077de:	4bd0      	ldr	r3, [pc, #832]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff f992 	bl	8006b0c <DMA_ProcessBuffer>
 80077e8:	0003      	movs	r3, r0
 80077ea:	001a      	movs	r2, r3
 80077ec:	4bcd      	ldr	r3, [pc, #820]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80077ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80077f0:	4bcc      	ldr	r3, [pc, #816]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	4bca      	ldr	r3, [pc, #808]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	1d7c      	adds	r4, r7, #5
 80077fa:	0019      	movs	r1, r3
 80077fc:	0010      	movs	r0, r2
 80077fe:	f7ff fa85 	bl	8006d0c <ATCompare>
 8007802:	0003      	movs	r3, r0
 8007804:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007806:	4bc7      	ldr	r3, [pc, #796]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d138      	bne.n	8007880 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 800780e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d108      	bne.n	8007828 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 8007816:	4bbd      	ldr	r3, [pc, #756]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007818:	220e      	movs	r2, #14
 800781a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800781c:	4bc0      	ldr	r3, [pc, #768]	@ (8007b20 <ESP_Upkeep+0x79c>)
 800781e:	2202      	movs	r2, #2
 8007820:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007822:	4bc1      	ldr	r3, [pc, #772]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007828:	4bb9      	ldr	r3, [pc, #740]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800782a:	2204      	movs	r2, #4
 800782c:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800782e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	4bbd      	ldr	r3, [pc, #756]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007838:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 800783a:	4bbc      	ldr	r3, [pc, #752]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d91e      	bls.n	8007880 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007842:	f00c f9e7 	bl	8013c14 <HAL_GetTick>
 8007846:	0003      	movs	r3, r0
 8007848:	4ab9      	ldr	r2, [pc, #740]	@ (8007b30 <ESP_Upkeep+0x7ac>)
 800784a:	189a      	adds	r2, r3, r2
 800784c:	4bb3      	ldr	r3, [pc, #716]	@ (8007b1c <ESP_Upkeep+0x798>)
 800784e:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007850:	4bb8      	ldr	r3, [pc, #736]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 8007852:	2201      	movs	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007856:	f7ff fa4b 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 800785a:	f00c f9db 	bl	8013c14 <HAL_GetTick>
 800785e:	0002      	movs	r2, r0
 8007860:	4bb5      	ldr	r3, [pc, #724]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007862:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007864:	4bb4      	ldr	r3, [pc, #720]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	4bb4      	ldr	r3, [pc, #720]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	4ab4      	ldr	r2, [pc, #720]	@ (8007b40 <ESP_Upkeep+0x7bc>)
 8007870:	49b4      	ldr	r1, [pc, #720]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 8007872:	2001      	movs	r0, #1
 8007874:	f00b fc8e 	bl	8013194 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007878:	4ba5      	ldr	r3, [pc, #660]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800787a:	220d      	movs	r2, #13
 800787c:	701a      	strb	r2, [r3, #0]
            break;
 800787e:	e231      	b.n	8007ce4 <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007880:	4ba8      	ldr	r3, [pc, #672]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d106      	bne.n	8007896 <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007888:	f00c f9c4 	bl	8013c14 <HAL_GetTick>
 800788c:	0003      	movs	r3, r0
 800788e:	330a      	adds	r3, #10
 8007890:	001a      	movs	r2, r3
 8007892:	4ba2      	ldr	r3, [pc, #648]	@ (8007b1c <ESP_Upkeep+0x798>)
 8007894:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007896:	4ba3      	ldr	r3, [pc, #652]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b0a      	cmp	r3, #10
 800789c:	d106      	bne.n	80078ac <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 800789e:	f00c f9b9 	bl	8013c14 <HAL_GetTick>
 80078a2:	0003      	movs	r3, r0
 80078a4:	330a      	adds	r3, #10
 80078a6:	001a      	movs	r2, r3
 80078a8:	4b9c      	ldr	r3, [pc, #624]	@ (8007b1c <ESP_Upkeep+0x798>)
 80078aa:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80078ac:	4b9d      	ldr	r3, [pc, #628]	@ (8007b24 <ESP_Upkeep+0x7a0>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d14b      	bne.n	800794c <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 80078b4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	4ba2      	ldr	r3, [pc, #648]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078be:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80078c0:	4aa2      	ldr	r2, [pc, #648]	@ (8007b4c <ESP_Upkeep+0x7c8>)
 80078c2:	4ba0      	ldr	r3, [pc, #640]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 80078c4:	0019      	movs	r1, r3
 80078c6:	2001      	movs	r0, #1
 80078c8:	f00b fc64 	bl	8013194 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80078cc:	4b9e      	ldr	r3, [pc, #632]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d924      	bls.n	800791e <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80078d4:	f00c f99e 	bl	8013c14 <HAL_GetTick>
 80078d8:	0003      	movs	r3, r0
 80078da:	4a9d      	ldr	r2, [pc, #628]	@ (8007b50 <ESP_Upkeep+0x7cc>)
 80078dc:	189a      	adds	r2, r3, r2
 80078de:	4b8f      	ldr	r3, [pc, #572]	@ (8007b1c <ESP_Upkeep+0x798>)
 80078e0:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80078e2:	4b94      	ldr	r3, [pc, #592]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80078e8:	f7ff fa02 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 80078ec:	f00c f992 	bl	8013c14 <HAL_GetTick>
 80078f0:	0002      	movs	r2, r0
 80078f2:	4b91      	ldr	r3, [pc, #580]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80078f4:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80078f6:	4b90      	ldr	r3, [pc, #576]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b90      	ldr	r3, [pc, #576]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	4a94      	ldr	r2, [pc, #592]	@ (8007b54 <ESP_Upkeep+0x7d0>)
 8007902:	4990      	ldr	r1, [pc, #576]	@ (8007b44 <ESP_Upkeep+0x7c0>)
 8007904:	2001      	movs	r0, #1
 8007906:	f00b fc45 	bl	8013194 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800790a:	4b81      	ldr	r3, [pc, #516]	@ (8007b10 <ESP_Upkeep+0x78c>)
 800790c:	220d      	movs	r2, #13
 800790e:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007910:	4b7e      	ldr	r3, [pc, #504]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007912:	2214      	movs	r2, #20
 8007914:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007916:	4b82      	ldr	r3, [pc, #520]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
            break;
 800791c:	e1e2      	b.n	8007ce4 <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 800791e:	4b7b      	ldr	r3, [pc, #492]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d003      	beq.n	800792e <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 8007926:	4b7a      	ldr	r3, [pc, #488]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007928:	2204      	movs	r2, #4
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e00e      	b.n	800794c <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800792e:	4b77      	ldr	r3, [pc, #476]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007930:	220e      	movs	r2, #14
 8007932:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007934:	4b7c      	ldr	r3, [pc, #496]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	3b01      	subs	r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	4b7a      	ldr	r3, [pc, #488]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 800793e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007940:	4b77      	ldr	r3, [pc, #476]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007942:	2202      	movs	r2, #2
 8007944:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007946:	4b72      	ldr	r3, [pc, #456]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007948:	2204      	movs	r2, #4
 800794a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800794c:	1d7b      	adds	r3, r7, #5
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d100      	bne.n	8007956 <ESP_Upkeep+0x5d2>
 8007954:	e1c1      	b.n	8007cda <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 8007956:	4b6e      	ldr	r3, [pc, #440]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007958:	2205      	movs	r2, #5
 800795a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800795c:	e1bd      	b.n	8007cda <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 800795e:	4b72      	ldr	r3, [pc, #456]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	4b70      	ldr	r3, [pc, #448]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 8007968:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800796a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b28 <ESP_Upkeep+0x7a4>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	001a      	movs	r2, r3
 8007970:	4b79      	ldr	r3, [pc, #484]	@ (8007b58 <ESP_Upkeep+0x7d4>)
 8007972:	5c9a      	ldrb	r2, [r3, r2]
 8007974:	4b65      	ldr	r3, [pc, #404]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007976:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007978:	4b64      	ldr	r3, [pc, #400]	@ (8007b0c <ESP_Upkeep+0x788>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d102      	bne.n	8007986 <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007980:	4b67      	ldr	r3, [pc, #412]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007982:	2201      	movs	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007986:	4b61      	ldr	r3, [pc, #388]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b0e      	cmp	r3, #14
 800798c:	d102      	bne.n	8007994 <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800798e:	4b64      	ldr	r3, [pc, #400]	@ (8007b20 <ESP_Upkeep+0x79c>)
 8007990:	2202      	movs	r2, #2
 8007992:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007994:	4b5d      	ldr	r3, [pc, #372]	@ (8007b0c <ESP_Upkeep+0x788>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b0e      	cmp	r3, #14
 800799a:	d006      	beq.n	80079aa <ESP_Upkeep+0x626>
 800799c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b0c <ESP_Upkeep+0x788>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d002      	beq.n	80079aa <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079a4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80079aa:	4b58      	ldr	r3, [pc, #352]	@ (8007b0c <ESP_Upkeep+0x788>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b11      	cmp	r3, #17
 80079b0:	d102      	bne.n	80079b8 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80079b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b20 <ESP_Upkeep+0x79c>)
 80079b4:	2205      	movs	r2, #5
 80079b6:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80079b8:	4b55      	ldr	r3, [pc, #340]	@ (8007b10 <ESP_Upkeep+0x78c>)
 80079ba:	2204      	movs	r2, #4
 80079bc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80079be:	4b53      	ldr	r3, [pc, #332]	@ (8007b0c <ESP_Upkeep+0x788>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b14      	cmp	r3, #20
 80079c4:	d000      	beq.n	80079c8 <ESP_Upkeep+0x644>
 80079c6:	e18a      	b.n	8007cde <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 80079c8:	4b53      	ldr	r3, [pc, #332]	@ (8007b18 <ESP_Upkeep+0x794>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d124      	bne.n	8007a1a <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80079d0:	f00c f920 	bl	8013c14 <HAL_GetTick>
 80079d4:	0003      	movs	r3, r0
 80079d6:	4a56      	ldr	r2, [pc, #344]	@ (8007b30 <ESP_Upkeep+0x7ac>)
 80079d8:	189a      	adds	r2, r3, r2
 80079da:	4b50      	ldr	r3, [pc, #320]	@ (8007b1c <ESP_Upkeep+0x798>)
 80079dc:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 80079de:	f7ff f987 	bl	8006cf0 <clearDMABuffer>
          stop = HAL_GetTick();
 80079e2:	f00c f917 	bl	8013c14 <HAL_GetTick>
 80079e6:	0002      	movs	r2, r0
 80079e8:	4b53      	ldr	r3, [pc, #332]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80079ea:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 80079ec:	4b52      	ldr	r3, [pc, #328]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b52      	ldr	r3, [pc, #328]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	4a59      	ldr	r2, [pc, #356]	@ (8007b5c <ESP_Upkeep+0x7d8>)
 80079f8:	4959      	ldr	r1, [pc, #356]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 80079fa:	2002      	movs	r0, #2
 80079fc:	f00b fbca 	bl	8013194 <CreateLine>
          ResetdBAmax();
 8007a00:	f005 fca4 	bl	800d34c <ResetdBAmax>
          resetMaxMeasurementValues();
 8007a04:	f7fd f9a2 	bl	8004d4c <resetMaxMeasurementValues>
          showTime();
 8007a08:	f001 fc54 	bl	80092b4 <showTime>
          ESPTransmitDone = true;
 8007a0c:	4b49      	ldr	r3, [pc, #292]	@ (8007b34 <ESP_Upkeep+0x7b0>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007a12:	4b3f      	ldr	r3, [pc, #252]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a14:	220d      	movs	r2, #13
 8007a16:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007a18:	e161      	b.n	8007cde <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b18 <ESP_Upkeep+0x794>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d13a      	bne.n	8007a98 <ESP_Upkeep+0x714>
            setTime = false;
 8007a22:	4b50      	ldr	r3, [pc, #320]	@ (8007b64 <ESP_Upkeep+0x7e0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007a28:	f001 fcca 	bl	80093c0 <calculateNextNTPTime>
 8007a2c:	0002      	movs	r2, r0
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a30:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007a32:	4b4d      	ldr	r3, [pc, #308]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a4d      	ldr	r2, [pc, #308]	@ (8007b6c <ESP_Upkeep+0x7e8>)
 8007a38:	189a      	adds	r2, r3, r2
 8007a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b68 <ESP_Upkeep+0x7e4>)
 8007a3c:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007b6c <ESP_Upkeep+0x7e8>)
 8007a40:	4a4b      	ldr	r2, [pc, #300]	@ (8007b70 <ESP_Upkeep+0x7ec>)
 8007a42:	4947      	ldr	r1, [pc, #284]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 8007a44:	2002      	movs	r0, #2
 8007a46:	f00b fba5 	bl	8013194 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b74 <ESP_Upkeep+0x7f0>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b33      	ldr	r3, [pc, #204]	@ (8007b1c <ESP_Upkeep+0x798>)
 8007a50:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007a52:	f7ff f94d 	bl	8006cf0 <clearDMABuffer>
            stop = HAL_GetTick();
 8007a56:	f00c f8dd 	bl	8013c14 <HAL_GetTick>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	4b36      	ldr	r3, [pc, #216]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007a5e:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007a60:	4b35      	ldr	r3, [pc, #212]	@ (8007b38 <ESP_Upkeep+0x7b4>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b35      	ldr	r3, [pc, #212]	@ (8007b3c <ESP_Upkeep+0x7b8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	4a43      	ldr	r2, [pc, #268]	@ (8007b78 <ESP_Upkeep+0x7f4>)
 8007a6c:	493c      	ldr	r1, [pc, #240]	@ (8007b60 <ESP_Upkeep+0x7dc>)
 8007a6e:	2002      	movs	r0, #2
 8007a70:	f00b fb90 	bl	8013194 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007a74:	f00c f8ce 	bl	8013c14 <HAL_GetTick>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	4a40      	ldr	r2, [pc, #256]	@ (8007b7c <ESP_Upkeep+0x7f8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d804      	bhi.n	8007a8a <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007a80:	4b3f      	ldr	r3, [pc, #252]	@ (8007b80 <ESP_Upkeep+0x7fc>)
 8007a82:	4a40      	ldr	r2, [pc, #256]	@ (8007b84 <ESP_Upkeep+0x800>)
 8007a84:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007a86:	f005 fb81 	bl	800d18c <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007a8a:	4b21      	ldr	r3, [pc, #132]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a8c:	220d      	movs	r2, #13
 8007a8e:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007a90:	4b21      	ldr	r3, [pc, #132]	@ (8007b18 <ESP_Upkeep+0x794>)
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]
    break;
 8007a96:	e122      	b.n	8007cde <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007a9a:	2209      	movs	r2, #9
 8007a9c:	701a      	strb	r2, [r3, #0]
    break;
 8007a9e:	e11e      	b.n	8007cde <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007aa0:	4b39      	ldr	r3, [pc, #228]	@ (8007b88 <ESP_Upkeep+0x804>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007aa6:	4b39      	ldr	r3, [pc, #228]	@ (8007b8c <ESP_Upkeep+0x808>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2101      	movs	r1, #1
 8007aac:	0018      	movs	r0, r3
 8007aae:	f00d fb42 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	f00c f8b8 	bl	8013c28 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007ab8:	2380      	movs	r3, #128	@ 0x80
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4834      	ldr	r0, [pc, #208]	@ (8007b90 <ESP_Upkeep+0x80c>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	f00d fb38 	bl	8015136 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f00c f8ae 	bl	8013c28 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007acc:	4b2f      	ldr	r3, [pc, #188]	@ (8007b8c <ESP_Upkeep+0x808>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f00d fb2f 	bl	8015136 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <ESP_Upkeep+0x78c>)
 8007ada:	2209      	movs	r2, #9
 8007adc:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007ade:	2001      	movs	r0, #1
 8007ae0:	f00c f8a2 	bl	8013c28 <HAL_Delay>
      ResetESPIndicator();
 8007ae4:	f00a f9d6 	bl	8011e94 <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007ae8:	f001 fbb4 	bl	8009254 <Check_USB_PowerOn>
 8007aec:	1e03      	subs	r3, r0, #0
 8007aee:	d103      	bne.n	8007af8 <ESP_Upkeep+0x774>
 8007af0:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <ESP_Upkeep+0x810>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007af8:	f005 fb48 	bl	800d18c <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007afc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <ESP_Upkeep+0x7a8>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007b02:	4b11      	ldr	r3, [pc, #68]	@ (8007b48 <ESP_Upkeep+0x7c4>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
      break;
 8007b08:	e0ec      	b.n	8007ce4 <ESP_Upkeep+0x960>
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	20000676 	.word	0x20000676
 8007b10:	2000002c 	.word	0x2000002c
 8007b14:	200005a3 	.word	0x200005a3
 8007b18:	20000677 	.word	0x20000677
 8007b1c:	2000066c 	.word	0x2000066c
 8007b20:	20000675 	.word	0x20000675
 8007b24:	2000002f 	.word	0x2000002f
 8007b28:	20000666 	.word	0x20000666
 8007b2c:	20000667 	.word	0x20000667
 8007b30:	0003a980 	.word	0x0003a980
 8007b34:	200005a8 	.word	0x200005a8
 8007b38:	200005bc 	.word	0x200005bc
 8007b3c:	200005b8 	.word	0x200005b8
 8007b40:	0802acb0 	.word	0x0802acb0
 8007b44:	08029c24 	.word	0x08029c24
 8007b48:	20000668 	.word	0x20000668
 8007b4c:	0802ace4 	.word	0x0802ace4
 8007b50:	0000c350 	.word	0x0000c350
 8007b54:	0802ad20 	.word	0x0802ad20
 8007b58:	2000065c 	.word	0x2000065c
 8007b5c:	0802ad50 	.word	0x0802ad50
 8007b60:	0802ad68 	.word	0x0802ad68
 8007b64:	20000002 	.word	0x20000002
 8007b68:	20000670 	.word	0x20000670
 8007b6c:	00012686 	.word	0x00012686
 8007b70:	0802ad6c 	.word	0x0802ad6c
 8007b74:	20000028 	.word	0x20000028
 8007b78:	0802adb0 	.word	0x0802adb0
 8007b7c:	000061a7 	.word	0x000061a7
 8007b80:	20000e10 	.word	0x20000e10
 8007b84:	000061a8 	.word	0x000061a8
 8007b88:	200005a0 	.word	0x200005a0
 8007b8c:	50001c00 	.word	0x50001c00
 8007b90:	50000800 	.word	0x50000800
 8007b94:	20001e4a 	.word	0x20001e4a

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007b98:	4b55      	ldr	r3, [pc, #340]	@ (8007cf0 <ESP_Upkeep+0x96c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f00b faa3 	bl	80130e8 <TimestampIsReached>
 8007ba2:	1e03      	subs	r3, r0, #0
 8007ba4:	d103      	bne.n	8007bae <ESP_Upkeep+0x82a>
 8007ba6:	4b53      	ldr	r3, [pc, #332]	@ (8007cf4 <ESP_Upkeep+0x970>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d043      	beq.n	8007c36 <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 8007bae:	4b52      	ldr	r3, [pc, #328]	@ (8007cf8 <ESP_Upkeep+0x974>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007bb4:	4b51      	ldr	r3, [pc, #324]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007bbc:	4b50      	ldr	r3, [pc, #320]	@ (8007d00 <ESP_Upkeep+0x97c>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007bc2:	4b50      	ldr	r3, [pc, #320]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bc4:	220b      	movs	r2, #11
 8007bc6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 8007bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d08 <ESP_Upkeep+0x984>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8007d0c <ESP_Upkeep+0x988>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007bdc:	4b49      	ldr	r3, [pc, #292]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bde:	220b      	movs	r2, #11
 8007be0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007be2:	4b46      	ldr	r3, [pc, #280]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d102      	bne.n	8007bf0 <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007bea:	4b46      	ldr	r3, [pc, #280]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bec:	2202      	movs	r2, #2
 8007bee:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007bf0:	4b42      	ldr	r3, [pc, #264]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d108      	bne.n	8007c0a <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007bf8:	4b42      	ldr	r3, [pc, #264]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007bfa:	220e      	movs	r2, #14
 8007bfc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007bfe:	4a44      	ldr	r2, [pc, #272]	@ (8007d10 <ESP_Upkeep+0x98c>)
 8007c00:	4b44      	ldr	r3, [pc, #272]	@ (8007d14 <ESP_Upkeep+0x990>)
 8007c02:	0019      	movs	r1, r3
 8007c04:	2002      	movs	r0, #2
 8007c06:	f00b fac5 	bl	8013194 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d105      	bne.n	8007c1e <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8007c12:	4b3c      	ldr	r3, [pc, #240]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c14:	220b      	movs	r2, #11
 8007c16:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007c18:	4b3f      	ldr	r3, [pc, #252]	@ (8007d18 <ESP_Upkeep+0x994>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c1e:	4b35      	ldr	r3, [pc, #212]	@ (8007cf4 <ESP_Upkeep+0x970>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <ESP_Upkeep+0x8e4>
 8007c26:	4b35      	ldr	r3, [pc, #212]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d01c      	beq.n	8007c68 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 8007c2e:	4b35      	ldr	r3, [pc, #212]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c30:	2202      	movs	r2, #2
 8007c32:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c34:	e018      	b.n	8007c68 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007c36:	f001 fbc3 	bl	80093c0 <calculateNextNTPTime>
 8007c3a:	0002      	movs	r2, r0
 8007c3c:	4b37      	ldr	r3, [pc, #220]	@ (8007d1c <ESP_Upkeep+0x998>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d94e      	bls.n	8007ce2 <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 8007c44:	4b2d      	ldr	r3, [pc, #180]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d14a      	bne.n	8007ce2 <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cfc <ESP_Upkeep+0x978>)
 8007c4e:	2205      	movs	r2, #5
 8007c50:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007c52:	4b2c      	ldr	r3, [pc, #176]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007c54:	2202      	movs	r2, #2
 8007c56:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007c58:	4b25      	ldr	r3, [pc, #148]	@ (8007cf0 <ESP_Upkeep+0x96c>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b30      	ldr	r3, [pc, #192]	@ (8007d20 <ESP_Upkeep+0x99c>)
 8007c5e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007c60:	4b30      	ldr	r3, [pc, #192]	@ (8007d24 <ESP_Upkeep+0x9a0>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007c66:	e03c      	b.n	8007ce2 <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c68:	46c0      	nop			@ (mov r8, r8)
      break;
 8007c6a:	e03a      	b.n	8007ce2 <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d28 <ESP_Upkeep+0x9a4>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4053      	eors	r3, r2
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 8007c7a:	4a25      	ldr	r2, [pc, #148]	@ (8007d10 <ESP_Upkeep+0x98c>)
 8007c7c:	4b25      	ldr	r3, [pc, #148]	@ (8007d14 <ESP_Upkeep+0x990>)
 8007c7e:	0019      	movs	r1, r3
 8007c80:	2002      	movs	r0, #2
 8007c82:	f00b fa87 	bl	8013194 <CreateLine>
        msgdone = true;
 8007c86:	4b28      	ldr	r3, [pc, #160]	@ (8007d28 <ESP_Upkeep+0x9a4>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007c8c:	f01a fb2e 	bl	80222ec <GetUsbRxPointer>
 8007c90:	0003      	movs	r3, r0
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 f980 	bl	8007f98 <Process_PC_Config>
      break;
 8007c98:	e024      	b.n	8007ce4 <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007c9a:	4a24      	ldr	r2, [pc, #144]	@ (8007d2c <ESP_Upkeep+0x9a8>)
 8007c9c:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <ESP_Upkeep+0x9ac>)
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f00b fa77 	bl	8013194 <CreateLine>
      EspState = ESP_STATE_INIT;
 8007ca6:	4b17      	ldr	r3, [pc, #92]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007ca8:	2202      	movs	r2, #2
 8007caa:	701a      	strb	r2, [r3, #0]
      break;
 8007cac:	e01a      	b.n	8007ce4 <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007cae:	4a21      	ldr	r2, [pc, #132]	@ (8007d34 <ESP_Upkeep+0x9b0>)
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007d30 <ESP_Upkeep+0x9ac>)
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f00b fa6d 	bl	8013194 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007cba:	4b12      	ldr	r3, [pc, #72]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e010      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cc2:	46c0      	nop			@ (mov r8, r8)
 8007cc4:	e00e      	b.n	8007ce4 <ESP_Upkeep+0x960>
        break;
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	e00c      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	e00a      	b.n	8007ce4 <ESP_Upkeep+0x960>
        break;
 8007cce:	46c0      	nop			@ (mov r8, r8)
 8007cd0:	e008      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	e006      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	e004      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	e002      	b.n	8007ce4 <ESP_Upkeep+0x960>
    break;
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	e000      	b.n	8007ce4 <ESP_Upkeep+0x960>
      break;
 8007ce2:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007ce4:	4b07      	ldr	r3, [pc, #28]	@ (8007d04 <ESP_Upkeep+0x980>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf0:	2000066c 	.word	0x2000066c
 8007cf4:	200005a3 	.word	0x200005a3
 8007cf8:	200005a8 	.word	0x200005a8
 8007cfc:	20000677 	.word	0x20000677
 8007d00:	200005a1 	.word	0x200005a1
 8007d04:	2000002c 	.word	0x2000002c
 8007d08:	200005a4 	.word	0x200005a4
 8007d0c:	200005a6 	.word	0x200005a6
 8007d10:	0802add0 	.word	0x0802add0
 8007d14:	0802ad68 	.word	0x0802ad68
 8007d18:	200005a5 	.word	0x200005a5
 8007d1c:	20000670 	.word	0x20000670
 8007d20:	20000028 	.word	0x20000028
 8007d24:	20000002 	.word	0x20000002
 8007d28:	200005a7 	.word	0x200005a7
 8007d2c:	0802ade8 	.word	0x0802ade8
 8007d30:	08029c24 	.word	0x08029c24
 8007d34:	0802adfc 	.word	0x0802adfc

08007d38 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <I2CSensors_Init+0x54>)
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8007d46:	4a12      	ldr	r2, [pc, #72]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d48:	4b12      	ldr	r3, [pc, #72]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f00b fc1f 	bl	8013590 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007d52:	4a0f      	ldr	r2, [pc, #60]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d54:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d56:	0011      	movs	r1, r2
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f008 fa5d 	bl	8010218 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007d98 <I2CSensors_Init+0x60>)
 8007d60:	490b      	ldr	r1, [pc, #44]	@ (8007d90 <I2CSensors_Init+0x58>)
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <I2CSensors_Init+0x5c>)
 8007d64:	0018      	movs	r0, r3
 8007d66:	f002 fab7 	bl	800a2d8 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d9c <I2CSensors_Init+0x64>)
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <I2CSensors_Init+0x68>)
 8007d6e:	0011      	movs	r1, r2
 8007d70:	0018      	movs	r0, r3
 8007d72:	f003 f87b 	bl	800ae6c <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8007d76:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <I2CSensors_Init+0x64>)
 8007d78:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <I2CSensors_Init+0x68>)
 8007d7a:	0011      	movs	r1, r2
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fb fef9 	bl	8003b74 <ENS_Init>
}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b002      	add	sp, #8
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	20000790 	.word	0x20000790
 8007d90:	08007e51 	.word	0x08007e51
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007da5 	.word	0x08007da5
 8007d9c:	08007f21 	.word	0x08007f21
 8007da0:	08007ea5 	.word	0x08007ea5

08007da4 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	6039      	str	r1, [r7, #0]
 8007dac:	0011      	movs	r1, r2
 8007dae:	1dfb      	adds	r3, r7, #7
 8007db0:	1c02      	adds	r2, r0, #0
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	1c0a      	adds	r2, r1, #0
 8007db8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007dba:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <ReadI2CDirect+0x54>)
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	1dfb      	adds	r3, r7, #7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	18db      	adds	r3, r3, r3
 8007dc6:	b299      	uxth	r1, r3
 8007dc8:	1dbb      	adds	r3, r7, #6
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	260f      	movs	r6, #15
 8007dd0:	19bc      	adds	r4, r7, r6
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	25fa      	movs	r5, #250	@ 0xfa
 8007dd6:	9500      	str	r5, [sp, #0]
 8007dd8:	f00d fb84 	bl	80154e4 <HAL_I2C_Master_Receive>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007de0:	19bb      	adds	r3, r7, r6
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <ReadI2CDirect+0x48>
        return false;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e000      	b.n	8007dee <ReadI2CDirect+0x4a>
    }
    return true;
 8007dec:	2301      	movs	r3, #1
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b005      	add	sp, #20
 8007df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df6:	46c0      	nop			@ (mov r8, r8)
 8007df8:	20000790 	.word	0x20000790

08007dfc <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007dfc:	b5b0      	push	{r4, r5, r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6039      	str	r1, [r7, #0]
 8007e04:	0011      	movs	r1, r2
 8007e06:	1dfb      	adds	r3, r7, #7
 8007e08:	1c02      	adds	r2, r0, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	1c0a      	adds	r2, r1, #0
 8007e10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e12:	4b0e      	ldr	r3, [pc, #56]	@ (8007e4c <ReadI2C+0x50>)
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	1dfb      	adds	r3, r7, #7
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	18db      	adds	r3, r3, r3
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	1dbb      	adds	r3, r7, #6
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	250f      	movs	r5, #15
 8007e28:	197c      	adds	r4, r7, r5
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	f00d fd68 	bl	8015900 <HAL_I2C_Master_Receive_DMA>
 8007e30:	0003      	movs	r3, r0
 8007e32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e34:	197b      	adds	r3, r7, r5
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <ReadI2C+0x44>
        return false;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <ReadI2C+0x46>
    }
    return true;
 8007e40:	2301      	movs	r3, #1
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	20000790 	.word	0x20000790

08007e50 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6039      	str	r1, [r7, #0]
 8007e58:	0011      	movs	r1, r2
 8007e5a:	1dfb      	adds	r3, r7, #7
 8007e5c:	1c02      	adds	r2, r0, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	1c0a      	adds	r2, r1, #0
 8007e64:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea0 <WriteI2C+0x50>)
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	1dfb      	adds	r3, r7, #7
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	18db      	adds	r3, r3, r3
 8007e72:	b299      	uxth	r1, r3
 8007e74:	1dbb      	adds	r3, r7, #6
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	250f      	movs	r5, #15
 8007e7c:	197c      	adds	r4, r7, r5
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	f00d fc38 	bl	80156f4 <HAL_I2C_Master_Transmit_DMA>
 8007e84:	0003      	movs	r3, r0
 8007e86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e88:	197b      	adds	r3, r7, r5
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <WriteI2C+0x44>
        return false;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <WriteI2C+0x46>
    }
    return true;
 8007e94:	2301      	movs	r3, #1
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b004      	add	sp, #16
 8007e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	20000790 	.word	0x20000790

08007ea4 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea6:	b08b      	sub	sp, #44	@ 0x2c
 8007ea8:	af04      	add	r7, sp, #16
 8007eaa:	0004      	movs	r4, r0
 8007eac:	0008      	movs	r0, r1
 8007eae:	0011      	movs	r1, r2
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	250f      	movs	r5, #15
 8007eb4:	197b      	adds	r3, r7, r5
 8007eb6:	1c22      	adds	r2, r4, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
 8007eba:	260c      	movs	r6, #12
 8007ebc:	19bb      	adds	r3, r7, r6
 8007ebe:	1c02      	adds	r2, r0, #0
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	230a      	movs	r3, #10
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	1c0a      	adds	r2, r1, #0
 8007ec8:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007eca:	4b14      	ldr	r3, [pc, #80]	@ (8007f1c <ReadI2CMem+0x78>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	197b      	adds	r3, r7, r5
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	18db      	adds	r3, r3, r3
 8007ed6:	b299      	uxth	r1, r3
 8007ed8:	2217      	movs	r2, #23
 8007eda:	18bc      	adds	r4, r7, r2
 8007edc:	230a      	movs	r3, #10
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	881d      	ldrh	r5, [r3, #0]
 8007ee2:	19bb      	adds	r3, r7, r6
 8007ee4:	881a      	ldrh	r2, [r3, #0]
 8007ee6:	2364      	movs	r3, #100	@ 0x64
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	2328      	movs	r3, #40	@ 0x28
 8007eec:	2608      	movs	r6, #8
 8007eee:	199b      	adds	r3, r3, r6
 8007ef0:	19db      	adds	r3, r3, r7
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	002b      	movs	r3, r5
 8007efc:	f00d fe06 	bl	8015b0c <HAL_I2C_Mem_Read>
 8007f00:	0003      	movs	r3, r0
 8007f02:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f04:	2217      	movs	r2, #23
 8007f06:	18bb      	adds	r3, r7, r2
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <ReadI2CMem+0x6e>
     return false;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e000      	b.n	8007f14 <ReadI2CMem+0x70>
   }
   return true;
 8007f12:	2301      	movs	r3, #1
}
 8007f14:	0018      	movs	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b007      	add	sp, #28
 8007f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1c:	20000790 	.word	0x20000790

08007f20 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b089      	sub	sp, #36	@ 0x24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	0004      	movs	r4, r0
 8007f28:	0008      	movs	r0, r1
 8007f2a:	0011      	movs	r1, r2
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	250f      	movs	r5, #15
 8007f30:	197b      	adds	r3, r7, r5
 8007f32:	1c22      	adds	r2, r4, #0
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	260c      	movs	r6, #12
 8007f38:	19bb      	adds	r3, r7, r6
 8007f3a:	1c02      	adds	r2, r0, #0
 8007f3c:	801a      	strh	r2, [r3, #0]
 8007f3e:	230a      	movs	r3, #10
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	1c0a      	adds	r2, r1, #0
 8007f44:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007f46:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <WriteI2CMem+0x74>)
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	197b      	adds	r3, r7, r5
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	18db      	adds	r3, r3, r3
 8007f52:	b299      	uxth	r1, r3
 8007f54:	2217      	movs	r2, #23
 8007f56:	18bc      	adds	r4, r7, r2
 8007f58:	230a      	movs	r3, #10
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	881d      	ldrh	r5, [r3, #0]
 8007f5e:	19bb      	adds	r3, r7, r6
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	2328      	movs	r3, #40	@ 0x28
 8007f64:	2608      	movs	r6, #8
 8007f66:	199b      	adds	r3, r3, r6
 8007f68:	19db      	adds	r3, r3, r7
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	002b      	movs	r3, r5
 8007f74:	f00d fefe 	bl	8015d74 <HAL_I2C_Mem_Write_DMA>
 8007f78:	0003      	movs	r3, r0
 8007f7a:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f7c:	2217      	movs	r2, #23
 8007f7e:	18bb      	adds	r3, r7, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <WriteI2CMem+0x6a>
     return false;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e000      	b.n	8007f8c <WriteI2CMem+0x6c>
   }
   return true;
 8007f8a:	2301      	movs	r3, #1
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b007      	add	sp, #28
 8007f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f94:	20000790 	.word	0x20000790

08007f98 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b0c3      	sub	sp, #268	@ 0x10c
 8007f9c:	af3e      	add	r7, sp, #248	@ 0xf8
 8007f9e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007fa0:	f01a f9c4 	bl	802232c <GetUsbRxDataSize>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d972      	bls.n	8008094 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2123      	movs	r1, #35	@ 0x23
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f01d fbea 	bl	802578c <strchr>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d066      	beq.n	8008090 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	785a      	ldrb	r2, [r3, #1]
 8007fc6:	4b35      	ldr	r3, [pc, #212]	@ (800809c <Process_PC_Config+0x104>)
 8007fc8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	789a      	ldrb	r2, [r3, #2]
 8007fce:	4b33      	ldr	r3, [pc, #204]	@ (800809c <Process_PC_Config+0x104>)
 8007fd0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8007fd2:	4b32      	ldr	r3, [pc, #200]	@ (800809c <Process_PC_Config+0x104>)
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	3305      	adds	r3, #5
 8007fd8:	001a      	movs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d352      	bcc.n	8008086 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	1cd9      	adds	r1, r3, #3
 8007fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800809c <Process_PC_Config+0x104>)
 8007fe6:	785b      	ldrb	r3, [r3, #1]
 8007fe8:	001a      	movs	r2, r3
 8007fea:	4b2d      	ldr	r3, [pc, #180]	@ (80080a0 <Process_PC_Config+0x108>)
 8007fec:	0018      	movs	r0, r3
 8007fee:	f01d fca1 	bl	8025934 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <Process_PC_Config+0x104>)
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	189b      	adds	r3, r3, r2
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b21b      	sxth	r3, r3
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	b21a      	sxth	r2, r3
 8008006:	4b25      	ldr	r3, [pc, #148]	@ (800809c <Process_PC_Config+0x104>)
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	3304      	adds	r3, #4
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	18cb      	adds	r3, r1, r3
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b21b      	sxth	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b21b      	sxth	r3, r3
 8008018:	b299      	uxth	r1, r3
 800801a:	4a20      	ldr	r2, [pc, #128]	@ (800809c <Process_PC_Config+0x104>)
 800801c:	2381      	movs	r3, #129	@ 0x81
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008022:	4a1e      	ldr	r2, [pc, #120]	@ (800809c <Process_PC_Config+0x104>)
 8008024:	2381      	movs	r3, #129	@ 0x81
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	5ad4      	ldrh	r4, [r2, r3]
 800802a:	4b1c      	ldr	r3, [pc, #112]	@ (800809c <Process_PC_Config+0x104>)
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	3303      	adds	r3, #3
 8008030:	b29a      	uxth	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	0011      	movs	r1, r2
 8008036:	0018      	movs	r0, r3
 8008038:	f000 fa14 	bl	8008464 <CRC16_ARC>
 800803c:	0003      	movs	r3, r0
 800803e:	429c      	cmp	r4, r3
 8008040:	d007      	beq.n	8008052 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8008042:	4b16      	ldr	r3, [pc, #88]	@ (800809c <Process_PC_Config+0x104>)
 8008044:	785a      	ldrb	r2, [r3, #1]
 8008046:	4b16      	ldr	r3, [pc, #88]	@ (80080a0 <Process_PC_Config+0x108>)
 8008048:	0019      	movs	r1, r3
 800804a:	2001      	movs	r0, #1
 800804c:	f000 f9b8 	bl	80083c0 <Create_Message>
 8008050:	e016      	b.n	8008080 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8008052:	4c12      	ldr	r4, [pc, #72]	@ (800809c <Process_PC_Config+0x104>)
 8008054:	466b      	mov	r3, sp
 8008056:	0018      	movs	r0, r3
 8008058:	0023      	movs	r3, r4
 800805a:	3310      	adds	r3, #16
 800805c:	22f4      	movs	r2, #244	@ 0xf4
 800805e:	0019      	movs	r1, r3
 8008060:	f01d fc68 	bl	8025934 <memcpy>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	6861      	ldr	r1, [r4, #4]
 8008068:	68a2      	ldr	r2, [r4, #8]
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	f000 f81a 	bl	80080a4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <Process_PC_Config+0x104>)
 8008072:	7818      	ldrb	r0, [r3, #0]
 8008074:	4b09      	ldr	r3, [pc, #36]	@ (800809c <Process_PC_Config+0x104>)
 8008076:	785a      	ldrb	r2, [r3, #1]
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <Process_PC_Config+0x108>)
 800807a:	0019      	movs	r1, r3
 800807c:	f000 f9a0 	bl	80083c0 <Create_Message>
                }
                ResetUsbRxDataSize();
 8008080:	f01a f93c 	bl	80222fc <ResetUsbRxDataSize>
                return;
 8008084:	e006      	b.n	8008094 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	0018      	movs	r0, r3
 800808a:	f01a f959 	bl	8022340 <GetUsbRxNextChunk>
 800808e:	e001      	b.n	8008094 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008090:	f01a f934 	bl	80222fc <ResetUsbRxDataSize>
        }
    }
}
 8008094:	46bd      	mov	sp, r7
 8008096:	b005      	add	sp, #20
 8008098:	bd90      	pop	{r4, r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	20000794 	.word	0x20000794
 80080a0:	20000796 	.word	0x20000796

080080a4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80080a4:	b084      	sub	sp, #16
 80080a6:	b5b0      	push	{r4, r5, r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	2518      	movs	r5, #24
 80080ae:	197c      	adds	r4, r7, r5
 80080b0:	6020      	str	r0, [r4, #0]
 80080b2:	6061      	str	r1, [r4, #4]
 80080b4:	60a2      	str	r2, [r4, #8]
 80080b6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80080b8:	197b      	adds	r3, r7, r5
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80080be:	d100      	bne.n	80080c2 <ProcessCmd+0x1e>
 80080c0:	e122      	b.n	8008308 <ProcessCmd+0x264>
 80080c2:	dd00      	ble.n	80080c6 <ProcessCmd+0x22>
 80080c4:	e143      	b.n	800834e <ProcessCmd+0x2aa>
 80080c6:	2b18      	cmp	r3, #24
 80080c8:	dc0a      	bgt.n	80080e0 <ProcessCmd+0x3c>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da00      	bge.n	80080d0 <ProcessCmd+0x2c>
 80080ce:	e13e      	b.n	800834e <ProcessCmd+0x2aa>
 80080d0:	2b18      	cmp	r3, #24
 80080d2:	d900      	bls.n	80080d6 <ProcessCmd+0x32>
 80080d4:	e13b      	b.n	800834e <ProcessCmd+0x2aa>
 80080d6:	009a      	lsls	r2, r3, #2
 80080d8:	4ba0      	ldr	r3, [pc, #640]	@ (800835c <ProcessCmd+0x2b8>)
 80080da:	18d3      	adds	r3, r2, r3
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	469f      	mov	pc, r3
 80080e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80080e2:	d100      	bne.n	80080e6 <ProcessCmd+0x42>
 80080e4:	e108      	b.n	80082f8 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 80080e6:	e132      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80080e8:	2118      	movs	r1, #24
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	001a      	movs	r2, r3
 80080f0:	187b      	adds	r3, r7, r1
 80080f2:	1c99      	adds	r1, r3, #2
 80080f4:	489a      	ldr	r0, [pc, #616]	@ (8008360 <ProcessCmd+0x2bc>)
 80080f6:	230c      	movs	r3, #12
 80080f8:	f003 fb00 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80080fc:	e127      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80080fe:	2118      	movs	r1, #24
 8008100:	187b      	adds	r3, r7, r1
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	001a      	movs	r2, r3
 8008106:	187b      	adds	r3, r7, r1
 8008108:	1c99      	adds	r1, r3, #2
 800810a:	4896      	ldr	r0, [pc, #600]	@ (8008364 <ProcessCmd+0x2c0>)
 800810c:	230c      	movs	r3, #12
 800810e:	f003 faf5 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008112:	e11c      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008114:	2118      	movs	r1, #24
 8008116:	187b      	adds	r3, r7, r1
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	001a      	movs	r2, r3
 800811c:	187b      	adds	r3, r7, r1
 800811e:	1c99      	adds	r1, r3, #2
 8008120:	4891      	ldr	r0, [pc, #580]	@ (8008368 <ProcessCmd+0x2c4>)
 8008122:	230c      	movs	r3, #12
 8008124:	f003 faea 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008128:	e111      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800812a:	2118      	movs	r1, #24
 800812c:	187b      	adds	r3, r7, r1
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	001a      	movs	r2, r3
 8008132:	187b      	adds	r3, r7, r1
 8008134:	1c99      	adds	r1, r3, #2
 8008136:	488d      	ldr	r0, [pc, #564]	@ (800836c <ProcessCmd+0x2c8>)
 8008138:	230c      	movs	r3, #12
 800813a:	f003 fadf 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 800813e:	e106      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008140:	2118      	movs	r1, #24
 8008142:	187b      	adds	r3, r7, r1
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	001a      	movs	r2, r3
 8008148:	187b      	adds	r3, r7, r1
 800814a:	1c99      	adds	r1, r3, #2
 800814c:	4888      	ldr	r0, [pc, #544]	@ (8008370 <ProcessCmd+0x2cc>)
 800814e:	230c      	movs	r3, #12
 8008150:	f003 fad4 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008154:	e0fb      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008156:	2118      	movs	r1, #24
 8008158:	187b      	adds	r3, r7, r1
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	001a      	movs	r2, r3
 800815e:	187b      	adds	r3, r7, r1
 8008160:	1c99      	adds	r1, r3, #2
 8008162:	4884      	ldr	r0, [pc, #528]	@ (8008374 <ProcessCmd+0x2d0>)
 8008164:	230c      	movs	r3, #12
 8008166:	f003 fac9 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 800816a:	e0f0      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800816c:	2118      	movs	r1, #24
 800816e:	187b      	adds	r3, r7, r1
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	001a      	movs	r2, r3
 8008174:	187b      	adds	r3, r7, r1
 8008176:	1c99      	adds	r1, r3, #2
 8008178:	487f      	ldr	r0, [pc, #508]	@ (8008378 <ProcessCmd+0x2d4>)
 800817a:	230c      	movs	r3, #12
 800817c:	f003 fabe 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008180:	e0e5      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008182:	2118      	movs	r1, #24
 8008184:	187b      	adds	r3, r7, r1
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	001a      	movs	r2, r3
 800818a:	187b      	adds	r3, r7, r1
 800818c:	1c99      	adds	r1, r3, #2
 800818e:	487b      	ldr	r0, [pc, #492]	@ (800837c <ProcessCmd+0x2d8>)
 8008190:	230c      	movs	r3, #12
 8008192:	f003 fab3 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008196:	e0da      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008198:	2118      	movs	r1, #24
 800819a:	187b      	adds	r3, r7, r1
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	001a      	movs	r2, r3
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	1c99      	adds	r1, r3, #2
 80081a4:	4876      	ldr	r0, [pc, #472]	@ (8008380 <ProcessCmd+0x2dc>)
 80081a6:	230c      	movs	r3, #12
 80081a8:	f003 faa8 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80081ac:	e0cf      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081ae:	2118      	movs	r1, #24
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	001a      	movs	r2, r3
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	1c99      	adds	r1, r3, #2
 80081ba:	4872      	ldr	r0, [pc, #456]	@ (8008384 <ProcessCmd+0x2e0>)
 80081bc:	230c      	movs	r3, #12
 80081be:	f003 fa9d 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80081c2:	e0c4      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081c4:	2118      	movs	r1, #24
 80081c6:	187b      	adds	r3, r7, r1
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	001a      	movs	r2, r3
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	1c99      	adds	r1, r3, #2
 80081d0:	486d      	ldr	r0, [pc, #436]	@ (8008388 <ProcessCmd+0x2e4>)
 80081d2:	230c      	movs	r3, #12
 80081d4:	f003 fa92 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80081d8:	e0b9      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80081da:	2118      	movs	r1, #24
 80081dc:	187b      	adds	r3, r7, r1
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	001a      	movs	r2, r3
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	1c99      	adds	r1, r3, #2
 80081e6:	4869      	ldr	r0, [pc, #420]	@ (800838c <ProcessCmd+0x2e8>)
 80081e8:	2320      	movs	r3, #32
 80081ea:	f003 fa87 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80081ee:	e0ae      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081f0:	2118      	movs	r1, #24
 80081f2:	187b      	adds	r3, r7, r1
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	001a      	movs	r2, r3
 80081f8:	187b      	adds	r3, r7, r1
 80081fa:	1c99      	adds	r1, r3, #2
 80081fc:	4864      	ldr	r0, [pc, #400]	@ (8008390 <ProcessCmd+0x2ec>)
 80081fe:	230c      	movs	r3, #12
 8008200:	f003 fa7c 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008204:	e0a3      	b.n	800834e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008206:	2118      	movs	r1, #24
 8008208:	187b      	adds	r3, r7, r1
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	001a      	movs	r2, r3
 800820e:	187b      	adds	r3, r7, r1
 8008210:	1c99      	adds	r1, r3, #2
 8008212:	4860      	ldr	r0, [pc, #384]	@ (8008394 <ProcessCmd+0x2f0>)
 8008214:	230c      	movs	r3, #12
 8008216:	f003 fa71 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 800821a:	e098      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800821c:	2118      	movs	r1, #24
 800821e:	187b      	adds	r3, r7, r1
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	001a      	movs	r2, r3
 8008224:	187b      	adds	r3, r7, r1
 8008226:	1c99      	adds	r1, r3, #2
 8008228:	485b      	ldr	r0, [pc, #364]	@ (8008398 <ProcessCmd+0x2f4>)
 800822a:	230c      	movs	r3, #12
 800822c:	f003 fa66 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008230:	e08d      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008232:	2118      	movs	r1, #24
 8008234:	187b      	adds	r3, r7, r1
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	001a      	movs	r2, r3
 800823a:	187b      	adds	r3, r7, r1
 800823c:	1c99      	adds	r1, r3, #2
 800823e:	4857      	ldr	r0, [pc, #348]	@ (800839c <ProcessCmd+0x2f8>)
 8008240:	230c      	movs	r3, #12
 8008242:	f003 fa5b 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008246:	e082      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008248:	2118      	movs	r1, #24
 800824a:	187b      	adds	r3, r7, r1
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	001a      	movs	r2, r3
 8008250:	187b      	adds	r3, r7, r1
 8008252:	1c99      	adds	r1, r3, #2
 8008254:	4852      	ldr	r0, [pc, #328]	@ (80083a0 <ProcessCmd+0x2fc>)
 8008256:	230c      	movs	r3, #12
 8008258:	f003 fa50 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 800825c:	e077      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800825e:	2118      	movs	r1, #24
 8008260:	187b      	adds	r3, r7, r1
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	001a      	movs	r2, r3
 8008266:	187b      	adds	r3, r7, r1
 8008268:	1c99      	adds	r1, r3, #2
 800826a:	484e      	ldr	r0, [pc, #312]	@ (80083a4 <ProcessCmd+0x300>)
 800826c:	230c      	movs	r3, #12
 800826e:	f003 fa45 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008272:	e06c      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008274:	2118      	movs	r1, #24
 8008276:	187b      	adds	r3, r7, r1
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	001a      	movs	r2, r3
 800827c:	187b      	adds	r3, r7, r1
 800827e:	1c99      	adds	r1, r3, #2
 8008280:	4849      	ldr	r0, [pc, #292]	@ (80083a8 <ProcessCmd+0x304>)
 8008282:	230c      	movs	r3, #12
 8008284:	f003 fa3a 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 8008288:	e061      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800828a:	2118      	movs	r1, #24
 800828c:	187b      	adds	r3, r7, r1
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	001a      	movs	r2, r3
 8008292:	187b      	adds	r3, r7, r1
 8008294:	1c99      	adds	r1, r3, #2
 8008296:	4845      	ldr	r0, [pc, #276]	@ (80083ac <ProcessCmd+0x308>)
 8008298:	230c      	movs	r3, #12
 800829a:	f003 fa2f 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 800829e:	e056      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082a0:	2118      	movs	r1, #24
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	001a      	movs	r2, r3
 80082a8:	187b      	adds	r3, r7, r1
 80082aa:	1c99      	adds	r1, r3, #2
 80082ac:	4840      	ldr	r0, [pc, #256]	@ (80083b0 <ProcessCmd+0x30c>)
 80082ae:	230c      	movs	r3, #12
 80082b0:	f003 fa24 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80082b4:	e04b      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082b6:	2118      	movs	r1, #24
 80082b8:	187b      	adds	r3, r7, r1
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	001a      	movs	r2, r3
 80082be:	187b      	adds	r3, r7, r1
 80082c0:	1c99      	adds	r1, r3, #2
 80082c2:	483c      	ldr	r0, [pc, #240]	@ (80083b4 <ProcessCmd+0x310>)
 80082c4:	230c      	movs	r3, #12
 80082c6:	f003 fa19 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80082ca:	e040      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082cc:	2118      	movs	r1, #24
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	001a      	movs	r2, r3
 80082d4:	187b      	adds	r3, r7, r1
 80082d6:	1c99      	adds	r1, r3, #2
 80082d8:	4837      	ldr	r0, [pc, #220]	@ (80083b8 <ProcessCmd+0x314>)
 80082da:	230c      	movs	r3, #12
 80082dc:	f003 fa0e 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80082e0:	e035      	b.n	800834e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082e2:	2118      	movs	r1, #24
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	001a      	movs	r2, r3
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	1c99      	adds	r1, r3, #2
 80082ee:	4833      	ldr	r0, [pc, #204]	@ (80083bc <ProcessCmd+0x318>)
 80082f0:	230c      	movs	r3, #12
 80082f2:	f003 fa03 	bl	800b6fc <WriteUint8ArrayEepromSafe>
        break;
 80082f6:	e02a      	b.n	800834e <ProcessCmd+0x2aa>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80082f8:	23ca      	movs	r3, #202	@ 0xca
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4a18      	ldr	r2, [pc, #96]	@ (8008360 <ProcessCmd+0x2bc>)
 80082fe:	0019      	movs	r1, r3
 8008300:	0010      	movs	r0, r2
 8008302:	f003 fa40 	bl	800b786 <ClearEEprom>
        break;
 8008306:	e022      	b.n	800834e <ProcessCmd+0x2aa>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008308:	2118      	movs	r1, #24
 800830a:	187b      	adds	r3, r7, r1
 800830c:	789b      	ldrb	r3, [r3, #2]
 800830e:	b21b      	sxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b21a      	sxth	r2, r3
 8008314:	187b      	adds	r3, r7, r1
 8008316:	78db      	ldrb	r3, [r3, #3]
 8008318:	b21b      	sxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b21a      	sxth	r2, r3
 800831e:	1dbb      	adds	r3, r7, #6
 8008320:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008322:	1dbb      	adds	r3, r7, #6
 8008324:	881a      	ldrh	r2, [r3, #0]
 8008326:	23c0      	movs	r3, #192	@ 0xc0
 8008328:	015b      	lsls	r3, r3, #5
 800832a:	429a      	cmp	r2, r3
 800832c:	d207      	bcs.n	800833e <ProcessCmd+0x29a>
                ClearEEprom(EEPromStartAddr, size);
 800832e:	1dbb      	adds	r3, r7, #6
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	4a0b      	ldr	r2, [pc, #44]	@ (8008360 <ProcessCmd+0x2bc>)
 8008334:	0019      	movs	r1, r3
 8008336:	0010      	movs	r0, r2
 8008338:	f003 fa25 	bl	800b786 <ClearEEprom>
            break;
 800833c:	e006      	b.n	800834c <ProcessCmd+0x2a8>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800833e:	23c0      	movs	r3, #192	@ 0xc0
 8008340:	015b      	lsls	r3, r3, #5
 8008342:	4a07      	ldr	r2, [pc, #28]	@ (8008360 <ProcessCmd+0x2bc>)
 8008344:	0019      	movs	r1, r3
 8008346:	0010      	movs	r0, r2
 8008348:	f003 fa1d 	bl	800b786 <ClearEEprom>
            break;
 800834c:	46c0      	nop			@ (mov r8, r8)
}
 800834e:	46c0      	nop			@ (mov r8, r8)
 8008350:	46bd      	mov	sp, r7
 8008352:	b002      	add	sp, #8
 8008354:	bcb0      	pop	{r4, r5, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	b004      	add	sp, #16
 800835a:	4718      	bx	r3
 800835c:	0802d960 	.word	0x0802d960
 8008360:	08080000 	.word	0x08080000
 8008364:	0808000c 	.word	0x0808000c
 8008368:	08080018 	.word	0x08080018
 800836c:	08080024 	.word	0x08080024
 8008370:	08080030 	.word	0x08080030
 8008374:	0808003c 	.word	0x0808003c
 8008378:	08080048 	.word	0x08080048
 800837c:	08080054 	.word	0x08080054
 8008380:	08080060 	.word	0x08080060
 8008384:	0808006c 	.word	0x0808006c
 8008388:	08080078 	.word	0x08080078
 800838c:	08080090 	.word	0x08080090
 8008390:	080800b0 	.word	0x080800b0
 8008394:	080800bc 	.word	0x080800bc
 8008398:	080800c8 	.word	0x080800c8
 800839c:	080800d4 	.word	0x080800d4
 80083a0:	080800e0 	.word	0x080800e0
 80083a4:	080800ec 	.word	0x080800ec
 80083a8:	080800f8 	.word	0x080800f8
 80083ac:	08080104 	.word	0x08080104
 80083b0:	08080110 	.word	0x08080110
 80083b4:	08080130 	.word	0x08080130
 80083b8:	08080170 	.word	0x08080170
 80083bc:	0808017c 	.word	0x0808017c

080083c0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6039      	str	r1, [r7, #0]
 80083c8:	0011      	movs	r1, r2
 80083ca:	1dfb      	adds	r3, r7, #7
 80083cc:	1c02      	adds	r2, r0, #0
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	1dbb      	adds	r3, r7, #6
 80083d2:	1c0a      	adds	r2, r1, #0
 80083d4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80083d6:	2223      	movs	r2, #35	@ 0x23
 80083d8:	4b20      	ldr	r3, [pc, #128]	@ (800845c <Create_Message+0x9c>)
 80083da:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80083dc:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <Create_Message+0x9c>)
 80083de:	1dfa      	adds	r2, r7, #7
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80083e4:	4b1d      	ldr	r3, [pc, #116]	@ (800845c <Create_Message+0x9c>)
 80083e6:	1dba      	adds	r2, r7, #6
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80083ec:	1dbb      	adds	r3, r7, #6
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008460 <Create_Message+0xa0>)
 80083f4:	0018      	movs	r0, r3
 80083f6:	f01d fa9d 	bl	8025934 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80083fa:	1dbb      	adds	r3, r7, #6
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	250e      	movs	r5, #14
 8008402:	197b      	adds	r3, r7, r5
 8008404:	3203      	adds	r2, #3
 8008406:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008408:	260c      	movs	r6, #12
 800840a:	19bc      	adds	r4, r7, r6
 800840c:	197b      	adds	r3, r7, r5
 800840e:	881a      	ldrh	r2, [r3, #0]
 8008410:	4b12      	ldr	r3, [pc, #72]	@ (800845c <Create_Message+0x9c>)
 8008412:	0011      	movs	r1, r2
 8008414:	0018      	movs	r0, r3
 8008416:	f000 f825 	bl	8008464 <CRC16_ARC>
 800841a:	0003      	movs	r3, r0
 800841c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800841e:	0030      	movs	r0, r6
 8008420:	183b      	adds	r3, r7, r0
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	b29a      	uxth	r2, r3
 8008428:	197b      	adds	r3, r7, r5
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b2d1      	uxtb	r1, r2
 800842e:	4a0b      	ldr	r2, [pc, #44]	@ (800845c <Create_Message+0x9c>)
 8008430:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008432:	197b      	adds	r3, r7, r5
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	183a      	adds	r2, r7, r0
 800843a:	8812      	ldrh	r2, [r2, #0]
 800843c:	b2d1      	uxtb	r1, r2
 800843e:	4a07      	ldr	r2, [pc, #28]	@ (800845c <Create_Message+0x9c>)
 8008440:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008442:	197b      	adds	r3, r7, r5
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	3302      	adds	r3, #2
 8008448:	b29a      	uxth	r2, r3
 800844a:	4b04      	ldr	r3, [pc, #16]	@ (800845c <Create_Message+0x9c>)
 800844c:	0011      	movs	r1, r2
 800844e:	0018      	movs	r0, r3
 8008450:	f019 ff12 	bl	8022278 <CDC_Transmit_FS>
}
 8008454:	46c0      	nop			@ (mov r8, r8)
 8008456:	46bd      	mov	sp, r7
 8008458:	b005      	add	sp, #20
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845c:	200008a0 	.word	0x200008a0
 8008460:	200008a3 	.word	0x200008a3

08008464 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	000a      	movs	r2, r1
 800846e:	1cbb      	adds	r3, r7, #2
 8008470:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008472:	2316      	movs	r3, #22
 8008474:	18fb      	adds	r3, r7, r3
 8008476:	2200      	movs	r2, #0
 8008478:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	e02e      	b.n	80084de <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	18d3      	adds	r3, r2, r3
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	0019      	movs	r1, r3
 800848a:	2216      	movs	r2, #22
 800848c:	18bb      	adds	r3, r7, r2
 800848e:	18ba      	adds	r2, r7, r2
 8008490:	8812      	ldrh	r2, [r2, #0]
 8008492:	404a      	eors	r2, r1
 8008494:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	e01a      	b.n	80084d2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800849c:	2116      	movs	r1, #22
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	2201      	movs	r2, #1
 80084a4:	4013      	ands	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80084a8:	187b      	adds	r3, r7, r1
 80084aa:	187a      	adds	r2, r7, r1
 80084ac:	8812      	ldrh	r2, [r2, #0]
 80084ae:	0852      	lsrs	r2, r2, #1
 80084b0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80084b2:	187b      	adds	r3, r7, r1
 80084b4:	187a      	adds	r2, r7, r1
 80084b6:	8812      	ldrh	r2, [r2, #0]
 80084b8:	490f      	ldr	r1, [pc, #60]	@ (80084f8 <CRC16_ARC+0x94>)
 80084ba:	404a      	eors	r2, r1
 80084bc:	801a      	strh	r2, [r3, #0]
 80084be:	e005      	b.n	80084cc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80084c0:	2216      	movs	r2, #22
 80084c2:	18bb      	adds	r3, r7, r2
 80084c4:	18ba      	adds	r2, r7, r2
 80084c6:	8812      	ldrh	r2, [r2, #0]
 80084c8:	0852      	lsrs	r2, r2, #1
 80084ca:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b07      	cmp	r3, #7
 80084d6:	dde1      	ble.n	800849c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	1cbb      	adds	r3, r7, #2
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	dbcb      	blt.n	8008480 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80084e8:	2316      	movs	r3, #22
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	881b      	ldrh	r3, [r3, #0]
}
 80084ee:	0018      	movs	r0, r3
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b006      	add	sp, #24
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	ffffa001 	.word	0xffffa001

080084fc <printf_USB>:

void printf_USB(const char* message, ...)
{
 80084fc:	b40f      	push	{r0, r1, r2, r3}
 80084fe:	b590      	push	{r4, r7, lr}
 8008500:	b0a9      	sub	sp, #164	@ 0xa4
 8008502:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008504:	23ac      	movs	r3, #172	@ 0xac
 8008506:	2108      	movs	r1, #8
 8008508:	185b      	adds	r3, r3, r1
 800850a:	19db      	adds	r3, r3, r7
 800850c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	23a8      	movs	r3, #168	@ 0xa8
 8008512:	185b      	adds	r3, r3, r1
 8008514:	19db      	adds	r3, r3, r7
 8008516:	6819      	ldr	r1, [r3, #0]
 8008518:	2408      	movs	r4, #8
 800851a:	193b      	adds	r3, r7, r4
 800851c:	0018      	movs	r0, r3
 800851e:	f01d f881 	bl	8025624 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008522:	193b      	adds	r3, r7, r4
 8008524:	0018      	movs	r0, r3
 8008526:	f7f7 fe21 	bl	800016c <strlen>
 800852a:	0003      	movs	r3, r0
 800852c:	b29a      	uxth	r2, r3
 800852e:	193b      	adds	r3, r7, r4
 8008530:	0011      	movs	r1, r2
 8008532:	0018      	movs	r0, r3
 8008534:	f019 fea0 	bl	8022278 <CDC_Transmit_FS>
}
 8008538:	46c0      	nop			@ (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b029      	add	sp, #164	@ 0xa4
 800853e:	bc90      	pop	{r4, r7}
 8008540:	bc08      	pop	{r3}
 8008542:	b004      	add	sp, #16
 8008544:	4718      	bx	r3

08008546 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	000a      	movs	r2, r1
 8008550:	1cfb      	adds	r3, r7, #3
 8008552:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008554:	1cfb      	adds	r3, r7, #3
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <PC_selectout+0x1e>
    printf_USB(msg);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	f7ff ffcc 	bl	80084fc <printf_USB>
  }
//  else {
    printf(msg);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	0018      	movs	r0, r3
 8008568:	f01c ff2e 	bl	80253c8 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800856c:	200a      	movs	r0, #10
 800856e:	f00b fb5b 	bl	8013c28 <HAL_Delay>
}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <PC_show_Keys>:

void PC_show_Keys() {
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 25
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008580:	f000 fe68 	bl	8009254 <Check_USB_PowerOn>
 8008584:	1e03      	subs	r3, r0, #0
 8008586:	d005      	beq.n	8008594 <PC_show_Keys+0x18>
    usb_out = true;
 8008588:	4b01      	ldr	r3, [pc, #4]	@ (8008590 <PC_show_Keys+0x14>)
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e004      	b.n	800859a <PC_show_Keys+0x1e>
 8008590:	200009a5 	.word	0x200009a5
  }
  else {
    usb_out = false;
 8008594:	4bfd      	ldr	r3, [pc, #1012]	@ (800898c <PC_show_Keys+0x410>)
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 800859a:	4afd      	ldr	r2, [pc, #1012]	@ (8008990 <PC_show_Keys+0x414>)
 800859c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008994 <PC_show_Keys+0x418>)
 800859e:	0011      	movs	r1, r2
 80085a0:	0018      	movs	r0, r3
 80085a2:	f01c ff81 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085a6:	4bf9      	ldr	r3, [pc, #996]	@ (800898c <PC_show_Keys+0x410>)
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	4bfa      	ldr	r3, [pc, #1000]	@ (8008994 <PC_show_Keys+0x418>)
 80085ac:	0011      	movs	r1, r2
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff ffc9 	bl	8008546 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80085b4:	4bf8      	ldr	r3, [pc, #992]	@ (8008998 <PC_show_Keys+0x41c>)
 80085b6:	48f9      	ldr	r0, [pc, #996]	@ (800899c <PC_show_Keys+0x420>)
 80085b8:	220c      	movs	r2, #12
 80085ba:	0019      	movs	r1, r3
 80085bc:	f003 f8ba 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80085c0:	4af5      	ldr	r2, [pc, #980]	@ (8008998 <PC_show_Keys+0x41c>)
 80085c2:	4bf7      	ldr	r3, [pc, #988]	@ (80089a0 <PC_show_Keys+0x424>)
 80085c4:	0011      	movs	r1, r2
 80085c6:	0018      	movs	r0, r3
 80085c8:	f7fc fe20 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 80085cc:	4af4      	ldr	r2, [pc, #976]	@ (80089a0 <PC_show_Keys+0x424>)
 80085ce:	49f5      	ldr	r1, [pc, #980]	@ (80089a4 <PC_show_Keys+0x428>)
 80085d0:	4bf0      	ldr	r3, [pc, #960]	@ (8008994 <PC_show_Keys+0x418>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f01c ff68 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085d8:	4bec      	ldr	r3, [pc, #944]	@ (800898c <PC_show_Keys+0x410>)
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	4bed      	ldr	r3, [pc, #948]	@ (8008994 <PC_show_Keys+0x418>)
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7ff ffb0 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80085e6:	4bf0      	ldr	r3, [pc, #960]	@ (80089a8 <PC_show_Keys+0x42c>)
 80085e8:	48f0      	ldr	r0, [pc, #960]	@ (80089ac <PC_show_Keys+0x430>)
 80085ea:	220c      	movs	r2, #12
 80085ec:	0019      	movs	r1, r3
 80085ee:	f003 f8a1 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 80085f2:	4aed      	ldr	r2, [pc, #948]	@ (80089a8 <PC_show_Keys+0x42c>)
 80085f4:	4bea      	ldr	r3, [pc, #936]	@ (80089a0 <PC_show_Keys+0x424>)
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7fc fe07 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 80085fe:	4ae8      	ldr	r2, [pc, #928]	@ (80089a0 <PC_show_Keys+0x424>)
 8008600:	49eb      	ldr	r1, [pc, #940]	@ (80089b0 <PC_show_Keys+0x434>)
 8008602:	4be4      	ldr	r3, [pc, #912]	@ (8008994 <PC_show_Keys+0x418>)
 8008604:	0018      	movs	r0, r3
 8008606:	f01c ff4f 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800860a:	4be0      	ldr	r3, [pc, #896]	@ (800898c <PC_show_Keys+0x410>)
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	4be1      	ldr	r3, [pc, #900]	@ (8008994 <PC_show_Keys+0x418>)
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f7ff ff97 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008618:	4be6      	ldr	r3, [pc, #920]	@ (80089b4 <PC_show_Keys+0x438>)
 800861a:	48e7      	ldr	r0, [pc, #924]	@ (80089b8 <PC_show_Keys+0x43c>)
 800861c:	220c      	movs	r2, #12
 800861e:	0019      	movs	r1, r3
 8008620:	f003 f888 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008624:	4ae3      	ldr	r2, [pc, #908]	@ (80089b4 <PC_show_Keys+0x438>)
 8008626:	4bde      	ldr	r3, [pc, #888]	@ (80089a0 <PC_show_Keys+0x424>)
 8008628:	0011      	movs	r1, r2
 800862a:	0018      	movs	r0, r3
 800862c:	f7fc fdee 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 8008630:	4adb      	ldr	r2, [pc, #876]	@ (80089a0 <PC_show_Keys+0x424>)
 8008632:	49e2      	ldr	r1, [pc, #904]	@ (80089bc <PC_show_Keys+0x440>)
 8008634:	4bd7      	ldr	r3, [pc, #860]	@ (8008994 <PC_show_Keys+0x418>)
 8008636:	0018      	movs	r0, r3
 8008638:	f01c ff36 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800863c:	4bd3      	ldr	r3, [pc, #844]	@ (800898c <PC_show_Keys+0x410>)
 800863e:	781a      	ldrb	r2, [r3, #0]
 8008640:	4bd4      	ldr	r3, [pc, #848]	@ (8008994 <PC_show_Keys+0x418>)
 8008642:	0011      	movs	r1, r2
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff ff7e 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800864a:	4bdd      	ldr	r3, [pc, #884]	@ (80089c0 <PC_show_Keys+0x444>)
 800864c:	48dd      	ldr	r0, [pc, #884]	@ (80089c4 <PC_show_Keys+0x448>)
 800864e:	220c      	movs	r2, #12
 8008650:	0019      	movs	r1, r3
 8008652:	f003 f86f 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008656:	4ada      	ldr	r2, [pc, #872]	@ (80089c0 <PC_show_Keys+0x444>)
 8008658:	4bd1      	ldr	r3, [pc, #836]	@ (80089a0 <PC_show_Keys+0x424>)
 800865a:	0011      	movs	r1, r2
 800865c:	0018      	movs	r0, r3
 800865e:	f7fc fdd5 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 8008662:	4acf      	ldr	r2, [pc, #828]	@ (80089a0 <PC_show_Keys+0x424>)
 8008664:	49d8      	ldr	r1, [pc, #864]	@ (80089c8 <PC_show_Keys+0x44c>)
 8008666:	4bcb      	ldr	r3, [pc, #812]	@ (8008994 <PC_show_Keys+0x418>)
 8008668:	0018      	movs	r0, r3
 800866a:	f01c ff1d 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800866e:	4bc7      	ldr	r3, [pc, #796]	@ (800898c <PC_show_Keys+0x410>)
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	4bc8      	ldr	r3, [pc, #800]	@ (8008994 <PC_show_Keys+0x418>)
 8008674:	0011      	movs	r1, r2
 8008676:	0018      	movs	r0, r3
 8008678:	f7ff ff65 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800867c:	4bd3      	ldr	r3, [pc, #844]	@ (80089cc <PC_show_Keys+0x450>)
 800867e:	48d4      	ldr	r0, [pc, #848]	@ (80089d0 <PC_show_Keys+0x454>)
 8008680:	220c      	movs	r2, #12
 8008682:	0019      	movs	r1, r3
 8008684:	f003 f856 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008688:	4ad0      	ldr	r2, [pc, #832]	@ (80089cc <PC_show_Keys+0x450>)
 800868a:	4bc5      	ldr	r3, [pc, #788]	@ (80089a0 <PC_show_Keys+0x424>)
 800868c:	0011      	movs	r1, r2
 800868e:	0018      	movs	r0, r3
 8008690:	f7fc fdbc 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 8008694:	4ac2      	ldr	r2, [pc, #776]	@ (80089a0 <PC_show_Keys+0x424>)
 8008696:	49cf      	ldr	r1, [pc, #828]	@ (80089d4 <PC_show_Keys+0x458>)
 8008698:	4bbe      	ldr	r3, [pc, #760]	@ (8008994 <PC_show_Keys+0x418>)
 800869a:	0018      	movs	r0, r3
 800869c:	f01c ff04 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086a0:	4bba      	ldr	r3, [pc, #744]	@ (800898c <PC_show_Keys+0x410>)
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	4bbb      	ldr	r3, [pc, #748]	@ (8008994 <PC_show_Keys+0x418>)
 80086a6:	0011      	movs	r1, r2
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff ff4c 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80086ae:	4bca      	ldr	r3, [pc, #808]	@ (80089d8 <PC_show_Keys+0x45c>)
 80086b0:	48ca      	ldr	r0, [pc, #808]	@ (80089dc <PC_show_Keys+0x460>)
 80086b2:	220c      	movs	r2, #12
 80086b4:	0019      	movs	r1, r3
 80086b6:	f003 f83d 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80086ba:	4ac7      	ldr	r2, [pc, #796]	@ (80089d8 <PC_show_Keys+0x45c>)
 80086bc:	4bb8      	ldr	r3, [pc, #736]	@ (80089a0 <PC_show_Keys+0x424>)
 80086be:	0011      	movs	r1, r2
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fc fda3 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 80086c6:	4ac6      	ldr	r2, [pc, #792]	@ (80089e0 <PC_show_Keys+0x464>)
 80086c8:	4bb2      	ldr	r3, [pc, #712]	@ (8008994 <PC_show_Keys+0x418>)
 80086ca:	0011      	movs	r1, r2
 80086cc:	0018      	movs	r0, r3
 80086ce:	f01c feeb 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086d2:	4bae      	ldr	r3, [pc, #696]	@ (800898c <PC_show_Keys+0x410>)
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <PC_show_Keys+0x418>)
 80086d8:	0011      	movs	r1, r2
 80086da:	0018      	movs	r0, r3
 80086dc:	f7ff ff33 	bl	8008546 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 80086e0:	4aaf      	ldr	r2, [pc, #700]	@ (80089a0 <PC_show_Keys+0x424>)
 80086e2:	49c0      	ldr	r1, [pc, #768]	@ (80089e4 <PC_show_Keys+0x468>)
 80086e4:	4bab      	ldr	r3, [pc, #684]	@ (8008994 <PC_show_Keys+0x418>)
 80086e6:	0018      	movs	r0, r3
 80086e8:	f01c fede 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086ec:	4ba7      	ldr	r3, [pc, #668]	@ (800898c <PC_show_Keys+0x410>)
 80086ee:	781a      	ldrb	r2, [r3, #0]
 80086f0:	4ba8      	ldr	r3, [pc, #672]	@ (8008994 <PC_show_Keys+0x418>)
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff ff26 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 80086fa:	4bbb      	ldr	r3, [pc, #748]	@ (80089e8 <PC_show_Keys+0x46c>)
 80086fc:	48bb      	ldr	r0, [pc, #748]	@ (80089ec <PC_show_Keys+0x470>)
 80086fe:	220c      	movs	r2, #12
 8008700:	0019      	movs	r1, r3
 8008702:	f003 f817 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008706:	4ab8      	ldr	r2, [pc, #736]	@ (80089e8 <PC_show_Keys+0x46c>)
 8008708:	4ba5      	ldr	r3, [pc, #660]	@ (80089a0 <PC_show_Keys+0x424>)
 800870a:	0011      	movs	r1, r2
 800870c:	0018      	movs	r0, r3
 800870e:	f7fc fd7d 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 8008712:	4ab7      	ldr	r2, [pc, #732]	@ (80089f0 <PC_show_Keys+0x474>)
 8008714:	4b9f      	ldr	r3, [pc, #636]	@ (8008994 <PC_show_Keys+0x418>)
 8008716:	0011      	movs	r1, r2
 8008718:	0018      	movs	r0, r3
 800871a:	f01c fec5 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800871e:	4b9b      	ldr	r3, [pc, #620]	@ (800898c <PC_show_Keys+0x410>)
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	4b9c      	ldr	r3, [pc, #624]	@ (8008994 <PC_show_Keys+0x418>)
 8008724:	0011      	movs	r1, r2
 8008726:	0018      	movs	r0, r3
 8008728:	f7ff ff0d 	bl	8008546 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 800872c:	4a9c      	ldr	r2, [pc, #624]	@ (80089a0 <PC_show_Keys+0x424>)
 800872e:	49b1      	ldr	r1, [pc, #708]	@ (80089f4 <PC_show_Keys+0x478>)
 8008730:	4b98      	ldr	r3, [pc, #608]	@ (8008994 <PC_show_Keys+0x418>)
 8008732:	0018      	movs	r0, r3
 8008734:	f01c feb8 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008738:	4b94      	ldr	r3, [pc, #592]	@ (800898c <PC_show_Keys+0x410>)
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	4b95      	ldr	r3, [pc, #596]	@ (8008994 <PC_show_Keys+0x418>)
 800873e:	0011      	movs	r1, r2
 8008740:	0018      	movs	r0, r3
 8008742:	f7ff ff00 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008746:	4bac      	ldr	r3, [pc, #688]	@ (80089f8 <PC_show_Keys+0x47c>)
 8008748:	48ac      	ldr	r0, [pc, #688]	@ (80089fc <PC_show_Keys+0x480>)
 800874a:	220c      	movs	r2, #12
 800874c:	0019      	movs	r1, r3
 800874e:	f002 fff1 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008752:	4aa9      	ldr	r2, [pc, #676]	@ (80089f8 <PC_show_Keys+0x47c>)
 8008754:	4b92      	ldr	r3, [pc, #584]	@ (80089a0 <PC_show_Keys+0x424>)
 8008756:	0011      	movs	r1, r2
 8008758:	0018      	movs	r0, r3
 800875a:	f7fc fd57 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 800875e:	4a90      	ldr	r2, [pc, #576]	@ (80089a0 <PC_show_Keys+0x424>)
 8008760:	49a7      	ldr	r1, [pc, #668]	@ (8008a00 <PC_show_Keys+0x484>)
 8008762:	4b8c      	ldr	r3, [pc, #560]	@ (8008994 <PC_show_Keys+0x418>)
 8008764:	0018      	movs	r0, r3
 8008766:	f01c fe9f 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800876a:	4b88      	ldr	r3, [pc, #544]	@ (800898c <PC_show_Keys+0x410>)
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	4b89      	ldr	r3, [pc, #548]	@ (8008994 <PC_show_Keys+0x418>)
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f7ff fee7 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008778:	4ba2      	ldr	r3, [pc, #648]	@ (8008a04 <PC_show_Keys+0x488>)
 800877a:	48a3      	ldr	r0, [pc, #652]	@ (8008a08 <PC_show_Keys+0x48c>)
 800877c:	220c      	movs	r2, #12
 800877e:	0019      	movs	r1, r3
 8008780:	f002 ffd8 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008784:	4a9f      	ldr	r2, [pc, #636]	@ (8008a04 <PC_show_Keys+0x488>)
 8008786:	4b86      	ldr	r3, [pc, #536]	@ (80089a0 <PC_show_Keys+0x424>)
 8008788:	0011      	movs	r1, r2
 800878a:	0018      	movs	r0, r3
 800878c:	f7fc fd3e 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008790:	4a83      	ldr	r2, [pc, #524]	@ (80089a0 <PC_show_Keys+0x424>)
 8008792:	499e      	ldr	r1, [pc, #632]	@ (8008a0c <PC_show_Keys+0x490>)
 8008794:	4b7f      	ldr	r3, [pc, #508]	@ (8008994 <PC_show_Keys+0x418>)
 8008796:	0018      	movs	r0, r3
 8008798:	f01c fe86 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800879c:	4b7b      	ldr	r3, [pc, #492]	@ (800898c <PC_show_Keys+0x410>)
 800879e:	781a      	ldrb	r2, [r3, #0]
 80087a0:	4b7c      	ldr	r3, [pc, #496]	@ (8008994 <PC_show_Keys+0x418>)
 80087a2:	0011      	movs	r1, r2
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7ff fece 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80087aa:	4b99      	ldr	r3, [pc, #612]	@ (8008a10 <PC_show_Keys+0x494>)
 80087ac:	4899      	ldr	r0, [pc, #612]	@ (8008a14 <PC_show_Keys+0x498>)
 80087ae:	220c      	movs	r2, #12
 80087b0:	0019      	movs	r1, r3
 80087b2:	f002 ffbf 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80087b6:	4a96      	ldr	r2, [pc, #600]	@ (8008a10 <PC_show_Keys+0x494>)
 80087b8:	4b79      	ldr	r3, [pc, #484]	@ (80089a0 <PC_show_Keys+0x424>)
 80087ba:	0011      	movs	r1, r2
 80087bc:	0018      	movs	r0, r3
 80087be:	f7fc fd25 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 80087c2:	4a77      	ldr	r2, [pc, #476]	@ (80089a0 <PC_show_Keys+0x424>)
 80087c4:	4994      	ldr	r1, [pc, #592]	@ (8008a18 <PC_show_Keys+0x49c>)
 80087c6:	4b73      	ldr	r3, [pc, #460]	@ (8008994 <PC_show_Keys+0x418>)
 80087c8:	0018      	movs	r0, r3
 80087ca:	f01c fe6d 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087ce:	4b6f      	ldr	r3, [pc, #444]	@ (800898c <PC_show_Keys+0x410>)
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	4b70      	ldr	r3, [pc, #448]	@ (8008994 <PC_show_Keys+0x418>)
 80087d4:	0011      	movs	r1, r2
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7ff feb5 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80087dc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a1c <PC_show_Keys+0x4a0>)
 80087de:	4890      	ldr	r0, [pc, #576]	@ (8008a20 <PC_show_Keys+0x4a4>)
 80087e0:	220c      	movs	r2, #12
 80087e2:	0019      	movs	r1, r3
 80087e4:	f002 ffa6 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80087e8:	4a8c      	ldr	r2, [pc, #560]	@ (8008a1c <PC_show_Keys+0x4a0>)
 80087ea:	4b6d      	ldr	r3, [pc, #436]	@ (80089a0 <PC_show_Keys+0x424>)
 80087ec:	0011      	movs	r1, r2
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7fc fd0c 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 80087f4:	4a6a      	ldr	r2, [pc, #424]	@ (80089a0 <PC_show_Keys+0x424>)
 80087f6:	498b      	ldr	r1, [pc, #556]	@ (8008a24 <PC_show_Keys+0x4a8>)
 80087f8:	4b66      	ldr	r3, [pc, #408]	@ (8008994 <PC_show_Keys+0x418>)
 80087fa:	0018      	movs	r0, r3
 80087fc:	f01c fe54 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008800:	4b62      	ldr	r3, [pc, #392]	@ (800898c <PC_show_Keys+0x410>)
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	4b63      	ldr	r3, [pc, #396]	@ (8008994 <PC_show_Keys+0x418>)
 8008806:	0011      	movs	r1, r2
 8008808:	0018      	movs	r0, r3
 800880a:	f7ff fe9c 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 800880e:	4b86      	ldr	r3, [pc, #536]	@ (8008a28 <PC_show_Keys+0x4ac>)
 8008810:	4886      	ldr	r0, [pc, #536]	@ (8008a2c <PC_show_Keys+0x4b0>)
 8008812:	220c      	movs	r2, #12
 8008814:	0019      	movs	r1, r3
 8008816:	f002 ff8d 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 800881a:	4a83      	ldr	r2, [pc, #524]	@ (8008a28 <PC_show_Keys+0x4ac>)
 800881c:	4b60      	ldr	r3, [pc, #384]	@ (80089a0 <PC_show_Keys+0x424>)
 800881e:	0011      	movs	r1, r2
 8008820:	0018      	movs	r0, r3
 8008822:	f7fc fcf3 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 8008826:	4a5e      	ldr	r2, [pc, #376]	@ (80089a0 <PC_show_Keys+0x424>)
 8008828:	4981      	ldr	r1, [pc, #516]	@ (8008a30 <PC_show_Keys+0x4b4>)
 800882a:	4b5a      	ldr	r3, [pc, #360]	@ (8008994 <PC_show_Keys+0x418>)
 800882c:	0018      	movs	r0, r3
 800882e:	f01c fe3b 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008832:	4b56      	ldr	r3, [pc, #344]	@ (800898c <PC_show_Keys+0x410>)
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	4b57      	ldr	r3, [pc, #348]	@ (8008994 <PC_show_Keys+0x418>)
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f7ff fe83 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008840:	4b7c      	ldr	r3, [pc, #496]	@ (8008a34 <PC_show_Keys+0x4b8>)
 8008842:	487d      	ldr	r0, [pc, #500]	@ (8008a38 <PC_show_Keys+0x4bc>)
 8008844:	2220      	movs	r2, #32
 8008846:	0019      	movs	r1, r3
 8008848:	f002 ff74 	bl	800b734 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 800884c:	4a7b      	ldr	r2, [pc, #492]	@ (8008a3c <PC_show_Keys+0x4c0>)
 800884e:	4b51      	ldr	r3, [pc, #324]	@ (8008994 <PC_show_Keys+0x418>)
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f01c fe28 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008858:	4b4c      	ldr	r3, [pc, #304]	@ (800898c <PC_show_Keys+0x410>)
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	4b4d      	ldr	r3, [pc, #308]	@ (8008994 <PC_show_Keys+0x418>)
 800885e:	0011      	movs	r1, r2
 8008860:	0018      	movs	r0, r3
 8008862:	f7ff fe70 	bl	8008546 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008866:	4a73      	ldr	r2, [pc, #460]	@ (8008a34 <PC_show_Keys+0x4b8>)
 8008868:	4975      	ldr	r1, [pc, #468]	@ (8008a40 <PC_show_Keys+0x4c4>)
 800886a:	4b4a      	ldr	r3, [pc, #296]	@ (8008994 <PC_show_Keys+0x418>)
 800886c:	0018      	movs	r0, r3
 800886e:	f01c fe1b 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008872:	4b46      	ldr	r3, [pc, #280]	@ (800898c <PC_show_Keys+0x410>)
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	4b47      	ldr	r3, [pc, #284]	@ (8008994 <PC_show_Keys+0x418>)
 8008878:	0011      	movs	r1, r2
 800887a:	0018      	movs	r0, r3
 800887c:	f7ff fe63 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008880:	4b70      	ldr	r3, [pc, #448]	@ (8008a44 <PC_show_Keys+0x4c8>)
 8008882:	4871      	ldr	r0, [pc, #452]	@ (8008a48 <PC_show_Keys+0x4cc>)
 8008884:	220c      	movs	r2, #12
 8008886:	0019      	movs	r1, r3
 8008888:	f002 ff54 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 800888c:	4a6d      	ldr	r2, [pc, #436]	@ (8008a44 <PC_show_Keys+0x4c8>)
 800888e:	4b44      	ldr	r3, [pc, #272]	@ (80089a0 <PC_show_Keys+0x424>)
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f7fc fcba 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008898:	4a41      	ldr	r2, [pc, #260]	@ (80089a0 <PC_show_Keys+0x424>)
 800889a:	496c      	ldr	r1, [pc, #432]	@ (8008a4c <PC_show_Keys+0x4d0>)
 800889c:	4b3d      	ldr	r3, [pc, #244]	@ (8008994 <PC_show_Keys+0x418>)
 800889e:	0018      	movs	r0, r3
 80088a0:	f01c fe02 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088a4:	4b39      	ldr	r3, [pc, #228]	@ (800898c <PC_show_Keys+0x410>)
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008994 <PC_show_Keys+0x418>)
 80088aa:	0011      	movs	r1, r2
 80088ac:	0018      	movs	r0, r3
 80088ae:	f7ff fe4a 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80088b2:	4b67      	ldr	r3, [pc, #412]	@ (8008a50 <PC_show_Keys+0x4d4>)
 80088b4:	4867      	ldr	r0, [pc, #412]	@ (8008a54 <PC_show_Keys+0x4d8>)
 80088b6:	220c      	movs	r2, #12
 80088b8:	0019      	movs	r1, r3
 80088ba:	f002 ff3b 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80088be:	4a64      	ldr	r2, [pc, #400]	@ (8008a50 <PC_show_Keys+0x4d4>)
 80088c0:	4b37      	ldr	r3, [pc, #220]	@ (80089a0 <PC_show_Keys+0x424>)
 80088c2:	0011      	movs	r1, r2
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7fc fca1 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 80088ca:	4a35      	ldr	r2, [pc, #212]	@ (80089a0 <PC_show_Keys+0x424>)
 80088cc:	4962      	ldr	r1, [pc, #392]	@ (8008a58 <PC_show_Keys+0x4dc>)
 80088ce:	4b31      	ldr	r3, [pc, #196]	@ (8008994 <PC_show_Keys+0x418>)
 80088d0:	0018      	movs	r0, r3
 80088d2:	f01c fde9 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088d6:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <PC_show_Keys+0x410>)
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	4b2e      	ldr	r3, [pc, #184]	@ (8008994 <PC_show_Keys+0x418>)
 80088dc:	0011      	movs	r1, r2
 80088de:	0018      	movs	r0, r3
 80088e0:	f7ff fe31 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 80088e4:	4b5d      	ldr	r3, [pc, #372]	@ (8008a5c <PC_show_Keys+0x4e0>)
 80088e6:	485e      	ldr	r0, [pc, #376]	@ (8008a60 <PC_show_Keys+0x4e4>)
 80088e8:	220c      	movs	r2, #12
 80088ea:	0019      	movs	r1, r3
 80088ec:	f002 ff22 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 80088f0:	4a5a      	ldr	r2, [pc, #360]	@ (8008a5c <PC_show_Keys+0x4e0>)
 80088f2:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <PC_show_Keys+0x424>)
 80088f4:	0011      	movs	r1, r2
 80088f6:	0018      	movs	r0, r3
 80088f8:	f7fc fc88 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 80088fc:	4a28      	ldr	r2, [pc, #160]	@ (80089a0 <PC_show_Keys+0x424>)
 80088fe:	4959      	ldr	r1, [pc, #356]	@ (8008a64 <PC_show_Keys+0x4e8>)
 8008900:	4b24      	ldr	r3, [pc, #144]	@ (8008994 <PC_show_Keys+0x418>)
 8008902:	0018      	movs	r0, r3
 8008904:	f01c fdd0 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008908:	4b20      	ldr	r3, [pc, #128]	@ (800898c <PC_show_Keys+0x410>)
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	4b21      	ldr	r3, [pc, #132]	@ (8008994 <PC_show_Keys+0x418>)
 800890e:	0011      	movs	r1, r2
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff fe18 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008916:	4b54      	ldr	r3, [pc, #336]	@ (8008a68 <PC_show_Keys+0x4ec>)
 8008918:	4854      	ldr	r0, [pc, #336]	@ (8008a6c <PC_show_Keys+0x4f0>)
 800891a:	220c      	movs	r2, #12
 800891c:	0019      	movs	r1, r3
 800891e:	f002 ff09 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008922:	4a51      	ldr	r2, [pc, #324]	@ (8008a68 <PC_show_Keys+0x4ec>)
 8008924:	4b1e      	ldr	r3, [pc, #120]	@ (80089a0 <PC_show_Keys+0x424>)
 8008926:	0011      	movs	r1, r2
 8008928:	0018      	movs	r0, r3
 800892a:	f7fc fc6f 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 800892e:	4a1c      	ldr	r2, [pc, #112]	@ (80089a0 <PC_show_Keys+0x424>)
 8008930:	494f      	ldr	r1, [pc, #316]	@ (8008a70 <PC_show_Keys+0x4f4>)
 8008932:	4b18      	ldr	r3, [pc, #96]	@ (8008994 <PC_show_Keys+0x418>)
 8008934:	0018      	movs	r0, r3
 8008936:	f01c fdb7 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800893a:	4b14      	ldr	r3, [pc, #80]	@ (800898c <PC_show_Keys+0x410>)
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <PC_show_Keys+0x418>)
 8008940:	0011      	movs	r1, r2
 8008942:	0018      	movs	r0, r3
 8008944:	f7ff fdff 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008948:	4b4a      	ldr	r3, [pc, #296]	@ (8008a74 <PC_show_Keys+0x4f8>)
 800894a:	484b      	ldr	r0, [pc, #300]	@ (8008a78 <PC_show_Keys+0x4fc>)
 800894c:	220c      	movs	r2, #12
 800894e:	0019      	movs	r1, r3
 8008950:	f002 fef0 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008954:	4a47      	ldr	r2, [pc, #284]	@ (8008a74 <PC_show_Keys+0x4f8>)
 8008956:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <PC_show_Keys+0x424>)
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f7fc fc56 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008960:	4a0f      	ldr	r2, [pc, #60]	@ (80089a0 <PC_show_Keys+0x424>)
 8008962:	4946      	ldr	r1, [pc, #280]	@ (8008a7c <PC_show_Keys+0x500>)
 8008964:	4b0b      	ldr	r3, [pc, #44]	@ (8008994 <PC_show_Keys+0x418>)
 8008966:	0018      	movs	r0, r3
 8008968:	f01c fd9e 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <PC_show_Keys+0x410>)
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <PC_show_Keys+0x418>)
 8008972:	0011      	movs	r1, r2
 8008974:	0018      	movs	r0, r3
 8008976:	f7ff fde6 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 800897a:	4b41      	ldr	r3, [pc, #260]	@ (8008a80 <PC_show_Keys+0x504>)
 800897c:	4841      	ldr	r0, [pc, #260]	@ (8008a84 <PC_show_Keys+0x508>)
 800897e:	220c      	movs	r2, #12
 8008980:	0019      	movs	r1, r3
 8008982:	f002 fed7 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008986:	4a3e      	ldr	r2, [pc, #248]	@ (8008a80 <PC_show_Keys+0x504>)
 8008988:	e07e      	b.n	8008a88 <PC_show_Keys+0x50c>
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	200009a5 	.word	0x200009a5
 8008990:	0802ae2c 	.word	0x0802ae2c
 8008994:	200009a8 	.word	0x200009a8
 8008998:	200009f0 	.word	0x200009f0
 800899c:	08080000 	.word	0x08080000
 80089a0:	200009fc 	.word	0x200009fc
 80089a4:	0802ae48 	.word	0x0802ae48
 80089a8:	20000a18 	.word	0x20000a18
 80089ac:	0808000c 	.word	0x0808000c
 80089b0:	0802ae74 	.word	0x0802ae74
 80089b4:	20000a24 	.word	0x20000a24
 80089b8:	08080018 	.word	0x08080018
 80089bc:	0802aea0 	.word	0x0802aea0
 80089c0:	20000a30 	.word	0x20000a30
 80089c4:	08080024 	.word	0x08080024
 80089c8:	0802aecc 	.word	0x0802aecc
 80089cc:	20000a3c 	.word	0x20000a3c
 80089d0:	08080030 	.word	0x08080030
 80089d4:	0802aef8 	.word	0x0802aef8
 80089d8:	20000a48 	.word	0x20000a48
 80089dc:	0808003c 	.word	0x0808003c
 80089e0:	0802af24 	.word	0x0802af24
 80089e4:	0802af40 	.word	0x0802af40
 80089e8:	20000a54 	.word	0x20000a54
 80089ec:	08080048 	.word	0x08080048
 80089f0:	0802af6c 	.word	0x0802af6c
 80089f4:	0802af80 	.word	0x0802af80
 80089f8:	20000a60 	.word	0x20000a60
 80089fc:	08080054 	.word	0x08080054
 8008a00:	0802afac 	.word	0x0802afac
 8008a04:	20000a6c 	.word	0x20000a6c
 8008a08:	08080060 	.word	0x08080060
 8008a0c:	0802afd8 	.word	0x0802afd8
 8008a10:	20000a78 	.word	0x20000a78
 8008a14:	0808006c 	.word	0x0808006c
 8008a18:	0802b004 	.word	0x0802b004
 8008a1c:	20000a84 	.word	0x20000a84
 8008a20:	08080078 	.word	0x08080078
 8008a24:	0802b030 	.word	0x0802b030
 8008a28:	20000a90 	.word	0x20000a90
 8008a2c:	08080084 	.word	0x08080084
 8008a30:	0802b05c 	.word	0x0802b05c
 8008a34:	20000a9c 	.word	0x20000a9c
 8008a38:	08080090 	.word	0x08080090
 8008a3c:	0802b088 	.word	0x0802b088
 8008a40:	0802b0b0 	.word	0x0802b0b0
 8008a44:	20000abc 	.word	0x20000abc
 8008a48:	080800b0 	.word	0x080800b0
 8008a4c:	0802b0b8 	.word	0x0802b0b8
 8008a50:	20000ac8 	.word	0x20000ac8
 8008a54:	080800bc 	.word	0x080800bc
 8008a58:	0802b0e4 	.word	0x0802b0e4
 8008a5c:	20000ad4 	.word	0x20000ad4
 8008a60:	080800c8 	.word	0x080800c8
 8008a64:	0802b110 	.word	0x0802b110
 8008a68:	20000ae0 	.word	0x20000ae0
 8008a6c:	080800d4 	.word	0x080800d4
 8008a70:	0802b13c 	.word	0x0802b13c
 8008a74:	20000aec 	.word	0x20000aec
 8008a78:	080800e0 	.word	0x080800e0
 8008a7c:	0802b168 	.word	0x0802b168
 8008a80:	20000af8 	.word	0x20000af8
 8008a84:	080800ec 	.word	0x080800ec
 8008a88:	4b5d      	ldr	r3, [pc, #372]	@ (8008c00 <PC_show_Keys+0x684>)
 8008a8a:	0011      	movs	r1, r2
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7fc fbbd 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008a92:	4a5b      	ldr	r2, [pc, #364]	@ (8008c00 <PC_show_Keys+0x684>)
 8008a94:	495b      	ldr	r1, [pc, #364]	@ (8008c04 <PC_show_Keys+0x688>)
 8008a96:	4b5c      	ldr	r3, [pc, #368]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f01c fd05 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8008c0c <PC_show_Keys+0x690>)
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	4b59      	ldr	r3, [pc, #356]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008aa4:	0011      	movs	r1, r2
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	f7ff fd4d 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008aac:	4b58      	ldr	r3, [pc, #352]	@ (8008c10 <PC_show_Keys+0x694>)
 8008aae:	4859      	ldr	r0, [pc, #356]	@ (8008c14 <PC_show_Keys+0x698>)
 8008ab0:	220c      	movs	r2, #12
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	f002 fe3e 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008ab8:	4a55      	ldr	r2, [pc, #340]	@ (8008c10 <PC_show_Keys+0x694>)
 8008aba:	4b51      	ldr	r3, [pc, #324]	@ (8008c00 <PC_show_Keys+0x684>)
 8008abc:	0011      	movs	r1, r2
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fc fba4 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8008c00 <PC_show_Keys+0x684>)
 8008ac6:	4954      	ldr	r1, [pc, #336]	@ (8008c18 <PC_show_Keys+0x69c>)
 8008ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008aca:	0018      	movs	r0, r3
 8008acc:	f01c fcec 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8008c0c <PC_show_Keys+0x690>)
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fd34 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008ade:	4b4f      	ldr	r3, [pc, #316]	@ (8008c1c <PC_show_Keys+0x6a0>)
 8008ae0:	484f      	ldr	r0, [pc, #316]	@ (8008c20 <PC_show_Keys+0x6a4>)
 8008ae2:	220c      	movs	r2, #12
 8008ae4:	0019      	movs	r1, r3
 8008ae6:	f002 fe25 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008aea:	4a4c      	ldr	r2, [pc, #304]	@ (8008c1c <PC_show_Keys+0x6a0>)
 8008aec:	4b44      	ldr	r3, [pc, #272]	@ (8008c00 <PC_show_Keys+0x684>)
 8008aee:	0011      	movs	r1, r2
 8008af0:	0018      	movs	r0, r3
 8008af2:	f7fc fb8b 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008af6:	4a42      	ldr	r2, [pc, #264]	@ (8008c00 <PC_show_Keys+0x684>)
 8008af8:	494a      	ldr	r1, [pc, #296]	@ (8008c24 <PC_show_Keys+0x6a8>)
 8008afa:	4b43      	ldr	r3, [pc, #268]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f01c fcd3 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b02:	4b42      	ldr	r3, [pc, #264]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	4b40      	ldr	r3, [pc, #256]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b08:	0011      	movs	r1, r2
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7ff fd1b 	bl	8008546 <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008b10:	4a45      	ldr	r2, [pc, #276]	@ (8008c28 <PC_show_Keys+0x6ac>)
 8008b12:	4b3d      	ldr	r3, [pc, #244]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f01c fcc6 	bl	80254a8 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008b1c:	4b43      	ldr	r3, [pc, #268]	@ (8008c2c <PC_show_Keys+0x6b0>)
 8008b1e:	4844      	ldr	r0, [pc, #272]	@ (8008c30 <PC_show_Keys+0x6b4>)
 8008b20:	220c      	movs	r2, #12
 8008b22:	0019      	movs	r1, r3
 8008b24:	f002 fe06 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008b28:	4a40      	ldr	r2, [pc, #256]	@ (8008c2c <PC_show_Keys+0x6b0>)
 8008b2a:	4b35      	ldr	r3, [pc, #212]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7fc fb6c 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008b34:	4a32      	ldr	r2, [pc, #200]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b36:	493f      	ldr	r1, [pc, #252]	@ (8008c34 <PC_show_Keys+0x6b8>)
 8008b38:	4b33      	ldr	r3, [pc, #204]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f01c fcb4 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b40:	4b32      	ldr	r3, [pc, #200]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	4b30      	ldr	r3, [pc, #192]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7ff fcfc 	bl	8008546 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c38 <PC_show_Keys+0x6bc>)
 8008b50:	483a      	ldr	r0, [pc, #232]	@ (8008c3c <PC_show_Keys+0x6c0>)
 8008b52:	220c      	movs	r2, #12
 8008b54:	0019      	movs	r1, r3
 8008b56:	f002 fded 	bl	800b734 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008b5a:	4a37      	ldr	r2, [pc, #220]	@ (8008c38 <PC_show_Keys+0x6bc>)
 8008b5c:	4b28      	ldr	r3, [pc, #160]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b5e:	0011      	movs	r1, r2
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7fc fb53 	bl	800520c <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008b66:	4a26      	ldr	r2, [pc, #152]	@ (8008c00 <PC_show_Keys+0x684>)
 8008b68:	4935      	ldr	r1, [pc, #212]	@ (8008c40 <PC_show_Keys+0x6c4>)
 8008b6a:	4b27      	ldr	r3, [pc, #156]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f01c fc9b 	bl	80254a8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b72:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <PC_show_Keys+0x690>)
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	4b24      	ldr	r3, [pc, #144]	@ (8008c08 <PC_show_Keys+0x68c>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7ff fce3 	bl	8008546 <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "25 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008b80:	4b30      	ldr	r3, [pc, #192]	@ (8008c44 <PC_show_Keys+0x6c8>)
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7ff fcba 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008b88:	200a      	movs	r0, #10
 8008b8a:	f00b f84d 	bl	8013c28 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008c48 <PC_show_Keys+0x6cc>)
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7ff fcb3 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008b96:	200a      	movs	r0, #10
 8008b98:	f00b f846 	bl	8013c28 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c4c <PC_show_Keys+0x6d0>)
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f7ff fcac 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008ba4:	200a      	movs	r0, #10
 8008ba6:	f00b f83f 	bl	8013c28 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008baa:	4b29      	ldr	r3, [pc, #164]	@ (8008c50 <PC_show_Keys+0x6d4>)
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7ff fca5 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bb2:	200a      	movs	r0, #10
 8008bb4:	f00b f838 	bl	8013c28 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008bb8:	4b26      	ldr	r3, [pc, #152]	@ (8008c54 <PC_show_Keys+0x6d8>)
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f7ff fc9e 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bc0:	200a      	movs	r0, #10
 8008bc2:	f00b f831 	bl	8013c28 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008bc6:	4b24      	ldr	r3, [pc, #144]	@ (8008c58 <PC_show_Keys+0x6dc>)
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f7ff fc97 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bce:	200a      	movs	r0, #10
 8008bd0:	f00b f82a 	bl	8013c28 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008bd4:	4b21      	ldr	r3, [pc, #132]	@ (8008c5c <PC_show_Keys+0x6e0>)
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7ff fc90 	bl	80084fc <printf_USB>
  HAL_Delay(10);
 8008bdc:	200a      	movs	r0, #10
 8008bde:	f00b f823 	bl	8013c28 <HAL_Delay>
  if (!usb_out) {
 8008be2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <PC_show_Keys+0x690>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2201      	movs	r2, #1
 8008be8:	4053      	eors	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <PC_show_Keys+0x6e4>)
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f01c fc4e 	bl	8025494 <puts>
  }
}
 8008bf8:	46c0      	nop			@ (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	46c0      	nop			@ (mov r8, r8)
 8008c00:	200009fc 	.word	0x200009fc
 8008c04:	0802b194 	.word	0x0802b194
 8008c08:	200009a8 	.word	0x200009a8
 8008c0c:	200009a5 	.word	0x200009a5
 8008c10:	20000b04 	.word	0x20000b04
 8008c14:	080800f8 	.word	0x080800f8
 8008c18:	0802b1c0 	.word	0x0802b1c0
 8008c1c:	20000b10 	.word	0x20000b10
 8008c20:	08080104 	.word	0x08080104
 8008c24:	0802b1ec 	.word	0x0802b1ec
 8008c28:	0802b218 	.word	0x0802b218
 8008c2c:	20000b1c 	.word	0x20000b1c
 8008c30:	08080170 	.word	0x08080170
 8008c34:	0802b244 	.word	0x0802b244
 8008c38:	20000b28 	.word	0x20000b28
 8008c3c:	0808017c 	.word	0x0808017c
 8008c40:	0802b270 	.word	0x0802b270
 8008c44:	0802b29c 	.word	0x0802b29c
 8008c48:	0802b2b4 	.word	0x0802b2b4
 8008c4c:	0802b2e0 	.word	0x0802b2e0
 8008c50:	0802b310 	.word	0x0802b310
 8008c54:	0802b34c 	.word	0x0802b34c
 8008c58:	0802b384 	.word	0x0802b384
 8008c5c:	0802b3b8 	.word	0x0802b3b8
 8008c60:	0802b3d8 	.word	0x0802b3d8

08008c64 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	4b20      	ldr	r3, [pc, #128]	@ (8008cf4 <ascii_to_uint8+0x90>)
 8008c74:	18d3      	adds	r3, r2, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	001a      	movs	r2, r3
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d00a      	beq.n	8008c96 <ascii_to_uint8+0x32>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3301      	adds	r3, #1
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf4 <ascii_to_uint8+0x90>)
 8008c8a:	18d3      	adds	r3, r2, r3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	001a      	movs	r2, r3
 8008c90:	2304      	movs	r3, #4
 8008c92:	4013      	ands	r3, r2
 8008c94:	d105      	bne.n	8008ca2 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8008c96:	4b18      	ldr	r3, [pc, #96]	@ (8008cf8 <ascii_to_uint8+0x94>)
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f7ff fc2f 	bl	80084fc <printf_USB>
    return 100;
 8008c9e:	2364      	movs	r3, #100	@ 0x64
 8008ca0:	e024      	b.n	8008cec <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	1c1a      	adds	r2, r3, #0
 8008ca8:	0092      	lsls	r2, r2, #2
 8008caa:	18d3      	adds	r3, r2, r3
 8008cac:	18db      	adds	r3, r3, r3
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	210f      	movs	r1, #15
 8008cbc:	187b      	adds	r3, r7, r1
 8008cbe:	3a10      	subs	r2, #16
 8008cc0:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 25 || value == 21 || value == 22) {
#else
  if (value > 24 || value == 21 || value == 22) {
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b18      	cmp	r3, #24
 8008cc8:	d807      	bhi.n	8008cda <ascii_to_uint8+0x76>
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d003      	beq.n	8008cda <ascii_to_uint8+0x76>
 8008cd2:	187b      	adds	r3, r7, r1
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b16      	cmp	r3, #22
 8008cd8:	d105      	bne.n	8008ce6 <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8008cda:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <ascii_to_uint8+0x98>)
 8008cdc:	0018      	movs	r0, r3
 8008cde:	f7ff fc0d 	bl	80084fc <printf_USB>
    return 100;
 8008ce2:	2364      	movs	r3, #100	@ 0x64
 8008ce4:	e002      	b.n	8008cec <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008ce6:	230f      	movs	r3, #15
 8008ce8:	18fb      	adds	r3, r7, r3
 8008cea:	781b      	ldrb	r3, [r3, #0]
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	0802e3b8 	.word	0x0802e3b8
 8008cf8:	0802b424 	.word	0x0802b424
 8008cfc:	0802b44c 	.word	0x0802b44c

08008d00 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b0d1      	sub	sp, #324	@ 0x144
 8008d04:	af3e      	add	r7, sp, #248	@ 0xf8
 8008d06:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008d08:	f019 fb10 	bl	802232c <GetUsbRxDataSize>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008d10:	2347      	movs	r3, #71	@ 0x47
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2124      	movs	r1, #36	@ 0x24
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f01c fd35 	bl	802578c <strchr>
 8008d22:	0003      	movs	r3, r0
 8008d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d10f      	bne.n	8008d4c <Process_USB_input+0x4c>
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00c      	beq.n	8008d4c <Process_USB_input+0x4c>
 8008d32:	4bdb      	ldr	r3, [pc, #876]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b1c      	cmp	r3, #28
 8008d38:	d008      	beq.n	8008d4c <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008d3a:	4ada      	ldr	r2, [pc, #872]	@ (80090a4 <Process_USB_input+0x3a4>)
 8008d3c:	4bda      	ldr	r3, [pc, #872]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008d3e:	0019      	movs	r1, r3
 8008d40:	2003      	movs	r0, #3
 8008d42:	f00a fa27 	bl	8013194 <CreateLine>
      len = 28;
 8008d46:	4bd6      	ldr	r3, [pc, #856]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d48:	221c      	movs	r2, #28
 8008d4a:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 8008d4c:	4bd4      	ldr	r3, [pc, #848]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d200      	bcs.n	8008d58 <Process_USB_input+0x58>
 8008d56:	e18c      	b.n	8009072 <Process_USB_input+0x372>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4bd4      	ldr	r3, [pc, #848]	@ (80090ac <Process_USB_input+0x3ac>)
 8008d5c:	0011      	movs	r1, r2
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7ff fbcc 	bl	80084fc <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4bd2      	ldr	r3, [pc, #840]	@ (80090b0 <Process_USB_input+0x3b0>)
 8008d68:	0011      	movs	r1, r2
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff fbc6 	bl	80084fc <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b24      	cmp	r3, #36	@ 0x24
 8008d76:	d102      	bne.n	8008d7e <Process_USB_input+0x7e>
      len = 28;
 8008d78:	4bc9      	ldr	r3, [pc, #804]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008d7a:	221c      	movs	r2, #28
 8008d7c:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b23      	cmp	r3, #35	@ 0x23
 8008d84:	d004      	beq.n	8008d90 <Process_USB_input+0x90>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b24      	cmp	r3, #36	@ 0x24
 8008d8c:	d000      	beq.n	8008d90 <Process_USB_input+0x90>
 8008d8e:	e153      	b.n	8009038 <Process_USB_input+0x338>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3301      	adds	r3, #1
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7ff ff65 	bl	8008c64 <ascii_to_uint8>
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	001a      	movs	r2, r3
 8008d9e:	4bc5      	ldr	r3, [pc, #788]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008da0:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008da2:	4bc4      	ldr	r3, [pc, #784]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b64      	cmp	r3, #100	@ 0x64
 8008da8:	d101      	bne.n	8008dae <Process_USB_input+0xae>
        return false; // value out of range
 8008daa:	2300      	movs	r3, #0
 8008dac:	e174      	b.n	8009098 <Process_USB_input+0x398>
      }
      if (data[3] == ',') {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3303      	adds	r3, #3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b2c      	cmp	r3, #44	@ 0x2c
 8008db6:	d000      	beq.n	8008dba <Process_USB_input+0xba>
 8008db8:	e122      	b.n	8009000 <Process_USB_input+0x300>
        for (uint8_t i=4; i < len; i++) {
 8008dba:	2346      	movs	r3, #70	@ 0x46
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	e0aa      	b.n	8008f1a <Process_USB_input+0x21a>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f00a ff2f 	bl	8013c28 <HAL_Delay>
          if (isxdigit(data[i])) {
 8008dca:	2146      	movs	r1, #70	@ 0x46
 8008dcc:	187b      	adds	r3, r7, r1
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	18d3      	adds	r3, r2, r3
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	4bb7      	ldr	r3, [pc, #732]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008dda:	18d3      	adds	r3, r2, r3
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	001a      	movs	r2, r3
 8008de0:	2344      	movs	r3, #68	@ 0x44
 8008de2:	4013      	ands	r3, r2
 8008de4:	d06a      	beq.n	8008ebc <Process_USB_input+0x1bc>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008de6:	4bb5      	ldr	r3, [pc, #724]	@ (80090bc <Process_USB_input+0x3bc>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	b25a      	sxtb	r2, r3
 8008df0:	0008      	movs	r0, r1
 8008df2:	187b      	adds	r3, r7, r1
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	18cb      	adds	r3, r1, r3
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	1c59      	adds	r1, r3, #1
 8008dfe:	4bae      	ldr	r3, [pc, #696]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008e00:	18cb      	adds	r3, r1, r3
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	0019      	movs	r1, r3
 8008e06:	2304      	movs	r3, #4
 8008e08:	400b      	ands	r3, r1
 8008e0a:	d008      	beq.n	8008e1e <Process_USB_input+0x11e>
 8008e0c:	183b      	adds	r3, r7, r0
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	18cb      	adds	r3, r1, r3
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	3b30      	subs	r3, #48	@ 0x30
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	e01e      	b.n	8008e5c <Process_USB_input+0x15c>
 8008e1e:	2346      	movs	r3, #70	@ 0x46
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	18c9      	adds	r1, r1, r3
 8008e28:	2037      	movs	r0, #55	@ 0x37
 8008e2a:	183b      	adds	r3, r7, r0
 8008e2c:	7809      	ldrb	r1, [r1, #0]
 8008e2e:	7019      	strb	r1, [r3, #0]
 8008e30:	183b      	adds	r3, r7, r0
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	1c59      	adds	r1, r3, #1
 8008e36:	4ba0      	ldr	r3, [pc, #640]	@ (80090b8 <Process_USB_input+0x3b8>)
 8008e38:	18cb      	adds	r3, r1, r3
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	0019      	movs	r1, r3
 8008e3e:	2303      	movs	r3, #3
 8008e40:	400b      	ands	r3, r1
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d103      	bne.n	8008e4e <Process_USB_input+0x14e>
 8008e46:	183b      	adds	r3, r7, r0
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	3b20      	subs	r3, #32
 8008e4c:	e002      	b.n	8008e54 <Process_USB_input+0x154>
 8008e4e:	2337      	movs	r3, #55	@ 0x37
 8008e50:	18fb      	adds	r3, r7, r3
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b37      	subs	r3, #55	@ 0x37
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	4b96      	ldr	r3, [pc, #600]	@ (80090bc <Process_USB_input+0x3bc>)
 8008e64:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008e66:	200a      	movs	r0, #10
 8008e68:	f00a fede 	bl	8013c28 <HAL_Delay>
            if (len == 28) {
 8008e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b1c      	cmp	r3, #28
 8008e72:	d14c      	bne.n	8008f0e <Process_USB_input+0x20e>
              if ((i % 2) == 1) {
 8008e74:	2346      	movs	r3, #70	@ 0x46
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d044      	beq.n	8008f0e <Process_USB_input+0x20e>
                data[r] = result;
 8008e84:	2447      	movs	r4, #71	@ 0x47
 8008e86:	193b      	adds	r3, r7, r4
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	18d3      	adds	r3, r2, r3
 8008e8e:	4a8b      	ldr	r2, [pc, #556]	@ (80090bc <Process_USB_input+0x3bc>)
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008e94:	193b      	adds	r3, r7, r4
 8008e96:	7818      	ldrb	r0, [r3, #0]
 8008e98:	193b      	adds	r3, r7, r4
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	4a87      	ldr	r2, [pc, #540]	@ (80090c0 <Process_USB_input+0x3c0>)
 8008ea4:	4980      	ldr	r1, [pc, #512]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	2003      	movs	r0, #3
 8008eac:	f00a f972 	bl	8013194 <CreateLine>
                r++;
 8008eb0:	193b      	adds	r3, r7, r4
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e028      	b.n	8008f0e <Process_USB_input+0x20e>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008ebc:	2046      	movs	r0, #70	@ 0x46
 8008ebe:	183b      	adds	r3, r7, r0
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	18d3      	adds	r3, r2, r3
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	0019      	movs	r1, r3
 8008eca:	183b      	adds	r3, r7, r0
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	4b7d      	ldr	r3, [pc, #500]	@ (80090c4 <Process_USB_input+0x3c4>)
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f7ff fb13 	bl	80084fc <printf_USB>
            ResetUsbRxDataSize();
 8008ed6:	f019 fa11 	bl	80222fc <ResetUsbRxDataSize>
            PC_show_Keys();
 8008eda:	f7ff fb4f 	bl	800857c <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008ede:	2345      	movs	r3, #69	@ 0x45
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	e00b      	b.n	8008f00 <Process_USB_input+0x200>
              data[i] = '\0';
 8008ee8:	2145      	movs	r1, #69	@ 0x45
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	18d3      	adds	r3, r2, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	187b      	adds	r3, r7, r1
 8008efc:	3201      	adds	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	2345      	movs	r3, #69	@ 0x45
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b1f      	cmp	r3, #31
 8008f08:	d9ee      	bls.n	8008ee8 <Process_USB_input+0x1e8>
            }
            return false; // Of een andere foutwaarde
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e0c4      	b.n	8009098 <Process_USB_input+0x398>
        for (uint8_t i=4; i < len; i++) {
 8008f0e:	2146      	movs	r1, #70	@ 0x46
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	187b      	adds	r3, r7, r1
 8008f16:	3201      	adds	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	2346      	movs	r3, #70	@ 0x46
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	4b5f      	ldr	r3, [pc, #380]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d200      	bcs.n	8008f2a <Process_USB_input+0x22a>
 8008f28:	e74c      	b.n	8008dc4 <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80090a0 <Process_USB_input+0x3a0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b06      	cmp	r3, #6
 8008f30:	d114      	bne.n	8008f5c <Process_USB_input+0x25c>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008f32:	2428      	movs	r4, #40	@ 0x28
 8008f34:	193b      	adds	r3, r7, r4
 8008f36:	4864      	ldr	r0, [pc, #400]	@ (80090c8 <Process_USB_input+0x3c8>)
 8008f38:	220c      	movs	r2, #12
 8008f3a:	0019      	movs	r1, r3
 8008f3c:	f002 fbfa 	bl	800b734 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008f40:	4b5e      	ldr	r3, [pc, #376]	@ (80090bc <Process_USB_input+0x3bc>)
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	0021      	movs	r1, r4
 8008f46:	187b      	adds	r3, r7, r1
 8008f48:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	189b      	adds	r3, r3, r2
 8008f52:	220c      	movs	r2, #12
 8008f54:	0018      	movs	r0, r3
 8008f56:	f01c fced 	bl	8025934 <memcpy>
 8008f5a:	e005      	b.n	8008f68 <Process_USB_input+0x268>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80090cc <Process_USB_input+0x3cc>)
 8008f60:	220c      	movs	r2, #12
 8008f62:	0018      	movs	r0, r3
 8008f64:	f01c fce6 	bl	8025934 <memcpy>
        }
        received.Payload[12] = '\0';
 8008f68:	4b52      	ldr	r3, [pc, #328]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8008f6e:	4b51      	ldr	r3, [pc, #324]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f70:	220c      	movs	r2, #12
 8008f72:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 8008f74:	4b4f      	ldr	r3, [pc, #316]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f76:	789b      	ldrb	r3, [r3, #2]
 8008f78:	4a55      	ldr	r2, [pc, #340]	@ (80090d0 <Process_USB_input+0x3d0>)
 8008f7a:	494b      	ldr	r1, [pc, #300]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008f7c:	2003      	movs	r0, #3
 8008f7e:	f00a f909 	bl	8013194 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 8008f82:	4a52      	ldr	r2, [pc, #328]	@ (80090cc <Process_USB_input+0x3cc>)
 8008f84:	240c      	movs	r4, #12
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7fc f93e 	bl	800520c <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8008f90:	193b      	adds	r3, r7, r4
 8008f92:	4a50      	ldr	r2, [pc, #320]	@ (80090d4 <Process_USB_input+0x3d4>)
 8008f94:	4944      	ldr	r1, [pc, #272]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008f96:	2003      	movs	r0, #3
 8008f98:	f00a f8fc 	bl	8013194 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8008f9c:	4b45      	ldr	r3, [pc, #276]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008f9e:	789b      	ldrb	r3, [r3, #2]
 8008fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80090d8 <Process_USB_input+0x3d8>)
 8008fa2:	4941      	ldr	r1, [pc, #260]	@ (80090a8 <Process_USB_input+0x3a8>)
 8008fa4:	2003      	movs	r0, #3
 8008fa6:	f00a f8f5 	bl	8013194 <CreateLine>
        ProcessCmd(received);
 8008faa:	4c42      	ldr	r4, [pc, #264]	@ (80090b4 <Process_USB_input+0x3b4>)
 8008fac:	466b      	mov	r3, sp
 8008fae:	0018      	movs	r0, r3
 8008fb0:	0023      	movs	r3, r4
 8008fb2:	3310      	adds	r3, #16
 8008fb4:	22f4      	movs	r2, #244	@ 0xf4
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	f01c fcbc 	bl	8025934 <memcpy>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	68a2      	ldr	r2, [r4, #8]
 8008fc2:	68e3      	ldr	r3, [r4, #12]
 8008fc4:	f7ff f86e 	bl	80080a4 <ProcessCmd>
        ResetUsbRxDataSize();
 8008fc8:	f019 f998 	bl	80222fc <ResetUsbRxDataSize>
        PC_show_Keys();
 8008fcc:	f7ff fad6 	bl	800857c <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008fd0:	2344      	movs	r3, #68	@ 0x44
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e00b      	b.n	8008ff2 <Process_USB_input+0x2f2>
          data[i] = '\0';
 8008fda:	2144      	movs	r1, #68	@ 0x44
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	18d3      	adds	r3, r2, r3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008fe8:	187b      	adds	r3, r7, r1
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	3201      	adds	r2, #1
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	2344      	movs	r3, #68	@ 0x44
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b1f      	cmp	r3, #31
 8008ffa:	d9ee      	bls.n	8008fda <Process_USB_input+0x2da>
        }
        return true;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e04b      	b.n	8009098 <Process_USB_input+0x398>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8009000:	4b36      	ldr	r3, [pc, #216]	@ (80090dc <Process_USB_input+0x3dc>)
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff fa7a 	bl	80084fc <printf_USB>
        ResetUsbRxDataSize();
 8009008:	f019 f978 	bl	80222fc <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 800900c:	2343      	movs	r3, #67	@ 0x43
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e00b      	b.n	800902e <Process_USB_input+0x32e>
          data[i] = '\0';
 8009016:	2143      	movs	r1, #67	@ 0x43
 8009018:	187b      	adds	r3, r7, r1
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	18d3      	adds	r3, r2, r3
 8009020:	2200      	movs	r2, #0
 8009022:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009024:	187b      	adds	r3, r7, r1
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	187b      	adds	r3, r7, r1
 800902a:	3201      	adds	r2, #1
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	2343      	movs	r3, #67	@ 0x43
 8009030:	18fb      	adds	r3, r7, r3
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b1f      	cmp	r3, #31
 8009036:	d9ee      	bls.n	8009016 <Process_USB_input+0x316>
        }
      }
    }
//    else {
    len = 6;
 8009038:	4b19      	ldr	r3, [pc, #100]	@ (80090a0 <Process_USB_input+0x3a0>)
 800903a:	2206      	movs	r2, #6
 800903c:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 800903e:	f7ff fa9d 	bl	800857c <PC_show_Keys>
    ResetUsbRxDataSize();
 8009042:	f019 f95b 	bl	80222fc <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 8009046:	2342      	movs	r3, #66	@ 0x42
 8009048:	18fb      	adds	r3, r7, r3
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e00b      	b.n	8009068 <Process_USB_input+0x368>
      data[i] = '\0';
 8009050:	2142      	movs	r1, #66	@ 0x42
 8009052:	187b      	adds	r3, r7, r1
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	18d3      	adds	r3, r2, r3
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 800905e:	187b      	adds	r3, r7, r1
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	187b      	adds	r3, r7, r1
 8009064:	3201      	adds	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	2342      	movs	r3, #66	@ 0x42
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b1f      	cmp	r3, #31
 8009070:	d9ee      	bls.n	8009050 <Process_USB_input+0x350>
    }
  }
  if (formerlength != length) {
 8009072:	4b1b      	ldr	r3, [pc, #108]	@ (80090e0 <Process_USB_input+0x3e0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009078:	429a      	cmp	r2, r3
 800907a:	d008      	beq.n	800908e <Process_USB_input+0x38e>
    printf_USB("USB input: %s\r", (const char*)data);
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4b19      	ldr	r3, [pc, #100]	@ (80090e4 <Process_USB_input+0x3e4>)
 8009080:	0011      	movs	r1, r2
 8009082:	0018      	movs	r0, r3
 8009084:	f7ff fa3a 	bl	80084fc <printf_USB>
    formerlength = length;
 8009088:	4b15      	ldr	r3, [pc, #84]	@ (80090e0 <Process_USB_input+0x3e0>)
 800908a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800908c:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 800908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009090:	0018      	movs	r0, r3
 8009092:	f019 f955 	bl	8022340 <GetUsbRxNextChunk>

  return false;
 8009096:	2300      	movs	r3, #0
}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	b013      	add	sp, #76	@ 0x4c
 800909e:	bd90      	pop	{r4, r7, pc}
 80090a0:	20000030 	.word	0x20000030
 80090a4:	0802b468 	.word	0x0802b468
 80090a8:	0802b4a8 	.word	0x0802b4a8
 80090ac:	0802b4ac 	.word	0x0802b4ac
 80090b0:	0802b4d8 	.word	0x0802b4d8
 80090b4:	20000794 	.word	0x20000794
 80090b8:	0802e3b8 	.word	0x0802e3b8
 80090bc:	20000898 	.word	0x20000898
 80090c0:	0802b4e8 	.word	0x0802b4e8
 80090c4:	0802b4fc 	.word	0x0802b4fc
 80090c8:	08080000 	.word	0x08080000
 80090cc:	20000796 	.word	0x20000796
 80090d0:	0802b534 	.word	0x0802b534
 80090d4:	0802b560 	.word	0x0802b560
 80090d8:	0802b584 	.word	0x0802b584
 80090dc:	0802b5b0 	.word	0x0802b5b0
 80090e0:	2000089c 	.word	0x2000089c
 80090e4:	0802b5dc 	.word	0x0802b5dc

080090e8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80090ec:	4b26      	ldr	r3, [pc, #152]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090ee:	4a27      	ldr	r2, [pc, #156]	@ (800918c <ReadBatteryVoltage+0xa4>)
 80090f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80090f2:	4b25      	ldr	r3, [pc, #148]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090f4:	2280      	movs	r2, #128	@ 0x80
 80090f6:	0152      	lsls	r2, r2, #5
 80090f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80090fa:	4a23      	ldr	r2, [pc, #140]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 80090fc:	4b24      	ldr	r3, [pc, #144]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 80090fe:	0011      	movs	r1, r2
 8009100:	0018      	movs	r0, r3
 8009102:	f00b f85f 	bl	80141c4 <HAL_ADC_ConfigChannel>
 8009106:	1e03      	subs	r3, r0, #0
 8009108:	d001      	beq.n	800910e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800910a:	f003 fbe1 	bl	800c8d0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800910e:	4b20      	ldr	r3, [pc, #128]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009110:	0018      	movs	r0, r3
 8009112:	f00a ff5b 	bl	8013fcc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009116:	4b1e      	ldr	r3, [pc, #120]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009118:	2101      	movs	r1, #1
 800911a:	0018      	movs	r0, r3
 800911c:	f00a ffaa 	bl	8014074 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009120:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 8009122:	0018      	movs	r0, r3
 8009124:	f00b f842 	bl	80141ac <HAL_ADC_GetValue>
 8009128:	0002      	movs	r2, r0
 800912a:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <ReadBatteryVoltage+0xac>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4353      	muls	r3, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	4919      	ldr	r1, [pc, #100]	@ (8009198 <ReadBatteryVoltage+0xb0>)
 8009134:	0018      	movs	r0, r3
 8009136:	f7f7 f835 	bl	80001a4 <__udivsi3>
 800913a:	0003      	movs	r3, r0
 800913c:	001a      	movs	r2, r3
 800913e:	4b17      	ldr	r3, [pc, #92]	@ (800919c <ReadBatteryVoltage+0xb4>)
 8009140:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <ReadBatteryVoltage+0xb4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	0018      	movs	r0, r3
 8009148:	f7f8 fbbe 	bl	80018c8 <__aeabi_ui2f>
 800914c:	1c03      	adds	r3, r0, #0
 800914e:	4914      	ldr	r1, [pc, #80]	@ (80091a0 <ReadBatteryVoltage+0xb8>)
 8009150:	1c18      	adds	r0, r3, #0
 8009152:	f7f7 fda7 	bl	8000ca4 <__aeabi_fdiv>
 8009156:	1c03      	adds	r3, r0, #0
 8009158:	1c1a      	adds	r2, r3, #0
 800915a:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <ReadBatteryVoltage+0xbc>)
 800915c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800915e:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 8009160:	4a0a      	ldr	r2, [pc, #40]	@ (800918c <ReadBatteryVoltage+0xa4>)
 8009162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009164:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 8009166:	4a10      	ldr	r2, [pc, #64]	@ (80091a8 <ReadBatteryVoltage+0xc0>)
 8009168:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800916a:	4a07      	ldr	r2, [pc, #28]	@ (8009188 <ReadBatteryVoltage+0xa0>)
 800916c:	4b08      	ldr	r3, [pc, #32]	@ (8009190 <ReadBatteryVoltage+0xa8>)
 800916e:	0011      	movs	r1, r2
 8009170:	0018      	movs	r0, r3
 8009172:	f00b f827 	bl	80141c4 <HAL_ADC_ConfigChannel>
 8009176:	1e03      	subs	r3, r0, #0
 8009178:	d001      	beq.n	800917e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800917a:	f003 fba9 	bl	800c8d0 <Error_Handler>
  }
  return trueValue;
 800917e:	4b09      	ldr	r3, [pc, #36]	@ (80091a4 <ReadBatteryVoltage+0xbc>)
 8009180:	681b      	ldr	r3, [r3, #0]
 }
 8009182:	1c18      	adds	r0, r3, #0
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20000b34 	.word	0x20000b34
 800918c:	38004000 	.word	0x38004000
 8009190:	20000b74 	.word	0x20000b74
 8009194:	20000034 	.word	0x20000034
 8009198:	00000fff 	.word	0x00000fff
 800919c:	20000b3c 	.word	0x20000b3c
 80091a0:	447a0000 	.word	0x447a0000
 80091a4:	20000b40 	.word	0x20000b40
 80091a8:	00001001 	.word	0x00001001

080091ac <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80091ac:	b580      	push	{r7, lr}
 80091ae:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80091b0:	4b21      	ldr	r3, [pc, #132]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091b2:	4a22      	ldr	r2, [pc, #136]	@ (800923c <ReadSolarVoltage+0x90>)
 80091b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80091b6:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091b8:	2280      	movs	r2, #128	@ 0x80
 80091ba:	0152      	lsls	r2, r2, #5
 80091bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80091be:	4a1e      	ldr	r2, [pc, #120]	@ (8009238 <ReadSolarVoltage+0x8c>)
 80091c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091c2:	0011      	movs	r1, r2
 80091c4:	0018      	movs	r0, r3
 80091c6:	f00a fffd 	bl	80141c4 <HAL_ADC_ConfigChannel>
 80091ca:	1e03      	subs	r3, r0, #0
 80091cc:	d001      	beq.n	80091d2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80091ce:	f003 fb7f 	bl	800c8d0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80091d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091d4:	0018      	movs	r0, r3
 80091d6:	f00a fef9 	bl	8013fcc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80091da:	4b19      	ldr	r3, [pc, #100]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091dc:	2101      	movs	r1, #1
 80091de:	0018      	movs	r0, r3
 80091e0:	f00a ff48 	bl	8014074 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80091e4:	4b16      	ldr	r3, [pc, #88]	@ (8009240 <ReadSolarVoltage+0x94>)
 80091e6:	0018      	movs	r0, r3
 80091e8:	f00a ffe0 	bl	80141ac <HAL_ADC_GetValue>
 80091ec:	0002      	movs	r2, r0
 80091ee:	4b15      	ldr	r3, [pc, #84]	@ (8009244 <ReadSolarVoltage+0x98>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	435a      	muls	r2, r3
 80091f4:	0013      	movs	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	4913      	ldr	r1, [pc, #76]	@ (8009248 <ReadSolarVoltage+0x9c>)
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f6 ffd1 	bl	80001a4 <__udivsi3>
 8009202:	0003      	movs	r3, r0
 8009204:	001a      	movs	r2, r3
 8009206:	4b11      	ldr	r3, [pc, #68]	@ (800924c <ReadSolarVoltage+0xa0>)
 8009208:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <ReadSolarVoltage+0x8c>)
 800920c:	4a0b      	ldr	r2, [pc, #44]	@ (800923c <ReadSolarVoltage+0x90>)
 800920e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009210:	4b09      	ldr	r3, [pc, #36]	@ (8009238 <ReadSolarVoltage+0x8c>)
 8009212:	4a0f      	ldr	r2, [pc, #60]	@ (8009250 <ReadSolarVoltage+0xa4>)
 8009214:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009216:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <ReadSolarVoltage+0x8c>)
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <ReadSolarVoltage+0x94>)
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f00a ffd1 	bl	80141c4 <HAL_ADC_ConfigChannel>
 8009222:	1e03      	subs	r3, r0, #0
 8009224:	d001      	beq.n	800922a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009226:	f003 fb53 	bl	800c8d0 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800922a:	4b08      	ldr	r3, [pc, #32]	@ (800924c <ReadSolarVoltage+0xa0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 }
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	20000b34 	.word	0x20000b34
 800923c:	3c008000 	.word	0x3c008000
 8009240:	20000b74 	.word	0x20000b74
 8009244:	20000034 	.word	0x20000034
 8009248:	00000fff 	.word	0x00000fff
 800924c:	20000b44 	.word	0x20000b44
 8009250:	00001001 	.word	0x00001001

08009254 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8009258:	23a0      	movs	r3, #160	@ 0xa0
 800925a:	05db      	lsls	r3, r3, #23
 800925c:	2180      	movs	r1, #128	@ 0x80
 800925e:	0018      	movs	r0, r3
 8009260:	f00b ff4c 	bl	80150fc <HAL_GPIO_ReadPin>
 8009264:	0003      	movs	r3, r0
 8009266:	1e5a      	subs	r2, r3, #1
 8009268:	4193      	sbcs	r3, r2
 800926a:	b2db      	uxtb	r3, r3
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009272:	b580      	push	{r7, lr}
 8009274:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009276:	2380      	movs	r3, #128	@ 0x80
 8009278:	021a      	lsls	r2, r3, #8
 800927a:	23a0      	movs	r3, #160	@ 0xa0
 800927c:	05db      	lsls	r3, r3, #23
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f00b ff3b 	bl	80150fc <HAL_GPIO_ReadPin>
 8009286:	0003      	movs	r3, r0
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	4193      	sbcs	r3, r2
 800928c:	b2db      	uxtb	r3, r3
}
 800928e:	0018      	movs	r0, r3
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009298:	4b05      	ldr	r3, [pc, #20]	@ (80092b0 <UserButton_Pressed+0x1c>)
 800929a:	2104      	movs	r1, #4
 800929c:	0018      	movs	r0, r3
 800929e:	f00b ff2d 	bl	80150fc <HAL_GPIO_ReadPin>
 80092a2:	0003      	movs	r3, r0
 80092a4:	425a      	negs	r2, r3
 80092a6:	4153      	adcs	r3, r2
 80092a8:	b2db      	uxtb	r3, r3
}
 80092aa:	0018      	movs	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	50000c00 	.word	0x50000c00

080092b4 <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 80092b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b6:	46d6      	mov	lr, sl
 80092b8:	464f      	mov	r7, r9
 80092ba:	4646      	mov	r6, r8
 80092bc:	b5c0      	push	{r6, r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80092c2:	4b38      	ldr	r3, [pc, #224]	@ (80093a4 <showTime+0xf0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d063      	beq.n	8009392 <showTime+0xde>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80092ca:	003a      	movs	r2, r7
 80092cc:	1d3b      	adds	r3, r7, #4
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f000 facb 	bl	800986c <RTC_GetTime>
  lasthour = currentTime.Hours;
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	781a      	ldrb	r2, [r3, #0]
 80092da:	4b33      	ldr	r3, [pc, #204]	@ (80093a8 <showTime+0xf4>)
 80092dc:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 80092de:	003b      	movs	r3, r7
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	4b32      	ldr	r3, [pc, #200]	@ (80093ac <showTime+0xf8>)
 80092e4:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 80092e6:	f000 f87f 	bl	80093e8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80092ea:	003b      	movs	r3, r7
 80092ec:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80092ee:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80092f0:	003b      	movs	r3, r7
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80092f6:	4b2e      	ldr	r3, [pc, #184]	@ (80093b0 <showTime+0xfc>)
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80092fc:	003b      	movs	r3, r7
 80092fe:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009300:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009302:	1d3b      	adds	r3, r7, #4
 8009304:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009306:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009308:	1d3b      	adds	r3, r7, #4
 800930a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800930c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800930e:	1d3b      	adds	r3, r7, #4
 8009310:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009312:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8009314:	4b27      	ldr	r3, [pc, #156]	@ (80093b4 <showTime+0x100>)
 8009316:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009318:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800931a:	4b26      	ldr	r3, [pc, #152]	@ (80093b4 <showTime+0x100>)
 800931c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800931e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8009320:	4b24      	ldr	r3, [pc, #144]	@ (80093b4 <showTime+0x100>)
 8009322:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009324:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8009326:	4b23      	ldr	r3, [pc, #140]	@ (80093b4 <showTime+0x100>)
 8009328:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800932a:	4823      	ldr	r0, [pc, #140]	@ (80093b8 <showTime+0x104>)
 800932c:	9306      	str	r3, [sp, #24]
 800932e:	4643      	mov	r3, r8
 8009330:	9305      	str	r3, [sp, #20]
 8009332:	4663      	mov	r3, ip
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	9603      	str	r6, [sp, #12]
 8009338:	9502      	str	r5, [sp, #8]
 800933a:	9401      	str	r4, [sp, #4]
 800933c:	9100      	str	r1, [sp, #0]
 800933e:	4653      	mov	r3, sl
 8009340:	4649      	mov	r1, r9
 8009342:	f01c f841 	bl	80253c8 <iprintf>
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009346:	4b19      	ldr	r3, [pc, #100]	@ (80093ac <showTime+0xf8>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b07      	cmp	r3, #7
 800934c:	d122      	bne.n	8009394 <showTime+0xe0>
 800934e:	4b16      	ldr	r3, [pc, #88]	@ (80093a8 <showTime+0xf4>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b03      	cmp	r3, #3
 8009354:	d11e      	bne.n	8009394 <showTime+0xe0>
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b10      	cmp	r3, #16
 800935c:	d81a      	bhi.n	8009394 <showTime+0xe0>
 800935e:	4b17      	ldr	r3, [pc, #92]	@ (80093bc <showTime+0x108>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2201      	movs	r2, #1
 8009364:	4053      	eors	r3, r2
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d013      	beq.n	8009394 <showTime+0xe0>
 800936c:	003b      	movs	r3, r7
 800936e:	789b      	ldrb	r3, [r3, #2]
 8009370:	2b18      	cmp	r3, #24
 8009372:	d90f      	bls.n	8009394 <showTime+0xe0>
 8009374:	003b      	movs	r3, r7
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d003      	beq.n	8009384 <showTime+0xd0>
 800937c:	003b      	movs	r3, r7
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	2b0a      	cmp	r3, #10
 8009382:	d107      	bne.n	8009394 <showTime+0xe0>
    dstchkd = true;
 8009384:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <showTime+0x108>)
 8009386:	2201      	movs	r2, #1
 8009388:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 800938a:	2000      	movs	r0, #0
 800938c:	f7fb fab4 	bl	80048f8 <setESPTimeStamp>
 8009390:	e000      	b.n	8009394 <showTime+0xe0>
    return;
 8009392:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009394:	46bd      	mov	sp, r7
 8009396:	b006      	add	sp, #24
 8009398:	bce0      	pop	{r5, r6, r7}
 800939a:	46ba      	mov	sl, r7
 800939c:	46b1      	mov	r9, r6
 800939e:	46a8      	mov	r8, r5
 80093a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	20000b58 	.word	0x20000b58
 80093a8:	20000b49 	.word	0x20000b49
 80093ac:	20000b4a 	.word	0x20000b4a
 80093b0:	20000054 	.word	0x20000054
 80093b4:	20000b4c 	.word	0x20000b4c
 80093b8:	0802b638 	.word	0x0802b638
 80093bc:	20000b48 	.word	0x20000b48

080093c0 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80093c6:	003a      	movs	r2, r7
 80093c8:	1d3b      	adds	r3, r7, #4
 80093ca:	0011      	movs	r1, r2
 80093cc:	0018      	movs	r0, r3
 80093ce:	f000 fa4d 	bl	800986c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80093d2:	1d3a      	adds	r2, r7, #4
 80093d4:	003b      	movs	r3, r7
 80093d6:	0011      	movs	r1, r2
 80093d8:	0018      	movs	r0, r3
 80093da:	f000 fc0f 	bl	8009bfc <makeTime>
 80093de:	0003      	movs	r3, r0
}
 80093e0:	0018      	movs	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b006      	add	sp, #24
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80093ee:	003a      	movs	r2, r7
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	0011      	movs	r1, r2
 80093f4:	0018      	movs	r0, r3
 80093f6:	f000 fa39 	bl	800986c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80093fa:	1d3a      	adds	r2, r7, #4
 80093fc:	003b      	movs	r3, r7
 80093fe:	0011      	movs	r1, r2
 8009400:	0018      	movs	r0, r3
 8009402:	f000 fbfb 	bl	8009bfc <makeTime>
 8009406:	0002      	movs	r2, r0
 8009408:	4b1e      	ldr	r3, [pc, #120]	@ (8009484 <UpdateSystemUptime+0x9c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	213c      	movs	r1, #60	@ 0x3c
 8009418:	0018      	movs	r0, r3
 800941a:	f7f6 ff49 	bl	80002b0 <__aeabi_uidivmod>
 800941e:	000b      	movs	r3, r1
 8009420:	b2da      	uxtb	r2, r3
 8009422:	4b19      	ldr	r3, [pc, #100]	@ (8009488 <UpdateSystemUptime+0xa0>)
 8009424:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	213c      	movs	r1, #60	@ 0x3c
 800942a:	0018      	movs	r0, r3
 800942c:	f7f6 feba 	bl	80001a4 <__udivsi3>
 8009430:	0003      	movs	r3, r0
 8009432:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	213c      	movs	r1, #60	@ 0x3c
 8009438:	0018      	movs	r0, r3
 800943a:	f7f6 ff39 	bl	80002b0 <__aeabi_uidivmod>
 800943e:	000b      	movs	r3, r1
 8009440:	b2da      	uxtb	r2, r3
 8009442:	4b11      	ldr	r3, [pc, #68]	@ (8009488 <UpdateSystemUptime+0xa0>)
 8009444:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	213c      	movs	r1, #60	@ 0x3c
 800944a:	0018      	movs	r0, r3
 800944c:	f7f6 feaa 	bl	80001a4 <__udivsi3>
 8009450:	0003      	movs	r3, r0
 8009452:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2118      	movs	r1, #24
 8009458:	0018      	movs	r0, r3
 800945a:	f7f6 ff29 	bl	80002b0 <__aeabi_uidivmod>
 800945e:	000b      	movs	r3, r1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	4b09      	ldr	r3, [pc, #36]	@ (8009488 <UpdateSystemUptime+0xa0>)
 8009464:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2118      	movs	r1, #24
 800946a:	0018      	movs	r0, r3
 800946c:	f7f6 fe9a 	bl	80001a4 <__udivsi3>
 8009470:	0003      	movs	r3, r0
 8009472:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	b29a      	uxth	r2, r3
 8009478:	4b03      	ldr	r3, [pc, #12]	@ (8009488 <UpdateSystemUptime+0xa0>)
 800947a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800947c:	46c0      	nop			@ (mov r8, r8)
 800947e:	46bd      	mov	sp, r7
 8009480:	b008      	add	sp, #32
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000b58 	.word	0x20000b58
 8009488:	20000b4c 	.word	0x20000b4c

0800948c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	0008      	movs	r0, r1
 8009496:	0011      	movs	r1, r2
 8009498:	1cfb      	adds	r3, r7, #3
 800949a:	1c02      	adds	r2, r0, #0
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	1cbb      	adds	r3, r7, #2
 80094a0:	1c0a      	adds	r2, r1, #0
 80094a2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80094a4:	230e      	movs	r3, #14
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80094ac:	230f      	movs	r3, #15
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	1cfa      	adds	r2, r7, #3
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	e015      	b.n	80094e4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80094b8:	200f      	movs	r0, #15
 80094ba:	183b      	adds	r3, r7, r0
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	18d2      	adds	r2, r2, r3
 80094c2:	240e      	movs	r4, #14
 80094c4:	193b      	adds	r3, r7, r4
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	7811      	ldrb	r1, [r2, #0]
 80094ca:	2208      	movs	r2, #8
 80094cc:	18ba      	adds	r2, r7, r2
 80094ce:	54d1      	strb	r1, [r2, r3]
    pos++;
 80094d0:	193b      	adds	r3, r7, r4
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	3201      	adds	r2, #1
 80094d8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80094da:	183b      	adds	r3, r7, r0
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	183b      	adds	r3, r7, r0
 80094e0:	3201      	adds	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	200f      	movs	r0, #15
 80094e6:	183a      	adds	r2, r7, r0
 80094e8:	1cbb      	adds	r3, r7, #2
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d9e2      	bls.n	80094b8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80094f2:	230e      	movs	r3, #14
 80094f4:	18fb      	adds	r3, r7, r3
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2208      	movs	r2, #8
 80094fa:	18ba      	adds	r2, r7, r2
 80094fc:	2100      	movs	r1, #0
 80094fe:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009500:	1cfb      	adds	r3, r7, #3
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b13      	cmp	r3, #19
 8009506:	d849      	bhi.n	800959c <aBuff2int+0x110>
    if (start == 17) { //month
 8009508:	1cfb      	adds	r3, r7, #3
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b11      	cmp	r3, #17
 800950e:	d122      	bne.n	8009556 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009510:	183b      	adds	r3, r7, r0
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	e018      	b.n	800954a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009518:	240f      	movs	r4, #15
 800951a:	193b      	adds	r3, r7, r4
 800951c:	781a      	ldrb	r2, [r3, #0]
 800951e:	4b25      	ldr	r3, [pc, #148]	@ (80095b4 <aBuff2int+0x128>)
 8009520:	0092      	lsls	r2, r2, #2
 8009522:	58d2      	ldr	r2, [r2, r3]
 8009524:	2308      	movs	r3, #8
 8009526:	18fb      	adds	r3, r7, r3
 8009528:	0011      	movs	r1, r2
 800952a:	0018      	movs	r0, r3
 800952c:	f7f6 fe14 	bl	8000158 <strcmp>
 8009530:	1e03      	subs	r3, r0, #0
 8009532:	d104      	bne.n	800953e <aBuff2int+0xb2>
          return i+1;
 8009534:	193b      	adds	r3, r7, r4
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	3301      	adds	r3, #1
 800953a:	b2db      	uxtb	r3, r3
 800953c:	e035      	b.n	80095aa <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800953e:	210f      	movs	r1, #15
 8009540:	187b      	adds	r3, r7, r1
 8009542:	781a      	ldrb	r2, [r3, #0]
 8009544:	187b      	adds	r3, r7, r1
 8009546:	3201      	adds	r2, #1
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	230f      	movs	r3, #15
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b0b      	cmp	r3, #11
 8009552:	d9e1      	bls.n	8009518 <aBuff2int+0x8c>
 8009554:	e022      	b.n	800959c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009556:	230f      	movs	r3, #15
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
 800955e:	e018      	b.n	8009592 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8009560:	240f      	movs	r4, #15
 8009562:	193b      	adds	r3, r7, r4
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	4b14      	ldr	r3, [pc, #80]	@ (80095b8 <aBuff2int+0x12c>)
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	58d2      	ldr	r2, [r2, r3]
 800956c:	2308      	movs	r3, #8
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	0011      	movs	r1, r2
 8009572:	0018      	movs	r0, r3
 8009574:	f7f6 fdf0 	bl	8000158 <strcmp>
 8009578:	1e03      	subs	r3, r0, #0
 800957a:	d104      	bne.n	8009586 <aBuff2int+0xfa>
          return i+1;
 800957c:	193b      	adds	r3, r7, r4
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	3301      	adds	r3, #1
 8009582:	b2db      	uxtb	r3, r3
 8009584:	e011      	b.n	80095aa <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009586:	210f      	movs	r1, #15
 8009588:	187b      	adds	r3, r7, r1
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	187b      	adds	r3, r7, r1
 800958e:	3201      	adds	r2, #1
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	230f      	movs	r3, #15
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b06      	cmp	r3, #6
 800959a:	d9e1      	bls.n	8009560 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800959c:	2308      	movs	r3, #8
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	0018      	movs	r0, r3
 80095a2:	f01a fb2c 	bl	8023bfe <atoi>
 80095a6:	0003      	movs	r3, r0
 80095a8:	b2db      	uxtb	r3, r3
}
 80095aa:	0018      	movs	r0, r3
 80095ac:	46bd      	mov	sp, r7
 80095ae:	b005      	add	sp, #20
 80095b0:	bd90      	pop	{r4, r7, pc}
 80095b2:	46c0      	nop			@ (mov r8, r8)
 80095b4:	20000054 	.word	0x20000054
 80095b8:	20000038 	.word	0x20000038

080095bc <ParseTime>:

void ParseTime(char* buffer) {
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	b08d      	sub	sp, #52	@ 0x34
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80095c4:	2408      	movs	r4, #8
 80095c6:	193a      	adds	r2, r7, r4
 80095c8:	260c      	movs	r6, #12
 80095ca:	19bb      	adds	r3, r7, r6
 80095cc:	0011      	movs	r1, r2
 80095ce:	0018      	movs	r0, r3
 80095d0:	f000 f94c 	bl	800986c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2219      	movs	r2, #25
 80095d8:	2118      	movs	r1, #24
 80095da:	0018      	movs	r0, r3
 80095dc:	f7ff ff56 	bl	800948c <aBuff2int>
 80095e0:	0003      	movs	r3, r0
 80095e2:	001a      	movs	r2, r3
 80095e4:	19bb      	adds	r3, r7, r6
 80095e6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	221c      	movs	r2, #28
 80095ec:	211b      	movs	r1, #27
 80095ee:	0018      	movs	r0, r3
 80095f0:	f7ff ff4c 	bl	800948c <aBuff2int>
 80095f4:	0003      	movs	r3, r0
 80095f6:	001a      	movs	r2, r3
 80095f8:	19bb      	adds	r3, r7, r6
 80095fa:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	221f      	movs	r2, #31
 8009600:	211e      	movs	r1, #30
 8009602:	0018      	movs	r0, r3
 8009604:	f7ff ff42 	bl	800948c <aBuff2int>
 8009608:	0003      	movs	r3, r0
 800960a:	001a      	movs	r2, r3
 800960c:	19bb      	adds	r3, r7, r6
 800960e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	@ 0x24
 8009614:	2123      	movs	r1, #35	@ 0x23
 8009616:	0018      	movs	r0, r3
 8009618:	f7ff ff38 	bl	800948c <aBuff2int>
 800961c:	0003      	movs	r3, r0
 800961e:	001a      	movs	r2, r3
 8009620:	0025      	movs	r5, r4
 8009622:	197b      	adds	r3, r7, r5
 8009624:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2213      	movs	r2, #19
 800962a:	2111      	movs	r1, #17
 800962c:	0018      	movs	r0, r3
 800962e:	f7ff ff2d 	bl	800948c <aBuff2int>
 8009632:	0003      	movs	r3, r0
 8009634:	001a      	movs	r2, r3
 8009636:	197b      	adds	r3, r7, r5
 8009638:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2216      	movs	r2, #22
 800963e:	2115      	movs	r1, #21
 8009640:	0018      	movs	r0, r3
 8009642:	f7ff ff23 	bl	800948c <aBuff2int>
 8009646:	0003      	movs	r3, r0
 8009648:	001a      	movs	r2, r3
 800964a:	197b      	adds	r3, r7, r5
 800964c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	220f      	movs	r2, #15
 8009652:	210d      	movs	r1, #13
 8009654:	0018      	movs	r0, r3
 8009656:	f7ff ff19 	bl	800948c <aBuff2int>
 800965a:	0003      	movs	r3, r0
 800965c:	001a      	movs	r2, r3
 800965e:	197b      	adds	r3, r7, r5
 8009660:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009662:	19bb      	adds	r3, r7, r6
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	001c      	movs	r4, r3
 8009668:	19bb      	adds	r3, r7, r6
 800966a:	785b      	ldrb	r3, [r3, #1]
 800966c:	0018      	movs	r0, r3
 800966e:	19bb      	adds	r3, r7, r6
 8009670:	789b      	ldrb	r3, [r3, #2]
 8009672:	4a44      	ldr	r2, [pc, #272]	@ (8009784 <ParseTime+0x1c8>)
 8009674:	4944      	ldr	r1, [pc, #272]	@ (8009788 <ParseTime+0x1cc>)
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	9000      	str	r0, [sp, #0]
 800967a:	0023      	movs	r3, r4
 800967c:	2003      	movs	r0, #3
 800967e:	f009 fd89 	bl	8013194 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8009682:	197b      	adds	r3, r7, r5
 8009684:	789b      	ldrb	r3, [r3, #2]
 8009686:	001c      	movs	r4, r3
 8009688:	197b      	adds	r3, r7, r5
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	0018      	movs	r0, r3
 800968e:	197b      	adds	r3, r7, r5
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	4a3e      	ldr	r2, [pc, #248]	@ (800978c <ParseTime+0x1d0>)
 8009694:	493c      	ldr	r1, [pc, #240]	@ (8009788 <ParseTime+0x1cc>)
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	9000      	str	r0, [sp, #0]
 800969a:	0023      	movs	r3, r4
 800969c:	2003      	movs	r0, #3
 800969e:	f009 fd79 	bl	8013194 <CreateLine>
  RTC_SetTime(&currentTime);
 80096a2:	19bb      	adds	r3, r7, r6
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 f87d 	bl	80097a4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80096aa:	197b      	adds	r3, r7, r5
 80096ac:	0018      	movs	r0, r3
 80096ae:	f000 f89f 	bl	80097f0 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 80096b2:	2327      	movs	r3, #39	@ 0x27
 80096b4:	18fb      	adds	r3, r7, r3
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 80096ba:	197b      	adds	r3, r7, r5
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	dd04      	ble.n	80096d0 <ParseTime+0x114>
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b0a      	cmp	r3, #10
 80096ca:	dc01      	bgt.n	80096d0 <ParseTime+0x114>
 80096cc:	2201      	movs	r2, #1
 80096ce:	e000      	b.n	80096d2 <ParseTime+0x116>
 80096d0:	2200      	movs	r2, #0
 80096d2:	2027      	movs	r0, #39	@ 0x27
 80096d4:	183b      	adds	r3, r7, r0
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	2101      	movs	r1, #1
 80096dc:	400a      	ands	r2, r1
 80096de:	701a      	strb	r2, [r3, #0]
  if (dst)
 80096e0:	0002      	movs	r2, r0
 80096e2:	18bb      	adds	r3, r7, r2
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d01f      	beq.n	800972a <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d10c      	bne.n	800970a <ParseTime+0x14e>
 80096f0:	2108      	movs	r1, #8
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b07      	cmp	r3, #7
 80096f8:	d107      	bne.n	800970a <ParseTime+0x14e>
 80096fa:	187b      	adds	r3, r7, r1
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	2b18      	cmp	r3, #24
 8009700:	d803      	bhi.n	800970a <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 8009702:	18bb      	adds	r3, r7, r2
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e00f      	b.n	800972a <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	2b0a      	cmp	r3, #10
 800970e:	d10c      	bne.n	800972a <ParseTime+0x16e>
 8009710:	2208      	movs	r2, #8
 8009712:	18bb      	adds	r3, r7, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b07      	cmp	r3, #7
 8009718:	d107      	bne.n	800972a <ParseTime+0x16e>
 800971a:	18bb      	adds	r3, r7, r2
 800971c:	789b      	ldrb	r3, [r3, #2]
 800971e:	2b18      	cmp	r3, #24
 8009720:	d803      	bhi.n	800972a <ParseTime+0x16e>
    {
        dst = false;
 8009722:	2327      	movs	r3, #39	@ 0x27
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	2200      	movs	r2, #0
 8009728:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800972a:	2327      	movs	r3, #39	@ 0x27
 800972c:	18fb      	adds	r3, r7, r3
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <ParseTime+0x18e>
    Info("Daylight Saving Time active");
 8009734:	4a16      	ldr	r2, [pc, #88]	@ (8009790 <ParseTime+0x1d4>)
 8009736:	4b17      	ldr	r3, [pc, #92]	@ (8009794 <ParseTime+0x1d8>)
 8009738:	0019      	movs	r1, r3
 800973a:	2002      	movs	r0, #2
 800973c:	f009 fd2a 	bl	8013194 <CreateLine>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 8009740:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <ParseTime+0x1dc>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	0018      	movs	r0, r3
 8009746:	f012 f8a5 	bl	801b894 <HAL_RTC_DST_Add1Hour>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800974a:	2308      	movs	r3, #8
 800974c:	18fb      	adds	r3, r7, r3
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d104      	bne.n	800975e <ParseTime+0x1a2>
    reset_fanCleaningDone(); // reset the cleaning flag done
 8009754:	f004 fa56 	bl	800dc04 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 8009758:	4b10      	ldr	r3, [pc, #64]	@ (800979c <ParseTime+0x1e0>)
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800975e:	4b10      	ldr	r3, [pc, #64]	@ (80097a0 <ParseTime+0x1e4>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <ParseTime+0x1c0>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8009766:	230c      	movs	r3, #12
 8009768:	18fa      	adds	r2, r7, r3
 800976a:	2308      	movs	r3, #8
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	0011      	movs	r1, r2
 8009770:	0018      	movs	r0, r3
 8009772:	f000 fa43 	bl	8009bfc <makeTime>
 8009776:	0002      	movs	r2, r0
 8009778:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <ParseTime+0x1e4>)
 800977a:	601a      	str	r2, [r3, #0]
  }
}
 800977c:	46c0      	nop			@ (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b00b      	add	sp, #44	@ 0x2c
 8009782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009784:	0802b690 	.word	0x0802b690
 8009788:	0802b6c8 	.word	0x0802b6c8
 800978c:	0802b6cc 	.word	0x0802b6cc
 8009790:	0802b700 	.word	0x0802b700
 8009794:	0802b71c 	.word	0x0802b71c
 8009798:	20000b54 	.word	0x20000b54
 800979c:	20000b48 	.word	0x20000b48
 80097a0:	20000b58 	.word	0x20000b58

080097a4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80097be:	4b09      	ldr	r3, [pc, #36]	@ (80097e4 <RTC_SetTime+0x40>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	0018      	movs	r0, r3
 80097c8:	f011 fe50 	bl	801b46c <HAL_RTC_SetTime>
 80097cc:	1e03      	subs	r3, r0, #0
 80097ce:	d005      	beq.n	80097dc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80097d0:	4a05      	ldr	r2, [pc, #20]	@ (80097e8 <RTC_SetTime+0x44>)
 80097d2:	4b06      	ldr	r3, [pc, #24]	@ (80097ec <RTC_SetTime+0x48>)
 80097d4:	0019      	movs	r1, r3
 80097d6:	2001      	movs	r0, #1
 80097d8:	f009 fcdc 	bl	8013194 <CreateLine>
    }
}
 80097dc:	46c0      	nop			@ (mov r8, r8)
 80097de:	46bd      	mov	sp, r7
 80097e0:	b002      	add	sp, #8
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000b54 	.word	0x20000b54
 80097e8:	0802b720 	.word	0x0802b720
 80097ec:	0802b73c 	.word	0x0802b73c

080097f0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80097f8:	4b16      	ldr	r3, [pc, #88]	@ (8009854 <RTC_SetDate+0x64>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	0018      	movs	r0, r3
 8009802:	f011 ff3b 	bl	801b67c <HAL_RTC_SetDate>
 8009806:	1e03      	subs	r3, r0, #0
 8009808:	d005      	beq.n	8009816 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800980a:	4a13      	ldr	r2, [pc, #76]	@ (8009858 <RTC_SetDate+0x68>)
 800980c:	4b13      	ldr	r3, [pc, #76]	@ (800985c <RTC_SetDate+0x6c>)
 800980e:	0019      	movs	r1, r3
 8009810:	2001      	movs	r0, #1
 8009812:	f009 fcbf 	bl	8013194 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8009816:	4b0f      	ldr	r3, [pc, #60]	@ (8009854 <RTC_SetDate+0x64>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2101      	movs	r1, #1
 800981c:	0018      	movs	r0, r3
 800981e:	f012 fa91 	bl	801bd44 <HAL_RTCEx_BKUPRead>
 8009822:	0003      	movs	r3, r0
 8009824:	4a0e      	ldr	r2, [pc, #56]	@ (8009860 <RTC_SetDate+0x70>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d010      	beq.n	800984c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800982a:	4a0e      	ldr	r2, [pc, #56]	@ (8009864 <RTC_SetDate+0x74>)
 800982c:	4b0e      	ldr	r3, [pc, #56]	@ (8009868 <RTC_SetDate+0x78>)
 800982e:	0019      	movs	r1, r3
 8009830:	2003      	movs	r0, #3
 8009832:	f009 fcaf 	bl	8013194 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8009836:	f010 fd99 	bl	801a36c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800983a:	4b06      	ldr	r3, [pc, #24]	@ (8009854 <RTC_SetDate+0x64>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a08      	ldr	r2, [pc, #32]	@ (8009860 <RTC_SetDate+0x70>)
 8009840:	2101      	movs	r1, #1
 8009842:	0018      	movs	r0, r3
 8009844:	f012 fa66 	bl	801bd14 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8009848:	f010 fd9e 	bl	801a388 <HAL_PWR_DisableBkUpAccess>
    }
}
 800984c:	46c0      	nop			@ (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b002      	add	sp, #8
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000b54 	.word	0x20000b54
 8009858:	0802b740 	.word	0x0802b740
 800985c:	0802b73c 	.word	0x0802b73c
 8009860:	0000bebe 	.word	0x0000bebe
 8009864:	0802b75c 	.word	0x0802b75c
 8009868:	0802b6c8 	.word	0x0802b6c8

0800986c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8009876:	250f      	movs	r5, #15
 8009878:	197b      	adds	r3, r7, r5
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800987e:	230e      	movs	r3, #14
 8009880:	18fb      	adds	r3, r7, r3
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8009886:	260c      	movs	r6, #12
 8009888:	19bc      	adds	r4, r7, r6
 800988a:	f008 fcfd 	bl	8012288 <powerCheck>
 800988e:	0003      	movs	r3, r0
 8009890:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8009892:	19bb      	adds	r3, r7, r6
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800989a:	197b      	adds	r3, r7, r5
 800989c:	781a      	ldrb	r2, [r3, #0]
 800989e:	197b      	adds	r3, r7, r5
 80098a0:	3201      	adds	r2, #1
 80098a2:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80098a4:	230d      	movs	r3, #13
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	e039      	b.n	8009922 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80098ae:	4b23      	ldr	r3, [pc, #140]	@ (800993c <RTC_GetTime+0xd0>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	0018      	movs	r0, r3
 80098b8:	f011 fe82 	bl	801b5c0 <HAL_RTC_GetTime>
 80098bc:	1e03      	subs	r3, r0, #0
 80098be:	d005      	beq.n	80098cc <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80098c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009940 <RTC_GetTime+0xd4>)
 80098c2:	4b20      	ldr	r3, [pc, #128]	@ (8009944 <RTC_GetTime+0xd8>)
 80098c4:	0019      	movs	r1, r3
 80098c6:	2001      	movs	r0, #1
 80098c8:	f009 fc64 	bl	8013194 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80098cc:	4b1b      	ldr	r3, [pc, #108]	@ (800993c <RTC_GetTime+0xd0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	0018      	movs	r0, r3
 80098d6:	f011 ff65 	bl	801b7a4 <HAL_RTC_GetDate>
 80098da:	1e03      	subs	r3, r0, #0
 80098dc:	d005      	beq.n	80098ea <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80098de:	4a1a      	ldr	r2, [pc, #104]	@ (8009948 <RTC_GetTime+0xdc>)
 80098e0:	4b18      	ldr	r3, [pc, #96]	@ (8009944 <RTC_GetTime+0xd8>)
 80098e2:	0019      	movs	r1, r3
 80098e4:	2001      	movs	r0, #1
 80098e6:	f009 fc55 	bl	8013194 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80098ea:	230c      	movs	r3, #12
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d110      	bne.n	8009916 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	210e      	movs	r1, #14
 80098fa:	187a      	adds	r2, r7, r1
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d018      	beq.n	8009934 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8009902:	187b      	adds	r3, r7, r1
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	701a      	strb	r2, [r3, #0]
        t++;
 800990a:	210f      	movs	r1, #15
 800990c:	187b      	adds	r3, r7, r1
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	187b      	adds	r3, r7, r1
 8009912:	3201      	adds	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009916:	210d      	movs	r1, #13
 8009918:	187b      	adds	r3, r7, r1
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	187b      	adds	r3, r7, r1
 800991e:	3201      	adds	r2, #1
 8009920:	701a      	strb	r2, [r3, #0]
 8009922:	230d      	movs	r3, #13
 8009924:	18fa      	adds	r2, r7, r3
 8009926:	230f      	movs	r3, #15
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d3bd      	bcc.n	80098ae <RTC_GetTime+0x42>
 8009932:	e000      	b.n	8009936 <RTC_GetTime+0xca>
      }
      else {
        return;
 8009934:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009936:	46bd      	mov	sp, r7
 8009938:	b005      	add	sp, #20
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993c:	20000b54 	.word	0x20000b54
 8009940:	0802b774 	.word	0x0802b774
 8009944:	0802b73c 	.word	0x0802b73c
 8009948:	0802b790 	.word	0x0802b790

0800994c <getPosixTime>:

uint32_t getPosixTime(void) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009952:	003a      	movs	r2, r7
 8009954:	1d3b      	adds	r3, r7, #4
 8009956:	0011      	movs	r1, r2
 8009958:	0018      	movs	r0, r3
 800995a:	f7ff ff87 	bl	800986c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800995e:	1d3a      	adds	r2, r7, #4
 8009960:	003b      	movs	r3, r7
 8009962:	0011      	movs	r1, r2
 8009964:	0018      	movs	r0, r3
 8009966:	f000 f949 	bl	8009bfc <makeTime>
 800996a:	0003      	movs	r3, r0
}
 800996c:	0018      	movs	r0, r3
 800996e:	46bd      	mov	sp, r7
 8009970:	b006      	add	sp, #24
 8009972:	bd80      	pop	{r7, pc}

08009974 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8009974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009976:	b08d      	sub	sp, #52	@ 0x34
 8009978:	af04      	add	r7, sp, #16
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800997e:	240c      	movs	r4, #12
 8009980:	193a      	adds	r2, r7, r4
 8009982:	2508      	movs	r5, #8
 8009984:	1979      	adds	r1, r7, r5
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f000 fa01 	bl	8009d90 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800998e:	002a      	movs	r2, r5
 8009990:	18bb      	adds	r3, r7, r2
 8009992:	789b      	ldrb	r3, [r3, #2]
 8009994:	001e      	movs	r6, r3
 8009996:	18bb      	adds	r3, r7, r2
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	469c      	mov	ip, r3
 800999c:	18bb      	adds	r3, r7, r2
 800999e:	78db      	ldrb	r3, [r3, #3]
 80099a0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80099a2:	0021      	movs	r1, r4
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80099a8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80099ae:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80099b0:	187b      	adds	r3, r7, r1
 80099b2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80099b4:	4906      	ldr	r1, [pc, #24]	@ (80099d0 <getUTCfromPosixTime+0x5c>)
 80099b6:	6838      	ldr	r0, [r7, #0]
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	9502      	str	r5, [sp, #8]
 80099bc:	9401      	str	r4, [sp, #4]
 80099be:	9200      	str	r2, [sp, #0]
 80099c0:	4663      	mov	r3, ip
 80099c2:	0032      	movs	r2, r6
 80099c4:	f01b fd70 	bl	80254a8 <siprintf>
}
 80099c8:	46c0      	nop			@ (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b009      	add	sp, #36	@ 0x24
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d0:	0802b7ac 	.word	0x0802b7ac

080099d4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80099dc:	4b10      	ldr	r3, [pc, #64]	@ (8009a20 <RTC_SetWakeUpTimer+0x4c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	0018      	movs	r0, r3
 80099e2:	f012 f8fb 	bl	801bbdc <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80099e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009a20 <RTC_SetWakeUpTimer+0x4c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	22ff      	movs	r2, #255	@ 0xff
 80099f0:	401a      	ands	r2, r3
 80099f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009a20 <RTC_SetWakeUpTimer+0x4c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	490a      	ldr	r1, [pc, #40]	@ (8009a24 <RTC_SetWakeUpTimer+0x50>)
 80099fa:	430a      	orrs	r2, r1
 80099fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80099fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009a28 <RTC_SetWakeUpTimer+0x54>)
 8009a00:	2280      	movs	r2, #128	@ 0x80
 8009a02:	0352      	lsls	r2, r2, #13
 8009a04:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009a06:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <RTC_SetWakeUpTimer+0x4c>)
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2204      	movs	r2, #4
 8009a10:	0019      	movs	r1, r3
 8009a12:	f012 f80b 	bl	801ba2c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009a16:	46c0      	nop			@ (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b002      	add	sp, #8
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	46c0      	nop			@ (mov r8, r8)
 8009a20:	20000b54 	.word	0x20000b54
 8009a24:	fffffb7f 	.word	0xfffffb7f
 8009a28:	40010400 	.word	0x40010400

08009a2c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8009a30:	4a0b      	ldr	r2, [pc, #44]	@ (8009a60 <Enter_Standby_Mode+0x34>)
 8009a32:	4b0c      	ldr	r3, [pc, #48]	@ (8009a64 <Enter_Standby_Mode+0x38>)
 8009a34:	0019      	movs	r1, r3
 8009a36:	2003      	movs	r0, #3
 8009a38:	f009 fbac 	bl	8013194 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8009a3c:	2064      	movs	r0, #100	@ 0x64
 8009a3e:	f00a f8f3 	bl	8013c28 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009a42:	4b09      	ldr	r3, [pc, #36]	@ (8009a68 <Enter_Standby_Mode+0x3c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	0018      	movs	r0, r3
 8009a48:	f012 f8c8 	bl	801bbdc <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8009a4c:	f002 f94c 	bl	800bce8 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8009a50:	f00a f90e 	bl	8013c70 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8009a54:	f010 fd04 	bl	801a460 <HAL_PWR_EnterSTANDBYMode>
}
 8009a58:	46c0      	nop			@ (mov r8, r8)
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	0802b800 	.word	0x0802b800
 8009a64:	0802b6c8 	.word	0x0802b6c8
 8009a68:	20000b54 	.word	0x20000b54

08009a6c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	0002      	movs	r2, r0
 8009a74:	1dbb      	adds	r3, r7, #6
 8009a76:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8009a78:	4b4e      	ldr	r3, [pc, #312]	@ (8009bb4 <Enter_Stop_Mode+0x148>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009a80:	f004 f894 	bl	800dbac <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009a84:	f7ff fb30 	bl	80090e8 <ReadBatteryVoltage>
 8009a88:	1c03      	adds	r3, r0, #0
 8009a8a:	1c18      	adds	r0, r3, #0
 8009a8c:	f7f9 ff02 	bl	8003894 <__aeabi_f2d>
 8009a90:	0002      	movs	r2, r0
 8009a92:	000b      	movs	r3, r1
 8009a94:	4848      	ldr	r0, [pc, #288]	@ (8009bb8 <Enter_Stop_Mode+0x14c>)
 8009a96:	4949      	ldr	r1, [pc, #292]	@ (8009bbc <Enter_Stop_Mode+0x150>)
 8009a98:	9200      	str	r2, [sp, #0]
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	0002      	movs	r2, r0
 8009a9e:	2002      	movs	r0, #2
 8009aa0:	f009 fb78 	bl	8013194 <CreateLine>
  powerDisplay(powerCheck());
 8009aa4:	f008 fbf0 	bl	8012288 <powerCheck>
 8009aa8:	0003      	movs	r3, r0
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f008 fc08 	bl	80122c0 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009ab0:	1dbb      	adds	r3, r7, #6
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	4a42      	ldr	r2, [pc, #264]	@ (8009bc0 <Enter_Stop_Mode+0x154>)
 8009ab6:	4943      	ldr	r1, [pc, #268]	@ (8009bc4 <Enter_Stop_Mode+0x158>)
 8009ab8:	2003      	movs	r0, #3
 8009aba:	f009 fb6b 	bl	8013194 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8009abe:	f7ff ff45 	bl	800994c <getPosixTime>
 8009ac2:	0002      	movs	r2, r0
 8009ac4:	1dbb      	adds	r3, r7, #6
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	18d3      	adds	r3, r2, r3
 8009aca:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc8 <Enter_Stop_Mode+0x15c>)
 8009acc:	0011      	movs	r1, r2
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f7ff ff50 	bl	8009974 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8009bc8 <Enter_Stop_Mode+0x15c>)
 8009ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8009bcc <Enter_Stop_Mode+0x160>)
 8009ad8:	4938      	ldr	r1, [pc, #224]	@ (8009bbc <Enter_Stop_Mode+0x150>)
 8009ada:	2002      	movs	r0, #2
 8009adc:	f009 fb5a 	bl	8013194 <CreateLine>
  HAL_Delay(100);
 8009ae0:	2064      	movs	r0, #100	@ 0x64
 8009ae2:	f00a f8a1 	bl	8013c28 <HAL_Delay>
  HAL_SuspendTick();
 8009ae6:	f00a f8c3 	bl	8013c70 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009aea:	1dbb      	adds	r3, r7, #6
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	0018      	movs	r0, r3
 8009af0:	f7ff ff70 	bl	80099d4 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009af4:	2101      	movs	r1, #1
 8009af6:	2001      	movs	r0, #1
 8009af8:	f010 fc56 	bl	801a3a8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009afc:	f002 fd8e 	bl	800c61c <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009b00:	f00a f8c4 	bl	8013c8c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009b04:	1dbb      	adds	r3, r7, #6
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f003 ffc3 	bl	800da94 <sen5x_enable>
 8009b0e:	1e03      	subs	r3, r0, #0
 8009b10:	d01e      	beq.n	8009b50 <Enter_Stop_Mode+0xe4>
    showTime();
 8009b12:	f7ff fbcf 	bl	80092b4 <showTime>
    set_light_on_state();
 8009b16:	f004 fcfd 	bl	800e514 <set_light_on_state>
    if (!userToggle) {
 8009b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8009bd0 <Enter_Stop_Mode+0x164>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4053      	eors	r3, r2
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d013      	beq.n	8009b50 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009b28:	201c      	movs	r0, #28
 8009b2a:	f7ff ff53 	bl	80099d4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009b2e:	4a24      	ldr	r2, [pc, #144]	@ (8009bc0 <Enter_Stop_Mode+0x154>)
 8009b30:	4924      	ldr	r1, [pc, #144]	@ (8009bc4 <Enter_Stop_Mode+0x158>)
 8009b32:	231c      	movs	r3, #28
 8009b34:	2003      	movs	r0, #3
 8009b36:	f009 fb2d 	bl	8013194 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f010 fc33 	bl	801a3a8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8009b42:	f002 fd6b 	bl	800c61c <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8009b46:	f00a f8a1 	bl	8013c8c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f003 ff80 	bl	800da50 <setsen5xReadTimer>
    }
  }
  showTime();
 8009b50:	f7ff fbb0 	bl	80092b4 <showTime>
  EnabledConnectedDevices();
 8009b54:	f003 fb1a 	bl	800d18c <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009b58:	f003 fc14 	bl	800d384 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8009b5c:	f006 fb52 	bl	8010204 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009b60:	f7f9 ffec 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 8009b64:	2000      	movs	r0, #0
 8009b66:	f003 ff85 	bl	800da74 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8009b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd4 <Enter_Stop_Mode+0x168>)
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f7fa fec3 	bl	80048f8 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 8009b72:	201e      	movs	r0, #30
 8009b74:	f006 fb34 	bl	80101e0 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 8009b78:	205a      	movs	r0, #90	@ 0x5a
 8009b7a:	f009 fd69 	bl	8013650 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8009b7e:	203c      	movs	r0, #60	@ 0x3c
 8009b80:	f000 fb98 	bl	800a2b4 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009b84:	205a      	movs	r0, #90	@ 0x5a
 8009b86:	f000 ff3f 	bl	800aa08 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	f7f9 ffe0 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009b90:	2000      	movs	r0, #0
 8009b92:	f003 fbe5 	bl	800d360 <setMICTimeStamp>
  ESPTransmitDone = false;
 8009b96:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <Enter_Stop_Mode+0x16c>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8009b9c:	f00a f83a 	bl	8013c14 <HAL_GetTick>
 8009ba0:	0003      	movs	r3, r0
 8009ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8009bd4 <Enter_Stop_Mode+0x168>)
 8009ba4:	189a      	adds	r2, r3, r2
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bdc <Enter_Stop_Mode+0x170>)
 8009ba8:	601a      	str	r2, [r3, #0]
}
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	46bd      	mov	sp, r7
 8009bae:	b002      	add	sp, #8
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	20000eb9 	.word	0x20000eb9
 8009bb8:	0802b824 	.word	0x0802b824
 8009bbc:	0802b71c 	.word	0x0802b71c
 8009bc0:	0802b83c 	.word	0x0802b83c
 8009bc4:	0802b6c8 	.word	0x0802b6c8
 8009bc8:	20000b5c 	.word	0x20000b5c
 8009bcc:	0802b860 	.word	0x0802b860
 8009bd0:	20001e4a 	.word	0x20001e4a
 8009bd4:	00001194 	.word	0x00001194
 8009bd8:	200005a8 	.word	0x200005a8
 8009bdc:	20000e10 	.word	0x20000e10

08009be0 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009be8:	4b03      	ldr	r3, [pc, #12]	@ (8009bf8 <InitClock+0x18>)
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
}
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	b002      	add	sp, #8
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	46c0      	nop			@ (mov r8, r8)
 8009bf8:	20000b54 	.word	0x20000b54

08009bfc <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	0013      	movs	r3, r2
 8009c0e:	025b      	lsls	r3, r3, #9
 8009c10:	189b      	adds	r3, r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	189b      	adds	r3, r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	189b      	adds	r3, r3, r2
 8009c1a:	011a      	lsls	r2, r3, #4
 8009c1c:	1ad2      	subs	r2, r2, r3
 8009c1e:	01d3      	lsls	r3, r2, #7
 8009c20:	001a      	movs	r2, r3
 8009c22:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e028      	b.n	8009c7c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4a53      	ldr	r2, [pc, #332]	@ (8009d7c <makeTime+0x180>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	db21      	blt.n	8009c76 <makeTime+0x7a>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4a52      	ldr	r2, [pc, #328]	@ (8009d80 <makeTime+0x184>)
 8009c36:	4694      	mov	ip, r2
 8009c38:	4463      	add	r3, ip
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	4013      	ands	r3, r2
 8009c40:	d119      	bne.n	8009c76 <makeTime+0x7a>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a4e      	ldr	r2, [pc, #312]	@ (8009d80 <makeTime+0x184>)
 8009c46:	4694      	mov	ip, r2
 8009c48:	4463      	add	r3, ip
 8009c4a:	2164      	movs	r1, #100	@ 0x64
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f7f6 fc19 	bl	8000484 <__aeabi_idivmod>
 8009c52:	1e0b      	subs	r3, r1, #0
 8009c54:	d10a      	bne.n	8009c6c <makeTime+0x70>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4a49      	ldr	r2, [pc, #292]	@ (8009d80 <makeTime+0x184>)
 8009c5a:	4694      	mov	ip, r2
 8009c5c:	4463      	add	r3, ip
 8009c5e:	22c8      	movs	r2, #200	@ 0xc8
 8009c60:	0051      	lsls	r1, r2, #1
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7f6 fc0e 	bl	8000484 <__aeabi_idivmod>
 8009c68:	1e0b      	subs	r3, r1, #0
 8009c6a:	d104      	bne.n	8009c76 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	4a45      	ldr	r2, [pc, #276]	@ (8009d84 <makeTime+0x188>)
 8009c70:	4694      	mov	ip, r2
 8009c72:	4463      	add	r3, ip
 8009c74:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	78db      	ldrb	r3, [r3, #3]
 8009c80:	001a      	movs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	dbd0      	blt.n	8009c2a <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009c88:	2301      	movs	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e03c      	b.n	8009d08 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d125      	bne.n	8009ce0 <makeTime+0xe4>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	78db      	ldrb	r3, [r3, #3]
 8009c98:	4a39      	ldr	r2, [pc, #228]	@ (8009d80 <makeTime+0x184>)
 8009c9a:	4694      	mov	ip, r2
 8009c9c:	4463      	add	r3, ip
 8009c9e:	001a      	movs	r2, r3
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	d11c      	bne.n	8009ce0 <makeTime+0xe4>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	78db      	ldrb	r3, [r3, #3]
 8009caa:	4a35      	ldr	r2, [pc, #212]	@ (8009d80 <makeTime+0x184>)
 8009cac:	4694      	mov	ip, r2
 8009cae:	4463      	add	r3, ip
 8009cb0:	2164      	movs	r1, #100	@ 0x64
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f7f6 fbe6 	bl	8000484 <__aeabi_idivmod>
 8009cb8:	1e0b      	subs	r3, r1, #0
 8009cba:	d10b      	bne.n	8009cd4 <makeTime+0xd8>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	78db      	ldrb	r3, [r3, #3]
 8009cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8009d80 <makeTime+0x184>)
 8009cc2:	4694      	mov	ip, r2
 8009cc4:	4463      	add	r3, ip
 8009cc6:	22c8      	movs	r2, #200	@ 0xc8
 8009cc8:	0051      	lsls	r1, r2, #1
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f7f6 fbda 	bl	8000484 <__aeabi_idivmod>
 8009cd0:	1e0b      	subs	r3, r1, #0
 8009cd2:	d105      	bne.n	8009ce0 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d88 <makeTime+0x18c>)
 8009cd8:	4694      	mov	ip, r2
 8009cda:	4463      	add	r3, ip
 8009cdc:	60bb      	str	r3, [r7, #8]
 8009cde:	e010      	b.n	8009d02 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	4a29      	ldr	r2, [pc, #164]	@ (8009d8c <makeTime+0x190>)
 8009ce6:	5cd3      	ldrb	r3, [r2, r3]
 8009ce8:	001a      	movs	r2, r3
 8009cea:	0013      	movs	r3, r2
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	189b      	adds	r3, r3, r2
 8009cf0:	011a      	lsls	r2, r3, #4
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	0113      	lsls	r3, r2, #4
 8009cf6:	1a9b      	subs	r3, r3, r2
 8009cf8:	01db      	lsls	r3, r3, #7
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	189b      	adds	r3, r3, r2
 8009d00:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	785b      	ldrb	r3, [r3, #1]
 8009d0c:	001a      	movs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4293      	cmp	r3, r2
 8009d12:	dbbc      	blt.n	8009c8e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	789b      	ldrb	r3, [r3, #2]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	001a      	movs	r2, r3
 8009d1c:	0013      	movs	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	189b      	adds	r3, r3, r2
 8009d22:	011a      	lsls	r2, r3, #4
 8009d24:	1ad2      	subs	r2, r2, r3
 8009d26:	0113      	lsls	r3, r2, #4
 8009d28:	1a9b      	subs	r3, r3, r2
 8009d2a:	01db      	lsls	r3, r3, #7
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	001a      	movs	r2, r3
 8009d3a:	0013      	movs	r3, r2
 8009d3c:	011b      	lsls	r3, r3, #4
 8009d3e:	1a9b      	subs	r3, r3, r2
 8009d40:	011a      	lsls	r2, r3, #4
 8009d42:	1ad2      	subs	r2, r2, r3
 8009d44:	0113      	lsls	r3, r2, #4
 8009d46:	001a      	movs	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	785b      	ldrb	r3, [r3, #1]
 8009d52:	001a      	movs	r2, r3
 8009d54:	0013      	movs	r3, r2
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	189b      	adds	r3, r3, r2
 8009d62:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	789b      	ldrb	r3, [r3, #2]
 8009d68:	001a      	movs	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	189b      	adds	r3, r3, r2
 8009d6e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8009d70:	68bb      	ldr	r3, [r7, #8]
}
 8009d72:	0018      	movs	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	b004      	add	sp, #16
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	46c0      	nop			@ (mov r8, r8)
 8009d7c:	fffff84f 	.word	0xfffff84f
 8009d80:	000007b2 	.word	0x000007b2
 8009d84:	00015180 	.word	0x00015180
 8009d88:	00263b80 	.word	0x00263b80
 8009d8c:	0802d9c4 	.word	0x0802d9c4

08009d90 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009d90:	b590      	push	{r4, r7, lr}
 8009d92:	b089      	sub	sp, #36	@ 0x24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	213c      	movs	r1, #60	@ 0x3c
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7f6 fa83 	bl	80002b0 <__aeabi_uidivmod>
 8009daa:	000b      	movs	r3, r1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	213c      	movs	r1, #60	@ 0x3c
 8009db6:	0018      	movs	r0, r3
 8009db8:	f7f6 f9f4 	bl	80001a4 <__udivsi3>
 8009dbc:	0003      	movs	r3, r0
 8009dbe:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	213c      	movs	r1, #60	@ 0x3c
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f7f6 fa73 	bl	80002b0 <__aeabi_uidivmod>
 8009dca:	000b      	movs	r3, r1
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	213c      	movs	r1, #60	@ 0x3c
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7f6 f9e4 	bl	80001a4 <__udivsi3>
 8009ddc:	0003      	movs	r3, r0
 8009dde:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2118      	movs	r1, #24
 8009de4:	0018      	movs	r0, r3
 8009de6:	f7f6 fa63 	bl	80002b0 <__aeabi_uidivmod>
 8009dea:	000b      	movs	r3, r1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2118      	movs	r1, #24
 8009df6:	0018      	movs	r0, r3
 8009df8:	f7f6 f9d4 	bl	80001a4 <__udivsi3>
 8009dfc:	0003      	movs	r3, r0
 8009dfe:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	2107      	movs	r1, #7
 8009e06:	0018      	movs	r0, r3
 8009e08:	f7f6 fa52 	bl	80002b0 <__aeabi_uidivmod>
 8009e0c:	000b      	movs	r3, r1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	3301      	adds	r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009e18:	231f      	movs	r3, #31
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009e24:	e005      	b.n	8009e32 <breakPosixTime+0xa2>
    year++;
 8009e26:	211f      	movs	r1, #31
 8009e28:	187b      	adds	r3, r7, r1
 8009e2a:	781a      	ldrb	r2, [r3, #0]
 8009e2c:	187b      	adds	r3, r7, r1
 8009e2e:	3201      	adds	r2, #1
 8009e30:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009e32:	241f      	movs	r4, #31
 8009e34:	193b      	adds	r3, r7, r4
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	4a64      	ldr	r2, [pc, #400]	@ (8009fcc <breakPosixTime+0x23c>)
 8009e3a:	4694      	mov	ip, r2
 8009e3c:	4463      	add	r3, ip
 8009e3e:	001a      	movs	r2, r3
 8009e40:	2303      	movs	r3, #3
 8009e42:	4013      	ands	r3, r2
 8009e44:	d119      	bne.n	8009e7a <breakPosixTime+0xea>
 8009e46:	193b      	adds	r3, r7, r4
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	4a60      	ldr	r2, [pc, #384]	@ (8009fcc <breakPosixTime+0x23c>)
 8009e4c:	4694      	mov	ip, r2
 8009e4e:	4463      	add	r3, ip
 8009e50:	2164      	movs	r1, #100	@ 0x64
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7f6 fb16 	bl	8000484 <__aeabi_idivmod>
 8009e58:	1e0b      	subs	r3, r1, #0
 8009e5a:	d10b      	bne.n	8009e74 <breakPosixTime+0xe4>
 8009e5c:	193b      	adds	r3, r7, r4
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	4a5a      	ldr	r2, [pc, #360]	@ (8009fcc <breakPosixTime+0x23c>)
 8009e62:	4694      	mov	ip, r2
 8009e64:	4463      	add	r3, ip
 8009e66:	22c8      	movs	r2, #200	@ 0xc8
 8009e68:	0051      	lsls	r1, r2, #1
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f7f6 fb0a 	bl	8000484 <__aeabi_idivmod>
 8009e70:	1e0b      	subs	r3, r1, #0
 8009e72:	d102      	bne.n	8009e7a <breakPosixTime+0xea>
 8009e74:	23b7      	movs	r3, #183	@ 0xb7
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	e001      	b.n	8009e7e <breakPosixTime+0xee>
 8009e7a:	236e      	movs	r3, #110	@ 0x6e
 8009e7c:	33ff      	adds	r3, #255	@ 0xff
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	18d3      	adds	r3, r2, r3
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d9cc      	bls.n	8009e26 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	241f      	movs	r4, #31
 8009e90:	193a      	adds	r2, r7, r4
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009e96:	193b      	adds	r3, r7, r4
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8009fcc <breakPosixTime+0x23c>)
 8009e9c:	4694      	mov	ip, r2
 8009e9e:	4463      	add	r3, ip
 8009ea0:	001a      	movs	r2, r3
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	d119      	bne.n	8009edc <breakPosixTime+0x14c>
 8009ea8:	193b      	adds	r3, r7, r4
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	4a47      	ldr	r2, [pc, #284]	@ (8009fcc <breakPosixTime+0x23c>)
 8009eae:	4694      	mov	ip, r2
 8009eb0:	4463      	add	r3, ip
 8009eb2:	2164      	movs	r1, #100	@ 0x64
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f7f6 fae5 	bl	8000484 <__aeabi_idivmod>
 8009eba:	1e0b      	subs	r3, r1, #0
 8009ebc:	d10b      	bne.n	8009ed6 <breakPosixTime+0x146>
 8009ebe:	193b      	adds	r3, r7, r4
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4a42      	ldr	r2, [pc, #264]	@ (8009fcc <breakPosixTime+0x23c>)
 8009ec4:	4694      	mov	ip, r2
 8009ec6:	4463      	add	r3, ip
 8009ec8:	22c8      	movs	r2, #200	@ 0xc8
 8009eca:	0051      	lsls	r1, r2, #1
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f7f6 fad9 	bl	8000484 <__aeabi_idivmod>
 8009ed2:	1e0b      	subs	r3, r1, #0
 8009ed4:	d102      	bne.n	8009edc <breakPosixTime+0x14c>
 8009ed6:	23b7      	movs	r3, #183	@ 0xb7
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	e001      	b.n	8009ee0 <breakPosixTime+0x150>
 8009edc:	236e      	movs	r3, #110	@ 0x6e
 8009ede:	33ff      	adds	r3, #255	@ 0xff
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	61bb      	str	r3, [r7, #24]

  days=0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  month=0;
 8009ef2:	211e      	movs	r1, #30
 8009ef4:	187b      	adds	r3, r7, r1
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009efa:	231d      	movs	r3, #29
 8009efc:	18fb      	adds	r3, r7, r3
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8009f02:	187b      	adds	r3, r7, r1
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e048      	b.n	8009f9c <breakPosixTime+0x20c>
    if (month==1) { // february
 8009f0a:	231e      	movs	r3, #30
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d12a      	bne.n	8009f6a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009f14:	241f      	movs	r4, #31
 8009f16:	193b      	adds	r3, r7, r4
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8009fcc <breakPosixTime+0x23c>)
 8009f1c:	4694      	mov	ip, r2
 8009f1e:	4463      	add	r3, ip
 8009f20:	001a      	movs	r2, r3
 8009f22:	2303      	movs	r3, #3
 8009f24:	4013      	ands	r3, r2
 8009f26:	d11b      	bne.n	8009f60 <breakPosixTime+0x1d0>
 8009f28:	193b      	adds	r3, r7, r4
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	4a27      	ldr	r2, [pc, #156]	@ (8009fcc <breakPosixTime+0x23c>)
 8009f2e:	4694      	mov	ip, r2
 8009f30:	4463      	add	r3, ip
 8009f32:	2164      	movs	r1, #100	@ 0x64
 8009f34:	0018      	movs	r0, r3
 8009f36:	f7f6 faa5 	bl	8000484 <__aeabi_idivmod>
 8009f3a:	1e0b      	subs	r3, r1, #0
 8009f3c:	d10b      	bne.n	8009f56 <breakPosixTime+0x1c6>
 8009f3e:	193b      	adds	r3, r7, r4
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	4a22      	ldr	r2, [pc, #136]	@ (8009fcc <breakPosixTime+0x23c>)
 8009f44:	4694      	mov	ip, r2
 8009f46:	4463      	add	r3, ip
 8009f48:	22c8      	movs	r2, #200	@ 0xc8
 8009f4a:	0051      	lsls	r1, r2, #1
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f7f6 fa99 	bl	8000484 <__aeabi_idivmod>
 8009f52:	1e0b      	subs	r3, r1, #0
 8009f54:	d104      	bne.n	8009f60 <breakPosixTime+0x1d0>
        monthLength=29;
 8009f56:	231d      	movs	r3, #29
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	221d      	movs	r2, #29
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	e00c      	b.n	8009f7a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8009f60:	231d      	movs	r3, #29
 8009f62:	18fb      	adds	r3, r7, r3
 8009f64:	221c      	movs	r2, #28
 8009f66:	701a      	strb	r2, [r3, #0]
 8009f68:	e007      	b.n	8009f7a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8009f6a:	231e      	movs	r3, #30
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	231d      	movs	r3, #29
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	4916      	ldr	r1, [pc, #88]	@ (8009fd0 <breakPosixTime+0x240>)
 8009f76:	5c8a      	ldrb	r2, [r1, r2]
 8009f78:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8009f7a:	211d      	movs	r1, #29
 8009f7c:	187b      	adds	r3, r7, r1
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d310      	bcc.n	8009fa8 <breakPosixTime+0x218>
      time -= monthLength;
 8009f86:	187b      	adds	r3, r7, r1
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8009f90:	211e      	movs	r1, #30
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	3201      	adds	r2, #1
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	231e      	movs	r3, #30
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b0b      	cmp	r3, #11
 8009fa4:	d9b1      	bls.n	8009f0a <breakPosixTime+0x17a>
 8009fa6:	e000      	b.n	8009faa <breakPosixTime+0x21a>
    } else {
        break;
 8009fa8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009faa:	231e      	movs	r3, #30
 8009fac:	18fb      	adds	r3, r7, r3
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	709a      	strb	r2, [r3, #2]
}
 8009fc4:	46c0      	nop			@ (mov r8, r8)
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b009      	add	sp, #36	@ 0x24
 8009fca:	bd90      	pop	{r4, r7, pc}
 8009fcc:	000007b2 	.word	0x000007b2
 8009fd0:	0802d9c4 	.word	0x0802d9c4

08009fd4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009fda:	003b      	movs	r3, r7
 8009fdc:	0018      	movs	r0, r3
 8009fde:	2308      	movs	r3, #8
 8009fe0:	001a      	movs	r2, r3
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	f01b fbca 	bl	802577c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009fe8:	4b30      	ldr	r3, [pc, #192]	@ (800a0ac <MX_ADC_Init+0xd8>)
 8009fea:	4a31      	ldr	r2, [pc, #196]	@ (800a0b0 <MX_ADC_Init+0xdc>)
 8009fec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009fee:	4b2f      	ldr	r3, [pc, #188]	@ (800a0ac <MX_ADC_Init+0xd8>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009ff4:	4b2d      	ldr	r3, [pc, #180]	@ (800a0ac <MX_ADC_Init+0xd8>)
 8009ff6:	22c0      	movs	r2, #192	@ 0xc0
 8009ff8:	0612      	lsls	r2, r2, #24
 8009ffa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009ffc:	4b2b      	ldr	r3, [pc, #172]	@ (800a0ac <MX_ADC_Init+0xd8>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a002:	4b2a      	ldr	r3, [pc, #168]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a004:	2200      	movs	r2, #0
 800a006:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800a008:	4b28      	ldr	r3, [pc, #160]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a00a:	2201      	movs	r2, #1
 800a00c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a00e:	4b27      	ldr	r3, [pc, #156]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a010:	2200      	movs	r2, #0
 800a012:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800a014:	4b25      	ldr	r3, [pc, #148]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a016:	2220      	movs	r2, #32
 800a018:	2100      	movs	r1, #0
 800a01a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800a01c:	4b23      	ldr	r3, [pc, #140]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a01e:	2221      	movs	r2, #33	@ 0x21
 800a020:	2101      	movs	r1, #1
 800a022:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a024:	4b21      	ldr	r3, [pc, #132]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a026:	2200      	movs	r2, #0
 800a028:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a02a:	4b20      	ldr	r3, [pc, #128]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a02c:	22c2      	movs	r2, #194	@ 0xc2
 800a02e:	32ff      	adds	r2, #255	@ 0xff
 800a030:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800a032:	4b1e      	ldr	r3, [pc, #120]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a034:	222c      	movs	r2, #44	@ 0x2c
 800a036:	2100      	movs	r1, #0
 800a038:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a03a:	4b1c      	ldr	r3, [pc, #112]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a03c:	2204      	movs	r2, #4
 800a03e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a040:	4b1a      	ldr	r3, [pc, #104]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800a046:	4b19      	ldr	r3, [pc, #100]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a048:	2200      	movs	r2, #0
 800a04a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800a04c:	4b17      	ldr	r3, [pc, #92]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a04e:	2200      	movs	r2, #0
 800a050:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800a052:	4b16      	ldr	r3, [pc, #88]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a054:	2200      	movs	r2, #0
 800a056:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a058:	4b14      	ldr	r3, [pc, #80]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a05a:	0018      	movs	r0, r3
 800a05c:	f009 fe42 	bl	8013ce4 <HAL_ADC_Init>
 800a060:	1e03      	subs	r3, r0, #0
 800a062:	d001      	beq.n	800a068 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a064:	f002 fc34 	bl	800c8d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a068:	003b      	movs	r3, r7
 800a06a:	4a12      	ldr	r2, [pc, #72]	@ (800a0b4 <MX_ADC_Init+0xe0>)
 800a06c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a06e:	003b      	movs	r3, r7
 800a070:	2280      	movs	r2, #128	@ 0x80
 800a072:	0152      	lsls	r2, r2, #5
 800a074:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a076:	003a      	movs	r2, r7
 800a078:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a07a:	0011      	movs	r1, r2
 800a07c:	0018      	movs	r0, r3
 800a07e:	f00a f8a1 	bl	80141c4 <HAL_ADC_ConfigChannel>
 800a082:	1e03      	subs	r3, r0, #0
 800a084:	d001      	beq.n	800a08a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a086:	f002 fc23 	bl	800c8d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a08a:	003b      	movs	r3, r7
 800a08c:	4a0a      	ldr	r2, [pc, #40]	@ (800a0b8 <MX_ADC_Init+0xe4>)
 800a08e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a090:	003a      	movs	r2, r7
 800a092:	4b06      	ldr	r3, [pc, #24]	@ (800a0ac <MX_ADC_Init+0xd8>)
 800a094:	0011      	movs	r1, r2
 800a096:	0018      	movs	r0, r3
 800a098:	f00a f894 	bl	80141c4 <HAL_ADC_ConfigChannel>
 800a09c:	1e03      	subs	r3, r0, #0
 800a09e:	d001      	beq.n	800a0a4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a0a0:	f002 fc16 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20000b74 	.word	0x20000b74
 800a0b0:	40012400 	.word	0x40012400
 800a0b4:	38004000 	.word	0x38004000
 800a0b8:	3c008000 	.word	0x3c008000

0800a0bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b089      	sub	sp, #36	@ 0x24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0c4:	240c      	movs	r4, #12
 800a0c6:	193b      	adds	r3, r7, r4
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	2314      	movs	r3, #20
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f01b fb54 	bl	802577c <memset>
  if(adcHandle->Instance==ADC1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a14      	ldr	r2, [pc, #80]	@ (800a12c <HAL_ADC_MspInit+0x70>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d121      	bne.n	800a122 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a0de:	4b14      	ldr	r3, [pc, #80]	@ (800a130 <HAL_ADC_MspInit+0x74>)
 800a0e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0e2:	4b13      	ldr	r3, [pc, #76]	@ (800a130 <HAL_ADC_MspInit+0x74>)
 800a0e4:	2180      	movs	r1, #128	@ 0x80
 800a0e6:	0089      	lsls	r1, r1, #2
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0ec:	4b10      	ldr	r3, [pc, #64]	@ (800a130 <HAL_ADC_MspInit+0x74>)
 800a0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a130 <HAL_ADC_MspInit+0x74>)
 800a0f2:	2104      	movs	r1, #4
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a130 <HAL_ADC_MspInit+0x74>)
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	4013      	ands	r3, r2
 800a100:	60bb      	str	r3, [r7, #8]
 800a102:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a104:	193b      	adds	r3, r7, r4
 800a106:	2230      	movs	r2, #48	@ 0x30
 800a108:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a10a:	193b      	adds	r3, r7, r4
 800a10c:	2203      	movs	r2, #3
 800a10e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a110:	193b      	adds	r3, r7, r4
 800a112:	2200      	movs	r2, #0
 800a114:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a116:	193b      	adds	r3, r7, r4
 800a118:	4a06      	ldr	r2, [pc, #24]	@ (800a134 <HAL_ADC_MspInit+0x78>)
 800a11a:	0019      	movs	r1, r3
 800a11c:	0010      	movs	r0, r2
 800a11e:	f00a fe6f 	bl	8014e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a122:	46c0      	nop			@ (mov r8, r8)
 800a124:	46bd      	mov	sp, r7
 800a126:	b009      	add	sp, #36	@ 0x24
 800a128:	bd90      	pop	{r4, r7, pc}
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	40012400 	.word	0x40012400
 800a130:	40021000 	.word	0x40021000
 800a134:	50000800 	.word	0x50000800

0800a138 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6039      	str	r1, [r7, #0]
 800a140:	0011      	movs	r1, r2
 800a142:	1dfb      	adds	r3, r7, #7
 800a144:	1c02      	adds	r2, r0, #0
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	1dbb      	adds	r3, r7, #6
 800a14a:	1c0a      	adds	r2, r1, #0
 800a14c:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a14e:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <ReadDirRegister+0x40>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a156:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <ReadDirRegister+0x40>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1dba      	adds	r2, r7, #6
 800a15c:	7814      	ldrb	r4, [r2, #0]
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	1dfa      	adds	r2, r7, #7
 800a162:	7810      	ldrb	r0, [r2, #0]
 800a164:	0022      	movs	r2, r4
 800a166:	4798      	blx	r3
 800a168:	0003      	movs	r3, r0
 800a16a:	e000      	b.n	800a16e <ReadDirRegister+0x36>
  }
  return false;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	0018      	movs	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	b003      	add	sp, #12
 800a174:	bd90      	pop	{r4, r7, pc}
 800a176:	46c0      	nop			@ (mov r8, r8)
 800a178:	20000bdc 	.word	0x20000bdc

0800a17c <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6039      	str	r1, [r7, #0]
 800a184:	0011      	movs	r1, r2
 800a186:	1dfb      	adds	r3, r7, #7
 800a188:	1c02      	adds	r2, r0, #0
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	1dbb      	adds	r3, r7, #6
 800a18e:	1c0a      	adds	r2, r1, #0
 800a190:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a192:	4b0a      	ldr	r3, [pc, #40]	@ (800a1bc <ReadRegister+0x40>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a19a:	4b08      	ldr	r3, [pc, #32]	@ (800a1bc <ReadRegister+0x40>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	1dba      	adds	r2, r7, #6
 800a1a0:	7814      	ldrb	r4, [r2, #0]
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	1dfa      	adds	r2, r7, #7
 800a1a6:	7810      	ldrb	r0, [r2, #0]
 800a1a8:	0022      	movs	r2, r4
 800a1aa:	4798      	blx	r3
 800a1ac:	0003      	movs	r3, r0
 800a1ae:	e000      	b.n	800a1b2 <ReadRegister+0x36>
  }
  return false;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b003      	add	sp, #12
 800a1b8:	bd90      	pop	{r4, r7, pc}
 800a1ba:	46c0      	nop			@ (mov r8, r8)
 800a1bc:	20000bd4 	.word	0x20000bd4

0800a1c0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a1c0:	b590      	push	{r4, r7, lr}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6039      	str	r1, [r7, #0]
 800a1c8:	0011      	movs	r1, r2
 800a1ca:	1dfb      	adds	r3, r7, #7
 800a1cc:	1c02      	adds	r2, r0, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	1dbb      	adds	r3, r7, #6
 800a1d2:	1c0a      	adds	r2, r1, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a200 <WriteRegister+0x40>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a1de:	4b08      	ldr	r3, [pc, #32]	@ (800a200 <WriteRegister+0x40>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	1dba      	adds	r2, r7, #6
 800a1e4:	7814      	ldrb	r4, [r2, #0]
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	1dfa      	adds	r2, r7, #7
 800a1ea:	7810      	ldrb	r0, [r2, #0]
 800a1ec:	0022      	movs	r2, r4
 800a1ee:	4798      	blx	r3
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	e000      	b.n	800a1f6 <WriteRegister+0x36>
  }
  return false;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	b003      	add	sp, #12
 800a1fc:	bd90      	pop	{r4, r7, pc}
 800a1fe:	46c0      	nop			@ (mov r8, r8)
 800a200:	20000bd8 	.word	0x20000bd8

0800a204 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	000a      	movs	r2, r1
 800a20e:	1cfb      	adds	r3, r7, #3
 800a210:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a212:	230f      	movs	r3, #15
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	22ff      	movs	r2, #255	@ 0xff
 800a218:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a21a:	230e      	movs	r3, #14
 800a21c:	18fb      	adds	r3, r7, r3
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	e038      	b.n	800a296 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a224:	230e      	movs	r3, #14
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	18d3      	adds	r3, r2, r3
 800a22e:	7819      	ldrb	r1, [r3, #0]
 800a230:	220f      	movs	r2, #15
 800a232:	18bb      	adds	r3, r7, r2
 800a234:	18ba      	adds	r2, r7, r2
 800a236:	7812      	ldrb	r2, [r2, #0]
 800a238:	404a      	eors	r2, r1
 800a23a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a23c:	230d      	movs	r3, #13
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	2200      	movs	r2, #0
 800a242:	701a      	strb	r2, [r3, #0]
 800a244:	e01c      	b.n	800a280 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a246:	210f      	movs	r1, #15
 800a248:	187b      	adds	r3, r7, r1
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b25b      	sxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da0a      	bge.n	800a268 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a252:	187b      	adds	r3, r7, r1
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	b25b      	sxtb	r3, r3
 800a258:	18db      	adds	r3, r3, r3
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	2231      	movs	r2, #49	@ 0x31
 800a25e:	4053      	eors	r3, r2
 800a260:	b25a      	sxtb	r2, r3
 800a262:	187b      	adds	r3, r7, r1
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e005      	b.n	800a274 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a268:	230f      	movs	r3, #15
 800a26a:	18fa      	adds	r2, r7, r3
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	18db      	adds	r3, r3, r3
 800a272:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a274:	210d      	movs	r1, #13
 800a276:	187b      	adds	r3, r7, r1
 800a278:	781a      	ldrb	r2, [r3, #0]
 800a27a:	187b      	adds	r3, r7, r1
 800a27c:	3201      	adds	r2, #1
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	230d      	movs	r3, #13
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b07      	cmp	r3, #7
 800a288:	d9dd      	bls.n	800a246 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a28a:	210e      	movs	r1, #14
 800a28c:	187b      	adds	r3, r7, r1
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	187b      	adds	r3, r7, r1
 800a292:	3201      	adds	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	230e      	movs	r3, #14
 800a298:	18fa      	adds	r2, r7, r3
 800a29a:	1cfb      	adds	r3, r7, #3
 800a29c:	7812      	ldrb	r2, [r2, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d3bf      	bcc.n	800a224 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a2a4:	230f      	movs	r3, #15
 800a2a6:	18fb      	adds	r3, r7, r3
 800a2a8:	781b      	ldrb	r3, [r3, #0]
}
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	b004      	add	sp, #16
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a2bc:	f009 fcaa 	bl	8013c14 <HAL_GetTick>
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	18d2      	adds	r2, r2, r3
 800a2c6:	4b03      	ldr	r3, [pc, #12]	@ (800a2d4 <setAHT20TimeStamp+0x20>)
 800a2c8:	601a      	str	r2, [r3, #0]
}
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	b002      	add	sp, #8
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	46c0      	nop			@ (mov r8, r8)
 800a2d4:	20000bd0 	.word	0x20000bd0

0800a2d8 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a2e4:	4b06      	ldr	r3, [pc, #24]	@ (800a300 <AHT_Init+0x28>)
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a2ea:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <AHT_Init+0x2c>)
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a2f0:	4b05      	ldr	r3, [pc, #20]	@ (800a308 <AHT_Init+0x30>)
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	601a      	str	r2, [r3, #0]
}
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b004      	add	sp, #16
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	46c0      	nop			@ (mov r8, r8)
 800a300:	20000bdc 	.word	0x20000bdc
 800a304:	20000bd4 	.word	0x20000bd4
 800a308:	20000bd8 	.word	0x20000bd8

0800a30c <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af02      	add	r7, sp, #8
 800a312:	0002      	movs	r2, r0
 800a314:	1dfb      	adds	r3, r7, #7
 800a316:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a318:	4b18      	ldr	r3, [pc, #96]	@ (800a37c <AHT20_register_reset+0x70>)
 800a31a:	1dfa      	adds	r2, r7, #7
 800a31c:	7812      	ldrb	r2, [r2, #0]
 800a31e:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a320:	4b16      	ldr	r3, [pc, #88]	@ (800a37c <AHT20_register_reset+0x70>)
 800a322:	2203      	movs	r2, #3
 800a324:	0019      	movs	r1, r3
 800a326:	2038      	movs	r0, #56	@ 0x38
 800a328:	f7ff ff4a 	bl	800a1c0 <WriteRegister>
  HAL_Delay(15);
 800a32c:	200f      	movs	r0, #15
 800a32e:	f009 fc7b 	bl	8013c28 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a332:	4b13      	ldr	r3, [pc, #76]	@ (800a380 <AHT20_register_reset+0x74>)
 800a334:	2203      	movs	r2, #3
 800a336:	0019      	movs	r1, r3
 800a338:	2038      	movs	r0, #56	@ 0x38
 800a33a:	f7ff ff1f 	bl	800a17c <ReadRegister>
  HAL_Delay(15);
 800a33e:	200f      	movs	r0, #15
 800a340:	f009 fc72 	bl	8013c28 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a344:	4b0e      	ldr	r3, [pc, #56]	@ (800a380 <AHT20_register_reset+0x74>)
 800a346:	22b0      	movs	r2, #176	@ 0xb0
 800a348:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a34a:	4b0d      	ldr	r3, [pc, #52]	@ (800a380 <AHT20_register_reset+0x74>)
 800a34c:	789b      	ldrb	r3, [r3, #2]
 800a34e:	0018      	movs	r0, r3
 800a350:	4b0b      	ldr	r3, [pc, #44]	@ (800a380 <AHT20_register_reset+0x74>)
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	4a0b      	ldr	r2, [pc, #44]	@ (800a384 <AHT20_register_reset+0x78>)
 800a356:	490c      	ldr	r1, [pc, #48]	@ (800a388 <AHT20_register_reset+0x7c>)
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	0003      	movs	r3, r0
 800a35c:	2003      	movs	r0, #3
 800a35e:	f008 ff19 	bl	8013194 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a362:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <AHT20_register_reset+0x74>)
 800a364:	2203      	movs	r2, #3
 800a366:	0019      	movs	r1, r3
 800a368:	2038      	movs	r0, #56	@ 0x38
 800a36a:	f7ff ff29 	bl	800a1c0 <WriteRegister>
  HAL_Delay(15);
 800a36e:	200f      	movs	r0, #15
 800a370:	f009 fc5a 	bl	8013c28 <HAL_Delay>
}
 800a374:	46c0      	nop			@ (mov r8, r8)
 800a376:	46bd      	mov	sp, r7
 800a378:	b002      	add	sp, #8
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20000090 	.word	0x20000090
 800a380:	20000be0 	.word	0x20000be0
 800a384:	0802b880 	.word	0x0802b880
 800a388:	0802b8d0 	.word	0x0802b8d0

0800a38c <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800a390:	201b      	movs	r0, #27
 800a392:	f7ff ffbb 	bl	800a30c <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800a396:	201c      	movs	r0, #28
 800a398:	f7ff ffb8 	bl	800a30c <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800a39c:	201e      	movs	r0, #30
 800a39e:	f7ff ffb5 	bl	800a30c <AHT20_register_reset>
}
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <AHT20_read_status+0x38>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	0019      	movs	r1, r3
 800a3b2:	2038      	movs	r0, #56	@ 0x38
 800a3b4:	f7ff ff04 	bl	800a1c0 <WriteRegister>
  HAL_Delay(10);
 800a3b8:	200a      	movs	r0, #10
 800a3ba:	f009 fc35 	bl	8013c28 <HAL_Delay>
  airtemphumraw[0] = 0;
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <AHT20_read_status+0x3c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800a3c4:	4b07      	ldr	r3, [pc, #28]	@ (800a3e4 <AHT20_read_status+0x3c>)
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	0019      	movs	r1, r3
 800a3ca:	2038      	movs	r0, #56	@ 0x38
 800a3cc:	f7ff fed6 	bl	800a17c <ReadRegister>
  HAL_Delay(10);
 800a3d0:	200a      	movs	r0, #10
 800a3d2:	f009 fc29 	bl	8013c28 <HAL_Delay>
  return airtemphumraw[0];
 800a3d6:	4b03      	ldr	r3, [pc, #12]	@ (800a3e4 <AHT20_read_status+0x3c>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
}
 800a3da:	0018      	movs	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	2000008c 	.word	0x2000008c
 800a3e4:	20000be0 	.word	0x20000be0

0800a3e8 <AHT20_init>:

bool AHT20_init(void) {
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800a3ee:	f009 fc11 	bl	8013c14 <HAL_GetTick>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b77      	cmp	r3, #119	@ 0x77
 800a3fa:	d805      	bhi.n	800a408 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2278      	movs	r2, #120	@ 0x78
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	0018      	movs	r0, r3
 800a404:	f009 fc10 	bl	8013c28 <HAL_Delay>
  }
  AHT20_read_status();
 800a408:	f7ff ffce 	bl	800a3a8 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800a40c:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <AHT20_init+0x60>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	4a0e      	ldr	r2, [pc, #56]	@ (800a44c <AHT20_init+0x64>)
 800a412:	490f      	ldr	r1, [pc, #60]	@ (800a450 <AHT20_init+0x68>)
 800a414:	2003      	movs	r0, #3
 800a416:	f008 febd 	bl	8013194 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800a41a:	4b0b      	ldr	r3, [pc, #44]	@ (800a448 <AHT20_init+0x60>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	001a      	movs	r2, r3
 800a420:	2318      	movs	r3, #24
 800a422:	4013      	ands	r3, r2
 800a424:	2b18      	cmp	r3, #24
 800a426:	d00a      	beq.n	800a43e <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800a428:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <AHT20_init+0x6c>)
 800a42a:	2203      	movs	r2, #3
 800a42c:	0019      	movs	r1, r3
 800a42e:	2038      	movs	r0, #56	@ 0x38
 800a430:	f7ff fec6 	bl	800a1c0 <WriteRegister>
    HAL_Delay(10);
 800a434:	200a      	movs	r0, #10
 800a436:	f009 fbf7 	bl	8013c28 <HAL_Delay>
    AHT20_Start_Init();
 800a43a:	f7ff ffa7 	bl	800a38c <AHT20_Start_Init>
  }
  return true;
 800a43e:	2301      	movs	r3, #1
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000be0 	.word	0x20000be0
 800a44c:	0802b8d4 	.word	0x0802b8d4
 800a450:	0802b8d0 	.word	0x0802b8d0
 800a454:	20000084 	.word	0x20000084

0800a458 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800a458:	b590      	push	{r4, r7, lr}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a45e:	1dfc      	adds	r4, r7, #7
 800a460:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <AHT20_calibrate+0x4c>)
 800a462:	2201      	movs	r2, #1
 800a464:	0019      	movs	r1, r3
 800a466:	2038      	movs	r0, #56	@ 0x38
 800a468:	f7ff feaa 	bl	800a1c0 <WriteRegister>
 800a46c:	0003      	movs	r3, r0
 800a46e:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800a470:	1dfb      	adds	r3, r7, #7
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2201      	movs	r2, #1
 800a476:	4053      	eors	r3, r2
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800a47e:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a8 <AHT20_calibrate+0x50>)
 800a480:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <AHT20_calibrate+0x54>)
 800a482:	0019      	movs	r1, r3
 800a484:	2001      	movs	r0, #1
 800a486:	f008 fe85 	bl	8013194 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a48a:	f009 fbc3 	bl	8013c14 <HAL_GetTick>
 800a48e:	0003      	movs	r3, r0
 800a490:	3332      	adds	r3, #50	@ 0x32
 800a492:	001a      	movs	r2, r3
 800a494:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <AHT20_calibrate+0x58>)
 800a496:	601a      	str	r2, [r3, #0]
  return response;
 800a498:	1dfb      	adds	r3, r7, #7
 800a49a:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a49c:	0018      	movs	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	b003      	add	sp, #12
 800a4a2:	bd90      	pop	{r4, r7, pc}
 800a4a4:	2000008c 	.word	0x2000008c
 800a4a8:	0802b8fc 	.word	0x0802b8fc
 800a4ac:	0802b934 	.word	0x0802b934
 800a4b0:	20000bd0 	.word	0x20000bd0

0800a4b4 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a4b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e4 <AHT20_DeviceConnected+0x30>)
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e8 <AHT20_DeviceConnected+0x34>)
 800a4bc:	0019      	movs	r1, r3
 800a4be:	2003      	movs	r0, #3
 800a4c0:	f008 fe68 	bl	8013194 <CreateLine>
   AHT20_init();
 800a4c4:	f7ff ff90 	bl	800a3e8 <AHT20_init>
   HAL_Delay(10);
 800a4c8:	200a      	movs	r0, #10
 800a4ca:	f009 fbad 	bl	8013c28 <HAL_Delay>
   AHT20_calibrate();
 800a4ce:	f7ff ffc3 	bl	800a458 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a4d2:	f7ff ff69 	bl	800a3a8 <AHT20_read_status>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	1e5a      	subs	r2, r3, #1
 800a4da:	4193      	sbcs	r3, r2
 800a4dc:	b2db      	uxtb	r3, r3
 }
 800a4de:	0018      	movs	r0, r3
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	0802b938 	.word	0x0802b938
 800a4e8:	0802b8d0 	.word	0x0802b8d0

0800a4ec <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a4ec:	b590      	push	{r4, r7, lr}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a4f2:	1dfc      	adds	r4, r7, #7
 800a4f4:	4b10      	ldr	r3, [pc, #64]	@ (800a538 <AHT20_StartMeasurement+0x4c>)
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	0019      	movs	r1, r3
 800a4fa:	2038      	movs	r0, #56	@ 0x38
 800a4fc:	f7ff fe60 	bl	800a1c0 <WriteRegister>
 800a500:	0003      	movs	r3, r0
 800a502:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a504:	1dfb      	adds	r3, r7, #7
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2201      	movs	r2, #1
 800a50a:	4053      	eors	r3, r2
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d005      	beq.n	800a51e <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a512:	4a0a      	ldr	r2, [pc, #40]	@ (800a53c <AHT20_StartMeasurement+0x50>)
 800a514:	4b0a      	ldr	r3, [pc, #40]	@ (800a540 <AHT20_StartMeasurement+0x54>)
 800a516:	0019      	movs	r1, r3
 800a518:	2001      	movs	r0, #1
 800a51a:	f008 fe3b 	bl	8013194 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a51e:	f009 fb79 	bl	8013c14 <HAL_GetTick>
 800a522:	0003      	movs	r3, r0
 800a524:	33fa      	adds	r3, #250	@ 0xfa
 800a526:	001a      	movs	r2, r3
 800a528:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <AHT20_StartMeasurement+0x58>)
 800a52a:	601a      	str	r2, [r3, #0]
  return response;
 800a52c:	1dfb      	adds	r3, r7, #7
 800a52e:	781b      	ldrb	r3, [r3, #0]
}
 800a530:	0018      	movs	r0, r3
 800a532:	46bd      	mov	sp, r7
 800a534:	b003      	add	sp, #12
 800a536:	bd90      	pop	{r4, r7, pc}
 800a538:	20000088 	.word	0x20000088
 800a53c:	0802b950 	.word	0x0802b950
 800a540:	0802b934 	.word	0x0802b934
 800a544:	20000bd0 	.word	0x20000bd0

0800a548 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a54e:	f009 fb61 	bl	8013c14 <HAL_GetTick>
 800a552:	0003      	movs	r3, r0
 800a554:	22fa      	movs	r2, #250	@ 0xfa
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	189a      	adds	r2, r3, r2
 800a55a:	4b2c      	ldr	r3, [pc, #176]	@ (800a60c <AHT20_GetMeasurementValues+0xc4>)
 800a55c:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a55e:	e01f      	b.n	800a5a0 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a560:	4a2b      	ldr	r2, [pc, #172]	@ (800a610 <AHT20_GetMeasurementValues+0xc8>)
 800a562:	4b2c      	ldr	r3, [pc, #176]	@ (800a614 <AHT20_GetMeasurementValues+0xcc>)
 800a564:	0019      	movs	r1, r3
 800a566:	2002      	movs	r0, #2
 800a568:	f008 fe14 	bl	8013194 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a56c:	4b27      	ldr	r3, [pc, #156]	@ (800a60c <AHT20_GetMeasurementValues+0xc4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	0018      	movs	r0, r3
 800a572:	f008 fdb9 	bl	80130e8 <TimestampIsReached>
 800a576:	1e03      	subs	r3, r0, #0
 800a578:	d00f      	beq.n	800a59a <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a57a:	4a27      	ldr	r2, [pc, #156]	@ (800a618 <AHT20_GetMeasurementValues+0xd0>)
 800a57c:	4b27      	ldr	r3, [pc, #156]	@ (800a61c <AHT20_GetMeasurementValues+0xd4>)
 800a57e:	0019      	movs	r1, r3
 800a580:	2001      	movs	r0, #1
 800a582:	f008 fe07 	bl	8013194 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a586:	f009 fb45 	bl	8013c14 <HAL_GetTick>
 800a58a:	0003      	movs	r3, r0
 800a58c:	22fa      	movs	r2, #250	@ 0xfa
 800a58e:	00d2      	lsls	r2, r2, #3
 800a590:	189a      	adds	r2, r3, r2
 800a592:	4b1e      	ldr	r3, [pc, #120]	@ (800a60c <AHT20_GetMeasurementValues+0xc4>)
 800a594:	601a      	str	r2, [r3, #0]
      return false;
 800a596:	2300      	movs	r3, #0
 800a598:	e034      	b.n	800a604 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a59a:	200a      	movs	r0, #10
 800a59c:	f009 fb44 	bl	8013c28 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a5a0:	f7ff ff02 	bl	800a3a8 <AHT20_read_status>
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	001a      	movs	r2, r3
 800a5a8:	2380      	movs	r3, #128	@ 0x80
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b80      	cmp	r3, #128	@ 0x80
 800a5ae:	d0d7      	beq.n	800a560 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a5b0:	200a      	movs	r0, #10
 800a5b2:	f009 fb39 	bl	8013c28 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a5b6:	1dfb      	adds	r3, r7, #7
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e009      	b.n	800a5d2 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a5be:	1dfb      	adds	r3, r7, #7
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4a17      	ldr	r2, [pc, #92]	@ (800a620 <AHT20_GetMeasurementValues+0xd8>)
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a5c8:	1dfb      	adds	r3, r7, #7
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	1dfb      	adds	r3, r7, #7
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	1dfb      	adds	r3, r7, #7
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	2b06      	cmp	r3, #6
 800a5d8:	d9f1      	bls.n	800a5be <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a5da:	1dbc      	adds	r4, r7, #6
 800a5dc:	4b10      	ldr	r3, [pc, #64]	@ (800a620 <AHT20_GetMeasurementValues+0xd8>)
 800a5de:	2207      	movs	r2, #7
 800a5e0:	0019      	movs	r1, r3
 800a5e2:	2038      	movs	r0, #56	@ 0x38
 800a5e4:	f7ff fda8 	bl	800a138 <ReadDirRegister>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a5ec:	200a      	movs	r0, #10
 800a5ee:	f009 fb1b 	bl	8013c28 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a5f2:	f009 fb0f 	bl	8013c14 <HAL_GetTick>
 800a5f6:	0003      	movs	r3, r0
 800a5f8:	3364      	adds	r3, #100	@ 0x64
 800a5fa:	001a      	movs	r2, r3
 800a5fc:	4b03      	ldr	r3, [pc, #12]	@ (800a60c <AHT20_GetMeasurementValues+0xc4>)
 800a5fe:	601a      	str	r2, [r3, #0]
  return response;
 800a600:	1dbb      	adds	r3, r7, #6
 800a602:	781b      	ldrb	r3, [r3, #0]
}
 800a604:	0018      	movs	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	b003      	add	sp, #12
 800a60a:	bd90      	pop	{r4, r7, pc}
 800a60c:	20000bd0 	.word	0x20000bd0
 800a610:	0802b97c 	.word	0x0802b97c
 800a614:	0802b9a4 	.word	0x0802b9a4
 800a618:	0802b9a8 	.word	0x0802b9a8
 800a61c:	0802b934 	.word	0x0802b934
 800a620:	20000be0 	.word	0x20000be0

0800a624 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a626:	46c6      	mov	lr, r8
 800a628:	b500      	push	{lr}
 800a62a:	b08a      	sub	sp, #40	@ 0x28
 800a62c:	af06      	add	r7, sp, #24
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a632:	4b5a      	ldr	r3, [pc, #360]	@ (800a79c <AHT20_Calculate+0x178>)
 800a634:	799c      	ldrb	r4, [r3, #6]
 800a636:	4b59      	ldr	r3, [pc, #356]	@ (800a79c <AHT20_Calculate+0x178>)
 800a638:	2106      	movs	r1, #6
 800a63a:	0018      	movs	r0, r3
 800a63c:	f7ff fde2 	bl	800a204 <CalculateCRC>
 800a640:	0003      	movs	r3, r0
 800a642:	429c      	cmp	r4, r3
 800a644:	d044      	beq.n	800a6d0 <AHT20_Calculate+0xac>
 800a646:	4b55      	ldr	r3, [pc, #340]	@ (800a79c <AHT20_Calculate+0x178>)
 800a648:	799b      	ldrb	r3, [r3, #6]
 800a64a:	2bff      	cmp	r3, #255	@ 0xff
 800a64c:	d040      	beq.n	800a6d0 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a64e:	4b53      	ldr	r3, [pc, #332]	@ (800a79c <AHT20_Calculate+0x178>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	4698      	mov	r8, r3
 800a654:	4b51      	ldr	r3, [pc, #324]	@ (800a79c <AHT20_Calculate+0x178>)
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	0018      	movs	r0, r3
 800a65a:	4b50      	ldr	r3, [pc, #320]	@ (800a79c <AHT20_Calculate+0x178>)
 800a65c:	789b      	ldrb	r3, [r3, #2]
 800a65e:	001c      	movs	r4, r3
 800a660:	4b4e      	ldr	r3, [pc, #312]	@ (800a79c <AHT20_Calculate+0x178>)
 800a662:	78db      	ldrb	r3, [r3, #3]
 800a664:	001d      	movs	r5, r3
 800a666:	4b4d      	ldr	r3, [pc, #308]	@ (800a79c <AHT20_Calculate+0x178>)
 800a668:	791b      	ldrb	r3, [r3, #4]
 800a66a:	001e      	movs	r6, r3
 800a66c:	4b4b      	ldr	r3, [pc, #300]	@ (800a79c <AHT20_Calculate+0x178>)
 800a66e:	795b      	ldrb	r3, [r3, #5]
 800a670:	469c      	mov	ip, r3
 800a672:	4b4a      	ldr	r3, [pc, #296]	@ (800a79c <AHT20_Calculate+0x178>)
 800a674:	799b      	ldrb	r3, [r3, #6]
 800a676:	4a4a      	ldr	r2, [pc, #296]	@ (800a7a0 <AHT20_Calculate+0x17c>)
 800a678:	494a      	ldr	r1, [pc, #296]	@ (800a7a4 <AHT20_Calculate+0x180>)
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	4663      	mov	r3, ip
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	9603      	str	r6, [sp, #12]
 800a682:	9502      	str	r5, [sp, #8]
 800a684:	9401      	str	r4, [sp, #4]
 800a686:	9000      	str	r0, [sp, #0]
 800a688:	4643      	mov	r3, r8
 800a68a:	2003      	movs	r0, #3
 800a68c:	f008 fd82 	bl	8013194 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a690:	4b42      	ldr	r3, [pc, #264]	@ (800a79c <AHT20_Calculate+0x178>)
 800a692:	799b      	ldrb	r3, [r3, #6]
 800a694:	001c      	movs	r4, r3
 800a696:	4b41      	ldr	r3, [pc, #260]	@ (800a79c <AHT20_Calculate+0x178>)
 800a698:	2106      	movs	r1, #6
 800a69a:	0018      	movs	r0, r3
 800a69c:	f7ff fdb2 	bl	800a204 <CalculateCRC>
 800a6a0:	0003      	movs	r3, r0
 800a6a2:	4a41      	ldr	r2, [pc, #260]	@ (800a7a8 <AHT20_Calculate+0x184>)
 800a6a4:	4941      	ldr	r1, [pc, #260]	@ (800a7ac <AHT20_Calculate+0x188>)
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	0023      	movs	r3, r4
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	f008 fd72 	bl	8013194 <CreateLine>
    *airtemp = 0.0;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a6bc:	f009 faaa 	bl	8013c14 <HAL_GetTick>
 800a6c0:	0003      	movs	r3, r0
 800a6c2:	22fa      	movs	r2, #250	@ 0xfa
 800a6c4:	00d2      	lsls	r2, r2, #3
 800a6c6:	189a      	adds	r2, r3, r2
 800a6c8:	4b39      	ldr	r3, [pc, #228]	@ (800a7b0 <AHT20_Calculate+0x18c>)
 800a6ca:	601a      	str	r2, [r3, #0]
    return false;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e05f      	b.n	800a790 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a6d0:	4b38      	ldr	r3, [pc, #224]	@ (800a7b4 <AHT20_Calculate+0x190>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a6d6:	4b31      	ldr	r3, [pc, #196]	@ (800a79c <AHT20_Calculate+0x178>)
 800a6d8:	78db      	ldrb	r3, [r3, #3]
 800a6da:	041a      	lsls	r2, r3, #16
 800a6dc:	23f0      	movs	r3, #240	@ 0xf0
 800a6de:	031b      	lsls	r3, r3, #12
 800a6e0:	401a      	ands	r2, r3
 800a6e2:	4b2e      	ldr	r3, [pc, #184]	@ (800a79c <AHT20_Calculate+0x178>)
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	18d3      	adds	r3, r2, r3
 800a6ea:	4a2c      	ldr	r2, [pc, #176]	@ (800a79c <AHT20_Calculate+0x178>)
 800a6ec:	7952      	ldrb	r2, [r2, #5]
 800a6ee:	189b      	adds	r3, r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7f7 f8e8 	bl	80018c8 <__aeabi_ui2f>
 800a6f8:	1c03      	adds	r3, r0, #0
 800a6fa:	2193      	movs	r1, #147	@ 0x93
 800a6fc:	05c9      	lsls	r1, r1, #23
 800a6fe:	1c18      	adds	r0, r3, #0
 800a700:	f7f6 fad0 	bl	8000ca4 <__aeabi_fdiv>
 800a704:	1c03      	adds	r3, r0, #0
 800a706:	492c      	ldr	r1, [pc, #176]	@ (800a7b8 <AHT20_Calculate+0x194>)
 800a708:	1c18      	adds	r0, r3, #0
 800a70a:	f7f6 fc99 	bl	8001040 <__aeabi_fmul>
 800a70e:	1c03      	adds	r3, r0, #0
 800a710:	492a      	ldr	r1, [pc, #168]	@ (800a7bc <AHT20_Calculate+0x198>)
 800a712:	1c18      	adds	r0, r3, #0
 800a714:	f7f6 fdee 	bl	80012f4 <__aeabi_fsub>
 800a718:	1c03      	adds	r3, r0, #0
 800a71a:	1c1a      	adds	r2, r3, #0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a720:	4b1e      	ldr	r3, [pc, #120]	@ (800a79c <AHT20_Calculate+0x178>)
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	031a      	lsls	r2, r3, #12
 800a726:	4b1d      	ldr	r3, [pc, #116]	@ (800a79c <AHT20_Calculate+0x178>)
 800a728:	789b      	ldrb	r3, [r3, #2]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	18d3      	adds	r3, r2, r3
 800a72e:	4a1b      	ldr	r2, [pc, #108]	@ (800a79c <AHT20_Calculate+0x178>)
 800a730:	78d2      	ldrb	r2, [r2, #3]
 800a732:	0912      	lsrs	r2, r2, #4
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	189b      	adds	r3, r3, r2
 800a738:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a73a:	68b8      	ldr	r0, [r7, #8]
 800a73c:	f7f7 f8c4 	bl	80018c8 <__aeabi_ui2f>
 800a740:	1c03      	adds	r3, r0, #0
 800a742:	2193      	movs	r1, #147	@ 0x93
 800a744:	05c9      	lsls	r1, r1, #23
 800a746:	1c18      	adds	r0, r3, #0
 800a748:	f7f6 faac 	bl	8000ca4 <__aeabi_fdiv>
 800a74c:	1c03      	adds	r3, r0, #0
 800a74e:	491c      	ldr	r1, [pc, #112]	@ (800a7c0 <AHT20_Calculate+0x19c>)
 800a750:	1c18      	adds	r0, r3, #0
 800a752:	f7f6 fc75 	bl	8001040 <__aeabi_fmul>
 800a756:	1c03      	adds	r3, r0, #0
 800a758:	1c1a      	adds	r2, r3, #0
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	1c18      	adds	r0, r3, #0
 800a764:	f7f9 f896 	bl	8003894 <__aeabi_f2d>
 800a768:	0004      	movs	r4, r0
 800a76a:	000d      	movs	r5, r1
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	1c18      	adds	r0, r3, #0
 800a772:	f7f9 f88f 	bl	8003894 <__aeabi_f2d>
 800a776:	0002      	movs	r2, r0
 800a778:	000b      	movs	r3, r1
 800a77a:	4812      	ldr	r0, [pc, #72]	@ (800a7c4 <AHT20_Calculate+0x1a0>)
 800a77c:	4909      	ldr	r1, [pc, #36]	@ (800a7a4 <AHT20_Calculate+0x180>)
 800a77e:	9202      	str	r2, [sp, #8]
 800a780:	9303      	str	r3, [sp, #12]
 800a782:	9400      	str	r4, [sp, #0]
 800a784:	9501      	str	r5, [sp, #4]
 800a786:	0002      	movs	r2, r0
 800a788:	2003      	movs	r0, #3
 800a78a:	f008 fd03 	bl	8013194 <CreateLine>
  return true;
 800a78e:	2301      	movs	r3, #1
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b004      	add	sp, #16
 800a796:	bc80      	pop	{r7}
 800a798:	46b8      	mov	r8, r7
 800a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a79c:	20000be0 	.word	0x20000be0
 800a7a0:	0802b9cc 	.word	0x0802b9cc
 800a7a4:	0802b8d0 	.word	0x0802b8d0
 800a7a8:	0802ba4c 	.word	0x0802ba4c
 800a7ac:	0802b934 	.word	0x0802b934
 800a7b0:	20000bd0 	.word	0x20000bd0
 800a7b4:	20000be7 	.word	0x20000be7
 800a7b8:	43480000 	.word	0x43480000
 800a7bc:	42480000 	.word	0x42480000
 800a7c0:	42c80000 	.word	0x42c80000
 800a7c4:	0802ba74 	.word	0x0802ba74

0800a7c8 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a7ce:	4b54      	ldr	r3, [pc, #336]	@ (800a920 <AHT_Upkeep+0x158>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f008 fc88 	bl	80130e8 <TimestampIsReached>
 800a7d8:	0003      	movs	r3, r0
 800a7da:	001a      	movs	r2, r3
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4053      	eors	r3, r2
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <AHT_Upkeep+0x24>
    return AHTState;
 800a7e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	e094      	b.n	800a916 <AHT_Upkeep+0x14e>
  }
  switch(AHTState) {
 800a7ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	d86a      	bhi.n	800a8ca <AHT_Upkeep+0x102>
 800a7f4:	009a      	lsls	r2, r3, #2
 800a7f6:	4b4c      	ldr	r3, [pc, #304]	@ (800a928 <AHT_Upkeep+0x160>)
 800a7f8:	18d3      	adds	r3, r2, r3
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a7fe:	4a4b      	ldr	r2, [pc, #300]	@ (800a92c <AHT_Upkeep+0x164>)
 800a800:	4b4b      	ldr	r3, [pc, #300]	@ (800a930 <AHT_Upkeep+0x168>)
 800a802:	0019      	movs	r1, r3
 800a804:	2003      	movs	r0, #3
 800a806:	f008 fcc5 	bl	8013194 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a80a:	f009 fa03 	bl	8013c14 <HAL_GetTick>
 800a80e:	0003      	movs	r3, r0
 800a810:	4a48      	ldr	r2, [pc, #288]	@ (800a934 <AHT_Upkeep+0x16c>)
 800a812:	189a      	adds	r2, r3, r2
 800a814:	4b42      	ldr	r3, [pc, #264]	@ (800a920 <AHT_Upkeep+0x158>)
 800a816:	601a      	str	r2, [r3, #0]
    break;
 800a818:	e07b      	b.n	800a912 <AHT_Upkeep+0x14a>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a81a:	f002 fd49 	bl	800d2b0 <getSensorLock>
 800a81e:	1e03      	subs	r3, r0, #0
 800a820:	d000      	beq.n	800a824 <AHT_Upkeep+0x5c>
 800a822:	e071      	b.n	800a908 <AHT_Upkeep+0x140>
      break;
    }
    setSensorLock(AHT20);
 800a824:	2002      	movs	r0, #2
 800a826:	f002 fd2f 	bl	800d288 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a82a:	f7ff fe5f 	bl	800a4ec <AHT20_StartMeasurement>
 800a82e:	0003      	movs	r3, r0
 800a830:	001a      	movs	r2, r3
 800a832:	2301      	movs	r3, #1
 800a834:	4053      	eors	r3, r2
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <AHT_Upkeep+0x7c>
      AHTState = AHT20_ERROR;
 800a83c:	4b39      	ldr	r3, [pc, #228]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a83e:	22ff      	movs	r2, #255	@ 0xff
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	e002      	b.n	800a84a <AHT_Upkeep+0x82>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a844:	4b37      	ldr	r3, [pc, #220]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a846:	2202      	movs	r2, #2
 800a848:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a84a:	200a      	movs	r0, #10
 800a84c:	f009 f9ec 	bl	8013c28 <HAL_Delay>
    break;
 800a850:	e05f      	b.n	800a912 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a852:	f7ff fe79 	bl	800a548 <AHT20_GetMeasurementValues>
 800a856:	1e03      	subs	r3, r0, #0
 800a858:	d058      	beq.n	800a90c <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a85a:	200a      	movs	r0, #10
 800a85c:	f009 f9e4 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 800a860:	2000      	movs	r0, #0
 800a862:	f002 fd11 	bl	800d288 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a866:	4b2f      	ldr	r3, [pc, #188]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a868:	2203      	movs	r2, #3
 800a86a:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a86c:	e04e      	b.n	800a90c <AHT_Upkeep+0x144>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a86e:	003a      	movs	r2, r7
 800a870:	1d3b      	adds	r3, r7, #4
 800a872:	0011      	movs	r1, r2
 800a874:	0018      	movs	r0, r3
 800a876:	f7ff fed5 	bl	800a624 <AHT20_Calculate>
 800a87a:	0003      	movs	r3, r0
 800a87c:	001a      	movs	r2, r3
 800a87e:	2301      	movs	r3, #1
 800a880:	4053      	eors	r3, r2
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <AHT_Upkeep+0xcc>
      AHTState = AHT20_ERROR;
 800a888:	4b26      	ldr	r3, [pc, #152]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a88a:	22ff      	movs	r2, #255	@ 0xff
 800a88c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a88e:	4b25      	ldr	r3, [pc, #148]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	e040      	b.n	800a916 <AHT_Upkeep+0x14e>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	1c11      	adds	r1, r2, #0
 800a89a:	1c18      	adds	r0, r3, #0
 800a89c:	f7fa f8f2 	bl	8004a84 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	1c11      	adds	r1, r2, #0
 800a8a6:	1c18      	adds	r0, r3, #0
 800a8a8:	f7f9 fda2 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a8ae:	2205      	movs	r2, #5
 800a8b0:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a8b2:	f009 f9af 	bl	8013c14 <HAL_GetTick>
 800a8b6:	0003      	movs	r3, r0
 800a8b8:	4a1f      	ldr	r2, [pc, #124]	@ (800a938 <AHT_Upkeep+0x170>)
 800a8ba:	189a      	adds	r2, r3, r2
 800a8bc:	4b18      	ldr	r3, [pc, #96]	@ (800a920 <AHT_Upkeep+0x158>)
 800a8be:	601a      	str	r2, [r3, #0]
    break;
 800a8c0:	e027      	b.n	800a912 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a8c2:	4b18      	ldr	r3, [pc, #96]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	701a      	strb	r2, [r3, #0]
  break;
 800a8c8:	e023      	b.n	800a912 <AHT_Upkeep+0x14a>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a8ca:	4b16      	ldr	r3, [pc, #88]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a8d0:	f002 fcee 	bl	800d2b0 <getSensorLock>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d102      	bne.n	800a8e0 <AHT_Upkeep+0x118>
      setSensorLock(FREE);
 800a8da:	2000      	movs	r0, #0
 800a8dc:	f002 fcd4 	bl	800d288 <setSensorLock>
    }
    AHTerrors++;
 800a8e0:	4b16      	ldr	r3, [pc, #88]	@ (800a93c <AHT_Upkeep+0x174>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	4b14      	ldr	r3, [pc, #80]	@ (800a93c <AHT_Upkeep+0x174>)
 800a8ea:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a8ec:	4b13      	ldr	r3, [pc, #76]	@ (800a93c <AHT_Upkeep+0x174>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b19      	cmp	r3, #25
 800a8f2:	d90d      	bls.n	800a910 <AHT_Upkeep+0x148>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a8f4:	4a12      	ldr	r2, [pc, #72]	@ (800a940 <AHT_Upkeep+0x178>)
 800a8f6:	4b13      	ldr	r3, [pc, #76]	@ (800a944 <AHT_Upkeep+0x17c>)
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f008 fc4a 	bl	8013194 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a900:	4b08      	ldr	r3, [pc, #32]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a902:	2200      	movs	r2, #0
 800a904:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a906:	e003      	b.n	800a910 <AHT_Upkeep+0x148>
      break;
 800a908:	46c0      	nop			@ (mov r8, r8)
 800a90a:	e002      	b.n	800a912 <AHT_Upkeep+0x14a>
    break;
 800a90c:	46c0      	nop			@ (mov r8, r8)
 800a90e:	e000      	b.n	800a912 <AHT_Upkeep+0x14a>
    break;
 800a910:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a912:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <AHT_Upkeep+0x15c>)
 800a914:	781b      	ldrb	r3, [r3, #0]
}
 800a916:	0018      	movs	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	b002      	add	sp, #8
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	46c0      	nop			@ (mov r8, r8)
 800a920:	20000bd0 	.word	0x20000bd0
 800a924:	20000093 	.word	0x20000093
 800a928:	0802d9d0 	.word	0x0802d9d0
 800a92c:	0802baa8 	.word	0x0802baa8
 800a930:	0802b8d0 	.word	0x0802b8d0
 800a934:	000dbba0 	.word	0x000dbba0
 800a938:	0000ea60 	.word	0x0000ea60
 800a93c:	20000be7 	.word	0x20000be7
 800a940:	0802bad0 	.word	0x0802bad0
 800a944:	0802b934 	.word	0x0802b934

0800a948 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	0004      	movs	r4, r0
 800a950:	0008      	movs	r0, r1
 800a952:	60ba      	str	r2, [r7, #8]
 800a954:	0019      	movs	r1, r3
 800a956:	260e      	movs	r6, #14
 800a958:	19bb      	adds	r3, r7, r6
 800a95a:	1c22      	adds	r2, r4, #0
 800a95c:	801a      	strh	r2, [r3, #0]
 800a95e:	230c      	movs	r3, #12
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	1c02      	adds	r2, r0, #0
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	1dbb      	adds	r3, r7, #6
 800a968:	1c0a      	adds	r2, r1, #0
 800a96a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a96c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a0 <WriteMemRegister+0x58>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d010      	beq.n	800a996 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a974:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a0 <WriteMemRegister+0x58>)
 800a976:	681c      	ldr	r4, [r3, #0]
 800a978:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a4 <WriteMemRegister+0x5c>)
 800a97a:	7818      	ldrb	r0, [r3, #0]
 800a97c:	68bd      	ldr	r5, [r7, #8]
 800a97e:	230c      	movs	r3, #12
 800a980:	18fb      	adds	r3, r7, r3
 800a982:	881a      	ldrh	r2, [r3, #0]
 800a984:	19bb      	adds	r3, r7, r6
 800a986:	8819      	ldrh	r1, [r3, #0]
 800a988:	1dbb      	adds	r3, r7, #6
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	002b      	movs	r3, r5
 800a990:	47a0      	blx	r4
 800a992:	0003      	movs	r3, r0
 800a994:	e000      	b.n	800a998 <WriteMemRegister+0x50>
  }
  return false;
 800a996:	2300      	movs	r3, #0
}
 800a998:	0018      	movs	r0, r3
 800a99a:	46bd      	mov	sp, r7
 800a99c:	b005      	add	sp, #20
 800a99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a0:	20000be8 	.word	0x20000be8
 800a9a4:	20000094 	.word	0x20000094

0800a9a8 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	0004      	movs	r4, r0
 800a9b0:	0008      	movs	r0, r1
 800a9b2:	60ba      	str	r2, [r7, #8]
 800a9b4:	0019      	movs	r1, r3
 800a9b6:	260e      	movs	r6, #14
 800a9b8:	19bb      	adds	r3, r7, r6
 800a9ba:	1c22      	adds	r2, r4, #0
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	230c      	movs	r3, #12
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	1c02      	adds	r2, r0, #0
 800a9c4:	801a      	strh	r2, [r3, #0]
 800a9c6:	1dbb      	adds	r3, r7, #6
 800a9c8:	1c0a      	adds	r2, r1, #0
 800a9ca:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <ReadMemRegister+0x58>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d010      	beq.n	800a9f6 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa00 <ReadMemRegister+0x58>)
 800a9d6:	681c      	ldr	r4, [r3, #0]
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800aa04 <ReadMemRegister+0x5c>)
 800a9da:	7818      	ldrb	r0, [r3, #0]
 800a9dc:	68bd      	ldr	r5, [r7, #8]
 800a9de:	230c      	movs	r3, #12
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	881a      	ldrh	r2, [r3, #0]
 800a9e4:	19bb      	adds	r3, r7, r6
 800a9e6:	8819      	ldrh	r1, [r3, #0]
 800a9e8:	1dbb      	adds	r3, r7, #6
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	002b      	movs	r3, r5
 800a9f0:	47a0      	blx	r4
 800a9f2:	0003      	movs	r3, r0
 800a9f4:	e000      	b.n	800a9f8 <ReadMemRegister+0x50>
  }
  return false;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	0018      	movs	r0, r3
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	b005      	add	sp, #20
 800a9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa00:	20000bec 	.word	0x20000bec
 800aa04:	20000094 	.word	0x20000094

0800aa08 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800aa10:	f009 f900 	bl	8013c14 <HAL_GetTick>
 800aa14:	0002      	movs	r2, r0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	18d2      	adds	r2, r2, r3
 800aa1a:	4b03      	ldr	r3, [pc, #12]	@ (800aa28 <setBMP280TimeStamp+0x20>)
 800aa1c:	601a      	str	r2, [r3, #0]
}
 800aa1e:	46c0      	nop			@ (mov r8, r8)
 800aa20:	46bd      	mov	sp, r7
 800aa22:	b002      	add	sp, #8
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	46c0      	nop			@ (mov r8, r8)
 800aa28:	20000c14 	.word	0x20000c14

0800aa2c <BMP280_reset>:

static void BMP280_reset() {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800aa32:	1dfb      	adds	r3, r7, #7
 800aa34:	22b6      	movs	r2, #182	@ 0xb6
 800aa36:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800aa38:	1dfa      	adds	r2, r7, #7
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	20e0      	movs	r0, #224	@ 0xe0
 800aa40:	f7ff ff82 	bl	800a948 <WriteMemRegister>
  Info("BMP280 has been reset");
 800aa44:	4a06      	ldr	r2, [pc, #24]	@ (800aa60 <BMP280_reset+0x34>)
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <BMP280_reset+0x38>)
 800aa48:	0019      	movs	r1, r3
 800aa4a:	2002      	movs	r0, #2
 800aa4c:	f008 fba2 	bl	8013194 <CreateLine>
  HAL_Delay(100);
 800aa50:	2064      	movs	r0, #100	@ 0x64
 800aa52:	f009 f8e9 	bl	8013c28 <HAL_Delay>
}
 800aa56:	46c0      	nop			@ (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b002      	add	sp, #8
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	0802bb14 	.word	0x0802bb14
 800aa64:	0802bb2c 	.word	0x0802bb2c

0800aa68 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800aa6e:	4aae      	ldr	r2, [pc, #696]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aa70:	231a      	movs	r3, #26
 800aa72:	2101      	movs	r1, #1
 800aa74:	2088      	movs	r0, #136	@ 0x88
 800aa76:	f7ff ff97 	bl	800a9a8 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800aa7a:	4bab      	ldr	r3, [pc, #684]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aa7c:	785b      	ldrb	r3, [r3, #1]
 800aa7e:	021b      	lsls	r3, r3, #8
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	4aa9      	ldr	r2, [pc, #676]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aa84:	7812      	ldrb	r2, [r2, #0]
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	4ba8      	ldr	r3, [pc, #672]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aa8c:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800aa8e:	4ba6      	ldr	r3, [pc, #664]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aa90:	78db      	ldrb	r3, [r3, #3]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4aa4      	ldr	r2, [pc, #656]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aa98:	7892      	ldrb	r2, [r2, #2]
 800aa9a:	189b      	adds	r3, r3, r2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b21a      	sxth	r2, r3
 800aaa0:	4ba2      	ldr	r3, [pc, #648]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aaa2:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800aaa4:	4ba0      	ldr	r3, [pc, #640]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aaa6:	795b      	ldrb	r3, [r3, #5]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	4a9e      	ldr	r2, [pc, #632]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aaae:	7912      	ldrb	r2, [r2, #4]
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	b21a      	sxth	r2, r3
 800aab6:	4b9d      	ldr	r3, [pc, #628]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aab8:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800aaba:	4b9b      	ldr	r3, [pc, #620]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aabc:	79db      	ldrb	r3, [r3, #7]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	4a99      	ldr	r2, [pc, #612]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aac4:	7992      	ldrb	r2, [r2, #6]
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	4b98      	ldr	r3, [pc, #608]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aacc:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800aace:	4b96      	ldr	r3, [pc, #600]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aad0:	7a5b      	ldrb	r3, [r3, #9]
 800aad2:	021b      	lsls	r3, r3, #8
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4a94      	ldr	r2, [pc, #592]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aad8:	7a12      	ldrb	r2, [r2, #8]
 800aada:	189b      	adds	r3, r3, r2
 800aadc:	b29b      	uxth	r3, r3
 800aade:	b21a      	sxth	r2, r3
 800aae0:	4b92      	ldr	r3, [pc, #584]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aae2:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800aae4:	4b90      	ldr	r3, [pc, #576]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aae6:	7adb      	ldrb	r3, [r3, #11]
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4a8e      	ldr	r2, [pc, #568]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aaee:	7a92      	ldrb	r2, [r2, #10]
 800aaf0:	189b      	adds	r3, r3, r2
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	b21a      	sxth	r2, r3
 800aaf6:	4b8d      	ldr	r3, [pc, #564]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aaf8:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800aafa:	4b8b      	ldr	r3, [pc, #556]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800aafc:	7b5b      	ldrb	r3, [r3, #13]
 800aafe:	021b      	lsls	r3, r3, #8
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	4a89      	ldr	r2, [pc, #548]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab04:	7b12      	ldrb	r2, [r2, #12]
 800ab06:	189b      	adds	r3, r3, r2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	b21a      	sxth	r2, r3
 800ab0c:	4b87      	ldr	r3, [pc, #540]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab0e:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800ab10:	4b85      	ldr	r3, [pc, #532]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab12:	7bdb      	ldrb	r3, [r3, #15]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4a83      	ldr	r2, [pc, #524]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab1a:	7b92      	ldrb	r2, [r2, #14]
 800ab1c:	189b      	adds	r3, r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b21a      	sxth	r2, r3
 800ab22:	4b82      	ldr	r3, [pc, #520]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab24:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800ab26:	4b80      	ldr	r3, [pc, #512]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab28:	7c5b      	ldrb	r3, [r3, #17]
 800ab2a:	021b      	lsls	r3, r3, #8
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	4a7e      	ldr	r2, [pc, #504]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab30:	7c12      	ldrb	r2, [r2, #16]
 800ab32:	189b      	adds	r3, r3, r2
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	b21a      	sxth	r2, r3
 800ab38:	4b7c      	ldr	r3, [pc, #496]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab3a:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800ab3c:	4b7a      	ldr	r3, [pc, #488]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab3e:	7cdb      	ldrb	r3, [r3, #19]
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	4a78      	ldr	r2, [pc, #480]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab46:	7c92      	ldrb	r2, [r2, #18]
 800ab48:	189b      	adds	r3, r3, r2
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	b21a      	sxth	r2, r3
 800ab4e:	4b77      	ldr	r3, [pc, #476]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab50:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800ab52:	4b75      	ldr	r3, [pc, #468]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab54:	7d5b      	ldrb	r3, [r3, #21]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	4a73      	ldr	r2, [pc, #460]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab5c:	7d12      	ldrb	r2, [r2, #20]
 800ab5e:	189b      	adds	r3, r3, r2
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	b21a      	sxth	r2, r3
 800ab64:	4b71      	ldr	r3, [pc, #452]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab66:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800ab68:	4b6f      	ldr	r3, [pc, #444]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab6a:	7ddb      	ldrb	r3, [r3, #23]
 800ab6c:	021b      	lsls	r3, r3, #8
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4a6d      	ldr	r2, [pc, #436]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab72:	7d92      	ldrb	r2, [r2, #22]
 800ab74:	189b      	adds	r3, r3, r2
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	b21a      	sxth	r2, r3
 800ab7a:	4b6c      	ldr	r3, [pc, #432]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab7c:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800ab7e:	4a6c      	ldr	r2, [pc, #432]	@ (800ad30 <BMP280_get_calibration+0x2c8>)
 800ab80:	4b6c      	ldr	r3, [pc, #432]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ab82:	0019      	movs	r1, r3
 800ab84:	2003      	movs	r0, #3
 800ab86:	f008 fb05 	bl	8013194 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800ab8a:	4b67      	ldr	r3, [pc, #412]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	001c      	movs	r4, r3
 800ab90:	4b65      	ldr	r3, [pc, #404]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	0018      	movs	r0, r3
 800ab96:	4b65      	ldr	r3, [pc, #404]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	4a67      	ldr	r2, [pc, #412]	@ (800ad38 <BMP280_get_calibration+0x2d0>)
 800ab9c:	4965      	ldr	r1, [pc, #404]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	9000      	str	r0, [sp, #0]
 800aba2:	0023      	movs	r3, r4
 800aba4:	2003      	movs	r0, #3
 800aba6:	f008 faf5 	bl	8013194 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800abaa:	4b5f      	ldr	r3, [pc, #380]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abac:	78db      	ldrb	r3, [r3, #3]
 800abae:	001c      	movs	r4, r3
 800abb0:	4b5d      	ldr	r3, [pc, #372]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abb2:	789b      	ldrb	r3, [r3, #2]
 800abb4:	0018      	movs	r0, r3
 800abb6:	4b5d      	ldr	r3, [pc, #372]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800abb8:	2202      	movs	r2, #2
 800abba:	5e9b      	ldrsh	r3, [r3, r2]
 800abbc:	4a5f      	ldr	r2, [pc, #380]	@ (800ad3c <BMP280_get_calibration+0x2d4>)
 800abbe:	495d      	ldr	r1, [pc, #372]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	9000      	str	r0, [sp, #0]
 800abc4:	0023      	movs	r3, r4
 800abc6:	2003      	movs	r0, #3
 800abc8:	f008 fae4 	bl	8013194 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800abcc:	4b56      	ldr	r3, [pc, #344]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abce:	795b      	ldrb	r3, [r3, #5]
 800abd0:	001c      	movs	r4, r3
 800abd2:	4b55      	ldr	r3, [pc, #340]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abd4:	791b      	ldrb	r3, [r3, #4]
 800abd6:	0018      	movs	r0, r3
 800abd8:	4b54      	ldr	r3, [pc, #336]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800abda:	2204      	movs	r2, #4
 800abdc:	5e9b      	ldrsh	r3, [r3, r2]
 800abde:	4a58      	ldr	r2, [pc, #352]	@ (800ad40 <BMP280_get_calibration+0x2d8>)
 800abe0:	4954      	ldr	r1, [pc, #336]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	9000      	str	r0, [sp, #0]
 800abe6:	0023      	movs	r3, r4
 800abe8:	2003      	movs	r0, #3
 800abea:	f008 fad3 	bl	8013194 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800abee:	4b4e      	ldr	r3, [pc, #312]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abf0:	79db      	ldrb	r3, [r3, #7]
 800abf2:	001c      	movs	r4, r3
 800abf4:	4b4c      	ldr	r3, [pc, #304]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800abf6:	799b      	ldrb	r3, [r3, #6]
 800abf8:	0018      	movs	r0, r3
 800abfa:	4b4c      	ldr	r3, [pc, #304]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800abfc:	88db      	ldrh	r3, [r3, #6]
 800abfe:	4a51      	ldr	r2, [pc, #324]	@ (800ad44 <BMP280_get_calibration+0x2dc>)
 800ac00:	494c      	ldr	r1, [pc, #304]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	9000      	str	r0, [sp, #0]
 800ac06:	0023      	movs	r3, r4
 800ac08:	2003      	movs	r0, #3
 800ac0a:	f008 fac3 	bl	8013194 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800ac0e:	4b46      	ldr	r3, [pc, #280]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac10:	7a5b      	ldrb	r3, [r3, #9]
 800ac12:	001c      	movs	r4, r3
 800ac14:	4b44      	ldr	r3, [pc, #272]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac16:	7a1b      	ldrb	r3, [r3, #8]
 800ac18:	0018      	movs	r0, r3
 800ac1a:	4b44      	ldr	r3, [pc, #272]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ac20:	4a49      	ldr	r2, [pc, #292]	@ (800ad48 <BMP280_get_calibration+0x2e0>)
 800ac22:	4944      	ldr	r1, [pc, #272]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	9000      	str	r0, [sp, #0]
 800ac28:	0023      	movs	r3, r4
 800ac2a:	2003      	movs	r0, #3
 800ac2c:	f008 fab2 	bl	8013194 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800ac30:	4b3d      	ldr	r3, [pc, #244]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac32:	7adb      	ldrb	r3, [r3, #11]
 800ac34:	001c      	movs	r4, r3
 800ac36:	4b3c      	ldr	r3, [pc, #240]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac38:	7a9b      	ldrb	r3, [r3, #10]
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	4b3b      	ldr	r3, [pc, #236]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ac3e:	220a      	movs	r2, #10
 800ac40:	5e9b      	ldrsh	r3, [r3, r2]
 800ac42:	4a42      	ldr	r2, [pc, #264]	@ (800ad4c <BMP280_get_calibration+0x2e4>)
 800ac44:	493b      	ldr	r1, [pc, #236]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	9000      	str	r0, [sp, #0]
 800ac4a:	0023      	movs	r3, r4
 800ac4c:	2003      	movs	r0, #3
 800ac4e:	f008 faa1 	bl	8013194 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800ac52:	4b35      	ldr	r3, [pc, #212]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac54:	7b5b      	ldrb	r3, [r3, #13]
 800ac56:	001c      	movs	r4, r3
 800ac58:	4b33      	ldr	r3, [pc, #204]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac5a:	7b1b      	ldrb	r3, [r3, #12]
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	4b33      	ldr	r3, [pc, #204]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ac60:	220c      	movs	r2, #12
 800ac62:	5e9b      	ldrsh	r3, [r3, r2]
 800ac64:	4a3a      	ldr	r2, [pc, #232]	@ (800ad50 <BMP280_get_calibration+0x2e8>)
 800ac66:	4933      	ldr	r1, [pc, #204]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	9000      	str	r0, [sp, #0]
 800ac6c:	0023      	movs	r3, r4
 800ac6e:	2003      	movs	r0, #3
 800ac70:	f008 fa90 	bl	8013194 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ac74:	4b2c      	ldr	r3, [pc, #176]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac76:	7bdb      	ldrb	r3, [r3, #15]
 800ac78:	001c      	movs	r4, r3
 800ac7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac7c:	7b9b      	ldrb	r3, [r3, #14]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	4b2a      	ldr	r3, [pc, #168]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ac82:	220e      	movs	r2, #14
 800ac84:	5e9b      	ldrsh	r3, [r3, r2]
 800ac86:	4a33      	ldr	r2, [pc, #204]	@ (800ad54 <BMP280_get_calibration+0x2ec>)
 800ac88:	492a      	ldr	r1, [pc, #168]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ac8a:	9301      	str	r3, [sp, #4]
 800ac8c:	9000      	str	r0, [sp, #0]
 800ac8e:	0023      	movs	r3, r4
 800ac90:	2003      	movs	r0, #3
 800ac92:	f008 fa7f 	bl	8013194 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800ac96:	4b24      	ldr	r3, [pc, #144]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac98:	7c5b      	ldrb	r3, [r3, #17]
 800ac9a:	001c      	movs	r4, r3
 800ac9c:	4b22      	ldr	r3, [pc, #136]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ac9e:	7c1b      	ldrb	r3, [r3, #16]
 800aca0:	0018      	movs	r0, r3
 800aca2:	4b22      	ldr	r3, [pc, #136]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800aca4:	2210      	movs	r2, #16
 800aca6:	5e9b      	ldrsh	r3, [r3, r2]
 800aca8:	4a2b      	ldr	r2, [pc, #172]	@ (800ad58 <BMP280_get_calibration+0x2f0>)
 800acaa:	4922      	ldr	r1, [pc, #136]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	9000      	str	r0, [sp, #0]
 800acb0:	0023      	movs	r3, r4
 800acb2:	2003      	movs	r0, #3
 800acb4:	f008 fa6e 	bl	8013194 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800acb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800acba:	7cdb      	ldrb	r3, [r3, #19]
 800acbc:	001c      	movs	r4, r3
 800acbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800acc0:	7c9b      	ldrb	r3, [r3, #18]
 800acc2:	0018      	movs	r0, r3
 800acc4:	4b19      	ldr	r3, [pc, #100]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800acc6:	2212      	movs	r2, #18
 800acc8:	5e9b      	ldrsh	r3, [r3, r2]
 800acca:	4a24      	ldr	r2, [pc, #144]	@ (800ad5c <BMP280_get_calibration+0x2f4>)
 800accc:	4919      	ldr	r1, [pc, #100]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	9000      	str	r0, [sp, #0]
 800acd2:	0023      	movs	r3, r4
 800acd4:	2003      	movs	r0, #3
 800acd6:	f008 fa5d 	bl	8013194 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800acda:	4b13      	ldr	r3, [pc, #76]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800acdc:	7d5b      	ldrb	r3, [r3, #21]
 800acde:	001c      	movs	r4, r3
 800ace0:	4b11      	ldr	r3, [pc, #68]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ace2:	7d1b      	ldrb	r3, [r3, #20]
 800ace4:	0018      	movs	r0, r3
 800ace6:	4b11      	ldr	r3, [pc, #68]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ace8:	2214      	movs	r2, #20
 800acea:	5e9b      	ldrsh	r3, [r3, r2]
 800acec:	4a1c      	ldr	r2, [pc, #112]	@ (800ad60 <BMP280_get_calibration+0x2f8>)
 800acee:	4911      	ldr	r1, [pc, #68]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	9000      	str	r0, [sp, #0]
 800acf4:	0023      	movs	r3, r4
 800acf6:	2003      	movs	r0, #3
 800acf8:	f008 fa4c 	bl	8013194 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800acfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800acfe:	7ddb      	ldrb	r3, [r3, #23]
 800ad00:	001c      	movs	r4, r3
 800ad02:	4b09      	ldr	r3, [pc, #36]	@ (800ad28 <BMP280_get_calibration+0x2c0>)
 800ad04:	7d9b      	ldrb	r3, [r3, #22]
 800ad06:	0018      	movs	r0, r3
 800ad08:	4b08      	ldr	r3, [pc, #32]	@ (800ad2c <BMP280_get_calibration+0x2c4>)
 800ad0a:	2216      	movs	r2, #22
 800ad0c:	5e9b      	ldrsh	r3, [r3, r2]
 800ad0e:	4a15      	ldr	r2, [pc, #84]	@ (800ad64 <BMP280_get_calibration+0x2fc>)
 800ad10:	4908      	ldr	r1, [pc, #32]	@ (800ad34 <BMP280_get_calibration+0x2cc>)
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	9000      	str	r0, [sp, #0]
 800ad16:	0023      	movs	r3, r4
 800ad18:	2003      	movs	r0, #3
 800ad1a:	f008 fa3b 	bl	8013194 <CreateLine>
}
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b001      	add	sp, #4
 800ad24:	bd90      	pop	{r4, r7, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	20000c18 	.word	0x20000c18
 800ad2c:	20000bf0 	.word	0x20000bf0
 800ad30:	0802bb30 	.word	0x0802bb30
 800ad34:	0802bb4c 	.word	0x0802bb4c
 800ad38:	0802bb50 	.word	0x0802bb50
 800ad3c:	0802bb84 	.word	0x0802bb84
 800ad40:	0802bbb8 	.word	0x0802bbb8
 800ad44:	0802bbec 	.word	0x0802bbec
 800ad48:	0802bc20 	.word	0x0802bc20
 800ad4c:	0802bc54 	.word	0x0802bc54
 800ad50:	0802bc88 	.word	0x0802bc88
 800ad54:	0802bcbc 	.word	0x0802bcbc
 800ad58:	0802bcf0 	.word	0x0802bcf0
 800ad5c:	0802bd24 	.word	0x0802bd24
 800ad60:	0802bd58 	.word	0x0802bd58
 800ad64:	0802bd8c 	.word	0x0802bd8c

0800ad68 <BMP280_probe>:

static bool BMP280_probe() {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800ad6e:	4b34      	ldr	r3, [pc, #208]	@ (800ae40 <BMP280_probe+0xd8>)
 800ad70:	2276      	movs	r2, #118	@ 0x76
 800ad72:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ad74:	1dba      	adds	r2, r7, #6
 800ad76:	2301      	movs	r3, #1
 800ad78:	2101      	movs	r1, #1
 800ad7a:	20d0      	movs	r0, #208	@ 0xd0
 800ad7c:	f7ff fe14 	bl	800a9a8 <ReadMemRegister>
 800ad80:	0003      	movs	r3, r0
 800ad82:	001a      	movs	r2, r3
 800ad84:	1dfb      	adds	r3, r7, #7
 800ad86:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800ad88:	1dfb      	adds	r3, r7, #7
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	b25b      	sxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <BMP280_probe+0x40>
 800ad92:	1dbb      	adds	r3, r7, #6
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d006      	beq.n	800ada8 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ad9a:	1dbb      	adds	r3, r7, #6
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	4a29      	ldr	r2, [pc, #164]	@ (800ae44 <BMP280_probe+0xdc>)
 800ada0:	4929      	ldr	r1, [pc, #164]	@ (800ae48 <BMP280_probe+0xe0>)
 800ada2:	2003      	movs	r0, #3
 800ada4:	f008 f9f6 	bl	8013194 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800ada8:	1dbb      	adds	r3, r7, #6
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b58      	cmp	r3, #88	@ 0x58
 800adae:	d01f      	beq.n	800adf0 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800adb0:	4b23      	ldr	r3, [pc, #140]	@ (800ae40 <BMP280_probe+0xd8>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	4b21      	ldr	r3, [pc, #132]	@ (800ae40 <BMP280_probe+0xd8>)
 800adba:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800adbc:	1dba      	adds	r2, r7, #6
 800adbe:	2301      	movs	r3, #1
 800adc0:	2101      	movs	r1, #1
 800adc2:	20d0      	movs	r0, #208	@ 0xd0
 800adc4:	f7ff fdf0 	bl	800a9a8 <ReadMemRegister>
 800adc8:	0003      	movs	r3, r0
 800adca:	001a      	movs	r2, r3
 800adcc:	1dfb      	adds	r3, r7, #7
 800adce:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800add0:	1dfb      	adds	r3, r7, #7
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b25b      	sxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <BMP280_probe+0x88>
 800adda:	1dbb      	adds	r3, r7, #6
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d006      	beq.n	800adf0 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ade2:	1dbb      	adds	r3, r7, #6
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	4a17      	ldr	r2, [pc, #92]	@ (800ae44 <BMP280_probe+0xdc>)
 800ade8:	4917      	ldr	r1, [pc, #92]	@ (800ae48 <BMP280_probe+0xe0>)
 800adea:	2003      	movs	r0, #3
 800adec:	f008 f9d2 	bl	8013194 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800adf0:	1dbb      	adds	r3, r7, #6
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b58      	cmp	r3, #88	@ 0x58
 800adf6:	d110      	bne.n	800ae1a <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800adf8:	1dbb      	adds	r3, r7, #6
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	0018      	movs	r0, r3
 800adfe:	4b10      	ldr	r3, [pc, #64]	@ (800ae40 <BMP280_probe+0xd8>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4a12      	ldr	r2, [pc, #72]	@ (800ae4c <BMP280_probe+0xe4>)
 800ae04:	4912      	ldr	r1, [pc, #72]	@ (800ae50 <BMP280_probe+0xe8>)
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	0003      	movs	r3, r0
 800ae0a:	2002      	movs	r0, #2
 800ae0c:	f008 f9c2 	bl	8013194 <CreateLine>
      BMP280_reset(); // get an initial state
 800ae10:	f7ff fe0c 	bl	800aa2c <BMP280_reset>
      BMP280_get_calibration();
 800ae14:	f7ff fe28 	bl	800aa68 <BMP280_get_calibration>
 800ae18:	e008      	b.n	800ae2c <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800ae1a:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <BMP280_probe+0xd8>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800ae20:	4a0c      	ldr	r2, [pc, #48]	@ (800ae54 <BMP280_probe+0xec>)
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <BMP280_probe+0xf0>)
 800ae24:	0019      	movs	r1, r3
 800ae26:	2001      	movs	r0, #1
 800ae28:	f008 f9b4 	bl	8013194 <CreateLine>
    }
    return bmp280I2Caddr;
 800ae2c:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <BMP280_probe+0xd8>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	1e5a      	subs	r2, r3, #1
 800ae32:	4193      	sbcs	r3, r2
 800ae34:	b2db      	uxtb	r3, r3
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b002      	add	sp, #8
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			@ (mov r8, r8)
 800ae40:	20000094 	.word	0x20000094
 800ae44:	0802bdc0 	.word	0x0802bdc0
 800ae48:	0802bb4c 	.word	0x0802bb4c
 800ae4c:	0802bdf0 	.word	0x0802bdf0
 800ae50:	0802bb2c 	.word	0x0802bb2c
 800ae54:	0802be28 	.word	0x0802be28
 800ae58:	0802be3c 	.word	0x0802be3c

0800ae5c <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800ae60:	f7ff ff82 	bl	800ad68 <BMP280_probe>
 800ae64:	0003      	movs	r3, r0
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800ae76:	4b05      	ldr	r3, [pc, #20]	@ (800ae8c <BMP_Init+0x20>)
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800ae7c:	4b04      	ldr	r3, [pc, #16]	@ (800ae90 <BMP_Init+0x24>)
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	601a      	str	r2, [r3, #0]
}
 800ae82:	46c0      	nop			@ (mov r8, r8)
 800ae84:	46bd      	mov	sp, r7
 800ae86:	b002      	add	sp, #8
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	46c0      	nop			@ (mov r8, r8)
 800ae8c:	20000bec 	.word	0x20000bec
 800ae90:	20000be8 	.word	0x20000be8

0800ae94 <BMP280_set_config>:


static bool BMP280_set_config() {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800ae9a:	1dbb      	adds	r3, r7, #6
 800ae9c:	228c      	movs	r2, #140	@ 0x8c
 800ae9e:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800aea0:	1dba      	adds	r2, r7, #6
 800aea2:	2301      	movs	r3, #1
 800aea4:	2101      	movs	r1, #1
 800aea6:	20f5      	movs	r0, #245	@ 0xf5
 800aea8:	f7ff fd4e 	bl	800a948 <WriteMemRegister>
 800aeac:	0003      	movs	r3, r0
 800aeae:	001a      	movs	r2, r3
 800aeb0:	1dfb      	adds	r3, r7, #7
 800aeb2:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800aeb4:	f008 feae 	bl	8013c14 <HAL_GetTick>
 800aeb8:	0003      	movs	r3, r0
 800aeba:	330a      	adds	r3, #10
 800aebc:	001a      	movs	r2, r3
 800aebe:	4b06      	ldr	r3, [pc, #24]	@ (800aed8 <BMP280_set_config+0x44>)
 800aec0:	601a      	str	r2, [r3, #0]
  return rslt;
 800aec2:	1dfb      	adds	r3, r7, #7
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	1e5a      	subs	r2, r3, #1
 800aeca:	4193      	sbcs	r3, r2
 800aecc:	b2db      	uxtb	r3, r3
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b002      	add	sp, #8
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	46c0      	nop			@ (mov r8, r8)
 800aed8:	20000c14 	.word	0x20000c14

0800aedc <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800aee2:	1dbb      	adds	r3, r7, #6
 800aee4:	2208      	movs	r2, #8
 800aee6:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800aee8:	4b22      	ldr	r3, [pc, #136]	@ (800af74 <BMP280_set_mode+0x98>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	224c      	movs	r2, #76	@ 0x4c
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	1d7b      	adds	r3, r7, #5
 800aef4:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800aef6:	1d7a      	adds	r2, r7, #5
 800aef8:	2301      	movs	r3, #1
 800aefa:	2101      	movs	r1, #1
 800aefc:	20f4      	movs	r0, #244	@ 0xf4
 800aefe:	f7ff fd23 	bl	800a948 <WriteMemRegister>
 800af02:	0003      	movs	r3, r0
 800af04:	001a      	movs	r2, r3
 800af06:	1dfb      	adds	r3, r7, #7
 800af08:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800af0a:	f008 fe83 	bl	8013c14 <HAL_GetTick>
 800af0e:	0003      	movs	r3, r0
 800af10:	22fa      	movs	r2, #250	@ 0xfa
 800af12:	0092      	lsls	r2, r2, #2
 800af14:	189a      	adds	r2, r3, r2
 800af16:	4b18      	ldr	r3, [pc, #96]	@ (800af78 <BMP280_set_mode+0x9c>)
 800af18:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800af1a:	e016      	b.n	800af4a <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800af1c:	1dba      	adds	r2, r7, #6
 800af1e:	2301      	movs	r3, #1
 800af20:	2101      	movs	r1, #1
 800af22:	20f3      	movs	r0, #243	@ 0xf3
 800af24:	f7ff fd40 	bl	800a9a8 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800af28:	4b13      	ldr	r3, [pc, #76]	@ (800af78 <BMP280_set_mode+0x9c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	0018      	movs	r0, r3
 800af2e:	f008 f8db 	bl	80130e8 <TimestampIsReached>
 800af32:	1e03      	subs	r3, r0, #0
 800af34:	d006      	beq.n	800af44 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800af36:	4a11      	ldr	r2, [pc, #68]	@ (800af7c <BMP280_set_mode+0xa0>)
 800af38:	4b11      	ldr	r3, [pc, #68]	@ (800af80 <BMP280_set_mode+0xa4>)
 800af3a:	0019      	movs	r1, r3
 800af3c:	2001      	movs	r0, #1
 800af3e:	f008 f929 	bl	8013194 <CreateLine>
      break;
 800af42:	e008      	b.n	800af56 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800af44:	2001      	movs	r0, #1
 800af46:	f008 fe6f 	bl	8013c28 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800af4a:	1dbb      	adds	r3, r7, #6
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	001a      	movs	r2, r3
 800af50:	2308      	movs	r3, #8
 800af52:	4013      	ands	r3, r2
 800af54:	d1e2      	bne.n	800af1c <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800af56:	f008 fe5d 	bl	8013c14 <HAL_GetTick>
 800af5a:	0002      	movs	r2, r0
 800af5c:	4b06      	ldr	r3, [pc, #24]	@ (800af78 <BMP280_set_mode+0x9c>)
 800af5e:	601a      	str	r2, [r3, #0]
  return rslt;
 800af60:	1dfb      	adds	r3, r7, #7
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	b25b      	sxtb	r3, r3
 800af66:	1e5a      	subs	r2, r3, #1
 800af68:	4193      	sbcs	r3, r2
 800af6a:	b2db      	uxtb	r3, r3
}
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b002      	add	sp, #8
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20000095 	.word	0x20000095
 800af78:	20000c14 	.word	0x20000c14
 800af7c:	0802be40 	.word	0x0802be40
 800af80:	0802be3c 	.word	0x0802be3c

0800af84 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800af8a:	1dba      	adds	r2, r7, #6
 800af8c:	2301      	movs	r3, #1
 800af8e:	2101      	movs	r1, #1
 800af90:	20f4      	movs	r0, #244	@ 0xf4
 800af92:	f7ff fd09 	bl	800a9a8 <ReadMemRegister>
 800af96:	0003      	movs	r3, r0
 800af98:	001a      	movs	r2, r3
 800af9a:	1dfb      	adds	r3, r7, #7
 800af9c:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800af9e:	1dbb      	adds	r3, r7, #6
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2203      	movs	r2, #3
 800afa4:	4013      	ands	r3, r2
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	1dbb      	adds	r3, r7, #6
 800afaa:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800afac:	f008 fe32 	bl	8013c14 <HAL_GetTick>
 800afb0:	0003      	movs	r3, r0
 800afb2:	330a      	adds	r3, #10
 800afb4:	001a      	movs	r2, r3
 800afb6:	4b08      	ldr	r3, [pc, #32]	@ (800afd8 <BMP280_get_mode+0x54>)
 800afb8:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800afba:	1dfb      	adds	r3, r7, #7
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <BMP280_get_mode+0x46>
    bmpData = 255;
 800afc4:	1dbb      	adds	r3, r7, #6
 800afc6:	22ff      	movs	r2, #255	@ 0xff
 800afc8:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800afca:	1dbb      	adds	r3, r7, #6
 800afcc:	781b      	ldrb	r3, [r3, #0]
}
 800afce:	0018      	movs	r0, r3
 800afd0:	46bd      	mov	sp, r7
 800afd2:	b002      	add	sp, #8
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	46c0      	nop			@ (mov r8, r8)
 800afd8:	20000c14 	.word	0x20000c14

0800afdc <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800afdc:	b5b0      	push	{r4, r5, r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800afe2:	1d3a      	adds	r2, r7, #4
 800afe4:	2306      	movs	r3, #6
 800afe6:	2101      	movs	r1, #1
 800afe8:	20f7      	movs	r0, #247	@ 0xf7
 800afea:	f7ff fcdd 	bl	800a9a8 <ReadMemRegister>
 800afee:	0003      	movs	r3, r0
 800aff0:	001a      	movs	r2, r3
 800aff2:	230f      	movs	r3, #15
 800aff4:	18fb      	adds	r3, r7, r3
 800aff6:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800aff8:	1d3b      	adds	r3, r7, #4
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b80      	cmp	r3, #128	@ 0x80
 800affe:	d013      	beq.n	800b028 <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b000:	1d3b      	adds	r3, r7, #4
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	031a      	lsls	r2, r3, #12
 800b006:	1d3b      	adds	r3, r7, #4
 800b008:	785b      	ldrb	r3, [r3, #1]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	18d3      	adds	r3, r2, r3
 800b00e:	1d3a      	adds	r2, r7, #4
 800b010:	7892      	ldrb	r2, [r2, #2]
 800b012:	0912      	lsrs	r2, r2, #4
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	189b      	adds	r3, r3, r2
 800b018:	001a      	movs	r2, r3
 800b01a:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d4 <BMP280_get_measurement_values+0xf8>)
 800b01c:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800b01e:	1d3b      	adds	r3, r7, #4
 800b020:	78db      	ldrb	r3, [r3, #3]
 800b022:	2b80      	cmp	r3, #128	@ 0x80
 800b024:	d035      	beq.n	800b092 <BMP280_get_measurement_values+0xb6>
 800b026:	e01d      	b.n	800b064 <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800b028:	4a2b      	ldr	r2, [pc, #172]	@ (800b0d8 <BMP280_get_measurement_values+0xfc>)
 800b02a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0dc <BMP280_get_measurement_values+0x100>)
 800b02c:	0019      	movs	r1, r3
 800b02e:	2001      	movs	r0, #1
 800b030:	f008 f8b0 	bl	8013194 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b034:	1d3b      	adds	r3, r7, #4
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	001d      	movs	r5, r3
 800b03a:	1d3b      	adds	r3, r7, #4
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	0018      	movs	r0, r3
 800b040:	1d3b      	adds	r3, r7, #4
 800b042:	789b      	ldrb	r3, [r3, #2]
 800b044:	001c      	movs	r4, r3
 800b046:	4b23      	ldr	r3, [pc, #140]	@ (800b0d4 <BMP280_get_measurement_values+0xf8>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a25      	ldr	r2, [pc, #148]	@ (800b0e0 <BMP280_get_measurement_values+0x104>)
 800b04c:	4925      	ldr	r1, [pc, #148]	@ (800b0e4 <BMP280_get_measurement_values+0x108>)
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	9401      	str	r4, [sp, #4]
 800b052:	9000      	str	r0, [sp, #0]
 800b054:	002b      	movs	r3, r5
 800b056:	2003      	movs	r0, #3
 800b058:	f008 f89c 	bl	8013194 <CreateLine>
    SetAllBlueLED();
 800b05c:	f006 ffd0 	bl	8012000 <SetAllBlueLED>
    return false;
 800b060:	2300      	movs	r3, #0
 800b062:	e033      	b.n	800b0cc <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b064:	1d3b      	adds	r3, r7, #4
 800b066:	78db      	ldrb	r3, [r3, #3]
 800b068:	031a      	lsls	r2, r3, #12
 800b06a:	1d3b      	adds	r3, r7, #4
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	18d3      	adds	r3, r2, r3
 800b072:	1d3a      	adds	r2, r7, #4
 800b074:	7952      	ldrb	r2, [r2, #5]
 800b076:	0912      	lsrs	r2, r2, #4
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	001a      	movs	r2, r3
 800b07e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e8 <BMP280_get_measurement_values+0x10c>)
 800b080:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b082:	230f      	movs	r3, #15
 800b084:	18fb      	adds	r3, r7, r3
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b25b      	sxtb	r3, r3
 800b08a:	1e5a      	subs	r2, r3, #1
 800b08c:	4193      	sbcs	r3, r2
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	e01c      	b.n	800b0cc <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b092:	4a16      	ldr	r2, [pc, #88]	@ (800b0ec <BMP280_get_measurement_values+0x110>)
 800b094:	4b11      	ldr	r3, [pc, #68]	@ (800b0dc <BMP280_get_measurement_values+0x100>)
 800b096:	0019      	movs	r1, r3
 800b098:	2001      	movs	r0, #1
 800b09a:	f008 f87b 	bl	8013194 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b09e:	1d3b      	adds	r3, r7, #4
 800b0a0:	78db      	ldrb	r3, [r3, #3]
 800b0a2:	001d      	movs	r5, r3
 800b0a4:	1d3b      	adds	r3, r7, #4
 800b0a6:	791b      	ldrb	r3, [r3, #4]
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	1d3b      	adds	r3, r7, #4
 800b0ac:	795b      	ldrb	r3, [r3, #5]
 800b0ae:	001c      	movs	r4, r3
 800b0b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e8 <BMP280_get_measurement_values+0x10c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a0e      	ldr	r2, [pc, #56]	@ (800b0f0 <BMP280_get_measurement_values+0x114>)
 800b0b6:	490b      	ldr	r1, [pc, #44]	@ (800b0e4 <BMP280_get_measurement_values+0x108>)
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	9401      	str	r4, [sp, #4]
 800b0bc:	9000      	str	r0, [sp, #0]
 800b0be:	002b      	movs	r3, r5
 800b0c0:	2003      	movs	r0, #3
 800b0c2:	f008 f867 	bl	8013194 <CreateLine>
    SetAllBlueLED();
 800b0c6:	f006 ff9b 	bl	8012000 <SetAllBlueLED>
    return false;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b004      	add	sp, #16
 800b0d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0d4:	20000c10 	.word	0x20000c10
 800b0d8:	0802be6c 	.word	0x0802be6c
 800b0dc:	0802be3c 	.word	0x0802be3c
 800b0e0:	0802be98 	.word	0x0802be98
 800b0e4:	0802bb4c 	.word	0x0802bb4c
 800b0e8:	20000c0c 	.word	0x20000c0c
 800b0ec:	0802bee0 	.word	0x0802bee0
 800b0f0:	0802bf04 	.word	0x0802bf04

0800b0f4 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b0fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b174 <BMP280_calc_temperature+0x80>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	10da      	asrs	r2, r3, #3
 800b104:	4b1c      	ldr	r3, [pc, #112]	@ (800b178 <BMP280_calc_temperature+0x84>)
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	4a1a      	ldr	r2, [pc, #104]	@ (800b178 <BMP280_calc_temperature+0x84>)
 800b10e:	2102      	movs	r1, #2
 800b110:	5e52      	ldrsh	r2, [r2, r1]
 800b112:	4353      	muls	r3, r2
 800b114:	12db      	asrs	r3, r3, #11
 800b116:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	111b      	asrs	r3, r3, #4
 800b11c:	4a16      	ldr	r2, [pc, #88]	@ (800b178 <BMP280_calc_temperature+0x84>)
 800b11e:	8812      	ldrh	r2, [r2, #0]
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	1112      	asrs	r2, r2, #4
 800b126:	4914      	ldr	r1, [pc, #80]	@ (800b178 <BMP280_calc_temperature+0x84>)
 800b128:	8809      	ldrh	r1, [r1, #0]
 800b12a:	1a52      	subs	r2, r2, r1
 800b12c:	4353      	muls	r3, r2
 800b12e:	131b      	asrs	r3, r3, #12
 800b130:	4a11      	ldr	r2, [pc, #68]	@ (800b178 <BMP280_calc_temperature+0x84>)
 800b132:	2104      	movs	r1, #4
 800b134:	5e52      	ldrsh	r2, [r2, r1]
 800b136:	4353      	muls	r3, r2
 800b138:	139b      	asrs	r3, r3, #14
 800b13a:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	18d2      	adds	r2, r2, r3
 800b142:	4b0e      	ldr	r3, [pc, #56]	@ (800b17c <BMP280_calc_temperature+0x88>)
 800b144:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <BMP280_calc_temperature+0x88>)
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	0013      	movs	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	189b      	adds	r3, r3, r2
 800b150:	3380      	adds	r3, #128	@ 0x80
 800b152:	121b      	asrs	r3, r3, #8
 800b154:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b156:	68b8      	ldr	r0, [r7, #8]
 800b158:	f7f6 fb66 	bl	8001828 <__aeabi_i2f>
 800b15c:	1c03      	adds	r3, r0, #0
 800b15e:	4908      	ldr	r1, [pc, #32]	@ (800b180 <BMP280_calc_temperature+0x8c>)
 800b160:	1c18      	adds	r0, r3, #0
 800b162:	f7f5 fd9f 	bl	8000ca4 <__aeabi_fdiv>
 800b166:	1c03      	adds	r3, r0, #0
 800b168:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b16a:	687b      	ldr	r3, [r7, #4]
}
 800b16c:	1c18      	adds	r0, r3, #0
 800b16e:	46bd      	mov	sp, r7
 800b170:	b006      	add	sp, #24
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000c0c 	.word	0x20000c0c
 800b178:	20000bf0 	.word	0x20000bf0
 800b17c:	20000c08 	.word	0x20000c08
 800b180:	42c80000 	.word	0x42c80000

0800b184 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b18a:	4b4e      	ldr	r3, [pc, #312]	@ (800b2c4 <BMP280_calc_pressure+0x140>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b190:	4b4d      	ldr	r3, [pc, #308]	@ (800b2c8 <BMP280_calc_pressure+0x144>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	105b      	asrs	r3, r3, #1
 800b196:	4a4d      	ldr	r2, [pc, #308]	@ (800b2cc <BMP280_calc_pressure+0x148>)
 800b198:	4694      	mov	ip, r2
 800b19a:	4463      	add	r3, ip
 800b19c:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	109b      	asrs	r3, r3, #2
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	1092      	asrs	r2, r2, #2
 800b1a6:	4353      	muls	r3, r2
 800b1a8:	12db      	asrs	r3, r3, #11
 800b1aa:	4a49      	ldr	r2, [pc, #292]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b1ac:	2110      	movs	r1, #16
 800b1ae:	5e52      	ldrsh	r2, [r2, r1]
 800b1b0:	4353      	muls	r3, r2
 800b1b2:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b1b4:	4b46      	ldr	r3, [pc, #280]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b1b6:	220e      	movs	r2, #14
 800b1b8:	5e9b      	ldrsh	r3, [r3, r2]
 800b1ba:	001a      	movs	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4353      	muls	r3, r2
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	18d3      	adds	r3, r2, r3
 800b1c6:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	109a      	asrs	r2, r3, #2
 800b1cc:	4b40      	ldr	r3, [pc, #256]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b1ce:	210c      	movs	r1, #12
 800b1d0:	5e5b      	ldrsh	r3, [r3, r1]
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	18d3      	adds	r3, r2, r3
 800b1d6:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b1d8:	4b3d      	ldr	r3, [pc, #244]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b1da:	220a      	movs	r2, #10
 800b1dc:	5e9b      	ldrsh	r3, [r3, r2]
 800b1de:	0019      	movs	r1, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	109b      	asrs	r3, r3, #2
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	1092      	asrs	r2, r2, #2
 800b1e8:	4353      	muls	r3, r2
 800b1ea:	135b      	asrs	r3, r3, #13
 800b1ec:	434b      	muls	r3, r1
 800b1ee:	10da      	asrs	r2, r3, #3
 800b1f0:	4b37      	ldr	r3, [pc, #220]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b1f2:	2108      	movs	r1, #8
 800b1f4:	5e5b      	ldrsh	r3, [r3, r1]
 800b1f6:	0019      	movs	r1, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	434b      	muls	r3, r1
 800b1fc:	105b      	asrs	r3, r3, #1
 800b1fe:	18d3      	adds	r3, r2, r3
 800b200:	149b      	asrs	r3, r3, #18
 800b202:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2280      	movs	r2, #128	@ 0x80
 800b208:	0212      	lsls	r2, r2, #8
 800b20a:	4694      	mov	ip, r2
 800b20c:	4463      	add	r3, ip
 800b20e:	4a30      	ldr	r2, [pc, #192]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b210:	88d2      	ldrh	r2, [r2, #6]
 800b212:	4353      	muls	r3, r2
 800b214:	13db      	asrs	r3, r3, #15
 800b216:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <BMP280_calc_pressure+0x9e>
    return 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	e04b      	b.n	800b2ba <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2280      	movs	r2, #128	@ 0x80
 800b226:	0352      	lsls	r2, r2, #13
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	131b      	asrs	r3, r3, #12
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	001a      	movs	r2, r3
 800b232:	4b28      	ldr	r3, [pc, #160]	@ (800b2d4 <BMP280_calc_pressure+0x150>)
 800b234:	4353      	muls	r3, r2
 800b236:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	db09      	blt.n	800b252 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	0011      	movs	r1, r2
 800b246:	0018      	movs	r0, r3
 800b248:	f7f4 ffac 	bl	80001a4 <__udivsi3>
 800b24c:	0003      	movs	r3, r0
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	e007      	b.n	800b262 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	0019      	movs	r1, r3
 800b256:	6978      	ldr	r0, [r7, #20]
 800b258:	f7f4 ffa4 	bl	80001a4 <__udivsi3>
 800b25c:	0003      	movs	r3, r0
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b262:	4b1b      	ldr	r3, [pc, #108]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b264:	2216      	movs	r2, #22
 800b266:	5e9b      	ldrsh	r3, [r3, r2]
 800b268:	0019      	movs	r1, r3
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	08d2      	lsrs	r2, r2, #3
 800b272:	4353      	muls	r3, r2
 800b274:	0b5b      	lsrs	r3, r3, #13
 800b276:	434b      	muls	r3, r1
 800b278:	131b      	asrs	r3, r3, #12
 800b27a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	089b      	lsrs	r3, r3, #2
 800b280:	001a      	movs	r2, r3
 800b282:	4b13      	ldr	r3, [pc, #76]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b284:	2114      	movs	r1, #20
 800b286:	5e5b      	ldrsh	r3, [r3, r1]
 800b288:	4353      	muls	r3, r2
 800b28a:	135b      	asrs	r3, r3, #13
 800b28c:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	18d3      	adds	r3, r2, r3
 800b294:	4a0e      	ldr	r2, [pc, #56]	@ (800b2d0 <BMP280_calc_pressure+0x14c>)
 800b296:	2112      	movs	r1, #18
 800b298:	5e52      	ldrsh	r2, [r2, r1]
 800b29a:	189b      	adds	r3, r3, r2
 800b29c:	111a      	asrs	r2, r3, #4
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	18d3      	adds	r3, r2, r3
 800b2a2:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b2a4:	6978      	ldr	r0, [r7, #20]
 800b2a6:	f7f6 fb0f 	bl	80018c8 <__aeabi_ui2f>
 800b2aa:	1c03      	adds	r3, r0, #0
 800b2ac:	490a      	ldr	r1, [pc, #40]	@ (800b2d8 <BMP280_calc_pressure+0x154>)
 800b2ae:	1c18      	adds	r0, r3, #0
 800b2b0:	f7f5 fcf8 	bl	8000ca4 <__aeabi_fdiv>
 800b2b4:	1c03      	adds	r3, r0, #0
 800b2b6:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b2b8:	687b      	ldr	r3, [r7, #4]
}
 800b2ba:	1c18      	adds	r0, r3, #0
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	b006      	add	sp, #24
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	46c0      	nop			@ (mov r8, r8)
 800b2c4:	20000c10 	.word	0x20000c10
 800b2c8:	20000c08 	.word	0x20000c08
 800b2cc:	ffff0600 	.word	0xffff0600
 800b2d0:	20000bf0 	.word	0x20000bf0
 800b2d4:	00000c35 	.word	0x00000c35
 800b2d8:	42c80000 	.word	0x42c80000

0800b2dc <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800b2dc:	b5b0      	push	{r4, r5, r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800b2e2:	4bbf      	ldr	r3, [pc, #764]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f007 fefe 	bl	80130e8 <TimestampIsReached>
 800b2ec:	0003      	movs	r3, r0
 800b2ee:	001a      	movs	r2, r3
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	4053      	eors	r3, r2
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <BMP_Upkeep+0x24>
    return BMPState;
 800b2fa:	4bba      	ldr	r3, [pc, #744]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	e16a      	b.n	800b5d6 <BMP_Upkeep+0x2fa>
  }
  switch(BMPState) {
 800b300:	4bb8      	ldr	r3, [pc, #736]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b09      	cmp	r3, #9
 800b306:	d900      	bls.n	800b30a <BMP_Upkeep+0x2e>
 800b308:	e14e      	b.n	800b5a8 <BMP_Upkeep+0x2cc>
 800b30a:	009a      	lsls	r2, r3, #2
 800b30c:	4bb6      	ldr	r3, [pc, #728]	@ (800b5e8 <BMP_Upkeep+0x30c>)
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800b314:	4ab5      	ldr	r2, [pc, #724]	@ (800b5ec <BMP_Upkeep+0x310>)
 800b316:	4bb6      	ldr	r3, [pc, #728]	@ (800b5f0 <BMP_Upkeep+0x314>)
 800b318:	0019      	movs	r1, r3
 800b31a:	2003      	movs	r0, #3
 800b31c:	f007 ff3a 	bl	8013194 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800b320:	f008 fc78 	bl	8013c14 <HAL_GetTick>
 800b324:	0003      	movs	r3, r0
 800b326:	4ab3      	ldr	r2, [pc, #716]	@ (800b5f4 <BMP_Upkeep+0x318>)
 800b328:	189a      	adds	r2, r3, r2
 800b32a:	4bad      	ldr	r3, [pc, #692]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b32c:	601a      	str	r2, [r3, #0]
    break;
 800b32e:	e150      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800b330:	f001 ffbe 	bl	800d2b0 <getSensorLock>
 800b334:	1e03      	subs	r3, r0, #0
 800b336:	d000      	beq.n	800b33a <BMP_Upkeep+0x5e>
 800b338:	e142      	b.n	800b5c0 <BMP_Upkeep+0x2e4>
      break;
    }
    setSensorLock(BMP280);
 800b33a:	2003      	movs	r0, #3
 800b33c:	f001 ffa4 	bl	800d288 <setSensorLock>
    BMP280_reset();
 800b340:	f7ff fb74 	bl	800aa2c <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800b344:	200a      	movs	r0, #10
 800b346:	f008 fc6f 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 800b34a:	2000      	movs	r0, #0
 800b34c:	f001 ff9c 	bl	800d288 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800b350:	4ba4      	ldr	r3, [pc, #656]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b352:	2201      	movs	r2, #1
 800b354:	701a      	strb	r2, [r3, #0]
    break;
 800b356:	e13c      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800b358:	f001 ffaa 	bl	800d2b0 <getSensorLock>
 800b35c:	1e03      	subs	r3, r0, #0
 800b35e:	d000      	beq.n	800b362 <BMP_Upkeep+0x86>
 800b360:	e130      	b.n	800b5c4 <BMP_Upkeep+0x2e8>
      break;
    }
    setSensorLock(BMP280);
 800b362:	2003      	movs	r0, #3
 800b364:	f001 ff90 	bl	800d288 <setSensorLock>
    if (BMP280_set_config()) {
 800b368:	f7ff fd94 	bl	800ae94 <BMP280_set_config>
 800b36c:	1e03      	subs	r3, r0, #0
 800b36e:	d003      	beq.n	800b378 <BMP_Upkeep+0x9c>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b370:	4b9c      	ldr	r3, [pc, #624]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b372:	2202      	movs	r2, #2
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e00f      	b.n	800b398 <BMP_Upkeep+0xbc>
    }
    else {
      Error("Error while configuring BMP280");
 800b378:	4a9f      	ldr	r2, [pc, #636]	@ (800b5f8 <BMP_Upkeep+0x31c>)
 800b37a:	4ba0      	ldr	r3, [pc, #640]	@ (800b5fc <BMP_Upkeep+0x320>)
 800b37c:	0019      	movs	r1, r3
 800b37e:	2001      	movs	r0, #1
 800b380:	f007 ff08 	bl	8013194 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b384:	f008 fc46 	bl	8013c14 <HAL_GetTick>
 800b388:	0003      	movs	r3, r0
 800b38a:	4a9d      	ldr	r2, [pc, #628]	@ (800b600 <BMP_Upkeep+0x324>)
 800b38c:	189a      	adds	r2, r3, r2
 800b38e:	4b94      	ldr	r3, [pc, #592]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b390:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b392:	4b94      	ldr	r3, [pc, #592]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b394:	2208      	movs	r2, #8
 800b396:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b398:	200a      	movs	r0, #10
 800b39a:	f008 fc45 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f001 ff72 	bl	800d288 <setSensorLock>
  break;
 800b3a4:	e115      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b3a6:	f001 ff83 	bl	800d2b0 <getSensorLock>
 800b3aa:	1e03      	subs	r3, r0, #0
 800b3ac:	d030      	beq.n	800b410 <BMP_Upkeep+0x134>
      uint8_t locktype = getSensorLock();
 800b3ae:	1dfc      	adds	r4, r7, #7
 800b3b0:	f001 ff7e 	bl	800d2b0 <getSensorLock>
 800b3b4:	0003      	movs	r3, r0
 800b3b6:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800b3b8:	1dfb      	adds	r3, r7, #7
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d019      	beq.n	800b3f4 <BMP_Upkeep+0x118>
 800b3c0:	1dfb      	adds	r3, r7, #7
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d013      	beq.n	800b3f0 <BMP_Upkeep+0x114>
 800b3c8:	1dfb      	adds	r3, r7, #7
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	d00d      	beq.n	800b3ec <BMP_Upkeep+0x110>
 800b3d0:	1dfb      	adds	r3, r7, #7
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d007      	beq.n	800b3e8 <BMP_Upkeep+0x10c>
 800b3d8:	1dfb      	adds	r3, r7, #7
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d101      	bne.n	800b3e4 <BMP_Upkeep+0x108>
 800b3e0:	4b88      	ldr	r3, [pc, #544]	@ (800b604 <BMP_Upkeep+0x328>)
 800b3e2:	e008      	b.n	800b3f6 <BMP_Upkeep+0x11a>
 800b3e4:	4b88      	ldr	r3, [pc, #544]	@ (800b608 <BMP_Upkeep+0x32c>)
 800b3e6:	e006      	b.n	800b3f6 <BMP_Upkeep+0x11a>
 800b3e8:	4b88      	ldr	r3, [pc, #544]	@ (800b60c <BMP_Upkeep+0x330>)
 800b3ea:	e004      	b.n	800b3f6 <BMP_Upkeep+0x11a>
 800b3ec:	4b88      	ldr	r3, [pc, #544]	@ (800b610 <BMP_Upkeep+0x334>)
 800b3ee:	e002      	b.n	800b3f6 <BMP_Upkeep+0x11a>
 800b3f0:	4b88      	ldr	r3, [pc, #544]	@ (800b614 <BMP_Upkeep+0x338>)
 800b3f2:	e000      	b.n	800b3f6 <BMP_Upkeep+0x11a>
 800b3f4:	4b88      	ldr	r3, [pc, #544]	@ (800b618 <BMP_Upkeep+0x33c>)
 800b3f6:	4a89      	ldr	r2, [pc, #548]	@ (800b61c <BMP_Upkeep+0x340>)
 800b3f8:	497d      	ldr	r1, [pc, #500]	@ (800b5f0 <BMP_Upkeep+0x314>)
 800b3fa:	2003      	movs	r0, #3
 800b3fc:	f007 feca 	bl	8013194 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800b400:	f008 fc08 	bl	8013c14 <HAL_GetTick>
 800b404:	0003      	movs	r3, r0
 800b406:	3361      	adds	r3, #97	@ 0x61
 800b408:	001a      	movs	r2, r3
 800b40a:	4b75      	ldr	r3, [pc, #468]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b40c:	601a      	str	r2, [r3, #0]
      break;
 800b40e:	e0e0      	b.n	800b5d2 <BMP_Upkeep+0x2f6>
    }
    if (getSensorLock() == FREE) {
 800b410:	f001 ff4e 	bl	800d2b0 <getSensorLock>
 800b414:	1e03      	subs	r3, r0, #0
 800b416:	d105      	bne.n	800b424 <BMP_Upkeep+0x148>
      HAL_Delay(10);
 800b418:	200a      	movs	r0, #10
 800b41a:	f008 fc05 	bl	8013c28 <HAL_Delay>
      setSensorLock(BMP280);
 800b41e:	2003      	movs	r0, #3
 800b420:	f001 ff32 	bl	800d288 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800b424:	f7ff fd5a 	bl	800aedc <BMP280_set_mode>
 800b428:	1e03      	subs	r3, r0, #0
 800b42a:	d003      	beq.n	800b434 <BMP_Upkeep+0x158>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b42c:	4b6d      	ldr	r3, [pc, #436]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b42e:	2205      	movs	r2, #5
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e00f      	b.n	800b454 <BMP_Upkeep+0x178>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800b434:	4a7a      	ldr	r2, [pc, #488]	@ (800b620 <BMP_Upkeep+0x344>)
 800b436:	4b71      	ldr	r3, [pc, #452]	@ (800b5fc <BMP_Upkeep+0x320>)
 800b438:	0019      	movs	r1, r3
 800b43a:	2001      	movs	r0, #1
 800b43c:	f007 feaa 	bl	8013194 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b440:	f008 fbe8 	bl	8013c14 <HAL_GetTick>
 800b444:	0003      	movs	r3, r0
 800b446:	4a6e      	ldr	r2, [pc, #440]	@ (800b600 <BMP_Upkeep+0x324>)
 800b448:	189a      	adds	r2, r3, r2
 800b44a:	4b65      	ldr	r3, [pc, #404]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b44c:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b44e:	4b65      	ldr	r3, [pc, #404]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b450:	2208      	movs	r2, #8
 800b452:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b454:	200a      	movs	r0, #10
 800b456:	f008 fbe7 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 800b45a:	2000      	movs	r0, #0
 800b45c:	f001 ff14 	bl	800d288 <setSensorLock>
    break;
 800b460:	e0b7      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800b462:	f001 ff25 	bl	800d2b0 <getSensorLock>
 800b466:	1e03      	subs	r3, r0, #0
 800b468:	d000      	beq.n	800b46c <BMP_Upkeep+0x190>
 800b46a:	e0ad      	b.n	800b5c8 <BMP_Upkeep+0x2ec>
      break;
    }
    HAL_Delay(10);
 800b46c:	200a      	movs	r0, #10
 800b46e:	f008 fbdb 	bl	8013c28 <HAL_Delay>
    setSensorLock(BMP280);
 800b472:	2003      	movs	r0, #3
 800b474:	f001 ff08 	bl	800d288 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800b478:	f7ff fdb0 	bl	800afdc <BMP280_get_measurement_values>
 800b47c:	1e03      	subs	r3, r0, #0
 800b47e:	d003      	beq.n	800b488 <BMP_Upkeep+0x1ac>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800b480:	4b58      	ldr	r3, [pc, #352]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b482:	2203      	movs	r2, #3
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e00f      	b.n	800b4a8 <BMP_Upkeep+0x1cc>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b488:	4a66      	ldr	r2, [pc, #408]	@ (800b624 <BMP_Upkeep+0x348>)
 800b48a:	4b5c      	ldr	r3, [pc, #368]	@ (800b5fc <BMP_Upkeep+0x320>)
 800b48c:	0019      	movs	r1, r3
 800b48e:	2001      	movs	r0, #1
 800b490:	f007 fe80 	bl	8013194 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b494:	f008 fbbe 	bl	8013c14 <HAL_GetTick>
 800b498:	0003      	movs	r3, r0
 800b49a:	4a59      	ldr	r2, [pc, #356]	@ (800b600 <BMP_Upkeep+0x324>)
 800b49c:	189a      	adds	r2, r3, r2
 800b49e:	4b50      	ldr	r3, [pc, #320]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b4a0:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b4a2:	4b50      	ldr	r3, [pc, #320]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b4a8:	200a      	movs	r0, #10
 800b4aa:	f008 fbbd 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f001 feea 	bl	800d288 <setSensorLock>
  break;
 800b4b4:	e08d      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b4b6:	f7ff fe1d 	bl	800b0f4 <BMP280_calc_temperature>
 800b4ba:	1c03      	adds	r3, r0, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b4be:	f7ff fe61 	bl	800b184 <BMP280_calc_pressure>
 800b4c2:	1c03      	adds	r3, r0, #0
 800b4c4:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b4c6:	4958      	ldr	r1, [pc, #352]	@ (800b628 <BMP_Upkeep+0x34c>)
 800b4c8:	68b8      	ldr	r0, [r7, #8]
 800b4ca:	f7f5 f845 	bl	8000558 <__aeabi_fcmpgt>
 800b4ce:	1e03      	subs	r3, r0, #0
 800b4d0:	d034      	beq.n	800b53c <BMP_Upkeep+0x260>
 800b4d2:	4956      	ldr	r1, [pc, #344]	@ (800b62c <BMP_Upkeep+0x350>)
 800b4d4:	68b8      	ldr	r0, [r7, #8]
 800b4d6:	f7f5 f82b 	bl	8000530 <__aeabi_fcmplt>
 800b4da:	1e03      	subs	r3, r0, #0
 800b4dc:	d02e      	beq.n	800b53c <BMP_Upkeep+0x260>
//      sethPa(airhpa);
      Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800b4de:	68b8      	ldr	r0, [r7, #8]
 800b4e0:	f7f8 f9d8 	bl	8003894 <__aeabi_f2d>
 800b4e4:	0004      	movs	r4, r0
 800b4e6:	000d      	movs	r5, r1
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7f8 f9d3 	bl	8003894 <__aeabi_f2d>
 800b4ee:	0002      	movs	r2, r0
 800b4f0:	000b      	movs	r3, r1
 800b4f2:	484f      	ldr	r0, [pc, #316]	@ (800b630 <BMP_Upkeep+0x354>)
 800b4f4:	494f      	ldr	r1, [pc, #316]	@ (800b634 <BMP_Upkeep+0x358>)
 800b4f6:	9202      	str	r2, [sp, #8]
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	9400      	str	r4, [sp, #0]
 800b4fc:	9501      	str	r5, [sp, #4]
 800b4fe:	0002      	movs	r2, r0
 800b500:	2002      	movs	r0, #2
 800b502:	f007 fe47 	bl	8013194 <CreateLine>
      setBMP280(airtemp, airhpa);
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	1c11      	adds	r1, r2, #0
 800b50c:	1c18      	adds	r0, r3, #0
 800b50e:	f7f9 facb 	bl	8004aa8 <setBMP280>
      if (Check_USB_PowerOn()) {
 800b512:	f7fd fe9f 	bl	8009254 <Check_USB_PowerOn>
 800b516:	1e03      	subs	r3, r0, #0
 800b518:	d007      	beq.n	800b52a <BMP_Upkeep+0x24e>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800b51a:	f008 fb7b 	bl	8013c14 <HAL_GetTick>
 800b51e:	0003      	movs	r3, r0
 800b520:	4a45      	ldr	r2, [pc, #276]	@ (800b638 <BMP_Upkeep+0x35c>)
 800b522:	189a      	adds	r2, r3, r2
 800b524:	4b2e      	ldr	r3, [pc, #184]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b526:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b528:	e015      	b.n	800b556 <BMP_Upkeep+0x27a>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800b52a:	f008 fb73 	bl	8013c14 <HAL_GetTick>
 800b52e:	0003      	movs	r3, r0
 800b530:	22fa      	movs	r2, #250	@ 0xfa
 800b532:	0092      	lsls	r2, r2, #2
 800b534:	189a      	adds	r2, r3, r2
 800b536:	4b2a      	ldr	r3, [pc, #168]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b538:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b53a:	e00c      	b.n	800b556 <BMP_Upkeep+0x27a>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b53c:	4a3f      	ldr	r2, [pc, #252]	@ (800b63c <BMP_Upkeep+0x360>)
 800b53e:	4b2f      	ldr	r3, [pc, #188]	@ (800b5fc <BMP_Upkeep+0x320>)
 800b540:	0019      	movs	r1, r3
 800b542:	2001      	movs	r0, #1
 800b544:	f007 fe26 	bl	8013194 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b548:	f008 fb64 	bl	8013c14 <HAL_GetTick>
 800b54c:	0003      	movs	r3, r0
 800b54e:	4a2c      	ldr	r2, [pc, #176]	@ (800b600 <BMP_Upkeep+0x324>)
 800b550:	189a      	adds	r2, r3, r2
 800b552:	4b23      	ldr	r3, [pc, #140]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b554:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b556:	4b23      	ldr	r3, [pc, #140]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b558:	2208      	movs	r2, #8
 800b55a:	701a      	strb	r2, [r3, #0]
    break;
 800b55c:	e039      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b55e:	4b21      	ldr	r3, [pc, #132]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b560:	2209      	movs	r2, #9
 800b562:	701a      	strb	r2, [r3, #0]
    break;
 800b564:	e035      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b566:	f001 fea3 	bl	800d2b0 <getSensorLock>
 800b56a:	1e03      	subs	r3, r0, #0
 800b56c:	d12e      	bne.n	800b5cc <BMP_Upkeep+0x2f0>
      break;
    }
    setSensorLock(BMP280);
 800b56e:	2003      	movs	r0, #3
 800b570:	f001 fe8a 	bl	800d288 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b574:	f7ff fd06 	bl	800af84 <BMP280_get_mode>
 800b578:	0003      	movs	r3, r0
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d103      	bne.n	800b586 <BMP_Upkeep+0x2aa>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b57e:	4b19      	ldr	r3, [pc, #100]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b580:	2205      	movs	r2, #5
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e002      	b.n	800b58c <BMP_Upkeep+0x2b0>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b586:	4b17      	ldr	r3, [pc, #92]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b588:	2202      	movs	r2, #2
 800b58a:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b58c:	200a      	movs	r0, #10
 800b58e:	f008 fb4b 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 800b592:	2000      	movs	r0, #0
 800b594:	f001 fe78 	bl	800d288 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b598:	f008 fb3c 	bl	8013c14 <HAL_GetTick>
 800b59c:	0003      	movs	r3, r0
 800b59e:	3317      	adds	r3, #23
 800b5a0:	001a      	movs	r2, r3
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e0 <BMP_Upkeep+0x304>)
 800b5a4:	601a      	str	r2, [r3, #0]
    break;
 800b5a6:	e014      	b.n	800b5d2 <BMP_Upkeep+0x2f6>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b5ae:	f001 fe7f 	bl	800d2b0 <getSensorLock>
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d10b      	bne.n	800b5d0 <BMP_Upkeep+0x2f4>
      setSensorLock(FREE);
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f001 fe65 	bl	800d288 <setSensorLock>
    }
    break;
 800b5be:	e007      	b.n	800b5d0 <BMP_Upkeep+0x2f4>
      break;
 800b5c0:	46c0      	nop			@ (mov r8, r8)
 800b5c2:	e006      	b.n	800b5d2 <BMP_Upkeep+0x2f6>
      break;
 800b5c4:	46c0      	nop			@ (mov r8, r8)
 800b5c6:	e004      	b.n	800b5d2 <BMP_Upkeep+0x2f6>
      break;
 800b5c8:	46c0      	nop			@ (mov r8, r8)
 800b5ca:	e002      	b.n	800b5d2 <BMP_Upkeep+0x2f6>
      break;
 800b5cc:	46c0      	nop			@ (mov r8, r8)
 800b5ce:	e000      	b.n	800b5d2 <BMP_Upkeep+0x2f6>
    break;
 800b5d0:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b5d2:	4b04      	ldr	r3, [pc, #16]	@ (800b5e4 <BMP_Upkeep+0x308>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
}
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b004      	add	sp, #16
 800b5dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b5de:	46c0      	nop			@ (mov r8, r8)
 800b5e0:	20000c14 	.word	0x20000c14
 800b5e4:	20000096 	.word	0x20000096
 800b5e8:	0802d9e8 	.word	0x0802d9e8
 800b5ec:	0802bf4c 	.word	0x0802bf4c
 800b5f0:	0802bb4c 	.word	0x0802bb4c
 800b5f4:	002f9b80 	.word	0x002f9b80
 800b5f8:	0802bf88 	.word	0x0802bf88
 800b5fc:	0802be3c 	.word	0x0802be3c
 800b600:	00002710 	.word	0x00002710
 800b604:	0802bfa8 	.word	0x0802bfa8
 800b608:	0802bfb0 	.word	0x0802bfb0
 800b60c:	0802bfb8 	.word	0x0802bfb8
 800b610:	0802bfc0 	.word	0x0802bfc0
 800b614:	0802bfc8 	.word	0x0802bfc8
 800b618:	0802bfd0 	.word	0x0802bfd0
 800b61c:	0802bfd8 	.word	0x0802bfd8
 800b620:	0802c000 	.word	0x0802c000
 800b624:	0802c02c 	.word	0x0802c02c
 800b628:	44548000 	.word	0x44548000
 800b62c:	44898000 	.word	0x44898000
 800b630:	0802c064 	.word	0x0802c064
 800b634:	0802bb2c 	.word	0x0802bb2c
 800b638:	0000ea60 	.word	0x0000ea60
 800b63c:	0802c0a0 	.word	0x0802c0a0

0800b640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b646:	4b10      	ldr	r3, [pc, #64]	@ (800b688 <MX_DMA_Init+0x48>)
 800b648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b64a:	4b0f      	ldr	r3, [pc, #60]	@ (800b688 <MX_DMA_Init+0x48>)
 800b64c:	2101      	movs	r1, #1
 800b64e:	430a      	orrs	r2, r1
 800b650:	631a      	str	r2, [r3, #48]	@ 0x30
 800b652:	4b0d      	ldr	r3, [pc, #52]	@ (800b688 <MX_DMA_Init+0x48>)
 800b654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b656:	2201      	movs	r2, #1
 800b658:	4013      	ands	r3, r2
 800b65a:	607b      	str	r3, [r7, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	200a      	movs	r0, #10
 800b664:	f008 ff7a 	bl	801455c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b668:	200a      	movs	r0, #10
 800b66a:	f008 ff8c 	bl	8014586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b66e:	2200      	movs	r2, #0
 800b670:	2103      	movs	r1, #3
 800b672:	200b      	movs	r0, #11
 800b674:	f008 ff72 	bl	801455c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b678:	200b      	movs	r0, #11
 800b67a:	f008 ff84 	bl	8014586 <HAL_NVIC_EnableIRQ>

}
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	46bd      	mov	sp, r7
 800b682:	b002      	add	sp, #8
 800b684:	bd80      	pop	{r7, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	40021000 	.word	0x40021000

0800b68c <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	1dbb      	adds	r3, r7, #6
 800b698:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b69a:	4b17      	ldr	r3, [pc, #92]	@ (800b6f8 <WriteUint8ArrayEeprom+0x6c>)
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b6a0:	f009 faee 	bl	8014c80 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b6a4:	2316      	movs	r3, #22
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	801a      	strh	r2, [r3, #0]
 800b6ac:	e015      	b.n	800b6da <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b6ae:	4b12      	ldr	r3, [pc, #72]	@ (800b6f8 <WriteUint8ArrayEeprom+0x6c>)
 800b6b0:	6819      	ldr	r1, [r3, #0]
 800b6b2:	2416      	movs	r4, #22
 800b6b4:	193b      	adds	r3, r7, r4
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	18d3      	adds	r3, r2, r3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	001a      	movs	r2, r3
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f009 fb45 	bl	8014d50 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f8 <WriteUint8ArrayEeprom+0x6c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <WriteUint8ArrayEeprom+0x6c>)
 800b6ce:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b6d0:	193b      	adds	r3, r7, r4
 800b6d2:	881a      	ldrh	r2, [r3, #0]
 800b6d4:	193b      	adds	r3, r7, r4
 800b6d6:	3201      	adds	r2, #1
 800b6d8:	801a      	strh	r2, [r3, #0]
 800b6da:	2316      	movs	r3, #22
 800b6dc:	18fa      	adds	r2, r7, r3
 800b6de:	1dbb      	adds	r3, r7, #6
 800b6e0:	8812      	ldrh	r2, [r2, #0]
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d3e2      	bcc.n	800b6ae <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b6e8:	f009 faf8 	bl	8014cdc <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	@ (800b6f8 <WriteUint8ArrayEeprom+0x6c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
}
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	b007      	add	sp, #28
 800b6f6:	bd90      	pop	{r4, r7, pc}
 800b6f8:	20000c38 	.word	0x20000c38

0800b6fc <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	0019      	movs	r1, r3
 800b708:	1dbb      	adds	r3, r7, #6
 800b70a:	801a      	strh	r2, [r3, #0]
 800b70c:	1d3b      	adds	r3, r7, #4
 800b70e:	1c0a      	adds	r2, r1, #0
 800b710:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b712:	1dba      	adds	r2, r7, #6
 800b714:	1d3b      	adds	r3, r7, #4
 800b716:	8812      	ldrh	r2, [r2, #0]
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d806      	bhi.n	800b72c <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b71e:	1dbb      	adds	r3, r7, #6
 800b720:	881a      	ldrh	r2, [r3, #0]
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	0018      	movs	r0, r3
 800b728:	f7ff ffb0 	bl	800b68c <WriteUint8ArrayEeprom>
    }
}
 800b72c:	46c0      	nop			@ (mov r8, r8)
 800b72e:	46bd      	mov	sp, r7
 800b730:	b004      	add	sp, #16
 800b732:	bd80      	pop	{r7, pc}

0800b734 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	1dbb      	adds	r3, r7, #6
 800b740:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b742:	2316      	movs	r3, #22
 800b744:	18fb      	adds	r3, r7, r3
 800b746:	2200      	movs	r2, #0
 800b748:	801a      	strh	r2, [r3, #0]
 800b74a:	e010      	b.n	800b76e <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b74c:	2016      	movs	r0, #22
 800b74e:	183b      	adds	r3, r7, r0
 800b750:	881a      	ldrh	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	18d3      	adds	r3, r2, r3
 800b756:	0019      	movs	r1, r3
 800b758:	183b      	adds	r3, r7, r0
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	18d3      	adds	r3, r2, r3
 800b760:	780a      	ldrb	r2, [r1, #0]
 800b762:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b764:	183b      	adds	r3, r7, r0
 800b766:	881a      	ldrh	r2, [r3, #0]
 800b768:	183b      	adds	r3, r7, r0
 800b76a:	3201      	adds	r2, #1
 800b76c:	801a      	strh	r2, [r3, #0]
 800b76e:	2316      	movs	r3, #22
 800b770:	18fa      	adds	r2, r7, r3
 800b772:	1dbb      	adds	r3, r7, #6
 800b774:	8812      	ldrh	r2, [r2, #0]
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d3e7      	bcc.n	800b74c <ReadUint8ArrayEEprom+0x18>
    }
}
 800b77c:	46c0      	nop			@ (mov r8, r8)
 800b77e:	46c0      	nop			@ (mov r8, r8)
 800b780:	46bd      	mov	sp, r7
 800b782:	b006      	add	sp, #24
 800b784:	bd80      	pop	{r7, pc}

0800b786 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b786:	b590      	push	{r4, r7, lr}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	000a      	movs	r2, r1
 800b790:	1cbb      	adds	r3, r7, #2
 800b792:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b794:	f009 fa74 	bl	8014c80 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b798:	230e      	movs	r3, #14
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	2200      	movs	r2, #0
 800b79e:	801a      	strh	r2, [r3, #0]
 800b7a0:	e00c      	b.n	800b7bc <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b7a2:	240e      	movs	r4, #14
 800b7a4:	193b      	adds	r3, r7, r4
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	18d3      	adds	r3, r2, r3
 800b7ac:	0018      	movs	r0, r3
 800b7ae:	f009 faa3 	bl	8014cf8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b7b2:	193b      	adds	r3, r7, r4
 800b7b4:	193a      	adds	r2, r7, r4
 800b7b6:	8812      	ldrh	r2, [r2, #0]
 800b7b8:	3204      	adds	r2, #4
 800b7ba:	801a      	strh	r2, [r3, #0]
 800b7bc:	230e      	movs	r3, #14
 800b7be:	18fa      	adds	r2, r7, r3
 800b7c0:	1cbb      	adds	r3, r7, #2
 800b7c2:	8812      	ldrh	r2, [r2, #0]
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d3eb      	bcc.n	800b7a2 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b7ca:	f009 fa87 	bl	8014cdc <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b7ce:	46c0      	nop			@ (mov r8, r8)
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	b005      	add	sp, #20
 800b7d4:	bd90      	pop	{r4, r7, pc}
	...

0800b7d8 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7e8:	d901      	bls.n	800b7ee <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b7ea:	237f      	movs	r3, #127	@ 0x7f
 800b7ec:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b7ee:	2017      	movs	r0, #23
 800b7f0:	183b      	adds	r3, r7, r0
 800b7f2:	490d      	ldr	r1, [pc, #52]	@ (800b828 <accessLUT10log10+0x50>)
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	188a      	adds	r2, r1, r2
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b7fc:	0001      	movs	r1, r0
 800b7fe:	187b      	adds	r3, r7, r1
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2206      	movs	r2, #6
 800b804:	4113      	asrs	r3, r2
 800b806:	001a      	movs	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b80c:	187b      	adds	r3, r7, r1
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2106      	movs	r1, #6
 800b816:	408b      	lsls	r3, r1
 800b818:	1ad2      	subs	r2, r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
}
 800b81e:	46c0      	nop			@ (mov r8, r8)
 800b820:	46bd      	mov	sp, r7
 800b822:	b006      	add	sp, #24
 800b824:	bd80      	pop	{r7, pc}
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	0802da10 	.word	0x0802da10

0800b82c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b82c:	b5b0      	push	{r4, r5, r7, lr}
 800b82e:	b090      	sub	sp, #64	@ 0x40
 800b830:	af00      	add	r7, sp, #0
 800b832:	6138      	str	r0, [r7, #16]
 800b834:	6179      	str	r1, [r7, #20]
 800b836:	60fa      	str	r2, [r7, #12]
 800b838:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b83a:	2308      	movs	r3, #8
 800b83c:	001a      	movs	r2, r3
 800b83e:	3a20      	subs	r2, #32
 800b840:	2a00      	cmp	r2, #0
 800b842:	db03      	blt.n	800b84c <efficient10log10+0x20>
 800b844:	2101      	movs	r1, #1
 800b846:	4091      	lsls	r1, r2
 800b848:	000d      	movs	r5, r1
 800b84a:	e008      	b.n	800b85e <efficient10log10+0x32>
 800b84c:	2220      	movs	r2, #32
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	2101      	movs	r1, #1
 800b852:	40d1      	lsrs	r1, r2
 800b854:	000a      	movs	r2, r1
 800b856:	2100      	movs	r1, #0
 800b858:	4099      	lsls	r1, r3
 800b85a:	000d      	movs	r5, r1
 800b85c:	4315      	orrs	r5, r2
 800b85e:	2201      	movs	r2, #1
 800b860:	409a      	lsls	r2, r3
 800b862:	0014      	movs	r4, r2
 800b864:	2201      	movs	r2, #1
 800b866:	4252      	negs	r2, r2
 800b868:	17d3      	asrs	r3, r2, #31
 800b86a:	1912      	adds	r2, r2, r4
 800b86c:	416b      	adcs	r3, r5
 800b86e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b872:	2336      	movs	r3, #54	@ 0x36
 800b874:	2208      	movs	r2, #8
 800b876:	189b      	adds	r3, r3, r2
 800b878:	19db      	adds	r3, r3, r7
 800b87a:	2200      	movs	r2, #0
 800b87c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b87e:	e017      	b.n	800b8b0 <efficient10log10+0x84>
    {
        P = P >> 1;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	07db      	lsls	r3, r3, #31
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	0852      	lsrs	r2, r2, #1
 800b888:	603a      	str	r2, [r7, #0]
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	431a      	orrs	r2, r3
 800b88e:	603a      	str	r2, [r7, #0]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	085b      	lsrs	r3, r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	687c      	ldr	r4, [r7, #4]
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	617c      	str	r4, [r7, #20]
        bShift++;
 800b89e:	2136      	movs	r1, #54	@ 0x36
 800b8a0:	2008      	movs	r0, #8
 800b8a2:	180b      	adds	r3, r1, r0
 800b8a4:	19db      	adds	r3, r3, r7
 800b8a6:	881a      	ldrh	r2, [r3, #0]
 800b8a8:	180b      	adds	r3, r1, r0
 800b8aa:	19db      	adds	r3, r3, r7
 800b8ac:	3201      	adds	r2, #1
 800b8ae:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d8e3      	bhi.n	800b880 <efficient10log10+0x54>
 800b8b8:	697a      	ldr	r2, [r7, #20]
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d103      	bne.n	800b8c8 <efficient10log10+0x9c>
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d8db      	bhi.n	800b880 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	4099      	lsls	r1, r3
 800b8d2:	000b      	movs	r3, r1
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800b8e0:	231c      	movs	r3, #28
 800b8e2:	2408      	movs	r4, #8
 800b8e4:	191b      	adds	r3, r3, r4
 800b8e6:	19da      	adds	r2, r3, r7
 800b8e8:	2320      	movs	r3, #32
 800b8ea:	191b      	adds	r3, r3, r4
 800b8ec:	19d9      	adds	r1, r3, r7
 800b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f7ff ff71 	bl	800b7d8 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b8f6:	2215      	movs	r2, #21
 800b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fa:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800b8fc:	2036      	movs	r0, #54	@ 0x36
 800b8fe:	1902      	adds	r2, r0, r4
 800b900:	19d2      	adds	r2, r2, r7
 800b902:	8812      	ldrh	r2, [r2, #0]
 800b904:	2103      	movs	r1, #3
 800b906:	434a      	muls	r2, r1
 800b908:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b90a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800b90c:	0021      	movs	r1, r4
 800b90e:	1843      	adds	r3, r0, r1
 800b910:	19db      	adds	r3, r3, r7
 800b912:	881b      	ldrh	r3, [r3, #0]
 800b914:	2201      	movs	r2, #1
 800b916:	4353      	muls	r3, r2
 800b918:	2203      	movs	r2, #3
 800b91a:	4113      	asrs	r3, r2
 800b91c:	001a      	movs	r2, r3
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800b922:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800b924:	2314      	movs	r3, #20
 800b926:	185b      	adds	r3, r3, r1
 800b928:	19da      	adds	r2, r3, r7
 800b92a:	2318      	movs	r3, #24
 800b92c:	185b      	adds	r3, r3, r1
 800b92e:	19db      	adds	r3, r3, r7
 800b930:	0011      	movs	r1, r2
 800b932:	0018      	movs	r0, r3
 800b934:	f000 f80a 	bl	800b94c <correctIntFracNumber>
    integerPart[0] = intPart;
 800b938:	6a3a      	ldr	r2, [r7, #32]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	601a      	str	r2, [r3, #0]
}
 800b944:	46c0      	nop			@ (mov r8, r8)
 800b946:	46bd      	mov	sp, r7
 800b948:	b010      	add	sp, #64	@ 0x40
 800b94a:	bdb0      	pop	{r4, r5, r7, pc}

0800b94c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b956:	e00a      	b.n	800b96e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3b0a      	subs	r3, #10
 800b968:	001a      	movs	r2, r3
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b09      	cmp	r3, #9
 800b974:	dcf0      	bgt.n	800b958 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b976:	e00a      	b.n	800b98e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	1e5a      	subs	r2, r3, #1
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	330a      	adds	r3, #10
 800b988:	001a      	movs	r2, r3
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3309      	adds	r3, #9
 800b994:	dbf0      	blt.n	800b978 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da0f      	bge.n	800b9be <correctIntFracNumber+0x72>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	dd0b      	ble.n	800b9be <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3b0a      	subs	r3, #10
 800b9b6:	001a      	movs	r2, r3
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b9bc:	e012      	b.n	800b9e4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	dd0e      	ble.n	800b9e4 <correctIntFracNumber+0x98>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	da0a      	bge.n	800b9e4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1e5a      	subs	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330a      	adds	r3, #10
 800b9de:	001a      	movs	r2, r3
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	601a      	str	r2, [r3, #0]
}
 800b9e4:	46c0      	nop			@ (mov r8, r8)
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	b002      	add	sp, #8
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b08b      	sub	sp, #44	@ 0x2c
 800b9f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f2:	2414      	movs	r4, #20
 800b9f4:	193b      	adds	r3, r7, r4
 800b9f6:	0018      	movs	r0, r3
 800b9f8:	2314      	movs	r3, #20
 800b9fa:	001a      	movs	r2, r3
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	f019 febd 	bl	802577c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba02:	4b8a      	ldr	r3, [pc, #552]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba06:	4b89      	ldr	r3, [pc, #548]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba08:	2104      	movs	r1, #4
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba0e:	4b87      	ldr	r3, [pc, #540]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba12:	2204      	movs	r2, #4
 800ba14:	4013      	ands	r3, r2
 800ba16:	613b      	str	r3, [r7, #16]
 800ba18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ba1a:	4b84      	ldr	r3, [pc, #528]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1e:	4b83      	ldr	r3, [pc, #524]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba20:	2180      	movs	r1, #128	@ 0x80
 800ba22:	430a      	orrs	r2, r1
 800ba24:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba26:	4b81      	ldr	r3, [pc, #516]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2a:	2280      	movs	r2, #128	@ 0x80
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba32:	4b7e      	ldr	r3, [pc, #504]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba36:	4b7d      	ldr	r3, [pc, #500]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba38:	2101      	movs	r1, #1
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba3e:	4b7b      	ldr	r3, [pc, #492]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba42:	2201      	movs	r2, #1
 800ba44:	4013      	ands	r3, r2
 800ba46:	60bb      	str	r3, [r7, #8]
 800ba48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba4a:	4b78      	ldr	r3, [pc, #480]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4e:	4b77      	ldr	r3, [pc, #476]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba50:	2102      	movs	r1, #2
 800ba52:	430a      	orrs	r2, r1
 800ba54:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba56:	4b75      	ldr	r3, [pc, #468]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ba62:	4b72      	ldr	r3, [pc, #456]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba66:	4b71      	ldr	r3, [pc, #452]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba68:	2108      	movs	r1, #8
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba6e:	4b6f      	ldr	r3, [pc, #444]	@ (800bc2c <MX_GPIO_Init+0x240>)
 800ba70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba72:	2208      	movs	r2, #8
 800ba74:	4013      	ands	r3, r2
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800ba7a:	4b6d      	ldr	r3, [pc, #436]	@ (800bc30 <MX_GPIO_Init+0x244>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	2101      	movs	r1, #1
 800ba80:	0018      	movs	r0, r3
 800ba82:	f009 fb58 	bl	8015136 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800ba86:	4b6a      	ldr	r3, [pc, #424]	@ (800bc30 <MX_GPIO_Init+0x244>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f009 fb52 	bl	8015136 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800ba92:	4968      	ldr	r1, [pc, #416]	@ (800bc34 <MX_GPIO_Init+0x248>)
 800ba94:	4b68      	ldr	r3, [pc, #416]	@ (800bc38 <MX_GPIO_Init+0x24c>)
 800ba96:	2201      	movs	r2, #1
 800ba98:	0018      	movs	r0, r3
 800ba9a:	f009 fb4c 	bl	8015136 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800ba9e:	2380      	movs	r3, #128	@ 0x80
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	4866      	ldr	r0, [pc, #408]	@ (800bc3c <MX_GPIO_Init+0x250>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	0019      	movs	r1, r3
 800baa8:	f009 fb45 	bl	8015136 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800baac:	2380      	movs	r3, #128	@ 0x80
 800baae:	015b      	lsls	r3, r3, #5
 800bab0:	4862      	ldr	r0, [pc, #392]	@ (800bc3c <MX_GPIO_Init+0x250>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	0019      	movs	r1, r3
 800bab6:	f009 fb3e 	bl	8015136 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800baba:	193b      	adds	r3, r7, r4
 800babc:	4a60      	ldr	r2, [pc, #384]	@ (800bc40 <MX_GPIO_Init+0x254>)
 800babe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bac0:	193b      	adds	r3, r7, r4
 800bac2:	2203      	movs	r2, #3
 800bac4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac6:	193b      	adds	r3, r7, r4
 800bac8:	2200      	movs	r2, #0
 800baca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bacc:	193b      	adds	r3, r7, r4
 800bace:	4a5b      	ldr	r2, [pc, #364]	@ (800bc3c <MX_GPIO_Init+0x250>)
 800bad0:	0019      	movs	r1, r3
 800bad2:	0010      	movs	r0, r2
 800bad4:	f009 f994 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800bad8:	193b      	adds	r3, r7, r4
 800bada:	2203      	movs	r2, #3
 800badc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bade:	193b      	adds	r3, r7, r4
 800bae0:	2201      	movs	r2, #1
 800bae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae4:	193b      	adds	r3, r7, r4
 800bae6:	2200      	movs	r2, #0
 800bae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800baea:	193b      	adds	r3, r7, r4
 800baec:	2200      	movs	r2, #0
 800baee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800baf0:	193b      	adds	r3, r7, r4
 800baf2:	4a4f      	ldr	r2, [pc, #316]	@ (800bc30 <MX_GPIO_Init+0x244>)
 800baf4:	0019      	movs	r1, r3
 800baf6:	0010      	movs	r0, r2
 800baf8:	f009 f982 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800bafc:	193b      	adds	r3, r7, r4
 800bafe:	2270      	movs	r2, #112	@ 0x70
 800bb00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb02:	193b      	adds	r3, r7, r4
 800bb04:	2203      	movs	r2, #3
 800bb06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb0e:	193a      	adds	r2, r7, r4
 800bb10:	23a0      	movs	r3, #160	@ 0xa0
 800bb12:	05db      	lsls	r3, r3, #23
 800bb14:	0011      	movs	r1, r2
 800bb16:	0018      	movs	r0, r3
 800bb18:	f009 f972 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800bb1c:	193b      	adds	r3, r7, r4
 800bb1e:	22c0      	movs	r2, #192	@ 0xc0
 800bb20:	0052      	lsls	r2, r2, #1
 800bb22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb24:	193b      	adds	r3, r7, r4
 800bb26:	2200      	movs	r2, #0
 800bb28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb2a:	193b      	adds	r3, r7, r4
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb30:	193a      	adds	r2, r7, r4
 800bb32:	23a0      	movs	r3, #160	@ 0xa0
 800bb34:	05db      	lsls	r3, r3, #23
 800bb36:	0011      	movs	r1, r2
 800bb38:	0018      	movs	r0, r3
 800bb3a:	f009 f961 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800bb3e:	193b      	adds	r3, r7, r4
 800bb40:	4a3c      	ldr	r2, [pc, #240]	@ (800bc34 <MX_GPIO_Init+0x248>)
 800bb42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb44:	193b      	adds	r3, r7, r4
 800bb46:	2201      	movs	r2, #1
 800bb48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb4a:	193b      	adds	r3, r7, r4
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb50:	193b      	adds	r3, r7, r4
 800bb52:	2200      	movs	r2, #0
 800bb54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb56:	193b      	adds	r3, r7, r4
 800bb58:	4a37      	ldr	r2, [pc, #220]	@ (800bc38 <MX_GPIO_Init+0x24c>)
 800bb5a:	0019      	movs	r1, r3
 800bb5c:	0010      	movs	r0, r2
 800bb5e:	f009 f94f 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800bb62:	193b      	adds	r3, r7, r4
 800bb64:	4a37      	ldr	r2, [pc, #220]	@ (800bc44 <MX_GPIO_Init+0x258>)
 800bb66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb6e:	193b      	adds	r3, r7, r4
 800bb70:	2200      	movs	r2, #0
 800bb72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb74:	193b      	adds	r3, r7, r4
 800bb76:	4a30      	ldr	r2, [pc, #192]	@ (800bc38 <MX_GPIO_Init+0x24c>)
 800bb78:	0019      	movs	r1, r3
 800bb7a:	0010      	movs	r0, r2
 800bb7c:	f009 f940 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800bb80:	0021      	movs	r1, r4
 800bb82:	187b      	adds	r3, r7, r1
 800bb84:	2280      	movs	r2, #128	@ 0x80
 800bb86:	0092      	lsls	r2, r2, #2
 800bb88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb8a:	000c      	movs	r4, r1
 800bb8c:	193b      	adds	r3, r7, r4
 800bb8e:	2200      	movs	r2, #0
 800bb90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb92:	193b      	adds	r3, r7, r4
 800bb94:	2200      	movs	r2, #0
 800bb96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800bb98:	193b      	adds	r3, r7, r4
 800bb9a:	4a28      	ldr	r2, [pc, #160]	@ (800bc3c <MX_GPIO_Init+0x250>)
 800bb9c:	0019      	movs	r1, r3
 800bb9e:	0010      	movs	r0, r2
 800bba0:	f009 f92e 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800bba4:	193b      	adds	r3, r7, r4
 800bba6:	2280      	movs	r2, #128	@ 0x80
 800bba8:	0212      	lsls	r2, r2, #8
 800bbaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bbac:	193b      	adds	r3, r7, r4
 800bbae:	2288      	movs	r2, #136	@ 0x88
 800bbb0:	0352      	lsls	r2, r2, #13
 800bbb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb4:	193b      	adds	r3, r7, r4
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800bbba:	193a      	adds	r2, r7, r4
 800bbbc:	23a0      	movs	r3, #160	@ 0xa0
 800bbbe:	05db      	lsls	r3, r3, #23
 800bbc0:	0011      	movs	r1, r2
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f009 f91c 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800bbc8:	0021      	movs	r1, r4
 800bbca:	187b      	adds	r3, r7, r1
 800bbcc:	22c0      	movs	r2, #192	@ 0xc0
 800bbce:	0152      	lsls	r2, r2, #5
 800bbd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbd2:	000c      	movs	r4, r1
 800bbd4:	193b      	adds	r3, r7, r4
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbda:	193b      	adds	r3, r7, r4
 800bbdc:	2200      	movs	r2, #0
 800bbde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbe0:	193b      	adds	r3, r7, r4
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bbe6:	193b      	adds	r3, r7, r4
 800bbe8:	4a14      	ldr	r2, [pc, #80]	@ (800bc3c <MX_GPIO_Init+0x250>)
 800bbea:	0019      	movs	r1, r3
 800bbec:	0010      	movs	r0, r2
 800bbee:	f009 f907 	bl	8014e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800bbf2:	0021      	movs	r1, r4
 800bbf4:	187b      	adds	r3, r7, r1
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbfa:	187b      	adds	r3, r7, r1
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bc00:	187b      	adds	r3, r7, r1
 800bc02:	2201      	movs	r2, #1
 800bc04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800bc06:	187b      	adds	r3, r7, r1
 800bc08:	4a0f      	ldr	r2, [pc, #60]	@ (800bc48 <MX_GPIO_Init+0x25c>)
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	0010      	movs	r0, r2
 800bc0e:	f009 f8f7 	bl	8014e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800bc12:	2200      	movs	r2, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	2007      	movs	r0, #7
 800bc18:	f008 fca0 	bl	801455c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800bc1c:	2007      	movs	r0, #7
 800bc1e:	f008 fcb2 	bl	8014586 <HAL_NVIC_EnableIRQ>

}
 800bc22:	46c0      	nop			@ (mov r8, r8)
 800bc24:	46bd      	mov	sp, r7
 800bc26:	b00b      	add	sp, #44	@ 0x2c
 800bc28:	bd90      	pop	{r4, r7, pc}
 800bc2a:	46c0      	nop			@ (mov r8, r8)
 800bc2c:	40021000 	.word	0x40021000
 800bc30:	50001c00 	.word	0x50001c00
 800bc34:	00000301 	.word	0x00000301
 800bc38:	50000400 	.word	0x50000400
 800bc3c:	50000800 	.word	0x50000800
 800bc40:	0000200c 	.word	0x0000200c
 800bc44:	0000403e 	.word	0x0000403e
 800bc48:	50000c00 	.word	0x50000c00

0800bc4c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2100      	movs	r1, #0
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	f010 f970 	bl	801bf40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2108      	movs	r1, #8
 800bc64:	0018      	movs	r0, r3
 800bc66:	f010 f96b 	bl	801bf40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	210c      	movs	r1, #12
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f010 f966 	bl	801bf40 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800bc74:	2380      	movs	r3, #128	@ 0x80
 800bc76:	05db      	lsls	r3, r3, #23
 800bc78:	22fa      	movs	r2, #250	@ 0xfa
 800bc7a:	0112      	lsls	r2, r2, #4
 800bc7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800bc7e:	2380      	movs	r3, #128	@ 0x80
 800bc80:	05db      	lsls	r3, r3, #23
 800bc82:	22fa      	movs	r2, #250	@ 0xfa
 800bc84:	0112      	lsls	r2, r2, #4
 800bc86:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800bc88:	2380      	movs	r3, #128	@ 0x80
 800bc8a:	05db      	lsls	r3, r3, #23
 800bc8c:	22fa      	movs	r2, #250	@ 0xfa
 800bc8e:	0112      	lsls	r2, r2, #4
 800bc90:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800bc92:	2380      	movs	r3, #128	@ 0x80
 800bc94:	05db      	lsls	r3, r3, #23
 800bc96:	22fa      	movs	r2, #250	@ 0xfa
 800bc98:	0112      	lsls	r2, r2, #4
 800bc9a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2100      	movs	r1, #0
 800bca0:	0018      	movs	r0, r3
 800bca2:	f010 f94d 	bl	801bf40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2104      	movs	r1, #4
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f010 f948 	bl	801bf40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2108      	movs	r1, #8
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f010 f943 	bl	801bf40 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800bcba:	4b0a      	ldr	r3, [pc, #40]	@ (800bce4 <GPIO_InitPWMLEDs+0x98>)
 800bcbc:	22fa      	movs	r2, #250	@ 0xfa
 800bcbe:	0112      	lsls	r2, r2, #4
 800bcc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800bcc2:	4b08      	ldr	r3, [pc, #32]	@ (800bce4 <GPIO_InitPWMLEDs+0x98>)
 800bcc4:	22fa      	movs	r2, #250	@ 0xfa
 800bcc6:	0112      	lsls	r2, r2, #4
 800bcc8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800bcca:	4b06      	ldr	r3, [pc, #24]	@ (800bce4 <GPIO_InitPWMLEDs+0x98>)
 800bccc:	22fa      	movs	r2, #250	@ 0xfa
 800bcce:	0112      	lsls	r2, r2, #4
 800bcd0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800bcd2:	4b04      	ldr	r3, [pc, #16]	@ (800bce4 <GPIO_InitPWMLEDs+0x98>)
 800bcd4:	22fa      	movs	r2, #250	@ 0xfa
 800bcd6:	0112      	lsls	r2, r2, #4
 800bcd8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bcda:	46c0      	nop			@ (mov r8, r8)
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	b002      	add	sp, #8
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	46c0      	nop			@ (mov r8, r8)
 800bce4:	40000400 	.word	0x40000400

0800bce8 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcee:	1d3b      	adds	r3, r7, #4
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	2314      	movs	r3, #20
 800bcf4:	001a      	movs	r2, r3
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	f019 fd40 	bl	802577c <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bcfc:	1d3b      	adds	r3, r7, #4
 800bcfe:	2205      	movs	r2, #5
 800bd00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd02:	1d3b      	adds	r3, r7, #4
 800bd04:	2203      	movs	r2, #3
 800bd06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd08:	1d3b      	adds	r3, r7, #4
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd0e:	1d3a      	adds	r2, r7, #4
 800bd10:	23a0      	movs	r3, #160	@ 0xa0
 800bd12:	05db      	lsls	r3, r3, #23
 800bd14:	0011      	movs	r1, r2
 800bd16:	0018      	movs	r0, r3
 800bd18:	f009 f872 	bl	8014e00 <HAL_GPIO_Init>
}
 800bd1c:	46c0      	nop			@ (mov r8, r8)
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	b006      	add	sp, #24
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bd28:	4b1b      	ldr	r3, [pc, #108]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd9c <MX_I2C1_Init+0x78>)
 800bd2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800bd2e:	4b1a      	ldr	r3, [pc, #104]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd30:	4a1b      	ldr	r2, [pc, #108]	@ (800bda0 <MX_I2C1_Init+0x7c>)
 800bd32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bd34:	4b18      	ldr	r3, [pc, #96]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bd3a:	4b17      	ldr	r3, [pc, #92]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bd40:	4b15      	ldr	r3, [pc, #84]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bd46:	4b14      	ldr	r3, [pc, #80]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bd4c:	4b12      	ldr	r3, [pc, #72]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd52:	4b11      	ldr	r3, [pc, #68]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd58:	4b0f      	ldr	r3, [pc, #60]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bd5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd60:	0018      	movs	r0, r3
 800bd62:	f009 fa21 	bl	80151a8 <HAL_I2C_Init>
 800bd66:	1e03      	subs	r3, r0, #0
 800bd68:	d001      	beq.n	800bd6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bd6a:	f000 fdb1 	bl	800c8d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd70:	2100      	movs	r1, #0
 800bd72:	0018      	movs	r0, r3
 800bd74:	f00c f8fe 	bl	8017f74 <HAL_I2CEx_ConfigAnalogFilter>
 800bd78:	1e03      	subs	r3, r0, #0
 800bd7a:	d001      	beq.n	800bd80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bd7c:	f000 fda8 	bl	800c8d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bd80:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <MX_I2C1_Init+0x74>)
 800bd82:	2100      	movs	r1, #0
 800bd84:	0018      	movs	r0, r3
 800bd86:	f00c f941 	bl	801800c <HAL_I2CEx_ConfigDigitalFilter>
 800bd8a:	1e03      	subs	r3, r0, #0
 800bd8c:	d001      	beq.n	800bd92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bd8e:	f000 fd9f 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bd92:	46c0      	nop			@ (mov r8, r8)
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20000c3c 	.word	0x20000c3c
 800bd9c:	40005400 	.word	0x40005400
 800bda0:	00503d58 	.word	0x00503d58

0800bda4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bda8:	4b1b      	ldr	r3, [pc, #108]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdaa:	4a1c      	ldr	r2, [pc, #112]	@ (800be1c <MX_I2C2_Init+0x78>)
 800bdac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800bdae:	4b1a      	ldr	r3, [pc, #104]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdb0:	4a1b      	ldr	r2, [pc, #108]	@ (800be20 <MX_I2C2_Init+0x7c>)
 800bdb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bdb4:	4b18      	ldr	r3, [pc, #96]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bdba:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bdc0:	4b15      	ldr	r3, [pc, #84]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bdc6:	4b14      	ldr	r3, [pc, #80]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bdcc:	4b12      	ldr	r3, [pc, #72]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bdd2:	4b11      	ldr	r3, [pc, #68]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bdd8:	4b0f      	ldr	r3, [pc, #60]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bdde:	4b0e      	ldr	r3, [pc, #56]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bde0:	0018      	movs	r0, r3
 800bde2:	f009 f9e1 	bl	80151a8 <HAL_I2C_Init>
 800bde6:	1e03      	subs	r3, r0, #0
 800bde8:	d001      	beq.n	800bdee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800bdea:	f000 fd71 	bl	800c8d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bdee:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <MX_I2C2_Init+0x74>)
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f00c f8be 	bl	8017f74 <HAL_I2CEx_ConfigAnalogFilter>
 800bdf8:	1e03      	subs	r3, r0, #0
 800bdfa:	d001      	beq.n	800be00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800bdfc:	f000 fd68 	bl	800c8d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800be00:	4b05      	ldr	r3, [pc, #20]	@ (800be18 <MX_I2C2_Init+0x74>)
 800be02:	2100      	movs	r1, #0
 800be04:	0018      	movs	r0, r3
 800be06:	f00c f901 	bl	801800c <HAL_I2CEx_ConfigDigitalFilter>
 800be0a:	1e03      	subs	r3, r0, #0
 800be0c:	d001      	beq.n	800be12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800be0e:	f000 fd5f 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800be12:	46c0      	nop			@ (mov r8, r8)
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20000c90 	.word	0x20000c90
 800be1c:	40005800 	.word	0x40005800
 800be20:	00503d58 	.word	0x00503d58

0800be24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b08b      	sub	sp, #44	@ 0x2c
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be2c:	2414      	movs	r4, #20
 800be2e:	193b      	adds	r3, r7, r4
 800be30:	0018      	movs	r0, r3
 800be32:	2314      	movs	r3, #20
 800be34:	001a      	movs	r2, r3
 800be36:	2100      	movs	r1, #0
 800be38:	f019 fca0 	bl	802577c <memset>
  if(i2cHandle->Instance==I2C1)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a5d      	ldr	r2, [pc, #372]	@ (800bfb8 <HAL_I2C_MspInit+0x194>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d000      	beq.n	800be48 <HAL_I2C_MspInit+0x24>
 800be46:	e083      	b.n	800bf50 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be48:	4b5c      	ldr	r3, [pc, #368]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800be4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4c:	4b5b      	ldr	r3, [pc, #364]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800be4e:	2102      	movs	r1, #2
 800be50:	430a      	orrs	r2, r1
 800be52:	62da      	str	r2, [r3, #44]	@ 0x2c
 800be54:	4b59      	ldr	r3, [pc, #356]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800be56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be58:	2202      	movs	r2, #2
 800be5a:	4013      	ands	r3, r2
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800be60:	0021      	movs	r1, r4
 800be62:	187b      	adds	r3, r7, r1
 800be64:	22c0      	movs	r2, #192	@ 0xc0
 800be66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800be68:	187b      	adds	r3, r7, r1
 800be6a:	2212      	movs	r2, #18
 800be6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be6e:	187b      	adds	r3, r7, r1
 800be70:	2200      	movs	r2, #0
 800be72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be74:	187b      	adds	r3, r7, r1
 800be76:	2203      	movs	r2, #3
 800be78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800be7a:	187b      	adds	r3, r7, r1
 800be7c:	2201      	movs	r2, #1
 800be7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be80:	187b      	adds	r3, r7, r1
 800be82:	4a4f      	ldr	r2, [pc, #316]	@ (800bfc0 <HAL_I2C_MspInit+0x19c>)
 800be84:	0019      	movs	r1, r3
 800be86:	0010      	movs	r0, r2
 800be88:	f008 ffba 	bl	8014e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800be8c:	4b4b      	ldr	r3, [pc, #300]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800be8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be90:	4b4a      	ldr	r3, [pc, #296]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800be92:	2180      	movs	r1, #128	@ 0x80
 800be94:	0389      	lsls	r1, r1, #14
 800be96:	430a      	orrs	r2, r1
 800be98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800be9a:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800be9c:	4a4a      	ldr	r2, [pc, #296]	@ (800bfc8 <HAL_I2C_MspInit+0x1a4>)
 800be9e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800bea0:	4b48      	ldr	r3, [pc, #288]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bea2:	2206      	movs	r2, #6
 800bea4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bea6:	4b47      	ldr	r3, [pc, #284]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800beac:	4b45      	ldr	r3, [pc, #276]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800beae:	2200      	movs	r2, #0
 800beb0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800beb2:	4b44      	ldr	r3, [pc, #272]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800beb4:	2280      	movs	r2, #128	@ 0x80
 800beb6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800beb8:	4b42      	ldr	r3, [pc, #264]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800beba:	2200      	movs	r2, #0
 800bebc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bebe:	4b41      	ldr	r3, [pc, #260]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800bec4:	4b3f      	ldr	r3, [pc, #252]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800beca:	4b3e      	ldr	r3, [pc, #248]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800becc:	2200      	movs	r2, #0
 800bece:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800bed0:	4b3c      	ldr	r3, [pc, #240]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bed2:	0018      	movs	r0, r3
 800bed4:	f008 fb78 	bl	80145c8 <HAL_DMA_Init>
 800bed8:	1e03      	subs	r3, r0, #0
 800beda:	d001      	beq.n	800bee0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800bedc:	f000 fcf8 	bl	800c8d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a38      	ldr	r2, [pc, #224]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bee4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bee6:	4b37      	ldr	r3, [pc, #220]	@ (800bfc4 <HAL_I2C_MspInit+0x1a0>)
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800beec:	4b37      	ldr	r3, [pc, #220]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800beee:	4a38      	ldr	r2, [pc, #224]	@ (800bfd0 <HAL_I2C_MspInit+0x1ac>)
 800bef0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800bef2:	4b36      	ldr	r3, [pc, #216]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bef4:	2206      	movs	r2, #6
 800bef6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bef8:	4b34      	ldr	r3, [pc, #208]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800befa:	2210      	movs	r2, #16
 800befc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800befe:	4b33      	ldr	r3, [pc, #204]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bf04:	4b31      	ldr	r3, [pc, #196]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf06:	2280      	movs	r2, #128	@ 0x80
 800bf08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bf0a:	4b30      	ldr	r3, [pc, #192]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bf10:	4b2e      	ldr	r3, [pc, #184]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800bf16:	4b2d      	ldr	r3, [pc, #180]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bf1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800bf22:	4b2a      	ldr	r3, [pc, #168]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf24:	0018      	movs	r0, r3
 800bf26:	f008 fb4f 	bl	80145c8 <HAL_DMA_Init>
 800bf2a:	1e03      	subs	r3, r0, #0
 800bf2c:	d001      	beq.n	800bf32 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800bf2e:	f000 fccf 	bl	800c8d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4a25      	ldr	r2, [pc, #148]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf36:	639a      	str	r2, [r3, #56]	@ 0x38
 800bf38:	4b24      	ldr	r3, [pc, #144]	@ (800bfcc <HAL_I2C_MspInit+0x1a8>)
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2100      	movs	r1, #0
 800bf42:	2017      	movs	r0, #23
 800bf44:	f008 fb0a 	bl	801455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800bf48:	2017      	movs	r0, #23
 800bf4a:	f008 fb1c 	bl	8014586 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800bf4e:	e02e      	b.n	800bfae <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a1f      	ldr	r2, [pc, #124]	@ (800bfd4 <HAL_I2C_MspInit+0x1b0>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d129      	bne.n	800bfae <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf5a:	4b18      	ldr	r3, [pc, #96]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800bf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5e:	4b17      	ldr	r3, [pc, #92]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800bf60:	2102      	movs	r1, #2
 800bf62:	430a      	orrs	r2, r1
 800bf64:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf66:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800bf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bf72:	2114      	movs	r1, #20
 800bf74:	187b      	adds	r3, r7, r1
 800bf76:	22c0      	movs	r2, #192	@ 0xc0
 800bf78:	0112      	lsls	r2, r2, #4
 800bf7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf7c:	187b      	adds	r3, r7, r1
 800bf7e:	2212      	movs	r2, #18
 800bf80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf88:	187b      	adds	r3, r7, r1
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800bf8e:	187b      	adds	r3, r7, r1
 800bf90:	2206      	movs	r2, #6
 800bf92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	4a0a      	ldr	r2, [pc, #40]	@ (800bfc0 <HAL_I2C_MspInit+0x19c>)
 800bf98:	0019      	movs	r1, r3
 800bf9a:	0010      	movs	r0, r2
 800bf9c:	f008 ff30 	bl	8014e00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bfa0:	4b06      	ldr	r3, [pc, #24]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800bfa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfa4:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <HAL_I2C_MspInit+0x198>)
 800bfa6:	2180      	movs	r1, #128	@ 0x80
 800bfa8:	03c9      	lsls	r1, r1, #15
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bfae:	46c0      	nop			@ (mov r8, r8)
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	b00b      	add	sp, #44	@ 0x2c
 800bfb4:	bd90      	pop	{r4, r7, pc}
 800bfb6:	46c0      	nop			@ (mov r8, r8)
 800bfb8:	40005400 	.word	0x40005400
 800bfbc:	40021000 	.word	0x40021000
 800bfc0:	50000400 	.word	0x50000400
 800bfc4:	20000ce4 	.word	0x20000ce4
 800bfc8:	40020030 	.word	0x40020030
 800bfcc:	20000d2c 	.word	0x20000d2c
 800bfd0:	4002001c 	.word	0x4002001c
 800bfd4:	40005800 	.word	0x40005800

0800bfd8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800bfdc:	4b10      	ldr	r3, [pc, #64]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bfde:	4a11      	ldr	r2, [pc, #68]	@ (800c024 <MX_I2S2_Init+0x4c>)
 800bfe0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800bfe2:	4b0f      	ldr	r3, [pc, #60]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bfe4:	22c0      	movs	r2, #192	@ 0xc0
 800bfe6:	0092      	lsls	r2, r2, #2
 800bfe8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800bfea:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800bff0:	4b0b      	ldr	r3, [pc, #44]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bff2:	2203      	movs	r2, #3
 800bff4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800bff6:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800bffc:	4b08      	ldr	r3, [pc, #32]	@ (800c020 <MX_I2S2_Init+0x48>)
 800bffe:	22fa      	movs	r2, #250	@ 0xfa
 800c000:	0192      	lsls	r2, r2, #6
 800c002:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c004:	4b06      	ldr	r3, [pc, #24]	@ (800c020 <MX_I2S2_Init+0x48>)
 800c006:	2200      	movs	r2, #0
 800c008:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c00a:	4b05      	ldr	r3, [pc, #20]	@ (800c020 <MX_I2S2_Init+0x48>)
 800c00c:	0018      	movs	r0, r3
 800c00e:	f00c f849 	bl	80180a4 <HAL_I2S_Init>
 800c012:	1e03      	subs	r3, r0, #0
 800c014:	d001      	beq.n	800c01a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c016:	f000 fc5b 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c01a:	46c0      	nop			@ (mov r8, r8)
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20000d74 	.word	0x20000d74
 800c024:	40003800 	.word	0x40003800

0800c028 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c028:	b590      	push	{r4, r7, lr}
 800c02a:	b089      	sub	sp, #36	@ 0x24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c030:	240c      	movs	r4, #12
 800c032:	193b      	adds	r3, r7, r4
 800c034:	0018      	movs	r0, r3
 800c036:	2314      	movs	r3, #20
 800c038:	001a      	movs	r2, r3
 800c03a:	2100      	movs	r1, #0
 800c03c:	f019 fb9e 	bl	802577c <memset>
  if(i2sHandle->Instance==SPI2)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a2d      	ldr	r2, [pc, #180]	@ (800c0fc <HAL_I2S_MspInit+0xd4>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d154      	bne.n	800c0f4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c04a:	4b2d      	ldr	r3, [pc, #180]	@ (800c100 <HAL_I2S_MspInit+0xd8>)
 800c04c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c04e:	4b2c      	ldr	r3, [pc, #176]	@ (800c100 <HAL_I2S_MspInit+0xd8>)
 800c050:	2180      	movs	r1, #128	@ 0x80
 800c052:	01c9      	lsls	r1, r1, #7
 800c054:	430a      	orrs	r2, r1
 800c056:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c058:	4b29      	ldr	r3, [pc, #164]	@ (800c100 <HAL_I2S_MspInit+0xd8>)
 800c05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05c:	4b28      	ldr	r3, [pc, #160]	@ (800c100 <HAL_I2S_MspInit+0xd8>)
 800c05e:	2102      	movs	r1, #2
 800c060:	430a      	orrs	r2, r1
 800c062:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c064:	4b26      	ldr	r3, [pc, #152]	@ (800c100 <HAL_I2S_MspInit+0xd8>)
 800c066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c068:	2202      	movs	r2, #2
 800c06a:	4013      	ands	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c070:	193b      	adds	r3, r7, r4
 800c072:	22b0      	movs	r2, #176	@ 0xb0
 800c074:	0212      	lsls	r2, r2, #8
 800c076:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c078:	0021      	movs	r1, r4
 800c07a:	187b      	adds	r3, r7, r1
 800c07c:	2202      	movs	r2, #2
 800c07e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c080:	187b      	adds	r3, r7, r1
 800c082:	2200      	movs	r2, #0
 800c084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c086:	187b      	adds	r3, r7, r1
 800c088:	2200      	movs	r2, #0
 800c08a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c08c:	187b      	adds	r3, r7, r1
 800c08e:	2200      	movs	r2, #0
 800c090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c092:	187b      	adds	r3, r7, r1
 800c094:	4a1b      	ldr	r2, [pc, #108]	@ (800c104 <HAL_I2S_MspInit+0xdc>)
 800c096:	0019      	movs	r1, r3
 800c098:	0010      	movs	r0, r2
 800c09a:	f008 feb1 	bl	8014e00 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c09e:	4b1a      	ldr	r3, [pc, #104]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c10c <HAL_I2S_MspInit+0xe4>)
 800c0a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c0a4:	4b18      	ldr	r3, [pc, #96]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c0aa:	4b17      	ldr	r3, [pc, #92]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0b0:	4b15      	ldr	r3, [pc, #84]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0b8:	2280      	movs	r2, #128	@ 0x80
 800c0ba:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c0bc:	4b12      	ldr	r3, [pc, #72]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0be:	2280      	movs	r2, #128	@ 0x80
 800c0c0:	0052      	lsls	r2, r2, #1
 800c0c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c0c4:	4b10      	ldr	r3, [pc, #64]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0c6:	2280      	movs	r2, #128	@ 0x80
 800c0c8:	00d2      	lsls	r2, r2, #3
 800c0ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0ce:	2220      	movs	r2, #32
 800c0d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f008 fa74 	bl	80145c8 <HAL_DMA_Init>
 800c0e0:	1e03      	subs	r3, r0, #0
 800c0e2:	d001      	beq.n	800c0e8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c0e4:	f000 fbf4 	bl	800c8d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a07      	ldr	r2, [pc, #28]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800c0ee:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <HAL_I2S_MspInit+0xe0>)
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c0f4:	46c0      	nop			@ (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	b009      	add	sp, #36	@ 0x24
 800c0fa:	bd90      	pop	{r4, r7, pc}
 800c0fc:	40003800 	.word	0x40003800
 800c100:	40021000 	.word	0x40021000
 800c104:	50000400 	.word	0x50000400
 800c108:	20000db0 	.word	0x20000db0
 800c10c:	40020044 	.word	0x40020044

0800c110 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  testDone = true;
 800c114:	4b14      	ldr	r3, [pc, #80]	@ (800c168 <SetTestDone+0x58>)
 800c116:	2201      	movs	r2, #1
 800c118:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c11a:	23fa      	movs	r3, #250	@ 0xfa
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	0018      	movs	r0, r3
 800c120:	f007 fd82 	bl	8013c28 <HAL_Delay>
  SetDBLED(false, false, true);
 800c124:	2201      	movs	r2, #1
 800c126:	2100      	movs	r1, #0
 800c128:	2000      	movs	r0, #0
 800c12a:	f005 fd85 	bl	8011c38 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c12e:	4a0f      	ldr	r2, [pc, #60]	@ (800c16c <SetTestDone+0x5c>)
 800c130:	23fa      	movs	r3, #250	@ 0xfa
 800c132:	0119      	lsls	r1, r3, #4
 800c134:	23fa      	movs	r3, #250	@ 0xfa
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	0018      	movs	r0, r3
 800c13a:	f005 fd49 	bl	8011bd0 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c13e:	4a0b      	ldr	r2, [pc, #44]	@ (800c16c <SetTestDone+0x5c>)
 800c140:	23fa      	movs	r3, #250	@ 0xfa
 800c142:	0119      	lsls	r1, r3, #4
 800c144:	23fa      	movs	r3, #250	@ 0xfa
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	0018      	movs	r0, r3
 800c14a:	f005 fdbf 	bl	8011ccc <SetVocLED>
  HAL_Delay(500);
 800c14e:	23fa      	movs	r3, #250	@ 0xfa
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	0018      	movs	r0, r3
 800c154:	f007 fd68 	bl	8013c28 <HAL_Delay>
  SetLEDsOff();
 800c158:	f005 fef8 	bl	8011f4c <SetLEDsOff>
  InitDone();
 800c15c:	f005 fc8c 	bl	8011a78 <InitDone>
}
 800c160:	46c0      	nop			@ (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	20000df8 	.word	0x20000df8
 800c16c:	00000bb8 	.word	0x00000bb8

0800c170 <FlashLEDs>:

void FlashLEDs(){
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800c176:	1dfb      	adds	r3, r7, #7
 800c178:	2200      	movs	r2, #0
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	e021      	b.n	800c1c2 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800c17e:	2201      	movs	r2, #1
 800c180:	2101      	movs	r1, #1
 800c182:	2001      	movs	r0, #1
 800c184:	f005 fd58 	bl	8011c38 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c188:	4a12      	ldr	r2, [pc, #72]	@ (800c1d4 <FlashLEDs+0x64>)
 800c18a:	23fa      	movs	r3, #250	@ 0xfa
 800c18c:	0119      	lsls	r1, r3, #4
 800c18e:	23fa      	movs	r3, #250	@ 0xfa
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	0018      	movs	r0, r3
 800c194:	f005 fd1c 	bl	8011bd0 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c198:	4a0e      	ldr	r2, [pc, #56]	@ (800c1d4 <FlashLEDs+0x64>)
 800c19a:	23fa      	movs	r3, #250	@ 0xfa
 800c19c:	0119      	lsls	r1, r3, #4
 800c19e:	23fa      	movs	r3, #250	@ 0xfa
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	0018      	movs	r0, r3
 800c1a4:	f005 fd92 	bl	8011ccc <SetVocLED>
    HAL_Delay(250);
 800c1a8:	20fa      	movs	r0, #250	@ 0xfa
 800c1aa:	f007 fd3d 	bl	8013c28 <HAL_Delay>
    SetLEDsOff();
 800c1ae:	f005 fecd 	bl	8011f4c <SetLEDsOff>
    HAL_Delay(250);
 800c1b2:	20fa      	movs	r0, #250	@ 0xfa
 800c1b4:	f007 fd38 	bl	8013c28 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800c1b8:	1dfb      	adds	r3, r7, #7
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	1dfb      	adds	r3, r7, #7
 800c1be:	3201      	adds	r2, #1
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	1dfb      	adds	r3, r7, #7
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d9d9      	bls.n	800c17e <FlashLEDs+0xe>
  }
}
 800c1ca:	46c0      	nop			@ (mov r8, r8)
 800c1cc:	46c0      	nop			@ (mov r8, r8)
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	00000bb8 	.word	0x00000bb8

0800c1d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c1de:	f007 fcb3 	bl	8013b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c1e2:	f000 fa1b 	bl	800c61c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c1e6:	f7ff fc01 	bl	800b9ec <MX_GPIO_Init>
  MX_DMA_Init();
 800c1ea:	f7ff fa29 	bl	800b640 <MX_DMA_Init>
  MX_I2C1_Init();
 800c1ee:	f7ff fd99 	bl	800bd24 <MX_I2C1_Init>
  MX_I2S2_Init();
 800c1f2:	f7ff fef1 	bl	800bfd8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c1f6:	f006 fddf 	bl	8012db8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c1fa:	f7ff fdd3 	bl	800bda4 <MX_I2C2_Init>
  MX_TIM2_Init();
 800c1fe:	f006 fbd3 	bl	80129a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c202:	f006 fc45 	bl	8012a90 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c206:	f006 fe07 	bl	8012e18 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c20a:	f7fd fee3 	bl	8009fd4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c20e:	f015 ff93 	bl	8022138 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c212:	f001 fb75 	bl	800d900 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c216:	f006 fd99 	bl	8012d4c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c21a:	f006 fcb7 	bl	8012b8c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c21e:	4ac5      	ldr	r2, [pc, #788]	@ (800c534 <main+0x35c>)
 800c220:	4bc5      	ldr	r3, [pc, #788]	@ (800c538 <main+0x360>)
 800c222:	0011      	movs	r1, r2
 800c224:	0018      	movs	r0, r3
 800c226:	f7ff fd11 	bl	800bc4c <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c22a:	f007 f837 	bl	801329c <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c22e:	f006 fa43 	bl	80126b8 <Battery_Upkeep>
 800c232:	0003      	movs	r3, r0
 800c234:	001a      	movs	r2, r3
 800c236:	4bc1      	ldr	r3, [pc, #772]	@ (800c53c <main+0x364>)
 800c238:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c23a:	4bc0      	ldr	r3, [pc, #768]	@ (800c53c <main+0x364>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d113      	bne.n	800c26a <main+0x92>
    SetAllREDLED();
 800c242:	f005 fe9f 	bl	8011f84 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c246:	f7fc ff4f 	bl	80090e8 <ReadBatteryVoltage>
 800c24a:	1c03      	adds	r3, r0, #0
 800c24c:	1c18      	adds	r0, r3, #0
 800c24e:	f7f7 fb21 	bl	8003894 <__aeabi_f2d>
 800c252:	0002      	movs	r2, r0
 800c254:	000b      	movs	r3, r1
 800c256:	48ba      	ldr	r0, [pc, #744]	@ (800c540 <main+0x368>)
 800c258:	49ba      	ldr	r1, [pc, #744]	@ (800c544 <main+0x36c>)
 800c25a:	9200      	str	r2, [sp, #0]
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	0002      	movs	r2, r0
 800c260:	2002      	movs	r0, #2
 800c262:	f006 ff97 	bl	8013194 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c266:	f7fd fbe1 	bl	8009a2c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c26a:	f7fd f813 	bl	8009294 <UserButton_Pressed>
 800c26e:	1e03      	subs	r3, r0, #0
 800c270:	d004      	beq.n	800c27c <main+0xa4>
    EnableESPProg();
 800c272:	f016 f831 	bl	80222d8 <EnableESPProg>
    ESP_Programming = true;
 800c276:	4bb4      	ldr	r3, [pc, #720]	@ (800c548 <main+0x370>)
 800c278:	2201      	movs	r2, #1
 800c27a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c27c:	2003      	movs	r0, #3
 800c27e:	f006 fff3 	bl	8013268 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c282:	49b2      	ldr	r1, [pc, #712]	@ (800c54c <main+0x374>)
 800c284:	4bb2      	ldr	r3, [pc, #712]	@ (800c550 <main+0x378>)
 800c286:	2201      	movs	r2, #1
 800c288:	0018      	movs	r0, r3
 800c28a:	f010 fab9 	bl	801c800 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c28e:	4bb1      	ldr	r3, [pc, #708]	@ (800c554 <main+0x37c>)
 800c290:	0018      	movs	r0, r3
 800c292:	f7fd fca5 	bl	8009be0 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c296:	4ab0      	ldr	r2, [pc, #704]	@ (800c558 <main+0x380>)
 800c298:	49b0      	ldr	r1, [pc, #704]	@ (800c55c <main+0x384>)
 800c29a:	48b1      	ldr	r0, [pc, #708]	@ (800c560 <main+0x388>)
 800c29c:	230b      	movs	r3, #11
 800c29e:	f004 fd61 	bl	8010d64 <soundInit>
 800c2a2:	0003      	movs	r3, r0
 800c2a4:	001a      	movs	r2, r3
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4053      	eors	r3, r2
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800c2b0:	4aac      	ldr	r2, [pc, #688]	@ (800c564 <main+0x38c>)
 800c2b2:	4bad      	ldr	r3, [pc, #692]	@ (800c568 <main+0x390>)
 800c2b4:	21f9      	movs	r1, #249	@ 0xf9
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f007 f824 	bl	8013304 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c2bc:	4bab      	ldr	r3, [pc, #684]	@ (800c56c <main+0x394>)
 800c2be:	4aac      	ldr	r2, [pc, #688]	@ (800c570 <main+0x398>)
 800c2c0:	49a6      	ldr	r1, [pc, #664]	@ (800c55c <main+0x384>)
 800c2c2:	48ac      	ldr	r0, [pc, #688]	@ (800c574 <main+0x39c>)
 800c2c4:	f000 fbf6 	bl	800cab4 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c2c8:	f007 fca4 	bl	8013c14 <HAL_GetTick>
 800c2cc:	0003      	movs	r3, r0
 800c2ce:	4aaa      	ldr	r2, [pc, #680]	@ (800c578 <main+0x3a0>)
 800c2d0:	189a      	adds	r2, r3, r2
 800c2d2:	4baa      	ldr	r3, [pc, #680]	@ (800c57c <main+0x3a4>)
 800c2d4:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c2d6:	f7fc ffbd 	bl	8009254 <Check_USB_PowerOn>
 800c2da:	0003      	movs	r3, r0
 800c2dc:	1e5a      	subs	r2, r3, #1
 800c2de:	4193      	sbcs	r3, r2
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	4053      	eors	r3, r2
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	1c1a      	adds	r2, r3, #0
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	4ba3      	ldr	r3, [pc, #652]	@ (800c580 <main+0x3a8>)
 800c2f2:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800c2f4:	f7fc ffae 	bl	8009254 <Check_USB_PowerOn>
 800c2f8:	1e03      	subs	r3, r0, #0
 800c2fa:	d003      	beq.n	800c304 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800c2fc:	4ba1      	ldr	r3, [pc, #644]	@ (800c584 <main+0x3ac>)
 800c2fe:	0018      	movs	r0, r3
 800c300:	f7fc f8fc 	bl	80084fc <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800c304:	4ba0      	ldr	r3, [pc, #640]	@ (800c588 <main+0x3b0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	0018      	movs	r0, r3
 800c30a:	f006 feed 	bl	80130e8 <TimestampIsReached>
 800c30e:	1e03      	subs	r3, r0, #0
 800c310:	d00e      	beq.n	800c330 <main+0x158>
      charge = Battery_Upkeep();
 800c312:	f006 f9d1 	bl	80126b8 <Battery_Upkeep>
 800c316:	0003      	movs	r3, r0
 800c318:	001a      	movs	r2, r3
 800c31a:	4b88      	ldr	r3, [pc, #544]	@ (800c53c <main+0x364>)
 800c31c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800c31e:	f007 fc79 	bl	8013c14 <HAL_GetTick>
 800c322:	0003      	movs	r3, r0
 800c324:	4a99      	ldr	r2, [pc, #612]	@ (800c58c <main+0x3b4>)
 800c326:	189a      	adds	r2, r3, r2
 800c328:	4b97      	ldr	r3, [pc, #604]	@ (800c588 <main+0x3b0>)
 800c32a:	601a      	str	r2, [r3, #0]
      showTime();
 800c32c:	f7fc ffc2 	bl	80092b4 <showTime>

    }
    configCheck();
 800c330:	f006 f81e 	bl	8012370 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800c334:	4b96      	ldr	r3, [pc, #600]	@ (800c590 <main+0x3b8>)
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800c33a:	4b80      	ldr	r3, [pc, #512]	@ (800c53c <main+0x364>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d003      	beq.n	800c34a <main+0x172>
 800c342:	4b7e      	ldr	r3, [pc, #504]	@ (800c53c <main+0x364>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d104      	bne.n	800c354 <main+0x17c>
      FlashLEDs();
 800c34a:	f7ff ff11 	bl	800c170 <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800c34e:	4b91      	ldr	r3, [pc, #580]	@ (800c594 <main+0x3bc>)
 800c350:	2200      	movs	r2, #0
 800c352:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800c354:	4b79      	ldr	r3, [pc, #484]	@ (800c53c <main+0x364>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d109      	bne.n	800c370 <main+0x198>
 800c35c:	4b8e      	ldr	r3, [pc, #568]	@ (800c598 <main+0x3c0>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b09      	cmp	r3, #9
 800c362:	d105      	bne.n	800c370 <main+0x198>
       batteryEmpty = true;
 800c364:	4b8d      	ldr	r3, [pc, #564]	@ (800c59c <main+0x3c4>)
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800c36a:	f7fd fb5f 	bl	8009a2c <Enter_Standby_Mode>
 800c36e:	e002      	b.n	800c376 <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800c370:	4b8a      	ldr	r3, [pc, #552]	@ (800c59c <main+0x3c4>)
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800c376:	4b8a      	ldr	r3, [pc, #552]	@ (800c5a0 <main+0x3c8>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d100      	bne.n	800c380 <main+0x1a8>
 800c37e:	e0a2      	b.n	800c4c6 <main+0x2ee>
 800c380:	4b71      	ldr	r3, [pc, #452]	@ (800c548 <main+0x370>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2201      	movs	r2, #1
 800c386:	4053      	eors	r3, r2
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d100      	bne.n	800c390 <main+0x1b8>
 800c38e:	e09a      	b.n	800c4c6 <main+0x2ee>
 800c390:	4b82      	ldr	r3, [pc, #520]	@ (800c59c <main+0x3c4>)
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2201      	movs	r2, #1
 800c396:	4053      	eors	r3, r2
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d100      	bne.n	800c3a0 <main+0x1c8>
 800c39e:	e092      	b.n	800c4c6 <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800c3a0:	4b77      	ldr	r3, [pc, #476]	@ (800c580 <main+0x3a8>)
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	4b7f      	ldr	r3, [pc, #508]	@ (800c5a4 <main+0x3cc>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d03a      	beq.n	800c422 <main+0x24a>
        if (IsSGPPresent() && !usbPluggedIn) {
 800c3ac:	f000 fb14 	bl	800c9d8 <IsSGPPresent>
 800c3b0:	1e03      	subs	r3, r0, #0
 800c3b2:	d009      	beq.n	800c3c8 <main+0x1f0>
 800c3b4:	4b7b      	ldr	r3, [pc, #492]	@ (800c5a4 <main+0x3cc>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	4053      	eors	r3, r2
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	f000 fb12 	bl	800c9ec <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800c3c8:	4b77      	ldr	r3, [pc, #476]	@ (800c5a8 <main+0x3d0>)
 800c3ca:	791b      	ldrb	r3, [r3, #4]
 800c3cc:	2b34      	cmp	r3, #52	@ 0x34
 800c3ce:	d003      	beq.n	800c3d8 <main+0x200>
 800c3d0:	4b75      	ldr	r3, [pc, #468]	@ (800c5a8 <main+0x3d0>)
 800c3d2:	791b      	ldrb	r3, [r3, #4]
 800c3d4:	2b35      	cmp	r3, #53	@ 0x35
 800c3d6:	d106      	bne.n	800c3e6 <main+0x20e>
 800c3d8:	4b72      	ldr	r3, [pc, #456]	@ (800c5a4 <main+0x3cc>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	f000 fb03 	bl	800c9ec <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800c3e6:	4b6f      	ldr	r3, [pc, #444]	@ (800c5a4 <main+0x3cc>)
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	4053      	eors	r3, r2
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d012      	beq.n	800c41a <main+0x242>
 800c3f4:	f007 fc0e 	bl	8013c14 <HAL_GetTick>
 800c3f8:	0003      	movs	r3, r0
 800c3fa:	4a5f      	ldr	r2, [pc, #380]	@ (800c578 <main+0x3a0>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d90c      	bls.n	800c41a <main+0x242>
          Debug("Device time out set in main due to powerstatus shift");
 800c400:	4a6a      	ldr	r2, [pc, #424]	@ (800c5ac <main+0x3d4>)
 800c402:	4b6b      	ldr	r3, [pc, #428]	@ (800c5b0 <main+0x3d8>)
 800c404:	0019      	movs	r1, r3
 800c406:	2003      	movs	r0, #3
 800c408:	f006 fec4 	bl	8013194 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800c40c:	f007 fc02 	bl	8013c14 <HAL_GetTick>
 800c410:	0003      	movs	r3, r0
 800c412:	4a68      	ldr	r2, [pc, #416]	@ (800c5b4 <main+0x3dc>)
 800c414:	189a      	adds	r2, r3, r2
 800c416:	4b59      	ldr	r3, [pc, #356]	@ (800c57c <main+0x3a4>)
 800c418:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800c41a:	4b62      	ldr	r3, [pc, #392]	@ (800c5a4 <main+0x3cc>)
 800c41c:	781a      	ldrb	r2, [r3, #0]
 800c41e:	4b58      	ldr	r3, [pc, #352]	@ (800c580 <main+0x3a8>)
 800c420:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800c422:	f000 ff4f 	bl	800d2c4 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800c426:	4b5b      	ldr	r3, [pc, #364]	@ (800c594 <main+0x3bc>)
 800c428:	78db      	ldrb	r3, [r3, #3]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <main+0x262>
        MICstate = Mic_Upkeep();
 800c42e:	f001 f953 	bl	800d6d8 <Mic_Upkeep>
 800c432:	0003      	movs	r3, r0
 800c434:	001a      	movs	r2, r3
 800c436:	4b60      	ldr	r3, [pc, #384]	@ (800c5b8 <main+0x3e0>)
 800c438:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800c43a:	4b40      	ldr	r3, [pc, #256]	@ (800c53c <main+0x364>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d803      	bhi.n	800c44a <main+0x272>
 800c442:	4b53      	ldr	r3, [pc, #332]	@ (800c590 <main+0x3b8>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d016      	beq.n	800c478 <main+0x2a0>
 800c44a:	4b52      	ldr	r3, [pc, #328]	@ (800c594 <main+0x3bc>)
 800c44c:	789b      	ldrb	r3, [r3, #2]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d012      	beq.n	800c478 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800c452:	f001 fae3 	bl	800da1c <sen5x_Get_sen5x_enable_state>
 800c456:	0003      	movs	r3, r0
 800c458:	001a      	movs	r2, r3
 800c45a:	2301      	movs	r3, #1
 800c45c:	4053      	eors	r3, r2
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d006      	beq.n	800c472 <main+0x29a>
 800c464:	4b4f      	ldr	r3, [pc, #316]	@ (800c5a4 <main+0x3cc>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800c46c:	2000      	movs	r0, #0
 800c46e:	f001 fb11 	bl	800da94 <sen5x_enable>
        }
        sen5x_statemachine();
 800c472:	f002 f88d 	bl	800e590 <sen5x_statemachine>
 800c476:	e020      	b.n	800c4ba <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800c478:	4b30      	ldr	r3, [pc, #192]	@ (800c53c <main+0x364>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d81c      	bhi.n	800c4ba <main+0x2e2>
 800c480:	4b43      	ldr	r3, [pc, #268]	@ (800c590 <main+0x3b8>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	2201      	movs	r2, #1
 800c486:	4053      	eors	r3, r2
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d015      	beq.n	800c4ba <main+0x2e2>
 800c48e:	4b41      	ldr	r3, [pc, #260]	@ (800c594 <main+0x3bc>)
 800c490:	789b      	ldrb	r3, [r3, #2]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d011      	beq.n	800c4ba <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800c496:	4a49      	ldr	r2, [pc, #292]	@ (800c5bc <main+0x3e4>)
 800c498:	4b2a      	ldr	r3, [pc, #168]	@ (800c544 <main+0x36c>)
 800c49a:	0019      	movs	r1, r3
 800c49c:	2002      	movs	r0, #2
 800c49e:	f006 fe79 	bl	8013194 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c4a2:	4b3c      	ldr	r3, [pc, #240]	@ (800c594 <main+0x3bc>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c4a8:	4b45      	ldr	r3, [pc, #276]	@ (800c5c0 <main+0x3e8>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c4ae:	4b45      	ldr	r3, [pc, #276]	@ (800c5c4 <main+0x3ec>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <main+0x2e2>
          sen5x_Power_Off();
 800c4b6:	f001 fb79 	bl	800dbac <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c4ba:	f7fa ff63 	bl	8007384 <ESP_Upkeep>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	001a      	movs	r2, r3
 800c4c2:	4b35      	ldr	r3, [pc, #212]	@ (800c598 <main+0x3c0>)
 800c4c4:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c4c6:	4b36      	ldr	r3, [pc, #216]	@ (800c5a0 <main+0x3c8>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	4053      	eors	r3, r2
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00f      	beq.n	800c4f4 <main+0x31c>
 800c4d4:	4b1c      	ldr	r3, [pc, #112]	@ (800c548 <main+0x370>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4053      	eors	r3, r2
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d008      	beq.n	800c4f4 <main+0x31c>
 800c4e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c59c <main+0x3c4>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4053      	eors	r3, r2
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <main+0x31c>
      Device_Test();  // for device with startup time
 800c4f0:	f000 fcb8 	bl	800ce64 <Device_Test>
    }
    if (!usbPluggedIn) {
 800c4f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c5a4 <main+0x3cc>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	4053      	eors	r3, r2
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d06d      	beq.n	800c5de <main+0x406>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c502:	4b31      	ldr	r3, [pc, #196]	@ (800c5c8 <main+0x3f0>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2201      	movs	r2, #1
 800c508:	4053      	eors	r3, r2
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d066      	beq.n	800c5de <main+0x406>
 800c510:	f000 fd26 	bl	800cf60 <AllDevicesReady>
 800c514:	1e03      	subs	r3, r0, #0
 800c516:	d062      	beq.n	800c5de <main+0x406>
 800c518:	4b2c      	ldr	r3, [pc, #176]	@ (800c5cc <main+0x3f4>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d05e      	beq.n	800c5de <main+0x406>
        EnabledConnectedDevices();
 800c520:	f000 fe34 	bl	800d18c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c524:	4b2a      	ldr	r3, [pc, #168]	@ (800c5d0 <main+0x3f8>)
 800c526:	795b      	ldrb	r3, [r3, #5]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d053      	beq.n	800c5d4 <main+0x3fc>
 800c52c:	23d7      	movs	r3, #215	@ 0xd7
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	e052      	b.n	800c5d8 <main+0x400>
 800c532:	46c0      	nop			@ (mov r8, r8)
 800c534:	20001ea8 	.word	0x20001ea8
 800c538:	20001e68 	.word	0x20001e68
 800c53c:	20000e14 	.word	0x20000e14
 800c540:	0802c0d4 	.word	0x0802c0d4
 800c544:	0802c0f8 	.word	0x0802c0f8
 800c548:	20000df9 	.word	0x20000df9
 800c54c:	20000e00 	.word	0x20000e00
 800c550:	20001fe0 	.word	0x20001fe0
 800c554:	20000e94 	.word	0x20000e94
 800c558:	20001ee8 	.word	0x20001ee8
 800c55c:	20000d74 	.word	0x20000d74
 800c560:	20000db0 	.word	0x20000db0
 800c564:	0802c0fc 	.word	0x0802c0fc
 800c568:	0802dae8 	.word	0x0802dae8
 800c56c:	20002098 	.word	0x20002098
 800c570:	20000b74 	.word	0x20000b74
 800c574:	20000c3c 	.word	0x20000c3c
 800c578:	000061a8 	.word	0x000061a8
 800c57c:	20000e10 	.word	0x20000e10
 800c580:	20000dfb 	.word	0x20000dfb
 800c584:	0802c110 	.word	0x0802c110
 800c588:	20000098 	.word	0x20000098
 800c58c:	0000c350 	.word	0x0000c350
 800c590:	20000097 	.word	0x20000097
 800c594:	20000e18 	.word	0x20000e18
 800c598:	20000dfd 	.word	0x20000dfd
 800c59c:	20000dfa 	.word	0x20000dfa
 800c5a0:	20000df8 	.word	0x20000df8
 800c5a4:	20001e49 	.word	0x20001e49
 800c5a8:	20000ebc 	.word	0x20000ebc
 800c5ac:	0802c144 	.word	0x0802c144
 800c5b0:	0802c17c 	.word	0x0802c17c
 800c5b4:	00001194 	.word	0x00001194
 800c5b8:	20000dfc 	.word	0x20000dfc
 800c5bc:	0802c180 	.word	0x0802c180
 800c5c0:	20000eba 	.word	0x20000eba
 800c5c4:	20000eb9 	.word	0x20000eb9
 800c5c8:	20001e4a 	.word	0x20001e4a
 800c5cc:	200005a8 	.word	0x200005a8
 800c5d0:	20000e20 	.word	0x20000e20
 800c5d4:	23dc      	movs	r3, #220	@ 0xdc
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	0018      	movs	r0, r3
 800c5da:	f7fd fa47 	bl	8009a6c <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c5de:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <main+0x43c>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <main+0x412>
      check_cli_command();
 800c5e6:	f000 f8a3 	bl	800c730 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c5ea:	f7fc fe33 	bl	8009254 <Check_USB_PowerOn>
 800c5ee:	1e03      	subs	r3, r0, #0
 800c5f0:	d100      	bne.n	800c5f4 <main+0x41c>
 800c5f2:	e687      	b.n	800c304 <main+0x12c>
 800c5f4:	4b08      	ldr	r3, [pc, #32]	@ (800c618 <main+0x440>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	4053      	eors	r3, r2
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d100      	bne.n	800c604 <main+0x42c>
 800c602:	e67f      	b.n	800c304 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800c604:	f015 fe72 	bl	80222ec <GetUsbRxPointer>
 800c608:	0003      	movs	r3, r0
 800c60a:	0018      	movs	r0, r3
 800c60c:	f7fc fb78 	bl	8008d00 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800c610:	e678      	b.n	800c304 <main+0x12c>
 800c612:	46c0      	nop			@ (mov r8, r8)
 800c614:	20000e00 	.word	0x20000e00
 800c618:	200005a3 	.word	0x200005a3

0800c61c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b09d      	sub	sp, #116	@ 0x74
 800c620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c622:	2438      	movs	r4, #56	@ 0x38
 800c624:	193b      	adds	r3, r7, r4
 800c626:	0018      	movs	r0, r3
 800c628:	2338      	movs	r3, #56	@ 0x38
 800c62a:	001a      	movs	r2, r3
 800c62c:	2100      	movs	r1, #0
 800c62e:	f019 f8a5 	bl	802577c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c632:	2324      	movs	r3, #36	@ 0x24
 800c634:	18fb      	adds	r3, r7, r3
 800c636:	0018      	movs	r0, r3
 800c638:	2314      	movs	r3, #20
 800c63a:	001a      	movs	r2, r3
 800c63c:	2100      	movs	r1, #0
 800c63e:	f019 f89d 	bl	802577c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c642:	003b      	movs	r3, r7
 800c644:	0018      	movs	r0, r3
 800c646:	2324      	movs	r3, #36	@ 0x24
 800c648:	001a      	movs	r2, r3
 800c64a:	2100      	movs	r1, #0
 800c64c:	f019 f896 	bl	802577c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c650:	4b34      	ldr	r3, [pc, #208]	@ (800c724 <SystemClock_Config+0x108>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a34      	ldr	r2, [pc, #208]	@ (800c728 <SystemClock_Config+0x10c>)
 800c656:	401a      	ands	r2, r3
 800c658:	4b32      	ldr	r3, [pc, #200]	@ (800c724 <SystemClock_Config+0x108>)
 800c65a:	2180      	movs	r1, #128	@ 0x80
 800c65c:	0109      	lsls	r1, r1, #4
 800c65e:	430a      	orrs	r2, r1
 800c660:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c662:	f00d fe83 	bl	801a36c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c666:	4b31      	ldr	r3, [pc, #196]	@ (800c72c <SystemClock_Config+0x110>)
 800c668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c66a:	4a2f      	ldr	r2, [pc, #188]	@ (800c728 <SystemClock_Config+0x10c>)
 800c66c:	401a      	ands	r2, r3
 800c66e:	4b2f      	ldr	r3, [pc, #188]	@ (800c72c <SystemClock_Config+0x110>)
 800c670:	2180      	movs	r1, #128	@ 0x80
 800c672:	0149      	lsls	r1, r1, #5
 800c674:	430a      	orrs	r2, r1
 800c676:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c678:	193b      	adds	r3, r7, r4
 800c67a:	2226      	movs	r2, #38	@ 0x26
 800c67c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c67e:	193b      	adds	r3, r7, r4
 800c680:	2280      	movs	r2, #128	@ 0x80
 800c682:	0052      	lsls	r2, r2, #1
 800c684:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c686:	0021      	movs	r1, r4
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	2201      	movs	r2, #1
 800c68c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c68e:	187b      	adds	r3, r7, r1
 800c690:	2210      	movs	r2, #16
 800c692:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c694:	187b      	adds	r3, r7, r1
 800c696:	2201      	movs	r2, #1
 800c698:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c69a:	187b      	adds	r3, r7, r1
 800c69c:	2200      	movs	r2, #0
 800c69e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c6a0:	187b      	adds	r3, r7, r1
 800c6a2:	0018      	movs	r0, r3
 800c6a4:	f00d fef2 	bl	801a48c <HAL_RCC_OscConfig>
 800c6a8:	1e03      	subs	r3, r0, #0
 800c6aa:	d001      	beq.n	800c6b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c6ac:	f000 f910 	bl	800c8d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c6b0:	2124      	movs	r1, #36	@ 0x24
 800c6b2:	187b      	adds	r3, r7, r1
 800c6b4:	220f      	movs	r2, #15
 800c6b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c6b8:	187b      	adds	r3, r7, r1
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c6be:	187b      	adds	r3, r7, r1
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c6ca:	187b      	adds	r3, r7, r1
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c6d0:	187b      	adds	r3, r7, r1
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f00e faad 	bl	801ac34 <HAL_RCC_ClockConfig>
 800c6da:	1e03      	subs	r3, r0, #0
 800c6dc:	d001      	beq.n	800c6e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c6de:	f000 f8f7 	bl	800c8d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c6e2:	003b      	movs	r3, r7
 800c6e4:	226d      	movs	r2, #109	@ 0x6d
 800c6e6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c6e8:	003b      	movs	r3, r7
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c6ee:	003b      	movs	r3, r7
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c6f4:	003b      	movs	r3, r7
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c6fa:	003b      	movs	r3, r7
 800c6fc:	2280      	movs	r2, #128	@ 0x80
 800c6fe:	0252      	lsls	r2, r2, #9
 800c700:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c702:	003b      	movs	r3, r7
 800c704:	2280      	movs	r2, #128	@ 0x80
 800c706:	04d2      	lsls	r2, r2, #19
 800c708:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c70a:	003b      	movs	r3, r7
 800c70c:	0018      	movs	r0, r3
 800c70e:	f00e fcb5 	bl	801b07c <HAL_RCCEx_PeriphCLKConfig>
 800c712:	1e03      	subs	r3, r0, #0
 800c714:	d001      	beq.n	800c71a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c716:	f000 f8db 	bl	800c8d0 <Error_Handler>
  }
}
 800c71a:	46c0      	nop			@ (mov r8, r8)
 800c71c:	46bd      	mov	sp, r7
 800c71e:	b01d      	add	sp, #116	@ 0x74
 800c720:	bd90      	pop	{r4, r7, pc}
 800c722:	46c0      	nop			@ (mov r8, r8)
 800c724:	40007000 	.word	0x40007000
 800c728:	ffffe7ff 	.word	0xffffe7ff
 800c72c:	40021000 	.word	0x40021000

0800c730 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c734:	4b38      	ldr	r3, [pc, #224]	@ (800c818 <check_cli_command+0xe8>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	3b61      	subs	r3, #97	@ 0x61
 800c73a:	2b15      	cmp	r3, #21
 800c73c:	d836      	bhi.n	800c7ac <check_cli_command+0x7c>
 800c73e:	009a      	lsls	r2, r3, #2
 800c740:	4b36      	ldr	r3, [pc, #216]	@ (800c81c <check_cli_command+0xec>)
 800c742:	18d3      	adds	r3, r2, r3
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c748:	4b35      	ldr	r3, [pc, #212]	@ (800c820 <check_cli_command+0xf0>)
 800c74a:	0018      	movs	r0, r3
 800c74c:	f018 fea2 	bl	8025494 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c750:	2003      	movs	r0, #3
 800c752:	f006 fd89 	bl	8013268 <SetVerboseLevel>
      break;
 800c756:	e058      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c758:	f7fb ff10 	bl	800857c <PC_show_Keys>
    break;
 800c75c:	e055      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c75e:	f7f8 f8c1 	bl	80048e4 <forceNTPupdate>
    break;
 800c762:	e052      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c764:	4b2f      	ldr	r3, [pc, #188]	@ (800c824 <check_cli_command+0xf4>)
 800c766:	0018      	movs	r0, r3
 800c768:	f018 fe94 	bl	8025494 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c76c:	2002      	movs	r0, #2
 800c76e:	f006 fd7b 	bl	8013268 <SetVerboseLevel>
      break;
 800c772:	e04a      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c774:	4b2c      	ldr	r3, [pc, #176]	@ (800c828 <check_cli_command+0xf8>)
 800c776:	0018      	movs	r0, r3
 800c778:	f018 fe8c 	bl	8025494 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c77c:	2001      	movs	r0, #1
 800c77e:	f006 fd73 	bl	8013268 <SetVerboseLevel>
      break;
 800c782:	e042      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c784:	4b29      	ldr	r3, [pc, #164]	@ (800c82c <check_cli_command+0xfc>)
 800c786:	0018      	movs	r0, r3
 800c788:	f018 fe84 	bl	8025494 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c78c:	2000      	movs	r0, #0
 800c78e:	f006 fd6b 	bl	8013268 <SetVerboseLevel>
      break;
 800c792:	e03a      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c794:	f007 fa3e 	bl	8013c14 <HAL_GetTick>
 800c798:	0002      	movs	r2, r0
 800c79a:	4b25      	ldr	r3, [pc, #148]	@ (800c830 <check_cli_command+0x100>)
 800c79c:	601a      	str	r2, [r3, #0]
      break;
 800c79e:	e034      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c7a0:	f7fc fd88 	bl	80092b4 <showTime>
      break;
 800c7a4:	e031      	b.n	800c80a <check_cli_command+0xda>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800c7a6:	f006 fd79 	bl	801329c <BinaryReleaseInfo>
      break;
 800c7aa:	e02e      	b.n	800c80a <check_cli_command+0xda>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c7ac:	4a21      	ldr	r2, [pc, #132]	@ (800c834 <check_cli_command+0x104>)
 800c7ae:	4b22      	ldr	r3, [pc, #136]	@ (800c838 <check_cli_command+0x108>)
 800c7b0:	0019      	movs	r1, r3
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	f006 fcee 	bl	8013194 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c7b8:	4b20      	ldr	r3, [pc, #128]	@ (800c83c <check_cli_command+0x10c>)
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	f018 fe6a 	bl	8025494 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c7c0:	4b1f      	ldr	r3, [pc, #124]	@ (800c840 <check_cli_command+0x110>)
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f018 fe66 	bl	8025494 <puts>
      printf("e - show EEPROM\r\n");
 800c7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c844 <check_cli_command+0x114>)
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	f018 fe62 	bl	8025494 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c848 <check_cli_command+0x118>)
 800c7d2:	0018      	movs	r0, r3
 800c7d4:	f018 fe5e 	bl	8025494 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c84c <check_cli_command+0x11c>)
 800c7da:	0018      	movs	r0, r3
 800c7dc:	f018 fe5a 	bl	8025494 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c7e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c850 <check_cli_command+0x120>)
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	f018 fe56 	bl	8025494 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c7e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c854 <check_cli_command+0x124>)
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f018 fe52 	bl	8025494 <puts>
      printf("s - Start particle measurement\r\n");
 800c7f0:	4b19      	ldr	r3, [pc, #100]	@ (800c858 <check_cli_command+0x128>)
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	f018 fe4e 	bl	8025494 <puts>
      printf("t - Show actual system time\r\n");
 800c7f8:	4b18      	ldr	r3, [pc, #96]	@ (800c85c <check_cli_command+0x12c>)
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f018 fe4a 	bl	8025494 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
      printf("v - Show system version\r\n");
 800c800:	4b17      	ldr	r3, [pc, #92]	@ (800c860 <check_cli_command+0x130>)
 800c802:	0018      	movs	r0, r3
 800c804:	f018 fe46 	bl	8025494 <puts>
  break;
 800c808:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c80a:	4b03      	ldr	r3, [pc, #12]	@ (800c818 <check_cli_command+0xe8>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	701a      	strb	r2, [r3, #0]
}
 800c810:	46c0      	nop			@ (mov r8, r8)
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	46c0      	nop			@ (mov r8, r8)
 800c818:	20000e00 	.word	0x20000e00
 800c81c:	0802da90 	.word	0x0802da90
 800c820:	0802c1b0 	.word	0x0802c1b0
 800c824:	0802c1cc 	.word	0x0802c1cc
 800c828:	0802c1e8 	.word	0x0802c1e8
 800c82c:	0802c208 	.word	0x0802c208
 800c830:	20000ec8 	.word	0x20000ec8
 800c834:	0802c224 	.word	0x0802c224
 800c838:	0802c254 	.word	0x0802c254
 800c83c:	0802c258 	.word	0x0802c258
 800c840:	0802c270 	.word	0x0802c270
 800c844:	0802c290 	.word	0x0802c290
 800c848:	0802c2a4 	.word	0x0802c2a4
 800c84c:	0802c2c8 	.word	0x0802c2c8
 800c850:	0802c2e8 	.word	0x0802c2e8
 800c854:	0802c30c 	.word	0x0802c30c
 800c858:	0802c32c 	.word	0x0802c32c
 800c85c:	0802c34c 	.word	0x0802c34c
 800c860:	0802c36c 	.word	0x0802c36c

0800c864 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c86c:	4907      	ldr	r1, [pc, #28]	@ (800c88c <HAL_UART_RxCpltCallback+0x28>)
 800c86e:	4b08      	ldr	r3, [pc, #32]	@ (800c890 <HAL_UART_RxCpltCallback+0x2c>)
 800c870:	2201      	movs	r2, #1
 800c872:	0018      	movs	r0, r3
 800c874:	f00f ffc4 	bl	801c800 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c878:	4904      	ldr	r1, [pc, #16]	@ (800c88c <HAL_UART_RxCpltCallback+0x28>)
 800c87a:	4b05      	ldr	r3, [pc, #20]	@ (800c890 <HAL_UART_RxCpltCallback+0x2c>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	0018      	movs	r0, r3
 800c880:	f00f ffbe 	bl	801c800 <HAL_UART_Receive_IT>
}
 800c884:	46c0      	nop			@ (mov r8, r8)
 800c886:	46bd      	mov	sp, r7
 800c888:	b002      	add	sp, #8
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	20000e00 	.word	0x20000e00
 800c890:	20001fe0 	.word	0x20001fe0

0800c894 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	0002      	movs	r2, r0
 800c89c:	1dbb      	adds	r3, r7, #6
 800c89e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800c8a0:	1dbb      	adds	r3, r7, #6
 800c8a2:	881a      	ldrh	r2, [r3, #0]
 800c8a4:	2380      	movs	r3, #128	@ 0x80
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d10b      	bne.n	800c8c4 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800c8ac:	f005 ff18 	bl	80126e0 <setuserToggle>
    if (GetPMSensorPresence()) {
 800c8b0:	f000 f860 	bl	800c974 <GetPMSensorPresence>
 800c8b4:	1e03      	subs	r3, r0, #0
 800c8b6:	d005      	beq.n	800c8c4 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800c8b8:	4b04      	ldr	r3, [pc, #16]	@ (800c8cc <HAL_GPIO_EXTI_Callback+0x38>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f001 f8b6 	bl	800da30 <sen5x_Set_sen5x_state>
    }
  }
}
 800c8c4:	46c0      	nop			@ (mov r8, r8)
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	b002      	add	sp, #8
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20000e18 	.word	0x20000e18

0800c8d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800c8d4:	f005 fb56 	bl	8011f84 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c8d8:	b672      	cpsid	i
}
 800c8da:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800c8dc:	4a05      	ldr	r2, [pc, #20]	@ (800c8f4 <Error_Handler+0x24>)
 800c8de:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <Error_Handler+0x28>)
 800c8e0:	0019      	movs	r1, r3
 800c8e2:	2001      	movs	r0, #1
 800c8e4:	f006 fc56 	bl	8013194 <CreateLine>

    HAL_Delay(2500);
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <Error_Handler+0x2c>)
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	f007 f99c 	bl	8013c28 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800c8f0:	46c0      	nop			@ (mov r8, r8)
 800c8f2:	e7f3      	b.n	800c8dc <Error_Handler+0xc>
 800c8f4:	0802c388 	.word	0x0802c388
 800c8f8:	0802c254 	.word	0x0802c254
 800c8fc:	000009c4 	.word	0x000009c4

0800c900 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800c904:	4b19      	ldr	r3, [pc, #100]	@ (800c96c <testInit+0x6c>)
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800c90a:	4b18      	ldr	r3, [pc, #96]	@ (800c96c <testInit+0x6c>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800c910:	4b16      	ldr	r3, [pc, #88]	@ (800c96c <testInit+0x6c>)
 800c912:	2200      	movs	r2, #0
 800c914:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800c916:	4b15      	ldr	r3, [pc, #84]	@ (800c96c <testInit+0x6c>)
 800c918:	2200      	movs	r2, #0
 800c91a:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800c91c:	4b13      	ldr	r3, [pc, #76]	@ (800c96c <testInit+0x6c>)
 800c91e:	2200      	movs	r2, #0
 800c920:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800c922:	4b12      	ldr	r3, [pc, #72]	@ (800c96c <testInit+0x6c>)
 800c924:	2200      	movs	r2, #0
 800c926:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800c928:	4b10      	ldr	r3, [pc, #64]	@ (800c96c <testInit+0x6c>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800c92e:	4b0f      	ldr	r3, [pc, #60]	@ (800c96c <testInit+0x6c>)
 800c930:	2200      	movs	r2, #0
 800c932:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800c934:	4b0d      	ldr	r3, [pc, #52]	@ (800c96c <testInit+0x6c>)
 800c936:	2200      	movs	r2, #0
 800c938:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800c93a:	4b0d      	ldr	r3, [pc, #52]	@ (800c970 <testInit+0x70>)
 800c93c:	2201      	movs	r2, #1
 800c93e:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800c940:	4b0b      	ldr	r3, [pc, #44]	@ (800c970 <testInit+0x70>)
 800c942:	2201      	movs	r2, #1
 800c944:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800c946:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <testInit+0x70>)
 800c948:	2201      	movs	r2, #1
 800c94a:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800c94c:	4b08      	ldr	r3, [pc, #32]	@ (800c970 <testInit+0x70>)
 800c94e:	2201      	movs	r2, #1
 800c950:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800c952:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <testInit+0x70>)
 800c954:	2201      	movs	r2, #1
 800c956:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800c958:	4b05      	ldr	r3, [pc, #20]	@ (800c970 <testInit+0x70>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800c95e:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <testInit+0x70>)
 800c960:	2201      	movs	r2, #1
 800c962:	719a      	strb	r2, [r3, #6]
}
 800c964:	46c0      	nop			@ (mov r8, r8)
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	46c0      	nop			@ (mov r8, r8)
 800c96c:	20000e20 	.word	0x20000e20
 800c970:	20000e18 	.word	0x20000e18

0800c974 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800c978:	4b02      	ldr	r3, [pc, #8]	@ (800c984 <GetPMSensorPresence+0x10>)
 800c97a:	795b      	ldrb	r3, [r3, #5]
}
 800c97c:	0018      	movs	r0, r3
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	20000e20 	.word	0x20000e20

0800c988 <DisablePMSensor>:

void DisablePMSensor() {
 800c988:	b580      	push	{r7, lr}
 800c98a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c98c:	4b02      	ldr	r3, [pc, #8]	@ (800c998 <DisablePMSensor+0x10>)
 800c98e:	2200      	movs	r2, #0
 800c990:	715a      	strb	r2, [r3, #5]
}
 800c992:	46c0      	nop			@ (mov r8, r8)
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20000e20 	.word	0x20000e20

0800c99c <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ac <IsAHT20SensorPresent+0x10>)
 800c9a2:	789b      	ldrb	r3, [r3, #2]
}
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	46c0      	nop			@ (mov r8, r8)
 800c9ac:	20000e20 	.word	0x20000e20

0800c9b0 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c9b4:	4b02      	ldr	r3, [pc, #8]	@ (800c9c0 <IsBMP280SensorPresent+0x10>)
 800c9b6:	791b      	ldrb	r3, [r3, #4]
}
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	46c0      	nop			@ (mov r8, r8)
 800c9c0:	20000e20 	.word	0x20000e20

0800c9c4 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c9c8:	4b02      	ldr	r3, [pc, #8]	@ (800c9d4 <IsENS160SensorPresent+0x10>)
 800c9ca:	78db      	ldrb	r3, [r3, #3]
}
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	46c0      	nop			@ (mov r8, r8)
 800c9d4:	20000e20 	.word	0x20000e20

0800c9d8 <IsSGPPresent>:

bool IsSGPPresent() {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c9dc:	4b02      	ldr	r3, [pc, #8]	@ (800c9e8 <IsSGPPresent+0x10>)
 800c9de:	785b      	ldrb	r3, [r3, #1]
}
 800c9e0:	0018      	movs	r0, r3
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	46c0      	nop			@ (mov r8, r8)
 800c9e8:	20000e20 	.word	0x20000e20

0800c9ec <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	0002      	movs	r2, r0
 800c9f4:	1dfb      	adds	r3, r7, #7
 800c9f6:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800ca28 <SetVOCSensorDIS_ENA+0x3c>)
 800c9fa:	1dfa      	adds	r2, r7, #7
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800ca00:	4b0a      	ldr	r3, [pc, #40]	@ (800ca2c <SetVOCSensorDIS_ENA+0x40>)
 800ca02:	1dfa      	adds	r2, r7, #7
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800ca08:	1dfb      	adds	r3, r7, #7
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <SetVOCSensorDIS_ENA+0x28>
 800ca10:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <SetVOCSensorDIS_ENA+0x44>)
 800ca12:	e000      	b.n	800ca16 <SetVOCSensorDIS_ENA+0x2a>
 800ca14:	4b07      	ldr	r3, [pc, #28]	@ (800ca34 <SetVOCSensorDIS_ENA+0x48>)
 800ca16:	4a08      	ldr	r2, [pc, #32]	@ (800ca38 <SetVOCSensorDIS_ENA+0x4c>)
 800ca18:	4908      	ldr	r1, [pc, #32]	@ (800ca3c <SetVOCSensorDIS_ENA+0x50>)
 800ca1a:	2003      	movs	r0, #3
 800ca1c:	f006 fbba 	bl	8013194 <CreateLine>
}
 800ca20:	46c0      	nop			@ (mov r8, r8)
 800ca22:	46bd      	mov	sp, r7
 800ca24:	b002      	add	sp, #8
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	20000e20 	.word	0x20000e20
 800ca2c:	20000e18 	.word	0x20000e18
 800ca30:	0802c3b4 	.word	0x0802c3b4
 800ca34:	0802c3bc 	.word	0x0802c3bc
 800ca38:	0802c3c8 	.word	0x0802c3c8
 800ca3c:	0802c3dc 	.word	0x0802c3dc

0800ca40 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800ca44:	4b02      	ldr	r3, [pc, #8]	@ (800ca50 <IsPMSensorEnabled+0x10>)
 800ca46:	789b      	ldrb	r3, [r3, #2]
}
 800ca48:	0018      	movs	r0, r3
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	46c0      	nop			@ (mov r8, r8)
 800ca50:	20000e18 	.word	0x20000e18

0800ca54 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	0002      	movs	r2, r0
 800ca5c:	1dfb      	adds	r3, r7, #7
 800ca5e:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800ca60:	4b05      	ldr	r3, [pc, #20]	@ (800ca78 <SetVOCSensorStatus+0x24>)
 800ca62:	7a1b      	ldrb	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800ca68:	4b04      	ldr	r3, [pc, #16]	@ (800ca7c <SetVOCSensorStatus+0x28>)
 800ca6a:	1dfa      	adds	r2, r7, #7
 800ca6c:	7812      	ldrb	r2, [r2, #0]
 800ca6e:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800ca70:	46c0      	nop			@ (mov r8, r8)
 800ca72:	46bd      	mov	sp, r7
 800ca74:	b002      	add	sp, #8
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000e20 	.word	0x20000e20
 800ca7c:	20000e18 	.word	0x20000e18

0800ca80 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	0002      	movs	r2, r0
 800ca88:	1dfb      	adds	r3, r7, #7
 800ca8a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800ca8c:	4b03      	ldr	r3, [pc, #12]	@ (800ca9c <SetPMSensorStatus+0x1c>)
 800ca8e:	1dfa      	adds	r2, r7, #7
 800ca90:	7812      	ldrb	r2, [r2, #0]
 800ca92:	709a      	strb	r2, [r3, #2]
}
 800ca94:	46c0      	nop			@ (mov r8, r8)
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b002      	add	sp, #8
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000e18 	.word	0x20000e18

0800caa0 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800caa4:	4b02      	ldr	r3, [pc, #8]	@ (800cab0 <SetESPMeasurementDone+0x10>)
 800caa6:	2201      	movs	r2, #1
 800caa8:	71da      	strb	r2, [r3, #7]
}
 800caaa:	46c0      	nop			@ (mov r8, r8)
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20000e20 	.word	0x20000e20

0800cab4 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  testInit();
 800cac2:	f7ff ff1d 	bl	800c900 <testInit>
  I2CSensors_Init(sensorI2C);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	0018      	movs	r0, r3
 800caca:	f7fb f935 	bl	8007d38 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800cace:	f006 fe2d 	bl	801372c <HIDS_DeviceConnected>
 800cad2:	0003      	movs	r3, r0
 800cad4:	001a      	movs	r2, r3
 800cad6:	2301      	movs	r3, #1
 800cad8:	4053      	eors	r3, r2
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00c      	beq.n	800cafa <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800cae0:	4abf      	ldr	r2, [pc, #764]	@ (800cde0 <Device_Init+0x32c>)
 800cae2:	4bc0      	ldr	r3, [pc, #768]	@ (800cde4 <Device_Init+0x330>)
 800cae4:	0019      	movs	r1, r3
 800cae6:	2001      	movs	r0, #1
 800cae8:	f006 fb54 	bl	8013194 <CreateLine>
     SensorProbe.HT_Present = false;
 800caec:	4bbe      	ldr	r3, [pc, #760]	@ (800cde8 <Device_Init+0x334>)
 800caee:	2200      	movs	r2, #0
 800caf0:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800caf2:	4bbe      	ldr	r3, [pc, #760]	@ (800cdec <Device_Init+0x338>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	e008      	b.n	800cb0c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800cafa:	4bbb      	ldr	r3, [pc, #748]	@ (800cde8 <Device_Init+0x334>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800cb00:	4abb      	ldr	r2, [pc, #748]	@ (800cdf0 <Device_Init+0x33c>)
 800cb02:	4bbc      	ldr	r3, [pc, #752]	@ (800cdf4 <Device_Init+0x340>)
 800cb04:	0019      	movs	r1, r3
 800cb06:	2003      	movs	r0, #3
 800cb08:	f006 fb44 	bl	8013194 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800cb0c:	f7fe f9a6 	bl	800ae5c <BMP280_DeviceConnected>
 800cb10:	0003      	movs	r3, r0
 800cb12:	001a      	movs	r2, r3
 800cb14:	2301      	movs	r3, #1
 800cb16:	4053      	eors	r3, r2
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00c      	beq.n	800cb38 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800cb1e:	4ab6      	ldr	r2, [pc, #728]	@ (800cdf8 <Device_Init+0x344>)
 800cb20:	4bb0      	ldr	r3, [pc, #704]	@ (800cde4 <Device_Init+0x330>)
 800cb22:	0019      	movs	r1, r3
 800cb24:	2001      	movs	r0, #1
 800cb26:	f006 fb35 	bl	8013194 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800cb2a:	4baf      	ldr	r3, [pc, #700]	@ (800cde8 <Device_Init+0x334>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800cb30:	4bae      	ldr	r3, [pc, #696]	@ (800cdec <Device_Init+0x338>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	715a      	strb	r2, [r3, #5]
 800cb36:	e008      	b.n	800cb4a <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800cb38:	4bab      	ldr	r3, [pc, #684]	@ (800cde8 <Device_Init+0x334>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800cb3e:	4aaf      	ldr	r2, [pc, #700]	@ (800cdfc <Device_Init+0x348>)
 800cb40:	4bac      	ldr	r3, [pc, #688]	@ (800cdf4 <Device_Init+0x340>)
 800cb42:	0019      	movs	r1, r3
 800cb44:	2003      	movs	r0, #3
 800cb46:	f006 fb25 	bl	8013194 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800cb4a:	f003 fd3d 	bl	80105c8 <SGP_DeviceConnected>
 800cb4e:	0003      	movs	r3, r0
 800cb50:	001a      	movs	r2, r3
 800cb52:	2301      	movs	r3, #1
 800cb54:	4053      	eors	r3, r2
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800cb5c:	4ba2      	ldr	r3, [pc, #648]	@ (800cde8 <Device_Init+0x334>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800cb62:	4aa7      	ldr	r2, [pc, #668]	@ (800ce00 <Device_Init+0x34c>)
 800cb64:	4b9f      	ldr	r3, [pc, #636]	@ (800cde4 <Device_Init+0x330>)
 800cb66:	0019      	movs	r1, r3
 800cb68:	2001      	movs	r0, #1
 800cb6a:	f006 fb13 	bl	8013194 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800cb6e:	4b9f      	ldr	r3, [pc, #636]	@ (800cdec <Device_Init+0x338>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	705a      	strb	r2, [r3, #1]
 800cb74:	e00b      	b.n	800cb8e <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800cb76:	4b9c      	ldr	r3, [pc, #624]	@ (800cde8 <Device_Init+0x334>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800cb7c:	4b9a      	ldr	r3, [pc, #616]	@ (800cde8 <Device_Init+0x334>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800cb82:	4aa0      	ldr	r2, [pc, #640]	@ (800ce04 <Device_Init+0x350>)
 800cb84:	4b9b      	ldr	r3, [pc, #620]	@ (800cdf4 <Device_Init+0x340>)
 800cb86:	0019      	movs	r1, r3
 800cb88:	2003      	movs	r0, #3
 800cb8a:	f006 fb03 	bl	8013194 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800cb8e:	f7f7 f96b 	bl	8003e68 <ENS_DeviceConnected>
 800cb92:	0003      	movs	r3, r0
 800cb94:	001a      	movs	r2, r3
 800cb96:	2301      	movs	r3, #1
 800cb98:	4053      	eors	r3, r2
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00c      	beq.n	800cbba <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800cba0:	4b91      	ldr	r3, [pc, #580]	@ (800cde8 <Device_Init+0x334>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800cba6:	4a98      	ldr	r2, [pc, #608]	@ (800ce08 <Device_Init+0x354>)
 800cba8:	4b8e      	ldr	r3, [pc, #568]	@ (800cde4 <Device_Init+0x330>)
 800cbaa:	0019      	movs	r1, r3
 800cbac:	2001      	movs	r0, #1
 800cbae:	f006 faf1 	bl	8013194 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800cbb2:	4b8e      	ldr	r3, [pc, #568]	@ (800cdec <Device_Init+0x338>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	719a      	strb	r2, [r3, #6]
 800cbb8:	e008      	b.n	800cbcc <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800cbba:	4b8b      	ldr	r3, [pc, #556]	@ (800cde8 <Device_Init+0x334>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800cbc0:	4a92      	ldr	r2, [pc, #584]	@ (800ce0c <Device_Init+0x358>)
 800cbc2:	4b8c      	ldr	r3, [pc, #560]	@ (800cdf4 <Device_Init+0x340>)
 800cbc4:	0019      	movs	r1, r3
 800cbc6:	2003      	movs	r0, #3
 800cbc8:	f006 fae4 	bl	8013194 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800cbcc:	f7fd fc72 	bl	800a4b4 <AHT20_DeviceConnected>
 800cbd0:	0003      	movs	r3, r0
 800cbd2:	001a      	movs	r2, r3
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	4053      	eors	r3, r2
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800cbde:	4a8c      	ldr	r2, [pc, #560]	@ (800ce10 <Device_Init+0x35c>)
 800cbe0:	4b80      	ldr	r3, [pc, #512]	@ (800cde4 <Device_Init+0x330>)
 800cbe2:	0019      	movs	r1, r3
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f006 fad5 	bl	8013194 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800cbea:	4b7f      	ldr	r3, [pc, #508]	@ (800cde8 <Device_Init+0x334>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800cbf0:	4b7e      	ldr	r3, [pc, #504]	@ (800cdec <Device_Init+0x338>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	711a      	strb	r2, [r3, #4]
 800cbf6:	e008      	b.n	800cc0a <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800cbf8:	4b7b      	ldr	r3, [pc, #492]	@ (800cde8 <Device_Init+0x334>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800cbfe:	4a85      	ldr	r2, [pc, #532]	@ (800ce14 <Device_Init+0x360>)
 800cc00:	4b7c      	ldr	r3, [pc, #496]	@ (800cdf4 <Device_Init+0x340>)
 800cc02:	0019      	movs	r1, r3
 800cc04:	2003      	movs	r0, #3
 800cc06:	f006 fac5 	bl	8013194 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800cc0a:	4b77      	ldr	r3, [pc, #476]	@ (800cde8 <Device_Init+0x334>)
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d009      	beq.n	800cc26 <Device_Init+0x172>
 800cc12:	4b75      	ldr	r3, [pc, #468]	@ (800cde8 <Device_Init+0x334>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d005      	beq.n	800cc26 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	2000      	movs	r0, #0
 800cc20:	f005 f80a 	bl	8011c38 <SetDBLED>
 800cc24:	e018      	b.n	800cc58 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	2001      	movs	r0, #1
 800cc2c:	f005 f804 	bl	8011c38 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800cc30:	4b79      	ldr	r3, [pc, #484]	@ (800ce18 <Device_Init+0x364>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	2101      	movs	r1, #1
 800cc36:	0018      	movs	r0, r3
 800cc38:	f008 fa7d 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800cc3c:	2380      	movs	r3, #128	@ 0x80
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	4875      	ldr	r0, [pc, #468]	@ (800ce18 <Device_Init+0x364>)
 800cc42:	2201      	movs	r2, #1
 800cc44:	0019      	movs	r1, r3
 800cc46:	f008 fa76 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800cc4a:	2380      	movs	r3, #128	@ 0x80
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4872      	ldr	r0, [pc, #456]	@ (800ce18 <Device_Init+0x364>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	0019      	movs	r1, r3
 800cc54:	f008 fa6f 	bl	8015136 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800cc58:	4b64      	ldr	r3, [pc, #400]	@ (800cdec <Device_Init+0x338>)
 800cc5a:	78db      	ldrb	r3, [r3, #3]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d028      	beq.n	800ccb2 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800cc60:	4a6e      	ldr	r2, [pc, #440]	@ (800ce1c <Device_Init+0x368>)
 800cc62:	4b6f      	ldr	r3, [pc, #444]	@ (800ce20 <Device_Init+0x36c>)
 800cc64:	0019      	movs	r1, r3
 800cc66:	2002      	movs	r0, #2
 800cc68:	f006 fa94 	bl	8013194 <CreateLine>
    if (!enableMicrophone(true)) {
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	f004 f8e1 	bl	8010e34 <enableMicrophone>
 800cc72:	0003      	movs	r3, r0
 800cc74:	001a      	movs	r2, r3
 800cc76:	2301      	movs	r3, #1
 800cc78:	4053      	eors	r3, r2
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00c      	beq.n	800cc9a <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800cc80:	4a68      	ldr	r2, [pc, #416]	@ (800ce24 <Device_Init+0x370>)
 800cc82:	4b58      	ldr	r3, [pc, #352]	@ (800cde4 <Device_Init+0x330>)
 800cc84:	0019      	movs	r1, r3
 800cc86:	2001      	movs	r0, #1
 800cc88:	f006 fa84 	bl	8013194 <CreateLine>
      SensorProbe.MIC_Present = false;
 800cc8c:	4b56      	ldr	r3, [pc, #344]	@ (800cde8 <Device_Init+0x334>)
 800cc8e:	2200      	movs	r2, #0
 800cc90:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800cc92:	4b56      	ldr	r3, [pc, #344]	@ (800cdec <Device_Init+0x338>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	70da      	strb	r2, [r3, #3]
 800cc98:	e00b      	b.n	800ccb2 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800cc9a:	4b53      	ldr	r3, [pc, #332]	@ (800cde8 <Device_Init+0x334>)
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800cca0:	4b52      	ldr	r3, [pc, #328]	@ (800cdec <Device_Init+0x338>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800cca6:	4a60      	ldr	r2, [pc, #384]	@ (800ce28 <Device_Init+0x374>)
 800cca8:	4b52      	ldr	r3, [pc, #328]	@ (800cdf4 <Device_Init+0x340>)
 800ccaa:	0019      	movs	r1, r3
 800ccac:	2003      	movs	r0, #3
 800ccae:	f006 fa71 	bl	8013194 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800ccb2:	f000 ffb1 	bl	800dc18 <probe_sen5x>
 800ccb6:	1e03      	subs	r3, r0, #0
 800ccb8:	d122      	bne.n	800cd00 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800ccba:	4a5c      	ldr	r2, [pc, #368]	@ (800ce2c <Device_Init+0x378>)
 800ccbc:	4b4d      	ldr	r3, [pc, #308]	@ (800cdf4 <Device_Init+0x340>)
 800ccbe:	0019      	movs	r1, r3
 800ccc0:	2003      	movs	r0, #3
 800ccc2:	f006 fa67 	bl	8013194 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800ccc6:	4b48      	ldr	r3, [pc, #288]	@ (800cde8 <Device_Init+0x334>)
 800ccc8:	2201      	movs	r2, #1
 800ccca:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800cccc:	4b47      	ldr	r3, [pc, #284]	@ (800cdec <Device_Init+0x338>)
 800ccce:	2201      	movs	r2, #1
 800ccd0:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ccd2:	4b57      	ldr	r3, [pc, #348]	@ (800ce30 <Device_Init+0x37c>)
 800ccd4:	791b      	ldrb	r3, [r3, #4]
 800ccd6:	2b34      	cmp	r3, #52	@ 0x34
 800ccd8:	d003      	beq.n	800cce2 <Device_Init+0x22e>
 800ccda:	4b55      	ldr	r3, [pc, #340]	@ (800ce30 <Device_Init+0x37c>)
 800ccdc:	791b      	ldrb	r3, [r3, #4]
 800ccde:	2b35      	cmp	r3, #53	@ 0x35
 800cce0:	d11c      	bne.n	800cd1c <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800cce2:	4a54      	ldr	r2, [pc, #336]	@ (800ce34 <Device_Init+0x380>)
 800cce4:	4b4e      	ldr	r3, [pc, #312]	@ (800ce20 <Device_Init+0x36c>)
 800cce6:	0019      	movs	r1, r3
 800cce8:	2002      	movs	r0, #2
 800ccea:	f006 fa53 	bl	8013194 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800ccee:	4b3f      	ldr	r3, [pc, #252]	@ (800cdec <Device_Init+0x338>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800ccf4:	4b3c      	ldr	r3, [pc, #240]	@ (800cde8 <Device_Init+0x334>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800ccfa:	f003 fe4b 	bl	8010994 <SGP_SoftReset>
 800ccfe:	e00d      	b.n	800cd1c <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800cd00:	f000 ff54 	bl	800dbac <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800cd04:	4a4c      	ldr	r2, [pc, #304]	@ (800ce38 <Device_Init+0x384>)
 800cd06:	4b3b      	ldr	r3, [pc, #236]	@ (800cdf4 <Device_Init+0x340>)
 800cd08:	0019      	movs	r1, r3
 800cd0a:	2003      	movs	r0, #3
 800cd0c:	f006 fa42 	bl	8013194 <CreateLine>
    SensorProbe.PM_Present = false;
 800cd10:	4b35      	ldr	r3, [pc, #212]	@ (800cde8 <Device_Init+0x334>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800cd16:	4b35      	ldr	r3, [pc, #212]	@ (800cdec <Device_Init+0x338>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800cd1c:	4b32      	ldr	r3, [pc, #200]	@ (800cde8 <Device_Init+0x334>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <Device_Init+0x274>
 800cd24:	4b45      	ldr	r3, [pc, #276]	@ (800ce3c <Device_Init+0x388>)
 800cd26:	e000      	b.n	800cd2a <Device_Init+0x276>
 800cd28:	4b45      	ldr	r3, [pc, #276]	@ (800ce40 <Device_Init+0x38c>)
 800cd2a:	4a46      	ldr	r2, [pc, #280]	@ (800ce44 <Device_Init+0x390>)
 800cd2c:	493c      	ldr	r1, [pc, #240]	@ (800ce20 <Device_Init+0x36c>)
 800cd2e:	2002      	movs	r0, #2
 800cd30:	f006 fa30 	bl	8013194 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800cd34:	4b2c      	ldr	r3, [pc, #176]	@ (800cde8 <Device_Init+0x334>)
 800cd36:	785b      	ldrb	r3, [r3, #1]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <Device_Init+0x28c>
 800cd3c:	4b3f      	ldr	r3, [pc, #252]	@ (800ce3c <Device_Init+0x388>)
 800cd3e:	e000      	b.n	800cd42 <Device_Init+0x28e>
 800cd40:	4b3f      	ldr	r3, [pc, #252]	@ (800ce40 <Device_Init+0x38c>)
 800cd42:	4a41      	ldr	r2, [pc, #260]	@ (800ce48 <Device_Init+0x394>)
 800cd44:	4936      	ldr	r1, [pc, #216]	@ (800ce20 <Device_Init+0x36c>)
 800cd46:	2002      	movs	r0, #2
 800cd48:	f006 fa24 	bl	8013194 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800cd4c:	4b26      	ldr	r3, [pc, #152]	@ (800cde8 <Device_Init+0x334>)
 800cd4e:	789b      	ldrb	r3, [r3, #2]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <Device_Init+0x2a4>
 800cd54:	4b39      	ldr	r3, [pc, #228]	@ (800ce3c <Device_Init+0x388>)
 800cd56:	e000      	b.n	800cd5a <Device_Init+0x2a6>
 800cd58:	4b39      	ldr	r3, [pc, #228]	@ (800ce40 <Device_Init+0x38c>)
 800cd5a:	4a3c      	ldr	r2, [pc, #240]	@ (800ce4c <Device_Init+0x398>)
 800cd5c:	4930      	ldr	r1, [pc, #192]	@ (800ce20 <Device_Init+0x36c>)
 800cd5e:	2002      	movs	r0, #2
 800cd60:	f006 fa18 	bl	8013194 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800cd64:	4b20      	ldr	r3, [pc, #128]	@ (800cde8 <Device_Init+0x334>)
 800cd66:	791b      	ldrb	r3, [r3, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <Device_Init+0x2bc>
 800cd6c:	4b33      	ldr	r3, [pc, #204]	@ (800ce3c <Device_Init+0x388>)
 800cd6e:	e000      	b.n	800cd72 <Device_Init+0x2be>
 800cd70:	4b33      	ldr	r3, [pc, #204]	@ (800ce40 <Device_Init+0x38c>)
 800cd72:	4a37      	ldr	r2, [pc, #220]	@ (800ce50 <Device_Init+0x39c>)
 800cd74:	492a      	ldr	r1, [pc, #168]	@ (800ce20 <Device_Init+0x36c>)
 800cd76:	2002      	movs	r0, #2
 800cd78:	f006 fa0c 	bl	8013194 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800cd7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cde8 <Device_Init+0x334>)
 800cd7e:	78db      	ldrb	r3, [r3, #3]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <Device_Init+0x2d4>
 800cd84:	4b2d      	ldr	r3, [pc, #180]	@ (800ce3c <Device_Init+0x388>)
 800cd86:	e000      	b.n	800cd8a <Device_Init+0x2d6>
 800cd88:	4b2d      	ldr	r3, [pc, #180]	@ (800ce40 <Device_Init+0x38c>)
 800cd8a:	4a32      	ldr	r2, [pc, #200]	@ (800ce54 <Device_Init+0x3a0>)
 800cd8c:	4924      	ldr	r1, [pc, #144]	@ (800ce20 <Device_Init+0x36c>)
 800cd8e:	2002      	movs	r0, #2
 800cd90:	f006 fa00 	bl	8013194 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800cd94:	4b14      	ldr	r3, [pc, #80]	@ (800cde8 <Device_Init+0x334>)
 800cd96:	795b      	ldrb	r3, [r3, #5]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d001      	beq.n	800cda0 <Device_Init+0x2ec>
 800cd9c:	4b27      	ldr	r3, [pc, #156]	@ (800ce3c <Device_Init+0x388>)
 800cd9e:	e000      	b.n	800cda2 <Device_Init+0x2ee>
 800cda0:	4b27      	ldr	r3, [pc, #156]	@ (800ce40 <Device_Init+0x38c>)
 800cda2:	4a2d      	ldr	r2, [pc, #180]	@ (800ce58 <Device_Init+0x3a4>)
 800cda4:	491e      	ldr	r1, [pc, #120]	@ (800ce20 <Device_Init+0x36c>)
 800cda6:	2002      	movs	r0, #2
 800cda8:	f006 f9f4 	bl	8013194 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800cdac:	4b0e      	ldr	r3, [pc, #56]	@ (800cde8 <Device_Init+0x334>)
 800cdae:	799b      	ldrb	r3, [r3, #6]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <Device_Init+0x304>
 800cdb4:	4b21      	ldr	r3, [pc, #132]	@ (800ce3c <Device_Init+0x388>)
 800cdb6:	e000      	b.n	800cdba <Device_Init+0x306>
 800cdb8:	4b21      	ldr	r3, [pc, #132]	@ (800ce40 <Device_Init+0x38c>)
 800cdba:	4a28      	ldr	r2, [pc, #160]	@ (800ce5c <Device_Init+0x3a8>)
 800cdbc:	4918      	ldr	r1, [pc, #96]	@ (800ce20 <Device_Init+0x36c>)
 800cdbe:	2002      	movs	r0, #2
 800cdc0:	f006 f9e8 	bl	8013194 <CreateLine>
  ESP_Init(espUart);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	0018      	movs	r0, r3
 800cdc8:	f7f8 f824 	bl	8004e14 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800cdcc:	4a24      	ldr	r2, [pc, #144]	@ (800ce60 <Device_Init+0x3ac>)
 800cdce:	4b09      	ldr	r3, [pc, #36]	@ (800cdf4 <Device_Init+0x340>)
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	2003      	movs	r0, #3
 800cdd4:	f006 f9de 	bl	8013194 <CreateLine>
}
 800cdd8:	46c0      	nop			@ (mov r8, r8)
 800cdda:	46bd      	mov	sp, r7
 800cddc:	b004      	add	sp, #16
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0802c3e0 	.word	0x0802c3e0
 800cde4:	0802c410 	.word	0x0802c410
 800cde8:	20000e20 	.word	0x20000e20
 800cdec:	20000e18 	.word	0x20000e18
 800cdf0:	0802c414 	.word	0x0802c414
 800cdf4:	0802c3dc 	.word	0x0802c3dc
 800cdf8:	0802c440 	.word	0x0802c440
 800cdfc:	0802c474 	.word	0x0802c474
 800ce00:	0802c4a4 	.word	0x0802c4a4
 800ce04:	0802c4c0 	.word	0x0802c4c0
 800ce08:	0802c4d8 	.word	0x0802c4d8
 800ce0c:	0802c4f4 	.word	0x0802c4f4
 800ce10:	0802c50c 	.word	0x0802c50c
 800ce14:	0802c540 	.word	0x0802c540
 800ce18:	50000400 	.word	0x50000400
 800ce1c:	0802c574 	.word	0x0802c574
 800ce20:	0802c598 	.word	0x0802c598
 800ce24:	0802c59c 	.word	0x0802c59c
 800ce28:	0802c5c8 	.word	0x0802c5c8
 800ce2c:	0802c5f4 	.word	0x0802c5f4
 800ce30:	20000ebc 	.word	0x20000ebc
 800ce34:	0802c60c 	.word	0x0802c60c
 800ce38:	0802c65c 	.word	0x0802c65c
 800ce3c:	0802c680 	.word	0x0802c680
 800ce40:	0802c684 	.word	0x0802c684
 800ce44:	0802c688 	.word	0x0802c688
 800ce48:	0802c6a4 	.word	0x0802c6a4
 800ce4c:	0802c6c0 	.word	0x0802c6c0
 800ce50:	0802c6e0 	.word	0x0802c6e0
 800ce54:	0802c700 	.word	0x0802c700
 800ce58:	0802c720 	.word	0x0802c720
 800ce5c:	0802c73c 	.word	0x0802c73c
 800ce60:	0802c758 	.word	0x0802c758

0800ce64 <Device_Test>:

void Device_Test(){
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800ce68:	4b34      	ldr	r3, [pc, #208]	@ (800cf3c <Device_Test+0xd8>)
 800ce6a:	799b      	ldrb	r3, [r3, #6]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4053      	eors	r3, r2
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d027      	beq.n	800cec6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800ce76:	f000 fbff 	bl	800d678 <MIC_TestMeasurementDone>
 800ce7a:	1e03      	subs	r3, r0, #0
 800ce7c:	d011      	beq.n	800cea2 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800ce7e:	4b2f      	ldr	r3, [pc, #188]	@ (800cf3c <Device_Test+0xd8>)
 800ce80:	2201      	movs	r2, #1
 800ce82:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800ce84:	4b2e      	ldr	r3, [pc, #184]	@ (800cf40 <Device_Test+0xdc>)
 800ce86:	2201      	movs	r2, #1
 800ce88:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800ce8a:	f004 fe59 	bl	8011b40 <Calculate_LED_ON>
 800ce8e:	0003      	movs	r3, r0
 800ce90:	0019      	movs	r1, r3
 800ce92:	23fa      	movs	r3, #250	@ 0xfa
 800ce94:	011a      	lsls	r2, r3, #4
 800ce96:	23fa      	movs	r3, #250	@ 0xfa
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f004 fe98 	bl	8011bd0 <SetStatusLED>
 800cea0:	e011      	b.n	800cec6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800cea2:	f003 ffa3 	bl	8010dec <micSettlingComplete>
 800cea6:	1e03      	subs	r3, r0, #0
 800cea8:	d00d      	beq.n	800cec6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800ceaa:	4b25      	ldr	r3, [pc, #148]	@ (800cf40 <Device_Test+0xdc>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800ceb0:	f004 fe46 	bl	8011b40 <Calculate_LED_ON>
 800ceb4:	0003      	movs	r3, r0
 800ceb6:	0018      	movs	r0, r3
 800ceb8:	23fa      	movs	r3, #250	@ 0xfa
 800ceba:	011a      	lsls	r2, r3, #4
 800cebc:	23fa      	movs	r3, #250	@ 0xfa
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	0019      	movs	r1, r3
 800cec2:	f004 fe85 	bl	8011bd0 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800cec6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf3c <Device_Test+0xd8>)
 800cec8:	79db      	ldrb	r3, [r3, #7]
 800ceca:	2201      	movs	r2, #1
 800cecc:	4053      	eors	r3, r2
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800ced4:	f7fa f93c 	bl	8007150 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800ced8:	4b18      	ldr	r3, [pc, #96]	@ (800cf3c <Device_Test+0xd8>)
 800ceda:	79db      	ldrb	r3, [r3, #7]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d003      	beq.n	800cee8 <Device_Test+0x84>
 800cee0:	4b16      	ldr	r3, [pc, #88]	@ (800cf3c <Device_Test+0xd8>)
 800cee2:	799b      	ldrb	r3, [r3, #6]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <Device_Test+0x92>
 800cee8:	4b16      	ldr	r3, [pc, #88]	@ (800cf44 <Device_Test+0xe0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f006 f8fb 	bl	80130e8 <TimestampIsReached>
 800cef2:	1e03      	subs	r3, r0, #0
 800cef4:	d01f      	beq.n	800cf36 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800cef6:	4b11      	ldr	r3, [pc, #68]	@ (800cf3c <Device_Test+0xd8>)
 800cef8:	79db      	ldrb	r3, [r3, #7]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <Device_Test+0x9e>
 800cefe:	4b12      	ldr	r3, [pc, #72]	@ (800cf48 <Device_Test+0xe4>)
 800cf00:	e000      	b.n	800cf04 <Device_Test+0xa0>
 800cf02:	4b12      	ldr	r3, [pc, #72]	@ (800cf4c <Device_Test+0xe8>)
 800cf04:	4a12      	ldr	r2, [pc, #72]	@ (800cf50 <Device_Test+0xec>)
 800cf06:	4913      	ldr	r1, [pc, #76]	@ (800cf54 <Device_Test+0xf0>)
 800cf08:	2002      	movs	r0, #2
 800cf0a:	f006 f943 	bl	8013194 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf3c <Device_Test+0xd8>)
 800cf10:	799b      	ldrb	r3, [r3, #6]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <Device_Test+0xb6>
 800cf16:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <Device_Test+0xe4>)
 800cf18:	e000      	b.n	800cf1c <Device_Test+0xb8>
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	@ (800cf4c <Device_Test+0xe8>)
 800cf1c:	4a0e      	ldr	r2, [pc, #56]	@ (800cf58 <Device_Test+0xf4>)
 800cf1e:	490d      	ldr	r1, [pc, #52]	@ (800cf54 <Device_Test+0xf0>)
 800cf20:	2002      	movs	r0, #2
 800cf22:	f006 f937 	bl	8013194 <CreateLine>
    Info("Test completed");
 800cf26:	4a0d      	ldr	r2, [pc, #52]	@ (800cf5c <Device_Test+0xf8>)
 800cf28:	4b0a      	ldr	r3, [pc, #40]	@ (800cf54 <Device_Test+0xf0>)
 800cf2a:	0019      	movs	r1, r3
 800cf2c:	2002      	movs	r0, #2
 800cf2e:	f006 f931 	bl	8013194 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800cf32:	f7ff f8ed 	bl	800c110 <SetTestDone>
  }
}
 800cf36:	46c0      	nop			@ (mov r8, r8)
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000e20 	.word	0x20000e20
 800cf40:	20000e18 	.word	0x20000e18
 800cf44:	20000e10 	.word	0x20000e10
 800cf48:	0802c77c 	.word	0x0802c77c
 800cf4c:	0802c784 	.word	0x0802c784
 800cf50:	0802c78c 	.word	0x0802c78c
 800cf54:	0802c598 	.word	0x0802c598
 800cf58:	0802c7a0 	.word	0x0802c7a0
 800cf5c:	0802c7b4 	.word	0x0802c7b4

0800cf60 <AllDevicesReady>:

bool AllDevicesReady() {
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	46de      	mov	lr, fp
 800cf64:	4657      	mov	r7, sl
 800cf66:	464e      	mov	r6, r9
 800cf68:	4645      	mov	r5, r8
 800cf6a:	b5e0      	push	{r5, r6, r7, lr}
 800cf6c:	b08b      	sub	sp, #44	@ 0x2c
 800cf6e:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  if (TimestampIsReached(deviceTimeOut)) {
 800cf70:	4b75      	ldr	r3, [pc, #468]	@ (800d148 <AllDevicesReady+0x1e8>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	0018      	movs	r0, r3
 800cf76:	f006 f8b7 	bl	80130e8 <TimestampIsReached>
 800cf7a:	1e03      	subs	r3, r0, #0
 800cf7c:	d100      	bne.n	800cf80 <AllDevicesReady+0x20>
 800cf7e:	e0d9      	b.n	800d134 <AllDevicesReady+0x1d4>
    if (!sensorsdisablereq) {
 800cf80:	4b72      	ldr	r3, [pc, #456]	@ (800d14c <AllDevicesReady+0x1ec>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2201      	movs	r2, #1
 800cf86:	4053      	eors	r3, r2
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d008      	beq.n	800cfa0 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800cf8e:	4a70      	ldr	r2, [pc, #448]	@ (800d150 <AllDevicesReady+0x1f0>)
 800cf90:	4b70      	ldr	r3, [pc, #448]	@ (800d154 <AllDevicesReady+0x1f4>)
 800cf92:	0019      	movs	r1, r3
 800cf94:	2003      	movs	r0, #3
 800cf96:	f006 f8fd 	bl	8013194 <CreateLine>
      sensorsdisablereq = true;
 800cf9a:	4b6c      	ldr	r3, [pc, #432]	@ (800d14c <AllDevicesReady+0x1ec>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800cfa0:	4b6d      	ldr	r3, [pc, #436]	@ (800d158 <AllDevicesReady+0x1f8>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b06      	cmp	r3, #6
 800cfa6:	d102      	bne.n	800cfae <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800cfa8:	4b6c      	ldr	r3, [pc, #432]	@ (800d15c <AllDevicesReady+0x1fc>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800cfae:	4b6c      	ldr	r3, [pc, #432]	@ (800d160 <AllDevicesReady+0x200>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2b05      	cmp	r3, #5
 800cfb4:	d006      	beq.n	800cfc4 <AllDevicesReady+0x64>
 800cfb6:	4b6b      	ldr	r3, [pc, #428]	@ (800d164 <AllDevicesReady+0x204>)
 800cfb8:	789b      	ldrb	r3, [r3, #2]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4053      	eors	r3, r2
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800cfc4:	4b65      	ldr	r3, [pc, #404]	@ (800d15c <AllDevicesReady+0x1fc>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800cfca:	4b67      	ldr	r3, [pc, #412]	@ (800d168 <AllDevicesReady+0x208>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b08      	cmp	r3, #8
 800cfd0:	d006      	beq.n	800cfe0 <AllDevicesReady+0x80>
 800cfd2:	4b64      	ldr	r3, [pc, #400]	@ (800d164 <AllDevicesReady+0x204>)
 800cfd4:	791b      	ldrb	r3, [r3, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	4053      	eors	r3, r2
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800cfe0:	4b5e      	ldr	r3, [pc, #376]	@ (800d15c <AllDevicesReady+0x1fc>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800cfe6:	4b61      	ldr	r3, [pc, #388]	@ (800d16c <AllDevicesReady+0x20c>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b08      	cmp	r3, #8
 800cfec:	d006      	beq.n	800cffc <AllDevicesReady+0x9c>
 800cfee:	4b5d      	ldr	r3, [pc, #372]	@ (800d164 <AllDevicesReady+0x204>)
 800cff0:	78db      	ldrb	r3, [r3, #3]
 800cff2:	2201      	movs	r2, #1
 800cff4:	4053      	eors	r3, r2
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800cffc:	4b57      	ldr	r3, [pc, #348]	@ (800d15c <AllDevicesReady+0x1fc>)
 800cffe:	2200      	movs	r2, #0
 800d000:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800d002:	4b5b      	ldr	r3, [pc, #364]	@ (800d170 <AllDevicesReady+0x210>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b07      	cmp	r3, #7
 800d008:	d006      	beq.n	800d018 <AllDevicesReady+0xb8>
 800d00a:	4b56      	ldr	r3, [pc, #344]	@ (800d164 <AllDevicesReady+0x204>)
 800d00c:	7a1b      	ldrb	r3, [r3, #8]
 800d00e:	2201      	movs	r2, #1
 800d010:	4053      	eors	r3, r2
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800d018:	4b50      	ldr	r3, [pc, #320]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800d01e:	4b55      	ldr	r3, [pc, #340]	@ (800d174 <AllDevicesReady+0x214>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d003      	beq.n	800d02e <AllDevicesReady+0xce>
 800d026:	4b53      	ldr	r3, [pc, #332]	@ (800d174 <AllDevicesReady+0x214>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	d102      	bne.n	800d034 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800d02e:	4b4b      	ldr	r3, [pc, #300]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d030:	2200      	movs	r2, #0
 800d032:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800d034:	4b50      	ldr	r3, [pc, #320]	@ (800d178 <AllDevicesReady+0x218>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b03      	cmp	r3, #3
 800d03a:	d102      	bne.n	800d042 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800d03c:	4b47      	ldr	r3, [pc, #284]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d03e:	2200      	movs	r2, #0
 800d040:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800d042:	4b4e      	ldr	r3, [pc, #312]	@ (800d17c <AllDevicesReady+0x21c>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	2b09      	cmp	r3, #9
 800d048:	d003      	beq.n	800d052 <AllDevicesReady+0xf2>
 800d04a:	4b4c      	ldr	r3, [pc, #304]	@ (800d17c <AllDevicesReady+0x21c>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d170      	bne.n	800d134 <AllDevicesReady+0x1d4>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d052:	4b42      	ldr	r3, [pc, #264]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d054:	781a      	ldrb	r2, [r3, #0]
 800d056:	4b41      	ldr	r3, [pc, #260]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d058:	785b      	ldrb	r3, [r3, #1]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b3f      	ldr	r3, [pc, #252]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d060:	791b      	ldrb	r3, [r3, #4]
 800d062:	4313      	orrs	r3, r2
 800d064:	b2da      	uxtb	r2, r3
 800d066:	4b3d      	ldr	r3, [pc, #244]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d068:	795b      	ldrb	r3, [r3, #5]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d06e:	4b3b      	ldr	r3, [pc, #236]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d070:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d072:	4313      	orrs	r3, r2
 800d074:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d076:	4b39      	ldr	r3, [pc, #228]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d078:	789b      	ldrb	r3, [r3, #2]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	4b37      	ldr	r3, [pc, #220]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d080:	78db      	ldrb	r3, [r3, #3]
 800d082:	4313      	orrs	r3, r2
 800d084:	b2db      	uxtb	r3, r3
 800d086:	1e5a      	subs	r2, r3, #1
 800d088:	4193      	sbcs	r3, r2
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2201      	movs	r2, #1
 800d08e:	4053      	eors	r3, r2
 800d090:	b2db      	uxtb	r3, r3
 800d092:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d094:	1dfb      	adds	r3, r7, #7
 800d096:	701a      	strb	r2, [r3, #0]
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	2101      	movs	r1, #1
 800d09c:	400a      	ands	r2, r1
 800d09e:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800d0a0:	1dfb      	adds	r3, r7, #7
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4053      	eors	r3, r2
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d031      	beq.n	800d112 <AllDevicesReady+0x1b2>
 800d0ae:	4b34      	ldr	r3, [pc, #208]	@ (800d180 <AllDevicesReady+0x220>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	1dfa      	adds	r2, r7, #7
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d02b      	beq.n	800d112 <AllDevicesReady+0x1b2>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d0ba:	4b28      	ldr	r3, [pc, #160]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	469b      	mov	fp, r3
 800d0c0:	4b26      	ldr	r3, [pc, #152]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0c2:	791b      	ldrb	r3, [r3, #4]
 800d0c4:	001c      	movs	r4, r3
 800d0c6:	4b25      	ldr	r3, [pc, #148]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0c8:	795b      	ldrb	r3, [r3, #5]
 800d0ca:	001d      	movs	r5, r3
 800d0cc:	4b23      	ldr	r3, [pc, #140]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0ce:	799b      	ldrb	r3, [r3, #6]
 800d0d0:	001e      	movs	r6, r3
 800d0d2:	4b22      	ldr	r3, [pc, #136]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0d4:	785b      	ldrb	r3, [r3, #1]
 800d0d6:	4698      	mov	r8, r3
 800d0d8:	4b20      	ldr	r3, [pc, #128]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0da:	789b      	ldrb	r3, [r3, #2]
 800d0dc:	4699      	mov	r9, r3
 800d0de:	4b1f      	ldr	r3, [pc, #124]	@ (800d15c <AllDevicesReady+0x1fc>)
 800d0e0:	78db      	ldrb	r3, [r3, #3]
 800d0e2:	469a      	mov	sl, r3
 800d0e4:	f000 f8e4 	bl	800d2b0 <getSensorLock>
 800d0e8:	0003      	movs	r3, r0
 800d0ea:	4a26      	ldr	r2, [pc, #152]	@ (800d184 <AllDevicesReady+0x224>)
 800d0ec:	4919      	ldr	r1, [pc, #100]	@ (800d154 <AllDevicesReady+0x1f4>)
 800d0ee:	9306      	str	r3, [sp, #24]
 800d0f0:	4653      	mov	r3, sl
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	4643      	mov	r3, r8
 800d0fa:	9303      	str	r3, [sp, #12]
 800d0fc:	9602      	str	r6, [sp, #8]
 800d0fe:	9501      	str	r5, [sp, #4]
 800d100:	9400      	str	r4, [sp, #0]
 800d102:	465b      	mov	r3, fp
 800d104:	2003      	movs	r0, #3
 800d106:	f006 f845 	bl	8013194 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800d10a:	4b1d      	ldr	r3, [pc, #116]	@ (800d180 <AllDevicesReady+0x220>)
 800d10c:	1dfa      	adds	r2, r7, #7
 800d10e:	7812      	ldrb	r2, [r2, #0]
 800d110:	701a      	strb	r2, [r3, #0]
      }
      if (status) {
 800d112:	1dfb      	adds	r3, r7, #7
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d009      	beq.n	800d12e <AllDevicesReady+0x1ce>
        Debug("All sensors in wait");
 800d11a:	4a1b      	ldr	r2, [pc, #108]	@ (800d188 <AllDevicesReady+0x228>)
 800d11c:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <AllDevicesReady+0x1f4>)
 800d11e:	0019      	movs	r1, r3
 800d120:	2003      	movs	r0, #3
 800d122:	f006 f837 	bl	8013194 <CreateLine>
        prevstatus = status;
 800d126:	4b16      	ldr	r3, [pc, #88]	@ (800d180 <AllDevicesReady+0x220>)
 800d128:	1dfa      	adds	r2, r7, #7
 800d12a:	7812      	ldrb	r2, [r2, #0]
 800d12c:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800d12e:	1dfb      	adds	r3, r7, #7
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	e000      	b.n	800d136 <AllDevicesReady+0x1d6>
    }
  }
  return false;
 800d134:	2300      	movs	r3, #0
}
 800d136:	0018      	movs	r0, r3
 800d138:	46bd      	mov	sp, r7
 800d13a:	b003      	add	sp, #12
 800d13c:	bcf0      	pop	{r4, r5, r6, r7}
 800d13e:	46bb      	mov	fp, r7
 800d140:	46b2      	mov	sl, r6
 800d142:	46a9      	mov	r9, r5
 800d144:	46a0      	mov	r8, r4
 800d146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d148:	20000e10 	.word	0x20000e10
 800d14c:	20000e2f 	.word	0x20000e2f
 800d150:	0802c7c4 	.word	0x0802c7c4
 800d154:	0802c3dc 	.word	0x0802c3dc
 800d158:	20000e2b 	.word	0x20000e2b
 800d15c:	20000e18 	.word	0x20000e18
 800d160:	20000e2c 	.word	0x20000e2c
 800d164:	20000e20 	.word	0x20000e20
 800d168:	20000e2d 	.word	0x20000e2d
 800d16c:	20000e2e 	.word	0x20000e2e
 800d170:	20000e2a 	.word	0x20000e2a
 800d174:	2000009e 	.word	0x2000009e
 800d178:	20000dfc 	.word	0x20000dfc
 800d17c:	20000dfd 	.word	0x20000dfd
 800d180:	2000009c 	.word	0x2000009c
 800d184:	0802c7e4 	.word	0x0802c7e4
 800d188:	0802c848 	.word	0x0802c848

0800d18c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d18c:	b580      	push	{r7, lr}
 800d18e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d190:	4b23      	ldr	r3, [pc, #140]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d198:	4b22      	ldr	r3, [pc, #136]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800d19e:	4b20      	ldr	r3, [pc, #128]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1a0:	789b      	ldrb	r3, [r3, #2]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800d1a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800d1ac:	4b1c      	ldr	r3, [pc, #112]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1ae:	791b      	ldrb	r3, [r3, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800d1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800d1ba:	4b19      	ldr	r3, [pc, #100]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1bc:	78db      	ldrb	r3, [r3, #3]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d002      	beq.n	800d1c8 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800d1c2:	4b18      	ldr	r3, [pc, #96]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d1c8:	4b15      	ldr	r3, [pc, #84]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1ca:	785b      	ldrb	r3, [r3, #1]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d006      	beq.n	800d1de <EnabledConnectedDevices+0x52>
 800d1d0:	4b13      	ldr	r3, [pc, #76]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1d2:	7a1b      	ldrb	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800d1d8:	4b12      	ldr	r3, [pc, #72]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1da:	2201      	movs	r2, #1
 800d1dc:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d1de:	4b10      	ldr	r3, [pc, #64]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1e0:	795b      	ldrb	r3, [r3, #5]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d002      	beq.n	800d1ec <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800d1ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d220 <EnabledConnectedDevices+0x94>)
 800d1ee:	799b      	ldrb	r3, [r3, #6]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d224 <EnabledConnectedDevices+0x98>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800d1fa:	f006 fd0b 	bl	8013c14 <HAL_GetTick>
 800d1fe:	0003      	movs	r3, r0
 800d200:	4a09      	ldr	r2, [pc, #36]	@ (800d228 <EnabledConnectedDevices+0x9c>)
 800d202:	189a      	adds	r2, r3, r2
 800d204:	4b09      	ldr	r3, [pc, #36]	@ (800d22c <EnabledConnectedDevices+0xa0>)
 800d206:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800d208:	4b09      	ldr	r3, [pc, #36]	@ (800d230 <EnabledConnectedDevices+0xa4>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800d20e:	4a09      	ldr	r2, [pc, #36]	@ (800d234 <EnabledConnectedDevices+0xa8>)
 800d210:	4b09      	ldr	r3, [pc, #36]	@ (800d238 <EnabledConnectedDevices+0xac>)
 800d212:	0019      	movs	r1, r3
 800d214:	2003      	movs	r0, #3
 800d216:	f005 ffbd 	bl	8013194 <CreateLine>
}
 800d21a:	46c0      	nop			@ (mov r8, r8)
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20000e20 	.word	0x20000e20
 800d224:	20000e18 	.word	0x20000e18
 800d228:	00124f80 	.word	0x00124f80
 800d22c:	20000e10 	.word	0x20000e10
 800d230:	20000e2f 	.word	0x20000e2f
 800d234:	0802c85c 	.word	0x0802c85c
 800d238:	0802c3dc 	.word	0x0802c3dc

0800d23c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800d240:	4b0e      	ldr	r3, [pc, #56]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d242:	2200      	movs	r2, #0
 800d244:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800d246:	4b0d      	ldr	r3, [pc, #52]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d248:	2200      	movs	r2, #0
 800d24a:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800d24c:	4b0b      	ldr	r3, [pc, #44]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d24e:	2200      	movs	r2, #0
 800d250:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800d252:	4b0a      	ldr	r3, [pc, #40]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d254:	2200      	movs	r2, #0
 800d256:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800d258:	4b08      	ldr	r3, [pc, #32]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800d25e:	4b07      	ldr	r3, [pc, #28]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d260:	2200      	movs	r2, #0
 800d262:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800d264:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <DisableConnectedDevices+0x40>)
 800d266:	2200      	movs	r2, #0
 800d268:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800d26a:	4a05      	ldr	r2, [pc, #20]	@ (800d280 <DisableConnectedDevices+0x44>)
 800d26c:	4b05      	ldr	r3, [pc, #20]	@ (800d284 <DisableConnectedDevices+0x48>)
 800d26e:	0019      	movs	r1, r3
 800d270:	2003      	movs	r0, #3
 800d272:	f005 ff8f 	bl	8013194 <CreateLine>
}
 800d276:	46c0      	nop			@ (mov r8, r8)
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20000e18 	.word	0x20000e18
 800d280:	0802c86c 	.word	0x0802c86c
 800d284:	0802c3dc 	.word	0x0802c3dc

0800d288 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	0002      	movs	r2, r0
 800d290:	1dfb      	adds	r3, r7, #7
 800d292:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800d294:	4b05      	ldr	r3, [pc, #20]	@ (800d2ac <setSensorLock+0x24>)
 800d296:	1dfa      	adds	r2, r7, #7
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800d29c:	200a      	movs	r0, #10
 800d29e:	f006 fcc3 	bl	8013c28 <HAL_Delay>
}
 800d2a2:	46c0      	nop			@ (mov r8, r8)
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b002      	add	sp, #8
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	46c0      	nop			@ (mov r8, r8)
 800d2ac:	20000e29 	.word	0x20000e29

0800d2b0 <getSensorLock>:

uint8_t getSensorLock() {
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800d2b4:	4b02      	ldr	r3, [pc, #8]	@ (800d2c0 <getSensorLock+0x10>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
}
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	46c0      	nop			@ (mov r8, r8)
 800d2c0:	20000e29 	.word	0x20000e29

0800d2c4 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <UpkeepI2Csensors+0x70>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d005      	beq.n	800d2dc <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800d2d0:	f006 fb1e 	bl	8013910 <HIDS_Upkeep>
 800d2d4:	0003      	movs	r3, r0
 800d2d6:	001a      	movs	r2, r3
 800d2d8:	4b17      	ldr	r3, [pc, #92]	@ (800d338 <UpkeepI2Csensors+0x74>)
 800d2da:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800d2dc:	4b15      	ldr	r3, [pc, #84]	@ (800d334 <UpkeepI2Csensors+0x70>)
 800d2de:	785b      	ldrb	r3, [r3, #1]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d005      	beq.n	800d2f0 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800d2e4:	f003 fb7c 	bl	80109e0 <SGP_Upkeep>
 800d2e8:	0003      	movs	r3, r0
 800d2ea:	001a      	movs	r2, r3
 800d2ec:	4b13      	ldr	r3, [pc, #76]	@ (800d33c <UpkeepI2Csensors+0x78>)
 800d2ee:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800d2f0:	4b10      	ldr	r3, [pc, #64]	@ (800d334 <UpkeepI2Csensors+0x70>)
 800d2f2:	791b      	ldrb	r3, [r3, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d005      	beq.n	800d304 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800d2f8:	f7fd fa66 	bl	800a7c8 <AHT_Upkeep>
 800d2fc:	0003      	movs	r3, r0
 800d2fe:	001a      	movs	r2, r3
 800d300:	4b0f      	ldr	r3, [pc, #60]	@ (800d340 <UpkeepI2Csensors+0x7c>)
 800d302:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800d304:	4b0b      	ldr	r3, [pc, #44]	@ (800d334 <UpkeepI2Csensors+0x70>)
 800d306:	795b      	ldrb	r3, [r3, #5]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800d30c:	f7fd ffe6 	bl	800b2dc <BMP_Upkeep>
 800d310:	0003      	movs	r3, r0
 800d312:	001a      	movs	r2, r3
 800d314:	4b0b      	ldr	r3, [pc, #44]	@ (800d344 <UpkeepI2Csensors+0x80>)
 800d316:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800d318:	4b06      	ldr	r3, [pc, #24]	@ (800d334 <UpkeepI2Csensors+0x70>)
 800d31a:	799b      	ldrb	r3, [r3, #6]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d005      	beq.n	800d32c <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800d320:	f7f7 f89a 	bl	8004458 <ENS_Upkeep>
 800d324:	0003      	movs	r3, r0
 800d326:	001a      	movs	r2, r3
 800d328:	4b07      	ldr	r3, [pc, #28]	@ (800d348 <UpkeepI2Csensors+0x84>)
 800d32a:	701a      	strb	r2, [r3, #0]
  }
}
 800d32c:	46c0      	nop			@ (mov r8, r8)
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	46c0      	nop			@ (mov r8, r8)
 800d334:	20000e18 	.word	0x20000e18
 800d338:	20000e2b 	.word	0x20000e2b
 800d33c:	20000e2a 	.word	0x20000e2a
 800d340:	20000e2c 	.word	0x20000e2c
 800d344:	20000e2d 	.word	0x20000e2d
 800d348:	20000e2e 	.word	0x20000e2e

0800d34c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800d350:	4b02      	ldr	r3, [pc, #8]	@ (800d35c <ResetdBAmax+0x10>)
 800d352:	2200      	movs	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
}
 800d356:	46c0      	nop			@ (mov r8, r8)
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	20000e74 	.word	0x20000e74

0800d360 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800d368:	f006 fc54 	bl	8013c14 <HAL_GetTick>
 800d36c:	0002      	movs	r2, r0
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	18d2      	adds	r2, r2, r3
 800d372:	4b03      	ldr	r3, [pc, #12]	@ (800d380 <setMICTimeStamp+0x20>)
 800d374:	601a      	str	r2, [r3, #0]
}
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	b002      	add	sp, #8
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	46c0      	nop			@ (mov r8, r8)
 800d380:	20000e7c 	.word	0x20000e7c

0800d384 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  counter = 0;
 800d388:	4b05      	ldr	r3, [pc, #20]	@ (800d3a0 <ResetDBACalculator+0x1c>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800d38e:	4b05      	ldr	r3, [pc, #20]	@ (800d3a4 <ResetDBACalculator+0x20>)
 800d390:	2201      	movs	r2, #1
 800d392:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800d394:	4b04      	ldr	r3, [pc, #16]	@ (800d3a8 <ResetDBACalculator+0x24>)
 800d396:	2200      	movs	r2, #0
 800d398:	701a      	strb	r2, [r3, #0]
}
 800d39a:	46c0      	nop			@ (mov r8, r8)
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20000e78 	.word	0x20000e78
 800d3a4:	2000009d 	.word	0x2000009d
 800d3a8:	20000e79 	.word	0x20000e79

0800d3ac <MIC_Print>:

void MIC_Print(void) {
 800d3ac:	b5b0      	push	{r4, r5, r7, lr}
 800d3ae:	b08a      	sub	sp, #40	@ 0x28
 800d3b0:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800d3b2:	4b9f      	ldr	r3, [pc, #636]	@ (800d630 <MIC_Print+0x284>)
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	4b9f      	ldr	r3, [pc, #636]	@ (800d634 <MIC_Print+0x288>)
 800d3b8:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800d3ba:	4b9f      	ldr	r3, [pc, #636]	@ (800d638 <MIC_Print+0x28c>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	001a      	movs	r2, r3
 800d3c0:	4b9c      	ldr	r3, [pc, #624]	@ (800d634 <MIC_Print+0x288>)
 800d3c2:	6819      	ldr	r1, [r3, #0]
 800d3c4:	4b9d      	ldr	r3, [pc, #628]	@ (800d63c <MIC_Print+0x290>)
 800d3c6:	0092      	lsls	r2, r2, #2
 800d3c8:	50d1      	str	r1, [r2, r3]
  counter++;
 800d3ca:	4b9b      	ldr	r3, [pc, #620]	@ (800d638 <MIC_Print+0x28c>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4b99      	ldr	r3, [pc, #612]	@ (800d638 <MIC_Print+0x28c>)
 800d3d4:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800d3d6:	4b98      	ldr	r3, [pc, #608]	@ (800d638 <MIC_Print+0x28c>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b09      	cmp	r3, #9
 800d3dc:	d80b      	bhi.n	800d3f6 <MIC_Print+0x4a>
 800d3de:	4b98      	ldr	r3, [pc, #608]	@ (800d640 <MIC_Print+0x294>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	4053      	eors	r3, r2
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <MIC_Print+0x4a>
    denominator = counter;
 800d3ec:	4b92      	ldr	r3, [pc, #584]	@ (800d638 <MIC_Print+0x28c>)
 800d3ee:	781a      	ldrb	r2, [r3, #0]
 800d3f0:	4b94      	ldr	r3, [pc, #592]	@ (800d644 <MIC_Print+0x298>)
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e005      	b.n	800d402 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800d3f6:	4b93      	ldr	r3, [pc, #588]	@ (800d644 <MIC_Print+0x298>)
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800d3fc:	4b90      	ldr	r3, [pc, #576]	@ (800d640 <MIC_Print+0x294>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800d402:	4b91      	ldr	r3, [pc, #580]	@ (800d648 <MIC_Print+0x29c>)
 800d404:	2200      	movs	r2, #0
 800d406:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800d408:	230f      	movs	r3, #15
 800d40a:	18fb      	adds	r3, r7, r3
 800d40c:	2200      	movs	r2, #0
 800d40e:	701a      	strb	r2, [r3, #0]
 800d410:	e042      	b.n	800d498 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800d412:	240f      	movs	r4, #15
 800d414:	193b      	adds	r3, r7, r4
 800d416:	781a      	ldrb	r2, [r3, #0]
 800d418:	4b88      	ldr	r3, [pc, #544]	@ (800d63c <MIC_Print+0x290>)
 800d41a:	0092      	lsls	r2, r2, #2
 800d41c:	58d2      	ldr	r2, [r2, r3]
 800d41e:	4b8a      	ldr	r3, [pc, #552]	@ (800d648 <MIC_Print+0x29c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	1c19      	adds	r1, r3, #0
 800d424:	1c10      	adds	r0, r2, #0
 800d426:	f7f3 fa4b 	bl	80008c0 <__aeabi_fadd>
 800d42a:	1c03      	adds	r3, r0, #0
 800d42c:	1c1a      	adds	r2, r3, #0
 800d42e:	4b86      	ldr	r3, [pc, #536]	@ (800d648 <MIC_Print+0x29c>)
 800d430:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800d432:	193b      	adds	r3, r7, r4
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	4b81      	ldr	r3, [pc, #516]	@ (800d63c <MIC_Print+0x290>)
 800d438:	0092      	lsls	r2, r2, #2
 800d43a:	58d2      	ldr	r2, [r2, r3]
 800d43c:	4b83      	ldr	r3, [pc, #524]	@ (800d64c <MIC_Print+0x2a0>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	1c19      	adds	r1, r3, #0
 800d442:	1c10      	adds	r0, r2, #0
 800d444:	f7f3 f888 	bl	8000558 <__aeabi_fcmpgt>
 800d448:	1e03      	subs	r3, r0, #0
 800d44a:	d006      	beq.n	800d45a <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800d44c:	193b      	adds	r3, r7, r4
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	4b7a      	ldr	r3, [pc, #488]	@ (800d63c <MIC_Print+0x290>)
 800d452:	0092      	lsls	r2, r2, #2
 800d454:	58d2      	ldr	r2, [r2, r3]
 800d456:	4b7d      	ldr	r3, [pc, #500]	@ (800d64c <MIC_Print+0x2a0>)
 800d458:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800d45a:	4b7b      	ldr	r3, [pc, #492]	@ (800d648 <MIC_Print+0x29c>)
 800d45c:	681c      	ldr	r4, [r3, #0]
 800d45e:	4b79      	ldr	r3, [pc, #484]	@ (800d644 <MIC_Print+0x298>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	0018      	movs	r0, r3
 800d464:	f7f4 fa30 	bl	80018c8 <__aeabi_ui2f>
 800d468:	1c03      	adds	r3, r0, #0
 800d46a:	1c19      	adds	r1, r3, #0
 800d46c:	1c20      	adds	r0, r4, #0
 800d46e:	f7f3 fc19 	bl	8000ca4 <__aeabi_fdiv>
 800d472:	1c03      	adds	r3, r0, #0
 800d474:	1c1a      	adds	r2, r3, #0
 800d476:	4b76      	ldr	r3, [pc, #472]	@ (800d650 <MIC_Print+0x2a4>)
 800d478:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800d47a:	4b6e      	ldr	r3, [pc, #440]	@ (800d634 <MIC_Print+0x288>)
 800d47c:	6818      	ldr	r0, [r3, #0]
 800d47e:	4b73      	ldr	r3, [pc, #460]	@ (800d64c <MIC_Print+0x2a0>)
 800d480:	6819      	ldr	r1, [r3, #0]
 800d482:	4b73      	ldr	r3, [pc, #460]	@ (800d650 <MIC_Print+0x2a4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	1c1a      	adds	r2, r3, #0
 800d488:	f7f7 fb5c 	bl	8004b44 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800d48c:	210f      	movs	r1, #15
 800d48e:	187b      	adds	r3, r7, r1
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	187b      	adds	r3, r7, r1
 800d494:	3201      	adds	r2, #1
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	4b6a      	ldr	r3, [pc, #424]	@ (800d644 <MIC_Print+0x298>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	220f      	movs	r2, #15
 800d49e:	18ba      	adds	r2, r7, r2
 800d4a0:	7812      	ldrb	r2, [r2, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3b5      	bcc.n	800d412 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800d4a6:	4b63      	ldr	r3, [pc, #396]	@ (800d634 <MIC_Print+0x288>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	1c18      	adds	r0, r3, #0
 800d4ac:	f7f6 f9f2 	bl	8003894 <__aeabi_f2d>
 800d4b0:	6038      	str	r0, [r7, #0]
 800d4b2:	6079      	str	r1, [r7, #4]
 800d4b4:	4b65      	ldr	r3, [pc, #404]	@ (800d64c <MIC_Print+0x2a0>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	1c18      	adds	r0, r3, #0
 800d4ba:	f7f6 f9eb 	bl	8003894 <__aeabi_f2d>
 800d4be:	0004      	movs	r4, r0
 800d4c0:	000d      	movs	r5, r1
 800d4c2:	4b63      	ldr	r3, [pc, #396]	@ (800d650 <MIC_Print+0x2a4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	1c18      	adds	r0, r3, #0
 800d4c8:	f7f6 f9e4 	bl	8003894 <__aeabi_f2d>
 800d4cc:	0002      	movs	r2, r0
 800d4ce:	000b      	movs	r3, r1
 800d4d0:	4960      	ldr	r1, [pc, #384]	@ (800d654 <MIC_Print+0x2a8>)
 800d4d2:	9204      	str	r2, [sp, #16]
 800d4d4:	9305      	str	r3, [sp, #20]
 800d4d6:	9402      	str	r4, [sp, #8]
 800d4d8:	9503      	str	r5, [sp, #12]
 800d4da:	4b5f      	ldr	r3, [pc, #380]	@ (800d658 <MIC_Print+0x2ac>)
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	0008      	movs	r0, r1
 800d4e4:	f017 ff70 	bl	80253c8 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d4e8:	4b53      	ldr	r3, [pc, #332]	@ (800d638 <MIC_Print+0x28c>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b0a      	cmp	r3, #10
 800d4ee:	d902      	bls.n	800d4f6 <MIC_Print+0x14a>
    counter = 0;
 800d4f0:	4b51      	ldr	r3, [pc, #324]	@ (800d638 <MIC_Print+0x28c>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d4f6:	4b4f      	ldr	r3, [pc, #316]	@ (800d634 <MIC_Print+0x288>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4958      	ldr	r1, [pc, #352]	@ (800d65c <MIC_Print+0x2b0>)
 800d4fc:	1c18      	adds	r0, r3, #0
 800d4fe:	f7f3 f835 	bl	800056c <__aeabi_fcmpge>
 800d502:	1e03      	subs	r3, r0, #0
 800d504:	d004      	beq.n	800d510 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d506:	2201      	movs	r2, #1
 800d508:	2101      	movs	r1, #1
 800d50a:	2001      	movs	r0, #1
 800d50c:	f004 fb94 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d510:	4b48      	ldr	r3, [pc, #288]	@ (800d634 <MIC_Print+0x288>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4952      	ldr	r1, [pc, #328]	@ (800d660 <MIC_Print+0x2b4>)
 800d516:	1c18      	adds	r0, r3, #0
 800d518:	f7f3 f828 	bl	800056c <__aeabi_fcmpge>
 800d51c:	1e03      	subs	r3, r0, #0
 800d51e:	d00c      	beq.n	800d53a <MIC_Print+0x18e>
 800d520:	4b44      	ldr	r3, [pc, #272]	@ (800d634 <MIC_Print+0x288>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	494d      	ldr	r1, [pc, #308]	@ (800d65c <MIC_Print+0x2b0>)
 800d526:	1c18      	adds	r0, r3, #0
 800d528:	f7f3 f802 	bl	8000530 <__aeabi_fcmplt>
 800d52c:	1e03      	subs	r3, r0, #0
 800d52e:	d004      	beq.n	800d53a <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d530:	2200      	movs	r2, #0
 800d532:	2100      	movs	r1, #0
 800d534:	2001      	movs	r0, #1
 800d536:	f004 fb7f 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d53a:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <MIC_Print+0x288>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4949      	ldr	r1, [pc, #292]	@ (800d664 <MIC_Print+0x2b8>)
 800d540:	1c18      	adds	r0, r3, #0
 800d542:	f7f3 f813 	bl	800056c <__aeabi_fcmpge>
 800d546:	1e03      	subs	r3, r0, #0
 800d548:	d00c      	beq.n	800d564 <MIC_Print+0x1b8>
 800d54a:	4b3a      	ldr	r3, [pc, #232]	@ (800d634 <MIC_Print+0x288>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4944      	ldr	r1, [pc, #272]	@ (800d660 <MIC_Print+0x2b4>)
 800d550:	1c18      	adds	r0, r3, #0
 800d552:	f7f2 ffed 	bl	8000530 <__aeabi_fcmplt>
 800d556:	1e03      	subs	r3, r0, #0
 800d558:	d004      	beq.n	800d564 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d55a:	2200      	movs	r2, #0
 800d55c:	2101      	movs	r1, #1
 800d55e:	2001      	movs	r0, #1
 800d560:	f004 fb6a 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d564:	4b33      	ldr	r3, [pc, #204]	@ (800d634 <MIC_Print+0x288>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	493f      	ldr	r1, [pc, #252]	@ (800d668 <MIC_Print+0x2bc>)
 800d56a:	1c18      	adds	r0, r3, #0
 800d56c:	f7f2 fffe 	bl	800056c <__aeabi_fcmpge>
 800d570:	1e03      	subs	r3, r0, #0
 800d572:	d00c      	beq.n	800d58e <MIC_Print+0x1e2>
 800d574:	4b2f      	ldr	r3, [pc, #188]	@ (800d634 <MIC_Print+0x288>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	493a      	ldr	r1, [pc, #232]	@ (800d664 <MIC_Print+0x2b8>)
 800d57a:	1c18      	adds	r0, r3, #0
 800d57c:	f7f2 ffd8 	bl	8000530 <__aeabi_fcmplt>
 800d580:	1e03      	subs	r3, r0, #0
 800d582:	d004      	beq.n	800d58e <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d584:	2200      	movs	r2, #0
 800d586:	2101      	movs	r1, #1
 800d588:	2000      	movs	r0, #0
 800d58a:	f004 fb55 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d58e:	4b29      	ldr	r3, [pc, #164]	@ (800d634 <MIC_Print+0x288>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4936      	ldr	r1, [pc, #216]	@ (800d66c <MIC_Print+0x2c0>)
 800d594:	1c18      	adds	r0, r3, #0
 800d596:	f7f2 ffe9 	bl	800056c <__aeabi_fcmpge>
 800d59a:	1e03      	subs	r3, r0, #0
 800d59c:	d00c      	beq.n	800d5b8 <MIC_Print+0x20c>
 800d59e:	4b25      	ldr	r3, [pc, #148]	@ (800d634 <MIC_Print+0x288>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4931      	ldr	r1, [pc, #196]	@ (800d668 <MIC_Print+0x2bc>)
 800d5a4:	1c18      	adds	r0, r3, #0
 800d5a6:	f7f2 ffc3 	bl	8000530 <__aeabi_fcmplt>
 800d5aa:	1e03      	subs	r3, r0, #0
 800d5ac:	d004      	beq.n	800d5b8 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f004 fb40 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d634 <MIC_Print+0x288>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	492c      	ldr	r1, [pc, #176]	@ (800d670 <MIC_Print+0x2c4>)
 800d5be:	1c18      	adds	r0, r3, #0
 800d5c0:	f7f2 ffd4 	bl	800056c <__aeabi_fcmpge>
 800d5c4:	1e03      	subs	r3, r0, #0
 800d5c6:	d00c      	beq.n	800d5e2 <MIC_Print+0x236>
 800d5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d634 <MIC_Print+0x288>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4927      	ldr	r1, [pc, #156]	@ (800d66c <MIC_Print+0x2c0>)
 800d5ce:	1c18      	adds	r0, r3, #0
 800d5d0:	f7f2 ffae 	bl	8000530 <__aeabi_fcmplt>
 800d5d4:	1e03      	subs	r3, r0, #0
 800d5d6:	d004      	beq.n	800d5e2 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d5d8:	2201      	movs	r2, #1
 800d5da:	2100      	movs	r1, #0
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f004 fb2b 	bl	8011c38 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d5e2:	4b14      	ldr	r3, [pc, #80]	@ (800d634 <MIC_Print+0x288>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4923      	ldr	r1, [pc, #140]	@ (800d674 <MIC_Print+0x2c8>)
 800d5e8:	1c18      	adds	r0, r3, #0
 800d5ea:	f7f2 ffbf 	bl	800056c <__aeabi_fcmpge>
 800d5ee:	1e03      	subs	r3, r0, #0
 800d5f0:	d00c      	beq.n	800d60c <MIC_Print+0x260>
 800d5f2:	4b10      	ldr	r3, [pc, #64]	@ (800d634 <MIC_Print+0x288>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	491e      	ldr	r1, [pc, #120]	@ (800d670 <MIC_Print+0x2c4>)
 800d5f8:	1c18      	adds	r0, r3, #0
 800d5fa:	f7f2 ff99 	bl	8000530 <__aeabi_fcmplt>
 800d5fe:	1e03      	subs	r3, r0, #0
 800d600:	d004      	beq.n	800d60c <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d602:	2201      	movs	r2, #1
 800d604:	2100      	movs	r1, #0
 800d606:	2001      	movs	r0, #1
 800d608:	f004 fb16 	bl	8011c38 <SetDBLED>
  }
  if(dBA < 35){//off
 800d60c:	4b09      	ldr	r3, [pc, #36]	@ (800d634 <MIC_Print+0x288>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4918      	ldr	r1, [pc, #96]	@ (800d674 <MIC_Print+0x2c8>)
 800d612:	1c18      	adds	r0, r3, #0
 800d614:	f7f2 ff8c 	bl	8000530 <__aeabi_fcmplt>
 800d618:	1e03      	subs	r3, r0, #0
 800d61a:	d100      	bne.n	800d61e <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d61c:	e004      	b.n	800d628 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d61e:	2200      	movs	r2, #0
 800d620:	2100      	movs	r1, #0
 800d622:	2000      	movs	r0, #0
 800d624:	f004 fb08 	bl	8011c38 <SetDBLED>
}
 800d628:	46c0      	nop			@ (mov r8, r8)
 800d62a:	46bd      	mov	sp, r7
 800d62c:	b004      	add	sp, #16
 800d62e:	bdb0      	pop	{r4, r5, r7, pc}
 800d630:	20000e70 	.word	0x20000e70
 800d634:	20000e3c 	.word	0x20000e3c
 800d638:	20000e78 	.word	0x20000e78
 800d63c:	20000e40 	.word	0x20000e40
 800d640:	20000e79 	.word	0x20000e79
 800d644:	2000009d 	.word	0x2000009d
 800d648:	20000e6c 	.word	0x20000e6c
 800d64c:	20000e74 	.word	0x20000e74
 800d650:	20000e68 	.word	0x20000e68
 800d654:	0802c880 	.word	0x0802c880
 800d658:	20000e30 	.word	0x20000e30
 800d65c:	42b40000 	.word	0x42b40000
 800d660:	42a00000 	.word	0x42a00000
 800d664:	428c0000 	.word	0x428c0000
 800d668:	42700000 	.word	0x42700000
 800d66c:	42480000 	.word	0x42480000
 800d670:	42200000 	.word	0x42200000
 800d674:	420c0000 	.word	0x420c0000

0800d678 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d67e:	4b11      	ldr	r3, [pc, #68]	@ (800d6c4 <MIC_TestMeasurementDone+0x4c>)
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	4a10      	ldr	r2, [pc, #64]	@ (800d6c8 <MIC_TestMeasurementDone+0x50>)
 800d686:	4911      	ldr	r1, [pc, #68]	@ (800d6cc <MIC_TestMeasurementDone+0x54>)
 800d688:	2002      	movs	r0, #2
 800d68a:	f005 fd83 	bl	8013194 <CreateLine>
  if(DataReady) {
 800d68e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c4 <MIC_TestMeasurementDone+0x4c>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d010      	beq.n	800d6ba <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d698:	1dfb      	adds	r3, r7, #7
 800d69a:	4a0d      	ldr	r2, [pc, #52]	@ (800d6d0 <MIC_TestMeasurementDone+0x58>)
 800d69c:	7812      	ldrb	r2, [r2, #0]
 800d69e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d0 <MIC_TestMeasurementDone+0x58>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	4a0b      	ldr	r2, [pc, #44]	@ (800d6d4 <MIC_TestMeasurementDone+0x5c>)
 800d6a8:	4908      	ldr	r1, [pc, #32]	@ (800d6cc <MIC_TestMeasurementDone+0x54>)
 800d6aa:	2002      	movs	r0, #2
 800d6ac:	f005 fd72 	bl	8013194 <CreateLine>
    ResetMICIndicator();
 800d6b0:	f004 fbb0 	bl	8011e14 <ResetMICIndicator>
    return Check;
 800d6b4:	1dfb      	adds	r3, r7, #7
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	e000      	b.n	800d6bc <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	0018      	movs	r0, r3
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	b002      	add	sp, #8
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20000fad 	.word	0x20000fad
 800d6c8:	0802c8c8 	.word	0x0802c8c8
 800d6cc:	0802c8f4 	.word	0x0802c8f4
 800d6d0:	20000fae 	.word	0x20000fae
 800d6d4:	0802c8f8 	.word	0x0802c8f8

0800d6d8 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d6de:	4b78      	ldr	r3, [pc, #480]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d100      	bne.n	800d6e8 <Mic_Upkeep+0x10>
 800d6e6:	e0b8      	b.n	800d85a <Mic_Upkeep+0x182>
 800d6e8:	dd00      	ble.n	800d6ec <Mic_Upkeep+0x14>
 800d6ea:	e0d3      	b.n	800d894 <Mic_Upkeep+0x1bc>
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d037      	beq.n	800d760 <Mic_Upkeep+0x88>
 800d6f0:	dd00      	ble.n	800d6f4 <Mic_Upkeep+0x1c>
 800d6f2:	e0cf      	b.n	800d894 <Mic_Upkeep+0x1bc>
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <Mic_Upkeep+0x26>
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d014      	beq.n	800d726 <Mic_Upkeep+0x4e>
 800d6fc:	e0ca      	b.n	800d894 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d6fe:	2001      	movs	r0, #1
 800d700:	f003 fb98 	bl	8010e34 <enableMicrophone>
 800d704:	0003      	movs	r3, r0
 800d706:	001a      	movs	r2, r3
 800d708:	2301      	movs	r3, #1
 800d70a:	4053      	eors	r3, r2
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d712:	4a6c      	ldr	r2, [pc, #432]	@ (800d8c4 <Mic_Upkeep+0x1ec>)
 800d714:	4b6c      	ldr	r3, [pc, #432]	@ (800d8c8 <Mic_Upkeep+0x1f0>)
 800d716:	217f      	movs	r1, #127	@ 0x7f
 800d718:	0018      	movs	r0, r3
 800d71a:	f005 fdf3 	bl	8013304 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d71e:	4b68      	ldr	r3, [pc, #416]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d720:	2201      	movs	r2, #1
 800d722:	701a      	strb	r2, [r3, #0]
    break;
 800d724:	e0c5      	b.n	800d8b2 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d726:	f003 fb61 	bl	8010dec <micSettlingComplete>
 800d72a:	1e03      	subs	r3, r0, #0
 800d72c:	d105      	bne.n	800d73a <Mic_Upkeep+0x62>
 800d72e:	4b67      	ldr	r3, [pc, #412]	@ (800d8cc <Mic_Upkeep+0x1f4>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	d100      	bne.n	800d73a <Mic_Upkeep+0x62>
 800d738:	e0b6      	b.n	800d8a8 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d73a:	f003 fbe5 	bl	8010f08 <startSPLcalculation>
 800d73e:	0003      	movs	r3, r0
 800d740:	001a      	movs	r2, r3
 800d742:	2301      	movs	r3, #1
 800d744:	4053      	eors	r3, r2
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d005      	beq.n	800d758 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d74c:	4a5d      	ldr	r2, [pc, #372]	@ (800d8c4 <Mic_Upkeep+0x1ec>)
 800d74e:	4b5e      	ldr	r3, [pc, #376]	@ (800d8c8 <Mic_Upkeep+0x1f0>)
 800d750:	2188      	movs	r1, #136	@ 0x88
 800d752:	0018      	movs	r0, r3
 800d754:	f005 fdd6 	bl	8013304 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d758:	4b59      	ldr	r3, [pc, #356]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d75a:	2202      	movs	r2, #2
 800d75c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d75e:	e0a3      	b.n	800d8a8 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d760:	4b5b      	ldr	r3, [pc, #364]	@ (800d8d0 <Mic_Upkeep+0x1f8>)
 800d762:	2201      	movs	r2, #1
 800d764:	2101      	movs	r1, #1
 800d766:	0018      	movs	r0, r3
 800d768:	f003 fa22 	bl	8010bb0 <getSoundData>
 800d76c:	1e03      	subs	r3, r0, #0
 800d76e:	d100      	bne.n	800d772 <Mic_Upkeep+0x9a>
 800d770:	e09c      	b.n	800d8ac <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d772:	f003 fb1b 	bl	8010dac <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d776:	4b56      	ldr	r3, [pc, #344]	@ (800d8d0 <Mic_Upkeep+0x1f8>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	001a      	movs	r2, r3
 800d77c:	4b54      	ldr	r3, [pc, #336]	@ (800d8d0 <Mic_Upkeep+0x1f8>)
 800d77e:	785b      	ldrb	r3, [r3, #1]
 800d780:	4954      	ldr	r1, [pc, #336]	@ (800d8d4 <Mic_Upkeep+0x1fc>)
 800d782:	0038      	movs	r0, r7
 800d784:	f017 fe90 	bl	80254a8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d788:	4b51      	ldr	r3, [pc, #324]	@ (800d8d0 <Mic_Upkeep+0x1f8>)
 800d78a:	89db      	ldrh	r3, [r3, #14]
 800d78c:	001a      	movs	r2, r3
 800d78e:	4b50      	ldr	r3, [pc, #320]	@ (800d8d0 <Mic_Upkeep+0x1f8>)
 800d790:	7c1b      	ldrb	r3, [r3, #16]
 800d792:	4951      	ldr	r1, [pc, #324]	@ (800d8d8 <Mic_Upkeep+0x200>)
 800d794:	4851      	ldr	r0, [pc, #324]	@ (800d8dc <Mic_Upkeep+0x204>)
 800d796:	f017 fe87 	bl	80254a8 <siprintf>
      dBValue = atof(dBbuffer);
 800d79a:	003b      	movs	r3, r7
 800d79c:	0018      	movs	r0, r3
 800d79e:	f016 fa29 	bl	8023bf4 <atof>
 800d7a2:	0002      	movs	r2, r0
 800d7a4:	000b      	movs	r3, r1
 800d7a6:	0010      	movs	r0, r2
 800d7a8:	0019      	movs	r1, r3
 800d7aa:	f7f6 f8bb 	bl	8003924 <__aeabi_d2f>
 800d7ae:	1c02      	adds	r2, r0, #0
 800d7b0:	4b4b      	ldr	r3, [pc, #300]	@ (800d8e0 <Mic_Upkeep+0x208>)
 800d7b2:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d7b4:	4b4a      	ldr	r3, [pc, #296]	@ (800d8e0 <Mic_Upkeep+0x208>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	494a      	ldr	r1, [pc, #296]	@ (800d8e4 <Mic_Upkeep+0x20c>)
 800d7ba:	1c18      	adds	r0, r3, #0
 800d7bc:	f7f3 fc40 	bl	8001040 <__aeabi_fmul>
 800d7c0:	1c03      	adds	r3, r0, #0
 800d7c2:	1c18      	adds	r0, r3, #0
 800d7c4:	f7f6 f866 	bl	8003894 <__aeabi_f2d>
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	4b47      	ldr	r3, [pc, #284]	@ (800d8e8 <Mic_Upkeep+0x210>)
 800d7cc:	f7f4 f8c2 	bl	8001954 <__aeabi_dadd>
 800d7d0:	0002      	movs	r2, r0
 800d7d2:	000b      	movs	r3, r1
 800d7d4:	0010      	movs	r0, r2
 800d7d6:	0019      	movs	r1, r3
 800d7d8:	f7f5 ffce 	bl	8003778 <__aeabi_d2iz>
 800d7dc:	0003      	movs	r3, r0
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f7f6 f806 	bl	80037f0 <__aeabi_i2d>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4b41      	ldr	r3, [pc, #260]	@ (800d8ec <Mic_Upkeep+0x214>)
 800d7e8:	f7f4 fc7a 	bl	80020e0 <__aeabi_ddiv>
 800d7ec:	0002      	movs	r2, r0
 800d7ee:	000b      	movs	r3, r1
 800d7f0:	0010      	movs	r0, r2
 800d7f2:	0019      	movs	r1, r3
 800d7f4:	f7f6 f896 	bl	8003924 <__aeabi_d2f>
 800d7f8:	1c02      	adds	r2, r0, #0
 800d7fa:	4b39      	ldr	r3, [pc, #228]	@ (800d8e0 <Mic_Upkeep+0x208>)
 800d7fc:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d7fe:	f7ff fdd5 	bl	800d3ac <MIC_Print>
      if (!startSPLcalculation()) {
 800d802:	f003 fb81 	bl	8010f08 <startSPLcalculation>
 800d806:	0003      	movs	r3, r0
 800d808:	001a      	movs	r2, r3
 800d80a:	2301      	movs	r3, #1
 800d80c:	4053      	eors	r3, r2
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d005      	beq.n	800d820 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d814:	4a2b      	ldr	r2, [pc, #172]	@ (800d8c4 <Mic_Upkeep+0x1ec>)
 800d816:	4b2c      	ldr	r3, [pc, #176]	@ (800d8c8 <Mic_Upkeep+0x1f0>)
 800d818:	2198      	movs	r1, #152	@ 0x98
 800d81a:	0018      	movs	r0, r3
 800d81c:	f005 fd72 	bl	8013304 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d820:	2000      	movs	r0, #0
 800d822:	f003 fb07 	bl	8010e34 <enableMicrophone>
 800d826:	0003      	movs	r3, r0
 800d828:	001a      	movs	r2, r3
 800d82a:	2301      	movs	r3, #1
 800d82c:	4053      	eors	r3, r2
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d834:	4a23      	ldr	r2, [pc, #140]	@ (800d8c4 <Mic_Upkeep+0x1ec>)
 800d836:	4b24      	ldr	r3, [pc, #144]	@ (800d8c8 <Mic_Upkeep+0x1f0>)
 800d838:	219b      	movs	r1, #155	@ 0x9b
 800d83a:	0018      	movs	r0, r3
 800d83c:	f005 fd62 	bl	8013304 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d840:	f006 f9e8 	bl	8013c14 <HAL_GetTick>
 800d844:	0003      	movs	r3, r0
 800d846:	4a2a      	ldr	r2, [pc, #168]	@ (800d8f0 <Mic_Upkeep+0x218>)
 800d848:	189a      	adds	r2, r3, r2
 800d84a:	4b2a      	ldr	r3, [pc, #168]	@ (800d8f4 <Mic_Upkeep+0x21c>)
 800d84c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d84e:	4b1c      	ldr	r3, [pc, #112]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d850:	2203      	movs	r2, #3
 800d852:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d854:	f004 fade 	bl	8011e14 <ResetMICIndicator>
    }
    break;
 800d858:	e028      	b.n	800d8ac <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d85a:	4b26      	ldr	r3, [pc, #152]	@ (800d8f4 <Mic_Upkeep+0x21c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	0018      	movs	r0, r3
 800d860:	f005 fc42 	bl	80130e8 <TimestampIsReached>
 800d864:	1e03      	subs	r3, r0, #0
 800d866:	d023      	beq.n	800d8b0 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d868:	2001      	movs	r0, #1
 800d86a:	f003 fae3 	bl	8010e34 <enableMicrophone>
 800d86e:	0003      	movs	r3, r0
 800d870:	001a      	movs	r2, r3
 800d872:	2301      	movs	r3, #1
 800d874:	4053      	eors	r3, r2
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d005      	beq.n	800d888 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d87c:	4a11      	ldr	r2, [pc, #68]	@ (800d8c4 <Mic_Upkeep+0x1ec>)
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <Mic_Upkeep+0x1f0>)
 800d880:	21a6      	movs	r1, #166	@ 0xa6
 800d882:	0018      	movs	r0, r3
 800d884:	f005 fd3e 	bl	8013304 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d888:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d88a:	2201      	movs	r2, #1
 800d88c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d88e:	f004 fa7f 	bl	8011d90 <SetMICIndicator>
    }
    break;
 800d892:	e00d      	b.n	800d8b0 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800d894:	4a18      	ldr	r2, [pc, #96]	@ (800d8f8 <Mic_Upkeep+0x220>)
 800d896:	4b19      	ldr	r3, [pc, #100]	@ (800d8fc <Mic_Upkeep+0x224>)
 800d898:	0019      	movs	r1, r3
 800d89a:	2003      	movs	r0, #3
 800d89c:	f005 fc7a 	bl	8013194 <CreateLine>
    MicState = MIC_STATE_INIT;
 800d8a0:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	701a      	strb	r2, [r3, #0]
    break;
 800d8a6:	e004      	b.n	800d8b2 <Mic_Upkeep+0x1da>
    break;
 800d8a8:	46c0      	nop			@ (mov r8, r8)
 800d8aa:	e002      	b.n	800d8b2 <Mic_Upkeep+0x1da>
    break;
 800d8ac:	46c0      	nop			@ (mov r8, r8)
 800d8ae:	e000      	b.n	800d8b2 <Mic_Upkeep+0x1da>
    break;
 800d8b0:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800d8b2:	4b03      	ldr	r3, [pc, #12]	@ (800d8c0 <Mic_Upkeep+0x1e8>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
}
 800d8b6:	0018      	movs	r0, r3
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	b002      	add	sp, #8
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	20000e92 	.word	0x20000e92
 800d8c4:	0802c910 	.word	0x0802c910
 800d8c8:	0802daf0 	.word	0x0802daf0
 800d8cc:	20000fad 	.word	0x20000fad
 800d8d0:	20000e80 	.word	0x20000e80
 800d8d4:	0802c92c 	.word	0x0802c92c
 800d8d8:	0802c934 	.word	0x0802c934
 800d8dc:	20000e30 	.word	0x20000e30
 800d8e0:	20000e70 	.word	0x20000e70
 800d8e4:	42c80000 	.word	0x42c80000
 800d8e8:	3fe00000 	.word	0x3fe00000
 800d8ec:	40590000 	.word	0x40590000
 800d8f0:	000002f3 	.word	0x000002f3
 800d8f4:	20000e7c 	.word	0x20000e7c
 800d8f8:	0802c93c 	.word	0x0802c93c
 800d8fc:	0802c95c 	.word	0x0802c95c

0800d900 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d906:	1d3b      	adds	r3, r7, #4
 800d908:	0018      	movs	r0, r3
 800d90a:	2314      	movs	r3, #20
 800d90c:	001a      	movs	r2, r3
 800d90e:	2100      	movs	r1, #0
 800d910:	f017 ff34 	bl	802577c <memset>
  RTC_DateTypeDef sDate = {0};
 800d914:	003b      	movs	r3, r7
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d91a:	4b2e      	ldr	r3, [pc, #184]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d91c:	4a2e      	ldr	r2, [pc, #184]	@ (800d9d8 <MX_RTC_Init+0xd8>)
 800d91e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d920:	4b2c      	ldr	r3, [pc, #176]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d922:	2200      	movs	r2, #0
 800d924:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d926:	4b2b      	ldr	r3, [pc, #172]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d928:	227f      	movs	r2, #127	@ 0x7f
 800d92a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d92c:	4b29      	ldr	r3, [pc, #164]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d92e:	22ff      	movs	r2, #255	@ 0xff
 800d930:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d932:	4b28      	ldr	r3, [pc, #160]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d934:	2200      	movs	r2, #0
 800d936:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d938:	4b26      	ldr	r3, [pc, #152]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d93e:	4b25      	ldr	r3, [pc, #148]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d940:	2200      	movs	r2, #0
 800d942:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d944:	4b23      	ldr	r3, [pc, #140]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d946:	2200      	movs	r2, #0
 800d948:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d94a:	4b22      	ldr	r3, [pc, #136]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d94c:	0018      	movs	r0, r3
 800d94e:	f00d fcf1 	bl	801b334 <HAL_RTC_Init>
 800d952:	1e03      	subs	r3, r0, #0
 800d954:	d001      	beq.n	800d95a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800d956:	f7fe ffbb 	bl	800c8d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800d95a:	1d3b      	adds	r3, r7, #4
 800d95c:	220d      	movs	r2, #13
 800d95e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800d960:	1d3b      	adds	r3, r7, #4
 800d962:	2200      	movs	r2, #0
 800d964:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d966:	1d3b      	adds	r3, r7, #4
 800d968:	2200      	movs	r2, #0
 800d96a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d96c:	1d3b      	adds	r3, r7, #4
 800d96e:	2200      	movs	r2, #0
 800d970:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d972:	1d3b      	adds	r3, r7, #4
 800d974:	2200      	movs	r2, #0
 800d976:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d978:	1d39      	adds	r1, r7, #4
 800d97a:	4b16      	ldr	r3, [pc, #88]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	0018      	movs	r0, r3
 800d980:	f00d fd74 	bl	801b46c <HAL_RTC_SetTime>
 800d984:	1e03      	subs	r3, r0, #0
 800d986:	d001      	beq.n	800d98c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800d988:	f7fe ffa2 	bl	800c8d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d98c:	003b      	movs	r3, r7
 800d98e:	2206      	movs	r2, #6
 800d990:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800d992:	003b      	movs	r3, r7
 800d994:	2211      	movs	r2, #17
 800d996:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800d998:	003b      	movs	r3, r7
 800d99a:	2217      	movs	r2, #23
 800d99c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800d99e:	003b      	movs	r3, r7
 800d9a0:	2218      	movs	r2, #24
 800d9a2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d9a4:	0039      	movs	r1, r7
 800d9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	0018      	movs	r0, r3
 800d9ac:	f00d fe66 	bl	801b67c <HAL_RTC_SetDate>
 800d9b0:	1e03      	subs	r3, r0, #0
 800d9b2:	d001      	beq.n	800d9b8 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800d9b4:	f7fe ff8c 	bl	800c8d0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800d9b8:	4b06      	ldr	r3, [pc, #24]	@ (800d9d4 <MX_RTC_Init+0xd4>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2100      	movs	r1, #0
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f00e f834 	bl	801ba2c <HAL_RTCEx_SetWakeUpTimer_IT>
 800d9c4:	1e03      	subs	r3, r0, #0
 800d9c6:	d001      	beq.n	800d9cc <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800d9c8:	f7fe ff82 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d9cc:	46c0      	nop			@ (mov r8, r8)
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	b006      	add	sp, #24
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	20000e94 	.word	0x20000e94
 800d9d8:	40002800 	.word	0x40002800

0800d9dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a0a      	ldr	r2, [pc, #40]	@ (800da14 <HAL_RTC_MspInit+0x38>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d10e      	bne.n	800da0c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	@ (800da18 <HAL_RTC_MspInit+0x3c>)
 800d9f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d9f2:	4b09      	ldr	r3, [pc, #36]	@ (800da18 <HAL_RTC_MspInit+0x3c>)
 800d9f4:	2180      	movs	r1, #128	@ 0x80
 800d9f6:	02c9      	lsls	r1, r1, #11
 800d9f8:	430a      	orrs	r2, r1
 800d9fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2100      	movs	r1, #0
 800da00:	2002      	movs	r0, #2
 800da02:	f006 fdab 	bl	801455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800da06:	2002      	movs	r0, #2
 800da08:	f006 fdbd 	bl	8014586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800da0c:	46c0      	nop			@ (mov r8, r8)
 800da0e:	46bd      	mov	sp, r7
 800da10:	b002      	add	sp, #8
 800da12:	bd80      	pop	{r7, pc}
 800da14:	40002800 	.word	0x40002800
 800da18:	40021000 	.word	0x40021000

0800da1c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800da20:	4b02      	ldr	r3, [pc, #8]	@ (800da2c <sen5x_Get_sen5x_enable_state+0x10>)
 800da22:	781b      	ldrb	r3, [r3, #0]
}
 800da24:	0018      	movs	r0, r3
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	46c0      	nop			@ (mov r8, r8)
 800da2c:	20000ebb 	.word	0x20000ebb

0800da30 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	0002      	movs	r2, r0
 800da38:	1dfb      	adds	r3, r7, #7
 800da3a:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800da3c:	4b03      	ldr	r3, [pc, #12]	@ (800da4c <sen5x_Set_sen5x_state+0x1c>)
 800da3e:	1dfa      	adds	r2, r7, #7
 800da40:	7812      	ldrb	r2, [r2, #0]
 800da42:	701a      	strb	r2, [r3, #0]
}
 800da44:	46c0      	nop			@ (mov r8, r8)
 800da46:	46bd      	mov	sp, r7
 800da48:	b002      	add	sp, #8
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000ebb 	.word	0x20000ebb

0800da50 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800da58:	f006 f8dc 	bl	8013c14 <HAL_GetTick>
 800da5c:	0002      	movs	r2, r0
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	18d2      	adds	r2, r2, r3
 800da62:	4b03      	ldr	r3, [pc, #12]	@ (800da70 <setsen5xReadTimer+0x20>)
 800da64:	601a      	str	r2, [r3, #0]
}
 800da66:	46c0      	nop			@ (mov r8, r8)
 800da68:	46bd      	mov	sp, r7
 800da6a:	b002      	add	sp, #8
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	46c0      	nop			@ (mov r8, r8)
 800da70:	20000ec8 	.word	0x20000ec8

0800da74 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	0002      	movs	r2, r0
 800da7c:	1dfb      	adds	r3, r7, #7
 800da7e:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800da80:	4b03      	ldr	r3, [pc, #12]	@ (800da90 <setsen5xSamplecounter+0x1c>)
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
}
 800da86:	46c0      	nop			@ (mov r8, r8)
 800da88:	46bd      	mov	sp, r7
 800da8a:	b002      	add	sp, #8
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	46c0      	nop			@ (mov r8, r8)
 800da90:	20000ec4 	.word	0x20000ec4

0800da94 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800da9c:	f7fe ffd0 	bl	800ca40 <IsPMSensorEnabled>
 800daa0:	1e03      	subs	r3, r0, #0
 800daa2:	d035      	beq.n	800db10 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800daa4:	f003 fff2 	bl	8011a8c <batteryChargeCheck>
 800daa8:	0003      	movs	r3, r0
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d103      	bne.n	800dab6 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800daae:	4b20      	ldr	r3, [pc, #128]	@ (800db30 <sen5x_enable+0x9c>)
 800dab0:	2201      	movs	r2, #1
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	e00d      	b.n	800dad2 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800dab6:	4b1e      	ldr	r3, [pc, #120]	@ (800db30 <sen5x_enable+0x9c>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	1e5a      	subs	r2, r3, #1
 800dabc:	4193      	sbcs	r3, r2
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2201      	movs	r2, #1
 800dac2:	4053      	eors	r3, r2
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	1c1a      	adds	r2, r3, #0
 800dac8:	2301      	movs	r3, #1
 800daca:	4013      	ands	r3, r2
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	4b18      	ldr	r3, [pc, #96]	@ (800db30 <sen5x_enable+0x9c>)
 800dad0:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800dad2:	4b17      	ldr	r3, [pc, #92]	@ (800db30 <sen5x_enable+0x9c>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d003      	beq.n	800dae2 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800dada:	2000      	movs	r0, #0
 800dadc:	f7ff ffb8 	bl	800da50 <setsen5xReadTimer>
 800dae0:	e009      	b.n	800daf6 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800dae2:	f006 f897 	bl	8013c14 <HAL_GetTick>
 800dae6:	0002      	movs	r2, r0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2164      	movs	r1, #100	@ 0x64
 800daec:	434b      	muls	r3, r1
 800daee:	18d3      	adds	r3, r2, r3
 800daf0:	0018      	movs	r0, r3
 800daf2:	f7ff ffad 	bl	800da50 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800daf6:	4b0e      	ldr	r3, [pc, #56]	@ (800db30 <sen5x_enable+0x9c>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <sen5x_enable+0x6e>
 800dafe:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <sen5x_enable+0xa0>)
 800db00:	e000      	b.n	800db04 <sen5x_enable+0x70>
 800db02:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <sen5x_enable+0xa4>)
 800db04:	4a0d      	ldr	r2, [pc, #52]	@ (800db3c <sen5x_enable+0xa8>)
 800db06:	490e      	ldr	r1, [pc, #56]	@ (800db40 <sen5x_enable+0xac>)
 800db08:	2002      	movs	r0, #2
 800db0a:	f005 fb43 	bl	8013194 <CreateLine>
 800db0e:	e005      	b.n	800db1c <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800db10:	4a0c      	ldr	r2, [pc, #48]	@ (800db44 <sen5x_enable+0xb0>)
 800db12:	4b0b      	ldr	r3, [pc, #44]	@ (800db40 <sen5x_enable+0xac>)
 800db14:	0019      	movs	r1, r3
 800db16:	2002      	movs	r0, #2
 800db18:	f005 fb3c 	bl	8013194 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800db1c:	4b0a      	ldr	r3, [pc, #40]	@ (800db48 <sen5x_enable+0xb4>)
 800db1e:	2201      	movs	r2, #1
 800db20:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800db22:	4b03      	ldr	r3, [pc, #12]	@ (800db30 <sen5x_enable+0x9c>)
 800db24:	781b      	ldrb	r3, [r3, #0]
}
 800db26:	0018      	movs	r0, r3
 800db28:	46bd      	mov	sp, r7
 800db2a:	b002      	add	sp, #8
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	46c0      	nop			@ (mov r8, r8)
 800db30:	20000ebb 	.word	0x20000ebb
 800db34:	0802c960 	.word	0x0802c960
 800db38:	0802c968 	.word	0x0802c968
 800db3c:	0802c974 	.word	0x0802c974
 800db40:	0802c990 	.word	0x0802c990
 800db44:	0802c994 	.word	0x0802c994
 800db48:	2000009e 	.word	0x2000009e

0800db4c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800db50:	2380      	movs	r3, #128	@ 0x80
 800db52:	015b      	lsls	r3, r3, #5
 800db54:	480f      	ldr	r0, [pc, #60]	@ (800db94 <sen5x_Power_On+0x48>)
 800db56:	2201      	movs	r2, #1
 800db58:	0019      	movs	r1, r3
 800db5a:	f007 faec 	bl	8015136 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800db5e:	4a0e      	ldr	r2, [pc, #56]	@ (800db98 <sen5x_Power_On+0x4c>)
 800db60:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <sen5x_Power_On+0x50>)
 800db62:	0019      	movs	r1, r3
 800db64:	2003      	movs	r0, #3
 800db66:	f005 fb15 	bl	8013194 <CreateLine>
  HAL_Delay(150);
 800db6a:	2096      	movs	r0, #150	@ 0x96
 800db6c:	f006 f85c 	bl	8013c28 <HAL_Delay>
  if (sen5x_device_reset()) {
 800db70:	f001 f9da 	bl	800ef28 <sen5x_device_reset>
 800db74:	1e03      	subs	r3, r0, #0
 800db76:	d006      	beq.n	800db86 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800db78:	4a09      	ldr	r2, [pc, #36]	@ (800dba0 <sen5x_Power_On+0x54>)
 800db7a:	4b0a      	ldr	r3, [pc, #40]	@ (800dba4 <sen5x_Power_On+0x58>)
 800db7c:	0019      	movs	r1, r3
 800db7e:	2001      	movs	r0, #1
 800db80:	f005 fb08 	bl	8013194 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800db84:	e002      	b.n	800db8c <sen5x_Power_On+0x40>
    sen5x_On = true;
 800db86:	4b08      	ldr	r3, [pc, #32]	@ (800dba8 <sen5x_Power_On+0x5c>)
 800db88:	2201      	movs	r2, #1
 800db8a:	701a      	strb	r2, [r3, #0]
}
 800db8c:	46c0      	nop			@ (mov r8, r8)
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	46c0      	nop			@ (mov r8, r8)
 800db94:	50000800 	.word	0x50000800
 800db98:	0802c9b4 	.word	0x0802c9b4
 800db9c:	0802c9d0 	.word	0x0802c9d0
 800dba0:	0802c9d4 	.word	0x0802c9d4
 800dba4:	0802c9fc 	.word	0x0802c9fc
 800dba8:	20000eb9 	.word	0x20000eb9

0800dbac <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	@ (800dbec <sen5x_Power_Off+0x40>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d006      	beq.n	800dbc6 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800dbb8:	4a0d      	ldr	r2, [pc, #52]	@ (800dbf0 <sen5x_Power_Off+0x44>)
 800dbba:	4b0e      	ldr	r3, [pc, #56]	@ (800dbf4 <sen5x_Power_Off+0x48>)
 800dbbc:	0019      	movs	r1, r3
 800dbbe:	2003      	movs	r0, #3
 800dbc0:	f005 fae8 	bl	8013194 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800dbc4:	e00f      	b.n	800dbe6 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800dbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf8 <sen5x_Power_Off+0x4c>)
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf4 <sen5x_Power_Off+0x48>)
 800dbca:	0019      	movs	r1, r3
 800dbcc:	2003      	movs	r0, #3
 800dbce:	f005 fae1 	bl	8013194 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800dbd2:	2380      	movs	r3, #128	@ 0x80
 800dbd4:	015b      	lsls	r3, r3, #5
 800dbd6:	4809      	ldr	r0, [pc, #36]	@ (800dbfc <sen5x_Power_Off+0x50>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	0019      	movs	r1, r3
 800dbdc:	f007 faab 	bl	8015136 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800dbe0:	4b07      	ldr	r3, [pc, #28]	@ (800dc00 <sen5x_Power_Off+0x54>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	701a      	strb	r2, [r3, #0]
}
 800dbe6:	46c0      	nop			@ (mov r8, r8)
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20000eba 	.word	0x20000eba
 800dbf0:	0802ca00 	.word	0x0802ca00
 800dbf4:	0802c9d0 	.word	0x0802c9d0
 800dbf8:	0802ca30 	.word	0x0802ca30
 800dbfc:	50000800 	.word	0x50000800
 800dc00:	20000eb9 	.word	0x20000eb9

0800dc04 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800dc08:	4b02      	ldr	r3, [pc, #8]	@ (800dc14 <reset_fanCleaningDone+0x10>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	701a      	strb	r2, [r3, #0]
}
 800dc0e:	46c0      	nop			@ (mov r8, r8)
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20000eb8 	.word	0x20000eb8

0800dc18 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800dc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1a:	b093      	sub	sp, #76	@ 0x4c
 800dc1c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800dc1e:	2436      	movs	r4, #54	@ 0x36
 800dc20:	193b      	adds	r3, r7, r4
 800dc22:	2200      	movs	r2, #0
 800dc24:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800dc26:	2335      	movs	r3, #53	@ 0x35
 800dc28:	18fb      	adds	r3, r7, r3
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800dc2e:	2334      	movs	r3, #52	@ 0x34
 800dc30:	18fb      	adds	r3, r7, r3
 800dc32:	2220      	movs	r2, #32
 800dc34:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800dc36:	f7ff ff89 	bl	800db4c <sen5x_Power_On>
  error = sen5x_device_reset();
 800dc3a:	0025      	movs	r5, r4
 800dc3c:	193c      	adds	r4, r7, r4
 800dc3e:	f001 f973 	bl	800ef28 <sen5x_device_reset>
 800dc42:	0003      	movs	r3, r0
 800dc44:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dc46:	002c      	movs	r4, r5
 800dc48:	193b      	adds	r3, r7, r4
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	5e9b      	ldrsh	r3, [r3, r2]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00b      	beq.n	800dc6a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800dc52:	193b      	adds	r3, r7, r4
 800dc54:	2200      	movs	r2, #0
 800dc56:	5e9b      	ldrsh	r3, [r3, r2]
 800dc58:	4a75      	ldr	r2, [pc, #468]	@ (800de30 <probe_sen5x+0x218>)
 800dc5a:	4976      	ldr	r1, [pc, #472]	@ (800de34 <probe_sen5x+0x21c>)
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	f005 fa99 	bl	8013194 <CreateLine>
      return error;
 800dc62:	193b      	adds	r3, r7, r4
 800dc64:	2200      	movs	r2, #0
 800dc66:	5e9b      	ldrsh	r3, [r3, r2]
 800dc68:	e0de      	b.n	800de28 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800dc6a:	2536      	movs	r5, #54	@ 0x36
 800dc6c:	197c      	adds	r4, r7, r5
 800dc6e:	2335      	movs	r3, #53	@ 0x35
 800dc70:	18fb      	adds	r3, r7, r3
 800dc72:	781a      	ldrb	r2, [r3, #0]
 800dc74:	230c      	movs	r3, #12
 800dc76:	18fb      	adds	r3, r7, r3
 800dc78:	0011      	movs	r1, r2
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f001 f840 	bl	800ed00 <sen5x_get_serial_number>
 800dc80:	0003      	movs	r3, r0
 800dc82:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dc84:	197b      	adds	r3, r7, r5
 800dc86:	2200      	movs	r2, #0
 800dc88:	5e9b      	ldrsh	r3, [r3, r2]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00b      	beq.n	800dca6 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800dc8e:	197b      	adds	r3, r7, r5
 800dc90:	2200      	movs	r2, #0
 800dc92:	5e9a      	ldrsh	r2, [r3, r2]
 800dc94:	4b68      	ldr	r3, [pc, #416]	@ (800de38 <probe_sen5x+0x220>)
 800dc96:	0011      	movs	r1, r2
 800dc98:	0018      	movs	r0, r3
 800dc9a:	f017 fb95 	bl	80253c8 <iprintf>
      return error;
 800dc9e:	197b      	adds	r3, r7, r5
 800dca0:	2200      	movs	r2, #0
 800dca2:	5e9b      	ldrsh	r3, [r3, r2]
 800dca4:	e0c0      	b.n	800de28 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800dca6:	230c      	movs	r3, #12
 800dca8:	18fa      	adds	r2, r7, r3
 800dcaa:	4b64      	ldr	r3, [pc, #400]	@ (800de3c <probe_sen5x+0x224>)
 800dcac:	0011      	movs	r1, r2
 800dcae:	0018      	movs	r0, r3
 800dcb0:	f017 fb8a 	bl	80253c8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800dcb4:	2536      	movs	r5, #54	@ 0x36
 800dcb6:	197c      	adds	r4, r7, r5
 800dcb8:	2334      	movs	r3, #52	@ 0x34
 800dcba:	18fb      	adds	r3, r7, r3
 800dcbc:	781a      	ldrb	r2, [r3, #0]
 800dcbe:	4b60      	ldr	r3, [pc, #384]	@ (800de40 <probe_sen5x+0x228>)
 800dcc0:	0011      	movs	r1, r2
 800dcc2:	0018      	movs	r0, r3
 800dcc4:	f000 ffc6 	bl	800ec54 <sen5x_get_product_name>
 800dcc8:	0003      	movs	r3, r0
 800dcca:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dccc:	197b      	adds	r3, r7, r5
 800dcce:	2200      	movs	r2, #0
 800dcd0:	5e9b      	ldrsh	r3, [r3, r2]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00b      	beq.n	800dcee <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800dcd6:	197b      	adds	r3, r7, r5
 800dcd8:	2200      	movs	r2, #0
 800dcda:	5e9a      	ldrsh	r2, [r3, r2]
 800dcdc:	4b59      	ldr	r3, [pc, #356]	@ (800de44 <probe_sen5x+0x22c>)
 800dcde:	0011      	movs	r1, r2
 800dce0:	0018      	movs	r0, r3
 800dce2:	f017 fb71 	bl	80253c8 <iprintf>
      return error;
 800dce6:	197b      	adds	r3, r7, r5
 800dce8:	2200      	movs	r2, #0
 800dcea:	5e9b      	ldrsh	r3, [r3, r2]
 800dcec:	e09c      	b.n	800de28 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800dcee:	4a54      	ldr	r2, [pc, #336]	@ (800de40 <probe_sen5x+0x228>)
 800dcf0:	4b55      	ldr	r3, [pc, #340]	@ (800de48 <probe_sen5x+0x230>)
 800dcf2:	0011      	movs	r1, r2
 800dcf4:	0018      	movs	r0, r3
 800dcf6:	f017 fb67 	bl	80253c8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800dcfa:	2636      	movs	r6, #54	@ 0x36
 800dcfc:	19bc      	adds	r4, r7, r6
 800dcfe:	2308      	movs	r3, #8
 800dd00:	18fd      	adds	r5, r7, r3
 800dd02:	2309      	movs	r3, #9
 800dd04:	18fa      	adds	r2, r7, r3
 800dd06:	230a      	movs	r3, #10
 800dd08:	18f9      	adds	r1, r7, r3
 800dd0a:	230b      	movs	r3, #11
 800dd0c:	18f8      	adds	r0, r7, r3
 800dd0e:	1d7b      	adds	r3, r7, #5
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	1dbb      	adds	r3, r7, #6
 800dd14:	9301      	str	r3, [sp, #4]
 800dd16:	1dfb      	adds	r3, r7, #7
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	002b      	movs	r3, r5
 800dd1c:	f001 f846 	bl	800edac <sen5x_get_version>
 800dd20:	0003      	movs	r3, r0
 800dd22:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800dd24:	19bb      	adds	r3, r7, r6
 800dd26:	2200      	movs	r2, #0
 800dd28:	5e9b      	ldrsh	r3, [r3, r2]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00b      	beq.n	800dd46 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800dd2e:	19bb      	adds	r3, r7, r6
 800dd30:	2200      	movs	r2, #0
 800dd32:	5e9a      	ldrsh	r2, [r3, r2]
 800dd34:	4b45      	ldr	r3, [pc, #276]	@ (800de4c <probe_sen5x+0x234>)
 800dd36:	0011      	movs	r1, r2
 800dd38:	0018      	movs	r0, r3
 800dd3a:	f017 fb45 	bl	80253c8 <iprintf>
      return error;
 800dd3e:	19bb      	adds	r3, r7, r6
 800dd40:	2200      	movs	r2, #0
 800dd42:	5e9b      	ldrsh	r3, [r3, r2]
 800dd44:	e070      	b.n	800de28 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800dd46:	230b      	movs	r3, #11
 800dd48:	18fb      	adds	r3, r7, r3
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	0019      	movs	r1, r3
 800dd4e:	230a      	movs	r3, #10
 800dd50:	18fb      	adds	r3, r7, r3
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	001a      	movs	r2, r3
 800dd56:	2308      	movs	r3, #8
 800dd58:	18fb      	adds	r3, r7, r3
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	001c      	movs	r4, r3
 800dd5e:	1dfb      	adds	r3, r7, #7
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	483b      	ldr	r0, [pc, #236]	@ (800de50 <probe_sen5x+0x238>)
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	0023      	movs	r3, r4
 800dd68:	f017 fb2e 	bl	80253c8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800dd70:	262e      	movs	r6, #46	@ 0x2e
 800dd72:	19bb      	adds	r3, r7, r6
 800dd74:	2200      	movs	r2, #0
 800dd76:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800dd78:	232c      	movs	r3, #44	@ 0x2c
 800dd7a:	18fb      	adds	r3, r7, r3
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800dd80:	4934      	ldr	r1, [pc, #208]	@ (800de54 <probe_sen5x+0x23c>)
 800dd82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd84:	f7f3 f95c 	bl	8001040 <__aeabi_fmul>
 800dd88:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800dd8a:	1c18      	adds	r0, r3, #0
 800dd8c:	f7f3 fd2c 	bl	80017e8 <__aeabi_f2iz>
 800dd90:	0003      	movs	r3, r0
 800dd92:	b218      	sxth	r0, r3
 800dd94:	2536      	movs	r5, #54	@ 0x36
 800dd96:	197c      	adds	r4, r7, r5
 800dd98:	232c      	movs	r3, #44	@ 0x2c
 800dd9a:	18fb      	adds	r3, r7, r3
 800dd9c:	881a      	ldrh	r2, [r3, #0]
 800dd9e:	19bb      	adds	r3, r7, r6
 800dda0:	2100      	movs	r1, #0
 800dda2:	5e5b      	ldrsh	r3, [r3, r1]
 800dda4:	0019      	movs	r1, r3
 800dda6:	f000 fef1 	bl	800eb8c <sen5x_set_temperature_offset_parameters>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ddae:	197b      	adds	r3, r7, r5
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	5e9b      	ldrsh	r3, [r3, r2]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00b      	beq.n	800ddd0 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800ddb8:	197b      	adds	r3, r7, r5
 800ddba:	2200      	movs	r2, #0
 800ddbc:	5e9b      	ldrsh	r3, [r3, r2]
 800ddbe:	4a26      	ldr	r2, [pc, #152]	@ (800de58 <probe_sen5x+0x240>)
 800ddc0:	491c      	ldr	r1, [pc, #112]	@ (800de34 <probe_sen5x+0x21c>)
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	f005 f9e6 	bl	8013194 <CreateLine>
      return error;
 800ddc8:	197b      	adds	r3, r7, r5
 800ddca:	2200      	movs	r2, #0
 800ddcc:	5e9b      	ldrsh	r3, [r3, r2]
 800ddce:	e02b      	b.n	800de28 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800ddd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ddd2:	f7f5 fd5f 	bl	8003894 <__aeabi_f2d>
 800ddd6:	0002      	movs	r2, r0
 800ddd8:	000b      	movs	r3, r1
 800ddda:	4820      	ldr	r0, [pc, #128]	@ (800de5c <probe_sen5x+0x244>)
 800dddc:	4920      	ldr	r1, [pc, #128]	@ (800de60 <probe_sen5x+0x248>)
 800ddde:	9200      	str	r2, [sp, #0]
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	0002      	movs	r2, r0
 800dde4:	2002      	movs	r0, #2
 800dde6:	f005 f9d5 	bl	8013194 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800ddea:	f7fb fa33 	bl	8009254 <Check_USB_PowerOn>
 800ddee:	0003      	movs	r3, r0
 800ddf0:	001a      	movs	r2, r3
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4053      	eors	r3, r2
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00a      	beq.n	800de12 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800ddfc:	f7ff fed6 	bl	800dbac <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800de00:	f005 ff08 	bl	8013c14 <HAL_GetTick>
 800de04:	0003      	movs	r3, r0
 800de06:	22fa      	movs	r2, #250	@ 0xfa
 800de08:	00d2      	lsls	r2, r2, #3
 800de0a:	189a      	adds	r2, r3, r2
 800de0c:	4b15      	ldr	r3, [pc, #84]	@ (800de64 <probe_sen5x+0x24c>)
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	e006      	b.n	800de20 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800de12:	f005 feff 	bl	8013c14 <HAL_GetTick>
 800de16:	0003      	movs	r3, r0
 800de18:	4a13      	ldr	r2, [pc, #76]	@ (800de68 <probe_sen5x+0x250>)
 800de1a:	189a      	adds	r2, r3, r2
 800de1c:	4b11      	ldr	r3, [pc, #68]	@ (800de64 <probe_sen5x+0x24c>)
 800de1e:	601a      	str	r2, [r3, #0]
  }
  return error;
 800de20:	2336      	movs	r3, #54	@ 0x36
 800de22:	18fb      	adds	r3, r7, r3
 800de24:	2200      	movs	r2, #0
 800de26:	5e9b      	ldrsh	r3, [r3, r2]
}
 800de28:	0018      	movs	r0, r3
 800de2a:	46bd      	mov	sp, r7
 800de2c:	b00f      	add	sp, #60	@ 0x3c
 800de2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de30:	0802ca4c 	.word	0x0802ca4c
 800de34:	0802c9fc 	.word	0x0802c9fc
 800de38:	0802ca78 	.word	0x0802ca78
 800de3c:	0802caa8 	.word	0x0802caa8
 800de40:	20000ebc 	.word	0x20000ebc
 800de44:	0802cabc 	.word	0x0802cabc
 800de48:	0802caec 	.word	0x0802caec
 800de4c:	0802cb00 	.word	0x0802cb00
 800de50:	0802cb2c 	.word	0x0802cb2c
 800de54:	43480000 	.word	0x43480000
 800de58:	0802cb50 	.word	0x0802cb50
 800de5c:	0802cb90 	.word	0x0802cb90
 800de60:	0802c990 	.word	0x0802c990
 800de64:	20000ec8 	.word	0x20000ec8
 800de68:	00006d60 	.word	0x00006d60

0800de6c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800de6c:	b590      	push	{r4, r7, lr}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800de72:	1dbb      	adds	r3, r7, #6
 800de74:	2200      	movs	r2, #0
 800de76:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800de78:	4b1b      	ldr	r3, [pc, #108]	@ (800dee8 <sen5x_lightup_measurement+0x7c>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800de80:	4a1a      	ldr	r2, [pc, #104]	@ (800deec <sen5x_lightup_measurement+0x80>)
 800de82:	4b1b      	ldr	r3, [pc, #108]	@ (800def0 <sen5x_lightup_measurement+0x84>)
 800de84:	0019      	movs	r1, r3
 800de86:	2002      	movs	r0, #2
 800de88:	f005 f984 	bl	8013194 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800de8c:	1dbc      	adds	r4, r7, #6
 800de8e:	f000 fd09 	bl	800e8a4 <sen5x_start_measurement_without_pm>
 800de92:	0003      	movs	r3, r0
 800de94:	8023      	strh	r3, [r4, #0]
 800de96:	e00a      	b.n	800deae <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800de98:	4a16      	ldr	r2, [pc, #88]	@ (800def4 <sen5x_lightup_measurement+0x88>)
 800de9a:	4b15      	ldr	r3, [pc, #84]	@ (800def0 <sen5x_lightup_measurement+0x84>)
 800de9c:	0019      	movs	r1, r3
 800de9e:	2002      	movs	r0, #2
 800dea0:	f005 f978 	bl	8013194 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800dea4:	1dbc      	adds	r4, r7, #6
 800dea6:	f000 fccf 	bl	800e848 <sen5x_start_measurement>
 800deaa:	0003      	movs	r3, r0
 800deac:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800deae:	1dbb      	adds	r3, r7, #6
 800deb0:	2200      	movs	r2, #0
 800deb2:	5e9b      	ldrsh	r3, [r3, r2]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d008      	beq.n	800deca <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800deb8:	1dbb      	adds	r3, r7, #6
 800deba:	2200      	movs	r2, #0
 800debc:	5e9b      	ldrsh	r3, [r3, r2]
 800debe:	4a0e      	ldr	r2, [pc, #56]	@ (800def8 <sen5x_lightup_measurement+0x8c>)
 800dec0:	490e      	ldr	r1, [pc, #56]	@ (800defc <sen5x_lightup_measurement+0x90>)
 800dec2:	2001      	movs	r0, #1
 800dec4:	f005 f966 	bl	8013194 <CreateLine>
 800dec8:	e007      	b.n	800deda <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800deca:	f7fb f9f3 	bl	80092b4 <showTime>
    Info("sen5x_start_measurement executed");
 800dece:	4a0c      	ldr	r2, [pc, #48]	@ (800df00 <sen5x_lightup_measurement+0x94>)
 800ded0:	4b07      	ldr	r3, [pc, #28]	@ (800def0 <sen5x_lightup_measurement+0x84>)
 800ded2:	0019      	movs	r1, r3
 800ded4:	2002      	movs	r0, #2
 800ded6:	f005 f95d 	bl	8013194 <CreateLine>
  }
  return error;
 800deda:	1dbb      	adds	r3, r7, #6
 800dedc:	2200      	movs	r2, #0
 800dede:	5e9b      	ldrsh	r3, [r3, r2]
}
 800dee0:	0018      	movs	r0, r3
 800dee2:	46bd      	mov	sp, r7
 800dee4:	b003      	add	sp, #12
 800dee6:	bd90      	pop	{r4, r7, pc}
 800dee8:	20000eba 	.word	0x20000eba
 800deec:	0802cbc8 	.word	0x0802cbc8
 800def0:	0802c990 	.word	0x0802c990
 800def4:	0802cbf4 	.word	0x0802cbf4
 800def8:	0802cc14 	.word	0x0802cc14
 800defc:	0802c9fc 	.word	0x0802c9fc
 800df00:	0802cc44 	.word	0x0802cc44

0800df04 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800df0a:	1dbb      	adds	r3, r7, #6
 800df0c:	2200      	movs	r2, #0
 800df0e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800df10:	4b21      	ldr	r3, [pc, #132]	@ (800df98 <sen5x_extinguish_measurement+0x94>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01e      	beq.n	800df56 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800df18:	4a20      	ldr	r2, [pc, #128]	@ (800df9c <sen5x_extinguish_measurement+0x98>)
 800df1a:	4b21      	ldr	r3, [pc, #132]	@ (800dfa0 <sen5x_extinguish_measurement+0x9c>)
 800df1c:	0019      	movs	r1, r3
 800df1e:	2002      	movs	r0, #2
 800df20:	f005 f938 	bl	8013194 <CreateLine>
    Info("PM measurement is disabled");
 800df24:	4a1f      	ldr	r2, [pc, #124]	@ (800dfa4 <sen5x_extinguish_measurement+0xa0>)
 800df26:	4b1e      	ldr	r3, [pc, #120]	@ (800dfa0 <sen5x_extinguish_measurement+0x9c>)
 800df28:	0019      	movs	r1, r3
 800df2a:	2002      	movs	r0, #2
 800df2c:	f005 f932 	bl	8013194 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800df30:	1dbc      	adds	r4, r7, #6
 800df32:	f000 fcb7 	bl	800e8a4 <sen5x_start_measurement_without_pm>
 800df36:	0003      	movs	r3, r0
 800df38:	8023      	strh	r3, [r4, #0]
    if (error) {
 800df3a:	1dbb      	adds	r3, r7, #6
 800df3c:	2200      	movs	r2, #0
 800df3e:	5e9b      	ldrsh	r3, [r3, r2]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d022      	beq.n	800df8a <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800df44:	1dbb      	adds	r3, r7, #6
 800df46:	2200      	movs	r2, #0
 800df48:	5e9b      	ldrsh	r3, [r3, r2]
 800df4a:	4a17      	ldr	r2, [pc, #92]	@ (800dfa8 <sen5x_extinguish_measurement+0xa4>)
 800df4c:	4917      	ldr	r1, [pc, #92]	@ (800dfac <sen5x_extinguish_measurement+0xa8>)
 800df4e:	2001      	movs	r0, #1
 800df50:	f005 f920 	bl	8013194 <CreateLine>
 800df54:	e019      	b.n	800df8a <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800df56:	1dbc      	adds	r4, r7, #6
 800df58:	f000 fcd2 	bl	800e900 <sen5x_stop_measurement>
 800df5c:	0003      	movs	r3, r0
 800df5e:	8023      	strh	r3, [r4, #0]
    showTime();
 800df60:	f7fb f9a8 	bl	80092b4 <showTime>
    Info("sen5x_stop_measurement executed");
 800df64:	4a12      	ldr	r2, [pc, #72]	@ (800dfb0 <sen5x_extinguish_measurement+0xac>)
 800df66:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa0 <sen5x_extinguish_measurement+0x9c>)
 800df68:	0019      	movs	r1, r3
 800df6a:	2002      	movs	r0, #2
 800df6c:	f005 f912 	bl	8013194 <CreateLine>
    if (error) {
 800df70:	1dbb      	adds	r3, r7, #6
 800df72:	2200      	movs	r2, #0
 800df74:	5e9b      	ldrsh	r3, [r3, r2]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d007      	beq.n	800df8a <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800df7a:	1dbb      	adds	r3, r7, #6
 800df7c:	2200      	movs	r2, #0
 800df7e:	5e9b      	ldrsh	r3, [r3, r2]
 800df80:	4a0c      	ldr	r2, [pc, #48]	@ (800dfb4 <sen5x_extinguish_measurement+0xb0>)
 800df82:	490a      	ldr	r1, [pc, #40]	@ (800dfac <sen5x_extinguish_measurement+0xa8>)
 800df84:	2001      	movs	r0, #1
 800df86:	f005 f905 	bl	8013194 <CreateLine>
    }
  }
  return error;
 800df8a:	1dbb      	adds	r3, r7, #6
 800df8c:	2200      	movs	r2, #0
 800df8e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800df90:	0018      	movs	r0, r3
 800df92:	46bd      	mov	sp, r7
 800df94:	b003      	add	sp, #12
 800df96:	bd90      	pop	{r4, r7, pc}
 800df98:	20000eba 	.word	0x20000eba
 800df9c:	0802cc68 	.word	0x0802cc68
 800dfa0:	0802c990 	.word	0x0802c990
 800dfa4:	0802cca0 	.word	0x0802cca0
 800dfa8:	0802ccbc 	.word	0x0802ccbc
 800dfac:	0802c9fc 	.word	0x0802c9fc
 800dfb0:	0802ccfc 	.word	0x0802ccfc
 800dfb4:	0802cd1c 	.word	0x0802cd1c

0800dfb8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfba:	b08d      	sub	sp, #52	@ 0x34
 800dfbc:	af04      	add	r7, sp, #16
 800dfbe:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800dfc0:	261e      	movs	r6, #30
 800dfc2:	19bb      	adds	r3, r7, r6
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800dfc8:	19bc      	adds	r4, r7, r6
 800dfca:	2316      	movs	r3, #22
 800dfcc:	18fd      	adds	r5, r7, r3
 800dfce:	2318      	movs	r3, #24
 800dfd0:	18fa      	adds	r2, r7, r3
 800dfd2:	231a      	movs	r3, #26
 800dfd4:	18f9      	adds	r1, r7, r3
 800dfd6:	231c      	movs	r3, #28
 800dfd8:	18f8      	adds	r0, r7, r3
 800dfda:	230e      	movs	r3, #14
 800dfdc:	18fb      	adds	r3, r7, r3
 800dfde:	9303      	str	r3, [sp, #12]
 800dfe0:	2310      	movs	r3, #16
 800dfe2:	18fb      	adds	r3, r7, r3
 800dfe4:	9302      	str	r3, [sp, #8]
 800dfe6:	2312      	movs	r3, #18
 800dfe8:	18fb      	adds	r3, r7, r3
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	2314      	movs	r3, #20
 800dfee:	18fb      	adds	r3, r7, r3
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	002b      	movs	r3, r5
 800dff4:	f000 fd06 	bl	800ea04 <sen5x_read_measured_values>
 800dff8:	0003      	movs	r3, r0
 800dffa:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800dffc:	19bb      	adds	r3, r7, r6
 800dffe:	2200      	movs	r2, #0
 800e000:	5e9b      	ldrsh	r3, [r3, r2]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <sen5x_read_measurement+0x56>
    return error;
 800e006:	19bb      	adds	r3, r7, r6
 800e008:	2200      	movs	r2, #0
 800e00a:	5e9b      	ldrsh	r3, [r3, r2]
 800e00c:	e02c      	b.n	800e068 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800e00e:	231c      	movs	r3, #28
 800e010:	18fb      	adds	r3, r7, r3
 800e012:	881a      	ldrh	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800e018:	231a      	movs	r3, #26
 800e01a:	18fb      	adds	r3, r7, r3
 800e01c:	881a      	ldrh	r2, [r3, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800e022:	2318      	movs	r3, #24
 800e024:	18fb      	adds	r3, r7, r3
 800e026:	881a      	ldrh	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800e02c:	2316      	movs	r3, #22
 800e02e:	18fb      	adds	r3, r7, r3
 800e030:	881a      	ldrh	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800e036:	2314      	movs	r3, #20
 800e038:	18fb      	adds	r3, r7, r3
 800e03a:	2200      	movs	r2, #0
 800e03c:	5e9a      	ldrsh	r2, [r3, r2]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800e042:	2312      	movs	r3, #18
 800e044:	18fb      	adds	r3, r7, r3
 800e046:	2200      	movs	r2, #0
 800e048:	5e9a      	ldrsh	r2, [r3, r2]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800e04e:	2310      	movs	r3, #16
 800e050:	18fb      	adds	r3, r7, r3
 800e052:	2200      	movs	r2, #0
 800e054:	5e9a      	ldrsh	r2, [r3, r2]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800e05a:	230e      	movs	r3, #14
 800e05c:	18fb      	adds	r3, r7, r3
 800e05e:	2200      	movs	r2, #0
 800e060:	5e9a      	ldrsh	r2, [r3, r2]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	81da      	strh	r2, [r3, #14]
  return 0;
 800e066:	2300      	movs	r3, #0
}
 800e068:	0018      	movs	r0, r3
 800e06a:	46bd      	mov	sp, r7
 800e06c:	b009      	add	sp, #36	@ 0x24
 800e06e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e070 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800e070:	b580      	push	{r7, lr}
 800e072:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e074:	4b63      	ldr	r3, [pc, #396]	@ (800e204 <sen5x_printvalues+0x194>)
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	4a63      	ldr	r2, [pc, #396]	@ (800e208 <sen5x_printvalues+0x198>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d013      	beq.n	800e0a6 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800e07e:	4b61      	ldr	r3, [pc, #388]	@ (800e204 <sen5x_printvalues+0x194>)
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	0018      	movs	r0, r3
 800e084:	f7f3 fbd0 	bl	8001828 <__aeabi_i2f>
 800e088:	1c03      	adds	r3, r0, #0
 800e08a:	4960      	ldr	r1, [pc, #384]	@ (800e20c <sen5x_printvalues+0x19c>)
 800e08c:	1c18      	adds	r0, r3, #0
 800e08e:	f7f2 fe09 	bl	8000ca4 <__aeabi_fdiv>
 800e092:	1c03      	adds	r3, r0, #0
 800e094:	1c18      	adds	r0, r3, #0
 800e096:	f7f5 fbfd 	bl	8003894 <__aeabi_f2d>
 800e09a:	0002      	movs	r2, r0
 800e09c:	000b      	movs	r3, r1
 800e09e:	495c      	ldr	r1, [pc, #368]	@ (800e210 <sen5x_printvalues+0x1a0>)
 800e0a0:	0008      	movs	r0, r1
 800e0a2:	f017 f991 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e0a6:	4b57      	ldr	r3, [pc, #348]	@ (800e204 <sen5x_printvalues+0x194>)
 800e0a8:	885b      	ldrh	r3, [r3, #2]
 800e0aa:	4a57      	ldr	r2, [pc, #348]	@ (800e208 <sen5x_printvalues+0x198>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d013      	beq.n	800e0d8 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e0b0:	4b54      	ldr	r3, [pc, #336]	@ (800e204 <sen5x_printvalues+0x194>)
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	0018      	movs	r0, r3
 800e0b6:	f7f3 fbb7 	bl	8001828 <__aeabi_i2f>
 800e0ba:	1c03      	adds	r3, r0, #0
 800e0bc:	4953      	ldr	r1, [pc, #332]	@ (800e20c <sen5x_printvalues+0x19c>)
 800e0be:	1c18      	adds	r0, r3, #0
 800e0c0:	f7f2 fdf0 	bl	8000ca4 <__aeabi_fdiv>
 800e0c4:	1c03      	adds	r3, r0, #0
 800e0c6:	1c18      	adds	r0, r3, #0
 800e0c8:	f7f5 fbe4 	bl	8003894 <__aeabi_f2d>
 800e0cc:	0002      	movs	r2, r0
 800e0ce:	000b      	movs	r3, r1
 800e0d0:	4950      	ldr	r1, [pc, #320]	@ (800e214 <sen5x_printvalues+0x1a4>)
 800e0d2:	0008      	movs	r0, r1
 800e0d4:	f017 f978 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e0d8:	4b4a      	ldr	r3, [pc, #296]	@ (800e204 <sen5x_printvalues+0x194>)
 800e0da:	889b      	ldrh	r3, [r3, #4]
 800e0dc:	4a4a      	ldr	r2, [pc, #296]	@ (800e208 <sen5x_printvalues+0x198>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d013      	beq.n	800e10a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e0e2:	4b48      	ldr	r3, [pc, #288]	@ (800e204 <sen5x_printvalues+0x194>)
 800e0e4:	889b      	ldrh	r3, [r3, #4]
 800e0e6:	0018      	movs	r0, r3
 800e0e8:	f7f3 fb9e 	bl	8001828 <__aeabi_i2f>
 800e0ec:	1c03      	adds	r3, r0, #0
 800e0ee:	4947      	ldr	r1, [pc, #284]	@ (800e20c <sen5x_printvalues+0x19c>)
 800e0f0:	1c18      	adds	r0, r3, #0
 800e0f2:	f7f2 fdd7 	bl	8000ca4 <__aeabi_fdiv>
 800e0f6:	1c03      	adds	r3, r0, #0
 800e0f8:	1c18      	adds	r0, r3, #0
 800e0fa:	f7f5 fbcb 	bl	8003894 <__aeabi_f2d>
 800e0fe:	0002      	movs	r2, r0
 800e100:	000b      	movs	r3, r1
 800e102:	4945      	ldr	r1, [pc, #276]	@ (800e218 <sen5x_printvalues+0x1a8>)
 800e104:	0008      	movs	r0, r1
 800e106:	f017 f95f 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e10a:	4b3e      	ldr	r3, [pc, #248]	@ (800e204 <sen5x_printvalues+0x194>)
 800e10c:	88db      	ldrh	r3, [r3, #6]
 800e10e:	4a3e      	ldr	r2, [pc, #248]	@ (800e208 <sen5x_printvalues+0x198>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d013      	beq.n	800e13c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e114:	4b3b      	ldr	r3, [pc, #236]	@ (800e204 <sen5x_printvalues+0x194>)
 800e116:	88db      	ldrh	r3, [r3, #6]
 800e118:	0018      	movs	r0, r3
 800e11a:	f7f3 fb85 	bl	8001828 <__aeabi_i2f>
 800e11e:	1c03      	adds	r3, r0, #0
 800e120:	493a      	ldr	r1, [pc, #232]	@ (800e20c <sen5x_printvalues+0x19c>)
 800e122:	1c18      	adds	r0, r3, #0
 800e124:	f7f2 fdbe 	bl	8000ca4 <__aeabi_fdiv>
 800e128:	1c03      	adds	r3, r0, #0
 800e12a:	1c18      	adds	r0, r3, #0
 800e12c:	f7f5 fbb2 	bl	8003894 <__aeabi_f2d>
 800e130:	0002      	movs	r2, r0
 800e132:	000b      	movs	r3, r1
 800e134:	4939      	ldr	r1, [pc, #228]	@ (800e21c <sen5x_printvalues+0x1ac>)
 800e136:	0008      	movs	r0, r1
 800e138:	f017 f946 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e13c:	4b31      	ldr	r3, [pc, #196]	@ (800e204 <sen5x_printvalues+0x194>)
 800e13e:	2208      	movs	r2, #8
 800e140:	5e9b      	ldrsh	r3, [r3, r2]
 800e142:	4a37      	ldr	r2, [pc, #220]	@ (800e220 <sen5x_printvalues+0x1b0>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d014      	beq.n	800e172 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e148:	4b2e      	ldr	r3, [pc, #184]	@ (800e204 <sen5x_printvalues+0x194>)
 800e14a:	2208      	movs	r2, #8
 800e14c:	5e9b      	ldrsh	r3, [r3, r2]
 800e14e:	0018      	movs	r0, r3
 800e150:	f7f3 fb6a 	bl	8001828 <__aeabi_i2f>
 800e154:	1c03      	adds	r3, r0, #0
 800e156:	4933      	ldr	r1, [pc, #204]	@ (800e224 <sen5x_printvalues+0x1b4>)
 800e158:	1c18      	adds	r0, r3, #0
 800e15a:	f7f2 fda3 	bl	8000ca4 <__aeabi_fdiv>
 800e15e:	1c03      	adds	r3, r0, #0
 800e160:	1c18      	adds	r0, r3, #0
 800e162:	f7f5 fb97 	bl	8003894 <__aeabi_f2d>
 800e166:	0002      	movs	r2, r0
 800e168:	000b      	movs	r3, r1
 800e16a:	492f      	ldr	r1, [pc, #188]	@ (800e228 <sen5x_printvalues+0x1b8>)
 800e16c:	0008      	movs	r0, r1
 800e16e:	f017 f92b 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e172:	4b24      	ldr	r3, [pc, #144]	@ (800e204 <sen5x_printvalues+0x194>)
 800e174:	220a      	movs	r2, #10
 800e176:	5e9b      	ldrsh	r3, [r3, r2]
 800e178:	4a29      	ldr	r2, [pc, #164]	@ (800e220 <sen5x_printvalues+0x1b0>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d014      	beq.n	800e1a8 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e17e:	4b21      	ldr	r3, [pc, #132]	@ (800e204 <sen5x_printvalues+0x194>)
 800e180:	220a      	movs	r2, #10
 800e182:	5e9b      	ldrsh	r3, [r3, r2]
 800e184:	0018      	movs	r0, r3
 800e186:	f7f3 fb4f 	bl	8001828 <__aeabi_i2f>
 800e18a:	1c03      	adds	r3, r0, #0
 800e18c:	4927      	ldr	r1, [pc, #156]	@ (800e22c <sen5x_printvalues+0x1bc>)
 800e18e:	1c18      	adds	r0, r3, #0
 800e190:	f7f2 fd88 	bl	8000ca4 <__aeabi_fdiv>
 800e194:	1c03      	adds	r3, r0, #0
 800e196:	1c18      	adds	r0, r3, #0
 800e198:	f7f5 fb7c 	bl	8003894 <__aeabi_f2d>
 800e19c:	0002      	movs	r2, r0
 800e19e:	000b      	movs	r3, r1
 800e1a0:	4923      	ldr	r1, [pc, #140]	@ (800e230 <sen5x_printvalues+0x1c0>)
 800e1a2:	0008      	movs	r0, r1
 800e1a4:	f017 f910 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e1a8:	4b16      	ldr	r3, [pc, #88]	@ (800e204 <sen5x_printvalues+0x194>)
 800e1aa:	220c      	movs	r2, #12
 800e1ac:	5e9b      	ldrsh	r3, [r3, r2]
 800e1ae:	4a1c      	ldr	r2, [pc, #112]	@ (800e220 <sen5x_printvalues+0x1b0>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d00e      	beq.n	800e1d2 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e1b4:	4b13      	ldr	r3, [pc, #76]	@ (800e204 <sen5x_printvalues+0x194>)
 800e1b6:	220c      	movs	r2, #12
 800e1b8:	5e9b      	ldrsh	r3, [r3, r2]
 800e1ba:	210a      	movs	r1, #10
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f7f2 f87b 	bl	80002b8 <__divsi3>
 800e1c2:	0003      	movs	r3, r0
 800e1c4:	b21b      	sxth	r3, r3
 800e1c6:	001a      	movs	r2, r3
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e234 <sen5x_printvalues+0x1c4>)
 800e1ca:	0011      	movs	r1, r2
 800e1cc:	0018      	movs	r0, r3
 800e1ce:	f017 f8fb 	bl	80253c8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e1d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e204 <sen5x_printvalues+0x194>)
 800e1d4:	220e      	movs	r2, #14
 800e1d6:	5e9b      	ldrsh	r3, [r3, r2]
 800e1d8:	4a11      	ldr	r2, [pc, #68]	@ (800e220 <sen5x_printvalues+0x1b0>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d00e      	beq.n	800e1fc <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800e1de:	4b09      	ldr	r3, [pc, #36]	@ (800e204 <sen5x_printvalues+0x194>)
 800e1e0:	220e      	movs	r2, #14
 800e1e2:	5e9b      	ldrsh	r3, [r3, r2]
 800e1e4:	210a      	movs	r1, #10
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	f7f2 f866 	bl	80002b8 <__divsi3>
 800e1ec:	0003      	movs	r3, r0
 800e1ee:	b21b      	sxth	r3, r3
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	4b11      	ldr	r3, [pc, #68]	@ (800e238 <sen5x_printvalues+0x1c8>)
 800e1f4:	0011      	movs	r1, r2
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	f017 f8e6 	bl	80253c8 <iprintf>
  }
}
 800e1fc:	46c0      	nop			@ (mov r8, r8)
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	46c0      	nop			@ (mov r8, r8)
 800e204:	20000ecc 	.word	0x20000ecc
 800e208:	0000ffff 	.word	0x0000ffff
 800e20c:	41200000 	.word	0x41200000
 800e210:	0802cd4c 	.word	0x0802cd4c
 800e214:	0802cd78 	.word	0x0802cd78
 800e218:	0802cda4 	.word	0x0802cda4
 800e21c:	0802cdd0 	.word	0x0802cdd0
 800e220:	00007fff 	.word	0x00007fff
 800e224:	42c80000 	.word	0x42c80000
 800e228:	0802cdfc 	.word	0x0802cdfc
 800e22c:	43480000 	.word	0x43480000
 800e230:	0802ce20 	.word	0x0802ce20
 800e234:	0802ce48 	.word	0x0802ce48
 800e238:	0802ce60 	.word	0x0802ce60

0800e23c <sen5xStore>:

void sen5xStore() {
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e240:	4b41      	ldr	r3, [pc, #260]	@ (800e348 <sen5xStore+0x10c>)
 800e242:	881b      	ldrh	r3, [r3, #0]
 800e244:	4a41      	ldr	r2, [pc, #260]	@ (800e34c <sen5xStore+0x110>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d004      	beq.n	800e254 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800e24a:	4b3f      	ldr	r3, [pc, #252]	@ (800e348 <sen5xStore+0x10c>)
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	0018      	movs	r0, r3
 800e250:	f7f6 fc8e 	bl	8004b70 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e254:	4b3c      	ldr	r3, [pc, #240]	@ (800e348 <sen5xStore+0x10c>)
 800e256:	885b      	ldrh	r3, [r3, #2]
 800e258:	4a3c      	ldr	r2, [pc, #240]	@ (800e34c <sen5xStore+0x110>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d004      	beq.n	800e268 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800e25e:	4b3a      	ldr	r3, [pc, #232]	@ (800e348 <sen5xStore+0x10c>)
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	0018      	movs	r0, r3
 800e264:	f7f6 fcb0 	bl	8004bc8 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e268:	4b37      	ldr	r3, [pc, #220]	@ (800e348 <sen5xStore+0x10c>)
 800e26a:	889b      	ldrh	r3, [r3, #4]
 800e26c:	4a37      	ldr	r2, [pc, #220]	@ (800e34c <sen5xStore+0x110>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d004      	beq.n	800e27c <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800e272:	4b35      	ldr	r3, [pc, #212]	@ (800e348 <sen5xStore+0x10c>)
 800e274:	889b      	ldrh	r3, [r3, #4]
 800e276:	0018      	movs	r0, r3
 800e278:	f7f6 fcd2 	bl	8004c20 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e27c:	4b32      	ldr	r3, [pc, #200]	@ (800e348 <sen5xStore+0x10c>)
 800e27e:	88db      	ldrh	r3, [r3, #6]
 800e280:	4a32      	ldr	r2, [pc, #200]	@ (800e34c <sen5xStore+0x110>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d004      	beq.n	800e290 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800e286:	4b30      	ldr	r3, [pc, #192]	@ (800e348 <sen5xStore+0x10c>)
 800e288:	88db      	ldrh	r3, [r3, #6]
 800e28a:	0018      	movs	r0, r3
 800e28c:	f7f6 fcf4 	bl	8004c78 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e290:	4b2f      	ldr	r3, [pc, #188]	@ (800e350 <sen5xStore+0x114>)
 800e292:	791b      	ldrb	r3, [r3, #4]
 800e294:	2b34      	cmp	r3, #52	@ 0x34
 800e296:	d003      	beq.n	800e2a0 <sen5xStore+0x64>
 800e298:	4b2d      	ldr	r3, [pc, #180]	@ (800e350 <sen5xStore+0x114>)
 800e29a:	791b      	ldrb	r3, [r3, #4]
 800e29c:	2b35      	cmp	r3, #53	@ 0x35
 800e29e:	d14f      	bne.n	800e340 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800e2a0:	4b29      	ldr	r3, [pc, #164]	@ (800e348 <sen5xStore+0x10c>)
 800e2a2:	220a      	movs	r2, #10
 800e2a4:	5e9b      	ldrsh	r3, [r3, r2]
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	f7f3 fabe 	bl	8001828 <__aeabi_i2f>
 800e2ac:	1c04      	adds	r4, r0, #0
 800e2ae:	4b26      	ldr	r3, [pc, #152]	@ (800e348 <sen5xStore+0x10c>)
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	5e9b      	ldrsh	r3, [r3, r2]
 800e2b4:	0018      	movs	r0, r3
 800e2b6:	f7f3 fab7 	bl	8001828 <__aeabi_i2f>
 800e2ba:	1c03      	adds	r3, r0, #0
 800e2bc:	1c19      	adds	r1, r3, #0
 800e2be:	1c20      	adds	r0, r4, #0
 800e2c0:	f7f6 fd24 	bl	8004d0c <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800e2c4:	4b23      	ldr	r3, [pc, #140]	@ (800e354 <sen5xStore+0x118>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	4053      	eors	r3, r2
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d103      	bne.n	800e2da <sen5xStore+0x9e>
 800e2d2:	4b21      	ldr	r3, [pc, #132]	@ (800e358 <sen5xStore+0x11c>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d032      	beq.n	800e340 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800e2da:	4b1b      	ldr	r3, [pc, #108]	@ (800e348 <sen5xStore+0x10c>)
 800e2dc:	220c      	movs	r2, #12
 800e2de:	5e9b      	ldrsh	r3, [r3, r2]
 800e2e0:	4a1e      	ldr	r2, [pc, #120]	@ (800e35c <sen5xStore+0x120>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d019      	beq.n	800e31a <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800e2e6:	4b18      	ldr	r3, [pc, #96]	@ (800e348 <sen5xStore+0x10c>)
 800e2e8:	220c      	movs	r2, #12
 800e2ea:	5e9b      	ldrsh	r3, [r3, r2]
 800e2ec:	210a      	movs	r1, #10
 800e2ee:	0018      	movs	r0, r3
 800e2f0:	f7f1 ffe2 	bl	80002b8 <__divsi3>
 800e2f4:	0003      	movs	r3, r0
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	0018      	movs	r0, r3
 800e2fc:	f003 fee2 	bl	80120c4 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800e300:	4b11      	ldr	r3, [pc, #68]	@ (800e348 <sen5xStore+0x10c>)
 800e302:	220c      	movs	r2, #12
 800e304:	5e9b      	ldrsh	r3, [r3, r2]
 800e306:	210a      	movs	r1, #10
 800e308:	0018      	movs	r0, r3
 800e30a:	f7f1 ffd5 	bl	80002b8 <__divsi3>
 800e30e:	0003      	movs	r3, r0
 800e310:	b21b      	sxth	r3, r3
 800e312:	b29b      	uxth	r3, r3
 800e314:	0018      	movs	r0, r3
 800e316:	f7f6 fba3 	bl	8004a60 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800e31a:	4b0b      	ldr	r3, [pc, #44]	@ (800e348 <sen5xStore+0x10c>)
 800e31c:	220e      	movs	r2, #14
 800e31e:	5e9b      	ldrsh	r3, [r3, r2]
 800e320:	4a0e      	ldr	r2, [pc, #56]	@ (800e35c <sen5xStore+0x120>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d00c      	beq.n	800e340 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800e326:	4b08      	ldr	r3, [pc, #32]	@ (800e348 <sen5xStore+0x10c>)
 800e328:	220e      	movs	r2, #14
 800e32a:	5e9b      	ldrsh	r3, [r3, r2]
 800e32c:	210a      	movs	r1, #10
 800e32e:	0018      	movs	r0, r3
 800e330:	f7f1 ffc2 	bl	80002b8 <__divsi3>
 800e334:	0003      	movs	r3, r0
 800e336:	b21b      	sxth	r3, r3
 800e338:	b29b      	uxth	r3, r3
 800e33a:	0018      	movs	r0, r3
 800e33c:	f7f6 fcc8 	bl	8004cd0 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800e340:	46c0      	nop			@ (mov r8, r8)
 800e342:	46bd      	mov	sp, r7
 800e344:	bdb0      	pop	{r4, r5, r7, pc}
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	20000ecc 	.word	0x20000ecc
 800e34c:	0000ffff 	.word	0x0000ffff
 800e350:	20000ebc 	.word	0x20000ebc
 800e354:	20000eba 	.word	0x20000eba
 800e358:	20001e49 	.word	0x20001e49
 800e35c:	00007fff 	.word	0x00007fff

0800e360 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800e360:	b590      	push	{r4, r7, lr}
 800e362:	b085      	sub	sp, #20
 800e364:	af02      	add	r7, sp, #8
 800e366:	6039      	str	r1, [r7, #0]
 800e368:	0011      	movs	r1, r2
 800e36a:	1dfb      	adds	r3, r7, #7
 800e36c:	1c02      	adds	r2, r0, #0
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	1d3b      	adds	r3, r7, #4
 800e372:	1c0a      	adds	r2, r1, #0
 800e374:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800e376:	1dfb      	adds	r3, r7, #7
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	18db      	adds	r3, r3, r3
 800e37e:	b299      	uxth	r1, r3
 800e380:	1d3b      	adds	r3, r7, #4
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	4805      	ldr	r0, [pc, #20]	@ (800e39c <sensirion_i2c_hal_read+0x3c>)
 800e388:	2464      	movs	r4, #100	@ 0x64
 800e38a:	9400      	str	r4, [sp, #0]
 800e38c:	f007 f8aa 	bl	80154e4 <HAL_I2C_Master_Receive>
 800e390:	0003      	movs	r3, r0
 800e392:	b25b      	sxtb	r3, r3
}
 800e394:	0018      	movs	r0, r3
 800e396:	46bd      	mov	sp, r7
 800e398:	b003      	add	sp, #12
 800e39a:	bd90      	pop	{r4, r7, pc}
 800e39c:	20000c90 	.word	0x20000c90

0800e3a0 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af02      	add	r7, sp, #8
 800e3a6:	6039      	str	r1, [r7, #0]
 800e3a8:	0011      	movs	r1, r2
 800e3aa:	1dfb      	adds	r3, r7, #7
 800e3ac:	1c02      	adds	r2, r0, #0
 800e3ae:	701a      	strb	r2, [r3, #0]
 800e3b0:	1d3b      	adds	r3, r7, #4
 800e3b2:	1c0a      	adds	r2, r1, #0
 800e3b4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800e3b6:	1dfb      	adds	r3, r7, #7
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	18db      	adds	r3, r3, r3
 800e3be:	b299      	uxth	r1, r3
 800e3c0:	1d3b      	adds	r3, r7, #4
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	4805      	ldr	r0, [pc, #20]	@ (800e3dc <sensirion_i2c_hal_write+0x3c>)
 800e3c8:	2464      	movs	r4, #100	@ 0x64
 800e3ca:	9400      	str	r4, [sp, #0]
 800e3cc:	f006 ff82 	bl	80152d4 <HAL_I2C_Master_Transmit>
 800e3d0:	0003      	movs	r3, r0
 800e3d2:	b25b      	sxtb	r3, r3
}
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	b003      	add	sp, #12
 800e3da:	bd90      	pop	{r4, r7, pc}
 800e3dc:	20000c90 	.word	0x20000c90

0800e3e0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	22fa      	movs	r2, #250	@ 0xfa
 800e3ec:	0091      	lsls	r1, r2, #2
 800e3ee:	0018      	movs	r0, r3
 800e3f0:	f7f1 fed8 	bl	80001a4 <__udivsi3>
 800e3f4:	0003      	movs	r3, r0
 800e3f6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	22fa      	movs	r2, #250	@ 0xfa
 800e3fc:	0091      	lsls	r1, r2, #2
 800e3fe:	0018      	movs	r0, r3
 800e400:	f7f1 ff56 	bl	80002b0 <__aeabi_uidivmod>
 800e404:	1e0b      	subs	r3, r1, #0
 800e406:	d002      	beq.n	800e40e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3301      	adds	r3, #1
 800e40c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	0018      	movs	r0, r3
 800e412:	f005 fc09 	bl	8013c28 <HAL_Delay>
}
 800e416:	46c0      	nop			@ (mov r8, r8)
 800e418:	46bd      	mov	sp, r7
 800e41a:	b004      	add	sp, #16
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800e426:	1d3b      	adds	r3, r7, #4
 800e428:	0018      	movs	r0, r3
 800e42a:	f000 fd2b 	bl	800ee84 <sen5x_read_device_status>
 800e42e:	0003      	movs	r3, r0
 800e430:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a2c      	ldr	r2, [pc, #176]	@ (800e4e8 <sen5x_check_for_errors+0xc8>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d107      	bne.n	800e44a <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800e43a:	4a2c      	ldr	r2, [pc, #176]	@ (800e4ec <sen5x_check_for_errors+0xcc>)
 800e43c:	4b2c      	ldr	r3, [pc, #176]	@ (800e4f0 <sen5x_check_for_errors+0xd0>)
 800e43e:	0019      	movs	r1, r3
 800e440:	2001      	movs	r0, #1
 800e442:	f004 fea7 	bl	8013194 <CreateLine>
    return true;
 800e446:	2301      	movs	r3, #1
 800e448:	e049      	b.n	800e4de <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <sen5x_check_for_errors+0x34>
    return false;
 800e450:	2300      	movs	r3, #0
 800e452:	e044      	b.n	800e4de <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	2380      	movs	r3, #128	@ 0x80
 800e458:	039b      	lsls	r3, r3, #14
 800e45a:	4013      	ands	r3, r2
 800e45c:	d005      	beq.n	800e46a <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800e45e:	4a25      	ldr	r2, [pc, #148]	@ (800e4f4 <sen5x_check_for_errors+0xd4>)
 800e460:	4b25      	ldr	r3, [pc, #148]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e462:	0019      	movs	r1, r3
 800e464:	2003      	movs	r0, #3
 800e466:	f004 fe95 	bl	8013194 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	2380      	movs	r3, #128	@ 0x80
 800e46e:	031b      	lsls	r3, r3, #12
 800e470:	4013      	ands	r3, r2
 800e472:	d005      	beq.n	800e480 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800e474:	4a21      	ldr	r2, [pc, #132]	@ (800e4fc <sen5x_check_for_errors+0xdc>)
 800e476:	4b20      	ldr	r3, [pc, #128]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e478:	0019      	movs	r1, r3
 800e47a:	2003      	movs	r0, #3
 800e47c:	f004 fe8a 	bl	8013194 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2280      	movs	r2, #128	@ 0x80
 800e484:	4013      	ands	r3, r2
 800e486:	d005      	beq.n	800e494 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800e488:	4a1d      	ldr	r2, [pc, #116]	@ (800e500 <sen5x_check_for_errors+0xe0>)
 800e48a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e48c:	0019      	movs	r1, r3
 800e48e:	2003      	movs	r0, #3
 800e490:	f004 fe80 	bl	8013194 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2240      	movs	r2, #64	@ 0x40
 800e498:	4013      	ands	r3, r2
 800e49a:	d005      	beq.n	800e4a8 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800e49c:	4a19      	ldr	r2, [pc, #100]	@ (800e504 <sen5x_check_for_errors+0xe4>)
 800e49e:	4b16      	ldr	r3, [pc, #88]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e4a0:	0019      	movs	r1, r3
 800e4a2:	2003      	movs	r0, #3
 800e4a4:	f004 fe76 	bl	8013194 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	d005      	beq.n	800e4bc <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800e4b0:	4a15      	ldr	r2, [pc, #84]	@ (800e508 <sen5x_check_for_errors+0xe8>)
 800e4b2:	4b11      	ldr	r3, [pc, #68]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e4b4:	0019      	movs	r1, r3
 800e4b6:	2003      	movs	r0, #3
 800e4b8:	f004 fe6c 	bl	8013194 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2210      	movs	r2, #16
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	d005      	beq.n	800e4d0 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800e4c4:	4a11      	ldr	r2, [pc, #68]	@ (800e50c <sen5x_check_for_errors+0xec>)
 800e4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e4c8:	0019      	movs	r1, r3
 800e4ca:	2003      	movs	r0, #3
 800e4cc:	f004 fe62 	bl	8013194 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a0f      	ldr	r2, [pc, #60]	@ (800e510 <sen5x_check_for_errors+0xf0>)
 800e4d4:	4908      	ldr	r1, [pc, #32]	@ (800e4f8 <sen5x_check_for_errors+0xd8>)
 800e4d6:	2003      	movs	r0, #3
 800e4d8:	f004 fe5c 	bl	8013194 <CreateLine>
  return true;
 800e4dc:	2301      	movs	r3, #1
}
 800e4de:	0018      	movs	r0, r3
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b002      	add	sp, #8
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	46c0      	nop			@ (mov r8, r8)
 800e4e8:	0000d206 	.word	0x0000d206
 800e4ec:	0802ce78 	.word	0x0802ce78
 800e4f0:	0802c9fc 	.word	0x0802c9fc
 800e4f4:	0802ceb8 	.word	0x0802ceb8
 800e4f8:	0802c9d0 	.word	0x0802c9d0
 800e4fc:	0802ced8 	.word	0x0802ced8
 800e500:	0802cef4 	.word	0x0802cef4
 800e504:	0802cf18 	.word	0x0802cf18
 800e508:	0802cf38 	.word	0x0802cf38
 800e50c:	0802cf4c 	.word	0x0802cf4c
 800e510:	0802cf88 	.word	0x0802cf88

0800e514 <set_light_on_state>:

void set_light_on_state(void) {
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e518:	4b15      	ldr	r3, [pc, #84]	@ (800e570 <set_light_on_state+0x5c>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2201      	movs	r2, #1
 800e51e:	4053      	eors	r3, r2
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d008      	beq.n	800e538 <set_light_on_state+0x24>
    sen5x_Power_On();
 800e526:	f7ff fb11 	bl	800db4c <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e52a:	4a12      	ldr	r2, [pc, #72]	@ (800e574 <set_light_on_state+0x60>)
 800e52c:	4b12      	ldr	r3, [pc, #72]	@ (800e578 <set_light_on_state+0x64>)
 800e52e:	0019      	movs	r1, r3
 800e530:	2003      	movs	r0, #3
 800e532:	f004 fe2f 	bl	8013194 <CreateLine>
 800e536:	e00a      	b.n	800e54e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e538:	f005 fb6c 	bl	8013c14 <HAL_GetTick>
 800e53c:	0002      	movs	r2, r0
 800e53e:	4b0f      	ldr	r3, [pc, #60]	@ (800e57c <set_light_on_state+0x68>)
 800e540:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e542:	4a0f      	ldr	r2, [pc, #60]	@ (800e580 <set_light_on_state+0x6c>)
 800e544:	4b0c      	ldr	r3, [pc, #48]	@ (800e578 <set_light_on_state+0x64>)
 800e546:	0019      	movs	r1, r3
 800e548:	2003      	movs	r0, #3
 800e54a:	f004 fe23 	bl	8013194 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e54e:	f7ff fc8d 	bl	800de6c <sen5x_lightup_measurement>
 800e552:	1e03      	subs	r3, r0, #0
 800e554:	d005      	beq.n	800e562 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e556:	4a0b      	ldr	r2, [pc, #44]	@ (800e584 <set_light_on_state+0x70>)
 800e558:	4b0b      	ldr	r3, [pc, #44]	@ (800e588 <set_light_on_state+0x74>)
 800e55a:	0019      	movs	r1, r3
 800e55c:	2001      	movs	r0, #1
 800e55e:	f004 fe19 	bl	8013194 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e562:	4b0a      	ldr	r3, [pc, #40]	@ (800e58c <set_light_on_state+0x78>)
 800e564:	2203      	movs	r2, #3
 800e566:	701a      	strb	r2, [r3, #0]
}
 800e568:	46c0      	nop			@ (mov r8, r8)
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	46c0      	nop			@ (mov r8, r8)
 800e570:	20000eb9 	.word	0x20000eb9
 800e574:	0802cfb8 	.word	0x0802cfb8
 800e578:	0802c9d0 	.word	0x0802c9d0
 800e57c:	20000ec8 	.word	0x20000ec8
 800e580:	0802cfd8 	.word	0x0802cfd8
 800e584:	0802cff0 	.word	0x0802cff0
 800e588:	0802c9fc 	.word	0x0802c9fc
 800e58c:	2000009e 	.word	0x2000009e

0800e590 <sen5x_statemachine>:

void sen5x_statemachine() {
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e596:	1dfb      	adds	r3, r7, #7
 800e598:	2200      	movs	r2, #0
 800e59a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e59c:	4b92      	ldr	r3, [pc, #584]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f004 fda1 	bl	80130e8 <TimestampIsReached>
 800e5a6:	1e03      	subs	r3, r0, #0
 800e5a8:	d100      	bne.n	800e5ac <sen5x_statemachine+0x1c>
 800e5aa:	e118      	b.n	800e7de <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800e5ac:	4b8f      	ldr	r3, [pc, #572]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b05      	cmp	r3, #5
 800e5b2:	d900      	bls.n	800e5b6 <sen5x_statemachine+0x26>
 800e5b4:	e113      	b.n	800e7de <sen5x_statemachine+0x24e>
 800e5b6:	009a      	lsls	r2, r3, #2
 800e5b8:	4b8d      	ldr	r3, [pc, #564]	@ (800e7f0 <sen5x_statemachine+0x260>)
 800e5ba:	18d3      	adds	r3, r2, r3
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e5c0:	4a8c      	ldr	r2, [pc, #560]	@ (800e7f4 <sen5x_statemachine+0x264>)
 800e5c2:	4b8d      	ldr	r3, [pc, #564]	@ (800e7f8 <sen5x_statemachine+0x268>)
 800e5c4:	0019      	movs	r1, r3
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	f004 fde4 	bl	8013194 <CreateLine>
      SetPMSensorStatus(false);
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	f7fe fa57 	bl	800ca80 <SetPMSensorStatus>
      DisablePMSensor();
 800e5d2:	f7fe f9d9 	bl	800c988 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e5d6:	f005 fb1d 	bl	8013c14 <HAL_GetTick>
 800e5da:	0003      	movs	r3, r0
 800e5dc:	4a87      	ldr	r2, [pc, #540]	@ (800e7fc <sen5x_statemachine+0x26c>)
 800e5de:	189a      	adds	r2, r3, r2
 800e5e0:	4b81      	ldr	r3, [pc, #516]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e5e2:	601a      	str	r2, [r3, #0]
      break;
 800e5e4:	e0fb      	b.n	800e7de <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e5e6:	f005 fb15 	bl	8013c14 <HAL_GetTick>
 800e5ea:	0003      	movs	r3, r0
 800e5ec:	4a84      	ldr	r2, [pc, #528]	@ (800e800 <sen5x_statemachine+0x270>)
 800e5ee:	189a      	adds	r2, r3, r2
 800e5f0:	4b7d      	ldr	r3, [pc, #500]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e5f2:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e5f4:	f7ff ff8e 	bl	800e514 <set_light_on_state>
      break;
 800e5f8:	e0f1      	b.n	800e7de <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e5fa:	4b7c      	ldr	r3, [pc, #496]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e600:	4b80      	ldr	r3, [pc, #512]	@ (800e804 <sen5x_statemachine+0x274>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b05      	cmp	r3, #5
 800e606:	d905      	bls.n	800e614 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e608:	4b78      	ldr	r3, [pc, #480]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e60e:	f7ff facd 	bl	800dbac <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e612:	e0e1      	b.n	800e7d8 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800e614:	f7ff ff04 	bl	800e420 <sen5x_check_for_errors>
 800e618:	1e03      	subs	r3, r0, #0
 800e61a:	d028      	beq.n	800e66e <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800e61c:	f000 fc84 	bl	800ef28 <sen5x_device_reset>
 800e620:	1e03      	subs	r3, r0, #0
 800e622:	d018      	beq.n	800e656 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800e624:	4a78      	ldr	r2, [pc, #480]	@ (800e808 <sen5x_statemachine+0x278>)
 800e626:	4b74      	ldr	r3, [pc, #464]	@ (800e7f8 <sen5x_statemachine+0x268>)
 800e628:	0019      	movs	r1, r3
 800e62a:	2001      	movs	r0, #1
 800e62c:	f004 fdb2 	bl	8013194 <CreateLine>
            sen5xErrors++;
 800e630:	4b74      	ldr	r3, [pc, #464]	@ (800e804 <sen5x_statemachine+0x274>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	b2da      	uxtb	r2, r3
 800e638:	4b72      	ldr	r3, [pc, #456]	@ (800e804 <sen5x_statemachine+0x274>)
 800e63a:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800e63c:	f7ff fab6 	bl	800dbac <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e640:	f005 fae8 	bl	8013c14 <HAL_GetTick>
 800e644:	0003      	movs	r3, r0
 800e646:	4a6e      	ldr	r2, [pc, #440]	@ (800e800 <sen5x_statemachine+0x270>)
 800e648:	189a      	adds	r2, r3, r2
 800e64a:	4b67      	ldr	r3, [pc, #412]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e64c:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800e64e:	4b67      	ldr	r3, [pc, #412]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e650:	2205      	movs	r2, #5
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	e005      	b.n	800e662 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800e656:	4a6d      	ldr	r2, [pc, #436]	@ (800e80c <sen5x_statemachine+0x27c>)
 800e658:	4b6d      	ldr	r3, [pc, #436]	@ (800e810 <sen5x_statemachine+0x280>)
 800e65a:	0019      	movs	r1, r3
 800e65c:	2002      	movs	r0, #2
 800e65e:	f004 fd99 	bl	8013194 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e662:	f005 fad7 	bl	8013c14 <HAL_GetTick>
 800e666:	0002      	movs	r2, r0
 800e668:	4b5f      	ldr	r3, [pc, #380]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e66a:	601a      	str	r2, [r3, #0]
      break;
 800e66c:	e0b4      	b.n	800e7d8 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800e66e:	4b65      	ldr	r3, [pc, #404]	@ (800e804 <sen5x_statemachine+0x274>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d100      	bne.n	800e678 <sen5x_statemachine+0xe8>
 800e676:	e0af      	b.n	800e7d8 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800e678:	4b62      	ldr	r3, [pc, #392]	@ (800e804 <sen5x_statemachine+0x274>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e67e:	4a65      	ldr	r2, [pc, #404]	@ (800e814 <sen5x_statemachine+0x284>)
 800e680:	4b65      	ldr	r3, [pc, #404]	@ (800e818 <sen5x_statemachine+0x288>)
 800e682:	0019      	movs	r1, r3
 800e684:	2003      	movs	r0, #3
 800e686:	f004 fd85 	bl	8013194 <CreateLine>
      break;
 800e68a:	e0a5      	b.n	800e7d8 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e68c:	1dfb      	adds	r3, r7, #7
 800e68e:	0018      	movs	r0, r3
 800e690:	f000 f966 	bl	800e960 <sen5x_read_data_ready>
      if (data_ready) {
 800e694:	1dfb      	adds	r3, r7, #7
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d038      	beq.n	800e70e <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800e69c:	f003 fc10 	bl	8011ec0 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e6a0:	4b5e      	ldr	r3, [pc, #376]	@ (800e81c <sen5x_statemachine+0x28c>)
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f7ff fc88 	bl	800dfb8 <sen5x_read_measurement>
 800e6a8:	1e03      	subs	r3, r0, #0
 800e6aa:	d017      	beq.n	800e6dc <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800e6ac:	4a5c      	ldr	r2, [pc, #368]	@ (800e820 <sen5x_statemachine+0x290>)
 800e6ae:	4b52      	ldr	r3, [pc, #328]	@ (800e7f8 <sen5x_statemachine+0x268>)
 800e6b0:	0019      	movs	r1, r3
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	f004 fd6e 	bl	8013194 <CreateLine>
          sen5xErrors++;
 800e6b8:	4b52      	ldr	r3, [pc, #328]	@ (800e804 <sen5x_statemachine+0x274>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	4b50      	ldr	r3, [pc, #320]	@ (800e804 <sen5x_statemachine+0x274>)
 800e6c2:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800e6c4:	f7ff fa72 	bl	800dbac <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e6c8:	f005 faa4 	bl	8013c14 <HAL_GetTick>
 800e6cc:	0003      	movs	r3, r0
 800e6ce:	4a4c      	ldr	r2, [pc, #304]	@ (800e800 <sen5x_statemachine+0x270>)
 800e6d0:	189a      	adds	r2, r3, r2
 800e6d2:	4b45      	ldr	r3, [pc, #276]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e6d4:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800e6d6:	4b45      	ldr	r3, [pc, #276]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e6d8:	2205      	movs	r2, #5
 800e6da:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e6dc:	4b51      	ldr	r3, [pc, #324]	@ (800e824 <sen5x_statemachine+0x294>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	4b4f      	ldr	r3, [pc, #316]	@ (800e824 <sen5x_statemachine+0x294>)
 800e6e6:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e6e8:	4b4e      	ldr	r3, [pc, #312]	@ (800e824 <sen5x_statemachine+0x294>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b1f      	cmp	r3, #31
 800e6ee:	d102      	bne.n	800e6f6 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800e6f0:	4b4c      	ldr	r3, [pc, #304]	@ (800e824 <sen5x_statemachine+0x294>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e6f6:	4b4b      	ldr	r3, [pc, #300]	@ (800e824 <sen5x_statemachine+0x294>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d901      	bls.n	800e702 <sen5x_statemachine+0x172>
          sen5xStore();
 800e6fe:	f7ff fd9d 	bl	800e23c <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e702:	4b48      	ldr	r3, [pc, #288]	@ (800e824 <sen5x_statemachine+0x294>)
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b02      	cmp	r3, #2
 800e708:	d101      	bne.n	800e70e <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e70a:	f7ff fcb1 	bl	800e070 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e70e:	4b46      	ldr	r3, [pc, #280]	@ (800e828 <sen5x_statemachine+0x298>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <sen5x_statemachine+0x18e>
 800e716:	4b43      	ldr	r3, [pc, #268]	@ (800e824 <sen5x_statemachine+0x294>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d95e      	bls.n	800e7dc <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800e71e:	4b33      	ldr	r3, [pc, #204]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e720:	2204      	movs	r2, #4
 800e722:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e724:	e05a      	b.n	800e7dc <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800e726:	4b41      	ldr	r3, [pc, #260]	@ (800e82c <sen5x_statemachine+0x29c>)
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d11e      	bne.n	800e76c <sen5x_statemachine+0x1dc>
 800e72e:	4b40      	ldr	r3, [pc, #256]	@ (800e830 <sen5x_statemachine+0x2a0>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d11a      	bne.n	800e76c <sen5x_statemachine+0x1dc>
 800e736:	4b3f      	ldr	r3, [pc, #252]	@ (800e834 <sen5x_statemachine+0x2a4>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2201      	movs	r2, #1
 800e73c:	4053      	eors	r3, r2
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	d013      	beq.n	800e76c <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800e744:	f000 f9f2 	bl	800eb2c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e748:	4a3b      	ldr	r2, [pc, #236]	@ (800e838 <sen5x_statemachine+0x2a8>)
 800e74a:	4b31      	ldr	r3, [pc, #196]	@ (800e810 <sen5x_statemachine+0x280>)
 800e74c:	0019      	movs	r1, r3
 800e74e:	2002      	movs	r0, #2
 800e750:	f004 fd20 	bl	8013194 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e754:	f005 fa5e 	bl	8013c14 <HAL_GetTick>
 800e758:	0003      	movs	r3, r0
 800e75a:	4a38      	ldr	r2, [pc, #224]	@ (800e83c <sen5x_statemachine+0x2ac>)
 800e75c:	189a      	adds	r2, r3, r2
 800e75e:	4b22      	ldr	r3, [pc, #136]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e760:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e762:	4b34      	ldr	r3, [pc, #208]	@ (800e834 <sen5x_statemachine+0x2a4>)
 800e764:	2201      	movs	r2, #1
 800e766:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e768:	f7ff fb80 	bl	800de6c <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e76c:	4b1f      	ldr	r3, [pc, #124]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e76e:	2205      	movs	r2, #5
 800e770:	701a      	strb	r2, [r3, #0]
      break;
 800e772:	e034      	b.n	800e7de <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e774:	4b2c      	ldr	r3, [pc, #176]	@ (800e828 <sen5x_statemachine+0x298>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2201      	movs	r2, #1
 800e77a:	4053      	eors	r3, r2
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01c      	beq.n	800e7bc <sen5x_statemachine+0x22c>
 800e782:	4b2f      	ldr	r3, [pc, #188]	@ (800e840 <sen5x_statemachine+0x2b0>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2201      	movs	r2, #1
 800e788:	4053      	eors	r3, r2
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d015      	beq.n	800e7bc <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800e790:	f7ff fbb8 	bl	800df04 <sen5x_extinguish_measurement>
 800e794:	1e03      	subs	r3, r0, #0
 800e796:	d005      	beq.n	800e7a4 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800e798:	4a2a      	ldr	r2, [pc, #168]	@ (800e844 <sen5x_statemachine+0x2b4>)
 800e79a:	4b17      	ldr	r3, [pc, #92]	@ (800e7f8 <sen5x_statemachine+0x268>)
 800e79c:	0019      	movs	r1, r3
 800e79e:	2001      	movs	r0, #1
 800e7a0:	f004 fcf8 	bl	8013194 <CreateLine>
        }
        sen5xSamples = 0;
 800e7a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e824 <sen5x_statemachine+0x294>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e7aa:	f7ff f9ff 	bl	800dbac <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	f7fe f966 	bl	800ca80 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	701a      	strb	r2, [r3, #0]
 800e7ba:	e002      	b.n	800e7c2 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e7ec <sen5x_statemachine+0x25c>)
 800e7be:	2203      	movs	r2, #3
 800e7c0:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e7c2:	f003 fba3 	bl	8011f0c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e7c6:	f005 fa25 	bl	8013c14 <HAL_GetTick>
 800e7ca:	0003      	movs	r3, r0
 800e7cc:	22fa      	movs	r2, #250	@ 0xfa
 800e7ce:	0092      	lsls	r2, r2, #2
 800e7d0:	189a      	adds	r2, r3, r2
 800e7d2:	4b05      	ldr	r3, [pc, #20]	@ (800e7e8 <sen5x_statemachine+0x258>)
 800e7d4:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e7d6:	e002      	b.n	800e7de <sen5x_statemachine+0x24e>
      break;
 800e7d8:	46c0      	nop			@ (mov r8, r8)
 800e7da:	e000      	b.n	800e7de <sen5x_statemachine+0x24e>
      break;
 800e7dc:	46c0      	nop			@ (mov r8, r8)
}
 800e7de:	46c0      	nop			@ (mov r8, r8)
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	b002      	add	sp, #8
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	46c0      	nop			@ (mov r8, r8)
 800e7e8:	20000ec8 	.word	0x20000ec8
 800e7ec:	2000009e 	.word	0x2000009e
 800e7f0:	0802dafc 	.word	0x0802dafc
 800e7f4:	0802d01c 	.word	0x0802d01c
 800e7f8:	0802c9fc 	.word	0x0802c9fc
 800e7fc:	002fefd8 	.word	0x002fefd8
 800e800:	00005910 	.word	0x00005910
 800e804:	20000ec5 	.word	0x20000ec5
 800e808:	0802d04c 	.word	0x0802d04c
 800e80c:	0802d064 	.word	0x0802d064
 800e810:	0802c990 	.word	0x0802c990
 800e814:	0802d07c 	.word	0x0802d07c
 800e818:	0802c9d0 	.word	0x0802c9d0
 800e81c:	20000ecc 	.word	0x20000ecc
 800e820:	0802d090 	.word	0x0802d090
 800e824:	20000ec4 	.word	0x20000ec4
 800e828:	20001e49 	.word	0x20001e49
 800e82c:	20000b4a 	.word	0x20000b4a
 800e830:	20000b49 	.word	0x20000b49
 800e834:	20000eb8 	.word	0x20000eb8
 800e838:	0802d0c0 	.word	0x0802d0c0
 800e83c:	00002710 	.word	0x00002710
 800e840:	20001e4a 	.word	0x20001e4a
 800e844:	0802d0d8 	.word	0x0802d0d8

0800e848 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e848:	b590      	push	{r4, r7, lr}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e84e:	1dbb      	adds	r3, r7, #6
 800e850:	2200      	movs	r2, #0
 800e852:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e854:	1dbc      	adds	r4, r7, #6
 800e856:	1dbb      	adds	r3, r7, #6
 800e858:	8819      	ldrh	r1, [r3, #0]
 800e85a:	003b      	movs	r3, r7
 800e85c:	2221      	movs	r2, #33	@ 0x21
 800e85e:	0018      	movs	r0, r3
 800e860:	f001 fb57 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800e864:	0003      	movs	r3, r0
 800e866:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e868:	1d3c      	adds	r4, r7, #4
 800e86a:	1dbb      	adds	r3, r7, #6
 800e86c:	881a      	ldrh	r2, [r3, #0]
 800e86e:	003b      	movs	r3, r7
 800e870:	0019      	movs	r1, r3
 800e872:	2069      	movs	r0, #105	@ 0x69
 800e874:	f001 fbd1 	bl	801001a <sensirion_i2c_write_data>
 800e878:	0003      	movs	r3, r0
 800e87a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e87c:	1d3b      	adds	r3, r7, #4
 800e87e:	2200      	movs	r2, #0
 800e880:	5e9b      	ldrsh	r3, [r3, r2]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <sen5x_start_measurement+0x46>
        return error;
 800e886:	1d3b      	adds	r3, r7, #4
 800e888:	2200      	movs	r2, #0
 800e88a:	5e9b      	ldrsh	r3, [r3, r2]
 800e88c:	e004      	b.n	800e898 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e88e:	4b04      	ldr	r3, [pc, #16]	@ (800e8a0 <sen5x_start_measurement+0x58>)
 800e890:	0018      	movs	r0, r3
 800e892:	f7ff fda5 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e896:	2300      	movs	r3, #0
}
 800e898:	0018      	movs	r0, r3
 800e89a:	46bd      	mov	sp, r7
 800e89c:	b003      	add	sp, #12
 800e89e:	bd90      	pop	{r4, r7, pc}
 800e8a0:	0000c350 	.word	0x0000c350

0800e8a4 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e8aa:	1dbb      	adds	r3, r7, #6
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800e8b0:	1dbc      	adds	r4, r7, #6
 800e8b2:	1dbb      	adds	r3, r7, #6
 800e8b4:	8819      	ldrh	r1, [r3, #0]
 800e8b6:	003b      	movs	r3, r7
 800e8b8:	2237      	movs	r2, #55	@ 0x37
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f001 fb29 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800e8c0:	0003      	movs	r3, r0
 800e8c2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e8c4:	1d3c      	adds	r4, r7, #4
 800e8c6:	1dbb      	adds	r3, r7, #6
 800e8c8:	881a      	ldrh	r2, [r3, #0]
 800e8ca:	003b      	movs	r3, r7
 800e8cc:	0019      	movs	r1, r3
 800e8ce:	2069      	movs	r0, #105	@ 0x69
 800e8d0:	f001 fba3 	bl	801001a <sensirion_i2c_write_data>
 800e8d4:	0003      	movs	r3, r0
 800e8d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8d8:	1d3b      	adds	r3, r7, #4
 800e8da:	2200      	movs	r2, #0
 800e8dc:	5e9b      	ldrsh	r3, [r3, r2]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <sen5x_start_measurement_without_pm+0x46>
        return error;
 800e8e2:	1d3b      	adds	r3, r7, #4
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e8:	e004      	b.n	800e8f4 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e8ea:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <sen5x_start_measurement_without_pm+0x58>)
 800e8ec:	0018      	movs	r0, r3
 800e8ee:	f7ff fd77 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	0018      	movs	r0, r3
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	b003      	add	sp, #12
 800e8fa:	bd90      	pop	{r4, r7, pc}
 800e8fc:	0000c350 	.word	0x0000c350

0800e900 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e906:	1dbb      	adds	r3, r7, #6
 800e908:	2200      	movs	r2, #0
 800e90a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800e90c:	1dbc      	adds	r4, r7, #6
 800e90e:	2382      	movs	r3, #130	@ 0x82
 800e910:	005a      	lsls	r2, r3, #1
 800e912:	1dbb      	adds	r3, r7, #6
 800e914:	8819      	ldrh	r1, [r3, #0]
 800e916:	003b      	movs	r3, r7
 800e918:	0018      	movs	r0, r3
 800e91a:	f001 fafa 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800e91e:	0003      	movs	r3, r0
 800e920:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e922:	1d3c      	adds	r4, r7, #4
 800e924:	1dbb      	adds	r3, r7, #6
 800e926:	881a      	ldrh	r2, [r3, #0]
 800e928:	003b      	movs	r3, r7
 800e92a:	0019      	movs	r1, r3
 800e92c:	2069      	movs	r0, #105	@ 0x69
 800e92e:	f001 fb74 	bl	801001a <sensirion_i2c_write_data>
 800e932:	0003      	movs	r3, r0
 800e934:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e936:	1d3b      	adds	r3, r7, #4
 800e938:	2200      	movs	r2, #0
 800e93a:	5e9b      	ldrsh	r3, [r3, r2]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <sen5x_stop_measurement+0x48>
        return error;
 800e940:	1d3b      	adds	r3, r7, #4
 800e942:	2200      	movs	r2, #0
 800e944:	5e9b      	ldrsh	r3, [r3, r2]
 800e946:	e004      	b.n	800e952 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e948:	4b04      	ldr	r3, [pc, #16]	@ (800e95c <sen5x_stop_measurement+0x5c>)
 800e94a:	0018      	movs	r0, r3
 800e94c:	f7ff fd48 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e950:	2300      	movs	r3, #0
}
 800e952:	0018      	movs	r0, r3
 800e954:	46bd      	mov	sp, r7
 800e956:	b003      	add	sp, #12
 800e958:	bd90      	pop	{r4, r7, pc}
 800e95a:	46c0      	nop			@ (mov r8, r8)
 800e95c:	00030d40 	.word	0x00030d40

0800e960 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800e960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800e968:	250e      	movs	r5, #14
 800e96a:	197b      	adds	r3, r7, r5
 800e96c:	2200      	movs	r2, #0
 800e96e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800e970:	197c      	adds	r4, r7, r5
 800e972:	4a22      	ldr	r2, [pc, #136]	@ (800e9fc <sen5x_read_data_ready+0x9c>)
 800e974:	197b      	adds	r3, r7, r5
 800e976:	8819      	ldrh	r1, [r3, #0]
 800e978:	2308      	movs	r3, #8
 800e97a:	18fb      	adds	r3, r7, r3
 800e97c:	0018      	movs	r0, r3
 800e97e:	f001 fac8 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800e982:	0003      	movs	r3, r0
 800e984:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e986:	260c      	movs	r6, #12
 800e988:	19bc      	adds	r4, r7, r6
 800e98a:	197b      	adds	r3, r7, r5
 800e98c:	881a      	ldrh	r2, [r3, #0]
 800e98e:	2308      	movs	r3, #8
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	0019      	movs	r1, r3
 800e994:	2069      	movs	r0, #105	@ 0x69
 800e996:	f001 fb40 	bl	801001a <sensirion_i2c_write_data>
 800e99a:	0003      	movs	r3, r0
 800e99c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e99e:	19bb      	adds	r3, r7, r6
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d003      	beq.n	800e9b0 <sen5x_read_data_ready+0x50>
        return error;
 800e9a8:	19bb      	adds	r3, r7, r6
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ae:	e020      	b.n	800e9f2 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e9b0:	4b13      	ldr	r3, [pc, #76]	@ (800ea00 <sen5x_read_data_ready+0xa0>)
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f7ff fd14 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800e9b8:	250c      	movs	r5, #12
 800e9ba:	197c      	adds	r4, r7, r5
 800e9bc:	2308      	movs	r3, #8
 800e9be:	18fb      	adds	r3, r7, r3
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	0019      	movs	r1, r3
 800e9c4:	2069      	movs	r0, #105	@ 0x69
 800e9c6:	f001 fb40 	bl	801004a <sensirion_i2c_read_data_inplace>
 800e9ca:	0003      	movs	r3, r0
 800e9cc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e9ce:	197b      	adds	r3, r7, r5
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d003      	beq.n	800e9e0 <sen5x_read_data_ready+0x80>
        return error;
 800e9d8:	197b      	adds	r3, r7, r5
 800e9da:	2200      	movs	r2, #0
 800e9dc:	5e9b      	ldrsh	r3, [r3, r2]
 800e9de:	e008      	b.n	800e9f2 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800e9e0:	2308      	movs	r3, #8
 800e9e2:	18fb      	adds	r3, r7, r3
 800e9e4:	785b      	ldrb	r3, [r3, #1]
 800e9e6:	1e5a      	subs	r2, r3, #1
 800e9e8:	4193      	sbcs	r3, r2
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	b005      	add	sp, #20
 800e9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9fa:	46c0      	nop			@ (mov r8, r8)
 800e9fc:	00000202 	.word	0x00000202
 800ea00:	00004e20 	.word	0x00004e20

0800ea04 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800ea04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea06:	b08d      	sub	sp, #52	@ 0x34
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800ea12:	252e      	movs	r5, #46	@ 0x2e
 800ea14:	197b      	adds	r3, r7, r5
 800ea16:	2200      	movs	r2, #0
 800ea18:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800ea1a:	197c      	adds	r4, r7, r5
 800ea1c:	23f1      	movs	r3, #241	@ 0xf1
 800ea1e:	009a      	lsls	r2, r3, #2
 800ea20:	197b      	adds	r3, r7, r5
 800ea22:	8819      	ldrh	r1, [r3, #0]
 800ea24:	2314      	movs	r3, #20
 800ea26:	18fb      	adds	r3, r7, r3
 800ea28:	0018      	movs	r0, r3
 800ea2a:	f001 fa72 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800ea2e:	0003      	movs	r3, r0
 800ea30:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ea32:	262c      	movs	r6, #44	@ 0x2c
 800ea34:	19bc      	adds	r4, r7, r6
 800ea36:	197b      	adds	r3, r7, r5
 800ea38:	881a      	ldrh	r2, [r3, #0]
 800ea3a:	2314      	movs	r3, #20
 800ea3c:	18fb      	adds	r3, r7, r3
 800ea3e:	0019      	movs	r1, r3
 800ea40:	2069      	movs	r0, #105	@ 0x69
 800ea42:	f001 faea 	bl	801001a <sensirion_i2c_write_data>
 800ea46:	0003      	movs	r3, r0
 800ea48:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea4a:	19bb      	adds	r3, r7, r6
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d003      	beq.n	800ea5c <sen5x_read_measured_values+0x58>
        return error;
 800ea54:	19bb      	adds	r3, r7, r6
 800ea56:	2200      	movs	r2, #0
 800ea58:	5e9b      	ldrsh	r3, [r3, r2]
 800ea5a:	e060      	b.n	800eb1e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ea5c:	4b32      	ldr	r3, [pc, #200]	@ (800eb28 <sen5x_read_measured_values+0x124>)
 800ea5e:	0018      	movs	r0, r3
 800ea60:	f7ff fcbe 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800ea64:	252c      	movs	r5, #44	@ 0x2c
 800ea66:	197c      	adds	r4, r7, r5
 800ea68:	2314      	movs	r3, #20
 800ea6a:	18fb      	adds	r3, r7, r3
 800ea6c:	2210      	movs	r2, #16
 800ea6e:	0019      	movs	r1, r3
 800ea70:	2069      	movs	r0, #105	@ 0x69
 800ea72:	f001 faea 	bl	801004a <sensirion_i2c_read_data_inplace>
 800ea76:	0003      	movs	r3, r0
 800ea78:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea7a:	197b      	adds	r3, r7, r5
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <sen5x_read_measured_values+0x88>
        return error;
 800ea84:	197b      	adds	r3, r7, r5
 800ea86:	2200      	movs	r2, #0
 800ea88:	5e9b      	ldrsh	r3, [r3, r2]
 800ea8a:	e048      	b.n	800eb1e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800ea8c:	2414      	movs	r4, #20
 800ea8e:	193b      	adds	r3, r7, r4
 800ea90:	0018      	movs	r0, r3
 800ea92:	f000 fa79 	bl	800ef88 <sensirion_common_bytes_to_uint16_t>
 800ea96:	0003      	movs	r3, r0
 800ea98:	001a      	movs	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800ea9e:	193b      	adds	r3, r7, r4
 800eaa0:	3302      	adds	r3, #2
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f000 fa70 	bl	800ef88 <sensirion_common_bytes_to_uint16_t>
 800eaa8:	0003      	movs	r3, r0
 800eaaa:	001a      	movs	r2, r3
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800eab0:	193b      	adds	r3, r7, r4
 800eab2:	3304      	adds	r3, #4
 800eab4:	0018      	movs	r0, r3
 800eab6:	f000 fa67 	bl	800ef88 <sensirion_common_bytes_to_uint16_t>
 800eaba:	0003      	movs	r3, r0
 800eabc:	001a      	movs	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800eac2:	193b      	adds	r3, r7, r4
 800eac4:	3306      	adds	r3, #6
 800eac6:	0018      	movs	r0, r3
 800eac8:	f000 fa5e 	bl	800ef88 <sensirion_common_bytes_to_uint16_t>
 800eacc:	0003      	movs	r3, r0
 800eace:	001a      	movs	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800ead4:	193b      	adds	r3, r7, r4
 800ead6:	3308      	adds	r3, #8
 800ead8:	0018      	movs	r0, r3
 800eada:	f000 fa82 	bl	800efe2 <sensirion_common_bytes_to_int16_t>
 800eade:	0003      	movs	r3, r0
 800eae0:	001a      	movs	r2, r3
 800eae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eae4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800eae6:	193b      	adds	r3, r7, r4
 800eae8:	330a      	adds	r3, #10
 800eaea:	0018      	movs	r0, r3
 800eaec:	f000 fa79 	bl	800efe2 <sensirion_common_bytes_to_int16_t>
 800eaf0:	0003      	movs	r3, r0
 800eaf2:	001a      	movs	r2, r3
 800eaf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaf6:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800eaf8:	193b      	adds	r3, r7, r4
 800eafa:	330c      	adds	r3, #12
 800eafc:	0018      	movs	r0, r3
 800eafe:	f000 fa70 	bl	800efe2 <sensirion_common_bytes_to_int16_t>
 800eb02:	0003      	movs	r3, r0
 800eb04:	001a      	movs	r2, r3
 800eb06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb08:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800eb0a:	193b      	adds	r3, r7, r4
 800eb0c:	330e      	adds	r3, #14
 800eb0e:	0018      	movs	r0, r3
 800eb10:	f000 fa67 	bl	800efe2 <sensirion_common_bytes_to_int16_t>
 800eb14:	0003      	movs	r3, r0
 800eb16:	001a      	movs	r2, r3
 800eb18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	0018      	movs	r0, r3
 800eb20:	46bd      	mov	sp, r7
 800eb22:	b00d      	add	sp, #52	@ 0x34
 800eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb26:	46c0      	nop			@ (mov r8, r8)
 800eb28:	00004e20 	.word	0x00004e20

0800eb2c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800eb32:	1dbb      	adds	r3, r7, #6
 800eb34:	2200      	movs	r2, #0
 800eb36:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800eb38:	1dbc      	adds	r4, r7, #6
 800eb3a:	4a12      	ldr	r2, [pc, #72]	@ (800eb84 <sen5x_start_fan_cleaning+0x58>)
 800eb3c:	1dbb      	adds	r3, r7, #6
 800eb3e:	8819      	ldrh	r1, [r3, #0]
 800eb40:	003b      	movs	r3, r7
 800eb42:	0018      	movs	r0, r3
 800eb44:	f001 f9e5 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800eb48:	0003      	movs	r3, r0
 800eb4a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb4c:	1d3c      	adds	r4, r7, #4
 800eb4e:	1dbb      	adds	r3, r7, #6
 800eb50:	881a      	ldrh	r2, [r3, #0]
 800eb52:	003b      	movs	r3, r7
 800eb54:	0019      	movs	r1, r3
 800eb56:	2069      	movs	r0, #105	@ 0x69
 800eb58:	f001 fa5f 	bl	801001a <sensirion_i2c_write_data>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb60:	1d3b      	adds	r3, r7, #4
 800eb62:	2200      	movs	r2, #0
 800eb64:	5e9b      	ldrsh	r3, [r3, r2]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <sen5x_start_fan_cleaning+0x46>
        return error;
 800eb6a:	1d3b      	adds	r3, r7, #4
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	5e9b      	ldrsh	r3, [r3, r2]
 800eb70:	e004      	b.n	800eb7c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800eb72:	4b05      	ldr	r3, [pc, #20]	@ (800eb88 <sen5x_start_fan_cleaning+0x5c>)
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7ff fc33 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	b003      	add	sp, #12
 800eb82:	bd90      	pop	{r4, r7, pc}
 800eb84:	00005607 	.word	0x00005607
 800eb88:	00004e20 	.word	0x00004e20

0800eb8c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800eb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8e:	b087      	sub	sp, #28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	0004      	movs	r4, r0
 800eb94:	0008      	movs	r0, r1
 800eb96:	0011      	movs	r1, r2
 800eb98:	1dbb      	adds	r3, r7, #6
 800eb9a:	1c22      	adds	r2, r4, #0
 800eb9c:	801a      	strh	r2, [r3, #0]
 800eb9e:	1d3b      	adds	r3, r7, #4
 800eba0:	1c02      	adds	r2, r0, #0
 800eba2:	801a      	strh	r2, [r3, #0]
 800eba4:	1cbb      	adds	r3, r7, #2
 800eba6:	1c0a      	adds	r2, r1, #0
 800eba8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800ebaa:	2516      	movs	r5, #22
 800ebac:	197b      	adds	r3, r7, r5
 800ebae:	2200      	movs	r2, #0
 800ebb0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800ebb2:	197c      	adds	r4, r7, r5
 800ebb4:	4a25      	ldr	r2, [pc, #148]	@ (800ec4c <sen5x_set_temperature_offset_parameters+0xc0>)
 800ebb6:	197b      	adds	r3, r7, r5
 800ebb8:	8819      	ldrh	r1, [r3, #0]
 800ebba:	2608      	movs	r6, #8
 800ebbc:	19bb      	adds	r3, r7, r6
 800ebbe:	0018      	movs	r0, r3
 800ebc0:	f001 f9a7 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800ebc4:	0003      	movs	r3, r0
 800ebc6:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800ebc8:	197c      	adds	r4, r7, r5
 800ebca:	1dbb      	adds	r3, r7, #6
 800ebcc:	2200      	movs	r2, #0
 800ebce:	5e9a      	ldrsh	r2, [r3, r2]
 800ebd0:	197b      	adds	r3, r7, r5
 800ebd2:	8819      	ldrh	r1, [r3, #0]
 800ebd4:	19bb      	adds	r3, r7, r6
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f001 fa06 	bl	800ffe8 <sensirion_i2c_add_int16_t_to_buffer>
 800ebdc:	0003      	movs	r3, r0
 800ebde:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800ebe0:	197c      	adds	r4, r7, r5
 800ebe2:	1d3b      	adds	r3, r7, #4
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	5e9a      	ldrsh	r2, [r3, r2]
 800ebe8:	197b      	adds	r3, r7, r5
 800ebea:	8819      	ldrh	r1, [r3, #0]
 800ebec:	19bb      	adds	r3, r7, r6
 800ebee:	0018      	movs	r0, r3
 800ebf0:	f001 f9fa 	bl	800ffe8 <sensirion_i2c_add_int16_t_to_buffer>
 800ebf4:	0003      	movs	r3, r0
 800ebf6:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800ebf8:	197c      	adds	r4, r7, r5
 800ebfa:	1cbb      	adds	r3, r7, #2
 800ebfc:	881a      	ldrh	r2, [r3, #0]
 800ebfe:	197b      	adds	r3, r7, r5
 800ec00:	8819      	ldrh	r1, [r3, #0]
 800ec02:	19bb      	adds	r3, r7, r6
 800ec04:	0018      	movs	r0, r3
 800ec06:	f001 f9b0 	bl	800ff6a <sensirion_i2c_add_uint16_t_to_buffer>
 800ec0a:	0003      	movs	r3, r0
 800ec0c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ec0e:	2214      	movs	r2, #20
 800ec10:	18bc      	adds	r4, r7, r2
 800ec12:	197b      	adds	r3, r7, r5
 800ec14:	881a      	ldrh	r2, [r3, #0]
 800ec16:	19bb      	adds	r3, r7, r6
 800ec18:	0019      	movs	r1, r3
 800ec1a:	2069      	movs	r0, #105	@ 0x69
 800ec1c:	f001 f9fd 	bl	801001a <sensirion_i2c_write_data>
 800ec20:	0003      	movs	r3, r0
 800ec22:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec24:	2214      	movs	r2, #20
 800ec26:	18bb      	adds	r3, r7, r2
 800ec28:	2100      	movs	r1, #0
 800ec2a:	5e5b      	ldrsh	r3, [r3, r1]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800ec30:	18bb      	adds	r3, r7, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	5e9b      	ldrsh	r3, [r3, r2]
 800ec36:	e004      	b.n	800ec42 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ec38:	4b05      	ldr	r3, [pc, #20]	@ (800ec50 <sen5x_set_temperature_offset_parameters+0xc4>)
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f7ff fbd0 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	0018      	movs	r0, r3
 800ec44:	46bd      	mov	sp, r7
 800ec46:	b007      	add	sp, #28
 800ec48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4a:	46c0      	nop			@ (mov r8, r8)
 800ec4c:	000060b2 	.word	0x000060b2
 800ec50:	00004e20 	.word	0x00004e20

0800ec54 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec56:	b091      	sub	sp, #68	@ 0x44
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	000a      	movs	r2, r1
 800ec5e:	1cfb      	adds	r3, r7, #3
 800ec60:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ec62:	253e      	movs	r5, #62	@ 0x3e
 800ec64:	197b      	adds	r3, r7, r5
 800ec66:	2200      	movs	r2, #0
 800ec68:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800ec6a:	197c      	adds	r4, r7, r5
 800ec6c:	4a22      	ldr	r2, [pc, #136]	@ (800ecf8 <sen5x_get_product_name+0xa4>)
 800ec6e:	197b      	adds	r3, r7, r5
 800ec70:	8819      	ldrh	r1, [r3, #0]
 800ec72:	230c      	movs	r3, #12
 800ec74:	18fb      	adds	r3, r7, r3
 800ec76:	0018      	movs	r0, r3
 800ec78:	f001 f94b 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800ec7c:	0003      	movs	r3, r0
 800ec7e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ec80:	263c      	movs	r6, #60	@ 0x3c
 800ec82:	19bc      	adds	r4, r7, r6
 800ec84:	197b      	adds	r3, r7, r5
 800ec86:	881a      	ldrh	r2, [r3, #0]
 800ec88:	230c      	movs	r3, #12
 800ec8a:	18fb      	adds	r3, r7, r3
 800ec8c:	0019      	movs	r1, r3
 800ec8e:	2069      	movs	r0, #105	@ 0x69
 800ec90:	f001 f9c3 	bl	801001a <sensirion_i2c_write_data>
 800ec94:	0003      	movs	r3, r0
 800ec96:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec98:	19bb      	adds	r3, r7, r6
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d003      	beq.n	800ecaa <sen5x_get_product_name+0x56>
        return error;
 800eca2:	19bb      	adds	r3, r7, r6
 800eca4:	2200      	movs	r2, #0
 800eca6:	5e9b      	ldrsh	r3, [r3, r2]
 800eca8:	e021      	b.n	800ecee <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ecaa:	4b14      	ldr	r3, [pc, #80]	@ (800ecfc <sen5x_get_product_name+0xa8>)
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7ff fb97 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ecb2:	253c      	movs	r5, #60	@ 0x3c
 800ecb4:	197c      	adds	r4, r7, r5
 800ecb6:	230c      	movs	r3, #12
 800ecb8:	18fb      	adds	r3, r7, r3
 800ecba:	2220      	movs	r2, #32
 800ecbc:	0019      	movs	r1, r3
 800ecbe:	2069      	movs	r0, #105	@ 0x69
 800ecc0:	f001 f9c3 	bl	801004a <sensirion_i2c_read_data_inplace>
 800ecc4:	0003      	movs	r3, r0
 800ecc6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ecc8:	197b      	adds	r3, r7, r5
 800ecca:	2200      	movs	r2, #0
 800eccc:	5e9b      	ldrsh	r3, [r3, r2]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <sen5x_get_product_name+0x86>
        return error;
 800ecd2:	197b      	adds	r3, r7, r5
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd8:	e009      	b.n	800ecee <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ecda:	1cfb      	adds	r3, r7, #3
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	230c      	movs	r3, #12
 800ece4:	18fb      	adds	r3, r7, r3
 800ece6:	0018      	movs	r0, r3
 800ece8:	f000 f989 	bl	800effe <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	0018      	movs	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	b011      	add	sp, #68	@ 0x44
 800ecf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf6:	46c0      	nop			@ (mov r8, r8)
 800ecf8:	0000d014 	.word	0x0000d014
 800ecfc:	0000c350 	.word	0x0000c350

0800ed00 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800ed00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed02:	b091      	sub	sp, #68	@ 0x44
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	000a      	movs	r2, r1
 800ed0a:	1cfb      	adds	r3, r7, #3
 800ed0c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ed0e:	253e      	movs	r5, #62	@ 0x3e
 800ed10:	197b      	adds	r3, r7, r5
 800ed12:	2200      	movs	r2, #0
 800ed14:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800ed16:	197c      	adds	r4, r7, r5
 800ed18:	4a22      	ldr	r2, [pc, #136]	@ (800eda4 <sen5x_get_serial_number+0xa4>)
 800ed1a:	197b      	adds	r3, r7, r5
 800ed1c:	8819      	ldrh	r1, [r3, #0]
 800ed1e:	230c      	movs	r3, #12
 800ed20:	18fb      	adds	r3, r7, r3
 800ed22:	0018      	movs	r0, r3
 800ed24:	f001 f8f5 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800ed28:	0003      	movs	r3, r0
 800ed2a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ed2c:	263c      	movs	r6, #60	@ 0x3c
 800ed2e:	19bc      	adds	r4, r7, r6
 800ed30:	197b      	adds	r3, r7, r5
 800ed32:	881a      	ldrh	r2, [r3, #0]
 800ed34:	230c      	movs	r3, #12
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	0019      	movs	r1, r3
 800ed3a:	2069      	movs	r0, #105	@ 0x69
 800ed3c:	f001 f96d 	bl	801001a <sensirion_i2c_write_data>
 800ed40:	0003      	movs	r3, r0
 800ed42:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed44:	19bb      	adds	r3, r7, r6
 800ed46:	2200      	movs	r2, #0
 800ed48:	5e9b      	ldrsh	r3, [r3, r2]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <sen5x_get_serial_number+0x56>
        return error;
 800ed4e:	19bb      	adds	r3, r7, r6
 800ed50:	2200      	movs	r2, #0
 800ed52:	5e9b      	ldrsh	r3, [r3, r2]
 800ed54:	e021      	b.n	800ed9a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ed56:	4b14      	ldr	r3, [pc, #80]	@ (800eda8 <sen5x_get_serial_number+0xa8>)
 800ed58:	0018      	movs	r0, r3
 800ed5a:	f7ff fb41 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ed5e:	253c      	movs	r5, #60	@ 0x3c
 800ed60:	197c      	adds	r4, r7, r5
 800ed62:	230c      	movs	r3, #12
 800ed64:	18fb      	adds	r3, r7, r3
 800ed66:	2220      	movs	r2, #32
 800ed68:	0019      	movs	r1, r3
 800ed6a:	2069      	movs	r0, #105	@ 0x69
 800ed6c:	f001 f96d 	bl	801004a <sensirion_i2c_read_data_inplace>
 800ed70:	0003      	movs	r3, r0
 800ed72:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed74:	197b      	adds	r3, r7, r5
 800ed76:	2200      	movs	r2, #0
 800ed78:	5e9b      	ldrsh	r3, [r3, r2]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d003      	beq.n	800ed86 <sen5x_get_serial_number+0x86>
        return error;
 800ed7e:	197b      	adds	r3, r7, r5
 800ed80:	2200      	movs	r2, #0
 800ed82:	5e9b      	ldrsh	r3, [r3, r2]
 800ed84:	e009      	b.n	800ed9a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800ed86:	1cfb      	adds	r3, r7, #3
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	6879      	ldr	r1, [r7, #4]
 800ed8e:	230c      	movs	r3, #12
 800ed90:	18fb      	adds	r3, r7, r3
 800ed92:	0018      	movs	r0, r3
 800ed94:	f000 f933 	bl	800effe <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	0018      	movs	r0, r3
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	b011      	add	sp, #68	@ 0x44
 800eda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda2:	46c0      	nop			@ (mov r8, r8)
 800eda4:	0000d033 	.word	0x0000d033
 800eda8:	0000c350 	.word	0x0000c350

0800edac <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800edac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edae:	b089      	sub	sp, #36	@ 0x24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800edba:	251e      	movs	r5, #30
 800edbc:	197b      	adds	r3, r7, r5
 800edbe:	2200      	movs	r2, #0
 800edc0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800edc2:	197c      	adds	r4, r7, r5
 800edc4:	23d1      	movs	r3, #209	@ 0xd1
 800edc6:	021a      	lsls	r2, r3, #8
 800edc8:	197b      	adds	r3, r7, r5
 800edca:	8819      	ldrh	r1, [r3, #0]
 800edcc:	2310      	movs	r3, #16
 800edce:	18fb      	adds	r3, r7, r3
 800edd0:	0018      	movs	r0, r3
 800edd2:	f001 f89e 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800edd6:	0003      	movs	r3, r0
 800edd8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800edda:	261c      	movs	r6, #28
 800eddc:	19bc      	adds	r4, r7, r6
 800edde:	197b      	adds	r3, r7, r5
 800ede0:	881a      	ldrh	r2, [r3, #0]
 800ede2:	2310      	movs	r3, #16
 800ede4:	18fb      	adds	r3, r7, r3
 800ede6:	0019      	movs	r1, r3
 800ede8:	2069      	movs	r0, #105	@ 0x69
 800edea:	f001 f916 	bl	801001a <sensirion_i2c_write_data>
 800edee:	0003      	movs	r3, r0
 800edf0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800edf2:	19bb      	adds	r3, r7, r6
 800edf4:	2200      	movs	r2, #0
 800edf6:	5e9b      	ldrsh	r3, [r3, r2]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <sen5x_get_version+0x58>
        return error;
 800edfc:	19bb      	adds	r3, r7, r6
 800edfe:	2200      	movs	r2, #0
 800ee00:	5e9b      	ldrsh	r3, [r3, r2]
 800ee02:	e038      	b.n	800ee76 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ee04:	4b1e      	ldr	r3, [pc, #120]	@ (800ee80 <sen5x_get_version+0xd4>)
 800ee06:	0018      	movs	r0, r3
 800ee08:	f7ff faea 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800ee0c:	251c      	movs	r5, #28
 800ee0e:	197c      	adds	r4, r7, r5
 800ee10:	2310      	movs	r3, #16
 800ee12:	18fb      	adds	r3, r7, r3
 800ee14:	2208      	movs	r2, #8
 800ee16:	0019      	movs	r1, r3
 800ee18:	2069      	movs	r0, #105	@ 0x69
 800ee1a:	f001 f916 	bl	801004a <sensirion_i2c_read_data_inplace>
 800ee1e:	0003      	movs	r3, r0
 800ee20:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee22:	197b      	adds	r3, r7, r5
 800ee24:	2200      	movs	r2, #0
 800ee26:	5e9b      	ldrsh	r3, [r3, r2]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d003      	beq.n	800ee34 <sen5x_get_version+0x88>
        return error;
 800ee2c:	197b      	adds	r3, r7, r5
 800ee2e:	2200      	movs	r2, #0
 800ee30:	5e9b      	ldrsh	r3, [r3, r2]
 800ee32:	e020      	b.n	800ee76 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800ee34:	2110      	movs	r1, #16
 800ee36:	187b      	adds	r3, r7, r1
 800ee38:	781a      	ldrb	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800ee3e:	187b      	adds	r3, r7, r1
 800ee40:	785a      	ldrb	r2, [r3, #1]
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800ee46:	187b      	adds	r3, r7, r1
 800ee48:	789b      	ldrb	r3, [r3, #2]
 800ee4a:	1e5a      	subs	r2, r3, #1
 800ee4c:	4193      	sbcs	r3, r2
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800ee54:	187b      	adds	r3, r7, r1
 800ee56:	78da      	ldrb	r2, [r3, #3]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800ee5c:	187b      	adds	r3, r7, r1
 800ee5e:	791a      	ldrb	r2, [r3, #4]
 800ee60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee62:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800ee64:	187b      	adds	r3, r7, r1
 800ee66:	795a      	ldrb	r2, [r3, #5]
 800ee68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee6a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800ee6c:	187b      	adds	r3, r7, r1
 800ee6e:	799a      	ldrb	r2, [r3, #6]
 800ee70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee72:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	0018      	movs	r0, r3
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	b009      	add	sp, #36	@ 0x24
 800ee7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7e:	46c0      	nop			@ (mov r8, r8)
 800ee80:	00004e20 	.word	0x00004e20

0800ee84 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee86:	b087      	sub	sp, #28
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800ee8c:	2516      	movs	r5, #22
 800ee8e:	197b      	adds	r3, r7, r5
 800ee90:	2200      	movs	r2, #0
 800ee92:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800ee94:	197c      	adds	r4, r7, r5
 800ee96:	4a21      	ldr	r2, [pc, #132]	@ (800ef1c <sen5x_read_device_status+0x98>)
 800ee98:	197b      	adds	r3, r7, r5
 800ee9a:	8819      	ldrh	r1, [r3, #0]
 800ee9c:	260c      	movs	r6, #12
 800ee9e:	19bb      	adds	r3, r7, r6
 800eea0:	0018      	movs	r0, r3
 800eea2:	f001 f836 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800eea6:	0003      	movs	r3, r0
 800eea8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eeaa:	2314      	movs	r3, #20
 800eeac:	18fc      	adds	r4, r7, r3
 800eeae:	197b      	adds	r3, r7, r5
 800eeb0:	881a      	ldrh	r2, [r3, #0]
 800eeb2:	19bb      	adds	r3, r7, r6
 800eeb4:	0019      	movs	r1, r3
 800eeb6:	2069      	movs	r0, #105	@ 0x69
 800eeb8:	f001 f8af 	bl	801001a <sensirion_i2c_write_data>
 800eebc:	0003      	movs	r3, r0
 800eebe:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eec0:	2314      	movs	r3, #20
 800eec2:	18fb      	adds	r3, r7, r3
 800eec4:	2200      	movs	r2, #0
 800eec6:	5e9b      	ldrsh	r3, [r3, r2]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800eecc:	4b14      	ldr	r3, [pc, #80]	@ (800ef20 <sen5x_read_device_status+0x9c>)
 800eece:	e020      	b.n	800ef12 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800eed0:	4b14      	ldr	r3, [pc, #80]	@ (800ef24 <sen5x_read_device_status+0xa0>)
 800eed2:	0018      	movs	r0, r3
 800eed4:	f7ff fa84 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800eed8:	2514      	movs	r5, #20
 800eeda:	197c      	adds	r4, r7, r5
 800eedc:	230c      	movs	r3, #12
 800eede:	18fb      	adds	r3, r7, r3
 800eee0:	2204      	movs	r2, #4
 800eee2:	0019      	movs	r1, r3
 800eee4:	2069      	movs	r0, #105	@ 0x69
 800eee6:	f001 f8b0 	bl	801004a <sensirion_i2c_read_data_inplace>
 800eeea:	0003      	movs	r3, r0
 800eeec:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eeee:	197b      	adds	r3, r7, r5
 800eef0:	2200      	movs	r2, #0
 800eef2:	5e9b      	ldrsh	r3, [r3, r2]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d003      	beq.n	800ef00 <sen5x_read_device_status+0x7c>
        return error;
 800eef8:	197b      	adds	r3, r7, r5
 800eefa:	2200      	movs	r2, #0
 800eefc:	5e9b      	ldrsh	r3, [r3, r2]
 800eefe:	e008      	b.n	800ef12 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800ef00:	230c      	movs	r3, #12
 800ef02:	18fb      	adds	r3, r7, r3
 800ef04:	0018      	movs	r0, r3
 800ef06:	f000 f853 	bl	800efb0 <sensirion_common_bytes_to_uint32_t>
 800ef0a:	0002      	movs	r2, r0
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	0018      	movs	r0, r3
 800ef14:	46bd      	mov	sp, r7
 800ef16:	b007      	add	sp, #28
 800ef18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1a:	46c0      	nop			@ (mov r8, r8)
 800ef1c:	0000d206 	.word	0x0000d206
 800ef20:	ffffd206 	.word	0xffffd206
 800ef24:	00004e20 	.word	0x00004e20

0800ef28 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ef2e:	1dbb      	adds	r3, r7, #6
 800ef30:	2200      	movs	r2, #0
 800ef32:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800ef34:	1dbc      	adds	r4, r7, #6
 800ef36:	4a12      	ldr	r2, [pc, #72]	@ (800ef80 <sen5x_device_reset+0x58>)
 800ef38:	1dbb      	adds	r3, r7, #6
 800ef3a:	8819      	ldrh	r1, [r3, #0]
 800ef3c:	003b      	movs	r3, r7
 800ef3e:	0018      	movs	r0, r3
 800ef40:	f000 ffe7 	bl	800ff12 <sensirion_i2c_add_command_to_buffer>
 800ef44:	0003      	movs	r3, r0
 800ef46:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ef48:	1d3c      	adds	r4, r7, #4
 800ef4a:	1dbb      	adds	r3, r7, #6
 800ef4c:	881a      	ldrh	r2, [r3, #0]
 800ef4e:	003b      	movs	r3, r7
 800ef50:	0019      	movs	r1, r3
 800ef52:	2069      	movs	r0, #105	@ 0x69
 800ef54:	f001 f861 	bl	801001a <sensirion_i2c_write_data>
 800ef58:	0003      	movs	r3, r0
 800ef5a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ef5c:	1d3b      	adds	r3, r7, #4
 800ef5e:	2200      	movs	r2, #0
 800ef60:	5e9b      	ldrsh	r3, [r3, r2]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <sen5x_device_reset+0x46>
        return error;
 800ef66:	1d3b      	adds	r3, r7, #4
 800ef68:	2200      	movs	r2, #0
 800ef6a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef6c:	e004      	b.n	800ef78 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800ef6e:	4b05      	ldr	r3, [pc, #20]	@ (800ef84 <sen5x_device_reset+0x5c>)
 800ef70:	0018      	movs	r0, r3
 800ef72:	f7ff fa35 	bl	800e3e0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	0018      	movs	r0, r3
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	b003      	add	sp, #12
 800ef7e:	bd90      	pop	{r4, r7, pc}
 800ef80:	0000d304 	.word	0x0000d304
 800ef84:	00030d40 	.word	0x00030d40

0800ef88 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	b21b      	sxth	r3, r3
 800ef96:	021b      	lsls	r3, r3, #8
 800ef98:	b21a      	sxth	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	b21b      	sxth	r3, r3
 800efa2:	4313      	orrs	r3, r2
 800efa4:	b21b      	sxth	r3, r3
 800efa6:	b29b      	uxth	r3, r3
}
 800efa8:	0018      	movs	r0, r3
 800efaa:	46bd      	mov	sp, r7
 800efac:	b002      	add	sp, #8
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	061a      	lsls	r2, r3, #24
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3301      	adds	r3, #1
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	041b      	lsls	r3, r3, #16
 800efc6:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3302      	adds	r3, #2
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800efd0:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	3203      	adds	r2, #3
 800efd6:	7812      	ldrb	r2, [r2, #0]
 800efd8:	4313      	orrs	r3, r2
}
 800efda:	0018      	movs	r0, r3
 800efdc:	46bd      	mov	sp, r7
 800efde:	b002      	add	sp, #8
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	0018      	movs	r0, r3
 800efee:	f7ff ffcb 	bl	800ef88 <sensirion_common_bytes_to_uint16_t>
 800eff2:	0003      	movs	r3, r0
 800eff4:	b21b      	sxth	r3, r3
}
 800eff6:	0018      	movs	r0, r3
 800eff8:	46bd      	mov	sp, r7
 800effa:	b002      	add	sp, #8
 800effc:	bd80      	pop	{r7, pc}

0800effe <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800effe:	b580      	push	{r7, lr}
 800f000:	b086      	sub	sp, #24
 800f002:	af00      	add	r7, sp, #0
 800f004:	60f8      	str	r0, [r7, #12]
 800f006:	60b9      	str	r1, [r7, #8]
 800f008:	1dbb      	adds	r3, r7, #6
 800f00a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800f00c:	2316      	movs	r3, #22
 800f00e:	18fb      	adds	r3, r7, r3
 800f010:	2200      	movs	r2, #0
 800f012:	801a      	strh	r2, [r3, #0]
 800f014:	e00f      	b.n	800f036 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800f016:	2016      	movs	r0, #22
 800f018:	183b      	adds	r3, r7, r0
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	18d2      	adds	r2, r2, r3
 800f020:	183b      	adds	r3, r7, r0
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	18cb      	adds	r3, r1, r3
 800f028:	7812      	ldrb	r2, [r2, #0]
 800f02a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800f02c:	183b      	adds	r3, r7, r0
 800f02e:	881a      	ldrh	r2, [r3, #0]
 800f030:	183b      	adds	r3, r7, r0
 800f032:	3201      	adds	r2, #1
 800f034:	801a      	strh	r2, [r3, #0]
 800f036:	2316      	movs	r3, #22
 800f038:	18fa      	adds	r2, r7, r3
 800f03a:	1dbb      	adds	r3, r7, #6
 800f03c:	8812      	ldrh	r2, [r2, #0]
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	429a      	cmp	r2, r3
 800f042:	d3e8      	bcc.n	800f016 <sensirion_common_copy_bytes+0x18>
    }
}
 800f044:	46c0      	nop			@ (mov r8, r8)
 800f046:	46c0      	nop			@ (mov r8, r8)
 800f048:	46bd      	mov	sp, r7
 800f04a:	b006      	add	sp, #24
 800f04c:	bd80      	pop	{r7, pc}
	...

0800f050 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d113      	bne.n	800f096 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22fe      	movs	r2, #254	@ 0xfe
 800f072:	0592      	lsls	r2, r2, #22
 800f074:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e4 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800f07a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e8 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800f080:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	4a19      	ldr	r2, [pc, #100]	@ (800f0ec <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800f086:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4a19      	ldr	r2, [pc, #100]	@ (800f0f0 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800f08c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	4a18      	ldr	r2, [pc, #96]	@ (800f0f4 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800f092:	61da      	str	r2, [r3, #28]
 800f094:	e011      	b.n	800f0ba <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	4a17      	ldr	r2, [pc, #92]	@ (800f0f8 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800f09a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	4a17      	ldr	r2, [pc, #92]	@ (800f0fc <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800f0a0:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	4a16      	ldr	r2, [pc, #88]	@ (800f100 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800f0a6:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	4a16      	ldr	r2, [pc, #88]	@ (800f104 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800f0ac:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4a15      	ldr	r2, [pc, #84]	@ (800f108 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800f0b2:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4a15      	ldr	r2, [pc, #84]	@ (800f10c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800f0b8:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	4a14      	ldr	r2, [pc, #80]	@ (800f110 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800f0be:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4a14      	ldr	r2, [pc, #80]	@ (800f114 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f0c4:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	4a12      	ldr	r2, [pc, #72]	@ (800f114 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f0ca:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4a12      	ldr	r2, [pc, #72]	@ (800f118 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800f0d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	0018      	movs	r0, r3
 800f0d6:	f000 f831 	bl	800f13c <GasIndexAlgorithm_reset>
}
 800f0da:	46c0      	nop			@ (mov r8, r8)
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b004      	add	sp, #16
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	00002710 	.word	0x00002710
 800f0e8:	44340000 	.word	0x44340000
 800f0ec:	46859800 	.word	0x46859800
 800f0f0:	46a05000 	.word	0x46a05000
 800f0f4:	41f00000 	.word	0x41f00000
 800f0f8:	42c80000 	.word	0x42c80000
 800f0fc:	00004e20 	.word	0x00004e20
 800f100:	43340000 	.word	0x43340000
 800f104:	4528c000 	.word	0x4528c000
 800f108:	45a32000 	.word	0x45a32000
 800f10c:	43aa0000 	.word	0x43aa0000
 800f110:	43660000 	.word	0x43660000
 800f114:	41400000 	.word	0x41400000
 800f118:	42480000 	.word	0x42480000

0800f11c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f126:	22fe      	movs	r2, #254	@ 0xfe
 800f128:	0592      	lsls	r2, r2, #22
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	0018      	movs	r0, r3
 800f130:	f7ff ff8e 	bl	800f050 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f134:	46c0      	nop			@ (mov r8, r8)
 800f136:	46bd      	mov	sp, r7
 800f138:	b002      	add	sp, #8
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	0018      	movs	r0, r3
 800f15a:	f000 f805 	bl	800f168 <GasIndexAlgorithm__init_instances>
}
 800f15e:	46c0      	nop			@ (mov r8, r8)
 800f160:	46bd      	mov	sp, r7
 800f162:	b002      	add	sp, #8
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f168:	b590      	push	{r4, r7, lr}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	0018      	movs	r0, r3
 800f174:	f000 f8e8 	bl	800f348 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	0018      	movs	r0, r3
 800f17c:	f000 f9a6 	bl	800f4cc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f180:	1c04      	adds	r4, r0, #0
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	0018      	movs	r0, r3
 800f186:	f000 f9ab 	bl	800f4e0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f18a:	1c02      	adds	r2, r0, #0
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	1c21      	adds	r1, r4, #0
 800f190:	0018      	movs	r0, r3
 800f192:	f000 fc3b 	bl	800fa0c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d107      	bne.n	800f1ae <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f19e:	23fe      	movs	r3, #254	@ 0xfe
 800f1a0:	059b      	lsls	r3, r3, #22
 800f1a2:	4a0a      	ldr	r2, [pc, #40]	@ (800f1cc <GasIndexAlgorithm__init_instances+0x64>)
 800f1a4:	490a      	ldr	r1, [pc, #40]	@ (800f1d0 <GasIndexAlgorithm__init_instances+0x68>)
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fc86 	bl	800fab8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f1ac:	e005      	b.n	800f1ba <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f1ae:	4b09      	ldr	r3, [pc, #36]	@ (800f1d4 <GasIndexAlgorithm__init_instances+0x6c>)
 800f1b0:	4a09      	ldr	r2, [pc, #36]	@ (800f1d8 <GasIndexAlgorithm__init_instances+0x70>)
 800f1b2:	490a      	ldr	r1, [pc, #40]	@ (800f1dc <GasIndexAlgorithm__init_instances+0x74>)
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fc7f 	bl	800fab8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	0018      	movs	r0, r3
 800f1be:	f000 fd35 	bl	800fc2c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f1c2:	46c0      	nop			@ (mov r8, r8)
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	b003      	add	sp, #12
 800f1c8:	bd90      	pop	{r4, r7, pc}
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	bc257a78 	.word	0xbc257a78
 800f1d0:	44198000 	.word	0x44198000
 800f1d4:	42c80000 	.word	0x42c80000
 800f1d8:	bbd4fdf4 	.word	0xbbd4fdf4
 800f1dc:	43550000 	.word	0x43550000

0800f1e0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800f1e0:	b590      	push	{r4, r7, lr}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1f0:	4952      	ldr	r1, [pc, #328]	@ (800f33c <GasIndexAlgorithm_process+0x15c>)
 800f1f2:	1c18      	adds	r0, r3, #0
 800f1f4:	f7f1 f9a6 	bl	8000544 <__aeabi_fcmple>
 800f1f8:	1e03      	subs	r3, r0, #0
 800f1fa:	d00c      	beq.n	800f216 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	1c19      	adds	r1, r3, #0
 800f206:	1c10      	adds	r0, r2, #0
 800f208:	f7f1 fb5a 	bl	80008c0 <__aeabi_fadd>
 800f20c:	1c03      	adds	r3, r0, #0
 800f20e:	1c1a      	adds	r2, r3, #0
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	631a      	str	r2, [r3, #48]	@ 0x30
 800f214:	e080      	b.n	800f318 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	dd25      	ble.n	800f268 <GasIndexAlgorithm_process+0x88>
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	4a48      	ldr	r2, [pc, #288]	@ (800f340 <GasIndexAlgorithm_process+0x160>)
 800f220:	4293      	cmp	r3, r2
 800f222:	dc21      	bgt.n	800f268 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	dc04      	bgt.n	800f238 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	3301      	adds	r3, #1
 800f234:	60bb      	str	r3, [r7, #8]
 800f236:	e00d      	b.n	800f254 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	4a41      	ldr	r2, [pc, #260]	@ (800f344 <GasIndexAlgorithm_process+0x164>)
 800f23e:	4694      	mov	ip, r2
 800f240:	4463      	add	r3, ip
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	429a      	cmp	r2, r3
 800f246:	dd05      	ble.n	800f254 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	4a3d      	ldr	r2, [pc, #244]	@ (800f344 <GasIndexAlgorithm_process+0x164>)
 800f24e:	4694      	mov	ip, r2
 800f250:	4463      	add	r3, ip
 800f252:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	0018      	movs	r0, r3
 800f25e:	f7f2 fae3 	bl	8001828 <__aeabi_i2f>
 800f262:	1c02      	adds	r2, r0, #0
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d005      	beq.n	800f27c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	0018      	movs	r0, r3
 800f274:	f000 f945 	bl	800f502 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800f278:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800f27a:	d014      	beq.n	800f2a6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	1c11      	adds	r1, r2, #0
 800f284:	0018      	movs	r0, r3
 800f286:	f000 fbd1 	bl	800fa2c <GasIndexAlgorithm__mox_model__process>
 800f28a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	1c11      	adds	r1, r2, #0
 800f298:	0018      	movs	r0, r3
 800f29a:	f000 fc25 	bl	800fae8 <GasIndexAlgorithm__sigmoid_scaled__process>
 800f29e:	1c02      	adds	r2, r0, #0
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	639a      	str	r2, [r3, #56]	@ 0x38
 800f2a4:	e003      	b.n	800f2ae <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	689a      	ldr	r2, [r3, #8]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	1c11      	adds	r1, r2, #0
 800f2b6:	0018      	movs	r0, r3
 800f2b8:	f000 fcec 	bl	800fc94 <GasIndexAlgorithm__adaptive_lowpass__process>
 800f2bc:	1c02      	adds	r2, r0, #0
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2c6:	21fc      	movs	r1, #252	@ 0xfc
 800f2c8:	0589      	lsls	r1, r1, #22
 800f2ca:	1c18      	adds	r0, r3, #0
 800f2cc:	f7f1 f930 	bl	8000530 <__aeabi_fcmplt>
 800f2d0:	1e03      	subs	r3, r0, #0
 800f2d2:	d003      	beq.n	800f2dc <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	22fc      	movs	r2, #252	@ 0xfc
 800f2d8:	0592      	lsls	r2, r2, #22
 800f2da:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	1c18      	adds	r0, r3, #0
 800f2e4:	f7f1 f938 	bl	8000558 <__aeabi_fcmpgt>
 800f2e8:	1e03      	subs	r3, r0, #0
 800f2ea:	d015      	beq.n	800f318 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	1c11      	adds	r1, r2, #0
 800f2f4:	0018      	movs	r0, r3
 800f2f6:	f000 fa4f 	bl	800f798 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	0018      	movs	r0, r3
 800f2fe:	f000 f8e5 	bl	800f4cc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f302:	1c04      	adds	r4, r0, #0
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	0018      	movs	r0, r3
 800f308:	f000 f8ea 	bl	800f4e0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f30c:	1c02      	adds	r2, r0, #0
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	1c21      	adds	r1, r4, #0
 800f312:	0018      	movs	r0, r3
 800f314:	f000 fb7a 	bl	800fa0c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f31c:	21fc      	movs	r1, #252	@ 0xfc
 800f31e:	0589      	lsls	r1, r1, #22
 800f320:	1c18      	adds	r0, r3, #0
 800f322:	f7f1 facd 	bl	80008c0 <__aeabi_fadd>
 800f326:	1c03      	adds	r3, r0, #0
 800f328:	1c18      	adds	r0, r3, #0
 800f32a:	f7f2 fa5d 	bl	80017e8 <__aeabi_f2iz>
 800f32e:	0002      	movs	r2, r0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	601a      	str	r2, [r3, #0]
    return;
 800f334:	46c0      	nop			@ (mov r8, r8)
}
 800f336:	46bd      	mov	sp, r7
 800f338:	b005      	add	sp, #20
 800f33a:	bd90      	pop	{r4, r7, pc}
 800f33c:	42340000 	.word	0x42340000
 800f340:	0000fde7 	.word	0x0000fde7
 800f344:	00007fff 	.word	0x00007fff

0800f348 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f348:	b5b0      	push	{r4, r5, r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	223c      	movs	r2, #60	@ 0x3c
 800f354:	2100      	movs	r1, #0
 800f356:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	4952      	ldr	r1, [pc, #328]	@ (800f4bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f372:	1c18      	adds	r0, r3, #0
 800f374:	f7f1 fc96 	bl	8000ca4 <__aeabi_fdiv>
 800f378:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f37a:	2188      	movs	r1, #136	@ 0x88
 800f37c:	05c9      	lsls	r1, r1, #23
 800f37e:	1c18      	adds	r0, r3, #0
 800f380:	f7f1 fe5e 	bl	8001040 <__aeabi_fmul>
 800f384:	1c03      	adds	r3, r0, #0
 800f386:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	494a      	ldr	r1, [pc, #296]	@ (800f4bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f392:	1c18      	adds	r0, r3, #0
 800f394:	f7f1 fc86 	bl	8000ca4 <__aeabi_fdiv>
 800f398:	1c03      	adds	r3, r0, #0
 800f39a:	1c19      	adds	r1, r3, #0
 800f39c:	1c20      	adds	r0, r4, #0
 800f39e:	f7f1 fa8f 	bl	80008c0 <__aeabi_fadd>
 800f3a2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f3a4:	1c19      	adds	r1, r3, #0
 800f3a6:	1c28      	adds	r0, r5, #0
 800f3a8:	f7f1 fc7c 	bl	8000ca4 <__aeabi_fdiv>
 800f3ac:	1c03      	adds	r3, r0, #0
 800f3ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4940      	ldr	r1, [pc, #256]	@ (800f4bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f3ba:	1c18      	adds	r0, r3, #0
 800f3bc:	f7f1 fc72 	bl	8000ca4 <__aeabi_fdiv>
 800f3c0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f3c2:	2185      	movs	r1, #133	@ 0x85
 800f3c4:	05c9      	lsls	r1, r1, #23
 800f3c6:	1c18      	adds	r0, r3, #0
 800f3c8:	f7f1 fe3a 	bl	8001040 <__aeabi_fmul>
 800f3cc:	1c03      	adds	r3, r0, #0
 800f3ce:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	4938      	ldr	r1, [pc, #224]	@ (800f4bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f3da:	1c18      	adds	r0, r3, #0
 800f3dc:	f7f1 fc62 	bl	8000ca4 <__aeabi_fdiv>
 800f3e0:	1c03      	adds	r3, r0, #0
 800f3e2:	1c19      	adds	r1, r3, #0
 800f3e4:	1c20      	adds	r0, r4, #0
 800f3e6:	f7f1 fa6b 	bl	80008c0 <__aeabi_fadd>
 800f3ea:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f3ec:	1c19      	adds	r1, r3, #0
 800f3ee:	1c28      	adds	r0, r5, #0
 800f3f0:	f7f1 fc58 	bl	8000ca4 <__aeabi_fdiv>
 800f3f4:	1c03      	adds	r3, r0, #0
 800f3f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d118      	bne.n	800f436 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f408:	2188      	movs	r1, #136	@ 0x88
 800f40a:	05c9      	lsls	r1, r1, #23
 800f40c:	1c18      	adds	r0, r3, #0
 800f40e:	f7f1 fe17 	bl	8001040 <__aeabi_fmul>
 800f412:	1c03      	adds	r3, r0, #0
 800f414:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800f41a:	4929      	ldr	r1, [pc, #164]	@ (800f4c0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800f41c:	1c18      	adds	r0, r3, #0
 800f41e:	f7f1 fa4f 	bl	80008c0 <__aeabi_fadd>
 800f422:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f424:	1c19      	adds	r1, r3, #0
 800f426:	1c20      	adds	r0, r4, #0
 800f428:	f7f1 fc3c 	bl	8000ca4 <__aeabi_fdiv>
 800f42c:	1c03      	adds	r3, r0, #0
 800f42e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	655a      	str	r2, [r3, #84]	@ 0x54
 800f434:	e017      	b.n	800f466 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f43a:	2188      	movs	r1, #136	@ 0x88
 800f43c:	05c9      	lsls	r1, r1, #23
 800f43e:	1c18      	adds	r0, r3, #0
 800f440:	f7f1 fdfe 	bl	8001040 <__aeabi_fmul>
 800f444:	1c03      	adds	r3, r0, #0
 800f446:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800f44c:	491d      	ldr	r1, [pc, #116]	@ (800f4c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800f44e:	1c18      	adds	r0, r3, #0
 800f450:	f7f1 fa36 	bl	80008c0 <__aeabi_fadd>
 800f454:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f456:	1c19      	adds	r1, r3, #0
 800f458:	1c20      	adds	r0, r4, #0
 800f45a:	f7f1 fc23 	bl	8000ca4 <__aeabi_fdiv>
 800f45e:	1c03      	adds	r3, r0, #0
 800f460:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f46a:	2185      	movs	r1, #133	@ 0x85
 800f46c:	05c9      	lsls	r1, r1, #23
 800f46e:	1c18      	adds	r0, r3, #0
 800f470:	f7f1 fde6 	bl	8001040 <__aeabi_fmul>
 800f474:	1c03      	adds	r3, r0, #0
 800f476:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	4912      	ldr	r1, [pc, #72]	@ (800f4c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800f47e:	1c18      	adds	r0, r3, #0
 800f480:	f7f1 fa1e 	bl	80008c0 <__aeabi_fadd>
 800f484:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800f486:	1c19      	adds	r1, r3, #0
 800f488:	1c20      	adds	r0, r4, #0
 800f48a:	f7f1 fc0b 	bl	8000ca4 <__aeabi_fdiv>
 800f48e:	1c03      	adds	r3, r0, #0
 800f490:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800f4b4:	46c0      	nop			@ (mov r8, r8)
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	b002      	add	sp, #8
 800f4ba:	bdb0      	pop	{r4, r5, r7, pc}
 800f4bc:	45610000 	.word	0x45610000
 800f4c0:	44960000 	.word	0x44960000
 800f4c4:	41a00000 	.word	0x41a00000
 800f4c8:	451c4000 	.word	0x451c4000

0800f4cc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800f4d8:	1c18      	adds	r0, r3, #0
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800f4f0:	1c19      	adds	r1, r3, #0
 800f4f2:	1c10      	adds	r0, r2, #0
 800f4f4:	f7f1 f9e4 	bl	80008c0 <__aeabi_fadd>
 800f4f8:	1c03      	adds	r3, r0, #0
}
 800f4fa:	1c18      	adds	r0, r3, #0
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	b002      	add	sp, #8
 800f500:	bd80      	pop	{r7, pc}

0800f502 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800f502:	b580      	push	{r7, lr}
 800f504:	b082      	sub	sp, #8
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	223c      	movs	r2, #60	@ 0x3c
 800f50e:	5c9b      	ldrb	r3, [r3, r2]
}
 800f510:	0018      	movs	r0, r3
 800f512:	46bd      	mov	sp, r7
 800f514:	b002      	add	sp, #8
 800f516:	bd80      	pop	{r7, pc}

0800f518 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800f518:	b5b0      	push	{r4, r5, r7, lr}
 800f51a:	b08c      	sub	sp, #48	@ 0x30
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800f524:	1c19      	adds	r1, r3, #0
 800f526:	4895      	ldr	r0, [pc, #596]	@ (800f77c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f528:	f7f1 fee4 	bl	80012f4 <__aeabi_fsub>
 800f52c:	1c03      	adds	r3, r0, #0
 800f52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f534:	1c19      	adds	r1, r3, #0
 800f536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f538:	f7f1 f80e 	bl	8000558 <__aeabi_fcmpgt>
 800f53c:	1e03      	subs	r3, r0, #0
 800f53e:	d00b      	beq.n	800f558 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f548:	1c19      	adds	r1, r3, #0
 800f54a:	1c10      	adds	r0, r2, #0
 800f54c:	f7f1 f9b8 	bl	80008c0 <__aeabi_fadd>
 800f550:	1c03      	adds	r3, r0, #0
 800f552:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f55c:	1c19      	adds	r1, r3, #0
 800f55e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f560:	f7f0 fffa 	bl	8000558 <__aeabi_fcmpgt>
 800f564:	1e03      	subs	r3, r0, #0
 800f566:	d00b      	beq.n	800f580 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f570:	1c19      	adds	r1, r3, #0
 800f572:	1c10      	adds	r0, r2, #0
 800f574:	f7f1 f9a4 	bl	80008c0 <__aeabi_fadd>
 800f578:	1c03      	adds	r3, r0, #0
 800f57a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6959      	ldr	r1, [r3, #20]
 800f584:	4a7e      	ldr	r2, [pc, #504]	@ (800f780 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	0018      	movs	r0, r3
 800f58a:	f000 f9f1 	bl	800f970 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	1c11      	adds	r1, r2, #0
 800f596:	0018      	movs	r0, r3
 800f598:	f000 f9fa 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f59c:	1c03      	adds	r3, r0, #0
 800f59e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f5ac:	1c19      	adds	r1, r3, #0
 800f5ae:	1c10      	adds	r0, r2, #0
 800f5b0:	f7f1 fea0 	bl	80012f4 <__aeabi_fsub>
 800f5b4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f5b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5b8:	1c18      	adds	r0, r3, #0
 800f5ba:	f7f1 fd41 	bl	8001040 <__aeabi_fmul>
 800f5be:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f5c0:	1c19      	adds	r1, r3, #0
 800f5c2:	1c20      	adds	r0, r4, #0
 800f5c4:	f7f1 f97c 	bl	80008c0 <__aeabi_fadd>
 800f5c8:	1c03      	adds	r3, r0, #0
 800f5ca:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f5d4:	1c19      	adds	r1, r3, #0
 800f5d6:	486b      	ldr	r0, [pc, #428]	@ (800f784 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f5d8:	f7f1 fe8c 	bl	80012f4 <__aeabi_fsub>
 800f5dc:	1c03      	adds	r3, r0, #0
 800f5de:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	1c11      	adds	r1, r2, #0
 800f5e8:	0018      	movs	r0, r3
 800f5ea:	f000 f9d1 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f5ee:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f5f0:	1c19      	adds	r1, r3, #0
 800f5f2:	1c28      	adds	r0, r5, #0
 800f5f4:	f7f1 fd24 	bl	8001040 <__aeabi_fmul>
 800f5f8:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f5fa:	1c19      	adds	r1, r3, #0
 800f5fc:	1c20      	adds	r0, r4, #0
 800f5fe:	f7f1 f95f 	bl	80008c0 <__aeabi_fadd>
 800f602:	1c03      	adds	r3, r0, #0
 800f604:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f606:	4a60      	ldr	r2, [pc, #384]	@ (800f788 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f608:	6a39      	ldr	r1, [r7, #32]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	0018      	movs	r0, r3
 800f60e:	f000 f9af 	bl	800f970 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	1c11      	adds	r1, r2, #0
 800f61a:	0018      	movs	r0, r3
 800f61c:	f000 f9b8 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f620:	1c03      	adds	r3, r0, #0
 800f622:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f626:	69f8      	ldr	r0, [r7, #28]
 800f628:	f7f1 fd0a 	bl	8001040 <__aeabi_fmul>
 800f62c:	1c03      	adds	r3, r0, #0
 800f62e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6999      	ldr	r1, [r3, #24]
 800f638:	4a51      	ldr	r2, [pc, #324]	@ (800f780 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	0018      	movs	r0, r3
 800f63e:	f000 f997 	bl	800f970 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	1c11      	adds	r1, r2, #0
 800f64a:	0018      	movs	r0, r3
 800f64c:	f000 f9a0 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f650:	1c03      	adds	r3, r0, #0
 800f652:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f660:	1c19      	adds	r1, r3, #0
 800f662:	1c10      	adds	r0, r2, #0
 800f664:	f7f1 fe46 	bl	80012f4 <__aeabi_fsub>
 800f668:	1c03      	adds	r3, r0, #0
 800f66a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f66c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f66e:	69b8      	ldr	r0, [r7, #24]
 800f670:	f7f1 fe40 	bl	80012f4 <__aeabi_fsub>
 800f674:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f676:	1c19      	adds	r1, r3, #0
 800f678:	1c28      	adds	r0, r5, #0
 800f67a:	f7f1 fce1 	bl	8001040 <__aeabi_fmul>
 800f67e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f680:	1c19      	adds	r1, r3, #0
 800f682:	1c20      	adds	r0, r4, #0
 800f684:	f7f1 f91c 	bl	80008c0 <__aeabi_fadd>
 800f688:	1c03      	adds	r3, r0, #0
 800f68a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f694:	1c19      	adds	r1, r3, #0
 800f696:	483b      	ldr	r0, [pc, #236]	@ (800f784 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f698:	f7f1 fe2c 	bl	80012f4 <__aeabi_fsub>
 800f69c:	1c03      	adds	r3, r0, #0
 800f69e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	1c11      	adds	r1, r2, #0
 800f6a8:	0018      	movs	r0, r3
 800f6aa:	f000 f971 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f6ae:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f6b0:	1c19      	adds	r1, r3, #0
 800f6b2:	1c28      	adds	r0, r5, #0
 800f6b4:	f7f1 fcc4 	bl	8001040 <__aeabi_fmul>
 800f6b8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f6ba:	1c19      	adds	r1, r3, #0
 800f6bc:	1c20      	adds	r0, r4, #0
 800f6be:	f7f1 f8ff 	bl	80008c0 <__aeabi_fadd>
 800f6c2:	1c03      	adds	r3, r0, #0
 800f6c4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f6c6:	4a30      	ldr	r2, [pc, #192]	@ (800f788 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f6c8:	6939      	ldr	r1, [r7, #16]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f000 f94f 	bl	800f970 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	1c11      	adds	r1, r2, #0
 800f6da:	0018      	movs	r0, r3
 800f6dc:	f000 f958 	bl	800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f6e0:	1c03      	adds	r3, r0, #0
 800f6e2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f6e4:	6979      	ldr	r1, [r7, #20]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7f1 fcaa 	bl	8001040 <__aeabi_fmul>
 800f6ec:	1c03      	adds	r3, r0, #0
 800f6ee:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	4923      	ldr	r1, [pc, #140]	@ (800f78c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f6fe:	1c18      	adds	r0, r3, #0
 800f700:	f7f1 fad0 	bl	8000ca4 <__aeabi_fdiv>
 800f704:	1c03      	adds	r3, r0, #0
 800f706:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f708:	69f9      	ldr	r1, [r7, #28]
 800f70a:	20fe      	movs	r0, #254	@ 0xfe
 800f70c:	0580      	lsls	r0, r0, #22
 800f70e:	f7f1 fdf1 	bl	80012f4 <__aeabi_fsub>
 800f712:	1c03      	adds	r3, r0, #0
 800f714:	491e      	ldr	r1, [pc, #120]	@ (800f790 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f716:	1c18      	adds	r0, r3, #0
 800f718:	f7f1 fc92 	bl	8001040 <__aeabi_fmul>
 800f71c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f71e:	491d      	ldr	r1, [pc, #116]	@ (800f794 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f720:	1c18      	adds	r0, r3, #0
 800f722:	f7f1 fde7 	bl	80012f4 <__aeabi_fsub>
 800f726:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f728:	1c19      	adds	r1, r3, #0
 800f72a:	1c28      	adds	r0, r5, #0
 800f72c:	f7f1 fc88 	bl	8001040 <__aeabi_fmul>
 800f730:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f732:	1c19      	adds	r1, r3, #0
 800f734:	1c20      	adds	r0, r4, #0
 800f736:	f7f1 f8c3 	bl	80008c0 <__aeabi_fadd>
 800f73a:	1c03      	adds	r3, r0, #0
 800f73c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f746:	2100      	movs	r1, #0
 800f748:	1c18      	adds	r0, r3, #0
 800f74a:	f7f0 fef1 	bl	8000530 <__aeabi_fcmplt>
 800f74e:	1e03      	subs	r3, r0, #0
 800f750:	d002      	beq.n	800f758 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f760:	1c19      	adds	r1, r3, #0
 800f762:	1c10      	adds	r0, r2, #0
 800f764:	f7f0 fef8 	bl	8000558 <__aeabi_fcmpgt>
 800f768:	1e03      	subs	r3, r0, #0
 800f76a:	d100      	bne.n	800f76e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f76c:	e002      	b.n	800f774 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f774:	46c0      	nop			@ (mov r8, r8)
 800f776:	46bd      	mov	sp, r7
 800f778:	b00c      	add	sp, #48	@ 0x30
 800f77a:	bdb0      	pop	{r4, r5, r7, pc}
 800f77c:	46fffe00 	.word	0x46fffe00
 800f780:	3c23d70a 	.word	0x3c23d70a
 800f784:	43ff0000 	.word	0x43ff0000
 800f788:	3db851ec 	.word	0x3db851ec
 800f78c:	42700000 	.word	0x42700000
 800f790:	3fa66666 	.word	0x3fa66666
 800f794:	3e99999a 	.word	0x3e99999a

0800f798 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f79a:	b087      	sub	sp, #28
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	223c      	movs	r2, #60	@ 0x3c
 800f7a6:	5c9b      	ldrb	r3, [r3, r2]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	4053      	eors	r3, r2
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	223c      	movs	r2, #60	@ 0x3c
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f7c6:	e0c8      	b.n	800f95a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7cc:	4965      	ldr	r1, [pc, #404]	@ (800f964 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f7ce:	1c18      	adds	r0, r3, #0
 800f7d0:	f7f0 fecc 	bl	800056c <__aeabi_fcmpge>
 800f7d4:	1e03      	subs	r3, r0, #0
 800f7d6:	d107      	bne.n	800f7e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f7dc:	4962      	ldr	r1, [pc, #392]	@ (800f968 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f7de:	1c18      	adds	r0, r3, #0
 800f7e0:	f7f0 feb0 	bl	8000544 <__aeabi_fcmple>
 800f7e4:	1e03      	subs	r3, r0, #0
 800f7e6:	d00e      	beq.n	800f806 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f7f0:	1c19      	adds	r1, r3, #0
 800f7f2:	1c10      	adds	r0, r2, #0
 800f7f4:	f7f1 f864 	bl	80008c0 <__aeabi_fadd>
 800f7f8:	1c03      	adds	r3, r0, #0
 800f7fa:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f80a:	1c19      	adds	r1, r3, #0
 800f80c:	6838      	ldr	r0, [r7, #0]
 800f80e:	f7f1 fd71 	bl	80012f4 <__aeabi_fsub>
 800f812:	1c03      	adds	r3, r0, #0
 800f814:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	0018      	movs	r0, r3
 800f81a:	f7ff fe7d 	bl	800f518 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f822:	1c19      	adds	r1, r3, #0
 800f824:	6838      	ldr	r0, [r7, #0]
 800f826:	f7f1 fd65 	bl	80012f4 <__aeabi_fsub>
 800f82a:	1c03      	adds	r3, r0, #0
 800f82c:	2185      	movs	r1, #133	@ 0x85
 800f82e:	05c9      	lsls	r1, r1, #23
 800f830:	1c18      	adds	r0, r3, #0
 800f832:	f7f1 fa37 	bl	8000ca4 <__aeabi_fdiv>
 800f836:	1c03      	adds	r3, r0, #0
 800f838:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f83a:	2100      	movs	r1, #0
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7f0 fe77 	bl	8000530 <__aeabi_fcmplt>
 800f842:	1e03      	subs	r3, r0, #0
 800f844:	d008      	beq.n	800f858 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f84a:	68f9      	ldr	r1, [r7, #12]
 800f84c:	1c18      	adds	r0, r3, #0
 800f84e:	f7f1 fd51 	bl	80012f4 <__aeabi_fsub>
 800f852:	1c03      	adds	r3, r0, #0
 800f854:	617b      	str	r3, [r7, #20]
 800f856:	e007      	b.n	800f868 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f85c:	1c19      	adds	r1, r3, #0
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7f1 f82e 	bl	80008c0 <__aeabi_fadd>
 800f864:	1c03      	adds	r3, r0, #0
 800f866:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f868:	23fe      	movs	r3, #254	@ 0xfe
 800f86a:	059b      	lsls	r3, r3, #22
 800f86c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f86e:	493f      	ldr	r1, [pc, #252]	@ (800f96c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f870:	6978      	ldr	r0, [r7, #20]
 800f872:	f7f0 fe71 	bl	8000558 <__aeabi_fcmpgt>
 800f876:	1e03      	subs	r3, r0, #0
 800f878:	d010      	beq.n	800f89c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f87a:	493c      	ldr	r1, [pc, #240]	@ (800f96c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f87c:	6978      	ldr	r0, [r7, #20]
 800f87e:	f7f1 fa11 	bl	8000ca4 <__aeabi_fdiv>
 800f882:	1c03      	adds	r3, r0, #0
 800f884:	1c1c      	adds	r4, r3, #0
 800f886:	4939      	ldr	r1, [pc, #228]	@ (800f96c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f888:	6978      	ldr	r0, [r7, #20]
 800f88a:	f7f1 fa0b 	bl	8000ca4 <__aeabi_fdiv>
 800f88e:	1c03      	adds	r3, r0, #0
 800f890:	1c19      	adds	r1, r3, #0
 800f892:	1c20      	adds	r0, r4, #0
 800f894:	f7f1 fbd4 	bl	8001040 <__aeabi_fmul>
 800f898:	1c03      	adds	r3, r0, #0
 800f89a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800f8a0:	1c19      	adds	r1, r3, #0
 800f8a2:	2085      	movs	r0, #133	@ 0x85
 800f8a4:	05c0      	lsls	r0, r0, #23
 800f8a6:	f7f1 fd25 	bl	80012f4 <__aeabi_fsub>
 800f8aa:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800f8ac:	6939      	ldr	r1, [r7, #16]
 800f8ae:	1c18      	adds	r0, r3, #0
 800f8b0:	f7f1 fbc6 	bl	8001040 <__aeabi_fmul>
 800f8b4:	1c03      	adds	r3, r0, #0
 800f8b6:	1c18      	adds	r0, r3, #0
 800f8b8:	f018 fdbc 	bl	8028434 <sqrtf>
 800f8bc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f8c6:	2185      	movs	r1, #133	@ 0x85
 800f8c8:	05c9      	lsls	r1, r1, #23
 800f8ca:	6938      	ldr	r0, [r7, #16]
 800f8cc:	f7f1 fbb8 	bl	8001040 <__aeabi_fmul>
 800f8d0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800f8d2:	1c19      	adds	r1, r3, #0
 800f8d4:	1c28      	adds	r0, r5, #0
 800f8d6:	f7f1 f9e5 	bl	8000ca4 <__aeabi_fdiv>
 800f8da:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f8dc:	1c19      	adds	r1, r3, #0
 800f8de:	1c20      	adds	r0, r4, #0
 800f8e0:	f7f1 fbae 	bl	8001040 <__aeabi_fmul>
 800f8e4:	1c03      	adds	r3, r0, #0
 800f8e6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f8ec:	68f9      	ldr	r1, [r7, #12]
 800f8ee:	1c18      	adds	r0, r3, #0
 800f8f0:	f7f1 fba6 	bl	8001040 <__aeabi_fmul>
 800f8f4:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800f8f6:	6939      	ldr	r1, [r7, #16]
 800f8f8:	1c18      	adds	r0, r3, #0
 800f8fa:	f7f1 f9d3 	bl	8000ca4 <__aeabi_fdiv>
 800f8fe:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800f900:	68f9      	ldr	r1, [r7, #12]
 800f902:	1c18      	adds	r0, r3, #0
 800f904:	f7f1 fb9c 	bl	8001040 <__aeabi_fmul>
 800f908:	1c03      	adds	r3, r0, #0
             sqrtf(
 800f90a:	1c19      	adds	r1, r3, #0
 800f90c:	1c20      	adds	r0, r4, #0
 800f90e:	f7f0 ffd7 	bl	80008c0 <__aeabi_fadd>
 800f912:	1c03      	adds	r3, r0, #0
 800f914:	1c18      	adds	r0, r3, #0
 800f916:	f018 fd8d 	bl	8028434 <sqrtf>
 800f91a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f91c:	1c19      	adds	r1, r3, #0
 800f91e:	1c30      	adds	r0, r6, #0
 800f920:	f7f1 fb8e 	bl	8001040 <__aeabi_fmul>
 800f924:	1c03      	adds	r3, r0, #0
 800f926:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f934:	68f9      	ldr	r1, [r7, #12]
 800f936:	1c18      	adds	r0, r3, #0
 800f938:	f7f1 fb82 	bl	8001040 <__aeabi_fmul>
 800f93c:	1c03      	adds	r3, r0, #0
 800f93e:	2182      	movs	r1, #130	@ 0x82
 800f940:	05c9      	lsls	r1, r1, #23
 800f942:	1c18      	adds	r0, r3, #0
 800f944:	f7f1 f9ae 	bl	8000ca4 <__aeabi_fdiv>
 800f948:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800f94a:	1c19      	adds	r1, r3, #0
 800f94c:	1c20      	adds	r0, r4, #0
 800f94e:	f7f0 ffb7 	bl	80008c0 <__aeabi_fadd>
 800f952:	1c03      	adds	r3, r0, #0
 800f954:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f95a:	46c0      	nop			@ (mov r8, r8)
 800f95c:	46bd      	mov	sp, r7
 800f95e:	b007      	add	sp, #28
 800f960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f962:	46c0      	nop			@ (mov r8, r8)
 800f964:	42c80000 	.word	0x42c80000
 800f968:	c2c80000 	.word	0xc2c80000
 800f96c:	44b40000 	.word	0x44b40000

0800f970 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f988:	46c0      	nop			@ (mov r8, r8)
 800f98a:	46bd      	mov	sp, r7
 800f98c:	b004      	add	sp, #16
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800f990:	b590      	push	{r4, r7, lr}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9a2:	1c19      	adds	r1, r3, #0
 800f9a4:	6838      	ldr	r0, [r7, #0]
 800f9a6:	f7f1 fca5 	bl	80012f4 <__aeabi_fsub>
 800f9aa:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f9ac:	1c19      	adds	r1, r3, #0
 800f9ae:	1c20      	adds	r0, r4, #0
 800f9b0:	f7f1 fb46 	bl	8001040 <__aeabi_fmul>
 800f9b4:	1c03      	adds	r3, r0, #0
 800f9b6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800f9b8:	4912      	ldr	r1, [pc, #72]	@ (800fa04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7f0 fdb8 	bl	8000530 <__aeabi_fcmplt>
 800f9c0:	1e03      	subs	r3, r0, #0
 800f9c2:	d002      	beq.n	800f9ca <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800f9c4:	23fe      	movs	r3, #254	@ 0xfe
 800f9c6:	059b      	lsls	r3, r3, #22
 800f9c8:	e018      	b.n	800f9fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800f9ca:	490f      	ldr	r1, [pc, #60]	@ (800fa08 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f7f0 fdc3 	bl	8000558 <__aeabi_fcmpgt>
 800f9d2:	1e03      	subs	r3, r0, #0
 800f9d4:	d001      	beq.n	800f9da <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e010      	b.n	800f9fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	1c18      	adds	r0, r3, #0
 800f9de:	f018 fd01 	bl	80283e4 <expf>
 800f9e2:	1c03      	adds	r3, r0, #0
 800f9e4:	21fe      	movs	r1, #254	@ 0xfe
 800f9e6:	0589      	lsls	r1, r1, #22
 800f9e8:	1c18      	adds	r0, r3, #0
 800f9ea:	f7f0 ff69 	bl	80008c0 <__aeabi_fadd>
 800f9ee:	1c03      	adds	r3, r0, #0
 800f9f0:	1c19      	adds	r1, r3, #0
 800f9f2:	20fe      	movs	r0, #254	@ 0xfe
 800f9f4:	0580      	lsls	r0, r0, #22
 800f9f6:	f7f1 f955 	bl	8000ca4 <__aeabi_fdiv>
 800f9fa:	1c03      	adds	r3, r0, #0
    }
}
 800f9fc:	1c18      	adds	r0, r3, #0
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	b005      	add	sp, #20
 800fa02:	bd90      	pop	{r4, r7, pc}
 800fa04:	c2480000 	.word	0xc2480000
 800fa08:	42480000 	.word	0x42480000

0800fa0c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800fa24:	46c0      	nop			@ (mov r8, r8)
 800fa26:	46bd      	mov	sp, r7
 800fa28:	b004      	add	sp, #16
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d114      	bne.n	800fa68 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa42:	1c19      	adds	r1, r3, #0
 800fa44:	6838      	ldr	r0, [r7, #0]
 800fa46:	f7f1 fc55 	bl	80012f4 <__aeabi_fsub>
 800fa4a:	1c03      	adds	r3, r0, #0
 800fa4c:	4918      	ldr	r1, [pc, #96]	@ (800fab0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800fa4e:	1c18      	adds	r0, r3, #0
 800fa50:	f7f1 f928 	bl	8000ca4 <__aeabi_fdiv>
 800fa54:	1c03      	adds	r3, r0, #0
 800fa56:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800fa5c:	1c19      	adds	r1, r3, #0
 800fa5e:	1c10      	adds	r0, r2, #0
 800fa60:	f7f1 faee 	bl	8001040 <__aeabi_fmul>
 800fa64:	1c03      	adds	r3, r0, #0
 800fa66:	e01f      	b.n	800faa8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa6c:	1c19      	adds	r1, r3, #0
 800fa6e:	6838      	ldr	r0, [r7, #0]
 800fa70:	f7f1 fc40 	bl	80012f4 <__aeabi_fsub>
 800fa74:	1c03      	adds	r3, r0, #0
 800fa76:	1c1a      	adds	r2, r3, #0
 800fa78:	2380      	movs	r3, #128	@ 0x80
 800fa7a:	061b      	lsls	r3, r3, #24
 800fa7c:	4053      	eors	r3, r2
 800fa7e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa84:	490b      	ldr	r1, [pc, #44]	@ (800fab4 <GasIndexAlgorithm__mox_model__process+0x88>)
 800fa86:	1c18      	adds	r0, r3, #0
 800fa88:	f7f0 ff1a 	bl	80008c0 <__aeabi_fadd>
 800fa8c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fa8e:	1c19      	adds	r1, r3, #0
 800fa90:	1c20      	adds	r0, r4, #0
 800fa92:	f7f1 f907 	bl	8000ca4 <__aeabi_fdiv>
 800fa96:	1c03      	adds	r3, r0, #0
 800fa98:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800fa9e:	1c19      	adds	r1, r3, #0
 800faa0:	1c10      	adds	r0, r2, #0
 800faa2:	f7f1 facd 	bl	8001040 <__aeabi_fmul>
 800faa6:	1c03      	adds	r3, r0, #0
    }
}
 800faa8:	1c18      	adds	r0, r3, #0
 800faaa:	46bd      	mov	sp, r7
 800faac:	b003      	add	sp, #12
 800faae:	bd90      	pop	{r4, r7, pc}
 800fab0:	44fa0000 	.word	0x44fa0000
 800fab4:	435c0000 	.word	0x435c0000

0800fab8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2180      	movs	r1, #128	@ 0x80
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2184      	movs	r1, #132	@ 0x84
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2188      	movs	r1, #136	@ 0x88
 800fada:	683a      	ldr	r2, [r7, #0]
 800fadc:	505a      	str	r2, [r3, r1]
}
 800fade:	46c0      	nop			@ (mov r8, r8)
 800fae0:	46bd      	mov	sp, r7
 800fae2:	b004      	add	sp, #16
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800fae8:	b590      	push	{r4, r7, lr}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2280      	movs	r2, #128	@ 0x80
 800faf6:	589c      	ldr	r4, [r3, r2]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2284      	movs	r2, #132	@ 0x84
 800fafc:	589b      	ldr	r3, [r3, r2]
 800fafe:	1c19      	adds	r1, r3, #0
 800fb00:	6838      	ldr	r0, [r7, #0]
 800fb02:	f7f1 fbf7 	bl	80012f4 <__aeabi_fsub>
 800fb06:	1c03      	adds	r3, r0, #0
 800fb08:	1c19      	adds	r1, r3, #0
 800fb0a:	1c20      	adds	r0, r4, #0
 800fb0c:	f7f1 fa98 	bl	8001040 <__aeabi_fmul>
 800fb10:	1c03      	adds	r3, r0, #0
 800fb12:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800fb14:	4940      	ldr	r1, [pc, #256]	@ (800fc18 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800fb16:	68b8      	ldr	r0, [r7, #8]
 800fb18:	f7f0 fd0a 	bl	8000530 <__aeabi_fcmplt>
 800fb1c:	1e03      	subs	r3, r0, #0
 800fb1e:	d001      	beq.n	800fb24 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800fb20:	4b3e      	ldr	r3, [pc, #248]	@ (800fc1c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb22:	e075      	b.n	800fc10 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800fb24:	493e      	ldr	r1, [pc, #248]	@ (800fc20 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800fb26:	68b8      	ldr	r0, [r7, #8]
 800fb28:	f7f0 fd16 	bl	8000558 <__aeabi_fcmpgt>
 800fb2c:	1e03      	subs	r3, r0, #0
 800fb2e:	d001      	beq.n	800fb34 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800fb30:	2300      	movs	r3, #0
 800fb32:	e06d      	b.n	800fc10 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800fb34:	2100      	movs	r1, #0
 800fb36:	6838      	ldr	r0, [r7, #0]
 800fb38:	f7f0 fd18 	bl	800056c <__aeabi_fcmpge>
 800fb3c:	1e03      	subs	r3, r0, #0
 800fb3e:	d047      	beq.n	800fbd0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2288      	movs	r2, #136	@ 0x88
 800fb44:	589b      	ldr	r3, [r3, r2]
 800fb46:	21fe      	movs	r1, #254	@ 0xfe
 800fb48:	0589      	lsls	r1, r1, #22
 800fb4a:	1c18      	adds	r0, r3, #0
 800fb4c:	f7f0 fcea 	bl	8000524 <__aeabi_fcmpeq>
 800fb50:	1e03      	subs	r3, r0, #0
 800fb52:	d00e      	beq.n	800fb72 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	1c19      	adds	r1, r3, #0
 800fb5a:	20fe      	movs	r0, #254	@ 0xfe
 800fb5c:	0580      	lsls	r0, r0, #22
 800fb5e:	f7f1 fbc9 	bl	80012f4 <__aeabi_fsub>
 800fb62:	1c03      	adds	r3, r0, #0
 800fb64:	492f      	ldr	r1, [pc, #188]	@ (800fc24 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800fb66:	1c18      	adds	r0, r3, #0
 800fb68:	f7f1 fa6a 	bl	8001040 <__aeabi_fmul>
 800fb6c:	1c03      	adds	r3, r0, #0
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	e012      	b.n	800fb98 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	492c      	ldr	r1, [pc, #176]	@ (800fc28 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800fb78:	1c18      	adds	r0, r3, #0
 800fb7a:	f7f1 fa61 	bl	8001040 <__aeabi_fmul>
 800fb7e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800fb80:	1c19      	adds	r1, r3, #0
 800fb82:	4826      	ldr	r0, [pc, #152]	@ (800fc1c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb84:	f7f1 fbb6 	bl	80012f4 <__aeabi_fsub>
 800fb88:	1c03      	adds	r3, r0, #0
 800fb8a:	2181      	movs	r1, #129	@ 0x81
 800fb8c:	05c9      	lsls	r1, r1, #23
 800fb8e:	1c18      	adds	r0, r3, #0
 800fb90:	f7f1 f888 	bl	8000ca4 <__aeabi_fdiv>
 800fb94:	1c03      	adds	r3, r0, #0
 800fb96:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800fb98:	4920      	ldr	r1, [pc, #128]	@ (800fc1c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7f0 fe90 	bl	80008c0 <__aeabi_fadd>
 800fba0:	1c03      	adds	r3, r0, #0
 800fba2:	1c1c      	adds	r4, r3, #0
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	1c18      	adds	r0, r3, #0
 800fba8:	f018 fc1c 	bl	80283e4 <expf>
 800fbac:	1c03      	adds	r3, r0, #0
 800fbae:	21fe      	movs	r1, #254	@ 0xfe
 800fbb0:	0589      	lsls	r1, r1, #22
 800fbb2:	1c18      	adds	r0, r3, #0
 800fbb4:	f7f0 fe84 	bl	80008c0 <__aeabi_fadd>
 800fbb8:	1c03      	adds	r3, r0, #0
 800fbba:	1c19      	adds	r1, r3, #0
 800fbbc:	1c20      	adds	r0, r4, #0
 800fbbe:	f7f1 f871 	bl	8000ca4 <__aeabi_fdiv>
 800fbc2:	1c03      	adds	r3, r0, #0
 800fbc4:	68f9      	ldr	r1, [r7, #12]
 800fbc6:	1c18      	adds	r0, r3, #0
 800fbc8:	f7f1 fb94 	bl	80012f4 <__aeabi_fsub>
 800fbcc:	1c03      	adds	r3, r0, #0
 800fbce:	e01f      	b.n	800fc10 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2188      	movs	r1, #136	@ 0x88
 800fbd8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800fbda:	1c19      	adds	r1, r3, #0
 800fbdc:	1c10      	adds	r0, r2, #0
 800fbde:	f7f1 f861 	bl	8000ca4 <__aeabi_fdiv>
 800fbe2:	1c03      	adds	r3, r0, #0
 800fbe4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	1c18      	adds	r0, r3, #0
 800fbea:	f018 fbfb 	bl	80283e4 <expf>
 800fbee:	1c03      	adds	r3, r0, #0
 800fbf0:	21fe      	movs	r1, #254	@ 0xfe
 800fbf2:	0589      	lsls	r1, r1, #22
 800fbf4:	1c18      	adds	r0, r3, #0
 800fbf6:	f7f0 fe63 	bl	80008c0 <__aeabi_fadd>
 800fbfa:	1c03      	adds	r3, r0, #0
 800fbfc:	1c19      	adds	r1, r3, #0
 800fbfe:	4807      	ldr	r0, [pc, #28]	@ (800fc1c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fc00:	f7f1 f850 	bl	8000ca4 <__aeabi_fdiv>
 800fc04:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fc06:	1c19      	adds	r1, r3, #0
 800fc08:	1c20      	adds	r0, r4, #0
 800fc0a:	f7f1 fa19 	bl	8001040 <__aeabi_fmul>
 800fc0e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800fc10:	1c18      	adds	r0, r3, #0
 800fc12:	46bd      	mov	sp, r7
 800fc14:	b005      	add	sp, #20
 800fc16:	bd90      	pop	{r4, r7, pc}
 800fc18:	c2480000 	.word	0xc2480000
 800fc1c:	43fa0000 	.word	0x43fa0000
 800fc20:	42480000 	.word	0x42480000
 800fc24:	3f8041ab 	.word	0x3f8041ab
 800fc28:	40a00000 	.word	0x40a00000

0800fc2c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fc2c:	b590      	push	{r4, r7, lr}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	4913      	ldr	r1, [pc, #76]	@ (800fc8c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800fc3e:	1c18      	adds	r0, r3, #0
 800fc40:	f7f0 fe3e 	bl	80008c0 <__aeabi_fadd>
 800fc44:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fc46:	1c19      	adds	r1, r3, #0
 800fc48:	1c20      	adds	r0, r4, #0
 800fc4a:	f7f1 f82b 	bl	8000ca4 <__aeabi_fdiv>
 800fc4e:	1c03      	adds	r3, r0, #0
 800fc50:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	228c      	movs	r2, #140	@ 0x8c
 800fc56:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	490b      	ldr	r1, [pc, #44]	@ (800fc90 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800fc62:	1c18      	adds	r0, r3, #0
 800fc64:	f7f0 fe2c 	bl	80008c0 <__aeabi_fadd>
 800fc68:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fc6a:	1c19      	adds	r1, r3, #0
 800fc6c:	1c20      	adds	r0, r4, #0
 800fc6e:	f7f1 f819 	bl	8000ca4 <__aeabi_fdiv>
 800fc72:	1c03      	adds	r3, r0, #0
 800fc74:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2290      	movs	r2, #144	@ 0x90
 800fc7a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2294      	movs	r2, #148	@ 0x94
 800fc80:	2100      	movs	r1, #0
 800fc82:	5499      	strb	r1, [r3, r2]
}
 800fc84:	46c0      	nop			@ (mov r8, r8)
 800fc86:	46bd      	mov	sp, r7
 800fc88:	b003      	add	sp, #12
 800fc8a:	bd90      	pop	{r4, r7, pc}
 800fc8c:	41a00000 	.word	0x41a00000
 800fc90:	43fa0000 	.word	0x43fa0000

0800fc94 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800fc94:	b590      	push	{r4, r7, lr}
 800fc96:	b087      	sub	sp, #28
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2294      	movs	r2, #148	@ 0x94
 800fca2:	5c9b      	ldrb	r3, [r3, r2]
 800fca4:	2201      	movs	r2, #1
 800fca6:	4053      	eors	r3, r2
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00f      	beq.n	800fcce <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2198      	movs	r1, #152	@ 0x98
 800fcb2:	683a      	ldr	r2, [r7, #0]
 800fcb4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	219c      	movs	r1, #156	@ 0x9c
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	21a0      	movs	r1, #160	@ 0xa0
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2294      	movs	r2, #148	@ 0x94
 800fcca:	2101      	movs	r1, #1
 800fccc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	228c      	movs	r2, #140	@ 0x8c
 800fcd2:	589b      	ldr	r3, [r3, r2]
 800fcd4:	1c19      	adds	r1, r3, #0
 800fcd6:	20fe      	movs	r0, #254	@ 0xfe
 800fcd8:	0580      	lsls	r0, r0, #22
 800fcda:	f7f1 fb0b 	bl	80012f4 <__aeabi_fsub>
 800fcde:	1c03      	adds	r3, r0, #0
 800fce0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2298      	movs	r2, #152	@ 0x98
 800fce6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fce8:	1c19      	adds	r1, r3, #0
 800fcea:	f7f1 f9a9 	bl	8001040 <__aeabi_fmul>
 800fcee:	1c03      	adds	r3, r0, #0
 800fcf0:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	228c      	movs	r2, #140	@ 0x8c
 800fcf6:	589b      	ldr	r3, [r3, r2]
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	1c18      	adds	r0, r3, #0
 800fcfc:	f7f1 f9a0 	bl	8001040 <__aeabi_fmul>
 800fd00:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800fd02:	1c19      	adds	r1, r3, #0
 800fd04:	1c20      	adds	r0, r4, #0
 800fd06:	f7f0 fddb 	bl	80008c0 <__aeabi_fadd>
 800fd0a:	1c03      	adds	r3, r0, #0
 800fd0c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2298      	movs	r2, #152	@ 0x98
 800fd12:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2290      	movs	r2, #144	@ 0x90
 800fd18:	589b      	ldr	r3, [r3, r2]
 800fd1a:	1c19      	adds	r1, r3, #0
 800fd1c:	20fe      	movs	r0, #254	@ 0xfe
 800fd1e:	0580      	lsls	r0, r0, #22
 800fd20:	f7f1 fae8 	bl	80012f4 <__aeabi_fsub>
 800fd24:	1c03      	adds	r3, r0, #0
 800fd26:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	229c      	movs	r2, #156	@ 0x9c
 800fd2c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fd2e:	1c19      	adds	r1, r3, #0
 800fd30:	f7f1 f986 	bl	8001040 <__aeabi_fmul>
 800fd34:	1c03      	adds	r3, r0, #0
 800fd36:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2290      	movs	r2, #144	@ 0x90
 800fd3c:	589b      	ldr	r3, [r3, r2]
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	1c18      	adds	r0, r3, #0
 800fd42:	f7f1 f97d 	bl	8001040 <__aeabi_fmul>
 800fd46:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800fd48:	1c19      	adds	r1, r3, #0
 800fd4a:	1c20      	adds	r0, r4, #0
 800fd4c:	f7f0 fdb8 	bl	80008c0 <__aeabi_fadd>
 800fd50:	1c03      	adds	r3, r0, #0
 800fd52:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	229c      	movs	r2, #156	@ 0x9c
 800fd58:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2298      	movs	r2, #152	@ 0x98
 800fd5e:	589a      	ldr	r2, [r3, r2]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	219c      	movs	r1, #156	@ 0x9c
 800fd64:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800fd66:	1c19      	adds	r1, r3, #0
 800fd68:	1c10      	adds	r0, r2, #0
 800fd6a:	f7f1 fac3 	bl	80012f4 <__aeabi_fsub>
 800fd6e:	1c03      	adds	r3, r0, #0
 800fd70:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800fd72:	2100      	movs	r1, #0
 800fd74:	6978      	ldr	r0, [r7, #20]
 800fd76:	f7f0 fbdb 	bl	8000530 <__aeabi_fcmplt>
 800fd7a:	1e03      	subs	r3, r0, #0
 800fd7c:	d004      	beq.n	800fd88 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2280      	movs	r2, #128	@ 0x80
 800fd82:	0612      	lsls	r2, r2, #24
 800fd84:	4053      	eors	r3, r2
 800fd86:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800fd88:	4923      	ldr	r1, [pc, #140]	@ (800fe18 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800fd8a:	6978      	ldr	r0, [r7, #20]
 800fd8c:	f7f1 f958 	bl	8001040 <__aeabi_fmul>
 800fd90:	1c03      	adds	r3, r0, #0
 800fd92:	1c18      	adds	r0, r3, #0
 800fd94:	f018 fb26 	bl	80283e4 <expf>
 800fd98:	1c03      	adds	r3, r0, #0
 800fd9a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800fd9c:	491f      	ldr	r1, [pc, #124]	@ (800fe1c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800fd9e:	6938      	ldr	r0, [r7, #16]
 800fda0:	f7f1 f94e 	bl	8001040 <__aeabi_fmul>
 800fda4:	1c03      	adds	r3, r0, #0
 800fda6:	491e      	ldr	r1, [pc, #120]	@ (800fe20 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800fda8:	1c18      	adds	r0, r3, #0
 800fdaa:	f7f0 fd89 	bl	80008c0 <__aeabi_fadd>
 800fdae:	1c03      	adds	r3, r0, #0
 800fdb0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	685c      	ldr	r4, [r3, #4]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	68f9      	ldr	r1, [r7, #12]
 800fdbc:	1c18      	adds	r0, r3, #0
 800fdbe:	f7f0 fd7f 	bl	80008c0 <__aeabi_fadd>
 800fdc2:	1c03      	adds	r3, r0, #0
 800fdc4:	1c19      	adds	r1, r3, #0
 800fdc6:	1c20      	adds	r0, r4, #0
 800fdc8:	f7f0 ff6c 	bl	8000ca4 <__aeabi_fdiv>
 800fdcc:	1c03      	adds	r3, r0, #0
 800fdce:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800fdd0:	68b9      	ldr	r1, [r7, #8]
 800fdd2:	20fe      	movs	r0, #254	@ 0xfe
 800fdd4:	0580      	lsls	r0, r0, #22
 800fdd6:	f7f1 fa8d 	bl	80012f4 <__aeabi_fsub>
 800fdda:	1c03      	adds	r3, r0, #0
 800fddc:	1c18      	adds	r0, r3, #0
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	22a0      	movs	r2, #160	@ 0xa0
 800fde2:	589b      	ldr	r3, [r3, r2]
 800fde4:	1c19      	adds	r1, r3, #0
 800fde6:	f7f1 f92b 	bl	8001040 <__aeabi_fmul>
 800fdea:	1c03      	adds	r3, r0, #0
 800fdec:	1c1c      	adds	r4, r3, #0
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	68b8      	ldr	r0, [r7, #8]
 800fdf2:	f7f1 f925 	bl	8001040 <__aeabi_fmul>
 800fdf6:	1c03      	adds	r3, r0, #0
 800fdf8:	1c19      	adds	r1, r3, #0
 800fdfa:	1c20      	adds	r0, r4, #0
 800fdfc:	f7f0 fd60 	bl	80008c0 <__aeabi_fadd>
 800fe00:	1c03      	adds	r3, r0, #0
 800fe02:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	22a0      	movs	r2, #160	@ 0xa0
 800fe08:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	22a0      	movs	r2, #160	@ 0xa0
 800fe0e:	589b      	ldr	r3, [r3, r2]
}
 800fe10:	1c18      	adds	r0, r3, #0
 800fe12:	46bd      	mov	sp, r7
 800fe14:	b007      	add	sp, #28
 800fe16:	bd90      	pop	{r4, r7, pc}
 800fe18:	be4ccccd 	.word	0xbe4ccccd
 800fe1c:	43f00000 	.word	0x43f00000
 800fe20:	41a00000 	.word	0x41a00000

0800fe24 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	000a      	movs	r2, r1
 800fe2e:	1cbb      	adds	r3, r7, #2
 800fe30:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800fe32:	230d      	movs	r3, #13
 800fe34:	18fb      	adds	r3, r7, r3
 800fe36:	22ff      	movs	r2, #255	@ 0xff
 800fe38:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800fe3a:	230e      	movs	r3, #14
 800fe3c:	18fb      	adds	r3, r7, r3
 800fe3e:	2200      	movs	r2, #0
 800fe40:	801a      	strh	r2, [r3, #0]
 800fe42:	e038      	b.n	800feb6 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800fe44:	230e      	movs	r3, #14
 800fe46:	18fb      	adds	r3, r7, r3
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	18d3      	adds	r3, r2, r3
 800fe4e:	7819      	ldrb	r1, [r3, #0]
 800fe50:	220d      	movs	r2, #13
 800fe52:	18bb      	adds	r3, r7, r2
 800fe54:	18ba      	adds	r2, r7, r2
 800fe56:	7812      	ldrb	r2, [r2, #0]
 800fe58:	404a      	eors	r2, r1
 800fe5a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fe5c:	230c      	movs	r3, #12
 800fe5e:	18fb      	adds	r3, r7, r3
 800fe60:	2208      	movs	r2, #8
 800fe62:	701a      	strb	r2, [r3, #0]
 800fe64:	e01c      	b.n	800fea0 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800fe66:	210d      	movs	r1, #13
 800fe68:	187b      	adds	r3, r7, r1
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	b25b      	sxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	da0a      	bge.n	800fe88 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800fe72:	187b      	adds	r3, r7, r1
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	b25b      	sxtb	r3, r3
 800fe78:	18db      	adds	r3, r3, r3
 800fe7a:	b25b      	sxtb	r3, r3
 800fe7c:	2231      	movs	r2, #49	@ 0x31
 800fe7e:	4053      	eors	r3, r2
 800fe80:	b25a      	sxtb	r2, r3
 800fe82:	187b      	adds	r3, r7, r1
 800fe84:	701a      	strb	r2, [r3, #0]
 800fe86:	e005      	b.n	800fe94 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 800fe88:	230d      	movs	r3, #13
 800fe8a:	18fa      	adds	r2, r7, r3
 800fe8c:	18fb      	adds	r3, r7, r3
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	18db      	adds	r3, r3, r3
 800fe92:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fe94:	220c      	movs	r2, #12
 800fe96:	18bb      	adds	r3, r7, r2
 800fe98:	18ba      	adds	r2, r7, r2
 800fe9a:	7812      	ldrb	r2, [r2, #0]
 800fe9c:	3a01      	subs	r2, #1
 800fe9e:	701a      	strb	r2, [r3, #0]
 800fea0:	230c      	movs	r3, #12
 800fea2:	18fb      	adds	r3, r7, r3
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d1dd      	bne.n	800fe66 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800feaa:	220e      	movs	r2, #14
 800feac:	18bb      	adds	r3, r7, r2
 800feae:	18ba      	adds	r2, r7, r2
 800feb0:	8812      	ldrh	r2, [r2, #0]
 800feb2:	3201      	adds	r2, #1
 800feb4:	801a      	strh	r2, [r3, #0]
 800feb6:	230e      	movs	r3, #14
 800feb8:	18fa      	adds	r2, r7, r3
 800feba:	1cbb      	adds	r3, r7, #2
 800febc:	8812      	ldrh	r2, [r2, #0]
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d3bf      	bcc.n	800fe44 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800fec4:	230d      	movs	r3, #13
 800fec6:	18fb      	adds	r3, r7, r3
 800fec8:	781b      	ldrb	r3, [r3, #0]
}
 800feca:	0018      	movs	r0, r3
 800fecc:	46bd      	mov	sp, r7
 800fece:	b004      	add	sp, #16
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b082      	sub	sp, #8
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	0008      	movs	r0, r1
 800fedc:	0011      	movs	r1, r2
 800fede:	1cbb      	adds	r3, r7, #2
 800fee0:	1c02      	adds	r2, r0, #0
 800fee2:	801a      	strh	r2, [r3, #0]
 800fee4:	1c7b      	adds	r3, r7, #1
 800fee6:	1c0a      	adds	r2, r1, #0
 800fee8:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800feea:	1cbb      	adds	r3, r7, #2
 800feec:	881a      	ldrh	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	0011      	movs	r1, r2
 800fef2:	0018      	movs	r0, r3
 800fef4:	f7ff ff96 	bl	800fe24 <sensirion_i2c_generate_crc>
 800fef8:	0003      	movs	r3, r0
 800fefa:	001a      	movs	r2, r3
 800fefc:	1c7b      	adds	r3, r7, #1
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d001      	beq.n	800ff08 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ff04:	2301      	movs	r3, #1
 800ff06:	e000      	b.n	800ff0a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	0018      	movs	r0, r3
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	b002      	add	sp, #8
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b082      	sub	sp, #8
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	0008      	movs	r0, r1
 800ff1c:	0011      	movs	r1, r2
 800ff1e:	1cbb      	adds	r3, r7, #2
 800ff20:	1c02      	adds	r2, r0, #0
 800ff22:	801a      	strh	r2, [r3, #0]
 800ff24:	003b      	movs	r3, r7
 800ff26:	1c0a      	adds	r2, r1, #0
 800ff28:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ff2a:	003b      	movs	r3, r7
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	0a1b      	lsrs	r3, r3, #8
 800ff30:	b299      	uxth	r1, r3
 800ff32:	1cbb      	adds	r3, r7, #2
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	1cba      	adds	r2, r7, #2
 800ff38:	1c58      	adds	r0, r3, #1
 800ff3a:	8010      	strh	r0, [r2, #0]
 800ff3c:	001a      	movs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	189b      	adds	r3, r3, r2
 800ff42:	b2ca      	uxtb	r2, r1
 800ff44:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ff46:	1cbb      	adds	r3, r7, #2
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	1cba      	adds	r2, r7, #2
 800ff4c:	1c59      	adds	r1, r3, #1
 800ff4e:	8011      	strh	r1, [r2, #0]
 800ff50:	001a      	movs	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	189b      	adds	r3, r3, r2
 800ff56:	003a      	movs	r2, r7
 800ff58:	8812      	ldrh	r2, [r2, #0]
 800ff5a:	b2d2      	uxtb	r2, r2
 800ff5c:	701a      	strb	r2, [r3, #0]
    return offset;
 800ff5e:	1cbb      	adds	r3, r7, #2
 800ff60:	881b      	ldrh	r3, [r3, #0]
}
 800ff62:	0018      	movs	r0, r3
 800ff64:	46bd      	mov	sp, r7
 800ff66:	b002      	add	sp, #8
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800ff6a:	b590      	push	{r4, r7, lr}
 800ff6c:	b083      	sub	sp, #12
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	0008      	movs	r0, r1
 800ff74:	0011      	movs	r1, r2
 800ff76:	1cbb      	adds	r3, r7, #2
 800ff78:	1c02      	adds	r2, r0, #0
 800ff7a:	801a      	strh	r2, [r3, #0]
 800ff7c:	003b      	movs	r3, r7
 800ff7e:	1c0a      	adds	r2, r1, #0
 800ff80:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ff82:	003b      	movs	r3, r7
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	0a1b      	lsrs	r3, r3, #8
 800ff88:	b299      	uxth	r1, r3
 800ff8a:	1cbb      	adds	r3, r7, #2
 800ff8c:	881b      	ldrh	r3, [r3, #0]
 800ff8e:	1cba      	adds	r2, r7, #2
 800ff90:	1c58      	adds	r0, r3, #1
 800ff92:	8010      	strh	r0, [r2, #0]
 800ff94:	001a      	movs	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	189b      	adds	r3, r3, r2
 800ff9a:	b2ca      	uxtb	r2, r1
 800ff9c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ff9e:	1cbb      	adds	r3, r7, #2
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	1cba      	adds	r2, r7, #2
 800ffa4:	1c59      	adds	r1, r3, #1
 800ffa6:	8011      	strh	r1, [r2, #0]
 800ffa8:	001a      	movs	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	189b      	adds	r3, r3, r2
 800ffae:	003a      	movs	r2, r7
 800ffb0:	8812      	ldrh	r2, [r2, #0]
 800ffb2:	b2d2      	uxtb	r2, r2
 800ffb4:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ffb6:	1cbb      	adds	r3, r7, #2
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	3b02      	subs	r3, #2
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ffc0:	1cbb      	adds	r3, r7, #2
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	18d4      	adds	r4, r2, r3
 800ffc8:	2102      	movs	r1, #2
 800ffca:	f7ff ff2b 	bl	800fe24 <sensirion_i2c_generate_crc>
 800ffce:	0003      	movs	r3, r0
 800ffd0:	7023      	strb	r3, [r4, #0]
    offset++;
 800ffd2:	1cbb      	adds	r3, r7, #2
 800ffd4:	881a      	ldrh	r2, [r3, #0]
 800ffd6:	1cbb      	adds	r3, r7, #2
 800ffd8:	3201      	adds	r2, #1
 800ffda:	801a      	strh	r2, [r3, #0]

    return offset;
 800ffdc:	1cbb      	adds	r3, r7, #2
 800ffde:	881b      	ldrh	r3, [r3, #0]
}
 800ffe0:	0018      	movs	r0, r3
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	b003      	add	sp, #12
 800ffe6:	bd90      	pop	{r4, r7, pc}

0800ffe8 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	0008      	movs	r0, r1
 800fff2:	0011      	movs	r1, r2
 800fff4:	1cbb      	adds	r3, r7, #2
 800fff6:	1c02      	adds	r2, r0, #0
 800fff8:	801a      	strh	r2, [r3, #0]
 800fffa:	003b      	movs	r3, r7
 800fffc:	1c0a      	adds	r2, r1, #0
 800fffe:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010000:	003b      	movs	r3, r7
 8010002:	881a      	ldrh	r2, [r3, #0]
 8010004:	1cbb      	adds	r3, r7, #2
 8010006:	8819      	ldrh	r1, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	0018      	movs	r0, r3
 801000c:	f7ff ffad 	bl	800ff6a <sensirion_i2c_add_uint16_t_to_buffer>
 8010010:	0003      	movs	r3, r0
}
 8010012:	0018      	movs	r0, r3
 8010014:	46bd      	mov	sp, r7
 8010016:	b002      	add	sp, #8
 8010018:	bd80      	pop	{r7, pc}

0801001a <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6039      	str	r1, [r7, #0]
 8010022:	0011      	movs	r1, r2
 8010024:	1dfb      	adds	r3, r7, #7
 8010026:	1c02      	adds	r2, r0, #0
 8010028:	701a      	strb	r2, [r3, #0]
 801002a:	1d3b      	adds	r3, r7, #4
 801002c:	1c0a      	adds	r2, r1, #0
 801002e:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010030:	1d3b      	adds	r3, r7, #4
 8010032:	881a      	ldrh	r2, [r3, #0]
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	1dfb      	adds	r3, r7, #7
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	0018      	movs	r0, r3
 801003c:	f7fe f9b0 	bl	800e3a0 <sensirion_i2c_hal_write>
 8010040:	0003      	movs	r3, r0
}
 8010042:	0018      	movs	r0, r3
 8010044:	46bd      	mov	sp, r7
 8010046:	b002      	add	sp, #8
 8010048:	bd80      	pop	{r7, pc}

0801004a <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 801004a:	b5b0      	push	{r4, r5, r7, lr}
 801004c:	b084      	sub	sp, #16
 801004e:	af00      	add	r7, sp, #0
 8010050:	6039      	str	r1, [r7, #0]
 8010052:	0011      	movs	r1, r2
 8010054:	1dfb      	adds	r3, r7, #7
 8010056:	1c02      	adds	r2, r0, #0
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	1d3b      	adds	r3, r7, #4
 801005c:	1c0a      	adds	r2, r1, #0
 801005e:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010060:	1d3b      	adds	r3, r7, #4
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	085b      	lsrs	r3, r3, #1
 8010066:	b29b      	uxth	r3, r3
 8010068:	220a      	movs	r2, #10
 801006a:	18ba      	adds	r2, r7, r2
 801006c:	1c19      	adds	r1, r3, #0
 801006e:	1c0b      	adds	r3, r1, #0
 8010070:	18db      	adds	r3, r3, r3
 8010072:	185b      	adds	r3, r3, r1
 8010074:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010076:	1d3b      	adds	r3, r7, #4
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	2201      	movs	r2, #1
 801007c:	4013      	ands	r3, r2
 801007e:	b29b      	uxth	r3, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	d001      	beq.n	8010088 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010084:	2304      	movs	r3, #4
 8010086:	e06b      	b.n	8010160 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010088:	230a      	movs	r3, #10
 801008a:	18fb      	adds	r3, r7, r3
 801008c:	881a      	ldrh	r2, [r3, #0]
 801008e:	6839      	ldr	r1, [r7, #0]
 8010090:	1dfb      	adds	r3, r7, #7
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	0018      	movs	r0, r3
 8010096:	f7fe f963 	bl	800e360 <sensirion_i2c_hal_read>
 801009a:	0003      	movs	r3, r0
 801009c:	001a      	movs	r2, r3
 801009e:	2108      	movs	r1, #8
 80100a0:	187b      	adds	r3, r7, r1
 80100a2:	801a      	strh	r2, [r3, #0]
    if (error) {
 80100a4:	000a      	movs	r2, r1
 80100a6:	18bb      	adds	r3, r7, r2
 80100a8:	2100      	movs	r1, #0
 80100aa:	5e5b      	ldrsh	r3, [r3, r1]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d003      	beq.n	80100b8 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 80100b0:	18bb      	adds	r3, r7, r2
 80100b2:	2200      	movs	r2, #0
 80100b4:	5e9b      	ldrsh	r3, [r3, r2]
 80100b6:	e053      	b.n	8010160 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80100b8:	230e      	movs	r3, #14
 80100ba:	18fb      	adds	r3, r7, r3
 80100bc:	2200      	movs	r2, #0
 80100be:	801a      	strh	r2, [r3, #0]
 80100c0:	230c      	movs	r3, #12
 80100c2:	18fb      	adds	r3, r7, r3
 80100c4:	2200      	movs	r2, #0
 80100c6:	801a      	strh	r2, [r3, #0]
 80100c8:	e041      	b.n	801014e <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80100ca:	210e      	movs	r1, #14
 80100cc:	187b      	adds	r3, r7, r1
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	683a      	ldr	r2, [r7, #0]
 80100d2:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80100d4:	187b      	adds	r3, r7, r1
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	3302      	adds	r3, #2
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	001a      	movs	r2, r3
 80100e2:	2102      	movs	r1, #2
 80100e4:	f7ff fef5 	bl	800fed2 <sensirion_i2c_check_crc>
 80100e8:	0003      	movs	r3, r0
 80100ea:	001a      	movs	r2, r3
 80100ec:	2108      	movs	r1, #8
 80100ee:	187b      	adds	r3, r7, r1
 80100f0:	801a      	strh	r2, [r3, #0]
        if (error) {
 80100f2:	000a      	movs	r2, r1
 80100f4:	18bb      	adds	r3, r7, r2
 80100f6:	2100      	movs	r1, #0
 80100f8:	5e5b      	ldrsh	r3, [r3, r1]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d003      	beq.n	8010106 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 80100fe:	18bb      	adds	r3, r7, r2
 8010100:	2200      	movs	r2, #0
 8010102:	5e9b      	ldrsh	r3, [r3, r2]
 8010104:	e02c      	b.n	8010160 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010106:	240e      	movs	r4, #14
 8010108:	193b      	adds	r3, r7, r4
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	683a      	ldr	r2, [r7, #0]
 801010e:	18d2      	adds	r2, r2, r3
 8010110:	250c      	movs	r5, #12
 8010112:	197b      	adds	r3, r7, r5
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	1979      	adds	r1, r7, r5
 8010118:	1c58      	adds	r0, r3, #1
 801011a:	8008      	strh	r0, [r1, #0]
 801011c:	0019      	movs	r1, r3
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	185b      	adds	r3, r3, r1
 8010122:	7812      	ldrb	r2, [r2, #0]
 8010124:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010126:	193b      	adds	r3, r7, r4
 8010128:	881b      	ldrh	r3, [r3, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	18d2      	adds	r2, r2, r3
 8010130:	197b      	adds	r3, r7, r5
 8010132:	881b      	ldrh	r3, [r3, #0]
 8010134:	1979      	adds	r1, r7, r5
 8010136:	1c58      	adds	r0, r3, #1
 8010138:	8008      	strh	r0, [r1, #0]
 801013a:	0019      	movs	r1, r3
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	185b      	adds	r3, r3, r1
 8010140:	7812      	ldrb	r2, [r2, #0]
 8010142:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010144:	193b      	adds	r3, r7, r4
 8010146:	193a      	adds	r2, r7, r4
 8010148:	8812      	ldrh	r2, [r2, #0]
 801014a:	3203      	adds	r2, #3
 801014c:	801a      	strh	r2, [r3, #0]
 801014e:	230e      	movs	r3, #14
 8010150:	18fa      	adds	r2, r7, r3
 8010152:	230a      	movs	r3, #10
 8010154:	18fb      	adds	r3, r7, r3
 8010156:	8812      	ldrh	r2, [r2, #0]
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	429a      	cmp	r2, r3
 801015c:	d3b5      	bcc.n	80100ca <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 801015e:	2300      	movs	r3, #0
}
 8010160:	0018      	movs	r0, r3
 8010162:	46bd      	mov	sp, r7
 8010164:	b004      	add	sp, #16
 8010166:	bdb0      	pop	{r4, r5, r7, pc}

08010168 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010168:	b590      	push	{r4, r7, lr}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6039      	str	r1, [r7, #0]
 8010170:	0011      	movs	r1, r2
 8010172:	1dfb      	adds	r3, r7, #7
 8010174:	1c02      	adds	r2, r0, #0
 8010176:	701a      	strb	r2, [r3, #0]
 8010178:	1dbb      	adds	r3, r7, #6
 801017a:	1c0a      	adds	r2, r1, #0
 801017c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 801017e:	4b08      	ldr	r3, [pc, #32]	@ (80101a0 <ReadRegister+0x38>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d008      	beq.n	8010198 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010186:	4b06      	ldr	r3, [pc, #24]	@ (80101a0 <ReadRegister+0x38>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	1dba      	adds	r2, r7, #6
 801018c:	7814      	ldrb	r4, [r2, #0]
 801018e:	6839      	ldr	r1, [r7, #0]
 8010190:	1dfa      	adds	r2, r7, #7
 8010192:	7810      	ldrb	r0, [r2, #0]
 8010194:	0022      	movs	r2, r4
 8010196:	4798      	blx	r3
  }
}
 8010198:	46c0      	nop			@ (mov r8, r8)
 801019a:	46bd      	mov	sp, r7
 801019c:	b003      	add	sp, #12
 801019e:	bd90      	pop	{r4, r7, pc}
 80101a0:	20000ee0 	.word	0x20000ee0

080101a4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80101a4:	b590      	push	{r4, r7, lr}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6039      	str	r1, [r7, #0]
 80101ac:	0011      	movs	r1, r2
 80101ae:	1dfb      	adds	r3, r7, #7
 80101b0:	1c02      	adds	r2, r0, #0
 80101b2:	701a      	strb	r2, [r3, #0]
 80101b4:	1dbb      	adds	r3, r7, #6
 80101b6:	1c0a      	adds	r2, r1, #0
 80101b8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80101ba:	4b08      	ldr	r3, [pc, #32]	@ (80101dc <WriteRegister+0x38>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d008      	beq.n	80101d4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80101c2:	4b06      	ldr	r3, [pc, #24]	@ (80101dc <WriteRegister+0x38>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	1dba      	adds	r2, r7, #6
 80101c8:	7814      	ldrb	r4, [r2, #0]
 80101ca:	6839      	ldr	r1, [r7, #0]
 80101cc:	1dfa      	adds	r2, r7, #7
 80101ce:	7810      	ldrb	r0, [r2, #0]
 80101d0:	0022      	movs	r2, r4
 80101d2:	4798      	blx	r3
  }
}
 80101d4:	46c0      	nop			@ (mov r8, r8)
 80101d6:	46bd      	mov	sp, r7
 80101d8:	b003      	add	sp, #12
 80101da:	bd90      	pop	{r4, r7, pc}
 80101dc:	20000ee4 	.word	0x20000ee4

080101e0 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 80101e8:	f003 fd14 	bl	8013c14 <HAL_GetTick>
 80101ec:	0002      	movs	r2, r0
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	18d2      	adds	r2, r2, r3
 80101f2:	4b03      	ldr	r3, [pc, #12]	@ (8010200 <setSGP40TimeStamp+0x20>)
 80101f4:	601a      	str	r2, [r3, #0]
}
 80101f6:	46c0      	nop			@ (mov r8, r8)
 80101f8:	46bd      	mov	sp, r7
 80101fa:	b002      	add	sp, #8
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	46c0      	nop			@ (mov r8, r8)
 8010200:	20000ef4 	.word	0x20000ef4

08010204 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010204:	b580      	push	{r7, lr}
 8010206:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010208:	4b02      	ldr	r3, [pc, #8]	@ (8010214 <ResetSGP40samplecounter+0x10>)
 801020a:	2200      	movs	r2, #0
 801020c:	701a      	strb	r2, [r3, #0]
}
 801020e:	46c0      	nop			@ (mov r8, r8)
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	20000ef2 	.word	0x20000ef2

08010218 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010222:	4b07      	ldr	r3, [pc, #28]	@ (8010240 <SGP_Init+0x28>)
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010228:	4b06      	ldr	r3, [pc, #24]	@ (8010244 <SGP_Init+0x2c>)
 801022a:	683a      	ldr	r2, [r7, #0]
 801022c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 801022e:	4b06      	ldr	r3, [pc, #24]	@ (8010248 <SGP_Init+0x30>)
 8010230:	2100      	movs	r1, #0
 8010232:	0018      	movs	r0, r3
 8010234:	f7fe ff72 	bl	800f11c <GasIndexAlgorithm_init>
}
 8010238:	46c0      	nop			@ (mov r8, r8)
 801023a:	46bd      	mov	sp, r7
 801023c:	b002      	add	sp, #8
 801023e:	bd80      	pop	{r7, pc}
 8010240:	20000ee0 	.word	0x20000ee0
 8010244:	20000ee4 	.word	0x20000ee4
 8010248:	20000efc 	.word	0x20000efc

0801024c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 801024c:	b580      	push	{r7, lr}
 801024e:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010250:	4b07      	ldr	r3, [pc, #28]	@ (8010270 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d004      	beq.n	8010262 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 8010258:	4b06      	ldr	r3, [pc, #24]	@ (8010274 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 801025a:	22fe      	movs	r2, #254	@ 0xfe
 801025c:	0592      	lsls	r2, r2, #22
 801025e:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010260:	e002      	b.n	8010268 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010262:	4b04      	ldr	r3, [pc, #16]	@ (8010274 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010264:	4a04      	ldr	r2, [pc, #16]	@ (8010278 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 8010266:	605a      	str	r2, [r3, #4]
}
 8010268:	46c0      	nop			@ (mov r8, r8)
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	46c0      	nop			@ (mov r8, r8)
 8010270:	20001e49 	.word	0x20001e49
 8010274:	20000efc 	.word	0x20000efc
 8010278:	44610000 	.word	0x44610000

0801027c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010280:	4b13      	ldr	r3, [pc, #76]	@ (80102d0 <SGP_StartMeasurement+0x54>)
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00d      	beq.n	80102a4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010288:	4b12      	ldr	r3, [pc, #72]	@ (80102d4 <SGP_StartMeasurement+0x58>)
 801028a:	2208      	movs	r2, #8
 801028c:	0019      	movs	r1, r3
 801028e:	2059      	movs	r0, #89	@ 0x59
 8010290:	f7ff ff88 	bl	80101a4 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010294:	f003 fcbe 	bl	8013c14 <HAL_GetTick>
 8010298:	0003      	movs	r3, r0
 801029a:	331e      	adds	r3, #30
 801029c:	001a      	movs	r2, r3
 801029e:	4b0e      	ldr	r3, [pc, #56]	@ (80102d8 <SGP_StartMeasurement+0x5c>)
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	e00c      	b.n	80102be <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80102a4:	4b0d      	ldr	r3, [pc, #52]	@ (80102dc <SGP_StartMeasurement+0x60>)
 80102a6:	2208      	movs	r2, #8
 80102a8:	0019      	movs	r1, r3
 80102aa:	2059      	movs	r0, #89	@ 0x59
 80102ac:	f7ff ff7a 	bl	80101a4 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 80102b0:	f003 fcb0 	bl	8013c14 <HAL_GetTick>
 80102b4:	0003      	movs	r3, r0
 80102b6:	33aa      	adds	r3, #170	@ 0xaa
 80102b8:	001a      	movs	r2, r3
 80102ba:	4b09      	ldr	r3, [pc, #36]	@ (80102e0 <SGP_StartMeasurement+0x64>)
 80102bc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80102be:	4b09      	ldr	r3, [pc, #36]	@ (80102e4 <SGP_StartMeasurement+0x68>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80102c4:	4b08      	ldr	r3, [pc, #32]	@ (80102e8 <SGP_StartMeasurement+0x6c>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	701a      	strb	r2, [r3, #0]
}
 80102ca:	46c0      	nop			@ (mov r8, r8)
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	20000fa4 	.word	0x20000fa4
 80102d4:	200000b0 	.word	0x200000b0
 80102d8:	200000c4 	.word	0x200000c4
 80102dc:	200000a8 	.word	0x200000a8
 80102e0:	200000bc 	.word	0x200000bc
 80102e4:	20000ef8 	.word	0x20000ef8
 80102e8:	20000ef9 	.word	0x20000ef9

080102ec <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 80102ec:	b580      	push	{r7, lr}
 80102ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 80102f0:	4b04      	ldr	r3, [pc, #16]	@ (8010304 <SGP_HeatedUp+0x18>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	0018      	movs	r0, r3
 80102f6:	f002 fef7 	bl	80130e8 <TimestampIsReached>
 80102fa:	0003      	movs	r3, r0
}
 80102fc:	0018      	movs	r0, r3
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	46c0      	nop			@ (mov r8, r8)
 8010304:	200000bc 	.word	0x200000bc

08010308 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 801030c:	4b04      	ldr	r3, [pc, #16]	@ (8010320 <SGP_MeasurementReady+0x18>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	0018      	movs	r0, r3
 8010312:	f002 fee9 	bl	80130e8 <TimestampIsReached>
 8010316:	0003      	movs	r3, r0
}
 8010318:	0018      	movs	r0, r3
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	46c0      	nop			@ (mov r8, r8)
 8010320:	200000c4 	.word	0x200000c4

08010324 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010324:	b580      	push	{r7, lr}
 8010326:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8010328:	4b04      	ldr	r3, [pc, #16]	@ (801033c <SGP_MeasurementDone+0x18>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	0018      	movs	r0, r3
 801032e:	f002 fedb 	bl	80130e8 <TimestampIsReached>
 8010332:	0003      	movs	r3, r0
}
 8010334:	0018      	movs	r0, r3
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	46c0      	nop			@ (mov r8, r8)
 801033c:	200000c0 	.word	0x200000c0

08010340 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010344:	4b04      	ldr	r3, [pc, #16]	@ (8010358 <SGP_TurnHeaterOff+0x18>)
 8010346:	2202      	movs	r2, #2
 8010348:	0019      	movs	r1, r3
 801034a:	2059      	movs	r0, #89	@ 0x59
 801034c:	f7ff ff2a 	bl	80101a4 <WriteRegister>
}
 8010350:	46c0      	nop			@ (mov r8, r8)
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	46c0      	nop			@ (mov r8, r8)
 8010358:	200000a0 	.word	0x200000a0

0801035c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 801035c:	b590      	push	{r4, r7, lr}
 801035e:	b087      	sub	sp, #28
 8010360:	af02      	add	r7, sp, #8
 8010362:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010364:	f7ff ffc2 	bl	80102ec <SGP_HeatedUp>
 8010368:	1e03      	subs	r3, r0, #0
 801036a:	d032      	beq.n	80103d2 <SGP_GetMeasurementValues+0x76>
 801036c:	4b80      	ldr	r3, [pc, #512]	@ (8010570 <SGP_GetMeasurementValues+0x214>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2201      	movs	r2, #1
 8010372:	4053      	eors	r3, r2
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d02b      	beq.n	80103d2 <SGP_GetMeasurementValues+0x76>
 801037a:	4b7e      	ldr	r3, [pc, #504]	@ (8010574 <SGP_GetMeasurementValues+0x218>)
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	2201      	movs	r2, #1
 8010380:	4053      	eors	r3, r2
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d024      	beq.n	80103d2 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010388:	4b79      	ldr	r3, [pc, #484]	@ (8010570 <SGP_GetMeasurementValues+0x214>)
 801038a:	2201      	movs	r2, #1
 801038c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 801038e:	4b7a      	ldr	r3, [pc, #488]	@ (8010578 <SGP_GetMeasurementValues+0x21c>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00d      	beq.n	80103b2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010396:	4b79      	ldr	r3, [pc, #484]	@ (801057c <SGP_GetMeasurementValues+0x220>)
 8010398:	2208      	movs	r2, #8
 801039a:	0019      	movs	r1, r3
 801039c:	2059      	movs	r0, #89	@ 0x59
 801039e:	f7ff ff01 	bl	80101a4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80103a2:	f003 fc37 	bl	8013c14 <HAL_GetTick>
 80103a6:	0003      	movs	r3, r0
 80103a8:	331e      	adds	r3, #30
 80103aa:	001a      	movs	r2, r3
 80103ac:	4b74      	ldr	r3, [pc, #464]	@ (8010580 <SGP_GetMeasurementValues+0x224>)
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	e00c      	b.n	80103cc <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80103b2:	4b74      	ldr	r3, [pc, #464]	@ (8010584 <SGP_GetMeasurementValues+0x228>)
 80103b4:	2208      	movs	r2, #8
 80103b6:	0019      	movs	r1, r3
 80103b8:	2059      	movs	r0, #89	@ 0x59
 80103ba:	f7ff fef3 	bl	80101a4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80103be:	f003 fc29 	bl	8013c14 <HAL_GetTick>
 80103c2:	0003      	movs	r3, r0
 80103c4:	331e      	adds	r3, #30
 80103c6:	001a      	movs	r2, r3
 80103c8:	4b6d      	ldr	r3, [pc, #436]	@ (8010580 <SGP_GetMeasurementValues+0x224>)
 80103ca:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80103cc:	4b69      	ldr	r3, [pc, #420]	@ (8010574 <SGP_GetMeasurementValues+0x218>)
 80103ce:	2201      	movs	r2, #1
 80103d0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80103d2:	4b67      	ldr	r3, [pc, #412]	@ (8010570 <SGP_GetMeasurementValues+0x214>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d100      	bne.n	80103dc <SGP_GetMeasurementValues+0x80>
 80103da:	e0ac      	b.n	8010536 <SGP_GetMeasurementValues+0x1da>
 80103dc:	f7ff ff94 	bl	8010308 <SGP_MeasurementReady>
 80103e0:	1e03      	subs	r3, r0, #0
 80103e2:	d100      	bne.n	80103e6 <SGP_GetMeasurementValues+0x8a>
 80103e4:	e0a7      	b.n	8010536 <SGP_GetMeasurementValues+0x1da>
 80103e6:	4b68      	ldr	r3, [pc, #416]	@ (8010588 <SGP_GetMeasurementValues+0x22c>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2201      	movs	r2, #1
 80103ec:	4053      	eors	r3, r2
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d100      	bne.n	80103f6 <SGP_GetMeasurementValues+0x9a>
 80103f4:	e09f      	b.n	8010536 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 80103f6:	4b64      	ldr	r3, [pc, #400]	@ (8010588 <SGP_GetMeasurementValues+0x22c>)
 80103f8:	2201      	movs	r2, #1
 80103fa:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80103fc:	4b63      	ldr	r3, [pc, #396]	@ (801058c <SGP_GetMeasurementValues+0x230>)
 80103fe:	2203      	movs	r2, #3
 8010400:	0019      	movs	r1, r3
 8010402:	2059      	movs	r0, #89	@ 0x59
 8010404:	f7ff feb0 	bl	8010168 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010408:	4b60      	ldr	r3, [pc, #384]	@ (801058c <SGP_GetMeasurementValues+0x230>)
 801040a:	2203      	movs	r2, #3
 801040c:	2103      	movs	r1, #3
 801040e:	0018      	movs	r0, r3
 8010410:	f000 f91a 	bl	8010648 <CheckCRC>
 8010414:	0003      	movs	r3, r0
 8010416:	001a      	movs	r2, r3
 8010418:	2301      	movs	r3, #1
 801041a:	4053      	eors	r3, r2
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d02a      	beq.n	8010478 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010422:	4a5b      	ldr	r2, [pc, #364]	@ (8010590 <SGP_GetMeasurementValues+0x234>)
 8010424:	4b5b      	ldr	r3, [pc, #364]	@ (8010594 <SGP_GetMeasurementValues+0x238>)
 8010426:	0019      	movs	r1, r3
 8010428:	2001      	movs	r0, #1
 801042a:	f002 feb3 	bl	8013194 <CreateLine>
      Info("SGP_Measure buffer structure:");
 801042e:	4a5a      	ldr	r2, [pc, #360]	@ (8010598 <SGP_GetMeasurementValues+0x23c>)
 8010430:	4b5a      	ldr	r3, [pc, #360]	@ (801059c <SGP_GetMeasurementValues+0x240>)
 8010432:	0019      	movs	r1, r3
 8010434:	2002      	movs	r0, #2
 8010436:	f002 fead 	bl	8013194 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 801043a:	230f      	movs	r3, #15
 801043c:	18fb      	adds	r3, r7, r3
 801043e:	2200      	movs	r2, #0
 8010440:	701a      	strb	r2, [r3, #0]
 8010442:	e012      	b.n	801046a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010444:	240f      	movs	r4, #15
 8010446:	193b      	adds	r3, r7, r4
 8010448:	7818      	ldrb	r0, [r3, #0]
 801044a:	193b      	adds	r3, r7, r4
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	4a4f      	ldr	r2, [pc, #316]	@ (801058c <SGP_GetMeasurementValues+0x230>)
 8010450:	5cd3      	ldrb	r3, [r2, r3]
 8010452:	4a53      	ldr	r2, [pc, #332]	@ (80105a0 <SGP_GetMeasurementValues+0x244>)
 8010454:	4953      	ldr	r1, [pc, #332]	@ (80105a4 <SGP_GetMeasurementValues+0x248>)
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	0003      	movs	r3, r0
 801045a:	2003      	movs	r0, #3
 801045c:	f002 fe9a 	bl	8013194 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010460:	193b      	adds	r3, r7, r4
 8010462:	781a      	ldrb	r2, [r3, #0]
 8010464:	193b      	adds	r3, r7, r4
 8010466:	3201      	adds	r2, #1
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	230f      	movs	r3, #15
 801046c:	18fb      	adds	r3, r7, r3
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b02      	cmp	r3, #2
 8010472:	d9e7      	bls.n	8010444 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8010474:	2300      	movs	r3, #0
 8010476:	e076      	b.n	8010566 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8010478:	f003 fbcc 	bl	8013c14 <HAL_GetTick>
 801047c:	0003      	movs	r3, r0
 801047e:	22fa      	movs	r2, #250	@ 0xfa
 8010480:	0092      	lsls	r2, r2, #2
 8010482:	189a      	adds	r2, r3, r2
 8010484:	4b48      	ldr	r3, [pc, #288]	@ (80105a8 <SGP_GetMeasurementValues+0x24c>)
 8010486:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010488:	f7ff ff5a 	bl	8010340 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 801048c:	4b47      	ldr	r3, [pc, #284]	@ (80105ac <SGP_GetMeasurementValues+0x250>)
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	3301      	adds	r3, #1
 8010492:	b2da      	uxtb	r2, r3
 8010494:	4b45      	ldr	r3, [pc, #276]	@ (80105ac <SGP_GetMeasurementValues+0x250>)
 8010496:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010498:	4b44      	ldr	r3, [pc, #272]	@ (80105ac <SGP_GetMeasurementValues+0x250>)
 801049a:	781a      	ldrb	r2, [r3, #0]
 801049c:	4b44      	ldr	r3, [pc, #272]	@ (80105b0 <SGP_GetMeasurementValues+0x254>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d348      	bcc.n	8010536 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80104a4:	4b39      	ldr	r3, [pc, #228]	@ (801058c <SGP_GetMeasurementValues+0x230>)
 80104a6:	785b      	ldrb	r3, [r3, #1]
 80104a8:	b21b      	sxth	r3, r3
 80104aa:	021b      	lsls	r3, r3, #8
 80104ac:	b21a      	sxth	r2, r3
 80104ae:	4b37      	ldr	r3, [pc, #220]	@ (801058c <SGP_GetMeasurementValues+0x230>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	b21b      	sxth	r3, r3
 80104b4:	4313      	orrs	r3, r2
 80104b6:	b21a      	sxth	r2, r3
 80104b8:	240c      	movs	r4, #12
 80104ba:	193b      	adds	r3, r7, r4
 80104bc:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 80104be:	2300      	movs	r3, #0
 80104c0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80104c2:	193b      	adds	r3, r7, r4
 80104c4:	8819      	ldrh	r1, [r3, #0]
 80104c6:	2308      	movs	r3, #8
 80104c8:	18fa      	adds	r2, r7, r3
 80104ca:	4b3a      	ldr	r3, [pc, #232]	@ (80105b4 <SGP_GetMeasurementValues+0x258>)
 80104cc:	0018      	movs	r0, r3
 80104ce:	f7fe fe87 	bl	800f1e0 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 80104d8:	4b37      	ldr	r3, [pc, #220]	@ (80105b8 <SGP_GetMeasurementValues+0x25c>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	3301      	adds	r3, #1
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	4b35      	ldr	r3, [pc, #212]	@ (80105b8 <SGP_GetMeasurementValues+0x25c>)
 80104e2:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 80104e4:	4b34      	ldr	r3, [pc, #208]	@ (80105b8 <SGP_GetMeasurementValues+0x25c>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d10d      	bne.n	8010508 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 80104ec:	193b      	adds	r3, r7, r4
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	4a32      	ldr	r2, [pc, #200]	@ (80105bc <SGP_GetMeasurementValues+0x260>)
 80104f2:	492c      	ldr	r1, [pc, #176]	@ (80105a4 <SGP_GetMeasurementValues+0x248>)
 80104f4:	2003      	movs	r0, #3
 80104f6:	f002 fe4d 	bl	8013194 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	4a30      	ldr	r2, [pc, #192]	@ (80105c0 <SGP_GetMeasurementValues+0x264>)
 80104fe:	4929      	ldr	r1, [pc, #164]	@ (80105a4 <SGP_GetMeasurementValues+0x248>)
 8010500:	2003      	movs	r0, #3
 8010502:	f002 fe47 	bl	8013194 <CreateLine>
 8010506:	e006      	b.n	8010516 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8010508:	4b2b      	ldr	r3, [pc, #172]	@ (80105b8 <SGP_GetMeasurementValues+0x25c>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b0b      	cmp	r3, #11
 801050e:	d102      	bne.n	8010516 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8010510:	4b29      	ldr	r3, [pc, #164]	@ (80105b8 <SGP_GetMeasurementValues+0x25c>)
 8010512:	2200      	movs	r2, #0
 8010514:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	b29b      	uxth	r3, r3
 801051a:	0018      	movs	r0, r3
 801051c:	f001 fdd2 	bl	80120c4 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8010520:	4b22      	ldr	r3, [pc, #136]	@ (80105ac <SGP_GetMeasurementValues+0x250>)
 8010522:	2200      	movs	r2, #0
 8010524:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 8010526:	4b14      	ldr	r3, [pc, #80]	@ (8010578 <SGP_GetMeasurementValues+0x21c>)
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 801052c:	4b11      	ldr	r3, [pc, #68]	@ (8010574 <SGP_GetMeasurementValues+0x218>)
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
      return true;
 8010532:	2301      	movs	r3, #1
 8010534:	e017      	b.n	8010566 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8010536:	f7ff fef5 	bl	8010324 <SGP_MeasurementDone>
 801053a:	1e03      	subs	r3, r0, #0
 801053c:	d012      	beq.n	8010564 <SGP_GetMeasurementValues+0x208>
 801053e:	4b0c      	ldr	r3, [pc, #48]	@ (8010570 <SGP_GetMeasurementValues+0x214>)
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00e      	beq.n	8010564 <SGP_GetMeasurementValues+0x208>
 8010546:	4b10      	ldr	r3, [pc, #64]	@ (8010588 <SGP_GetMeasurementValues+0x22c>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d00a      	beq.n	8010564 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 801054e:	4a1d      	ldr	r2, [pc, #116]	@ (80105c4 <SGP_GetMeasurementValues+0x268>)
 8010550:	4b14      	ldr	r3, [pc, #80]	@ (80105a4 <SGP_GetMeasurementValues+0x248>)
 8010552:	0019      	movs	r1, r3
 8010554:	2003      	movs	r0, #3
 8010556:	f002 fe1d 	bl	8013194 <CreateLine>
    SGP_StartMeasurement();
 801055a:	f7ff fe8f 	bl	801027c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 801055e:	4b05      	ldr	r3, [pc, #20]	@ (8010574 <SGP_GetMeasurementValues+0x218>)
 8010560:	2200      	movs	r2, #0
 8010562:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8010564:	2300      	movs	r3, #0
}
 8010566:	0018      	movs	r0, r3
 8010568:	46bd      	mov	sp, r7
 801056a:	b005      	add	sp, #20
 801056c:	bd90      	pop	{r4, r7, pc}
 801056e:	46c0      	nop			@ (mov r8, r8)
 8010570:	20000ef8 	.word	0x20000ef8
 8010574:	20000fa5 	.word	0x20000fa5
 8010578:	20000fa4 	.word	0x20000fa4
 801057c:	200000b0 	.word	0x200000b0
 8010580:	200000c4 	.word	0x200000c4
 8010584:	200000a8 	.word	0x200000a8
 8010588:	20000ef9 	.word	0x20000ef9
 801058c:	20000ee8 	.word	0x20000ee8
 8010590:	0802d108 	.word	0x0802d108
 8010594:	0802d130 	.word	0x0802d130
 8010598:	0802d134 	.word	0x0802d134
 801059c:	0802d154 	.word	0x0802d154
 80105a0:	0802d158 	.word	0x0802d158
 80105a4:	0802d178 	.word	0x0802d178
 80105a8:	200000c0 	.word	0x200000c0
 80105ac:	20000ef1 	.word	0x20000ef1
 80105b0:	200000ba 	.word	0x200000ba
 80105b4:	20000efc 	.word	0x20000efc
 80105b8:	20000ef2 	.word	0x20000ef2
 80105bc:	0802d17c 	.word	0x0802d17c
 80105c0:	0802d198 	.word	0x0802d198
 80105c4:	0802d1b4 	.word	0x0802d1b4

080105c8 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80105ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010638 <SGP_DeviceConnected+0x70>)
 80105d0:	2202      	movs	r2, #2
 80105d2:	0019      	movs	r1, r3
 80105d4:	2059      	movs	r0, #89	@ 0x59
 80105d6:	f7ff fde5 	bl	80101a4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80105da:	2001      	movs	r0, #1
 80105dc:	f003 fb24 	bl	8013c28 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80105e0:	4b16      	ldr	r3, [pc, #88]	@ (801063c <SGP_DeviceConnected+0x74>)
 80105e2:	2209      	movs	r2, #9
 80105e4:	0019      	movs	r1, r3
 80105e6:	2059      	movs	r0, #89	@ 0x59
 80105e8:	f7ff fdbe 	bl	8010168 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80105ec:	1dfb      	adds	r3, r7, #7
 80105ee:	2200      	movs	r2, #0
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e011      	b.n	8010618 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80105f4:	1dfb      	adds	r3, r7, #7
 80105f6:	7818      	ldrb	r0, [r3, #0]
 80105f8:	1dfb      	adds	r3, r7, #7
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	4a0f      	ldr	r2, [pc, #60]	@ (801063c <SGP_DeviceConnected+0x74>)
 80105fe:	5cd3      	ldrb	r3, [r2, r3]
 8010600:	4a0f      	ldr	r2, [pc, #60]	@ (8010640 <SGP_DeviceConnected+0x78>)
 8010602:	4910      	ldr	r1, [pc, #64]	@ (8010644 <SGP_DeviceConnected+0x7c>)
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	0003      	movs	r3, r0
 8010608:	2002      	movs	r0, #2
 801060a:	f002 fdc3 	bl	8013194 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801060e:	1dfb      	adds	r3, r7, #7
 8010610:	781a      	ldrb	r2, [r3, #0]
 8010612:	1dfb      	adds	r3, r7, #7
 8010614:	3201      	adds	r2, #1
 8010616:	701a      	strb	r2, [r3, #0]
 8010618:	1dfb      	adds	r3, r7, #7
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b08      	cmp	r3, #8
 801061e:	d9e9      	bls.n	80105f4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8010620:	4b06      	ldr	r3, [pc, #24]	@ (801063c <SGP_DeviceConnected+0x74>)
 8010622:	2203      	movs	r2, #3
 8010624:	2109      	movs	r1, #9
 8010626:	0018      	movs	r0, r3
 8010628:	f000 f80e 	bl	8010648 <CheckCRC>
 801062c:	0003      	movs	r3, r0
}
 801062e:	0018      	movs	r0, r3
 8010630:	46bd      	mov	sp, r7
 8010632:	b002      	add	sp, #8
 8010634:	bd80      	pop	{r7, pc}
 8010636:	46c0      	nop			@ (mov r8, r8)
 8010638:	200000a4 	.word	0x200000a4
 801063c:	20000ee8 	.word	0x20000ee8
 8010640:	0802d1d4 	.word	0x0802d1d4
 8010644:	0802d154 	.word	0x0802d154

08010648 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8010648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064a:	b08f      	sub	sp, #60	@ 0x3c
 801064c:	af00      	add	r7, sp, #0
 801064e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010650:	0008      	movs	r0, r1
 8010652:	0011      	movs	r1, r2
 8010654:	2323      	movs	r3, #35	@ 0x23
 8010656:	18fb      	adds	r3, r7, r3
 8010658:	1c02      	adds	r2, r0, #0
 801065a:	701a      	strb	r2, [r3, #0]
 801065c:	2322      	movs	r3, #34	@ 0x22
 801065e:	18fb      	adds	r3, r7, r3
 8010660:	1c0a      	adds	r2, r1, #0
 8010662:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010664:	2317      	movs	r3, #23
 8010666:	2220      	movs	r2, #32
 8010668:	189b      	adds	r3, r3, r2
 801066a:	19db      	adds	r3, r3, r7
 801066c:	2200      	movs	r2, #0
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	e09f      	b.n	80107b2 <CheckCRC+0x16a>
 8010672:	466b      	mov	r3, sp
 8010674:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8010676:	2322      	movs	r3, #34	@ 0x22
 8010678:	18fb      	adds	r3, r7, r3
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	001a      	movs	r2, r3
 801067e:	3a01      	subs	r2, #1
 8010680:	633a      	str	r2, [r7, #48]	@ 0x30
 8010682:	60bb      	str	r3, [r7, #8]
 8010684:	2200      	movs	r2, #0
 8010686:	60fa      	str	r2, [r7, #12]
 8010688:	68b8      	ldr	r0, [r7, #8]
 801068a:	68f9      	ldr	r1, [r7, #12]
 801068c:	0002      	movs	r2, r0
 801068e:	0f52      	lsrs	r2, r2, #29
 8010690:	000c      	movs	r4, r1
 8010692:	00e4      	lsls	r4, r4, #3
 8010694:	61fc      	str	r4, [r7, #28]
 8010696:	69fc      	ldr	r4, [r7, #28]
 8010698:	4314      	orrs	r4, r2
 801069a:	61fc      	str	r4, [r7, #28]
 801069c:	0002      	movs	r2, r0
 801069e:	00d2      	lsls	r2, r2, #3
 80106a0:	61ba      	str	r2, [r7, #24]
 80106a2:	603b      	str	r3, [r7, #0]
 80106a4:	2200      	movs	r2, #0
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	6838      	ldr	r0, [r7, #0]
 80106aa:	6879      	ldr	r1, [r7, #4]
 80106ac:	0002      	movs	r2, r0
 80106ae:	0f52      	lsrs	r2, r2, #29
 80106b0:	000c      	movs	r4, r1
 80106b2:	00e4      	lsls	r4, r4, #3
 80106b4:	617c      	str	r4, [r7, #20]
 80106b6:	697c      	ldr	r4, [r7, #20]
 80106b8:	4314      	orrs	r4, r2
 80106ba:	617c      	str	r4, [r7, #20]
 80106bc:	0002      	movs	r2, r0
 80106be:	00d2      	lsls	r2, r2, #3
 80106c0:	613a      	str	r2, [r7, #16]
 80106c2:	3307      	adds	r3, #7
 80106c4:	08db      	lsrs	r3, r3, #3
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	466a      	mov	r2, sp
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	469d      	mov	sp, r3
 80106ce:	466b      	mov	r3, sp
 80106d0:	3300      	adds	r3, #0
 80106d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80106d4:	2316      	movs	r3, #22
 80106d6:	2220      	movs	r2, #32
 80106d8:	189b      	adds	r3, r3, r2
 80106da:	19db      	adds	r3, r3, r7
 80106dc:	2200      	movs	r2, #0
 80106de:	701a      	strb	r2, [r3, #0]
 80106e0:	e01e      	b.n	8010720 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80106e2:	2317      	movs	r3, #23
 80106e4:	2220      	movs	r2, #32
 80106e6:	189b      	adds	r3, r3, r2
 80106e8:	19db      	adds	r3, r3, r7
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	2116      	movs	r1, #22
 80106ee:	2320      	movs	r3, #32
 80106f0:	18cb      	adds	r3, r1, r3
 80106f2:	19db      	adds	r3, r3, r7
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	18d3      	adds	r3, r2, r3
 80106f8:	001a      	movs	r2, r3
 80106fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fc:	189a      	adds	r2, r3, r2
 80106fe:	0008      	movs	r0, r1
 8010700:	2320      	movs	r3, #32
 8010702:	18cb      	adds	r3, r1, r3
 8010704:	19db      	adds	r3, r3, r7
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	7811      	ldrb	r1, [r2, #0]
 801070a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801070c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801070e:	2320      	movs	r3, #32
 8010710:	18c3      	adds	r3, r0, r3
 8010712:	19db      	adds	r3, r3, r7
 8010714:	781a      	ldrb	r2, [r3, #0]
 8010716:	2320      	movs	r3, #32
 8010718:	18c3      	adds	r3, r0, r3
 801071a:	19db      	adds	r3, r3, r7
 801071c:	3201      	adds	r2, #1
 801071e:	701a      	strb	r2, [r3, #0]
 8010720:	2316      	movs	r3, #22
 8010722:	2220      	movs	r2, #32
 8010724:	189b      	adds	r3, r3, r2
 8010726:	19da      	adds	r2, r3, r7
 8010728:	2322      	movs	r3, #34	@ 0x22
 801072a:	18fb      	adds	r3, r7, r3
 801072c:	7812      	ldrb	r2, [r2, #0]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	429a      	cmp	r2, r3
 8010732:	d3d6      	bcc.n	80106e2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8010734:	2417      	movs	r4, #23
 8010736:	2320      	movs	r3, #32
 8010738:	18e3      	adds	r3, r4, r3
 801073a:	19db      	adds	r3, r3, r7
 801073c:	781a      	ldrb	r2, [r3, #0]
 801073e:	2322      	movs	r3, #34	@ 0x22
 8010740:	18fb      	adds	r3, r7, r3
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	18d3      	adds	r3, r2, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801074a:	18d2      	adds	r2, r2, r3
 801074c:	250b      	movs	r5, #11
 801074e:	2320      	movs	r3, #32
 8010750:	18eb      	adds	r3, r5, r3
 8010752:	19db      	adds	r3, r3, r7
 8010754:	7812      	ldrb	r2, [r2, #0]
 8010756:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8010758:	2322      	movs	r3, #34	@ 0x22
 801075a:	18fb      	adds	r3, r7, r3
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	3b01      	subs	r3, #1
 8010760:	b2da      	uxtb	r2, r3
 8010762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010764:	0011      	movs	r1, r2
 8010766:	0018      	movs	r0, r3
 8010768:	f000 f838 	bl	80107dc <CalculateCRC>
 801076c:	0003      	movs	r3, r0
 801076e:	001a      	movs	r2, r3
 8010770:	2320      	movs	r3, #32
 8010772:	18eb      	adds	r3, r5, r3
 8010774:	19db      	adds	r3, r3, r7
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	4293      	cmp	r3, r2
 801077a:	d00c      	beq.n	8010796 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 801077c:	2320      	movs	r3, #32
 801077e:	18e3      	adds	r3, r4, r3
 8010780:	19db      	adds	r3, r3, r7
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	3301      	adds	r3, #1
 8010786:	4a13      	ldr	r2, [pc, #76]	@ (80107d4 <CheckCRC+0x18c>)
 8010788:	4913      	ldr	r1, [pc, #76]	@ (80107d8 <CheckCRC+0x190>)
 801078a:	2001      	movs	r0, #1
 801078c:	f002 fd02 	bl	8013194 <CreateLine>
      return false;
 8010790:	2300      	movs	r3, #0
 8010792:	46b5      	mov	sp, r6
 8010794:	e019      	b.n	80107ca <CheckCRC+0x182>
 8010796:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010798:	2217      	movs	r2, #23
 801079a:	2320      	movs	r3, #32
 801079c:	18d3      	adds	r3, r2, r3
 801079e:	19db      	adds	r3, r3, r7
 80107a0:	2120      	movs	r1, #32
 80107a2:	1852      	adds	r2, r2, r1
 80107a4:	19d1      	adds	r1, r2, r7
 80107a6:	2222      	movs	r2, #34	@ 0x22
 80107a8:	18ba      	adds	r2, r7, r2
 80107aa:	7809      	ldrb	r1, [r1, #0]
 80107ac:	7812      	ldrb	r2, [r2, #0]
 80107ae:	188a      	adds	r2, r1, r2
 80107b0:	701a      	strb	r2, [r3, #0]
 80107b2:	2317      	movs	r3, #23
 80107b4:	2220      	movs	r2, #32
 80107b6:	189b      	adds	r3, r3, r2
 80107b8:	19da      	adds	r2, r3, r7
 80107ba:	2323      	movs	r3, #35	@ 0x23
 80107bc:	18fb      	adds	r3, r7, r3
 80107be:	7812      	ldrb	r2, [r2, #0]
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d200      	bcs.n	80107c8 <CheckCRC+0x180>
 80107c6:	e754      	b.n	8010672 <CheckCRC+0x2a>
    }
  }
  return true;
 80107c8:	2301      	movs	r3, #1
}
 80107ca:	0018      	movs	r0, r3
 80107cc:	46bd      	mov	sp, r7
 80107ce:	b00f      	add	sp, #60	@ 0x3c
 80107d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d2:	46c0      	nop			@ (mov r8, r8)
 80107d4:	0802d1f4 	.word	0x0802d1f4
 80107d8:	0802d130 	.word	0x0802d130

080107dc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	000a      	movs	r2, r1
 80107e6:	1cfb      	adds	r3, r7, #3
 80107e8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80107ea:	230f      	movs	r3, #15
 80107ec:	18fb      	adds	r3, r7, r3
 80107ee:	22ff      	movs	r2, #255	@ 0xff
 80107f0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80107f2:	230e      	movs	r3, #14
 80107f4:	18fb      	adds	r3, r7, r3
 80107f6:	2200      	movs	r2, #0
 80107f8:	701a      	strb	r2, [r3, #0]
 80107fa:	e038      	b.n	801086e <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80107fc:	230e      	movs	r3, #14
 80107fe:	18fb      	adds	r3, r7, r3
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	18d3      	adds	r3, r2, r3
 8010806:	7819      	ldrb	r1, [r3, #0]
 8010808:	220f      	movs	r2, #15
 801080a:	18bb      	adds	r3, r7, r2
 801080c:	18ba      	adds	r2, r7, r2
 801080e:	7812      	ldrb	r2, [r2, #0]
 8010810:	404a      	eors	r2, r1
 8010812:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010814:	230d      	movs	r3, #13
 8010816:	18fb      	adds	r3, r7, r3
 8010818:	2200      	movs	r2, #0
 801081a:	701a      	strb	r2, [r3, #0]
 801081c:	e01c      	b.n	8010858 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801081e:	210f      	movs	r1, #15
 8010820:	187b      	adds	r3, r7, r1
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	b25b      	sxtb	r3, r3
 8010826:	2b00      	cmp	r3, #0
 8010828:	da0a      	bge.n	8010840 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 801082a:	187b      	adds	r3, r7, r1
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	b25b      	sxtb	r3, r3
 8010830:	18db      	adds	r3, r3, r3
 8010832:	b25b      	sxtb	r3, r3
 8010834:	2231      	movs	r2, #49	@ 0x31
 8010836:	4053      	eors	r3, r2
 8010838:	b25a      	sxtb	r2, r3
 801083a:	187b      	adds	r3, r7, r1
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	e005      	b.n	801084c <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8010840:	230f      	movs	r3, #15
 8010842:	18fa      	adds	r2, r7, r3
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	18db      	adds	r3, r3, r3
 801084a:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 801084c:	210d      	movs	r1, #13
 801084e:	187b      	adds	r3, r7, r1
 8010850:	781a      	ldrb	r2, [r3, #0]
 8010852:	187b      	adds	r3, r7, r1
 8010854:	3201      	adds	r2, #1
 8010856:	701a      	strb	r2, [r3, #0]
 8010858:	230d      	movs	r3, #13
 801085a:	18fb      	adds	r3, r7, r3
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b07      	cmp	r3, #7
 8010860:	d9dd      	bls.n	801081e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010862:	210e      	movs	r1, #14
 8010864:	187b      	adds	r3, r7, r1
 8010866:	781a      	ldrb	r2, [r3, #0]
 8010868:	187b      	adds	r3, r7, r1
 801086a:	3201      	adds	r2, #1
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	230e      	movs	r3, #14
 8010870:	18fa      	adds	r2, r7, r3
 8010872:	1cfb      	adds	r3, r7, #3
 8010874:	7812      	ldrb	r2, [r2, #0]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	429a      	cmp	r2, r3
 801087a:	d3bf      	bcc.n	80107fc <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 801087c:	230f      	movs	r3, #15
 801087e:	18fb      	adds	r3, r7, r3
 8010880:	781b      	ldrb	r3, [r3, #0]
}
 8010882:	0018      	movs	r0, r3
 8010884:	46bd      	mov	sp, r7
 8010886:	b004      	add	sp, #16
 8010888:	bd80      	pop	{r7, pc}
	...

0801088c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4936      	ldr	r1, [pc, #216]	@ (8010974 <SGP_SetHT+0xe8>)
 801089c:	1c18      	adds	r0, r3, #0
 801089e:	f7f0 f80f 	bl	80008c0 <__aeabi_fadd>
 80108a2:	1c03      	adds	r3, r0, #0
 80108a4:	4934      	ldr	r1, [pc, #208]	@ (8010978 <SGP_SetHT+0xec>)
 80108a6:	1c18      	adds	r0, r3, #0
 80108a8:	f7f0 f9fc 	bl	8000ca4 <__aeabi_fdiv>
 80108ac:	1c03      	adds	r3, r0, #0
 80108ae:	4933      	ldr	r1, [pc, #204]	@ (801097c <SGP_SetHT+0xf0>)
 80108b0:	1c18      	adds	r0, r3, #0
 80108b2:	f7f0 fbc5 	bl	8001040 <__aeabi_fmul>
 80108b6:	1c03      	adds	r3, r0, #0
 80108b8:	1c18      	adds	r0, r3, #0
 80108ba:	f7ef feaf 	bl	800061c <__aeabi_f2uiz>
 80108be:	0003      	movs	r3, r0
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	4b2f      	ldr	r3, [pc, #188]	@ (8010980 <SGP_SetHT+0xf4>)
 80108c4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	492e      	ldr	r1, [pc, #184]	@ (8010984 <SGP_SetHT+0xf8>)
 80108cc:	1c18      	adds	r0, r3, #0
 80108ce:	f7f0 f9e9 	bl	8000ca4 <__aeabi_fdiv>
 80108d2:	1c03      	adds	r3, r0, #0
 80108d4:	4929      	ldr	r1, [pc, #164]	@ (801097c <SGP_SetHT+0xf0>)
 80108d6:	1c18      	adds	r0, r3, #0
 80108d8:	f7f0 fbb2 	bl	8001040 <__aeabi_fmul>
 80108dc:	1c03      	adds	r3, r0, #0
 80108de:	1c18      	adds	r0, r3, #0
 80108e0:	f7ef fe9c 	bl	800061c <__aeabi_f2uiz>
 80108e4:	0003      	movs	r3, r0
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	4b27      	ldr	r3, [pc, #156]	@ (8010988 <SGP_SetHT+0xfc>)
 80108ea:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80108ec:	4b26      	ldr	r3, [pc, #152]	@ (8010988 <SGP_SetHT+0xfc>)
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	0a1b      	lsrs	r3, r3, #8
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	b2da      	uxtb	r2, r3
 80108f6:	4b25      	ldr	r3, [pc, #148]	@ (801098c <SGP_SetHT+0x100>)
 80108f8:	709a      	strb	r2, [r3, #2]
 80108fa:	4b24      	ldr	r3, [pc, #144]	@ (801098c <SGP_SetHT+0x100>)
 80108fc:	789a      	ldrb	r2, [r3, #2]
 80108fe:	210c      	movs	r1, #12
 8010900:	187b      	adds	r3, r7, r1
 8010902:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010904:	4b20      	ldr	r3, [pc, #128]	@ (8010988 <SGP_SetHT+0xfc>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	b2da      	uxtb	r2, r3
 801090a:	4b20      	ldr	r3, [pc, #128]	@ (801098c <SGP_SetHT+0x100>)
 801090c:	70da      	strb	r2, [r3, #3]
 801090e:	4b1f      	ldr	r3, [pc, #124]	@ (801098c <SGP_SetHT+0x100>)
 8010910:	78da      	ldrb	r2, [r3, #3]
 8010912:	187b      	adds	r3, r7, r1
 8010914:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8010916:	187b      	adds	r3, r7, r1
 8010918:	2102      	movs	r1, #2
 801091a:	0018      	movs	r0, r3
 801091c:	f7ff ff5e 	bl	80107dc <CalculateCRC>
 8010920:	0003      	movs	r3, r0
 8010922:	001a      	movs	r2, r3
 8010924:	4b19      	ldr	r3, [pc, #100]	@ (801098c <SGP_SetHT+0x100>)
 8010926:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8010928:	4b15      	ldr	r3, [pc, #84]	@ (8010980 <SGP_SetHT+0xf4>)
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	0a1b      	lsrs	r3, r3, #8
 801092e:	b29b      	uxth	r3, r3
 8010930:	b2da      	uxtb	r2, r3
 8010932:	4b16      	ldr	r3, [pc, #88]	@ (801098c <SGP_SetHT+0x100>)
 8010934:	715a      	strb	r2, [r3, #5]
 8010936:	4b15      	ldr	r3, [pc, #84]	@ (801098c <SGP_SetHT+0x100>)
 8010938:	795a      	ldrb	r2, [r3, #5]
 801093a:	2108      	movs	r1, #8
 801093c:	187b      	adds	r3, r7, r1
 801093e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8010940:	4b0f      	ldr	r3, [pc, #60]	@ (8010980 <SGP_SetHT+0xf4>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	b2da      	uxtb	r2, r3
 8010946:	4b11      	ldr	r3, [pc, #68]	@ (801098c <SGP_SetHT+0x100>)
 8010948:	719a      	strb	r2, [r3, #6]
 801094a:	4b10      	ldr	r3, [pc, #64]	@ (801098c <SGP_SetHT+0x100>)
 801094c:	799a      	ldrb	r2, [r3, #6]
 801094e:	187b      	adds	r3, r7, r1
 8010950:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8010952:	187b      	adds	r3, r7, r1
 8010954:	2102      	movs	r1, #2
 8010956:	0018      	movs	r0, r3
 8010958:	f7ff ff40 	bl	80107dc <CalculateCRC>
 801095c:	0003      	movs	r3, r0
 801095e:	001a      	movs	r2, r3
 8010960:	4b0a      	ldr	r3, [pc, #40]	@ (801098c <SGP_SetHT+0x100>)
 8010962:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8010964:	4b0a      	ldr	r3, [pc, #40]	@ (8010990 <SGP_SetHT+0x104>)
 8010966:	2201      	movs	r2, #1
 8010968:	701a      	strb	r2, [r3, #0]
}
 801096a:	46c0      	nop			@ (mov r8, r8)
 801096c:	46bd      	mov	sp, r7
 801096e:	b004      	add	sp, #16
 8010970:	bd80      	pop	{r7, pc}
 8010972:	46c0      	nop			@ (mov r8, r8)
 8010974:	42340000 	.word	0x42340000
 8010978:	432f0000 	.word	0x432f0000
 801097c:	477fff00 	.word	0x477fff00
 8010980:	20000fa2 	.word	0x20000fa2
 8010984:	42c80000 	.word	0x42c80000
 8010988:	20000fa0 	.word	0x20000fa0
 801098c:	200000b0 	.word	0x200000b0
 8010990:	20000fa4 	.word	0x20000fa4

08010994 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010994:	b580      	push	{r7, lr}
 8010996:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8010998:	4a09      	ldr	r2, [pc, #36]	@ (80109c0 <SGP_SoftReset+0x2c>)
 801099a:	4b0a      	ldr	r3, [pc, #40]	@ (80109c4 <SGP_SoftReset+0x30>)
 801099c:	0019      	movs	r1, r3
 801099e:	2003      	movs	r0, #3
 80109a0:	f002 fbf8 	bl	8013194 <CreateLine>
  SGP_TurnHeaterOff();
 80109a4:	f7ff fccc 	bl	8010340 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 80109a8:	200a      	movs	r0, #10
 80109aa:	f003 f93d 	bl	8013c28 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80109ae:	4b06      	ldr	r3, [pc, #24]	@ (80109c8 <SGP_SoftReset+0x34>)
 80109b0:	2202      	movs	r2, #2
 80109b2:	0019      	movs	r1, r3
 80109b4:	2059      	movs	r0, #89	@ 0x59
 80109b6:	f7ff fbf5 	bl	80101a4 <WriteRegister>
}
 80109ba:	46c0      	nop			@ (mov r8, r8)
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	0802d29c 	.word	0x0802d29c
 80109c4:	0802d178 	.word	0x0802d178
 80109c8:	200000b8 	.word	0x200000b8

080109cc <ResetVOCresult>:

void ResetVOCresult(void) {
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
  vocIndex = 0;
 80109d0:	4b02      	ldr	r3, [pc, #8]	@ (80109dc <ResetVOCresult+0x10>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	601a      	str	r2, [r3, #0]
}
 80109d6:	46c0      	nop			@ (mov r8, r8)
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20000fa8 	.word	0x20000fa8

080109e0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 80109e0:	b580      	push	{r7, lr}
 80109e2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 80109e4:	4b4b      	ldr	r3, [pc, #300]	@ (8010b14 <SGP_Upkeep+0x134>)
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	2b07      	cmp	r3, #7
 80109ea:	d900      	bls.n	80109ee <SGP_Upkeep+0xe>
 80109ec:	e07a      	b.n	8010ae4 <SGP_Upkeep+0x104>
 80109ee:	009a      	lsls	r2, r3, #2
 80109f0:	4b49      	ldr	r3, [pc, #292]	@ (8010b18 <SGP_Upkeep+0x138>)
 80109f2:	18d3      	adds	r3, r2, r3
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 80109f8:	4a48      	ldr	r2, [pc, #288]	@ (8010b1c <SGP_Upkeep+0x13c>)
 80109fa:	4b49      	ldr	r3, [pc, #292]	@ (8010b20 <SGP_Upkeep+0x140>)
 80109fc:	0019      	movs	r1, r3
 80109fe:	2003      	movs	r0, #3
 8010a00:	f002 fbc8 	bl	8013194 <CreateLine>
    break;
 8010a04:	e081      	b.n	8010b0a <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8010a06:	f7ff ffe1 	bl	80109cc <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8010a0a:	4b42      	ldr	r3, [pc, #264]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	701a      	strb	r2, [r3, #0]
    break;
 8010a10:	e07b      	b.n	8010b0a <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010a12:	f7fc fc4d 	bl	800d2b0 <getSensorLock>
 8010a16:	1e03      	subs	r3, r0, #0
 8010a18:	d000      	beq.n	8010a1c <SGP_Upkeep+0x3c>
 8010a1a:	e06f      	b.n	8010afc <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8010a1c:	2005      	movs	r0, #5
 8010a1e:	f7fc fc33 	bl	800d288 <setSensorLock>
    SetMeasurementIndicator();
 8010a22:	f001 f987 	bl	8011d34 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 8010a26:	f7ff fc29 	bl	801027c <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8010a2a:	200a      	movs	r0, #10
 8010a2c:	f003 f8fc 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 8010a30:	2000      	movs	r0, #0
 8010a32:	f7fc fc29 	bl	800d288 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 8010a36:	4b37      	ldr	r3, [pc, #220]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010a38:	2202      	movs	r2, #2
 8010a3a:	701a      	strb	r2, [r3, #0]
    break;
 8010a3c:	e065      	b.n	8010b0a <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8010a3e:	f7fc fc37 	bl	800d2b0 <getSensorLock>
 8010a42:	1e03      	subs	r3, r0, #0
 8010a44:	d15c      	bne.n	8010b00 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 8010a46:	2005      	movs	r0, #5
 8010a48:	f7fc fc1e 	bl	800d288 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8010a4c:	4b35      	ldr	r3, [pc, #212]	@ (8010b24 <SGP_Upkeep+0x144>)
 8010a4e:	0018      	movs	r0, r3
 8010a50:	f7ff fc84 	bl	801035c <SGP_GetMeasurementValues>
 8010a54:	1e03      	subs	r3, r0, #0
 8010a56:	d002      	beq.n	8010a5e <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8010a58:	4b2e      	ldr	r3, [pc, #184]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010a5a:	2203      	movs	r2, #3
 8010a5c:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8010a5e:	200a      	movs	r0, #10
 8010a60:	f003 f8e2 	bl	8013c28 <HAL_Delay>
    setSensorLock(FREE);
 8010a64:	2000      	movs	r0, #0
 8010a66:	f7fc fc0f 	bl	800d288 <setSensorLock>
    break;
 8010a6a:	e04e      	b.n	8010b0a <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8010a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8010b24 <SGP_Upkeep+0x144>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	0018      	movs	r0, r3
 8010a74:	f7f3 fff4 	bl	8004a60 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8010a78:	4b26      	ldr	r3, [pc, #152]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010a7a:	2206      	movs	r2, #6
 8010a7c:	701a      	strb	r2, [r3, #0]
    break;
 8010a7e:	e044      	b.n	8010b0a <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010a80:	4b24      	ldr	r3, [pc, #144]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010a82:	2207      	movs	r2, #7
 8010a84:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8010a86:	4b28      	ldr	r3, [pc, #160]	@ (8010b28 <SGP_Upkeep+0x148>)
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2b03      	cmp	r3, #3
 8010a8c:	d912      	bls.n	8010ab4 <SGP_Upkeep+0xd4>
 8010a8e:	4b27      	ldr	r3, [pc, #156]	@ (8010b2c <SGP_Upkeep+0x14c>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	2201      	movs	r2, #1
 8010a94:	4053      	eors	r3, r2
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00b      	beq.n	8010ab4 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010a9c:	4b24      	ldr	r3, [pc, #144]	@ (8010b30 <SGP_Upkeep+0x150>)
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d004      	beq.n	8010aae <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8010aa4:	f7ff ff76 	bl	8010994 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	f7fb ffd3 	bl	800ca54 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010aae:	4b20      	ldr	r3, [pc, #128]	@ (8010b30 <SGP_Upkeep+0x150>)
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8010ab4:	f003 f8ae 	bl	8013c14 <HAL_GetTick>
 8010ab8:	0003      	movs	r3, r0
 8010aba:	22c8      	movs	r2, #200	@ 0xc8
 8010abc:	0092      	lsls	r2, r2, #2
 8010abe:	189a      	adds	r2, r3, r2
 8010ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8010b34 <SGP_Upkeep+0x154>)
 8010ac2:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8010ac4:	f001 f94e 	bl	8011d64 <ResetMeasurementIndicator>
  break;
 8010ac8:	e01f      	b.n	8010b0a <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010aca:	4b1a      	ldr	r3, [pc, #104]	@ (8010b34 <SGP_Upkeep+0x154>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	0018      	movs	r0, r3
 8010ad0:	f002 fb0a 	bl	80130e8 <TimestampIsReached>
 8010ad4:	1e03      	subs	r3, r0, #0
 8010ad6:	d015      	beq.n	8010b04 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010ad8:	f7ff fbb8 	bl	801024c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010adc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010ae2:	e00f      	b.n	8010b04 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8010ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010aea:	f7fc fbe1 	bl	800d2b0 <getSensorLock>
 8010aee:	0003      	movs	r3, r0
 8010af0:	2b05      	cmp	r3, #5
 8010af2:	d109      	bne.n	8010b08 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8010af4:	2000      	movs	r0, #0
 8010af6:	f7fc fbc7 	bl	800d288 <setSensorLock>
    }
    break;
 8010afa:	e005      	b.n	8010b08 <SGP_Upkeep+0x128>
      break;
 8010afc:	46c0      	nop			@ (mov r8, r8)
 8010afe:	e004      	b.n	8010b0a <SGP_Upkeep+0x12a>
      break;
 8010b00:	46c0      	nop			@ (mov r8, r8)
 8010b02:	e002      	b.n	8010b0a <SGP_Upkeep+0x12a>
    break;
 8010b04:	46c0      	nop			@ (mov r8, r8)
 8010b06:	e000      	b.n	8010b0a <SGP_Upkeep+0x12a>
    break;
 8010b08:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010b0a:	4b02      	ldr	r3, [pc, #8]	@ (8010b14 <SGP_Upkeep+0x134>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
}
 8010b0e:	0018      	movs	r0, r3
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	20000fac 	.word	0x20000fac
 8010b18:	0802db14 	.word	0x0802db14
 8010b1c:	0802d2b4 	.word	0x0802d2b4
 8010b20:	0802d178 	.word	0x0802d178
 8010b24:	20000fa8 	.word	0x20000fa8
 8010b28:	20000ef2 	.word	0x20000ef2
 8010b2c:	20001e49 	.word	0x20001e49
 8010b30:	20000edc 	.word	0x20000edc
 8010b34:	20000ef4 	.word	0x20000ef4

08010b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	0002      	movs	r2, r0
 8010b40:	1dfb      	adds	r3, r7, #7
 8010b42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010b44:	1dfb      	adds	r3, r7, #7
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b4a:	d809      	bhi.n	8010b60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b4c:	1dfb      	adds	r3, r7, #7
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	001a      	movs	r2, r3
 8010b52:	231f      	movs	r3, #31
 8010b54:	401a      	ands	r2, r3
 8010b56:	4b04      	ldr	r3, [pc, #16]	@ (8010b68 <__NVIC_EnableIRQ+0x30>)
 8010b58:	2101      	movs	r1, #1
 8010b5a:	4091      	lsls	r1, r2
 8010b5c:	000a      	movs	r2, r1
 8010b5e:	601a      	str	r2, [r3, #0]
  }
}
 8010b60:	46c0      	nop			@ (mov r8, r8)
 8010b62:	46bd      	mov	sp, r7
 8010b64:	b002      	add	sp, #8
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	e000e100 	.word	0xe000e100

08010b6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	0002      	movs	r2, r0
 8010b74:	1dfb      	adds	r3, r7, #7
 8010b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010b78:	1dfb      	adds	r3, r7, #7
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b7e:	d810      	bhi.n	8010ba2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b80:	1dfb      	adds	r3, r7, #7
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	001a      	movs	r2, r3
 8010b86:	231f      	movs	r3, #31
 8010b88:	4013      	ands	r3, r2
 8010b8a:	4908      	ldr	r1, [pc, #32]	@ (8010bac <__NVIC_DisableIRQ+0x40>)
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	409a      	lsls	r2, r3
 8010b90:	0013      	movs	r3, r2
 8010b92:	2280      	movs	r2, #128	@ 0x80
 8010b94:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010b96:	f3bf 8f4f 	dsb	sy
}
 8010b9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010b9c:	f3bf 8f6f 	isb	sy
}
 8010ba0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010ba2:	46c0      	nop			@ (mov r8, r8)
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	b002      	add	sp, #8
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	46c0      	nop			@ (mov r8, r8)
 8010bac:	e000e100 	.word	0xe000e100

08010bb0 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010bb0:	b5b0      	push	{r4, r5, r7, lr}
 8010bb2:	b088      	sub	sp, #32
 8010bb4:	af02      	add	r7, sp, #8
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	0008      	movs	r0, r1
 8010bba:	0011      	movs	r1, r2
 8010bbc:	1cfb      	adds	r3, r7, #3
 8010bbe:	1c02      	adds	r2, r0, #0
 8010bc0:	701a      	strb	r2, [r3, #0]
 8010bc2:	1cbb      	adds	r3, r7, #2
 8010bc4:	1c0a      	adds	r2, r1, #0
 8010bc6:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8010d38 <getSoundData+0x188>)
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2201      	movs	r2, #1
 8010bd0:	4053      	eors	r3, r2
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d107      	bne.n	8010be8 <getSoundData+0x38>
 8010bd8:	4b58      	ldr	r3, [pc, #352]	@ (8010d3c <getSoundData+0x18c>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2201      	movs	r2, #1
 8010be0:	4053      	eors	r3, r2
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <getSoundData+0x3c>
    {
        return false;
 8010be8:	2300      	movs	r3, #0
 8010bea:	e0a0      	b.n	8010d2e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010bec:	4b54      	ldr	r3, [pc, #336]	@ (8010d40 <getSoundData+0x190>)
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d005      	beq.n	8010c02 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010bf6:	4b53      	ldr	r3, [pc, #332]	@ (8010d44 <getSoundData+0x194>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	b25b      	sxtb	r3, r3
 8010bfc:	0018      	movs	r0, r3
 8010bfe:	f7ff ffb5 	bl	8010b6c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8010c02:	f3bf 8f4f 	dsb	sy
}
 8010c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010c08:	f3bf 8f6f 	isb	sy
}
 8010c0c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010c0e:	1cfb      	adds	r3, r7, #3
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d04c      	beq.n	8010cb0 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8010c16:	4b4c      	ldr	r3, [pc, #304]	@ (8010d48 <getSoundData+0x198>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d11b      	bne.n	8010c56 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	617b      	str	r3, [r7, #20]
 8010c2e:	e00e      	b.n	8010c4e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	18d3      	adds	r3, r2, r3
 8010c36:	3302      	adds	r3, #2
 8010c38:	2200      	movs	r2, #0
 8010c3a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	18d3      	adds	r3, r2, r3
 8010c42:	3308      	adds	r3, #8
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	617b      	str	r3, [r7, #20]
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	2b05      	cmp	r3, #5
 8010c52:	d9ed      	bls.n	8010c30 <getSoundData+0x80>
 8010c54:	e02c      	b.n	8010cb0 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	1c59      	adds	r1, r3, #1
 8010c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8010d4c <getSoundData+0x19c>)
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	4b3b      	ldr	r3, [pc, #236]	@ (8010d50 <getSoundData+0x1a0>)
 8010c62:	681c      	ldr	r4, [r3, #0]
 8010c64:	4b38      	ldr	r3, [pc, #224]	@ (8010d48 <getSoundData+0x198>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	9300      	str	r3, [sp, #0]
 8010c6a:	0023      	movs	r3, r4
 8010c6c:	f000 fde8 	bl	8011840 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010c70:	2300      	movs	r3, #0
 8010c72:	613b      	str	r3, [r7, #16]
 8010c74:	e019      	b.n	8010caa <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	18d3      	adds	r3, r2, r3
 8010c7c:	1c98      	adds	r0, r3, #2
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	3308      	adds	r3, #8
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010c86:	4b33      	ldr	r3, [pc, #204]	@ (8010d54 <getSoundData+0x1a4>)
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	0092      	lsls	r2, r2, #2
 8010c8c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8010c8e:	4b32      	ldr	r3, [pc, #200]	@ (8010d58 <getSoundData+0x1a8>)
 8010c90:	693a      	ldr	r2, [r7, #16]
 8010c92:	0092      	lsls	r2, r2, #2
 8010c94:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010c96:	4b2c      	ldr	r3, [pc, #176]	@ (8010d48 <getSoundData+0x198>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	0013      	movs	r3, r2
 8010c9e:	0022      	movs	r2, r4
 8010ca0:	f000 fdce 	bl	8011840 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	613b      	str	r3, [r7, #16]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	2b05      	cmp	r3, #5
 8010cae:	d9e2      	bls.n	8010c76 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010cb0:	1cbb      	adds	r3, r7, #2
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d028      	beq.n	8010d0a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010cb8:	240e      	movs	r4, #14
 8010cba:	193b      	adds	r3, r7, r4
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010cc0:	250d      	movs	r5, #13
 8010cc2:	197b      	adds	r3, r7, r5
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010cc8:	4b24      	ldr	r3, [pc, #144]	@ (8010d5c <getSoundData+0x1ac>)
 8010cca:	6818      	ldr	r0, [r3, #0]
 8010ccc:	4924      	ldr	r1, [pc, #144]	@ (8010d60 <getSoundData+0x1b0>)
 8010cce:	197b      	adds	r3, r7, r5
 8010cd0:	193a      	adds	r2, r7, r4
 8010cd2:	f000 fe59 	bl	8011988 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8010cd6:	193b      	adds	r3, r7, r4
 8010cd8:	881a      	ldrh	r2, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	21ff      	movs	r1, #255	@ 0xff
 8010cde:	4011      	ands	r1, r2
 8010ce0:	000c      	movs	r4, r1
 8010ce2:	7b99      	ldrb	r1, [r3, #14]
 8010ce4:	2000      	movs	r0, #0
 8010ce6:	4001      	ands	r1, r0
 8010ce8:	1c08      	adds	r0, r1, #0
 8010cea:	1c21      	adds	r1, r4, #0
 8010cec:	4301      	orrs	r1, r0
 8010cee:	7399      	strb	r1, [r3, #14]
 8010cf0:	0a12      	lsrs	r2, r2, #8
 8010cf2:	b290      	uxth	r0, r2
 8010cf4:	7bda      	ldrb	r2, [r3, #15]
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	400a      	ands	r2, r1
 8010cfa:	1c11      	adds	r1, r2, #0
 8010cfc:	1c02      	adds	r2, r0, #0
 8010cfe:	430a      	orrs	r2, r1
 8010d00:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8010d02:	197b      	adds	r3, r7, r5
 8010d04:	781a      	ldrb	r2, [r3, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010d0a:	f000 f86f 	bl	8010dec <micSettlingComplete>
 8010d0e:	0003      	movs	r3, r0
 8010d10:	001a      	movs	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8010d16:	4b0a      	ldr	r3, [pc, #40]	@ (8010d40 <getSoundData+0x190>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010d20:	4b08      	ldr	r3, [pc, #32]	@ (8010d44 <getSoundData+0x194>)
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	b25b      	sxtb	r3, r3
 8010d26:	0018      	movs	r0, r3
 8010d28:	f7ff ff06 	bl	8010b38 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010d2c:	2301      	movs	r3, #1
}
 8010d2e:	0018      	movs	r0, r3
 8010d30:	46bd      	mov	sp, r7
 8010d32:	b006      	add	sp, #24
 8010d34:	bdb0      	pop	{r4, r5, r7, pc}
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	20000fae 	.word	0x20000fae
 8010d3c:	20000fb1 	.word	0x20000fb1
 8010d40:	20000fb0 	.word	0x20000fb0
 8010d44:	20001a00 	.word	0x20001a00
 8010d48:	20001a3c 	.word	0x20001a3c
 8010d4c:	20001a04 	.word	0x20001a04
 8010d50:	20001a08 	.word	0x20001a08
 8010d54:	20001a0c 	.word	0x20001a0c
 8010d58:	20001a24 	.word	0x20001a24
 8010d5c:	20000fb8 	.word	0x20000fb8
 8010d60:	3b5c7333 	.word	0x3b5c7333

08010d64 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
 8010d70:	001a      	movs	r2, r3
 8010d72:	1cfb      	adds	r3, r7, #3
 8010d74:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010d76:	4b09      	ldr	r3, [pc, #36]	@ (8010d9c <soundInit+0x38>)
 8010d78:	68ba      	ldr	r2, [r7, #8]
 8010d7a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8010d7c:	4b08      	ldr	r3, [pc, #32]	@ (8010da0 <soundInit+0x3c>)
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8010d82:	4b08      	ldr	r3, [pc, #32]	@ (8010da4 <soundInit+0x40>)
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8010d88:	4b07      	ldr	r3, [pc, #28]	@ (8010da8 <soundInit+0x44>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	569a      	ldrsb	r2, [r3, r2]
 8010d8e:	4b06      	ldr	r3, [pc, #24]	@ (8010da8 <soundInit+0x44>)
 8010d90:	701a      	strb	r2, [r3, #0]

    return true;
 8010d92:	2301      	movs	r3, #1
}
 8010d94:	0018      	movs	r0, r3
 8010d96:	46bd      	mov	sp, r7
 8010d98:	b004      	add	sp, #16
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	200019f8 	.word	0x200019f8
 8010da0:	200019f4 	.word	0x200019f4
 8010da4:	200019fc 	.word	0x200019fc
 8010da8:	20001a00 	.word	0x20001a00

08010dac <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010db0:	4b02      	ldr	r3, [pc, #8]	@ (8010dbc <clearMaximumAmplitude+0x10>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	601a      	str	r2, [r3, #0]
}
 8010db6:	46c0      	nop			@ (mov r8, r8)
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	20000fb8 	.word	0x20000fb8

08010dc0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8010dc4:	4b08      	ldr	r3, [pc, #32]	@ (8010de8 <startMicSettlingPeriod+0x28>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010dce:	4b06      	ldr	r3, [pc, #24]	@ (8010de8 <startMicSettlingPeriod+0x28>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	0018      	movs	r0, r3
 8010dd4:	f00b f80c 	bl	801bdf0 <HAL_TIM_Base_Start>
 8010dd8:	1e03      	subs	r3, r0, #0
 8010dda:	d001      	beq.n	8010de0 <startMicSettlingPeriod+0x20>
    {
        return false;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	e000      	b.n	8010de2 <startMicSettlingPeriod+0x22>
    }
    return true;
 8010de0:	2301      	movs	r3, #1
}
 8010de2:	0018      	movs	r0, r3
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	200019f4 	.word	0x200019f4

08010dec <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8010df2:	4b0e      	ldr	r3, [pc, #56]	@ (8010e2c <micSettlingComplete+0x40>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	691b      	ldr	r3, [r3, #16]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	401a      	ands	r2, r3
 8010dfe:	1dfb      	adds	r3, r7, #7
 8010e00:	3a01      	subs	r2, #1
 8010e02:	4251      	negs	r1, r2
 8010e04:	414a      	adcs	r2, r1
 8010e06:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010e08:	1dfb      	adds	r3, r7, #7
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d007      	beq.n	8010e20 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010e10:	4b06      	ldr	r3, [pc, #24]	@ (8010e2c <micSettlingComplete+0x40>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	0018      	movs	r0, r3
 8010e16:	f00b f835 	bl	801be84 <HAL_TIM_Base_Stop>
      DataReady = true;
 8010e1a:	4b05      	ldr	r3, [pc, #20]	@ (8010e30 <micSettlingComplete+0x44>)
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010e20:	1dfb      	adds	r3, r7, #7
 8010e22:	781b      	ldrb	r3, [r3, #0]
}
 8010e24:	0018      	movs	r0, r3
 8010e26:	46bd      	mov	sp, r7
 8010e28:	b002      	add	sp, #8
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	200019f4 	.word	0x200019f4
 8010e30:	20000fad 	.word	0x20000fad

08010e34 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	0002      	movs	r2, r0
 8010e3c:	1dfb      	adds	r3, r7, #7
 8010e3e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8010e40:	4b29      	ldr	r3, [pc, #164]	@ (8010ee8 <enableMicrophone+0xb4>)
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	1dfa      	adds	r2, r7, #7
 8010e48:	7812      	ldrb	r2, [r2, #0]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d101      	bne.n	8010e52 <enableMicrophone+0x1e>
    {
        return true;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e045      	b.n	8010ede <enableMicrophone+0xaa>
    }
    if (bEnable)
 8010e52:	1dfb      	adds	r3, r7, #7
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d025      	beq.n	8010ea6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8010e5a:	f7ff ffb1 	bl	8010dc0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8010e5e:	4b23      	ldr	r3, [pc, #140]	@ (8010eec <enableMicrophone+0xb8>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2280      	movs	r2, #128	@ 0x80
 8010e64:	0092      	lsls	r2, r2, #2
 8010e66:	4922      	ldr	r1, [pc, #136]	@ (8010ef0 <enableMicrophone+0xbc>)
 8010e68:	0018      	movs	r0, r3
 8010e6a:	f007 fa0d 	bl	8018288 <HAL_I2S_Receive_DMA>
 8010e6e:	1e03      	subs	r3, r0, #0
 8010e70:	d001      	beq.n	8010e76 <enableMicrophone+0x42>
        {
            return false;
 8010e72:	2300      	movs	r3, #0
 8010e74:	e033      	b.n	8010ede <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8010e76:	f7ff ff99 	bl	8010dac <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8010e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8010ef4 <enableMicrophone+0xc0>)
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010e80:	4b1d      	ldr	r3, [pc, #116]	@ (8010ef8 <enableMicrophone+0xc4>)
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	b25b      	sxtb	r3, r3
 8010e86:	0018      	movs	r0, r3
 8010e88:	f7ff fe56 	bl	8010b38 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8010e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8010efc <enableMicrophone+0xc8>)
 8010e8e:	2201      	movs	r2, #1
 8010e90:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8010e92:	4b15      	ldr	r3, [pc, #84]	@ (8010ee8 <enableMicrophone+0xb4>)
 8010e94:	2201      	movs	r2, #1
 8010e96:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010e98:	4b19      	ldr	r3, [pc, #100]	@ (8010f00 <enableMicrophone+0xcc>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010e9e:	4b19      	ldr	r3, [pc, #100]	@ (8010f04 <enableMicrophone+0xd0>)
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	701a      	strb	r2, [r3, #0]
 8010ea4:	e01a      	b.n	8010edc <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010ea6:	4b14      	ldr	r3, [pc, #80]	@ (8010ef8 <enableMicrophone+0xc4>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	b25b      	sxtb	r3, r3
 8010eac:	0018      	movs	r0, r3
 8010eae:	f7ff fe5d 	bl	8010b6c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8010eb2:	4b12      	ldr	r3, [pc, #72]	@ (8010efc <enableMicrophone+0xc8>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010eb8:	4b11      	ldr	r3, [pc, #68]	@ (8010f00 <enableMicrophone+0xcc>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010ebe:	4b11      	ldr	r3, [pc, #68]	@ (8010f04 <enableMicrophone+0xd0>)
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8010ec4:	4b09      	ldr	r3, [pc, #36]	@ (8010eec <enableMicrophone+0xb8>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	0018      	movs	r0, r3
 8010eca:	f007 fa9f 	bl	801840c <HAL_I2S_DMAStop>
 8010ece:	1e03      	subs	r3, r0, #0
 8010ed0:	d001      	beq.n	8010ed6 <enableMicrophone+0xa2>
        {
            return false;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e003      	b.n	8010ede <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8010ed6:	4b04      	ldr	r3, [pc, #16]	@ (8010ee8 <enableMicrophone+0xb4>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8010edc:	2301      	movs	r3, #1
}
 8010ede:	0018      	movs	r0, r3
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	b002      	add	sp, #8
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	46c0      	nop			@ (mov r8, r8)
 8010ee8:	20000fae 	.word	0x20000fae
 8010eec:	200019f8 	.word	0x200019f8
 8010ef0:	20000ff4 	.word	0x20000ff4
 8010ef4:	20000fb4 	.word	0x20000fb4
 8010ef8:	20001a00 	.word	0x20001a00
 8010efc:	20000fb0 	.word	0x20000fb0
 8010f00:	20000faf 	.word	0x20000faf
 8010f04:	20000fb1 	.word	0x20000fb1

08010f08 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8010f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8010f40 <startSPLcalculation+0x38>)
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	2201      	movs	r2, #1
 8010f14:	4053      	eors	r3, r2
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d001      	beq.n	8010f20 <startSPLcalculation+0x18>
    {
        return false;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e00c      	b.n	8010f3a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8010f20:	4b08      	ldr	r3, [pc, #32]	@ (8010f44 <startSPLcalculation+0x3c>)
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d001      	beq.n	8010f2e <startSPLcalculation+0x26>
    {
        return true;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e005      	b.n	8010f3a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8010f2e:	f000 fb63 	bl	80115f8 <resetSPLstate>
    SPLcalcEnabled = true;
 8010f32:	4b04      	ldr	r3, [pc, #16]	@ (8010f44 <startSPLcalculation+0x3c>)
 8010f34:	2201      	movs	r2, #1
 8010f36:	701a      	strb	r2, [r3, #0]
    return true;
 8010f38:	2301      	movs	r3, #1
}
 8010f3a:	0018      	movs	r0, r3
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20000fae 	.word	0x20000fae
 8010f44:	20000faf 	.word	0x20000faf

08010f48 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010f50:	4b05      	ldr	r3, [pc, #20]	@ (8010f68 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d102      	bne.n	8010f60 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	f000 f81a 	bl	8010f94 <processHalfDMAbuffer>
  }
}
 8010f60:	46c0      	nop			@ (mov r8, r8)
 8010f62:	46bd      	mov	sp, r7
 8010f64:	b002      	add	sp, #8
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	200019f8 	.word	0x200019f8

08010f6c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010f74:	4b06      	ldr	r3, [pc, #24]	@ (8010f90 <HAL_I2S_RxCpltCallback+0x24>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d104      	bne.n	8010f88 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8010f7e:	2380      	movs	r3, #128	@ 0x80
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	0018      	movs	r0, r3
 8010f84:	f000 f806 	bl	8010f94 <processHalfDMAbuffer>
  }
}
 8010f88:	46c0      	nop			@ (mov r8, r8)
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	b002      	add	sp, #8
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	200019f8 	.word	0x200019f8

08010f94 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	005a      	lsls	r2, r3, #1
 8010fa0:	4b15      	ldr	r3, [pc, #84]	@ (8010ff8 <processHalfDMAbuffer+0x64>)
 8010fa2:	18d3      	adds	r3, r2, r3
 8010fa4:	4a15      	ldr	r2, [pc, #84]	@ (8010ffc <processHalfDMAbuffer+0x68>)
 8010fa6:	2180      	movs	r1, #128	@ 0x80
 8010fa8:	0089      	lsls	r1, r1, #2
 8010faa:	0018      	movs	r0, r3
 8010fac:	f000 fd35 	bl	8011a1a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010fb0:	4b13      	ldr	r3, [pc, #76]	@ (8011000 <processHalfDMAbuffer+0x6c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	425a      	negs	r2, r3
 8010fb6:	4153      	adcs	r3, r2
 8010fb8:	b2da      	uxtb	r2, r3
 8010fba:	4b11      	ldr	r3, [pc, #68]	@ (8011000 <processHalfDMAbuffer+0x6c>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2109      	movs	r1, #9
 8010fc0:	4299      	cmp	r1, r3
 8010fc2:	419b      	sbcs	r3, r3
 8010fc4:	425b      	negs	r3, r3
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	480c      	ldr	r0, [pc, #48]	@ (8010ffc <processHalfDMAbuffer+0x68>)
 8010fca:	2180      	movs	r1, #128	@ 0x80
 8010fcc:	f000 fb46 	bl	801165c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011000 <processHalfDMAbuffer+0x6c>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b09      	cmp	r3, #9
 8010fd6:	d804      	bhi.n	8010fe2 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010fd8:	4b09      	ldr	r3, [pc, #36]	@ (8011000 <processHalfDMAbuffer+0x6c>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	1c5a      	adds	r2, r3, #1
 8010fde:	4b08      	ldr	r3, [pc, #32]	@ (8011000 <processHalfDMAbuffer+0x6c>)
 8010fe0:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8010fe2:	4b08      	ldr	r3, [pc, #32]	@ (8011004 <processHalfDMAbuffer+0x70>)
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010fec:	f000 f826 	bl	801103c <calculateSPLQ31>
    }
}
 8010ff0:	46c0      	nop			@ (mov r8, r8)
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	b002      	add	sp, #8
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20000ff4 	.word	0x20000ff4
 8010ffc:	200017f4 	.word	0x200017f4
 8011000:	20000fb4 	.word	0x20000fb4
 8011004:	20000faf 	.word	0x20000faf

08011008 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011010:	4b07      	ldr	r3, [pc, #28]	@ (8011030 <HAL_I2S_ErrorCallback+0x28>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	429a      	cmp	r2, r3
 8011018:	d106      	bne.n	8011028 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 801101a:	4a06      	ldr	r2, [pc, #24]	@ (8011034 <HAL_I2S_ErrorCallback+0x2c>)
 801101c:	239e      	movs	r3, #158	@ 0x9e
 801101e:	0059      	lsls	r1, r3, #1
 8011020:	4b05      	ldr	r3, [pc, #20]	@ (8011038 <HAL_I2S_ErrorCallback+0x30>)
 8011022:	0018      	movs	r0, r3
 8011024:	f002 f96e 	bl	8013304 <errorHandler>
  }
}
 8011028:	46c0      	nop			@ (mov r8, r8)
 801102a:	46bd      	mov	sp, r7
 801102c:	b002      	add	sp, #8
 801102e:	bd80      	pop	{r7, pc}
 8011030:	200019f8 	.word	0x200019f8
 8011034:	0802d2dc 	.word	0x0802d2dc
 8011038:	0802dc04 	.word	0x0802dc04

0801103c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 801103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801103e:	b0b3      	sub	sp, #204	@ 0xcc
 8011040:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011042:	4ae2      	ldr	r2, [pc, #904]	@ (80113cc <calculateSPLQ31+0x390>)
 8011044:	2338      	movs	r3, #56	@ 0x38
 8011046:	2030      	movs	r0, #48	@ 0x30
 8011048:	181b      	adds	r3, r3, r0
 801104a:	19d9      	adds	r1, r3, r7
 801104c:	2334      	movs	r3, #52	@ 0x34
 801104e:	181b      	adds	r3, r3, r0
 8011050:	19d8      	adds	r0, r3, r7
 8011052:	2380      	movs	r3, #128	@ 0x80
 8011054:	f000 fc36 	bl	80118c4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801105a:	2b00      	cmp	r3, #0
 801105c:	da00      	bge.n	8011060 <calculateSPLQ31+0x24>
 801105e:	3301      	adds	r3, #1
 8011060:	105b      	asrs	r3, r3, #1
 8011062:	001a      	movs	r2, r3
 8011064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011066:	2b00      	cmp	r3, #0
 8011068:	da00      	bge.n	801106c <calculateSPLQ31+0x30>
 801106a:	3301      	adds	r3, #1
 801106c:	105b      	asrs	r3, r3, #1
 801106e:	18d3      	adds	r3, r2, r3
 8011070:	2188      	movs	r1, #136	@ 0x88
 8011072:	187a      	adds	r2, r7, r1
 8011074:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011076:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011078:	187b      	adds	r3, r7, r1
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	1ad3      	subs	r3, r2, r3
 801107e:	3304      	adds	r3, #4
 8011080:	2284      	movs	r2, #132	@ 0x84
 8011082:	18b9      	adds	r1, r7, r2
 8011084:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011086:	18bb      	adds	r3, r7, r2
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4ad1      	ldr	r2, [pc, #836]	@ (80113d0 <calculateSPLQ31+0x394>)
 801108c:	0019      	movs	r1, r3
 801108e:	0010      	movs	r0, r2
 8011090:	f000 fc58 	bl	8011944 <getPo2factor>
 8011094:	0003      	movs	r3, r0
 8011096:	2280      	movs	r2, #128	@ 0x80
 8011098:	18ba      	adds	r2, r7, r2
 801109a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 801109c:	2300      	movs	r3, #0
 801109e:	2284      	movs	r2, #132	@ 0x84
 80110a0:	2130      	movs	r1, #48	@ 0x30
 80110a2:	1852      	adds	r2, r2, r1
 80110a4:	19d2      	adds	r2, r2, r7
 80110a6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 80110a8:	2300      	movs	r3, #0
 80110aa:	2280      	movs	r2, #128	@ 0x80
 80110ac:	1852      	adds	r2, r2, r1
 80110ae:	19d2      	adds	r2, r2, r7
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	e032      	b.n	801111a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 80110b4:	4ac5      	ldr	r2, [pc, #788]	@ (80113cc <calculateSPLQ31+0x390>)
 80110b6:	2680      	movs	r6, #128	@ 0x80
 80110b8:	2330      	movs	r3, #48	@ 0x30
 80110ba:	18f1      	adds	r1, r6, r3
 80110bc:	19cb      	adds	r3, r1, r7
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	589a      	ldr	r2, [r3, r2]
 80110c4:	2188      	movs	r1, #136	@ 0x88
 80110c6:	1879      	adds	r1, r7, r1
 80110c8:	680b      	ldr	r3, [r1, #0]
 80110ca:	1ad2      	subs	r2, r2, r3
 80110cc:	2180      	movs	r1, #128	@ 0x80
 80110ce:	1879      	adds	r1, r7, r1
 80110d0:	680b      	ldr	r3, [r1, #0]
 80110d2:	409a      	lsls	r2, r3
 80110d4:	0011      	movs	r1, r2
 80110d6:	4abf      	ldr	r2, [pc, #764]	@ (80113d4 <calculateSPLQ31+0x398>)
 80110d8:	2084      	movs	r0, #132	@ 0x84
 80110da:	2330      	movs	r3, #48	@ 0x30
 80110dc:	18c3      	adds	r3, r0, r3
 80110de:	19db      	adds	r3, r3, r7
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 80110e6:	2230      	movs	r2, #48	@ 0x30
 80110e8:	1883      	adds	r3, r0, r2
 80110ea:	19db      	adds	r3, r3, r7
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3301      	adds	r3, #1
 80110f0:	49b8      	ldr	r1, [pc, #736]	@ (80113d4 <calculateSPLQ31+0x398>)
 80110f2:	009a      	lsls	r2, r3, #2
 80110f4:	2300      	movs	r3, #0
 80110f6:	5053      	str	r3, [r2, r1]
        count += 2;
 80110f8:	2230      	movs	r2, #48	@ 0x30
 80110fa:	1883      	adds	r3, r0, r2
 80110fc:	19db      	adds	r3, r3, r7
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3302      	adds	r3, #2
 8011102:	0011      	movs	r1, r2
 8011104:	1882      	adds	r2, r0, r2
 8011106:	19d2      	adds	r2, r2, r7
 8011108:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 801110a:	000a      	movs	r2, r1
 801110c:	18b3      	adds	r3, r6, r2
 801110e:	19db      	adds	r3, r3, r7
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	18b2      	adds	r2, r6, r2
 8011116:	19d2      	adds	r2, r2, r7
 8011118:	6013      	str	r3, [r2, #0]
 801111a:	2380      	movs	r3, #128	@ 0x80
 801111c:	2630      	movs	r6, #48	@ 0x30
 801111e:	199b      	adds	r3, r3, r6
 8011120:	19db      	adds	r3, r3, r7
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b7f      	cmp	r3, #127	@ 0x7f
 8011126:	d9c5      	bls.n	80110b4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011128:	4bab      	ldr	r3, [pc, #684]	@ (80113d8 <calculateSPLQ31+0x39c>)
 801112a:	6818      	ldr	r0, [r3, #0]
 801112c:	49a9      	ldr	r1, [pc, #676]	@ (80113d4 <calculateSPLQ31+0x398>)
 801112e:	2301      	movs	r3, #1
 8011130:	2200      	movs	r2, #0
 8011132:	f011 ff25 	bl	8022f80 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011136:	4aa9      	ldr	r2, [pc, #676]	@ (80113dc <calculateSPLQ31+0x3a0>)
 8011138:	2338      	movs	r3, #56	@ 0x38
 801113a:	199b      	adds	r3, r3, r6
 801113c:	19d9      	adds	r1, r3, r7
 801113e:	2334      	movs	r3, #52	@ 0x34
 8011140:	199b      	adds	r3, r3, r6
 8011142:	19d8      	adds	r0, r3, r7
 8011144:	237e      	movs	r3, #126	@ 0x7e
 8011146:	f000 fbbd 	bl	80118c4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 801114a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801114c:	2380      	movs	r3, #128	@ 0x80
 801114e:	061b      	lsls	r3, r3, #24
 8011150:	429a      	cmp	r2, r3
 8011152:	d101      	bne.n	8011158 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011154:	4b9e      	ldr	r3, [pc, #632]	@ (80113d0 <calculateSPLQ31+0x394>)
 8011156:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011158:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801115a:	2380      	movs	r3, #128	@ 0x80
 801115c:	061b      	lsls	r3, r3, #24
 801115e:	429a      	cmp	r2, r3
 8011160:	d101      	bne.n	8011166 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011162:	4b9b      	ldr	r3, [pc, #620]	@ (80113d0 <calculateSPLQ31+0x394>)
 8011164:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011168:	17da      	asrs	r2, r3, #31
 801116a:	189b      	adds	r3, r3, r2
 801116c:	4053      	eors	r3, r2
 801116e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011172:	17da      	asrs	r2, r3, #31
 8011174:	189b      	adds	r3, r3, r2
 8011176:	4053      	eors	r3, r2
 8011178:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 801117a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801117c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801117e:	429a      	cmp	r2, r3
 8011180:	dd01      	ble.n	8011186 <calculateSPLQ31+0x14a>
    {
        max = min;
 8011182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011184:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011188:	3304      	adds	r3, #4
 801118a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 801118c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801118e:	4a90      	ldr	r2, [pc, #576]	@ (80113d0 <calculateSPLQ31+0x394>)
 8011190:	0019      	movs	r1, r3
 8011192:	0010      	movs	r0, r2
 8011194:	f000 fbd6 	bl	8011944 <getPo2factor>
 8011198:	0003      	movs	r3, r0
 801119a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 801119c:	2302      	movs	r3, #2
 801119e:	22ac      	movs	r2, #172	@ 0xac
 80111a0:	18ba      	adds	r2, r7, r2
 80111a2:	6013      	str	r3, [r2, #0]
 80111a4:	e012      	b.n	80111cc <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80111a6:	4a8b      	ldr	r2, [pc, #556]	@ (80113d4 <calculateSPLQ31+0x398>)
 80111a8:	20ac      	movs	r0, #172	@ 0xac
 80111aa:	183b      	adds	r3, r7, r0
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	589a      	ldr	r2, [r3, r2]
 80111b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111b4:	409a      	lsls	r2, r3
 80111b6:	0011      	movs	r1, r2
 80111b8:	4a86      	ldr	r2, [pc, #536]	@ (80113d4 <calculateSPLQ31+0x398>)
 80111ba:	183b      	adds	r3, r7, r0
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 80111c2:	183b      	adds	r3, r7, r0
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	3301      	adds	r3, #1
 80111c8:	183a      	adds	r2, r7, r0
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	23ac      	movs	r3, #172	@ 0xac
 80111ce:	18fb      	adds	r3, r7, r3
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80111d4:	d9e7      	bls.n	80111a6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 80111d6:	4b7d      	ldr	r3, [pc, #500]	@ (80113cc <calculateSPLQ31+0x390>)
 80111d8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 80111da:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80111dc:	4b7d      	ldr	r3, [pc, #500]	@ (80113d4 <calculateSPLQ31+0x398>)
 80111de:	2240      	movs	r2, #64	@ 0x40
 80111e0:	0018      	movs	r0, r3
 80111e2:	f012 fc77 	bl	8023ad4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 80111e6:	2330      	movs	r3, #48	@ 0x30
 80111e8:	18fb      	adds	r3, r7, r3
 80111ea:	0018      	movs	r0, r3
 80111ec:	2330      	movs	r3, #48	@ 0x30
 80111ee:	001a      	movs	r2, r3
 80111f0:	2100      	movs	r1, #0
 80111f2:	f014 fac3 	bl	802577c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 80111f6:	2200      	movs	r2, #0
 80111f8:	2300      	movs	r3, #0
 80111fa:	21a0      	movs	r1, #160	@ 0xa0
 80111fc:	1879      	adds	r1, r7, r1
 80111fe:	600a      	str	r2, [r1, #0]
 8011200:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011202:	2301      	movs	r3, #1
 8011204:	229c      	movs	r2, #156	@ 0x9c
 8011206:	18ba      	adds	r2, r7, r2
 8011208:	6013      	str	r3, [r2, #0]
 801120a:	e05b      	b.n	80112c4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 801120c:	269c      	movs	r6, #156	@ 0x9c
 801120e:	19bb      	adds	r3, r7, r6
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	009a      	lsls	r2, r3, #2
 8011214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011216:	189b      	adds	r3, r3, r2
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	613b      	str	r3, [r7, #16]
 801121c:	17db      	asrs	r3, r3, #31
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	4b6f      	ldr	r3, [pc, #444]	@ (80113e0 <calculateSPLQ31+0x3a4>)
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	19bb      	adds	r3, r7, r6
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	18d3      	adds	r3, r2, r3
 801122c:	881b      	ldrh	r3, [r3, #0]
 801122e:	60bb      	str	r3, [r7, #8]
 8011230:	2300      	movs	r3, #0
 8011232:	60fb      	str	r3, [r7, #12]
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6938      	ldr	r0, [r7, #16]
 801123a:	6979      	ldr	r1, [r7, #20]
 801123c:	f7ef f9c0 	bl	80005c0 <__aeabi_lmul>
 8011240:	0002      	movs	r2, r0
 8011242:	000b      	movs	r3, r1
 8011244:	0010      	movs	r0, r2
 8011246:	0019      	movs	r1, r3
 8011248:	23a0      	movs	r3, #160	@ 0xa0
 801124a:	18fa      	adds	r2, r7, r3
 801124c:	6853      	ldr	r3, [r2, #4]
 801124e:	6812      	ldr	r2, [r2, #0]
 8011250:	1812      	adds	r2, r2, r0
 8011252:	414b      	adcs	r3, r1
 8011254:	21a0      	movs	r1, #160	@ 0xa0
 8011256:	1879      	adds	r1, r7, r1
 8011258:	600a      	str	r2, [r1, #0]
 801125a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 801125c:	4b61      	ldr	r3, [pc, #388]	@ (80113e4 <calculateSPLQ31+0x3a8>)
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	19bb      	adds	r3, r7, r6
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	18d3      	adds	r3, r2, r3
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	2b06      	cmp	r3, #6
 801126a:	d025      	beq.n	80112b8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 801126c:	4b5d      	ldr	r3, [pc, #372]	@ (80113e4 <calculateSPLQ31+0x3a8>)
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	19bb      	adds	r3, r7, r6
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	18d3      	adds	r3, r2, r3
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	2230      	movs	r2, #48	@ 0x30
 801127a:	18ba      	adds	r2, r7, r2
 801127c:	00db      	lsls	r3, r3, #3
 801127e:	18d3      	adds	r3, r2, r3
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	6859      	ldr	r1, [r3, #4]
 8011284:	19bb      	adds	r3, r7, r6
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	009a      	lsls	r2, r3, #2
 801128a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801128c:	189b      	adds	r3, r3, r2
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	603b      	str	r3, [r7, #0]
 8011292:	17db      	asrs	r3, r3, #31
 8011294:	607b      	str	r3, [r7, #4]
 8011296:	4b53      	ldr	r3, [pc, #332]	@ (80113e4 <calculateSPLQ31+0x3a8>)
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	19be      	adds	r6, r7, r6
 801129c:	6833      	ldr	r3, [r6, #0]
 801129e:	18d3      	adds	r3, r2, r3
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	001e      	movs	r6, r3
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	1880      	adds	r0, r0, r2
 80112aa:	4159      	adcs	r1, r3
 80112ac:	2330      	movs	r3, #48	@ 0x30
 80112ae:	18fa      	adds	r2, r7, r3
 80112b0:	00f3      	lsls	r3, r6, #3
 80112b2:	18d3      	adds	r3, r2, r3
 80112b4:	6018      	str	r0, [r3, #0]
 80112b6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80112b8:	229c      	movs	r2, #156	@ 0x9c
 80112ba:	18bb      	adds	r3, r7, r2
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	3301      	adds	r3, #1
 80112c0:	18ba      	adds	r2, r7, r2
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	239c      	movs	r3, #156	@ 0x9c
 80112c6:	18fb      	adds	r3, r7, r3
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80112cc:	d99e      	bls.n	801120c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 80112ce:	2380      	movs	r3, #128	@ 0x80
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	005b      	lsls	r3, r3, #1
 80112d6:	001a      	movs	r2, r3
 80112d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112da:	005b      	lsls	r3, r3, #1
 80112dc:	18d3      	adds	r3, r2, r3
 80112de:	3b22      	subs	r3, #34	@ 0x22
 80112e0:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 80112e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80112e4:	17da      	asrs	r2, r3, #31
 80112e6:	189b      	adds	r3, r3, r2
 80112e8:	4053      	eors	r3, r2
 80112ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 80112ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da62      	bge.n	80113b8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 80112f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112f4:	3b20      	subs	r3, #32
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db05      	blt.n	8011306 <calculateSPLQ31+0x2ca>
 80112fa:	22a0      	movs	r2, #160	@ 0xa0
 80112fc:	18ba      	adds	r2, r7, r2
 80112fe:	6812      	ldr	r2, [r2, #0]
 8011300:	409a      	lsls	r2, r3
 8011302:	627a      	str	r2, [r7, #36]	@ 0x24
 8011304:	e010      	b.n	8011328 <calculateSPLQ31+0x2ec>
 8011306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011308:	2220      	movs	r2, #32
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	22a0      	movs	r2, #160	@ 0xa0
 801130e:	18ba      	adds	r2, r7, r2
 8011310:	6812      	ldr	r2, [r2, #0]
 8011312:	40da      	lsrs	r2, r3
 8011314:	0013      	movs	r3, r2
 8011316:	22a4      	movs	r2, #164	@ 0xa4
 8011318:	18ba      	adds	r2, r7, r2
 801131a:	6811      	ldr	r1, [r2, #0]
 801131c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801131e:	4091      	lsls	r1, r2
 8011320:	6279      	str	r1, [r7, #36]	@ 0x24
 8011322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011324:	431a      	orrs	r2, r3
 8011326:	627a      	str	r2, [r7, #36]	@ 0x24
 8011328:	21a0      	movs	r1, #160	@ 0xa0
 801132a:	187b      	adds	r3, r7, r1
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011330:	409a      	lsls	r2, r3
 8011332:	623a      	str	r2, [r7, #32]
 8011334:	6a3b      	ldr	r3, [r7, #32]
 8011336:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8011338:	187a      	adds	r2, r7, r1
 801133a:	6013      	str	r3, [r2, #0]
 801133c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801133e:	2300      	movs	r3, #0
 8011340:	2298      	movs	r2, #152	@ 0x98
 8011342:	18ba      	adds	r2, r7, r2
 8011344:	6013      	str	r3, [r2, #0]
 8011346:	e031      	b.n	80113ac <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8011348:	2330      	movs	r3, #48	@ 0x30
 801134a:	18fa      	adds	r2, r7, r3
 801134c:	2398      	movs	r3, #152	@ 0x98
 801134e:	18fb      	adds	r3, r7, r3
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	18d3      	adds	r3, r2, r3
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801135c:	3920      	subs	r1, #32
 801135e:	2900      	cmp	r1, #0
 8011360:	db03      	blt.n	801136a <calculateSPLQ31+0x32e>
 8011362:	0010      	movs	r0, r2
 8011364:	4088      	lsls	r0, r1
 8011366:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011368:	e00c      	b.n	8011384 <calculateSPLQ31+0x348>
 801136a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801136c:	2020      	movs	r0, #32
 801136e:	1a41      	subs	r1, r0, r1
 8011370:	0010      	movs	r0, r2
 8011372:	40c8      	lsrs	r0, r1
 8011374:	0001      	movs	r1, r0
 8011376:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011378:	001c      	movs	r4, r3
 801137a:	4084      	lsls	r4, r0
 801137c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 801137e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011380:	4308      	orrs	r0, r1
 8011382:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011384:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011386:	0013      	movs	r3, r2
 8011388:	408b      	lsls	r3, r1
 801138a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801138c:	2330      	movs	r3, #48	@ 0x30
 801138e:	18fa      	adds	r2, r7, r3
 8011390:	2098      	movs	r0, #152	@ 0x98
 8011392:	183b      	adds	r3, r7, r0
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	00db      	lsls	r3, r3, #3
 8011398:	18d3      	adds	r3, r2, r3
 801139a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801139c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801139e:	6019      	str	r1, [r3, #0]
 80113a0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80113a2:	183b      	adds	r3, r7, r0
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3301      	adds	r3, #1
 80113a8:	183a      	adds	r2, r7, r0
 80113aa:	6013      	str	r3, [r2, #0]
 80113ac:	2398      	movs	r3, #152	@ 0x98
 80113ae:	18fb      	adds	r3, r7, r3
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b05      	cmp	r3, #5
 80113b4:	d9c8      	bls.n	8011348 <calculateSPLQ31+0x30c>
 80113b6:	e06b      	b.n	8011490 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 80113b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ba:	3b20      	subs	r3, #32
 80113bc:	2b00      	cmp	r3, #0
 80113be:	db13      	blt.n	80113e8 <calculateSPLQ31+0x3ac>
 80113c0:	22a4      	movs	r2, #164	@ 0xa4
 80113c2:	18ba      	adds	r2, r7, r2
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	40da      	lsrs	r2, r3
 80113c8:	61ba      	str	r2, [r7, #24]
 80113ca:	e01e      	b.n	801140a <calculateSPLQ31+0x3ce>
 80113cc:	200017f4 	.word	0x200017f4
 80113d0:	7fffffff 	.word	0x7fffffff
 80113d4:	20001a40 	.word	0x20001a40
 80113d8:	200000c8 	.word	0x200000c8
 80113dc:	20001a48 	.word	0x20001a48
 80113e0:	200000cc 	.word	0x200000cc
 80113e4:	200000d8 	.word	0x200000d8
 80113e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ea:	2220      	movs	r2, #32
 80113ec:	1ad3      	subs	r3, r2, r3
 80113ee:	22a4      	movs	r2, #164	@ 0xa4
 80113f0:	18ba      	adds	r2, r7, r2
 80113f2:	6812      	ldr	r2, [r2, #0]
 80113f4:	409a      	lsls	r2, r3
 80113f6:	0013      	movs	r3, r2
 80113f8:	22a0      	movs	r2, #160	@ 0xa0
 80113fa:	18ba      	adds	r2, r7, r2
 80113fc:	6811      	ldr	r1, [r2, #0]
 80113fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011400:	40d1      	lsrs	r1, r2
 8011402:	61b9      	str	r1, [r7, #24]
 8011404:	69ba      	ldr	r2, [r7, #24]
 8011406:	431a      	orrs	r2, r3
 8011408:	61ba      	str	r2, [r7, #24]
 801140a:	23a4      	movs	r3, #164	@ 0xa4
 801140c:	18fb      	adds	r3, r7, r3
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011412:	40da      	lsrs	r2, r3
 8011414:	61fa      	str	r2, [r7, #28]
 8011416:	69ba      	ldr	r2, [r7, #24]
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	21a0      	movs	r1, #160	@ 0xa0
 801141c:	1879      	adds	r1, r7, r1
 801141e:	600a      	str	r2, [r1, #0]
 8011420:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011422:	2300      	movs	r3, #0
 8011424:	2294      	movs	r2, #148	@ 0x94
 8011426:	18ba      	adds	r2, r7, r2
 8011428:	6013      	str	r3, [r2, #0]
 801142a:	e02c      	b.n	8011486 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 801142c:	2330      	movs	r3, #48	@ 0x30
 801142e:	18fa      	adds	r2, r7, r3
 8011430:	2394      	movs	r3, #148	@ 0x94
 8011432:	18fb      	adds	r3, r7, r3
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	18d3      	adds	r3, r2, r3
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011440:	3920      	subs	r1, #32
 8011442:	2900      	cmp	r1, #0
 8011444:	db03      	blt.n	801144e <calculateSPLQ31+0x412>
 8011446:	0018      	movs	r0, r3
 8011448:	40c8      	lsrs	r0, r1
 801144a:	0004      	movs	r4, r0
 801144c:	e00a      	b.n	8011464 <calculateSPLQ31+0x428>
 801144e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011450:	2020      	movs	r0, #32
 8011452:	1a41      	subs	r1, r0, r1
 8011454:	0018      	movs	r0, r3
 8011456:	4088      	lsls	r0, r1
 8011458:	0001      	movs	r1, r0
 801145a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801145c:	0016      	movs	r6, r2
 801145e:	40c6      	lsrs	r6, r0
 8011460:	0034      	movs	r4, r6
 8011462:	430c      	orrs	r4, r1
 8011464:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011466:	40cb      	lsrs	r3, r1
 8011468:	001d      	movs	r5, r3
 801146a:	2330      	movs	r3, #48	@ 0x30
 801146c:	18fa      	adds	r2, r7, r3
 801146e:	2194      	movs	r1, #148	@ 0x94
 8011470:	187b      	adds	r3, r7, r1
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	00db      	lsls	r3, r3, #3
 8011476:	18d3      	adds	r3, r2, r3
 8011478:	601c      	str	r4, [r3, #0]
 801147a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801147c:	187b      	adds	r3, r7, r1
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	3301      	adds	r3, #1
 8011482:	187a      	adds	r2, r7, r1
 8011484:	6013      	str	r3, [r2, #0]
 8011486:	2394      	movs	r3, #148	@ 0x94
 8011488:	18fb      	adds	r3, r7, r3
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b05      	cmp	r3, #5
 801148e:	d9cd      	bls.n	801142c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011490:	230f      	movs	r3, #15
 8011492:	425d      	negs	r5, r3
 8011494:	2305      	movs	r3, #5
 8011496:	425e      	negs	r6, r3
 8011498:	4b4a      	ldr	r3, [pc, #296]	@ (80115c4 <calculateSPLQ31+0x588>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	4b4a      	ldr	r3, [pc, #296]	@ (80115c8 <calculateSPLQ31+0x58c>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	21a0      	movs	r1, #160	@ 0xa0
 80114a6:	1879      	adds	r1, r7, r1
 80114a8:	6808      	ldr	r0, [r1, #0]
 80114aa:	6849      	ldr	r1, [r1, #4]
 80114ac:	4c47      	ldr	r4, [pc, #284]	@ (80115cc <calculateSPLQ31+0x590>)
 80114ae:	9403      	str	r4, [sp, #12]
 80114b0:	4c47      	ldr	r4, [pc, #284]	@ (80115d0 <calculateSPLQ31+0x594>)
 80114b2:	9402      	str	r4, [sp, #8]
 80114b4:	9301      	str	r3, [sp, #4]
 80114b6:	9200      	str	r2, [sp, #0]
 80114b8:	0033      	movs	r3, r6
 80114ba:	002a      	movs	r2, r5
 80114bc:	f000 fa86 	bl	80119cc <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80114c0:	2300      	movs	r3, #0
 80114c2:	2290      	movs	r2, #144	@ 0x90
 80114c4:	18ba      	adds	r2, r7, r2
 80114c6:	6013      	str	r3, [r2, #0]
 80114c8:	e026      	b.n	8011518 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80114ca:	2330      	movs	r3, #48	@ 0x30
 80114cc:	18fa      	adds	r2, r7, r3
 80114ce:	2490      	movs	r4, #144	@ 0x90
 80114d0:	193b      	adds	r3, r7, r4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	00db      	lsls	r3, r3, #3
 80114d6:	18d3      	adds	r3, r2, r3
 80114d8:	6818      	ldr	r0, [r3, #0]
 80114da:	6859      	ldr	r1, [r3, #4]
 80114dc:	230f      	movs	r3, #15
 80114de:	425d      	negs	r5, r3
 80114e0:	2305      	movs	r3, #5
 80114e2:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 80114e4:	193b      	adds	r3, r7, r4
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	009a      	lsls	r2, r3, #2
 80114ea:	4b3a      	ldr	r3, [pc, #232]	@ (80115d4 <calculateSPLQ31+0x598>)
 80114ec:	18d3      	adds	r3, r2, r3
 80114ee:	193a      	adds	r2, r7, r4
 80114f0:	6812      	ldr	r2, [r2, #0]
 80114f2:	0094      	lsls	r4, r2, #2
 80114f4:	4a38      	ldr	r2, [pc, #224]	@ (80115d8 <calculateSPLQ31+0x59c>)
 80114f6:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80114f8:	9203      	str	r2, [sp, #12]
 80114fa:	9302      	str	r3, [sp, #8]
 80114fc:	2300      	movs	r3, #0
 80114fe:	9301      	str	r3, [sp, #4]
 8011500:	2300      	movs	r3, #0
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	0033      	movs	r3, r6
 8011506:	002a      	movs	r2, r5
 8011508:	f000 fa60 	bl	80119cc <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801150c:	2490      	movs	r4, #144	@ 0x90
 801150e:	193b      	adds	r3, r7, r4
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3301      	adds	r3, #1
 8011514:	193a      	adds	r2, r7, r4
 8011516:	6013      	str	r3, [r2, #0]
 8011518:	2390      	movs	r3, #144	@ 0x90
 801151a:	18fb      	adds	r3, r7, r3
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b05      	cmp	r3, #5
 8011520:	d9d3      	bls.n	80114ca <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8011522:	4b2b      	ldr	r3, [pc, #172]	@ (80115d0 <calculateSPLQ31+0x594>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	4b2d      	ldr	r3, [pc, #180]	@ (80115dc <calculateSPLQ31+0x5a0>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	18d2      	adds	r2, r2, r3
 801152c:	4b2b      	ldr	r3, [pc, #172]	@ (80115dc <calculateSPLQ31+0x5a0>)
 801152e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8011530:	4b26      	ldr	r3, [pc, #152]	@ (80115cc <calculateSPLQ31+0x590>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	4b2a      	ldr	r3, [pc, #168]	@ (80115e0 <calculateSPLQ31+0x5a4>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	18d2      	adds	r2, r2, r3
 801153a:	4b29      	ldr	r3, [pc, #164]	@ (80115e0 <calculateSPLQ31+0x5a4>)
 801153c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801153e:	2300      	movs	r3, #0
 8011540:	228c      	movs	r2, #140	@ 0x8c
 8011542:	18ba      	adds	r2, r7, r2
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	e025      	b.n	8011594 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8011548:	4b22      	ldr	r3, [pc, #136]	@ (80115d4 <calculateSPLQ31+0x598>)
 801154a:	208c      	movs	r0, #140	@ 0x8c
 801154c:	183a      	adds	r2, r7, r0
 801154e:	6812      	ldr	r2, [r2, #0]
 8011550:	0092      	lsls	r2, r2, #2
 8011552:	58d2      	ldr	r2, [r2, r3]
 8011554:	4b23      	ldr	r3, [pc, #140]	@ (80115e4 <calculateSPLQ31+0x5a8>)
 8011556:	1839      	adds	r1, r7, r0
 8011558:	6809      	ldr	r1, [r1, #0]
 801155a:	0089      	lsls	r1, r1, #2
 801155c:	58cb      	ldr	r3, [r1, r3]
 801155e:	18d1      	adds	r1, r2, r3
 8011560:	4b20      	ldr	r3, [pc, #128]	@ (80115e4 <calculateSPLQ31+0x5a8>)
 8011562:	183a      	adds	r2, r7, r0
 8011564:	6812      	ldr	r2, [r2, #0]
 8011566:	0092      	lsls	r2, r2, #2
 8011568:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 801156a:	4b1b      	ldr	r3, [pc, #108]	@ (80115d8 <calculateSPLQ31+0x59c>)
 801156c:	183a      	adds	r2, r7, r0
 801156e:	6812      	ldr	r2, [r2, #0]
 8011570:	0092      	lsls	r2, r2, #2
 8011572:	58d2      	ldr	r2, [r2, r3]
 8011574:	4b1c      	ldr	r3, [pc, #112]	@ (80115e8 <calculateSPLQ31+0x5ac>)
 8011576:	1839      	adds	r1, r7, r0
 8011578:	6809      	ldr	r1, [r1, #0]
 801157a:	0089      	lsls	r1, r1, #2
 801157c:	58cb      	ldr	r3, [r1, r3]
 801157e:	18d1      	adds	r1, r2, r3
 8011580:	4b19      	ldr	r3, [pc, #100]	@ (80115e8 <calculateSPLQ31+0x5ac>)
 8011582:	183a      	adds	r2, r7, r0
 8011584:	6812      	ldr	r2, [r2, #0]
 8011586:	0092      	lsls	r2, r2, #2
 8011588:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801158a:	183b      	adds	r3, r7, r0
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	3301      	adds	r3, #1
 8011590:	183a      	adds	r2, r7, r0
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	238c      	movs	r3, #140	@ 0x8c
 8011596:	18fb      	adds	r3, r7, r3
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b05      	cmp	r3, #5
 801159c:	d9d4      	bls.n	8011548 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 801159e:	4b13      	ldr	r3, [pc, #76]	@ (80115ec <calculateSPLQ31+0x5b0>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	1c5a      	adds	r2, r3, #1
 80115a4:	4b11      	ldr	r3, [pc, #68]	@ (80115ec <calculateSPLQ31+0x5b0>)
 80115a6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80115a8:	4b10      	ldr	r3, [pc, #64]	@ (80115ec <calculateSPLQ31+0x5b0>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b0f      	cmp	r3, #15
 80115ae:	d905      	bls.n	80115bc <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80115b0:	4b0f      	ldr	r3, [pc, #60]	@ (80115f0 <calculateSPLQ31+0x5b4>)
 80115b2:	2201      	movs	r2, #1
 80115b4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80115b6:	4b0f      	ldr	r3, [pc, #60]	@ (80115f4 <calculateSPLQ31+0x5b8>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
    }
}
 80115bc:	46c0      	nop			@ (mov r8, r8)
 80115be:	46bd      	mov	sp, r7
 80115c0:	b02f      	add	sp, #188	@ 0xbc
 80115c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c4:	200000d0 	.word	0x200000d0
 80115c8:	200000d4 	.word	0x200000d4
 80115cc:	20000fc0 	.word	0x20000fc0
 80115d0:	20000fbc 	.word	0x20000fbc
 80115d4:	20000fc4 	.word	0x20000fc4
 80115d8:	20000fdc 	.word	0x20000fdc
 80115dc:	20001a04 	.word	0x20001a04
 80115e0:	20001a08 	.word	0x20001a08
 80115e4:	20001a0c 	.word	0x20001a0c
 80115e8:	20001a24 	.word	0x20001a24
 80115ec:	20001a3c 	.word	0x20001a3c
 80115f0:	20000fb1 	.word	0x20000fb1
 80115f4:	20000faf 	.word	0x20000faf

080115f8 <resetSPLstate>:

static void resetSPLstate(void)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 80115fe:	4b11      	ldr	r3, [pc, #68]	@ (8011644 <resetSPLstate+0x4c>)
 8011600:	2200      	movs	r2, #0
 8011602:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8011604:	4b10      	ldr	r3, [pc, #64]	@ (8011648 <resetSPLstate+0x50>)
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801160a:	4b10      	ldr	r3, [pc, #64]	@ (801164c <resetSPLstate+0x54>)
 801160c:	2200      	movs	r2, #0
 801160e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011610:	2300      	movs	r3, #0
 8011612:	607b      	str	r3, [r7, #4]
 8011614:	e00c      	b.n	8011630 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8011616:	4b0e      	ldr	r3, [pc, #56]	@ (8011650 <resetSPLstate+0x58>)
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	0092      	lsls	r2, r2, #2
 801161c:	2100      	movs	r1, #0
 801161e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8011620:	4b0c      	ldr	r3, [pc, #48]	@ (8011654 <resetSPLstate+0x5c>)
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	0092      	lsls	r2, r2, #2
 8011626:	2100      	movs	r1, #0
 8011628:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	3301      	adds	r3, #1
 801162e:	607b      	str	r3, [r7, #4]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b05      	cmp	r3, #5
 8011634:	d9ef      	bls.n	8011616 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8011636:	4b08      	ldr	r3, [pc, #32]	@ (8011658 <resetSPLstate+0x60>)
 8011638:	2200      	movs	r2, #0
 801163a:	701a      	strb	r2, [r3, #0]
}
 801163c:	46c0      	nop			@ (mov r8, r8)
 801163e:	46bd      	mov	sp, r7
 8011640:	b002      	add	sp, #8
 8011642:	bd80      	pop	{r7, pc}
 8011644:	20001a04 	.word	0x20001a04
 8011648:	20001a08 	.word	0x20001a08
 801164c:	20001a3c 	.word	0x20001a3c
 8011650:	20001a0c 	.word	0x20001a0c
 8011654:	20001a24 	.word	0x20001a24
 8011658:	20000fb1 	.word	0x20000fb1

0801165c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 801165c:	b5b0      	push	{r4, r5, r7, lr}
 801165e:	b090      	sub	sp, #64	@ 0x40
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	0019      	movs	r1, r3
 8011668:	1dfb      	adds	r3, r7, #7
 801166a:	701a      	strb	r2, [r3, #0]
 801166c:	1dbb      	adds	r3, r7, #6
 801166e:	1c0a      	adds	r2, r1, #0
 8011670:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8011672:	1dfb      	adds	r3, r7, #7
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d005      	beq.n	8011686 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801167a:	4b3b      	ldr	r3, [pc, #236]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 801167c:	2200      	movs	r2, #0
 801167e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011680:	4b3a      	ldr	r3, [pc, #232]	@ (801176c <getFilteredMaxAmplitudeQ31+0x110>)
 8011682:	2200      	movs	r2, #0
 8011684:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801168a:	2300      	movs	r3, #0
 801168c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 801168e:	2305      	movs	r3, #5
 8011690:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8011692:	2300      	movs	r3, #0
 8011694:	637b      	str	r3, [r7, #52]	@ 0x34
 8011696:	e040      	b.n	801171a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801169a:	009b      	lsls	r3, r3, #2
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	18d3      	adds	r3, r2, r3
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a4:	409a      	lsls	r2, r3
 80116a6:	0013      	movs	r3, r2
 80116a8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80116aa:	4b30      	ldr	r3, [pc, #192]	@ (801176c <getFilteredMaxAmplitudeQ31+0x110>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	425a      	negs	r2, r3
 80116b0:	4b2e      	ldr	r3, [pc, #184]	@ (801176c <getFilteredMaxAmplitudeQ31+0x110>)
 80116b2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80116b4:	2418      	movs	r4, #24
 80116b6:	193a      	adds	r2, r7, r4
 80116b8:	492c      	ldr	r1, [pc, #176]	@ (801176c <getFilteredMaxAmplitudeQ31+0x110>)
 80116ba:	231c      	movs	r3, #28
 80116bc:	18f8      	adds	r0, r7, r3
 80116be:	2301      	movs	r3, #1
 80116c0:	f012 fa60 	bl	8023b84 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 80116c4:	2514      	movs	r5, #20
 80116c6:	197a      	adds	r2, r7, r5
 80116c8:	1939      	adds	r1, r7, r4
 80116ca:	4829      	ldr	r0, [pc, #164]	@ (8011770 <getFilteredMaxAmplitudeQ31+0x114>)
 80116cc:	2301      	movs	r3, #1
 80116ce:	f012 fa27 	bl	8023b20 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 80116d2:	2410      	movs	r4, #16
 80116d4:	193a      	adds	r2, r7, r4
 80116d6:	4924      	ldr	r1, [pc, #144]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 80116d8:	4826      	ldr	r0, [pc, #152]	@ (8011774 <getFilteredMaxAmplitudeQ31+0x118>)
 80116da:	2301      	movs	r3, #1
 80116dc:	f012 fa20 	bl	8023b20 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 80116e0:	4a21      	ldr	r2, [pc, #132]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 80116e2:	1939      	adds	r1, r7, r4
 80116e4:	1978      	adds	r0, r7, r5
 80116e6:	2301      	movs	r3, #1
 80116e8:	f012 fa4c 	bl	8023b84 <arm_add_q31>

        lastData = fx;
 80116ec:	69fa      	ldr	r2, [r7, #28]
 80116ee:	4b1f      	ldr	r3, [pc, #124]	@ (801176c <getFilteredMaxAmplitudeQ31+0x110>)
 80116f0:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 80116f2:	4b1d      	ldr	r3, [pc, #116]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80116f8:	429a      	cmp	r2, r3
 80116fa:	da03      	bge.n	8011704 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 80116fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011702:	e007      	b.n	8011714 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8011704:	4b18      	ldr	r3, [pc, #96]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801170a:	429a      	cmp	r2, r3
 801170c:	dd02      	ble.n	8011714 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 801170e:	4b16      	ldr	r3, [pc, #88]	@ (8011768 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8011714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011716:	3301      	adds	r3, #1
 8011718:	637b      	str	r3, [r7, #52]	@ 0x34
 801171a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	429a      	cmp	r2, r3
 8011720:	d3ba      	bcc.n	8011698 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8011722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011724:	17da      	asrs	r2, r3, #31
 8011726:	189b      	adds	r3, r3, r2
 8011728:	4053      	eors	r3, r2
 801172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 801172c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801172e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8011730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011734:	4293      	cmp	r3, r2
 8011736:	d200      	bcs.n	801173a <getFilteredMaxAmplitudeQ31+0xde>
 8011738:	0013      	movs	r3, r2
 801173a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 801173c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011740:	40da      	lsrs	r2, r3
 8011742:	0013      	movs	r3, r2
 8011744:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8011746:	1dbb      	adds	r3, r7, #6
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d007      	beq.n	801175e <getFilteredMaxAmplitudeQ31+0x102>
 801174e:	4b0a      	ldr	r3, [pc, #40]	@ (8011778 <getFilteredMaxAmplitudeQ31+0x11c>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	6a3a      	ldr	r2, [r7, #32]
 8011754:	429a      	cmp	r2, r3
 8011756:	d902      	bls.n	801175e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8011758:	4b07      	ldr	r3, [pc, #28]	@ (8011778 <getFilteredMaxAmplitudeQ31+0x11c>)
 801175a:	6a3a      	ldr	r2, [r7, #32]
 801175c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 801175e:	6a3b      	ldr	r3, [r7, #32]
}
 8011760:	0018      	movs	r0, r3
 8011762:	46bd      	mov	sp, r7
 8011764:	b010      	add	sp, #64	@ 0x40
 8011766:	bdb0      	pop	{r4, r5, r7, pc}
 8011768:	20001e40 	.word	0x20001e40
 801176c:	20001e44 	.word	0x20001e44
 8011770:	0802dbfc 	.word	0x0802dbfc
 8011774:	0802dc00 	.word	0x0802dc00
 8011778:	20000fb8 	.word	0x20000fb8

0801177c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8011788:	4913      	ldr	r1, [pc, #76]	@ (80117d8 <floatToIntAndFrac2dp+0x5c>)
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f7ef fc58 	bl	8001040 <__aeabi_fmul>
 8011790:	1c03      	adds	r3, r0, #0
 8011792:	1c18      	adds	r0, r3, #0
 8011794:	f016 fef0 	bl	8028578 <roundf>
 8011798:	1c03      	adds	r3, r0, #0
 801179a:	1c18      	adds	r0, r3, #0
 801179c:	f7ee ff3e 	bl	800061c <__aeabi_f2uiz>
 80117a0:	0003      	movs	r3, r0
 80117a2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	2164      	movs	r1, #100	@ 0x64
 80117a8:	0018      	movs	r0, r3
 80117aa:	f7ee fcfb 	bl	80001a4 <__udivsi3>
 80117ae:	0003      	movs	r3, r0
 80117b0:	001a      	movs	r2, r3
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2164      	movs	r1, #100	@ 0x64
 80117c2:	434b      	muls	r3, r1
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	701a      	strb	r2, [r3, #0]
}
 80117ce:	46c0      	nop			@ (mov r8, r8)
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b006      	add	sp, #24
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	46c0      	nop			@ (mov r8, r8)
 80117d8:	42c80000 	.word	0x42c80000

080117dc <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b086      	sub	sp, #24
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 80117e8:	4914      	ldr	r1, [pc, #80]	@ (801183c <floatToIntAndFrac1dp+0x60>)
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f7ef fc28 	bl	8001040 <__aeabi_fmul>
 80117f0:	1c03      	adds	r3, r0, #0
 80117f2:	1c18      	adds	r0, r3, #0
 80117f4:	f016 fec0 	bl	8028578 <roundf>
 80117f8:	1c03      	adds	r3, r0, #0
 80117fa:	1c18      	adds	r0, r3, #0
 80117fc:	f7ee ff0e 	bl	800061c <__aeabi_f2uiz>
 8011800:	0003      	movs	r3, r0
 8011802:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	210a      	movs	r1, #10
 8011808:	0018      	movs	r0, r3
 801180a:	f7ee fccb 	bl	80001a4 <__udivsi3>
 801180e:	0003      	movs	r3, r0
 8011810:	001a      	movs	r2, r3
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	b2da      	uxtb	r2, r3
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	1c19      	adds	r1, r3, #0
 8011822:	0089      	lsls	r1, r1, #2
 8011824:	18cb      	adds	r3, r1, r3
 8011826:	18db      	adds	r3, r3, r3
 8011828:	b2db      	uxtb	r3, r3
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	b2da      	uxtb	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	701a      	strb	r2, [r3, #0]
}
 8011832:	46c0      	nop			@ (mov r8, r8)
 8011834:	46bd      	mov	sp, r7
 8011836:	b006      	add	sp, #24
 8011838:	bd80      	pop	{r7, pc}
 801183a:	46c0      	nop			@ (mov r8, r8)
 801183c:	41200000 	.word	0x41200000

08011840 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8011840:	b590      	push	{r4, r7, lr}
 8011842:	b087      	sub	sp, #28
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7ef ffea 	bl	8001828 <__aeabi_i2f>
 8011854:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011856:	6838      	ldr	r0, [r7, #0]
 8011858:	f7ef ffe6 	bl	8001828 <__aeabi_i2f>
 801185c:	1c03      	adds	r3, r0, #0
 801185e:	4918      	ldr	r1, [pc, #96]	@ (80118c0 <sumToIntAverage+0x80>)
 8011860:	1c18      	adds	r0, r3, #0
 8011862:	f7ef fa1f 	bl	8000ca4 <__aeabi_fdiv>
 8011866:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8011868:	1c19      	adds	r1, r3, #0
 801186a:	1c20      	adds	r0, r4, #0
 801186c:	f7ef f828 	bl	80008c0 <__aeabi_fadd>
 8011870:	1c03      	adds	r3, r0, #0
 8011872:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011876:	f7f0 f827 	bl	80018c8 <__aeabi_ui2f>
 801187a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 801187c:	1c19      	adds	r1, r3, #0
 801187e:	1c20      	adds	r0, r4, #0
 8011880:	f7ef fa10 	bl	8000ca4 <__aeabi_fdiv>
 8011884:	1c03      	adds	r3, r0, #0
 8011886:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8011888:	2300      	movs	r3, #0
 801188a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	2310      	movs	r3, #16
 8011890:	18f9      	adds	r1, r7, r3
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	1c18      	adds	r0, r3, #0
 8011896:	f7ff ffa1 	bl	80117dc <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	2bff      	cmp	r3, #255	@ 0xff
 801189e:	d906      	bls.n	80118ae <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	22ff      	movs	r2, #255	@ 0xff
 80118a4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	2209      	movs	r2, #9
 80118aa:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80118ac:	e003      	b.n	80118b6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	701a      	strb	r2, [r3, #0]
}
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	46bd      	mov	sp, r7
 80118ba:	b007      	add	sp, #28
 80118bc:	bd90      	pop	{r4, r7, pc}
 80118be:	46c0      	nop			@ (mov r8, r8)
 80118c0:	41200000 	.word	0x41200000

080118c4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2280      	movs	r2, #128	@ 0x80
 80118d6:	0612      	lsls	r2, r2, #24
 80118d8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4a18      	ldr	r2, [pc, #96]	@ (8011940 <findMinMax+0x7c>)
 80118de:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80118e0:	2300      	movs	r3, #0
 80118e2:	617b      	str	r3, [r7, #20]
 80118e4:	e022      	b.n	801192c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	18d3      	adds	r3, r2, r3
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	da06      	bge.n	8011906 <findMinMax+0x42>
        {
            min[0] = array[i];
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	18d3      	adds	r3, r2, r3
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	18d3      	adds	r3, r2, r3
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	429a      	cmp	r2, r3
 8011916:	dd06      	ble.n	8011926 <findMinMax+0x62>
        {
            max[0] = array[i];
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	18d3      	adds	r3, r2, r3
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	3301      	adds	r3, #1
 801192a:	617b      	str	r3, [r7, #20]
 801192c:	697a      	ldr	r2, [r7, #20]
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	429a      	cmp	r2, r3
 8011932:	d3d8      	bcc.n	80118e6 <findMinMax+0x22>
        }
    }
}
 8011934:	46c0      	nop			@ (mov r8, r8)
 8011936:	46c0      	nop			@ (mov r8, r8)
 8011938:	46bd      	mov	sp, r7
 801193a:	b006      	add	sp, #24
 801193c:	bd80      	pop	{r7, pc}
 801193e:	46c0      	nop			@ (mov r8, r8)
 8011940:	7fffffff 	.word	0x7fffffff

08011944 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d302      	bcc.n	8011960 <getPo2factor+0x1c>
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d107      	bne.n	8011970 <getPo2factor+0x2c>
    {
        return 0;
 8011960:	2300      	movs	r3, #0
 8011962:	e00d      	b.n	8011980 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	085b      	lsrs	r3, r3, #1
 8011968:	607b      	str	r3, [r7, #4]
        bitShift++;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	3301      	adds	r3, #1
 801196e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8011970:	687a      	ldr	r2, [r7, #4]
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	429a      	cmp	r2, r3
 8011976:	d2f5      	bcs.n	8011964 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	3b01      	subs	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 801197e:	68fb      	ldr	r3, [r7, #12]
}
 8011980:	0018      	movs	r0, r3
 8011982:	46bd      	mov	sp, r7
 8011984:	b004      	add	sp, #16
 8011986:	bd80      	pop	{r7, pc}

08011988 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
 8011994:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8011996:	68f8      	ldr	r0, [r7, #12]
 8011998:	f7ef ff96 	bl	80018c8 <__aeabi_ui2f>
 801199c:	1c03      	adds	r3, r0, #0
 801199e:	1c19      	adds	r1, r3, #0
 80119a0:	68b8      	ldr	r0, [r7, #8]
 80119a2:	f7ef fb4d 	bl	8001040 <__aeabi_fmul>
 80119a6:	1c03      	adds	r3, r0, #0
 80119a8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80119ae:	683a      	ldr	r2, [r7, #0]
 80119b0:	2310      	movs	r3, #16
 80119b2:	18f9      	adds	r1, r7, r3
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	1c18      	adds	r0, r3, #0
 80119b8:	f7ff fee0 	bl	801177c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	b29a      	uxth	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	801a      	strh	r2, [r3, #0]
}
 80119c4:	46c0      	nop			@ (mov r8, r8)
 80119c6:	46bd      	mov	sp, r7
 80119c8:	b006      	add	sp, #24
 80119ca:	bd80      	pop	{r7, pc}

080119cc <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60b8      	str	r0, [r7, #8]
 80119d4:	60f9      	str	r1, [r7, #12]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	6a3a      	ldr	r2, [r7, #32]
 80119de:	68b8      	ldr	r0, [r7, #8]
 80119e0:	68f9      	ldr	r1, [r7, #12]
 80119e2:	f7f9 ff23 	bl	800b82c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	18d2      	adds	r2, r2, r3
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	18d2      	adds	r2, r2, r3
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 80119f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	18d2      	adds	r2, r2, r3
 80119fe:	69fb      	ldr	r3, [r7, #28]
 8011a00:	18d2      	adds	r2, r2, r3
 8011a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a04:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8011a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a08:	6a3b      	ldr	r3, [r7, #32]
 8011a0a:	0011      	movs	r1, r2
 8011a0c:	0018      	movs	r0, r3
 8011a0e:	f7f9 ff9d 	bl	800b94c <correctIntFracNumber>
}
 8011a12:	46c0      	nop			@ (mov r8, r8)
 8011a14:	46bd      	mov	sp, r7
 8011a16:	b004      	add	sp, #16
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b086      	sub	sp, #24
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	60f8      	str	r0, [r7, #12]
 8011a22:	60b9      	str	r1, [r7, #8]
 8011a24:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	613b      	str	r3, [r7, #16]
 8011a2e:	e019      	b.n	8011a64 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	18d3      	adds	r3, r2, r3
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	3201      	adds	r2, #1
 8011a40:	0052      	lsls	r2, r2, #1
 8011a42:	68f9      	ldr	r1, [r7, #12]
 8011a44:	188a      	adds	r2, r1, r2
 8011a46:	8812      	ldrh	r2, [r2, #0]
 8011a48:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011a4a:	0019      	movs	r1, r3
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011a54:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011a56:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	3304      	adds	r3, #4
 8011a62:	613b      	str	r3, [r7, #16]
 8011a64:	693a      	ldr	r2, [r7, #16]
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d3e1      	bcc.n	8011a30 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8011a6c:	46c0      	nop			@ (mov r8, r8)
 8011a6e:	46c0      	nop			@ (mov r8, r8)
 8011a70:	46bd      	mov	sp, r7
 8011a72:	b006      	add	sp, #24
 8011a74:	bd80      	pop	{r7, pc}
	...

08011a78 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	af00      	add	r7, sp, #0
  init = false;
 8011a7c:	4b02      	ldr	r3, [pc, #8]	@ (8011a88 <InitDone+0x10>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
}
 8011a82:	46c0      	nop			@ (mov r8, r8)
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	200000dc 	.word	0x200000dc

08011a8c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8011a92:	f7f7 fb29 	bl	80090e8 <ReadBatteryVoltage>
 8011a96:	1c02      	adds	r2, r0, #0
 8011a98:	4b25      	ldr	r3, [pc, #148]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011a9a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011a9c:	4b24      	ldr	r3, [pc, #144]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4924      	ldr	r1, [pc, #144]	@ (8011b34 <batteryChargeCheck+0xa8>)
 8011aa2:	1c18      	adds	r0, r3, #0
 8011aa4:	f7ee fd44 	bl	8000530 <__aeabi_fcmplt>
 8011aa8:	1e03      	subs	r3, r0, #0
 8011aaa:	d002      	beq.n	8011ab2 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011aac:	1dfb      	adds	r3, r7, #7
 8011aae:	2200      	movs	r2, #0
 8011ab0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 8011ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	491f      	ldr	r1, [pc, #124]	@ (8011b34 <batteryChargeCheck+0xa8>)
 8011ab8:	1c18      	adds	r0, r3, #0
 8011aba:	f7ee fd57 	bl	800056c <__aeabi_fcmpge>
 8011abe:	1e03      	subs	r3, r0, #0
 8011ac0:	d00d      	beq.n	8011ade <batteryChargeCheck+0x52>
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	1c18      	adds	r0, r3, #0
 8011ac8:	f7f1 fee4 	bl	8003894 <__aeabi_f2d>
 8011acc:	4a1a      	ldr	r2, [pc, #104]	@ (8011b38 <batteryChargeCheck+0xac>)
 8011ace:	4b1b      	ldr	r3, [pc, #108]	@ (8011b3c <batteryChargeCheck+0xb0>)
 8011ad0:	f7ee fcf4 	bl	80004bc <__aeabi_dcmplt>
 8011ad4:	1e03      	subs	r3, r0, #0
 8011ad6:	d002      	beq.n	8011ade <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011ad8:	1dfb      	adds	r3, r7, #7
 8011ada:	2201      	movs	r2, #1
 8011adc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011ade:	4b14      	ldr	r3, [pc, #80]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	1c18      	adds	r0, r3, #0
 8011ae4:	f7f1 fed6 	bl	8003894 <__aeabi_f2d>
 8011ae8:	4a13      	ldr	r2, [pc, #76]	@ (8011b38 <batteryChargeCheck+0xac>)
 8011aea:	4b14      	ldr	r3, [pc, #80]	@ (8011b3c <batteryChargeCheck+0xb0>)
 8011aec:	f7ee fd04 	bl	80004f8 <__aeabi_dcmpge>
 8011af0:	1e03      	subs	r3, r0, #0
 8011af2:	d00b      	beq.n	8011b0c <batteryChargeCheck+0x80>
 8011af4:	4b0e      	ldr	r3, [pc, #56]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2181      	movs	r1, #129	@ 0x81
 8011afa:	05c9      	lsls	r1, r1, #23
 8011afc:	1c18      	adds	r0, r3, #0
 8011afe:	f7ee fd17 	bl	8000530 <__aeabi_fcmplt>
 8011b02:	1e03      	subs	r3, r0, #0
 8011b04:	d002      	beq.n	8011b0c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8011b06:	1dfb      	adds	r3, r7, #7
 8011b08:	2202      	movs	r2, #2
 8011b0a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011b0c:	4b08      	ldr	r3, [pc, #32]	@ (8011b30 <batteryChargeCheck+0xa4>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2181      	movs	r1, #129	@ 0x81
 8011b12:	05c9      	lsls	r1, r1, #23
 8011b14:	1c18      	adds	r0, r3, #0
 8011b16:	f7ee fd29 	bl	800056c <__aeabi_fcmpge>
 8011b1a:	1e03      	subs	r3, r0, #0
 8011b1c:	d002      	beq.n	8011b24 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011b1e:	1dfb      	adds	r3, r7, #7
 8011b20:	2203      	movs	r2, #3
 8011b22:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8011b24:	1dfb      	adds	r3, r7, #7
 8011b26:	781b      	ldrb	r3, [r3, #0]
}
 8011b28:	0018      	movs	r0, r3
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	b002      	add	sp, #8
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	20001e58 	.word	0x20001e58
 8011b34:	40600000 	.word	0x40600000
 8011b38:	9999999a 	.word	0x9999999a
 8011b3c:	400d9999 	.word	0x400d9999

08011b40 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011b40:	b5b0      	push	{r4, r5, r7, lr}
 8011b42:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011b44:	f7f7 fb32 	bl	80091ac <ReadSolarVoltage>
 8011b48:	0003      	movs	r3, r0
 8011b4a:	001a      	movs	r2, r3
 8011b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b4e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011b50:	4b19      	ldr	r3, [pc, #100]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	4a19      	ldr	r2, [pc, #100]	@ (8011bbc <Calculate_LED_ON+0x7c>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d802      	bhi.n	8011b60 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8011b5a:	4b17      	ldr	r3, [pc, #92]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b5c:	4a18      	ldr	r2, [pc, #96]	@ (8011bc0 <Calculate_LED_ON+0x80>)
 8011b5e:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011b60:	4b15      	ldr	r3, [pc, #84]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	4a17      	ldr	r2, [pc, #92]	@ (8011bc4 <Calculate_LED_ON+0x84>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d902      	bls.n	8011b70 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8011b6a:	4b13      	ldr	r3, [pc, #76]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b6c:	4a15      	ldr	r2, [pc, #84]	@ (8011bc4 <Calculate_LED_ON+0x84>)
 8011b6e:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011b70:	4b11      	ldr	r3, [pc, #68]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b72:	881b      	ldrh	r3, [r3, #0]
 8011b74:	0018      	movs	r0, r3
 8011b76:	f7f1 fe3b 	bl	80037f0 <__aeabi_i2d>
 8011b7a:	0004      	movs	r4, r0
 8011b7c:	000d      	movs	r5, r1
 8011b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb8 <Calculate_LED_ON+0x78>)
 8011b80:	881b      	ldrh	r3, [r3, #0]
 8011b82:	001a      	movs	r2, r3
 8011b84:	4b10      	ldr	r3, [pc, #64]	@ (8011bc8 <Calculate_LED_ON+0x88>)
 8011b86:	1a9b      	subs	r3, r3, r2
 8011b88:	0018      	movs	r0, r3
 8011b8a:	f7f1 fe31 	bl	80037f0 <__aeabi_i2d>
 8011b8e:	2200      	movs	r2, #0
 8011b90:	4b0e      	ldr	r3, [pc, #56]	@ (8011bcc <Calculate_LED_ON+0x8c>)
 8011b92:	f7f0 fedf 	bl	8002954 <__aeabi_dmul>
 8011b96:	0002      	movs	r2, r0
 8011b98:	000b      	movs	r3, r1
 8011b9a:	0020      	movs	r0, r4
 8011b9c:	0029      	movs	r1, r5
 8011b9e:	f7ef fed9 	bl	8001954 <__aeabi_dadd>
 8011ba2:	0002      	movs	r2, r0
 8011ba4:	000b      	movs	r3, r1
 8011ba6:	0010      	movs	r0, r2
 8011ba8:	0019      	movs	r1, r3
 8011baa:	f7ee fd4f 	bl	800064c <__aeabi_d2uiz>
 8011bae:	0003      	movs	r3, r0
 8011bb0:	b29b      	uxth	r3, r3
}
 8011bb2:	0018      	movs	r0, r3
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8011bb8:	20001e5c 	.word	0x20001e5c
 8011bbc:	00000b53 	.word	0x00000b53
 8011bc0:	00000b54 	.word	0x00000b54
 8011bc4:	0000125c 	.word	0x0000125c
 8011bc8:	00000dee 	.word	0x00000dee
 8011bcc:	3ff80000 	.word	0x3ff80000

08011bd0 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011bd0:	b590      	push	{r4, r7, lr}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	0004      	movs	r4, r0
 8011bd8:	0008      	movs	r0, r1
 8011bda:	0011      	movs	r1, r2
 8011bdc:	1dbb      	adds	r3, r7, #6
 8011bde:	1c22      	adds	r2, r4, #0
 8011be0:	801a      	strh	r2, [r3, #0]
 8011be2:	1d3b      	adds	r3, r7, #4
 8011be4:	1c02      	adds	r2, r0, #0
 8011be6:	801a      	strh	r2, [r3, #0]
 8011be8:	1cbb      	adds	r3, r7, #2
 8011bea:	1c0a      	adds	r2, r1, #0
 8011bec:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011bee:	4b0f      	ldr	r3, [pc, #60]	@ (8011c2c <SetStatusLED+0x5c>)
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d107      	bne.n	8011c06 <SetStatusLED+0x36>
 8011bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8011c30 <SetStatusLED+0x60>)
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d103      	bne.n	8011c06 <SetStatusLED+0x36>
 8011bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8011c34 <SetStatusLED+0x64>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00e      	beq.n	8011c24 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8011c06:	2380      	movs	r3, #128	@ 0x80
 8011c08:	05db      	lsls	r3, r3, #23
 8011c0a:	1dba      	adds	r2, r7, #6
 8011c0c:	8812      	ldrh	r2, [r2, #0]
 8011c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011c10:	2380      	movs	r3, #128	@ 0x80
 8011c12:	05db      	lsls	r3, r3, #23
 8011c14:	1d3a      	adds	r2, r7, #4
 8011c16:	8812      	ldrh	r2, [r2, #0]
 8011c18:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011c1a:	2380      	movs	r3, #128	@ 0x80
 8011c1c:	05db      	lsls	r3, r3, #23
 8011c1e:	1cba      	adds	r2, r7, #2
 8011c20:	8812      	ldrh	r2, [r2, #0]
 8011c22:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011c24:	46c0      	nop			@ (mov r8, r8)
 8011c26:	46bd      	mov	sp, r7
 8011c28:	b003      	add	sp, #12
 8011c2a:	bd90      	pop	{r4, r7, pc}
 8011c2c:	20001e49 	.word	0x20001e49
 8011c30:	200000dc 	.word	0x200000dc
 8011c34:	20001e4a 	.word	0x20001e4a

08011c38 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011c38:	b590      	push	{r4, r7, lr}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	0004      	movs	r4, r0
 8011c40:	0008      	movs	r0, r1
 8011c42:	0011      	movs	r1, r2
 8011c44:	1dfb      	adds	r3, r7, #7
 8011c46:	1c22      	adds	r2, r4, #0
 8011c48:	701a      	strb	r2, [r3, #0]
 8011c4a:	1dbb      	adds	r3, r7, #6
 8011c4c:	1c02      	adds	r2, r0, #0
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	1d7b      	adds	r3, r7, #5
 8011c52:	1c0a      	adds	r2, r1, #0
 8011c54:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011c56:	4b19      	ldr	r3, [pc, #100]	@ (8011cbc <SetDBLED+0x84>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d107      	bne.n	8011c6e <SetDBLED+0x36>
 8011c5e:	4b18      	ldr	r3, [pc, #96]	@ (8011cc0 <SetDBLED+0x88>)
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d103      	bne.n	8011c6e <SetDBLED+0x36>
 8011c66:	4b17      	ldr	r3, [pc, #92]	@ (8011cc4 <SetDBLED+0x8c>)
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d022      	beq.n	8011cb4 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8011c6e:	1dfb      	adds	r3, r7, #7
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	2201      	movs	r2, #1
 8011c74:	4053      	eors	r3, r2
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	001a      	movs	r2, r3
 8011c7a:	4b13      	ldr	r3, [pc, #76]	@ (8011cc8 <SetDBLED+0x90>)
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	0018      	movs	r0, r3
 8011c80:	f003 fa59 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011c84:	1dbb      	adds	r3, r7, #6
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	4053      	eors	r3, r2
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	001a      	movs	r2, r3
 8011c90:	2380      	movs	r3, #128	@ 0x80
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	480c      	ldr	r0, [pc, #48]	@ (8011cc8 <SetDBLED+0x90>)
 8011c96:	0019      	movs	r1, r3
 8011c98:	f003 fa4d 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011c9c:	1d7b      	adds	r3, r7, #5
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	4053      	eors	r3, r2
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	001a      	movs	r2, r3
 8011ca8:	2380      	movs	r3, #128	@ 0x80
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4806      	ldr	r0, [pc, #24]	@ (8011cc8 <SetDBLED+0x90>)
 8011cae:	0019      	movs	r1, r3
 8011cb0:	f003 fa41 	bl	8015136 <HAL_GPIO_WritePin>
  }
}
 8011cb4:	46c0      	nop			@ (mov r8, r8)
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	b003      	add	sp, #12
 8011cba:	bd90      	pop	{r4, r7, pc}
 8011cbc:	20001e49 	.word	0x20001e49
 8011cc0:	200000dc 	.word	0x200000dc
 8011cc4:	20001e4a 	.word	0x20001e4a
 8011cc8:	50000400 	.word	0x50000400

08011ccc <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	0004      	movs	r4, r0
 8011cd4:	0008      	movs	r0, r1
 8011cd6:	0011      	movs	r1, r2
 8011cd8:	1dbb      	adds	r3, r7, #6
 8011cda:	1c22      	adds	r2, r4, #0
 8011cdc:	801a      	strh	r2, [r3, #0]
 8011cde:	1d3b      	adds	r3, r7, #4
 8011ce0:	1c02      	adds	r2, r0, #0
 8011ce2:	801a      	strh	r2, [r3, #0]
 8011ce4:	1cbb      	adds	r3, r7, #2
 8011ce6:	1c0a      	adds	r2, r1, #0
 8011ce8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011cea:	4b0e      	ldr	r3, [pc, #56]	@ (8011d24 <SetVocLED+0x58>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d107      	bne.n	8011d02 <SetVocLED+0x36>
 8011cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8011d28 <SetVocLED+0x5c>)
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d103      	bne.n	8011d02 <SetVocLED+0x36>
 8011cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8011d2c <SetVocLED+0x60>)
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00b      	beq.n	8011d1a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8011d02:	4b0b      	ldr	r3, [pc, #44]	@ (8011d30 <SetVocLED+0x64>)
 8011d04:	1dba      	adds	r2, r7, #6
 8011d06:	8812      	ldrh	r2, [r2, #0]
 8011d08:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011d0a:	4b09      	ldr	r3, [pc, #36]	@ (8011d30 <SetVocLED+0x64>)
 8011d0c:	1d3a      	adds	r2, r7, #4
 8011d0e:	8812      	ldrh	r2, [r2, #0]
 8011d10:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8011d12:	4b07      	ldr	r3, [pc, #28]	@ (8011d30 <SetVocLED+0x64>)
 8011d14:	1cba      	adds	r2, r7, #2
 8011d16:	8812      	ldrh	r2, [r2, #0]
 8011d18:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011d1a:	46c0      	nop			@ (mov r8, r8)
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	b003      	add	sp, #12
 8011d20:	bd90      	pop	{r4, r7, pc}
 8011d22:	46c0      	nop			@ (mov r8, r8)
 8011d24:	20001e49 	.word	0x20001e49
 8011d28:	200000dc 	.word	0x200000dc
 8011d2c:	20001e4a 	.word	0x20001e4a
 8011d30:	40000400 	.word	0x40000400

08011d34 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d38:	4b08      	ldr	r3, [pc, #32]	@ (8011d5c <SetMeasurementIndicator+0x28>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d103      	bne.n	8011d48 <SetMeasurementIndicator+0x14>
 8011d40:	4b07      	ldr	r3, [pc, #28]	@ (8011d60 <SetMeasurementIndicator+0x2c>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011d48:	f7ff fefa 	bl	8011b40 <Calculate_LED_ON>
 8011d4c:	0003      	movs	r3, r0
 8011d4e:	001a      	movs	r2, r3
 8011d50:	2380      	movs	r3, #128	@ 0x80
 8011d52:	05db      	lsls	r3, r3, #23
 8011d54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011d56:	46c0      	nop			@ (mov r8, r8)
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	20001e49 	.word	0x20001e49
 8011d60:	20001e4a 	.word	0x20001e4a

08011d64 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011d64:	b580      	push	{r7, lr}
 8011d66:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d68:	4b07      	ldr	r3, [pc, #28]	@ (8011d88 <ResetMeasurementIndicator+0x24>)
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d103      	bne.n	8011d78 <ResetMeasurementIndicator+0x14>
 8011d70:	4b06      	ldr	r3, [pc, #24]	@ (8011d8c <ResetMeasurementIndicator+0x28>)
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d004      	beq.n	8011d82 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8011d78:	2380      	movs	r3, #128	@ 0x80
 8011d7a:	05db      	lsls	r3, r3, #23
 8011d7c:	22fa      	movs	r2, #250	@ 0xfa
 8011d7e:	0112      	lsls	r2, r2, #4
 8011d80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011d82:	46c0      	nop			@ (mov r8, r8)
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20001e49 	.word	0x20001e49
 8011d8c:	20001e4a 	.word	0x20001e4a

08011d90 <SetMICIndicator>:
void SetMICIndicator(){
 8011d90:	b580      	push	{r7, lr}
 8011d92:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d94:	4b19      	ldr	r3, [pc, #100]	@ (8011dfc <SetMICIndicator+0x6c>)
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d103      	bne.n	8011da4 <SetMICIndicator+0x14>
 8011d9c:	4b18      	ldr	r3, [pc, #96]	@ (8011e00 <SetMICIndicator+0x70>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d007      	beq.n	8011db4 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011da4:	f7ff fecc 	bl	8011b40 <Calculate_LED_ON>
 8011da8:	0003      	movs	r3, r0
 8011daa:	001a      	movs	r2, r3
 8011dac:	2380      	movs	r3, #128	@ 0x80
 8011dae:	05db      	lsls	r3, r3, #23
 8011db0:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8011db2:	e01f      	b.n	8011df4 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8011db4:	4b13      	ldr	r3, [pc, #76]	@ (8011e04 <SetMICIndicator+0x74>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	1c18      	adds	r0, r3, #0
 8011dba:	f7f1 fd6b 	bl	8003894 <__aeabi_f2d>
 8011dbe:	4a12      	ldr	r2, [pc, #72]	@ (8011e08 <SetMICIndicator+0x78>)
 8011dc0:	4b12      	ldr	r3, [pc, #72]	@ (8011e0c <SetMICIndicator+0x7c>)
 8011dc2:	f7ee fb8f 	bl	80004e4 <__aeabi_dcmpgt>
 8011dc6:	1e03      	subs	r3, r0, #0
 8011dc8:	d00a      	beq.n	8011de0 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011dca:	f7ff feb9 	bl	8011b40 <Calculate_LED_ON>
 8011dce:	0003      	movs	r3, r0
 8011dd0:	001a      	movs	r2, r3
 8011dd2:	2380      	movs	r3, #128	@ 0x80
 8011dd4:	05db      	lsls	r3, r3, #23
 8011dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8011e10 <SetMICIndicator+0x80>)
 8011dda:	2202      	movs	r2, #2
 8011ddc:	701a      	strb	r2, [r3, #0]
}
 8011dde:	e009      	b.n	8011df4 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011de0:	f7ff feae 	bl	8011b40 <Calculate_LED_ON>
 8011de4:	0003      	movs	r3, r0
 8011de6:	001a      	movs	r2, r3
 8011de8:	2380      	movs	r3, #128	@ 0x80
 8011dea:	05db      	lsls	r3, r3, #23
 8011dec:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011dee:	4b08      	ldr	r3, [pc, #32]	@ (8011e10 <SetMICIndicator+0x80>)
 8011df0:	2201      	movs	r2, #1
 8011df2:	701a      	strb	r2, [r3, #0]
}
 8011df4:	46c0      	nop			@ (mov r8, r8)
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	46c0      	nop			@ (mov r8, r8)
 8011dfc:	20001e49 	.word	0x20001e49
 8011e00:	20001e4a 	.word	0x20001e4a
 8011e04:	20001e58 	.word	0x20001e58
 8011e08:	9999999a 	.word	0x9999999a
 8011e0c:	400d9999 	.word	0x400d9999
 8011e10:	20001e4c 	.word	0x20001e4c

08011e14 <ResetMICIndicator>:
void ResetMICIndicator(){
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e18:	4b0f      	ldr	r3, [pc, #60]	@ (8011e58 <ResetMICIndicator+0x44>)
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d103      	bne.n	8011e28 <ResetMICIndicator+0x14>
 8011e20:	4b0e      	ldr	r3, [pc, #56]	@ (8011e5c <ResetMICIndicator+0x48>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d005      	beq.n	8011e34 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011e28:	2380      	movs	r3, #128	@ 0x80
 8011e2a:	05db      	lsls	r3, r3, #23
 8011e2c:	22fa      	movs	r2, #250	@ 0xfa
 8011e2e:	0112      	lsls	r2, r2, #4
 8011e30:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8011e32:	e00e      	b.n	8011e52 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8011e34:	4b0a      	ldr	r3, [pc, #40]	@ (8011e60 <ResetMICIndicator+0x4c>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d105      	bne.n	8011e48 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8011e3c:	2380      	movs	r3, #128	@ 0x80
 8011e3e:	05db      	lsls	r3, r3, #23
 8011e40:	22fa      	movs	r2, #250	@ 0xfa
 8011e42:	0112      	lsls	r2, r2, #4
 8011e44:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011e46:	e004      	b.n	8011e52 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8011e48:	2380      	movs	r3, #128	@ 0x80
 8011e4a:	05db      	lsls	r3, r3, #23
 8011e4c:	22fa      	movs	r2, #250	@ 0xfa
 8011e4e:	0112      	lsls	r2, r2, #4
 8011e50:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011e52:	46c0      	nop			@ (mov r8, r8)
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20001e49 	.word	0x20001e49
 8011e5c:	20001e4a 	.word	0x20001e4a
 8011e60:	20001e4c 	.word	0x20001e4c

08011e64 <SetESPIndicator>:
void SetESPIndicator(){
 8011e64:	b580      	push	{r7, lr}
 8011e66:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e68:	4b08      	ldr	r3, [pc, #32]	@ (8011e8c <SetESPIndicator+0x28>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d103      	bne.n	8011e78 <SetESPIndicator+0x14>
 8011e70:	4b07      	ldr	r3, [pc, #28]	@ (8011e90 <SetESPIndicator+0x2c>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d006      	beq.n	8011e86 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011e78:	f7ff fe62 	bl	8011b40 <Calculate_LED_ON>
 8011e7c:	0003      	movs	r3, r0
 8011e7e:	001a      	movs	r2, r3
 8011e80:	2380      	movs	r3, #128	@ 0x80
 8011e82:	05db      	lsls	r3, r3, #23
 8011e84:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011e86:	46c0      	nop			@ (mov r8, r8)
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	20001e49 	.word	0x20001e49
 8011e90:	20001e4a 	.word	0x20001e4a

08011e94 <ResetESPIndicator>:
void ResetESPIndicator(){
 8011e94:	b580      	push	{r7, lr}
 8011e96:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e98:	4b07      	ldr	r3, [pc, #28]	@ (8011eb8 <ResetESPIndicator+0x24>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d103      	bne.n	8011ea8 <ResetESPIndicator+0x14>
 8011ea0:	4b06      	ldr	r3, [pc, #24]	@ (8011ebc <ResetESPIndicator+0x28>)
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011ea8:	2380      	movs	r3, #128	@ 0x80
 8011eaa:	05db      	lsls	r3, r3, #23
 8011eac:	22fa      	movs	r2, #250	@ 0xfa
 8011eae:	0112      	lsls	r2, r2, #4
 8011eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011eb2:	46c0      	nop			@ (mov r8, r8)
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	20001e49 	.word	0x20001e49
 8011ebc:	20001e4a 	.word	0x20001e4a

08011ec0 <SetPMIndicator>:

void SetPMIndicator() {
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8011f04 <SetPMIndicator+0x44>)
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d103      	bne.n	8011ed4 <SetPMIndicator+0x14>
 8011ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8011f08 <SetPMIndicator+0x48>)
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d014      	beq.n	8011efe <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011ed4:	f7ff fe34 	bl	8011b40 <Calculate_LED_ON>
 8011ed8:	0003      	movs	r3, r0
 8011eda:	001a      	movs	r2, r3
 8011edc:	2380      	movs	r3, #128	@ 0x80
 8011ede:	05db      	lsls	r3, r3, #23
 8011ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011ee2:	f7ff fe2d 	bl	8011b40 <Calculate_LED_ON>
 8011ee6:	0003      	movs	r3, r0
 8011ee8:	001a      	movs	r2, r3
 8011eea:	2380      	movs	r3, #128	@ 0x80
 8011eec:	05db      	lsls	r3, r3, #23
 8011eee:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011ef0:	f7ff fe26 	bl	8011b40 <Calculate_LED_ON>
 8011ef4:	0003      	movs	r3, r0
 8011ef6:	001a      	movs	r2, r3
 8011ef8:	2380      	movs	r3, #128	@ 0x80
 8011efa:	05db      	lsls	r3, r3, #23
 8011efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011efe:	46c0      	nop			@ (mov r8, r8)
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	20001e49 	.word	0x20001e49
 8011f08:	20001e4a 	.word	0x20001e4a

08011f0c <ResetPMIndicator>:

void ResetPMIndicator() {
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011f10:	4b0c      	ldr	r3, [pc, #48]	@ (8011f44 <ResetPMIndicator+0x38>)
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d103      	bne.n	8011f20 <ResetPMIndicator+0x14>
 8011f18:	4b0b      	ldr	r3, [pc, #44]	@ (8011f48 <ResetPMIndicator+0x3c>)
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00e      	beq.n	8011f3e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8011f20:	2380      	movs	r3, #128	@ 0x80
 8011f22:	05db      	lsls	r3, r3, #23
 8011f24:	22fa      	movs	r2, #250	@ 0xfa
 8011f26:	0112      	lsls	r2, r2, #4
 8011f28:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8011f2a:	2380      	movs	r3, #128	@ 0x80
 8011f2c:	05db      	lsls	r3, r3, #23
 8011f2e:	22fa      	movs	r2, #250	@ 0xfa
 8011f30:	0112      	lsls	r2, r2, #4
 8011f32:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011f34:	2380      	movs	r3, #128	@ 0x80
 8011f36:	05db      	lsls	r3, r3, #23
 8011f38:	22fa      	movs	r2, #250	@ 0xfa
 8011f3a:	0112      	lsls	r2, r2, #4
 8011f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011f3e:	46c0      	nop			@ (mov r8, r8)
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	20001e49 	.word	0x20001e49
 8011f48:	20001e4a 	.word	0x20001e4a

08011f4c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8011f50:	23fa      	movs	r3, #250	@ 0xfa
 8011f52:	011a      	lsls	r2, r3, #4
 8011f54:	23fa      	movs	r3, #250	@ 0xfa
 8011f56:	0119      	lsls	r1, r3, #4
 8011f58:	23fa      	movs	r3, #250	@ 0xfa
 8011f5a:	011b      	lsls	r3, r3, #4
 8011f5c:	0018      	movs	r0, r3
 8011f5e:	f7ff fe37 	bl	8011bd0 <SetStatusLED>
  SetDBLED(false,false,false);
 8011f62:	2200      	movs	r2, #0
 8011f64:	2100      	movs	r1, #0
 8011f66:	2000      	movs	r0, #0
 8011f68:	f7ff fe66 	bl	8011c38 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8011f6c:	23fa      	movs	r3, #250	@ 0xfa
 8011f6e:	011a      	lsls	r2, r3, #4
 8011f70:	23fa      	movs	r3, #250	@ 0xfa
 8011f72:	0119      	lsls	r1, r3, #4
 8011f74:	23fa      	movs	r3, #250	@ 0xfa
 8011f76:	011b      	lsls	r3, r3, #4
 8011f78:	0018      	movs	r0, r3
 8011f7a:	f7ff fea7 	bl	8011ccc <SetVocLED>
return;
 8011f7e:	46c0      	nop			@ (mov r8, r8)
}
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <SetAllREDLED>:

void SetAllREDLED() {
 8011f84:	b580      	push	{r7, lr}
 8011f86:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8011f88:	2380      	movs	r3, #128	@ 0x80
 8011f8a:	05db      	lsls	r3, r3, #23
 8011f8c:	4a19      	ldr	r2, [pc, #100]	@ (8011ff4 <SetAllREDLED+0x70>)
 8011f8e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8011f90:	2380      	movs	r3, #128	@ 0x80
 8011f92:	05db      	lsls	r3, r3, #23
 8011f94:	22fa      	movs	r2, #250	@ 0xfa
 8011f96:	0112      	lsls	r2, r2, #4
 8011f98:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011f9a:	2380      	movs	r3, #128	@ 0x80
 8011f9c:	05db      	lsls	r3, r3, #23
 8011f9e:	22fa      	movs	r2, #250	@ 0xfa
 8011fa0:	0112      	lsls	r2, r2, #4
 8011fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8011fa4:	4b14      	ldr	r3, [pc, #80]	@ (8011ff8 <SetAllREDLED+0x74>)
 8011fa6:	4a13      	ldr	r2, [pc, #76]	@ (8011ff4 <SetAllREDLED+0x70>)
 8011fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011faa:	4b13      	ldr	r3, [pc, #76]	@ (8011ff8 <SetAllREDLED+0x74>)
 8011fac:	22fa      	movs	r2, #250	@ 0xfa
 8011fae:	0112      	lsls	r2, r2, #4
 8011fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8011fb2:	4b11      	ldr	r3, [pc, #68]	@ (8011ff8 <SetAllREDLED+0x74>)
 8011fb4:	22fa      	movs	r2, #250	@ 0xfa
 8011fb6:	0112      	lsls	r2, r2, #4
 8011fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011fba:	4b10      	ldr	r3, [pc, #64]	@ (8011ffc <SetAllREDLED+0x78>)
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	2101      	movs	r1, #1
 8011fc0:	0018      	movs	r0, r3
 8011fc2:	f003 f8b8 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011fc6:	2380      	movs	r3, #128	@ 0x80
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	480c      	ldr	r0, [pc, #48]	@ (8011ffc <SetAllREDLED+0x78>)
 8011fcc:	2201      	movs	r2, #1
 8011fce:	0019      	movs	r1, r3
 8011fd0:	f003 f8b1 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8011fd4:	2380      	movs	r3, #128	@ 0x80
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	4808      	ldr	r0, [pc, #32]	@ (8011ffc <SetAllREDLED+0x78>)
 8011fda:	2201      	movs	r2, #1
 8011fdc:	0019      	movs	r1, r3
 8011fde:	f003 f8aa 	bl	8015136 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8011fe2:	23fa      	movs	r3, #250	@ 0xfa
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	0018      	movs	r0, r3
 8011fe8:	f001 fe1e 	bl	8013c28 <HAL_Delay>
}
 8011fec:	46c0      	nop			@ (mov r8, r8)
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	46c0      	nop			@ (mov r8, r8)
 8011ff4:	00000bb8 	.word	0x00000bb8
 8011ff8:	40000400 	.word	0x40000400
 8011ffc:	50000400 	.word	0x50000400

08012000 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012006:	1dfb      	adds	r3, r7, #7
 8012008:	2200      	movs	r2, #0
 801200a:	701a      	strb	r2, [r3, #0]
 801200c:	e04b      	b.n	80120a6 <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 801200e:	2380      	movs	r3, #128	@ 0x80
 8012010:	05db      	lsls	r3, r3, #23
 8012012:	22fa      	movs	r2, #250	@ 0xfa
 8012014:	0112      	lsls	r2, r2, #4
 8012016:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012018:	2380      	movs	r3, #128	@ 0x80
 801201a:	05db      	lsls	r3, r3, #23
 801201c:	22fa      	movs	r2, #250	@ 0xfa
 801201e:	0112      	lsls	r2, r2, #4
 8012020:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012022:	2380      	movs	r3, #128	@ 0x80
 8012024:	05db      	lsls	r3, r3, #23
 8012026:	4a24      	ldr	r2, [pc, #144]	@ (80120b8 <SetAllBlueLED+0xb8>)
 8012028:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 801202a:	4b24      	ldr	r3, [pc, #144]	@ (80120bc <SetAllBlueLED+0xbc>)
 801202c:	22fa      	movs	r2, #250	@ 0xfa
 801202e:	0112      	lsls	r2, r2, #4
 8012030:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012032:	4b22      	ldr	r3, [pc, #136]	@ (80120bc <SetAllBlueLED+0xbc>)
 8012034:	22fa      	movs	r2, #250	@ 0xfa
 8012036:	0112      	lsls	r2, r2, #4
 8012038:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 801203a:	4b20      	ldr	r3, [pc, #128]	@ (80120bc <SetAllBlueLED+0xbc>)
 801203c:	4a1e      	ldr	r2, [pc, #120]	@ (80120b8 <SetAllBlueLED+0xb8>)
 801203e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012040:	4b1f      	ldr	r3, [pc, #124]	@ (80120c0 <SetAllBlueLED+0xc0>)
 8012042:	2201      	movs	r2, #1
 8012044:	2101      	movs	r1, #1
 8012046:	0018      	movs	r0, r3
 8012048:	f003 f875 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 801204c:	2380      	movs	r3, #128	@ 0x80
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	481b      	ldr	r0, [pc, #108]	@ (80120c0 <SetAllBlueLED+0xc0>)
 8012052:	2201      	movs	r2, #1
 8012054:	0019      	movs	r1, r3
 8012056:	f003 f86e 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 801205a:	2380      	movs	r3, #128	@ 0x80
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	4818      	ldr	r0, [pc, #96]	@ (80120c0 <SetAllBlueLED+0xc0>)
 8012060:	2200      	movs	r2, #0
 8012062:	0019      	movs	r1, r3
 8012064:	f003 f867 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8012068:	23fa      	movs	r3, #250	@ 0xfa
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	0018      	movs	r0, r3
 801206e:	f001 fddb 	bl	8013c28 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012072:	2380      	movs	r3, #128	@ 0x80
 8012074:	05db      	lsls	r3, r3, #23
 8012076:	22fa      	movs	r2, #250	@ 0xfa
 8012078:	0112      	lsls	r2, r2, #4
 801207a:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 801207c:	4b0f      	ldr	r3, [pc, #60]	@ (80120bc <SetAllBlueLED+0xbc>)
 801207e:	22fa      	movs	r2, #250	@ 0xfa
 8012080:	0112      	lsls	r2, r2, #4
 8012082:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012084:	2380      	movs	r3, #128	@ 0x80
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	480d      	ldr	r0, [pc, #52]	@ (80120c0 <SetAllBlueLED+0xc0>)
 801208a:	2201      	movs	r2, #1
 801208c:	0019      	movs	r1, r3
 801208e:	f003 f852 	bl	8015136 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8012092:	23fa      	movs	r3, #250	@ 0xfa
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	0018      	movs	r0, r3
 8012098:	f001 fdc6 	bl	8013c28 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 801209c:	1dfb      	adds	r3, r7, #7
 801209e:	781a      	ldrb	r2, [r3, #0]
 80120a0:	1dfb      	adds	r3, r7, #7
 80120a2:	3201      	adds	r2, #1
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	1dfb      	adds	r3, r7, #7
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	d9af      	bls.n	801200e <SetAllBlueLED+0xe>
  }
}
 80120ae:	46c0      	nop			@ (mov r8, r8)
 80120b0:	46c0      	nop			@ (mov r8, r8)
 80120b2:	46bd      	mov	sp, r7
 80120b4:	b002      	add	sp, #8
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	00000bb8 	.word	0x00000bb8
 80120bc:	40000400 	.word	0x40000400
 80120c0:	50000400 	.word	0x50000400

080120c4 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 80120c4:	b5b0      	push	{r4, r5, r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	0002      	movs	r2, r0
 80120cc:	1dbb      	adds	r3, r7, #6
 80120ce:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 80120d0:	1dbb      	adds	r3, r7, #6
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d05a      	beq.n	801218e <SetVOCindicator+0xca>
 80120d8:	1dbb      	adds	r3, r7, #6
 80120da:	881b      	ldrh	r3, [r3, #0]
 80120dc:	2b64      	cmp	r3, #100	@ 0x64
 80120de:	d856      	bhi.n	801218e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 80120e0:	1dbb      	adds	r3, r7, #6
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	0018      	movs	r0, r3
 80120e6:	f7f1 fb83 	bl	80037f0 <__aeabi_i2d>
 80120ea:	2200      	movs	r2, #0
 80120ec:	4b5f      	ldr	r3, [pc, #380]	@ (801226c <SetVOCindicator+0x1a8>)
 80120ee:	f7ef fff7 	bl	80020e0 <__aeabi_ddiv>
 80120f2:	0002      	movs	r2, r0
 80120f4:	000b      	movs	r3, r1
 80120f6:	2000      	movs	r0, #0
 80120f8:	495d      	ldr	r1, [pc, #372]	@ (8012270 <SetVOCindicator+0x1ac>)
 80120fa:	f7f0 ff11 	bl	8002f20 <__aeabi_dsub>
 80120fe:	0002      	movs	r2, r0
 8012100:	000b      	movs	r3, r1
 8012102:	0014      	movs	r4, r2
 8012104:	001d      	movs	r5, r3
 8012106:	4b5b      	ldr	r3, [pc, #364]	@ (8012274 <SetVOCindicator+0x1b0>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	0018      	movs	r0, r3
 801210c:	f7f1 fb70 	bl	80037f0 <__aeabi_i2d>
 8012110:	0002      	movs	r2, r0
 8012112:	000b      	movs	r3, r1
 8012114:	0020      	movs	r0, r4
 8012116:	0029      	movs	r1, r5
 8012118:	f7f0 fc1c 	bl	8002954 <__aeabi_dmul>
 801211c:	0002      	movs	r2, r0
 801211e:	000b      	movs	r3, r1
 8012120:	0010      	movs	r0, r2
 8012122:	0019      	movs	r1, r3
 8012124:	f7ee fa92 	bl	800064c <__aeabi_d2uiz>
 8012128:	0003      	movs	r3, r0
 801212a:	b29a      	uxth	r2, r3
 801212c:	4b52      	ldr	r3, [pc, #328]	@ (8012278 <SetVOCindicator+0x1b4>)
 801212e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012130:	1dbb      	adds	r3, r7, #6
 8012132:	881b      	ldrh	r3, [r3, #0]
 8012134:	0018      	movs	r0, r3
 8012136:	f7f1 fb5b 	bl	80037f0 <__aeabi_i2d>
 801213a:	2200      	movs	r2, #0
 801213c:	4b4b      	ldr	r3, [pc, #300]	@ (801226c <SetVOCindicator+0x1a8>)
 801213e:	f7ef ffcf 	bl	80020e0 <__aeabi_ddiv>
 8012142:	0002      	movs	r2, r0
 8012144:	000b      	movs	r3, r1
 8012146:	0014      	movs	r4, r2
 8012148:	001d      	movs	r5, r3
 801214a:	4b4a      	ldr	r3, [pc, #296]	@ (8012274 <SetVOCindicator+0x1b0>)
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	0018      	movs	r0, r3
 8012150:	f7f1 fb4e 	bl	80037f0 <__aeabi_i2d>
 8012154:	0002      	movs	r2, r0
 8012156:	000b      	movs	r3, r1
 8012158:	0020      	movs	r0, r4
 801215a:	0029      	movs	r1, r5
 801215c:	f7f0 fbfa 	bl	8002954 <__aeabi_dmul>
 8012160:	0002      	movs	r2, r0
 8012162:	000b      	movs	r3, r1
 8012164:	0010      	movs	r0, r2
 8012166:	0019      	movs	r1, r3
 8012168:	f7ee fa70 	bl	800064c <__aeabi_d2uiz>
 801216c:	0003      	movs	r3, r0
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b42      	ldr	r3, [pc, #264]	@ (801227c <SetVOCindicator+0x1b8>)
 8012172:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012174:	4b3f      	ldr	r3, [pc, #252]	@ (8012274 <SetVOCindicator+0x1b0>)
 8012176:	881a      	ldrh	r2, [r3, #0]
 8012178:	4b41      	ldr	r3, [pc, #260]	@ (8012280 <SetVOCindicator+0x1bc>)
 801217a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 801217c:	4b40      	ldr	r3, [pc, #256]	@ (8012280 <SetVOCindicator+0x1bc>)
 801217e:	8818      	ldrh	r0, [r3, #0]
 8012180:	4b3d      	ldr	r3, [pc, #244]	@ (8012278 <SetVOCindicator+0x1b4>)
 8012182:	8819      	ldrh	r1, [r3, #0]
 8012184:	4b3d      	ldr	r3, [pc, #244]	@ (801227c <SetVOCindicator+0x1b8>)
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	001a      	movs	r2, r3
 801218a:	f7ff fd9f 	bl	8011ccc <SetVocLED>
  }
  if(VOCi > 100){
 801218e:	1dbb      	adds	r3, r7, #6
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	2b64      	cmp	r3, #100	@ 0x64
 8012194:	d966      	bls.n	8012264 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012196:	1dbb      	adds	r3, r7, #6
 8012198:	881b      	ldrh	r3, [r3, #0]
 801219a:	0018      	movs	r0, r3
 801219c:	f7f1 fb28 	bl	80037f0 <__aeabi_i2d>
 80121a0:	2200      	movs	r2, #0
 80121a2:	4b32      	ldr	r3, [pc, #200]	@ (801226c <SetVOCindicator+0x1a8>)
 80121a4:	f7f0 febc 	bl	8002f20 <__aeabi_dsub>
 80121a8:	0002      	movs	r2, r0
 80121aa:	000b      	movs	r3, r1
 80121ac:	0010      	movs	r0, r2
 80121ae:	0019      	movs	r1, r3
 80121b0:	2200      	movs	r2, #0
 80121b2:	4b34      	ldr	r3, [pc, #208]	@ (8012284 <SetVOCindicator+0x1c0>)
 80121b4:	f7ef ff94 	bl	80020e0 <__aeabi_ddiv>
 80121b8:	0002      	movs	r2, r0
 80121ba:	000b      	movs	r3, r1
 80121bc:	0014      	movs	r4, r2
 80121be:	001d      	movs	r5, r3
 80121c0:	4b2c      	ldr	r3, [pc, #176]	@ (8012274 <SetVOCindicator+0x1b0>)
 80121c2:	881b      	ldrh	r3, [r3, #0]
 80121c4:	0018      	movs	r0, r3
 80121c6:	f7f1 fb13 	bl	80037f0 <__aeabi_i2d>
 80121ca:	0002      	movs	r2, r0
 80121cc:	000b      	movs	r3, r1
 80121ce:	0020      	movs	r0, r4
 80121d0:	0029      	movs	r1, r5
 80121d2:	f7f0 fbbf 	bl	8002954 <__aeabi_dmul>
 80121d6:	0002      	movs	r2, r0
 80121d8:	000b      	movs	r3, r1
 80121da:	0010      	movs	r0, r2
 80121dc:	0019      	movs	r1, r3
 80121de:	f7ee fa35 	bl	800064c <__aeabi_d2uiz>
 80121e2:	0003      	movs	r3, r0
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	4b24      	ldr	r3, [pc, #144]	@ (8012278 <SetVOCindicator+0x1b4>)
 80121e8:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 80121ea:	1dbb      	adds	r3, r7, #6
 80121ec:	881b      	ldrh	r3, [r3, #0]
 80121ee:	0018      	movs	r0, r3
 80121f0:	f7f1 fafe 	bl	80037f0 <__aeabi_i2d>
 80121f4:	2200      	movs	r2, #0
 80121f6:	4b1d      	ldr	r3, [pc, #116]	@ (801226c <SetVOCindicator+0x1a8>)
 80121f8:	f7f0 fe92 	bl	8002f20 <__aeabi_dsub>
 80121fc:	0002      	movs	r2, r0
 80121fe:	000b      	movs	r3, r1
 8012200:	0010      	movs	r0, r2
 8012202:	0019      	movs	r1, r3
 8012204:	2200      	movs	r2, #0
 8012206:	4b1f      	ldr	r3, [pc, #124]	@ (8012284 <SetVOCindicator+0x1c0>)
 8012208:	f7ef ff6a 	bl	80020e0 <__aeabi_ddiv>
 801220c:	0002      	movs	r2, r0
 801220e:	000b      	movs	r3, r1
 8012210:	2000      	movs	r0, #0
 8012212:	4917      	ldr	r1, [pc, #92]	@ (8012270 <SetVOCindicator+0x1ac>)
 8012214:	f7f0 fe84 	bl	8002f20 <__aeabi_dsub>
 8012218:	0002      	movs	r2, r0
 801221a:	000b      	movs	r3, r1
 801221c:	0014      	movs	r4, r2
 801221e:	001d      	movs	r5, r3
 8012220:	4b14      	ldr	r3, [pc, #80]	@ (8012274 <SetVOCindicator+0x1b0>)
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	0018      	movs	r0, r3
 8012226:	f7f1 fae3 	bl	80037f0 <__aeabi_i2d>
 801222a:	0002      	movs	r2, r0
 801222c:	000b      	movs	r3, r1
 801222e:	0020      	movs	r0, r4
 8012230:	0029      	movs	r1, r5
 8012232:	f7f0 fb8f 	bl	8002954 <__aeabi_dmul>
 8012236:	0002      	movs	r2, r0
 8012238:	000b      	movs	r3, r1
 801223a:	0010      	movs	r0, r2
 801223c:	0019      	movs	r1, r3
 801223e:	f7ee fa05 	bl	800064c <__aeabi_d2uiz>
 8012242:	0003      	movs	r3, r0
 8012244:	b29a      	uxth	r2, r3
 8012246:	4b0e      	ldr	r3, [pc, #56]	@ (8012280 <SetVOCindicator+0x1bc>)
 8012248:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 801224a:	4b0a      	ldr	r3, [pc, #40]	@ (8012274 <SetVOCindicator+0x1b0>)
 801224c:	881a      	ldrh	r2, [r3, #0]
 801224e:	4b0b      	ldr	r3, [pc, #44]	@ (801227c <SetVOCindicator+0x1b8>)
 8012250:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012252:	4b0b      	ldr	r3, [pc, #44]	@ (8012280 <SetVOCindicator+0x1bc>)
 8012254:	8818      	ldrh	r0, [r3, #0]
 8012256:	4b08      	ldr	r3, [pc, #32]	@ (8012278 <SetVOCindicator+0x1b4>)
 8012258:	8819      	ldrh	r1, [r3, #0]
 801225a:	4b08      	ldr	r3, [pc, #32]	@ (801227c <SetVOCindicator+0x1b8>)
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	001a      	movs	r2, r3
 8012260:	f7ff fd34 	bl	8011ccc <SetVocLED>
  }

}
 8012264:	46c0      	nop			@ (mov r8, r8)
 8012266:	46bd      	mov	sp, r7
 8012268:	b002      	add	sp, #8
 801226a:	bdb0      	pop	{r4, r5, r7, pc}
 801226c:	40590000 	.word	0x40590000
 8012270:	3ff00000 	.word	0x3ff00000
 8012274:	200000de 	.word	0x200000de
 8012278:	20001e5e 	.word	0x20001e5e
 801227c:	20001e60 	.word	0x20001e60
 8012280:	20001e62 	.word	0x20001e62
 8012284:	40790000 	.word	0x40790000

08012288 <powerCheck>:

Battery_Status powerCheck(){
 8012288:	b590      	push	{r4, r7, lr}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 801228e:	f7f6 ffe1 	bl	8009254 <Check_USB_PowerOn>
 8012292:	0003      	movs	r3, r0
 8012294:	001a      	movs	r2, r3
 8012296:	2301      	movs	r3, #1
 8012298:	4053      	eors	r3, r2
 801229a:	b2db      	uxtb	r3, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	d005      	beq.n	80122ac <powerCheck+0x24>
    status = batteryChargeCheck();
 80122a0:	1dfc      	adds	r4, r7, #7
 80122a2:	f7ff fbf3 	bl	8011a8c <batteryChargeCheck>
 80122a6:	0003      	movs	r3, r0
 80122a8:	7023      	strb	r3, [r4, #0]
 80122aa:	e002      	b.n	80122b2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80122ac:	1dfb      	adds	r3, r7, #7
 80122ae:	2204      	movs	r2, #4
 80122b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80122b2:	1dfb      	adds	r3, r7, #7
 80122b4:	781b      	ldrb	r3, [r3, #0]
}
 80122b6:	0018      	movs	r0, r3
 80122b8:	46bd      	mov	sp, r7
 80122ba:	b003      	add	sp, #12
 80122bc:	bd90      	pop	{r4, r7, pc}
	...

080122c0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 80122c0:	b5b0      	push	{r4, r5, r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af04      	add	r7, sp, #16
 80122c6:	0002      	movs	r2, r0
 80122c8:	1dfb      	adds	r3, r7, #7
 80122ca:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80122cc:	1dfb      	adds	r3, r7, #7
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	2b04      	cmp	r3, #4
 80122d2:	d114      	bne.n	80122fe <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 80122d4:	f7f6 ff08 	bl	80090e8 <ReadBatteryVoltage>
 80122d8:	1c03      	adds	r3, r0, #0
 80122da:	1c18      	adds	r0, r3, #0
 80122dc:	f7f1 fada 	bl	8003894 <__aeabi_f2d>
 80122e0:	0004      	movs	r4, r0
 80122e2:	000d      	movs	r5, r1
 80122e4:	f7f6 ff62 	bl	80091ac <ReadSolarVoltage>
 80122e8:	0003      	movs	r3, r0
 80122ea:	0019      	movs	r1, r3
 80122ec:	4a1a      	ldr	r2, [pc, #104]	@ (8012358 <powerDisplay+0x98>)
 80122ee:	4b1b      	ldr	r3, [pc, #108]	@ (801235c <powerDisplay+0x9c>)
 80122f0:	9102      	str	r1, [sp, #8]
 80122f2:	9400      	str	r4, [sp, #0]
 80122f4:	9501      	str	r5, [sp, #4]
 80122f6:	0019      	movs	r1, r3
 80122f8:	2003      	movs	r0, #3
 80122fa:	f000 ff4b 	bl	8013194 <CreateLine>
  }
  if(status == BATTERY_FULL){
 80122fe:	1dfb      	adds	r3, r7, #7
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b03      	cmp	r3, #3
 8012304:	d105      	bne.n	8012312 <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012306:	4a16      	ldr	r2, [pc, #88]	@ (8012360 <powerDisplay+0xa0>)
 8012308:	4b14      	ldr	r3, [pc, #80]	@ (801235c <powerDisplay+0x9c>)
 801230a:	0019      	movs	r1, r3
 801230c:	2003      	movs	r0, #3
 801230e:	f000 ff41 	bl	8013194 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012312:	1dfb      	adds	r3, r7, #7
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	2b02      	cmp	r3, #2
 8012318:	d105      	bne.n	8012326 <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 801231a:	4a12      	ldr	r2, [pc, #72]	@ (8012364 <powerDisplay+0xa4>)
 801231c:	4b0f      	ldr	r3, [pc, #60]	@ (801235c <powerDisplay+0x9c>)
 801231e:	0019      	movs	r1, r3
 8012320:	2003      	movs	r0, #3
 8012322:	f000 ff37 	bl	8013194 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8012326:	1dfb      	adds	r3, r7, #7
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	2b01      	cmp	r3, #1
 801232c:	d105      	bne.n	801233a <powerDisplay+0x7a>
    Debug("Battery is getting low");
 801232e:	4a0e      	ldr	r2, [pc, #56]	@ (8012368 <powerDisplay+0xa8>)
 8012330:	4b0a      	ldr	r3, [pc, #40]	@ (801235c <powerDisplay+0x9c>)
 8012332:	0019      	movs	r1, r3
 8012334:	2003      	movs	r0, #3
 8012336:	f000 ff2d 	bl	8013194 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 801233a:	1dfb      	adds	r3, r7, #7
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d105      	bne.n	801234e <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8012342:	4a0a      	ldr	r2, [pc, #40]	@ (801236c <powerDisplay+0xac>)
 8012344:	4b05      	ldr	r3, [pc, #20]	@ (801235c <powerDisplay+0x9c>)
 8012346:	0019      	movs	r1, r3
 8012348:	2003      	movs	r0, #3
 801234a:	f000 ff23 	bl	8013194 <CreateLine>
  }
}
 801234e:	46c0      	nop			@ (mov r8, r8)
 8012350:	46bd      	mov	sp, r7
 8012352:	b002      	add	sp, #8
 8012354:	bdb0      	pop	{r4, r5, r7, pc}
 8012356:	46c0      	nop			@ (mov r8, r8)
 8012358:	0802d2fc 	.word	0x0802d2fc
 801235c:	0802d33c 	.word	0x0802d33c
 8012360:	0802d340 	.word	0x0802d340
 8012364:	0802d358 	.word	0x0802d358
 8012368:	0802d378 	.word	0x0802d378
 801236c:	0802d390 	.word	0x0802d390

08012370 <configCheck>:

void configCheck(){
 8012370:	b590      	push	{r4, r7, lr}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8012376:	f7f6 ff7c 	bl	8009272 <BootButton_Pressed>
 801237a:	1e03      	subs	r3, r0, #0
 801237c:	d007      	beq.n	801238e <configCheck+0x1e>
 801237e:	f7f6 ff89 	bl	8009294 <UserButton_Pressed>
 8012382:	1e03      	subs	r3, r0, #0
 8012384:	d003      	beq.n	801238e <configCheck+0x1e>
    configSet = true;
 8012386:	4bb5      	ldr	r3, [pc, #724]	@ (801265c <configCheck+0x2ec>)
 8012388:	2201      	movs	r2, #1
 801238a:	701a      	strb	r2, [r3, #0]
 801238c:	e00a      	b.n	80123a4 <configCheck+0x34>
  }
  else{
    configSet = false;
 801238e:	4bb3      	ldr	r3, [pc, #716]	@ (801265c <configCheck+0x2ec>)
 8012390:	2200      	movs	r2, #0
 8012392:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012394:	f001 fc3e 	bl	8013c14 <HAL_GetTick>
 8012398:	0003      	movs	r3, r0
 801239a:	22fa      	movs	r2, #250	@ 0xfa
 801239c:	00d2      	lsls	r2, r2, #3
 801239e:	189a      	adds	r2, r3, r2
 80123a0:	4baf      	ldr	r3, [pc, #700]	@ (8012660 <configCheck+0x2f0>)
 80123a2:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80123a4:	4bad      	ldr	r3, [pc, #692]	@ (801265c <configCheck+0x2ec>)
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d00d      	beq.n	80123c8 <configCheck+0x58>
 80123ac:	4bac      	ldr	r3, [pc, #688]	@ (8012660 <configCheck+0x2f0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	0018      	movs	r0, r3
 80123b2:	f000 fe99 	bl	80130e8 <TimestampIsReached>
 80123b6:	1e03      	subs	r3, r0, #0
 80123b8:	d006      	beq.n	80123c8 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 80123ba:	f7f2 fceb 	bl	8004d94 <SetConfigMode>
    SetDBLED(true, true, true);
 80123be:	2201      	movs	r2, #1
 80123c0:	2101      	movs	r1, #1
 80123c2:	2001      	movs	r0, #1
 80123c4:	f7ff fc38 	bl	8011c38 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 80123c8:	f7f6 ff53 	bl	8009272 <BootButton_Pressed>
 80123cc:	0003      	movs	r3, r0
 80123ce:	001a      	movs	r2, r3
 80123d0:	2301      	movs	r3, #1
 80123d2:	4053      	eors	r3, r2
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d05a      	beq.n	8012490 <configCheck+0x120>
 80123da:	f7f6 ff5b 	bl	8009294 <UserButton_Pressed>
 80123de:	1e03      	subs	r3, r0, #0
 80123e0:	d056      	beq.n	8012490 <configCheck+0x120>
 80123e2:	4ba0      	ldr	r3, [pc, #640]	@ (8012664 <configCheck+0x2f4>)
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	2201      	movs	r2, #1
 80123e8:	4053      	eors	r3, r2
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d04f      	beq.n	8012490 <configCheck+0x120>
 80123f0:	f7f2 fcf0 	bl	8004dd4 <GetReconfigMode>
 80123f4:	0003      	movs	r3, r0
 80123f6:	001a      	movs	r2, r3
 80123f8:	2301      	movs	r3, #1
 80123fa:	4053      	eors	r3, r2
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d046      	beq.n	8012490 <configCheck+0x120>
    SetLEDsOff();
 8012402:	f7ff fda3 	bl	8011f4c <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8012406:	4a98      	ldr	r2, [pc, #608]	@ (8012668 <configCheck+0x2f8>)
 8012408:	4997      	ldr	r1, [pc, #604]	@ (8012668 <configCheck+0x2f8>)
 801240a:	4b97      	ldr	r3, [pc, #604]	@ (8012668 <configCheck+0x2f8>)
 801240c:	0018      	movs	r0, r3
 801240e:	f7ff fc5d 	bl	8011ccc <SetVocLED>
    HAL_Delay(1500);
 8012412:	4b96      	ldr	r3, [pc, #600]	@ (801266c <configCheck+0x2fc>)
 8012414:	0018      	movs	r0, r3
 8012416:	f001 fc07 	bl	8013c28 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801241a:	23fa      	movs	r3, #250	@ 0xfa
 801241c:	011a      	lsls	r2, r3, #4
 801241e:	23fa      	movs	r3, #250	@ 0xfa
 8012420:	0119      	lsls	r1, r3, #4
 8012422:	23fa      	movs	r3, #250	@ 0xfa
 8012424:	011b      	lsls	r3, r3, #4
 8012426:	0018      	movs	r0, r3
 8012428:	f7ff fc50 	bl	8011ccc <SetVocLED>
    userToggle = !userToggle;
 801242c:	4b90      	ldr	r3, [pc, #576]	@ (8012670 <configCheck+0x300>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	1e5a      	subs	r2, r3, #1
 8012432:	4193      	sbcs	r3, r2
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2201      	movs	r2, #1
 8012438:	4053      	eors	r3, r2
 801243a:	b2db      	uxtb	r3, r3
 801243c:	1c1a      	adds	r2, r3, #0
 801243e:	2301      	movs	r3, #1
 8012440:	4013      	ands	r3, r2
 8012442:	b2da      	uxtb	r2, r3
 8012444:	4b8a      	ldr	r3, [pc, #552]	@ (8012670 <configCheck+0x300>)
 8012446:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8012448:	4b89      	ldr	r3, [pc, #548]	@ (8012670 <configCheck+0x300>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <configCheck+0xe6>
      EnabledConnectedDevices();
 8012450:	f7fa fe9c 	bl	800d18c <EnabledConnectedDevices>
 8012454:	e004      	b.n	8012460 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8012456:	f001 fbdd 	bl	8013c14 <HAL_GetTick>
 801245a:	0002      	movs	r2, r0
 801245c:	4b85      	ldr	r3, [pc, #532]	@ (8012674 <configCheck+0x304>)
 801245e:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8012460:	4b83      	ldr	r3, [pc, #524]	@ (8012670 <configCheck+0x300>)
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d001      	beq.n	801246c <configCheck+0xfc>
 8012468:	4b83      	ldr	r3, [pc, #524]	@ (8012678 <configCheck+0x308>)
 801246a:	e000      	b.n	801246e <configCheck+0xfe>
 801246c:	4b83      	ldr	r3, [pc, #524]	@ (801267c <configCheck+0x30c>)
 801246e:	4a84      	ldr	r2, [pc, #528]	@ (8012680 <configCheck+0x310>)
 8012470:	4984      	ldr	r1, [pc, #528]	@ (8012684 <configCheck+0x314>)
 8012472:	2003      	movs	r0, #3
 8012474:	f000 fe8e 	bl	8013194 <CreateLine>
    userbuttonHeld = true;
 8012478:	4b7a      	ldr	r3, [pc, #488]	@ (8012664 <configCheck+0x2f4>)
 801247a:	2201      	movs	r2, #1
 801247c:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801247e:	f001 fbc9 	bl	8013c14 <HAL_GetTick>
 8012482:	0003      	movs	r3, r0
 8012484:	22fa      	movs	r2, #250	@ 0xfa
 8012486:	00d2      	lsls	r2, r2, #3
 8012488:	189a      	adds	r2, r3, r2
 801248a:	4b7f      	ldr	r3, [pc, #508]	@ (8012688 <configCheck+0x318>)
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	e002      	b.n	8012496 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8012490:	4b74      	ldr	r3, [pc, #464]	@ (8012664 <configCheck+0x2f4>)
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8012496:	f7f6 feec 	bl	8009272 <BootButton_Pressed>
 801249a:	0003      	movs	r3, r0
 801249c:	001a      	movs	r2, r3
 801249e:	2301      	movs	r3, #1
 80124a0:	4053      	eors	r3, r2
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d100      	bne.n	80124aa <configCheck+0x13a>
 80124a8:	e0a4      	b.n	80125f4 <configCheck+0x284>
 80124aa:	4b6e      	ldr	r3, [pc, #440]	@ (8012664 <configCheck+0x2f4>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d100      	bne.n	80124b4 <configCheck+0x144>
 80124b2:	e09f      	b.n	80125f4 <configCheck+0x284>
 80124b4:	4b74      	ldr	r3, [pc, #464]	@ (8012688 <configCheck+0x318>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	0018      	movs	r0, r3
 80124ba:	f000 fe15 	bl	80130e8 <TimestampIsReached>
 80124be:	1e03      	subs	r3, r0, #0
 80124c0:	d100      	bne.n	80124c4 <configCheck+0x154>
 80124c2:	e097      	b.n	80125f4 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80124c4:	f7fa fa56 	bl	800c974 <GetPMSensorPresence>
 80124c8:	1e03      	subs	r3, r0, #0
 80124ca:	d100      	bne.n	80124ce <configCheck+0x15e>
 80124cc:	e082      	b.n	80125d4 <configCheck+0x264>
 80124ce:	4b6f      	ldr	r3, [pc, #444]	@ (801268c <configCheck+0x31c>)
 80124d0:	791b      	ldrb	r3, [r3, #4]
 80124d2:	2b34      	cmp	r3, #52	@ 0x34
 80124d4:	d004      	beq.n	80124e0 <configCheck+0x170>
 80124d6:	4b6d      	ldr	r3, [pc, #436]	@ (801268c <configCheck+0x31c>)
 80124d8:	791b      	ldrb	r3, [r3, #4]
 80124da:	2b35      	cmp	r3, #53	@ 0x35
 80124dc:	d000      	beq.n	80124e0 <configCheck+0x170>
 80124de:	e079      	b.n	80125d4 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80124e0:	4b6b      	ldr	r3, [pc, #428]	@ (8012690 <configCheck+0x320>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	1e5a      	subs	r2, r3, #1
 80124e6:	4193      	sbcs	r3, r2
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	2201      	movs	r2, #1
 80124ec:	4053      	eors	r3, r2
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	1c1a      	adds	r2, r3, #0
 80124f2:	2301      	movs	r3, #1
 80124f4:	4013      	ands	r3, r2
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	4b65      	ldr	r3, [pc, #404]	@ (8012690 <configCheck+0x320>)
 80124fa:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80124fc:	4b64      	ldr	r3, [pc, #400]	@ (8012690 <configCheck+0x320>)
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d005      	beq.n	8012510 <configCheck+0x1a0>
 8012504:	1dbc      	adds	r4, r7, #6
 8012506:	f7ff fb1b 	bl	8011b40 <Calculate_LED_ON>
 801250a:	0003      	movs	r3, r0
 801250c:	8023      	strh	r3, [r4, #0]
 801250e:	e003      	b.n	8012518 <configCheck+0x1a8>
        else color = 4000;
 8012510:	1dbb      	adds	r3, r7, #6
 8012512:	22fa      	movs	r2, #250	@ 0xfa
 8012514:	0112      	lsls	r2, r2, #4
 8012516:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8012518:	4b5d      	ldr	r3, [pc, #372]	@ (8012690 <configCheck+0x320>)
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <configCheck+0x1b4>
 8012520:	4b5c      	ldr	r3, [pc, #368]	@ (8012694 <configCheck+0x324>)
 8012522:	e000      	b.n	8012526 <configCheck+0x1b6>
 8012524:	4b5c      	ldr	r3, [pc, #368]	@ (8012698 <configCheck+0x328>)
 8012526:	4a5d      	ldr	r2, [pc, #372]	@ (801269c <configCheck+0x32c>)
 8012528:	495d      	ldr	r1, [pc, #372]	@ (80126a0 <configCheck+0x330>)
 801252a:	2002      	movs	r0, #2
 801252c:	f000 fe32 	bl	8013194 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8012530:	1d7b      	adds	r3, r7, #5
 8012532:	2200      	movs	r2, #0
 8012534:	701a      	strb	r2, [r3, #0]
 8012536:	e028      	b.n	801258a <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8012538:	f7ff fb02 	bl	8011b40 <Calculate_LED_ON>
 801253c:	0003      	movs	r3, r0
 801253e:	001a      	movs	r2, r3
 8012540:	4b58      	ldr	r3, [pc, #352]	@ (80126a4 <configCheck+0x334>)
 8012542:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8012544:	4b57      	ldr	r3, [pc, #348]	@ (80126a4 <configCheck+0x334>)
 8012546:	1dba      	adds	r2, r7, #6
 8012548:	8812      	ldrh	r2, [r2, #0]
 801254a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 801254c:	4b55      	ldr	r3, [pc, #340]	@ (80126a4 <configCheck+0x334>)
 801254e:	1dba      	adds	r2, r7, #6
 8012550:	8812      	ldrh	r2, [r2, #0]
 8012552:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012554:	23c8      	movs	r3, #200	@ 0xc8
 8012556:	005b      	lsls	r3, r3, #1
 8012558:	0018      	movs	r0, r3
 801255a:	f001 fb65 	bl	8013c28 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801255e:	4b51      	ldr	r3, [pc, #324]	@ (80126a4 <configCheck+0x334>)
 8012560:	22fa      	movs	r2, #250	@ 0xfa
 8012562:	0112      	lsls	r2, r2, #4
 8012564:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8012566:	4b4f      	ldr	r3, [pc, #316]	@ (80126a4 <configCheck+0x334>)
 8012568:	22fa      	movs	r2, #250	@ 0xfa
 801256a:	0112      	lsls	r2, r2, #4
 801256c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801256e:	4b4d      	ldr	r3, [pc, #308]	@ (80126a4 <configCheck+0x334>)
 8012570:	22fa      	movs	r2, #250	@ 0xfa
 8012572:	0112      	lsls	r2, r2, #4
 8012574:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012576:	23c8      	movs	r3, #200	@ 0xc8
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	0018      	movs	r0, r3
 801257c:	f001 fb54 	bl	8013c28 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012580:	1d7b      	adds	r3, r7, #5
 8012582:	781a      	ldrb	r2, [r3, #0]
 8012584:	1d7b      	adds	r3, r7, #5
 8012586:	3201      	adds	r2, #1
 8012588:	701a      	strb	r2, [r3, #0]
 801258a:	1d7b      	adds	r3, r7, #5
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b01      	cmp	r3, #1
 8012590:	d9d2      	bls.n	8012538 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8012592:	4b37      	ldr	r3, [pc, #220]	@ (8012670 <configCheck+0x300>)
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	1e5a      	subs	r2, r3, #1
 8012598:	4193      	sbcs	r3, r2
 801259a:	b2db      	uxtb	r3, r3
 801259c:	2201      	movs	r2, #1
 801259e:	4053      	eors	r3, r2
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	1c1a      	adds	r2, r3, #0
 80125a4:	2301      	movs	r3, #1
 80125a6:	4013      	ands	r3, r2
 80125a8:	b2da      	uxtb	r2, r3
 80125aa:	4b31      	ldr	r3, [pc, #196]	@ (8012670 <configCheck+0x300>)
 80125ac:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 80125ae:	4b30      	ldr	r3, [pc, #192]	@ (8012670 <configCheck+0x300>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <configCheck+0x24a>
 80125b6:	4b37      	ldr	r3, [pc, #220]	@ (8012694 <configCheck+0x324>)
 80125b8:	e000      	b.n	80125bc <configCheck+0x24c>
 80125ba:	4b37      	ldr	r3, [pc, #220]	@ (8012698 <configCheck+0x328>)
 80125bc:	4a3a      	ldr	r2, [pc, #232]	@ (80126a8 <configCheck+0x338>)
 80125be:	4938      	ldr	r1, [pc, #224]	@ (80126a0 <configCheck+0x330>)
 80125c0:	2002      	movs	r0, #2
 80125c2:	f000 fde7 	bl	8013194 <CreateLine>
      if (usbPluggedIn) {
 80125c6:	4b39      	ldr	r3, [pc, #228]	@ (80126ac <configCheck+0x33c>)
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d009      	beq.n	80125e2 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80125ce:	f7fb ffa1 	bl	800e514 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80125d2:	e006      	b.n	80125e2 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80125d4:	4a36      	ldr	r2, [pc, #216]	@ (80126b0 <configCheck+0x340>)
 80125d6:	4b32      	ldr	r3, [pc, #200]	@ (80126a0 <configCheck+0x330>)
 80125d8:	0019      	movs	r1, r3
 80125da:	2002      	movs	r0, #2
 80125dc:	f000 fdda 	bl	8013194 <CreateLine>
 80125e0:	e000      	b.n	80125e4 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80125e2:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80125e4:	46c0      	nop			@ (mov r8, r8)
 80125e6:	f7f6 fe55 	bl	8009294 <UserButton_Pressed>
 80125ea:	1e03      	subs	r3, r0, #0
 80125ec:	d1fb      	bne.n	80125e6 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80125ee:	4b1d      	ldr	r3, [pc, #116]	@ (8012664 <configCheck+0x2f4>)
 80125f0:	2200      	movs	r2, #0
 80125f2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80125f4:	f7f6 fe3d 	bl	8009272 <BootButton_Pressed>
 80125f8:	0003      	movs	r3, r0
 80125fa:	001a      	movs	r2, r3
 80125fc:	2301      	movs	r3, #1
 80125fe:	4053      	eors	r3, r2
 8012600:	b2db      	uxtb	r3, r3
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00b      	beq.n	801261e <configCheck+0x2ae>
 8012606:	f7f6 fe45 	bl	8009294 <UserButton_Pressed>
 801260a:	0003      	movs	r3, r0
 801260c:	001a      	movs	r2, r3
 801260e:	2301      	movs	r3, #1
 8012610:	4053      	eors	r3, r2
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d002      	beq.n	801261e <configCheck+0x2ae>
    userbuttonHeld = false;
 8012618:	4b12      	ldr	r3, [pc, #72]	@ (8012664 <configCheck+0x2f4>)
 801261a:	2200      	movs	r2, #0
 801261c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 801261e:	f7f6 fe19 	bl	8009254 <Check_USB_PowerOn>
 8012622:	1e03      	subs	r3, r0, #0
 8012624:	d003      	beq.n	801262e <configCheck+0x2be>
    usbPluggedIn = true;
 8012626:	4b21      	ldr	r3, [pc, #132]	@ (80126ac <configCheck+0x33c>)
 8012628:	2201      	movs	r2, #1
 801262a:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 801262c:	e012      	b.n	8012654 <configCheck+0x2e4>
    if(!userToggle && !init){
 801262e:	4b10      	ldr	r3, [pc, #64]	@ (8012670 <configCheck+0x300>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	2201      	movs	r2, #1
 8012634:	4053      	eors	r3, r2
 8012636:	b2db      	uxtb	r3, r3
 8012638:	2b00      	cmp	r3, #0
 801263a:	d008      	beq.n	801264e <configCheck+0x2de>
 801263c:	4b1d      	ldr	r3, [pc, #116]	@ (80126b4 <configCheck+0x344>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	2201      	movs	r2, #1
 8012642:	4053      	eors	r3, r2
 8012644:	b2db      	uxtb	r3, r3
 8012646:	2b00      	cmp	r3, #0
 8012648:	d001      	beq.n	801264e <configCheck+0x2de>
      SetLEDsOff();
 801264a:	f7ff fc7f 	bl	8011f4c <SetLEDsOff>
    usbPluggedIn = false;
 801264e:	4b17      	ldr	r3, [pc, #92]	@ (80126ac <configCheck+0x33c>)
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
}
 8012654:	46c0      	nop			@ (mov r8, r8)
 8012656:	46bd      	mov	sp, r7
 8012658:	b003      	add	sp, #12
 801265a:	bd90      	pop	{r4, r7, pc}
 801265c:	20001e48 	.word	0x20001e48
 8012660:	20001e50 	.word	0x20001e50
 8012664:	20001e4b 	.word	0x20001e4b
 8012668:	00000bb8 	.word	0x00000bb8
 801266c:	000005dc 	.word	0x000005dc
 8012670:	20001e4a 	.word	0x20001e4a
 8012674:	20000e10 	.word	0x20000e10
 8012678:	0802d3b4 	.word	0x0802d3b4
 801267c:	0802d3b8 	.word	0x0802d3b8
 8012680:	0802d3bc 	.word	0x0802d3bc
 8012684:	0802d33c 	.word	0x0802d33c
 8012688:	20001e54 	.word	0x20001e54
 801268c:	20000ebc 	.word	0x20000ebc
 8012690:	20000eba 	.word	0x20000eba
 8012694:	0802d3dc 	.word	0x0802d3dc
 8012698:	0802d3e4 	.word	0x0802d3e4
 801269c:	0802d3f0 	.word	0x0802d3f0
 80126a0:	0802d410 	.word	0x0802d410
 80126a4:	40000400 	.word	0x40000400
 80126a8:	0802d414 	.word	0x0802d414
 80126ac:	20001e49 	.word	0x20001e49
 80126b0:	0802d42c 	.word	0x0802d42c
 80126b4:	200000dc 	.word	0x200000dc

080126b8 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 80126b8:	b590      	push	{r4, r7, lr}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 80126be:	1dfc      	adds	r4, r7, #7
 80126c0:	f7ff fde2 	bl	8012288 <powerCheck>
 80126c4:	0003      	movs	r3, r0
 80126c6:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 80126c8:	1dfb      	adds	r3, r7, #7
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	0018      	movs	r0, r3
 80126ce:	f7ff fdf7 	bl	80122c0 <powerDisplay>
  return status;
 80126d2:	1dfb      	adds	r3, r7, #7
 80126d4:	781b      	ldrb	r3, [r3, #0]
}
 80126d6:	0018      	movs	r0, r3
 80126d8:	46bd      	mov	sp, r7
 80126da:	b003      	add	sp, #12
 80126dc:	bd90      	pop	{r4, r7, pc}
	...

080126e0 <setuserToggle>:

void setuserToggle(void) {
 80126e0:	b580      	push	{r7, lr}
 80126e2:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 80126e4:	f7ff fdd0 	bl	8012288 <powerCheck>
 80126e8:	0003      	movs	r3, r0
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d004      	beq.n	80126f8 <setuserToggle+0x18>
    userToggle = true;
 80126ee:	4b04      	ldr	r3, [pc, #16]	@ (8012700 <setuserToggle+0x20>)
 80126f0:	2201      	movs	r2, #1
 80126f2:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80126f4:	f7fa fd4a 	bl	800d18c <EnabledConnectedDevices>
  }
}
 80126f8:	46c0      	nop			@ (mov r8, r8)
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	46c0      	nop			@ (mov r8, r8)
 8012700:	20001e4a 	.word	0x20001e4a

08012704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012708:	4b07      	ldr	r3, [pc, #28]	@ (8012728 <HAL_MspInit+0x24>)
 801270a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801270c:	4b06      	ldr	r3, [pc, #24]	@ (8012728 <HAL_MspInit+0x24>)
 801270e:	2101      	movs	r1, #1
 8012710:	430a      	orrs	r2, r1
 8012712:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8012714:	4b04      	ldr	r3, [pc, #16]	@ (8012728 <HAL_MspInit+0x24>)
 8012716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012718:	4b03      	ldr	r3, [pc, #12]	@ (8012728 <HAL_MspInit+0x24>)
 801271a:	2180      	movs	r1, #128	@ 0x80
 801271c:	0549      	lsls	r1, r1, #21
 801271e:	430a      	orrs	r2, r1
 8012720:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012722:	46c0      	nop			@ (mov r8, r8)
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	40021000 	.word	0x40021000

0801272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012730:	46c0      	nop			@ (mov r8, r8)
 8012732:	e7fd      	b.n	8012730 <NMI_Handler+0x4>

08012734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012738:	46c0      	nop			@ (mov r8, r8)
 801273a:	e7fd      	b.n	8012738 <HardFault_Handler+0x4>

0801273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8012740:	46c0      	nop			@ (mov r8, r8)
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801274a:	46c0      	nop			@ (mov r8, r8)
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012754:	f001 fa4c 	bl	8013bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8012758:	46c0      	nop			@ (mov r8, r8)
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
	...

08012760 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012764:	4b03      	ldr	r3, [pc, #12]	@ (8012774 <RTC_IRQHandler+0x14>)
 8012766:	0018      	movs	r0, r3
 8012768:	f009 fa9c 	bl	801bca4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 801276c:	46c0      	nop			@ (mov r8, r8)
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	46c0      	nop			@ (mov r8, r8)
 8012774:	20000e94 	.word	0x20000e94

08012778 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 801277c:	2380      	movs	r3, #128	@ 0x80
 801277e:	021b      	lsls	r3, r3, #8
 8012780:	0018      	movs	r0, r3
 8012782:	f002 fcf5 	bl	8015170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8012786:	46c0      	nop			@ (mov r8, r8)
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8012790:	4b05      	ldr	r3, [pc, #20]	@ (80127a8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8012792:	0018      	movs	r0, r3
 8012794:	f002 f87d 	bl	8014892 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8012798:	4b04      	ldr	r3, [pc, #16]	@ (80127ac <DMA1_Channel2_3_IRQHandler+0x20>)
 801279a:	0018      	movs	r0, r3
 801279c:	f002 f879 	bl	8014892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80127a0:	46c0      	nop			@ (mov r8, r8)
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	46c0      	nop			@ (mov r8, r8)
 80127a8:	20000d2c 	.word	0x20000d2c
 80127ac:	20000ce4 	.word	0x20000ce4

080127b0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80127b4:	4b07      	ldr	r3, [pc, #28]	@ (80127d4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80127b6:	0018      	movs	r0, r3
 80127b8:	f002 f86b 	bl	8014892 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80127bc:	4b06      	ldr	r3, [pc, #24]	@ (80127d8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80127be:	0018      	movs	r0, r3
 80127c0:	f002 f867 	bl	8014892 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80127c4:	4b05      	ldr	r3, [pc, #20]	@ (80127dc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80127c6:	0018      	movs	r0, r3
 80127c8:	f002 f863 	bl	8014892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80127cc:	46c0      	nop			@ (mov r8, r8)
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	46c0      	nop			@ (mov r8, r8)
 80127d4:	20000db0 	.word	0x20000db0
 80127d8:	20002150 	.word	0x20002150
 80127dc:	20002198 	.word	0x20002198

080127e0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80127e4:	4b03      	ldr	r3, [pc, #12]	@ (80127f4 <USART4_5_IRQHandler+0x14>)
 80127e6:	0018      	movs	r0, r3
 80127e8:	f00a f956 	bl	801ca98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80127ec:	46c0      	nop			@ (mov r8, r8)
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	46c0      	nop			@ (mov r8, r8)
 80127f4:	20002098 	.word	0x20002098

080127f8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80127fc:	4b09      	ldr	r3, [pc, #36]	@ (8012824 <I2C1_IRQHandler+0x2c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	699a      	ldr	r2, [r3, #24]
 8012802:	23e0      	movs	r3, #224	@ 0xe0
 8012804:	00db      	lsls	r3, r3, #3
 8012806:	4013      	ands	r3, r2
 8012808:	d004      	beq.n	8012814 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 801280a:	4b06      	ldr	r3, [pc, #24]	@ (8012824 <I2C1_IRQHandler+0x2c>)
 801280c:	0018      	movs	r0, r3
 801280e:	f003 fbcd 	bl	8015fac <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8012812:	e003      	b.n	801281c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8012814:	4b03      	ldr	r3, [pc, #12]	@ (8012824 <I2C1_IRQHandler+0x2c>)
 8012816:	0018      	movs	r0, r3
 8012818:	f003 fbae 	bl	8015f78 <HAL_I2C_EV_IRQHandler>
}
 801281c:	46c0      	nop			@ (mov r8, r8)
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	46c0      	nop			@ (mov r8, r8)
 8012824:	20000c3c 	.word	0x20000c3c

08012828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801282c:	4b03      	ldr	r3, [pc, #12]	@ (801283c <USART1_IRQHandler+0x14>)
 801282e:	0018      	movs	r0, r3
 8012830:	f00a f932 	bl	801ca98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012834:	46c0      	nop			@ (mov r8, r8)
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	46c0      	nop			@ (mov r8, r8)
 801283c:	20001fe0 	.word	0x20001fe0

08012840 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8012844:	4b03      	ldr	r3, [pc, #12]	@ (8012854 <USB_IRQHandler+0x14>)
 8012846:	0018      	movs	r0, r3
 8012848:	f006 f864 	bl	8018914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 801284c:	46c0      	nop			@ (mov r8, r8)
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	46c0      	nop			@ (mov r8, r8)
 8012854:	20002fb4 	.word	0x20002fb4

08012858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	af00      	add	r7, sp, #0
  return 1;
 801285c:	2301      	movs	r3, #1
}
 801285e:	0018      	movs	r0, r3
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <_kill>:

int _kill(int pid, int sig)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801286e:	f013 f829 	bl	80258c4 <__errno>
 8012872:	0003      	movs	r3, r0
 8012874:	2216      	movs	r2, #22
 8012876:	601a      	str	r2, [r3, #0]
  return -1;
 8012878:	2301      	movs	r3, #1
 801287a:	425b      	negs	r3, r3
}
 801287c:	0018      	movs	r0, r3
 801287e:	46bd      	mov	sp, r7
 8012880:	b002      	add	sp, #8
 8012882:	bd80      	pop	{r7, pc}

08012884 <_exit>:

void _exit (int status)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801288c:	2301      	movs	r3, #1
 801288e:	425a      	negs	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	0011      	movs	r1, r2
 8012894:	0018      	movs	r0, r3
 8012896:	f7ff ffe5 	bl	8012864 <_kill>
  while (1) {}    /* Make sure we hang here */
 801289a:	46c0      	nop			@ (mov r8, r8)
 801289c:	e7fd      	b.n	801289a <_exit+0x16>

0801289e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801289e:	b580      	push	{r7, lr}
 80128a0:	b086      	sub	sp, #24
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	60f8      	str	r0, [r7, #12]
 80128a6:	60b9      	str	r1, [r7, #8]
 80128a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128aa:	2300      	movs	r3, #0
 80128ac:	617b      	str	r3, [r7, #20]
 80128ae:	e00a      	b.n	80128c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80128b0:	e000      	b.n	80128b4 <_read+0x16>
 80128b2:	bf00      	nop
 80128b4:	0001      	movs	r1, r0
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	60ba      	str	r2, [r7, #8]
 80128bc:	b2ca      	uxtb	r2, r1
 80128be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	3301      	adds	r3, #1
 80128c4:	617b      	str	r3, [r7, #20]
 80128c6:	697a      	ldr	r2, [r7, #20]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	dbf0      	blt.n	80128b0 <_read+0x12>
  }

  return len;
 80128ce:	687b      	ldr	r3, [r7, #4]
}
 80128d0:	0018      	movs	r0, r3
 80128d2:	46bd      	mov	sp, r7
 80128d4:	b006      	add	sp, #24
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80128e0:	2301      	movs	r3, #1
 80128e2:	425b      	negs	r3, r3
}
 80128e4:	0018      	movs	r0, r3
 80128e6:	46bd      	mov	sp, r7
 80128e8:	b002      	add	sp, #8
 80128ea:	bd80      	pop	{r7, pc}

080128ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	2280      	movs	r2, #128	@ 0x80
 80128fa:	0192      	lsls	r2, r2, #6
 80128fc:	605a      	str	r2, [r3, #4]
  return 0;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	0018      	movs	r0, r3
 8012902:	46bd      	mov	sp, r7
 8012904:	b002      	add	sp, #8
 8012906:	bd80      	pop	{r7, pc}

08012908 <_isatty>:

int _isatty(int file)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012910:	2301      	movs	r3, #1
}
 8012912:	0018      	movs	r0, r3
 8012914:	46bd      	mov	sp, r7
 8012916:	b002      	add	sp, #8
 8012918:	bd80      	pop	{r7, pc}

0801291a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b084      	sub	sp, #16
 801291e:	af00      	add	r7, sp, #0
 8012920:	60f8      	str	r0, [r7, #12]
 8012922:	60b9      	str	r1, [r7, #8]
 8012924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012926:	2300      	movs	r3, #0
}
 8012928:	0018      	movs	r0, r3
 801292a:	46bd      	mov	sp, r7
 801292c:	b004      	add	sp, #16
 801292e:	bd80      	pop	{r7, pc}

08012930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012938:	4a14      	ldr	r2, [pc, #80]	@ (801298c <_sbrk+0x5c>)
 801293a:	4b15      	ldr	r3, [pc, #84]	@ (8012990 <_sbrk+0x60>)
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012944:	4b13      	ldr	r3, [pc, #76]	@ (8012994 <_sbrk+0x64>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801294c:	4b11      	ldr	r3, [pc, #68]	@ (8012994 <_sbrk+0x64>)
 801294e:	4a12      	ldr	r2, [pc, #72]	@ (8012998 <_sbrk+0x68>)
 8012950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012952:	4b10      	ldr	r3, [pc, #64]	@ (8012994 <_sbrk+0x64>)
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	18d3      	adds	r3, r2, r3
 801295a:	693a      	ldr	r2, [r7, #16]
 801295c:	429a      	cmp	r2, r3
 801295e:	d207      	bcs.n	8012970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012960:	f012 ffb0 	bl	80258c4 <__errno>
 8012964:	0003      	movs	r3, r0
 8012966:	220c      	movs	r2, #12
 8012968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801296a:	2301      	movs	r3, #1
 801296c:	425b      	negs	r3, r3
 801296e:	e009      	b.n	8012984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012970:	4b08      	ldr	r3, [pc, #32]	@ (8012994 <_sbrk+0x64>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012976:	4b07      	ldr	r3, [pc, #28]	@ (8012994 <_sbrk+0x64>)
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	18d2      	adds	r2, r2, r3
 801297e:	4b05      	ldr	r3, [pc, #20]	@ (8012994 <_sbrk+0x64>)
 8012980:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012982:	68fb      	ldr	r3, [r7, #12]
}
 8012984:	0018      	movs	r0, r3
 8012986:	46bd      	mov	sp, r7
 8012988:	b006      	add	sp, #24
 801298a:	bd80      	pop	{r7, pc}
 801298c:	20005000 	.word	0x20005000
 8012990:	00000400 	.word	0x00000400
 8012994:	20001e64 	.word	0x20001e64
 8012998:	20003618 	.word	0x20003618

0801299c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80129a0:	46c0      	nop			@ (mov r8, r8)
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80129ae:	2310      	movs	r3, #16
 80129b0:	18fb      	adds	r3, r7, r3
 80129b2:	0018      	movs	r0, r3
 80129b4:	2308      	movs	r3, #8
 80129b6:	001a      	movs	r2, r3
 80129b8:	2100      	movs	r1, #0
 80129ba:	f012 fedf 	bl	802577c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80129be:	003b      	movs	r3, r7
 80129c0:	0018      	movs	r0, r3
 80129c2:	2310      	movs	r3, #16
 80129c4:	001a      	movs	r2, r3
 80129c6:	2100      	movs	r1, #0
 80129c8:	f012 fed8 	bl	802577c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80129cc:	4b2e      	ldr	r3, [pc, #184]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129ce:	2280      	movs	r2, #128	@ 0x80
 80129d0:	05d2      	lsls	r2, r2, #23
 80129d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80129d4:	4b2c      	ldr	r3, [pc, #176]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129da:	4b2b      	ldr	r3, [pc, #172]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129dc:	2200      	movs	r2, #0
 80129de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80129e0:	4b29      	ldr	r3, [pc, #164]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129e2:	4a2a      	ldr	r2, [pc, #168]	@ (8012a8c <MX_TIM2_Init+0xe4>)
 80129e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80129e6:	4b28      	ldr	r3, [pc, #160]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80129ec:	4b26      	ldr	r3, [pc, #152]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129ee:	2200      	movs	r2, #0
 80129f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80129f2:	4b25      	ldr	r3, [pc, #148]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 80129f4:	0018      	movs	r0, r3
 80129f6:	f009 fa63 	bl	801bec0 <HAL_TIM_PWM_Init>
 80129fa:	1e03      	subs	r3, r0, #0
 80129fc:	d001      	beq.n	8012a02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80129fe:	f7f9 ff67 	bl	800c8d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012a02:	2110      	movs	r1, #16
 8012a04:	187b      	adds	r3, r7, r1
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012a0a:	187b      	adds	r3, r7, r1
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012a10:	187a      	adds	r2, r7, r1
 8012a12:	4b1d      	ldr	r3, [pc, #116]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 8012a14:	0011      	movs	r1, r2
 8012a16:	0018      	movs	r0, r3
 8012a18:	f009 fd70 	bl	801c4fc <HAL_TIMEx_MasterConfigSynchronization>
 8012a1c:	1e03      	subs	r3, r0, #0
 8012a1e:	d001      	beq.n	8012a24 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8012a20:	f7f9 ff56 	bl	800c8d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012a24:	003b      	movs	r3, r7
 8012a26:	2260      	movs	r2, #96	@ 0x60
 8012a28:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012a2a:	003b      	movs	r3, r7
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012a30:	003b      	movs	r3, r7
 8012a32:	2200      	movs	r2, #0
 8012a34:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012a36:	003b      	movs	r3, r7
 8012a38:	2200      	movs	r2, #0
 8012a3a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012a3c:	0039      	movs	r1, r7
 8012a3e:	4b12      	ldr	r3, [pc, #72]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 8012a40:	2200      	movs	r2, #0
 8012a42:	0018      	movs	r0, r3
 8012a44:	f009 fb0e 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012a48:	1e03      	subs	r3, r0, #0
 8012a4a:	d001      	beq.n	8012a50 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012a4c:	f7f9 ff40 	bl	800c8d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012a50:	0039      	movs	r1, r7
 8012a52:	4b0d      	ldr	r3, [pc, #52]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 8012a54:	2208      	movs	r2, #8
 8012a56:	0018      	movs	r0, r3
 8012a58:	f009 fb04 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012a5c:	1e03      	subs	r3, r0, #0
 8012a5e:	d001      	beq.n	8012a64 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8012a60:	f7f9 ff36 	bl	800c8d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012a64:	0039      	movs	r1, r7
 8012a66:	4b08      	ldr	r3, [pc, #32]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 8012a68:	220c      	movs	r2, #12
 8012a6a:	0018      	movs	r0, r3
 8012a6c:	f009 fafa 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012a70:	1e03      	subs	r3, r0, #0
 8012a72:	d001      	beq.n	8012a78 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8012a74:	f7f9 ff2c 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8012a78:	4b03      	ldr	r3, [pc, #12]	@ (8012a88 <MX_TIM2_Init+0xe0>)
 8012a7a:	0018      	movs	r0, r3
 8012a7c:	f000 f8fe 	bl	8012c7c <HAL_TIM_MspPostInit>

}
 8012a80:	46c0      	nop			@ (mov r8, r8)
 8012a82:	46bd      	mov	sp, r7
 8012a84:	b006      	add	sp, #24
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	20001e68 	.word	0x20001e68
 8012a8c:	0000ffff 	.word	0x0000ffff

08012a90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012a96:	2310      	movs	r3, #16
 8012a98:	18fb      	adds	r3, r7, r3
 8012a9a:	0018      	movs	r0, r3
 8012a9c:	2308      	movs	r3, #8
 8012a9e:	001a      	movs	r2, r3
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	f012 fe6b 	bl	802577c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012aa6:	003b      	movs	r3, r7
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	2310      	movs	r3, #16
 8012aac:	001a      	movs	r2, r3
 8012aae:	2100      	movs	r1, #0
 8012ab0:	f012 fe64 	bl	802577c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012ab4:	4b32      	ldr	r3, [pc, #200]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ab6:	4a33      	ldr	r2, [pc, #204]	@ (8012b84 <MX_TIM3_Init+0xf4>)
 8012ab8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012aba:	4b31      	ldr	r3, [pc, #196]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8012b88 <MX_TIM3_Init+0xf8>)
 8012aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012acc:	4b2c      	ldr	r3, [pc, #176]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012ad8:	4b29      	ldr	r3, [pc, #164]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012ada:	0018      	movs	r0, r3
 8012adc:	f009 f9f0 	bl	801bec0 <HAL_TIM_PWM_Init>
 8012ae0:	1e03      	subs	r3, r0, #0
 8012ae2:	d001      	beq.n	8012ae8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012ae4:	f7f9 fef4 	bl	800c8d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ae8:	2110      	movs	r1, #16
 8012aea:	187b      	adds	r3, r7, r1
 8012aec:	2200      	movs	r2, #0
 8012aee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012af0:	187b      	adds	r3, r7, r1
 8012af2:	2200      	movs	r2, #0
 8012af4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012af6:	187a      	adds	r2, r7, r1
 8012af8:	4b21      	ldr	r3, [pc, #132]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012afa:	0011      	movs	r1, r2
 8012afc:	0018      	movs	r0, r3
 8012afe:	f009 fcfd 	bl	801c4fc <HAL_TIMEx_MasterConfigSynchronization>
 8012b02:	1e03      	subs	r3, r0, #0
 8012b04:	d001      	beq.n	8012b0a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012b06:	f7f9 fee3 	bl	800c8d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012b0a:	003b      	movs	r3, r7
 8012b0c:	2260      	movs	r2, #96	@ 0x60
 8012b0e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012b10:	003b      	movs	r3, r7
 8012b12:	2200      	movs	r2, #0
 8012b14:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012b16:	003b      	movs	r3, r7
 8012b18:	2200      	movs	r2, #0
 8012b1a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012b1c:	003b      	movs	r3, r7
 8012b1e:	2200      	movs	r2, #0
 8012b20:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012b22:	0039      	movs	r1, r7
 8012b24:	4b16      	ldr	r3, [pc, #88]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	0018      	movs	r0, r3
 8012b2a:	f009 fa9b 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012b2e:	1e03      	subs	r3, r0, #0
 8012b30:	d001      	beq.n	8012b36 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8012b32:	f7f9 fecd 	bl	800c8d0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012b36:	4b12      	ldr	r3, [pc, #72]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012b38:	2104      	movs	r1, #4
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	f009 fd3c 	bl	801c5b8 <HAL_TIMEx_RemapConfig>
 8012b40:	1e03      	subs	r3, r0, #0
 8012b42:	d001      	beq.n	8012b48 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012b44:	f7f9 fec4 	bl	800c8d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012b48:	0039      	movs	r1, r7
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012b4c:	2204      	movs	r2, #4
 8012b4e:	0018      	movs	r0, r3
 8012b50:	f009 fa88 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012b54:	1e03      	subs	r3, r0, #0
 8012b56:	d001      	beq.n	8012b5c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012b58:	f7f9 feba 	bl	800c8d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012b5c:	0039      	movs	r1, r7
 8012b5e:	4b08      	ldr	r3, [pc, #32]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012b60:	2208      	movs	r2, #8
 8012b62:	0018      	movs	r0, r3
 8012b64:	f009 fa7e 	bl	801c064 <HAL_TIM_PWM_ConfigChannel>
 8012b68:	1e03      	subs	r3, r0, #0
 8012b6a:	d001      	beq.n	8012b70 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012b6c:	f7f9 feb0 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012b70:	4b03      	ldr	r3, [pc, #12]	@ (8012b80 <MX_TIM3_Init+0xf0>)
 8012b72:	0018      	movs	r0, r3
 8012b74:	f000 f882 	bl	8012c7c <HAL_TIM_MspPostInit>

}
 8012b78:	46c0      	nop			@ (mov r8, r8)
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	b006      	add	sp, #24
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	20001ea8 	.word	0x20001ea8
 8012b84:	40000400 	.word	0x40000400
 8012b88:	0000ffff 	.word	0x0000ffff

08012b8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012b92:	003b      	movs	r3, r7
 8012b94:	0018      	movs	r0, r3
 8012b96:	2308      	movs	r3, #8
 8012b98:	001a      	movs	r2, r3
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	f012 fdee 	bl	802577c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012ba0:	4b15      	ldr	r3, [pc, #84]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012ba2:	4a16      	ldr	r2, [pc, #88]	@ (8012bfc <MX_TIM6_Init+0x70>)
 8012ba4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8012ba6:	4b14      	ldr	r3, [pc, #80]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012ba8:	220a      	movs	r2, #10
 8012baa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012bac:	4b12      	ldr	r3, [pc, #72]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012bae:	2200      	movs	r2, #0
 8012bb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012bb2:	4b11      	ldr	r3, [pc, #68]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012bb4:	4a12      	ldr	r2, [pc, #72]	@ (8012c00 <MX_TIM6_Init+0x74>)
 8012bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012bba:	2200      	movs	r2, #0
 8012bbc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012bc0:	0018      	movs	r0, r3
 8012bc2:	f009 f8d5 	bl	801bd70 <HAL_TIM_Base_Init>
 8012bc6:	1e03      	subs	r3, r0, #0
 8012bc8:	d001      	beq.n	8012bce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8012bca:	f7f9 fe81 	bl	800c8d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012bce:	003b      	movs	r3, r7
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012bd4:	003b      	movs	r3, r7
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012bda:	003a      	movs	r2, r7
 8012bdc:	4b06      	ldr	r3, [pc, #24]	@ (8012bf8 <MX_TIM6_Init+0x6c>)
 8012bde:	0011      	movs	r1, r2
 8012be0:	0018      	movs	r0, r3
 8012be2:	f009 fc8b 	bl	801c4fc <HAL_TIMEx_MasterConfigSynchronization>
 8012be6:	1e03      	subs	r3, r0, #0
 8012be8:	d001      	beq.n	8012bee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012bea:	f7f9 fe71 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012bee:	46c0      	nop			@ (mov r8, r8)
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	b002      	add	sp, #8
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	46c0      	nop			@ (mov r8, r8)
 8012bf8:	20001ee8 	.word	0x20001ee8
 8012bfc:	40001000 	.word	0x40001000
 8012c00:	0000ffff 	.word	0x0000ffff

08012c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	2380      	movs	r3, #128	@ 0x80
 8012c12:	05db      	lsls	r3, r3, #23
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d106      	bne.n	8012c26 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012c18:	4b0a      	ldr	r3, [pc, #40]	@ (8012c44 <HAL_TIM_PWM_MspInit+0x40>)
 8012c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c1c:	4b09      	ldr	r3, [pc, #36]	@ (8012c44 <HAL_TIM_PWM_MspInit+0x40>)
 8012c1e:	2101      	movs	r1, #1
 8012c20:	430a      	orrs	r2, r1
 8012c22:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012c24:	e00a      	b.n	8012c3c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4a07      	ldr	r2, [pc, #28]	@ (8012c48 <HAL_TIM_PWM_MspInit+0x44>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d105      	bne.n	8012c3c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012c30:	4b04      	ldr	r3, [pc, #16]	@ (8012c44 <HAL_TIM_PWM_MspInit+0x40>)
 8012c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c34:	4b03      	ldr	r3, [pc, #12]	@ (8012c44 <HAL_TIM_PWM_MspInit+0x40>)
 8012c36:	2102      	movs	r1, #2
 8012c38:	430a      	orrs	r2, r1
 8012c3a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012c3c:	46c0      	nop			@ (mov r8, r8)
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	b002      	add	sp, #8
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	40021000 	.word	0x40021000
 8012c48:	40000400 	.word	0x40000400

08012c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a06      	ldr	r2, [pc, #24]	@ (8012c74 <HAL_TIM_Base_MspInit+0x28>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d105      	bne.n	8012c6a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012c5e:	4b06      	ldr	r3, [pc, #24]	@ (8012c78 <HAL_TIM_Base_MspInit+0x2c>)
 8012c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c62:	4b05      	ldr	r3, [pc, #20]	@ (8012c78 <HAL_TIM_Base_MspInit+0x2c>)
 8012c64:	2110      	movs	r1, #16
 8012c66:	430a      	orrs	r2, r1
 8012c68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012c6a:	46c0      	nop			@ (mov r8, r8)
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	b002      	add	sp, #8
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	46c0      	nop			@ (mov r8, r8)
 8012c74:	40001000 	.word	0x40001000
 8012c78:	40021000 	.word	0x40021000

08012c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012c7c:	b590      	push	{r4, r7, lr}
 8012c7e:	b08b      	sub	sp, #44	@ 0x2c
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c84:	2414      	movs	r4, #20
 8012c86:	193b      	adds	r3, r7, r4
 8012c88:	0018      	movs	r0, r3
 8012c8a:	2314      	movs	r3, #20
 8012c8c:	001a      	movs	r2, r3
 8012c8e:	2100      	movs	r1, #0
 8012c90:	f012 fd74 	bl	802577c <memset>
  if(timHandle->Instance==TIM2)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681a      	ldr	r2, [r3, #0]
 8012c98:	2380      	movs	r3, #128	@ 0x80
 8012c9a:	05db      	lsls	r3, r3, #23
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d123      	bne.n	8012ce8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ca0:	4b27      	ldr	r3, [pc, #156]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ca4:	4b26      	ldr	r3, [pc, #152]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012ca6:	2101      	movs	r1, #1
 8012ca8:	430a      	orrs	r2, r1
 8012caa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012cac:	4b24      	ldr	r3, [pc, #144]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	4013      	ands	r3, r2
 8012cb4:	613b      	str	r3, [r7, #16]
 8012cb6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8012cb8:	0021      	movs	r1, r4
 8012cba:	187b      	adds	r3, r7, r1
 8012cbc:	220d      	movs	r2, #13
 8012cbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cc0:	187b      	adds	r3, r7, r1
 8012cc2:	2202      	movs	r2, #2
 8012cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cc6:	187b      	adds	r3, r7, r1
 8012cc8:	2200      	movs	r2, #0
 8012cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ccc:	187b      	adds	r3, r7, r1
 8012cce:	2200      	movs	r2, #0
 8012cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012cd2:	187b      	adds	r3, r7, r1
 8012cd4:	2202      	movs	r2, #2
 8012cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012cd8:	187a      	adds	r2, r7, r1
 8012cda:	23a0      	movs	r3, #160	@ 0xa0
 8012cdc:	05db      	lsls	r3, r3, #23
 8012cde:	0011      	movs	r1, r2
 8012ce0:	0018      	movs	r0, r3
 8012ce2:	f002 f88d 	bl	8014e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012ce6:	e027      	b.n	8012d38 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a15      	ldr	r2, [pc, #84]	@ (8012d44 <HAL_TIM_MspPostInit+0xc8>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d122      	bne.n	8012d38 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012cf2:	4b13      	ldr	r3, [pc, #76]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cf6:	4b12      	ldr	r3, [pc, #72]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012cf8:	2104      	movs	r1, #4
 8012cfa:	430a      	orrs	r2, r1
 8012cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012cfe:	4b10      	ldr	r3, [pc, #64]	@ (8012d40 <HAL_TIM_MspPostInit+0xc4>)
 8012d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d02:	2204      	movs	r2, #4
 8012d04:	4013      	ands	r3, r2
 8012d06:	60fb      	str	r3, [r7, #12]
 8012d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012d0a:	2114      	movs	r1, #20
 8012d0c:	187b      	adds	r3, r7, r1
 8012d0e:	22e0      	movs	r2, #224	@ 0xe0
 8012d10:	0052      	lsls	r2, r2, #1
 8012d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d14:	187b      	adds	r3, r7, r1
 8012d16:	2202      	movs	r2, #2
 8012d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d1a:	187b      	adds	r3, r7, r1
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d20:	187b      	adds	r3, r7, r1
 8012d22:	2200      	movs	r2, #0
 8012d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012d26:	187b      	adds	r3, r7, r1
 8012d28:	2202      	movs	r2, #2
 8012d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d2c:	187b      	adds	r3, r7, r1
 8012d2e:	4a06      	ldr	r2, [pc, #24]	@ (8012d48 <HAL_TIM_MspPostInit+0xcc>)
 8012d30:	0019      	movs	r1, r3
 8012d32:	0010      	movs	r0, r2
 8012d34:	f002 f864 	bl	8014e00 <HAL_GPIO_Init>
}
 8012d38:	46c0      	nop			@ (mov r8, r8)
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	b00b      	add	sp, #44	@ 0x2c
 8012d3e:	bd90      	pop	{r4, r7, pc}
 8012d40:	40021000 	.word	0x40021000
 8012d44:	40000400 	.word	0x40000400
 8012d48:	50000800 	.word	0x50000800

08012d4c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012d50:	4b17      	ldr	r3, [pc, #92]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d52:	4a18      	ldr	r2, [pc, #96]	@ (8012db4 <MX_LPUART1_UART_Init+0x68>)
 8012d54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012d56:	4b16      	ldr	r3, [pc, #88]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d58:	22e1      	movs	r2, #225	@ 0xe1
 8012d5a:	0252      	lsls	r2, r2, #9
 8012d5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012d5e:	4b14      	ldr	r3, [pc, #80]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012d64:	4b12      	ldr	r3, [pc, #72]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012d6a:	4b11      	ldr	r3, [pc, #68]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012d70:	4b0f      	ldr	r3, [pc, #60]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d72:	220c      	movs	r2, #12
 8012d74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012d76:	4b0e      	ldr	r3, [pc, #56]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8012d82:	4b0b      	ldr	r3, [pc, #44]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d84:	2218      	movs	r2, #24
 8012d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8012d88:	4b09      	ldr	r3, [pc, #36]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d8a:	2280      	movs	r2, #128	@ 0x80
 8012d8c:	0212      	lsls	r2, r2, #8
 8012d8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8012d90:	4b07      	ldr	r3, [pc, #28]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d92:	2280      	movs	r2, #128	@ 0x80
 8012d94:	0152      	lsls	r2, r2, #5
 8012d96:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012d98:	4b05      	ldr	r3, [pc, #20]	@ (8012db0 <MX_LPUART1_UART_Init+0x64>)
 8012d9a:	0018      	movs	r0, r3
 8012d9c:	f009 fc2a 	bl	801c5f4 <HAL_UART_Init>
 8012da0:	1e03      	subs	r3, r0, #0
 8012da2:	d001      	beq.n	8012da8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8012da4:	f7f9 fd94 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012da8:	46c0      	nop			@ (mov r8, r8)
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	46c0      	nop			@ (mov r8, r8)
 8012db0:	20001f28 	.word	0x20001f28
 8012db4:	40004800 	.word	0x40004800

08012db8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012dbc:	4b14      	ldr	r3, [pc, #80]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dbe:	4a15      	ldr	r2, [pc, #84]	@ (8012e14 <MX_USART1_UART_Init+0x5c>)
 8012dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012dc2:	4b13      	ldr	r3, [pc, #76]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dc4:	22e1      	movs	r2, #225	@ 0xe1
 8012dc6:	0252      	lsls	r2, r2, #9
 8012dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012dca:	4b11      	ldr	r3, [pc, #68]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dcc:	2200      	movs	r2, #0
 8012dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dd8:	2200      	movs	r2, #0
 8012dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dde:	220c      	movs	r2, #12
 8012de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012de2:	4b0b      	ldr	r3, [pc, #44]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012de4:	2200      	movs	r2, #0
 8012de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012de8:	4b09      	ldr	r3, [pc, #36]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dea:	2200      	movs	r2, #0
 8012dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012dee:	4b08      	ldr	r3, [pc, #32]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012df4:	4b06      	ldr	r3, [pc, #24]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012dfa:	4b05      	ldr	r3, [pc, #20]	@ (8012e10 <MX_USART1_UART_Init+0x58>)
 8012dfc:	0018      	movs	r0, r3
 8012dfe:	f009 fbf9 	bl	801c5f4 <HAL_UART_Init>
 8012e02:	1e03      	subs	r3, r0, #0
 8012e04:	d001      	beq.n	8012e0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012e06:	f7f9 fd63 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012e0a:	46c0      	nop			@ (mov r8, r8)
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	20001fe0 	.word	0x20001fe0
 8012e14:	40013800 	.word	0x40013800

08012e18 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012e1c:	4b14      	ldr	r3, [pc, #80]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e1e:	4a15      	ldr	r2, [pc, #84]	@ (8012e74 <MX_USART4_UART_Init+0x5c>)
 8012e20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8012e22:	4b13      	ldr	r3, [pc, #76]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e24:	22e1      	movs	r2, #225	@ 0xe1
 8012e26:	0252      	lsls	r2, r2, #9
 8012e28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012e2a:	4b11      	ldr	r3, [pc, #68]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8012e30:	4b0f      	ldr	r3, [pc, #60]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012e36:	4b0e      	ldr	r3, [pc, #56]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e38:	2200      	movs	r2, #0
 8012e3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e3e:	220c      	movs	r2, #12
 8012e40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012e42:	4b0b      	ldr	r3, [pc, #44]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e44:	2200      	movs	r2, #0
 8012e46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012e48:	4b09      	ldr	r3, [pc, #36]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012e4e:	4b08      	ldr	r3, [pc, #32]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e50:	2200      	movs	r2, #0
 8012e52:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012e54:	4b06      	ldr	r3, [pc, #24]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e56:	2200      	movs	r2, #0
 8012e58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8012e5a:	4b05      	ldr	r3, [pc, #20]	@ (8012e70 <MX_USART4_UART_Init+0x58>)
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f009 fbc9 	bl	801c5f4 <HAL_UART_Init>
 8012e62:	1e03      	subs	r3, r0, #0
 8012e64:	d001      	beq.n	8012e6a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8012e66:	f7f9 fd33 	bl	800c8d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8012e6a:	46c0      	nop			@ (mov r8, r8)
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	20002098 	.word	0x20002098
 8012e74:	40004c00 	.word	0x40004c00

08012e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012e78:	b590      	push	{r4, r7, lr}
 8012e7a:	b08d      	sub	sp, #52	@ 0x34
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e80:	241c      	movs	r4, #28
 8012e82:	193b      	adds	r3, r7, r4
 8012e84:	0018      	movs	r0, r3
 8012e86:	2314      	movs	r3, #20
 8012e88:	001a      	movs	r2, r3
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	f012 fc76 	bl	802577c <memset>
  if(uartHandle->Instance==LPUART1)
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4a8b      	ldr	r2, [pc, #556]	@ (80130c4 <HAL_UART_MspInit+0x24c>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d129      	bne.n	8012eee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012ea0:	2180      	movs	r1, #128	@ 0x80
 8012ea2:	02c9      	lsls	r1, r1, #11
 8012ea4:	430a      	orrs	r2, r1
 8012ea6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012ea8:	4b87      	ldr	r3, [pc, #540]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eac:	4b86      	ldr	r3, [pc, #536]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012eae:	2104      	movs	r1, #4
 8012eb0:	430a      	orrs	r2, r1
 8012eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012eb4:	4b84      	ldr	r3, [pc, #528]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eb8:	2204      	movs	r2, #4
 8012eba:	4013      	ands	r3, r2
 8012ebc:	61bb      	str	r3, [r7, #24]
 8012ebe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012ec0:	0021      	movs	r1, r4
 8012ec2:	187b      	adds	r3, r7, r1
 8012ec4:	2203      	movs	r2, #3
 8012ec6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ec8:	187b      	adds	r3, r7, r1
 8012eca:	2202      	movs	r2, #2
 8012ecc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ece:	187b      	adds	r3, r7, r1
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ed4:	187b      	adds	r3, r7, r1
 8012ed6:	2203      	movs	r2, #3
 8012ed8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8012eda:	187b      	adds	r3, r7, r1
 8012edc:	2206      	movs	r2, #6
 8012ede:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012ee0:	187b      	adds	r3, r7, r1
 8012ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80130cc <HAL_UART_MspInit+0x254>)
 8012ee4:	0019      	movs	r1, r3
 8012ee6:	0010      	movs	r0, r2
 8012ee8:	f001 ff8a 	bl	8014e00 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8012eec:	e0e5      	b.n	80130ba <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4a77      	ldr	r2, [pc, #476]	@ (80130d0 <HAL_UART_MspInit+0x258>)
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d133      	bne.n	8012f60 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012ef8:	4b73      	ldr	r3, [pc, #460]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012efc:	4b72      	ldr	r3, [pc, #456]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012efe:	2180      	movs	r1, #128	@ 0x80
 8012f00:	01c9      	lsls	r1, r1, #7
 8012f02:	430a      	orrs	r2, r1
 8012f04:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f06:	4b70      	ldr	r3, [pc, #448]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f0c:	2101      	movs	r1, #1
 8012f0e:	430a      	orrs	r2, r1
 8012f10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f12:	4b6d      	ldr	r3, [pc, #436]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f16:	2201      	movs	r2, #1
 8012f18:	4013      	ands	r3, r2
 8012f1a:	617b      	str	r3, [r7, #20]
 8012f1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012f1e:	211c      	movs	r1, #28
 8012f20:	187b      	adds	r3, r7, r1
 8012f22:	22c0      	movs	r2, #192	@ 0xc0
 8012f24:	00d2      	lsls	r2, r2, #3
 8012f26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f28:	187b      	adds	r3, r7, r1
 8012f2a:	2202      	movs	r2, #2
 8012f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f2e:	187b      	adds	r3, r7, r1
 8012f30:	2200      	movs	r2, #0
 8012f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f34:	187b      	adds	r3, r7, r1
 8012f36:	2203      	movs	r2, #3
 8012f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012f3a:	187b      	adds	r3, r7, r1
 8012f3c:	2204      	movs	r2, #4
 8012f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f40:	187a      	adds	r2, r7, r1
 8012f42:	23a0      	movs	r3, #160	@ 0xa0
 8012f44:	05db      	lsls	r3, r3, #23
 8012f46:	0011      	movs	r1, r2
 8012f48:	0018      	movs	r0, r3
 8012f4a:	f001 ff59 	bl	8014e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012f4e:	2200      	movs	r2, #0
 8012f50:	2100      	movs	r1, #0
 8012f52:	201b      	movs	r0, #27
 8012f54:	f001 fb02 	bl	801455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012f58:	201b      	movs	r0, #27
 8012f5a:	f001 fb14 	bl	8014586 <HAL_NVIC_EnableIRQ>
}
 8012f5e:	e0ac      	b.n	80130ba <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a5b      	ldr	r2, [pc, #364]	@ (80130d4 <HAL_UART_MspInit+0x25c>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d000      	beq.n	8012f6c <HAL_UART_MspInit+0xf4>
 8012f6a:	e0a6      	b.n	80130ba <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012f6c:	4b56      	ldr	r3, [pc, #344]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f70:	4b55      	ldr	r3, [pc, #340]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f72:	2180      	movs	r1, #128	@ 0x80
 8012f74:	0309      	lsls	r1, r1, #12
 8012f76:	430a      	orrs	r2, r1
 8012f78:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f7a:	4b53      	ldr	r3, [pc, #332]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f7e:	4b52      	ldr	r3, [pc, #328]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f80:	2101      	movs	r1, #1
 8012f82:	430a      	orrs	r2, r1
 8012f84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f86:	4b50      	ldr	r3, [pc, #320]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	4013      	ands	r3, r2
 8012f8e:	613b      	str	r3, [r7, #16]
 8012f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f92:	4b4d      	ldr	r3, [pc, #308]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f96:	4b4c      	ldr	r3, [pc, #304]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012f98:	2104      	movs	r1, #4
 8012f9a:	430a      	orrs	r2, r1
 8012f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80130c8 <HAL_UART_MspInit+0x250>)
 8012fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fa2:	2204      	movs	r2, #4
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012faa:	241c      	movs	r4, #28
 8012fac:	193b      	adds	r3, r7, r4
 8012fae:	2202      	movs	r2, #2
 8012fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012fb2:	193b      	adds	r3, r7, r4
 8012fb4:	2202      	movs	r2, #2
 8012fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fb8:	193b      	adds	r3, r7, r4
 8012fba:	2200      	movs	r2, #0
 8012fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012fbe:	193b      	adds	r3, r7, r4
 8012fc0:	2203      	movs	r2, #3
 8012fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012fc4:	193b      	adds	r3, r7, r4
 8012fc6:	2206      	movs	r2, #6
 8012fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012fca:	193a      	adds	r2, r7, r4
 8012fcc:	23a0      	movs	r3, #160	@ 0xa0
 8012fce:	05db      	lsls	r3, r3, #23
 8012fd0:	0011      	movs	r1, r2
 8012fd2:	0018      	movs	r0, r3
 8012fd4:	f001 ff14 	bl	8014e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012fd8:	0021      	movs	r1, r4
 8012fda:	187b      	adds	r3, r7, r1
 8012fdc:	2280      	movs	r2, #128	@ 0x80
 8012fde:	00d2      	lsls	r2, r2, #3
 8012fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012fe2:	187b      	adds	r3, r7, r1
 8012fe4:	2202      	movs	r2, #2
 8012fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fe8:	187b      	adds	r3, r7, r1
 8012fea:	2200      	movs	r2, #0
 8012fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012fee:	187b      	adds	r3, r7, r1
 8012ff0:	2203      	movs	r2, #3
 8012ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012ff4:	187b      	adds	r3, r7, r1
 8012ff6:	2206      	movs	r2, #6
 8012ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012ffa:	187b      	adds	r3, r7, r1
 8012ffc:	4a33      	ldr	r2, [pc, #204]	@ (80130cc <HAL_UART_MspInit+0x254>)
 8012ffe:	0019      	movs	r1, r3
 8013000:	0010      	movs	r0, r2
 8013002:	f001 fefd 	bl	8014e00 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013006:	4b34      	ldr	r3, [pc, #208]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013008:	4a34      	ldr	r2, [pc, #208]	@ (80130dc <HAL_UART_MspInit+0x264>)
 801300a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 801300c:	4b32      	ldr	r3, [pc, #200]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 801300e:	220c      	movs	r2, #12
 8013010:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013012:	4b31      	ldr	r3, [pc, #196]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013014:	2200      	movs	r2, #0
 8013016:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013018:	4b2f      	ldr	r3, [pc, #188]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 801301a:	2200      	movs	r2, #0
 801301c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801301e:	4b2e      	ldr	r3, [pc, #184]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013020:	2280      	movs	r2, #128	@ 0x80
 8013022:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013024:	4b2c      	ldr	r3, [pc, #176]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013026:	2200      	movs	r2, #0
 8013028:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801302a:	4b2b      	ldr	r3, [pc, #172]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 801302c:	2200      	movs	r2, #0
 801302e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013030:	4b29      	ldr	r3, [pc, #164]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013032:	2220      	movs	r2, #32
 8013034:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013036:	4b28      	ldr	r3, [pc, #160]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013038:	2200      	movs	r2, #0
 801303a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 801303c:	4b26      	ldr	r3, [pc, #152]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 801303e:	0018      	movs	r0, r3
 8013040:	f001 fac2 	bl	80145c8 <HAL_DMA_Init>
 8013044:	1e03      	subs	r3, r0, #0
 8013046:	d001      	beq.n	801304c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013048:	f7f9 fc42 	bl	800c8d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4a22      	ldr	r2, [pc, #136]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013050:	675a      	str	r2, [r3, #116]	@ 0x74
 8013052:	4b21      	ldr	r3, [pc, #132]	@ (80130d8 <HAL_UART_MspInit+0x260>)
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013058:	4b21      	ldr	r3, [pc, #132]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 801305a:	4a22      	ldr	r2, [pc, #136]	@ (80130e4 <HAL_UART_MspInit+0x26c>)
 801305c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801305e:	4b20      	ldr	r3, [pc, #128]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013060:	220c      	movs	r2, #12
 8013062:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013064:	4b1e      	ldr	r3, [pc, #120]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013066:	2210      	movs	r2, #16
 8013068:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801306a:	4b1d      	ldr	r3, [pc, #116]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 801306c:	2200      	movs	r2, #0
 801306e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013070:	4b1b      	ldr	r3, [pc, #108]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013072:	2280      	movs	r2, #128	@ 0x80
 8013074:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013076:	4b1a      	ldr	r3, [pc, #104]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013078:	2200      	movs	r2, #0
 801307a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801307c:	4b18      	ldr	r3, [pc, #96]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 801307e:	2200      	movs	r2, #0
 8013080:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013082:	4b17      	ldr	r3, [pc, #92]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013084:	2200      	movs	r2, #0
 8013086:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013088:	4b15      	ldr	r3, [pc, #84]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 801308a:	2200      	movs	r2, #0
 801308c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 801308e:	4b14      	ldr	r3, [pc, #80]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 8013090:	0018      	movs	r0, r3
 8013092:	f001 fa99 	bl	80145c8 <HAL_DMA_Init>
 8013096:	1e03      	subs	r3, r0, #0
 8013098:	d001      	beq.n	801309e <HAL_UART_MspInit+0x226>
      Error_Handler();
 801309a:	f7f9 fc19 	bl	800c8d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4a0f      	ldr	r2, [pc, #60]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 80130a2:	671a      	str	r2, [r3, #112]	@ 0x70
 80130a4:	4b0e      	ldr	r3, [pc, #56]	@ (80130e0 <HAL_UART_MspInit+0x268>)
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80130aa:	2200      	movs	r2, #0
 80130ac:	2100      	movs	r1, #0
 80130ae:	200e      	movs	r0, #14
 80130b0:	f001 fa54 	bl	801455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80130b4:	200e      	movs	r0, #14
 80130b6:	f001 fa66 	bl	8014586 <HAL_NVIC_EnableIRQ>
}
 80130ba:	46c0      	nop			@ (mov r8, r8)
 80130bc:	46bd      	mov	sp, r7
 80130be:	b00d      	add	sp, #52	@ 0x34
 80130c0:	bd90      	pop	{r4, r7, pc}
 80130c2:	46c0      	nop			@ (mov r8, r8)
 80130c4:	40004800 	.word	0x40004800
 80130c8:	40021000 	.word	0x40021000
 80130cc:	50000800 	.word	0x50000800
 80130d0:	40013800 	.word	0x40013800
 80130d4:	40004c00 	.word	0x40004c00
 80130d8:	20002150 	.word	0x20002150
 80130dc:	4002006c 	.word	0x4002006c
 80130e0:	20002198 	.word	0x20002198
 80130e4:	40020080 	.word	0x40020080

080130e8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b086      	sub	sp, #24
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80130f0:	f000 fd90 	bl	8013c14 <HAL_GetTick>
 80130f4:	0003      	movs	r3, r0
 80130f6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80130f8:	4b1c      	ldr	r3, [pc, #112]	@ (801316c <TimestampIsReached+0x84>)
 80130fa:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80130fc:	697a      	ldr	r2, [r7, #20]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	429a      	cmp	r2, r3
 8013102:	d307      	bcc.n	8013114 <TimestampIsReached+0x2c>
 8013104:	697a      	ldr	r2, [r7, #20]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	693a      	ldr	r2, [r7, #16]
 801310c:	429a      	cmp	r2, r3
 801310e:	d901      	bls.n	8013114 <TimestampIsReached+0x2c>
 8013110:	2201      	movs	r2, #1
 8013112:	e000      	b.n	8013116 <TimestampIsReached+0x2e>
 8013114:	2200      	movs	r2, #0
 8013116:	230f      	movs	r3, #15
 8013118:	18fb      	adds	r3, r7, r3
 801311a:	701a      	strb	r2, [r3, #0]
 801311c:	781a      	ldrb	r2, [r3, #0]
 801311e:	2101      	movs	r1, #1
 8013120:	400a      	ands	r2, r1
 8013122:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013124:	697a      	ldr	r2, [r7, #20]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	429a      	cmp	r2, r3
 801312a:	d207      	bcs.n	801313c <TimestampIsReached+0x54>
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	693a      	ldr	r2, [r7, #16]
 8013134:	429a      	cmp	r2, r3
 8013136:	d201      	bcs.n	801313c <TimestampIsReached+0x54>
 8013138:	2201      	movs	r2, #1
 801313a:	e000      	b.n	801313e <TimestampIsReached+0x56>
 801313c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801313e:	200e      	movs	r0, #14
 8013140:	183b      	adds	r3, r7, r0
 8013142:	701a      	strb	r2, [r3, #0]
 8013144:	781a      	ldrb	r2, [r3, #0]
 8013146:	2101      	movs	r1, #1
 8013148:	400a      	ands	r2, r1
 801314a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 801314c:	230f      	movs	r3, #15
 801314e:	18fb      	adds	r3, r7, r3
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d103      	bne.n	801315e <TimestampIsReached+0x76>
 8013156:	183b      	adds	r3, r7, r0
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801315e:	2301      	movs	r3, #1
 8013160:	e000      	b.n	8013164 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013162:	2300      	movs	r3, #0
}
 8013164:	0018      	movs	r0, r3
 8013166:	46bd      	mov	sp, r7
 8013168:	b006      	add	sp, #24
 801316a:	bd80      	pop	{r7, pc}
 801316c:	7fffffff 	.word	0x7fffffff

08013170 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013178:	f000 fd4c 	bl	8013c14 <HAL_GetTick>
 801317c:	0002      	movs	r2, r0
 801317e:	4904      	ldr	r1, [pc, #16]	@ (8013190 <AddTimestamp+0x20>)
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	0018      	movs	r0, r3
 8013184:	f012 f990 	bl	80254a8 <siprintf>
}
 8013188:	46c0      	nop			@ (mov r8, r8)
 801318a:	46bd      	mov	sp, r7
 801318c:	b002      	add	sp, #8
 801318e:	bd80      	pop	{r7, pc}
 8013190:	0802d460 	.word	0x0802d460

08013194 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013194:	b40c      	push	{r2, r3}
 8013196:	b5b0      	push	{r4, r5, r7, lr}
 8013198:	b0a4      	sub	sp, #144	@ 0x90
 801319a:	af00      	add	r7, sp, #0
 801319c:	0002      	movs	r2, r0
 801319e:	6039      	str	r1, [r7, #0]
 80131a0:	1dfb      	adds	r3, r7, #7
 80131a2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80131a4:	4b23      	ldr	r3, [pc, #140]	@ (8013234 <CreateLine+0xa0>)
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	1dfa      	adds	r2, r7, #7
 80131aa:	7812      	ldrb	r2, [r2, #0]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d839      	bhi.n	8013224 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80131b0:	683a      	ldr	r2, [r7, #0]
 80131b2:	4921      	ldr	r1, [pc, #132]	@ (8013238 <CreateLine+0xa4>)
 80131b4:	240c      	movs	r4, #12
 80131b6:	193b      	adds	r3, r7, r4
 80131b8:	0018      	movs	r0, r3
 80131ba:	f012 f975 	bl	80254a8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80131be:	4b1d      	ldr	r3, [pc, #116]	@ (8013234 <CreateLine+0xa0>)
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	2b01      	cmp	r3, #1
 80131c4:	d909      	bls.n	80131da <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80131c6:	193b      	adds	r3, r7, r4
 80131c8:	0018      	movs	r0, r3
 80131ca:	f7ec ffcf 	bl	800016c <strlen>
 80131ce:	0002      	movs	r2, r0
 80131d0:	193b      	adds	r3, r7, r4
 80131d2:	189b      	adds	r3, r3, r2
 80131d4:	0018      	movs	r0, r3
 80131d6:	f7ff ffcb 	bl	8013170 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80131da:	240c      	movs	r4, #12
 80131dc:	193b      	adds	r3, r7, r4
 80131de:	0018      	movs	r0, r3
 80131e0:	f7ec ffc4 	bl	800016c <strlen>
 80131e4:	0003      	movs	r3, r0
 80131e6:	218c      	movs	r1, #140	@ 0x8c
 80131e8:	187a      	adds	r2, r7, r1
 80131ea:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80131ec:	239c      	movs	r3, #156	@ 0x9c
 80131ee:	2508      	movs	r5, #8
 80131f0:	195b      	adds	r3, r3, r5
 80131f2:	19db      	adds	r3, r3, r7
 80131f4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80131f6:	193a      	adds	r2, r7, r4
 80131f8:	187b      	adds	r3, r7, r1
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	18d0      	adds	r0, r2, r3
 80131fe:	187b      	adds	r3, r7, r1
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2280      	movs	r2, #128	@ 0x80
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	0019      	movs	r1, r3
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2298      	movs	r2, #152	@ 0x98
 801320c:	1952      	adds	r2, r2, r5
 801320e:	19d2      	adds	r2, r2, r7
 8013210:	6812      	ldr	r2, [r2, #0]
 8013212:	f012 f9e5 	bl	80255e0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8013216:	193a      	adds	r2, r7, r4
 8013218:	4b08      	ldr	r3, [pc, #32]	@ (801323c <CreateLine+0xa8>)
 801321a:	0011      	movs	r1, r2
 801321c:	0018      	movs	r0, r3
 801321e:	f012 f8d3 	bl	80253c8 <iprintf>
 8013222:	e000      	b.n	8013226 <CreateLine+0x92>
    return;
 8013224:	46c0      	nop			@ (mov r8, r8)
}
 8013226:	46bd      	mov	sp, r7
 8013228:	b024      	add	sp, #144	@ 0x90
 801322a:	bcb0      	pop	{r4, r5, r7}
 801322c:	bc08      	pop	{r3}
 801322e:	b002      	add	sp, #8
 8013230:	4718      	bx	r3
 8013232:	46c0      	nop			@ (mov r8, r8)
 8013234:	200000e4 	.word	0x200000e4
 8013238:	0802d46c 	.word	0x0802d46c
 801323c:	0802d470 	.word	0x0802d470

08013240 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	b29a      	uxth	r2, r3
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	4804      	ldr	r0, [pc, #16]	@ (8013264 <_write+0x24>)
 8013254:	2364      	movs	r3, #100	@ 0x64
 8013256:	f009 fa33 	bl	801c6c0 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 801325a:	687b      	ldr	r3, [r7, #4]
}
 801325c:	0018      	movs	r0, r3
 801325e:	46bd      	mov	sp, r7
 8013260:	b004      	add	sp, #16
 8013262:	bd80      	pop	{r7, pc}
 8013264:	20001fe0 	.word	0x20001fe0

08013268 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	0002      	movs	r2, r0
 8013270:	1dfb      	adds	r3, r7, #7
 8013272:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013274:	4b03      	ldr	r3, [pc, #12]	@ (8013284 <SetVerboseLevel+0x1c>)
 8013276:	1dfa      	adds	r2, r7, #7
 8013278:	7812      	ldrb	r2, [r2, #0]
 801327a:	701a      	strb	r2, [r3, #0]
}
 801327c:	46c0      	nop			@ (mov r8, r8)
 801327e:	46bd      	mov	sp, r7
 8013280:	b002      	add	sp, #8
 8013282:	bd80      	pop	{r7, pc}
 8013284:	200000e4 	.word	0x200000e4

08013288 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013288:	b580      	push	{r7, lr}
 801328a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 801328c:	4b02      	ldr	r3, [pc, #8]	@ (8013298 <GetVerboseLevel+0x10>)
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	0018      	movs	r0, r3
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	46c0      	nop			@ (mov r8, r8)
 8013298:	200000e4 	.word	0x200000e4

0801329c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80132a2:	4a0f      	ldr	r2, [pc, #60]	@ (80132e0 <BinaryReleaseInfo+0x44>)
 80132a4:	4b0f      	ldr	r3, [pc, #60]	@ (80132e4 <BinaryReleaseInfo+0x48>)
 80132a6:	0019      	movs	r1, r3
 80132a8:	2002      	movs	r0, #2
 80132aa:	f7ff ff73 	bl	8013194 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80132ae:	480e      	ldr	r0, [pc, #56]	@ (80132e8 <BinaryReleaseInfo+0x4c>)
 80132b0:	4a0e      	ldr	r2, [pc, #56]	@ (80132ec <BinaryReleaseInfo+0x50>)
 80132b2:	490c      	ldr	r1, [pc, #48]	@ (80132e4 <BinaryReleaseInfo+0x48>)
 80132b4:	4b0e      	ldr	r3, [pc, #56]	@ (80132f0 <BinaryReleaseInfo+0x54>)
 80132b6:	9300      	str	r3, [sp, #0]
 80132b8:	0003      	movs	r3, r0
 80132ba:	2002      	movs	r0, #2
 80132bc:	f7ff ff6a 	bl	8013194 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 80132c0:	4b0c      	ldr	r3, [pc, #48]	@ (80132f4 <BinaryReleaseInfo+0x58>)
 80132c2:	4a0d      	ldr	r2, [pc, #52]	@ (80132f8 <BinaryReleaseInfo+0x5c>)
 80132c4:	4907      	ldr	r1, [pc, #28]	@ (80132e4 <BinaryReleaseInfo+0x48>)
 80132c6:	2002      	movs	r0, #2
 80132c8:	f7ff ff64 	bl	8013194 <CreateLine>
#ifdef DEBUG
  Info("Software version: %s, Debug build", SRC_VERSION);
 80132cc:	4b0b      	ldr	r3, [pc, #44]	@ (80132fc <BinaryReleaseInfo+0x60>)
 80132ce:	4a0c      	ldr	r2, [pc, #48]	@ (8013300 <BinaryReleaseInfo+0x64>)
 80132d0:	4904      	ldr	r1, [pc, #16]	@ (80132e4 <BinaryReleaseInfo+0x48>)
 80132d2:	2002      	movs	r0, #2
 80132d4:	f7ff ff5e 	bl	8013194 <CreateLine>
#else
  Info("Software version: %s, Release build", SRC_VERSION);
#endif
}
 80132d8:	46c0      	nop			@ (mov r8, r8)
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	46c0      	nop			@ (mov r8, r8)
 80132e0:	0802d478 	.word	0x0802d478
 80132e4:	0802d4a4 	.word	0x0802d4a4
 80132e8:	0802d4a8 	.word	0x0802d4a8
 80132ec:	0802d4b4 	.word	0x0802d4b4
 80132f0:	0802d4c8 	.word	0x0802d4c8
 80132f4:	0802d4d4 	.word	0x0802d4d4
 80132f8:	0802d4e0 	.word	0x0802d4e0
 80132fc:	0802d4e8 	.word	0x0802d4e8
 8013300:	0802d4f0 	.word	0x0802d4f0

08013304 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	68ba      	ldr	r2, [r7, #8]
 8013314:	68f9      	ldr	r1, [r7, #12]
 8013316:	4803      	ldr	r0, [pc, #12]	@ (8013324 <errorHandler+0x20>)
 8013318:	f012 f856 	bl	80253c8 <iprintf>
//    while (true)
//    {
//    }
}
 801331c:	46c0      	nop			@ (mov r8, r8)
 801331e:	46bd      	mov	sp, r7
 8013320:	b004      	add	sp, #16
 8013322:	bd80      	pop	{r7, pc}
 8013324:	0802d514 	.word	0x0802d514

08013328 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013328:	b590      	push	{r4, r7, lr}
 801332a:	b083      	sub	sp, #12
 801332c:	af00      	add	r7, sp, #0
 801332e:	6039      	str	r1, [r7, #0]
 8013330:	0011      	movs	r1, r2
 8013332:	1dfb      	adds	r3, r7, #7
 8013334:	1c02      	adds	r2, r0, #0
 8013336:	701a      	strb	r2, [r3, #0]
 8013338:	1dbb      	adds	r3, r7, #6
 801333a:	1c0a      	adds	r2, r1, #0
 801333c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 801333e:	4b0a      	ldr	r3, [pc, #40]	@ (8013368 <ReadRegister+0x40>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d00a      	beq.n	801335c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8013346:	4b08      	ldr	r3, [pc, #32]	@ (8013368 <ReadRegister+0x40>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	1dba      	adds	r2, r7, #6
 801334c:	7814      	ldrb	r4, [r2, #0]
 801334e:	6839      	ldr	r1, [r7, #0]
 8013350:	1dfa      	adds	r2, r7, #7
 8013352:	7810      	ldrb	r0, [r2, #0]
 8013354:	0022      	movs	r2, r4
 8013356:	4798      	blx	r3
 8013358:	0003      	movs	r3, r0
 801335a:	e000      	b.n	801335e <ReadRegister+0x36>
	}
	return false;
 801335c:	2300      	movs	r3, #0
}
 801335e:	0018      	movs	r0, r3
 8013360:	46bd      	mov	sp, r7
 8013362:	b003      	add	sp, #12
 8013364:	bd90      	pop	{r4, r7, pc}
 8013366:	46c0      	nop			@ (mov r8, r8)
 8013368:	200021e8 	.word	0x200021e8

0801336c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 801336c:	b590      	push	{r4, r7, lr}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6039      	str	r1, [r7, #0]
 8013374:	0011      	movs	r1, r2
 8013376:	1dfb      	adds	r3, r7, #7
 8013378:	1c02      	adds	r2, r0, #0
 801337a:	701a      	strb	r2, [r3, #0]
 801337c:	1dbb      	adds	r3, r7, #6
 801337e:	1c0a      	adds	r2, r1, #0
 8013380:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8013382:	4b0a      	ldr	r3, [pc, #40]	@ (80133ac <WriteRegister+0x40>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d00a      	beq.n	80133a0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801338a:	4b08      	ldr	r3, [pc, #32]	@ (80133ac <WriteRegister+0x40>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	1dba      	adds	r2, r7, #6
 8013390:	7814      	ldrb	r4, [r2, #0]
 8013392:	6839      	ldr	r1, [r7, #0]
 8013394:	1dfa      	adds	r2, r7, #7
 8013396:	7810      	ldrb	r0, [r2, #0]
 8013398:	0022      	movs	r2, r4
 801339a:	4798      	blx	r3
 801339c:	0003      	movs	r3, r0
 801339e:	e000      	b.n	80133a2 <WriteRegister+0x36>
  }
  return false;
 80133a0:	2300      	movs	r3, #0
}
 80133a2:	0018      	movs	r0, r3
 80133a4:	46bd      	mov	sp, r7
 80133a6:	b003      	add	sp, #12
 80133a8:	bd90      	pop	{r4, r7, pc}
 80133aa:	46c0      	nop			@ (mov r8, r8)
 80133ac:	200021ec 	.word	0x200021ec

080133b0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	000a      	movs	r2, r1
 80133ba:	1cfb      	adds	r3, r7, #3
 80133bc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80133be:	230f      	movs	r3, #15
 80133c0:	18fb      	adds	r3, r7, r3
 80133c2:	22ff      	movs	r2, #255	@ 0xff
 80133c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80133c6:	230e      	movs	r3, #14
 80133c8:	18fb      	adds	r3, r7, r3
 80133ca:	2200      	movs	r2, #0
 80133cc:	701a      	strb	r2, [r3, #0]
 80133ce:	e038      	b.n	8013442 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80133d0:	230e      	movs	r3, #14
 80133d2:	18fb      	adds	r3, r7, r3
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	18d3      	adds	r3, r2, r3
 80133da:	7819      	ldrb	r1, [r3, #0]
 80133dc:	220f      	movs	r2, #15
 80133de:	18bb      	adds	r3, r7, r2
 80133e0:	18ba      	adds	r2, r7, r2
 80133e2:	7812      	ldrb	r2, [r2, #0]
 80133e4:	404a      	eors	r2, r1
 80133e6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80133e8:	230d      	movs	r3, #13
 80133ea:	18fb      	adds	r3, r7, r3
 80133ec:	2200      	movs	r2, #0
 80133ee:	701a      	strb	r2, [r3, #0]
 80133f0:	e01c      	b.n	801342c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80133f2:	210f      	movs	r1, #15
 80133f4:	187b      	adds	r3, r7, r1
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	b25b      	sxtb	r3, r3
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	da0a      	bge.n	8013414 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80133fe:	187b      	adds	r3, r7, r1
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	b25b      	sxtb	r3, r3
 8013404:	18db      	adds	r3, r3, r3
 8013406:	b25b      	sxtb	r3, r3
 8013408:	2231      	movs	r2, #49	@ 0x31
 801340a:	4053      	eors	r3, r2
 801340c:	b25a      	sxtb	r2, r3
 801340e:	187b      	adds	r3, r7, r1
 8013410:	701a      	strb	r2, [r3, #0]
 8013412:	e005      	b.n	8013420 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8013414:	230f      	movs	r3, #15
 8013416:	18fa      	adds	r2, r7, r3
 8013418:	18fb      	adds	r3, r7, r3
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	18db      	adds	r3, r3, r3
 801341e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8013420:	210d      	movs	r1, #13
 8013422:	187b      	adds	r3, r7, r1
 8013424:	781a      	ldrb	r2, [r3, #0]
 8013426:	187b      	adds	r3, r7, r1
 8013428:	3201      	adds	r2, #1
 801342a:	701a      	strb	r2, [r3, #0]
 801342c:	230d      	movs	r3, #13
 801342e:	18fb      	adds	r3, r7, r3
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	2b07      	cmp	r3, #7
 8013434:	d9dd      	bls.n	80133f2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8013436:	210e      	movs	r1, #14
 8013438:	187b      	adds	r3, r7, r1
 801343a:	781a      	ldrb	r2, [r3, #0]
 801343c:	187b      	adds	r3, r7, r1
 801343e:	3201      	adds	r2, #1
 8013440:	701a      	strb	r2, [r3, #0]
 8013442:	230e      	movs	r3, #14
 8013444:	18fa      	adds	r2, r7, r3
 8013446:	1cfb      	adds	r3, r7, #3
 8013448:	7812      	ldrb	r2, [r2, #0]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	429a      	cmp	r2, r3
 801344e:	d3bf      	bcc.n	80133d0 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8013450:	230f      	movs	r3, #15
 8013452:	18fb      	adds	r3, r7, r3
 8013454:	781b      	ldrb	r3, [r3, #0]
}
 8013456:	0018      	movs	r0, r3
 8013458:	46bd      	mov	sp, r7
 801345a:	b004      	add	sp, #16
 801345c:	bd80      	pop	{r7, pc}
	...

08013460 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8013460:	b5b0      	push	{r4, r5, r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	1c18      	adds	r0, r3, #0
 8013470:	f7f0 fa10 	bl	8003894 <__aeabi_f2d>
 8013474:	4a2e      	ldr	r2, [pc, #184]	@ (8013530 <HIDS_DewPointCalculation+0xd0>)
 8013476:	4b2f      	ldr	r3, [pc, #188]	@ (8013534 <HIDS_DewPointCalculation+0xd4>)
 8013478:	f7ef fa6c 	bl	8002954 <__aeabi_dmul>
 801347c:	0002      	movs	r2, r0
 801347e:	000b      	movs	r3, r1
 8013480:	0014      	movs	r4, r2
 8013482:	001d      	movs	r5, r3
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	1c18      	adds	r0, r3, #0
 801348a:	f7f0 fa03 	bl	8003894 <__aeabi_f2d>
 801348e:	4a2a      	ldr	r2, [pc, #168]	@ (8013538 <HIDS_DewPointCalculation+0xd8>)
 8013490:	4b2a      	ldr	r3, [pc, #168]	@ (801353c <HIDS_DewPointCalculation+0xdc>)
 8013492:	f7ee fa5f 	bl	8001954 <__aeabi_dadd>
 8013496:	0002      	movs	r2, r0
 8013498:	000b      	movs	r3, r1
 801349a:	0020      	movs	r0, r4
 801349c:	0029      	movs	r1, r5
 801349e:	f7ee fe1f 	bl	80020e0 <__aeabi_ddiv>
 80134a2:	0002      	movs	r2, r0
 80134a4:	000b      	movs	r3, r1
 80134a6:	0014      	movs	r4, r2
 80134a8:	001d      	movs	r5, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	1c18      	adds	r0, r3, #0
 80134b0:	f7f0 f9f0 	bl	8003894 <__aeabi_f2d>
 80134b4:	2200      	movs	r2, #0
 80134b6:	4b22      	ldr	r3, [pc, #136]	@ (8013540 <HIDS_DewPointCalculation+0xe0>)
 80134b8:	f7ee fe12 	bl	80020e0 <__aeabi_ddiv>
 80134bc:	0002      	movs	r2, r0
 80134be:	000b      	movs	r3, r1
 80134c0:	0010      	movs	r0, r2
 80134c2:	0019      	movs	r1, r3
 80134c4:	f014 feea 	bl	802829c <log>
 80134c8:	0002      	movs	r2, r0
 80134ca:	000b      	movs	r3, r1
 80134cc:	0020      	movs	r0, r4
 80134ce:	0029      	movs	r1, r5
 80134d0:	f7ee fa40 	bl	8001954 <__aeabi_dadd>
 80134d4:	0002      	movs	r2, r0
 80134d6:	000b      	movs	r3, r1
 80134d8:	0010      	movs	r0, r2
 80134da:	0019      	movs	r1, r3
 80134dc:	f7f0 fa22 	bl	8003924 <__aeabi_d2f>
 80134e0:	1c03      	adds	r3, r0, #0
 80134e2:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 80134e4:	68f8      	ldr	r0, [r7, #12]
 80134e6:	f7f0 f9d5 	bl	8003894 <__aeabi_f2d>
 80134ea:	4a13      	ldr	r2, [pc, #76]	@ (8013538 <HIDS_DewPointCalculation+0xd8>)
 80134ec:	4b13      	ldr	r3, [pc, #76]	@ (801353c <HIDS_DewPointCalculation+0xdc>)
 80134ee:	f7ef fa31 	bl	8002954 <__aeabi_dmul>
 80134f2:	0002      	movs	r2, r0
 80134f4:	000b      	movs	r3, r1
 80134f6:	0014      	movs	r4, r2
 80134f8:	001d      	movs	r5, r3
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f7f0 f9ca 	bl	8003894 <__aeabi_f2d>
 8013500:	0002      	movs	r2, r0
 8013502:	000b      	movs	r3, r1
 8013504:	480a      	ldr	r0, [pc, #40]	@ (8013530 <HIDS_DewPointCalculation+0xd0>)
 8013506:	490b      	ldr	r1, [pc, #44]	@ (8013534 <HIDS_DewPointCalculation+0xd4>)
 8013508:	f7ef fd0a 	bl	8002f20 <__aeabi_dsub>
 801350c:	0002      	movs	r2, r0
 801350e:	000b      	movs	r3, r1
 8013510:	0020      	movs	r0, r4
 8013512:	0029      	movs	r1, r5
 8013514:	f7ee fde4 	bl	80020e0 <__aeabi_ddiv>
 8013518:	0002      	movs	r2, r0
 801351a:	000b      	movs	r3, r1
 801351c:	0010      	movs	r0, r2
 801351e:	0019      	movs	r1, r3
 8013520:	f7f0 fa00 	bl	8003924 <__aeabi_d2f>
 8013524:	1c03      	adds	r3, r0, #0
}
 8013526:	1c18      	adds	r0, r3, #0
 8013528:	46bd      	mov	sp, r7
 801352a:	b004      	add	sp, #16
 801352c:	bdb0      	pop	{r4, r5, r7, pc}
 801352e:	46c0      	nop			@ (mov r8, r8)
 8013530:	b851eb85 	.word	0xb851eb85
 8013534:	4031451e 	.word	0x4031451e
 8013538:	66666666 	.word	0x66666666
 801353c:	406db666 	.word	0x406db666
 8013540:	40590000 	.word	0x40590000

08013544 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 801354a:	4b0d      	ldr	r3, [pc, #52]	@ (8013580 <HIDS_EnableHeater+0x3c>)
 801354c:	781a      	ldrb	r2, [r3, #0]
 801354e:	1dfb      	adds	r3, r7, #7
 8013550:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8013552:	1dfb      	adds	r3, r7, #7
 8013554:	2201      	movs	r2, #1
 8013556:	0019      	movs	r1, r3
 8013558:	2044      	movs	r0, #68	@ 0x44
 801355a:	f7ff ff07 	bl	801336c <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801355e:	1dfb      	adds	r3, r7, #7
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	4a08      	ldr	r2, [pc, #32]	@ (8013584 <HIDS_EnableHeater+0x40>)
 8013564:	4908      	ldr	r1, [pc, #32]	@ (8013588 <HIDS_EnableHeater+0x44>)
 8013566:	2002      	movs	r0, #2
 8013568:	f7ff fe14 	bl	8013194 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 801356c:	f7f6 f9ee 	bl	800994c <getPosixTime>
 8013570:	0002      	movs	r2, r0
 8013572:	4b06      	ldr	r3, [pc, #24]	@ (801358c <HIDS_EnableHeater+0x48>)
 8013574:	601a      	str	r2, [r3, #0]
}
 8013576:	46c0      	nop			@ (mov r8, r8)
 8013578:	46bd      	mov	sp, r7
 801357a:	b002      	add	sp, #8
 801357c:	bd80      	pop	{r7, pc}
 801357e:	46c0      	nop			@ (mov r8, r8)
 8013580:	200000e5 	.word	0x200000e5
 8013584:	0802d53c 	.word	0x0802d53c
 8013588:	0802d55c 	.word	0x0802d55c
 801358c:	20002200 	.word	0x20002200

08013590 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801359a:	4b0a      	ldr	r3, [pc, #40]	@ (80135c4 <HIDS_Init+0x34>)
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80135a0:	4b09      	ldr	r3, [pc, #36]	@ (80135c8 <HIDS_Init+0x38>)
 80135a2:	683a      	ldr	r2, [r7, #0]
 80135a4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80135a6:	4b09      	ldr	r3, [pc, #36]	@ (80135cc <HIDS_Init+0x3c>)
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	0018      	movs	r0, r3
 80135ac:	f000 f840 	bl	8013630 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80135b0:	4b07      	ldr	r3, [pc, #28]	@ (80135d0 <HIDS_Init+0x40>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	0018      	movs	r0, r3
 80135b6:	f000 f82b 	bl	8013610 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80135ba:	46c0      	nop			@ (mov r8, r8)
 80135bc:	46bd      	mov	sp, r7
 80135be:	b002      	add	sp, #8
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	46c0      	nop			@ (mov r8, r8)
 80135c4:	200021e8 	.word	0x200021e8
 80135c8:	200021ec 	.word	0x200021ec
 80135cc:	200000e6 	.word	0x200000e6
 80135d0:	200000e5 	.word	0x200000e5

080135d4 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80135d4:	b580      	push	{r7, lr}
 80135d6:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 80135d8:	f000 fb1c 	bl	8013c14 <HAL_GetTick>
 80135dc:	0002      	movs	r2, r0
 80135de:	4b08      	ldr	r3, [pc, #32]	@ (8013600 <HIDS_StartMeasurement+0x2c>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	18d2      	adds	r2, r2, r3
 80135e4:	4b07      	ldr	r3, [pc, #28]	@ (8013604 <HIDS_StartMeasurement+0x30>)
 80135e6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80135e8:	4b07      	ldr	r3, [pc, #28]	@ (8013608 <HIDS_StartMeasurement+0x34>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	0019      	movs	r1, r3
 80135ee:	2044      	movs	r0, #68	@ 0x44
 80135f0:	f7ff febc 	bl	801336c <WriteRegister>
  MeasurementDone = false;
 80135f4:	4b05      	ldr	r3, [pc, #20]	@ (801360c <HIDS_StartMeasurement+0x38>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	701a      	strb	r2, [r3, #0]
}
 80135fa:	46c0      	nop			@ (mov r8, r8)
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	200000ec 	.word	0x200000ec
 8013604:	200000e8 	.word	0x200000e8
 8013608:	200000e6 	.word	0x200000e6
 801360c:	20002204 	.word	0x20002204

08013610 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	0002      	movs	r2, r0
 8013618:	1dfb      	adds	r3, r7, #7
 801361a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801361c:	4b03      	ldr	r3, [pc, #12]	@ (801362c <HIDS_SetHeaterMode+0x1c>)
 801361e:	1dfa      	adds	r2, r7, #7
 8013620:	7812      	ldrb	r2, [r2, #0]
 8013622:	701a      	strb	r2, [r3, #0]
}
 8013624:	46c0      	nop			@ (mov r8, r8)
 8013626:	46bd      	mov	sp, r7
 8013628:	b002      	add	sp, #8
 801362a:	bd80      	pop	{r7, pc}
 801362c:	200000e5 	.word	0x200000e5

08013630 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	0002      	movs	r2, r0
 8013638:	1dfb      	adds	r3, r7, #7
 801363a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 801363c:	4b03      	ldr	r3, [pc, #12]	@ (801364c <HIDS_SetMeasurementMode+0x1c>)
 801363e:	1dfa      	adds	r2, r7, #7
 8013640:	7812      	ldrb	r2, [r2, #0]
 8013642:	701a      	strb	r2, [r3, #0]
}
 8013644:	46c0      	nop			@ (mov r8, r8)
 8013646:	46bd      	mov	sp, r7
 8013648:	b002      	add	sp, #8
 801364a:	bd80      	pop	{r7, pc}
 801364c:	200000e6 	.word	0x200000e6

08013650 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8013658:	f000 fadc 	bl	8013c14 <HAL_GetTick>
 801365c:	0002      	movs	r2, r0
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	18d2      	adds	r2, r2, r3
 8013662:	4b03      	ldr	r3, [pc, #12]	@ (8013670 <setHIDSTimeStamp+0x20>)
 8013664:	601a      	str	r2, [r3, #0]
}
 8013666:	46c0      	nop			@ (mov r8, r8)
 8013668:	46bd      	mov	sp, r7
 801366a:	b002      	add	sp, #8
 801366c:	bd80      	pop	{r7, pc}
 801366e:	46c0      	nop			@ (mov r8, r8)
 8013670:	20002208 	.word	0x20002208

08013674 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8013674:	b590      	push	{r4, r7, lr}
 8013676:	b085      	sub	sp, #20
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	781a      	ldrb	r2, [r3, #0]
 8013680:	210c      	movs	r1, #12
 8013682:	187b      	adds	r3, r7, r1
 8013684:	701a      	strb	r2, [r3, #0]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	785a      	ldrb	r2, [r3, #1]
 801368a:	187b      	adds	r3, r7, r1
 801368c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801368e:	240f      	movs	r4, #15
 8013690:	193b      	adds	r3, r7, r4
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	7892      	ldrb	r2, [r2, #2]
 8013696:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8013698:	187b      	adds	r3, r7, r1
 801369a:	2102      	movs	r1, #2
 801369c:	0018      	movs	r0, r3
 801369e:	f7ff fe87 	bl	80133b0 <CalculateCRC>
 80136a2:	0003      	movs	r3, r0
 80136a4:	001a      	movs	r2, r3
 80136a6:	193b      	adds	r3, r7, r4
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d007      	beq.n	80136be <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80136ae:	4a1a      	ldr	r2, [pc, #104]	@ (8013718 <CheckCRC+0xa4>)
 80136b0:	4b1a      	ldr	r3, [pc, #104]	@ (801371c <CheckCRC+0xa8>)
 80136b2:	0019      	movs	r1, r3
 80136b4:	2001      	movs	r0, #1
 80136b6:	f7ff fd6d 	bl	8013194 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 80136ba:	2300      	movs	r3, #0
 80136bc:	e027      	b.n	801370e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	78da      	ldrb	r2, [r3, #3]
 80136c2:	2108      	movs	r1, #8
 80136c4:	187b      	adds	r3, r7, r1
 80136c6:	701a      	strb	r2, [r3, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	791a      	ldrb	r2, [r3, #4]
 80136cc:	187b      	adds	r3, r7, r1
 80136ce:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80136d0:	240e      	movs	r4, #14
 80136d2:	193b      	adds	r3, r7, r4
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	7952      	ldrb	r2, [r2, #5]
 80136d8:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80136da:	187b      	adds	r3, r7, r1
 80136dc:	2102      	movs	r1, #2
 80136de:	0018      	movs	r0, r3
 80136e0:	f7ff fe66 	bl	80133b0 <CalculateCRC>
 80136e4:	0003      	movs	r3, r0
 80136e6:	001a      	movs	r2, r3
 80136e8:	193b      	adds	r3, r7, r4
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d00d      	beq.n	801370c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 80136f0:	4a0b      	ldr	r2, [pc, #44]	@ (8013720 <CheckCRC+0xac>)
 80136f2:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <CheckCRC+0xa8>)
 80136f4:	0019      	movs	r1, r3
 80136f6:	2001      	movs	r0, #1
 80136f8:	f7ff fd4c 	bl	8013194 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80136fc:	4a09      	ldr	r2, [pc, #36]	@ (8013724 <CheckCRC+0xb0>)
 80136fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013728 <CheckCRC+0xb4>)
 8013700:	2185      	movs	r1, #133	@ 0x85
 8013702:	0018      	movs	r0, r3
 8013704:	f7ff fdfe 	bl	8013304 <errorHandler>
		return false;
 8013708:	2300      	movs	r3, #0
 801370a:	e000      	b.n	801370e <CheckCRC+0x9a>
	}
	return true;
 801370c:	2301      	movs	r3, #1
}
 801370e:	0018      	movs	r0, r3
 8013710:	46bd      	mov	sp, r7
 8013712:	b005      	add	sp, #20
 8013714:	bd90      	pop	{r4, r7, pc}
 8013716:	46c0      	nop			@ (mov r8, r8)
 8013718:	0802d560 	.word	0x0802d560
 801371c:	0802d588 	.word	0x0802d588
 8013720:	0802d58c 	.word	0x0802d58c
 8013724:	0802d5b8 	.word	0x0802d5b8
 8013728:	0802dc5c 	.word	0x0802dc5c

0801372c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8013732:	1dbb      	adds	r3, r7, #6
 8013734:	2289      	movs	r2, #137	@ 0x89
 8013736:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8013738:	1dbb      	adds	r3, r7, #6
 801373a:	2201      	movs	r2, #1
 801373c:	0019      	movs	r1, r3
 801373e:	2044      	movs	r0, #68	@ 0x44
 8013740:	f7ff fe14 	bl	801336c <WriteRegister>
	HAL_Delay(30);
 8013744:	201e      	movs	r0, #30
 8013746:	f000 fa6f 	bl	8013c28 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 801374a:	4b14      	ldr	r3, [pc, #80]	@ (801379c <HIDS_DeviceConnected+0x70>)
 801374c:	2206      	movs	r2, #6
 801374e:	0019      	movs	r1, r3
 8013750:	2044      	movs	r0, #68	@ 0x44
 8013752:	f7ff fde9 	bl	8013328 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013756:	1dfb      	adds	r3, r7, #7
 8013758:	2200      	movs	r2, #0
 801375a:	701a      	strb	r2, [r3, #0]
 801375c:	e011      	b.n	8013782 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801375e:	1dfb      	adds	r3, r7, #7
 8013760:	7818      	ldrb	r0, [r3, #0]
 8013762:	1dfb      	adds	r3, r7, #7
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	4a0d      	ldr	r2, [pc, #52]	@ (801379c <HIDS_DeviceConnected+0x70>)
 8013768:	5cd3      	ldrb	r3, [r2, r3]
 801376a:	4a0d      	ldr	r2, [pc, #52]	@ (80137a0 <HIDS_DeviceConnected+0x74>)
 801376c:	490d      	ldr	r1, [pc, #52]	@ (80137a4 <HIDS_DeviceConnected+0x78>)
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	0003      	movs	r3, r0
 8013772:	2002      	movs	r0, #2
 8013774:	f7ff fd0e 	bl	8013194 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013778:	1dfb      	adds	r3, r7, #7
 801377a:	781a      	ldrb	r2, [r3, #0]
 801377c:	1dfb      	adds	r3, r7, #7
 801377e:	3201      	adds	r2, #1
 8013780:	701a      	strb	r2, [r3, #0]
 8013782:	1dfb      	adds	r3, r7, #7
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	2b05      	cmp	r3, #5
 8013788:	d9e9      	bls.n	801375e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801378a:	4b04      	ldr	r3, [pc, #16]	@ (801379c <HIDS_DeviceConnected+0x70>)
 801378c:	0018      	movs	r0, r3
 801378e:	f7ff ff71 	bl	8013674 <CheckCRC>
 8013792:	0003      	movs	r3, r0
}
 8013794:	0018      	movs	r0, r3
 8013796:	46bd      	mov	sp, r7
 8013798:	b002      	add	sp, #8
 801379a:	bd80      	pop	{r7, pc}
 801379c:	200021f0 	.word	0x200021f0
 80137a0:	0802d5d0 	.word	0x0802d5d0
 80137a4:	0802d55c 	.word	0x0802d55c

080137a8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80137a8:	b580      	push	{r7, lr}
 80137aa:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80137ac:	4b04      	ldr	r3, [pc, #16]	@ (80137c0 <HIDS_MeasurementReady+0x18>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	0018      	movs	r0, r3
 80137b2:	f7ff fc99 	bl	80130e8 <TimestampIsReached>
 80137b6:	0003      	movs	r3, r0
}
 80137b8:	0018      	movs	r0, r3
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	46c0      	nop			@ (mov r8, r8)
 80137c0:	200000e8 	.word	0x200000e8

080137c4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b084      	sub	sp, #16
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80137ce:	4b41      	ldr	r3, [pc, #260]	@ (80138d4 <HIDS_GetMeasurementValues+0x110>)
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d001      	beq.n	80137da <HIDS_GetMeasurementValues+0x16>
 80137d6:	2301      	movs	r3, #1
 80137d8:	e077      	b.n	80138ca <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 80137da:	f7ff ffe5 	bl	80137a8 <HIDS_MeasurementReady>
 80137de:	0003      	movs	r3, r0
 80137e0:	001a      	movs	r2, r3
 80137e2:	2301      	movs	r3, #1
 80137e4:	4053      	eors	r3, r2
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d001      	beq.n	80137f0 <HIDS_GetMeasurementValues+0x2c>
 80137ec:	2300      	movs	r3, #0
 80137ee:	e06c      	b.n	80138ca <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 80137f0:	4b39      	ldr	r3, [pc, #228]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 80137f2:	2206      	movs	r2, #6
 80137f4:	0019      	movs	r1, r3
 80137f6:	2044      	movs	r0, #68	@ 0x44
 80137f8:	f7ff fd96 	bl	8013328 <ReadRegister>
 80137fc:	0003      	movs	r3, r0
 80137fe:	001a      	movs	r2, r3
 8013800:	2301      	movs	r3, #1
 8013802:	4053      	eors	r3, r2
 8013804:	b2db      	uxtb	r3, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d005      	beq.n	8013816 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801380a:	4a34      	ldr	r2, [pc, #208]	@ (80138dc <HIDS_GetMeasurementValues+0x118>)
 801380c:	4b34      	ldr	r3, [pc, #208]	@ (80138e0 <HIDS_GetMeasurementValues+0x11c>)
 801380e:	0019      	movs	r1, r3
 8013810:	2001      	movs	r0, #1
 8013812:	f7ff fcbf 	bl	8013194 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8013816:	4b30      	ldr	r3, [pc, #192]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 8013818:	0018      	movs	r0, r3
 801381a:	f7ff ff2b 	bl	8013674 <CheckCRC>
 801381e:	0003      	movs	r3, r0
 8013820:	001a      	movs	r2, r3
 8013822:	2301      	movs	r3, #1
 8013824:	4053      	eors	r3, r2
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 801382c:	2300      	movs	r3, #0
 801382e:	e04c      	b.n	80138ca <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8013830:	4b29      	ldr	r3, [pc, #164]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	021b      	lsls	r3, r3, #8
 8013836:	4a28      	ldr	r2, [pc, #160]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 8013838:	7852      	ldrb	r2, [r2, #1]
 801383a:	4313      	orrs	r3, r2
 801383c:	22af      	movs	r2, #175	@ 0xaf
 801383e:	4353      	muls	r3, r2
 8013840:	0018      	movs	r0, r3
 8013842:	f7ef ffd5 	bl	80037f0 <__aeabi_i2d>
 8013846:	2200      	movs	r2, #0
 8013848:	4b26      	ldr	r3, [pc, #152]	@ (80138e4 <HIDS_GetMeasurementValues+0x120>)
 801384a:	f7ee fc49 	bl	80020e0 <__aeabi_ddiv>
 801384e:	0002      	movs	r2, r0
 8013850:	000b      	movs	r3, r1
 8013852:	0010      	movs	r0, r2
 8013854:	0019      	movs	r1, r3
 8013856:	f7f0 f865 	bl	8003924 <__aeabi_d2f>
 801385a:	1c03      	adds	r3, r0, #0
 801385c:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801385e:	4922      	ldr	r1, [pc, #136]	@ (80138e8 <HIDS_GetMeasurementValues+0x124>)
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ed fd47 	bl	80012f4 <__aeabi_fsub>
 8013866:	1c03      	adds	r3, r0, #0
 8013868:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801386a:	4b1b      	ldr	r3, [pc, #108]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 801386c:	78db      	ldrb	r3, [r3, #3]
 801386e:	021b      	lsls	r3, r3, #8
 8013870:	4a19      	ldr	r2, [pc, #100]	@ (80138d8 <HIDS_GetMeasurementValues+0x114>)
 8013872:	7912      	ldrb	r2, [r2, #4]
 8013874:	431a      	orrs	r2, r3
 8013876:	0013      	movs	r3, r2
 8013878:	015b      	lsls	r3, r3, #5
 801387a:	1a9b      	subs	r3, r3, r2
 801387c:	009b      	lsls	r3, r3, #2
 801387e:	189b      	adds	r3, r3, r2
 8013880:	0018      	movs	r0, r3
 8013882:	f7ef ffb5 	bl	80037f0 <__aeabi_i2d>
 8013886:	2200      	movs	r2, #0
 8013888:	4b16      	ldr	r3, [pc, #88]	@ (80138e4 <HIDS_GetMeasurementValues+0x120>)
 801388a:	f7ee fc29 	bl	80020e0 <__aeabi_ddiv>
 801388e:	0002      	movs	r2, r0
 8013890:	000b      	movs	r3, r1
 8013892:	0010      	movs	r0, r2
 8013894:	0019      	movs	r1, r3
 8013896:	f7f0 f845 	bl	8003924 <__aeabi_d2f>
 801389a:	1c03      	adds	r3, r0, #0
 801389c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801389e:	4913      	ldr	r1, [pc, #76]	@ (80138ec <HIDS_GetMeasurementValues+0x128>)
 80138a0:	68b8      	ldr	r0, [r7, #8]
 80138a2:	f7ed fd27 	bl	80012f4 <__aeabi_fsub>
 80138a6:	1c03      	adds	r3, r0, #0
 80138a8:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	68fa      	ldr	r2, [r7, #12]
 80138ae:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	0011      	movs	r1, r2
 80138bc:	0018      	movs	r0, r3
 80138be:	f7fc ffe5 	bl	801088c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80138c2:	4b04      	ldr	r3, [pc, #16]	@ (80138d4 <HIDS_GetMeasurementValues+0x110>)
 80138c4:	2201      	movs	r2, #1
 80138c6:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80138c8:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80138ca:	0018      	movs	r0, r3
 80138cc:	46bd      	mov	sp, r7
 80138ce:	b004      	add	sp, #16
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	46c0      	nop			@ (mov r8, r8)
 80138d4:	20002204 	.word	0x20002204
 80138d8:	200021f8 	.word	0x200021f8
 80138dc:	0802d5f0 	.word	0x0802d5f0
 80138e0:	0802d588 	.word	0x0802d588
 80138e4:	40efffe0 	.word	0x40efffe0
 80138e8:	42340000 	.word	0x42340000
 80138ec:	40c00000 	.word	0x40c00000

080138f0 <ResetHIDSresults>:

void ResetHIDSresults() {
 80138f0:	b580      	push	{r7, lr}
 80138f2:	af00      	add	r7, sp, #0
  humid = 0.0;
 80138f4:	4b04      	ldr	r3, [pc, #16]	@ (8013908 <ResetHIDSresults+0x18>)
 80138f6:	2200      	movs	r2, #0
 80138f8:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80138fa:	4b04      	ldr	r3, [pc, #16]	@ (801390c <ResetHIDSresults+0x1c>)
 80138fc:	2200      	movs	r2, #0
 80138fe:	601a      	str	r2, [r3, #0]
}
 8013900:	46c0      	nop			@ (mov r8, r8)
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	46c0      	nop			@ (mov r8, r8)
 8013908:	200021e0 	.word	0x200021e0
 801390c:	200021e4 	.word	0x200021e4

08013910 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013910:	b5b0      	push	{r4, r5, r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8013916:	4b69      	ldr	r3, [pc, #420]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	2b06      	cmp	r3, #6
 801391c:	d900      	bls.n	8013920 <HIDS_Upkeep+0x10>
 801391e:	e0bd      	b.n	8013a9c <HIDS_Upkeep+0x18c>
 8013920:	009a      	lsls	r2, r3, #2
 8013922:	4b67      	ldr	r3, [pc, #412]	@ (8013ac0 <HIDS_Upkeep+0x1b0>)
 8013924:	18d3      	adds	r3, r2, r3
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 801392a:	4a66      	ldr	r2, [pc, #408]	@ (8013ac4 <HIDS_Upkeep+0x1b4>)
 801392c:	4b66      	ldr	r3, [pc, #408]	@ (8013ac8 <HIDS_Upkeep+0x1b8>)
 801392e:	0019      	movs	r1, r3
 8013930:	2003      	movs	r0, #3
 8013932:	f7ff fc2f 	bl	8013194 <CreateLine>
      break;
 8013936:	e0bc      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8013938:	f7ff ffda 	bl	80138f0 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 801393c:	4b5f      	ldr	r3, [pc, #380]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 801393e:	2201      	movs	r2, #1
 8013940:	701a      	strb	r2, [r3, #0]
      break;
 8013942:	e0b6      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8013944:	f7f9 fcb4 	bl	800d2b0 <getSensorLock>
 8013948:	1e03      	subs	r3, r0, #0
 801394a:	d000      	beq.n	801394e <HIDS_Upkeep+0x3e>
 801394c:	e0aa      	b.n	8013aa4 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 801394e:	2001      	movs	r0, #1
 8013950:	f7f9 fc9a 	bl	800d288 <setSensorLock>
      SetMeasurementIndicator();
 8013954:	f7fe f9ee 	bl	8011d34 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8013958:	f7ff fe3c 	bl	80135d4 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 801395c:	200a      	movs	r0, #10
 801395e:	f000 f963 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 8013962:	2000      	movs	r0, #0
 8013964:	f7f9 fc90 	bl	800d288 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8013968:	4b54      	ldr	r3, [pc, #336]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 801396a:	2202      	movs	r2, #2
 801396c:	701a      	strb	r2, [r3, #0]
      break;
 801396e:	e0a0      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013970:	f7f9 fc9e 	bl	800d2b0 <getSensorLock>
 8013974:	1e03      	subs	r3, r0, #0
 8013976:	d000      	beq.n	801397a <HIDS_Upkeep+0x6a>
 8013978:	e096      	b.n	8013aa8 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 801397a:	2001      	movs	r0, #1
 801397c:	f7f9 fc84 	bl	800d288 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013980:	4a52      	ldr	r2, [pc, #328]	@ (8013acc <HIDS_Upkeep+0x1bc>)
 8013982:	4b53      	ldr	r3, [pc, #332]	@ (8013ad0 <HIDS_Upkeep+0x1c0>)
 8013984:	0011      	movs	r1, r2
 8013986:	0018      	movs	r0, r3
 8013988:	f7ff ff1c 	bl	80137c4 <HIDS_GetMeasurementValues>
 801398c:	1e03      	subs	r3, r0, #0
 801398e:	d002      	beq.n	8013996 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8013990:	4b4a      	ldr	r3, [pc, #296]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013992:	2203      	movs	r2, #3
 8013994:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8013996:	200a      	movs	r0, #10
 8013998:	f000 f946 	bl	8013c28 <HAL_Delay>
      setSensorLock(FREE);
 801399c:	2000      	movs	r0, #0
 801399e:	f7f9 fc73 	bl	800d288 <setSensorLock>
      break;
 80139a2:	e086      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80139a4:	4b4a      	ldr	r3, [pc, #296]	@ (8013ad0 <HIDS_Upkeep+0x1c0>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	1c18      	adds	r0, r3, #0
 80139aa:	f7ef ff73 	bl	8003894 <__aeabi_f2d>
 80139ae:	0004      	movs	r4, r0
 80139b0:	000d      	movs	r5, r1
 80139b2:	4b46      	ldr	r3, [pc, #280]	@ (8013acc <HIDS_Upkeep+0x1bc>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	1c18      	adds	r0, r3, #0
 80139b8:	f7ef ff6c 	bl	8003894 <__aeabi_f2d>
 80139bc:	0002      	movs	r2, r0
 80139be:	000b      	movs	r3, r1
 80139c0:	4844      	ldr	r0, [pc, #272]	@ (8013ad4 <HIDS_Upkeep+0x1c4>)
 80139c2:	4941      	ldr	r1, [pc, #260]	@ (8013ac8 <HIDS_Upkeep+0x1b8>)
 80139c4:	9202      	str	r2, [sp, #8]
 80139c6:	9303      	str	r3, [sp, #12]
 80139c8:	9400      	str	r4, [sp, #0]
 80139ca:	9501      	str	r5, [sp, #4]
 80139cc:	0002      	movs	r2, r0
 80139ce:	2003      	movs	r0, #3
 80139d0:	f7ff fbe0 	bl	8013194 <CreateLine>
      setHIDS(temp, humid);
 80139d4:	4b3d      	ldr	r3, [pc, #244]	@ (8013acc <HIDS_Upkeep+0x1bc>)
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	4b3d      	ldr	r3, [pc, #244]	@ (8013ad0 <HIDS_Upkeep+0x1c0>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	1c19      	adds	r1, r3, #0
 80139de:	1c10      	adds	r0, r2, #0
 80139e0:	f7f1 f82c 	bl	8004a3c <setHIDS>
      ResetMeasurementIndicator();
 80139e4:	f7fe f9be 	bl	8011d64 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 80139e8:	4b38      	ldr	r3, [pc, #224]	@ (8013acc <HIDS_Upkeep+0x1bc>)
 80139ea:	681c      	ldr	r4, [r3, #0]
 80139ec:	4a37      	ldr	r2, [pc, #220]	@ (8013acc <HIDS_Upkeep+0x1bc>)
 80139ee:	4b38      	ldr	r3, [pc, #224]	@ (8013ad0 <HIDS_Upkeep+0x1c0>)
 80139f0:	0011      	movs	r1, r2
 80139f2:	0018      	movs	r0, r3
 80139f4:	f7ff fd34 	bl	8013460 <HIDS_DewPointCalculation>
 80139f8:	1c03      	adds	r3, r0, #0
 80139fa:	1c19      	adds	r1, r3, #0
 80139fc:	1c20      	adds	r0, r4, #0
 80139fe:	f7ed fc79 	bl	80012f4 <__aeabi_fsub>
 8013a02:	1c03      	adds	r3, r0, #0
 8013a04:	21fe      	movs	r1, #254	@ 0xfe
 8013a06:	0589      	lsls	r1, r1, #22
 8013a08:	1c18      	adds	r0, r3, #0
 8013a0a:	f7ec fd91 	bl	8000530 <__aeabi_fcmplt>
 8013a0e:	1e03      	subs	r3, r0, #0
 8013a10:	d023      	beq.n	8013a5a <HIDS_Upkeep+0x14a>
 8013a12:	f7f5 ff9b 	bl	800994c <getPosixTime>
 8013a16:	0002      	movs	r2, r0
 8013a18:	4b2f      	ldr	r3, [pc, #188]	@ (8013ad8 <HIDS_Upkeep+0x1c8>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	1ad2      	subs	r2, r2, r3
 8013a1e:	23e1      	movs	r3, #225	@ 0xe1
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d919      	bls.n	8013a5a <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8013a26:	4a2d      	ldr	r2, [pc, #180]	@ (8013adc <HIDS_Upkeep+0x1cc>)
 8013a28:	4b2d      	ldr	r3, [pc, #180]	@ (8013ae0 <HIDS_Upkeep+0x1d0>)
 8013a2a:	0019      	movs	r1, r3
 8013a2c:	2002      	movs	r0, #2
 8013a2e:	f7ff fbb1 	bl	8013194 <CreateLine>
        if (getSensorLock() != FREE) {
 8013a32:	f7f9 fc3d 	bl	800d2b0 <getSensorLock>
 8013a36:	1e03      	subs	r3, r0, #0
 8013a38:	d138      	bne.n	8013aac <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8013a3a:	f7ff fd83 	bl	8013544 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8013a3e:	200a      	movs	r0, #10
 8013a40:	f000 f8f2 	bl	8013c28 <HAL_Delay>
        setSensorLock(FREE);
 8013a44:	2000      	movs	r0, #0
 8013a46:	f7f9 fc1f 	bl	800d288 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8013a4a:	f000 f8e3 	bl	8013c14 <HAL_GetTick>
 8013a4e:	0003      	movs	r3, r0
 8013a50:	4a24      	ldr	r2, [pc, #144]	@ (8013ae4 <HIDS_Upkeep+0x1d4>)
 8013a52:	189a      	adds	r2, r3, r2
 8013a54:	4b24      	ldr	r3, [pc, #144]	@ (8013ae8 <HIDS_Upkeep+0x1d8>)
 8013a56:	601a      	str	r2, [r3, #0]
 8013a58:	e011      	b.n	8013a7e <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8013a5a:	f000 f8db 	bl	8013c14 <HAL_GetTick>
 8013a5e:	0004      	movs	r4, r0
 8013a60:	f7f5 fbf8 	bl	8009254 <Check_USB_PowerOn>
 8013a64:	1e03      	subs	r3, r0, #0
 8013a66:	d103      	bne.n	8013a70 <HIDS_Upkeep+0x160>
 8013a68:	4b20      	ldr	r3, [pc, #128]	@ (8013aec <HIDS_Upkeep+0x1dc>)
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d001      	beq.n	8013a74 <HIDS_Upkeep+0x164>
 8013a70:	4b1f      	ldr	r3, [pc, #124]	@ (8013af0 <HIDS_Upkeep+0x1e0>)
 8013a72:	e001      	b.n	8013a78 <HIDS_Upkeep+0x168>
 8013a74:	23fa      	movs	r3, #250	@ 0xfa
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	191a      	adds	r2, r3, r4
 8013a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8013ae8 <HIDS_Upkeep+0x1d8>)
 8013a7c:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8013a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013a80:	2206      	movs	r2, #6
 8013a82:	701a      	strb	r2, [r3, #0]
      break;
 8013a84:	e015      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8013a86:	4b18      	ldr	r3, [pc, #96]	@ (8013ae8 <HIDS_Upkeep+0x1d8>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	0018      	movs	r0, r3
 8013a8c:	f7ff fb2c 	bl	80130e8 <TimestampIsReached>
 8013a90:	1e03      	subs	r3, r0, #0
 8013a92:	d00d      	beq.n	8013ab0 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8013a94:	4b09      	ldr	r3, [pc, #36]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013a96:	2200      	movs	r2, #0
 8013a98:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013a9a:	e009      	b.n	8013ab0 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8013a9c:	4b07      	ldr	r3, [pc, #28]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	701a      	strb	r2, [r3, #0]
      break;
 8013aa2:	e006      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>
        break;
 8013aa4:	46c0      	nop			@ (mov r8, r8)
 8013aa6:	e004      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>
        break;
 8013aa8:	46c0      	nop			@ (mov r8, r8)
 8013aaa:	e002      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>
          break;
 8013aac:	46c0      	nop			@ (mov r8, r8)
 8013aae:	e000      	b.n	8013ab2 <HIDS_Upkeep+0x1a2>
      break;
 8013ab0:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8013ab2:	4b02      	ldr	r3, [pc, #8]	@ (8013abc <HIDS_Upkeep+0x1ac>)
 8013ab4:	781b      	ldrb	r3, [r3, #0]
}
 8013ab6:	0018      	movs	r0, r3
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bdb0      	pop	{r4, r5, r7, pc}
 8013abc:	2000220c 	.word	0x2000220c
 8013ac0:	0802dc40 	.word	0x0802dc40
 8013ac4:	0802d624 	.word	0x0802d624
 8013ac8:	0802d658 	.word	0x0802d658
 8013acc:	200021e4 	.word	0x200021e4
 8013ad0:	200021e0 	.word	0x200021e0
 8013ad4:	0802d65c 	.word	0x0802d65c
 8013ad8:	20002200 	.word	0x20002200
 8013adc:	0802d690 	.word	0x0802d690
 8013ae0:	0802d55c 	.word	0x0802d55c
 8013ae4:	00002ee0 	.word	0x00002ee0
 8013ae8:	20002208 	.word	0x20002208
 8013aec:	20001e4a 	.word	0x20001e4a
 8013af0:	00002710 	.word	0x00002710

08013af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8013af4:	480d      	ldr	r0, [pc, #52]	@ (8013b2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8013af6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013af8:	f7fe ff50 	bl	801299c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013afc:	480c      	ldr	r0, [pc, #48]	@ (8013b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8013afe:	490d      	ldr	r1, [pc, #52]	@ (8013b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8013b00:	4a0d      	ldr	r2, [pc, #52]	@ (8013b38 <LoopForever+0xe>)
  movs r3, #0
 8013b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013b04:	e002      	b.n	8013b0c <LoopCopyDataInit>

08013b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013b0a:	3304      	adds	r3, #4

08013b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013b10:	d3f9      	bcc.n	8013b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013b12:	4a0a      	ldr	r2, [pc, #40]	@ (8013b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8013b14:	4c0a      	ldr	r4, [pc, #40]	@ (8013b40 <LoopForever+0x16>)
  movs r3, #0
 8013b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013b18:	e001      	b.n	8013b1e <LoopFillZerobss>

08013b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013b1c:	3204      	adds	r2, #4

08013b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013b20:	d3fb      	bcc.n	8013b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013b22:	f011 fed5 	bl	80258d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013b26:	f7f8 fb57 	bl	800c1d8 <main>

08013b2a <LoopForever>:

LoopForever:
    b LoopForever
 8013b2a:	e7fe      	b.n	8013b2a <LoopForever>
   ldr   r0, =_estack
 8013b2c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013b34:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8013b38:	0802e628 	.word	0x0802e628
  ldr r2, =_sbss
 8013b3c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8013b40:	20003614 	.word	0x20003614

08013b44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013b44:	e7fe      	b.n	8013b44 <ADC1_COMP_IRQHandler>
	...

08013b48 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013b4e:	1dfb      	adds	r3, r7, #7
 8013b50:	2200      	movs	r2, #0
 8013b52:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013b54:	4b0b      	ldr	r3, [pc, #44]	@ (8013b84 <HAL_Init+0x3c>)
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	4b0a      	ldr	r3, [pc, #40]	@ (8013b84 <HAL_Init+0x3c>)
 8013b5a:	2140      	movs	r1, #64	@ 0x40
 8013b5c:	430a      	orrs	r2, r1
 8013b5e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013b60:	2003      	movs	r0, #3
 8013b62:	f000 f811 	bl	8013b88 <HAL_InitTick>
 8013b66:	1e03      	subs	r3, r0, #0
 8013b68:	d003      	beq.n	8013b72 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013b6a:	1dfb      	adds	r3, r7, #7
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	701a      	strb	r2, [r3, #0]
 8013b70:	e001      	b.n	8013b76 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013b72:	f7fe fdc7 	bl	8012704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013b76:	1dfb      	adds	r3, r7, #7
 8013b78:	781b      	ldrb	r3, [r3, #0]
}
 8013b7a:	0018      	movs	r0, r3
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	b002      	add	sp, #8
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	46c0      	nop			@ (mov r8, r8)
 8013b84:	40022000 	.word	0x40022000

08013b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013b88:	b590      	push	{r4, r7, lr}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013b90:	4b14      	ldr	r3, [pc, #80]	@ (8013be4 <HAL_InitTick+0x5c>)
 8013b92:	681c      	ldr	r4, [r3, #0]
 8013b94:	4b14      	ldr	r3, [pc, #80]	@ (8013be8 <HAL_InitTick+0x60>)
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	0019      	movs	r1, r3
 8013b9a:	23fa      	movs	r3, #250	@ 0xfa
 8013b9c:	0098      	lsls	r0, r3, #2
 8013b9e:	f7ec fb01 	bl	80001a4 <__udivsi3>
 8013ba2:	0003      	movs	r3, r0
 8013ba4:	0019      	movs	r1, r3
 8013ba6:	0020      	movs	r0, r4
 8013ba8:	f7ec fafc 	bl	80001a4 <__udivsi3>
 8013bac:	0003      	movs	r3, r0
 8013bae:	0018      	movs	r0, r3
 8013bb0:	f000 fcfd 	bl	80145ae <HAL_SYSTICK_Config>
 8013bb4:	1e03      	subs	r3, r0, #0
 8013bb6:	d001      	beq.n	8013bbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	e00f      	b.n	8013bdc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b03      	cmp	r3, #3
 8013bc0:	d80b      	bhi.n	8013bda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013bc2:	6879      	ldr	r1, [r7, #4]
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	425b      	negs	r3, r3
 8013bc8:	2200      	movs	r2, #0
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f000 fcc6 	bl	801455c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013bd0:	4b06      	ldr	r3, [pc, #24]	@ (8013bec <HAL_InitTick+0x64>)
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	e000      	b.n	8013bdc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8013bda:	2301      	movs	r3, #1
}
 8013bdc:	0018      	movs	r0, r3
 8013bde:	46bd      	mov	sp, r7
 8013be0:	b003      	add	sp, #12
 8013be2:	bd90      	pop	{r4, r7, pc}
 8013be4:	200000e0 	.word	0x200000e0
 8013be8:	200000f4 	.word	0x200000f4
 8013bec:	200000f0 	.word	0x200000f0

08013bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013bf4:	4b05      	ldr	r3, [pc, #20]	@ (8013c0c <HAL_IncTick+0x1c>)
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	001a      	movs	r2, r3
 8013bfa:	4b05      	ldr	r3, [pc, #20]	@ (8013c10 <HAL_IncTick+0x20>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	18d2      	adds	r2, r2, r3
 8013c00:	4b03      	ldr	r3, [pc, #12]	@ (8013c10 <HAL_IncTick+0x20>)
 8013c02:	601a      	str	r2, [r3, #0]
}
 8013c04:	46c0      	nop			@ (mov r8, r8)
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	46c0      	nop			@ (mov r8, r8)
 8013c0c:	200000f4 	.word	0x200000f4
 8013c10:	20002210 	.word	0x20002210

08013c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	af00      	add	r7, sp, #0
  return uwTick;
 8013c18:	4b02      	ldr	r3, [pc, #8]	@ (8013c24 <HAL_GetTick+0x10>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
}
 8013c1c:	0018      	movs	r0, r3
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	46c0      	nop			@ (mov r8, r8)
 8013c24:	20002210 	.word	0x20002210

08013c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013c30:	f7ff fff0 	bl	8013c14 <HAL_GetTick>
 8013c34:	0003      	movs	r3, r0
 8013c36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	3301      	adds	r3, #1
 8013c40:	d005      	beq.n	8013c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013c42:	4b0a      	ldr	r3, [pc, #40]	@ (8013c6c <HAL_Delay+0x44>)
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	001a      	movs	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	189b      	adds	r3, r3, r2
 8013c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013c4e:	46c0      	nop			@ (mov r8, r8)
 8013c50:	f7ff ffe0 	bl	8013c14 <HAL_GetTick>
 8013c54:	0002      	movs	r2, r0
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	1ad3      	subs	r3, r2, r3
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d8f7      	bhi.n	8013c50 <HAL_Delay+0x28>
  {
  }
}
 8013c60:	46c0      	nop			@ (mov r8, r8)
 8013c62:	46c0      	nop			@ (mov r8, r8)
 8013c64:	46bd      	mov	sp, r7
 8013c66:	b004      	add	sp, #16
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	46c0      	nop			@ (mov r8, r8)
 8013c6c:	200000f4 	.word	0x200000f4

08013c70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013c74:	4b04      	ldr	r3, [pc, #16]	@ (8013c88 <HAL_SuspendTick+0x18>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	4b03      	ldr	r3, [pc, #12]	@ (8013c88 <HAL_SuspendTick+0x18>)
 8013c7a:	2102      	movs	r1, #2
 8013c7c:	438a      	bics	r2, r1
 8013c7e:	601a      	str	r2, [r3, #0]
}
 8013c80:	46c0      	nop			@ (mov r8, r8)
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	46c0      	nop			@ (mov r8, r8)
 8013c88:	e000e010 	.word	0xe000e010

08013c8c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013c90:	4b04      	ldr	r3, [pc, #16]	@ (8013ca4 <HAL_ResumeTick+0x18>)
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	4b03      	ldr	r3, [pc, #12]	@ (8013ca4 <HAL_ResumeTick+0x18>)
 8013c96:	2102      	movs	r1, #2
 8013c98:	430a      	orrs	r2, r1
 8013c9a:	601a      	str	r2, [r3, #0]
}
 8013c9c:	46c0      	nop			@ (mov r8, r8)
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	46c0      	nop			@ (mov r8, r8)
 8013ca4:	e000e010 	.word	0xe000e010

08013ca8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8013cac:	4b02      	ldr	r3, [pc, #8]	@ (8013cb8 <HAL_GetUIDw0+0x10>)
 8013cae:	681b      	ldr	r3, [r3, #0]
}
 8013cb0:	0018      	movs	r0, r3
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	46c0      	nop			@ (mov r8, r8)
 8013cb8:	1ff80050 	.word	0x1ff80050

08013cbc <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8013cc0:	4b02      	ldr	r3, [pc, #8]	@ (8013ccc <HAL_GetUIDw1+0x10>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
}
 8013cc4:	0018      	movs	r0, r3
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	46c0      	nop			@ (mov r8, r8)
 8013ccc:	1ff80054 	.word	0x1ff80054

08013cd0 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8013cd4:	4b02      	ldr	r3, [pc, #8]	@ (8013ce0 <HAL_GetUIDw2+0x10>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
}
 8013cd8:	0018      	movs	r0, r3
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	46c0      	nop			@ (mov r8, r8)
 8013ce0:	1ff80064 	.word	0x1ff80064

08013ce4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d101      	bne.n	8013cf6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	e159      	b.n	8013faa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d10a      	bne.n	8013d14 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2250      	movs	r2, #80	@ 0x50
 8013d08:	2100      	movs	r1, #0
 8013d0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	0018      	movs	r0, r3
 8013d10:	f7f6 f9d4 	bl	800a0bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d18:	2210      	movs	r2, #16
 8013d1a:	4013      	ands	r3, r2
 8013d1c:	2b10      	cmp	r3, #16
 8013d1e:	d005      	beq.n	8013d2c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	689b      	ldr	r3, [r3, #8]
 8013d26:	2204      	movs	r2, #4
 8013d28:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013d2a:	d00b      	beq.n	8013d44 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d30:	2210      	movs	r2, #16
 8013d32:	431a      	orrs	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2250      	movs	r2, #80	@ 0x50
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013d40:	2301      	movs	r3, #1
 8013d42:	e132      	b.n	8013faa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d48:	4a9a      	ldr	r2, [pc, #616]	@ (8013fb4 <HAL_ADC_Init+0x2d0>)
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	2202      	movs	r2, #2
 8013d4e:	431a      	orrs	r2, r3
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	2203      	movs	r2, #3
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d108      	bne.n	8013d74 <HAL_ADC_Init+0x90>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	4013      	ands	r3, r2
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d101      	bne.n	8013d74 <HAL_ADC_Init+0x90>
 8013d70:	2301      	movs	r3, #1
 8013d72:	e000      	b.n	8013d76 <HAL_ADC_Init+0x92>
 8013d74:	2300      	movs	r3, #0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d149      	bne.n	8013e0e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	685a      	ldr	r2, [r3, #4]
 8013d7e:	23c0      	movs	r3, #192	@ 0xc0
 8013d80:	061b      	lsls	r3, r3, #24
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d00b      	beq.n	8013d9e <HAL_ADC_Init+0xba>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	685a      	ldr	r2, [r3, #4]
 8013d8a:	2380      	movs	r3, #128	@ 0x80
 8013d8c:	05db      	lsls	r3, r3, #23
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d005      	beq.n	8013d9e <HAL_ADC_Init+0xba>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	685a      	ldr	r2, [r3, #4]
 8013d96:	2380      	movs	r3, #128	@ 0x80
 8013d98:	061b      	lsls	r3, r3, #24
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d111      	bne.n	8013dc2 <HAL_ADC_Init+0xde>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	691a      	ldr	r2, [r3, #16]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	0092      	lsls	r2, r2, #2
 8013daa:	0892      	lsrs	r2, r2, #2
 8013dac:	611a      	str	r2, [r3, #16]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6919      	ldr	r1, [r3, #16]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	685a      	ldr	r2, [r3, #4]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	430a      	orrs	r2, r1
 8013dbe:	611a      	str	r2, [r3, #16]
 8013dc0:	e014      	b.n	8013dec <HAL_ADC_Init+0x108>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	691a      	ldr	r2, [r3, #16]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	0092      	lsls	r2, r2, #2
 8013dce:	0892      	lsrs	r2, r2, #2
 8013dd0:	611a      	str	r2, [r3, #16]
 8013dd2:	4b79      	ldr	r3, [pc, #484]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	4b78      	ldr	r3, [pc, #480]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013dd8:	4978      	ldr	r1, [pc, #480]	@ (8013fbc <HAL_ADC_Init+0x2d8>)
 8013dda:	400a      	ands	r2, r1
 8013ddc:	601a      	str	r2, [r3, #0]
 8013dde:	4b76      	ldr	r3, [pc, #472]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013de0:	6819      	ldr	r1, [r3, #0]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	685a      	ldr	r2, [r3, #4]
 8013de6:	4b74      	ldr	r3, [pc, #464]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013de8:	430a      	orrs	r2, r1
 8013dea:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	68da      	ldr	r2, [r3, #12]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2118      	movs	r1, #24
 8013df8:	438a      	bics	r2, r1
 8013dfa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	68d9      	ldr	r1, [r3, #12]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	689a      	ldr	r2, [r3, #8]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	430a      	orrs	r2, r1
 8013e0c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	4b69      	ldr	r3, [pc, #420]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013e14:	496a      	ldr	r1, [pc, #424]	@ (8013fc0 <HAL_ADC_Init+0x2dc>)
 8013e16:	400a      	ands	r2, r1
 8013e18:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013e1a:	4b67      	ldr	r3, [pc, #412]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013e1c:	6819      	ldr	r1, [r3, #0]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e22:	065a      	lsls	r2, r3, #25
 8013e24:	4b64      	ldr	r3, [pc, #400]	@ (8013fb8 <HAL_ADC_Init+0x2d4>)
 8013e26:	430a      	orrs	r2, r1
 8013e28:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	689a      	ldr	r2, [r3, #8]
 8013e30:	2380      	movs	r3, #128	@ 0x80
 8013e32:	055b      	lsls	r3, r3, #21
 8013e34:	4013      	ands	r3, r2
 8013e36:	d108      	bne.n	8013e4a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	689a      	ldr	r2, [r3, #8]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2180      	movs	r1, #128	@ 0x80
 8013e44:	0549      	lsls	r1, r1, #21
 8013e46:	430a      	orrs	r2, r1
 8013e48:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	68da      	ldr	r2, [r3, #12]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	495b      	ldr	r1, [pc, #364]	@ (8013fc4 <HAL_ADC_Init+0x2e0>)
 8013e56:	400a      	ands	r2, r1
 8013e58:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	68d9      	ldr	r1, [r3, #12]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	691b      	ldr	r3, [r3, #16]
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	d101      	bne.n	8013e70 <HAL_ADC_Init+0x18c>
 8013e6c:	2304      	movs	r3, #4
 8013e6e:	e000      	b.n	8013e72 <HAL_ADC_Init+0x18e>
 8013e70:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013e72:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2020      	movs	r0, #32
 8013e78:	5c1b      	ldrb	r3, [r3, r0]
 8013e7a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013e7c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	202c      	movs	r0, #44	@ 0x2c
 8013e82:	5c1b      	ldrb	r3, [r3, r0]
 8013e84:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013e86:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013e8c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8013e94:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	69db      	ldr	r3, [r3, #28]
 8013e9a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013e9c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	430a      	orrs	r2, r1
 8013ea4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013eaa:	23c2      	movs	r3, #194	@ 0xc2
 8013eac:	33ff      	adds	r3, #255	@ 0xff
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d00b      	beq.n	8013eca <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	68d9      	ldr	r1, [r3, #12]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013ec0:	431a      	orrs	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	430a      	orrs	r2, r1
 8013ec8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2221      	movs	r2, #33	@ 0x21
 8013ece:	5c9b      	ldrb	r3, [r3, r2]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d11a      	bne.n	8013f0a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2220      	movs	r2, #32
 8013ed8:	5c9b      	ldrb	r3, [r3, r2]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d109      	bne.n	8013ef2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	68da      	ldr	r2, [r3, #12]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2180      	movs	r1, #128	@ 0x80
 8013eea:	0249      	lsls	r1, r1, #9
 8013eec:	430a      	orrs	r2, r1
 8013eee:	60da      	str	r2, [r3, #12]
 8013ef0:	e00b      	b.n	8013f0a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ef6:	2220      	movs	r2, #32
 8013ef8:	431a      	orrs	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f02:	2201      	movs	r2, #1
 8013f04:	431a      	orrs	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d11f      	bne.n	8013f52 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	691a      	ldr	r2, [r3, #16]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	492a      	ldr	r1, [pc, #168]	@ (8013fc8 <HAL_ADC_Init+0x2e4>)
 8013f1e:	400a      	ands	r2, r1
 8013f20:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	6919      	ldr	r1, [r3, #16]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013f30:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8013f36:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	430a      	orrs	r2, r1
 8013f3e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	691a      	ldr	r2, [r3, #16]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	2101      	movs	r1, #1
 8013f4c:	430a      	orrs	r2, r1
 8013f4e:	611a      	str	r2, [r3, #16]
 8013f50:	e00e      	b.n	8013f70 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	4013      	ands	r3, r2
 8013f5c:	2b01      	cmp	r3, #1
 8013f5e:	d107      	bne.n	8013f70 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	691a      	ldr	r2, [r3, #16]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2101      	movs	r1, #1
 8013f6c:	438a      	bics	r2, r1
 8013f6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	695a      	ldr	r2, [r3, #20]
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2107      	movs	r1, #7
 8013f7c:	438a      	bics	r2, r1
 8013f7e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	6959      	ldr	r1, [r3, #20]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	430a      	orrs	r2, r1
 8013f90:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f9c:	2203      	movs	r2, #3
 8013f9e:	4393      	bics	r3, r2
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	431a      	orrs	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	0018      	movs	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	b002      	add	sp, #8
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	46c0      	nop			@ (mov r8, r8)
 8013fb4:	fffffefd 	.word	0xfffffefd
 8013fb8:	40012708 	.word	0x40012708
 8013fbc:	ffc3ffff 	.word	0xffc3ffff
 8013fc0:	fdffffff 	.word	0xfdffffff
 8013fc4:	fffe0219 	.word	0xfffe0219
 8013fc8:	fffffc03 	.word	0xfffffc03

08013fcc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8013fcc:	b590      	push	{r4, r7, lr}
 8013fce:	b085      	sub	sp, #20
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013fd4:	230f      	movs	r3, #15
 8013fd6:	18fb      	adds	r3, r7, r3
 8013fd8:	2200      	movs	r2, #0
 8013fda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	689b      	ldr	r3, [r3, #8]
 8013fe2:	2204      	movs	r2, #4
 8013fe4:	4013      	ands	r3, r2
 8013fe6:	d138      	bne.n	801405a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2250      	movs	r2, #80	@ 0x50
 8013fec:	5c9b      	ldrb	r3, [r3, r2]
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d101      	bne.n	8013ff6 <HAL_ADC_Start+0x2a>
 8013ff2:	2302      	movs	r3, #2
 8013ff4:	e038      	b.n	8014068 <HAL_ADC_Start+0x9c>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2250      	movs	r2, #80	@ 0x50
 8013ffa:	2101      	movs	r1, #1
 8013ffc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	69db      	ldr	r3, [r3, #28]
 8014002:	2b01      	cmp	r3, #1
 8014004:	d007      	beq.n	8014016 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014006:	230f      	movs	r3, #15
 8014008:	18fc      	adds	r4, r7, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	0018      	movs	r0, r3
 801400e:	f000 f95f 	bl	80142d0 <ADC_Enable>
 8014012:	0003      	movs	r3, r0
 8014014:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014016:	230f      	movs	r3, #15
 8014018:	18fb      	adds	r3, r7, r3
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d120      	bne.n	8014062 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014024:	4a12      	ldr	r2, [pc, #72]	@ (8014070 <HAL_ADC_Start+0xa4>)
 8014026:	4013      	ands	r3, r2
 8014028:	2280      	movs	r2, #128	@ 0x80
 801402a:	0052      	lsls	r2, r2, #1
 801402c:	431a      	orrs	r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2250      	movs	r2, #80	@ 0x50
 801403c:	2100      	movs	r1, #0
 801403e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	221c      	movs	r2, #28
 8014046:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	689a      	ldr	r2, [r3, #8]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2104      	movs	r1, #4
 8014054:	430a      	orrs	r2, r1
 8014056:	609a      	str	r2, [r3, #8]
 8014058:	e003      	b.n	8014062 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801405a:	230f      	movs	r3, #15
 801405c:	18fb      	adds	r3, r7, r3
 801405e:	2202      	movs	r2, #2
 8014060:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014062:	230f      	movs	r3, #15
 8014064:	18fb      	adds	r3, r7, r3
 8014066:	781b      	ldrb	r3, [r3, #0]
}
 8014068:	0018      	movs	r0, r3
 801406a:	46bd      	mov	sp, r7
 801406c:	b005      	add	sp, #20
 801406e:	bd90      	pop	{r4, r7, pc}
 8014070:	fffff0fe 	.word	0xfffff0fe

08014074 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014082:	2300      	movs	r3, #0
 8014084:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	695b      	ldr	r3, [r3, #20]
 801408a:	2b08      	cmp	r3, #8
 801408c:	d102      	bne.n	8014094 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801408e:	2308      	movs	r3, #8
 8014090:	60fb      	str	r3, [r7, #12]
 8014092:	e014      	b.n	80140be <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	2201      	movs	r2, #1
 801409c:	4013      	ands	r3, r2
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d10b      	bne.n	80140ba <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140a6:	2220      	movs	r2, #32
 80140a8:	431a      	orrs	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2250      	movs	r2, #80	@ 0x50
 80140b2:	2100      	movs	r1, #0
 80140b4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80140b6:	2301      	movs	r3, #1
 80140b8:	e072      	b.n	80141a0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80140ba:	230c      	movs	r3, #12
 80140bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80140be:	f7ff fda9 	bl	8013c14 <HAL_GetTick>
 80140c2:	0003      	movs	r3, r0
 80140c4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80140c6:	e01f      	b.n	8014108 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	3301      	adds	r3, #1
 80140cc:	d01c      	beq.n	8014108 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d007      	beq.n	80140e4 <HAL_ADC_PollForConversion+0x70>
 80140d4:	f7ff fd9e 	bl	8013c14 <HAL_GetTick>
 80140d8:	0002      	movs	r2, r0
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d211      	bcs.n	8014108 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	68fa      	ldr	r2, [r7, #12]
 80140ec:	4013      	ands	r3, r2
 80140ee:	d10b      	bne.n	8014108 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140f4:	2204      	movs	r2, #4
 80140f6:	431a      	orrs	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2250      	movs	r2, #80	@ 0x50
 8014100:	2100      	movs	r1, #0
 8014102:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014104:	2303      	movs	r3, #3
 8014106:	e04b      	b.n	80141a0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	4013      	ands	r3, r2
 8014112:	d0d9      	beq.n	80140c8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014118:	2280      	movs	r2, #128	@ 0x80
 801411a:	0092      	lsls	r2, r2, #2
 801411c:	431a      	orrs	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	68da      	ldr	r2, [r3, #12]
 8014128:	23c0      	movs	r3, #192	@ 0xc0
 801412a:	011b      	lsls	r3, r3, #4
 801412c:	4013      	ands	r3, r2
 801412e:	d12e      	bne.n	801418e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2220      	movs	r2, #32
 8014134:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014136:	2b00      	cmp	r3, #0
 8014138:	d129      	bne.n	801418e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2208      	movs	r2, #8
 8014142:	4013      	ands	r3, r2
 8014144:	2b08      	cmp	r3, #8
 8014146:	d122      	bne.n	801418e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	2204      	movs	r2, #4
 8014150:	4013      	ands	r3, r2
 8014152:	d110      	bne.n	8014176 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	685a      	ldr	r2, [r3, #4]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	210c      	movs	r1, #12
 8014160:	438a      	bics	r2, r1
 8014162:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014168:	4a0f      	ldr	r2, [pc, #60]	@ (80141a8 <HAL_ADC_PollForConversion+0x134>)
 801416a:	4013      	ands	r3, r2
 801416c:	2201      	movs	r2, #1
 801416e:	431a      	orrs	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	655a      	str	r2, [r3, #84]	@ 0x54
 8014174:	e00b      	b.n	801418e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801417a:	2220      	movs	r2, #32
 801417c:	431a      	orrs	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014186:	2201      	movs	r2, #1
 8014188:	431a      	orrs	r2, r3
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	699b      	ldr	r3, [r3, #24]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d103      	bne.n	801419e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	220c      	movs	r2, #12
 801419c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	0018      	movs	r0, r3
 80141a2:	46bd      	mov	sp, r7
 80141a4:	b004      	add	sp, #16
 80141a6:	bd80      	pop	{r7, pc}
 80141a8:	fffffefe 	.word	0xfffffefe

080141ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80141ba:	0018      	movs	r0, r3
 80141bc:	46bd      	mov	sp, r7
 80141be:	b002      	add	sp, #8
 80141c0:	bd80      	pop	{r7, pc}
	...

080141c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2250      	movs	r2, #80	@ 0x50
 80141d2:	5c9b      	ldrb	r3, [r3, r2]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d101      	bne.n	80141dc <HAL_ADC_ConfigChannel+0x18>
 80141d8:	2302      	movs	r3, #2
 80141da:	e06c      	b.n	80142b6 <HAL_ADC_ConfigChannel+0xf2>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2250      	movs	r2, #80	@ 0x50
 80141e0:	2101      	movs	r1, #1
 80141e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	689b      	ldr	r3, [r3, #8]
 80141ea:	2204      	movs	r2, #4
 80141ec:	4013      	ands	r3, r2
 80141ee:	d00b      	beq.n	8014208 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141f4:	2220      	movs	r2, #32
 80141f6:	431a      	orrs	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2250      	movs	r2, #80	@ 0x50
 8014200:	2100      	movs	r1, #0
 8014202:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014204:	2301      	movs	r3, #1
 8014206:	e056      	b.n	80142b6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	4a2c      	ldr	r2, [pc, #176]	@ (80142c0 <HAL_ADC_ConfigChannel+0xfc>)
 801420e:	4293      	cmp	r3, r2
 8014210:	d028      	beq.n	8014264 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	035b      	lsls	r3, r3, #13
 801421e:	0b5a      	lsrs	r2, r3, #13
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	430a      	orrs	r2, r1
 8014226:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	2380      	movs	r3, #128	@ 0x80
 801422e:	02db      	lsls	r3, r3, #11
 8014230:	4013      	ands	r3, r2
 8014232:	d009      	beq.n	8014248 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014234:	4b23      	ldr	r3, [pc, #140]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	4b22      	ldr	r3, [pc, #136]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 801423a:	2180      	movs	r1, #128	@ 0x80
 801423c:	0409      	lsls	r1, r1, #16
 801423e:	430a      	orrs	r2, r1
 8014240:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014242:	200a      	movs	r0, #10
 8014244:	f000 f8ac 	bl	80143a0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	2380      	movs	r3, #128	@ 0x80
 801424e:	029b      	lsls	r3, r3, #10
 8014250:	4013      	ands	r3, r2
 8014252:	d02b      	beq.n	80142ac <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014254:	4b1b      	ldr	r3, [pc, #108]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	4b1a      	ldr	r3, [pc, #104]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 801425a:	2180      	movs	r1, #128	@ 0x80
 801425c:	03c9      	lsls	r1, r1, #15
 801425e:	430a      	orrs	r2, r1
 8014260:	601a      	str	r2, [r3, #0]
 8014262:	e023      	b.n	80142ac <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	035b      	lsls	r3, r3, #13
 8014270:	0b5b      	lsrs	r3, r3, #13
 8014272:	43d9      	mvns	r1, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	400a      	ands	r2, r1
 801427a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	2380      	movs	r3, #128	@ 0x80
 8014282:	02db      	lsls	r3, r3, #11
 8014284:	4013      	ands	r3, r2
 8014286:	d005      	beq.n	8014294 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014288:	4b0e      	ldr	r3, [pc, #56]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 801428a:	681a      	ldr	r2, [r3, #0]
 801428c:	4b0d      	ldr	r3, [pc, #52]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 801428e:	490e      	ldr	r1, [pc, #56]	@ (80142c8 <HAL_ADC_ConfigChannel+0x104>)
 8014290:	400a      	ands	r2, r1
 8014292:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	2380      	movs	r3, #128	@ 0x80
 801429a:	029b      	lsls	r3, r3, #10
 801429c:	4013      	ands	r3, r2
 801429e:	d005      	beq.n	80142ac <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80142a0:	4b08      	ldr	r3, [pc, #32]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	4b07      	ldr	r3, [pc, #28]	@ (80142c4 <HAL_ADC_ConfigChannel+0x100>)
 80142a6:	4909      	ldr	r1, [pc, #36]	@ (80142cc <HAL_ADC_ConfigChannel+0x108>)
 80142a8:	400a      	ands	r2, r1
 80142aa:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2250      	movs	r2, #80	@ 0x50
 80142b0:	2100      	movs	r1, #0
 80142b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	0018      	movs	r0, r3
 80142b8:	46bd      	mov	sp, r7
 80142ba:	b002      	add	sp, #8
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	46c0      	nop			@ (mov r8, r8)
 80142c0:	00001001 	.word	0x00001001
 80142c4:	40012708 	.word	0x40012708
 80142c8:	ff7fffff 	.word	0xff7fffff
 80142cc:	ffbfffff 	.word	0xffbfffff

080142d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80142d8:	2300      	movs	r3, #0
 80142da:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	2203      	movs	r2, #3
 80142e4:	4013      	ands	r3, r2
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d108      	bne.n	80142fc <ADC_Enable+0x2c>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2201      	movs	r2, #1
 80142f2:	4013      	ands	r3, r2
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d101      	bne.n	80142fc <ADC_Enable+0x2c>
 80142f8:	2301      	movs	r3, #1
 80142fa:	e000      	b.n	80142fe <ADC_Enable+0x2e>
 80142fc:	2300      	movs	r3, #0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d146      	bne.n	8014390 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	689b      	ldr	r3, [r3, #8]
 8014308:	4a24      	ldr	r2, [pc, #144]	@ (801439c <ADC_Enable+0xcc>)
 801430a:	4013      	ands	r3, r2
 801430c:	d00d      	beq.n	801432a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014312:	2210      	movs	r2, #16
 8014314:	431a      	orrs	r2, r3
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801431e:	2201      	movs	r2, #1
 8014320:	431a      	orrs	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014326:	2301      	movs	r3, #1
 8014328:	e033      	b.n	8014392 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	689a      	ldr	r2, [r3, #8]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2101      	movs	r1, #1
 8014336:	430a      	orrs	r2, r1
 8014338:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801433a:	2001      	movs	r0, #1
 801433c:	f000 f830 	bl	80143a0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014340:	f7ff fc68 	bl	8013c14 <HAL_GetTick>
 8014344:	0003      	movs	r3, r0
 8014346:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014348:	e01b      	b.n	8014382 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801434a:	f7ff fc63 	bl	8013c14 <HAL_GetTick>
 801434e:	0002      	movs	r2, r0
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	1ad3      	subs	r3, r2, r3
 8014354:	2b0a      	cmp	r3, #10
 8014356:	d914      	bls.n	8014382 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	2201      	movs	r2, #1
 8014360:	4013      	ands	r3, r2
 8014362:	2b01      	cmp	r3, #1
 8014364:	d00d      	beq.n	8014382 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801436a:	2210      	movs	r2, #16
 801436c:	431a      	orrs	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014376:	2201      	movs	r2, #1
 8014378:	431a      	orrs	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801437e:	2301      	movs	r3, #1
 8014380:	e007      	b.n	8014392 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2201      	movs	r2, #1
 801438a:	4013      	ands	r3, r2
 801438c:	2b01      	cmp	r3, #1
 801438e:	d1dc      	bne.n	801434a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014390:	2300      	movs	r3, #0
}
 8014392:	0018      	movs	r0, r3
 8014394:	46bd      	mov	sp, r7
 8014396:	b004      	add	sp, #16
 8014398:	bd80      	pop	{r7, pc}
 801439a:	46c0      	nop			@ (mov r8, r8)
 801439c:	80000017 	.word	0x80000017

080143a0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80143a8:	4b0b      	ldr	r3, [pc, #44]	@ (80143d8 <ADC_DelayMicroSecond+0x38>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	490b      	ldr	r1, [pc, #44]	@ (80143dc <ADC_DelayMicroSecond+0x3c>)
 80143ae:	0018      	movs	r0, r3
 80143b0:	f7eb fef8 	bl	80001a4 <__udivsi3>
 80143b4:	0003      	movs	r3, r0
 80143b6:	001a      	movs	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	4353      	muls	r3, r2
 80143bc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80143be:	e002      	b.n	80143c6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	3b01      	subs	r3, #1
 80143c4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1f9      	bne.n	80143c0 <ADC_DelayMicroSecond+0x20>
  }
}
 80143cc:	46c0      	nop			@ (mov r8, r8)
 80143ce:	46c0      	nop			@ (mov r8, r8)
 80143d0:	46bd      	mov	sp, r7
 80143d2:	b004      	add	sp, #16
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	46c0      	nop			@ (mov r8, r8)
 80143d8:	200000e0 	.word	0x200000e0
 80143dc:	000f4240 	.word	0x000f4240

080143e0 <__NVIC_EnableIRQ>:
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	0002      	movs	r2, r0
 80143e8:	1dfb      	adds	r3, r7, #7
 80143ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80143ec:	1dfb      	adds	r3, r7, #7
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80143f2:	d809      	bhi.n	8014408 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80143f4:	1dfb      	adds	r3, r7, #7
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	001a      	movs	r2, r3
 80143fa:	231f      	movs	r3, #31
 80143fc:	401a      	ands	r2, r3
 80143fe:	4b04      	ldr	r3, [pc, #16]	@ (8014410 <__NVIC_EnableIRQ+0x30>)
 8014400:	2101      	movs	r1, #1
 8014402:	4091      	lsls	r1, r2
 8014404:	000a      	movs	r2, r1
 8014406:	601a      	str	r2, [r3, #0]
}
 8014408:	46c0      	nop			@ (mov r8, r8)
 801440a:	46bd      	mov	sp, r7
 801440c:	b002      	add	sp, #8
 801440e:	bd80      	pop	{r7, pc}
 8014410:	e000e100 	.word	0xe000e100

08014414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014414:	b590      	push	{r4, r7, lr}
 8014416:	b083      	sub	sp, #12
 8014418:	af00      	add	r7, sp, #0
 801441a:	0002      	movs	r2, r0
 801441c:	6039      	str	r1, [r7, #0]
 801441e:	1dfb      	adds	r3, r7, #7
 8014420:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014422:	1dfb      	adds	r3, r7, #7
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b7f      	cmp	r3, #127	@ 0x7f
 8014428:	d828      	bhi.n	801447c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801442a:	4a2f      	ldr	r2, [pc, #188]	@ (80144e8 <__NVIC_SetPriority+0xd4>)
 801442c:	1dfb      	adds	r3, r7, #7
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	b25b      	sxtb	r3, r3
 8014432:	089b      	lsrs	r3, r3, #2
 8014434:	33c0      	adds	r3, #192	@ 0xc0
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	589b      	ldr	r3, [r3, r2]
 801443a:	1dfa      	adds	r2, r7, #7
 801443c:	7812      	ldrb	r2, [r2, #0]
 801443e:	0011      	movs	r1, r2
 8014440:	2203      	movs	r2, #3
 8014442:	400a      	ands	r2, r1
 8014444:	00d2      	lsls	r2, r2, #3
 8014446:	21ff      	movs	r1, #255	@ 0xff
 8014448:	4091      	lsls	r1, r2
 801444a:	000a      	movs	r2, r1
 801444c:	43d2      	mvns	r2, r2
 801444e:	401a      	ands	r2, r3
 8014450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	019b      	lsls	r3, r3, #6
 8014456:	22ff      	movs	r2, #255	@ 0xff
 8014458:	401a      	ands	r2, r3
 801445a:	1dfb      	adds	r3, r7, #7
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	0018      	movs	r0, r3
 8014460:	2303      	movs	r3, #3
 8014462:	4003      	ands	r3, r0
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014468:	481f      	ldr	r0, [pc, #124]	@ (80144e8 <__NVIC_SetPriority+0xd4>)
 801446a:	1dfb      	adds	r3, r7, #7
 801446c:	781b      	ldrb	r3, [r3, #0]
 801446e:	b25b      	sxtb	r3, r3
 8014470:	089b      	lsrs	r3, r3, #2
 8014472:	430a      	orrs	r2, r1
 8014474:	33c0      	adds	r3, #192	@ 0xc0
 8014476:	009b      	lsls	r3, r3, #2
 8014478:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801447a:	e031      	b.n	80144e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801447c:	4a1b      	ldr	r2, [pc, #108]	@ (80144ec <__NVIC_SetPriority+0xd8>)
 801447e:	1dfb      	adds	r3, r7, #7
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	0019      	movs	r1, r3
 8014484:	230f      	movs	r3, #15
 8014486:	400b      	ands	r3, r1
 8014488:	3b08      	subs	r3, #8
 801448a:	089b      	lsrs	r3, r3, #2
 801448c:	3306      	adds	r3, #6
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	18d3      	adds	r3, r2, r3
 8014492:	3304      	adds	r3, #4
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	1dfa      	adds	r2, r7, #7
 8014498:	7812      	ldrb	r2, [r2, #0]
 801449a:	0011      	movs	r1, r2
 801449c:	2203      	movs	r2, #3
 801449e:	400a      	ands	r2, r1
 80144a0:	00d2      	lsls	r2, r2, #3
 80144a2:	21ff      	movs	r1, #255	@ 0xff
 80144a4:	4091      	lsls	r1, r2
 80144a6:	000a      	movs	r2, r1
 80144a8:	43d2      	mvns	r2, r2
 80144aa:	401a      	ands	r2, r3
 80144ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	019b      	lsls	r3, r3, #6
 80144b2:	22ff      	movs	r2, #255	@ 0xff
 80144b4:	401a      	ands	r2, r3
 80144b6:	1dfb      	adds	r3, r7, #7
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	0018      	movs	r0, r3
 80144bc:	2303      	movs	r3, #3
 80144be:	4003      	ands	r3, r0
 80144c0:	00db      	lsls	r3, r3, #3
 80144c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80144c4:	4809      	ldr	r0, [pc, #36]	@ (80144ec <__NVIC_SetPriority+0xd8>)
 80144c6:	1dfb      	adds	r3, r7, #7
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	001c      	movs	r4, r3
 80144cc:	230f      	movs	r3, #15
 80144ce:	4023      	ands	r3, r4
 80144d0:	3b08      	subs	r3, #8
 80144d2:	089b      	lsrs	r3, r3, #2
 80144d4:	430a      	orrs	r2, r1
 80144d6:	3306      	adds	r3, #6
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	18c3      	adds	r3, r0, r3
 80144dc:	3304      	adds	r3, #4
 80144de:	601a      	str	r2, [r3, #0]
}
 80144e0:	46c0      	nop			@ (mov r8, r8)
 80144e2:	46bd      	mov	sp, r7
 80144e4:	b003      	add	sp, #12
 80144e6:	bd90      	pop	{r4, r7, pc}
 80144e8:	e000e100 	.word	0xe000e100
 80144ec:	e000ed00 	.word	0xe000ed00

080144f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80144f4:	f3bf 8f4f 	dsb	sy
}
 80144f8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80144fa:	4b04      	ldr	r3, [pc, #16]	@ (801450c <__NVIC_SystemReset+0x1c>)
 80144fc:	4a04      	ldr	r2, [pc, #16]	@ (8014510 <__NVIC_SystemReset+0x20>)
 80144fe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014500:	f3bf 8f4f 	dsb	sy
}
 8014504:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014506:	46c0      	nop			@ (mov r8, r8)
 8014508:	e7fd      	b.n	8014506 <__NVIC_SystemReset+0x16>
 801450a:	46c0      	nop			@ (mov r8, r8)
 801450c:	e000ed00 	.word	0xe000ed00
 8014510:	05fa0004 	.word	0x05fa0004

08014514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	1e5a      	subs	r2, r3, #1
 8014520:	2380      	movs	r3, #128	@ 0x80
 8014522:	045b      	lsls	r3, r3, #17
 8014524:	429a      	cmp	r2, r3
 8014526:	d301      	bcc.n	801452c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014528:	2301      	movs	r3, #1
 801452a:	e010      	b.n	801454e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801452c:	4b0a      	ldr	r3, [pc, #40]	@ (8014558 <SysTick_Config+0x44>)
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	3a01      	subs	r2, #1
 8014532:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8014534:	2301      	movs	r3, #1
 8014536:	425b      	negs	r3, r3
 8014538:	2103      	movs	r1, #3
 801453a:	0018      	movs	r0, r3
 801453c:	f7ff ff6a 	bl	8014414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014540:	4b05      	ldr	r3, [pc, #20]	@ (8014558 <SysTick_Config+0x44>)
 8014542:	2200      	movs	r2, #0
 8014544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8014546:	4b04      	ldr	r3, [pc, #16]	@ (8014558 <SysTick_Config+0x44>)
 8014548:	2207      	movs	r2, #7
 801454a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801454c:	2300      	movs	r3, #0
}
 801454e:	0018      	movs	r0, r3
 8014550:	46bd      	mov	sp, r7
 8014552:	b002      	add	sp, #8
 8014554:	bd80      	pop	{r7, pc}
 8014556:	46c0      	nop			@ (mov r8, r8)
 8014558:	e000e010 	.word	0xe000e010

0801455c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	60b9      	str	r1, [r7, #8]
 8014564:	607a      	str	r2, [r7, #4]
 8014566:	210f      	movs	r1, #15
 8014568:	187b      	adds	r3, r7, r1
 801456a:	1c02      	adds	r2, r0, #0
 801456c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	187b      	adds	r3, r7, r1
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	b25b      	sxtb	r3, r3
 8014576:	0011      	movs	r1, r2
 8014578:	0018      	movs	r0, r3
 801457a:	f7ff ff4b 	bl	8014414 <__NVIC_SetPriority>
}
 801457e:	46c0      	nop			@ (mov r8, r8)
 8014580:	46bd      	mov	sp, r7
 8014582:	b004      	add	sp, #16
 8014584:	bd80      	pop	{r7, pc}

08014586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014586:	b580      	push	{r7, lr}
 8014588:	b082      	sub	sp, #8
 801458a:	af00      	add	r7, sp, #0
 801458c:	0002      	movs	r2, r0
 801458e:	1dfb      	adds	r3, r7, #7
 8014590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014592:	1dfb      	adds	r3, r7, #7
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	b25b      	sxtb	r3, r3
 8014598:	0018      	movs	r0, r3
 801459a:	f7ff ff21 	bl	80143e0 <__NVIC_EnableIRQ>
}
 801459e:	46c0      	nop			@ (mov r8, r8)
 80145a0:	46bd      	mov	sp, r7
 80145a2:	b002      	add	sp, #8
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80145a6:	b580      	push	{r7, lr}
 80145a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80145aa:	f7ff ffa1 	bl	80144f0 <__NVIC_SystemReset>

080145ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b082      	sub	sp, #8
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	0018      	movs	r0, r3
 80145ba:	f7ff ffab 	bl	8014514 <SysTick_Config>
 80145be:	0003      	movs	r3, r0
}
 80145c0:	0018      	movs	r0, r3
 80145c2:	46bd      	mov	sp, r7
 80145c4:	b002      	add	sp, #8
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d101      	bne.n	80145da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80145d6:	2301      	movs	r3, #1
 80145d8:	e061      	b.n	801469e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a32      	ldr	r2, [pc, #200]	@ (80146a8 <HAL_DMA_Init+0xe0>)
 80145e0:	4694      	mov	ip, r2
 80145e2:	4463      	add	r3, ip
 80145e4:	2114      	movs	r1, #20
 80145e6:	0018      	movs	r0, r3
 80145e8:	f7eb fddc 	bl	80001a4 <__udivsi3>
 80145ec:	0003      	movs	r3, r0
 80145ee:	009a      	lsls	r2, r3, #2
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	4a2d      	ldr	r2, [pc, #180]	@ (80146ac <HAL_DMA_Init+0xe4>)
 80145f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2225      	movs	r2, #37	@ 0x25
 80145fe:	2102      	movs	r1, #2
 8014600:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	4a28      	ldr	r2, [pc, #160]	@ (80146b0 <HAL_DMA_Init+0xe8>)
 801460e:	4013      	ands	r3, r2
 8014610:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	699b      	ldr	r3, [r3, #24]
 801462c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6a1b      	ldr	r3, [r3, #32]
 8014638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	4313      	orrs	r3, r2
 801463e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	68fa      	ldr	r2, [r7, #12]
 8014646:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	689a      	ldr	r2, [r3, #8]
 801464c:	2380      	movs	r3, #128	@ 0x80
 801464e:	01db      	lsls	r3, r3, #7
 8014650:	429a      	cmp	r2, r3
 8014652:	d018      	beq.n	8014686 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8014654:	4b17      	ldr	r3, [pc, #92]	@ (80146b4 <HAL_DMA_Init+0xec>)
 8014656:	681a      	ldr	r2, [r3, #0]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801465c:	211c      	movs	r1, #28
 801465e:	400b      	ands	r3, r1
 8014660:	210f      	movs	r1, #15
 8014662:	4099      	lsls	r1, r3
 8014664:	000b      	movs	r3, r1
 8014666:	43d9      	mvns	r1, r3
 8014668:	4b12      	ldr	r3, [pc, #72]	@ (80146b4 <HAL_DMA_Init+0xec>)
 801466a:	400a      	ands	r2, r1
 801466c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801466e:	4b11      	ldr	r3, [pc, #68]	@ (80146b4 <HAL_DMA_Init+0xec>)
 8014670:	6819      	ldr	r1, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	685a      	ldr	r2, [r3, #4]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801467a:	201c      	movs	r0, #28
 801467c:	4003      	ands	r3, r0
 801467e:	409a      	lsls	r2, r3
 8014680:	4b0c      	ldr	r3, [pc, #48]	@ (80146b4 <HAL_DMA_Init+0xec>)
 8014682:	430a      	orrs	r2, r1
 8014684:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2200      	movs	r2, #0
 801468a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2225      	movs	r2, #37	@ 0x25
 8014690:	2101      	movs	r1, #1
 8014692:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2224      	movs	r2, #36	@ 0x24
 8014698:	2100      	movs	r1, #0
 801469a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	0018      	movs	r0, r3
 80146a0:	46bd      	mov	sp, r7
 80146a2:	b004      	add	sp, #16
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	46c0      	nop			@ (mov r8, r8)
 80146a8:	bffdfff8 	.word	0xbffdfff8
 80146ac:	40020000 	.word	0x40020000
 80146b0:	ffff800f 	.word	0xffff800f
 80146b4:	400200a8 	.word	0x400200a8

080146b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b086      	sub	sp, #24
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	607a      	str	r2, [r7, #4]
 80146c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80146c6:	2317      	movs	r3, #23
 80146c8:	18fb      	adds	r3, r7, r3
 80146ca:	2200      	movs	r2, #0
 80146cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	2224      	movs	r2, #36	@ 0x24
 80146d2:	5c9b      	ldrb	r3, [r3, r2]
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d101      	bne.n	80146dc <HAL_DMA_Start_IT+0x24>
 80146d8:	2302      	movs	r3, #2
 80146da:	e04f      	b.n	801477c <HAL_DMA_Start_IT+0xc4>
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2224      	movs	r2, #36	@ 0x24
 80146e0:	2101      	movs	r1, #1
 80146e2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2225      	movs	r2, #37	@ 0x25
 80146e8:	5c9b      	ldrb	r3, [r3, r2]
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d13a      	bne.n	8014766 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2225      	movs	r2, #37	@ 0x25
 80146f4:	2102      	movs	r1, #2
 80146f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2200      	movs	r2, #0
 80146fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2101      	movs	r1, #1
 801470a:	438a      	bics	r2, r1
 801470c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	68b9      	ldr	r1, [r7, #8]
 8014714:	68f8      	ldr	r0, [r7, #12]
 8014716:	f000 f976 	bl	8014a06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801471e:	2b00      	cmp	r3, #0
 8014720:	d008      	beq.n	8014734 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	210e      	movs	r1, #14
 801472e:	430a      	orrs	r2, r1
 8014730:	601a      	str	r2, [r3, #0]
 8014732:	e00f      	b.n	8014754 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2104      	movs	r1, #4
 8014740:	438a      	bics	r2, r1
 8014742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	210a      	movs	r1, #10
 8014750:	430a      	orrs	r2, r1
 8014752:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2101      	movs	r1, #1
 8014760:	430a      	orrs	r2, r1
 8014762:	601a      	str	r2, [r3, #0]
 8014764:	e007      	b.n	8014776 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	2224      	movs	r2, #36	@ 0x24
 801476a:	2100      	movs	r1, #0
 801476c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801476e:	2317      	movs	r3, #23
 8014770:	18fb      	adds	r3, r7, r3
 8014772:	2202      	movs	r2, #2
 8014774:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8014776:	2317      	movs	r3, #23
 8014778:	18fb      	adds	r3, r7, r3
 801477a:	781b      	ldrb	r3, [r3, #0]
}
 801477c:	0018      	movs	r0, r3
 801477e:	46bd      	mov	sp, r7
 8014780:	b006      	add	sp, #24
 8014782:	bd80      	pop	{r7, pc}

08014784 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801478c:	230f      	movs	r3, #15
 801478e:	18fb      	adds	r3, r7, r3
 8014790:	2200      	movs	r2, #0
 8014792:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2225      	movs	r2, #37	@ 0x25
 8014798:	5c9b      	ldrb	r3, [r3, r2]
 801479a:	b2db      	uxtb	r3, r3
 801479c:	2b02      	cmp	r3, #2
 801479e:	d008      	beq.n	80147b2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2204      	movs	r2, #4
 80147a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2224      	movs	r2, #36	@ 0x24
 80147aa:	2100      	movs	r1, #0
 80147ac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80147ae:	2301      	movs	r3, #1
 80147b0:	e024      	b.n	80147fc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	210e      	movs	r1, #14
 80147be:	438a      	bics	r2, r1
 80147c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	2101      	movs	r1, #1
 80147ce:	438a      	bics	r2, r1
 80147d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147d6:	221c      	movs	r2, #28
 80147d8:	401a      	ands	r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147de:	2101      	movs	r1, #1
 80147e0:	4091      	lsls	r1, r2
 80147e2:	000a      	movs	r2, r1
 80147e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2225      	movs	r2, #37	@ 0x25
 80147ea:	2101      	movs	r1, #1
 80147ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2224      	movs	r2, #36	@ 0x24
 80147f2:	2100      	movs	r1, #0
 80147f4:	5499      	strb	r1, [r3, r2]

    return status;
 80147f6:	230f      	movs	r3, #15
 80147f8:	18fb      	adds	r3, r7, r3
 80147fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80147fc:	0018      	movs	r0, r3
 80147fe:	46bd      	mov	sp, r7
 8014800:	b004      	add	sp, #16
 8014802:	bd80      	pop	{r7, pc}

08014804 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801480c:	210f      	movs	r1, #15
 801480e:	187b      	adds	r3, r7, r1
 8014810:	2200      	movs	r2, #0
 8014812:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2225      	movs	r2, #37	@ 0x25
 8014818:	5c9b      	ldrb	r3, [r3, r2]
 801481a:	b2db      	uxtb	r3, r3
 801481c:	2b02      	cmp	r3, #2
 801481e:	d006      	beq.n	801482e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2204      	movs	r2, #4
 8014824:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8014826:	187b      	adds	r3, r7, r1
 8014828:	2201      	movs	r2, #1
 801482a:	701a      	strb	r2, [r3, #0]
 801482c:	e02a      	b.n	8014884 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	681a      	ldr	r2, [r3, #0]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	210e      	movs	r1, #14
 801483a:	438a      	bics	r2, r1
 801483c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2101      	movs	r1, #1
 801484a:	438a      	bics	r2, r1
 801484c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014852:	221c      	movs	r2, #28
 8014854:	401a      	ands	r2, r3
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801485a:	2101      	movs	r1, #1
 801485c:	4091      	lsls	r1, r2
 801485e:	000a      	movs	r2, r1
 8014860:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2225      	movs	r2, #37	@ 0x25
 8014866:	2101      	movs	r1, #1
 8014868:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2224      	movs	r2, #36	@ 0x24
 801486e:	2100      	movs	r1, #0
 8014870:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014876:	2b00      	cmp	r3, #0
 8014878:	d004      	beq.n	8014884 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	0010      	movs	r0, r2
 8014882:	4798      	blx	r3
    }
  }
  return status;
 8014884:	230f      	movs	r3, #15
 8014886:	18fb      	adds	r3, r7, r3
 8014888:	781b      	ldrb	r3, [r3, #0]
}
 801488a:	0018      	movs	r0, r3
 801488c:	46bd      	mov	sp, r7
 801488e:	b004      	add	sp, #16
 8014890:	bd80      	pop	{r7, pc}

08014892 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148ae:	221c      	movs	r2, #28
 80148b0:	4013      	ands	r3, r2
 80148b2:	2204      	movs	r2, #4
 80148b4:	409a      	lsls	r2, r3
 80148b6:	0013      	movs	r3, r2
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	4013      	ands	r3, r2
 80148bc:	d026      	beq.n	801490c <HAL_DMA_IRQHandler+0x7a>
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	2204      	movs	r2, #4
 80148c2:	4013      	ands	r3, r2
 80148c4:	d022      	beq.n	801490c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	2220      	movs	r2, #32
 80148ce:	4013      	ands	r3, r2
 80148d0:	d107      	bne.n	80148e2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2104      	movs	r1, #4
 80148de:	438a      	bics	r2, r1
 80148e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148e6:	221c      	movs	r2, #28
 80148e8:	401a      	ands	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148ee:	2104      	movs	r1, #4
 80148f0:	4091      	lsls	r1, r2
 80148f2:	000a      	movs	r2, r1
 80148f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d100      	bne.n	8014900 <HAL_DMA_IRQHandler+0x6e>
 80148fe:	e071      	b.n	80149e4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	0010      	movs	r0, r2
 8014908:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801490a:	e06b      	b.n	80149e4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014910:	221c      	movs	r2, #28
 8014912:	4013      	ands	r3, r2
 8014914:	2202      	movs	r2, #2
 8014916:	409a      	lsls	r2, r3
 8014918:	0013      	movs	r3, r2
 801491a:	68fa      	ldr	r2, [r7, #12]
 801491c:	4013      	ands	r3, r2
 801491e:	d02d      	beq.n	801497c <HAL_DMA_IRQHandler+0xea>
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	2202      	movs	r2, #2
 8014924:	4013      	ands	r3, r2
 8014926:	d029      	beq.n	801497c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2220      	movs	r2, #32
 8014930:	4013      	ands	r3, r2
 8014932:	d10b      	bne.n	801494c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	210a      	movs	r1, #10
 8014940:	438a      	bics	r2, r1
 8014942:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2225      	movs	r2, #37	@ 0x25
 8014948:	2101      	movs	r1, #1
 801494a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014950:	221c      	movs	r2, #28
 8014952:	401a      	ands	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014958:	2102      	movs	r1, #2
 801495a:	4091      	lsls	r1, r2
 801495c:	000a      	movs	r2, r1
 801495e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2224      	movs	r2, #36	@ 0x24
 8014964:	2100      	movs	r1, #0
 8014966:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801496c:	2b00      	cmp	r3, #0
 801496e:	d039      	beq.n	80149e4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	0010      	movs	r0, r2
 8014978:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 801497a:	e033      	b.n	80149e4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014980:	221c      	movs	r2, #28
 8014982:	4013      	ands	r3, r2
 8014984:	2208      	movs	r2, #8
 8014986:	409a      	lsls	r2, r3
 8014988:	0013      	movs	r3, r2
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	4013      	ands	r3, r2
 801498e:	d02a      	beq.n	80149e6 <HAL_DMA_IRQHandler+0x154>
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	2208      	movs	r2, #8
 8014994:	4013      	ands	r3, r2
 8014996:	d026      	beq.n	80149e6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	210e      	movs	r1, #14
 80149a4:	438a      	bics	r2, r1
 80149a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149ac:	221c      	movs	r2, #28
 80149ae:	401a      	ands	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149b4:	2101      	movs	r1, #1
 80149b6:	4091      	lsls	r1, r2
 80149b8:	000a      	movs	r2, r1
 80149ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2201      	movs	r2, #1
 80149c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2225      	movs	r2, #37	@ 0x25
 80149c6:	2101      	movs	r1, #1
 80149c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2224      	movs	r2, #36	@ 0x24
 80149ce:	2100      	movs	r1, #0
 80149d0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d005      	beq.n	80149e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	0010      	movs	r0, r2
 80149e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80149e4:	46c0      	nop			@ (mov r8, r8)
 80149e6:	46c0      	nop			@ (mov r8, r8)
}
 80149e8:	46bd      	mov	sp, r7
 80149ea:	b004      	add	sp, #16
 80149ec:	bd80      	pop	{r7, pc}

080149ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b082      	sub	sp, #8
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2225      	movs	r2, #37	@ 0x25
 80149fa:	5c9b      	ldrb	r3, [r3, r2]
 80149fc:	b2db      	uxtb	r3, r3
}
 80149fe:	0018      	movs	r0, r3
 8014a00:	46bd      	mov	sp, r7
 8014a02:	b002      	add	sp, #8
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b084      	sub	sp, #16
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	60f8      	str	r0, [r7, #12]
 8014a0e:	60b9      	str	r1, [r7, #8]
 8014a10:	607a      	str	r2, [r7, #4]
 8014a12:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a18:	221c      	movs	r2, #28
 8014a1a:	401a      	ands	r2, r3
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a20:	2101      	movs	r1, #1
 8014a22:	4091      	lsls	r1, r2
 8014a24:	000a      	movs	r2, r1
 8014a26:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	683a      	ldr	r2, [r7, #0]
 8014a2e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	2b10      	cmp	r3, #16
 8014a36:	d108      	bne.n	8014a4a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	68ba      	ldr	r2, [r7, #8]
 8014a46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8014a48:	e007      	b.n	8014a5a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	68ba      	ldr	r2, [r7, #8]
 8014a50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	687a      	ldr	r2, [r7, #4]
 8014a58:	60da      	str	r2, [r3, #12]
}
 8014a5a:	46c0      	nop			@ (mov r8, r8)
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	b004      	add	sp, #16
 8014a60:	bd80      	pop	{r7, pc}
	...

08014a64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b084      	sub	sp, #16
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8014a6c:	f7ff f8d2 	bl	8013c14 <HAL_GetTick>
 8014a70:	0003      	movs	r3, r0
 8014a72:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014a74:	e00f      	b.n	8014a96 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	d00c      	beq.n	8014a96 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d007      	beq.n	8014a92 <FLASH_WaitForLastOperation+0x2e>
 8014a82:	f7ff f8c7 	bl	8013c14 <HAL_GetTick>
 8014a86:	0002      	movs	r2, r0
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	687a      	ldr	r2, [r7, #4]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d201      	bcs.n	8014a96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8014a92:	2303      	movs	r3, #3
 8014a94:	e052      	b.n	8014b3c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014a96:	4b2b      	ldr	r3, [pc, #172]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014a98:	699b      	ldr	r3, [r3, #24]
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	4013      	ands	r3, r2
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d0e9      	beq.n	8014a76 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014aa2:	4b28      	ldr	r3, [pc, #160]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014aa4:	699b      	ldr	r3, [r3, #24]
 8014aa6:	2202      	movs	r2, #2
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	2b02      	cmp	r3, #2
 8014aac:	d102      	bne.n	8014ab4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8014aae:	4b25      	ldr	r3, [pc, #148]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014ab0:	2202      	movs	r2, #2
 8014ab2:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014ab4:	4b23      	ldr	r3, [pc, #140]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014ab6:	699a      	ldr	r2, [r3, #24]
 8014ab8:	2380      	movs	r3, #128	@ 0x80
 8014aba:	005b      	lsls	r3, r3, #1
 8014abc:	401a      	ands	r2, r3
 8014abe:	2380      	movs	r3, #128	@ 0x80
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d035      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014ac8:	699a      	ldr	r2, [r3, #24]
 8014aca:	2380      	movs	r3, #128	@ 0x80
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014ad0:	2380      	movs	r3, #128	@ 0x80
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d02c      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014ada:	699a      	ldr	r2, [r3, #24]
 8014adc:	2380      	movs	r3, #128	@ 0x80
 8014ade:	00db      	lsls	r3, r3, #3
 8014ae0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014ae2:	2380      	movs	r3, #128	@ 0x80
 8014ae4:	00db      	lsls	r3, r3, #3
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d023      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014aea:	4b16      	ldr	r3, [pc, #88]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014aec:	699a      	ldr	r2, [r3, #24]
 8014aee:	2380      	movs	r3, #128	@ 0x80
 8014af0:	011b      	lsls	r3, r3, #4
 8014af2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014af4:	2380      	movs	r3, #128	@ 0x80
 8014af6:	011b      	lsls	r3, r3, #4
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d01a      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014afc:	4b11      	ldr	r3, [pc, #68]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014afe:	699a      	ldr	r2, [r3, #24]
 8014b00:	2380      	movs	r3, #128	@ 0x80
 8014b02:	019b      	lsls	r3, r3, #6
 8014b04:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014b06:	2380      	movs	r3, #128	@ 0x80
 8014b08:	019b      	lsls	r3, r3, #6
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d011      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014b10:	699a      	ldr	r2, [r3, #24]
 8014b12:	2380      	movs	r3, #128	@ 0x80
 8014b14:	029b      	lsls	r3, r3, #10
 8014b16:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014b18:	2380      	movs	r3, #128	@ 0x80
 8014b1a:	029b      	lsls	r3, r3, #10
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d008      	beq.n	8014b32 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014b20:	4b08      	ldr	r3, [pc, #32]	@ (8014b44 <FLASH_WaitForLastOperation+0xe0>)
 8014b22:	699a      	ldr	r2, [r3, #24]
 8014b24:	2380      	movs	r3, #128	@ 0x80
 8014b26:	025b      	lsls	r3, r3, #9
 8014b28:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014b2a:	2380      	movs	r3, #128	@ 0x80
 8014b2c:	025b      	lsls	r3, r3, #9
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d103      	bne.n	8014b3a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8014b32:	f000 f809 	bl	8014b48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8014b36:	2301      	movs	r3, #1
 8014b38:	e000      	b.n	8014b3c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014b3a:	2300      	movs	r3, #0
}
 8014b3c:	0018      	movs	r0, r3
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	b004      	add	sp, #16
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	40022000 	.word	0x40022000

08014b48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014b52:	4b49      	ldr	r3, [pc, #292]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014b54:	699a      	ldr	r2, [r3, #24]
 8014b56:	2380      	movs	r3, #128	@ 0x80
 8014b58:	005b      	lsls	r3, r3, #1
 8014b5a:	401a      	ands	r2, r3
 8014b5c:	2380      	movs	r3, #128	@ 0x80
 8014b5e:	005b      	lsls	r3, r3, #1
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d10a      	bne.n	8014b7a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014b64:	4b45      	ldr	r3, [pc, #276]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014b66:	695b      	ldr	r3, [r3, #20]
 8014b68:	2202      	movs	r2, #2
 8014b6a:	431a      	orrs	r2, r3
 8014b6c:	4b43      	ldr	r3, [pc, #268]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014b6e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2280      	movs	r2, #128	@ 0x80
 8014b74:	0052      	lsls	r2, r2, #1
 8014b76:	4313      	orrs	r3, r2
 8014b78:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014b7c:	699a      	ldr	r2, [r3, #24]
 8014b7e:	2380      	movs	r3, #128	@ 0x80
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	401a      	ands	r2, r3
 8014b84:	2380      	movs	r3, #128	@ 0x80
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d10a      	bne.n	8014ba2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8014b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014b8e:	695b      	ldr	r3, [r3, #20]
 8014b90:	2201      	movs	r2, #1
 8014b92:	431a      	orrs	r2, r3
 8014b94:	4b39      	ldr	r3, [pc, #228]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014b96:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2280      	movs	r2, #128	@ 0x80
 8014b9c:	0092      	lsls	r2, r2, #2
 8014b9e:	4313      	orrs	r3, r2
 8014ba0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014ba2:	4b35      	ldr	r3, [pc, #212]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014ba4:	699a      	ldr	r2, [r3, #24]
 8014ba6:	2380      	movs	r3, #128	@ 0x80
 8014ba8:	00db      	lsls	r3, r3, #3
 8014baa:	401a      	ands	r2, r3
 8014bac:	2380      	movs	r3, #128	@ 0x80
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d10a      	bne.n	8014bca <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014bb4:	4b31      	ldr	r3, [pc, #196]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014bb6:	695b      	ldr	r3, [r3, #20]
 8014bb8:	2208      	movs	r2, #8
 8014bba:	431a      	orrs	r2, r3
 8014bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014bbe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2280      	movs	r2, #128	@ 0x80
 8014bc4:	00d2      	lsls	r2, r2, #3
 8014bc6:	4313      	orrs	r3, r2
 8014bc8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8014bca:	4b2b      	ldr	r3, [pc, #172]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014bcc:	699a      	ldr	r2, [r3, #24]
 8014bce:	2380      	movs	r3, #128	@ 0x80
 8014bd0:	011b      	lsls	r3, r3, #4
 8014bd2:	401a      	ands	r2, r3
 8014bd4:	2380      	movs	r3, #128	@ 0x80
 8014bd6:	011b      	lsls	r3, r3, #4
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d10a      	bne.n	8014bf2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8014bdc:	4b27      	ldr	r3, [pc, #156]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014bde:	695b      	ldr	r3, [r3, #20]
 8014be0:	2204      	movs	r2, #4
 8014be2:	431a      	orrs	r2, r3
 8014be4:	4b25      	ldr	r3, [pc, #148]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014be6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2280      	movs	r2, #128	@ 0x80
 8014bec:	0112      	lsls	r2, r2, #4
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8014bf2:	4b21      	ldr	r3, [pc, #132]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014bf4:	699a      	ldr	r2, [r3, #24]
 8014bf6:	2380      	movs	r3, #128	@ 0x80
 8014bf8:	019b      	lsls	r3, r3, #6
 8014bfa:	401a      	ands	r2, r3
 8014bfc:	2380      	movs	r3, #128	@ 0x80
 8014bfe:	019b      	lsls	r3, r3, #6
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d10a      	bne.n	8014c1a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8014c04:	4b1d      	ldr	r3, [pc, #116]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c06:	695b      	ldr	r3, [r3, #20]
 8014c08:	2210      	movs	r2, #16
 8014c0a:	431a      	orrs	r2, r3
 8014c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c0e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2280      	movs	r2, #128	@ 0x80
 8014c14:	0192      	lsls	r2, r2, #6
 8014c16:	4313      	orrs	r3, r2
 8014c18:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014c1a:	4b17      	ldr	r3, [pc, #92]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014c1c:	699a      	ldr	r2, [r3, #24]
 8014c1e:	2380      	movs	r3, #128	@ 0x80
 8014c20:	029b      	lsls	r3, r3, #10
 8014c22:	401a      	ands	r2, r3
 8014c24:	2380      	movs	r3, #128	@ 0x80
 8014c26:	029b      	lsls	r3, r3, #10
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d109      	bne.n	8014c40 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014c2c:	4b13      	ldr	r3, [pc, #76]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	2220      	movs	r2, #32
 8014c32:	431a      	orrs	r2, r3
 8014c34:	4b11      	ldr	r3, [pc, #68]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c36:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2220      	movs	r2, #32
 8014c3c:	4313      	orrs	r3, r2
 8014c3e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014c40:	4b0d      	ldr	r3, [pc, #52]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014c42:	699a      	ldr	r2, [r3, #24]
 8014c44:	2380      	movs	r3, #128	@ 0x80
 8014c46:	025b      	lsls	r3, r3, #9
 8014c48:	401a      	ands	r2, r3
 8014c4a:	2380      	movs	r3, #128	@ 0x80
 8014c4c:	025b      	lsls	r3, r3, #9
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d10a      	bne.n	8014c68 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014c52:	4b0a      	ldr	r3, [pc, #40]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c54:	695b      	ldr	r3, [r3, #20]
 8014c56:	2240      	movs	r2, #64	@ 0x40
 8014c58:	431a      	orrs	r2, r3
 8014c5a:	4b08      	ldr	r3, [pc, #32]	@ (8014c7c <FLASH_SetErrorCode+0x134>)
 8014c5c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2280      	movs	r2, #128	@ 0x80
 8014c62:	0252      	lsls	r2, r2, #9
 8014c64:	4313      	orrs	r3, r2
 8014c66:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014c68:	4b03      	ldr	r3, [pc, #12]	@ (8014c78 <FLASH_SetErrorCode+0x130>)
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	619a      	str	r2, [r3, #24]
}  
 8014c6e:	46c0      	nop			@ (mov r8, r8)
 8014c70:	46bd      	mov	sp, r7
 8014c72:	b002      	add	sp, #8
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	46c0      	nop			@ (mov r8, r8)
 8014c78:	40022000 	.word	0x40022000
 8014c7c:	20002214 	.word	0x20002214

08014c80 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014c86:	4b12      	ldr	r3, [pc, #72]	@ (8014cd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	4013      	ands	r3, r2
 8014c8e:	d019      	beq.n	8014cc4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c90:	f3ef 8310 	mrs	r3, PRIMASK
 8014c94:	607b      	str	r3, [r7, #4]
  return(result);
 8014c96:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014c98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014c9a:	b672      	cpsid	i
}
 8014c9c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8014c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8014cd4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8014ca2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8014ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8014cd8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8014ca8:	60da      	str	r2, [r3, #12]
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	f383 8810 	msr	PRIMASK, r3
}
 8014cb4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014cb6:	4b06      	ldr	r3, [pc, #24]	@ (8014cd0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	2201      	movs	r2, #1
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	d001      	beq.n	8014cc4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	e000      	b.n	8014cc6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	0018      	movs	r0, r3
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	b004      	add	sp, #16
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	46c0      	nop			@ (mov r8, r8)
 8014cd0:	40022000 	.word	0x40022000
 8014cd4:	89abcdef 	.word	0x89abcdef
 8014cd8:	02030405 	.word	0x02030405

08014cdc <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8014ce0:	4b04      	ldr	r3, [pc, #16]	@ (8014cf4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014ce2:	685a      	ldr	r2, [r3, #4]
 8014ce4:	4b03      	ldr	r3, [pc, #12]	@ (8014cf4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014ce6:	2101      	movs	r1, #1
 8014ce8:	430a      	orrs	r2, r1
 8014cea:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014cec:	2300      	movs	r3, #0
}
 8014cee:	0018      	movs	r0, r3
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	40022000 	.word	0x40022000

08014cf8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014cf8:	b5b0      	push	{r4, r5, r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014d00:	250f      	movs	r5, #15
 8014d02:	197b      	adds	r3, r7, r5
 8014d04:	2200      	movs	r2, #0
 8014d06:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014d08:	197c      	adds	r4, r7, r5
 8014d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8014d48 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014d0c:	0018      	movs	r0, r3
 8014d0e:	f7ff fea9 	bl	8014a64 <FLASH_WaitForLastOperation>
 8014d12:	0003      	movs	r3, r0
 8014d14:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014d16:	0029      	movs	r1, r5
 8014d18:	187b      	adds	r3, r7, r1
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d10c      	bne.n	8014d3a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014d20:	4b0a      	ldr	r3, [pc, #40]	@ (8014d4c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8014d22:	2200      	movs	r2, #0
 8014d24:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014d2c:	187c      	adds	r4, r7, r1
 8014d2e:	4b06      	ldr	r3, [pc, #24]	@ (8014d48 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014d30:	0018      	movs	r0, r3
 8014d32:	f7ff fe97 	bl	8014a64 <FLASH_WaitForLastOperation>
 8014d36:	0003      	movs	r3, r0
 8014d38:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014d3a:	230f      	movs	r3, #15
 8014d3c:	18fb      	adds	r3, r7, r3
 8014d3e:	781b      	ldrb	r3, [r3, #0]
}  
 8014d40:	0018      	movs	r0, r3
 8014d42:	46bd      	mov	sp, r7
 8014d44:	b004      	add	sp, #16
 8014d46:	bdb0      	pop	{r4, r5, r7, pc}
 8014d48:	0000c350 	.word	0x0000c350
 8014d4c:	20002214 	.word	0x20002214

08014d50 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014d50:	b5b0      	push	{r4, r5, r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014d5c:	2317      	movs	r3, #23
 8014d5e:	18fb      	adds	r3, r7, r3
 8014d60:	2201      	movs	r2, #1
 8014d62:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014d64:	4b24      	ldr	r3, [pc, #144]	@ (8014df8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014d66:	7c1b      	ldrb	r3, [r3, #16]
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d101      	bne.n	8014d70 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014d6c:	2302      	movs	r3, #2
 8014d6e:	e03e      	b.n	8014dee <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014d70:	4b21      	ldr	r3, [pc, #132]	@ (8014df8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014d72:	2201      	movs	r2, #1
 8014d74:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014d76:	2517      	movs	r5, #23
 8014d78:	197c      	adds	r4, r7, r5
 8014d7a:	4b20      	ldr	r3, [pc, #128]	@ (8014dfc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014d7c:	0018      	movs	r0, r3
 8014d7e:	f7ff fe71 	bl	8014a64 <FLASH_WaitForLastOperation>
 8014d82:	0003      	movs	r3, r0
 8014d84:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014d86:	197b      	adds	r3, r7, r5
 8014d88:	781b      	ldrb	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d129      	bne.n	8014de2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8014df8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b02      	cmp	r3, #2
 8014d98:	d103      	bne.n	8014da2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	601a      	str	r2, [r3, #0]
 8014da0:	e013      	b.n	8014dca <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2b01      	cmp	r3, #1
 8014da6:	d104      	bne.n	8014db2 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	b292      	uxth	r2, r2
 8014dae:	801a      	strh	r2, [r3, #0]
 8014db0:	e00b      	b.n	8014dca <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d104      	bne.n	8014dc2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	b2d2      	uxtb	r2, r2
 8014dbe:	701a      	strb	r2, [r3, #0]
 8014dc0:	e003      	b.n	8014dca <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8014dc2:	2317      	movs	r3, #23
 8014dc4:	18fb      	adds	r3, r7, r3
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8014dca:	2217      	movs	r2, #23
 8014dcc:	18bb      	adds	r3, r7, r2
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d106      	bne.n	8014de2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014dd4:	18bc      	adds	r4, r7, r2
 8014dd6:	4b09      	ldr	r3, [pc, #36]	@ (8014dfc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014dd8:	0018      	movs	r0, r3
 8014dda:	f7ff fe43 	bl	8014a64 <FLASH_WaitForLastOperation>
 8014dde:	0003      	movs	r3, r0
 8014de0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014de2:	4b05      	ldr	r3, [pc, #20]	@ (8014df8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014de4:	2200      	movs	r2, #0
 8014de6:	741a      	strb	r2, [r3, #16]

  return status;
 8014de8:	2317      	movs	r3, #23
 8014dea:	18fb      	adds	r3, r7, r3
 8014dec:	781b      	ldrb	r3, [r3, #0]
}
 8014dee:	0018      	movs	r0, r3
 8014df0:	46bd      	mov	sp, r7
 8014df2:	b006      	add	sp, #24
 8014df4:	bdb0      	pop	{r4, r5, r7, pc}
 8014df6:	46c0      	nop			@ (mov r8, r8)
 8014df8:	20002214 	.word	0x20002214
 8014dfc:	0000c350 	.word	0x0000c350

08014e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b086      	sub	sp, #24
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8014e12:	2300      	movs	r3, #0
 8014e14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8014e16:	e155      	b.n	80150c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2101      	movs	r1, #1
 8014e1e:	697a      	ldr	r2, [r7, #20]
 8014e20:	4091      	lsls	r1, r2
 8014e22:	000a      	movs	r2, r1
 8014e24:	4013      	ands	r3, r2
 8014e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d100      	bne.n	8014e30 <HAL_GPIO_Init+0x30>
 8014e2e:	e146      	b.n	80150be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	2203      	movs	r2, #3
 8014e36:	4013      	ands	r3, r2
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	d005      	beq.n	8014e48 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	2203      	movs	r2, #3
 8014e42:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	d130      	bne.n	8014eaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	689b      	ldr	r3, [r3, #8]
 8014e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	005b      	lsls	r3, r3, #1
 8014e52:	2203      	movs	r2, #3
 8014e54:	409a      	lsls	r2, r3
 8014e56:	0013      	movs	r3, r2
 8014e58:	43da      	mvns	r2, r3
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	68da      	ldr	r2, [r3, #12]
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	409a      	lsls	r2, r3
 8014e6a:	0013      	movs	r3, r2
 8014e6c:	693a      	ldr	r2, [r7, #16]
 8014e6e:	4313      	orrs	r3, r2
 8014e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	693a      	ldr	r2, [r7, #16]
 8014e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014e7e:	2201      	movs	r2, #1
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	409a      	lsls	r2, r3
 8014e84:	0013      	movs	r3, r2
 8014e86:	43da      	mvns	r2, r3
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	091b      	lsrs	r3, r3, #4
 8014e94:	2201      	movs	r2, #1
 8014e96:	401a      	ands	r2, r3
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	409a      	lsls	r2, r3
 8014e9c:	0013      	movs	r3, r2
 8014e9e:	693a      	ldr	r2, [r7, #16]
 8014ea0:	4313      	orrs	r3, r2
 8014ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	693a      	ldr	r2, [r7, #16]
 8014ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	2203      	movs	r2, #3
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	2b03      	cmp	r3, #3
 8014eb4:	d017      	beq.n	8014ee6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	68db      	ldr	r3, [r3, #12]
 8014eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	2203      	movs	r2, #3
 8014ec2:	409a      	lsls	r2, r3
 8014ec4:	0013      	movs	r3, r2
 8014ec6:	43da      	mvns	r2, r3
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	4013      	ands	r3, r2
 8014ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	689a      	ldr	r2, [r3, #8]
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	005b      	lsls	r3, r3, #1
 8014ed6:	409a      	lsls	r2, r3
 8014ed8:	0013      	movs	r3, r2
 8014eda:	693a      	ldr	r2, [r7, #16]
 8014edc:	4313      	orrs	r3, r2
 8014ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	693a      	ldr	r2, [r7, #16]
 8014ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	2203      	movs	r2, #3
 8014eec:	4013      	ands	r3, r2
 8014eee:	2b02      	cmp	r3, #2
 8014ef0:	d123      	bne.n	8014f3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	08da      	lsrs	r2, r3, #3
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	3208      	adds	r2, #8
 8014efa:	0092      	lsls	r2, r2, #2
 8014efc:	58d3      	ldr	r3, [r2, r3]
 8014efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	2207      	movs	r2, #7
 8014f04:	4013      	ands	r3, r2
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	220f      	movs	r2, #15
 8014f0a:	409a      	lsls	r2, r3
 8014f0c:	0013      	movs	r3, r2
 8014f0e:	43da      	mvns	r2, r3
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	4013      	ands	r3, r2
 8014f14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	691a      	ldr	r2, [r3, #16]
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2107      	movs	r1, #7
 8014f1e:	400b      	ands	r3, r1
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	409a      	lsls	r2, r3
 8014f24:	0013      	movs	r3, r2
 8014f26:	693a      	ldr	r2, [r7, #16]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	08da      	lsrs	r2, r3, #3
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	3208      	adds	r2, #8
 8014f34:	0092      	lsls	r2, r2, #2
 8014f36:	6939      	ldr	r1, [r7, #16]
 8014f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	005b      	lsls	r3, r3, #1
 8014f44:	2203      	movs	r2, #3
 8014f46:	409a      	lsls	r2, r3
 8014f48:	0013      	movs	r3, r2
 8014f4a:	43da      	mvns	r2, r3
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	4013      	ands	r3, r2
 8014f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	2203      	movs	r2, #3
 8014f58:	401a      	ands	r2, r3
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	005b      	lsls	r3, r3, #1
 8014f5e:	409a      	lsls	r2, r3
 8014f60:	0013      	movs	r3, r2
 8014f62:	693a      	ldr	r2, [r7, #16]
 8014f64:	4313      	orrs	r3, r2
 8014f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	693a      	ldr	r2, [r7, #16]
 8014f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	685a      	ldr	r2, [r3, #4]
 8014f72:	23c0      	movs	r3, #192	@ 0xc0
 8014f74:	029b      	lsls	r3, r3, #10
 8014f76:	4013      	ands	r3, r2
 8014f78:	d100      	bne.n	8014f7c <HAL_GPIO_Init+0x17c>
 8014f7a:	e0a0      	b.n	80150be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014f7c:	4b57      	ldr	r3, [pc, #348]	@ (80150dc <HAL_GPIO_Init+0x2dc>)
 8014f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014f80:	4b56      	ldr	r3, [pc, #344]	@ (80150dc <HAL_GPIO_Init+0x2dc>)
 8014f82:	2101      	movs	r1, #1
 8014f84:	430a      	orrs	r2, r1
 8014f86:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8014f88:	4a55      	ldr	r2, [pc, #340]	@ (80150e0 <HAL_GPIO_Init+0x2e0>)
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	089b      	lsrs	r3, r3, #2
 8014f8e:	3302      	adds	r3, #2
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	589b      	ldr	r3, [r3, r2]
 8014f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2203      	movs	r2, #3
 8014f9a:	4013      	ands	r3, r2
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	220f      	movs	r2, #15
 8014fa0:	409a      	lsls	r2, r3
 8014fa2:	0013      	movs	r3, r2
 8014fa4:	43da      	mvns	r2, r3
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	4013      	ands	r3, r2
 8014faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	23a0      	movs	r3, #160	@ 0xa0
 8014fb0:	05db      	lsls	r3, r3, #23
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d01f      	beq.n	8014ff6 <HAL_GPIO_Init+0x1f6>
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80150e4 <HAL_GPIO_Init+0x2e4>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d019      	beq.n	8014ff2 <HAL_GPIO_Init+0x1f2>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	4a49      	ldr	r2, [pc, #292]	@ (80150e8 <HAL_GPIO_Init+0x2e8>)
 8014fc2:	4293      	cmp	r3, r2
 8014fc4:	d013      	beq.n	8014fee <HAL_GPIO_Init+0x1ee>
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	4a48      	ldr	r2, [pc, #288]	@ (80150ec <HAL_GPIO_Init+0x2ec>)
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	d00d      	beq.n	8014fea <HAL_GPIO_Init+0x1ea>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	4a47      	ldr	r2, [pc, #284]	@ (80150f0 <HAL_GPIO_Init+0x2f0>)
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	d007      	beq.n	8014fe6 <HAL_GPIO_Init+0x1e6>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4a46      	ldr	r2, [pc, #280]	@ (80150f4 <HAL_GPIO_Init+0x2f4>)
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d101      	bne.n	8014fe2 <HAL_GPIO_Init+0x1e2>
 8014fde:	2305      	movs	r3, #5
 8014fe0:	e00a      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014fe2:	2306      	movs	r3, #6
 8014fe4:	e008      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014fe6:	2304      	movs	r3, #4
 8014fe8:	e006      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014fea:	2303      	movs	r3, #3
 8014fec:	e004      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014fee:	2302      	movs	r3, #2
 8014ff0:	e002      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	e000      	b.n	8014ff8 <HAL_GPIO_Init+0x1f8>
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	697a      	ldr	r2, [r7, #20]
 8014ffa:	2103      	movs	r1, #3
 8014ffc:	400a      	ands	r2, r1
 8014ffe:	0092      	lsls	r2, r2, #2
 8015000:	4093      	lsls	r3, r2
 8015002:	693a      	ldr	r2, [r7, #16]
 8015004:	4313      	orrs	r3, r2
 8015006:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015008:	4935      	ldr	r1, [pc, #212]	@ (80150e0 <HAL_GPIO_Init+0x2e0>)
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	089b      	lsrs	r3, r3, #2
 801500e:	3302      	adds	r3, #2
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	693a      	ldr	r2, [r7, #16]
 8015014:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015016:	4b38      	ldr	r3, [pc, #224]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 8015018:	689b      	ldr	r3, [r3, #8]
 801501a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	43da      	mvns	r2, r3
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	4013      	ands	r3, r2
 8015024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	685a      	ldr	r2, [r3, #4]
 801502a:	2380      	movs	r3, #128	@ 0x80
 801502c:	035b      	lsls	r3, r3, #13
 801502e:	4013      	ands	r3, r2
 8015030:	d003      	beq.n	801503a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015032:	693a      	ldr	r2, [r7, #16]
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	4313      	orrs	r3, r2
 8015038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801503a:	4b2f      	ldr	r3, [pc, #188]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 801503c:	693a      	ldr	r2, [r7, #16]
 801503e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015040:	4b2d      	ldr	r3, [pc, #180]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	43da      	mvns	r2, r3
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	4013      	ands	r3, r2
 801504e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	685a      	ldr	r2, [r3, #4]
 8015054:	2380      	movs	r3, #128	@ 0x80
 8015056:	039b      	lsls	r3, r3, #14
 8015058:	4013      	ands	r3, r2
 801505a:	d003      	beq.n	8015064 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801505c:	693a      	ldr	r2, [r7, #16]
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	4313      	orrs	r3, r2
 8015062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015064:	4b24      	ldr	r3, [pc, #144]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 8015066:	693a      	ldr	r2, [r7, #16]
 8015068:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801506a:	4b23      	ldr	r3, [pc, #140]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	43da      	mvns	r2, r3
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	4013      	ands	r3, r2
 8015078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	685a      	ldr	r2, [r3, #4]
 801507e:	2380      	movs	r3, #128	@ 0x80
 8015080:	029b      	lsls	r3, r3, #10
 8015082:	4013      	ands	r3, r2
 8015084:	d003      	beq.n	801508e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015086:	693a      	ldr	r2, [r7, #16]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	4313      	orrs	r3, r2
 801508c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801508e:	4b1a      	ldr	r3, [pc, #104]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 8015090:	693a      	ldr	r2, [r7, #16]
 8015092:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015094:	4b18      	ldr	r3, [pc, #96]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	43da      	mvns	r2, r3
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	4013      	ands	r3, r2
 80150a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	685a      	ldr	r2, [r3, #4]
 80150a8:	2380      	movs	r3, #128	@ 0x80
 80150aa:	025b      	lsls	r3, r3, #9
 80150ac:	4013      	ands	r3, r2
 80150ae:	d003      	beq.n	80150b8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80150b0:	693a      	ldr	r2, [r7, #16]
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	4313      	orrs	r3, r2
 80150b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80150b8:	4b0f      	ldr	r3, [pc, #60]	@ (80150f8 <HAL_GPIO_Init+0x2f8>)
 80150ba:	693a      	ldr	r2, [r7, #16]
 80150bc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	3301      	adds	r3, #1
 80150c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	40da      	lsrs	r2, r3
 80150cc:	1e13      	subs	r3, r2, #0
 80150ce:	d000      	beq.n	80150d2 <HAL_GPIO_Init+0x2d2>
 80150d0:	e6a2      	b.n	8014e18 <HAL_GPIO_Init+0x18>
  }
}
 80150d2:	46c0      	nop			@ (mov r8, r8)
 80150d4:	46c0      	nop			@ (mov r8, r8)
 80150d6:	46bd      	mov	sp, r7
 80150d8:	b006      	add	sp, #24
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	40021000 	.word	0x40021000
 80150e0:	40010000 	.word	0x40010000
 80150e4:	50000400 	.word	0x50000400
 80150e8:	50000800 	.word	0x50000800
 80150ec:	50000c00 	.word	0x50000c00
 80150f0:	50001000 	.word	0x50001000
 80150f4:	50001c00 	.word	0x50001c00
 80150f8:	40010400 	.word	0x40010400

080150fc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	000a      	movs	r2, r1
 8015106:	1cbb      	adds	r3, r7, #2
 8015108:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	691b      	ldr	r3, [r3, #16]
 801510e:	1cba      	adds	r2, r7, #2
 8015110:	8812      	ldrh	r2, [r2, #0]
 8015112:	4013      	ands	r3, r2
 8015114:	d004      	beq.n	8015120 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015116:	230f      	movs	r3, #15
 8015118:	18fb      	adds	r3, r7, r3
 801511a:	2201      	movs	r2, #1
 801511c:	701a      	strb	r2, [r3, #0]
 801511e:	e003      	b.n	8015128 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015120:	230f      	movs	r3, #15
 8015122:	18fb      	adds	r3, r7, r3
 8015124:	2200      	movs	r2, #0
 8015126:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015128:	230f      	movs	r3, #15
 801512a:	18fb      	adds	r3, r7, r3
 801512c:	781b      	ldrb	r3, [r3, #0]
}
 801512e:	0018      	movs	r0, r3
 8015130:	46bd      	mov	sp, r7
 8015132:	b004      	add	sp, #16
 8015134:	bd80      	pop	{r7, pc}

08015136 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015136:	b580      	push	{r7, lr}
 8015138:	b082      	sub	sp, #8
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	0008      	movs	r0, r1
 8015140:	0011      	movs	r1, r2
 8015142:	1cbb      	adds	r3, r7, #2
 8015144:	1c02      	adds	r2, r0, #0
 8015146:	801a      	strh	r2, [r3, #0]
 8015148:	1c7b      	adds	r3, r7, #1
 801514a:	1c0a      	adds	r2, r1, #0
 801514c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801514e:	1c7b      	adds	r3, r7, #1
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d004      	beq.n	8015160 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015156:	1cbb      	adds	r3, r7, #2
 8015158:	881a      	ldrh	r2, [r3, #0]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801515e:	e003      	b.n	8015168 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015160:	1cbb      	adds	r3, r7, #2
 8015162:	881a      	ldrh	r2, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015168:	46c0      	nop			@ (mov r8, r8)
 801516a:	46bd      	mov	sp, r7
 801516c:	b002      	add	sp, #8
 801516e:	bd80      	pop	{r7, pc}

08015170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	0002      	movs	r2, r0
 8015178:	1dbb      	adds	r3, r7, #6
 801517a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801517c:	4b09      	ldr	r3, [pc, #36]	@ (80151a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801517e:	695b      	ldr	r3, [r3, #20]
 8015180:	1dba      	adds	r2, r7, #6
 8015182:	8812      	ldrh	r2, [r2, #0]
 8015184:	4013      	ands	r3, r2
 8015186:	d008      	beq.n	801519a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015188:	4b06      	ldr	r3, [pc, #24]	@ (80151a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801518a:	1dba      	adds	r2, r7, #6
 801518c:	8812      	ldrh	r2, [r2, #0]
 801518e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015190:	1dbb      	adds	r3, r7, #6
 8015192:	881b      	ldrh	r3, [r3, #0]
 8015194:	0018      	movs	r0, r3
 8015196:	f7f7 fb7d 	bl	800c894 <HAL_GPIO_EXTI_Callback>
  }
}
 801519a:	46c0      	nop			@ (mov r8, r8)
 801519c:	46bd      	mov	sp, r7
 801519e:	b002      	add	sp, #8
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	46c0      	nop			@ (mov r8, r8)
 80151a4:	40010400 	.word	0x40010400

080151a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d101      	bne.n	80151ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80151b6:	2301      	movs	r3, #1
 80151b8:	e082      	b.n	80152c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2241      	movs	r2, #65	@ 0x41
 80151be:	5c9b      	ldrb	r3, [r3, r2]
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d107      	bne.n	80151d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2240      	movs	r2, #64	@ 0x40
 80151ca:	2100      	movs	r1, #0
 80151cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	0018      	movs	r0, r3
 80151d2:	f7f6 fe27 	bl	800be24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2241      	movs	r2, #65	@ 0x41
 80151da:	2124      	movs	r1, #36	@ 0x24
 80151dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	681a      	ldr	r2, [r3, #0]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2101      	movs	r1, #1
 80151ea:	438a      	bics	r2, r1
 80151ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	685a      	ldr	r2, [r3, #4]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4934      	ldr	r1, [pc, #208]	@ (80152c8 <HAL_I2C_Init+0x120>)
 80151f8:	400a      	ands	r2, r1
 80151fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	689a      	ldr	r2, [r3, #8]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	4931      	ldr	r1, [pc, #196]	@ (80152cc <HAL_I2C_Init+0x124>)
 8015208:	400a      	ands	r2, r1
 801520a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	2b01      	cmp	r3, #1
 8015212:	d108      	bne.n	8015226 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2180      	movs	r1, #128	@ 0x80
 801521e:	0209      	lsls	r1, r1, #8
 8015220:	430a      	orrs	r2, r1
 8015222:	609a      	str	r2, [r3, #8]
 8015224:	e007      	b.n	8015236 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	689a      	ldr	r2, [r3, #8]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2184      	movs	r1, #132	@ 0x84
 8015230:	0209      	lsls	r1, r1, #8
 8015232:	430a      	orrs	r2, r1
 8015234:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	2b02      	cmp	r3, #2
 801523c:	d104      	bne.n	8015248 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2280      	movs	r2, #128	@ 0x80
 8015244:	0112      	lsls	r2, r2, #4
 8015246:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	685a      	ldr	r2, [r3, #4]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	491f      	ldr	r1, [pc, #124]	@ (80152d0 <HAL_I2C_Init+0x128>)
 8015254:	430a      	orrs	r2, r1
 8015256:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	68da      	ldr	r2, [r3, #12]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	491a      	ldr	r1, [pc, #104]	@ (80152cc <HAL_I2C_Init+0x124>)
 8015264:	400a      	ands	r2, r1
 8015266:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	691a      	ldr	r2, [r3, #16]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	695b      	ldr	r3, [r3, #20]
 8015270:	431a      	orrs	r2, r3
 8015272:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	699b      	ldr	r3, [r3, #24]
 8015278:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	430a      	orrs	r2, r1
 8015280:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	69d9      	ldr	r1, [r3, #28]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	6a1a      	ldr	r2, [r3, #32]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	430a      	orrs	r2, r1
 8015290:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	2101      	movs	r1, #1
 801529e:	430a      	orrs	r2, r1
 80152a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2200      	movs	r2, #0
 80152a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2241      	movs	r2, #65	@ 0x41
 80152ac:	2120      	movs	r1, #32
 80152ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2200      	movs	r2, #0
 80152b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2242      	movs	r2, #66	@ 0x42
 80152ba:	2100      	movs	r1, #0
 80152bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80152be:	2300      	movs	r3, #0
}
 80152c0:	0018      	movs	r0, r3
 80152c2:	46bd      	mov	sp, r7
 80152c4:	b002      	add	sp, #8
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	f0ffffff 	.word	0xf0ffffff
 80152cc:	ffff7fff 	.word	0xffff7fff
 80152d0:	02008000 	.word	0x02008000

080152d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80152d4:	b590      	push	{r4, r7, lr}
 80152d6:	b089      	sub	sp, #36	@ 0x24
 80152d8:	af02      	add	r7, sp, #8
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	0008      	movs	r0, r1
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	0019      	movs	r1, r3
 80152e2:	230a      	movs	r3, #10
 80152e4:	18fb      	adds	r3, r7, r3
 80152e6:	1c02      	adds	r2, r0, #0
 80152e8:	801a      	strh	r2, [r3, #0]
 80152ea:	2308      	movs	r3, #8
 80152ec:	18fb      	adds	r3, r7, r3
 80152ee:	1c0a      	adds	r2, r1, #0
 80152f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2241      	movs	r2, #65	@ 0x41
 80152f6:	5c9b      	ldrb	r3, [r3, r2]
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	2b20      	cmp	r3, #32
 80152fc:	d000      	beq.n	8015300 <HAL_I2C_Master_Transmit+0x2c>
 80152fe:	e0e7      	b.n	80154d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2240      	movs	r2, #64	@ 0x40
 8015304:	5c9b      	ldrb	r3, [r3, r2]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d101      	bne.n	801530e <HAL_I2C_Master_Transmit+0x3a>
 801530a:	2302      	movs	r3, #2
 801530c:	e0e1      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2240      	movs	r2, #64	@ 0x40
 8015312:	2101      	movs	r1, #1
 8015314:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015316:	f7fe fc7d 	bl	8013c14 <HAL_GetTick>
 801531a:	0003      	movs	r3, r0
 801531c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801531e:	2380      	movs	r3, #128	@ 0x80
 8015320:	0219      	lsls	r1, r3, #8
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	2319      	movs	r3, #25
 801532a:	2201      	movs	r2, #1
 801532c:	f002 faa4 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015330:	1e03      	subs	r3, r0, #0
 8015332:	d001      	beq.n	8015338 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015334:	2301      	movs	r3, #1
 8015336:	e0cc      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2241      	movs	r2, #65	@ 0x41
 801533c:	2121      	movs	r1, #33	@ 0x21
 801533e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	2242      	movs	r2, #66	@ 0x42
 8015344:	2110      	movs	r1, #16
 8015346:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2200      	movs	r2, #0
 801534c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2208      	movs	r2, #8
 8015358:	18ba      	adds	r2, r7, r2
 801535a:	8812      	ldrh	r2, [r2, #0]
 801535c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	2200      	movs	r2, #0
 8015362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015368:	b29b      	uxth	r3, r3
 801536a:	2bff      	cmp	r3, #255	@ 0xff
 801536c:	d911      	bls.n	8015392 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	22ff      	movs	r2, #255	@ 0xff
 8015372:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015378:	b2da      	uxtb	r2, r3
 801537a:	2380      	movs	r3, #128	@ 0x80
 801537c:	045c      	lsls	r4, r3, #17
 801537e:	230a      	movs	r3, #10
 8015380:	18fb      	adds	r3, r7, r3
 8015382:	8819      	ldrh	r1, [r3, #0]
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	4b55      	ldr	r3, [pc, #340]	@ (80154dc <HAL_I2C_Master_Transmit+0x208>)
 8015388:	9300      	str	r3, [sp, #0]
 801538a:	0023      	movs	r3, r4
 801538c:	f002 fcc6 	bl	8017d1c <I2C_TransferConfig>
 8015390:	e075      	b.n	801547e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015396:	b29a      	uxth	r2, r3
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	2380      	movs	r3, #128	@ 0x80
 80153a4:	049c      	lsls	r4, r3, #18
 80153a6:	230a      	movs	r3, #10
 80153a8:	18fb      	adds	r3, r7, r3
 80153aa:	8819      	ldrh	r1, [r3, #0]
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	4b4b      	ldr	r3, [pc, #300]	@ (80154dc <HAL_I2C_Master_Transmit+0x208>)
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	0023      	movs	r3, r4
 80153b4:	f002 fcb2 	bl	8017d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80153b8:	e061      	b.n	801547e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80153ba:	697a      	ldr	r2, [r7, #20]
 80153bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	0018      	movs	r0, r3
 80153c2:	f002 faa7 	bl	8017914 <I2C_WaitOnTXISFlagUntilTimeout>
 80153c6:	1e03      	subs	r3, r0, #0
 80153c8:	d001      	beq.n	80153ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80153ca:	2301      	movs	r3, #1
 80153cc:	e081      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153d2:	781a      	ldrb	r2, [r3, #0]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153de:	1c5a      	adds	r2, r3, #1
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	3b01      	subs	r3, #1
 80153ec:	b29a      	uxth	r2, r3
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153f6:	3b01      	subs	r3, #1
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015402:	b29b      	uxth	r3, r3
 8015404:	2b00      	cmp	r3, #0
 8015406:	d03a      	beq.n	801547e <HAL_I2C_Master_Transmit+0x1aa>
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801540c:	2b00      	cmp	r3, #0
 801540e:	d136      	bne.n	801547e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	697b      	ldr	r3, [r7, #20]
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	0013      	movs	r3, r2
 801541a:	2200      	movs	r2, #0
 801541c:	2180      	movs	r1, #128	@ 0x80
 801541e:	f002 fa2b 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015422:	1e03      	subs	r3, r0, #0
 8015424:	d001      	beq.n	801542a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8015426:	2301      	movs	r3, #1
 8015428:	e053      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801542e:	b29b      	uxth	r3, r3
 8015430:	2bff      	cmp	r3, #255	@ 0xff
 8015432:	d911      	bls.n	8015458 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	22ff      	movs	r2, #255	@ 0xff
 8015438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801543e:	b2da      	uxtb	r2, r3
 8015440:	2380      	movs	r3, #128	@ 0x80
 8015442:	045c      	lsls	r4, r3, #17
 8015444:	230a      	movs	r3, #10
 8015446:	18fb      	adds	r3, r7, r3
 8015448:	8819      	ldrh	r1, [r3, #0]
 801544a:	68f8      	ldr	r0, [r7, #12]
 801544c:	2300      	movs	r3, #0
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	0023      	movs	r3, r4
 8015452:	f002 fc63 	bl	8017d1c <I2C_TransferConfig>
 8015456:	e012      	b.n	801547e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801545c:	b29a      	uxth	r2, r3
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015466:	b2da      	uxtb	r2, r3
 8015468:	2380      	movs	r3, #128	@ 0x80
 801546a:	049c      	lsls	r4, r3, #18
 801546c:	230a      	movs	r3, #10
 801546e:	18fb      	adds	r3, r7, r3
 8015470:	8819      	ldrh	r1, [r3, #0]
 8015472:	68f8      	ldr	r0, [r7, #12]
 8015474:	2300      	movs	r3, #0
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	0023      	movs	r3, r4
 801547a:	f002 fc4f 	bl	8017d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015482:	b29b      	uxth	r3, r3
 8015484:	2b00      	cmp	r3, #0
 8015486:	d198      	bne.n	80153ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015488:	697a      	ldr	r2, [r7, #20]
 801548a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	0018      	movs	r0, r3
 8015490:	f002 fa86 	bl	80179a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015494:	1e03      	subs	r3, r0, #0
 8015496:	d001      	beq.n	801549c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8015498:	2301      	movs	r3, #1
 801549a:	e01a      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2220      	movs	r2, #32
 80154a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	685a      	ldr	r2, [r3, #4]
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	490c      	ldr	r1, [pc, #48]	@ (80154e0 <HAL_I2C_Master_Transmit+0x20c>)
 80154b0:	400a      	ands	r2, r1
 80154b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2241      	movs	r2, #65	@ 0x41
 80154b8:	2120      	movs	r1, #32
 80154ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2242      	movs	r2, #66	@ 0x42
 80154c0:	2100      	movs	r1, #0
 80154c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2240      	movs	r2, #64	@ 0x40
 80154c8:	2100      	movs	r1, #0
 80154ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80154cc:	2300      	movs	r3, #0
 80154ce:	e000      	b.n	80154d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80154d0:	2302      	movs	r3, #2
  }
}
 80154d2:	0018      	movs	r0, r3
 80154d4:	46bd      	mov	sp, r7
 80154d6:	b007      	add	sp, #28
 80154d8:	bd90      	pop	{r4, r7, pc}
 80154da:	46c0      	nop			@ (mov r8, r8)
 80154dc:	80002000 	.word	0x80002000
 80154e0:	fe00e800 	.word	0xfe00e800

080154e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80154e4:	b590      	push	{r4, r7, lr}
 80154e6:	b089      	sub	sp, #36	@ 0x24
 80154e8:	af02      	add	r7, sp, #8
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	0008      	movs	r0, r1
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	0019      	movs	r1, r3
 80154f2:	230a      	movs	r3, #10
 80154f4:	18fb      	adds	r3, r7, r3
 80154f6:	1c02      	adds	r2, r0, #0
 80154f8:	801a      	strh	r2, [r3, #0]
 80154fa:	2308      	movs	r3, #8
 80154fc:	18fb      	adds	r3, r7, r3
 80154fe:	1c0a      	adds	r2, r1, #0
 8015500:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2241      	movs	r2, #65	@ 0x41
 8015506:	5c9b      	ldrb	r3, [r3, r2]
 8015508:	b2db      	uxtb	r3, r3
 801550a:	2b20      	cmp	r3, #32
 801550c:	d000      	beq.n	8015510 <HAL_I2C_Master_Receive+0x2c>
 801550e:	e0e8      	b.n	80156e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2240      	movs	r2, #64	@ 0x40
 8015514:	5c9b      	ldrb	r3, [r3, r2]
 8015516:	2b01      	cmp	r3, #1
 8015518:	d101      	bne.n	801551e <HAL_I2C_Master_Receive+0x3a>
 801551a:	2302      	movs	r3, #2
 801551c:	e0e2      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2240      	movs	r2, #64	@ 0x40
 8015522:	2101      	movs	r1, #1
 8015524:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015526:	f7fe fb75 	bl	8013c14 <HAL_GetTick>
 801552a:	0003      	movs	r3, r0
 801552c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801552e:	2380      	movs	r3, #128	@ 0x80
 8015530:	0219      	lsls	r1, r3, #8
 8015532:	68f8      	ldr	r0, [r7, #12]
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	9300      	str	r3, [sp, #0]
 8015538:	2319      	movs	r3, #25
 801553a:	2201      	movs	r2, #1
 801553c:	f002 f99c 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015540:	1e03      	subs	r3, r0, #0
 8015542:	d001      	beq.n	8015548 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8015544:	2301      	movs	r3, #1
 8015546:	e0cd      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2241      	movs	r2, #65	@ 0x41
 801554c:	2122      	movs	r1, #34	@ 0x22
 801554e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2242      	movs	r2, #66	@ 0x42
 8015554:	2110      	movs	r1, #16
 8015556:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	2200      	movs	r2, #0
 801555c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	687a      	ldr	r2, [r7, #4]
 8015562:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	2208      	movs	r2, #8
 8015568:	18ba      	adds	r2, r7, r2
 801556a:	8812      	ldrh	r2, [r2, #0]
 801556c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015578:	b29b      	uxth	r3, r3
 801557a:	2bff      	cmp	r3, #255	@ 0xff
 801557c:	d911      	bls.n	80155a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	22ff      	movs	r2, #255	@ 0xff
 8015582:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015588:	b2da      	uxtb	r2, r3
 801558a:	2380      	movs	r3, #128	@ 0x80
 801558c:	045c      	lsls	r4, r3, #17
 801558e:	230a      	movs	r3, #10
 8015590:	18fb      	adds	r3, r7, r3
 8015592:	8819      	ldrh	r1, [r3, #0]
 8015594:	68f8      	ldr	r0, [r7, #12]
 8015596:	4b55      	ldr	r3, [pc, #340]	@ (80156ec <HAL_I2C_Master_Receive+0x208>)
 8015598:	9300      	str	r3, [sp, #0]
 801559a:	0023      	movs	r3, r4
 801559c:	f002 fbbe 	bl	8017d1c <I2C_TransferConfig>
 80155a0:	e076      	b.n	8015690 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155b0:	b2da      	uxtb	r2, r3
 80155b2:	2380      	movs	r3, #128	@ 0x80
 80155b4:	049c      	lsls	r4, r3, #18
 80155b6:	230a      	movs	r3, #10
 80155b8:	18fb      	adds	r3, r7, r3
 80155ba:	8819      	ldrh	r1, [r3, #0]
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	4b4b      	ldr	r3, [pc, #300]	@ (80156ec <HAL_I2C_Master_Receive+0x208>)
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	0023      	movs	r3, r4
 80155c4:	f002 fbaa 	bl	8017d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80155c8:	e062      	b.n	8015690 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80155ca:	697a      	ldr	r2, [r7, #20]
 80155cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	0018      	movs	r0, r3
 80155d2:	f002 fa29 	bl	8017a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80155d6:	1e03      	subs	r3, r0, #0
 80155d8:	d001      	beq.n	80155de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80155da:	2301      	movs	r3, #1
 80155dc:	e082      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155e8:	b2d2      	uxtb	r2, r2
 80155ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155f0:	1c5a      	adds	r2, r3, #1
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155fa:	3b01      	subs	r3, #1
 80155fc:	b29a      	uxth	r2, r3
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015606:	b29b      	uxth	r3, r3
 8015608:	3b01      	subs	r3, #1
 801560a:	b29a      	uxth	r2, r3
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015614:	b29b      	uxth	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	d03a      	beq.n	8015690 <HAL_I2C_Master_Receive+0x1ac>
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801561e:	2b00      	cmp	r3, #0
 8015620:	d136      	bne.n	8015690 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	0013      	movs	r3, r2
 801562c:	2200      	movs	r2, #0
 801562e:	2180      	movs	r1, #128	@ 0x80
 8015630:	f002 f922 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015634:	1e03      	subs	r3, r0, #0
 8015636:	d001      	beq.n	801563c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8015638:	2301      	movs	r3, #1
 801563a:	e053      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015640:	b29b      	uxth	r3, r3
 8015642:	2bff      	cmp	r3, #255	@ 0xff
 8015644:	d911      	bls.n	801566a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	22ff      	movs	r2, #255	@ 0xff
 801564a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015650:	b2da      	uxtb	r2, r3
 8015652:	2380      	movs	r3, #128	@ 0x80
 8015654:	045c      	lsls	r4, r3, #17
 8015656:	230a      	movs	r3, #10
 8015658:	18fb      	adds	r3, r7, r3
 801565a:	8819      	ldrh	r1, [r3, #0]
 801565c:	68f8      	ldr	r0, [r7, #12]
 801565e:	2300      	movs	r3, #0
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	0023      	movs	r3, r4
 8015664:	f002 fb5a 	bl	8017d1c <I2C_TransferConfig>
 8015668:	e012      	b.n	8015690 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801566e:	b29a      	uxth	r2, r3
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015678:	b2da      	uxtb	r2, r3
 801567a:	2380      	movs	r3, #128	@ 0x80
 801567c:	049c      	lsls	r4, r3, #18
 801567e:	230a      	movs	r3, #10
 8015680:	18fb      	adds	r3, r7, r3
 8015682:	8819      	ldrh	r1, [r3, #0]
 8015684:	68f8      	ldr	r0, [r7, #12]
 8015686:	2300      	movs	r3, #0
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	0023      	movs	r3, r4
 801568c:	f002 fb46 	bl	8017d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015694:	b29b      	uxth	r3, r3
 8015696:	2b00      	cmp	r3, #0
 8015698:	d197      	bne.n	80155ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801569a:	697a      	ldr	r2, [r7, #20]
 801569c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	0018      	movs	r0, r3
 80156a2:	f002 f97d 	bl	80179a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80156a6:	1e03      	subs	r3, r0, #0
 80156a8:	d001      	beq.n	80156ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80156aa:	2301      	movs	r3, #1
 80156ac:	e01a      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	2220      	movs	r2, #32
 80156b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	685a      	ldr	r2, [r3, #4]
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	490b      	ldr	r1, [pc, #44]	@ (80156f0 <HAL_I2C_Master_Receive+0x20c>)
 80156c2:	400a      	ands	r2, r1
 80156c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2241      	movs	r2, #65	@ 0x41
 80156ca:	2120      	movs	r1, #32
 80156cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2242      	movs	r2, #66	@ 0x42
 80156d2:	2100      	movs	r1, #0
 80156d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2240      	movs	r2, #64	@ 0x40
 80156da:	2100      	movs	r1, #0
 80156dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	e000      	b.n	80156e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80156e2:	2302      	movs	r3, #2
  }
}
 80156e4:	0018      	movs	r0, r3
 80156e6:	46bd      	mov	sp, r7
 80156e8:	b007      	add	sp, #28
 80156ea:	bd90      	pop	{r4, r7, pc}
 80156ec:	80002400 	.word	0x80002400
 80156f0:	fe00e800 	.word	0xfe00e800

080156f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80156f4:	b5b0      	push	{r4, r5, r7, lr}
 80156f6:	b088      	sub	sp, #32
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	0008      	movs	r0, r1
 80156fe:	607a      	str	r2, [r7, #4]
 8015700:	0019      	movs	r1, r3
 8015702:	230a      	movs	r3, #10
 8015704:	18fb      	adds	r3, r7, r3
 8015706:	1c02      	adds	r2, r0, #0
 8015708:	801a      	strh	r2, [r3, #0]
 801570a:	2308      	movs	r3, #8
 801570c:	18fb      	adds	r3, r7, r3
 801570e:	1c0a      	adds	r2, r1, #0
 8015710:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2241      	movs	r2, #65	@ 0x41
 8015716:	5c9b      	ldrb	r3, [r3, r2]
 8015718:	b2db      	uxtb	r3, r3
 801571a:	2b20      	cmp	r3, #32
 801571c:	d000      	beq.n	8015720 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801571e:	e0dd      	b.n	80158dc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	699a      	ldr	r2, [r3, #24]
 8015726:	2380      	movs	r3, #128	@ 0x80
 8015728:	021b      	lsls	r3, r3, #8
 801572a:	401a      	ands	r2, r3
 801572c:	2380      	movs	r3, #128	@ 0x80
 801572e:	021b      	lsls	r3, r3, #8
 8015730:	429a      	cmp	r2, r3
 8015732:	d101      	bne.n	8015738 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8015734:	2302      	movs	r3, #2
 8015736:	e0d2      	b.n	80158de <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2240      	movs	r2, #64	@ 0x40
 801573c:	5c9b      	ldrb	r3, [r3, r2]
 801573e:	2b01      	cmp	r3, #1
 8015740:	d101      	bne.n	8015746 <HAL_I2C_Master_Transmit_DMA+0x52>
 8015742:	2302      	movs	r3, #2
 8015744:	e0cb      	b.n	80158de <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	2240      	movs	r2, #64	@ 0x40
 801574a:	2101      	movs	r1, #1
 801574c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2241      	movs	r2, #65	@ 0x41
 8015752:	2121      	movs	r1, #33	@ 0x21
 8015754:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	2242      	movs	r2, #66	@ 0x42
 801575a:	2110      	movs	r1, #16
 801575c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2200      	movs	r2, #0
 8015762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2208      	movs	r2, #8
 801576e:	18ba      	adds	r2, r7, r2
 8015770:	8812      	ldrh	r2, [r2, #0]
 8015772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	4a5c      	ldr	r2, [pc, #368]	@ (80158e8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8015778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	4a5b      	ldr	r2, [pc, #364]	@ (80158ec <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801577e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015784:	b29b      	uxth	r3, r3
 8015786:	2bff      	cmp	r3, #255	@ 0xff
 8015788:	d906      	bls.n	8015798 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	22ff      	movs	r2, #255	@ 0xff
 801578e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015790:	2380      	movs	r3, #128	@ 0x80
 8015792:	045b      	lsls	r3, r3, #17
 8015794:	617b      	str	r3, [r7, #20]
 8015796:	e007      	b.n	80157a8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801579c:	b29a      	uxth	r2, r3
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80157a2:	2380      	movs	r3, #128	@ 0x80
 80157a4:	049b      	lsls	r3, r3, #18
 80157a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d100      	bne.n	80157b2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80157b0:	e078      	b.n	80158a4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d023      	beq.n	8015802 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157be:	4a4c      	ldr	r2, [pc, #304]	@ (80158f0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80157c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157c6:	4a4b      	ldr	r2, [pc, #300]	@ (80158f4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80157c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157ce:	2200      	movs	r2, #0
 80157d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157d6:	2200      	movs	r2, #0
 80157d8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	3328      	adds	r3, #40	@ 0x28
 80157e6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80157ec:	2513      	movs	r5, #19
 80157ee:	197c      	adds	r4, r7, r5
 80157f0:	f7fe ff62 	bl	80146b8 <HAL_DMA_Start_IT>
 80157f4:	0003      	movs	r3, r0
 80157f6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80157f8:	197b      	adds	r3, r7, r5
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d13d      	bne.n	801587c <HAL_I2C_Master_Transmit_DMA+0x188>
 8015800:	e013      	b.n	801582a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2241      	movs	r2, #65	@ 0x41
 8015806:	2120      	movs	r1, #32
 8015808:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2242      	movs	r2, #66	@ 0x42
 801580e:	2100      	movs	r1, #0
 8015810:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015816:	2280      	movs	r2, #128	@ 0x80
 8015818:	431a      	orrs	r2, r3
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	2240      	movs	r2, #64	@ 0x40
 8015822:	2100      	movs	r1, #0
 8015824:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015826:	2301      	movs	r3, #1
 8015828:	e059      	b.n	80158de <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801582e:	b2da      	uxtb	r2, r3
 8015830:	697c      	ldr	r4, [r7, #20]
 8015832:	230a      	movs	r3, #10
 8015834:	18fb      	adds	r3, r7, r3
 8015836:	8819      	ldrh	r1, [r3, #0]
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	4b2f      	ldr	r3, [pc, #188]	@ (80158f8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801583c:	9300      	str	r3, [sp, #0]
 801583e:	0023      	movs	r3, r4
 8015840:	f002 fa6c 	bl	8017d1c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015848:	b29a      	uxth	r2, r3
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	b29a      	uxth	r2, r3
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2240      	movs	r2, #64	@ 0x40
 801585a:	2100      	movs	r1, #0
 801585c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2110      	movs	r1, #16
 8015862:	0018      	movs	r0, r3
 8015864:	f002 fa94 	bl	8017d90 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	681a      	ldr	r2, [r3, #0]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2180      	movs	r1, #128	@ 0x80
 8015874:	01c9      	lsls	r1, r1, #7
 8015876:	430a      	orrs	r2, r1
 8015878:	601a      	str	r2, [r3, #0]
 801587a:	e02d      	b.n	80158d8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2241      	movs	r2, #65	@ 0x41
 8015880:	2120      	movs	r1, #32
 8015882:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2242      	movs	r2, #66	@ 0x42
 8015888:	2100      	movs	r1, #0
 801588a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015890:	2210      	movs	r2, #16
 8015892:	431a      	orrs	r2, r3
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2240      	movs	r2, #64	@ 0x40
 801589c:	2100      	movs	r1, #0
 801589e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80158a0:	2301      	movs	r3, #1
 80158a2:	e01c      	b.n	80158de <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	4a15      	ldr	r2, [pc, #84]	@ (80158fc <HAL_I2C_Master_Transmit_DMA+0x208>)
 80158a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158ae:	b2da      	uxtb	r2, r3
 80158b0:	2380      	movs	r3, #128	@ 0x80
 80158b2:	049c      	lsls	r4, r3, #18
 80158b4:	230a      	movs	r3, #10
 80158b6:	18fb      	adds	r3, r7, r3
 80158b8:	8819      	ldrh	r1, [r3, #0]
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	4b0e      	ldr	r3, [pc, #56]	@ (80158f8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	0023      	movs	r3, r4
 80158c2:	f002 fa2b 	bl	8017d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2240      	movs	r2, #64	@ 0x40
 80158ca:	2100      	movs	r1, #0
 80158cc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2101      	movs	r1, #1
 80158d2:	0018      	movs	r0, r3
 80158d4:	f002 fa5c 	bl	8017d90 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80158d8:	2300      	movs	r3, #0
 80158da:	e000      	b.n	80158de <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80158dc:	2302      	movs	r3, #2
  }
}
 80158de:	0018      	movs	r0, r3
 80158e0:	46bd      	mov	sp, r7
 80158e2:	b006      	add	sp, #24
 80158e4:	bdb0      	pop	{r4, r5, r7, pc}
 80158e6:	46c0      	nop			@ (mov r8, r8)
 80158e8:	ffff0000 	.word	0xffff0000
 80158ec:	080165cd 	.word	0x080165cd
 80158f0:	080176c9 	.word	0x080176c9
 80158f4:	08017809 	.word	0x08017809
 80158f8:	80002000 	.word	0x80002000
 80158fc:	08016121 	.word	0x08016121

08015900 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015900:	b5b0      	push	{r4, r5, r7, lr}
 8015902:	b088      	sub	sp, #32
 8015904:	af02      	add	r7, sp, #8
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	0008      	movs	r0, r1
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	0019      	movs	r1, r3
 801590e:	230a      	movs	r3, #10
 8015910:	18fb      	adds	r3, r7, r3
 8015912:	1c02      	adds	r2, r0, #0
 8015914:	801a      	strh	r2, [r3, #0]
 8015916:	2308      	movs	r3, #8
 8015918:	18fb      	adds	r3, r7, r3
 801591a:	1c0a      	adds	r2, r1, #0
 801591c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2241      	movs	r2, #65	@ 0x41
 8015922:	5c9b      	ldrb	r3, [r3, r2]
 8015924:	b2db      	uxtb	r3, r3
 8015926:	2b20      	cmp	r3, #32
 8015928:	d000      	beq.n	801592c <HAL_I2C_Master_Receive_DMA+0x2c>
 801592a:	e0dd      	b.n	8015ae8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	699a      	ldr	r2, [r3, #24]
 8015932:	2380      	movs	r3, #128	@ 0x80
 8015934:	021b      	lsls	r3, r3, #8
 8015936:	401a      	ands	r2, r3
 8015938:	2380      	movs	r3, #128	@ 0x80
 801593a:	021b      	lsls	r3, r3, #8
 801593c:	429a      	cmp	r2, r3
 801593e:	d101      	bne.n	8015944 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8015940:	2302      	movs	r3, #2
 8015942:	e0d2      	b.n	8015aea <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2240      	movs	r2, #64	@ 0x40
 8015948:	5c9b      	ldrb	r3, [r3, r2]
 801594a:	2b01      	cmp	r3, #1
 801594c:	d101      	bne.n	8015952 <HAL_I2C_Master_Receive_DMA+0x52>
 801594e:	2302      	movs	r3, #2
 8015950:	e0cb      	b.n	8015aea <HAL_I2C_Master_Receive_DMA+0x1ea>
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	2240      	movs	r2, #64	@ 0x40
 8015956:	2101      	movs	r1, #1
 8015958:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2241      	movs	r2, #65	@ 0x41
 801595e:	2122      	movs	r1, #34	@ 0x22
 8015960:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2242      	movs	r2, #66	@ 0x42
 8015966:	2110      	movs	r1, #16
 8015968:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2200      	movs	r2, #0
 801596e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	687a      	ldr	r2, [r7, #4]
 8015974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2208      	movs	r2, #8
 801597a:	18ba      	adds	r2, r7, r2
 801597c:	8812      	ldrh	r2, [r2, #0]
 801597e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	4a5c      	ldr	r2, [pc, #368]	@ (8015af4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015984:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	4a5b      	ldr	r2, [pc, #364]	@ (8015af8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 801598a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015990:	b29b      	uxth	r3, r3
 8015992:	2bff      	cmp	r3, #255	@ 0xff
 8015994:	d906      	bls.n	80159a4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	22ff      	movs	r2, #255	@ 0xff
 801599a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801599c:	2380      	movs	r3, #128	@ 0x80
 801599e:	045b      	lsls	r3, r3, #17
 80159a0:	617b      	str	r3, [r7, #20]
 80159a2:	e007      	b.n	80159b4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159a8:	b29a      	uxth	r2, r3
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80159ae:	2380      	movs	r3, #128	@ 0x80
 80159b0:	049b      	lsls	r3, r3, #18
 80159b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d100      	bne.n	80159be <HAL_I2C_Master_Receive_DMA+0xbe>
 80159bc:	e078      	b.n	8015ab0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d023      	beq.n	8015a0e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159ca:	4a4c      	ldr	r2, [pc, #304]	@ (8015afc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80159cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159d2:	4a4b      	ldr	r2, [pc, #300]	@ (8015b00 <HAL_I2C_Master_Receive_DMA+0x200>)
 80159d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159da:	2200      	movs	r2, #0
 80159dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e2:	2200      	movs	r2, #0
 80159e4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	3324      	adds	r3, #36	@ 0x24
 80159f0:	0019      	movs	r1, r3
 80159f2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80159f8:	2513      	movs	r5, #19
 80159fa:	197c      	adds	r4, r7, r5
 80159fc:	f7fe fe5c 	bl	80146b8 <HAL_DMA_Start_IT>
 8015a00:	0003      	movs	r3, r0
 8015a02:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015a04:	197b      	adds	r3, r7, r5
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d13d      	bne.n	8015a88 <HAL_I2C_Master_Receive_DMA+0x188>
 8015a0c:	e013      	b.n	8015a36 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2241      	movs	r2, #65	@ 0x41
 8015a12:	2120      	movs	r1, #32
 8015a14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2242      	movs	r2, #66	@ 0x42
 8015a1a:	2100      	movs	r1, #0
 8015a1c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a22:	2280      	movs	r2, #128	@ 0x80
 8015a24:	431a      	orrs	r2, r3
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2240      	movs	r2, #64	@ 0x40
 8015a2e:	2100      	movs	r1, #0
 8015a30:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015a32:	2301      	movs	r3, #1
 8015a34:	e059      	b.n	8015aea <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a3a:	b2da      	uxtb	r2, r3
 8015a3c:	697c      	ldr	r4, [r7, #20]
 8015a3e:	230a      	movs	r3, #10
 8015a40:	18fb      	adds	r3, r7, r3
 8015a42:	8819      	ldrh	r1, [r3, #0]
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	4b2f      	ldr	r3, [pc, #188]	@ (8015b04 <HAL_I2C_Master_Receive_DMA+0x204>)
 8015a48:	9300      	str	r3, [sp, #0]
 8015a4a:	0023      	movs	r3, r4
 8015a4c:	f002 f966 	bl	8017d1c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2240      	movs	r2, #64	@ 0x40
 8015a66:	2100      	movs	r1, #0
 8015a68:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2110      	movs	r1, #16
 8015a6e:	0018      	movs	r0, r3
 8015a70:	f002 f98e 	bl	8017d90 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2180      	movs	r1, #128	@ 0x80
 8015a80:	0209      	lsls	r1, r1, #8
 8015a82:	430a      	orrs	r2, r1
 8015a84:	601a      	str	r2, [r3, #0]
 8015a86:	e02d      	b.n	8015ae4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2241      	movs	r2, #65	@ 0x41
 8015a8c:	2120      	movs	r1, #32
 8015a8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2242      	movs	r2, #66	@ 0x42
 8015a94:	2100      	movs	r1, #0
 8015a96:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a9c:	2210      	movs	r2, #16
 8015a9e:	431a      	orrs	r2, r3
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2240      	movs	r2, #64	@ 0x40
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015aac:	2301      	movs	r3, #1
 8015aae:	e01c      	b.n	8015aea <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4a15      	ldr	r2, [pc, #84]	@ (8015b08 <HAL_I2C_Master_Receive_DMA+0x208>)
 8015ab4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015aba:	b2da      	uxtb	r2, r3
 8015abc:	2380      	movs	r3, #128	@ 0x80
 8015abe:	049c      	lsls	r4, r3, #18
 8015ac0:	230a      	movs	r3, #10
 8015ac2:	18fb      	adds	r3, r7, r3
 8015ac4:	8819      	ldrh	r1, [r3, #0]
 8015ac6:	68f8      	ldr	r0, [r7, #12]
 8015ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8015b04 <HAL_I2C_Master_Receive_DMA+0x204>)
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	0023      	movs	r3, r4
 8015ace:	f002 f925 	bl	8017d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2240      	movs	r2, #64	@ 0x40
 8015ad6:	2100      	movs	r1, #0
 8015ad8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2101      	movs	r1, #1
 8015ade:	0018      	movs	r0, r3
 8015ae0:	f002 f956 	bl	8017d90 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	e000      	b.n	8015aea <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015ae8:	2302      	movs	r3, #2
  }
}
 8015aea:	0018      	movs	r0, r3
 8015aec:	46bd      	mov	sp, r7
 8015aee:	b006      	add	sp, #24
 8015af0:	bdb0      	pop	{r4, r5, r7, pc}
 8015af2:	46c0      	nop			@ (mov r8, r8)
 8015af4:	ffff0000 	.word	0xffff0000
 8015af8:	080165cd 	.word	0x080165cd
 8015afc:	08017769 	.word	0x08017769
 8015b00:	08017809 	.word	0x08017809
 8015b04:	80002400 	.word	0x80002400
 8015b08:	08016121 	.word	0x08016121

08015b0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015b0c:	b590      	push	{r4, r7, lr}
 8015b0e:	b089      	sub	sp, #36	@ 0x24
 8015b10:	af02      	add	r7, sp, #8
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	000c      	movs	r4, r1
 8015b16:	0010      	movs	r0, r2
 8015b18:	0019      	movs	r1, r3
 8015b1a:	230a      	movs	r3, #10
 8015b1c:	18fb      	adds	r3, r7, r3
 8015b1e:	1c22      	adds	r2, r4, #0
 8015b20:	801a      	strh	r2, [r3, #0]
 8015b22:	2308      	movs	r3, #8
 8015b24:	18fb      	adds	r3, r7, r3
 8015b26:	1c02      	adds	r2, r0, #0
 8015b28:	801a      	strh	r2, [r3, #0]
 8015b2a:	1dbb      	adds	r3, r7, #6
 8015b2c:	1c0a      	adds	r2, r1, #0
 8015b2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2241      	movs	r2, #65	@ 0x41
 8015b34:	5c9b      	ldrb	r3, [r3, r2]
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	2b20      	cmp	r3, #32
 8015b3a:	d000      	beq.n	8015b3e <HAL_I2C_Mem_Read+0x32>
 8015b3c:	e110      	b.n	8015d60 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d004      	beq.n	8015b4e <HAL_I2C_Mem_Read+0x42>
 8015b44:	232c      	movs	r3, #44	@ 0x2c
 8015b46:	18fb      	adds	r3, r7, r3
 8015b48:	881b      	ldrh	r3, [r3, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d105      	bne.n	8015b5a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2280      	movs	r2, #128	@ 0x80
 8015b52:	0092      	lsls	r2, r2, #2
 8015b54:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015b56:	2301      	movs	r3, #1
 8015b58:	e103      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	2240      	movs	r2, #64	@ 0x40
 8015b5e:	5c9b      	ldrb	r3, [r3, r2]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d101      	bne.n	8015b68 <HAL_I2C_Mem_Read+0x5c>
 8015b64:	2302      	movs	r3, #2
 8015b66:	e0fc      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2240      	movs	r2, #64	@ 0x40
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015b70:	f7fe f850 	bl	8013c14 <HAL_GetTick>
 8015b74:	0003      	movs	r3, r0
 8015b76:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015b78:	2380      	movs	r3, #128	@ 0x80
 8015b7a:	0219      	lsls	r1, r3, #8
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	9300      	str	r3, [sp, #0]
 8015b82:	2319      	movs	r3, #25
 8015b84:	2201      	movs	r2, #1
 8015b86:	f001 fe77 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015b8a:	1e03      	subs	r3, r0, #0
 8015b8c:	d001      	beq.n	8015b92 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8015b8e:	2301      	movs	r3, #1
 8015b90:	e0e7      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2241      	movs	r2, #65	@ 0x41
 8015b96:	2122      	movs	r1, #34	@ 0x22
 8015b98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	2242      	movs	r2, #66	@ 0x42
 8015b9e:	2140      	movs	r1, #64	@ 0x40
 8015ba0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015bac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	222c      	movs	r2, #44	@ 0x2c
 8015bb2:	18ba      	adds	r2, r7, r2
 8015bb4:	8812      	ldrh	r2, [r2, #0]
 8015bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015bbe:	1dbb      	adds	r3, r7, #6
 8015bc0:	881c      	ldrh	r4, [r3, #0]
 8015bc2:	2308      	movs	r3, #8
 8015bc4:	18fb      	adds	r3, r7, r3
 8015bc6:	881a      	ldrh	r2, [r3, #0]
 8015bc8:	230a      	movs	r3, #10
 8015bca:	18fb      	adds	r3, r7, r3
 8015bcc:	8819      	ldrh	r1, [r3, #0]
 8015bce:	68f8      	ldr	r0, [r7, #12]
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	9301      	str	r3, [sp, #4]
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	0023      	movs	r3, r4
 8015bda:	f001 f829 	bl	8016c30 <I2C_RequestMemoryRead>
 8015bde:	1e03      	subs	r3, r0, #0
 8015be0:	d005      	beq.n	8015bee <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	2240      	movs	r2, #64	@ 0x40
 8015be6:	2100      	movs	r1, #0
 8015be8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015bea:	2301      	movs	r3, #1
 8015bec:	e0b9      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	2bff      	cmp	r3, #255	@ 0xff
 8015bf6:	d911      	bls.n	8015c1c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	22ff      	movs	r2, #255	@ 0xff
 8015bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	2380      	movs	r3, #128	@ 0x80
 8015c06:	045c      	lsls	r4, r3, #17
 8015c08:	230a      	movs	r3, #10
 8015c0a:	18fb      	adds	r3, r7, r3
 8015c0c:	8819      	ldrh	r1, [r3, #0]
 8015c0e:	68f8      	ldr	r0, [r7, #12]
 8015c10:	4b56      	ldr	r3, [pc, #344]	@ (8015d6c <HAL_I2C_Mem_Read+0x260>)
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	0023      	movs	r3, r4
 8015c16:	f002 f881 	bl	8017d1c <I2C_TransferConfig>
 8015c1a:	e012      	b.n	8015c42 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c2a:	b2da      	uxtb	r2, r3
 8015c2c:	2380      	movs	r3, #128	@ 0x80
 8015c2e:	049c      	lsls	r4, r3, #18
 8015c30:	230a      	movs	r3, #10
 8015c32:	18fb      	adds	r3, r7, r3
 8015c34:	8819      	ldrh	r1, [r3, #0]
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	4b4c      	ldr	r3, [pc, #304]	@ (8015d6c <HAL_I2C_Mem_Read+0x260>)
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	0023      	movs	r3, r4
 8015c3e:	f002 f86d 	bl	8017d1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c44:	68f8      	ldr	r0, [r7, #12]
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	0013      	movs	r3, r2
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	2104      	movs	r1, #4
 8015c50:	f001 fe12 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015c54:	1e03      	subs	r3, r0, #0
 8015c56:	d001      	beq.n	8015c5c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e082      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c66:	b2d2      	uxtb	r2, r2
 8015c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c6e:	1c5a      	adds	r2, r3, #1
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c78:	3b01      	subs	r3, #1
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c84:	b29b      	uxth	r3, r3
 8015c86:	3b01      	subs	r3, #1
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d03a      	beq.n	8015d0e <HAL_I2C_Mem_Read+0x202>
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d136      	bne.n	8015d0e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	0013      	movs	r3, r2
 8015caa:	2200      	movs	r2, #0
 8015cac:	2180      	movs	r1, #128	@ 0x80
 8015cae:	f001 fde3 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8015cb2:	1e03      	subs	r3, r0, #0
 8015cb4:	d001      	beq.n	8015cba <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	e053      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	2bff      	cmp	r3, #255	@ 0xff
 8015cc2:	d911      	bls.n	8015ce8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	22ff      	movs	r2, #255	@ 0xff
 8015cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	2380      	movs	r3, #128	@ 0x80
 8015cd2:	045c      	lsls	r4, r3, #17
 8015cd4:	230a      	movs	r3, #10
 8015cd6:	18fb      	adds	r3, r7, r3
 8015cd8:	8819      	ldrh	r1, [r3, #0]
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	2300      	movs	r3, #0
 8015cde:	9300      	str	r3, [sp, #0]
 8015ce0:	0023      	movs	r3, r4
 8015ce2:	f002 f81b 	bl	8017d1c <I2C_TransferConfig>
 8015ce6:	e012      	b.n	8015d0e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cf6:	b2da      	uxtb	r2, r3
 8015cf8:	2380      	movs	r3, #128	@ 0x80
 8015cfa:	049c      	lsls	r4, r3, #18
 8015cfc:	230a      	movs	r3, #10
 8015cfe:	18fb      	adds	r3, r7, r3
 8015d00:	8819      	ldrh	r1, [r3, #0]
 8015d02:	68f8      	ldr	r0, [r7, #12]
 8015d04:	2300      	movs	r3, #0
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	0023      	movs	r3, r4
 8015d0a:	f002 f807 	bl	8017d1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d194      	bne.n	8015c42 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d18:	697a      	ldr	r2, [r7, #20]
 8015d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	0018      	movs	r0, r3
 8015d20:	f001 fe3e 	bl	80179a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015d24:	1e03      	subs	r3, r0, #0
 8015d26:	d001      	beq.n	8015d2c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015d28:	2301      	movs	r3, #1
 8015d2a:	e01a      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	2220      	movs	r2, #32
 8015d32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	685a      	ldr	r2, [r3, #4]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	490c      	ldr	r1, [pc, #48]	@ (8015d70 <HAL_I2C_Mem_Read+0x264>)
 8015d40:	400a      	ands	r2, r1
 8015d42:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2241      	movs	r2, #65	@ 0x41
 8015d48:	2120      	movs	r1, #32
 8015d4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2242      	movs	r2, #66	@ 0x42
 8015d50:	2100      	movs	r1, #0
 8015d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2240      	movs	r2, #64	@ 0x40
 8015d58:	2100      	movs	r1, #0
 8015d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	e000      	b.n	8015d62 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015d60:	2302      	movs	r3, #2
  }
}
 8015d62:	0018      	movs	r0, r3
 8015d64:	46bd      	mov	sp, r7
 8015d66:	b007      	add	sp, #28
 8015d68:	bd90      	pop	{r4, r7, pc}
 8015d6a:	46c0      	nop			@ (mov r8, r8)
 8015d6c:	80002400 	.word	0x80002400
 8015d70:	fe00e800 	.word	0xfe00e800

08015d74 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8015d74:	b5b0      	push	{r4, r5, r7, lr}
 8015d76:	b088      	sub	sp, #32
 8015d78:	af02      	add	r7, sp, #8
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	000c      	movs	r4, r1
 8015d7e:	0010      	movs	r0, r2
 8015d80:	0019      	movs	r1, r3
 8015d82:	230a      	movs	r3, #10
 8015d84:	18fb      	adds	r3, r7, r3
 8015d86:	1c22      	adds	r2, r4, #0
 8015d88:	801a      	strh	r2, [r3, #0]
 8015d8a:	2308      	movs	r3, #8
 8015d8c:	18fb      	adds	r3, r7, r3
 8015d8e:	1c02      	adds	r2, r0, #0
 8015d90:	801a      	strh	r2, [r3, #0]
 8015d92:	1dbb      	adds	r3, r7, #6
 8015d94:	1c0a      	adds	r2, r1, #0
 8015d96:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	2241      	movs	r2, #65	@ 0x41
 8015d9c:	5c9b      	ldrb	r3, [r3, r2]
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	2b20      	cmp	r3, #32
 8015da2:	d000      	beq.n	8015da6 <HAL_I2C_Mem_Write_DMA+0x32>
 8015da4:	e0d8      	b.n	8015f58 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d004      	beq.n	8015db6 <HAL_I2C_Mem_Write_DMA+0x42>
 8015dac:	232c      	movs	r3, #44	@ 0x2c
 8015dae:	18fb      	adds	r3, r7, r3
 8015db0:	881b      	ldrh	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d105      	bne.n	8015dc2 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	2280      	movs	r2, #128	@ 0x80
 8015dba:	0092      	lsls	r2, r2, #2
 8015dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	e0cb      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	699a      	ldr	r2, [r3, #24]
 8015dc8:	2380      	movs	r3, #128	@ 0x80
 8015dca:	021b      	lsls	r3, r3, #8
 8015dcc:	401a      	ands	r2, r3
 8015dce:	2380      	movs	r3, #128	@ 0x80
 8015dd0:	021b      	lsls	r3, r3, #8
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d101      	bne.n	8015dda <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8015dd6:	2302      	movs	r3, #2
 8015dd8:	e0bf      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2240      	movs	r2, #64	@ 0x40
 8015dde:	5c9b      	ldrb	r3, [r3, r2]
 8015de0:	2b01      	cmp	r3, #1
 8015de2:	d101      	bne.n	8015de8 <HAL_I2C_Mem_Write_DMA+0x74>
 8015de4:	2302      	movs	r3, #2
 8015de6:	e0b8      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2240      	movs	r2, #64	@ 0x40
 8015dec:	2101      	movs	r1, #1
 8015dee:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2241      	movs	r2, #65	@ 0x41
 8015df4:	2121      	movs	r1, #33	@ 0x21
 8015df6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2242      	movs	r2, #66	@ 0x42
 8015dfc:	2140      	movs	r1, #64	@ 0x40
 8015dfe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2200      	movs	r2, #0
 8015e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	222c      	movs	r2, #44	@ 0x2c
 8015e10:	18ba      	adds	r2, r7, r2
 8015e12:	8812      	ldrh	r2, [r2, #0]
 8015e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	4a52      	ldr	r2, [pc, #328]	@ (8015f64 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	4a52      	ldr	r2, [pc, #328]	@ (8015f68 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015e20:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8015e22:	230a      	movs	r3, #10
 8015e24:	18fb      	adds	r3, r7, r3
 8015e26:	881a      	ldrh	r2, [r3, #0]
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	2bff      	cmp	r3, #255	@ 0xff
 8015e34:	d903      	bls.n	8015e3e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	22ff      	movs	r2, #255	@ 0xff
 8015e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015e3c:	e004      	b.n	8015e48 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015e48:	1dbb      	adds	r3, r7, #6
 8015e4a:	881b      	ldrh	r3, [r3, #0]
 8015e4c:	2b01      	cmp	r3, #1
 8015e4e:	d10b      	bne.n	8015e68 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015e50:	2308      	movs	r3, #8
 8015e52:	18fb      	adds	r3, r7, r3
 8015e54:	881b      	ldrh	r3, [r3, #0]
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2201      	movs	r2, #1
 8015e62:	4252      	negs	r2, r2
 8015e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8015e66:	e00e      	b.n	8015e86 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015e68:	2108      	movs	r1, #8
 8015e6a:	187b      	adds	r3, r7, r1
 8015e6c:	881b      	ldrh	r3, [r3, #0]
 8015e6e:	0a1b      	lsrs	r3, r3, #8
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	b2da      	uxtb	r2, r3
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8015e7a:	187b      	adds	r3, r7, r1
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	b2db      	uxtb	r3, r3
 8015e80:	001a      	movs	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d023      	beq.n	8015ed6 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e92:	4a36      	ldr	r2, [pc, #216]	@ (8015f6c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8015e94:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e9a:	4a35      	ldr	r2, [pc, #212]	@ (8015f70 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8015e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015eaa:	2200      	movs	r2, #0
 8015eac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	3328      	adds	r3, #40	@ 0x28
 8015eba:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015ec0:	2517      	movs	r5, #23
 8015ec2:	197c      	adds	r4, r7, r5
 8015ec4:	f7fe fbf8 	bl	80146b8 <HAL_DMA_Start_IT>
 8015ec8:	0003      	movs	r3, r0
 8015eca:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8015ecc:	197b      	adds	r3, r7, r5
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d12d      	bne.n	8015f30 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8015ed4:	e013      	b.n	8015efe <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2241      	movs	r2, #65	@ 0x41
 8015eda:	2120      	movs	r1, #32
 8015edc:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2242      	movs	r2, #66	@ 0x42
 8015ee2:	2100      	movs	r1, #0
 8015ee4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eea:	2280      	movs	r2, #128	@ 0x80
 8015eec:	431a      	orrs	r2, r3
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2240      	movs	r2, #64	@ 0x40
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015efa:	2301      	movs	r3, #1
 8015efc:	e02d      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8015efe:	1dbb      	adds	r3, r7, #6
 8015f00:	881b      	ldrh	r3, [r3, #0]
 8015f02:	b2da      	uxtb	r2, r3
 8015f04:	2380      	movs	r3, #128	@ 0x80
 8015f06:	045c      	lsls	r4, r3, #17
 8015f08:	230a      	movs	r3, #10
 8015f0a:	18fb      	adds	r3, r7, r3
 8015f0c:	8819      	ldrh	r1, [r3, #0]
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	4b18      	ldr	r3, [pc, #96]	@ (8015f74 <HAL_I2C_Mem_Write_DMA+0x200>)
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	0023      	movs	r3, r4
 8015f16:	f001 ff01 	bl	8017d1c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	2240      	movs	r2, #64	@ 0x40
 8015f1e:	2100      	movs	r1, #0
 8015f20:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	2101      	movs	r1, #1
 8015f26:	0018      	movs	r0, r3
 8015f28:	f001 ff32 	bl	8017d90 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	e014      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2241      	movs	r2, #65	@ 0x41
 8015f34:	2120      	movs	r1, #32
 8015f36:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2242      	movs	r2, #66	@ 0x42
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f44:	2210      	movs	r2, #16
 8015f46:	431a      	orrs	r2, r3
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2240      	movs	r2, #64	@ 0x40
 8015f50:	2100      	movs	r1, #0
 8015f52:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015f54:	2301      	movs	r3, #1
 8015f56:	e000      	b.n	8015f5a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015f58:	2302      	movs	r3, #2
  }
}
 8015f5a:	0018      	movs	r0, r3
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	b006      	add	sp, #24
 8015f60:	bdb0      	pop	{r4, r5, r7, pc}
 8015f62:	46c0      	nop			@ (mov r8, r8)
 8015f64:	ffff0000 	.word	0xffff0000
 8015f68:	080167e5 	.word	0x080167e5
 8015f6c:	080176c9 	.word	0x080176c9
 8015f70:	08017809 	.word	0x08017809
 8015f74:	80002000 	.word	0x80002000

08015f78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	699b      	ldr	r3, [r3, #24]
 8015f86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d005      	beq.n	8015fa4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f9c:	68ba      	ldr	r2, [r7, #8]
 8015f9e:	68f9      	ldr	r1, [r7, #12]
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	4798      	blx	r3
  }
}
 8015fa4:	46c0      	nop			@ (mov r8, r8)
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	b004      	add	sp, #16
 8015faa:	bd80      	pop	{r7, pc}

08015fac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b086      	sub	sp, #24
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	699b      	ldr	r3, [r3, #24]
 8015fba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	0a1b      	lsrs	r3, r3, #8
 8015fc8:	001a      	movs	r2, r3
 8015fca:	2301      	movs	r3, #1
 8015fcc:	4013      	ands	r3, r2
 8015fce:	d010      	beq.n	8015ff2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	09db      	lsrs	r3, r3, #7
 8015fd4:	001a      	movs	r2, r3
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015fda:	d00a      	beq.n	8015ff2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	431a      	orrs	r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	2280      	movs	r2, #128	@ 0x80
 8015fee:	0052      	lsls	r2, r2, #1
 8015ff0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	0a9b      	lsrs	r3, r3, #10
 8015ff6:	001a      	movs	r2, r3
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	d010      	beq.n	8016020 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	09db      	lsrs	r3, r3, #7
 8016002:	001a      	movs	r2, r3
 8016004:	2301      	movs	r3, #1
 8016006:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016008:	d00a      	beq.n	8016020 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801600e:	2208      	movs	r2, #8
 8016010:	431a      	orrs	r2, r3
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2280      	movs	r2, #128	@ 0x80
 801601c:	00d2      	lsls	r2, r2, #3
 801601e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	0a5b      	lsrs	r3, r3, #9
 8016024:	001a      	movs	r2, r3
 8016026:	2301      	movs	r3, #1
 8016028:	4013      	ands	r3, r2
 801602a:	d010      	beq.n	801604e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	09db      	lsrs	r3, r3, #7
 8016030:	001a      	movs	r2, r3
 8016032:	2301      	movs	r3, #1
 8016034:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016036:	d00a      	beq.n	801604e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801603c:	2202      	movs	r2, #2
 801603e:	431a      	orrs	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	2280      	movs	r2, #128	@ 0x80
 801604a:	0092      	lsls	r2, r2, #2
 801604c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016052:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	220b      	movs	r2, #11
 8016058:	4013      	ands	r3, r2
 801605a:	d005      	beq.n	8016068 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	0011      	movs	r1, r2
 8016062:	0018      	movs	r0, r3
 8016064:	f001 f9e2 	bl	801742c <I2C_ITError>
  }
}
 8016068:	46c0      	nop			@ (mov r8, r8)
 801606a:	46bd      	mov	sp, r7
 801606c:	b006      	add	sp, #24
 801606e:	bd80      	pop	{r7, pc}

08016070 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016078:	46c0      	nop			@ (mov r8, r8)
 801607a:	46bd      	mov	sp, r7
 801607c:	b002      	add	sp, #8
 801607e:	bd80      	pop	{r7, pc}

08016080 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016088:	46c0      	nop			@ (mov r8, r8)
 801608a:	46bd      	mov	sp, r7
 801608c:	b002      	add	sp, #8
 801608e:	bd80      	pop	{r7, pc}

08016090 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016098:	46c0      	nop			@ (mov r8, r8)
 801609a:	46bd      	mov	sp, r7
 801609c:	b002      	add	sp, #8
 801609e:	bd80      	pop	{r7, pc}

080160a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80160a8:	46c0      	nop			@ (mov r8, r8)
 80160aa:	46bd      	mov	sp, r7
 80160ac:	b002      	add	sp, #8
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
 80160b8:	0008      	movs	r0, r1
 80160ba:	0011      	movs	r1, r2
 80160bc:	1cfb      	adds	r3, r7, #3
 80160be:	1c02      	adds	r2, r0, #0
 80160c0:	701a      	strb	r2, [r3, #0]
 80160c2:	003b      	movs	r3, r7
 80160c4:	1c0a      	adds	r2, r1, #0
 80160c6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80160c8:	46c0      	nop			@ (mov r8, r8)
 80160ca:	46bd      	mov	sp, r7
 80160cc:	b002      	add	sp, #8
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80160d8:	46c0      	nop			@ (mov r8, r8)
 80160da:	46bd      	mov	sp, r7
 80160dc:	b002      	add	sp, #8
 80160de:	bd80      	pop	{r7, pc}

080160e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80160e8:	46c0      	nop			@ (mov r8, r8)
 80160ea:	46bd      	mov	sp, r7
 80160ec:	b002      	add	sp, #8
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80160f8:	46c0      	nop			@ (mov r8, r8)
 80160fa:	46bd      	mov	sp, r7
 80160fc:	b002      	add	sp, #8
 80160fe:	bd80      	pop	{r7, pc}

08016100 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b082      	sub	sp, #8
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016108:	46c0      	nop			@ (mov r8, r8)
 801610a:	46bd      	mov	sp, r7
 801610c:	b002      	add	sp, #8
 801610e:	bd80      	pop	{r7, pc}

08016110 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016118:	46c0      	nop			@ (mov r8, r8)
 801611a:	46bd      	mov	sp, r7
 801611c:	b002      	add	sp, #8
 801611e:	bd80      	pop	{r7, pc}

08016120 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016120:	b590      	push	{r4, r7, lr}
 8016122:	b089      	sub	sp, #36	@ 0x24
 8016124:	af02      	add	r7, sp, #8
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2240      	movs	r2, #64	@ 0x40
 8016134:	5c9b      	ldrb	r3, [r3, r2]
 8016136:	2b01      	cmp	r3, #1
 8016138:	d101      	bne.n	801613e <I2C_Master_ISR_IT+0x1e>
 801613a:	2302      	movs	r3, #2
 801613c:	e12b      	b.n	8016396 <I2C_Master_ISR_IT+0x276>
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2240      	movs	r2, #64	@ 0x40
 8016142:	2101      	movs	r1, #1
 8016144:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016146:	697b      	ldr	r3, [r7, #20]
 8016148:	091b      	lsrs	r3, r3, #4
 801614a:	001a      	movs	r2, r3
 801614c:	2301      	movs	r3, #1
 801614e:	4013      	ands	r3, r2
 8016150:	d014      	beq.n	801617c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	091b      	lsrs	r3, r3, #4
 8016156:	001a      	movs	r2, r3
 8016158:	2301      	movs	r3, #1
 801615a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801615c:	d00e      	beq.n	801617c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	2210      	movs	r2, #16
 8016164:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801616a:	2204      	movs	r2, #4
 801616c:	431a      	orrs	r2, r3
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	0018      	movs	r0, r3
 8016176:	f001 fa84 	bl	8017682 <I2C_Flush_TXDR>
 801617a:	e0f5      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	089b      	lsrs	r3, r3, #2
 8016180:	001a      	movs	r2, r3
 8016182:	2301      	movs	r3, #1
 8016184:	4013      	ands	r3, r2
 8016186:	d023      	beq.n	80161d0 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	089b      	lsrs	r3, r3, #2
 801618c:	001a      	movs	r2, r3
 801618e:	2301      	movs	r3, #1
 8016190:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016192:	d01d      	beq.n	80161d0 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	2204      	movs	r2, #4
 8016198:	4393      	bics	r3, r2
 801619a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a6:	b2d2      	uxtb	r2, r2
 80161a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ae:	1c5a      	adds	r2, r3, #1
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161b8:	3b01      	subs	r3, #1
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	3b01      	subs	r3, #1
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80161ce:	e0cb      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	085b      	lsrs	r3, r3, #1
 80161d4:	001a      	movs	r2, r3
 80161d6:	2301      	movs	r3, #1
 80161d8:	4013      	ands	r3, r2
 80161da:	d01e      	beq.n	801621a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	085b      	lsrs	r3, r3, #1
 80161e0:	001a      	movs	r2, r3
 80161e2:	2301      	movs	r3, #1
 80161e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80161e6:	d018      	beq.n	801621a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ec:	781a      	ldrb	r2, [r3, #0]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161f8:	1c5a      	adds	r2, r3, #1
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016202:	3b01      	subs	r3, #1
 8016204:	b29a      	uxth	r2, r3
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801620e:	b29b      	uxth	r3, r3
 8016210:	3b01      	subs	r3, #1
 8016212:	b29a      	uxth	r2, r3
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016218:	e0a6      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801621a:	697b      	ldr	r3, [r7, #20]
 801621c:	09db      	lsrs	r3, r3, #7
 801621e:	001a      	movs	r2, r3
 8016220:	2301      	movs	r3, #1
 8016222:	4013      	ands	r3, r2
 8016224:	d100      	bne.n	8016228 <I2C_Master_ISR_IT+0x108>
 8016226:	e06b      	b.n	8016300 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	099b      	lsrs	r3, r3, #6
 801622c:	001a      	movs	r2, r3
 801622e:	2301      	movs	r3, #1
 8016230:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016232:	d065      	beq.n	8016300 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016238:	b29b      	uxth	r3, r3
 801623a:	2b00      	cmp	r3, #0
 801623c:	d04a      	beq.n	80162d4 <I2C_Master_ISR_IT+0x1b4>
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016242:	2b00      	cmp	r3, #0
 8016244:	d146      	bne.n	80162d4 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	b29a      	uxth	r2, r3
 801624e:	2112      	movs	r1, #18
 8016250:	187b      	adds	r3, r7, r1
 8016252:	0592      	lsls	r2, r2, #22
 8016254:	0d92      	lsrs	r2, r2, #22
 8016256:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801625c:	b29b      	uxth	r3, r3
 801625e:	2bff      	cmp	r3, #255	@ 0xff
 8016260:	d910      	bls.n	8016284 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	22ff      	movs	r2, #255	@ 0xff
 8016266:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801626c:	b2da      	uxtb	r2, r3
 801626e:	2380      	movs	r3, #128	@ 0x80
 8016270:	045c      	lsls	r4, r3, #17
 8016272:	187b      	adds	r3, r7, r1
 8016274:	8819      	ldrh	r1, [r3, #0]
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	2300      	movs	r3, #0
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	0023      	movs	r3, r4
 801627e:	f001 fd4d 	bl	8017d1c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016282:	e03c      	b.n	80162fe <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016288:	b29a      	uxth	r2, r3
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016292:	4a43      	ldr	r2, [pc, #268]	@ (80163a0 <I2C_Master_ISR_IT+0x280>)
 8016294:	4293      	cmp	r3, r2
 8016296:	d00e      	beq.n	80162b6 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801629c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80162a2:	2312      	movs	r3, #18
 80162a4:	18fb      	adds	r3, r7, r3
 80162a6:	8819      	ldrh	r1, [r3, #0]
 80162a8:	68f8      	ldr	r0, [r7, #12]
 80162aa:	2300      	movs	r3, #0
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	0023      	movs	r3, r4
 80162b0:	f001 fd34 	bl	8017d1c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162b4:	e023      	b.n	80162fe <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162ba:	b2da      	uxtb	r2, r3
 80162bc:	2380      	movs	r3, #128	@ 0x80
 80162be:	049c      	lsls	r4, r3, #18
 80162c0:	2312      	movs	r3, #18
 80162c2:	18fb      	adds	r3, r7, r3
 80162c4:	8819      	ldrh	r1, [r3, #0]
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	2300      	movs	r3, #0
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	0023      	movs	r3, r4
 80162ce:	f001 fd25 	bl	8017d1c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162d2:	e014      	b.n	80162fe <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	685a      	ldr	r2, [r3, #4]
 80162da:	2380      	movs	r3, #128	@ 0x80
 80162dc:	049b      	lsls	r3, r3, #18
 80162de:	401a      	ands	r2, r3
 80162e0:	2380      	movs	r3, #128	@ 0x80
 80162e2:	049b      	lsls	r3, r3, #18
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d004      	beq.n	80162f2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	0018      	movs	r0, r3
 80162ec:	f000 fda6 	bl	8016e3c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80162f0:	e03a      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2140      	movs	r1, #64	@ 0x40
 80162f6:	0018      	movs	r0, r3
 80162f8:	f001 f898 	bl	801742c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80162fc:	e034      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
 80162fe:	e033      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	099b      	lsrs	r3, r3, #6
 8016304:	001a      	movs	r2, r3
 8016306:	2301      	movs	r3, #1
 8016308:	4013      	ands	r3, r2
 801630a:	d02d      	beq.n	8016368 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	099b      	lsrs	r3, r3, #6
 8016310:	001a      	movs	r2, r3
 8016312:	2301      	movs	r3, #1
 8016314:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016316:	d027      	beq.n	8016368 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801631c:	b29b      	uxth	r3, r3
 801631e:	2b00      	cmp	r3, #0
 8016320:	d11d      	bne.n	801635e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	685a      	ldr	r2, [r3, #4]
 8016328:	2380      	movs	r3, #128	@ 0x80
 801632a:	049b      	lsls	r3, r3, #18
 801632c:	401a      	ands	r2, r3
 801632e:	2380      	movs	r3, #128	@ 0x80
 8016330:	049b      	lsls	r3, r3, #18
 8016332:	429a      	cmp	r2, r3
 8016334:	d018      	beq.n	8016368 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801633a:	4a19      	ldr	r2, [pc, #100]	@ (80163a0 <I2C_Master_ISR_IT+0x280>)
 801633c:	4293      	cmp	r3, r2
 801633e:	d109      	bne.n	8016354 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	685a      	ldr	r2, [r3, #4]
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	2180      	movs	r1, #128	@ 0x80
 801634c:	01c9      	lsls	r1, r1, #7
 801634e:	430a      	orrs	r2, r1
 8016350:	605a      	str	r2, [r3, #4]
 8016352:	e009      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	0018      	movs	r0, r3
 8016358:	f000 fd70 	bl	8016e3c <I2C_ITMasterSeqCplt>
 801635c:	e004      	b.n	8016368 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	2140      	movs	r1, #64	@ 0x40
 8016362:	0018      	movs	r0, r3
 8016364:	f001 f862 	bl	801742c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	095b      	lsrs	r3, r3, #5
 801636c:	001a      	movs	r2, r3
 801636e:	2301      	movs	r3, #1
 8016370:	4013      	ands	r3, r2
 8016372:	d00b      	beq.n	801638c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	095b      	lsrs	r3, r3, #5
 8016378:	001a      	movs	r2, r3
 801637a:	2301      	movs	r3, #1
 801637c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801637e:	d005      	beq.n	801638c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	0011      	movs	r1, r2
 8016386:	0018      	movs	r0, r3
 8016388:	f000 fe00 	bl	8016f8c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2240      	movs	r2, #64	@ 0x40
 8016390:	2100      	movs	r1, #0
 8016392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016394:	2300      	movs	r3, #0
}
 8016396:	0018      	movs	r0, r3
 8016398:	46bd      	mov	sp, r7
 801639a:	b007      	add	sp, #28
 801639c:	bd90      	pop	{r4, r7, pc}
 801639e:	46c0      	nop			@ (mov r8, r8)
 80163a0:	ffff0000 	.word	0xffff0000

080163a4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b086      	sub	sp, #24
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2240      	movs	r2, #64	@ 0x40
 80163be:	5c9b      	ldrb	r3, [r3, r2]
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	d101      	bne.n	80163c8 <I2C_Slave_ISR_IT+0x24>
 80163c4:	2302      	movs	r3, #2
 80163c6:	e0fa      	b.n	80165be <I2C_Slave_ISR_IT+0x21a>
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2240      	movs	r2, #64	@ 0x40
 80163cc:	2101      	movs	r1, #1
 80163ce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	095b      	lsrs	r3, r3, #5
 80163d4:	001a      	movs	r2, r3
 80163d6:	2301      	movs	r3, #1
 80163d8:	4013      	ands	r3, r2
 80163da:	d00b      	beq.n	80163f4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	095b      	lsrs	r3, r3, #5
 80163e0:	001a      	movs	r2, r3
 80163e2:	2301      	movs	r3, #1
 80163e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80163e6:	d005      	beq.n	80163f4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80163e8:	693a      	ldr	r2, [r7, #16]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	0011      	movs	r1, r2
 80163ee:	0018      	movs	r0, r3
 80163f0:	f000 fe9e 	bl	8017130 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	091b      	lsrs	r3, r3, #4
 80163f8:	001a      	movs	r2, r3
 80163fa:	2301      	movs	r3, #1
 80163fc:	4013      	ands	r3, r2
 80163fe:	d054      	beq.n	80164aa <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	091b      	lsrs	r3, r3, #4
 8016404:	001a      	movs	r2, r3
 8016406:	2301      	movs	r3, #1
 8016408:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801640a:	d04e      	beq.n	80164aa <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016410:	b29b      	uxth	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	d12d      	bne.n	8016472 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2241      	movs	r2, #65	@ 0x41
 801641a:	5c9b      	ldrb	r3, [r3, r2]
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b28      	cmp	r3, #40	@ 0x28
 8016420:	d10b      	bne.n	801643a <I2C_Slave_ISR_IT+0x96>
 8016422:	697a      	ldr	r2, [r7, #20]
 8016424:	2380      	movs	r3, #128	@ 0x80
 8016426:	049b      	lsls	r3, r3, #18
 8016428:	429a      	cmp	r2, r3
 801642a:	d106      	bne.n	801643a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801642c:	693a      	ldr	r2, [r7, #16]
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	0011      	movs	r1, r2
 8016432:	0018      	movs	r0, r3
 8016434:	f000 ffa0 	bl	8017378 <I2C_ITListenCplt>
 8016438:	e036      	b.n	80164a8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	2241      	movs	r2, #65	@ 0x41
 801643e:	5c9b      	ldrb	r3, [r3, r2]
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b29      	cmp	r3, #41	@ 0x29
 8016444:	d110      	bne.n	8016468 <I2C_Slave_ISR_IT+0xc4>
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	4a5f      	ldr	r2, [pc, #380]	@ (80165c8 <I2C_Slave_ISR_IT+0x224>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d00c      	beq.n	8016468 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2210      	movs	r2, #16
 8016454:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	0018      	movs	r0, r3
 801645a:	f001 f912 	bl	8017682 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	0018      	movs	r0, r3
 8016462:	f000 fd2d 	bl	8016ec0 <I2C_ITSlaveSeqCplt>
 8016466:	e01f      	b.n	80164a8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2210      	movs	r2, #16
 801646e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8016470:	e09d      	b.n	80165ae <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2210      	movs	r2, #16
 8016478:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801647e:	2204      	movs	r2, #4
 8016480:	431a      	orrs	r2, r3
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016486:	697b      	ldr	r3, [r7, #20]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d005      	beq.n	8016498 <I2C_Slave_ISR_IT+0xf4>
 801648c:	697a      	ldr	r2, [r7, #20]
 801648e:	2380      	movs	r3, #128	@ 0x80
 8016490:	045b      	lsls	r3, r3, #17
 8016492:	429a      	cmp	r2, r3
 8016494:	d000      	beq.n	8016498 <I2C_Slave_ISR_IT+0xf4>
 8016496:	e08a      	b.n	80165ae <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	0011      	movs	r1, r2
 80164a0:	0018      	movs	r0, r3
 80164a2:	f000 ffc3 	bl	801742c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80164a6:	e082      	b.n	80165ae <I2C_Slave_ISR_IT+0x20a>
 80164a8:	e081      	b.n	80165ae <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	089b      	lsrs	r3, r3, #2
 80164ae:	001a      	movs	r2, r3
 80164b0:	2301      	movs	r3, #1
 80164b2:	4013      	ands	r3, r2
 80164b4:	d031      	beq.n	801651a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	089b      	lsrs	r3, r3, #2
 80164ba:	001a      	movs	r2, r3
 80164bc:	2301      	movs	r3, #1
 80164be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80164c0:	d02b      	beq.n	801651a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164c6:	b29b      	uxth	r3, r3
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d018      	beq.n	80164fe <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164d6:	b2d2      	uxtb	r2, r2
 80164d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164de:	1c5a      	adds	r2, r3, #1
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164e8:	3b01      	subs	r3, #1
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	3b01      	subs	r3, #1
 80164f8:	b29a      	uxth	r2, r3
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016502:	b29b      	uxth	r3, r3
 8016504:	2b00      	cmp	r3, #0
 8016506:	d154      	bne.n	80165b2 <I2C_Slave_ISR_IT+0x20e>
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	4a2f      	ldr	r2, [pc, #188]	@ (80165c8 <I2C_Slave_ISR_IT+0x224>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d050      	beq.n	80165b2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	0018      	movs	r0, r3
 8016514:	f000 fcd4 	bl	8016ec0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8016518:	e04b      	b.n	80165b2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	08db      	lsrs	r3, r3, #3
 801651e:	001a      	movs	r2, r3
 8016520:	2301      	movs	r3, #1
 8016522:	4013      	ands	r3, r2
 8016524:	d00c      	beq.n	8016540 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	08db      	lsrs	r3, r3, #3
 801652a:	001a      	movs	r2, r3
 801652c:	2301      	movs	r3, #1
 801652e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016530:	d006      	beq.n	8016540 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8016532:	693a      	ldr	r2, [r7, #16]
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	0011      	movs	r1, r2
 8016538:	0018      	movs	r0, r3
 801653a:	f000 fbdb 	bl	8016cf4 <I2C_ITAddrCplt>
 801653e:	e039      	b.n	80165b4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	085b      	lsrs	r3, r3, #1
 8016544:	001a      	movs	r2, r3
 8016546:	2301      	movs	r3, #1
 8016548:	4013      	ands	r3, r2
 801654a:	d033      	beq.n	80165b4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	085b      	lsrs	r3, r3, #1
 8016550:	001a      	movs	r2, r3
 8016552:	2301      	movs	r3, #1
 8016554:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016556:	d02d      	beq.n	80165b4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801655c:	b29b      	uxth	r3, r3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d018      	beq.n	8016594 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016566:	781a      	ldrb	r2, [r3, #0]
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016572:	1c5a      	adds	r2, r3, #1
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801657c:	b29b      	uxth	r3, r3
 801657e:	3b01      	subs	r3, #1
 8016580:	b29a      	uxth	r2, r3
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801658a:	3b01      	subs	r3, #1
 801658c:	b29a      	uxth	r2, r3
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016592:	e00f      	b.n	80165b4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8016594:	697a      	ldr	r2, [r7, #20]
 8016596:	2380      	movs	r3, #128	@ 0x80
 8016598:	045b      	lsls	r3, r3, #17
 801659a:	429a      	cmp	r2, r3
 801659c:	d002      	beq.n	80165a4 <I2C_Slave_ISR_IT+0x200>
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d107      	bne.n	80165b4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	0018      	movs	r0, r3
 80165a8:	f000 fc8a 	bl	8016ec0 <I2C_ITSlaveSeqCplt>
 80165ac:	e002      	b.n	80165b4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80165ae:	46c0      	nop			@ (mov r8, r8)
 80165b0:	e000      	b.n	80165b4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80165b2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2240      	movs	r2, #64	@ 0x40
 80165b8:	2100      	movs	r1, #0
 80165ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80165bc:	2300      	movs	r3, #0
}
 80165be:	0018      	movs	r0, r3
 80165c0:	46bd      	mov	sp, r7
 80165c2:	b006      	add	sp, #24
 80165c4:	bd80      	pop	{r7, pc}
 80165c6:	46c0      	nop			@ (mov r8, r8)
 80165c8:	ffff0000 	.word	0xffff0000

080165cc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80165cc:	b590      	push	{r4, r7, lr}
 80165ce:	b089      	sub	sp, #36	@ 0x24
 80165d0:	af02      	add	r7, sp, #8
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2240      	movs	r2, #64	@ 0x40
 80165dc:	5c9b      	ldrb	r3, [r3, r2]
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d101      	bne.n	80165e6 <I2C_Master_ISR_DMA+0x1a>
 80165e2:	2302      	movs	r3, #2
 80165e4:	e0f7      	b.n	80167d6 <I2C_Master_ISR_DMA+0x20a>
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2240      	movs	r2, #64	@ 0x40
 80165ea:	2101      	movs	r1, #1
 80165ec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	091b      	lsrs	r3, r3, #4
 80165f2:	001a      	movs	r2, r3
 80165f4:	2301      	movs	r3, #1
 80165f6:	4013      	ands	r3, r2
 80165f8:	d019      	beq.n	801662e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	091b      	lsrs	r3, r3, #4
 80165fe:	001a      	movs	r2, r3
 8016600:	2301      	movs	r3, #1
 8016602:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016604:	d013      	beq.n	801662e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2210      	movs	r2, #16
 801660c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016612:	2204      	movs	r2, #4
 8016614:	431a      	orrs	r2, r3
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2120      	movs	r1, #32
 801661e:	0018      	movs	r0, r3
 8016620:	f001 fbb6 	bl	8017d90 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	0018      	movs	r0, r3
 8016628:	f001 f82b 	bl	8017682 <I2C_Flush_TXDR>
 801662c:	e0ce      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	09db      	lsrs	r3, r3, #7
 8016632:	001a      	movs	r2, r3
 8016634:	2301      	movs	r3, #1
 8016636:	4013      	ands	r3, r2
 8016638:	d100      	bne.n	801663c <I2C_Master_ISR_DMA+0x70>
 801663a:	e07e      	b.n	801673a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	099b      	lsrs	r3, r3, #6
 8016640:	001a      	movs	r2, r3
 8016642:	2301      	movs	r3, #1
 8016644:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016646:	d100      	bne.n	801664a <I2C_Master_ISR_DMA+0x7e>
 8016648:	e077      	b.n	801673a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2140      	movs	r1, #64	@ 0x40
 8016656:	438a      	bics	r2, r1
 8016658:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801665e:	b29b      	uxth	r3, r3
 8016660:	2b00      	cmp	r3, #0
 8016662:	d055      	beq.n	8016710 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	b29a      	uxth	r2, r3
 801666c:	2312      	movs	r3, #18
 801666e:	18fb      	adds	r3, r7, r3
 8016670:	0592      	lsls	r2, r2, #22
 8016672:	0d92      	lsrs	r2, r2, #22
 8016674:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801667a:	b29b      	uxth	r3, r3
 801667c:	2bff      	cmp	r3, #255	@ 0xff
 801667e:	d906      	bls.n	801668e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	22ff      	movs	r2, #255	@ 0xff
 8016684:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8016686:	2380      	movs	r3, #128	@ 0x80
 8016688:	045b      	lsls	r3, r3, #17
 801668a:	617b      	str	r3, [r7, #20]
 801668c:	e010      	b.n	80166b0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016692:	b29a      	uxth	r2, r3
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801669c:	4a50      	ldr	r2, [pc, #320]	@ (80167e0 <I2C_Master_ISR_DMA+0x214>)
 801669e:	4293      	cmp	r3, r2
 80166a0:	d003      	beq.n	80166aa <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a6:	617b      	str	r3, [r7, #20]
 80166a8:	e002      	b.n	80166b0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80166aa:	2380      	movs	r3, #128	@ 0x80
 80166ac:	049b      	lsls	r3, r3, #18
 80166ae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166b4:	b2da      	uxtb	r2, r3
 80166b6:	697c      	ldr	r4, [r7, #20]
 80166b8:	2312      	movs	r3, #18
 80166ba:	18fb      	adds	r3, r7, r3
 80166bc:	8819      	ldrh	r1, [r3, #0]
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	2300      	movs	r3, #0
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	0023      	movs	r3, r4
 80166c6:	f001 fb29 	bl	8017d1c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166ce:	b29a      	uxth	r2, r3
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166d4:	1ad3      	subs	r3, r2, r3
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2241      	movs	r2, #65	@ 0x41
 80166e0:	5c9b      	ldrb	r3, [r3, r2]
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	2b22      	cmp	r3, #34	@ 0x22
 80166e6:	d109      	bne.n	80166fc <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	681a      	ldr	r2, [r3, #0]
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	2180      	movs	r1, #128	@ 0x80
 80166f4:	0209      	lsls	r1, r1, #8
 80166f6:	430a      	orrs	r2, r1
 80166f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80166fa:	e067      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	681a      	ldr	r2, [r3, #0]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	2180      	movs	r1, #128	@ 0x80
 8016708:	01c9      	lsls	r1, r1, #7
 801670a:	430a      	orrs	r2, r1
 801670c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801670e:	e05d      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	685a      	ldr	r2, [r3, #4]
 8016716:	2380      	movs	r3, #128	@ 0x80
 8016718:	049b      	lsls	r3, r3, #18
 801671a:	401a      	ands	r2, r3
 801671c:	2380      	movs	r3, #128	@ 0x80
 801671e:	049b      	lsls	r3, r3, #18
 8016720:	429a      	cmp	r2, r3
 8016722:	d004      	beq.n	801672e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	0018      	movs	r0, r3
 8016728:	f000 fb88 	bl	8016e3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801672c:	e04e      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2140      	movs	r1, #64	@ 0x40
 8016732:	0018      	movs	r0, r3
 8016734:	f000 fe7a 	bl	801742c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016738:	e048      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	099b      	lsrs	r3, r3, #6
 801673e:	001a      	movs	r2, r3
 8016740:	2301      	movs	r3, #1
 8016742:	4013      	ands	r3, r2
 8016744:	d02e      	beq.n	80167a4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	099b      	lsrs	r3, r3, #6
 801674a:	001a      	movs	r2, r3
 801674c:	2301      	movs	r3, #1
 801674e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016750:	d028      	beq.n	80167a4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016756:	b29b      	uxth	r3, r3
 8016758:	2b00      	cmp	r3, #0
 801675a:	d11d      	bne.n	8016798 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	685a      	ldr	r2, [r3, #4]
 8016762:	2380      	movs	r3, #128	@ 0x80
 8016764:	049b      	lsls	r3, r3, #18
 8016766:	401a      	ands	r2, r3
 8016768:	2380      	movs	r3, #128	@ 0x80
 801676a:	049b      	lsls	r3, r3, #18
 801676c:	429a      	cmp	r2, r3
 801676e:	d02c      	beq.n	80167ca <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016774:	4a1a      	ldr	r2, [pc, #104]	@ (80167e0 <I2C_Master_ISR_DMA+0x214>)
 8016776:	4293      	cmp	r3, r2
 8016778:	d109      	bne.n	801678e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	685a      	ldr	r2, [r3, #4]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	2180      	movs	r1, #128	@ 0x80
 8016786:	01c9      	lsls	r1, r1, #7
 8016788:	430a      	orrs	r2, r1
 801678a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801678c:	e01d      	b.n	80167ca <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	0018      	movs	r0, r3
 8016792:	f000 fb53 	bl	8016e3c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8016796:	e018      	b.n	80167ca <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2140      	movs	r1, #64	@ 0x40
 801679c:	0018      	movs	r0, r3
 801679e:	f000 fe45 	bl	801742c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80167a2:	e012      	b.n	80167ca <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	095b      	lsrs	r3, r3, #5
 80167a8:	001a      	movs	r2, r3
 80167aa:	2301      	movs	r3, #1
 80167ac:	4013      	ands	r3, r2
 80167ae:	d00d      	beq.n	80167cc <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	095b      	lsrs	r3, r3, #5
 80167b4:	001a      	movs	r2, r3
 80167b6:	2301      	movs	r3, #1
 80167b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80167ba:	d007      	beq.n	80167cc <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	0011      	movs	r1, r2
 80167c2:	0018      	movs	r0, r3
 80167c4:	f000 fbe2 	bl	8016f8c <I2C_ITMasterCplt>
 80167c8:	e000      	b.n	80167cc <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80167ca:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	2240      	movs	r2, #64	@ 0x40
 80167d0:	2100      	movs	r1, #0
 80167d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80167d4:	2300      	movs	r3, #0
}
 80167d6:	0018      	movs	r0, r3
 80167d8:	46bd      	mov	sp, r7
 80167da:	b007      	add	sp, #28
 80167dc:	bd90      	pop	{r4, r7, pc}
 80167de:	46c0      	nop			@ (mov r8, r8)
 80167e0:	ffff0000 	.word	0xffff0000

080167e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80167e4:	b590      	push	{r4, r7, lr}
 80167e6:	b089      	sub	sp, #36	@ 0x24
 80167e8:	af02      	add	r7, sp, #8
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80167f0:	4b92      	ldr	r3, [pc, #584]	@ (8016a3c <I2C_Mem_ISR_DMA+0x258>)
 80167f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	2240      	movs	r2, #64	@ 0x40
 80167f8:	5c9b      	ldrb	r3, [r3, r2]
 80167fa:	2b01      	cmp	r3, #1
 80167fc:	d101      	bne.n	8016802 <I2C_Mem_ISR_DMA+0x1e>
 80167fe:	2302      	movs	r3, #2
 8016800:	e118      	b.n	8016a34 <I2C_Mem_ISR_DMA+0x250>
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2240      	movs	r2, #64	@ 0x40
 8016806:	2101      	movs	r1, #1
 8016808:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	091b      	lsrs	r3, r3, #4
 801680e:	001a      	movs	r2, r3
 8016810:	2301      	movs	r3, #1
 8016812:	4013      	ands	r3, r2
 8016814:	d019      	beq.n	801684a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	091b      	lsrs	r3, r3, #4
 801681a:	001a      	movs	r2, r3
 801681c:	2301      	movs	r3, #1
 801681e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016820:	d013      	beq.n	801684a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2210      	movs	r2, #16
 8016828:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801682e:	2204      	movs	r2, #4
 8016830:	431a      	orrs	r2, r3
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2120      	movs	r1, #32
 801683a:	0018      	movs	r0, r3
 801683c:	f001 faa8 	bl	8017d90 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	0018      	movs	r0, r3
 8016844:	f000 ff1d 	bl	8017682 <I2C_Flush_TXDR>
 8016848:	e0ef      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	085b      	lsrs	r3, r3, #1
 801684e:	001a      	movs	r2, r3
 8016850:	2301      	movs	r3, #1
 8016852:	4013      	ands	r3, r2
 8016854:	d00f      	beq.n	8016876 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	085b      	lsrs	r3, r3, #1
 801685a:	001a      	movs	r2, r3
 801685c:	2301      	movs	r3, #1
 801685e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016860:	d009      	beq.n	8016876 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	68fa      	ldr	r2, [r7, #12]
 8016868:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801686a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2201      	movs	r2, #1
 8016870:	4252      	negs	r2, r2
 8016872:	651a      	str	r2, [r3, #80]	@ 0x50
 8016874:	e0d9      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	09db      	lsrs	r3, r3, #7
 801687a:	001a      	movs	r2, r3
 801687c:	2301      	movs	r3, #1
 801687e:	4013      	ands	r3, r2
 8016880:	d060      	beq.n	8016944 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	099b      	lsrs	r3, r3, #6
 8016886:	001a      	movs	r2, r3
 8016888:	2301      	movs	r3, #1
 801688a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801688c:	d05a      	beq.n	8016944 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	2110      	movs	r1, #16
 8016892:	0018      	movs	r0, r3
 8016894:	f001 fa7c 	bl	8017d90 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801689c:	b29b      	uxth	r3, r3
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d04a      	beq.n	8016938 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	2bff      	cmp	r3, #255	@ 0xff
 80168aa:	d910      	bls.n	80168ce <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	22ff      	movs	r2, #255	@ 0xff
 80168b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168b6:	b299      	uxth	r1, r3
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168bc:	b2da      	uxtb	r2, r3
 80168be:	2380      	movs	r3, #128	@ 0x80
 80168c0:	045b      	lsls	r3, r3, #17
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	2400      	movs	r4, #0
 80168c6:	9400      	str	r4, [sp, #0]
 80168c8:	f001 fa28 	bl	8017d1c <I2C_TransferConfig>
 80168cc:	e011      	b.n	80168f2 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168d2:	b29a      	uxth	r2, r3
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168dc:	b299      	uxth	r1, r3
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168e2:	b2da      	uxtb	r2, r3
 80168e4:	2380      	movs	r3, #128	@ 0x80
 80168e6:	049b      	lsls	r3, r3, #18
 80168e8:	68f8      	ldr	r0, [r7, #12]
 80168ea:	2400      	movs	r4, #0
 80168ec:	9400      	str	r4, [sp, #0]
 80168ee:	f001 fa15 	bl	8017d1c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168f6:	b29a      	uxth	r2, r3
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168fc:	1ad3      	subs	r3, r2, r3
 80168fe:	b29a      	uxth	r2, r3
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	2241      	movs	r2, #65	@ 0x41
 8016908:	5c9b      	ldrb	r3, [r3, r2]
 801690a:	b2db      	uxtb	r3, r3
 801690c:	2b22      	cmp	r3, #34	@ 0x22
 801690e:	d109      	bne.n	8016924 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	681a      	ldr	r2, [r3, #0]
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2180      	movs	r1, #128	@ 0x80
 801691c:	0209      	lsls	r1, r1, #8
 801691e:	430a      	orrs	r2, r1
 8016920:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016922:	e082      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	2180      	movs	r1, #128	@ 0x80
 8016930:	01c9      	lsls	r1, r1, #7
 8016932:	430a      	orrs	r2, r1
 8016934:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016936:	e078      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2140      	movs	r1, #64	@ 0x40
 801693c:	0018      	movs	r0, r3
 801693e:	f000 fd75 	bl	801742c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016942:	e072      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	099b      	lsrs	r3, r3, #6
 8016948:	001a      	movs	r2, r3
 801694a:	2301      	movs	r3, #1
 801694c:	4013      	ands	r3, r2
 801694e:	d05a      	beq.n	8016a06 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	099b      	lsrs	r3, r3, #6
 8016954:	001a      	movs	r2, r3
 8016956:	2301      	movs	r3, #1
 8016958:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801695a:	d054      	beq.n	8016a06 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2241      	movs	r2, #65	@ 0x41
 8016960:	5c9b      	ldrb	r3, [r3, r2]
 8016962:	b2db      	uxtb	r3, r3
 8016964:	2b22      	cmp	r3, #34	@ 0x22
 8016966:	d101      	bne.n	801696c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8016968:	4b35      	ldr	r3, [pc, #212]	@ (8016a40 <I2C_Mem_ISR_DMA+0x25c>)
 801696a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016970:	b29b      	uxth	r3, r3
 8016972:	2bff      	cmp	r3, #255	@ 0xff
 8016974:	d911      	bls.n	801699a <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	22ff      	movs	r2, #255	@ 0xff
 801697a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016980:	b299      	uxth	r1, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016986:	b2da      	uxtb	r2, r3
 8016988:	2380      	movs	r3, #128	@ 0x80
 801698a:	045c      	lsls	r4, r3, #17
 801698c:	68f8      	ldr	r0, [r7, #12]
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	9300      	str	r3, [sp, #0]
 8016992:	0023      	movs	r3, r4
 8016994:	f001 f9c2 	bl	8017d1c <I2C_TransferConfig>
 8016998:	e012      	b.n	80169c0 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801699e:	b29a      	uxth	r2, r3
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169a8:	b299      	uxth	r1, r3
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169ae:	b2da      	uxtb	r2, r3
 80169b0:	2380      	movs	r3, #128	@ 0x80
 80169b2:	049c      	lsls	r4, r3, #18
 80169b4:	68f8      	ldr	r0, [r7, #12]
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	9300      	str	r3, [sp, #0]
 80169ba:	0023      	movs	r3, r4
 80169bc:	f001 f9ae 	bl	8017d1c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169c4:	b29a      	uxth	r2, r3
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169ca:	1ad3      	subs	r3, r2, r3
 80169cc:	b29a      	uxth	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	2241      	movs	r2, #65	@ 0x41
 80169d6:	5c9b      	ldrb	r3, [r3, r2]
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	2b22      	cmp	r3, #34	@ 0x22
 80169dc:	d109      	bne.n	80169f2 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	2180      	movs	r1, #128	@ 0x80
 80169ea:	0209      	lsls	r1, r1, #8
 80169ec:	430a      	orrs	r2, r1
 80169ee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80169f0:	e01b      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	681a      	ldr	r2, [r3, #0]
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	2180      	movs	r1, #128	@ 0x80
 80169fe:	01c9      	lsls	r1, r1, #7
 8016a00:	430a      	orrs	r2, r1
 8016a02:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016a04:	e011      	b.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	095b      	lsrs	r3, r3, #5
 8016a0a:	001a      	movs	r2, r3
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	4013      	ands	r3, r2
 8016a10:	d00b      	beq.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	095b      	lsrs	r3, r3, #5
 8016a16:	001a      	movs	r2, r3
 8016a18:	2301      	movs	r3, #1
 8016a1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016a1c:	d005      	beq.n	8016a2a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016a1e:	68ba      	ldr	r2, [r7, #8]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	0011      	movs	r1, r2
 8016a24:	0018      	movs	r0, r3
 8016a26:	f000 fab1 	bl	8016f8c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2240      	movs	r2, #64	@ 0x40
 8016a2e:	2100      	movs	r1, #0
 8016a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a32:	2300      	movs	r3, #0
}
 8016a34:	0018      	movs	r0, r3
 8016a36:	46bd      	mov	sp, r7
 8016a38:	b007      	add	sp, #28
 8016a3a:	bd90      	pop	{r4, r7, pc}
 8016a3c:	80002000 	.word	0x80002000
 8016a40:	80002400 	.word	0x80002400

08016a44 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b088      	sub	sp, #32
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a54:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8016a56:	2300      	movs	r3, #0
 8016a58:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2240      	movs	r2, #64	@ 0x40
 8016a5e:	5c9b      	ldrb	r3, [r3, r2]
 8016a60:	2b01      	cmp	r3, #1
 8016a62:	d101      	bne.n	8016a68 <I2C_Slave_ISR_DMA+0x24>
 8016a64:	2302      	movs	r3, #2
 8016a66:	e0dd      	b.n	8016c24 <I2C_Slave_ISR_DMA+0x1e0>
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2240      	movs	r2, #64	@ 0x40
 8016a6c:	2101      	movs	r1, #1
 8016a6e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	095b      	lsrs	r3, r3, #5
 8016a74:	001a      	movs	r2, r3
 8016a76:	2301      	movs	r3, #1
 8016a78:	4013      	ands	r3, r2
 8016a7a:	d00b      	beq.n	8016a94 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	095b      	lsrs	r3, r3, #5
 8016a80:	001a      	movs	r2, r3
 8016a82:	2301      	movs	r3, #1
 8016a84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016a86:	d005      	beq.n	8016a94 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8016a88:	68ba      	ldr	r2, [r7, #8]
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	0011      	movs	r1, r2
 8016a8e:	0018      	movs	r0, r3
 8016a90:	f000 fb4e 	bl	8017130 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	091b      	lsrs	r3, r3, #4
 8016a98:	001a      	movs	r2, r3
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	4013      	ands	r3, r2
 8016a9e:	d100      	bne.n	8016aa2 <I2C_Slave_ISR_DMA+0x5e>
 8016aa0:	e0a9      	b.n	8016bf6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	091b      	lsrs	r3, r3, #4
 8016aa6:	001a      	movs	r2, r3
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016aac:	d100      	bne.n	8016ab0 <I2C_Slave_ISR_DMA+0x6c>
 8016aae:	e0a2      	b.n	8016bf6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	0b9b      	lsrs	r3, r3, #14
 8016ab4:	001a      	movs	r2, r3
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	4013      	ands	r3, r2
 8016aba:	d106      	bne.n	8016aca <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	0bdb      	lsrs	r3, r3, #15
 8016ac0:	001a      	movs	r2, r3
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016ac6:	d100      	bne.n	8016aca <I2C_Slave_ISR_DMA+0x86>
 8016ac8:	e08e      	b.n	8016be8 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00d      	beq.n	8016aee <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	0bdb      	lsrs	r3, r3, #15
 8016ad6:	001a      	movs	r2, r3
 8016ad8:	2301      	movs	r3, #1
 8016ada:	4013      	ands	r3, r2
 8016adc:	d007      	beq.n	8016aee <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	685b      	ldr	r3, [r3, #4]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d101      	bne.n	8016aee <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8016aea:	2301      	movs	r3, #1
 8016aec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00d      	beq.n	8016b12 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	0b9b      	lsrs	r3, r3, #14
 8016afa:	001a      	movs	r2, r3
 8016afc:	2301      	movs	r3, #1
 8016afe:	4013      	ands	r3, r2
 8016b00:	d007      	beq.n	8016b12 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d101      	bne.n	8016b12 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	2b01      	cmp	r3, #1
 8016b16:	d12d      	bne.n	8016b74 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	2241      	movs	r2, #65	@ 0x41
 8016b1c:	5c9b      	ldrb	r3, [r3, r2]
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b28      	cmp	r3, #40	@ 0x28
 8016b22:	d10b      	bne.n	8016b3c <I2C_Slave_ISR_DMA+0xf8>
 8016b24:	69ba      	ldr	r2, [r7, #24]
 8016b26:	2380      	movs	r3, #128	@ 0x80
 8016b28:	049b      	lsls	r3, r3, #18
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	d106      	bne.n	8016b3c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016b2e:	68ba      	ldr	r2, [r7, #8]
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	0011      	movs	r1, r2
 8016b34:	0018      	movs	r0, r3
 8016b36:	f000 fc1f 	bl	8017378 <I2C_ITListenCplt>
 8016b3a:	e054      	b.n	8016be6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2241      	movs	r2, #65	@ 0x41
 8016b40:	5c9b      	ldrb	r3, [r3, r2]
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	2b29      	cmp	r3, #41	@ 0x29
 8016b46:	d110      	bne.n	8016b6a <I2C_Slave_ISR_DMA+0x126>
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	4a38      	ldr	r2, [pc, #224]	@ (8016c2c <I2C_Slave_ISR_DMA+0x1e8>)
 8016b4c:	4293      	cmp	r3, r2
 8016b4e:	d00c      	beq.n	8016b6a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2210      	movs	r2, #16
 8016b56:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	0018      	movs	r0, r3
 8016b5c:	f000 fd91 	bl	8017682 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	0018      	movs	r0, r3
 8016b64:	f000 f9ac 	bl	8016ec0 <I2C_ITSlaveSeqCplt>
 8016b68:	e03d      	b.n	8016be6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2210      	movs	r2, #16
 8016b70:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8016b72:	e03e      	b.n	8016bf2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	2210      	movs	r2, #16
 8016b7a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b80:	2204      	movs	r2, #4
 8016b82:	431a      	orrs	r2, r3
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016b88:	2317      	movs	r3, #23
 8016b8a:	18fb      	adds	r3, r7, r3
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	2141      	movs	r1, #65	@ 0x41
 8016b90:	5c52      	ldrb	r2, [r2, r1]
 8016b92:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d004      	beq.n	8016ba4 <I2C_Slave_ISR_DMA+0x160>
 8016b9a:	69ba      	ldr	r2, [r7, #24]
 8016b9c:	2380      	movs	r3, #128	@ 0x80
 8016b9e:	045b      	lsls	r3, r3, #17
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d126      	bne.n	8016bf2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016ba4:	2217      	movs	r2, #23
 8016ba6:	18bb      	adds	r3, r7, r2
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	2b21      	cmp	r3, #33	@ 0x21
 8016bac:	d003      	beq.n	8016bb6 <I2C_Slave_ISR_DMA+0x172>
 8016bae:	18bb      	adds	r3, r7, r2
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	2b29      	cmp	r3, #41	@ 0x29
 8016bb4:	d103      	bne.n	8016bbe <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2221      	movs	r2, #33	@ 0x21
 8016bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8016bbc:	e00b      	b.n	8016bd6 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016bbe:	2217      	movs	r2, #23
 8016bc0:	18bb      	adds	r3, r7, r2
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	2b22      	cmp	r3, #34	@ 0x22
 8016bc6:	d003      	beq.n	8016bd0 <I2C_Slave_ISR_DMA+0x18c>
 8016bc8:	18bb      	adds	r3, r7, r2
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bce:	d102      	bne.n	8016bd6 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2222      	movs	r2, #34	@ 0x22
 8016bd4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	0011      	movs	r1, r2
 8016bde:	0018      	movs	r0, r3
 8016be0:	f000 fc24 	bl	801742c <I2C_ITError>
      if (treatdmanack == 1U)
 8016be4:	e005      	b.n	8016bf2 <I2C_Slave_ISR_DMA+0x1ae>
 8016be6:	e004      	b.n	8016bf2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2210      	movs	r2, #16
 8016bee:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016bf0:	e013      	b.n	8016c1a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8016bf2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016bf4:	e011      	b.n	8016c1a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	08db      	lsrs	r3, r3, #3
 8016bfa:	001a      	movs	r2, r3
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	4013      	ands	r3, r2
 8016c00:	d00b      	beq.n	8016c1a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	08db      	lsrs	r3, r3, #3
 8016c06:	001a      	movs	r2, r3
 8016c08:	2301      	movs	r3, #1
 8016c0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016c0c:	d005      	beq.n	8016c1a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016c0e:	68ba      	ldr	r2, [r7, #8]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	0011      	movs	r1, r2
 8016c14:	0018      	movs	r0, r3
 8016c16:	f000 f86d 	bl	8016cf4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	2240      	movs	r2, #64	@ 0x40
 8016c1e:	2100      	movs	r1, #0
 8016c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	0018      	movs	r0, r3
 8016c26:	46bd      	mov	sp, r7
 8016c28:	b008      	add	sp, #32
 8016c2a:	bd80      	pop	{r7, pc}
 8016c2c:	ffff0000 	.word	0xffff0000

08016c30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016c30:	b5b0      	push	{r4, r5, r7, lr}
 8016c32:	b086      	sub	sp, #24
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	000c      	movs	r4, r1
 8016c3a:	0010      	movs	r0, r2
 8016c3c:	0019      	movs	r1, r3
 8016c3e:	250a      	movs	r5, #10
 8016c40:	197b      	adds	r3, r7, r5
 8016c42:	1c22      	adds	r2, r4, #0
 8016c44:	801a      	strh	r2, [r3, #0]
 8016c46:	2308      	movs	r3, #8
 8016c48:	18fb      	adds	r3, r7, r3
 8016c4a:	1c02      	adds	r2, r0, #0
 8016c4c:	801a      	strh	r2, [r3, #0]
 8016c4e:	1dbb      	adds	r3, r7, #6
 8016c50:	1c0a      	adds	r2, r1, #0
 8016c52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016c54:	1dbb      	adds	r3, r7, #6
 8016c56:	881b      	ldrh	r3, [r3, #0]
 8016c58:	b2da      	uxtb	r2, r3
 8016c5a:	197b      	adds	r3, r7, r5
 8016c5c:	8819      	ldrh	r1, [r3, #0]
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	4b23      	ldr	r3, [pc, #140]	@ (8016cf0 <I2C_RequestMemoryRead+0xc0>)
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	2300      	movs	r3, #0
 8016c66:	f001 f859 	bl	8017d1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c6c:	6a39      	ldr	r1, [r7, #32]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	0018      	movs	r0, r3
 8016c72:	f000 fe4f 	bl	8017914 <I2C_WaitOnTXISFlagUntilTimeout>
 8016c76:	1e03      	subs	r3, r0, #0
 8016c78:	d001      	beq.n	8016c7e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	e033      	b.n	8016ce6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016c7e:	1dbb      	adds	r3, r7, #6
 8016c80:	881b      	ldrh	r3, [r3, #0]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d107      	bne.n	8016c96 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016c86:	2308      	movs	r3, #8
 8016c88:	18fb      	adds	r3, r7, r3
 8016c8a:	881b      	ldrh	r3, [r3, #0]
 8016c8c:	b2da      	uxtb	r2, r3
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	629a      	str	r2, [r3, #40]	@ 0x28
 8016c94:	e019      	b.n	8016cca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016c96:	2308      	movs	r3, #8
 8016c98:	18fb      	adds	r3, r7, r3
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	0a1b      	lsrs	r3, r3, #8
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	b2da      	uxtb	r2, r3
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016caa:	6a39      	ldr	r1, [r7, #32]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	0018      	movs	r0, r3
 8016cb0:	f000 fe30 	bl	8017914 <I2C_WaitOnTXISFlagUntilTimeout>
 8016cb4:	1e03      	subs	r3, r0, #0
 8016cb6:	d001      	beq.n	8016cbc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016cb8:	2301      	movs	r3, #1
 8016cba:	e014      	b.n	8016ce6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016cbc:	2308      	movs	r3, #8
 8016cbe:	18fb      	adds	r3, r7, r3
 8016cc0:	881b      	ldrh	r3, [r3, #0]
 8016cc2:	b2da      	uxtb	r2, r3
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016cca:	6a3a      	ldr	r2, [r7, #32]
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	0013      	movs	r3, r2
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	2140      	movs	r1, #64	@ 0x40
 8016cd8:	f000 fdce 	bl	8017878 <I2C_WaitOnFlagUntilTimeout>
 8016cdc:	1e03      	subs	r3, r0, #0
 8016cde:	d001      	beq.n	8016ce4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e000      	b.n	8016ce6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8016ce4:	2300      	movs	r3, #0
}
 8016ce6:	0018      	movs	r0, r3
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	b004      	add	sp, #16
 8016cec:	bdb0      	pop	{r4, r5, r7, pc}
 8016cee:	46c0      	nop			@ (mov r8, r8)
 8016cf0:	80002000 	.word	0x80002000

08016cf4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016cf4:	b5b0      	push	{r4, r5, r7, lr}
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2241      	movs	r2, #65	@ 0x41
 8016d02:	5c9b      	ldrb	r3, [r3, r2]
 8016d04:	b2db      	uxtb	r3, r3
 8016d06:	001a      	movs	r2, r3
 8016d08:	2328      	movs	r3, #40	@ 0x28
 8016d0a:	4013      	ands	r3, r2
 8016d0c:	2b28      	cmp	r3, #40	@ 0x28
 8016d0e:	d000      	beq.n	8016d12 <I2C_ITAddrCplt+0x1e>
 8016d10:	e088      	b.n	8016e24 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	699b      	ldr	r3, [r3, #24]
 8016d18:	0c1b      	lsrs	r3, r3, #16
 8016d1a:	b2da      	uxtb	r2, r3
 8016d1c:	250f      	movs	r5, #15
 8016d1e:	197b      	adds	r3, r7, r5
 8016d20:	2101      	movs	r1, #1
 8016d22:	400a      	ands	r2, r1
 8016d24:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	699b      	ldr	r3, [r3, #24]
 8016d2c:	0c1b      	lsrs	r3, r3, #16
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	200c      	movs	r0, #12
 8016d32:	183b      	adds	r3, r7, r0
 8016d34:	21fe      	movs	r1, #254	@ 0xfe
 8016d36:	400a      	ands	r2, r1
 8016d38:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	689b      	ldr	r3, [r3, #8]
 8016d40:	b29a      	uxth	r2, r3
 8016d42:	240a      	movs	r4, #10
 8016d44:	193b      	adds	r3, r7, r4
 8016d46:	0592      	lsls	r2, r2, #22
 8016d48:	0d92      	lsrs	r2, r2, #22
 8016d4a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	68db      	ldr	r3, [r3, #12]
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	2308      	movs	r3, #8
 8016d56:	18fb      	adds	r3, r7, r3
 8016d58:	21fe      	movs	r1, #254	@ 0xfe
 8016d5a:	400a      	ands	r2, r1
 8016d5c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	68db      	ldr	r3, [r3, #12]
 8016d62:	2b02      	cmp	r3, #2
 8016d64:	d148      	bne.n	8016df8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8016d66:	0021      	movs	r1, r4
 8016d68:	187b      	adds	r3, r7, r1
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	09db      	lsrs	r3, r3, #7
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	183b      	adds	r3, r7, r0
 8016d72:	881b      	ldrh	r3, [r3, #0]
 8016d74:	4053      	eors	r3, r2
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	001a      	movs	r2, r3
 8016d7a:	2306      	movs	r3, #6
 8016d7c:	4013      	ands	r3, r2
 8016d7e:	d120      	bne.n	8016dc2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8016d80:	183b      	adds	r3, r7, r0
 8016d82:	187a      	adds	r2, r7, r1
 8016d84:	8812      	ldrh	r2, [r2, #0]
 8016d86:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d8c:	1c5a      	adds	r2, r3, #1
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d96:	2b02      	cmp	r3, #2
 8016d98:	d14c      	bne.n	8016e34 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2208      	movs	r2, #8
 8016da6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	2240      	movs	r2, #64	@ 0x40
 8016dac:	2100      	movs	r1, #0
 8016dae:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016db0:	183b      	adds	r3, r7, r0
 8016db2:	881a      	ldrh	r2, [r3, #0]
 8016db4:	197b      	adds	r3, r7, r5
 8016db6:	7819      	ldrb	r1, [r3, #0]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	0018      	movs	r0, r3
 8016dbc:	f7ff f978 	bl	80160b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016dc0:	e038      	b.n	8016e34 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8016dc2:	240c      	movs	r4, #12
 8016dc4:	193b      	adds	r3, r7, r4
 8016dc6:	2208      	movs	r2, #8
 8016dc8:	18ba      	adds	r2, r7, r2
 8016dca:	8812      	ldrh	r2, [r2, #0]
 8016dcc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016dce:	2380      	movs	r3, #128	@ 0x80
 8016dd0:	021a      	lsls	r2, r3, #8
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	0011      	movs	r1, r2
 8016dd6:	0018      	movs	r0, r3
 8016dd8:	f001 f868 	bl	8017eac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2240      	movs	r2, #64	@ 0x40
 8016de0:	2100      	movs	r1, #0
 8016de2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016de4:	193b      	adds	r3, r7, r4
 8016de6:	881a      	ldrh	r2, [r3, #0]
 8016de8:	230f      	movs	r3, #15
 8016dea:	18fb      	adds	r3, r7, r3
 8016dec:	7819      	ldrb	r1, [r3, #0]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	0018      	movs	r0, r3
 8016df2:	f7ff f95d 	bl	80160b0 <HAL_I2C_AddrCallback>
}
 8016df6:	e01d      	b.n	8016e34 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016df8:	2380      	movs	r3, #128	@ 0x80
 8016dfa:	021a      	lsls	r2, r3, #8
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	0011      	movs	r1, r2
 8016e00:	0018      	movs	r0, r3
 8016e02:	f001 f853 	bl	8017eac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2240      	movs	r2, #64	@ 0x40
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016e0e:	230c      	movs	r3, #12
 8016e10:	18fb      	adds	r3, r7, r3
 8016e12:	881a      	ldrh	r2, [r3, #0]
 8016e14:	230f      	movs	r3, #15
 8016e16:	18fb      	adds	r3, r7, r3
 8016e18:	7819      	ldrb	r1, [r3, #0]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	0018      	movs	r0, r3
 8016e1e:	f7ff f947 	bl	80160b0 <HAL_I2C_AddrCallback>
}
 8016e22:	e007      	b.n	8016e34 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	2208      	movs	r2, #8
 8016e2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2240      	movs	r2, #64	@ 0x40
 8016e30:	2100      	movs	r1, #0
 8016e32:	5499      	strb	r1, [r3, r2]
}
 8016e34:	46c0      	nop			@ (mov r8, r8)
 8016e36:	46bd      	mov	sp, r7
 8016e38:	b004      	add	sp, #16
 8016e3a:	bdb0      	pop	{r4, r5, r7, pc}

08016e3c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2242      	movs	r2, #66	@ 0x42
 8016e48:	2100      	movs	r1, #0
 8016e4a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2241      	movs	r2, #65	@ 0x41
 8016e50:	5c9b      	ldrb	r3, [r3, r2]
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	2b21      	cmp	r3, #33	@ 0x21
 8016e56:	d117      	bne.n	8016e88 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2241      	movs	r2, #65	@ 0x41
 8016e5c:	2120      	movs	r1, #32
 8016e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2211      	movs	r2, #17
 8016e64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2200      	movs	r2, #0
 8016e6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2101      	movs	r1, #1
 8016e70:	0018      	movs	r0, r3
 8016e72:	f001 f81b 	bl	8017eac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2240      	movs	r2, #64	@ 0x40
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	0018      	movs	r0, r3
 8016e82:	f7ff f8f5 	bl	8016070 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016e86:	e016      	b.n	8016eb6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2241      	movs	r2, #65	@ 0x41
 8016e8c:	2120      	movs	r1, #32
 8016e8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2212      	movs	r2, #18
 8016e94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2102      	movs	r1, #2
 8016ea0:	0018      	movs	r0, r3
 8016ea2:	f001 f803 	bl	8017eac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2240      	movs	r2, #64	@ 0x40
 8016eaa:	2100      	movs	r1, #0
 8016eac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	0018      	movs	r0, r3
 8016eb2:	f7ff f8e5 	bl	8016080 <HAL_I2C_MasterRxCpltCallback>
}
 8016eb6:	46c0      	nop			@ (mov r8, r8)
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	b002      	add	sp, #8
 8016ebc:	bd80      	pop	{r7, pc}
	...

08016ec0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2242      	movs	r2, #66	@ 0x42
 8016ed4:	2100      	movs	r1, #0
 8016ed6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	0b9b      	lsrs	r3, r3, #14
 8016edc:	001a      	movs	r2, r3
 8016ede:	2301      	movs	r3, #1
 8016ee0:	4013      	ands	r3, r2
 8016ee2:	d008      	beq.n	8016ef6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	681a      	ldr	r2, [r3, #0]
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	4925      	ldr	r1, [pc, #148]	@ (8016f84 <I2C_ITSlaveSeqCplt+0xc4>)
 8016ef0:	400a      	ands	r2, r1
 8016ef2:	601a      	str	r2, [r3, #0]
 8016ef4:	e00d      	b.n	8016f12 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	0bdb      	lsrs	r3, r3, #15
 8016efa:	001a      	movs	r2, r3
 8016efc:	2301      	movs	r3, #1
 8016efe:	4013      	ands	r3, r2
 8016f00:	d007      	beq.n	8016f12 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	681a      	ldr	r2, [r3, #0]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	491e      	ldr	r1, [pc, #120]	@ (8016f88 <I2C_ITSlaveSeqCplt+0xc8>)
 8016f0e:	400a      	ands	r2, r1
 8016f10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2241      	movs	r2, #65	@ 0x41
 8016f16:	5c9b      	ldrb	r3, [r3, r2]
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	2b29      	cmp	r3, #41	@ 0x29
 8016f1c:	d114      	bne.n	8016f48 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2241      	movs	r2, #65	@ 0x41
 8016f22:	2128      	movs	r1, #40	@ 0x28
 8016f24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2221      	movs	r2, #33	@ 0x21
 8016f2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2101      	movs	r1, #1
 8016f30:	0018      	movs	r0, r3
 8016f32:	f000 ffbb 	bl	8017eac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2240      	movs	r2, #64	@ 0x40
 8016f3a:	2100      	movs	r1, #0
 8016f3c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	0018      	movs	r0, r3
 8016f42:	f7ff f8a5 	bl	8016090 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016f46:	e019      	b.n	8016f7c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2241      	movs	r2, #65	@ 0x41
 8016f4c:	5c9b      	ldrb	r3, [r3, r2]
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f52:	d113      	bne.n	8016f7c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2241      	movs	r2, #65	@ 0x41
 8016f58:	2128      	movs	r1, #40	@ 0x28
 8016f5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2222      	movs	r2, #34	@ 0x22
 8016f60:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2102      	movs	r1, #2
 8016f66:	0018      	movs	r0, r3
 8016f68:	f000 ffa0 	bl	8017eac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2240      	movs	r2, #64	@ 0x40
 8016f70:	2100      	movs	r1, #0
 8016f72:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	0018      	movs	r0, r3
 8016f78:	f7ff f892 	bl	80160a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8016f7c:	46c0      	nop			@ (mov r8, r8)
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	b004      	add	sp, #16
 8016f82:	bd80      	pop	{r7, pc}
 8016f84:	ffffbfff 	.word	0xffffbfff
 8016f88:	ffff7fff 	.word	0xffff7fff

08016f8c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b086      	sub	sp, #24
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
 8016f94:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	2220      	movs	r2, #32
 8016fa0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2241      	movs	r2, #65	@ 0x41
 8016fa6:	5c9b      	ldrb	r3, [r3, r2]
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	2b21      	cmp	r3, #33	@ 0x21
 8016fac:	d108      	bne.n	8016fc0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2101      	movs	r1, #1
 8016fb2:	0018      	movs	r0, r3
 8016fb4:	f000 ff7a 	bl	8017eac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2211      	movs	r2, #17
 8016fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8016fbe:	e00d      	b.n	8016fdc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2241      	movs	r2, #65	@ 0x41
 8016fc4:	5c9b      	ldrb	r3, [r3, r2]
 8016fc6:	b2db      	uxtb	r3, r3
 8016fc8:	2b22      	cmp	r3, #34	@ 0x22
 8016fca:	d107      	bne.n	8016fdc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2102      	movs	r1, #2
 8016fd0:	0018      	movs	r0, r3
 8016fd2:	f000 ff6b 	bl	8017eac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2212      	movs	r2, #18
 8016fda:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	685a      	ldr	r2, [r3, #4]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	4950      	ldr	r1, [pc, #320]	@ (8017128 <I2C_ITMasterCplt+0x19c>)
 8016fe8:	400a      	ands	r2, r1
 8016fea:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	4a4d      	ldr	r2, [pc, #308]	@ (801712c <I2C_ITMasterCplt+0x1a0>)
 8016ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	091b      	lsrs	r3, r3, #4
 8016ffc:	001a      	movs	r2, r3
 8016ffe:	2301      	movs	r3, #1
 8017000:	4013      	ands	r3, r2
 8017002:	d009      	beq.n	8017018 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2210      	movs	r2, #16
 801700a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017010:	2204      	movs	r2, #4
 8017012:	431a      	orrs	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2241      	movs	r2, #65	@ 0x41
 801701c:	5c9b      	ldrb	r3, [r3, r2]
 801701e:	b2db      	uxtb	r3, r3
 8017020:	2b60      	cmp	r3, #96	@ 0x60
 8017022:	d10b      	bne.n	801703c <I2C_ITMasterCplt+0xb0>
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	089b      	lsrs	r3, r3, #2
 8017028:	001a      	movs	r2, r3
 801702a:	2301      	movs	r3, #1
 801702c:	4013      	ands	r3, r2
 801702e:	d005      	beq.n	801703c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017036:	b2db      	uxtb	r3, r3
 8017038:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801703a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	0018      	movs	r0, r3
 8017040:	f000 fb1f 	bl	8017682 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017048:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2241      	movs	r2, #65	@ 0x41
 801704e:	5c9b      	ldrb	r3, [r3, r2]
 8017050:	b2db      	uxtb	r3, r3
 8017052:	2b60      	cmp	r3, #96	@ 0x60
 8017054:	d002      	beq.n	801705c <I2C_ITMasterCplt+0xd0>
 8017056:	693b      	ldr	r3, [r7, #16]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d007      	beq.n	801706c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	0011      	movs	r1, r2
 8017064:	0018      	movs	r0, r3
 8017066:	f000 f9e1 	bl	801742c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801706a:	e058      	b.n	801711e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2241      	movs	r2, #65	@ 0x41
 8017070:	5c9b      	ldrb	r3, [r3, r2]
 8017072:	b2db      	uxtb	r3, r3
 8017074:	2b21      	cmp	r3, #33	@ 0x21
 8017076:	d126      	bne.n	80170c6 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2241      	movs	r2, #65	@ 0x41
 801707c:	2120      	movs	r1, #32
 801707e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2200      	movs	r2, #0
 8017084:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2242      	movs	r2, #66	@ 0x42
 801708a:	5c9b      	ldrb	r3, [r3, r2]
 801708c:	b2db      	uxtb	r3, r3
 801708e:	2b40      	cmp	r3, #64	@ 0x40
 8017090:	d10c      	bne.n	80170ac <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2242      	movs	r2, #66	@ 0x42
 8017096:	2100      	movs	r1, #0
 8017098:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2240      	movs	r2, #64	@ 0x40
 801709e:	2100      	movs	r1, #0
 80170a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	0018      	movs	r0, r3
 80170a6:	f7ff f81b 	bl	80160e0 <HAL_I2C_MemTxCpltCallback>
}
 80170aa:	e038      	b.n	801711e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2242      	movs	r2, #66	@ 0x42
 80170b0:	2100      	movs	r1, #0
 80170b2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2240      	movs	r2, #64	@ 0x40
 80170b8:	2100      	movs	r1, #0
 80170ba:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	0018      	movs	r0, r3
 80170c0:	f7fe ffd6 	bl	8016070 <HAL_I2C_MasterTxCpltCallback>
}
 80170c4:	e02b      	b.n	801711e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	2241      	movs	r2, #65	@ 0x41
 80170ca:	5c9b      	ldrb	r3, [r3, r2]
 80170cc:	b2db      	uxtb	r3, r3
 80170ce:	2b22      	cmp	r3, #34	@ 0x22
 80170d0:	d125      	bne.n	801711e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2241      	movs	r2, #65	@ 0x41
 80170d6:	2120      	movs	r1, #32
 80170d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2200      	movs	r2, #0
 80170de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2242      	movs	r2, #66	@ 0x42
 80170e4:	5c9b      	ldrb	r3, [r3, r2]
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b40      	cmp	r3, #64	@ 0x40
 80170ea:	d10c      	bne.n	8017106 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2242      	movs	r2, #66	@ 0x42
 80170f0:	2100      	movs	r1, #0
 80170f2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2240      	movs	r2, #64	@ 0x40
 80170f8:	2100      	movs	r1, #0
 80170fa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	0018      	movs	r0, r3
 8017100:	f7fe fff6 	bl	80160f0 <HAL_I2C_MemRxCpltCallback>
}
 8017104:	e00b      	b.n	801711e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2242      	movs	r2, #66	@ 0x42
 801710a:	2100      	movs	r1, #0
 801710c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2240      	movs	r2, #64	@ 0x40
 8017112:	2100      	movs	r1, #0
 8017114:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	0018      	movs	r0, r3
 801711a:	f7fe ffb1 	bl	8016080 <HAL_I2C_MasterRxCpltCallback>
}
 801711e:	46c0      	nop			@ (mov r8, r8)
 8017120:	46bd      	mov	sp, r7
 8017122:	b006      	add	sp, #24
 8017124:	bd80      	pop	{r7, pc}
 8017126:	46c0      	nop			@ (mov r8, r8)
 8017128:	fe00e800 	.word	0xfe00e800
 801712c:	ffff0000 	.word	0xffff0000

08017130 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b086      	sub	sp, #24
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017146:	200f      	movs	r0, #15
 8017148:	183b      	adds	r3, r7, r0
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	2141      	movs	r1, #65	@ 0x41
 801714e:	5c52      	ldrb	r2, [r2, r1]
 8017150:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2220      	movs	r2, #32
 8017158:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801715a:	183b      	adds	r3, r7, r0
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	2b21      	cmp	r3, #33	@ 0x21
 8017160:	d003      	beq.n	801716a <I2C_ITSlaveCplt+0x3a>
 8017162:	183b      	adds	r3, r7, r0
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	2b29      	cmp	r3, #41	@ 0x29
 8017168:	d109      	bne.n	801717e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801716a:	4a7d      	ldr	r2, [pc, #500]	@ (8017360 <I2C_ITSlaveCplt+0x230>)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	0011      	movs	r1, r2
 8017170:	0018      	movs	r0, r3
 8017172:	f000 fe9b 	bl	8017eac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2221      	movs	r2, #33	@ 0x21
 801717a:	631a      	str	r2, [r3, #48]	@ 0x30
 801717c:	e011      	b.n	80171a2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801717e:	220f      	movs	r2, #15
 8017180:	18bb      	adds	r3, r7, r2
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	2b22      	cmp	r3, #34	@ 0x22
 8017186:	d003      	beq.n	8017190 <I2C_ITSlaveCplt+0x60>
 8017188:	18bb      	adds	r3, r7, r2
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b2a      	cmp	r3, #42	@ 0x2a
 801718e:	d108      	bne.n	80171a2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017190:	4a74      	ldr	r2, [pc, #464]	@ (8017364 <I2C_ITSlaveCplt+0x234>)
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	0011      	movs	r1, r2
 8017196:	0018      	movs	r0, r3
 8017198:	f000 fe88 	bl	8017eac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	2222      	movs	r2, #34	@ 0x22
 80171a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	685a      	ldr	r2, [r3, #4]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	2180      	movs	r1, #128	@ 0x80
 80171ae:	0209      	lsls	r1, r1, #8
 80171b0:	430a      	orrs	r2, r1
 80171b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	685a      	ldr	r2, [r3, #4]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	496a      	ldr	r1, [pc, #424]	@ (8017368 <I2C_ITSlaveCplt+0x238>)
 80171c0:	400a      	ands	r2, r1
 80171c2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	0018      	movs	r0, r3
 80171c8:	f000 fa5b 	bl	8017682 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	0b9b      	lsrs	r3, r3, #14
 80171d0:	001a      	movs	r2, r3
 80171d2:	2301      	movs	r3, #1
 80171d4:	4013      	ands	r3, r2
 80171d6:	d013      	beq.n	8017200 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	681a      	ldr	r2, [r3, #0]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	4962      	ldr	r1, [pc, #392]	@ (801736c <I2C_ITSlaveCplt+0x23c>)
 80171e4:	400a      	ands	r2, r1
 80171e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d020      	beq.n	8017232 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	b29a      	uxth	r2, r3
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80171fe:	e018      	b.n	8017232 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	0bdb      	lsrs	r3, r3, #15
 8017204:	001a      	movs	r2, r3
 8017206:	2301      	movs	r3, #1
 8017208:	4013      	ands	r3, r2
 801720a:	d012      	beq.n	8017232 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	681a      	ldr	r2, [r3, #0]
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4956      	ldr	r1, [pc, #344]	@ (8017370 <I2C_ITSlaveCplt+0x240>)
 8017218:	400a      	ands	r2, r1
 801721a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017220:	2b00      	cmp	r3, #0
 8017222:	d006      	beq.n	8017232 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	b29a      	uxth	r2, r3
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	089b      	lsrs	r3, r3, #2
 8017236:	001a      	movs	r2, r3
 8017238:	2301      	movs	r3, #1
 801723a:	4013      	ands	r3, r2
 801723c:	d020      	beq.n	8017280 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	2204      	movs	r2, #4
 8017242:	4393      	bics	r3, r2
 8017244:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017250:	b2d2      	uxtb	r2, r2
 8017252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017262:	2b00      	cmp	r3, #0
 8017264:	d00c      	beq.n	8017280 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801726a:	3b01      	subs	r3, #1
 801726c:	b29a      	uxth	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017276:	b29b      	uxth	r3, r3
 8017278:	3b01      	subs	r3, #1
 801727a:	b29a      	uxth	r2, r3
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017284:	b29b      	uxth	r3, r3
 8017286:	2b00      	cmp	r3, #0
 8017288:	d005      	beq.n	8017296 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801728e:	2204      	movs	r2, #4
 8017290:	431a      	orrs	r2, r3
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2242      	movs	r2, #66	@ 0x42
 801729a:	2100      	movs	r1, #0
 801729c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2200      	movs	r2, #0
 80172a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d013      	beq.n	80172d4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	0011      	movs	r1, r2
 80172b4:	0018      	movs	r0, r3
 80172b6:	f000 f8b9 	bl	801742c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2241      	movs	r2, #65	@ 0x41
 80172be:	5c9b      	ldrb	r3, [r3, r2]
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	2b28      	cmp	r3, #40	@ 0x28
 80172c4:	d147      	bne.n	8017356 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80172c6:	697a      	ldr	r2, [r7, #20]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	0011      	movs	r1, r2
 80172cc:	0018      	movs	r0, r3
 80172ce:	f000 f853 	bl	8017378 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80172d2:	e040      	b.n	8017356 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172d8:	4a26      	ldr	r2, [pc, #152]	@ (8017374 <I2C_ITSlaveCplt+0x244>)
 80172da:	4293      	cmp	r3, r2
 80172dc:	d016      	beq.n	801730c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	0018      	movs	r0, r3
 80172e2:	f7ff fded 	bl	8016ec0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	4a22      	ldr	r2, [pc, #136]	@ (8017374 <I2C_ITSlaveCplt+0x244>)
 80172ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2241      	movs	r2, #65	@ 0x41
 80172f0:	2120      	movs	r1, #32
 80172f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2200      	movs	r2, #0
 80172f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2240      	movs	r2, #64	@ 0x40
 80172fe:	2100      	movs	r1, #0
 8017300:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	0018      	movs	r0, r3
 8017306:	f7fe fee3 	bl	80160d0 <HAL_I2C_ListenCpltCallback>
}
 801730a:	e024      	b.n	8017356 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2241      	movs	r2, #65	@ 0x41
 8017310:	5c9b      	ldrb	r3, [r3, r2]
 8017312:	b2db      	uxtb	r3, r3
 8017314:	2b22      	cmp	r3, #34	@ 0x22
 8017316:	d10f      	bne.n	8017338 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2241      	movs	r2, #65	@ 0x41
 801731c:	2120      	movs	r1, #32
 801731e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2200      	movs	r2, #0
 8017324:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	2240      	movs	r2, #64	@ 0x40
 801732a:	2100      	movs	r1, #0
 801732c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	0018      	movs	r0, r3
 8017332:	f7fe feb5 	bl	80160a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8017336:	e00e      	b.n	8017356 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2241      	movs	r2, #65	@ 0x41
 801733c:	2120      	movs	r1, #32
 801733e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2200      	movs	r2, #0
 8017344:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2240      	movs	r2, #64	@ 0x40
 801734a:	2100      	movs	r1, #0
 801734c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	0018      	movs	r0, r3
 8017352:	f7fe fe9d 	bl	8016090 <HAL_I2C_SlaveTxCpltCallback>
}
 8017356:	46c0      	nop			@ (mov r8, r8)
 8017358:	46bd      	mov	sp, r7
 801735a:	b006      	add	sp, #24
 801735c:	bd80      	pop	{r7, pc}
 801735e:	46c0      	nop			@ (mov r8, r8)
 8017360:	00008001 	.word	0x00008001
 8017364:	00008002 	.word	0x00008002
 8017368:	fe00e800 	.word	0xfe00e800
 801736c:	ffffbfff 	.word	0xffffbfff
 8017370:	ffff7fff 	.word	0xffff7fff
 8017374:	ffff0000 	.word	0xffff0000

08017378 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	4a27      	ldr	r2, [pc, #156]	@ (8017424 <I2C_ITListenCplt+0xac>)
 8017386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2241      	movs	r2, #65	@ 0x41
 8017392:	2120      	movs	r1, #32
 8017394:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2242      	movs	r2, #66	@ 0x42
 801739a:	2100      	movs	r1, #0
 801739c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2200      	movs	r2, #0
 80173a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	089b      	lsrs	r3, r3, #2
 80173a8:	001a      	movs	r2, r3
 80173aa:	2301      	movs	r3, #1
 80173ac:	4013      	ands	r3, r2
 80173ae:	d022      	beq.n	80173f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173ba:	b2d2      	uxtb	r2, r2
 80173bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173c2:	1c5a      	adds	r2, r3, #1
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d012      	beq.n	80173f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173d4:	3b01      	subs	r3, #1
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173e0:	b29b      	uxth	r3, r3
 80173e2:	3b01      	subs	r3, #1
 80173e4:	b29a      	uxth	r2, r3
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173ee:	2204      	movs	r2, #4
 80173f0:	431a      	orrs	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80173f6:	4a0c      	ldr	r2, [pc, #48]	@ (8017428 <I2C_ITListenCplt+0xb0>)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	0011      	movs	r1, r2
 80173fc:	0018      	movs	r0, r3
 80173fe:	f000 fd55 	bl	8017eac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2210      	movs	r2, #16
 8017408:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	2240      	movs	r2, #64	@ 0x40
 801740e:	2100      	movs	r1, #0
 8017410:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	0018      	movs	r0, r3
 8017416:	f7fe fe5b 	bl	80160d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801741a:	46c0      	nop			@ (mov r8, r8)
 801741c:	46bd      	mov	sp, r7
 801741e:	b002      	add	sp, #8
 8017420:	bd80      	pop	{r7, pc}
 8017422:	46c0      	nop			@ (mov r8, r8)
 8017424:	ffff0000 	.word	0xffff0000
 8017428:	00008003 	.word	0x00008003

0801742c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017436:	200f      	movs	r0, #15
 8017438:	183b      	adds	r3, r7, r0
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	2141      	movs	r1, #65	@ 0x41
 801743e:	5c52      	ldrb	r2, [r2, r1]
 8017440:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2242      	movs	r2, #66	@ 0x42
 8017446:	2100      	movs	r1, #0
 8017448:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	4a72      	ldr	r2, [pc, #456]	@ (8017618 <I2C_ITError+0x1ec>)
 801744e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	431a      	orrs	r2, r3
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8017462:	183b      	adds	r3, r7, r0
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	2b28      	cmp	r3, #40	@ 0x28
 8017468:	d007      	beq.n	801747a <I2C_ITError+0x4e>
 801746a:	183b      	adds	r3, r7, r0
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	2b29      	cmp	r3, #41	@ 0x29
 8017470:	d003      	beq.n	801747a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8017472:	183b      	adds	r3, r7, r0
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	2b2a      	cmp	r3, #42	@ 0x2a
 8017478:	d10c      	bne.n	8017494 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	2103      	movs	r1, #3
 801747e:	0018      	movs	r0, r3
 8017480:	f000 fd14 	bl	8017eac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2241      	movs	r2, #65	@ 0x41
 8017488:	2128      	movs	r1, #40	@ 0x28
 801748a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	4a63      	ldr	r2, [pc, #396]	@ (801761c <I2C_ITError+0x1f0>)
 8017490:	635a      	str	r2, [r3, #52]	@ 0x34
 8017492:	e032      	b.n	80174fa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017494:	4a62      	ldr	r2, [pc, #392]	@ (8017620 <I2C_ITError+0x1f4>)
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	0011      	movs	r1, r2
 801749a:	0018      	movs	r0, r3
 801749c:	f000 fd06 	bl	8017eac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	0018      	movs	r0, r3
 80174a4:	f000 f8ed 	bl	8017682 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2241      	movs	r2, #65	@ 0x41
 80174ac:	5c9b      	ldrb	r3, [r3, r2]
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	2b60      	cmp	r3, #96	@ 0x60
 80174b2:	d01f      	beq.n	80174f4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2241      	movs	r2, #65	@ 0x41
 80174b8:	2120      	movs	r1, #32
 80174ba:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	699b      	ldr	r3, [r3, #24]
 80174c2:	2220      	movs	r2, #32
 80174c4:	4013      	ands	r3, r2
 80174c6:	2b20      	cmp	r3, #32
 80174c8:	d114      	bne.n	80174f4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	699b      	ldr	r3, [r3, #24]
 80174d0:	2210      	movs	r2, #16
 80174d2:	4013      	ands	r3, r2
 80174d4:	2b10      	cmp	r3, #16
 80174d6:	d109      	bne.n	80174ec <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2210      	movs	r2, #16
 80174de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174e4:	2204      	movs	r2, #4
 80174e6:	431a      	orrs	r2, r3
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	2220      	movs	r2, #32
 80174f2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2200      	movs	r2, #0
 80174f8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017504:	2b00      	cmp	r3, #0
 8017506:	d03b      	beq.n	8017580 <I2C_ITError+0x154>
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	2b11      	cmp	r3, #17
 801750c:	d002      	beq.n	8017514 <I2C_ITError+0xe8>
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	2b21      	cmp	r3, #33	@ 0x21
 8017512:	d135      	bne.n	8017580 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	681a      	ldr	r2, [r3, #0]
 801751a:	2380      	movs	r3, #128	@ 0x80
 801751c:	01db      	lsls	r3, r3, #7
 801751e:	401a      	ands	r2, r3
 8017520:	2380      	movs	r3, #128	@ 0x80
 8017522:	01db      	lsls	r3, r3, #7
 8017524:	429a      	cmp	r2, r3
 8017526:	d107      	bne.n	8017538 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	493c      	ldr	r1, [pc, #240]	@ (8017624 <I2C_ITError+0x1f8>)
 8017534:	400a      	ands	r2, r1
 8017536:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801753c:	0018      	movs	r0, r3
 801753e:	f7fd fa56 	bl	80149ee <HAL_DMA_GetState>
 8017542:	0003      	movs	r3, r0
 8017544:	2b01      	cmp	r3, #1
 8017546:	d016      	beq.n	8017576 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801754c:	4a36      	ldr	r2, [pc, #216]	@ (8017628 <I2C_ITError+0x1fc>)
 801754e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2240      	movs	r2, #64	@ 0x40
 8017554:	2100      	movs	r1, #0
 8017556:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801755c:	0018      	movs	r0, r3
 801755e:	f7fd f951 	bl	8014804 <HAL_DMA_Abort_IT>
 8017562:	1e03      	subs	r3, r0, #0
 8017564:	d051      	beq.n	801760a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801756a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017570:	0018      	movs	r0, r3
 8017572:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017574:	e049      	b.n	801760a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	0018      	movs	r0, r3
 801757a:	f000 f859 	bl	8017630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801757e:	e044      	b.n	801760a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017584:	2b00      	cmp	r3, #0
 8017586:	d03b      	beq.n	8017600 <I2C_ITError+0x1d4>
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	2b12      	cmp	r3, #18
 801758c:	d002      	beq.n	8017594 <I2C_ITError+0x168>
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	2b22      	cmp	r3, #34	@ 0x22
 8017592:	d135      	bne.n	8017600 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	2380      	movs	r3, #128	@ 0x80
 801759c:	021b      	lsls	r3, r3, #8
 801759e:	401a      	ands	r2, r3
 80175a0:	2380      	movs	r3, #128	@ 0x80
 80175a2:	021b      	lsls	r3, r3, #8
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d107      	bne.n	80175b8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	491e      	ldr	r1, [pc, #120]	@ (801762c <I2C_ITError+0x200>)
 80175b4:	400a      	ands	r2, r1
 80175b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175bc:	0018      	movs	r0, r3
 80175be:	f7fd fa16 	bl	80149ee <HAL_DMA_GetState>
 80175c2:	0003      	movs	r3, r0
 80175c4:	2b01      	cmp	r3, #1
 80175c6:	d016      	beq.n	80175f6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175cc:	4a16      	ldr	r2, [pc, #88]	@ (8017628 <I2C_ITError+0x1fc>)
 80175ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2240      	movs	r2, #64	@ 0x40
 80175d4:	2100      	movs	r1, #0
 80175d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175dc:	0018      	movs	r0, r3
 80175de:	f7fd f911 	bl	8014804 <HAL_DMA_Abort_IT>
 80175e2:	1e03      	subs	r3, r0, #0
 80175e4:	d013      	beq.n	801760e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175f0:	0018      	movs	r0, r3
 80175f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80175f4:	e00b      	b.n	801760e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	0018      	movs	r0, r3
 80175fa:	f000 f819 	bl	8017630 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80175fe:	e006      	b.n	801760e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	0018      	movs	r0, r3
 8017604:	f000 f814 	bl	8017630 <I2C_TreatErrorCallback>
  }
}
 8017608:	e002      	b.n	8017610 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801760a:	46c0      	nop			@ (mov r8, r8)
 801760c:	e000      	b.n	8017610 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801760e:	46c0      	nop			@ (mov r8, r8)
}
 8017610:	46c0      	nop			@ (mov r8, r8)
 8017612:	46bd      	mov	sp, r7
 8017614:	b004      	add	sp, #16
 8017616:	bd80      	pop	{r7, pc}
 8017618:	ffff0000 	.word	0xffff0000
 801761c:	080163a5 	.word	0x080163a5
 8017620:	00008003 	.word	0x00008003
 8017624:	ffffbfff 	.word	0xffffbfff
 8017628:	0801783b 	.word	0x0801783b
 801762c:	ffff7fff 	.word	0xffff7fff

08017630 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2241      	movs	r2, #65	@ 0x41
 801763c:	5c9b      	ldrb	r3, [r3, r2]
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b60      	cmp	r3, #96	@ 0x60
 8017642:	d10f      	bne.n	8017664 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2241      	movs	r2, #65	@ 0x41
 8017648:	2120      	movs	r1, #32
 801764a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2200      	movs	r2, #0
 8017650:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	2240      	movs	r2, #64	@ 0x40
 8017656:	2100      	movs	r1, #0
 8017658:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	0018      	movs	r0, r3
 801765e:	f7fe fd57 	bl	8016110 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017662:	e00a      	b.n	801767a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2200      	movs	r2, #0
 8017668:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2240      	movs	r2, #64	@ 0x40
 801766e:	2100      	movs	r1, #0
 8017670:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	0018      	movs	r0, r3
 8017676:	f7fe fd43 	bl	8016100 <HAL_I2C_ErrorCallback>
}
 801767a:	46c0      	nop			@ (mov r8, r8)
 801767c:	46bd      	mov	sp, r7
 801767e:	b002      	add	sp, #8
 8017680:	bd80      	pop	{r7, pc}

08017682 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b082      	sub	sp, #8
 8017686:	af00      	add	r7, sp, #0
 8017688:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	699b      	ldr	r3, [r3, #24]
 8017690:	2202      	movs	r2, #2
 8017692:	4013      	ands	r3, r2
 8017694:	2b02      	cmp	r3, #2
 8017696:	d103      	bne.n	80176a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2200      	movs	r2, #0
 801769e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	699b      	ldr	r3, [r3, #24]
 80176a6:	2201      	movs	r2, #1
 80176a8:	4013      	ands	r3, r2
 80176aa:	2b01      	cmp	r3, #1
 80176ac:	d007      	beq.n	80176be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	699a      	ldr	r2, [r3, #24]
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2101      	movs	r1, #1
 80176ba:	430a      	orrs	r2, r1
 80176bc:	619a      	str	r2, [r3, #24]
  }
}
 80176be:	46c0      	nop			@ (mov r8, r8)
 80176c0:	46bd      	mov	sp, r7
 80176c2:	b002      	add	sp, #8
 80176c4:	bd80      	pop	{r7, pc}
	...

080176c8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176d4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	4920      	ldr	r1, [pc, #128]	@ (8017764 <I2C_DMAMasterTransmitCplt+0x9c>)
 80176e2:	400a      	ands	r2, r1
 80176e4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d105      	bne.n	80176fc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	2120      	movs	r1, #32
 80176f4:	0018      	movs	r0, r3
 80176f6:	f000 fb4b 	bl	8017d90 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80176fa:	e02e      	b.n	801775a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017700:	68fa      	ldr	r2, [r7, #12]
 8017702:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017704:	189a      	adds	r2, r3, r2
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801770e:	b29b      	uxth	r3, r3
 8017710:	2bff      	cmp	r3, #255	@ 0xff
 8017712:	d903      	bls.n	801771c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	22ff      	movs	r2, #255	@ 0xff
 8017718:	851a      	strh	r2, [r3, #40]	@ 0x28
 801771a:	e004      	b.n	8017726 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017720:	b29a      	uxth	r2, r3
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801772e:	0019      	movs	r1, r3
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	3328      	adds	r3, #40	@ 0x28
 8017736:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801773c:	f7fc ffbc 	bl	80146b8 <HAL_DMA_Start_IT>
 8017740:	1e03      	subs	r3, r0, #0
 8017742:	d005      	beq.n	8017750 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	2110      	movs	r1, #16
 8017748:	0018      	movs	r0, r3
 801774a:	f7ff fe6f 	bl	801742c <I2C_ITError>
}
 801774e:	e004      	b.n	801775a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	2140      	movs	r1, #64	@ 0x40
 8017754:	0018      	movs	r0, r3
 8017756:	f000 fb1b 	bl	8017d90 <I2C_Enable_IRQ>
}
 801775a:	46c0      	nop			@ (mov r8, r8)
 801775c:	46bd      	mov	sp, r7
 801775e:	b004      	add	sp, #16
 8017760:	bd80      	pop	{r7, pc}
 8017762:	46c0      	nop			@ (mov r8, r8)
 8017764:	ffffbfff 	.word	0xffffbfff

08017768 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017774:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	681a      	ldr	r2, [r3, #0]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	4920      	ldr	r1, [pc, #128]	@ (8017804 <I2C_DMAMasterReceiveCplt+0x9c>)
 8017782:	400a      	ands	r2, r1
 8017784:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801778a:	b29b      	uxth	r3, r3
 801778c:	2b00      	cmp	r3, #0
 801778e:	d105      	bne.n	801779c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	2120      	movs	r1, #32
 8017794:	0018      	movs	r0, r3
 8017796:	f000 fafb 	bl	8017d90 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801779a:	e02e      	b.n	80177fa <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177a0:	68fa      	ldr	r2, [r7, #12]
 80177a2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80177a4:	189a      	adds	r2, r3, r2
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80177ae:	b29b      	uxth	r3, r3
 80177b0:	2bff      	cmp	r3, #255	@ 0xff
 80177b2:	d903      	bls.n	80177bc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	22ff      	movs	r2, #255	@ 0xff
 80177b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80177ba:	e004      	b.n	80177c6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80177c0:	b29a      	uxth	r2, r3
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	3324      	adds	r3, #36	@ 0x24
 80177d0:	0019      	movs	r1, r3
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177d6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80177dc:	f7fc ff6c 	bl	80146b8 <HAL_DMA_Start_IT>
 80177e0:	1e03      	subs	r3, r0, #0
 80177e2:	d005      	beq.n	80177f0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	2110      	movs	r1, #16
 80177e8:	0018      	movs	r0, r3
 80177ea:	f7ff fe1f 	bl	801742c <I2C_ITError>
}
 80177ee:	e004      	b.n	80177fa <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2140      	movs	r1, #64	@ 0x40
 80177f4:	0018      	movs	r0, r3
 80177f6:	f000 facb 	bl	8017d90 <I2C_Enable_IRQ>
}
 80177fa:	46c0      	nop			@ (mov r8, r8)
 80177fc:	46bd      	mov	sp, r7
 80177fe:	b004      	add	sp, #16
 8017800:	bd80      	pop	{r7, pc}
 8017802:	46c0      	nop			@ (mov r8, r8)
 8017804:	ffff7fff 	.word	0xffff7fff

08017808 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b084      	sub	sp, #16
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017814:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	685a      	ldr	r2, [r3, #4]
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	2180      	movs	r1, #128	@ 0x80
 8017822:	0209      	lsls	r1, r1, #8
 8017824:	430a      	orrs	r2, r1
 8017826:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	2110      	movs	r1, #16
 801782c:	0018      	movs	r0, r3
 801782e:	f7ff fdfd 	bl	801742c <I2C_ITError>
}
 8017832:	46c0      	nop			@ (mov r8, r8)
 8017834:	46bd      	mov	sp, r7
 8017836:	b004      	add	sp, #16
 8017838:	bd80      	pop	{r7, pc}

0801783a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801783a:	b580      	push	{r7, lr}
 801783c:	b084      	sub	sp, #16
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017846:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801784c:	2b00      	cmp	r3, #0
 801784e:	d003      	beq.n	8017858 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017854:	2200      	movs	r2, #0
 8017856:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801785c:	2b00      	cmp	r3, #0
 801785e:	d003      	beq.n	8017868 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017864:	2200      	movs	r2, #0
 8017866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	0018      	movs	r0, r3
 801786c:	f7ff fee0 	bl	8017630 <I2C_TreatErrorCallback>
}
 8017870:	46c0      	nop			@ (mov r8, r8)
 8017872:	46bd      	mov	sp, r7
 8017874:	b004      	add	sp, #16
 8017876:	bd80      	pop	{r7, pc}

08017878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	603b      	str	r3, [r7, #0]
 8017884:	1dfb      	adds	r3, r7, #7
 8017886:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017888:	e030      	b.n	80178ec <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	3301      	adds	r3, #1
 801788e:	d02d      	beq.n	80178ec <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017890:	f7fc f9c0 	bl	8013c14 <HAL_GetTick>
 8017894:	0002      	movs	r2, r0
 8017896:	69bb      	ldr	r3, [r7, #24]
 8017898:	1ad3      	subs	r3, r2, r3
 801789a:	683a      	ldr	r2, [r7, #0]
 801789c:	429a      	cmp	r2, r3
 801789e:	d302      	bcc.n	80178a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d122      	bne.n	80178ec <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	699b      	ldr	r3, [r3, #24]
 80178ac:	68ba      	ldr	r2, [r7, #8]
 80178ae:	4013      	ands	r3, r2
 80178b0:	68ba      	ldr	r2, [r7, #8]
 80178b2:	1ad3      	subs	r3, r2, r3
 80178b4:	425a      	negs	r2, r3
 80178b6:	4153      	adcs	r3, r2
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	001a      	movs	r2, r3
 80178bc:	1dfb      	adds	r3, r7, #7
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d113      	bne.n	80178ec <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178c8:	2220      	movs	r2, #32
 80178ca:	431a      	orrs	r2, r3
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	2241      	movs	r2, #65	@ 0x41
 80178d4:	2120      	movs	r1, #32
 80178d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2242      	movs	r2, #66	@ 0x42
 80178dc:	2100      	movs	r1, #0
 80178de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2240      	movs	r2, #64	@ 0x40
 80178e4:	2100      	movs	r1, #0
 80178e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e00f      	b.n	801790c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	68ba      	ldr	r2, [r7, #8]
 80178f4:	4013      	ands	r3, r2
 80178f6:	68ba      	ldr	r2, [r7, #8]
 80178f8:	1ad3      	subs	r3, r2, r3
 80178fa:	425a      	negs	r2, r3
 80178fc:	4153      	adcs	r3, r2
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	001a      	movs	r2, r3
 8017902:	1dfb      	adds	r3, r7, #7
 8017904:	781b      	ldrb	r3, [r3, #0]
 8017906:	429a      	cmp	r2, r3
 8017908:	d0bf      	beq.n	801788a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801790a:	2300      	movs	r3, #0
}
 801790c:	0018      	movs	r0, r3
 801790e:	46bd      	mov	sp, r7
 8017910:	b004      	add	sp, #16
 8017912:	bd80      	pop	{r7, pc}

08017914 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b084      	sub	sp, #16
 8017918:	af00      	add	r7, sp, #0
 801791a:	60f8      	str	r0, [r7, #12]
 801791c:	60b9      	str	r1, [r7, #8]
 801791e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017920:	e032      	b.n	8017988 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017922:	687a      	ldr	r2, [r7, #4]
 8017924:	68b9      	ldr	r1, [r7, #8]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	0018      	movs	r0, r3
 801792a:	f000 f8ff 	bl	8017b2c <I2C_IsErrorOccurred>
 801792e:	1e03      	subs	r3, r0, #0
 8017930:	d001      	beq.n	8017936 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017932:	2301      	movs	r3, #1
 8017934:	e030      	b.n	8017998 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	3301      	adds	r3, #1
 801793a:	d025      	beq.n	8017988 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801793c:	f7fc f96a 	bl	8013c14 <HAL_GetTick>
 8017940:	0002      	movs	r2, r0
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	1ad3      	subs	r3, r2, r3
 8017946:	68ba      	ldr	r2, [r7, #8]
 8017948:	429a      	cmp	r2, r3
 801794a:	d302      	bcc.n	8017952 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d11a      	bne.n	8017988 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	699b      	ldr	r3, [r3, #24]
 8017958:	2202      	movs	r2, #2
 801795a:	4013      	ands	r3, r2
 801795c:	2b02      	cmp	r3, #2
 801795e:	d013      	beq.n	8017988 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017964:	2220      	movs	r2, #32
 8017966:	431a      	orrs	r2, r3
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	2241      	movs	r2, #65	@ 0x41
 8017970:	2120      	movs	r1, #32
 8017972:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	2242      	movs	r2, #66	@ 0x42
 8017978:	2100      	movs	r1, #0
 801797a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2240      	movs	r2, #64	@ 0x40
 8017980:	2100      	movs	r1, #0
 8017982:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017984:	2301      	movs	r3, #1
 8017986:	e007      	b.n	8017998 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	699b      	ldr	r3, [r3, #24]
 801798e:	2202      	movs	r2, #2
 8017990:	4013      	ands	r3, r2
 8017992:	2b02      	cmp	r3, #2
 8017994:	d1c5      	bne.n	8017922 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017996:	2300      	movs	r3, #0
}
 8017998:	0018      	movs	r0, r3
 801799a:	46bd      	mov	sp, r7
 801799c:	b004      	add	sp, #16
 801799e:	bd80      	pop	{r7, pc}

080179a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	60f8      	str	r0, [r7, #12]
 80179a8:	60b9      	str	r1, [r7, #8]
 80179aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80179ac:	e02f      	b.n	8017a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80179ae:	687a      	ldr	r2, [r7, #4]
 80179b0:	68b9      	ldr	r1, [r7, #8]
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	0018      	movs	r0, r3
 80179b6:	f000 f8b9 	bl	8017b2c <I2C_IsErrorOccurred>
 80179ba:	1e03      	subs	r3, r0, #0
 80179bc:	d001      	beq.n	80179c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80179be:	2301      	movs	r3, #1
 80179c0:	e02d      	b.n	8017a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179c2:	f7fc f927 	bl	8013c14 <HAL_GetTick>
 80179c6:	0002      	movs	r2, r0
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	1ad3      	subs	r3, r2, r3
 80179cc:	68ba      	ldr	r2, [r7, #8]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d302      	bcc.n	80179d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d11a      	bne.n	8017a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	699b      	ldr	r3, [r3, #24]
 80179de:	2220      	movs	r2, #32
 80179e0:	4013      	ands	r3, r2
 80179e2:	2b20      	cmp	r3, #32
 80179e4:	d013      	beq.n	8017a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80179ea:	2220      	movs	r2, #32
 80179ec:	431a      	orrs	r2, r3
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	2241      	movs	r2, #65	@ 0x41
 80179f6:	2120      	movs	r1, #32
 80179f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	2242      	movs	r2, #66	@ 0x42
 80179fe:	2100      	movs	r1, #0
 8017a00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2240      	movs	r2, #64	@ 0x40
 8017a06:	2100      	movs	r1, #0
 8017a08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e007      	b.n	8017a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	699b      	ldr	r3, [r3, #24]
 8017a14:	2220      	movs	r2, #32
 8017a16:	4013      	ands	r3, r2
 8017a18:	2b20      	cmp	r3, #32
 8017a1a:	d1c8      	bne.n	80179ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017a1c:	2300      	movs	r3, #0
}
 8017a1e:	0018      	movs	r0, r3
 8017a20:	46bd      	mov	sp, r7
 8017a22:	b004      	add	sp, #16
 8017a24:	bd80      	pop	{r7, pc}
	...

08017a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60f8      	str	r0, [r7, #12]
 8017a30:	60b9      	str	r1, [r7, #8]
 8017a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017a34:	e06b      	b.n	8017b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	68b9      	ldr	r1, [r7, #8]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	0018      	movs	r0, r3
 8017a3e:	f000 f875 	bl	8017b2c <I2C_IsErrorOccurred>
 8017a42:	1e03      	subs	r3, r0, #0
 8017a44:	d001      	beq.n	8017a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017a46:	2301      	movs	r3, #1
 8017a48:	e069      	b.n	8017b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	699b      	ldr	r3, [r3, #24]
 8017a50:	2220      	movs	r2, #32
 8017a52:	4013      	ands	r3, r2
 8017a54:	2b20      	cmp	r3, #32
 8017a56:	d138      	bne.n	8017aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	699b      	ldr	r3, [r3, #24]
 8017a5e:	2204      	movs	r2, #4
 8017a60:	4013      	ands	r3, r2
 8017a62:	2b04      	cmp	r3, #4
 8017a64:	d105      	bne.n	8017a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d001      	beq.n	8017a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	e055      	b.n	8017b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	699b      	ldr	r3, [r3, #24]
 8017a78:	2210      	movs	r2, #16
 8017a7a:	4013      	ands	r3, r2
 8017a7c:	2b10      	cmp	r3, #16
 8017a7e:	d107      	bne.n	8017a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2210      	movs	r2, #16
 8017a86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2204      	movs	r2, #4
 8017a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8017a8e:	e002      	b.n	8017a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2200      	movs	r2, #0
 8017a94:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2220      	movs	r2, #32
 8017a9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	685a      	ldr	r2, [r3, #4]
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	491f      	ldr	r1, [pc, #124]	@ (8017b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8017aaa:	400a      	ands	r2, r1
 8017aac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	2241      	movs	r2, #65	@ 0x41
 8017ab2:	2120      	movs	r1, #32
 8017ab4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2242      	movs	r2, #66	@ 0x42
 8017aba:	2100      	movs	r1, #0
 8017abc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	2240      	movs	r2, #64	@ 0x40
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	e029      	b.n	8017b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017aca:	f7fc f8a3 	bl	8013c14 <HAL_GetTick>
 8017ace:	0002      	movs	r2, r0
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	1ad3      	subs	r3, r2, r3
 8017ad4:	68ba      	ldr	r2, [r7, #8]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d302      	bcc.n	8017ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d116      	bne.n	8017b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	699b      	ldr	r3, [r3, #24]
 8017ae6:	2204      	movs	r2, #4
 8017ae8:	4013      	ands	r3, r2
 8017aea:	2b04      	cmp	r3, #4
 8017aec:	d00f      	beq.n	8017b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017af2:	2220      	movs	r2, #32
 8017af4:	431a      	orrs	r2, r3
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2241      	movs	r2, #65	@ 0x41
 8017afe:	2120      	movs	r1, #32
 8017b00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2240      	movs	r2, #64	@ 0x40
 8017b06:	2100      	movs	r1, #0
 8017b08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	e007      	b.n	8017b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	699b      	ldr	r3, [r3, #24]
 8017b14:	2204      	movs	r2, #4
 8017b16:	4013      	ands	r3, r2
 8017b18:	2b04      	cmp	r3, #4
 8017b1a:	d18c      	bne.n	8017a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017b1c:	2300      	movs	r3, #0
}
 8017b1e:	0018      	movs	r0, r3
 8017b20:	46bd      	mov	sp, r7
 8017b22:	b004      	add	sp, #16
 8017b24:	bd80      	pop	{r7, pc}
 8017b26:	46c0      	nop			@ (mov r8, r8)
 8017b28:	fe00e800 	.word	0xfe00e800

08017b2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b08a      	sub	sp, #40	@ 0x28
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017b38:	2327      	movs	r3, #39	@ 0x27
 8017b3a:	18fb      	adds	r3, r7, r3
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	699b      	ldr	r3, [r3, #24]
 8017b46:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017b50:	69bb      	ldr	r3, [r7, #24]
 8017b52:	2210      	movs	r2, #16
 8017b54:	4013      	ands	r3, r2
 8017b56:	d100      	bne.n	8017b5a <I2C_IsErrorOccurred+0x2e>
 8017b58:	e079      	b.n	8017c4e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	2210      	movs	r2, #16
 8017b60:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017b62:	e057      	b.n	8017c14 <I2C_IsErrorOccurred+0xe8>
 8017b64:	2227      	movs	r2, #39	@ 0x27
 8017b66:	18bb      	adds	r3, r7, r2
 8017b68:	18ba      	adds	r2, r7, r2
 8017b6a:	7812      	ldrb	r2, [r2, #0]
 8017b6c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	3301      	adds	r3, #1
 8017b72:	d04f      	beq.n	8017c14 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017b74:	f7fc f84e 	bl	8013c14 <HAL_GetTick>
 8017b78:	0002      	movs	r2, r0
 8017b7a:	69fb      	ldr	r3, [r7, #28]
 8017b7c:	1ad3      	subs	r3, r2, r3
 8017b7e:	68ba      	ldr	r2, [r7, #8]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d302      	bcc.n	8017b8a <I2C_IsErrorOccurred+0x5e>
 8017b84:	68bb      	ldr	r3, [r7, #8]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d144      	bne.n	8017c14 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	685a      	ldr	r2, [r3, #4]
 8017b90:	2380      	movs	r3, #128	@ 0x80
 8017b92:	01db      	lsls	r3, r3, #7
 8017b94:	4013      	ands	r3, r2
 8017b96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017b98:	2013      	movs	r0, #19
 8017b9a:	183b      	adds	r3, r7, r0
 8017b9c:	68fa      	ldr	r2, [r7, #12]
 8017b9e:	2142      	movs	r1, #66	@ 0x42
 8017ba0:	5c52      	ldrb	r2, [r2, r1]
 8017ba2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	699a      	ldr	r2, [r3, #24]
 8017baa:	2380      	movs	r3, #128	@ 0x80
 8017bac:	021b      	lsls	r3, r3, #8
 8017bae:	401a      	ands	r2, r3
 8017bb0:	2380      	movs	r3, #128	@ 0x80
 8017bb2:	021b      	lsls	r3, r3, #8
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d126      	bne.n	8017c06 <I2C_IsErrorOccurred+0xda>
 8017bb8:	697a      	ldr	r2, [r7, #20]
 8017bba:	2380      	movs	r3, #128	@ 0x80
 8017bbc:	01db      	lsls	r3, r3, #7
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d021      	beq.n	8017c06 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8017bc2:	183b      	adds	r3, r7, r0
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	2b20      	cmp	r3, #32
 8017bc8:	d01d      	beq.n	8017c06 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	685a      	ldr	r2, [r3, #4]
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	2180      	movs	r1, #128	@ 0x80
 8017bd6:	01c9      	lsls	r1, r1, #7
 8017bd8:	430a      	orrs	r2, r1
 8017bda:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017bdc:	f7fc f81a 	bl	8013c14 <HAL_GetTick>
 8017be0:	0003      	movs	r3, r0
 8017be2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017be4:	e00f      	b.n	8017c06 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017be6:	f7fc f815 	bl	8013c14 <HAL_GetTick>
 8017bea:	0002      	movs	r2, r0
 8017bec:	69fb      	ldr	r3, [r7, #28]
 8017bee:	1ad3      	subs	r3, r2, r3
 8017bf0:	2b19      	cmp	r3, #25
 8017bf2:	d908      	bls.n	8017c06 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017bf4:	6a3b      	ldr	r3, [r7, #32]
 8017bf6:	2220      	movs	r2, #32
 8017bf8:	4313      	orrs	r3, r2
 8017bfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017bfc:	2327      	movs	r3, #39	@ 0x27
 8017bfe:	18fb      	adds	r3, r7, r3
 8017c00:	2201      	movs	r2, #1
 8017c02:	701a      	strb	r2, [r3, #0]

              break;
 8017c04:	e006      	b.n	8017c14 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	699b      	ldr	r3, [r3, #24]
 8017c0c:	2220      	movs	r2, #32
 8017c0e:	4013      	ands	r3, r2
 8017c10:	2b20      	cmp	r3, #32
 8017c12:	d1e8      	bne.n	8017be6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	699b      	ldr	r3, [r3, #24]
 8017c1a:	2220      	movs	r2, #32
 8017c1c:	4013      	ands	r3, r2
 8017c1e:	2b20      	cmp	r3, #32
 8017c20:	d004      	beq.n	8017c2c <I2C_IsErrorOccurred+0x100>
 8017c22:	2327      	movs	r3, #39	@ 0x27
 8017c24:	18fb      	adds	r3, r7, r3
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d09b      	beq.n	8017b64 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017c2c:	2327      	movs	r3, #39	@ 0x27
 8017c2e:	18fb      	adds	r3, r7, r3
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d103      	bne.n	8017c3e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	2220      	movs	r2, #32
 8017c3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017c3e:	6a3b      	ldr	r3, [r7, #32]
 8017c40:	2204      	movs	r2, #4
 8017c42:	4313      	orrs	r3, r2
 8017c44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017c46:	2327      	movs	r3, #39	@ 0x27
 8017c48:	18fb      	adds	r3, r7, r3
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	699b      	ldr	r3, [r3, #24]
 8017c54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017c56:	69ba      	ldr	r2, [r7, #24]
 8017c58:	2380      	movs	r3, #128	@ 0x80
 8017c5a:	005b      	lsls	r3, r3, #1
 8017c5c:	4013      	ands	r3, r2
 8017c5e:	d00c      	beq.n	8017c7a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017c60:	6a3b      	ldr	r3, [r7, #32]
 8017c62:	2201      	movs	r2, #1
 8017c64:	4313      	orrs	r3, r2
 8017c66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2280      	movs	r2, #128	@ 0x80
 8017c6e:	0052      	lsls	r2, r2, #1
 8017c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017c72:	2327      	movs	r3, #39	@ 0x27
 8017c74:	18fb      	adds	r3, r7, r3
 8017c76:	2201      	movs	r2, #1
 8017c78:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017c7a:	69ba      	ldr	r2, [r7, #24]
 8017c7c:	2380      	movs	r3, #128	@ 0x80
 8017c7e:	00db      	lsls	r3, r3, #3
 8017c80:	4013      	ands	r3, r2
 8017c82:	d00c      	beq.n	8017c9e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017c84:	6a3b      	ldr	r3, [r7, #32]
 8017c86:	2208      	movs	r2, #8
 8017c88:	4313      	orrs	r3, r2
 8017c8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2280      	movs	r2, #128	@ 0x80
 8017c92:	00d2      	lsls	r2, r2, #3
 8017c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017c96:	2327      	movs	r3, #39	@ 0x27
 8017c98:	18fb      	adds	r3, r7, r3
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017c9e:	69ba      	ldr	r2, [r7, #24]
 8017ca0:	2380      	movs	r3, #128	@ 0x80
 8017ca2:	009b      	lsls	r3, r3, #2
 8017ca4:	4013      	ands	r3, r2
 8017ca6:	d00c      	beq.n	8017cc2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
 8017caa:	2202      	movs	r2, #2
 8017cac:	4313      	orrs	r3, r2
 8017cae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	2280      	movs	r2, #128	@ 0x80
 8017cb6:	0092      	lsls	r2, r2, #2
 8017cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017cba:	2327      	movs	r3, #39	@ 0x27
 8017cbc:	18fb      	adds	r3, r7, r3
 8017cbe:	2201      	movs	r2, #1
 8017cc0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8017cc2:	2327      	movs	r3, #39	@ 0x27
 8017cc4:	18fb      	adds	r3, r7, r3
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d01d      	beq.n	8017d08 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	0018      	movs	r0, r3
 8017cd0:	f7ff fcd7 	bl	8017682 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	685a      	ldr	r2, [r3, #4]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	490e      	ldr	r1, [pc, #56]	@ (8017d18 <I2C_IsErrorOccurred+0x1ec>)
 8017ce0:	400a      	ands	r2, r1
 8017ce2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ce8:	6a3b      	ldr	r3, [r7, #32]
 8017cea:	431a      	orrs	r2, r3
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	2241      	movs	r2, #65	@ 0x41
 8017cf4:	2120      	movs	r1, #32
 8017cf6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2242      	movs	r2, #66	@ 0x42
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	2240      	movs	r2, #64	@ 0x40
 8017d04:	2100      	movs	r1, #0
 8017d06:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017d08:	2327      	movs	r3, #39	@ 0x27
 8017d0a:	18fb      	adds	r3, r7, r3
 8017d0c:	781b      	ldrb	r3, [r3, #0]
}
 8017d0e:	0018      	movs	r0, r3
 8017d10:	46bd      	mov	sp, r7
 8017d12:	b00a      	add	sp, #40	@ 0x28
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	46c0      	nop			@ (mov r8, r8)
 8017d18:	fe00e800 	.word	0xfe00e800

08017d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017d1c:	b590      	push	{r4, r7, lr}
 8017d1e:	b087      	sub	sp, #28
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	60f8      	str	r0, [r7, #12]
 8017d24:	0008      	movs	r0, r1
 8017d26:	0011      	movs	r1, r2
 8017d28:	607b      	str	r3, [r7, #4]
 8017d2a:	240a      	movs	r4, #10
 8017d2c:	193b      	adds	r3, r7, r4
 8017d2e:	1c02      	adds	r2, r0, #0
 8017d30:	801a      	strh	r2, [r3, #0]
 8017d32:	2009      	movs	r0, #9
 8017d34:	183b      	adds	r3, r7, r0
 8017d36:	1c0a      	adds	r2, r1, #0
 8017d38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d3a:	193b      	adds	r3, r7, r4
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	059b      	lsls	r3, r3, #22
 8017d40:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017d42:	183b      	adds	r3, r7, r0
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	0419      	lsls	r1, r3, #16
 8017d48:	23ff      	movs	r3, #255	@ 0xff
 8017d4a:	041b      	lsls	r3, r3, #16
 8017d4c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d4e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d56:	4313      	orrs	r3, r2
 8017d58:	005b      	lsls	r3, r3, #1
 8017d5a:	085b      	lsrs	r3, r3, #1
 8017d5c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	685b      	ldr	r3, [r3, #4]
 8017d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d66:	0d51      	lsrs	r1, r2, #21
 8017d68:	2280      	movs	r2, #128	@ 0x80
 8017d6a:	00d2      	lsls	r2, r2, #3
 8017d6c:	400a      	ands	r2, r1
 8017d6e:	4907      	ldr	r1, [pc, #28]	@ (8017d8c <I2C_TransferConfig+0x70>)
 8017d70:	430a      	orrs	r2, r1
 8017d72:	43d2      	mvns	r2, r2
 8017d74:	401a      	ands	r2, r3
 8017d76:	0011      	movs	r1, r2
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	697a      	ldr	r2, [r7, #20]
 8017d7e:	430a      	orrs	r2, r1
 8017d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017d82:	46c0      	nop			@ (mov r8, r8)
 8017d84:	46bd      	mov	sp, r7
 8017d86:	b007      	add	sp, #28
 8017d88:	bd90      	pop	{r4, r7, pc}
 8017d8a:	46c0      	nop			@ (mov r8, r8)
 8017d8c:	03ff63ff 	.word	0x03ff63ff

08017d90 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	000a      	movs	r2, r1
 8017d9a:	1cbb      	adds	r3, r7, #2
 8017d9c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017da6:	4b3e      	ldr	r3, [pc, #248]	@ (8017ea0 <I2C_Enable_IRQ+0x110>)
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d035      	beq.n	8017e18 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017db0:	4b3c      	ldr	r3, [pc, #240]	@ (8017ea4 <I2C_Enable_IRQ+0x114>)
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d030      	beq.n	8017e18 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017dba:	4b3b      	ldr	r3, [pc, #236]	@ (8017ea8 <I2C_Enable_IRQ+0x118>)
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d02b      	beq.n	8017e18 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017dc0:	1cbb      	adds	r3, r7, #2
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	5e9b      	ldrsh	r3, [r3, r2]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	da03      	bge.n	8017dd2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	22b8      	movs	r2, #184	@ 0xb8
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017dd2:	1cbb      	adds	r3, r7, #2
 8017dd4:	881b      	ldrh	r3, [r3, #0]
 8017dd6:	2201      	movs	r2, #1
 8017dd8:	4013      	ands	r3, r2
 8017dda:	d003      	beq.n	8017de4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	22f2      	movs	r2, #242	@ 0xf2
 8017de0:	4313      	orrs	r3, r2
 8017de2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017de4:	1cbb      	adds	r3, r7, #2
 8017de6:	881b      	ldrh	r3, [r3, #0]
 8017de8:	2202      	movs	r2, #2
 8017dea:	4013      	ands	r3, r2
 8017dec:	d003      	beq.n	8017df6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	22f4      	movs	r2, #244	@ 0xf4
 8017df2:	4313      	orrs	r3, r2
 8017df4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017df6:	1cbb      	adds	r3, r7, #2
 8017df8:	881b      	ldrh	r3, [r3, #0]
 8017dfa:	2b10      	cmp	r3, #16
 8017dfc:	d103      	bne.n	8017e06 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	2290      	movs	r2, #144	@ 0x90
 8017e02:	4313      	orrs	r3, r2
 8017e04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017e06:	1cbb      	adds	r3, r7, #2
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	2b20      	cmp	r3, #32
 8017e0c:	d13c      	bne.n	8017e88 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	2220      	movs	r2, #32
 8017e12:	4313      	orrs	r3, r2
 8017e14:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017e16:	e037      	b.n	8017e88 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017e18:	1cbb      	adds	r3, r7, #2
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	da03      	bge.n	8017e2a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	22b8      	movs	r2, #184	@ 0xb8
 8017e26:	4313      	orrs	r3, r2
 8017e28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017e2a:	1cbb      	adds	r3, r7, #2
 8017e2c:	881b      	ldrh	r3, [r3, #0]
 8017e2e:	2201      	movs	r2, #1
 8017e30:	4013      	ands	r3, r2
 8017e32:	d003      	beq.n	8017e3c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	22f2      	movs	r2, #242	@ 0xf2
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017e3c:	1cbb      	adds	r3, r7, #2
 8017e3e:	881b      	ldrh	r3, [r3, #0]
 8017e40:	2202      	movs	r2, #2
 8017e42:	4013      	ands	r3, r2
 8017e44:	d003      	beq.n	8017e4e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	22f4      	movs	r2, #244	@ 0xf4
 8017e4a:	4313      	orrs	r3, r2
 8017e4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017e4e:	1cbb      	adds	r3, r7, #2
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	2b10      	cmp	r3, #16
 8017e54:	d103      	bne.n	8017e5e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	2290      	movs	r2, #144	@ 0x90
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017e5e:	1cbb      	adds	r3, r7, #2
 8017e60:	881b      	ldrh	r3, [r3, #0]
 8017e62:	2b20      	cmp	r3, #32
 8017e64:	d103      	bne.n	8017e6e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	2260      	movs	r2, #96	@ 0x60
 8017e6a:	4313      	orrs	r3, r2
 8017e6c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017e72:	4b0d      	ldr	r3, [pc, #52]	@ (8017ea8 <I2C_Enable_IRQ+0x118>)
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d007      	beq.n	8017e88 <I2C_Enable_IRQ+0xf8>
 8017e78:	1cbb      	adds	r3, r7, #2
 8017e7a:	881b      	ldrh	r3, [r3, #0]
 8017e7c:	2b40      	cmp	r3, #64	@ 0x40
 8017e7e:	d103      	bne.n	8017e88 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	2240      	movs	r2, #64	@ 0x40
 8017e84:	4313      	orrs	r3, r2
 8017e86:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	6819      	ldr	r1, [r3, #0]
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	68fa      	ldr	r2, [r7, #12]
 8017e94:	430a      	orrs	r2, r1
 8017e96:	601a      	str	r2, [r3, #0]
}
 8017e98:	46c0      	nop			@ (mov r8, r8)
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	b004      	add	sp, #16
 8017e9e:	bd80      	pop	{r7, pc}
 8017ea0:	080165cd 	.word	0x080165cd
 8017ea4:	08016a45 	.word	0x08016a45
 8017ea8:	080167e5 	.word	0x080167e5

08017eac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	000a      	movs	r2, r1
 8017eb6:	1cbb      	adds	r3, r7, #2
 8017eb8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017ebe:	1cbb      	adds	r3, r7, #2
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	4013      	ands	r3, r2
 8017ec6:	d010      	beq.n	8017eea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	2242      	movs	r2, #66	@ 0x42
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2241      	movs	r2, #65	@ 0x41
 8017ed4:	5c9b      	ldrb	r3, [r3, r2]
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	001a      	movs	r2, r3
 8017eda:	2328      	movs	r3, #40	@ 0x28
 8017edc:	4013      	ands	r3, r2
 8017ede:	2b28      	cmp	r3, #40	@ 0x28
 8017ee0:	d003      	beq.n	8017eea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	22b0      	movs	r2, #176	@ 0xb0
 8017ee6:	4313      	orrs	r3, r2
 8017ee8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017eea:	1cbb      	adds	r3, r7, #2
 8017eec:	881b      	ldrh	r3, [r3, #0]
 8017eee:	2202      	movs	r2, #2
 8017ef0:	4013      	ands	r3, r2
 8017ef2:	d010      	beq.n	8017f16 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	2244      	movs	r2, #68	@ 0x44
 8017ef8:	4313      	orrs	r3, r2
 8017efa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2241      	movs	r2, #65	@ 0x41
 8017f00:	5c9b      	ldrb	r3, [r3, r2]
 8017f02:	b2db      	uxtb	r3, r3
 8017f04:	001a      	movs	r2, r3
 8017f06:	2328      	movs	r3, #40	@ 0x28
 8017f08:	4013      	ands	r3, r2
 8017f0a:	2b28      	cmp	r3, #40	@ 0x28
 8017f0c:	d003      	beq.n	8017f16 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	22b0      	movs	r2, #176	@ 0xb0
 8017f12:	4313      	orrs	r3, r2
 8017f14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017f16:	1cbb      	adds	r3, r7, #2
 8017f18:	2200      	movs	r2, #0
 8017f1a:	5e9b      	ldrsh	r3, [r3, r2]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	da03      	bge.n	8017f28 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	22b8      	movs	r2, #184	@ 0xb8
 8017f24:	4313      	orrs	r3, r2
 8017f26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017f28:	1cbb      	adds	r3, r7, #2
 8017f2a:	881b      	ldrh	r3, [r3, #0]
 8017f2c:	2b10      	cmp	r3, #16
 8017f2e:	d103      	bne.n	8017f38 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	2290      	movs	r2, #144	@ 0x90
 8017f34:	4313      	orrs	r3, r2
 8017f36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017f38:	1cbb      	adds	r3, r7, #2
 8017f3a:	881b      	ldrh	r3, [r3, #0]
 8017f3c:	2b20      	cmp	r3, #32
 8017f3e:	d103      	bne.n	8017f48 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	2220      	movs	r2, #32
 8017f44:	4313      	orrs	r3, r2
 8017f46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017f48:	1cbb      	adds	r3, r7, #2
 8017f4a:	881b      	ldrh	r3, [r3, #0]
 8017f4c:	2b40      	cmp	r3, #64	@ 0x40
 8017f4e:	d103      	bne.n	8017f58 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2240      	movs	r2, #64	@ 0x40
 8017f54:	4313      	orrs	r3, r2
 8017f56:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	43d9      	mvns	r1, r3
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	400a      	ands	r2, r1
 8017f68:	601a      	str	r2, [r3, #0]
}
 8017f6a:	46c0      	nop			@ (mov r8, r8)
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	b004      	add	sp, #16
 8017f70:	bd80      	pop	{r7, pc}
	...

08017f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b082      	sub	sp, #8
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2241      	movs	r2, #65	@ 0x41
 8017f82:	5c9b      	ldrb	r3, [r3, r2]
 8017f84:	b2db      	uxtb	r3, r3
 8017f86:	2b20      	cmp	r3, #32
 8017f88:	d138      	bne.n	8017ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2240      	movs	r2, #64	@ 0x40
 8017f8e:	5c9b      	ldrb	r3, [r3, r2]
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d101      	bne.n	8017f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017f94:	2302      	movs	r3, #2
 8017f96:	e032      	b.n	8017ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2240      	movs	r2, #64	@ 0x40
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2241      	movs	r2, #65	@ 0x41
 8017fa4:	2124      	movs	r1, #36	@ 0x24
 8017fa6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	681a      	ldr	r2, [r3, #0]
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2101      	movs	r1, #1
 8017fb4:	438a      	bics	r2, r1
 8017fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	681a      	ldr	r2, [r3, #0]
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4911      	ldr	r1, [pc, #68]	@ (8018008 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8017fc4:	400a      	ands	r2, r1
 8017fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	6819      	ldr	r1, [r3, #0]
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	683a      	ldr	r2, [r7, #0]
 8017fd4:	430a      	orrs	r2, r1
 8017fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	681a      	ldr	r2, [r3, #0]
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	2101      	movs	r1, #1
 8017fe4:	430a      	orrs	r2, r1
 8017fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2241      	movs	r2, #65	@ 0x41
 8017fec:	2120      	movs	r1, #32
 8017fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2240      	movs	r2, #64	@ 0x40
 8017ff4:	2100      	movs	r1, #0
 8017ff6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	e000      	b.n	8017ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017ffc:	2302      	movs	r3, #2
  }
}
 8017ffe:	0018      	movs	r0, r3
 8018000:	46bd      	mov	sp, r7
 8018002:	b002      	add	sp, #8
 8018004:	bd80      	pop	{r7, pc}
 8018006:	46c0      	nop			@ (mov r8, r8)
 8018008:	ffffefff 	.word	0xffffefff

0801800c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2241      	movs	r2, #65	@ 0x41
 801801a:	5c9b      	ldrb	r3, [r3, r2]
 801801c:	b2db      	uxtb	r3, r3
 801801e:	2b20      	cmp	r3, #32
 8018020:	d139      	bne.n	8018096 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2240      	movs	r2, #64	@ 0x40
 8018026:	5c9b      	ldrb	r3, [r3, r2]
 8018028:	2b01      	cmp	r3, #1
 801802a:	d101      	bne.n	8018030 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801802c:	2302      	movs	r3, #2
 801802e:	e033      	b.n	8018098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2240      	movs	r2, #64	@ 0x40
 8018034:	2101      	movs	r1, #1
 8018036:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2241      	movs	r2, #65	@ 0x41
 801803c:	2124      	movs	r1, #36	@ 0x24
 801803e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	681a      	ldr	r2, [r3, #0]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	2101      	movs	r1, #1
 801804c:	438a      	bics	r2, r1
 801804e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	4a11      	ldr	r2, [pc, #68]	@ (80180a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801805c:	4013      	ands	r3, r2
 801805e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	021b      	lsls	r3, r3, #8
 8018064:	68fa      	ldr	r2, [r7, #12]
 8018066:	4313      	orrs	r3, r2
 8018068:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	68fa      	ldr	r2, [r7, #12]
 8018070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	681a      	ldr	r2, [r3, #0]
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	2101      	movs	r1, #1
 801807e:	430a      	orrs	r2, r1
 8018080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2241      	movs	r2, #65	@ 0x41
 8018086:	2120      	movs	r1, #32
 8018088:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2240      	movs	r2, #64	@ 0x40
 801808e:	2100      	movs	r1, #0
 8018090:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018092:	2300      	movs	r3, #0
 8018094:	e000      	b.n	8018098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018096:	2302      	movs	r3, #2
  }
}
 8018098:	0018      	movs	r0, r3
 801809a:	46bd      	mov	sp, r7
 801809c:	b004      	add	sp, #16
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	fffff0ff 	.word	0xfffff0ff

080180a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b088      	sub	sp, #32
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d101      	bne.n	80180b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80180b2:	2301      	movs	r3, #1
 80180b4:	e0e1      	b.n	801827a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2235      	movs	r2, #53	@ 0x35
 80180ba:	5c9b      	ldrb	r3, [r3, r2]
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d107      	bne.n	80180d2 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2234      	movs	r2, #52	@ 0x34
 80180c6:	2100      	movs	r1, #0
 80180c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	0018      	movs	r0, r3
 80180ce:	f7f3 ffab 	bl	800c028 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2235      	movs	r2, #53	@ 0x35
 80180d6:	2102      	movs	r1, #2
 80180d8:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	69da      	ldr	r2, [r3, #28]
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	4967      	ldr	r1, [pc, #412]	@ (8018284 <HAL_I2S_Init+0x1e0>)
 80180e6:	400a      	ands	r2, r1
 80180e8:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	2202      	movs	r2, #2
 80180f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	695b      	ldr	r3, [r3, #20]
 80180f6:	2b02      	cmp	r3, #2
 80180f8:	d073      	beq.n	80181e2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	68db      	ldr	r3, [r3, #12]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d102      	bne.n	8018108 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018102:	2310      	movs	r3, #16
 8018104:	617b      	str	r3, [r7, #20]
 8018106:	e001      	b.n	801810c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018108:	2320      	movs	r3, #32
 801810a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	689b      	ldr	r3, [r3, #8]
 8018110:	2b20      	cmp	r3, #32
 8018112:	d802      	bhi.n	801811a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	005b      	lsls	r3, r3, #1
 8018118:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801811a:	f002 fed3 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801811e:	0003      	movs	r3, r0
 8018120:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	691a      	ldr	r2, [r3, #16]
 8018126:	2380      	movs	r3, #128	@ 0x80
 8018128:	009b      	lsls	r3, r3, #2
 801812a:	429a      	cmp	r2, r3
 801812c:	d131      	bne.n	8018192 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	68db      	ldr	r3, [r3, #12]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d016      	beq.n	8018164 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	0019      	movs	r1, r3
 801813c:	68f8      	ldr	r0, [r7, #12]
 801813e:	f7e8 f831 	bl	80001a4 <__udivsi3>
 8018142:	0003      	movs	r3, r0
 8018144:	001a      	movs	r2, r3
 8018146:	0013      	movs	r3, r2
 8018148:	009b      	lsls	r3, r3, #2
 801814a:	189b      	adds	r3, r3, r2
 801814c:	005b      	lsls	r3, r3, #1
 801814e:	001a      	movs	r2, r3
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	695b      	ldr	r3, [r3, #20]
 8018154:	0019      	movs	r1, r3
 8018156:	0010      	movs	r0, r2
 8018158:	f7e8 f824 	bl	80001a4 <__udivsi3>
 801815c:	0003      	movs	r3, r0
 801815e:	3305      	adds	r3, #5
 8018160:	613b      	str	r3, [r7, #16]
 8018162:	e02a      	b.n	80181ba <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	00db      	lsls	r3, r3, #3
 8018168:	0019      	movs	r1, r3
 801816a:	68f8      	ldr	r0, [r7, #12]
 801816c:	f7e8 f81a 	bl	80001a4 <__udivsi3>
 8018170:	0003      	movs	r3, r0
 8018172:	001a      	movs	r2, r3
 8018174:	0013      	movs	r3, r2
 8018176:	009b      	lsls	r3, r3, #2
 8018178:	189b      	adds	r3, r3, r2
 801817a:	005b      	lsls	r3, r3, #1
 801817c:	001a      	movs	r2, r3
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	695b      	ldr	r3, [r3, #20]
 8018182:	0019      	movs	r1, r3
 8018184:	0010      	movs	r0, r2
 8018186:	f7e8 f80d 	bl	80001a4 <__udivsi3>
 801818a:	0003      	movs	r3, r0
 801818c:	3305      	adds	r3, #5
 801818e:	613b      	str	r3, [r7, #16]
 8018190:	e013      	b.n	80181ba <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018192:	6979      	ldr	r1, [r7, #20]
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f7e8 f805 	bl	80001a4 <__udivsi3>
 801819a:	0003      	movs	r3, r0
 801819c:	001a      	movs	r2, r3
 801819e:	0013      	movs	r3, r2
 80181a0:	009b      	lsls	r3, r3, #2
 80181a2:	189b      	adds	r3, r3, r2
 80181a4:	005b      	lsls	r3, r3, #1
 80181a6:	001a      	movs	r2, r3
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	695b      	ldr	r3, [r3, #20]
 80181ac:	0019      	movs	r1, r3
 80181ae:	0010      	movs	r0, r2
 80181b0:	f7e7 fff8 	bl	80001a4 <__udivsi3>
 80181b4:	0003      	movs	r3, r0
 80181b6:	3305      	adds	r3, #5
 80181b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	210a      	movs	r1, #10
 80181be:	0018      	movs	r0, r3
 80181c0:	f7e7 fff0 	bl	80001a4 <__udivsi3>
 80181c4:	0003      	movs	r3, r0
 80181c6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	2201      	movs	r2, #1
 80181cc:	4013      	ands	r3, r2
 80181ce:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80181d0:	693a      	ldr	r2, [r7, #16]
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	1ad3      	subs	r3, r2, r3
 80181d6:	085b      	lsrs	r3, r3, #1
 80181d8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80181da:	69bb      	ldr	r3, [r7, #24]
 80181dc:	021b      	lsls	r3, r3, #8
 80181de:	61bb      	str	r3, [r7, #24]
 80181e0:	e003      	b.n	80181ea <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80181e2:	2302      	movs	r3, #2
 80181e4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80181e6:	2300      	movs	r3, #0
 80181e8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80181ea:	69fb      	ldr	r3, [r7, #28]
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	d902      	bls.n	80181f6 <HAL_I2S_Init+0x152>
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	2bff      	cmp	r3, #255	@ 0xff
 80181f4:	d907      	bls.n	8018206 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80181fa:	2210      	movs	r2, #16
 80181fc:	431a      	orrs	r2, r3
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018202:	2301      	movs	r3, #1
 8018204:	e039      	b.n	801827a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	691a      	ldr	r2, [r3, #16]
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	431a      	orrs	r2, r3
 801820e:	0011      	movs	r1, r2
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	69fa      	ldr	r2, [r7, #28]
 8018216:	430a      	orrs	r2, r1
 8018218:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	69db      	ldr	r3, [r3, #28]
 8018220:	4a18      	ldr	r2, [pc, #96]	@ (8018284 <HAL_I2S_Init+0x1e0>)
 8018222:	401a      	ands	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6859      	ldr	r1, [r3, #4]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	689b      	ldr	r3, [r3, #8]
 801822c:	4319      	orrs	r1, r3
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	68db      	ldr	r3, [r3, #12]
 8018232:	4319      	orrs	r1, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	699b      	ldr	r3, [r3, #24]
 8018238:	430b      	orrs	r3, r1
 801823a:	431a      	orrs	r2, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2180      	movs	r1, #128	@ 0x80
 8018242:	0109      	lsls	r1, r1, #4
 8018244:	430a      	orrs	r2, r1
 8018246:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	689b      	ldr	r3, [r3, #8]
 801824c:	2b30      	cmp	r3, #48	@ 0x30
 801824e:	d003      	beq.n	8018258 <HAL_I2S_Init+0x1b4>
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	689b      	ldr	r3, [r3, #8]
 8018254:	2bb0      	cmp	r3, #176	@ 0xb0
 8018256:	d108      	bne.n	801826a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	69da      	ldr	r2, [r3, #28]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	2180      	movs	r1, #128	@ 0x80
 8018264:	0149      	lsls	r1, r1, #5
 8018266:	430a      	orrs	r2, r1
 8018268:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2200      	movs	r2, #0
 801826e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2235      	movs	r2, #53	@ 0x35
 8018274:	2101      	movs	r1, #1
 8018276:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018278:	2300      	movs	r3, #0
}
 801827a:	0018      	movs	r0, r3
 801827c:	46bd      	mov	sp, r7
 801827e:	b008      	add	sp, #32
 8018280:	bd80      	pop	{r7, pc}
 8018282:	46c0      	nop			@ (mov r8, r8)
 8018284:	fffff040 	.word	0xfffff040

08018288 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	1dbb      	adds	r3, r7, #6
 8018294:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d003      	beq.n	80182a4 <HAL_I2S_Receive_DMA+0x1c>
 801829c:	1dbb      	adds	r3, r7, #6
 801829e:	881b      	ldrh	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d101      	bne.n	80182a8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80182a4:	2301      	movs	r3, #1
 80182a6:	e0a6      	b.n	80183f6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	2234      	movs	r2, #52	@ 0x34
 80182ac:	5c9b      	ldrb	r3, [r3, r2]
 80182ae:	b2db      	uxtb	r3, r3
 80182b0:	2b01      	cmp	r3, #1
 80182b2:	d101      	bne.n	80182b8 <HAL_I2S_Receive_DMA+0x30>
 80182b4:	2302      	movs	r3, #2
 80182b6:	e09e      	b.n	80183f6 <HAL_I2S_Receive_DMA+0x16e>
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	2234      	movs	r2, #52	@ 0x34
 80182bc:	2101      	movs	r1, #1
 80182be:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	2235      	movs	r2, #53	@ 0x35
 80182c4:	5c9b      	ldrb	r3, [r3, r2]
 80182c6:	b2db      	uxtb	r3, r3
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d005      	beq.n	80182d8 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2234      	movs	r2, #52	@ 0x34
 80182d0:	2100      	movs	r1, #0
 80182d2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80182d4:	2302      	movs	r3, #2
 80182d6:	e08e      	b.n	80183f6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	2235      	movs	r2, #53	@ 0x35
 80182dc:	2104      	movs	r1, #4
 80182de:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	2200      	movs	r2, #0
 80182e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	68ba      	ldr	r2, [r7, #8]
 80182ea:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	69db      	ldr	r3, [r3, #28]
 80182f2:	2207      	movs	r2, #7
 80182f4:	4013      	ands	r3, r2
 80182f6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80182f8:	697b      	ldr	r3, [r7, #20]
 80182fa:	2b03      	cmp	r3, #3
 80182fc:	d002      	beq.n	8018304 <HAL_I2S_Receive_DMA+0x7c>
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	2b05      	cmp	r3, #5
 8018302:	d10c      	bne.n	801831e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8018304:	1dbb      	adds	r3, r7, #6
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	18db      	adds	r3, r3, r3
 801830a:	b29a      	uxth	r2, r3
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8018310:	1dbb      	adds	r3, r7, #6
 8018312:	881b      	ldrh	r3, [r3, #0]
 8018314:	18db      	adds	r3, r3, r3
 8018316:	b29a      	uxth	r2, r3
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801831c:	e007      	b.n	801832e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	1dba      	adds	r2, r7, #6
 8018322:	8812      	ldrh	r2, [r2, #0]
 8018324:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	1dba      	adds	r2, r7, #6
 801832a:	8812      	ldrh	r2, [r2, #0]
 801832c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018332:	4a33      	ldr	r2, [pc, #204]	@ (8018400 <HAL_I2S_Receive_DMA+0x178>)
 8018334:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801833a:	4a32      	ldr	r2, [pc, #200]	@ (8018404 <HAL_I2S_Receive_DMA+0x17c>)
 801833c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018342:	4a31      	ldr	r2, [pc, #196]	@ (8018408 <HAL_I2S_Receive_DMA+0x180>)
 8018344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	69da      	ldr	r2, [r3, #28]
 801834c:	23c0      	movs	r3, #192	@ 0xc0
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	401a      	ands	r2, r3
 8018352:	23c0      	movs	r3, #192	@ 0xc0
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	429a      	cmp	r2, r3
 8018358:	d10a      	bne.n	8018370 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801835a:	2300      	movs	r3, #0
 801835c:	613b      	str	r3, [r7, #16]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	613b      	str	r3, [r7, #16]
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	689b      	ldr	r3, [r3, #8]
 801836c:	613b      	str	r3, [r7, #16]
 801836e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	330c      	adds	r3, #12
 801837a:	0019      	movs	r1, r3
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018380:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018386:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018388:	f7fc f996 	bl	80146b8 <HAL_DMA_Start_IT>
 801838c:	1e03      	subs	r3, r0, #0
 801838e:	d00f      	beq.n	80183b0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018394:	2208      	movs	r2, #8
 8018396:	431a      	orrs	r2, r3
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	2235      	movs	r2, #53	@ 0x35
 80183a0:	2101      	movs	r1, #1
 80183a2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2234      	movs	r2, #52	@ 0x34
 80183a8:	2100      	movs	r1, #0
 80183aa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80183ac:	2301      	movs	r3, #1
 80183ae:	e022      	b.n	80183f6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	69da      	ldr	r2, [r3, #28]
 80183b6:	2380      	movs	r3, #128	@ 0x80
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	4013      	ands	r3, r2
 80183bc:	d108      	bne.n	80183d0 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	69da      	ldr	r2, [r3, #28]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	2180      	movs	r1, #128	@ 0x80
 80183ca:	00c9      	lsls	r1, r1, #3
 80183cc:	430a      	orrs	r2, r1
 80183ce:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	2201      	movs	r2, #1
 80183d8:	4013      	ands	r3, r2
 80183da:	d107      	bne.n	80183ec <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	685a      	ldr	r2, [r3, #4]
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2101      	movs	r1, #1
 80183e8:	430a      	orrs	r2, r1
 80183ea:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	2234      	movs	r2, #52	@ 0x34
 80183f0:	2100      	movs	r1, #0
 80183f2:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80183f4:	2300      	movs	r3, #0
}
 80183f6:	0018      	movs	r0, r3
 80183f8:	46bd      	mov	sp, r7
 80183fa:	b006      	add	sp, #24
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	46c0      	nop			@ (mov r8, r8)
 8018400:	080185e9 	.word	0x080185e9
 8018404:	080185a5 	.word	0x080185a5
 8018408:	08018607 	.word	0x08018607

0801840c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b086      	sub	sp, #24
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018414:	2317      	movs	r3, #23
 8018416:	18fb      	adds	r3, r7, r3
 8018418:	2200      	movs	r2, #0
 801841a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	685a      	ldr	r2, [r3, #4]
 8018420:	2380      	movs	r3, #128	@ 0x80
 8018422:	009b      	lsls	r3, r3, #2
 8018424:	429a      	cmp	r2, r3
 8018426:	d003      	beq.n	8018430 <HAL_I2S_DMAStop+0x24>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	685b      	ldr	r3, [r3, #4]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d158      	bne.n	80184e2 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018434:	2b00      	cmp	r3, #0
 8018436:	d010      	beq.n	801845a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801843c:	0018      	movs	r0, r3
 801843e:	f7fc f9a1 	bl	8014784 <HAL_DMA_Abort>
 8018442:	1e03      	subs	r3, r0, #0
 8018444:	d009      	beq.n	801845a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801844a:	2208      	movs	r2, #8
 801844c:	431a      	orrs	r2, r3
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8018452:	2317      	movs	r3, #23
 8018454:	18fb      	adds	r3, r7, r3
 8018456:	2201      	movs	r2, #1
 8018458:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801845a:	6878      	ldr	r0, [r7, #4]
 801845c:	2364      	movs	r3, #100	@ 0x64
 801845e:	2201      	movs	r2, #1
 8018460:	2102      	movs	r1, #2
 8018462:	f000 f8f7 	bl	8018654 <I2S_WaitFlagStateUntilTimeout>
 8018466:	1e03      	subs	r3, r0, #0
 8018468:	d00d      	beq.n	8018486 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801846e:	2201      	movs	r2, #1
 8018470:	431a      	orrs	r2, r3
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2235      	movs	r2, #53	@ 0x35
 801847a:	2101      	movs	r1, #1
 801847c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801847e:	2317      	movs	r3, #23
 8018480:	18fb      	adds	r3, r7, r3
 8018482:	2201      	movs	r2, #1
 8018484:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8018486:	6878      	ldr	r0, [r7, #4]
 8018488:	2364      	movs	r3, #100	@ 0x64
 801848a:	2200      	movs	r2, #0
 801848c:	2180      	movs	r1, #128	@ 0x80
 801848e:	f000 f8e1 	bl	8018654 <I2S_WaitFlagStateUntilTimeout>
 8018492:	1e03      	subs	r3, r0, #0
 8018494:	d00d      	beq.n	80184b2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801849a:	2201      	movs	r2, #1
 801849c:	431a      	orrs	r2, r3
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2235      	movs	r2, #53	@ 0x35
 80184a6:	2101      	movs	r1, #1
 80184a8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80184aa:	2317      	movs	r3, #23
 80184ac:	18fb      	adds	r3, r7, r3
 80184ae:	2201      	movs	r2, #1
 80184b0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	69da      	ldr	r2, [r3, #28]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	4938      	ldr	r1, [pc, #224]	@ (80185a0 <HAL_I2S_DMAStop+0x194>)
 80184be:	400a      	ands	r2, r1
 80184c0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80184c2:	2300      	movs	r3, #0
 80184c4:	613b      	str	r3, [r7, #16]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	689b      	ldr	r3, [r3, #8]
 80184cc:	613b      	str	r3, [r7, #16]
 80184ce:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	685a      	ldr	r2, [r3, #4]
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	2102      	movs	r1, #2
 80184dc:	438a      	bics	r2, r1
 80184de:	605a      	str	r2, [r3, #4]
 80184e0:	e053      	b.n	801858a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	685a      	ldr	r2, [r3, #4]
 80184e6:	23c0      	movs	r3, #192	@ 0xc0
 80184e8:	009b      	lsls	r3, r3, #2
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d005      	beq.n	80184fa <HAL_I2S_DMAStop+0xee>
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	685a      	ldr	r2, [r3, #4]
 80184f2:	2380      	movs	r3, #128	@ 0x80
 80184f4:	005b      	lsls	r3, r3, #1
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d147      	bne.n	801858a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d010      	beq.n	8018524 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018506:	0018      	movs	r0, r3
 8018508:	f7fc f93c 	bl	8014784 <HAL_DMA_Abort>
 801850c:	1e03      	subs	r3, r0, #0
 801850e:	d009      	beq.n	8018524 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018514:	2208      	movs	r2, #8
 8018516:	431a      	orrs	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801851c:	2317      	movs	r3, #23
 801851e:	18fb      	adds	r3, r7, r3
 8018520:	2201      	movs	r2, #1
 8018522:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	69da      	ldr	r2, [r3, #28]
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	491c      	ldr	r1, [pc, #112]	@ (80185a0 <HAL_I2S_DMAStop+0x194>)
 8018530:	400a      	ands	r2, r1
 8018532:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018534:	2300      	movs	r3, #0
 8018536:	60fb      	str	r3, [r7, #12]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68db      	ldr	r3, [r3, #12]
 801853e:	60fb      	str	r3, [r7, #12]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	689b      	ldr	r3, [r3, #8]
 8018546:	60fb      	str	r3, [r7, #12]
 8018548:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	685a      	ldr	r2, [r3, #4]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2101      	movs	r1, #1
 8018556:	438a      	bics	r2, r1
 8018558:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	685a      	ldr	r2, [r3, #4]
 801855e:	2380      	movs	r3, #128	@ 0x80
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	429a      	cmp	r2, r3
 8018564:	d10e      	bne.n	8018584 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801856a:	2240      	movs	r2, #64	@ 0x40
 801856c:	431a      	orrs	r2, r3
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2235      	movs	r2, #53	@ 0x35
 8018576:	2101      	movs	r1, #1
 8018578:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801857a:	2317      	movs	r3, #23
 801857c:	18fb      	adds	r3, r7, r3
 801857e:	2201      	movs	r2, #1
 8018580:	701a      	strb	r2, [r3, #0]
 8018582:	e002      	b.n	801858a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	2235      	movs	r2, #53	@ 0x35
 801858e:	2101      	movs	r1, #1
 8018590:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8018592:	2317      	movs	r3, #23
 8018594:	18fb      	adds	r3, r7, r3
 8018596:	781b      	ldrb	r3, [r3, #0]
}
 8018598:	0018      	movs	r0, r3
 801859a:	46bd      	mov	sp, r7
 801859c:	b006      	add	sp, #24
 801859e:	bd80      	pop	{r7, pc}
 80185a0:	fffffbff 	.word	0xfffffbff

080185a4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	69db      	ldr	r3, [r3, #28]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d10e      	bne.n	80185d8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	685a      	ldr	r2, [r3, #4]
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2101      	movs	r1, #1
 80185c6:	438a      	bics	r2, r1
 80185c8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	2200      	movs	r2, #0
 80185ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	2235      	movs	r2, #53	@ 0x35
 80185d4:	2101      	movs	r1, #1
 80185d6:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	0018      	movs	r0, r3
 80185dc:	f7f8 fcc6 	bl	8010f6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80185e0:	46c0      	nop			@ (mov r8, r8)
 80185e2:	46bd      	mov	sp, r7
 80185e4:	b004      	add	sp, #16
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	0018      	movs	r0, r3
 80185fa:	f7f8 fca5 	bl	8010f48 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80185fe:	46c0      	nop			@ (mov r8, r8)
 8018600:	46bd      	mov	sp, r7
 8018602:	b004      	add	sp, #16
 8018604:	bd80      	pop	{r7, pc}

08018606 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8018606:	b580      	push	{r7, lr}
 8018608:	b084      	sub	sp, #16
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018612:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	685a      	ldr	r2, [r3, #4]
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	2103      	movs	r1, #3
 8018620:	438a      	bics	r2, r1
 8018622:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	2200      	movs	r2, #0
 8018628:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2200      	movs	r2, #0
 801862e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2235      	movs	r2, #53	@ 0x35
 8018634:	2101      	movs	r1, #1
 8018636:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801863c:	2208      	movs	r2, #8
 801863e:	431a      	orrs	r2, r3
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	0018      	movs	r0, r3
 8018648:	f7f8 fcde 	bl	8011008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801864c:	46c0      	nop			@ (mov r8, r8)
 801864e:	46bd      	mov	sp, r7
 8018650:	b004      	add	sp, #16
 8018652:	bd80      	pop	{r7, pc}

08018654 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b086      	sub	sp, #24
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	60b9      	str	r1, [r7, #8]
 801865e:	603b      	str	r3, [r7, #0]
 8018660:	1dfb      	adds	r3, r7, #7
 8018662:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8018664:	f7fb fad6 	bl	8013c14 <HAL_GetTick>
 8018668:	0003      	movs	r3, r0
 801866a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801866c:	e017      	b.n	801869e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	3301      	adds	r3, #1
 8018672:	d014      	beq.n	801869e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8018674:	f7fb face 	bl	8013c14 <HAL_GetTick>
 8018678:	0002      	movs	r2, r0
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	1ad3      	subs	r3, r2, r3
 801867e:	683a      	ldr	r2, [r7, #0]
 8018680:	429a      	cmp	r2, r3
 8018682:	d902      	bls.n	801868a <I2S_WaitFlagStateUntilTimeout+0x36>
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d109      	bne.n	801869e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	2235      	movs	r2, #53	@ 0x35
 801868e:	2101      	movs	r1, #1
 8018690:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	2234      	movs	r2, #52	@ 0x34
 8018696:	2100      	movs	r1, #0
 8018698:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801869a:	2303      	movs	r3, #3
 801869c:	e00f      	b.n	80186be <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	689b      	ldr	r3, [r3, #8]
 80186a4:	68ba      	ldr	r2, [r7, #8]
 80186a6:	4013      	ands	r3, r2
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	1ad3      	subs	r3, r2, r3
 80186ac:	425a      	negs	r2, r3
 80186ae:	4153      	adcs	r3, r2
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	001a      	movs	r2, r3
 80186b4:	1dfb      	adds	r3, r7, #7
 80186b6:	781b      	ldrb	r3, [r3, #0]
 80186b8:	429a      	cmp	r2, r3
 80186ba:	d1d8      	bne.n	801866e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80186bc:	2300      	movs	r3, #0
}
 80186be:	0018      	movs	r0, r3
 80186c0:	46bd      	mov	sp, r7
 80186c2:	b006      	add	sp, #24
 80186c4:	bd80      	pop	{r7, pc}
	...

080186c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80186c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186ca:	b08b      	sub	sp, #44	@ 0x2c
 80186cc:	af06      	add	r7, sp, #24
 80186ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d101      	bne.n	80186da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80186d6:	2301      	movs	r3, #1
 80186d8:	e0f0      	b.n	80188bc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	4a79      	ldr	r2, [pc, #484]	@ (80188c4 <HAL_PCD_Init+0x1fc>)
 80186de:	5c9b      	ldrb	r3, [r3, r2]
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d108      	bne.n	80186f8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80186e6:	687a      	ldr	r2, [r7, #4]
 80186e8:	23aa      	movs	r3, #170	@ 0xaa
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	2100      	movs	r1, #0
 80186ee:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	0018      	movs	r0, r3
 80186f4:	f009 ff6a 	bl	80225cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	4a72      	ldr	r2, [pc, #456]	@ (80188c4 <HAL_PCD_Init+0x1fc>)
 80186fc:	2103      	movs	r1, #3
 80186fe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	0018      	movs	r0, r3
 8018706:	f005 ff1b 	bl	801e540 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801870a:	230f      	movs	r3, #15
 801870c:	18fb      	adds	r3, r7, r3
 801870e:	2200      	movs	r2, #0
 8018710:	701a      	strb	r2, [r3, #0]
 8018712:	e049      	b.n	80187a8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8018714:	200f      	movs	r0, #15
 8018716:	183b      	adds	r3, r7, r0
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	6879      	ldr	r1, [r7, #4]
 801871c:	1c5a      	adds	r2, r3, #1
 801871e:	0013      	movs	r3, r2
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	189b      	adds	r3, r3, r2
 8018724:	00db      	lsls	r3, r3, #3
 8018726:	18cb      	adds	r3, r1, r3
 8018728:	3301      	adds	r3, #1
 801872a:	2201      	movs	r2, #1
 801872c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801872e:	183b      	adds	r3, r7, r0
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	6879      	ldr	r1, [r7, #4]
 8018734:	1c5a      	adds	r2, r3, #1
 8018736:	0013      	movs	r3, r2
 8018738:	009b      	lsls	r3, r3, #2
 801873a:	189b      	adds	r3, r3, r2
 801873c:	00db      	lsls	r3, r3, #3
 801873e:	183a      	adds	r2, r7, r0
 8018740:	7812      	ldrb	r2, [r2, #0]
 8018742:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8018744:	183b      	adds	r3, r7, r0
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	6879      	ldr	r1, [r7, #4]
 801874a:	1c5a      	adds	r2, r3, #1
 801874c:	0013      	movs	r3, r2
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	189b      	adds	r3, r3, r2
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	18cb      	adds	r3, r1, r3
 8018756:	3303      	adds	r3, #3
 8018758:	2200      	movs	r2, #0
 801875a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801875c:	183b      	adds	r3, r7, r0
 801875e:	781a      	ldrb	r2, [r3, #0]
 8018760:	6879      	ldr	r1, [r7, #4]
 8018762:	0013      	movs	r3, r2
 8018764:	009b      	lsls	r3, r3, #2
 8018766:	189b      	adds	r3, r3, r2
 8018768:	00db      	lsls	r3, r3, #3
 801876a:	18cb      	adds	r3, r1, r3
 801876c:	3338      	adds	r3, #56	@ 0x38
 801876e:	2200      	movs	r2, #0
 8018770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8018772:	183b      	adds	r3, r7, r0
 8018774:	781a      	ldrb	r2, [r3, #0]
 8018776:	6879      	ldr	r1, [r7, #4]
 8018778:	0013      	movs	r3, r2
 801877a:	009b      	lsls	r3, r3, #2
 801877c:	189b      	adds	r3, r3, r2
 801877e:	00db      	lsls	r3, r3, #3
 8018780:	18cb      	adds	r3, r1, r3
 8018782:	333c      	adds	r3, #60	@ 0x3c
 8018784:	2200      	movs	r2, #0
 8018786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8018788:	183b      	adds	r3, r7, r0
 801878a:	781a      	ldrb	r2, [r3, #0]
 801878c:	6879      	ldr	r1, [r7, #4]
 801878e:	0013      	movs	r3, r2
 8018790:	009b      	lsls	r3, r3, #2
 8018792:	189b      	adds	r3, r3, r2
 8018794:	00db      	lsls	r3, r3, #3
 8018796:	18cb      	adds	r3, r1, r3
 8018798:	3340      	adds	r3, #64	@ 0x40
 801879a:	2200      	movs	r2, #0
 801879c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801879e:	183b      	adds	r3, r7, r0
 80187a0:	781a      	ldrb	r2, [r3, #0]
 80187a2:	183b      	adds	r3, r7, r0
 80187a4:	3201      	adds	r2, #1
 80187a6:	701a      	strb	r2, [r3, #0]
 80187a8:	210f      	movs	r1, #15
 80187aa:	187b      	adds	r3, r7, r1
 80187ac:	781a      	ldrb	r2, [r3, #0]
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	685b      	ldr	r3, [r3, #4]
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d3ae      	bcc.n	8018714 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80187b6:	187b      	adds	r3, r7, r1
 80187b8:	2200      	movs	r2, #0
 80187ba:	701a      	strb	r2, [r3, #0]
 80187bc:	e056      	b.n	801886c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80187be:	240f      	movs	r4, #15
 80187c0:	193b      	adds	r3, r7, r4
 80187c2:	781a      	ldrb	r2, [r3, #0]
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	236a      	movs	r3, #106	@ 0x6a
 80187c8:	33ff      	adds	r3, #255	@ 0xff
 80187ca:	0019      	movs	r1, r3
 80187cc:	0013      	movs	r3, r2
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	189b      	adds	r3, r3, r2
 80187d2:	00db      	lsls	r3, r3, #3
 80187d4:	18c3      	adds	r3, r0, r3
 80187d6:	185b      	adds	r3, r3, r1
 80187d8:	2200      	movs	r2, #0
 80187da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80187dc:	193b      	adds	r3, r7, r4
 80187de:	781a      	ldrb	r2, [r3, #0]
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	23b4      	movs	r3, #180	@ 0xb4
 80187e4:	0059      	lsls	r1, r3, #1
 80187e6:	0013      	movs	r3, r2
 80187e8:	009b      	lsls	r3, r3, #2
 80187ea:	189b      	adds	r3, r3, r2
 80187ec:	00db      	lsls	r3, r3, #3
 80187ee:	18c3      	adds	r3, r0, r3
 80187f0:	185b      	adds	r3, r3, r1
 80187f2:	193a      	adds	r2, r7, r4
 80187f4:	7812      	ldrb	r2, [r2, #0]
 80187f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80187f8:	193b      	adds	r3, r7, r4
 80187fa:	781a      	ldrb	r2, [r3, #0]
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	236c      	movs	r3, #108	@ 0x6c
 8018800:	33ff      	adds	r3, #255	@ 0xff
 8018802:	0019      	movs	r1, r3
 8018804:	0013      	movs	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	189b      	adds	r3, r3, r2
 801880a:	00db      	lsls	r3, r3, #3
 801880c:	18c3      	adds	r3, r0, r3
 801880e:	185b      	adds	r3, r3, r1
 8018810:	2200      	movs	r2, #0
 8018812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018814:	193b      	adds	r3, r7, r4
 8018816:	781a      	ldrb	r2, [r3, #0]
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	23bc      	movs	r3, #188	@ 0xbc
 801881c:	0059      	lsls	r1, r3, #1
 801881e:	0013      	movs	r3, r2
 8018820:	009b      	lsls	r3, r3, #2
 8018822:	189b      	adds	r3, r3, r2
 8018824:	00db      	lsls	r3, r3, #3
 8018826:	18c3      	adds	r3, r0, r3
 8018828:	185b      	adds	r3, r3, r1
 801882a:	2200      	movs	r2, #0
 801882c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801882e:	193b      	adds	r3, r7, r4
 8018830:	781a      	ldrb	r2, [r3, #0]
 8018832:	6878      	ldr	r0, [r7, #4]
 8018834:	23be      	movs	r3, #190	@ 0xbe
 8018836:	0059      	lsls	r1, r3, #1
 8018838:	0013      	movs	r3, r2
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	189b      	adds	r3, r3, r2
 801883e:	00db      	lsls	r3, r3, #3
 8018840:	18c3      	adds	r3, r0, r3
 8018842:	185b      	adds	r3, r3, r1
 8018844:	2200      	movs	r2, #0
 8018846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8018848:	193b      	adds	r3, r7, r4
 801884a:	781a      	ldrb	r2, [r3, #0]
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	23c0      	movs	r3, #192	@ 0xc0
 8018850:	0059      	lsls	r1, r3, #1
 8018852:	0013      	movs	r3, r2
 8018854:	009b      	lsls	r3, r3, #2
 8018856:	189b      	adds	r3, r3, r2
 8018858:	00db      	lsls	r3, r3, #3
 801885a:	18c3      	adds	r3, r0, r3
 801885c:	185b      	adds	r3, r3, r1
 801885e:	2200      	movs	r2, #0
 8018860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018862:	193b      	adds	r3, r7, r4
 8018864:	781a      	ldrb	r2, [r3, #0]
 8018866:	193b      	adds	r3, r7, r4
 8018868:	3201      	adds	r2, #1
 801886a:	701a      	strb	r2, [r3, #0]
 801886c:	230f      	movs	r3, #15
 801886e:	18fb      	adds	r3, r7, r3
 8018870:	781a      	ldrb	r2, [r3, #0]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	685b      	ldr	r3, [r3, #4]
 8018876:	429a      	cmp	r2, r3
 8018878:	d3a1      	bcc.n	80187be <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	6818      	ldr	r0, [r3, #0]
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	466a      	mov	r2, sp
 8018882:	0011      	movs	r1, r2
 8018884:	001a      	movs	r2, r3
 8018886:	3210      	adds	r2, #16
 8018888:	ca70      	ldmia	r2!, {r4, r5, r6}
 801888a:	c170      	stmia	r1!, {r4, r5, r6}
 801888c:	ca30      	ldmia	r2!, {r4, r5}
 801888e:	c130      	stmia	r1!, {r4, r5}
 8018890:	6859      	ldr	r1, [r3, #4]
 8018892:	689a      	ldr	r2, [r3, #8]
 8018894:	68db      	ldr	r3, [r3, #12]
 8018896:	f005 fe6d 	bl	801e574 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2224      	movs	r2, #36	@ 0x24
 801889e:	2100      	movs	r1, #0
 80188a0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	4a07      	ldr	r2, [pc, #28]	@ (80188c4 <HAL_PCD_Init+0x1fc>)
 80188a6:	2101      	movs	r1, #1
 80188a8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	69db      	ldr	r3, [r3, #28]
 80188ae:	2b01      	cmp	r3, #1
 80188b0:	d103      	bne.n	80188ba <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	0018      	movs	r0, r3
 80188b6:	f001 fd23 	bl	801a300 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80188ba:	2300      	movs	r3, #0
}
 80188bc:	0018      	movs	r0, r3
 80188be:	46bd      	mov	sp, r7
 80188c0:	b005      	add	sp, #20
 80188c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188c4:	000002a9 	.word	0x000002a9

080188c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80188d0:	687a      	ldr	r2, [r7, #4]
 80188d2:	23aa      	movs	r3, #170	@ 0xaa
 80188d4:	009b      	lsls	r3, r3, #2
 80188d6:	5cd3      	ldrb	r3, [r2, r3]
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d101      	bne.n	80188e0 <HAL_PCD_Start+0x18>
 80188dc:	2302      	movs	r3, #2
 80188de:	e014      	b.n	801890a <HAL_PCD_Start+0x42>
 80188e0:	687a      	ldr	r2, [r7, #4]
 80188e2:	23aa      	movs	r3, #170	@ 0xaa
 80188e4:	009b      	lsls	r3, r3, #2
 80188e6:	2101      	movs	r1, #1
 80188e8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	0018      	movs	r0, r3
 80188f0:	f005 fe10 	bl	801e514 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	0018      	movs	r0, r3
 80188fa:	f007 fe13 	bl	8020524 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	23aa      	movs	r3, #170	@ 0xaa
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	2100      	movs	r1, #0
 8018906:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018908:	2300      	movs	r3, #0
}
 801890a:	0018      	movs	r0, r3
 801890c:	46bd      	mov	sp, r7
 801890e:	b002      	add	sp, #8
 8018910:	bd80      	pop	{r7, pc}
	...

08018914 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b084      	sub	sp, #16
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	0018      	movs	r0, r3
 8018922:	f007 fe15 	bl	8020550 <USB_ReadInterrupts>
 8018926:	0003      	movs	r3, r0
 8018928:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801892a:	68fa      	ldr	r2, [r7, #12]
 801892c:	2380      	movs	r3, #128	@ 0x80
 801892e:	021b      	lsls	r3, r3, #8
 8018930:	4013      	ands	r3, r2
 8018932:	d004      	beq.n	801893e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	0018      	movs	r0, r3
 8018938:	f000 fb62 	bl	8019000 <PCD_EP_ISR_Handler>

    return;
 801893c:	e11d      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801893e:	68fa      	ldr	r2, [r7, #12]
 8018940:	2380      	movs	r3, #128	@ 0x80
 8018942:	00db      	lsls	r3, r3, #3
 8018944:	4013      	ands	r3, r2
 8018946:	d015      	beq.n	8018974 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	2244      	movs	r2, #68	@ 0x44
 801894e:	5a9b      	ldrh	r3, [r3, r2]
 8018950:	b29a      	uxth	r2, r3
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	498a      	ldr	r1, [pc, #552]	@ (8018b80 <HAL_PCD_IRQHandler+0x26c>)
 8018958:	400a      	ands	r2, r1
 801895a:	b291      	uxth	r1, r2
 801895c:	2244      	movs	r2, #68	@ 0x44
 801895e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	0018      	movs	r0, r3
 8018964:	f009 feb5 	bl	80226d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2100      	movs	r1, #0
 801896c:	0018      	movs	r0, r3
 801896e:	f000 f915 	bl	8018b9c <HAL_PCD_SetAddress>

    return;
 8018972:	e102      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8018974:	68fa      	ldr	r2, [r7, #12]
 8018976:	2380      	movs	r3, #128	@ 0x80
 8018978:	01db      	lsls	r3, r3, #7
 801897a:	4013      	ands	r3, r2
 801897c:	d00c      	beq.n	8018998 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	2244      	movs	r2, #68	@ 0x44
 8018984:	5a9b      	ldrh	r3, [r3, r2]
 8018986:	b29a      	uxth	r2, r3
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	497d      	ldr	r1, [pc, #500]	@ (8018b84 <HAL_PCD_IRQHandler+0x270>)
 801898e:	400a      	ands	r2, r1
 8018990:	b291      	uxth	r1, r2
 8018992:	2244      	movs	r2, #68	@ 0x44
 8018994:	5299      	strh	r1, [r3, r2]

    return;
 8018996:	e0f0      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8018998:	68fa      	ldr	r2, [r7, #12]
 801899a:	2380      	movs	r3, #128	@ 0x80
 801899c:	019b      	lsls	r3, r3, #6
 801899e:	4013      	ands	r3, r2
 80189a0:	d00c      	beq.n	80189bc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	2244      	movs	r2, #68	@ 0x44
 80189a8:	5a9b      	ldrh	r3, [r3, r2]
 80189aa:	b29a      	uxth	r2, r3
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	4975      	ldr	r1, [pc, #468]	@ (8018b88 <HAL_PCD_IRQHandler+0x274>)
 80189b2:	400a      	ands	r2, r1
 80189b4:	b291      	uxth	r1, r2
 80189b6:	2244      	movs	r2, #68	@ 0x44
 80189b8:	5299      	strh	r1, [r3, r2]

    return;
 80189ba:	e0de      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80189bc:	68fa      	ldr	r2, [r7, #12]
 80189be:	2380      	movs	r3, #128	@ 0x80
 80189c0:	015b      	lsls	r3, r3, #5
 80189c2:	4013      	ands	r3, r2
 80189c4:	d038      	beq.n	8018a38 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2240      	movs	r2, #64	@ 0x40
 80189cc:	5a9b      	ldrh	r3, [r3, r2]
 80189ce:	b29a      	uxth	r2, r3
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2104      	movs	r1, #4
 80189d6:	438a      	bics	r2, r1
 80189d8:	b291      	uxth	r1, r2
 80189da:	2240      	movs	r2, #64	@ 0x40
 80189dc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	2240      	movs	r2, #64	@ 0x40
 80189e4:	5a9b      	ldrh	r3, [r3, r2]
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	2108      	movs	r1, #8
 80189ee:	438a      	bics	r2, r1
 80189f0:	b291      	uxth	r1, r2
 80189f2:	2240      	movs	r2, #64	@ 0x40
 80189f4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	23b8      	movs	r3, #184	@ 0xb8
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	5cd3      	ldrb	r3, [r2, r3]
 80189fe:	2b01      	cmp	r3, #1
 8018a00:	d109      	bne.n	8018a16 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018a02:	687a      	ldr	r2, [r7, #4]
 8018a04:	23b8      	movs	r3, #184	@ 0xb8
 8018a06:	009b      	lsls	r3, r3, #2
 8018a08:	2100      	movs	r1, #0
 8018a0a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2100      	movs	r1, #0
 8018a10:	0018      	movs	r0, r3
 8018a12:	f001 fc9f 	bl	801a354 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	0018      	movs	r0, r3
 8018a1a:	f009 fe9b 	bl	8022754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2244      	movs	r2, #68	@ 0x44
 8018a24:	5a9b      	ldrh	r3, [r3, r2]
 8018a26:	b29a      	uxth	r2, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	4957      	ldr	r1, [pc, #348]	@ (8018b8c <HAL_PCD_IRQHandler+0x278>)
 8018a2e:	400a      	ands	r2, r1
 8018a30:	b291      	uxth	r1, r2
 8018a32:	2244      	movs	r2, #68	@ 0x44
 8018a34:	5299      	strh	r1, [r3, r2]

    return;
 8018a36:	e0a0      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8018a38:	68fa      	ldr	r2, [r7, #12]
 8018a3a:	2380      	movs	r3, #128	@ 0x80
 8018a3c:	011b      	lsls	r3, r3, #4
 8018a3e:	4013      	ands	r3, r2
 8018a40:	d028      	beq.n	8018a94 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2240      	movs	r2, #64	@ 0x40
 8018a48:	5a9b      	ldrh	r3, [r3, r2]
 8018a4a:	b29a      	uxth	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2108      	movs	r1, #8
 8018a52:	430a      	orrs	r2, r1
 8018a54:	b291      	uxth	r1, r2
 8018a56:	2240      	movs	r2, #64	@ 0x40
 8018a58:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2244      	movs	r2, #68	@ 0x44
 8018a60:	5a9b      	ldrh	r3, [r3, r2]
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	4949      	ldr	r1, [pc, #292]	@ (8018b90 <HAL_PCD_IRQHandler+0x27c>)
 8018a6a:	400a      	ands	r2, r1
 8018a6c:	b291      	uxth	r1, r2
 8018a6e:	2244      	movs	r2, #68	@ 0x44
 8018a70:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	2240      	movs	r2, #64	@ 0x40
 8018a78:	5a9b      	ldrh	r3, [r3, r2]
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	2104      	movs	r1, #4
 8018a82:	430a      	orrs	r2, r1
 8018a84:	b291      	uxth	r1, r2
 8018a86:	2240      	movs	r2, #64	@ 0x40
 8018a88:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	0018      	movs	r0, r3
 8018a8e:	f009 fe45 	bl	802271c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018a92:	e072      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	2280      	movs	r2, #128	@ 0x80
 8018a98:	4013      	ands	r3, r2
 8018a9a:	d046      	beq.n	8018b2a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	2244      	movs	r2, #68	@ 0x44
 8018aa2:	5a9b      	ldrh	r3, [r3, r2]
 8018aa4:	b29a      	uxth	r2, r3
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	2180      	movs	r1, #128	@ 0x80
 8018aac:	438a      	bics	r2, r1
 8018aae:	b291      	uxth	r1, r2
 8018ab0:	2244      	movs	r2, #68	@ 0x44
 8018ab2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8018ab4:	687a      	ldr	r2, [r7, #4]
 8018ab6:	23b8      	movs	r3, #184	@ 0xb8
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	5cd3      	ldrb	r3, [r2, r3]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d12f      	bne.n	8018b20 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2240      	movs	r2, #64	@ 0x40
 8018ac6:	5a9b      	ldrh	r3, [r3, r2]
 8018ac8:	b29a      	uxth	r2, r3
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	2104      	movs	r1, #4
 8018ad0:	430a      	orrs	r2, r1
 8018ad2:	b291      	uxth	r1, r2
 8018ad4:	2240      	movs	r2, #64	@ 0x40
 8018ad6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2240      	movs	r2, #64	@ 0x40
 8018ade:	5a9b      	ldrh	r3, [r3, r2]
 8018ae0:	b29a      	uxth	r2, r3
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	2108      	movs	r1, #8
 8018ae8:	430a      	orrs	r2, r1
 8018aea:	b291      	uxth	r1, r2
 8018aec:	2240      	movs	r2, #64	@ 0x40
 8018aee:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	23b8      	movs	r3, #184	@ 0xb8
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	2101      	movs	r1, #1
 8018af8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2254      	movs	r2, #84	@ 0x54
 8018b00:	5a9b      	ldrh	r3, [r3, r2]
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	089b      	lsrs	r3, r3, #2
 8018b06:	223c      	movs	r2, #60	@ 0x3c
 8018b08:	4013      	ands	r3, r2
 8018b0a:	0019      	movs	r1, r3
 8018b0c:	687a      	ldr	r2, [r7, #4]
 8018b0e:	23b9      	movs	r3, #185	@ 0xb9
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2101      	movs	r1, #1
 8018b18:	0018      	movs	r0, r3
 8018b1a:	f001 fc1b 	bl	801a354 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8018b1e:	e02c      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	0018      	movs	r0, r3
 8018b24:	f009 fdfa 	bl	802271c <HAL_PCD_SuspendCallback>
    return;
 8018b28:	e027      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8018b2a:	68fa      	ldr	r2, [r7, #12]
 8018b2c:	2380      	movs	r3, #128	@ 0x80
 8018b2e:	009b      	lsls	r3, r3, #2
 8018b30:	4013      	ands	r3, r2
 8018b32:	d010      	beq.n	8018b56 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2244      	movs	r2, #68	@ 0x44
 8018b3a:	5a9b      	ldrh	r3, [r3, r2]
 8018b3c:	b29a      	uxth	r2, r3
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4914      	ldr	r1, [pc, #80]	@ (8018b94 <HAL_PCD_IRQHandler+0x280>)
 8018b44:	400a      	ands	r2, r1
 8018b46:	b291      	uxth	r1, r2
 8018b48:	2244      	movs	r2, #68	@ 0x44
 8018b4a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	0018      	movs	r0, r3
 8018b50:	f009 fdb0 	bl	80226b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018b54:	e011      	b.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018b56:	68fa      	ldr	r2, [r7, #12]
 8018b58:	2380      	movs	r3, #128	@ 0x80
 8018b5a:	005b      	lsls	r3, r3, #1
 8018b5c:	4013      	ands	r3, r2
 8018b5e:	d00c      	beq.n	8018b7a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	2244      	movs	r2, #68	@ 0x44
 8018b66:	5a9b      	ldrh	r3, [r3, r2]
 8018b68:	b29a      	uxth	r2, r3
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	490a      	ldr	r1, [pc, #40]	@ (8018b98 <HAL_PCD_IRQHandler+0x284>)
 8018b70:	400a      	ands	r2, r1
 8018b72:	b291      	uxth	r1, r2
 8018b74:	2244      	movs	r2, #68	@ 0x44
 8018b76:	5299      	strh	r1, [r3, r2]

    return;
 8018b78:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	b004      	add	sp, #16
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	fffffbff 	.word	0xfffffbff
 8018b84:	ffffbfff 	.word	0xffffbfff
 8018b88:	ffffdfff 	.word	0xffffdfff
 8018b8c:	ffffefff 	.word	0xffffefff
 8018b90:	fffff7ff 	.word	0xfffff7ff
 8018b94:	fffffdff 	.word	0xfffffdff
 8018b98:	fffffeff 	.word	0xfffffeff

08018b9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	000a      	movs	r2, r1
 8018ba6:	1cfb      	adds	r3, r7, #3
 8018ba8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	23aa      	movs	r3, #170	@ 0xaa
 8018bae:	009b      	lsls	r3, r3, #2
 8018bb0:	5cd3      	ldrb	r3, [r2, r3]
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d101      	bne.n	8018bba <HAL_PCD_SetAddress+0x1e>
 8018bb6:	2302      	movs	r3, #2
 8018bb8:	e017      	b.n	8018bea <HAL_PCD_SetAddress+0x4e>
 8018bba:	687a      	ldr	r2, [r7, #4]
 8018bbc:	23aa      	movs	r3, #170	@ 0xaa
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	2101      	movs	r1, #1
 8018bc2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	1cfa      	adds	r2, r7, #3
 8018bc8:	2124      	movs	r1, #36	@ 0x24
 8018bca:	7812      	ldrb	r2, [r2, #0]
 8018bcc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681a      	ldr	r2, [r3, #0]
 8018bd2:	1cfb      	adds	r3, r7, #3
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	0019      	movs	r1, r3
 8018bd8:	0010      	movs	r0, r2
 8018bda:	f007 fc8f 	bl	80204fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018bde:	687a      	ldr	r2, [r7, #4]
 8018be0:	23aa      	movs	r3, #170	@ 0xaa
 8018be2:	009b      	lsls	r3, r3, #2
 8018be4:	2100      	movs	r1, #0
 8018be6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018be8:	2300      	movs	r3, #0
}
 8018bea:	0018      	movs	r0, r3
 8018bec:	46bd      	mov	sp, r7
 8018bee:	b002      	add	sp, #8
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018bf2:	b590      	push	{r4, r7, lr}
 8018bf4:	b085      	sub	sp, #20
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
 8018bfa:	000c      	movs	r4, r1
 8018bfc:	0010      	movs	r0, r2
 8018bfe:	0019      	movs	r1, r3
 8018c00:	1cfb      	adds	r3, r7, #3
 8018c02:	1c22      	adds	r2, r4, #0
 8018c04:	701a      	strb	r2, [r3, #0]
 8018c06:	003b      	movs	r3, r7
 8018c08:	1c02      	adds	r2, r0, #0
 8018c0a:	801a      	strh	r2, [r3, #0]
 8018c0c:	1cbb      	adds	r3, r7, #2
 8018c0e:	1c0a      	adds	r2, r1, #0
 8018c10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018c12:	230b      	movs	r3, #11
 8018c14:	18fb      	adds	r3, r7, r3
 8018c16:	2200      	movs	r2, #0
 8018c18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018c1a:	1cfb      	adds	r3, r7, #3
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	b25b      	sxtb	r3, r3
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	da0f      	bge.n	8018c44 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018c24:	1cfb      	adds	r3, r7, #3
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	2207      	movs	r2, #7
 8018c2a:	4013      	ands	r3, r2
 8018c2c:	1c5a      	adds	r2, r3, #1
 8018c2e:	0013      	movs	r3, r2
 8018c30:	009b      	lsls	r3, r3, #2
 8018c32:	189b      	adds	r3, r3, r2
 8018c34:	00db      	lsls	r3, r3, #3
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	18d3      	adds	r3, r2, r3
 8018c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2201      	movs	r2, #1
 8018c40:	705a      	strb	r2, [r3, #1]
 8018c42:	e00f      	b.n	8018c64 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018c44:	1cfb      	adds	r3, r7, #3
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	2207      	movs	r2, #7
 8018c4a:	401a      	ands	r2, r3
 8018c4c:	0013      	movs	r3, r2
 8018c4e:	009b      	lsls	r3, r3, #2
 8018c50:	189b      	adds	r3, r3, r2
 8018c52:	00db      	lsls	r3, r3, #3
 8018c54:	3369      	adds	r3, #105	@ 0x69
 8018c56:	33ff      	adds	r3, #255	@ 0xff
 8018c58:	687a      	ldr	r2, [r7, #4]
 8018c5a:	18d3      	adds	r3, r2, r3
 8018c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	2200      	movs	r2, #0
 8018c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018c64:	1cfb      	adds	r3, r7, #3
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2207      	movs	r2, #7
 8018c6a:	4013      	ands	r3, r2
 8018c6c:	b2da      	uxtb	r2, r3
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018c72:	003b      	movs	r3, r7
 8018c74:	881a      	ldrh	r2, [r3, #0]
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	1cba      	adds	r2, r7, #2
 8018c7e:	7812      	ldrb	r2, [r2, #0]
 8018c80:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018c82:	1cbb      	adds	r3, r7, #2
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	2b02      	cmp	r3, #2
 8018c88:	d102      	bne.n	8018c90 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	23aa      	movs	r3, #170	@ 0xaa
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	5cd3      	ldrb	r3, [r2, r3]
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d101      	bne.n	8018ca0 <HAL_PCD_EP_Open+0xae>
 8018c9c:	2302      	movs	r3, #2
 8018c9e:	e013      	b.n	8018cc8 <HAL_PCD_EP_Open+0xd6>
 8018ca0:	687a      	ldr	r2, [r7, #4]
 8018ca2:	23aa      	movs	r3, #170	@ 0xaa
 8018ca4:	009b      	lsls	r3, r3, #2
 8018ca6:	2101      	movs	r1, #1
 8018ca8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	68fa      	ldr	r2, [r7, #12]
 8018cb0:	0011      	movs	r1, r2
 8018cb2:	0018      	movs	r0, r3
 8018cb4:	f005 fc86 	bl	801e5c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018cb8:	687a      	ldr	r2, [r7, #4]
 8018cba:	23aa      	movs	r3, #170	@ 0xaa
 8018cbc:	009b      	lsls	r3, r3, #2
 8018cbe:	2100      	movs	r1, #0
 8018cc0:	54d1      	strb	r1, [r2, r3]

  return ret;
 8018cc2:	230b      	movs	r3, #11
 8018cc4:	18fb      	adds	r3, r7, r3
 8018cc6:	781b      	ldrb	r3, [r3, #0]
}
 8018cc8:	0018      	movs	r0, r3
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	b005      	add	sp, #20
 8018cce:	bd90      	pop	{r4, r7, pc}

08018cd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b084      	sub	sp, #16
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	000a      	movs	r2, r1
 8018cda:	1cfb      	adds	r3, r7, #3
 8018cdc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018cde:	1cfb      	adds	r3, r7, #3
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	b25b      	sxtb	r3, r3
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	da0f      	bge.n	8018d08 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018ce8:	1cfb      	adds	r3, r7, #3
 8018cea:	781b      	ldrb	r3, [r3, #0]
 8018cec:	2207      	movs	r2, #7
 8018cee:	4013      	ands	r3, r2
 8018cf0:	1c5a      	adds	r2, r3, #1
 8018cf2:	0013      	movs	r3, r2
 8018cf4:	009b      	lsls	r3, r3, #2
 8018cf6:	189b      	adds	r3, r3, r2
 8018cf8:	00db      	lsls	r3, r3, #3
 8018cfa:	687a      	ldr	r2, [r7, #4]
 8018cfc:	18d3      	adds	r3, r2, r3
 8018cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2201      	movs	r2, #1
 8018d04:	705a      	strb	r2, [r3, #1]
 8018d06:	e00f      	b.n	8018d28 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018d08:	1cfb      	adds	r3, r7, #3
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2207      	movs	r2, #7
 8018d0e:	401a      	ands	r2, r3
 8018d10:	0013      	movs	r3, r2
 8018d12:	009b      	lsls	r3, r3, #2
 8018d14:	189b      	adds	r3, r3, r2
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	3369      	adds	r3, #105	@ 0x69
 8018d1a:	33ff      	adds	r3, #255	@ 0xff
 8018d1c:	687a      	ldr	r2, [r7, #4]
 8018d1e:	18d3      	adds	r3, r2, r3
 8018d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2200      	movs	r2, #0
 8018d26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018d28:	1cfb      	adds	r3, r7, #3
 8018d2a:	781b      	ldrb	r3, [r3, #0]
 8018d2c:	2207      	movs	r2, #7
 8018d2e:	4013      	ands	r3, r2
 8018d30:	b2da      	uxtb	r2, r3
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	23aa      	movs	r3, #170	@ 0xaa
 8018d3a:	009b      	lsls	r3, r3, #2
 8018d3c:	5cd3      	ldrb	r3, [r2, r3]
 8018d3e:	2b01      	cmp	r3, #1
 8018d40:	d101      	bne.n	8018d46 <HAL_PCD_EP_Close+0x76>
 8018d42:	2302      	movs	r3, #2
 8018d44:	e011      	b.n	8018d6a <HAL_PCD_EP_Close+0x9a>
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	23aa      	movs	r3, #170	@ 0xaa
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	2101      	movs	r1, #1
 8018d4e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	68fa      	ldr	r2, [r7, #12]
 8018d56:	0011      	movs	r1, r2
 8018d58:	0018      	movs	r0, r3
 8018d5a:	f005 ffd5 	bl	801ed08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	23aa      	movs	r3, #170	@ 0xaa
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	2100      	movs	r1, #0
 8018d66:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018d68:	2300      	movs	r3, #0
}
 8018d6a:	0018      	movs	r0, r3
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	b004      	add	sp, #16
 8018d70:	bd80      	pop	{r7, pc}

08018d72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018d72:	b580      	push	{r7, lr}
 8018d74:	b086      	sub	sp, #24
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	60f8      	str	r0, [r7, #12]
 8018d7a:	607a      	str	r2, [r7, #4]
 8018d7c:	603b      	str	r3, [r7, #0]
 8018d7e:	200b      	movs	r0, #11
 8018d80:	183b      	adds	r3, r7, r0
 8018d82:	1c0a      	adds	r2, r1, #0
 8018d84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018d86:	0001      	movs	r1, r0
 8018d88:	187b      	adds	r3, r7, r1
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	2207      	movs	r2, #7
 8018d8e:	401a      	ands	r2, r3
 8018d90:	0013      	movs	r3, r2
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	189b      	adds	r3, r3, r2
 8018d96:	00db      	lsls	r3, r3, #3
 8018d98:	3369      	adds	r3, #105	@ 0x69
 8018d9a:	33ff      	adds	r3, #255	@ 0xff
 8018d9c:	68fa      	ldr	r2, [r7, #12]
 8018d9e:	18d3      	adds	r3, r2, r3
 8018da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	687a      	ldr	r2, [r7, #4]
 8018da6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	683a      	ldr	r2, [r7, #0]
 8018dac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	2200      	movs	r2, #0
 8018db2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	2200      	movs	r2, #0
 8018db8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018dba:	187b      	adds	r3, r7, r1
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	2207      	movs	r2, #7
 8018dc0:	4013      	ands	r3, r2
 8018dc2:	b2da      	uxtb	r2, r3
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	697a      	ldr	r2, [r7, #20]
 8018dce:	0011      	movs	r1, r2
 8018dd0:	0018      	movs	r0, r3
 8018dd2:	f006 f959 	bl	801f088 <USB_EPStartXfer>

  return HAL_OK;
 8018dd6:	2300      	movs	r3, #0
}
 8018dd8:	0018      	movs	r0, r3
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	b006      	add	sp, #24
 8018dde:	bd80      	pop	{r7, pc}

08018de0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	000a      	movs	r2, r1
 8018dea:	1cfb      	adds	r3, r7, #3
 8018dec:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018dee:	1cfb      	adds	r3, r7, #3
 8018df0:	781b      	ldrb	r3, [r3, #0]
 8018df2:	2207      	movs	r2, #7
 8018df4:	401a      	ands	r2, r3
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	23c2      	movs	r3, #194	@ 0xc2
 8018dfa:	0059      	lsls	r1, r3, #1
 8018dfc:	0013      	movs	r3, r2
 8018dfe:	009b      	lsls	r3, r3, #2
 8018e00:	189b      	adds	r3, r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	18c3      	adds	r3, r0, r3
 8018e06:	185b      	adds	r3, r3, r1
 8018e08:	681b      	ldr	r3, [r3, #0]
}
 8018e0a:	0018      	movs	r0, r3
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	b002      	add	sp, #8
 8018e10:	bd80      	pop	{r7, pc}

08018e12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018e12:	b580      	push	{r7, lr}
 8018e14:	b086      	sub	sp, #24
 8018e16:	af00      	add	r7, sp, #0
 8018e18:	60f8      	str	r0, [r7, #12]
 8018e1a:	607a      	str	r2, [r7, #4]
 8018e1c:	603b      	str	r3, [r7, #0]
 8018e1e:	200b      	movs	r0, #11
 8018e20:	183b      	adds	r3, r7, r0
 8018e22:	1c0a      	adds	r2, r1, #0
 8018e24:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018e26:	183b      	adds	r3, r7, r0
 8018e28:	781b      	ldrb	r3, [r3, #0]
 8018e2a:	2207      	movs	r2, #7
 8018e2c:	4013      	ands	r3, r2
 8018e2e:	1c5a      	adds	r2, r3, #1
 8018e30:	0013      	movs	r3, r2
 8018e32:	009b      	lsls	r3, r3, #2
 8018e34:	189b      	adds	r3, r3, r2
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	68fa      	ldr	r2, [r7, #12]
 8018e3a:	18d3      	adds	r3, r2, r3
 8018e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	683a      	ldr	r2, [r7, #0]
 8018e48:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8018e4a:	697b      	ldr	r3, [r7, #20]
 8018e4c:	2224      	movs	r2, #36	@ 0x24
 8018e4e:	2101      	movs	r1, #1
 8018e50:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	683a      	ldr	r2, [r7, #0]
 8018e56:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	2201      	movs	r2, #1
 8018e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018e64:	183b      	adds	r3, r7, r0
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	2207      	movs	r2, #7
 8018e6a:	4013      	ands	r3, r2
 8018e6c:	b2da      	uxtb	r2, r3
 8018e6e:	697b      	ldr	r3, [r7, #20]
 8018e70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	697a      	ldr	r2, [r7, #20]
 8018e78:	0011      	movs	r1, r2
 8018e7a:	0018      	movs	r0, r3
 8018e7c:	f006 f904 	bl	801f088 <USB_EPStartXfer>

  return HAL_OK;
 8018e80:	2300      	movs	r3, #0
}
 8018e82:	0018      	movs	r0, r3
 8018e84:	46bd      	mov	sp, r7
 8018e86:	b006      	add	sp, #24
 8018e88:	bd80      	pop	{r7, pc}

08018e8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018e8a:	b580      	push	{r7, lr}
 8018e8c:	b084      	sub	sp, #16
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
 8018e92:	000a      	movs	r2, r1
 8018e94:	1cfb      	adds	r3, r7, #3
 8018e96:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018e98:	1cfb      	adds	r3, r7, #3
 8018e9a:	781b      	ldrb	r3, [r3, #0]
 8018e9c:	2207      	movs	r2, #7
 8018e9e:	401a      	ands	r2, r3
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d901      	bls.n	8018eac <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	e046      	b.n	8018f3a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018eac:	1cfb      	adds	r3, r7, #3
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	b25b      	sxtb	r3, r3
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	da0f      	bge.n	8018ed6 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018eb6:	1cfb      	adds	r3, r7, #3
 8018eb8:	781b      	ldrb	r3, [r3, #0]
 8018eba:	2207      	movs	r2, #7
 8018ebc:	4013      	ands	r3, r2
 8018ebe:	1c5a      	adds	r2, r3, #1
 8018ec0:	0013      	movs	r3, r2
 8018ec2:	009b      	lsls	r3, r3, #2
 8018ec4:	189b      	adds	r3, r3, r2
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	18d3      	adds	r3, r2, r3
 8018ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	2201      	movs	r2, #1
 8018ed2:	705a      	strb	r2, [r3, #1]
 8018ed4:	e00d      	b.n	8018ef2 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018ed6:	1cfb      	adds	r3, r7, #3
 8018ed8:	781a      	ldrb	r2, [r3, #0]
 8018eda:	0013      	movs	r3, r2
 8018edc:	009b      	lsls	r3, r3, #2
 8018ede:	189b      	adds	r3, r3, r2
 8018ee0:	00db      	lsls	r3, r3, #3
 8018ee2:	3369      	adds	r3, #105	@ 0x69
 8018ee4:	33ff      	adds	r3, #255	@ 0xff
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	18d3      	adds	r3, r2, r3
 8018eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2201      	movs	r2, #1
 8018ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018ef8:	1cfb      	adds	r3, r7, #3
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	2207      	movs	r2, #7
 8018efe:	4013      	ands	r3, r2
 8018f00:	b2da      	uxtb	r2, r3
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018f06:	687a      	ldr	r2, [r7, #4]
 8018f08:	23aa      	movs	r3, #170	@ 0xaa
 8018f0a:	009b      	lsls	r3, r3, #2
 8018f0c:	5cd3      	ldrb	r3, [r2, r3]
 8018f0e:	2b01      	cmp	r3, #1
 8018f10:	d101      	bne.n	8018f16 <HAL_PCD_EP_SetStall+0x8c>
 8018f12:	2302      	movs	r3, #2
 8018f14:	e011      	b.n	8018f3a <HAL_PCD_EP_SetStall+0xb0>
 8018f16:	687a      	ldr	r2, [r7, #4]
 8018f18:	23aa      	movs	r3, #170	@ 0xaa
 8018f1a:	009b      	lsls	r3, r3, #2
 8018f1c:	2101      	movs	r1, #1
 8018f1e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	68fa      	ldr	r2, [r7, #12]
 8018f26:	0011      	movs	r1, r2
 8018f28:	0018      	movs	r0, r3
 8018f2a:	f007 f9e5 	bl	80202f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8018f2e:	687a      	ldr	r2, [r7, #4]
 8018f30:	23aa      	movs	r3, #170	@ 0xaa
 8018f32:	009b      	lsls	r3, r3, #2
 8018f34:	2100      	movs	r1, #0
 8018f36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018f38:	2300      	movs	r3, #0
}
 8018f3a:	0018      	movs	r0, r3
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	b004      	add	sp, #16
 8018f40:	bd80      	pop	{r7, pc}

08018f42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018f42:	b580      	push	{r7, lr}
 8018f44:	b084      	sub	sp, #16
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	6078      	str	r0, [r7, #4]
 8018f4a:	000a      	movs	r2, r1
 8018f4c:	1cfb      	adds	r3, r7, #3
 8018f4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018f50:	1cfb      	adds	r3, r7, #3
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	220f      	movs	r2, #15
 8018f56:	401a      	ands	r2, r3
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	685b      	ldr	r3, [r3, #4]
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	d901      	bls.n	8018f64 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018f60:	2301      	movs	r3, #1
 8018f62:	e048      	b.n	8018ff6 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018f64:	1cfb      	adds	r3, r7, #3
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	b25b      	sxtb	r3, r3
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	da0f      	bge.n	8018f8e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018f6e:	1cfb      	adds	r3, r7, #3
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	2207      	movs	r2, #7
 8018f74:	4013      	ands	r3, r2
 8018f76:	1c5a      	adds	r2, r3, #1
 8018f78:	0013      	movs	r3, r2
 8018f7a:	009b      	lsls	r3, r3, #2
 8018f7c:	189b      	adds	r3, r3, r2
 8018f7e:	00db      	lsls	r3, r3, #3
 8018f80:	687a      	ldr	r2, [r7, #4]
 8018f82:	18d3      	adds	r3, r2, r3
 8018f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	2201      	movs	r2, #1
 8018f8a:	705a      	strb	r2, [r3, #1]
 8018f8c:	e00f      	b.n	8018fae <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018f8e:	1cfb      	adds	r3, r7, #3
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	2207      	movs	r2, #7
 8018f94:	401a      	ands	r2, r3
 8018f96:	0013      	movs	r3, r2
 8018f98:	009b      	lsls	r3, r3, #2
 8018f9a:	189b      	adds	r3, r3, r2
 8018f9c:	00db      	lsls	r3, r3, #3
 8018f9e:	3369      	adds	r3, #105	@ 0x69
 8018fa0:	33ff      	adds	r3, #255	@ 0xff
 8018fa2:	687a      	ldr	r2, [r7, #4]
 8018fa4:	18d3      	adds	r3, r2, r3
 8018fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	2200      	movs	r2, #0
 8018fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018fb4:	1cfb      	adds	r3, r7, #3
 8018fb6:	781b      	ldrb	r3, [r3, #0]
 8018fb8:	2207      	movs	r2, #7
 8018fba:	4013      	ands	r3, r2
 8018fbc:	b2da      	uxtb	r2, r3
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018fc2:	687a      	ldr	r2, [r7, #4]
 8018fc4:	23aa      	movs	r3, #170	@ 0xaa
 8018fc6:	009b      	lsls	r3, r3, #2
 8018fc8:	5cd3      	ldrb	r3, [r2, r3]
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d101      	bne.n	8018fd2 <HAL_PCD_EP_ClrStall+0x90>
 8018fce:	2302      	movs	r3, #2
 8018fd0:	e011      	b.n	8018ff6 <HAL_PCD_EP_ClrStall+0xb4>
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	23aa      	movs	r3, #170	@ 0xaa
 8018fd6:	009b      	lsls	r3, r3, #2
 8018fd8:	2101      	movs	r1, #1
 8018fda:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	68fa      	ldr	r2, [r7, #12]
 8018fe2:	0011      	movs	r1, r2
 8018fe4:	0018      	movs	r0, r3
 8018fe6:	f007 f9d7 	bl	8020398 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	23aa      	movs	r3, #170	@ 0xaa
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018ff4:	2300      	movs	r3, #0
}
 8018ff6:	0018      	movs	r0, r3
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	b004      	add	sp, #16
 8018ffc:	bd80      	pop	{r7, pc}
	...

08019000 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019000:	b5b0      	push	{r4, r5, r7, lr}
 8019002:	b096      	sub	sp, #88	@ 0x58
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019008:	f000 fbec 	bl	80197e4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681a      	ldr	r2, [r3, #0]
 8019010:	204e      	movs	r0, #78	@ 0x4e
 8019012:	183b      	adds	r3, r7, r0
 8019014:	2144      	movs	r1, #68	@ 0x44
 8019016:	5a52      	ldrh	r2, [r2, r1]
 8019018:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801901a:	183b      	adds	r3, r7, r0
 801901c:	881b      	ldrh	r3, [r3, #0]
 801901e:	b2da      	uxtb	r2, r3
 8019020:	244d      	movs	r4, #77	@ 0x4d
 8019022:	193b      	adds	r3, r7, r4
 8019024:	210f      	movs	r1, #15
 8019026:	400a      	ands	r2, r1
 8019028:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801902a:	193b      	adds	r3, r7, r4
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d000      	beq.n	8019034 <PCD_EP_ISR_Handler+0x34>
 8019032:	e18f      	b.n	8019354 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019034:	183b      	adds	r3, r7, r0
 8019036:	881b      	ldrh	r3, [r3, #0]
 8019038:	2210      	movs	r2, #16
 801903a:	4013      	ands	r3, r2
 801903c:	d155      	bne.n	80190ea <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	881b      	ldrh	r3, [r3, #0]
 8019044:	b29a      	uxth	r2, r3
 8019046:	200e      	movs	r0, #14
 8019048:	183b      	adds	r3, r7, r0
 801904a:	49bb      	ldr	r1, [pc, #748]	@ (8019338 <PCD_EP_ISR_Handler+0x338>)
 801904c:	400a      	ands	r2, r1
 801904e:	801a      	strh	r2, [r3, #0]
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	183a      	adds	r2, r7, r0
 8019056:	8812      	ldrh	r2, [r2, #0]
 8019058:	49b8      	ldr	r1, [pc, #736]	@ (801933c <PCD_EP_ISR_Handler+0x33c>)
 801905a:	430a      	orrs	r2, r1
 801905c:	b292      	uxth	r2, r2
 801905e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	3328      	adds	r3, #40	@ 0x28
 8019064:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	2250      	movs	r2, #80	@ 0x50
 801906c:	5a9b      	ldrh	r3, [r3, r2]
 801906e:	b29b      	uxth	r3, r3
 8019070:	001a      	movs	r2, r3
 8019072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	18d2      	adds	r2, r2, r3
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	18d3      	adds	r3, r2, r3
 8019080:	4aaf      	ldr	r2, [pc, #700]	@ (8019340 <PCD_EP_ISR_Handler+0x340>)
 8019082:	4694      	mov	ip, r2
 8019084:	4463      	add	r3, ip
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	059b      	lsls	r3, r3, #22
 801908a:	0d9a      	lsrs	r2, r3, #22
 801908c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801908e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019092:	695a      	ldr	r2, [r3, #20]
 8019094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019096:	69db      	ldr	r3, [r3, #28]
 8019098:	18d2      	adds	r2, r2, r3
 801909a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801909c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	2100      	movs	r1, #0
 80190a2:	0018      	movs	r0, r3
 80190a4:	f009 fae8 	bl	8022678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2224      	movs	r2, #36	@ 0x24
 80190ac:	5c9b      	ldrb	r3, [r3, r2]
 80190ae:	b2db      	uxtb	r3, r3
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d101      	bne.n	80190b8 <PCD_EP_ISR_Handler+0xb8>
 80190b4:	f000 fb96 	bl	80197e4 <PCD_EP_ISR_Handler+0x7e4>
 80190b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190ba:	699b      	ldr	r3, [r3, #24]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d001      	beq.n	80190c4 <PCD_EP_ISR_Handler+0xc4>
 80190c0:	f000 fb90 	bl	80197e4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	2224      	movs	r2, #36	@ 0x24
 80190c8:	5c9b      	ldrb	r3, [r3, r2]
 80190ca:	b2db      	uxtb	r3, r3
 80190cc:	2280      	movs	r2, #128	@ 0x80
 80190ce:	4252      	negs	r2, r2
 80190d0:	4313      	orrs	r3, r2
 80190d2:	b2da      	uxtb	r2, r3
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	0011      	movs	r1, r2
 80190da:	224c      	movs	r2, #76	@ 0x4c
 80190dc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	2224      	movs	r2, #36	@ 0x24
 80190e2:	2100      	movs	r1, #0
 80190e4:	5499      	strb	r1, [r3, r2]
 80190e6:	f000 fb7d 	bl	80197e4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	3369      	adds	r3, #105	@ 0x69
 80190ee:	33ff      	adds	r3, #255	@ 0xff
 80190f0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681a      	ldr	r2, [r3, #0]
 80190f6:	214a      	movs	r1, #74	@ 0x4a
 80190f8:	187b      	adds	r3, r7, r1
 80190fa:	8812      	ldrh	r2, [r2, #0]
 80190fc:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80190fe:	187b      	adds	r3, r7, r1
 8019100:	881a      	ldrh	r2, [r3, #0]
 8019102:	2380      	movs	r3, #128	@ 0x80
 8019104:	011b      	lsls	r3, r3, #4
 8019106:	4013      	ands	r3, r2
 8019108:	d037      	beq.n	801917a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	2250      	movs	r2, #80	@ 0x50
 8019110:	5a9b      	ldrh	r3, [r3, r2]
 8019112:	b29b      	uxth	r3, r3
 8019114:	001a      	movs	r2, r3
 8019116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019118:	781b      	ldrb	r3, [r3, #0]
 801911a:	00db      	lsls	r3, r3, #3
 801911c:	18d2      	adds	r2, r2, r3
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	18d3      	adds	r3, r2, r3
 8019124:	4a87      	ldr	r2, [pc, #540]	@ (8019344 <PCD_EP_ISR_Handler+0x344>)
 8019126:	4694      	mov	ip, r2
 8019128:	4463      	add	r3, ip
 801912a:	881b      	ldrh	r3, [r3, #0]
 801912c:	059b      	lsls	r3, r3, #22
 801912e:	0d9a      	lsrs	r2, r3, #22
 8019130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019132:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6818      	ldr	r0, [r3, #0]
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	22ac      	movs	r2, #172	@ 0xac
 801913c:	0092      	lsls	r2, r2, #2
 801913e:	1899      	adds	r1, r3, r2
 8019140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019142:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019146:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019148:	b29b      	uxth	r3, r3
 801914a:	f007 fa59 	bl	8020600 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	b29a      	uxth	r2, r3
 8019156:	2010      	movs	r0, #16
 8019158:	183b      	adds	r3, r7, r0
 801915a:	497b      	ldr	r1, [pc, #492]	@ (8019348 <PCD_EP_ISR_Handler+0x348>)
 801915c:	400a      	ands	r2, r1
 801915e:	801a      	strh	r2, [r3, #0]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	183a      	adds	r2, r7, r0
 8019166:	8812      	ldrh	r2, [r2, #0]
 8019168:	2180      	movs	r1, #128	@ 0x80
 801916a:	430a      	orrs	r2, r1
 801916c:	b292      	uxth	r2, r2
 801916e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	0018      	movs	r0, r3
 8019174:	f009 fa4a 	bl	802260c <HAL_PCD_SetupStageCallback>
 8019178:	e334      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801917a:	234a      	movs	r3, #74	@ 0x4a
 801917c:	18fb      	adds	r3, r7, r3
 801917e:	2200      	movs	r2, #0
 8019180:	5e9b      	ldrsh	r3, [r3, r2]
 8019182:	2b00      	cmp	r3, #0
 8019184:	db00      	blt.n	8019188 <PCD_EP_ISR_Handler+0x188>
 8019186:	e32d      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	881b      	ldrh	r3, [r3, #0]
 801918e:	b29a      	uxth	r2, r3
 8019190:	201e      	movs	r0, #30
 8019192:	183b      	adds	r3, r7, r0
 8019194:	496c      	ldr	r1, [pc, #432]	@ (8019348 <PCD_EP_ISR_Handler+0x348>)
 8019196:	400a      	ands	r2, r1
 8019198:	801a      	strh	r2, [r3, #0]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	183a      	adds	r2, r7, r0
 80191a0:	8812      	ldrh	r2, [r2, #0]
 80191a2:	2180      	movs	r1, #128	@ 0x80
 80191a4:	430a      	orrs	r2, r1
 80191a6:	b292      	uxth	r2, r2
 80191a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	2250      	movs	r2, #80	@ 0x50
 80191b0:	5a9b      	ldrh	r3, [r3, r2]
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	001a      	movs	r2, r3
 80191b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191b8:	781b      	ldrb	r3, [r3, #0]
 80191ba:	00db      	lsls	r3, r3, #3
 80191bc:	18d2      	adds	r2, r2, r3
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	18d3      	adds	r3, r2, r3
 80191c4:	4a5f      	ldr	r2, [pc, #380]	@ (8019344 <PCD_EP_ISR_Handler+0x344>)
 80191c6:	4694      	mov	ip, r2
 80191c8:	4463      	add	r3, ip
 80191ca:	881b      	ldrh	r3, [r3, #0]
 80191cc:	059b      	lsls	r3, r3, #22
 80191ce:	0d9a      	lsrs	r2, r3, #22
 80191d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80191d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191d6:	69db      	ldr	r3, [r3, #28]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d01a      	beq.n	8019212 <PCD_EP_ISR_Handler+0x212>
 80191dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191de:	695b      	ldr	r3, [r3, #20]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d016      	beq.n	8019212 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	6818      	ldr	r0, [r3, #0]
 80191e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191ea:	6959      	ldr	r1, [r3, #20]
 80191ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80191f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80191f4:	b29b      	uxth	r3, r3
 80191f6:	f007 fa03 	bl	8020600 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80191fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191fc:	695a      	ldr	r2, [r3, #20]
 80191fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019200:	69db      	ldr	r3, [r3, #28]
 8019202:	18d2      	adds	r2, r2, r3
 8019204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019206:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2100      	movs	r1, #0
 801920c:	0018      	movs	r0, r3
 801920e:	f009 fa12 	bl	8022636 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681a      	ldr	r2, [r3, #0]
 8019216:	214a      	movs	r1, #74	@ 0x4a
 8019218:	187b      	adds	r3, r7, r1
 801921a:	8812      	ldrh	r2, [r2, #0]
 801921c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801921e:	187b      	adds	r3, r7, r1
 8019220:	881a      	ldrh	r2, [r3, #0]
 8019222:	2380      	movs	r3, #128	@ 0x80
 8019224:	011b      	lsls	r3, r3, #4
 8019226:	4013      	ands	r3, r2
 8019228:	d000      	beq.n	801922c <PCD_EP_ISR_Handler+0x22c>
 801922a:	e2db      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
 801922c:	187b      	adds	r3, r7, r1
 801922e:	881a      	ldrh	r2, [r3, #0]
 8019230:	23c0      	movs	r3, #192	@ 0xc0
 8019232:	019b      	lsls	r3, r3, #6
 8019234:	401a      	ands	r2, r3
 8019236:	23c0      	movs	r3, #192	@ 0xc0
 8019238:	019b      	lsls	r3, r3, #6
 801923a:	429a      	cmp	r2, r3
 801923c:	d100      	bne.n	8019240 <PCD_EP_ISR_Handler+0x240>
 801923e:	e2d1      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	61bb      	str	r3, [r7, #24]
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	2250      	movs	r2, #80	@ 0x50
 801924c:	5a9b      	ldrh	r3, [r3, r2]
 801924e:	b29b      	uxth	r3, r3
 8019250:	001a      	movs	r2, r3
 8019252:	69bb      	ldr	r3, [r7, #24]
 8019254:	189b      	adds	r3, r3, r2
 8019256:	61bb      	str	r3, [r7, #24]
 8019258:	69bb      	ldr	r3, [r7, #24]
 801925a:	4a3a      	ldr	r2, [pc, #232]	@ (8019344 <PCD_EP_ISR_Handler+0x344>)
 801925c:	4694      	mov	ip, r2
 801925e:	4463      	add	r3, ip
 8019260:	617b      	str	r3, [r7, #20]
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	881b      	ldrh	r3, [r3, #0]
 8019266:	b29b      	uxth	r3, r3
 8019268:	059b      	lsls	r3, r3, #22
 801926a:	0d9b      	lsrs	r3, r3, #22
 801926c:	b29a      	uxth	r2, r3
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	801a      	strh	r2, [r3, #0]
 8019272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019274:	691b      	ldr	r3, [r3, #16]
 8019276:	2b3e      	cmp	r3, #62	@ 0x3e
 8019278:	d91a      	bls.n	80192b0 <PCD_EP_ISR_Handler+0x2b0>
 801927a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801927c:	691b      	ldr	r3, [r3, #16]
 801927e:	095b      	lsrs	r3, r3, #5
 8019280:	647b      	str	r3, [r7, #68]	@ 0x44
 8019282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019284:	691b      	ldr	r3, [r3, #16]
 8019286:	221f      	movs	r2, #31
 8019288:	4013      	ands	r3, r2
 801928a:	d102      	bne.n	8019292 <PCD_EP_ISR_Handler+0x292>
 801928c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801928e:	3b01      	subs	r3, #1
 8019290:	647b      	str	r3, [r7, #68]	@ 0x44
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	881b      	ldrh	r3, [r3, #0]
 8019296:	b29a      	uxth	r2, r3
 8019298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801929a:	b29b      	uxth	r3, r3
 801929c:	029b      	lsls	r3, r3, #10
 801929e:	b29b      	uxth	r3, r3
 80192a0:	4313      	orrs	r3, r2
 80192a2:	b29b      	uxth	r3, r3
 80192a4:	4a25      	ldr	r2, [pc, #148]	@ (801933c <PCD_EP_ISR_Handler+0x33c>)
 80192a6:	4313      	orrs	r3, r2
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	801a      	strh	r2, [r3, #0]
 80192ae:	e023      	b.n	80192f8 <PCD_EP_ISR_Handler+0x2f8>
 80192b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192b2:	691b      	ldr	r3, [r3, #16]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d108      	bne.n	80192ca <PCD_EP_ISR_Handler+0x2ca>
 80192b8:	697b      	ldr	r3, [r7, #20]
 80192ba:	881b      	ldrh	r3, [r3, #0]
 80192bc:	b29b      	uxth	r3, r3
 80192be:	4a1f      	ldr	r2, [pc, #124]	@ (801933c <PCD_EP_ISR_Handler+0x33c>)
 80192c0:	4313      	orrs	r3, r2
 80192c2:	b29a      	uxth	r2, r3
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	801a      	strh	r2, [r3, #0]
 80192c8:	e016      	b.n	80192f8 <PCD_EP_ISR_Handler+0x2f8>
 80192ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192cc:	691b      	ldr	r3, [r3, #16]
 80192ce:	085b      	lsrs	r3, r3, #1
 80192d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80192d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192d4:	691b      	ldr	r3, [r3, #16]
 80192d6:	2201      	movs	r2, #1
 80192d8:	4013      	ands	r3, r2
 80192da:	d002      	beq.n	80192e2 <PCD_EP_ISR_Handler+0x2e2>
 80192dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192de:	3301      	adds	r3, #1
 80192e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80192e2:	697b      	ldr	r3, [r7, #20]
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	029b      	lsls	r3, r3, #10
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	4313      	orrs	r3, r2
 80192f2:	b29a      	uxth	r2, r3
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	881b      	ldrh	r3, [r3, #0]
 80192fe:	b29a      	uxth	r2, r3
 8019300:	2012      	movs	r0, #18
 8019302:	183b      	adds	r3, r7, r0
 8019304:	4911      	ldr	r1, [pc, #68]	@ (801934c <PCD_EP_ISR_Handler+0x34c>)
 8019306:	400a      	ands	r2, r1
 8019308:	801a      	strh	r2, [r3, #0]
 801930a:	183b      	adds	r3, r7, r0
 801930c:	183a      	adds	r2, r7, r0
 801930e:	8812      	ldrh	r2, [r2, #0]
 8019310:	2180      	movs	r1, #128	@ 0x80
 8019312:	0149      	lsls	r1, r1, #5
 8019314:	404a      	eors	r2, r1
 8019316:	801a      	strh	r2, [r3, #0]
 8019318:	183b      	adds	r3, r7, r0
 801931a:	183a      	adds	r2, r7, r0
 801931c:	8812      	ldrh	r2, [r2, #0]
 801931e:	2180      	movs	r1, #128	@ 0x80
 8019320:	0189      	lsls	r1, r1, #6
 8019322:	404a      	eors	r2, r1
 8019324:	801a      	strh	r2, [r3, #0]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	183a      	adds	r2, r7, r0
 801932c:	8812      	ldrh	r2, [r2, #0]
 801932e:	4908      	ldr	r1, [pc, #32]	@ (8019350 <PCD_EP_ISR_Handler+0x350>)
 8019330:	430a      	orrs	r2, r1
 8019332:	b292      	uxth	r2, r2
 8019334:	801a      	strh	r2, [r3, #0]
 8019336:	e255      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
 8019338:	ffff8f0f 	.word	0xffff8f0f
 801933c:	ffff8000 	.word	0xffff8000
 8019340:	00000402 	.word	0x00000402
 8019344:	00000406 	.word	0x00000406
 8019348:	00000f8f 	.word	0x00000f8f
 801934c:	ffffbf8f 	.word	0xffffbf8f
 8019350:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	001a      	movs	r2, r3
 801935a:	204d      	movs	r0, #77	@ 0x4d
 801935c:	183b      	adds	r3, r7, r0
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	009b      	lsls	r3, r3, #2
 8019362:	18d2      	adds	r2, r2, r3
 8019364:	214a      	movs	r1, #74	@ 0x4a
 8019366:	187b      	adds	r3, r7, r1
 8019368:	8812      	ldrh	r2, [r2, #0]
 801936a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801936c:	187b      	adds	r3, r7, r1
 801936e:	2200      	movs	r2, #0
 8019370:	5e9b      	ldrsh	r3, [r3, r2]
 8019372:	2b00      	cmp	r3, #0
 8019374:	db00      	blt.n	8019378 <PCD_EP_ISR_Handler+0x378>
 8019376:	e0fa      	b.n	801956e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	001a      	movs	r2, r3
 801937e:	183b      	adds	r3, r7, r0
 8019380:	781b      	ldrb	r3, [r3, #0]
 8019382:	009b      	lsls	r3, r3, #2
 8019384:	18d3      	adds	r3, r2, r3
 8019386:	881b      	ldrh	r3, [r3, #0]
 8019388:	b29a      	uxth	r2, r3
 801938a:	2448      	movs	r4, #72	@ 0x48
 801938c:	193b      	adds	r3, r7, r4
 801938e:	49d1      	ldr	r1, [pc, #836]	@ (80196d4 <PCD_EP_ISR_Handler+0x6d4>)
 8019390:	400a      	ands	r2, r1
 8019392:	801a      	strh	r2, [r3, #0]
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	001a      	movs	r2, r3
 801939a:	183b      	adds	r3, r7, r0
 801939c:	781b      	ldrb	r3, [r3, #0]
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	18d3      	adds	r3, r2, r3
 80193a2:	193a      	adds	r2, r7, r4
 80193a4:	8812      	ldrh	r2, [r2, #0]
 80193a6:	2180      	movs	r1, #128	@ 0x80
 80193a8:	430a      	orrs	r2, r1
 80193aa:	b292      	uxth	r2, r2
 80193ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80193ae:	183b      	adds	r3, r7, r0
 80193b0:	781a      	ldrb	r2, [r3, #0]
 80193b2:	0013      	movs	r3, r2
 80193b4:	009b      	lsls	r3, r3, #2
 80193b6:	189b      	adds	r3, r3, r2
 80193b8:	00db      	lsls	r3, r3, #3
 80193ba:	3369      	adds	r3, #105	@ 0x69
 80193bc:	33ff      	adds	r3, #255	@ 0xff
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	18d3      	adds	r3, r2, r3
 80193c2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80193c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193c6:	7b1b      	ldrb	r3, [r3, #12]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d125      	bne.n	8019418 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2250      	movs	r2, #80	@ 0x50
 80193d2:	5a9b      	ldrh	r3, [r3, r2]
 80193d4:	b29b      	uxth	r3, r3
 80193d6:	001a      	movs	r2, r3
 80193d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	00db      	lsls	r3, r3, #3
 80193de:	18d2      	adds	r2, r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	18d3      	adds	r3, r2, r3
 80193e6:	4abc      	ldr	r2, [pc, #752]	@ (80196d8 <PCD_EP_ISR_Handler+0x6d8>)
 80193e8:	4694      	mov	ip, r2
 80193ea:	4463      	add	r3, ip
 80193ec:	881a      	ldrh	r2, [r3, #0]
 80193ee:	2450      	movs	r4, #80	@ 0x50
 80193f0:	193b      	adds	r3, r7, r4
 80193f2:	0592      	lsls	r2, r2, #22
 80193f4:	0d92      	lsrs	r2, r2, #22
 80193f6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80193f8:	193b      	adds	r3, r7, r4
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d100      	bne.n	8019402 <PCD_EP_ISR_Handler+0x402>
 8019400:	e08d      	b.n	801951e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	6818      	ldr	r0, [r3, #0]
 8019406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019408:	6959      	ldr	r1, [r3, #20]
 801940a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801940c:	88da      	ldrh	r2, [r3, #6]
 801940e:	193b      	adds	r3, r7, r4
 8019410:	881b      	ldrh	r3, [r3, #0]
 8019412:	f007 f8f5 	bl	8020600 <USB_ReadPMA>
 8019416:	e082      	b.n	801951e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8019418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801941a:	78db      	ldrb	r3, [r3, #3]
 801941c:	2b02      	cmp	r3, #2
 801941e:	d10c      	bne.n	801943a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8019420:	2350      	movs	r3, #80	@ 0x50
 8019422:	18fc      	adds	r4, r7, r3
 8019424:	234a      	movs	r3, #74	@ 0x4a
 8019426:	18fb      	adds	r3, r7, r3
 8019428:	881a      	ldrh	r2, [r3, #0]
 801942a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	0018      	movs	r0, r3
 8019430:	f000 f9ec 	bl	801980c <HAL_PCD_EP_DB_Receive>
 8019434:	0003      	movs	r3, r0
 8019436:	8023      	strh	r3, [r4, #0]
 8019438:	e071      	b.n	801951e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	001a      	movs	r2, r3
 8019440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	009b      	lsls	r3, r3, #2
 8019446:	18d3      	adds	r3, r2, r3
 8019448:	881b      	ldrh	r3, [r3, #0]
 801944a:	b29a      	uxth	r2, r3
 801944c:	2052      	movs	r0, #82	@ 0x52
 801944e:	183b      	adds	r3, r7, r0
 8019450:	49a2      	ldr	r1, [pc, #648]	@ (80196dc <PCD_EP_ISR_Handler+0x6dc>)
 8019452:	400a      	ands	r2, r1
 8019454:	801a      	strh	r2, [r3, #0]
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	001a      	movs	r2, r3
 801945c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	18d3      	adds	r3, r2, r3
 8019464:	183a      	adds	r2, r7, r0
 8019466:	8812      	ldrh	r2, [r2, #0]
 8019468:	499d      	ldr	r1, [pc, #628]	@ (80196e0 <PCD_EP_ISR_Handler+0x6e0>)
 801946a:	430a      	orrs	r2, r1
 801946c:	b292      	uxth	r2, r2
 801946e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	001a      	movs	r2, r3
 8019476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	009b      	lsls	r3, r3, #2
 801947c:	18d3      	adds	r3, r2, r3
 801947e:	881b      	ldrh	r3, [r3, #0]
 8019480:	b29b      	uxth	r3, r3
 8019482:	001a      	movs	r2, r3
 8019484:	2380      	movs	r3, #128	@ 0x80
 8019486:	01db      	lsls	r3, r3, #7
 8019488:	4013      	ands	r3, r2
 801948a:	d024      	beq.n	80194d6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	2250      	movs	r2, #80	@ 0x50
 8019492:	5a9b      	ldrh	r3, [r3, r2]
 8019494:	b29b      	uxth	r3, r3
 8019496:	001a      	movs	r2, r3
 8019498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801949a:	781b      	ldrb	r3, [r3, #0]
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	18d2      	adds	r2, r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	18d3      	adds	r3, r2, r3
 80194a6:	4a8f      	ldr	r2, [pc, #572]	@ (80196e4 <PCD_EP_ISR_Handler+0x6e4>)
 80194a8:	4694      	mov	ip, r2
 80194aa:	4463      	add	r3, ip
 80194ac:	881a      	ldrh	r2, [r3, #0]
 80194ae:	2450      	movs	r4, #80	@ 0x50
 80194b0:	193b      	adds	r3, r7, r4
 80194b2:	0592      	lsls	r2, r2, #22
 80194b4:	0d92      	lsrs	r2, r2, #22
 80194b6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80194b8:	193b      	adds	r3, r7, r4
 80194ba:	881b      	ldrh	r3, [r3, #0]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d02e      	beq.n	801951e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6818      	ldr	r0, [r3, #0]
 80194c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194c6:	6959      	ldr	r1, [r3, #20]
 80194c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ca:	891a      	ldrh	r2, [r3, #8]
 80194cc:	193b      	adds	r3, r7, r4
 80194ce:	881b      	ldrh	r3, [r3, #0]
 80194d0:	f007 f896 	bl	8020600 <USB_ReadPMA>
 80194d4:	e023      	b.n	801951e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	2250      	movs	r2, #80	@ 0x50
 80194dc:	5a9b      	ldrh	r3, [r3, r2]
 80194de:	b29b      	uxth	r3, r3
 80194e0:	001a      	movs	r2, r3
 80194e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194e4:	781b      	ldrb	r3, [r3, #0]
 80194e6:	00db      	lsls	r3, r3, #3
 80194e8:	18d2      	adds	r2, r2, r3
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	18d3      	adds	r3, r2, r3
 80194f0:	4a79      	ldr	r2, [pc, #484]	@ (80196d8 <PCD_EP_ISR_Handler+0x6d8>)
 80194f2:	4694      	mov	ip, r2
 80194f4:	4463      	add	r3, ip
 80194f6:	881a      	ldrh	r2, [r3, #0]
 80194f8:	2450      	movs	r4, #80	@ 0x50
 80194fa:	193b      	adds	r3, r7, r4
 80194fc:	0592      	lsls	r2, r2, #22
 80194fe:	0d92      	lsrs	r2, r2, #22
 8019500:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019502:	193b      	adds	r3, r7, r4
 8019504:	881b      	ldrh	r3, [r3, #0]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d009      	beq.n	801951e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6818      	ldr	r0, [r3, #0]
 801950e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019510:	6959      	ldr	r1, [r3, #20]
 8019512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019514:	895a      	ldrh	r2, [r3, #10]
 8019516:	193b      	adds	r3, r7, r4
 8019518:	881b      	ldrh	r3, [r3, #0]
 801951a:	f007 f871 	bl	8020600 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801951e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019520:	69da      	ldr	r2, [r3, #28]
 8019522:	2150      	movs	r1, #80	@ 0x50
 8019524:	187b      	adds	r3, r7, r1
 8019526:	881b      	ldrh	r3, [r3, #0]
 8019528:	18d2      	adds	r2, r2, r3
 801952a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801952c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801952e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019530:	695a      	ldr	r2, [r3, #20]
 8019532:	187b      	adds	r3, r7, r1
 8019534:	881b      	ldrh	r3, [r3, #0]
 8019536:	18d2      	adds	r2, r2, r3
 8019538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801953a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801953c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801953e:	699b      	ldr	r3, [r3, #24]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d005      	beq.n	8019550 <PCD_EP_ISR_Handler+0x550>
 8019544:	187b      	adds	r3, r7, r1
 8019546:	881a      	ldrh	r2, [r3, #0]
 8019548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801954a:	691b      	ldr	r3, [r3, #16]
 801954c:	429a      	cmp	r2, r3
 801954e:	d207      	bcs.n	8019560 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8019550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019552:	781a      	ldrb	r2, [r3, #0]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	0011      	movs	r1, r2
 8019558:	0018      	movs	r0, r3
 801955a:	f009 f86c 	bl	8022636 <HAL_PCD_DataOutStageCallback>
 801955e:	e006      	b.n	801956e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019566:	0011      	movs	r1, r2
 8019568:	0018      	movs	r0, r3
 801956a:	f005 fd8d 	bl	801f088 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801956e:	244a      	movs	r4, #74	@ 0x4a
 8019570:	193b      	adds	r3, r7, r4
 8019572:	881b      	ldrh	r3, [r3, #0]
 8019574:	2280      	movs	r2, #128	@ 0x80
 8019576:	4013      	ands	r3, r2
 8019578:	d100      	bne.n	801957c <PCD_EP_ISR_Handler+0x57c>
 801957a:	e133      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801957c:	204d      	movs	r0, #77	@ 0x4d
 801957e:	183b      	adds	r3, r7, r0
 8019580:	781b      	ldrb	r3, [r3, #0]
 8019582:	1c5a      	adds	r2, r3, #1
 8019584:	0013      	movs	r3, r2
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	189b      	adds	r3, r3, r2
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	687a      	ldr	r2, [r7, #4]
 801958e:	18d3      	adds	r3, r2, r3
 8019590:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	001a      	movs	r2, r3
 8019598:	183b      	adds	r3, r7, r0
 801959a:	781b      	ldrb	r3, [r3, #0]
 801959c:	009b      	lsls	r3, r3, #2
 801959e:	18d3      	adds	r3, r2, r3
 80195a0:	881b      	ldrh	r3, [r3, #0]
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	2542      	movs	r5, #66	@ 0x42
 80195a6:	197b      	adds	r3, r7, r5
 80195a8:	494f      	ldr	r1, [pc, #316]	@ (80196e8 <PCD_EP_ISR_Handler+0x6e8>)
 80195aa:	400a      	ands	r2, r1
 80195ac:	801a      	strh	r2, [r3, #0]
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	001a      	movs	r2, r3
 80195b4:	183b      	adds	r3, r7, r0
 80195b6:	781b      	ldrb	r3, [r3, #0]
 80195b8:	009b      	lsls	r3, r3, #2
 80195ba:	18d3      	adds	r3, r2, r3
 80195bc:	197a      	adds	r2, r7, r5
 80195be:	8812      	ldrh	r2, [r2, #0]
 80195c0:	494a      	ldr	r1, [pc, #296]	@ (80196ec <PCD_EP_ISR_Handler+0x6ec>)
 80195c2:	430a      	orrs	r2, r1
 80195c4:	b292      	uxth	r2, r2
 80195c6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80195c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195ca:	78db      	ldrb	r3, [r3, #3]
 80195cc:	2b01      	cmp	r3, #1
 80195ce:	d000      	beq.n	80195d2 <PCD_EP_ISR_Handler+0x5d2>
 80195d0:	e0af      	b.n	8019732 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80195d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195d4:	2200      	movs	r2, #0
 80195d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80195d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195da:	7b1b      	ldrb	r3, [r3, #12]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d100      	bne.n	80195e2 <PCD_EP_ISR_Handler+0x5e2>
 80195e0:	e09f      	b.n	8019722 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80195e2:	193b      	adds	r3, r7, r4
 80195e4:	881b      	ldrh	r3, [r3, #0]
 80195e6:	2240      	movs	r2, #64	@ 0x40
 80195e8:	4013      	ands	r3, r2
 80195ea:	d046      	beq.n	801967a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80195ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195ee:	785b      	ldrb	r3, [r3, #1]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d125      	bne.n	8019640 <PCD_EP_ISR_Handler+0x640>
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	2250      	movs	r2, #80	@ 0x50
 8019600:	5a9b      	ldrh	r3, [r3, r2]
 8019602:	b29b      	uxth	r3, r3
 8019604:	001a      	movs	r2, r3
 8019606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019608:	189b      	adds	r3, r3, r2
 801960a:	627b      	str	r3, [r7, #36]	@ 0x24
 801960c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801960e:	781b      	ldrb	r3, [r3, #0]
 8019610:	00da      	lsls	r2, r3, #3
 8019612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019614:	18d3      	adds	r3, r2, r3
 8019616:	4a33      	ldr	r2, [pc, #204]	@ (80196e4 <PCD_EP_ISR_Handler+0x6e4>)
 8019618:	4694      	mov	ip, r2
 801961a:	4463      	add	r3, ip
 801961c:	623b      	str	r3, [r7, #32]
 801961e:	6a3b      	ldr	r3, [r7, #32]
 8019620:	881b      	ldrh	r3, [r3, #0]
 8019622:	b29b      	uxth	r3, r3
 8019624:	059b      	lsls	r3, r3, #22
 8019626:	0d9b      	lsrs	r3, r3, #22
 8019628:	b29a      	uxth	r2, r3
 801962a:	6a3b      	ldr	r3, [r7, #32]
 801962c:	801a      	strh	r2, [r3, #0]
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	881b      	ldrh	r3, [r3, #0]
 8019632:	b29b      	uxth	r3, r3
 8019634:	4a2d      	ldr	r2, [pc, #180]	@ (80196ec <PCD_EP_ISR_Handler+0x6ec>)
 8019636:	4313      	orrs	r3, r2
 8019638:	b29a      	uxth	r2, r3
 801963a:	6a3b      	ldr	r3, [r7, #32]
 801963c:	801a      	strh	r2, [r3, #0]
 801963e:	e070      	b.n	8019722 <PCD_EP_ISR_Handler+0x722>
 8019640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019642:	785b      	ldrb	r3, [r3, #1]
 8019644:	2b01      	cmp	r3, #1
 8019646:	d16c      	bne.n	8019722 <PCD_EP_ISR_Handler+0x722>
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2250      	movs	r2, #80	@ 0x50
 8019654:	5a9b      	ldrh	r3, [r3, r2]
 8019656:	b29b      	uxth	r3, r3
 8019658:	001a      	movs	r2, r3
 801965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801965c:	189b      	adds	r3, r3, r2
 801965e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	00da      	lsls	r2, r3, #3
 8019666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019668:	18d3      	adds	r3, r2, r3
 801966a:	4a1e      	ldr	r2, [pc, #120]	@ (80196e4 <PCD_EP_ISR_Handler+0x6e4>)
 801966c:	4694      	mov	ip, r2
 801966e:	4463      	add	r3, ip
 8019670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019674:	2200      	movs	r2, #0
 8019676:	801a      	strh	r2, [r3, #0]
 8019678:	e053      	b.n	8019722 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019682:	785b      	ldrb	r3, [r3, #1]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d133      	bne.n	80196f0 <PCD_EP_ISR_Handler+0x6f0>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	637b      	str	r3, [r7, #52]	@ 0x34
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	2250      	movs	r2, #80	@ 0x50
 8019694:	5a9b      	ldrh	r3, [r3, r2]
 8019696:	b29b      	uxth	r3, r3
 8019698:	001a      	movs	r2, r3
 801969a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801969c:	189b      	adds	r3, r3, r2
 801969e:	637b      	str	r3, [r7, #52]	@ 0x34
 80196a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	00da      	lsls	r2, r3, #3
 80196a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196a8:	18d3      	adds	r3, r2, r3
 80196aa:	4a0b      	ldr	r2, [pc, #44]	@ (80196d8 <PCD_EP_ISR_Handler+0x6d8>)
 80196ac:	4694      	mov	ip, r2
 80196ae:	4463      	add	r3, ip
 80196b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80196b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196b4:	881b      	ldrh	r3, [r3, #0]
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	059b      	lsls	r3, r3, #22
 80196ba:	0d9b      	lsrs	r3, r3, #22
 80196bc:	b29a      	uxth	r2, r3
 80196be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196c0:	801a      	strh	r2, [r3, #0]
 80196c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196c4:	881b      	ldrh	r3, [r3, #0]
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	4a08      	ldr	r2, [pc, #32]	@ (80196ec <PCD_EP_ISR_Handler+0x6ec>)
 80196ca:	4313      	orrs	r3, r2
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196d0:	801a      	strh	r2, [r3, #0]
 80196d2:	e026      	b.n	8019722 <PCD_EP_ISR_Handler+0x722>
 80196d4:	00000f8f 	.word	0x00000f8f
 80196d8:	00000406 	.word	0x00000406
 80196dc:	ffff8f8f 	.word	0xffff8f8f
 80196e0:	ffff80c0 	.word	0xffff80c0
 80196e4:	00000402 	.word	0x00000402
 80196e8:	ffff8f0f 	.word	0xffff8f0f
 80196ec:	ffff8000 	.word	0xffff8000
 80196f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196f2:	785b      	ldrb	r3, [r3, #1]
 80196f4:	2b01      	cmp	r3, #1
 80196f6:	d114      	bne.n	8019722 <PCD_EP_ISR_Handler+0x722>
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2250      	movs	r2, #80	@ 0x50
 80196fe:	5a9b      	ldrh	r3, [r3, r2]
 8019700:	b29b      	uxth	r3, r3
 8019702:	001a      	movs	r2, r3
 8019704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019706:	189b      	adds	r3, r3, r2
 8019708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801970a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801970c:	781b      	ldrb	r3, [r3, #0]
 801970e:	00da      	lsls	r2, r3, #3
 8019710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019712:	18d3      	adds	r3, r2, r3
 8019714:	4a3b      	ldr	r2, [pc, #236]	@ (8019804 <PCD_EP_ISR_Handler+0x804>)
 8019716:	4694      	mov	ip, r2
 8019718:	4463      	add	r3, ip
 801971a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801971e:	2200      	movs	r2, #0
 8019720:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019724:	781a      	ldrb	r2, [r3, #0]
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	0011      	movs	r1, r2
 801972a:	0018      	movs	r0, r3
 801972c:	f008 ffa4 	bl	8022678 <HAL_PCD_DataInStageCallback>
 8019730:	e058      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8019732:	234a      	movs	r3, #74	@ 0x4a
 8019734:	18fb      	adds	r3, r7, r3
 8019736:	881a      	ldrh	r2, [r3, #0]
 8019738:	2380      	movs	r3, #128	@ 0x80
 801973a:	005b      	lsls	r3, r3, #1
 801973c:	4013      	ands	r3, r2
 801973e:	d149      	bne.n	80197d4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2250      	movs	r2, #80	@ 0x50
 8019746:	5a9b      	ldrh	r3, [r3, r2]
 8019748:	b29b      	uxth	r3, r3
 801974a:	001a      	movs	r2, r3
 801974c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	00db      	lsls	r3, r3, #3
 8019752:	18d2      	adds	r2, r2, r3
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	18d3      	adds	r3, r2, r3
 801975a:	4a2b      	ldr	r2, [pc, #172]	@ (8019808 <PCD_EP_ISR_Handler+0x808>)
 801975c:	4694      	mov	ip, r2
 801975e:	4463      	add	r3, ip
 8019760:	881a      	ldrh	r2, [r3, #0]
 8019762:	2140      	movs	r1, #64	@ 0x40
 8019764:	187b      	adds	r3, r7, r1
 8019766:	0592      	lsls	r2, r2, #22
 8019768:	0d92      	lsrs	r2, r2, #22
 801976a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801976c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801976e:	699a      	ldr	r2, [r3, #24]
 8019770:	187b      	adds	r3, r7, r1
 8019772:	881b      	ldrh	r3, [r3, #0]
 8019774:	429a      	cmp	r2, r3
 8019776:	d907      	bls.n	8019788 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8019778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801977a:	699a      	ldr	r2, [r3, #24]
 801977c:	187b      	adds	r3, r7, r1
 801977e:	881b      	ldrh	r3, [r3, #0]
 8019780:	1ad2      	subs	r2, r2, r3
 8019782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019784:	619a      	str	r2, [r3, #24]
 8019786:	e002      	b.n	801978e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8019788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801978a:	2200      	movs	r2, #0
 801978c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801978e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019790:	699b      	ldr	r3, [r3, #24]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d107      	bne.n	80197a6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019798:	781a      	ldrb	r2, [r3, #0]
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	0011      	movs	r1, r2
 801979e:	0018      	movs	r0, r3
 80197a0:	f008 ff6a 	bl	8022678 <HAL_PCD_DataInStageCallback>
 80197a4:	e01e      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80197a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197a8:	695a      	ldr	r2, [r3, #20]
 80197aa:	2140      	movs	r1, #64	@ 0x40
 80197ac:	187b      	adds	r3, r7, r1
 80197ae:	881b      	ldrh	r3, [r3, #0]
 80197b0:	18d2      	adds	r2, r2, r3
 80197b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197b4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80197b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197b8:	69da      	ldr	r2, [r3, #28]
 80197ba:	187b      	adds	r3, r7, r1
 80197bc:	881b      	ldrh	r3, [r3, #0]
 80197be:	18d2      	adds	r2, r2, r3
 80197c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80197ca:	0011      	movs	r1, r2
 80197cc:	0018      	movs	r0, r3
 80197ce:	f005 fc5b 	bl	801f088 <USB_EPStartXfer>
 80197d2:	e007      	b.n	80197e4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80197d4:	234a      	movs	r3, #74	@ 0x4a
 80197d6:	18fb      	adds	r3, r7, r3
 80197d8:	881a      	ldrh	r2, [r3, #0]
 80197da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	0018      	movs	r0, r3
 80197e0:	f000 f930 	bl	8019a44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	2244      	movs	r2, #68	@ 0x44
 80197ea:	5a9b      	ldrh	r3, [r3, r2]
 80197ec:	b29b      	uxth	r3, r3
 80197ee:	b21b      	sxth	r3, r3
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	da01      	bge.n	80197f8 <PCD_EP_ISR_Handler+0x7f8>
 80197f4:	f7ff fc0a 	bl	801900c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80197f8:	2300      	movs	r3, #0
}
 80197fa:	0018      	movs	r0, r3
 80197fc:	46bd      	mov	sp, r7
 80197fe:	b016      	add	sp, #88	@ 0x58
 8019800:	bdb0      	pop	{r4, r5, r7, pc}
 8019802:	46c0      	nop			@ (mov r8, r8)
 8019804:	00000406 	.word	0x00000406
 8019808:	00000402 	.word	0x00000402

0801980c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801980c:	b590      	push	{r4, r7, lr}
 801980e:	b089      	sub	sp, #36	@ 0x24
 8019810:	af00      	add	r7, sp, #0
 8019812:	60f8      	str	r0, [r7, #12]
 8019814:	60b9      	str	r1, [r7, #8]
 8019816:	1dbb      	adds	r3, r7, #6
 8019818:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801981a:	1dbb      	adds	r3, r7, #6
 801981c:	881a      	ldrh	r2, [r3, #0]
 801981e:	2380      	movs	r3, #128	@ 0x80
 8019820:	01db      	lsls	r3, r3, #7
 8019822:	4013      	ands	r3, r2
 8019824:	d100      	bne.n	8019828 <HAL_PCD_EP_DB_Receive+0x1c>
 8019826:	e07d      	b.n	8019924 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2250      	movs	r2, #80	@ 0x50
 801982e:	5a9b      	ldrh	r3, [r3, r2]
 8019830:	b29b      	uxth	r3, r3
 8019832:	001a      	movs	r2, r3
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	781b      	ldrb	r3, [r3, #0]
 8019838:	00db      	lsls	r3, r3, #3
 801983a:	18d2      	adds	r2, r2, r3
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	18d3      	adds	r3, r2, r3
 8019842:	4a7a      	ldr	r2, [pc, #488]	@ (8019a2c <HAL_PCD_EP_DB_Receive+0x220>)
 8019844:	4694      	mov	ip, r2
 8019846:	4463      	add	r3, ip
 8019848:	881a      	ldrh	r2, [r3, #0]
 801984a:	211a      	movs	r1, #26
 801984c:	187b      	adds	r3, r7, r1
 801984e:	0592      	lsls	r2, r2, #22
 8019850:	0d92      	lsrs	r2, r2, #22
 8019852:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	699a      	ldr	r2, [r3, #24]
 8019858:	187b      	adds	r3, r7, r1
 801985a:	881b      	ldrh	r3, [r3, #0]
 801985c:	429a      	cmp	r2, r3
 801985e:	d307      	bcc.n	8019870 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019860:	68bb      	ldr	r3, [r7, #8]
 8019862:	699a      	ldr	r2, [r3, #24]
 8019864:	187b      	adds	r3, r7, r1
 8019866:	881b      	ldrh	r3, [r3, #0]
 8019868:	1ad2      	subs	r2, r2, r3
 801986a:	68bb      	ldr	r3, [r7, #8]
 801986c:	619a      	str	r2, [r3, #24]
 801986e:	e002      	b.n	8019876 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	2200      	movs	r2, #0
 8019874:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	699b      	ldr	r3, [r3, #24]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d121      	bne.n	80198c2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	001a      	movs	r2, r3
 8019884:	68bb      	ldr	r3, [r7, #8]
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	18d3      	adds	r3, r2, r3
 801988c:	881b      	ldrh	r3, [r3, #0]
 801988e:	b29a      	uxth	r2, r3
 8019890:	2018      	movs	r0, #24
 8019892:	183b      	adds	r3, r7, r0
 8019894:	4966      	ldr	r1, [pc, #408]	@ (8019a30 <HAL_PCD_EP_DB_Receive+0x224>)
 8019896:	400a      	ands	r2, r1
 8019898:	801a      	strh	r2, [r3, #0]
 801989a:	183b      	adds	r3, r7, r0
 801989c:	183a      	adds	r2, r7, r0
 801989e:	8812      	ldrh	r2, [r2, #0]
 80198a0:	2180      	movs	r1, #128	@ 0x80
 80198a2:	0189      	lsls	r1, r1, #6
 80198a4:	404a      	eors	r2, r1
 80198a6:	801a      	strh	r2, [r3, #0]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	001a      	movs	r2, r3
 80198ae:	68bb      	ldr	r3, [r7, #8]
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	18d3      	adds	r3, r2, r3
 80198b6:	183a      	adds	r2, r7, r0
 80198b8:	8812      	ldrh	r2, [r2, #0]
 80198ba:	495e      	ldr	r1, [pc, #376]	@ (8019a34 <HAL_PCD_EP_DB_Receive+0x228>)
 80198bc:	430a      	orrs	r2, r1
 80198be:	b292      	uxth	r2, r2
 80198c0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80198c2:	1dbb      	adds	r3, r7, #6
 80198c4:	881b      	ldrh	r3, [r3, #0]
 80198c6:	2240      	movs	r2, #64	@ 0x40
 80198c8:	4013      	ands	r3, r2
 80198ca:	d01a      	beq.n	8019902 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	001a      	movs	r2, r3
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	009b      	lsls	r3, r3, #2
 80198d8:	18d3      	adds	r3, r2, r3
 80198da:	881b      	ldrh	r3, [r3, #0]
 80198dc:	b29a      	uxth	r2, r3
 80198de:	2016      	movs	r0, #22
 80198e0:	183b      	adds	r3, r7, r0
 80198e2:	4955      	ldr	r1, [pc, #340]	@ (8019a38 <HAL_PCD_EP_DB_Receive+0x22c>)
 80198e4:	400a      	ands	r2, r1
 80198e6:	801a      	strh	r2, [r3, #0]
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	001a      	movs	r2, r3
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	781b      	ldrb	r3, [r3, #0]
 80198f2:	009b      	lsls	r3, r3, #2
 80198f4:	18d3      	adds	r3, r2, r3
 80198f6:	183a      	adds	r2, r7, r0
 80198f8:	8812      	ldrh	r2, [r2, #0]
 80198fa:	4950      	ldr	r1, [pc, #320]	@ (8019a3c <HAL_PCD_EP_DB_Receive+0x230>)
 80198fc:	430a      	orrs	r2, r1
 80198fe:	b292      	uxth	r2, r2
 8019900:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019902:	241a      	movs	r4, #26
 8019904:	193b      	adds	r3, r7, r4
 8019906:	881b      	ldrh	r3, [r3, #0]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d100      	bne.n	801990e <HAL_PCD_EP_DB_Receive+0x102>
 801990c:	e086      	b.n	8019a1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	6818      	ldr	r0, [r3, #0]
 8019912:	68bb      	ldr	r3, [r7, #8]
 8019914:	6959      	ldr	r1, [r3, #20]
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	891a      	ldrh	r2, [r3, #8]
 801991a:	193b      	adds	r3, r7, r4
 801991c:	881b      	ldrh	r3, [r3, #0]
 801991e:	f006 fe6f 	bl	8020600 <USB_ReadPMA>
 8019922:	e07b      	b.n	8019a1c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2250      	movs	r2, #80	@ 0x50
 801992a:	5a9b      	ldrh	r3, [r3, r2]
 801992c:	b29b      	uxth	r3, r3
 801992e:	001a      	movs	r2, r3
 8019930:	68bb      	ldr	r3, [r7, #8]
 8019932:	781b      	ldrb	r3, [r3, #0]
 8019934:	00db      	lsls	r3, r3, #3
 8019936:	18d2      	adds	r2, r2, r3
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	18d3      	adds	r3, r2, r3
 801993e:	4a40      	ldr	r2, [pc, #256]	@ (8019a40 <HAL_PCD_EP_DB_Receive+0x234>)
 8019940:	4694      	mov	ip, r2
 8019942:	4463      	add	r3, ip
 8019944:	881a      	ldrh	r2, [r3, #0]
 8019946:	211a      	movs	r1, #26
 8019948:	187b      	adds	r3, r7, r1
 801994a:	0592      	lsls	r2, r2, #22
 801994c:	0d92      	lsrs	r2, r2, #22
 801994e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019950:	68bb      	ldr	r3, [r7, #8]
 8019952:	699a      	ldr	r2, [r3, #24]
 8019954:	187b      	adds	r3, r7, r1
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	429a      	cmp	r2, r3
 801995a:	d307      	bcc.n	801996c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	699a      	ldr	r2, [r3, #24]
 8019960:	187b      	adds	r3, r7, r1
 8019962:	881b      	ldrh	r3, [r3, #0]
 8019964:	1ad2      	subs	r2, r2, r3
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	619a      	str	r2, [r3, #24]
 801996a:	e002      	b.n	8019972 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	2200      	movs	r2, #0
 8019970:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019972:	68bb      	ldr	r3, [r7, #8]
 8019974:	699b      	ldr	r3, [r3, #24]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d121      	bne.n	80199be <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	001a      	movs	r2, r3
 8019980:	68bb      	ldr	r3, [r7, #8]
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	009b      	lsls	r3, r3, #2
 8019986:	18d3      	adds	r3, r2, r3
 8019988:	881b      	ldrh	r3, [r3, #0]
 801998a:	b29a      	uxth	r2, r3
 801998c:	201e      	movs	r0, #30
 801998e:	183b      	adds	r3, r7, r0
 8019990:	4927      	ldr	r1, [pc, #156]	@ (8019a30 <HAL_PCD_EP_DB_Receive+0x224>)
 8019992:	400a      	ands	r2, r1
 8019994:	801a      	strh	r2, [r3, #0]
 8019996:	183b      	adds	r3, r7, r0
 8019998:	183a      	adds	r2, r7, r0
 801999a:	8812      	ldrh	r2, [r2, #0]
 801999c:	2180      	movs	r1, #128	@ 0x80
 801999e:	0189      	lsls	r1, r1, #6
 80199a0:	404a      	eors	r2, r1
 80199a2:	801a      	strh	r2, [r3, #0]
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	001a      	movs	r2, r3
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	009b      	lsls	r3, r3, #2
 80199b0:	18d3      	adds	r3, r2, r3
 80199b2:	183a      	adds	r2, r7, r0
 80199b4:	8812      	ldrh	r2, [r2, #0]
 80199b6:	491f      	ldr	r1, [pc, #124]	@ (8019a34 <HAL_PCD_EP_DB_Receive+0x228>)
 80199b8:	430a      	orrs	r2, r1
 80199ba:	b292      	uxth	r2, r2
 80199bc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80199be:	1dbb      	adds	r3, r7, #6
 80199c0:	881b      	ldrh	r3, [r3, #0]
 80199c2:	2240      	movs	r2, #64	@ 0x40
 80199c4:	4013      	ands	r3, r2
 80199c6:	d11a      	bne.n	80199fe <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	001a      	movs	r2, r3
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	009b      	lsls	r3, r3, #2
 80199d4:	18d3      	adds	r3, r2, r3
 80199d6:	881b      	ldrh	r3, [r3, #0]
 80199d8:	b29a      	uxth	r2, r3
 80199da:	201c      	movs	r0, #28
 80199dc:	183b      	adds	r3, r7, r0
 80199de:	4916      	ldr	r1, [pc, #88]	@ (8019a38 <HAL_PCD_EP_DB_Receive+0x22c>)
 80199e0:	400a      	ands	r2, r1
 80199e2:	801a      	strh	r2, [r3, #0]
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	001a      	movs	r2, r3
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	781b      	ldrb	r3, [r3, #0]
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	18d3      	adds	r3, r2, r3
 80199f2:	183a      	adds	r2, r7, r0
 80199f4:	8812      	ldrh	r2, [r2, #0]
 80199f6:	4911      	ldr	r1, [pc, #68]	@ (8019a3c <HAL_PCD_EP_DB_Receive+0x230>)
 80199f8:	430a      	orrs	r2, r1
 80199fa:	b292      	uxth	r2, r2
 80199fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80199fe:	241a      	movs	r4, #26
 8019a00:	193b      	adds	r3, r7, r4
 8019a02:	881b      	ldrh	r3, [r3, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d009      	beq.n	8019a1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	6818      	ldr	r0, [r3, #0]
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	6959      	ldr	r1, [r3, #20]
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	895a      	ldrh	r2, [r3, #10]
 8019a14:	193b      	adds	r3, r7, r4
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	f006 fdf2 	bl	8020600 <USB_ReadPMA>
    }
  }

  return count;
 8019a1c:	231a      	movs	r3, #26
 8019a1e:	18fb      	adds	r3, r7, r3
 8019a20:	881b      	ldrh	r3, [r3, #0]
}
 8019a22:	0018      	movs	r0, r3
 8019a24:	46bd      	mov	sp, r7
 8019a26:	b009      	add	sp, #36	@ 0x24
 8019a28:	bd90      	pop	{r4, r7, pc}
 8019a2a:	46c0      	nop			@ (mov r8, r8)
 8019a2c:	00000402 	.word	0x00000402
 8019a30:	ffffbf8f 	.word	0xffffbf8f
 8019a34:	ffff8080 	.word	0xffff8080
 8019a38:	ffff8f8f 	.word	0xffff8f8f
 8019a3c:	ffff80c0 	.word	0xffff80c0
 8019a40:	00000406 	.word	0x00000406

08019a44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b0a4      	sub	sp, #144	@ 0x90
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	60f8      	str	r0, [r7, #12]
 8019a4c:	60b9      	str	r1, [r7, #8]
 8019a4e:	1dbb      	adds	r3, r7, #6
 8019a50:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019a52:	1dbb      	adds	r3, r7, #6
 8019a54:	881b      	ldrh	r3, [r3, #0]
 8019a56:	2240      	movs	r2, #64	@ 0x40
 8019a58:	4013      	ands	r3, r2
 8019a5a:	d100      	bne.n	8019a5e <HAL_PCD_EP_DB_Transmit+0x1a>
 8019a5c:	e1e4      	b.n	8019e28 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	2250      	movs	r2, #80	@ 0x50
 8019a64:	5a9b      	ldrh	r3, [r3, r2]
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	001a      	movs	r2, r3
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	00db      	lsls	r3, r3, #3
 8019a70:	18d2      	adds	r2, r2, r3
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	18d3      	adds	r3, r2, r3
 8019a78:	4ad0      	ldr	r2, [pc, #832]	@ (8019dbc <HAL_PCD_EP_DB_Transmit+0x378>)
 8019a7a:	4694      	mov	ip, r2
 8019a7c:	4463      	add	r3, ip
 8019a7e:	881a      	ldrh	r2, [r3, #0]
 8019a80:	2186      	movs	r1, #134	@ 0x86
 8019a82:	187b      	adds	r3, r7, r1
 8019a84:	0592      	lsls	r2, r2, #22
 8019a86:	0d92      	lsrs	r2, r2, #22
 8019a88:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	699a      	ldr	r2, [r3, #24]
 8019a8e:	187b      	adds	r3, r7, r1
 8019a90:	881b      	ldrh	r3, [r3, #0]
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d907      	bls.n	8019aa6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	699a      	ldr	r2, [r3, #24]
 8019a9a:	187b      	adds	r3, r7, r1
 8019a9c:	881b      	ldrh	r3, [r3, #0]
 8019a9e:	1ad2      	subs	r2, r2, r3
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	619a      	str	r2, [r3, #24]
 8019aa4:	e002      	b.n	8019aac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8019aa6:	68bb      	ldr	r3, [r7, #8]
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	699b      	ldr	r3, [r3, #24]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d000      	beq.n	8019ab6 <HAL_PCD_EP_DB_Transmit+0x72>
 8019ab4:	e0b5      	b.n	8019c22 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019ab6:	68bb      	ldr	r3, [r7, #8]
 8019ab8:	785b      	ldrb	r3, [r3, #1]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d125      	bne.n	8019b0a <HAL_PCD_EP_DB_Transmit+0xc6>
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	2250      	movs	r2, #80	@ 0x50
 8019aca:	5a9b      	ldrh	r3, [r3, r2]
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	001a      	movs	r2, r3
 8019ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ad2:	189b      	adds	r3, r3, r2
 8019ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	00da      	lsls	r2, r3, #3
 8019adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ade:	18d3      	adds	r3, r2, r3
 8019ae0:	4ab6      	ldr	r2, [pc, #728]	@ (8019dbc <HAL_PCD_EP_DB_Transmit+0x378>)
 8019ae2:	4694      	mov	ip, r2
 8019ae4:	4463      	add	r3, ip
 8019ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019aea:	881b      	ldrh	r3, [r3, #0]
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	059b      	lsls	r3, r3, #22
 8019af0:	0d9b      	lsrs	r3, r3, #22
 8019af2:	b29a      	uxth	r2, r3
 8019af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019af6:	801a      	strh	r2, [r3, #0]
 8019af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019afa:	881b      	ldrh	r3, [r3, #0]
 8019afc:	b29b      	uxth	r3, r3
 8019afe:	4ab0      	ldr	r2, [pc, #704]	@ (8019dc0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019b00:	4313      	orrs	r3, r2
 8019b02:	b29a      	uxth	r2, r3
 8019b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b06:	801a      	strh	r2, [r3, #0]
 8019b08:	e01b      	b.n	8019b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	785b      	ldrb	r3, [r3, #1]
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d117      	bne.n	8019b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	2250      	movs	r2, #80	@ 0x50
 8019b1e:	5a9b      	ldrh	r3, [r3, r2]
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	001a      	movs	r2, r3
 8019b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b26:	189b      	adds	r3, r3, r2
 8019b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	781b      	ldrb	r3, [r3, #0]
 8019b2e:	00da      	lsls	r2, r3, #3
 8019b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b32:	18d3      	adds	r3, r2, r3
 8019b34:	4aa1      	ldr	r2, [pc, #644]	@ (8019dbc <HAL_PCD_EP_DB_Transmit+0x378>)
 8019b36:	4694      	mov	ip, r2
 8019b38:	4463      	add	r3, ip
 8019b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b3e:	2200      	movs	r2, #0
 8019b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b48:	68bb      	ldr	r3, [r7, #8]
 8019b4a:	785b      	ldrb	r3, [r3, #1]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d125      	bne.n	8019b9c <HAL_PCD_EP_DB_Transmit+0x158>
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	61fb      	str	r3, [r7, #28]
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	2250      	movs	r2, #80	@ 0x50
 8019b5c:	5a9b      	ldrh	r3, [r3, r2]
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	001a      	movs	r2, r3
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	189b      	adds	r3, r3, r2
 8019b66:	61fb      	str	r3, [r7, #28]
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	781b      	ldrb	r3, [r3, #0]
 8019b6c:	00da      	lsls	r2, r3, #3
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	18d3      	adds	r3, r2, r3
 8019b72:	4a94      	ldr	r2, [pc, #592]	@ (8019dc4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019b74:	4694      	mov	ip, r2
 8019b76:	4463      	add	r3, ip
 8019b78:	61bb      	str	r3, [r7, #24]
 8019b7a:	69bb      	ldr	r3, [r7, #24]
 8019b7c:	881b      	ldrh	r3, [r3, #0]
 8019b7e:	b29b      	uxth	r3, r3
 8019b80:	059b      	lsls	r3, r3, #22
 8019b82:	0d9b      	lsrs	r3, r3, #22
 8019b84:	b29a      	uxth	r2, r3
 8019b86:	69bb      	ldr	r3, [r7, #24]
 8019b88:	801a      	strh	r2, [r3, #0]
 8019b8a:	69bb      	ldr	r3, [r7, #24]
 8019b8c:	881b      	ldrh	r3, [r3, #0]
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	4a8b      	ldr	r2, [pc, #556]	@ (8019dc0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019b92:	4313      	orrs	r3, r2
 8019b94:	b29a      	uxth	r2, r3
 8019b96:	69bb      	ldr	r3, [r7, #24]
 8019b98:	801a      	strh	r2, [r3, #0]
 8019b9a:	e018      	b.n	8019bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	785b      	ldrb	r3, [r3, #1]
 8019ba0:	2b01      	cmp	r3, #1
 8019ba2:	d114      	bne.n	8019bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	2250      	movs	r2, #80	@ 0x50
 8019baa:	5a9b      	ldrh	r3, [r3, r2]
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	001a      	movs	r2, r3
 8019bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb2:	189b      	adds	r3, r3, r2
 8019bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	781b      	ldrb	r3, [r3, #0]
 8019bba:	00da      	lsls	r2, r3, #3
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bbe:	18d3      	adds	r3, r2, r3
 8019bc0:	4a80      	ldr	r2, [pc, #512]	@ (8019dc4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019bc2:	4694      	mov	ip, r2
 8019bc4:	4463      	add	r3, ip
 8019bc6:	623b      	str	r3, [r7, #32]
 8019bc8:	6a3b      	ldr	r3, [r7, #32]
 8019bca:	2200      	movs	r2, #0
 8019bcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	781a      	ldrb	r2, [r3, #0]
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	0011      	movs	r1, r2
 8019bd6:	0018      	movs	r0, r3
 8019bd8:	f008 fd4e 	bl	8022678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019bdc:	1dbb      	adds	r3, r7, #6
 8019bde:	881a      	ldrh	r2, [r3, #0]
 8019be0:	2380      	movs	r3, #128	@ 0x80
 8019be2:	01db      	lsls	r3, r3, #7
 8019be4:	4013      	ands	r3, r2
 8019be6:	d100      	bne.n	8019bea <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019be8:	e309      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	001a      	movs	r2, r3
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	781b      	ldrb	r3, [r3, #0]
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	18d3      	adds	r3, r2, r3
 8019bf8:	881b      	ldrh	r3, [r3, #0]
 8019bfa:	b29a      	uxth	r2, r3
 8019bfc:	2016      	movs	r0, #22
 8019bfe:	183b      	adds	r3, r7, r0
 8019c00:	4971      	ldr	r1, [pc, #452]	@ (8019dc8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019c02:	400a      	ands	r2, r1
 8019c04:	801a      	strh	r2, [r3, #0]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	001a      	movs	r2, r3
 8019c0c:	68bb      	ldr	r3, [r7, #8]
 8019c0e:	781b      	ldrb	r3, [r3, #0]
 8019c10:	009b      	lsls	r3, r3, #2
 8019c12:	18d3      	adds	r3, r2, r3
 8019c14:	183a      	adds	r2, r7, r0
 8019c16:	8812      	ldrh	r2, [r2, #0]
 8019c18:	496c      	ldr	r1, [pc, #432]	@ (8019dcc <HAL_PCD_EP_DB_Transmit+0x388>)
 8019c1a:	430a      	orrs	r2, r1
 8019c1c:	b292      	uxth	r2, r2
 8019c1e:	801a      	strh	r2, [r3, #0]
 8019c20:	e2ed      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019c22:	1dbb      	adds	r3, r7, #6
 8019c24:	881a      	ldrh	r2, [r3, #0]
 8019c26:	2380      	movs	r3, #128	@ 0x80
 8019c28:	01db      	lsls	r3, r3, #7
 8019c2a:	4013      	ands	r3, r2
 8019c2c:	d01a      	beq.n	8019c64 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	001a      	movs	r2, r3
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	781b      	ldrb	r3, [r3, #0]
 8019c38:	009b      	lsls	r3, r3, #2
 8019c3a:	18d3      	adds	r3, r2, r3
 8019c3c:	881b      	ldrh	r3, [r3, #0]
 8019c3e:	b29a      	uxth	r2, r3
 8019c40:	208a      	movs	r0, #138	@ 0x8a
 8019c42:	183b      	adds	r3, r7, r0
 8019c44:	4960      	ldr	r1, [pc, #384]	@ (8019dc8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019c46:	400a      	ands	r2, r1
 8019c48:	801a      	strh	r2, [r3, #0]
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	001a      	movs	r2, r3
 8019c50:	68bb      	ldr	r3, [r7, #8]
 8019c52:	781b      	ldrb	r3, [r3, #0]
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	18d3      	adds	r3, r2, r3
 8019c58:	183a      	adds	r2, r7, r0
 8019c5a:	8812      	ldrh	r2, [r2, #0]
 8019c5c:	495b      	ldr	r1, [pc, #364]	@ (8019dcc <HAL_PCD_EP_DB_Transmit+0x388>)
 8019c5e:	430a      	orrs	r2, r1
 8019c60:	b292      	uxth	r2, r2
 8019c62:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019c64:	68bb      	ldr	r3, [r7, #8]
 8019c66:	2224      	movs	r2, #36	@ 0x24
 8019c68:	5c9b      	ldrb	r3, [r3, r2]
 8019c6a:	2b01      	cmp	r3, #1
 8019c6c:	d000      	beq.n	8019c70 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019c6e:	e2c6      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	695a      	ldr	r2, [r3, #20]
 8019c74:	2186      	movs	r1, #134	@ 0x86
 8019c76:	187b      	adds	r3, r7, r1
 8019c78:	881b      	ldrh	r3, [r3, #0]
 8019c7a:	18d2      	adds	r2, r2, r3
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	69da      	ldr	r2, [r3, #28]
 8019c84:	187b      	adds	r3, r7, r1
 8019c86:	881b      	ldrh	r3, [r3, #0]
 8019c88:	18d2      	adds	r2, r2, r3
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	6a1a      	ldr	r2, [r3, #32]
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	691b      	ldr	r3, [r3, #16]
 8019c96:	429a      	cmp	r2, r3
 8019c98:	d30c      	bcc.n	8019cb4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	691b      	ldr	r3, [r3, #16]
 8019c9e:	218c      	movs	r1, #140	@ 0x8c
 8019ca0:	187a      	adds	r2, r7, r1
 8019ca2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	6a1a      	ldr	r2, [r3, #32]
 8019ca8:	187b      	adds	r3, r7, r1
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	1ad2      	subs	r2, r2, r3
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	621a      	str	r2, [r3, #32]
 8019cb2:	e01a      	b.n	8019cea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	6a1b      	ldr	r3, [r3, #32]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d10a      	bne.n	8019cd2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8019cbc:	2386      	movs	r3, #134	@ 0x86
 8019cbe:	18fb      	adds	r3, r7, r3
 8019cc0:	881b      	ldrh	r3, [r3, #0]
 8019cc2:	228c      	movs	r2, #140	@ 0x8c
 8019cc4:	18ba      	adds	r2, r7, r2
 8019cc6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	2224      	movs	r2, #36	@ 0x24
 8019ccc:	2100      	movs	r1, #0
 8019cce:	5499      	strb	r1, [r3, r2]
 8019cd0:	e00b      	b.n	8019cea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	2224      	movs	r2, #36	@ 0x24
 8019cd6:	2100      	movs	r1, #0
 8019cd8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8019cda:	68bb      	ldr	r3, [r7, #8]
 8019cdc:	6a1b      	ldr	r3, [r3, #32]
 8019cde:	228c      	movs	r2, #140	@ 0x8c
 8019ce0:	18ba      	adds	r2, r7, r2
 8019ce2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	785b      	ldrb	r3, [r3, #1]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d000      	beq.n	8019cf4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019cf2:	e06d      	b.n	8019dd0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	2250      	movs	r2, #80	@ 0x50
 8019d00:	5a9b      	ldrh	r3, [r3, r2]
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	001a      	movs	r2, r3
 8019d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d08:	189b      	adds	r3, r3, r2
 8019d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019d0c:	68bb      	ldr	r3, [r7, #8]
 8019d0e:	781b      	ldrb	r3, [r3, #0]
 8019d10:	00da      	lsls	r2, r3, #3
 8019d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d14:	18d3      	adds	r3, r2, r3
 8019d16:	4a29      	ldr	r2, [pc, #164]	@ (8019dbc <HAL_PCD_EP_DB_Transmit+0x378>)
 8019d18:	4694      	mov	ip, r2
 8019d1a:	4463      	add	r3, ip
 8019d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d20:	881b      	ldrh	r3, [r3, #0]
 8019d22:	b29b      	uxth	r3, r3
 8019d24:	059b      	lsls	r3, r3, #22
 8019d26:	0d9b      	lsrs	r3, r3, #22
 8019d28:	b29a      	uxth	r2, r3
 8019d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d2c:	801a      	strh	r2, [r3, #0]
 8019d2e:	228c      	movs	r2, #140	@ 0x8c
 8019d30:	18bb      	adds	r3, r7, r2
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d36:	d91a      	bls.n	8019d6e <HAL_PCD_EP_DB_Transmit+0x32a>
 8019d38:	18bb      	adds	r3, r7, r2
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	095b      	lsrs	r3, r3, #5
 8019d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d40:	18bb      	adds	r3, r7, r2
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	221f      	movs	r2, #31
 8019d46:	4013      	ands	r3, r2
 8019d48:	d102      	bne.n	8019d50 <HAL_PCD_EP_DB_Transmit+0x30c>
 8019d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d4c:	3b01      	subs	r3, #1
 8019d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d52:	881b      	ldrh	r3, [r3, #0]
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d58:	b29b      	uxth	r3, r3
 8019d5a:	029b      	lsls	r3, r3, #10
 8019d5c:	b29b      	uxth	r3, r3
 8019d5e:	4313      	orrs	r3, r2
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	4a17      	ldr	r2, [pc, #92]	@ (8019dc0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019d64:	4313      	orrs	r3, r2
 8019d66:	b29a      	uxth	r2, r3
 8019d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d6a:	801a      	strh	r2, [r3, #0]
 8019d6c:	e04f      	b.n	8019e0e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019d6e:	238c      	movs	r3, #140	@ 0x8c
 8019d70:	18fb      	adds	r3, r7, r3
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d108      	bne.n	8019d8a <HAL_PCD_EP_DB_Transmit+0x346>
 8019d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d7a:	881b      	ldrh	r3, [r3, #0]
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	4a10      	ldr	r2, [pc, #64]	@ (8019dc0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019d80:	4313      	orrs	r3, r2
 8019d82:	b29a      	uxth	r2, r3
 8019d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d86:	801a      	strh	r2, [r3, #0]
 8019d88:	e041      	b.n	8019e0e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019d8a:	228c      	movs	r2, #140	@ 0x8c
 8019d8c:	18bb      	adds	r3, r7, r2
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	085b      	lsrs	r3, r3, #1
 8019d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d94:	18bb      	adds	r3, r7, r2
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2201      	movs	r2, #1
 8019d9a:	4013      	ands	r3, r2
 8019d9c:	d002      	beq.n	8019da4 <HAL_PCD_EP_DB_Transmit+0x360>
 8019d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019da0:	3301      	adds	r3, #1
 8019da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019da6:	881b      	ldrh	r3, [r3, #0]
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	029b      	lsls	r3, r3, #10
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	4313      	orrs	r3, r2
 8019db4:	b29a      	uxth	r2, r3
 8019db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019db8:	801a      	strh	r2, [r3, #0]
 8019dba:	e028      	b.n	8019e0e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019dbc:	00000402 	.word	0x00000402
 8019dc0:	ffff8000 	.word	0xffff8000
 8019dc4:	00000406 	.word	0x00000406
 8019dc8:	ffff8f8f 	.word	0xffff8f8f
 8019dcc:	ffffc080 	.word	0xffffc080
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	785b      	ldrb	r3, [r3, #1]
 8019dd4:	2b01      	cmp	r3, #1
 8019dd6:	d11a      	bne.n	8019e0e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	2250      	movs	r2, #80	@ 0x50
 8019de4:	5a9b      	ldrh	r3, [r3, r2]
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	001a      	movs	r2, r3
 8019dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019dec:	189b      	adds	r3, r3, r2
 8019dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	00da      	lsls	r2, r3, #3
 8019df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019df8:	18d3      	adds	r3, r2, r3
 8019dfa:	4adb      	ldr	r2, [pc, #876]	@ (801a168 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019dfc:	4694      	mov	ip, r2
 8019dfe:	4463      	add	r3, ip
 8019e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8019e02:	238c      	movs	r3, #140	@ 0x8c
 8019e04:	18fb      	adds	r3, r7, r3
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	b29a      	uxth	r2, r3
 8019e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	6818      	ldr	r0, [r3, #0]
 8019e12:	68bb      	ldr	r3, [r7, #8]
 8019e14:	6959      	ldr	r1, [r3, #20]
 8019e16:	68bb      	ldr	r3, [r7, #8]
 8019e18:	891a      	ldrh	r2, [r3, #8]
 8019e1a:	238c      	movs	r3, #140	@ 0x8c
 8019e1c:	18fb      	adds	r3, r7, r3
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	f006 fba3 	bl	802056c <USB_WritePMA>
 8019e26:	e1ea      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	2250      	movs	r2, #80	@ 0x50
 8019e2e:	5a9b      	ldrh	r3, [r3, r2]
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	001a      	movs	r2, r3
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	781b      	ldrb	r3, [r3, #0]
 8019e38:	00db      	lsls	r3, r3, #3
 8019e3a:	18d2      	adds	r2, r2, r3
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	18d3      	adds	r3, r2, r3
 8019e42:	4aca      	ldr	r2, [pc, #808]	@ (801a16c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019e44:	4694      	mov	ip, r2
 8019e46:	4463      	add	r3, ip
 8019e48:	881a      	ldrh	r2, [r3, #0]
 8019e4a:	2186      	movs	r1, #134	@ 0x86
 8019e4c:	187b      	adds	r3, r7, r1
 8019e4e:	0592      	lsls	r2, r2, #22
 8019e50:	0d92      	lsrs	r2, r2, #22
 8019e52:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	699a      	ldr	r2, [r3, #24]
 8019e58:	187b      	adds	r3, r7, r1
 8019e5a:	881b      	ldrh	r3, [r3, #0]
 8019e5c:	429a      	cmp	r2, r3
 8019e5e:	d307      	bcc.n	8019e70 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	699a      	ldr	r2, [r3, #24]
 8019e64:	187b      	adds	r3, r7, r1
 8019e66:	881b      	ldrh	r3, [r3, #0]
 8019e68:	1ad2      	subs	r2, r2, r3
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	619a      	str	r2, [r3, #24]
 8019e6e:	e002      	b.n	8019e76 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	2200      	movs	r2, #0
 8019e74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	699b      	ldr	r3, [r3, #24]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d000      	beq.n	8019e80 <HAL_PCD_EP_DB_Transmit+0x43c>
 8019e7e:	e0bb      	b.n	8019ff8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	785b      	ldrb	r3, [r3, #1]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d125      	bne.n	8019ed4 <HAL_PCD_EP_DB_Transmit+0x490>
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	2250      	movs	r2, #80	@ 0x50
 8019e94:	5a9b      	ldrh	r3, [r3, r2]
 8019e96:	b29b      	uxth	r3, r3
 8019e98:	001a      	movs	r2, r3
 8019e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019e9c:	189b      	adds	r3, r3, r2
 8019e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019ea0:	68bb      	ldr	r3, [r7, #8]
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	00da      	lsls	r2, r3, #3
 8019ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019ea8:	18d3      	adds	r3, r2, r3
 8019eaa:	4aaf      	ldr	r2, [pc, #700]	@ (801a168 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019eac:	4694      	mov	ip, r2
 8019eae:	4463      	add	r3, ip
 8019eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019eb4:	881b      	ldrh	r3, [r3, #0]
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	059b      	lsls	r3, r3, #22
 8019eba:	0d9b      	lsrs	r3, r3, #22
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ec0:	801a      	strh	r2, [r3, #0]
 8019ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ec4:	881b      	ldrh	r3, [r3, #0]
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4aa9      	ldr	r2, [pc, #676]	@ (801a170 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019eca:	4313      	orrs	r3, r2
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ed0:	801a      	strh	r2, [r3, #0]
 8019ed2:	e01b      	b.n	8019f0c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019ed4:	68bb      	ldr	r3, [r7, #8]
 8019ed6:	785b      	ldrb	r3, [r3, #1]
 8019ed8:	2b01      	cmp	r3, #1
 8019eda:	d117      	bne.n	8019f0c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2250      	movs	r2, #80	@ 0x50
 8019ee8:	5a9b      	ldrh	r3, [r3, r2]
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	001a      	movs	r2, r3
 8019eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ef0:	189b      	adds	r3, r3, r2
 8019ef2:	667b      	str	r3, [r7, #100]	@ 0x64
 8019ef4:	68bb      	ldr	r3, [r7, #8]
 8019ef6:	781b      	ldrb	r3, [r3, #0]
 8019ef8:	00da      	lsls	r2, r3, #3
 8019efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019efc:	18d3      	adds	r3, r2, r3
 8019efe:	4a9a      	ldr	r2, [pc, #616]	@ (801a168 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019f00:	4694      	mov	ip, r2
 8019f02:	4463      	add	r3, ip
 8019f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019f08:	2200      	movs	r2, #0
 8019f0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	677b      	str	r3, [r7, #116]	@ 0x74
 8019f12:	68bb      	ldr	r3, [r7, #8]
 8019f14:	785b      	ldrb	r3, [r3, #1]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d12b      	bne.n	8019f72 <HAL_PCD_EP_DB_Transmit+0x52e>
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	2250      	movs	r2, #80	@ 0x50
 8019f26:	5a9b      	ldrh	r3, [r3, r2]
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	001a      	movs	r2, r3
 8019f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019f2e:	189b      	adds	r3, r3, r2
 8019f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	781b      	ldrb	r3, [r3, #0]
 8019f36:	00da      	lsls	r2, r3, #3
 8019f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019f3a:	18d3      	adds	r3, r2, r3
 8019f3c:	4a8b      	ldr	r2, [pc, #556]	@ (801a16c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019f3e:	4694      	mov	ip, r2
 8019f40:	4463      	add	r3, ip
 8019f42:	2180      	movs	r1, #128	@ 0x80
 8019f44:	187a      	adds	r2, r7, r1
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	187b      	adds	r3, r7, r1
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	881b      	ldrh	r3, [r3, #0]
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	059b      	lsls	r3, r3, #22
 8019f52:	0d9b      	lsrs	r3, r3, #22
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	187b      	adds	r3, r7, r1
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	801a      	strh	r2, [r3, #0]
 8019f5c:	187b      	adds	r3, r7, r1
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	881b      	ldrh	r3, [r3, #0]
 8019f62:	b29b      	uxth	r3, r3
 8019f64:	4a82      	ldr	r2, [pc, #520]	@ (801a170 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019f66:	4313      	orrs	r3, r2
 8019f68:	b29a      	uxth	r2, r3
 8019f6a:	187b      	adds	r3, r7, r1
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	801a      	strh	r2, [r3, #0]
 8019f70:	e018      	b.n	8019fa4 <HAL_PCD_EP_DB_Transmit+0x560>
 8019f72:	68bb      	ldr	r3, [r7, #8]
 8019f74:	785b      	ldrb	r3, [r3, #1]
 8019f76:	2b01      	cmp	r3, #1
 8019f78:	d114      	bne.n	8019fa4 <HAL_PCD_EP_DB_Transmit+0x560>
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2250      	movs	r2, #80	@ 0x50
 8019f80:	5a9b      	ldrh	r3, [r3, r2]
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	001a      	movs	r2, r3
 8019f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019f88:	189b      	adds	r3, r3, r2
 8019f8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019f8c:	68bb      	ldr	r3, [r7, #8]
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	00da      	lsls	r2, r3, #3
 8019f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019f94:	18d3      	adds	r3, r2, r3
 8019f96:	4a75      	ldr	r2, [pc, #468]	@ (801a16c <HAL_PCD_EP_DB_Transmit+0x728>)
 8019f98:	4694      	mov	ip, r2
 8019f9a:	4463      	add	r3, ip
 8019f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8019f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	781a      	ldrb	r2, [r3, #0]
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	0011      	movs	r1, r2
 8019fac:	0018      	movs	r0, r3
 8019fae:	f008 fb63 	bl	8022678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019fb2:	1dbb      	adds	r3, r7, #6
 8019fb4:	881a      	ldrh	r2, [r3, #0]
 8019fb6:	2380      	movs	r3, #128	@ 0x80
 8019fb8:	01db      	lsls	r3, r3, #7
 8019fba:	4013      	ands	r3, r2
 8019fbc:	d000      	beq.n	8019fc0 <HAL_PCD_EP_DB_Transmit+0x57c>
 8019fbe:	e11e      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	001a      	movs	r2, r3
 8019fc6:	68bb      	ldr	r3, [r7, #8]
 8019fc8:	781b      	ldrb	r3, [r3, #0]
 8019fca:	009b      	lsls	r3, r3, #2
 8019fcc:	18d3      	adds	r3, r2, r3
 8019fce:	881b      	ldrh	r3, [r3, #0]
 8019fd0:	b29a      	uxth	r2, r3
 8019fd2:	2088      	movs	r0, #136	@ 0x88
 8019fd4:	183b      	adds	r3, r7, r0
 8019fd6:	4967      	ldr	r1, [pc, #412]	@ (801a174 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019fd8:	400a      	ands	r2, r1
 8019fda:	801a      	strh	r2, [r3, #0]
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	001a      	movs	r2, r3
 8019fe2:	68bb      	ldr	r3, [r7, #8]
 8019fe4:	781b      	ldrb	r3, [r3, #0]
 8019fe6:	009b      	lsls	r3, r3, #2
 8019fe8:	18d3      	adds	r3, r2, r3
 8019fea:	183a      	adds	r2, r7, r0
 8019fec:	8812      	ldrh	r2, [r2, #0]
 8019fee:	4962      	ldr	r1, [pc, #392]	@ (801a178 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019ff0:	430a      	orrs	r2, r1
 8019ff2:	b292      	uxth	r2, r2
 8019ff4:	801a      	strh	r2, [r3, #0]
 8019ff6:	e102      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019ff8:	1dbb      	adds	r3, r7, #6
 8019ffa:	881a      	ldrh	r2, [r3, #0]
 8019ffc:	2380      	movs	r3, #128	@ 0x80
 8019ffe:	01db      	lsls	r3, r3, #7
 801a000:	4013      	ands	r3, r2
 801a002:	d11a      	bne.n	801a03a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	001a      	movs	r2, r3
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	781b      	ldrb	r3, [r3, #0]
 801a00e:	009b      	lsls	r3, r3, #2
 801a010:	18d3      	adds	r3, r2, r3
 801a012:	881b      	ldrh	r3, [r3, #0]
 801a014:	b29a      	uxth	r2, r3
 801a016:	204e      	movs	r0, #78	@ 0x4e
 801a018:	183b      	adds	r3, r7, r0
 801a01a:	4956      	ldr	r1, [pc, #344]	@ (801a174 <HAL_PCD_EP_DB_Transmit+0x730>)
 801a01c:	400a      	ands	r2, r1
 801a01e:	801a      	strh	r2, [r3, #0]
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	001a      	movs	r2, r3
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	781b      	ldrb	r3, [r3, #0]
 801a02a:	009b      	lsls	r3, r3, #2
 801a02c:	18d3      	adds	r3, r2, r3
 801a02e:	183a      	adds	r2, r7, r0
 801a030:	8812      	ldrh	r2, [r2, #0]
 801a032:	4951      	ldr	r1, [pc, #324]	@ (801a178 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a034:	430a      	orrs	r2, r1
 801a036:	b292      	uxth	r2, r2
 801a038:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	2224      	movs	r2, #36	@ 0x24
 801a03e:	5c9b      	ldrb	r3, [r3, r2]
 801a040:	2b01      	cmp	r3, #1
 801a042:	d000      	beq.n	801a046 <HAL_PCD_EP_DB_Transmit+0x602>
 801a044:	e0db      	b.n	801a1fe <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a046:	68bb      	ldr	r3, [r7, #8]
 801a048:	695a      	ldr	r2, [r3, #20]
 801a04a:	2186      	movs	r1, #134	@ 0x86
 801a04c:	187b      	adds	r3, r7, r1
 801a04e:	881b      	ldrh	r3, [r3, #0]
 801a050:	18d2      	adds	r2, r2, r3
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a056:	68bb      	ldr	r3, [r7, #8]
 801a058:	69da      	ldr	r2, [r3, #28]
 801a05a:	187b      	adds	r3, r7, r1
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	18d2      	adds	r2, r2, r3
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	6a1a      	ldr	r2, [r3, #32]
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	691b      	ldr	r3, [r3, #16]
 801a06c:	429a      	cmp	r2, r3
 801a06e:	d30c      	bcc.n	801a08a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	691b      	ldr	r3, [r3, #16]
 801a074:	218c      	movs	r1, #140	@ 0x8c
 801a076:	187a      	adds	r2, r7, r1
 801a078:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	6a1a      	ldr	r2, [r3, #32]
 801a07e:	187b      	adds	r3, r7, r1
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	1ad2      	subs	r2, r2, r3
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	621a      	str	r2, [r3, #32]
 801a088:	e01a      	b.n	801a0c0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801a08a:	68bb      	ldr	r3, [r7, #8]
 801a08c:	6a1b      	ldr	r3, [r3, #32]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d10a      	bne.n	801a0a8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801a092:	2386      	movs	r3, #134	@ 0x86
 801a094:	18fb      	adds	r3, r7, r3
 801a096:	881b      	ldrh	r3, [r3, #0]
 801a098:	228c      	movs	r2, #140	@ 0x8c
 801a09a:	18ba      	adds	r2, r7, r2
 801a09c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	2224      	movs	r2, #36	@ 0x24
 801a0a2:	2100      	movs	r1, #0
 801a0a4:	5499      	strb	r1, [r3, r2]
 801a0a6:	e00b      	b.n	801a0c0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	6a1b      	ldr	r3, [r3, #32]
 801a0ac:	228c      	movs	r2, #140	@ 0x8c
 801a0ae:	18ba      	adds	r2, r7, r2
 801a0b0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	2224      	movs	r2, #36	@ 0x24
 801a0bc:	2100      	movs	r1, #0
 801a0be:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	785b      	ldrb	r3, [r3, #1]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d000      	beq.n	801a0d0 <HAL_PCD_EP_DB_Transmit+0x68c>
 801a0ce:	e06e      	b.n	801a1ae <HAL_PCD_EP_DB_Transmit+0x76a>
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	2250      	movs	r2, #80	@ 0x50
 801a0dc:	5a9b      	ldrh	r3, [r3, r2]
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	001a      	movs	r2, r3
 801a0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0e4:	189b      	adds	r3, r3, r2
 801a0e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	781b      	ldrb	r3, [r3, #0]
 801a0ec:	00da      	lsls	r2, r3, #3
 801a0ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0f0:	18d3      	adds	r3, r2, r3
 801a0f2:	4a1e      	ldr	r2, [pc, #120]	@ (801a16c <HAL_PCD_EP_DB_Transmit+0x728>)
 801a0f4:	4694      	mov	ip, r2
 801a0f6:	4463      	add	r3, ip
 801a0f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a0fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0fc:	881b      	ldrh	r3, [r3, #0]
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	059b      	lsls	r3, r3, #22
 801a102:	0d9b      	lsrs	r3, r3, #22
 801a104:	b29a      	uxth	r2, r3
 801a106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a108:	801a      	strh	r2, [r3, #0]
 801a10a:	228c      	movs	r2, #140	@ 0x8c
 801a10c:	18bb      	adds	r3, r7, r2
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	2b3e      	cmp	r3, #62	@ 0x3e
 801a112:	d91a      	bls.n	801a14a <HAL_PCD_EP_DB_Transmit+0x706>
 801a114:	18bb      	adds	r3, r7, r2
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	095b      	lsrs	r3, r3, #5
 801a11a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a11c:	18bb      	adds	r3, r7, r2
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	221f      	movs	r2, #31
 801a122:	4013      	ands	r3, r2
 801a124:	d102      	bne.n	801a12c <HAL_PCD_EP_DB_Transmit+0x6e8>
 801a126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a128:	3b01      	subs	r3, #1
 801a12a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a12c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a12e:	881b      	ldrh	r3, [r3, #0]
 801a130:	b29a      	uxth	r2, r3
 801a132:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a134:	b29b      	uxth	r3, r3
 801a136:	029b      	lsls	r3, r3, #10
 801a138:	b29b      	uxth	r3, r3
 801a13a:	4313      	orrs	r3, r2
 801a13c:	b29b      	uxth	r3, r3
 801a13e:	4a0c      	ldr	r2, [pc, #48]	@ (801a170 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a140:	4313      	orrs	r3, r2
 801a142:	b29a      	uxth	r2, r3
 801a144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a146:	801a      	strh	r2, [r3, #0]
 801a148:	e04d      	b.n	801a1e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a14a:	238c      	movs	r3, #140	@ 0x8c
 801a14c:	18fb      	adds	r3, r7, r3
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d113      	bne.n	801a17c <HAL_PCD_EP_DB_Transmit+0x738>
 801a154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a156:	881b      	ldrh	r3, [r3, #0]
 801a158:	b29b      	uxth	r3, r3
 801a15a:	4a05      	ldr	r2, [pc, #20]	@ (801a170 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a15c:	4313      	orrs	r3, r2
 801a15e:	b29a      	uxth	r2, r3
 801a160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a162:	801a      	strh	r2, [r3, #0]
 801a164:	e03f      	b.n	801a1e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a166:	46c0      	nop			@ (mov r8, r8)
 801a168:	00000402 	.word	0x00000402
 801a16c:	00000406 	.word	0x00000406
 801a170:	ffff8000 	.word	0xffff8000
 801a174:	ffff8f8f 	.word	0xffff8f8f
 801a178:	ffffc080 	.word	0xffffc080
 801a17c:	228c      	movs	r2, #140	@ 0x8c
 801a17e:	18bb      	adds	r3, r7, r2
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	085b      	lsrs	r3, r3, #1
 801a184:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a186:	18bb      	adds	r3, r7, r2
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	2201      	movs	r2, #1
 801a18c:	4013      	ands	r3, r2
 801a18e:	d002      	beq.n	801a196 <HAL_PCD_EP_DB_Transmit+0x752>
 801a190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a192:	3301      	adds	r3, #1
 801a194:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	b29a      	uxth	r2, r3
 801a19c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a19e:	b29b      	uxth	r3, r3
 801a1a0:	029b      	lsls	r3, r3, #10
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	4313      	orrs	r3, r2
 801a1a6:	b29a      	uxth	r2, r3
 801a1a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1aa:	801a      	strh	r2, [r3, #0]
 801a1ac:	e01b      	b.n	801a1e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	785b      	ldrb	r3, [r3, #1]
 801a1b2:	2b01      	cmp	r3, #1
 801a1b4:	d117      	bne.n	801a1e6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	2250      	movs	r2, #80	@ 0x50
 801a1bc:	5a9b      	ldrh	r3, [r3, r2]
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	001a      	movs	r2, r3
 801a1c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1c4:	189b      	adds	r3, r3, r2
 801a1c6:	657b      	str	r3, [r7, #84]	@ 0x54
 801a1c8:	68bb      	ldr	r3, [r7, #8]
 801a1ca:	781b      	ldrb	r3, [r3, #0]
 801a1cc:	00da      	lsls	r2, r3, #3
 801a1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1d0:	18d3      	adds	r3, r2, r3
 801a1d2:	4a21      	ldr	r2, [pc, #132]	@ (801a258 <HAL_PCD_EP_DB_Transmit+0x814>)
 801a1d4:	4694      	mov	ip, r2
 801a1d6:	4463      	add	r3, ip
 801a1d8:	653b      	str	r3, [r7, #80]	@ 0x50
 801a1da:	238c      	movs	r3, #140	@ 0x8c
 801a1dc:	18fb      	adds	r3, r7, r3
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	b29a      	uxth	r2, r3
 801a1e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	6818      	ldr	r0, [r3, #0]
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	6959      	ldr	r1, [r3, #20]
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	895a      	ldrh	r2, [r3, #10]
 801a1f2:	238c      	movs	r3, #140	@ 0x8c
 801a1f4:	18fb      	adds	r3, r7, r3
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	b29b      	uxth	r3, r3
 801a1fa:	f006 f9b7 	bl	802056c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	001a      	movs	r2, r3
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	009b      	lsls	r3, r3, #2
 801a20a:	18d3      	adds	r3, r2, r3
 801a20c:	881b      	ldrh	r3, [r3, #0]
 801a20e:	b29a      	uxth	r2, r3
 801a210:	2014      	movs	r0, #20
 801a212:	183b      	adds	r3, r7, r0
 801a214:	4911      	ldr	r1, [pc, #68]	@ (801a25c <HAL_PCD_EP_DB_Transmit+0x818>)
 801a216:	400a      	ands	r2, r1
 801a218:	801a      	strh	r2, [r3, #0]
 801a21a:	183b      	adds	r3, r7, r0
 801a21c:	183a      	adds	r2, r7, r0
 801a21e:	8812      	ldrh	r2, [r2, #0]
 801a220:	2110      	movs	r1, #16
 801a222:	404a      	eors	r2, r1
 801a224:	801a      	strh	r2, [r3, #0]
 801a226:	183b      	adds	r3, r7, r0
 801a228:	183a      	adds	r2, r7, r0
 801a22a:	8812      	ldrh	r2, [r2, #0]
 801a22c:	2120      	movs	r1, #32
 801a22e:	404a      	eors	r2, r1
 801a230:	801a      	strh	r2, [r3, #0]
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	001a      	movs	r2, r3
 801a238:	68bb      	ldr	r3, [r7, #8]
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	009b      	lsls	r3, r3, #2
 801a23e:	18d3      	adds	r3, r2, r3
 801a240:	183a      	adds	r2, r7, r0
 801a242:	8812      	ldrh	r2, [r2, #0]
 801a244:	4906      	ldr	r1, [pc, #24]	@ (801a260 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801a246:	430a      	orrs	r2, r1
 801a248:	b292      	uxth	r2, r2
 801a24a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801a24c:	2300      	movs	r3, #0
}
 801a24e:	0018      	movs	r0, r3
 801a250:	46bd      	mov	sp, r7
 801a252:	b024      	add	sp, #144	@ 0x90
 801a254:	bd80      	pop	{r7, pc}
 801a256:	46c0      	nop			@ (mov r8, r8)
 801a258:	00000406 	.word	0x00000406
 801a25c:	ffff8fbf 	.word	0xffff8fbf
 801a260:	ffff8080 	.word	0xffff8080

0801a264 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801a264:	b590      	push	{r4, r7, lr}
 801a266:	b087      	sub	sp, #28
 801a268:	af00      	add	r7, sp, #0
 801a26a:	60f8      	str	r0, [r7, #12]
 801a26c:	0008      	movs	r0, r1
 801a26e:	0011      	movs	r1, r2
 801a270:	607b      	str	r3, [r7, #4]
 801a272:	240a      	movs	r4, #10
 801a274:	193b      	adds	r3, r7, r4
 801a276:	1c02      	adds	r2, r0, #0
 801a278:	801a      	strh	r2, [r3, #0]
 801a27a:	2308      	movs	r3, #8
 801a27c:	18fb      	adds	r3, r7, r3
 801a27e:	1c0a      	adds	r2, r1, #0
 801a280:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801a282:	0021      	movs	r1, r4
 801a284:	187b      	adds	r3, r7, r1
 801a286:	881b      	ldrh	r3, [r3, #0]
 801a288:	2280      	movs	r2, #128	@ 0x80
 801a28a:	4013      	ands	r3, r2
 801a28c:	b29b      	uxth	r3, r3
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d00c      	beq.n	801a2ac <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a292:	187b      	adds	r3, r7, r1
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	2207      	movs	r2, #7
 801a298:	4013      	ands	r3, r2
 801a29a:	1c5a      	adds	r2, r3, #1
 801a29c:	0013      	movs	r3, r2
 801a29e:	009b      	lsls	r3, r3, #2
 801a2a0:	189b      	adds	r3, r3, r2
 801a2a2:	00db      	lsls	r3, r3, #3
 801a2a4:	68fa      	ldr	r2, [r7, #12]
 801a2a6:	18d3      	adds	r3, r2, r3
 801a2a8:	617b      	str	r3, [r7, #20]
 801a2aa:	e00b      	b.n	801a2c4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a2ac:	230a      	movs	r3, #10
 801a2ae:	18fb      	adds	r3, r7, r3
 801a2b0:	881a      	ldrh	r2, [r3, #0]
 801a2b2:	0013      	movs	r3, r2
 801a2b4:	009b      	lsls	r3, r3, #2
 801a2b6:	189b      	adds	r3, r3, r2
 801a2b8:	00db      	lsls	r3, r3, #3
 801a2ba:	3369      	adds	r3, #105	@ 0x69
 801a2bc:	33ff      	adds	r3, #255	@ 0xff
 801a2be:	68fa      	ldr	r2, [r7, #12]
 801a2c0:	18d3      	adds	r3, r2, r3
 801a2c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801a2c4:	2308      	movs	r3, #8
 801a2c6:	18fb      	adds	r3, r7, r3
 801a2c8:	881b      	ldrh	r3, [r3, #0]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d107      	bne.n	801a2de <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801a2ce:	697b      	ldr	r3, [r7, #20]
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	697b      	ldr	r3, [r7, #20]
 801a2da:	80da      	strh	r2, [r3, #6]
 801a2dc:	e00b      	b.n	801a2f6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	2201      	movs	r2, #1
 801a2e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	0c1b      	lsrs	r3, r3, #16
 801a2f0:	b29a      	uxth	r2, r3
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a2f6:	2300      	movs	r3, #0
}
 801a2f8:	0018      	movs	r0, r3
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	b007      	add	sp, #28
 801a2fe:	bd90      	pop	{r4, r7, pc}

0801a300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a30e:	687a      	ldr	r2, [r7, #4]
 801a310:	23ba      	movs	r3, #186	@ 0xba
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	2101      	movs	r1, #1
 801a316:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801a318:	687a      	ldr	r2, [r7, #4]
 801a31a:	23b8      	movs	r3, #184	@ 0xb8
 801a31c:	009b      	lsls	r3, r3, #2
 801a31e:	2100      	movs	r1, #0
 801a320:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	2254      	movs	r2, #84	@ 0x54
 801a326:	5a9b      	ldrh	r3, [r3, r2]
 801a328:	b29b      	uxth	r3, r3
 801a32a:	2201      	movs	r2, #1
 801a32c:	4313      	orrs	r3, r2
 801a32e:	b299      	uxth	r1, r3
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	2254      	movs	r2, #84	@ 0x54
 801a334:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	2254      	movs	r2, #84	@ 0x54
 801a33a:	5a9b      	ldrh	r3, [r3, r2]
 801a33c:	b29b      	uxth	r3, r3
 801a33e:	2202      	movs	r2, #2
 801a340:	4313      	orrs	r3, r2
 801a342:	b299      	uxth	r1, r3
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	2254      	movs	r2, #84	@ 0x54
 801a348:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a34a:	2300      	movs	r3, #0
}
 801a34c:	0018      	movs	r0, r3
 801a34e:	46bd      	mov	sp, r7
 801a350:	b004      	add	sp, #16
 801a352:	bd80      	pop	{r7, pc}

0801a354 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b082      	sub	sp, #8
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	000a      	movs	r2, r1
 801a35e:	1cfb      	adds	r3, r7, #3
 801a360:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801a362:	46c0      	nop			@ (mov r8, r8)
 801a364:	46bd      	mov	sp, r7
 801a366:	b002      	add	sp, #8
 801a368:	bd80      	pop	{r7, pc}
	...

0801a36c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801a370:	4b04      	ldr	r3, [pc, #16]	@ (801a384 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a372:	681a      	ldr	r2, [r3, #0]
 801a374:	4b03      	ldr	r3, [pc, #12]	@ (801a384 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a376:	2180      	movs	r1, #128	@ 0x80
 801a378:	0049      	lsls	r1, r1, #1
 801a37a:	430a      	orrs	r2, r1
 801a37c:	601a      	str	r2, [r3, #0]
}
 801a37e:	46c0      	nop			@ (mov r8, r8)
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	40007000 	.word	0x40007000

0801a388 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801a38c:	4b04      	ldr	r3, [pc, #16]	@ (801a3a0 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	4b03      	ldr	r3, [pc, #12]	@ (801a3a0 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a392:	4904      	ldr	r1, [pc, #16]	@ (801a3a4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801a394:	400a      	ands	r2, r1
 801a396:	601a      	str	r2, [r3, #0]
}
 801a398:	46c0      	nop			@ (mov r8, r8)
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}
 801a39e:	46c0      	nop			@ (mov r8, r8)
 801a3a0:	40007000 	.word	0x40007000
 801a3a4:	fffffeff 	.word	0xfffffeff

0801a3a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b086      	sub	sp, #24
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	000a      	movs	r2, r1
 801a3b2:	1cfb      	adds	r3, r7, #3
 801a3b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801a3ba:	4b25      	ldr	r3, [pc, #148]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3bc:	681a      	ldr	r2, [r3, #0]
 801a3be:	2380      	movs	r3, #128	@ 0x80
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	4013      	ands	r3, r2
 801a3c4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801a3c6:	4b23      	ldr	r3, [pc, #140]	@ (801a454 <HAL_PWR_EnterSTOPMode+0xac>)
 801a3c8:	6a1b      	ldr	r3, [r3, #32]
 801a3ca:	2201      	movs	r2, #1
 801a3cc:	4013      	ands	r3, r2
 801a3ce:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801a3d0:	693b      	ldr	r3, [r7, #16]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d008      	beq.n	801a3e8 <HAL_PWR_EnterSTOPMode+0x40>
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d005      	beq.n	801a3e8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801a3dc:	4b1c      	ldr	r3, [pc, #112]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3de:	681a      	ldr	r2, [r3, #0]
 801a3e0:	4b1b      	ldr	r3, [pc, #108]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3e2:	491d      	ldr	r1, [pc, #116]	@ (801a458 <HAL_PWR_EnterSTOPMode+0xb0>)
 801a3e4:	400a      	ands	r2, r1
 801a3e6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801a3e8:	4b19      	ldr	r3, [pc, #100]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801a3ee:	697b      	ldr	r3, [r7, #20]
 801a3f0:	2203      	movs	r2, #3
 801a3f2:	4393      	bics	r3, r2
 801a3f4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801a3f6:	697a      	ldr	r2, [r7, #20]
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	4313      	orrs	r3, r2
 801a3fc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801a3fe:	4b14      	ldr	r3, [pc, #80]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a400:	697a      	ldr	r2, [r7, #20]
 801a402:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a404:	4b15      	ldr	r3, [pc, #84]	@ (801a45c <HAL_PWR_EnterSTOPMode+0xb4>)
 801a406:	691a      	ldr	r2, [r3, #16]
 801a408:	4b14      	ldr	r3, [pc, #80]	@ (801a45c <HAL_PWR_EnterSTOPMode+0xb4>)
 801a40a:	2104      	movs	r1, #4
 801a40c:	430a      	orrs	r2, r1
 801a40e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801a410:	1cfb      	adds	r3, r7, #3
 801a412:	781b      	ldrb	r3, [r3, #0]
 801a414:	2b01      	cmp	r3, #1
 801a416:	d101      	bne.n	801a41c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801a418:	bf30      	wfi
 801a41a:	e002      	b.n	801a422 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801a41c:	bf40      	sev
    __WFE();
 801a41e:	bf20      	wfe
    __WFE();
 801a420:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a422:	4b0e      	ldr	r3, [pc, #56]	@ (801a45c <HAL_PWR_EnterSTOPMode+0xb4>)
 801a424:	691a      	ldr	r2, [r3, #16]
 801a426:	4b0d      	ldr	r3, [pc, #52]	@ (801a45c <HAL_PWR_EnterSTOPMode+0xb4>)
 801a428:	2104      	movs	r1, #4
 801a42a:	438a      	bics	r2, r1
 801a42c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801a42e:	693b      	ldr	r3, [r7, #16]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d009      	beq.n	801a448 <HAL_PWR_EnterSTOPMode+0xa0>
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d006      	beq.n	801a448 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801a43a:	4b05      	ldr	r3, [pc, #20]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a43c:	681a      	ldr	r2, [r3, #0]
 801a43e:	4b04      	ldr	r3, [pc, #16]	@ (801a450 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a440:	2180      	movs	r1, #128	@ 0x80
 801a442:	0089      	lsls	r1, r1, #2
 801a444:	430a      	orrs	r2, r1
 801a446:	601a      	str	r2, [r3, #0]
  }
}
 801a448:	46c0      	nop			@ (mov r8, r8)
 801a44a:	46bd      	mov	sp, r7
 801a44c:	b006      	add	sp, #24
 801a44e:	bd80      	pop	{r7, pc}
 801a450:	40007000 	.word	0x40007000
 801a454:	40010000 	.word	0x40010000
 801a458:	fffffdff 	.word	0xfffffdff
 801a45c:	e000ed00 	.word	0xe000ed00

0801a460 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801a464:	4b07      	ldr	r3, [pc, #28]	@ (801a484 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	4b06      	ldr	r3, [pc, #24]	@ (801a484 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a46a:	2102      	movs	r1, #2
 801a46c:	430a      	orrs	r2, r1
 801a46e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a470:	4b05      	ldr	r3, [pc, #20]	@ (801a488 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a472:	691a      	ldr	r2, [r3, #16]
 801a474:	4b04      	ldr	r3, [pc, #16]	@ (801a488 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a476:	2104      	movs	r1, #4
 801a478:	430a      	orrs	r2, r1
 801a47a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801a47c:	bf30      	wfi
}
 801a47e:	46c0      	nop			@ (mov r8, r8)
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}
 801a484:	40007000 	.word	0x40007000
 801a488:	e000ed00 	.word	0xe000ed00

0801a48c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a48c:	b5b0      	push	{r4, r5, r7, lr}
 801a48e:	b08a      	sub	sp, #40	@ 0x28
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d102      	bne.n	801a4a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a49a:	2301      	movs	r3, #1
 801a49c:	f000 fbbf 	bl	801ac1e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a4a0:	4bc9      	ldr	r3, [pc, #804]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a4a2:	68db      	ldr	r3, [r3, #12]
 801a4a4:	220c      	movs	r2, #12
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a4aa:	4bc7      	ldr	r3, [pc, #796]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a4ac:	68da      	ldr	r2, [r3, #12]
 801a4ae:	2380      	movs	r3, #128	@ 0x80
 801a4b0:	025b      	lsls	r3, r3, #9
 801a4b2:	4013      	ands	r3, r2
 801a4b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	4013      	ands	r3, r2
 801a4be:	d100      	bne.n	801a4c2 <HAL_RCC_OscConfig+0x36>
 801a4c0:	e07e      	b.n	801a5c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	2b08      	cmp	r3, #8
 801a4c6:	d007      	beq.n	801a4d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	2b0c      	cmp	r3, #12
 801a4cc:	d112      	bne.n	801a4f4 <HAL_RCC_OscConfig+0x68>
 801a4ce:	69ba      	ldr	r2, [r7, #24]
 801a4d0:	2380      	movs	r3, #128	@ 0x80
 801a4d2:	025b      	lsls	r3, r3, #9
 801a4d4:	429a      	cmp	r2, r3
 801a4d6:	d10d      	bne.n	801a4f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a4d8:	4bbb      	ldr	r3, [pc, #748]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a4da:	681a      	ldr	r2, [r3, #0]
 801a4dc:	2380      	movs	r3, #128	@ 0x80
 801a4de:	029b      	lsls	r3, r3, #10
 801a4e0:	4013      	ands	r3, r2
 801a4e2:	d100      	bne.n	801a4e6 <HAL_RCC_OscConfig+0x5a>
 801a4e4:	e06b      	b.n	801a5be <HAL_RCC_OscConfig+0x132>
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d167      	bne.n	801a5be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	f000 fb95 	bl	801ac1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	685a      	ldr	r2, [r3, #4]
 801a4f8:	2380      	movs	r3, #128	@ 0x80
 801a4fa:	025b      	lsls	r3, r3, #9
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d107      	bne.n	801a510 <HAL_RCC_OscConfig+0x84>
 801a500:	4bb1      	ldr	r3, [pc, #708]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a502:	681a      	ldr	r2, [r3, #0]
 801a504:	4bb0      	ldr	r3, [pc, #704]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a506:	2180      	movs	r1, #128	@ 0x80
 801a508:	0249      	lsls	r1, r1, #9
 801a50a:	430a      	orrs	r2, r1
 801a50c:	601a      	str	r2, [r3, #0]
 801a50e:	e027      	b.n	801a560 <HAL_RCC_OscConfig+0xd4>
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	685a      	ldr	r2, [r3, #4]
 801a514:	23a0      	movs	r3, #160	@ 0xa0
 801a516:	02db      	lsls	r3, r3, #11
 801a518:	429a      	cmp	r2, r3
 801a51a:	d10e      	bne.n	801a53a <HAL_RCC_OscConfig+0xae>
 801a51c:	4baa      	ldr	r3, [pc, #680]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a51e:	681a      	ldr	r2, [r3, #0]
 801a520:	4ba9      	ldr	r3, [pc, #676]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a522:	2180      	movs	r1, #128	@ 0x80
 801a524:	02c9      	lsls	r1, r1, #11
 801a526:	430a      	orrs	r2, r1
 801a528:	601a      	str	r2, [r3, #0]
 801a52a:	4ba7      	ldr	r3, [pc, #668]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a52c:	681a      	ldr	r2, [r3, #0]
 801a52e:	4ba6      	ldr	r3, [pc, #664]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a530:	2180      	movs	r1, #128	@ 0x80
 801a532:	0249      	lsls	r1, r1, #9
 801a534:	430a      	orrs	r2, r1
 801a536:	601a      	str	r2, [r3, #0]
 801a538:	e012      	b.n	801a560 <HAL_RCC_OscConfig+0xd4>
 801a53a:	4ba3      	ldr	r3, [pc, #652]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a53c:	681a      	ldr	r2, [r3, #0]
 801a53e:	4ba2      	ldr	r3, [pc, #648]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a540:	49a2      	ldr	r1, [pc, #648]	@ (801a7cc <HAL_RCC_OscConfig+0x340>)
 801a542:	400a      	ands	r2, r1
 801a544:	601a      	str	r2, [r3, #0]
 801a546:	4ba0      	ldr	r3, [pc, #640]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a548:	681a      	ldr	r2, [r3, #0]
 801a54a:	2380      	movs	r3, #128	@ 0x80
 801a54c:	025b      	lsls	r3, r3, #9
 801a54e:	4013      	ands	r3, r2
 801a550:	60fb      	str	r3, [r7, #12]
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	4b9c      	ldr	r3, [pc, #624]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a556:	681a      	ldr	r2, [r3, #0]
 801a558:	4b9b      	ldr	r3, [pc, #620]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a55a:	499d      	ldr	r1, [pc, #628]	@ (801a7d0 <HAL_RCC_OscConfig+0x344>)
 801a55c:	400a      	ands	r2, r1
 801a55e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	685b      	ldr	r3, [r3, #4]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d015      	beq.n	801a594 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a568:	f7f9 fb54 	bl	8013c14 <HAL_GetTick>
 801a56c:	0003      	movs	r3, r0
 801a56e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a570:	e009      	b.n	801a586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a572:	f7f9 fb4f 	bl	8013c14 <HAL_GetTick>
 801a576:	0002      	movs	r2, r0
 801a578:	697b      	ldr	r3, [r7, #20]
 801a57a:	1ad3      	subs	r3, r2, r3
 801a57c:	2b64      	cmp	r3, #100	@ 0x64
 801a57e:	d902      	bls.n	801a586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a580:	2303      	movs	r3, #3
 801a582:	f000 fb4c 	bl	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a586:	4b90      	ldr	r3, [pc, #576]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a588:	681a      	ldr	r2, [r3, #0]
 801a58a:	2380      	movs	r3, #128	@ 0x80
 801a58c:	029b      	lsls	r3, r3, #10
 801a58e:	4013      	ands	r3, r2
 801a590:	d0ef      	beq.n	801a572 <HAL_RCC_OscConfig+0xe6>
 801a592:	e015      	b.n	801a5c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a594:	f7f9 fb3e 	bl	8013c14 <HAL_GetTick>
 801a598:	0003      	movs	r3, r0
 801a59a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a59c:	e008      	b.n	801a5b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a59e:	f7f9 fb39 	bl	8013c14 <HAL_GetTick>
 801a5a2:	0002      	movs	r2, r0
 801a5a4:	697b      	ldr	r3, [r7, #20]
 801a5a6:	1ad3      	subs	r3, r2, r3
 801a5a8:	2b64      	cmp	r3, #100	@ 0x64
 801a5aa:	d901      	bls.n	801a5b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801a5ac:	2303      	movs	r3, #3
 801a5ae:	e336      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a5b0:	4b85      	ldr	r3, [pc, #532]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a5b2:	681a      	ldr	r2, [r3, #0]
 801a5b4:	2380      	movs	r3, #128	@ 0x80
 801a5b6:	029b      	lsls	r3, r3, #10
 801a5b8:	4013      	ands	r3, r2
 801a5ba:	d1f0      	bne.n	801a59e <HAL_RCC_OscConfig+0x112>
 801a5bc:	e000      	b.n	801a5c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a5be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	2202      	movs	r2, #2
 801a5c6:	4013      	ands	r3, r2
 801a5c8:	d100      	bne.n	801a5cc <HAL_RCC_OscConfig+0x140>
 801a5ca:	e099      	b.n	801a700 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	68db      	ldr	r3, [r3, #12]
 801a5d0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d4:	2220      	movs	r2, #32
 801a5d6:	4013      	ands	r3, r2
 801a5d8:	d009      	beq.n	801a5ee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801a5da:	4b7b      	ldr	r3, [pc, #492]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a5dc:	681a      	ldr	r2, [r3, #0]
 801a5de:	4b7a      	ldr	r3, [pc, #488]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a5e0:	2120      	movs	r1, #32
 801a5e2:	430a      	orrs	r2, r1
 801a5e4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e8:	2220      	movs	r2, #32
 801a5ea:	4393      	bics	r3, r2
 801a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a5ee:	69fb      	ldr	r3, [r7, #28]
 801a5f0:	2b04      	cmp	r3, #4
 801a5f2:	d005      	beq.n	801a600 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801a5f4:	69fb      	ldr	r3, [r7, #28]
 801a5f6:	2b0c      	cmp	r3, #12
 801a5f8:	d13e      	bne.n	801a678 <HAL_RCC_OscConfig+0x1ec>
 801a5fa:	69bb      	ldr	r3, [r7, #24]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d13b      	bne.n	801a678 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801a600:	4b71      	ldr	r3, [pc, #452]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	2204      	movs	r2, #4
 801a606:	4013      	ands	r3, r2
 801a608:	d004      	beq.n	801a614 <HAL_RCC_OscConfig+0x188>
 801a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d101      	bne.n	801a614 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801a610:	2301      	movs	r3, #1
 801a612:	e304      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a614:	4b6c      	ldr	r3, [pc, #432]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	4a6e      	ldr	r2, [pc, #440]	@ (801a7d4 <HAL_RCC_OscConfig+0x348>)
 801a61a:	4013      	ands	r3, r2
 801a61c:	0019      	movs	r1, r3
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	691b      	ldr	r3, [r3, #16]
 801a622:	021a      	lsls	r2, r3, #8
 801a624:	4b68      	ldr	r3, [pc, #416]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a626:	430a      	orrs	r2, r1
 801a628:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a62a:	4b67      	ldr	r3, [pc, #412]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2209      	movs	r2, #9
 801a630:	4393      	bics	r3, r2
 801a632:	0019      	movs	r1, r3
 801a634:	4b64      	ldr	r3, [pc, #400]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a638:	430a      	orrs	r2, r1
 801a63a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a63c:	f000 fc42 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801a640:	0001      	movs	r1, r0
 801a642:	4b61      	ldr	r3, [pc, #388]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a644:	68db      	ldr	r3, [r3, #12]
 801a646:	091b      	lsrs	r3, r3, #4
 801a648:	220f      	movs	r2, #15
 801a64a:	4013      	ands	r3, r2
 801a64c:	4a62      	ldr	r2, [pc, #392]	@ (801a7d8 <HAL_RCC_OscConfig+0x34c>)
 801a64e:	5cd3      	ldrb	r3, [r2, r3]
 801a650:	000a      	movs	r2, r1
 801a652:	40da      	lsrs	r2, r3
 801a654:	4b61      	ldr	r3, [pc, #388]	@ (801a7dc <HAL_RCC_OscConfig+0x350>)
 801a656:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a658:	4b61      	ldr	r3, [pc, #388]	@ (801a7e0 <HAL_RCC_OscConfig+0x354>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	2513      	movs	r5, #19
 801a65e:	197c      	adds	r4, r7, r5
 801a660:	0018      	movs	r0, r3
 801a662:	f7f9 fa91 	bl	8013b88 <HAL_InitTick>
 801a666:	0003      	movs	r3, r0
 801a668:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a66a:	197b      	adds	r3, r7, r5
 801a66c:	781b      	ldrb	r3, [r3, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d046      	beq.n	801a700 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a672:	197b      	adds	r3, r7, r5
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	e2d2      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d027      	beq.n	801a6ce <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a67e:	4b52      	ldr	r3, [pc, #328]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	2209      	movs	r2, #9
 801a684:	4393      	bics	r3, r2
 801a686:	0019      	movs	r1, r3
 801a688:	4b4f      	ldr	r3, [pc, #316]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a68c:	430a      	orrs	r2, r1
 801a68e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a690:	f7f9 fac0 	bl	8013c14 <HAL_GetTick>
 801a694:	0003      	movs	r3, r0
 801a696:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a698:	e008      	b.n	801a6ac <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a69a:	f7f9 fabb 	bl	8013c14 <HAL_GetTick>
 801a69e:	0002      	movs	r2, r0
 801a6a0:	697b      	ldr	r3, [r7, #20]
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	2b02      	cmp	r3, #2
 801a6a6:	d901      	bls.n	801a6ac <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801a6a8:	2303      	movs	r3, #3
 801a6aa:	e2b8      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a6ac:	4b46      	ldr	r3, [pc, #280]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	2204      	movs	r2, #4
 801a6b2:	4013      	ands	r3, r2
 801a6b4:	d0f1      	beq.n	801a69a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a6b6:	4b44      	ldr	r3, [pc, #272]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	4a46      	ldr	r2, [pc, #280]	@ (801a7d4 <HAL_RCC_OscConfig+0x348>)
 801a6bc:	4013      	ands	r3, r2
 801a6be:	0019      	movs	r1, r3
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	691b      	ldr	r3, [r3, #16]
 801a6c4:	021a      	lsls	r2, r3, #8
 801a6c6:	4b40      	ldr	r3, [pc, #256]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6c8:	430a      	orrs	r2, r1
 801a6ca:	605a      	str	r2, [r3, #4]
 801a6cc:	e018      	b.n	801a700 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a6ce:	4b3e      	ldr	r3, [pc, #248]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6d0:	681a      	ldr	r2, [r3, #0]
 801a6d2:	4b3d      	ldr	r3, [pc, #244]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6d4:	2101      	movs	r1, #1
 801a6d6:	438a      	bics	r2, r1
 801a6d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a6da:	f7f9 fa9b 	bl	8013c14 <HAL_GetTick>
 801a6de:	0003      	movs	r3, r0
 801a6e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a6e2:	e008      	b.n	801a6f6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a6e4:	f7f9 fa96 	bl	8013c14 <HAL_GetTick>
 801a6e8:	0002      	movs	r2, r0
 801a6ea:	697b      	ldr	r3, [r7, #20]
 801a6ec:	1ad3      	subs	r3, r2, r3
 801a6ee:	2b02      	cmp	r3, #2
 801a6f0:	d901      	bls.n	801a6f6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801a6f2:	2303      	movs	r3, #3
 801a6f4:	e293      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a6f6:	4b34      	ldr	r3, [pc, #208]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	2204      	movs	r2, #4
 801a6fc:	4013      	ands	r3, r2
 801a6fe:	d1f1      	bne.n	801a6e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	2210      	movs	r2, #16
 801a706:	4013      	ands	r3, r2
 801a708:	d100      	bne.n	801a70c <HAL_RCC_OscConfig+0x280>
 801a70a:	e0a2      	b.n	801a852 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a70c:	69fb      	ldr	r3, [r7, #28]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d140      	bne.n	801a794 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801a712:	4b2d      	ldr	r3, [pc, #180]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a714:	681a      	ldr	r2, [r3, #0]
 801a716:	2380      	movs	r3, #128	@ 0x80
 801a718:	009b      	lsls	r3, r3, #2
 801a71a:	4013      	ands	r3, r2
 801a71c:	d005      	beq.n	801a72a <HAL_RCC_OscConfig+0x29e>
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	69db      	ldr	r3, [r3, #28]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d101      	bne.n	801a72a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801a726:	2301      	movs	r3, #1
 801a728:	e279      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a72a:	4b27      	ldr	r3, [pc, #156]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a72c:	685b      	ldr	r3, [r3, #4]
 801a72e:	4a2d      	ldr	r2, [pc, #180]	@ (801a7e4 <HAL_RCC_OscConfig+0x358>)
 801a730:	4013      	ands	r3, r2
 801a732:	0019      	movs	r1, r3
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a738:	4b23      	ldr	r3, [pc, #140]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a73a:	430a      	orrs	r2, r1
 801a73c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a73e:	4b22      	ldr	r3, [pc, #136]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	021b      	lsls	r3, r3, #8
 801a744:	0a19      	lsrs	r1, r3, #8
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6a1b      	ldr	r3, [r3, #32]
 801a74a:	061a      	lsls	r2, r3, #24
 801a74c:	4b1e      	ldr	r3, [pc, #120]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a74e:	430a      	orrs	r2, r1
 801a750:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a756:	0b5b      	lsrs	r3, r3, #13
 801a758:	3301      	adds	r3, #1
 801a75a:	2280      	movs	r2, #128	@ 0x80
 801a75c:	0212      	lsls	r2, r2, #8
 801a75e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801a760:	4b19      	ldr	r3, [pc, #100]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a762:	68db      	ldr	r3, [r3, #12]
 801a764:	091b      	lsrs	r3, r3, #4
 801a766:	210f      	movs	r1, #15
 801a768:	400b      	ands	r3, r1
 801a76a:	491b      	ldr	r1, [pc, #108]	@ (801a7d8 <HAL_RCC_OscConfig+0x34c>)
 801a76c:	5ccb      	ldrb	r3, [r1, r3]
 801a76e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a770:	4b1a      	ldr	r3, [pc, #104]	@ (801a7dc <HAL_RCC_OscConfig+0x350>)
 801a772:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801a774:	4b1a      	ldr	r3, [pc, #104]	@ (801a7e0 <HAL_RCC_OscConfig+0x354>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	2513      	movs	r5, #19
 801a77a:	197c      	adds	r4, r7, r5
 801a77c:	0018      	movs	r0, r3
 801a77e:	f7f9 fa03 	bl	8013b88 <HAL_InitTick>
 801a782:	0003      	movs	r3, r0
 801a784:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801a786:	197b      	adds	r3, r7, r5
 801a788:	781b      	ldrb	r3, [r3, #0]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d061      	beq.n	801a852 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801a78e:	197b      	adds	r3, r7, r5
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	e244      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	69db      	ldr	r3, [r3, #28]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d040      	beq.n	801a81e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a79c:	4b0a      	ldr	r3, [pc, #40]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	4b09      	ldr	r3, [pc, #36]	@ (801a7c8 <HAL_RCC_OscConfig+0x33c>)
 801a7a2:	2180      	movs	r1, #128	@ 0x80
 801a7a4:	0049      	lsls	r1, r1, #1
 801a7a6:	430a      	orrs	r2, r1
 801a7a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a7aa:	f7f9 fa33 	bl	8013c14 <HAL_GetTick>
 801a7ae:	0003      	movs	r3, r0
 801a7b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a7b2:	e019      	b.n	801a7e8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a7b4:	f7f9 fa2e 	bl	8013c14 <HAL_GetTick>
 801a7b8:	0002      	movs	r2, r0
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	2b02      	cmp	r3, #2
 801a7c0:	d912      	bls.n	801a7e8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801a7c2:	2303      	movs	r3, #3
 801a7c4:	e22b      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
 801a7c6:	46c0      	nop			@ (mov r8, r8)
 801a7c8:	40021000 	.word	0x40021000
 801a7cc:	fffeffff 	.word	0xfffeffff
 801a7d0:	fffbffff 	.word	0xfffbffff
 801a7d4:	ffffe0ff 	.word	0xffffe0ff
 801a7d8:	0802dc1c 	.word	0x0802dc1c
 801a7dc:	200000e0 	.word	0x200000e0
 801a7e0:	200000f0 	.word	0x200000f0
 801a7e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a7e8:	4bca      	ldr	r3, [pc, #808]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a7ea:	681a      	ldr	r2, [r3, #0]
 801a7ec:	2380      	movs	r3, #128	@ 0x80
 801a7ee:	009b      	lsls	r3, r3, #2
 801a7f0:	4013      	ands	r3, r2
 801a7f2:	d0df      	beq.n	801a7b4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a7f4:	4bc7      	ldr	r3, [pc, #796]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a7f6:	685b      	ldr	r3, [r3, #4]
 801a7f8:	4ac7      	ldr	r2, [pc, #796]	@ (801ab18 <HAL_RCC_OscConfig+0x68c>)
 801a7fa:	4013      	ands	r3, r2
 801a7fc:	0019      	movs	r1, r3
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a802:	4bc4      	ldr	r3, [pc, #784]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a804:	430a      	orrs	r2, r1
 801a806:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a808:	4bc2      	ldr	r3, [pc, #776]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	021b      	lsls	r3, r3, #8
 801a80e:	0a19      	lsrs	r1, r3, #8
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	6a1b      	ldr	r3, [r3, #32]
 801a814:	061a      	lsls	r2, r3, #24
 801a816:	4bbf      	ldr	r3, [pc, #764]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a818:	430a      	orrs	r2, r1
 801a81a:	605a      	str	r2, [r3, #4]
 801a81c:	e019      	b.n	801a852 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a81e:	4bbd      	ldr	r3, [pc, #756]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a820:	681a      	ldr	r2, [r3, #0]
 801a822:	4bbc      	ldr	r3, [pc, #752]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a824:	49bd      	ldr	r1, [pc, #756]	@ (801ab1c <HAL_RCC_OscConfig+0x690>)
 801a826:	400a      	ands	r2, r1
 801a828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a82a:	f7f9 f9f3 	bl	8013c14 <HAL_GetTick>
 801a82e:	0003      	movs	r3, r0
 801a830:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a832:	e008      	b.n	801a846 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a834:	f7f9 f9ee 	bl	8013c14 <HAL_GetTick>
 801a838:	0002      	movs	r2, r0
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	1ad3      	subs	r3, r2, r3
 801a83e:	2b02      	cmp	r3, #2
 801a840:	d901      	bls.n	801a846 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a842:	2303      	movs	r3, #3
 801a844:	e1eb      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a846:	4bb3      	ldr	r3, [pc, #716]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a848:	681a      	ldr	r2, [r3, #0]
 801a84a:	2380      	movs	r3, #128	@ 0x80
 801a84c:	009b      	lsls	r3, r3, #2
 801a84e:	4013      	ands	r3, r2
 801a850:	d1f0      	bne.n	801a834 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	2208      	movs	r2, #8
 801a858:	4013      	ands	r3, r2
 801a85a:	d036      	beq.n	801a8ca <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	695b      	ldr	r3, [r3, #20]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d019      	beq.n	801a898 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a864:	4bab      	ldr	r3, [pc, #684]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a866:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a868:	4baa      	ldr	r3, [pc, #680]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a86a:	2101      	movs	r1, #1
 801a86c:	430a      	orrs	r2, r1
 801a86e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a870:	f7f9 f9d0 	bl	8013c14 <HAL_GetTick>
 801a874:	0003      	movs	r3, r0
 801a876:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a878:	e008      	b.n	801a88c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a87a:	f7f9 f9cb 	bl	8013c14 <HAL_GetTick>
 801a87e:	0002      	movs	r2, r0
 801a880:	697b      	ldr	r3, [r7, #20]
 801a882:	1ad3      	subs	r3, r2, r3
 801a884:	2b02      	cmp	r3, #2
 801a886:	d901      	bls.n	801a88c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801a888:	2303      	movs	r3, #3
 801a88a:	e1c8      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a88c:	4ba1      	ldr	r3, [pc, #644]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a890:	2202      	movs	r2, #2
 801a892:	4013      	ands	r3, r2
 801a894:	d0f1      	beq.n	801a87a <HAL_RCC_OscConfig+0x3ee>
 801a896:	e018      	b.n	801a8ca <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a898:	4b9e      	ldr	r3, [pc, #632]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a89a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a89c:	4b9d      	ldr	r3, [pc, #628]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a89e:	2101      	movs	r1, #1
 801a8a0:	438a      	bics	r2, r1
 801a8a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a8a4:	f7f9 f9b6 	bl	8013c14 <HAL_GetTick>
 801a8a8:	0003      	movs	r3, r0
 801a8aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a8ac:	e008      	b.n	801a8c0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a8ae:	f7f9 f9b1 	bl	8013c14 <HAL_GetTick>
 801a8b2:	0002      	movs	r2, r0
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	1ad3      	subs	r3, r2, r3
 801a8b8:	2b02      	cmp	r3, #2
 801a8ba:	d901      	bls.n	801a8c0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801a8bc:	2303      	movs	r3, #3
 801a8be:	e1ae      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a8c0:	4b94      	ldr	r3, [pc, #592]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a8c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8c4:	2202      	movs	r2, #2
 801a8c6:	4013      	ands	r3, r2
 801a8c8:	d1f1      	bne.n	801a8ae <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	2204      	movs	r2, #4
 801a8d0:	4013      	ands	r3, r2
 801a8d2:	d100      	bne.n	801a8d6 <HAL_RCC_OscConfig+0x44a>
 801a8d4:	e0ae      	b.n	801aa34 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a8d6:	2023      	movs	r0, #35	@ 0x23
 801a8d8:	183b      	adds	r3, r7, r0
 801a8da:	2200      	movs	r2, #0
 801a8dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a8de:	4b8d      	ldr	r3, [pc, #564]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a8e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a8e2:	2380      	movs	r3, #128	@ 0x80
 801a8e4:	055b      	lsls	r3, r3, #21
 801a8e6:	4013      	ands	r3, r2
 801a8e8:	d109      	bne.n	801a8fe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a8ea:	4b8a      	ldr	r3, [pc, #552]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a8ee:	4b89      	ldr	r3, [pc, #548]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a8f0:	2180      	movs	r1, #128	@ 0x80
 801a8f2:	0549      	lsls	r1, r1, #21
 801a8f4:	430a      	orrs	r2, r1
 801a8f6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a8f8:	183b      	adds	r3, r7, r0
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a8fe:	4b88      	ldr	r3, [pc, #544]	@ (801ab20 <HAL_RCC_OscConfig+0x694>)
 801a900:	681a      	ldr	r2, [r3, #0]
 801a902:	2380      	movs	r3, #128	@ 0x80
 801a904:	005b      	lsls	r3, r3, #1
 801a906:	4013      	ands	r3, r2
 801a908:	d11a      	bne.n	801a940 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a90a:	4b85      	ldr	r3, [pc, #532]	@ (801ab20 <HAL_RCC_OscConfig+0x694>)
 801a90c:	681a      	ldr	r2, [r3, #0]
 801a90e:	4b84      	ldr	r3, [pc, #528]	@ (801ab20 <HAL_RCC_OscConfig+0x694>)
 801a910:	2180      	movs	r1, #128	@ 0x80
 801a912:	0049      	lsls	r1, r1, #1
 801a914:	430a      	orrs	r2, r1
 801a916:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a918:	f7f9 f97c 	bl	8013c14 <HAL_GetTick>
 801a91c:	0003      	movs	r3, r0
 801a91e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a920:	e008      	b.n	801a934 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a922:	f7f9 f977 	bl	8013c14 <HAL_GetTick>
 801a926:	0002      	movs	r2, r0
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	1ad3      	subs	r3, r2, r3
 801a92c:	2b64      	cmp	r3, #100	@ 0x64
 801a92e:	d901      	bls.n	801a934 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801a930:	2303      	movs	r3, #3
 801a932:	e174      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a934:	4b7a      	ldr	r3, [pc, #488]	@ (801ab20 <HAL_RCC_OscConfig+0x694>)
 801a936:	681a      	ldr	r2, [r3, #0]
 801a938:	2380      	movs	r3, #128	@ 0x80
 801a93a:	005b      	lsls	r3, r3, #1
 801a93c:	4013      	ands	r3, r2
 801a93e:	d0f0      	beq.n	801a922 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	689a      	ldr	r2, [r3, #8]
 801a944:	2380      	movs	r3, #128	@ 0x80
 801a946:	005b      	lsls	r3, r3, #1
 801a948:	429a      	cmp	r2, r3
 801a94a:	d107      	bne.n	801a95c <HAL_RCC_OscConfig+0x4d0>
 801a94c:	4b71      	ldr	r3, [pc, #452]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a94e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a950:	4b70      	ldr	r3, [pc, #448]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a952:	2180      	movs	r1, #128	@ 0x80
 801a954:	0049      	lsls	r1, r1, #1
 801a956:	430a      	orrs	r2, r1
 801a958:	651a      	str	r2, [r3, #80]	@ 0x50
 801a95a:	e031      	b.n	801a9c0 <HAL_RCC_OscConfig+0x534>
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	689b      	ldr	r3, [r3, #8]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d10c      	bne.n	801a97e <HAL_RCC_OscConfig+0x4f2>
 801a964:	4b6b      	ldr	r3, [pc, #428]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a968:	4b6a      	ldr	r3, [pc, #424]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a96a:	496c      	ldr	r1, [pc, #432]	@ (801ab1c <HAL_RCC_OscConfig+0x690>)
 801a96c:	400a      	ands	r2, r1
 801a96e:	651a      	str	r2, [r3, #80]	@ 0x50
 801a970:	4b68      	ldr	r3, [pc, #416]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a974:	4b67      	ldr	r3, [pc, #412]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a976:	496b      	ldr	r1, [pc, #428]	@ (801ab24 <HAL_RCC_OscConfig+0x698>)
 801a978:	400a      	ands	r2, r1
 801a97a:	651a      	str	r2, [r3, #80]	@ 0x50
 801a97c:	e020      	b.n	801a9c0 <HAL_RCC_OscConfig+0x534>
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	689a      	ldr	r2, [r3, #8]
 801a982:	23a0      	movs	r3, #160	@ 0xa0
 801a984:	00db      	lsls	r3, r3, #3
 801a986:	429a      	cmp	r2, r3
 801a988:	d10e      	bne.n	801a9a8 <HAL_RCC_OscConfig+0x51c>
 801a98a:	4b62      	ldr	r3, [pc, #392]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a98c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a98e:	4b61      	ldr	r3, [pc, #388]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a990:	2180      	movs	r1, #128	@ 0x80
 801a992:	00c9      	lsls	r1, r1, #3
 801a994:	430a      	orrs	r2, r1
 801a996:	651a      	str	r2, [r3, #80]	@ 0x50
 801a998:	4b5e      	ldr	r3, [pc, #376]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a99a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a99c:	4b5d      	ldr	r3, [pc, #372]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a99e:	2180      	movs	r1, #128	@ 0x80
 801a9a0:	0049      	lsls	r1, r1, #1
 801a9a2:	430a      	orrs	r2, r1
 801a9a4:	651a      	str	r2, [r3, #80]	@ 0x50
 801a9a6:	e00b      	b.n	801a9c0 <HAL_RCC_OscConfig+0x534>
 801a9a8:	4b5a      	ldr	r3, [pc, #360]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a9aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9ac:	4b59      	ldr	r3, [pc, #356]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a9ae:	495b      	ldr	r1, [pc, #364]	@ (801ab1c <HAL_RCC_OscConfig+0x690>)
 801a9b0:	400a      	ands	r2, r1
 801a9b2:	651a      	str	r2, [r3, #80]	@ 0x50
 801a9b4:	4b57      	ldr	r3, [pc, #348]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a9b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9b8:	4b56      	ldr	r3, [pc, #344]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a9ba:	495a      	ldr	r1, [pc, #360]	@ (801ab24 <HAL_RCC_OscConfig+0x698>)
 801a9bc:	400a      	ands	r2, r1
 801a9be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	689b      	ldr	r3, [r3, #8]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d015      	beq.n	801a9f4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a9c8:	f7f9 f924 	bl	8013c14 <HAL_GetTick>
 801a9cc:	0003      	movs	r3, r0
 801a9ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a9d0:	e009      	b.n	801a9e6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a9d2:	f7f9 f91f 	bl	8013c14 <HAL_GetTick>
 801a9d6:	0002      	movs	r2, r0
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	1ad3      	subs	r3, r2, r3
 801a9dc:	4a52      	ldr	r2, [pc, #328]	@ (801ab28 <HAL_RCC_OscConfig+0x69c>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d901      	bls.n	801a9e6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801a9e2:	2303      	movs	r3, #3
 801a9e4:	e11b      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a9e6:	4b4b      	ldr	r3, [pc, #300]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801a9e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a9ea:	2380      	movs	r3, #128	@ 0x80
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	4013      	ands	r3, r2
 801a9f0:	d0ef      	beq.n	801a9d2 <HAL_RCC_OscConfig+0x546>
 801a9f2:	e014      	b.n	801aa1e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a9f4:	f7f9 f90e 	bl	8013c14 <HAL_GetTick>
 801a9f8:	0003      	movs	r3, r0
 801a9fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a9fc:	e009      	b.n	801aa12 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a9fe:	f7f9 f909 	bl	8013c14 <HAL_GetTick>
 801aa02:	0002      	movs	r2, r0
 801aa04:	697b      	ldr	r3, [r7, #20]
 801aa06:	1ad3      	subs	r3, r2, r3
 801aa08:	4a47      	ldr	r2, [pc, #284]	@ (801ab28 <HAL_RCC_OscConfig+0x69c>)
 801aa0a:	4293      	cmp	r3, r2
 801aa0c:	d901      	bls.n	801aa12 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801aa0e:	2303      	movs	r3, #3
 801aa10:	e105      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801aa12:	4b40      	ldr	r3, [pc, #256]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aa16:	2380      	movs	r3, #128	@ 0x80
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	4013      	ands	r3, r2
 801aa1c:	d1ef      	bne.n	801a9fe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801aa1e:	2323      	movs	r3, #35	@ 0x23
 801aa20:	18fb      	adds	r3, r7, r3
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	2b01      	cmp	r3, #1
 801aa26:	d105      	bne.n	801aa34 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801aa28:	4b3a      	ldr	r3, [pc, #232]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa2c:	4b39      	ldr	r3, [pc, #228]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa2e:	493f      	ldr	r1, [pc, #252]	@ (801ab2c <HAL_RCC_OscConfig+0x6a0>)
 801aa30:	400a      	ands	r2, r1
 801aa32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2220      	movs	r2, #32
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	d049      	beq.n	801aad2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	699b      	ldr	r3, [r3, #24]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d026      	beq.n	801aa94 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801aa46:	4b33      	ldr	r3, [pc, #204]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa48:	689a      	ldr	r2, [r3, #8]
 801aa4a:	4b32      	ldr	r3, [pc, #200]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa4c:	2101      	movs	r1, #1
 801aa4e:	430a      	orrs	r2, r1
 801aa50:	609a      	str	r2, [r3, #8]
 801aa52:	4b30      	ldr	r3, [pc, #192]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801aa56:	4b2f      	ldr	r3, [pc, #188]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa58:	2101      	movs	r1, #1
 801aa5a:	430a      	orrs	r2, r1
 801aa5c:	635a      	str	r2, [r3, #52]	@ 0x34
 801aa5e:	4b34      	ldr	r3, [pc, #208]	@ (801ab30 <HAL_RCC_OscConfig+0x6a4>)
 801aa60:	6a1a      	ldr	r2, [r3, #32]
 801aa62:	4b33      	ldr	r3, [pc, #204]	@ (801ab30 <HAL_RCC_OscConfig+0x6a4>)
 801aa64:	2180      	movs	r1, #128	@ 0x80
 801aa66:	0189      	lsls	r1, r1, #6
 801aa68:	430a      	orrs	r2, r1
 801aa6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa6c:	f7f9 f8d2 	bl	8013c14 <HAL_GetTick>
 801aa70:	0003      	movs	r3, r0
 801aa72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801aa74:	e008      	b.n	801aa88 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801aa76:	f7f9 f8cd 	bl	8013c14 <HAL_GetTick>
 801aa7a:	0002      	movs	r2, r0
 801aa7c:	697b      	ldr	r3, [r7, #20]
 801aa7e:	1ad3      	subs	r3, r2, r3
 801aa80:	2b02      	cmp	r3, #2
 801aa82:	d901      	bls.n	801aa88 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801aa84:	2303      	movs	r3, #3
 801aa86:	e0ca      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801aa88:	4b22      	ldr	r3, [pc, #136]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa8a:	689b      	ldr	r3, [r3, #8]
 801aa8c:	2202      	movs	r2, #2
 801aa8e:	4013      	ands	r3, r2
 801aa90:	d0f1      	beq.n	801aa76 <HAL_RCC_OscConfig+0x5ea>
 801aa92:	e01e      	b.n	801aad2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801aa94:	4b1f      	ldr	r3, [pc, #124]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa96:	689a      	ldr	r2, [r3, #8]
 801aa98:	4b1e      	ldr	r3, [pc, #120]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aa9a:	2101      	movs	r1, #1
 801aa9c:	438a      	bics	r2, r1
 801aa9e:	609a      	str	r2, [r3, #8]
 801aaa0:	4b23      	ldr	r3, [pc, #140]	@ (801ab30 <HAL_RCC_OscConfig+0x6a4>)
 801aaa2:	6a1a      	ldr	r2, [r3, #32]
 801aaa4:	4b22      	ldr	r3, [pc, #136]	@ (801ab30 <HAL_RCC_OscConfig+0x6a4>)
 801aaa6:	4923      	ldr	r1, [pc, #140]	@ (801ab34 <HAL_RCC_OscConfig+0x6a8>)
 801aaa8:	400a      	ands	r2, r1
 801aaaa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aaac:	f7f9 f8b2 	bl	8013c14 <HAL_GetTick>
 801aab0:	0003      	movs	r3, r0
 801aab2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801aab4:	e008      	b.n	801aac8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801aab6:	f7f9 f8ad 	bl	8013c14 <HAL_GetTick>
 801aaba:	0002      	movs	r2, r0
 801aabc:	697b      	ldr	r3, [r7, #20]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	2b02      	cmp	r3, #2
 801aac2:	d901      	bls.n	801aac8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801aac4:	2303      	movs	r3, #3
 801aac6:	e0aa      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801aac8:	4b12      	ldr	r3, [pc, #72]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aaca:	689b      	ldr	r3, [r3, #8]
 801aacc:	2202      	movs	r2, #2
 801aace:	4013      	ands	r3, r2
 801aad0:	d1f1      	bne.n	801aab6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d100      	bne.n	801aadc <HAL_RCC_OscConfig+0x650>
 801aada:	e09f      	b.n	801ac1c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801aadc:	69fb      	ldr	r3, [r7, #28]
 801aade:	2b0c      	cmp	r3, #12
 801aae0:	d100      	bne.n	801aae4 <HAL_RCC_OscConfig+0x658>
 801aae2:	e078      	b.n	801abd6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aae8:	2b02      	cmp	r3, #2
 801aaea:	d159      	bne.n	801aba0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aaec:	4b09      	ldr	r3, [pc, #36]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aaee:	681a      	ldr	r2, [r3, #0]
 801aaf0:	4b08      	ldr	r3, [pc, #32]	@ (801ab14 <HAL_RCC_OscConfig+0x688>)
 801aaf2:	4911      	ldr	r1, [pc, #68]	@ (801ab38 <HAL_RCC_OscConfig+0x6ac>)
 801aaf4:	400a      	ands	r2, r1
 801aaf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aaf8:	f7f9 f88c 	bl	8013c14 <HAL_GetTick>
 801aafc:	0003      	movs	r3, r0
 801aafe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ab00:	e01c      	b.n	801ab3c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ab02:	f7f9 f887 	bl	8013c14 <HAL_GetTick>
 801ab06:	0002      	movs	r2, r0
 801ab08:	697b      	ldr	r3, [r7, #20]
 801ab0a:	1ad3      	subs	r3, r2, r3
 801ab0c:	2b02      	cmp	r3, #2
 801ab0e:	d915      	bls.n	801ab3c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801ab10:	2303      	movs	r3, #3
 801ab12:	e084      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
 801ab14:	40021000 	.word	0x40021000
 801ab18:	ffff1fff 	.word	0xffff1fff
 801ab1c:	fffffeff 	.word	0xfffffeff
 801ab20:	40007000 	.word	0x40007000
 801ab24:	fffffbff 	.word	0xfffffbff
 801ab28:	00001388 	.word	0x00001388
 801ab2c:	efffffff 	.word	0xefffffff
 801ab30:	40010000 	.word	0x40010000
 801ab34:	ffffdfff 	.word	0xffffdfff
 801ab38:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ab3c:	4b3a      	ldr	r3, [pc, #232]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab3e:	681a      	ldr	r2, [r3, #0]
 801ab40:	2380      	movs	r3, #128	@ 0x80
 801ab42:	049b      	lsls	r3, r3, #18
 801ab44:	4013      	ands	r3, r2
 801ab46:	d1dc      	bne.n	801ab02 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ab48:	4b37      	ldr	r3, [pc, #220]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab4a:	68db      	ldr	r3, [r3, #12]
 801ab4c:	4a37      	ldr	r2, [pc, #220]	@ (801ac2c <HAL_RCC_OscConfig+0x7a0>)
 801ab4e:	4013      	ands	r3, r2
 801ab50:	0019      	movs	r1, r3
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ab5a:	431a      	orrs	r2, r3
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ab60:	431a      	orrs	r2, r3
 801ab62:	4b31      	ldr	r3, [pc, #196]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab64:	430a      	orrs	r2, r1
 801ab66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ab68:	4b2f      	ldr	r3, [pc, #188]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab6a:	681a      	ldr	r2, [r3, #0]
 801ab6c:	4b2e      	ldr	r3, [pc, #184]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab6e:	2180      	movs	r1, #128	@ 0x80
 801ab70:	0449      	lsls	r1, r1, #17
 801ab72:	430a      	orrs	r2, r1
 801ab74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab76:	f7f9 f84d 	bl	8013c14 <HAL_GetTick>
 801ab7a:	0003      	movs	r3, r0
 801ab7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801ab7e:	e008      	b.n	801ab92 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ab80:	f7f9 f848 	bl	8013c14 <HAL_GetTick>
 801ab84:	0002      	movs	r2, r0
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	1ad3      	subs	r3, r2, r3
 801ab8a:	2b02      	cmp	r3, #2
 801ab8c:	d901      	bls.n	801ab92 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801ab8e:	2303      	movs	r3, #3
 801ab90:	e045      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801ab92:	4b25      	ldr	r3, [pc, #148]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801ab94:	681a      	ldr	r2, [r3, #0]
 801ab96:	2380      	movs	r3, #128	@ 0x80
 801ab98:	049b      	lsls	r3, r3, #18
 801ab9a:	4013      	ands	r3, r2
 801ab9c:	d0f0      	beq.n	801ab80 <HAL_RCC_OscConfig+0x6f4>
 801ab9e:	e03d      	b.n	801ac1c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aba0:	4b21      	ldr	r3, [pc, #132]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801aba2:	681a      	ldr	r2, [r3, #0]
 801aba4:	4b20      	ldr	r3, [pc, #128]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801aba6:	4922      	ldr	r1, [pc, #136]	@ (801ac30 <HAL_RCC_OscConfig+0x7a4>)
 801aba8:	400a      	ands	r2, r1
 801abaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801abac:	f7f9 f832 	bl	8013c14 <HAL_GetTick>
 801abb0:	0003      	movs	r3, r0
 801abb2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801abb4:	e008      	b.n	801abc8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801abb6:	f7f9 f82d 	bl	8013c14 <HAL_GetTick>
 801abba:	0002      	movs	r2, r0
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	1ad3      	subs	r3, r2, r3
 801abc0:	2b02      	cmp	r3, #2
 801abc2:	d901      	bls.n	801abc8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801abc4:	2303      	movs	r3, #3
 801abc6:	e02a      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801abc8:	4b17      	ldr	r3, [pc, #92]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801abca:	681a      	ldr	r2, [r3, #0]
 801abcc:	2380      	movs	r3, #128	@ 0x80
 801abce:	049b      	lsls	r3, r3, #18
 801abd0:	4013      	ands	r3, r2
 801abd2:	d1f0      	bne.n	801abb6 <HAL_RCC_OscConfig+0x72a>
 801abd4:	e022      	b.n	801ac1c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801abda:	2b01      	cmp	r3, #1
 801abdc:	d101      	bne.n	801abe2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801abde:	2301      	movs	r3, #1
 801abe0:	e01d      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801abe2:	4b11      	ldr	r3, [pc, #68]	@ (801ac28 <HAL_RCC_OscConfig+0x79c>)
 801abe4:	68db      	ldr	r3, [r3, #12]
 801abe6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801abe8:	69ba      	ldr	r2, [r7, #24]
 801abea:	2380      	movs	r3, #128	@ 0x80
 801abec:	025b      	lsls	r3, r3, #9
 801abee:	401a      	ands	r2, r3
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d10f      	bne.n	801ac18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801abf8:	69ba      	ldr	r2, [r7, #24]
 801abfa:	23f0      	movs	r3, #240	@ 0xf0
 801abfc:	039b      	lsls	r3, r3, #14
 801abfe:	401a      	ands	r2, r3
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d107      	bne.n	801ac18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801ac08:	69ba      	ldr	r2, [r7, #24]
 801ac0a:	23c0      	movs	r3, #192	@ 0xc0
 801ac0c:	041b      	lsls	r3, r3, #16
 801ac0e:	401a      	ands	r2, r3
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d001      	beq.n	801ac1c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801ac18:	2301      	movs	r3, #1
 801ac1a:	e000      	b.n	801ac1e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801ac1c:	2300      	movs	r3, #0
}
 801ac1e:	0018      	movs	r0, r3
 801ac20:	46bd      	mov	sp, r7
 801ac22:	b00a      	add	sp, #40	@ 0x28
 801ac24:	bdb0      	pop	{r4, r5, r7, pc}
 801ac26:	46c0      	nop			@ (mov r8, r8)
 801ac28:	40021000 	.word	0x40021000
 801ac2c:	ff02ffff 	.word	0xff02ffff
 801ac30:	feffffff 	.word	0xfeffffff

0801ac34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ac34:	b5b0      	push	{r4, r5, r7, lr}
 801ac36:	b084      	sub	sp, #16
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
 801ac3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d101      	bne.n	801ac48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ac44:	2301      	movs	r3, #1
 801ac46:	e128      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ac48:	4b96      	ldr	r3, [pc, #600]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	2201      	movs	r2, #1
 801ac4e:	4013      	ands	r3, r2
 801ac50:	683a      	ldr	r2, [r7, #0]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	d91e      	bls.n	801ac94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ac56:	4b93      	ldr	r3, [pc, #588]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	4393      	bics	r3, r2
 801ac5e:	0019      	movs	r1, r3
 801ac60:	4b90      	ldr	r3, [pc, #576]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ac62:	683a      	ldr	r2, [r7, #0]
 801ac64:	430a      	orrs	r2, r1
 801ac66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ac68:	f7f8 ffd4 	bl	8013c14 <HAL_GetTick>
 801ac6c:	0003      	movs	r3, r0
 801ac6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ac70:	e009      	b.n	801ac86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ac72:	f7f8 ffcf 	bl	8013c14 <HAL_GetTick>
 801ac76:	0002      	movs	r2, r0
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	1ad3      	subs	r3, r2, r3
 801ac7c:	4a8a      	ldr	r2, [pc, #552]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d901      	bls.n	801ac86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ac82:	2303      	movs	r3, #3
 801ac84:	e109      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ac86:	4b87      	ldr	r3, [pc, #540]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	2201      	movs	r2, #1
 801ac8c:	4013      	ands	r3, r2
 801ac8e:	683a      	ldr	r2, [r7, #0]
 801ac90:	429a      	cmp	r2, r3
 801ac92:	d1ee      	bne.n	801ac72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	2202      	movs	r2, #2
 801ac9a:	4013      	ands	r3, r2
 801ac9c:	d009      	beq.n	801acb2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ac9e:	4b83      	ldr	r3, [pc, #524]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801aca0:	68db      	ldr	r3, [r3, #12]
 801aca2:	22f0      	movs	r2, #240	@ 0xf0
 801aca4:	4393      	bics	r3, r2
 801aca6:	0019      	movs	r1, r3
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	689a      	ldr	r2, [r3, #8]
 801acac:	4b7f      	ldr	r3, [pc, #508]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801acae:	430a      	orrs	r2, r1
 801acb0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	2201      	movs	r2, #1
 801acb8:	4013      	ands	r3, r2
 801acba:	d100      	bne.n	801acbe <HAL_RCC_ClockConfig+0x8a>
 801acbc:	e089      	b.n	801add2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	2b02      	cmp	r3, #2
 801acc4:	d107      	bne.n	801acd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801acc6:	4b79      	ldr	r3, [pc, #484]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801acc8:	681a      	ldr	r2, [r3, #0]
 801acca:	2380      	movs	r3, #128	@ 0x80
 801accc:	029b      	lsls	r3, r3, #10
 801acce:	4013      	ands	r3, r2
 801acd0:	d120      	bne.n	801ad14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801acd2:	2301      	movs	r3, #1
 801acd4:	e0e1      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	685b      	ldr	r3, [r3, #4]
 801acda:	2b03      	cmp	r3, #3
 801acdc:	d107      	bne.n	801acee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801acde:	4b73      	ldr	r3, [pc, #460]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ace0:	681a      	ldr	r2, [r3, #0]
 801ace2:	2380      	movs	r3, #128	@ 0x80
 801ace4:	049b      	lsls	r3, r3, #18
 801ace6:	4013      	ands	r3, r2
 801ace8:	d114      	bne.n	801ad14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801acea:	2301      	movs	r3, #1
 801acec:	e0d5      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	685b      	ldr	r3, [r3, #4]
 801acf2:	2b01      	cmp	r3, #1
 801acf4:	d106      	bne.n	801ad04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801acf6:	4b6d      	ldr	r3, [pc, #436]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	2204      	movs	r2, #4
 801acfc:	4013      	ands	r3, r2
 801acfe:	d109      	bne.n	801ad14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ad00:	2301      	movs	r3, #1
 801ad02:	e0ca      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ad04:	4b69      	ldr	r3, [pc, #420]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ad06:	681a      	ldr	r2, [r3, #0]
 801ad08:	2380      	movs	r3, #128	@ 0x80
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	4013      	ands	r3, r2
 801ad0e:	d101      	bne.n	801ad14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ad10:	2301      	movs	r3, #1
 801ad12:	e0c2      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ad14:	4b65      	ldr	r3, [pc, #404]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ad16:	68db      	ldr	r3, [r3, #12]
 801ad18:	2203      	movs	r2, #3
 801ad1a:	4393      	bics	r3, r2
 801ad1c:	0019      	movs	r1, r3
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	685a      	ldr	r2, [r3, #4]
 801ad22:	4b62      	ldr	r3, [pc, #392]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ad24:	430a      	orrs	r2, r1
 801ad26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ad28:	f7f8 ff74 	bl	8013c14 <HAL_GetTick>
 801ad2c:	0003      	movs	r3, r0
 801ad2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	685b      	ldr	r3, [r3, #4]
 801ad34:	2b02      	cmp	r3, #2
 801ad36:	d111      	bne.n	801ad5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ad38:	e009      	b.n	801ad4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad3a:	f7f8 ff6b 	bl	8013c14 <HAL_GetTick>
 801ad3e:	0002      	movs	r2, r0
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	1ad3      	subs	r3, r2, r3
 801ad44:	4a58      	ldr	r2, [pc, #352]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801ad46:	4293      	cmp	r3, r2
 801ad48:	d901      	bls.n	801ad4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801ad4a:	2303      	movs	r3, #3
 801ad4c:	e0a5      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ad4e:	4b57      	ldr	r3, [pc, #348]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ad50:	68db      	ldr	r3, [r3, #12]
 801ad52:	220c      	movs	r2, #12
 801ad54:	4013      	ands	r3, r2
 801ad56:	2b08      	cmp	r3, #8
 801ad58:	d1ef      	bne.n	801ad3a <HAL_RCC_ClockConfig+0x106>
 801ad5a:	e03a      	b.n	801add2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	2b03      	cmp	r3, #3
 801ad62:	d111      	bne.n	801ad88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ad64:	e009      	b.n	801ad7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad66:	f7f8 ff55 	bl	8013c14 <HAL_GetTick>
 801ad6a:	0002      	movs	r2, r0
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	1ad3      	subs	r3, r2, r3
 801ad70:	4a4d      	ldr	r2, [pc, #308]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801ad72:	4293      	cmp	r3, r2
 801ad74:	d901      	bls.n	801ad7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801ad76:	2303      	movs	r3, #3
 801ad78:	e08f      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ad7a:	4b4c      	ldr	r3, [pc, #304]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ad7c:	68db      	ldr	r3, [r3, #12]
 801ad7e:	220c      	movs	r2, #12
 801ad80:	4013      	ands	r3, r2
 801ad82:	2b0c      	cmp	r3, #12
 801ad84:	d1ef      	bne.n	801ad66 <HAL_RCC_ClockConfig+0x132>
 801ad86:	e024      	b.n	801add2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	2b01      	cmp	r3, #1
 801ad8e:	d11b      	bne.n	801adc8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801ad90:	e009      	b.n	801ada6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad92:	f7f8 ff3f 	bl	8013c14 <HAL_GetTick>
 801ad96:	0002      	movs	r2, r0
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	1ad3      	subs	r3, r2, r3
 801ad9c:	4a42      	ldr	r2, [pc, #264]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801ad9e:	4293      	cmp	r3, r2
 801ada0:	d901      	bls.n	801ada6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801ada2:	2303      	movs	r3, #3
 801ada4:	e079      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801ada6:	4b41      	ldr	r3, [pc, #260]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ada8:	68db      	ldr	r3, [r3, #12]
 801adaa:	220c      	movs	r2, #12
 801adac:	4013      	ands	r3, r2
 801adae:	2b04      	cmp	r3, #4
 801adb0:	d1ef      	bne.n	801ad92 <HAL_RCC_ClockConfig+0x15e>
 801adb2:	e00e      	b.n	801add2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801adb4:	f7f8 ff2e 	bl	8013c14 <HAL_GetTick>
 801adb8:	0002      	movs	r2, r0
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	1ad3      	subs	r3, r2, r3
 801adbe:	4a3a      	ldr	r2, [pc, #232]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801adc0:	4293      	cmp	r3, r2
 801adc2:	d901      	bls.n	801adc8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801adc4:	2303      	movs	r3, #3
 801adc6:	e068      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801adc8:	4b38      	ldr	r3, [pc, #224]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801adca:	68db      	ldr	r3, [r3, #12]
 801adcc:	220c      	movs	r2, #12
 801adce:	4013      	ands	r3, r2
 801add0:	d1f0      	bne.n	801adb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801add2:	4b34      	ldr	r3, [pc, #208]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	2201      	movs	r2, #1
 801add8:	4013      	ands	r3, r2
 801adda:	683a      	ldr	r2, [r7, #0]
 801addc:	429a      	cmp	r2, r3
 801adde:	d21e      	bcs.n	801ae1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ade0:	4b30      	ldr	r3, [pc, #192]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2201      	movs	r2, #1
 801ade6:	4393      	bics	r3, r2
 801ade8:	0019      	movs	r1, r3
 801adea:	4b2e      	ldr	r3, [pc, #184]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801adec:	683a      	ldr	r2, [r7, #0]
 801adee:	430a      	orrs	r2, r1
 801adf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801adf2:	f7f8 ff0f 	bl	8013c14 <HAL_GetTick>
 801adf6:	0003      	movs	r3, r0
 801adf8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801adfa:	e009      	b.n	801ae10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801adfc:	f7f8 ff0a 	bl	8013c14 <HAL_GetTick>
 801ae00:	0002      	movs	r2, r0
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	1ad3      	subs	r3, r2, r3
 801ae06:	4a28      	ldr	r2, [pc, #160]	@ (801aea8 <HAL_RCC_ClockConfig+0x274>)
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	d901      	bls.n	801ae10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801ae0c:	2303      	movs	r3, #3
 801ae0e:	e044      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ae10:	4b24      	ldr	r3, [pc, #144]	@ (801aea4 <HAL_RCC_ClockConfig+0x270>)
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	2201      	movs	r2, #1
 801ae16:	4013      	ands	r3, r2
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d1ee      	bne.n	801adfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	2204      	movs	r2, #4
 801ae24:	4013      	ands	r3, r2
 801ae26:	d009      	beq.n	801ae3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ae28:	4b20      	ldr	r3, [pc, #128]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ae2a:	68db      	ldr	r3, [r3, #12]
 801ae2c:	4a20      	ldr	r2, [pc, #128]	@ (801aeb0 <HAL_RCC_ClockConfig+0x27c>)
 801ae2e:	4013      	ands	r3, r2
 801ae30:	0019      	movs	r1, r3
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	68da      	ldr	r2, [r3, #12]
 801ae36:	4b1d      	ldr	r3, [pc, #116]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ae38:	430a      	orrs	r2, r1
 801ae3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	2208      	movs	r2, #8
 801ae42:	4013      	ands	r3, r2
 801ae44:	d00a      	beq.n	801ae5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801ae46:	4b19      	ldr	r3, [pc, #100]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ae48:	68db      	ldr	r3, [r3, #12]
 801ae4a:	4a1a      	ldr	r2, [pc, #104]	@ (801aeb4 <HAL_RCC_ClockConfig+0x280>)
 801ae4c:	4013      	ands	r3, r2
 801ae4e:	0019      	movs	r1, r3
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	691b      	ldr	r3, [r3, #16]
 801ae54:	00da      	lsls	r2, r3, #3
 801ae56:	4b15      	ldr	r3, [pc, #84]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ae58:	430a      	orrs	r2, r1
 801ae5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801ae5c:	f000 f832 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801ae60:	0001      	movs	r1, r0
 801ae62:	4b12      	ldr	r3, [pc, #72]	@ (801aeac <HAL_RCC_ClockConfig+0x278>)
 801ae64:	68db      	ldr	r3, [r3, #12]
 801ae66:	091b      	lsrs	r3, r3, #4
 801ae68:	220f      	movs	r2, #15
 801ae6a:	4013      	ands	r3, r2
 801ae6c:	4a12      	ldr	r2, [pc, #72]	@ (801aeb8 <HAL_RCC_ClockConfig+0x284>)
 801ae6e:	5cd3      	ldrb	r3, [r2, r3]
 801ae70:	000a      	movs	r2, r1
 801ae72:	40da      	lsrs	r2, r3
 801ae74:	4b11      	ldr	r3, [pc, #68]	@ (801aebc <HAL_RCC_ClockConfig+0x288>)
 801ae76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801ae78:	4b11      	ldr	r3, [pc, #68]	@ (801aec0 <HAL_RCC_ClockConfig+0x28c>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	250b      	movs	r5, #11
 801ae7e:	197c      	adds	r4, r7, r5
 801ae80:	0018      	movs	r0, r3
 801ae82:	f7f8 fe81 	bl	8013b88 <HAL_InitTick>
 801ae86:	0003      	movs	r3, r0
 801ae88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801ae8a:	197b      	adds	r3, r7, r5
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d002      	beq.n	801ae98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801ae92:	197b      	adds	r3, r7, r5
 801ae94:	781b      	ldrb	r3, [r3, #0]
 801ae96:	e000      	b.n	801ae9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	0018      	movs	r0, r3
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	b004      	add	sp, #16
 801aea0:	bdb0      	pop	{r4, r5, r7, pc}
 801aea2:	46c0      	nop			@ (mov r8, r8)
 801aea4:	40022000 	.word	0x40022000
 801aea8:	00001388 	.word	0x00001388
 801aeac:	40021000 	.word	0x40021000
 801aeb0:	fffff8ff 	.word	0xfffff8ff
 801aeb4:	ffffc7ff 	.word	0xffffc7ff
 801aeb8:	0802dc1c 	.word	0x0802dc1c
 801aebc:	200000e0 	.word	0x200000e0
 801aec0:	200000f0 	.word	0x200000f0

0801aec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801aec4:	b5b0      	push	{r4, r5, r7, lr}
 801aec6:	b08e      	sub	sp, #56	@ 0x38
 801aec8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801aeca:	4b4c      	ldr	r3, [pc, #304]	@ (801affc <HAL_RCC_GetSysClockFreq+0x138>)
 801aecc:	68db      	ldr	r3, [r3, #12]
 801aece:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801aed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aed2:	230c      	movs	r3, #12
 801aed4:	4013      	ands	r3, r2
 801aed6:	2b0c      	cmp	r3, #12
 801aed8:	d014      	beq.n	801af04 <HAL_RCC_GetSysClockFreq+0x40>
 801aeda:	d900      	bls.n	801aede <HAL_RCC_GetSysClockFreq+0x1a>
 801aedc:	e07b      	b.n	801afd6 <HAL_RCC_GetSysClockFreq+0x112>
 801aede:	2b04      	cmp	r3, #4
 801aee0:	d002      	beq.n	801aee8 <HAL_RCC_GetSysClockFreq+0x24>
 801aee2:	2b08      	cmp	r3, #8
 801aee4:	d00b      	beq.n	801aefe <HAL_RCC_GetSysClockFreq+0x3a>
 801aee6:	e076      	b.n	801afd6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801aee8:	4b44      	ldr	r3, [pc, #272]	@ (801affc <HAL_RCC_GetSysClockFreq+0x138>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	2210      	movs	r2, #16
 801aeee:	4013      	ands	r3, r2
 801aef0:	d002      	beq.n	801aef8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801aef2:	4b43      	ldr	r3, [pc, #268]	@ (801b000 <HAL_RCC_GetSysClockFreq+0x13c>)
 801aef4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801aef6:	e07c      	b.n	801aff2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801aef8:	4b42      	ldr	r3, [pc, #264]	@ (801b004 <HAL_RCC_GetSysClockFreq+0x140>)
 801aefa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801aefc:	e079      	b.n	801aff2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801aefe:	4b42      	ldr	r3, [pc, #264]	@ (801b008 <HAL_RCC_GetSysClockFreq+0x144>)
 801af00:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801af02:	e076      	b.n	801aff2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af06:	0c9a      	lsrs	r2, r3, #18
 801af08:	230f      	movs	r3, #15
 801af0a:	401a      	ands	r2, r3
 801af0c:	4b3f      	ldr	r3, [pc, #252]	@ (801b00c <HAL_RCC_GetSysClockFreq+0x148>)
 801af0e:	5c9b      	ldrb	r3, [r3, r2]
 801af10:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801af12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af14:	0d9a      	lsrs	r2, r3, #22
 801af16:	2303      	movs	r3, #3
 801af18:	4013      	ands	r3, r2
 801af1a:	3301      	adds	r3, #1
 801af1c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801af1e:	4b37      	ldr	r3, [pc, #220]	@ (801affc <HAL_RCC_GetSysClockFreq+0x138>)
 801af20:	68da      	ldr	r2, [r3, #12]
 801af22:	2380      	movs	r3, #128	@ 0x80
 801af24:	025b      	lsls	r3, r3, #9
 801af26:	4013      	ands	r3, r2
 801af28:	d01a      	beq.n	801af60 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af2c:	61bb      	str	r3, [r7, #24]
 801af2e:	2300      	movs	r3, #0
 801af30:	61fb      	str	r3, [r7, #28]
 801af32:	4a35      	ldr	r2, [pc, #212]	@ (801b008 <HAL_RCC_GetSysClockFreq+0x144>)
 801af34:	2300      	movs	r3, #0
 801af36:	69b8      	ldr	r0, [r7, #24]
 801af38:	69f9      	ldr	r1, [r7, #28]
 801af3a:	f7e5 fb41 	bl	80005c0 <__aeabi_lmul>
 801af3e:	0002      	movs	r2, r0
 801af40:	000b      	movs	r3, r1
 801af42:	0010      	movs	r0, r2
 801af44:	0019      	movs	r1, r3
 801af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af48:	613b      	str	r3, [r7, #16]
 801af4a:	2300      	movs	r3, #0
 801af4c:	617b      	str	r3, [r7, #20]
 801af4e:	693a      	ldr	r2, [r7, #16]
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	f7e5 fb15 	bl	8000580 <__aeabi_uldivmod>
 801af56:	0002      	movs	r2, r0
 801af58:	000b      	movs	r3, r1
 801af5a:	0013      	movs	r3, r2
 801af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 801af5e:	e037      	b.n	801afd0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801af60:	4b26      	ldr	r3, [pc, #152]	@ (801affc <HAL_RCC_GetSysClockFreq+0x138>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	2210      	movs	r2, #16
 801af66:	4013      	ands	r3, r2
 801af68:	d01a      	beq.n	801afa0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af6c:	60bb      	str	r3, [r7, #8]
 801af6e:	2300      	movs	r3, #0
 801af70:	60fb      	str	r3, [r7, #12]
 801af72:	4a23      	ldr	r2, [pc, #140]	@ (801b000 <HAL_RCC_GetSysClockFreq+0x13c>)
 801af74:	2300      	movs	r3, #0
 801af76:	68b8      	ldr	r0, [r7, #8]
 801af78:	68f9      	ldr	r1, [r7, #12]
 801af7a:	f7e5 fb21 	bl	80005c0 <__aeabi_lmul>
 801af7e:	0002      	movs	r2, r0
 801af80:	000b      	movs	r3, r1
 801af82:	0010      	movs	r0, r2
 801af84:	0019      	movs	r1, r3
 801af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af88:	603b      	str	r3, [r7, #0]
 801af8a:	2300      	movs	r3, #0
 801af8c:	607b      	str	r3, [r7, #4]
 801af8e:	683a      	ldr	r2, [r7, #0]
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	f7e5 faf5 	bl	8000580 <__aeabi_uldivmod>
 801af96:	0002      	movs	r2, r0
 801af98:	000b      	movs	r3, r1
 801af9a:	0013      	movs	r3, r2
 801af9c:	637b      	str	r3, [r7, #52]	@ 0x34
 801af9e:	e017      	b.n	801afd0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801afa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afa2:	0018      	movs	r0, r3
 801afa4:	2300      	movs	r3, #0
 801afa6:	0019      	movs	r1, r3
 801afa8:	4a16      	ldr	r2, [pc, #88]	@ (801b004 <HAL_RCC_GetSysClockFreq+0x140>)
 801afaa:	2300      	movs	r3, #0
 801afac:	f7e5 fb08 	bl	80005c0 <__aeabi_lmul>
 801afb0:	0002      	movs	r2, r0
 801afb2:	000b      	movs	r3, r1
 801afb4:	0010      	movs	r0, r2
 801afb6:	0019      	movs	r1, r3
 801afb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afba:	001c      	movs	r4, r3
 801afbc:	2300      	movs	r3, #0
 801afbe:	001d      	movs	r5, r3
 801afc0:	0022      	movs	r2, r4
 801afc2:	002b      	movs	r3, r5
 801afc4:	f7e5 fadc 	bl	8000580 <__aeabi_uldivmod>
 801afc8:	0002      	movs	r2, r0
 801afca:	000b      	movs	r3, r1
 801afcc:	0013      	movs	r3, r2
 801afce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801afd2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801afd4:	e00d      	b.n	801aff2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801afd6:	4b09      	ldr	r3, [pc, #36]	@ (801affc <HAL_RCC_GetSysClockFreq+0x138>)
 801afd8:	685b      	ldr	r3, [r3, #4]
 801afda:	0b5b      	lsrs	r3, r3, #13
 801afdc:	2207      	movs	r2, #7
 801afde:	4013      	ands	r3, r2
 801afe0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801afe2:	6a3b      	ldr	r3, [r7, #32]
 801afe4:	3301      	adds	r3, #1
 801afe6:	2280      	movs	r2, #128	@ 0x80
 801afe8:	0212      	lsls	r2, r2, #8
 801afea:	409a      	lsls	r2, r3
 801afec:	0013      	movs	r3, r2
 801afee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801aff0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801aff4:	0018      	movs	r0, r3
 801aff6:	46bd      	mov	sp, r7
 801aff8:	b00e      	add	sp, #56	@ 0x38
 801affa:	bdb0      	pop	{r4, r5, r7, pc}
 801affc:	40021000 	.word	0x40021000
 801b000:	003d0900 	.word	0x003d0900
 801b004:	00f42400 	.word	0x00f42400
 801b008:	007a1200 	.word	0x007a1200
 801b00c:	0802dc34 	.word	0x0802dc34

0801b010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b014:	4b02      	ldr	r3, [pc, #8]	@ (801b020 <HAL_RCC_GetHCLKFreq+0x10>)
 801b016:	681b      	ldr	r3, [r3, #0]
}
 801b018:	0018      	movs	r0, r3
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}
 801b01e:	46c0      	nop			@ (mov r8, r8)
 801b020:	200000e0 	.word	0x200000e0

0801b024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b028:	f7ff fff2 	bl	801b010 <HAL_RCC_GetHCLKFreq>
 801b02c:	0001      	movs	r1, r0
 801b02e:	4b06      	ldr	r3, [pc, #24]	@ (801b048 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b030:	68db      	ldr	r3, [r3, #12]
 801b032:	0a1b      	lsrs	r3, r3, #8
 801b034:	2207      	movs	r2, #7
 801b036:	4013      	ands	r3, r2
 801b038:	4a04      	ldr	r2, [pc, #16]	@ (801b04c <HAL_RCC_GetPCLK1Freq+0x28>)
 801b03a:	5cd3      	ldrb	r3, [r2, r3]
 801b03c:	40d9      	lsrs	r1, r3
 801b03e:	000b      	movs	r3, r1
}
 801b040:	0018      	movs	r0, r3
 801b042:	46bd      	mov	sp, r7
 801b044:	bd80      	pop	{r7, pc}
 801b046:	46c0      	nop			@ (mov r8, r8)
 801b048:	40021000 	.word	0x40021000
 801b04c:	0802dc2c 	.word	0x0802dc2c

0801b050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b050:	b580      	push	{r7, lr}
 801b052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801b054:	f7ff ffdc 	bl	801b010 <HAL_RCC_GetHCLKFreq>
 801b058:	0001      	movs	r1, r0
 801b05a:	4b06      	ldr	r3, [pc, #24]	@ (801b074 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b05c:	68db      	ldr	r3, [r3, #12]
 801b05e:	0adb      	lsrs	r3, r3, #11
 801b060:	2207      	movs	r2, #7
 801b062:	4013      	ands	r3, r2
 801b064:	4a04      	ldr	r2, [pc, #16]	@ (801b078 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b066:	5cd3      	ldrb	r3, [r2, r3]
 801b068:	40d9      	lsrs	r1, r3
 801b06a:	000b      	movs	r3, r1
}
 801b06c:	0018      	movs	r0, r3
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}
 801b072:	46c0      	nop			@ (mov r8, r8)
 801b074:	40021000 	.word	0x40021000
 801b078:	0802dc2c 	.word	0x0802dc2c

0801b07c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b086      	sub	sp, #24
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801b084:	2017      	movs	r0, #23
 801b086:	183b      	adds	r3, r7, r0
 801b088:	2200      	movs	r2, #0
 801b08a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	2220      	movs	r2, #32
 801b092:	4013      	ands	r3, r2
 801b094:	d100      	bne.n	801b098 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801b096:	e0c7      	b.n	801b228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b098:	4b9b      	ldr	r3, [pc, #620]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b09a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b09c:	2380      	movs	r3, #128	@ 0x80
 801b09e:	055b      	lsls	r3, r3, #21
 801b0a0:	4013      	ands	r3, r2
 801b0a2:	d109      	bne.n	801b0b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b0a4:	4b98      	ldr	r3, [pc, #608]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b0a8:	4b97      	ldr	r3, [pc, #604]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0aa:	2180      	movs	r1, #128	@ 0x80
 801b0ac:	0549      	lsls	r1, r1, #21
 801b0ae:	430a      	orrs	r2, r1
 801b0b0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b0b2:	183b      	adds	r3, r7, r0
 801b0b4:	2201      	movs	r2, #1
 801b0b6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b0b8:	4b94      	ldr	r3, [pc, #592]	@ (801b30c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b0ba:	681a      	ldr	r2, [r3, #0]
 801b0bc:	2380      	movs	r3, #128	@ 0x80
 801b0be:	005b      	lsls	r3, r3, #1
 801b0c0:	4013      	ands	r3, r2
 801b0c2:	d11a      	bne.n	801b0fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b0c4:	4b91      	ldr	r3, [pc, #580]	@ (801b30c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b0c6:	681a      	ldr	r2, [r3, #0]
 801b0c8:	4b90      	ldr	r3, [pc, #576]	@ (801b30c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b0ca:	2180      	movs	r1, #128	@ 0x80
 801b0cc:	0049      	lsls	r1, r1, #1
 801b0ce:	430a      	orrs	r2, r1
 801b0d0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b0d2:	f7f8 fd9f 	bl	8013c14 <HAL_GetTick>
 801b0d6:	0003      	movs	r3, r0
 801b0d8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b0da:	e008      	b.n	801b0ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b0dc:	f7f8 fd9a 	bl	8013c14 <HAL_GetTick>
 801b0e0:	0002      	movs	r2, r0
 801b0e2:	693b      	ldr	r3, [r7, #16]
 801b0e4:	1ad3      	subs	r3, r2, r3
 801b0e6:	2b64      	cmp	r3, #100	@ 0x64
 801b0e8:	d901      	bls.n	801b0ee <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801b0ea:	2303      	movs	r3, #3
 801b0ec:	e107      	b.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b0ee:	4b87      	ldr	r3, [pc, #540]	@ (801b30c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b0f0:	681a      	ldr	r2, [r3, #0]
 801b0f2:	2380      	movs	r3, #128	@ 0x80
 801b0f4:	005b      	lsls	r3, r3, #1
 801b0f6:	4013      	ands	r3, r2
 801b0f8:	d0f0      	beq.n	801b0dc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801b0fa:	4b83      	ldr	r3, [pc, #524]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0fc:	681a      	ldr	r2, [r3, #0]
 801b0fe:	23c0      	movs	r3, #192	@ 0xc0
 801b100:	039b      	lsls	r3, r3, #14
 801b102:	4013      	ands	r3, r2
 801b104:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	685a      	ldr	r2, [r3, #4]
 801b10a:	23c0      	movs	r3, #192	@ 0xc0
 801b10c:	039b      	lsls	r3, r3, #14
 801b10e:	4013      	ands	r3, r2
 801b110:	68fa      	ldr	r2, [r7, #12]
 801b112:	429a      	cmp	r2, r3
 801b114:	d013      	beq.n	801b13e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	685a      	ldr	r2, [r3, #4]
 801b11a:	23c0      	movs	r3, #192	@ 0xc0
 801b11c:	029b      	lsls	r3, r3, #10
 801b11e:	401a      	ands	r2, r3
 801b120:	23c0      	movs	r3, #192	@ 0xc0
 801b122:	029b      	lsls	r3, r3, #10
 801b124:	429a      	cmp	r2, r3
 801b126:	d10a      	bne.n	801b13e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801b128:	4b77      	ldr	r3, [pc, #476]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b12a:	681a      	ldr	r2, [r3, #0]
 801b12c:	2380      	movs	r3, #128	@ 0x80
 801b12e:	029b      	lsls	r3, r3, #10
 801b130:	401a      	ands	r2, r3
 801b132:	2380      	movs	r3, #128	@ 0x80
 801b134:	029b      	lsls	r3, r3, #10
 801b136:	429a      	cmp	r2, r3
 801b138:	d101      	bne.n	801b13e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801b13a:	2301      	movs	r3, #1
 801b13c:	e0df      	b.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801b13e:	4b72      	ldr	r3, [pc, #456]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b142:	23c0      	movs	r3, #192	@ 0xc0
 801b144:	029b      	lsls	r3, r3, #10
 801b146:	4013      	ands	r3, r2
 801b148:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d03b      	beq.n	801b1c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	685a      	ldr	r2, [r3, #4]
 801b154:	23c0      	movs	r3, #192	@ 0xc0
 801b156:	029b      	lsls	r3, r3, #10
 801b158:	4013      	ands	r3, r2
 801b15a:	68fa      	ldr	r2, [r7, #12]
 801b15c:	429a      	cmp	r2, r3
 801b15e:	d033      	beq.n	801b1c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2220      	movs	r2, #32
 801b166:	4013      	ands	r3, r2
 801b168:	d02e      	beq.n	801b1c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801b16a:	4b67      	ldr	r3, [pc, #412]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b16c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b16e:	4a68      	ldr	r2, [pc, #416]	@ (801b310 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b170:	4013      	ands	r3, r2
 801b172:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b174:	4b64      	ldr	r3, [pc, #400]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b178:	4b63      	ldr	r3, [pc, #396]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b17a:	2180      	movs	r1, #128	@ 0x80
 801b17c:	0309      	lsls	r1, r1, #12
 801b17e:	430a      	orrs	r2, r1
 801b180:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b182:	4b61      	ldr	r3, [pc, #388]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b186:	4b60      	ldr	r3, [pc, #384]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b188:	4962      	ldr	r1, [pc, #392]	@ (801b314 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801b18a:	400a      	ands	r2, r1
 801b18c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801b18e:	4b5e      	ldr	r3, [pc, #376]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b190:	68fa      	ldr	r2, [r7, #12]
 801b192:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801b194:	68fa      	ldr	r2, [r7, #12]
 801b196:	2380      	movs	r3, #128	@ 0x80
 801b198:	005b      	lsls	r3, r3, #1
 801b19a:	4013      	ands	r3, r2
 801b19c:	d014      	beq.n	801b1c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b19e:	f7f8 fd39 	bl	8013c14 <HAL_GetTick>
 801b1a2:	0003      	movs	r3, r0
 801b1a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b1a6:	e009      	b.n	801b1bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b1a8:	f7f8 fd34 	bl	8013c14 <HAL_GetTick>
 801b1ac:	0002      	movs	r2, r0
 801b1ae:	693b      	ldr	r3, [r7, #16]
 801b1b0:	1ad3      	subs	r3, r2, r3
 801b1b2:	4a59      	ldr	r2, [pc, #356]	@ (801b318 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801b1b4:	4293      	cmp	r3, r2
 801b1b6:	d901      	bls.n	801b1bc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801b1b8:	2303      	movs	r3, #3
 801b1ba:	e0a0      	b.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b1bc:	4b52      	ldr	r3, [pc, #328]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b1c0:	2380      	movs	r3, #128	@ 0x80
 801b1c2:	009b      	lsls	r3, r3, #2
 801b1c4:	4013      	ands	r3, r2
 801b1c6:	d0ef      	beq.n	801b1a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	2220      	movs	r2, #32
 801b1ce:	4013      	ands	r3, r2
 801b1d0:	d01f      	beq.n	801b212 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	685a      	ldr	r2, [r3, #4]
 801b1d6:	23c0      	movs	r3, #192	@ 0xc0
 801b1d8:	029b      	lsls	r3, r3, #10
 801b1da:	401a      	ands	r2, r3
 801b1dc:	23c0      	movs	r3, #192	@ 0xc0
 801b1de:	029b      	lsls	r3, r3, #10
 801b1e0:	429a      	cmp	r2, r3
 801b1e2:	d10c      	bne.n	801b1fe <HAL_RCCEx_PeriphCLKConfig+0x182>
 801b1e4:	4b48      	ldr	r3, [pc, #288]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	4a4c      	ldr	r2, [pc, #304]	@ (801b31c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801b1ea:	4013      	ands	r3, r2
 801b1ec:	0019      	movs	r1, r3
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	685a      	ldr	r2, [r3, #4]
 801b1f2:	23c0      	movs	r3, #192	@ 0xc0
 801b1f4:	039b      	lsls	r3, r3, #14
 801b1f6:	401a      	ands	r2, r3
 801b1f8:	4b43      	ldr	r3, [pc, #268]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1fa:	430a      	orrs	r2, r1
 801b1fc:	601a      	str	r2, [r3, #0]
 801b1fe:	4b42      	ldr	r3, [pc, #264]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b200:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	685a      	ldr	r2, [r3, #4]
 801b206:	23c0      	movs	r3, #192	@ 0xc0
 801b208:	029b      	lsls	r3, r3, #10
 801b20a:	401a      	ands	r2, r3
 801b20c:	4b3e      	ldr	r3, [pc, #248]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b20e:	430a      	orrs	r2, r1
 801b210:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b212:	2317      	movs	r3, #23
 801b214:	18fb      	adds	r3, r7, r3
 801b216:	781b      	ldrb	r3, [r3, #0]
 801b218:	2b01      	cmp	r3, #1
 801b21a:	d105      	bne.n	801b228 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b21c:	4b3a      	ldr	r3, [pc, #232]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b21e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b220:	4b39      	ldr	r3, [pc, #228]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b222:	493f      	ldr	r1, [pc, #252]	@ (801b320 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801b224:	400a      	ands	r2, r1
 801b226:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	2201      	movs	r2, #1
 801b22e:	4013      	ands	r3, r2
 801b230:	d009      	beq.n	801b246 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b232:	4b35      	ldr	r3, [pc, #212]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b236:	2203      	movs	r2, #3
 801b238:	4393      	bics	r3, r2
 801b23a:	0019      	movs	r1, r3
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	689a      	ldr	r2, [r3, #8]
 801b240:	4b31      	ldr	r3, [pc, #196]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b242:	430a      	orrs	r2, r1
 801b244:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	2202      	movs	r2, #2
 801b24c:	4013      	ands	r3, r2
 801b24e:	d009      	beq.n	801b264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b250:	4b2d      	ldr	r3, [pc, #180]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b254:	220c      	movs	r2, #12
 801b256:	4393      	bics	r3, r2
 801b258:	0019      	movs	r1, r3
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	68da      	ldr	r2, [r3, #12]
 801b25e:	4b2a      	ldr	r3, [pc, #168]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b260:	430a      	orrs	r2, r1
 801b262:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	2204      	movs	r2, #4
 801b26a:	4013      	ands	r3, r2
 801b26c:	d009      	beq.n	801b282 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b26e:	4b26      	ldr	r3, [pc, #152]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b272:	4a2c      	ldr	r2, [pc, #176]	@ (801b324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801b274:	4013      	ands	r3, r2
 801b276:	0019      	movs	r1, r3
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	691a      	ldr	r2, [r3, #16]
 801b27c:	4b22      	ldr	r3, [pc, #136]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b27e:	430a      	orrs	r2, r1
 801b280:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2208      	movs	r2, #8
 801b288:	4013      	ands	r3, r2
 801b28a:	d009      	beq.n	801b2a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b28c:	4b1e      	ldr	r3, [pc, #120]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b290:	4a25      	ldr	r2, [pc, #148]	@ (801b328 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801b292:	4013      	ands	r3, r2
 801b294:	0019      	movs	r1, r3
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	695a      	ldr	r2, [r3, #20]
 801b29a:	4b1b      	ldr	r3, [pc, #108]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b29c:	430a      	orrs	r2, r1
 801b29e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	2380      	movs	r3, #128	@ 0x80
 801b2a6:	005b      	lsls	r3, r3, #1
 801b2a8:	4013      	ands	r3, r2
 801b2aa:	d009      	beq.n	801b2c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b2ac:	4b16      	ldr	r3, [pc, #88]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b2b0:	4a17      	ldr	r2, [pc, #92]	@ (801b310 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b2b2:	4013      	ands	r3, r2
 801b2b4:	0019      	movs	r1, r3
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	699a      	ldr	r2, [r3, #24]
 801b2ba:	4b13      	ldr	r3, [pc, #76]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2bc:	430a      	orrs	r2, r1
 801b2be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2240      	movs	r2, #64	@ 0x40
 801b2c6:	4013      	ands	r3, r2
 801b2c8:	d009      	beq.n	801b2de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b2ca:	4b0f      	ldr	r3, [pc, #60]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b2ce:	4a17      	ldr	r2, [pc, #92]	@ (801b32c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801b2d0:	4013      	ands	r3, r2
 801b2d2:	0019      	movs	r1, r3
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	6a1a      	ldr	r2, [r3, #32]
 801b2d8:	4b0b      	ldr	r3, [pc, #44]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2da:	430a      	orrs	r2, r1
 801b2dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	2280      	movs	r2, #128	@ 0x80
 801b2e4:	4013      	ands	r3, r2
 801b2e6:	d009      	beq.n	801b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801b2e8:	4b07      	ldr	r3, [pc, #28]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b2ec:	4a10      	ldr	r2, [pc, #64]	@ (801b330 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801b2ee:	4013      	ands	r3, r2
 801b2f0:	0019      	movs	r1, r3
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	69da      	ldr	r2, [r3, #28]
 801b2f6:	4b04      	ldr	r3, [pc, #16]	@ (801b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b2f8:	430a      	orrs	r2, r1
 801b2fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801b2fc:	2300      	movs	r3, #0
}
 801b2fe:	0018      	movs	r0, r3
 801b300:	46bd      	mov	sp, r7
 801b302:	b006      	add	sp, #24
 801b304:	bd80      	pop	{r7, pc}
 801b306:	46c0      	nop			@ (mov r8, r8)
 801b308:	40021000 	.word	0x40021000
 801b30c:	40007000 	.word	0x40007000
 801b310:	fffcffff 	.word	0xfffcffff
 801b314:	fff7ffff 	.word	0xfff7ffff
 801b318:	00001388 	.word	0x00001388
 801b31c:	ffcfffff 	.word	0xffcfffff
 801b320:	efffffff 	.word	0xefffffff
 801b324:	fffff3ff 	.word	0xfffff3ff
 801b328:	ffffcfff 	.word	0xffffcfff
 801b32c:	fbffffff 	.word	0xfbffffff
 801b330:	fff3ffff 	.word	0xfff3ffff

0801b334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801b334:	b5b0      	push	{r4, r5, r7, lr}
 801b336:	b084      	sub	sp, #16
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b33c:	230f      	movs	r3, #15
 801b33e:	18fb      	adds	r3, r7, r3
 801b340:	2201      	movs	r2, #1
 801b342:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d101      	bne.n	801b34e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801b34a:	2301      	movs	r3, #1
 801b34c:	e088      	b.n	801b460 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	2221      	movs	r2, #33	@ 0x21
 801b352:	5c9b      	ldrb	r3, [r3, r2]
 801b354:	b2db      	uxtb	r3, r3
 801b356:	2b00      	cmp	r3, #0
 801b358:	d107      	bne.n	801b36a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	2220      	movs	r2, #32
 801b35e:	2100      	movs	r1, #0
 801b360:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	0018      	movs	r0, r3
 801b366:	f7f2 fb39 	bl	800d9dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2221      	movs	r2, #33	@ 0x21
 801b36e:	2102      	movs	r1, #2
 801b370:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	68db      	ldr	r3, [r3, #12]
 801b378:	2210      	movs	r2, #16
 801b37a:	4013      	ands	r3, r2
 801b37c:	2b10      	cmp	r3, #16
 801b37e:	d05f      	beq.n	801b440 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	22ca      	movs	r2, #202	@ 0xca
 801b386:	625a      	str	r2, [r3, #36]	@ 0x24
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	2253      	movs	r2, #83	@ 0x53
 801b38e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801b390:	250f      	movs	r5, #15
 801b392:	197c      	adds	r4, r7, r5
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	0018      	movs	r0, r3
 801b398:	f000 fa99 	bl	801b8ce <RTC_EnterInitMode>
 801b39c:	0003      	movs	r3, r0
 801b39e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801b3a0:	0028      	movs	r0, r5
 801b3a2:	183b      	adds	r3, r7, r0
 801b3a4:	781b      	ldrb	r3, [r3, #0]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d12c      	bne.n	801b404 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	689a      	ldr	r2, [r3, #8]
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	492c      	ldr	r1, [pc, #176]	@ (801b468 <HAL_RTC_Init+0x134>)
 801b3b6:	400a      	ands	r2, r1
 801b3b8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	6899      	ldr	r1, [r3, #8]
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	685a      	ldr	r2, [r3, #4]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	691b      	ldr	r3, [r3, #16]
 801b3c8:	431a      	orrs	r2, r3
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	699b      	ldr	r3, [r3, #24]
 801b3ce:	431a      	orrs	r2, r3
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	430a      	orrs	r2, r1
 801b3d6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	687a      	ldr	r2, [r7, #4]
 801b3de:	68d2      	ldr	r2, [r2, #12]
 801b3e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	6919      	ldr	r1, [r3, #16]
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	689b      	ldr	r3, [r3, #8]
 801b3ec:	041a      	lsls	r2, r3, #16
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	430a      	orrs	r2, r1
 801b3f4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801b3f6:	183c      	adds	r4, r7, r0
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	0018      	movs	r0, r3
 801b3fc:	f000 faab 	bl	801b956 <RTC_ExitInitMode>
 801b400:	0003      	movs	r3, r0
 801b402:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801b404:	230f      	movs	r3, #15
 801b406:	18fb      	adds	r3, r7, r3
 801b408:	781b      	ldrb	r3, [r3, #0]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d113      	bne.n	801b436 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	2103      	movs	r1, #3
 801b41a:	438a      	bics	r2, r1
 801b41c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	69da      	ldr	r2, [r3, #28]
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	695b      	ldr	r3, [r3, #20]
 801b42c:	431a      	orrs	r2, r3
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	430a      	orrs	r2, r1
 801b434:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	22ff      	movs	r2, #255	@ 0xff
 801b43c:	625a      	str	r2, [r3, #36]	@ 0x24
 801b43e:	e003      	b.n	801b448 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801b440:	230f      	movs	r3, #15
 801b442:	18fb      	adds	r3, r7, r3
 801b444:	2200      	movs	r2, #0
 801b446:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801b448:	230f      	movs	r3, #15
 801b44a:	18fb      	adds	r3, r7, r3
 801b44c:	781b      	ldrb	r3, [r3, #0]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d103      	bne.n	801b45a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	2221      	movs	r2, #33	@ 0x21
 801b456:	2101      	movs	r1, #1
 801b458:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801b45a:	230f      	movs	r3, #15
 801b45c:	18fb      	adds	r3, r7, r3
 801b45e:	781b      	ldrb	r3, [r3, #0]
}
 801b460:	0018      	movs	r0, r3
 801b462:	46bd      	mov	sp, r7
 801b464:	b004      	add	sp, #16
 801b466:	bdb0      	pop	{r4, r5, r7, pc}
 801b468:	ff8fffbf 	.word	0xff8fffbf

0801b46c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b46c:	b5b0      	push	{r4, r5, r7, lr}
 801b46e:	b086      	sub	sp, #24
 801b470:	af00      	add	r7, sp, #0
 801b472:	60f8      	str	r0, [r7, #12]
 801b474:	60b9      	str	r1, [r7, #8]
 801b476:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b478:	2300      	movs	r3, #0
 801b47a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	2220      	movs	r2, #32
 801b480:	5c9b      	ldrb	r3, [r3, r2]
 801b482:	2b01      	cmp	r3, #1
 801b484:	d101      	bne.n	801b48a <HAL_RTC_SetTime+0x1e>
 801b486:	2302      	movs	r3, #2
 801b488:	e092      	b.n	801b5b0 <HAL_RTC_SetTime+0x144>
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	2220      	movs	r2, #32
 801b48e:	2101      	movs	r1, #1
 801b490:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	2221      	movs	r2, #33	@ 0x21
 801b496:	2102      	movs	r1, #2
 801b498:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d125      	bne.n	801b4ec <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	689b      	ldr	r3, [r3, #8]
 801b4a6:	2240      	movs	r2, #64	@ 0x40
 801b4a8:	4013      	ands	r3, r2
 801b4aa:	d102      	bne.n	801b4b2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b4b2:	68bb      	ldr	r3, [r7, #8]
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	f000 fa77 	bl	801b9aa <RTC_ByteToBcd2>
 801b4bc:	0003      	movs	r3, r0
 801b4be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b4c0:	68bb      	ldr	r3, [r7, #8]
 801b4c2:	785b      	ldrb	r3, [r3, #1]
 801b4c4:	0018      	movs	r0, r3
 801b4c6:	f000 fa70 	bl	801b9aa <RTC_ByteToBcd2>
 801b4ca:	0003      	movs	r3, r0
 801b4cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b4ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801b4d0:	68bb      	ldr	r3, [r7, #8]
 801b4d2:	789b      	ldrb	r3, [r3, #2]
 801b4d4:	0018      	movs	r0, r3
 801b4d6:	f000 fa68 	bl	801b9aa <RTC_ByteToBcd2>
 801b4da:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b4dc:	0022      	movs	r2, r4
 801b4de:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	78db      	ldrb	r3, [r3, #3]
 801b4e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b4e6:	4313      	orrs	r3, r2
 801b4e8:	617b      	str	r3, [r7, #20]
 801b4ea:	e017      	b.n	801b51c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	689b      	ldr	r3, [r3, #8]
 801b4f2:	2240      	movs	r2, #64	@ 0x40
 801b4f4:	4013      	ands	r3, r2
 801b4f6:	d102      	bne.n	801b4fe <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	781b      	ldrb	r3, [r3, #0]
 801b502:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b504:	68bb      	ldr	r3, [r7, #8]
 801b506:	785b      	ldrb	r3, [r3, #1]
 801b508:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b50a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801b50c:	68ba      	ldr	r2, [r7, #8]
 801b50e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b510:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	78db      	ldrb	r3, [r3, #3]
 801b516:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b518:	4313      	orrs	r3, r2
 801b51a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	22ca      	movs	r2, #202	@ 0xca
 801b522:	625a      	str	r2, [r3, #36]	@ 0x24
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	2253      	movs	r2, #83	@ 0x53
 801b52a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b52c:	2513      	movs	r5, #19
 801b52e:	197c      	adds	r4, r7, r5
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	0018      	movs	r0, r3
 801b534:	f000 f9cb 	bl	801b8ce <RTC_EnterInitMode>
 801b538:	0003      	movs	r3, r0
 801b53a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b53c:	0028      	movs	r0, r5
 801b53e:	183b      	adds	r3, r7, r0
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d120      	bne.n	801b588 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	697a      	ldr	r2, [r7, #20]
 801b54c:	491a      	ldr	r1, [pc, #104]	@ (801b5b8 <HAL_RTC_SetTime+0x14c>)
 801b54e:	400a      	ands	r2, r1
 801b550:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	689a      	ldr	r2, [r3, #8]
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	4917      	ldr	r1, [pc, #92]	@ (801b5bc <HAL_RTC_SetTime+0x150>)
 801b55e:	400a      	ands	r2, r1
 801b560:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	6899      	ldr	r1, [r3, #8]
 801b568:	68bb      	ldr	r3, [r7, #8]
 801b56a:	68da      	ldr	r2, [r3, #12]
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	691b      	ldr	r3, [r3, #16]
 801b570:	431a      	orrs	r2, r3
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	430a      	orrs	r2, r1
 801b578:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b57a:	183c      	adds	r4, r7, r0
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	0018      	movs	r0, r3
 801b580:	f000 f9e9 	bl	801b956 <RTC_ExitInitMode>
 801b584:	0003      	movs	r3, r0
 801b586:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b588:	2313      	movs	r3, #19
 801b58a:	18fb      	adds	r3, r7, r3
 801b58c:	781b      	ldrb	r3, [r3, #0]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d103      	bne.n	801b59a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	2221      	movs	r2, #33	@ 0x21
 801b596:	2101      	movs	r1, #1
 801b598:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	22ff      	movs	r2, #255	@ 0xff
 801b5a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	2220      	movs	r2, #32
 801b5a6:	2100      	movs	r1, #0
 801b5a8:	5499      	strb	r1, [r3, r2]

  return status;
 801b5aa:	2313      	movs	r3, #19
 801b5ac:	18fb      	adds	r3, r7, r3
 801b5ae:	781b      	ldrb	r3, [r3, #0]
}
 801b5b0:	0018      	movs	r0, r3
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	b006      	add	sp, #24
 801b5b6:	bdb0      	pop	{r4, r5, r7, pc}
 801b5b8:	007f7f7f 	.word	0x007f7f7f
 801b5bc:	fffbffff 	.word	0xfffbffff

0801b5c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b086      	sub	sp, #24
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	60f8      	str	r0, [r7, #12]
 801b5c8:	60b9      	str	r1, [r7, #8]
 801b5ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	691b      	ldr	r3, [r3, #16]
 801b5e0:	045b      	lsls	r3, r3, #17
 801b5e2:	0c5a      	lsrs	r2, r3, #17
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	4a22      	ldr	r2, [pc, #136]	@ (801b678 <HAL_RTC_GetTime+0xb8>)
 801b5f0:	4013      	ands	r3, r2
 801b5f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801b5f4:	697b      	ldr	r3, [r7, #20]
 801b5f6:	0c1b      	lsrs	r3, r3, #16
 801b5f8:	b2db      	uxtb	r3, r3
 801b5fa:	223f      	movs	r2, #63	@ 0x3f
 801b5fc:	4013      	ands	r3, r2
 801b5fe:	b2da      	uxtb	r2, r3
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	0a1b      	lsrs	r3, r3, #8
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	227f      	movs	r2, #127	@ 0x7f
 801b60c:	4013      	ands	r3, r2
 801b60e:	b2da      	uxtb	r2, r3
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	b2db      	uxtb	r3, r3
 801b618:	227f      	movs	r2, #127	@ 0x7f
 801b61a:	4013      	ands	r3, r2
 801b61c:	b2da      	uxtb	r2, r3
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801b622:	697b      	ldr	r3, [r7, #20]
 801b624:	0d9b      	lsrs	r3, r3, #22
 801b626:	b2db      	uxtb	r3, r3
 801b628:	2201      	movs	r2, #1
 801b62a:	4013      	ands	r3, r2
 801b62c:	b2da      	uxtb	r2, r3
 801b62e:	68bb      	ldr	r3, [r7, #8]
 801b630:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d11a      	bne.n	801b66e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	781b      	ldrb	r3, [r3, #0]
 801b63c:	0018      	movs	r0, r3
 801b63e:	f000 f9d5 	bl	801b9ec <RTC_Bcd2ToByte>
 801b642:	0003      	movs	r3, r0
 801b644:	001a      	movs	r2, r3
 801b646:	68bb      	ldr	r3, [r7, #8]
 801b648:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	785b      	ldrb	r3, [r3, #1]
 801b64e:	0018      	movs	r0, r3
 801b650:	f000 f9cc 	bl	801b9ec <RTC_Bcd2ToByte>
 801b654:	0003      	movs	r3, r0
 801b656:	001a      	movs	r2, r3
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b65c:	68bb      	ldr	r3, [r7, #8]
 801b65e:	789b      	ldrb	r3, [r3, #2]
 801b660:	0018      	movs	r0, r3
 801b662:	f000 f9c3 	bl	801b9ec <RTC_Bcd2ToByte>
 801b666:	0003      	movs	r3, r0
 801b668:	001a      	movs	r2, r3
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b66e:	2300      	movs	r3, #0
}
 801b670:	0018      	movs	r0, r3
 801b672:	46bd      	mov	sp, r7
 801b674:	b006      	add	sp, #24
 801b676:	bd80      	pop	{r7, pc}
 801b678:	007f7f7f 	.word	0x007f7f7f

0801b67c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b67c:	b5b0      	push	{r4, r5, r7, lr}
 801b67e:	b086      	sub	sp, #24
 801b680:	af00      	add	r7, sp, #0
 801b682:	60f8      	str	r0, [r7, #12]
 801b684:	60b9      	str	r1, [r7, #8]
 801b686:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b688:	2300      	movs	r3, #0
 801b68a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	2220      	movs	r2, #32
 801b690:	5c9b      	ldrb	r3, [r3, r2]
 801b692:	2b01      	cmp	r3, #1
 801b694:	d101      	bne.n	801b69a <HAL_RTC_SetDate+0x1e>
 801b696:	2302      	movs	r3, #2
 801b698:	e07e      	b.n	801b798 <HAL_RTC_SetDate+0x11c>
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	2220      	movs	r2, #32
 801b69e:	2101      	movs	r1, #1
 801b6a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	2221      	movs	r2, #33	@ 0x21
 801b6a6:	2102      	movs	r1, #2
 801b6a8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d10e      	bne.n	801b6ce <HAL_RTC_SetDate+0x52>
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	785b      	ldrb	r3, [r3, #1]
 801b6b4:	001a      	movs	r2, r3
 801b6b6:	2310      	movs	r3, #16
 801b6b8:	4013      	ands	r3, r2
 801b6ba:	d008      	beq.n	801b6ce <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	785b      	ldrb	r3, [r3, #1]
 801b6c0:	2210      	movs	r2, #16
 801b6c2:	4393      	bics	r3, r2
 801b6c4:	b2db      	uxtb	r3, r3
 801b6c6:	330a      	adds	r3, #10
 801b6c8:	b2da      	uxtb	r2, r3
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d11c      	bne.n	801b70e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	78db      	ldrb	r3, [r3, #3]
 801b6d8:	0018      	movs	r0, r3
 801b6da:	f000 f966 	bl	801b9aa <RTC_ByteToBcd2>
 801b6de:	0003      	movs	r3, r0
 801b6e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b6e2:	68bb      	ldr	r3, [r7, #8]
 801b6e4:	785b      	ldrb	r3, [r3, #1]
 801b6e6:	0018      	movs	r0, r3
 801b6e8:	f000 f95f 	bl	801b9aa <RTC_ByteToBcd2>
 801b6ec:	0003      	movs	r3, r0
 801b6ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b6f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	789b      	ldrb	r3, [r3, #2]
 801b6f6:	0018      	movs	r0, r3
 801b6f8:	f000 f957 	bl	801b9aa <RTC_ByteToBcd2>
 801b6fc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b6fe:	0022      	movs	r2, r4
 801b700:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801b702:	68bb      	ldr	r3, [r7, #8]
 801b704:	781b      	ldrb	r3, [r3, #0]
 801b706:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b708:	4313      	orrs	r3, r2
 801b70a:	617b      	str	r3, [r7, #20]
 801b70c:	e00e      	b.n	801b72c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b70e:	68bb      	ldr	r3, [r7, #8]
 801b710:	78db      	ldrb	r3, [r3, #3]
 801b712:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	785b      	ldrb	r3, [r3, #1]
 801b718:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b71a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801b71c:	68ba      	ldr	r2, [r7, #8]
 801b71e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b720:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	781b      	ldrb	r3, [r3, #0]
 801b726:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b728:	4313      	orrs	r3, r2
 801b72a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	22ca      	movs	r2, #202	@ 0xca
 801b732:	625a      	str	r2, [r3, #36]	@ 0x24
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	2253      	movs	r2, #83	@ 0x53
 801b73a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b73c:	2513      	movs	r5, #19
 801b73e:	197c      	adds	r4, r7, r5
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	0018      	movs	r0, r3
 801b744:	f000 f8c3 	bl	801b8ce <RTC_EnterInitMode>
 801b748:	0003      	movs	r3, r0
 801b74a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b74c:	0028      	movs	r0, r5
 801b74e:	183b      	adds	r3, r7, r0
 801b750:	781b      	ldrb	r3, [r3, #0]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d10c      	bne.n	801b770 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	697a      	ldr	r2, [r7, #20]
 801b75c:	4910      	ldr	r1, [pc, #64]	@ (801b7a0 <HAL_RTC_SetDate+0x124>)
 801b75e:	400a      	ands	r2, r1
 801b760:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b762:	183c      	adds	r4, r7, r0
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	0018      	movs	r0, r3
 801b768:	f000 f8f5 	bl	801b956 <RTC_ExitInitMode>
 801b76c:	0003      	movs	r3, r0
 801b76e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b770:	2313      	movs	r3, #19
 801b772:	18fb      	adds	r3, r7, r3
 801b774:	781b      	ldrb	r3, [r3, #0]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d103      	bne.n	801b782 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	2221      	movs	r2, #33	@ 0x21
 801b77e:	2101      	movs	r1, #1
 801b780:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	22ff      	movs	r2, #255	@ 0xff
 801b788:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	2220      	movs	r2, #32
 801b78e:	2100      	movs	r1, #0
 801b790:	5499      	strb	r1, [r3, r2]

  return status;
 801b792:	2313      	movs	r3, #19
 801b794:	18fb      	adds	r3, r7, r3
 801b796:	781b      	ldrb	r3, [r3, #0]
}
 801b798:	0018      	movs	r0, r3
 801b79a:	46bd      	mov	sp, r7
 801b79c:	b006      	add	sp, #24
 801b79e:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a0:	00ffff3f 	.word	0x00ffff3f

0801b7a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b086      	sub	sp, #24
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	60f8      	str	r0, [r7, #12]
 801b7ac:	60b9      	str	r1, [r7, #8]
 801b7ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	685b      	ldr	r3, [r3, #4]
 801b7ba:	4a21      	ldr	r2, [pc, #132]	@ (801b840 <HAL_RTC_GetDate+0x9c>)
 801b7bc:	4013      	ands	r3, r2
 801b7be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	0c1b      	lsrs	r3, r3, #16
 801b7c4:	b2da      	uxtb	r2, r3
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801b7ca:	697b      	ldr	r3, [r7, #20]
 801b7cc:	0a1b      	lsrs	r3, r3, #8
 801b7ce:	b2db      	uxtb	r3, r3
 801b7d0:	221f      	movs	r2, #31
 801b7d2:	4013      	ands	r3, r2
 801b7d4:	b2da      	uxtb	r2, r3
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	b2db      	uxtb	r3, r3
 801b7de:	223f      	movs	r2, #63	@ 0x3f
 801b7e0:	4013      	ands	r3, r2
 801b7e2:	b2da      	uxtb	r2, r3
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b7e8:	697b      	ldr	r3, [r7, #20]
 801b7ea:	0b5b      	lsrs	r3, r3, #13
 801b7ec:	b2db      	uxtb	r3, r3
 801b7ee:	2207      	movs	r2, #7
 801b7f0:	4013      	ands	r3, r2
 801b7f2:	b2da      	uxtb	r2, r3
 801b7f4:	68bb      	ldr	r3, [r7, #8]
 801b7f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d11a      	bne.n	801b834 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	78db      	ldrb	r3, [r3, #3]
 801b802:	0018      	movs	r0, r3
 801b804:	f000 f8f2 	bl	801b9ec <RTC_Bcd2ToByte>
 801b808:	0003      	movs	r3, r0
 801b80a:	001a      	movs	r2, r3
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	785b      	ldrb	r3, [r3, #1]
 801b814:	0018      	movs	r0, r3
 801b816:	f000 f8e9 	bl	801b9ec <RTC_Bcd2ToByte>
 801b81a:	0003      	movs	r3, r0
 801b81c:	001a      	movs	r2, r3
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b822:	68bb      	ldr	r3, [r7, #8]
 801b824:	789b      	ldrb	r3, [r3, #2]
 801b826:	0018      	movs	r0, r3
 801b828:	f000 f8e0 	bl	801b9ec <RTC_Bcd2ToByte>
 801b82c:	0003      	movs	r3, r0
 801b82e:	001a      	movs	r2, r3
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b834:	2300      	movs	r3, #0
}
 801b836:	0018      	movs	r0, r3
 801b838:	46bd      	mov	sp, r7
 801b83a:	b006      	add	sp, #24
 801b83c:	bd80      	pop	{r7, pc}
 801b83e:	46c0      	nop			@ (mov r8, r8)
 801b840:	00ffff3f 	.word	0x00ffff3f

0801b844 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b084      	sub	sp, #16
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b84c:	2300      	movs	r3, #0
 801b84e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	4a0e      	ldr	r2, [pc, #56]	@ (801b890 <HAL_RTC_WaitForSynchro+0x4c>)
 801b856:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b858:	f7f8 f9dc 	bl	8013c14 <HAL_GetTick>
 801b85c:	0003      	movs	r3, r0
 801b85e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b860:	e00a      	b.n	801b878 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b862:	f7f8 f9d7 	bl	8013c14 <HAL_GetTick>
 801b866:	0002      	movs	r2, r0
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	1ad2      	subs	r2, r2, r3
 801b86c:	23fa      	movs	r3, #250	@ 0xfa
 801b86e:	009b      	lsls	r3, r3, #2
 801b870:	429a      	cmp	r2, r3
 801b872:	d901      	bls.n	801b878 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801b874:	2303      	movs	r3, #3
 801b876:	e006      	b.n	801b886 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	68db      	ldr	r3, [r3, #12]
 801b87e:	2220      	movs	r2, #32
 801b880:	4013      	ands	r3, r2
 801b882:	d0ee      	beq.n	801b862 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801b884:	2300      	movs	r3, #0
}
 801b886:	0018      	movs	r0, r3
 801b888:	46bd      	mov	sp, r7
 801b88a:	b004      	add	sp, #16
 801b88c:	bd80      	pop	{r7, pc}
 801b88e:	46c0      	nop			@ (mov r8, r8)
 801b890:	0001ff5f 	.word	0x0001ff5f

0801b894 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b082      	sub	sp, #8
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	22ca      	movs	r2, #202	@ 0xca
 801b8a2:	625a      	str	r2, [r3, #36]	@ 0x24
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	2253      	movs	r2, #83	@ 0x53
 801b8aa:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	689a      	ldr	r2, [r3, #8]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	2180      	movs	r1, #128	@ 0x80
 801b8b8:	0249      	lsls	r1, r1, #9
 801b8ba:	430a      	orrs	r2, r1
 801b8bc:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	22ff      	movs	r2, #255	@ 0xff
 801b8c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801b8c6:	46c0      	nop			@ (mov r8, r8)
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	b002      	add	sp, #8
 801b8cc:	bd80      	pop	{r7, pc}

0801b8ce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801b8ce:	b580      	push	{r7, lr}
 801b8d0:	b084      	sub	sp, #16
 801b8d2:	af00      	add	r7, sp, #0
 801b8d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801b8da:	230f      	movs	r3, #15
 801b8dc:	18fb      	adds	r3, r7, r3
 801b8de:	2200      	movs	r2, #0
 801b8e0:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	68db      	ldr	r3, [r3, #12]
 801b8e8:	2240      	movs	r2, #64	@ 0x40
 801b8ea:	4013      	ands	r3, r2
 801b8ec:	d12c      	bne.n	801b948 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	68da      	ldr	r2, [r3, #12]
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	2180      	movs	r1, #128	@ 0x80
 801b8fa:	430a      	orrs	r2, r1
 801b8fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b8fe:	f7f8 f989 	bl	8013c14 <HAL_GetTick>
 801b902:	0003      	movs	r3, r0
 801b904:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b906:	e014      	b.n	801b932 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b908:	f7f8 f984 	bl	8013c14 <HAL_GetTick>
 801b90c:	0002      	movs	r2, r0
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	1ad2      	subs	r2, r2, r3
 801b912:	200f      	movs	r0, #15
 801b914:	183b      	adds	r3, r7, r0
 801b916:	1839      	adds	r1, r7, r0
 801b918:	7809      	ldrb	r1, [r1, #0]
 801b91a:	7019      	strb	r1, [r3, #0]
 801b91c:	23fa      	movs	r3, #250	@ 0xfa
 801b91e:	009b      	lsls	r3, r3, #2
 801b920:	429a      	cmp	r2, r3
 801b922:	d906      	bls.n	801b932 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	2221      	movs	r2, #33	@ 0x21
 801b928:	2104      	movs	r1, #4
 801b92a:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801b92c:	183b      	adds	r3, r7, r0
 801b92e:	2201      	movs	r2, #1
 801b930:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	68db      	ldr	r3, [r3, #12]
 801b938:	2240      	movs	r2, #64	@ 0x40
 801b93a:	4013      	ands	r3, r2
 801b93c:	d104      	bne.n	801b948 <RTC_EnterInitMode+0x7a>
 801b93e:	230f      	movs	r3, #15
 801b940:	18fb      	adds	r3, r7, r3
 801b942:	781b      	ldrb	r3, [r3, #0]
 801b944:	2b01      	cmp	r3, #1
 801b946:	d1df      	bne.n	801b908 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801b948:	230f      	movs	r3, #15
 801b94a:	18fb      	adds	r3, r7, r3
 801b94c:	781b      	ldrb	r3, [r3, #0]
}
 801b94e:	0018      	movs	r0, r3
 801b950:	46bd      	mov	sp, r7
 801b952:	b004      	add	sp, #16
 801b954:	bd80      	pop	{r7, pc}

0801b956 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801b956:	b590      	push	{r4, r7, lr}
 801b958:	b085      	sub	sp, #20
 801b95a:	af00      	add	r7, sp, #0
 801b95c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b95e:	240f      	movs	r4, #15
 801b960:	193b      	adds	r3, r7, r4
 801b962:	2200      	movs	r2, #0
 801b964:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	68da      	ldr	r2, [r3, #12]
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	2180      	movs	r1, #128	@ 0x80
 801b972:	438a      	bics	r2, r1
 801b974:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	689b      	ldr	r3, [r3, #8]
 801b97c:	2220      	movs	r2, #32
 801b97e:	4013      	ands	r3, r2
 801b980:	d10c      	bne.n	801b99c <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	0018      	movs	r0, r3
 801b986:	f7ff ff5d 	bl	801b844 <HAL_RTC_WaitForSynchro>
 801b98a:	1e03      	subs	r3, r0, #0
 801b98c:	d006      	beq.n	801b99c <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	2221      	movs	r2, #33	@ 0x21
 801b992:	2104      	movs	r1, #4
 801b994:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801b996:	193b      	adds	r3, r7, r4
 801b998:	2201      	movs	r2, #1
 801b99a:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801b99c:	230f      	movs	r3, #15
 801b99e:	18fb      	adds	r3, r7, r3
 801b9a0:	781b      	ldrb	r3, [r3, #0]
}
 801b9a2:	0018      	movs	r0, r3
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	b005      	add	sp, #20
 801b9a8:	bd90      	pop	{r4, r7, pc}

0801b9aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801b9aa:	b580      	push	{r7, lr}
 801b9ac:	b084      	sub	sp, #16
 801b9ae:	af00      	add	r7, sp, #0
 801b9b0:	0002      	movs	r2, r0
 801b9b2:	1dfb      	adds	r3, r7, #7
 801b9b4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801b9b6:	2300      	movs	r3, #0
 801b9b8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801b9ba:	e007      	b.n	801b9cc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3301      	adds	r3, #1
 801b9c0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801b9c2:	1dfb      	adds	r3, r7, #7
 801b9c4:	1dfa      	adds	r2, r7, #7
 801b9c6:	7812      	ldrb	r2, [r2, #0]
 801b9c8:	3a0a      	subs	r2, #10
 801b9ca:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801b9cc:	1dfb      	adds	r3, r7, #7
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	2b09      	cmp	r3, #9
 801b9d2:	d8f3      	bhi.n	801b9bc <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	b2db      	uxtb	r3, r3
 801b9d8:	011b      	lsls	r3, r3, #4
 801b9da:	b2da      	uxtb	r2, r3
 801b9dc:	1dfb      	adds	r3, r7, #7
 801b9de:	781b      	ldrb	r3, [r3, #0]
 801b9e0:	4313      	orrs	r3, r2
 801b9e2:	b2db      	uxtb	r3, r3
}
 801b9e4:	0018      	movs	r0, r3
 801b9e6:	46bd      	mov	sp, r7
 801b9e8:	b004      	add	sp, #16
 801b9ea:	bd80      	pop	{r7, pc}

0801b9ec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b084      	sub	sp, #16
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	0002      	movs	r2, r0
 801b9f4:	1dfb      	adds	r3, r7, #7
 801b9f6:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801b9fc:	1dfb      	adds	r3, r7, #7
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	091b      	lsrs	r3, r3, #4
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	001a      	movs	r2, r3
 801ba06:	0013      	movs	r3, r2
 801ba08:	009b      	lsls	r3, r3, #2
 801ba0a:	189b      	adds	r3, r3, r2
 801ba0c:	005b      	lsls	r3, r3, #1
 801ba0e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	b2da      	uxtb	r2, r3
 801ba14:	1dfb      	adds	r3, r7, #7
 801ba16:	781b      	ldrb	r3, [r3, #0]
 801ba18:	210f      	movs	r1, #15
 801ba1a:	400b      	ands	r3, r1
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	18d3      	adds	r3, r2, r3
 801ba20:	b2db      	uxtb	r3, r3
}
 801ba22:	0018      	movs	r0, r3
 801ba24:	46bd      	mov	sp, r7
 801ba26:	b004      	add	sp, #16
 801ba28:	bd80      	pop	{r7, pc}
	...

0801ba2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b086      	sub	sp, #24
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801ba38:	4b64      	ldr	r3, [pc, #400]	@ (801bbcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	22fa      	movs	r2, #250	@ 0xfa
 801ba3e:	01d1      	lsls	r1, r2, #7
 801ba40:	0018      	movs	r0, r3
 801ba42:	f7e4 fbaf 	bl	80001a4 <__udivsi3>
 801ba46:	0003      	movs	r3, r0
 801ba48:	001a      	movs	r2, r3
 801ba4a:	0013      	movs	r3, r2
 801ba4c:	015b      	lsls	r3, r3, #5
 801ba4e:	1a9b      	subs	r3, r3, r2
 801ba50:	009b      	lsls	r3, r3, #2
 801ba52:	189b      	adds	r3, r3, r2
 801ba54:	00db      	lsls	r3, r3, #3
 801ba56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	2220      	movs	r2, #32
 801ba5c:	5c9b      	ldrb	r3, [r3, r2]
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d101      	bne.n	801ba66 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801ba62:	2302      	movs	r3, #2
 801ba64:	e0ad      	b.n	801bbc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	2220      	movs	r2, #32
 801ba6a:	2101      	movs	r1, #1
 801ba6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	2221      	movs	r2, #33	@ 0x21
 801ba72:	2102      	movs	r1, #2
 801ba74:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	22ca      	movs	r2, #202	@ 0xca
 801ba7c:	625a      	str	r2, [r3, #36]	@ 0x24
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	2253      	movs	r2, #83	@ 0x53
 801ba84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	689a      	ldr	r2, [r3, #8]
 801ba8c:	2380      	movs	r3, #128	@ 0x80
 801ba8e:	00db      	lsls	r3, r3, #3
 801ba90:	4013      	ands	r3, r2
 801ba92:	d019      	beq.n	801bac8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	3b01      	subs	r3, #1
 801ba98:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d10d      	bne.n	801babc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	22ff      	movs	r2, #255	@ 0xff
 801baa6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	2221      	movs	r2, #33	@ 0x21
 801baac:	2103      	movs	r1, #3
 801baae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	2220      	movs	r2, #32
 801bab4:	2100      	movs	r1, #0
 801bab6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801bab8:	2303      	movs	r3, #3
 801baba:	e082      	b.n	801bbc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	68db      	ldr	r3, [r3, #12]
 801bac2:	2204      	movs	r2, #4
 801bac4:	4013      	ands	r3, r2
 801bac6:	d1e5      	bne.n	801ba94 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	689a      	ldr	r2, [r3, #8]
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	493f      	ldr	r1, [pc, #252]	@ (801bbd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801bad4:	400a      	ands	r2, r1
 801bad6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	68db      	ldr	r3, [r3, #12]
 801bade:	22ff      	movs	r2, #255	@ 0xff
 801bae0:	401a      	ands	r2, r3
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	493b      	ldr	r1, [pc, #236]	@ (801bbd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801bae8:	430a      	orrs	r2, r1
 801baea:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801baec:	4b37      	ldr	r3, [pc, #220]	@ (801bbcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	22fa      	movs	r2, #250	@ 0xfa
 801baf2:	01d1      	lsls	r1, r2, #7
 801baf4:	0018      	movs	r0, r3
 801baf6:	f7e4 fb55 	bl	80001a4 <__udivsi3>
 801bafa:	0003      	movs	r3, r0
 801bafc:	001a      	movs	r2, r3
 801bafe:	0013      	movs	r3, r2
 801bb00:	015b      	lsls	r3, r3, #5
 801bb02:	1a9b      	subs	r3, r3, r2
 801bb04:	009b      	lsls	r3, r3, #2
 801bb06:	189b      	adds	r3, r3, r2
 801bb08:	00db      	lsls	r3, r3, #3
 801bb0a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	3b01      	subs	r3, #1
 801bb10:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801bb12:	697b      	ldr	r3, [r7, #20]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d10d      	bne.n	801bb34 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	22ff      	movs	r2, #255	@ 0xff
 801bb1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	2221      	movs	r2, #33	@ 0x21
 801bb24:	2103      	movs	r1, #3
 801bb26:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	2220      	movs	r2, #32
 801bb2c:	2100      	movs	r1, #0
 801bb2e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bb30:	2303      	movs	r3, #3
 801bb32:	e046      	b.n	801bbc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	2204      	movs	r2, #4
 801bb3c:	4013      	ands	r3, r2
 801bb3e:	d0e5      	beq.n	801bb0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	689a      	ldr	r2, [r3, #8]
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	2107      	movs	r1, #7
 801bb4c:	438a      	bics	r2, r1
 801bb4e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	6899      	ldr	r1, [r3, #8]
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	687a      	ldr	r2, [r7, #4]
 801bb5c:	430a      	orrs	r2, r1
 801bb5e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	68ba      	ldr	r2, [r7, #8]
 801bb66:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801bb68:	4b1b      	ldr	r3, [pc, #108]	@ (801bbd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bb6a:	681a      	ldr	r2, [r3, #0]
 801bb6c:	4b1a      	ldr	r3, [pc, #104]	@ (801bbd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bb6e:	2180      	movs	r1, #128	@ 0x80
 801bb70:	0349      	lsls	r1, r1, #13
 801bb72:	430a      	orrs	r2, r1
 801bb74:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801bb76:	4b18      	ldr	r3, [pc, #96]	@ (801bbd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bb78:	689a      	ldr	r2, [r3, #8]
 801bb7a:	4b17      	ldr	r3, [pc, #92]	@ (801bbd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bb7c:	2180      	movs	r1, #128	@ 0x80
 801bb7e:	0349      	lsls	r1, r1, #13
 801bb80:	430a      	orrs	r2, r1
 801bb82:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	689a      	ldr	r2, [r3, #8]
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	2180      	movs	r1, #128	@ 0x80
 801bb90:	01c9      	lsls	r1, r1, #7
 801bb92:	430a      	orrs	r2, r1
 801bb94:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	689a      	ldr	r2, [r3, #8]
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	2180      	movs	r1, #128	@ 0x80
 801bba2:	00c9      	lsls	r1, r1, #3
 801bba4:	430a      	orrs	r2, r1
 801bba6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	22ff      	movs	r2, #255	@ 0xff
 801bbae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	2221      	movs	r2, #33	@ 0x21
 801bbb4:	2101      	movs	r1, #1
 801bbb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	2220      	movs	r2, #32
 801bbbc:	2100      	movs	r1, #0
 801bbbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bbc0:	2300      	movs	r3, #0
}
 801bbc2:	0018      	movs	r0, r3
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	b006      	add	sp, #24
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	46c0      	nop			@ (mov r8, r8)
 801bbcc:	200000e0 	.word	0x200000e0
 801bbd0:	fffffbff 	.word	0xfffffbff
 801bbd4:	fffffb7f 	.word	0xfffffb7f
 801bbd8:	40010400 	.word	0x40010400

0801bbdc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b084      	sub	sp, #16
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	2220      	movs	r2, #32
 801bbec:	5c9b      	ldrb	r3, [r3, r2]
 801bbee:	2b01      	cmp	r3, #1
 801bbf0:	d101      	bne.n	801bbf6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801bbf2:	2302      	movs	r3, #2
 801bbf4:	e04e      	b.n	801bc94 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	2220      	movs	r2, #32
 801bbfa:	2101      	movs	r1, #1
 801bbfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	2221      	movs	r2, #33	@ 0x21
 801bc02:	2102      	movs	r1, #2
 801bc04:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	22ca      	movs	r2, #202	@ 0xca
 801bc0c:	625a      	str	r2, [r3, #36]	@ 0x24
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	2253      	movs	r2, #83	@ 0x53
 801bc14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	689a      	ldr	r2, [r3, #8]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	491e      	ldr	r1, [pc, #120]	@ (801bc9c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801bc22:	400a      	ands	r2, r1
 801bc24:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	689a      	ldr	r2, [r3, #8]
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	491b      	ldr	r1, [pc, #108]	@ (801bca0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801bc32:	400a      	ands	r2, r1
 801bc34:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bc36:	f7f7 ffed 	bl	8013c14 <HAL_GetTick>
 801bc3a:	0003      	movs	r3, r0
 801bc3c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bc3e:	e016      	b.n	801bc6e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bc40:	f7f7 ffe8 	bl	8013c14 <HAL_GetTick>
 801bc44:	0002      	movs	r2, r0
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	1ad2      	subs	r2, r2, r3
 801bc4a:	23fa      	movs	r3, #250	@ 0xfa
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d90d      	bls.n	801bc6e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	22ff      	movs	r2, #255	@ 0xff
 801bc58:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	2221      	movs	r2, #33	@ 0x21
 801bc5e:	2103      	movs	r1, #3
 801bc60:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	2220      	movs	r2, #32
 801bc66:	2100      	movs	r1, #0
 801bc68:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bc6a:	2303      	movs	r3, #3
 801bc6c:	e012      	b.n	801bc94 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	68db      	ldr	r3, [r3, #12]
 801bc74:	2204      	movs	r2, #4
 801bc76:	4013      	ands	r3, r2
 801bc78:	d0e2      	beq.n	801bc40 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	22ff      	movs	r2, #255	@ 0xff
 801bc80:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	2221      	movs	r2, #33	@ 0x21
 801bc86:	2101      	movs	r1, #1
 801bc88:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	2220      	movs	r2, #32
 801bc8e:	2100      	movs	r1, #0
 801bc90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bc92:	2300      	movs	r3, #0
}
 801bc94:	0018      	movs	r0, r3
 801bc96:	46bd      	mov	sp, r7
 801bc98:	b004      	add	sp, #16
 801bc9a:	bd80      	pop	{r7, pc}
 801bc9c:	fffffbff 	.word	0xfffffbff
 801bca0:	ffffbfff 	.word	0xffffbfff

0801bca4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801bcac:	4b13      	ldr	r3, [pc, #76]	@ (801bcfc <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801bcae:	2280      	movs	r2, #128	@ 0x80
 801bcb0:	0352      	lsls	r2, r2, #13
 801bcb2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	689a      	ldr	r2, [r3, #8]
 801bcba:	2380      	movs	r3, #128	@ 0x80
 801bcbc:	01db      	lsls	r3, r3, #7
 801bcbe:	4013      	ands	r3, r2
 801bcc0:	d014      	beq.n	801bcec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	68da      	ldr	r2, [r3, #12]
 801bcc8:	2380      	movs	r3, #128	@ 0x80
 801bcca:	00db      	lsls	r3, r3, #3
 801bccc:	4013      	ands	r3, r2
 801bcce:	d00d      	beq.n	801bcec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	68db      	ldr	r3, [r3, #12]
 801bcd6:	22ff      	movs	r2, #255	@ 0xff
 801bcd8:	401a      	ands	r2, r3
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	4908      	ldr	r1, [pc, #32]	@ (801bd00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801bce0:	430a      	orrs	r2, r1
 801bce2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	0018      	movs	r0, r3
 801bce8:	f000 f80c 	bl	801bd04 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	2221      	movs	r2, #33	@ 0x21
 801bcf0:	2101      	movs	r1, #1
 801bcf2:	5499      	strb	r1, [r3, r2]
}
 801bcf4:	46c0      	nop			@ (mov r8, r8)
 801bcf6:	46bd      	mov	sp, r7
 801bcf8:	b002      	add	sp, #8
 801bcfa:	bd80      	pop	{r7, pc}
 801bcfc:	40010400 	.word	0x40010400
 801bd00:	fffffb7f 	.word	0xfffffb7f

0801bd04 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801bd0c:	46c0      	nop			@ (mov r8, r8)
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	b002      	add	sp, #8
 801bd12:	bd80      	pop	{r7, pc}

0801bd14 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b086      	sub	sp, #24
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	60f8      	str	r0, [r7, #12]
 801bd1c:	60b9      	str	r1, [r7, #8]
 801bd1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801bd20:	2300      	movs	r3, #0
 801bd22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bd24:	68fb      	ldr	r3, [r7, #12]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	3350      	adds	r3, #80	@ 0x50
 801bd2a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	009b      	lsls	r3, r3, #2
 801bd30:	697a      	ldr	r2, [r7, #20]
 801bd32:	18d3      	adds	r3, r2, r3
 801bd34:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801bd36:	697b      	ldr	r3, [r7, #20]
 801bd38:	687a      	ldr	r2, [r7, #4]
 801bd3a:	601a      	str	r2, [r3, #0]
}
 801bd3c:	46c0      	nop			@ (mov r8, r8)
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	b006      	add	sp, #24
 801bd42:	bd80      	pop	{r7, pc}

0801bd44 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801bd4e:	2300      	movs	r3, #0
 801bd50:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	3350      	adds	r3, #80	@ 0x50
 801bd58:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	009b      	lsls	r3, r3, #2
 801bd5e:	68fa      	ldr	r2, [r7, #12]
 801bd60:	18d3      	adds	r3, r2, r3
 801bd62:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	681b      	ldr	r3, [r3, #0]
}
 801bd68:	0018      	movs	r0, r3
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	b004      	add	sp, #16
 801bd6e:	bd80      	pop	{r7, pc}

0801bd70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d101      	bne.n	801bd82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e032      	b.n	801bde8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	2239      	movs	r2, #57	@ 0x39
 801bd86:	5c9b      	ldrb	r3, [r3, r2]
 801bd88:	b2db      	uxtb	r3, r3
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d107      	bne.n	801bd9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	2238      	movs	r2, #56	@ 0x38
 801bd92:	2100      	movs	r1, #0
 801bd94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	0018      	movs	r0, r3
 801bd9a:	f7f6 ff57 	bl	8012c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	2239      	movs	r2, #57	@ 0x39
 801bda2:	2102      	movs	r1, #2
 801bda4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681a      	ldr	r2, [r3, #0]
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	3304      	adds	r3, #4
 801bdae:	0019      	movs	r1, r3
 801bdb0:	0010      	movs	r0, r2
 801bdb2:	f000 fa1d 	bl	801c1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	223e      	movs	r2, #62	@ 0x3e
 801bdba:	2101      	movs	r1, #1
 801bdbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	223a      	movs	r2, #58	@ 0x3a
 801bdc2:	2101      	movs	r1, #1
 801bdc4:	5499      	strb	r1, [r3, r2]
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	223b      	movs	r2, #59	@ 0x3b
 801bdca:	2101      	movs	r1, #1
 801bdcc:	5499      	strb	r1, [r3, r2]
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	223c      	movs	r2, #60	@ 0x3c
 801bdd2:	2101      	movs	r1, #1
 801bdd4:	5499      	strb	r1, [r3, r2]
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	223d      	movs	r2, #61	@ 0x3d
 801bdda:	2101      	movs	r1, #1
 801bddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	2239      	movs	r2, #57	@ 0x39
 801bde2:	2101      	movs	r1, #1
 801bde4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bde6:	2300      	movs	r3, #0
}
 801bde8:	0018      	movs	r0, r3
 801bdea:	46bd      	mov	sp, r7
 801bdec:	b002      	add	sp, #8
 801bdee:	bd80      	pop	{r7, pc}

0801bdf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b084      	sub	sp, #16
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	2239      	movs	r2, #57	@ 0x39
 801bdfc:	5c9b      	ldrb	r3, [r3, r2]
 801bdfe:	b2db      	uxtb	r3, r3
 801be00:	2b01      	cmp	r3, #1
 801be02:	d001      	beq.n	801be08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801be04:	2301      	movs	r3, #1
 801be06:	e033      	b.n	801be70 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2239      	movs	r2, #57	@ 0x39
 801be0c:	2102      	movs	r1, #2
 801be0e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	681a      	ldr	r2, [r3, #0]
 801be14:	2380      	movs	r3, #128	@ 0x80
 801be16:	05db      	lsls	r3, r3, #23
 801be18:	429a      	cmp	r2, r3
 801be1a:	d00e      	beq.n	801be3a <HAL_TIM_Base_Start+0x4a>
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	4a15      	ldr	r2, [pc, #84]	@ (801be78 <HAL_TIM_Base_Start+0x88>)
 801be22:	4293      	cmp	r3, r2
 801be24:	d009      	beq.n	801be3a <HAL_TIM_Base_Start+0x4a>
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	4a14      	ldr	r2, [pc, #80]	@ (801be7c <HAL_TIM_Base_Start+0x8c>)
 801be2c:	4293      	cmp	r3, r2
 801be2e:	d004      	beq.n	801be3a <HAL_TIM_Base_Start+0x4a>
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	4a12      	ldr	r2, [pc, #72]	@ (801be80 <HAL_TIM_Base_Start+0x90>)
 801be36:	4293      	cmp	r3, r2
 801be38:	d111      	bne.n	801be5e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	689b      	ldr	r3, [r3, #8]
 801be40:	2207      	movs	r2, #7
 801be42:	4013      	ands	r3, r2
 801be44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	2b06      	cmp	r3, #6
 801be4a:	d010      	beq.n	801be6e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	681a      	ldr	r2, [r3, #0]
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	2101      	movs	r1, #1
 801be58:	430a      	orrs	r2, r1
 801be5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801be5c:	e007      	b.n	801be6e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	681a      	ldr	r2, [r3, #0]
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	2101      	movs	r1, #1
 801be6a:	430a      	orrs	r2, r1
 801be6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801be6e:	2300      	movs	r3, #0
}
 801be70:	0018      	movs	r0, r3
 801be72:	46bd      	mov	sp, r7
 801be74:	b004      	add	sp, #16
 801be76:	bd80      	pop	{r7, pc}
 801be78:	40000400 	.word	0x40000400
 801be7c:	40010800 	.word	0x40010800
 801be80:	40011400 	.word	0x40011400

0801be84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	6a1b      	ldr	r3, [r3, #32]
 801be92:	4a0a      	ldr	r2, [pc, #40]	@ (801bebc <HAL_TIM_Base_Stop+0x38>)
 801be94:	4013      	ands	r3, r2
 801be96:	d107      	bne.n	801bea8 <HAL_TIM_Base_Stop+0x24>
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	2101      	movs	r1, #1
 801bea4:	438a      	bics	r2, r1
 801bea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2239      	movs	r2, #57	@ 0x39
 801beac:	2101      	movs	r1, #1
 801beae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801beb0:	2300      	movs	r3, #0
}
 801beb2:	0018      	movs	r0, r3
 801beb4:	46bd      	mov	sp, r7
 801beb6:	b002      	add	sp, #8
 801beb8:	bd80      	pop	{r7, pc}
 801beba:	46c0      	nop			@ (mov r8, r8)
 801bebc:	00001111 	.word	0x00001111

0801bec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b082      	sub	sp, #8
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d101      	bne.n	801bed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801bece:	2301      	movs	r3, #1
 801bed0:	e032      	b.n	801bf38 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	2239      	movs	r2, #57	@ 0x39
 801bed6:	5c9b      	ldrb	r3, [r3, r2]
 801bed8:	b2db      	uxtb	r3, r3
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d107      	bne.n	801beee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	2238      	movs	r2, #56	@ 0x38
 801bee2:	2100      	movs	r1, #0
 801bee4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	0018      	movs	r0, r3
 801beea:	f7f6 fe8b 	bl	8012c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	2239      	movs	r2, #57	@ 0x39
 801bef2:	2102      	movs	r1, #2
 801bef4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	681a      	ldr	r2, [r3, #0]
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	3304      	adds	r3, #4
 801befe:	0019      	movs	r1, r3
 801bf00:	0010      	movs	r0, r2
 801bf02:	f000 f975 	bl	801c1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	223e      	movs	r2, #62	@ 0x3e
 801bf0a:	2101      	movs	r1, #1
 801bf0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	223a      	movs	r2, #58	@ 0x3a
 801bf12:	2101      	movs	r1, #1
 801bf14:	5499      	strb	r1, [r3, r2]
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	223b      	movs	r2, #59	@ 0x3b
 801bf1a:	2101      	movs	r1, #1
 801bf1c:	5499      	strb	r1, [r3, r2]
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	223c      	movs	r2, #60	@ 0x3c
 801bf22:	2101      	movs	r1, #1
 801bf24:	5499      	strb	r1, [r3, r2]
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	223d      	movs	r2, #61	@ 0x3d
 801bf2a:	2101      	movs	r1, #1
 801bf2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	2239      	movs	r2, #57	@ 0x39
 801bf32:	2101      	movs	r1, #1
 801bf34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bf36:	2300      	movs	r3, #0
}
 801bf38:	0018      	movs	r0, r3
 801bf3a:	46bd      	mov	sp, r7
 801bf3c:	b002      	add	sp, #8
 801bf3e:	bd80      	pop	{r7, pc}

0801bf40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b084      	sub	sp, #16
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
 801bf48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d108      	bne.n	801bf62 <HAL_TIM_PWM_Start+0x22>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	223a      	movs	r2, #58	@ 0x3a
 801bf54:	5c9b      	ldrb	r3, [r3, r2]
 801bf56:	b2db      	uxtb	r3, r3
 801bf58:	3b01      	subs	r3, #1
 801bf5a:	1e5a      	subs	r2, r3, #1
 801bf5c:	4193      	sbcs	r3, r2
 801bf5e:	b2db      	uxtb	r3, r3
 801bf60:	e01f      	b.n	801bfa2 <HAL_TIM_PWM_Start+0x62>
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	2b04      	cmp	r3, #4
 801bf66:	d108      	bne.n	801bf7a <HAL_TIM_PWM_Start+0x3a>
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	223b      	movs	r2, #59	@ 0x3b
 801bf6c:	5c9b      	ldrb	r3, [r3, r2]
 801bf6e:	b2db      	uxtb	r3, r3
 801bf70:	3b01      	subs	r3, #1
 801bf72:	1e5a      	subs	r2, r3, #1
 801bf74:	4193      	sbcs	r3, r2
 801bf76:	b2db      	uxtb	r3, r3
 801bf78:	e013      	b.n	801bfa2 <HAL_TIM_PWM_Start+0x62>
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	2b08      	cmp	r3, #8
 801bf7e:	d108      	bne.n	801bf92 <HAL_TIM_PWM_Start+0x52>
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	223c      	movs	r2, #60	@ 0x3c
 801bf84:	5c9b      	ldrb	r3, [r3, r2]
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	3b01      	subs	r3, #1
 801bf8a:	1e5a      	subs	r2, r3, #1
 801bf8c:	4193      	sbcs	r3, r2
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	e007      	b.n	801bfa2 <HAL_TIM_PWM_Start+0x62>
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	223d      	movs	r2, #61	@ 0x3d
 801bf96:	5c9b      	ldrb	r3, [r3, r2]
 801bf98:	b2db      	uxtb	r3, r3
 801bf9a:	3b01      	subs	r3, #1
 801bf9c:	1e5a      	subs	r2, r3, #1
 801bf9e:	4193      	sbcs	r3, r2
 801bfa0:	b2db      	uxtb	r3, r3
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d001      	beq.n	801bfaa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801bfa6:	2301      	movs	r3, #1
 801bfa8:	e052      	b.n	801c050 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d104      	bne.n	801bfba <HAL_TIM_PWM_Start+0x7a>
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	223a      	movs	r2, #58	@ 0x3a
 801bfb4:	2102      	movs	r1, #2
 801bfb6:	5499      	strb	r1, [r3, r2]
 801bfb8:	e013      	b.n	801bfe2 <HAL_TIM_PWM_Start+0xa2>
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	2b04      	cmp	r3, #4
 801bfbe:	d104      	bne.n	801bfca <HAL_TIM_PWM_Start+0x8a>
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	223b      	movs	r2, #59	@ 0x3b
 801bfc4:	2102      	movs	r1, #2
 801bfc6:	5499      	strb	r1, [r3, r2]
 801bfc8:	e00b      	b.n	801bfe2 <HAL_TIM_PWM_Start+0xa2>
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	2b08      	cmp	r3, #8
 801bfce:	d104      	bne.n	801bfda <HAL_TIM_PWM_Start+0x9a>
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	223c      	movs	r2, #60	@ 0x3c
 801bfd4:	2102      	movs	r1, #2
 801bfd6:	5499      	strb	r1, [r3, r2]
 801bfd8:	e003      	b.n	801bfe2 <HAL_TIM_PWM_Start+0xa2>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	223d      	movs	r2, #61	@ 0x3d
 801bfde:	2102      	movs	r1, #2
 801bfe0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	6839      	ldr	r1, [r7, #0]
 801bfe8:	2201      	movs	r2, #1
 801bfea:	0018      	movs	r0, r3
 801bfec:	f000 fa62 	bl	801c4b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681a      	ldr	r2, [r3, #0]
 801bff4:	2380      	movs	r3, #128	@ 0x80
 801bff6:	05db      	lsls	r3, r3, #23
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d00e      	beq.n	801c01a <HAL_TIM_PWM_Start+0xda>
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	4a15      	ldr	r2, [pc, #84]	@ (801c058 <HAL_TIM_PWM_Start+0x118>)
 801c002:	4293      	cmp	r3, r2
 801c004:	d009      	beq.n	801c01a <HAL_TIM_PWM_Start+0xda>
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	4a14      	ldr	r2, [pc, #80]	@ (801c05c <HAL_TIM_PWM_Start+0x11c>)
 801c00c:	4293      	cmp	r3, r2
 801c00e:	d004      	beq.n	801c01a <HAL_TIM_PWM_Start+0xda>
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	4a12      	ldr	r2, [pc, #72]	@ (801c060 <HAL_TIM_PWM_Start+0x120>)
 801c016:	4293      	cmp	r3, r2
 801c018:	d111      	bne.n	801c03e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	689b      	ldr	r3, [r3, #8]
 801c020:	2207      	movs	r2, #7
 801c022:	4013      	ands	r3, r2
 801c024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	2b06      	cmp	r3, #6
 801c02a:	d010      	beq.n	801c04e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	681a      	ldr	r2, [r3, #0]
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	2101      	movs	r1, #1
 801c038:	430a      	orrs	r2, r1
 801c03a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c03c:	e007      	b.n	801c04e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	681a      	ldr	r2, [r3, #0]
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	2101      	movs	r1, #1
 801c04a:	430a      	orrs	r2, r1
 801c04c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c04e:	2300      	movs	r3, #0
}
 801c050:	0018      	movs	r0, r3
 801c052:	46bd      	mov	sp, r7
 801c054:	b004      	add	sp, #16
 801c056:	bd80      	pop	{r7, pc}
 801c058:	40000400 	.word	0x40000400
 801c05c:	40010800 	.word	0x40010800
 801c060:	40011400 	.word	0x40011400

0801c064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b086      	sub	sp, #24
 801c068:	af00      	add	r7, sp, #0
 801c06a:	60f8      	str	r0, [r7, #12]
 801c06c:	60b9      	str	r1, [r7, #8]
 801c06e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c070:	2317      	movs	r3, #23
 801c072:	18fb      	adds	r3, r7, r3
 801c074:	2200      	movs	r2, #0
 801c076:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	2238      	movs	r2, #56	@ 0x38
 801c07c:	5c9b      	ldrb	r3, [r3, r2]
 801c07e:	2b01      	cmp	r3, #1
 801c080:	d101      	bne.n	801c086 <HAL_TIM_PWM_ConfigChannel+0x22>
 801c082:	2302      	movs	r3, #2
 801c084:	e0ad      	b.n	801c1e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	2238      	movs	r2, #56	@ 0x38
 801c08a:	2101      	movs	r1, #1
 801c08c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	2b0c      	cmp	r3, #12
 801c092:	d100      	bne.n	801c096 <HAL_TIM_PWM_ConfigChannel+0x32>
 801c094:	e076      	b.n	801c184 <HAL_TIM_PWM_ConfigChannel+0x120>
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2b0c      	cmp	r3, #12
 801c09a:	d900      	bls.n	801c09e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801c09c:	e095      	b.n	801c1ca <HAL_TIM_PWM_ConfigChannel+0x166>
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	2b08      	cmp	r3, #8
 801c0a2:	d04e      	beq.n	801c142 <HAL_TIM_PWM_ConfigChannel+0xde>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2b08      	cmp	r3, #8
 801c0a8:	d900      	bls.n	801c0ac <HAL_TIM_PWM_ConfigChannel+0x48>
 801c0aa:	e08e      	b.n	801c1ca <HAL_TIM_PWM_ConfigChannel+0x166>
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d003      	beq.n	801c0ba <HAL_TIM_PWM_ConfigChannel+0x56>
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2b04      	cmp	r3, #4
 801c0b6:	d021      	beq.n	801c0fc <HAL_TIM_PWM_ConfigChannel+0x98>
 801c0b8:	e087      	b.n	801c1ca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	68ba      	ldr	r2, [r7, #8]
 801c0c0:	0011      	movs	r1, r2
 801c0c2:	0018      	movs	r0, r3
 801c0c4:	f000 f8f2 	bl	801c2ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	699a      	ldr	r2, [r3, #24]
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	2108      	movs	r1, #8
 801c0d4:	430a      	orrs	r2, r1
 801c0d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	699a      	ldr	r2, [r3, #24]
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	2104      	movs	r1, #4
 801c0e4:	438a      	bics	r2, r1
 801c0e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	6999      	ldr	r1, [r3, #24]
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	68da      	ldr	r2, [r3, #12]
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	430a      	orrs	r2, r1
 801c0f8:	619a      	str	r2, [r3, #24]
      break;
 801c0fa:	e06b      	b.n	801c1d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	68ba      	ldr	r2, [r7, #8]
 801c102:	0011      	movs	r1, r2
 801c104:	0018      	movs	r0, r3
 801c106:	f000 f90d 	bl	801c324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	699a      	ldr	r2, [r3, #24]
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	2180      	movs	r1, #128	@ 0x80
 801c116:	0109      	lsls	r1, r1, #4
 801c118:	430a      	orrs	r2, r1
 801c11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	699a      	ldr	r2, [r3, #24]
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	4931      	ldr	r1, [pc, #196]	@ (801c1ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c128:	400a      	ands	r2, r1
 801c12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	6999      	ldr	r1, [r3, #24]
 801c132:	68bb      	ldr	r3, [r7, #8]
 801c134:	68db      	ldr	r3, [r3, #12]
 801c136:	021a      	lsls	r2, r3, #8
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	430a      	orrs	r2, r1
 801c13e:	619a      	str	r2, [r3, #24]
      break;
 801c140:	e048      	b.n	801c1d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	68ba      	ldr	r2, [r7, #8]
 801c148:	0011      	movs	r1, r2
 801c14a:	0018      	movs	r0, r3
 801c14c:	f000 f92c 	bl	801c3a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	69da      	ldr	r2, [r3, #28]
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	2108      	movs	r1, #8
 801c15c:	430a      	orrs	r2, r1
 801c15e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	69da      	ldr	r2, [r3, #28]
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	2104      	movs	r1, #4
 801c16c:	438a      	bics	r2, r1
 801c16e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	69d9      	ldr	r1, [r3, #28]
 801c176:	68bb      	ldr	r3, [r7, #8]
 801c178:	68da      	ldr	r2, [r3, #12]
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	430a      	orrs	r2, r1
 801c180:	61da      	str	r2, [r3, #28]
      break;
 801c182:	e027      	b.n	801c1d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	68ba      	ldr	r2, [r7, #8]
 801c18a:	0011      	movs	r1, r2
 801c18c:	0018      	movs	r0, r3
 801c18e:	f000 f94b 	bl	801c428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	69da      	ldr	r2, [r3, #28]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	2180      	movs	r1, #128	@ 0x80
 801c19e:	0109      	lsls	r1, r1, #4
 801c1a0:	430a      	orrs	r2, r1
 801c1a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	69da      	ldr	r2, [r3, #28]
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	490f      	ldr	r1, [pc, #60]	@ (801c1ec <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c1b0:	400a      	ands	r2, r1
 801c1b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	69d9      	ldr	r1, [r3, #28]
 801c1ba:	68bb      	ldr	r3, [r7, #8]
 801c1bc:	68db      	ldr	r3, [r3, #12]
 801c1be:	021a      	lsls	r2, r3, #8
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	430a      	orrs	r2, r1
 801c1c6:	61da      	str	r2, [r3, #28]
      break;
 801c1c8:	e004      	b.n	801c1d4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801c1ca:	2317      	movs	r3, #23
 801c1cc:	18fb      	adds	r3, r7, r3
 801c1ce:	2201      	movs	r2, #1
 801c1d0:	701a      	strb	r2, [r3, #0]
      break;
 801c1d2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	2238      	movs	r2, #56	@ 0x38
 801c1d8:	2100      	movs	r1, #0
 801c1da:	5499      	strb	r1, [r3, r2]

  return status;
 801c1dc:	2317      	movs	r3, #23
 801c1de:	18fb      	adds	r3, r7, r3
 801c1e0:	781b      	ldrb	r3, [r3, #0]
}
 801c1e2:	0018      	movs	r0, r3
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	b006      	add	sp, #24
 801c1e8:	bd80      	pop	{r7, pc}
 801c1ea:	46c0      	nop			@ (mov r8, r8)
 801c1ec:	fffffbff 	.word	0xfffffbff

0801c1f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b084      	sub	sp, #16
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
 801c1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c200:	687a      	ldr	r2, [r7, #4]
 801c202:	2380      	movs	r3, #128	@ 0x80
 801c204:	05db      	lsls	r3, r3, #23
 801c206:	429a      	cmp	r2, r3
 801c208:	d00b      	beq.n	801c222 <TIM_Base_SetConfig+0x32>
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	4a23      	ldr	r2, [pc, #140]	@ (801c29c <TIM_Base_SetConfig+0xac>)
 801c20e:	4293      	cmp	r3, r2
 801c210:	d007      	beq.n	801c222 <TIM_Base_SetConfig+0x32>
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	4a22      	ldr	r2, [pc, #136]	@ (801c2a0 <TIM_Base_SetConfig+0xb0>)
 801c216:	4293      	cmp	r3, r2
 801c218:	d003      	beq.n	801c222 <TIM_Base_SetConfig+0x32>
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	4a21      	ldr	r2, [pc, #132]	@ (801c2a4 <TIM_Base_SetConfig+0xb4>)
 801c21e:	4293      	cmp	r3, r2
 801c220:	d108      	bne.n	801c234 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	2270      	movs	r2, #112	@ 0x70
 801c226:	4393      	bics	r3, r2
 801c228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	685b      	ldr	r3, [r3, #4]
 801c22e:	68fa      	ldr	r2, [r7, #12]
 801c230:	4313      	orrs	r3, r2
 801c232:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c234:	687a      	ldr	r2, [r7, #4]
 801c236:	2380      	movs	r3, #128	@ 0x80
 801c238:	05db      	lsls	r3, r3, #23
 801c23a:	429a      	cmp	r2, r3
 801c23c:	d00b      	beq.n	801c256 <TIM_Base_SetConfig+0x66>
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	4a16      	ldr	r2, [pc, #88]	@ (801c29c <TIM_Base_SetConfig+0xac>)
 801c242:	4293      	cmp	r3, r2
 801c244:	d007      	beq.n	801c256 <TIM_Base_SetConfig+0x66>
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	4a15      	ldr	r2, [pc, #84]	@ (801c2a0 <TIM_Base_SetConfig+0xb0>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d003      	beq.n	801c256 <TIM_Base_SetConfig+0x66>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	4a14      	ldr	r2, [pc, #80]	@ (801c2a4 <TIM_Base_SetConfig+0xb4>)
 801c252:	4293      	cmp	r3, r2
 801c254:	d108      	bne.n	801c268 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	4a13      	ldr	r2, [pc, #76]	@ (801c2a8 <TIM_Base_SetConfig+0xb8>)
 801c25a:	4013      	ands	r3, r2
 801c25c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	68db      	ldr	r3, [r3, #12]
 801c262:	68fa      	ldr	r2, [r7, #12]
 801c264:	4313      	orrs	r3, r2
 801c266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	2280      	movs	r2, #128	@ 0x80
 801c26c:	4393      	bics	r3, r2
 801c26e:	001a      	movs	r2, r3
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	691b      	ldr	r3, [r3, #16]
 801c274:	4313      	orrs	r3, r2
 801c276:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	68fa      	ldr	r2, [r7, #12]
 801c27c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	689a      	ldr	r2, [r3, #8]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c286:	683b      	ldr	r3, [r7, #0]
 801c288:	681a      	ldr	r2, [r3, #0]
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2201      	movs	r2, #1
 801c292:	615a      	str	r2, [r3, #20]
}
 801c294:	46c0      	nop			@ (mov r8, r8)
 801c296:	46bd      	mov	sp, r7
 801c298:	b004      	add	sp, #16
 801c29a:	bd80      	pop	{r7, pc}
 801c29c:	40000400 	.word	0x40000400
 801c2a0:	40010800 	.word	0x40010800
 801c2a4:	40011400 	.word	0x40011400
 801c2a8:	fffffcff 	.word	0xfffffcff

0801c2ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b086      	sub	sp, #24
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	6078      	str	r0, [r7, #4]
 801c2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	6a1b      	ldr	r3, [r3, #32]
 801c2ba:	2201      	movs	r2, #1
 801c2bc:	4393      	bics	r3, r2
 801c2be:	001a      	movs	r2, r3
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	6a1b      	ldr	r3, [r3, #32]
 801c2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	699b      	ldr	r3, [r3, #24]
 801c2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	2270      	movs	r2, #112	@ 0x70
 801c2da:	4393      	bics	r3, r2
 801c2dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	2203      	movs	r2, #3
 801c2e2:	4393      	bics	r3, r2
 801c2e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	68fa      	ldr	r2, [r7, #12]
 801c2ec:	4313      	orrs	r3, r2
 801c2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c2f0:	697b      	ldr	r3, [r7, #20]
 801c2f2:	2202      	movs	r2, #2
 801c2f4:	4393      	bics	r3, r2
 801c2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c2f8:	683b      	ldr	r3, [r7, #0]
 801c2fa:	689b      	ldr	r3, [r3, #8]
 801c2fc:	697a      	ldr	r2, [r7, #20]
 801c2fe:	4313      	orrs	r3, r2
 801c300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	693a      	ldr	r2, [r7, #16]
 801c306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	68fa      	ldr	r2, [r7, #12]
 801c30c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c30e:	683b      	ldr	r3, [r7, #0]
 801c310:	685a      	ldr	r2, [r3, #4]
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	697a      	ldr	r2, [r7, #20]
 801c31a:	621a      	str	r2, [r3, #32]
}
 801c31c:	46c0      	nop			@ (mov r8, r8)
 801c31e:	46bd      	mov	sp, r7
 801c320:	b006      	add	sp, #24
 801c322:	bd80      	pop	{r7, pc}

0801c324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b086      	sub	sp, #24
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
 801c32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	6a1b      	ldr	r3, [r3, #32]
 801c332:	2210      	movs	r2, #16
 801c334:	4393      	bics	r3, r2
 801c336:	001a      	movs	r2, r3
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	6a1b      	ldr	r3, [r3, #32]
 801c340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	685b      	ldr	r3, [r3, #4]
 801c346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	699b      	ldr	r3, [r3, #24]
 801c34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	4a13      	ldr	r2, [pc, #76]	@ (801c3a0 <TIM_OC2_SetConfig+0x7c>)
 801c352:	4013      	ands	r3, r2
 801c354:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	4a12      	ldr	r2, [pc, #72]	@ (801c3a4 <TIM_OC2_SetConfig+0x80>)
 801c35a:	4013      	ands	r3, r2
 801c35c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	021b      	lsls	r3, r3, #8
 801c364:	68fa      	ldr	r2, [r7, #12]
 801c366:	4313      	orrs	r3, r2
 801c368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c36a:	697b      	ldr	r3, [r7, #20]
 801c36c:	2220      	movs	r2, #32
 801c36e:	4393      	bics	r3, r2
 801c370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	689b      	ldr	r3, [r3, #8]
 801c376:	011b      	lsls	r3, r3, #4
 801c378:	697a      	ldr	r2, [r7, #20]
 801c37a:	4313      	orrs	r3, r2
 801c37c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	693a      	ldr	r2, [r7, #16]
 801c382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	68fa      	ldr	r2, [r7, #12]
 801c388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c38a:	683b      	ldr	r3, [r7, #0]
 801c38c:	685a      	ldr	r2, [r3, #4]
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	697a      	ldr	r2, [r7, #20]
 801c396:	621a      	str	r2, [r3, #32]
}
 801c398:	46c0      	nop			@ (mov r8, r8)
 801c39a:	46bd      	mov	sp, r7
 801c39c:	b006      	add	sp, #24
 801c39e:	bd80      	pop	{r7, pc}
 801c3a0:	ffff8fff 	.word	0xffff8fff
 801c3a4:	fffffcff 	.word	0xfffffcff

0801c3a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b086      	sub	sp, #24
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	6078      	str	r0, [r7, #4]
 801c3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	6a1b      	ldr	r3, [r3, #32]
 801c3b6:	4a1a      	ldr	r2, [pc, #104]	@ (801c420 <TIM_OC3_SetConfig+0x78>)
 801c3b8:	401a      	ands	r2, r3
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	6a1b      	ldr	r3, [r3, #32]
 801c3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	685b      	ldr	r3, [r3, #4]
 801c3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	69db      	ldr	r3, [r3, #28]
 801c3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2270      	movs	r2, #112	@ 0x70
 801c3d4:	4393      	bics	r3, r2
 801c3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2203      	movs	r2, #3
 801c3dc:	4393      	bics	r3, r2
 801c3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c3e0:	683b      	ldr	r3, [r7, #0]
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	68fa      	ldr	r2, [r7, #12]
 801c3e6:	4313      	orrs	r3, r2
 801c3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	4a0d      	ldr	r2, [pc, #52]	@ (801c424 <TIM_OC3_SetConfig+0x7c>)
 801c3ee:	4013      	ands	r3, r2
 801c3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c3f2:	683b      	ldr	r3, [r7, #0]
 801c3f4:	689b      	ldr	r3, [r3, #8]
 801c3f6:	021b      	lsls	r3, r3, #8
 801c3f8:	697a      	ldr	r2, [r7, #20]
 801c3fa:	4313      	orrs	r3, r2
 801c3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	693a      	ldr	r2, [r7, #16]
 801c402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	68fa      	ldr	r2, [r7, #12]
 801c408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	685a      	ldr	r2, [r3, #4]
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	697a      	ldr	r2, [r7, #20]
 801c416:	621a      	str	r2, [r3, #32]
}
 801c418:	46c0      	nop			@ (mov r8, r8)
 801c41a:	46bd      	mov	sp, r7
 801c41c:	b006      	add	sp, #24
 801c41e:	bd80      	pop	{r7, pc}
 801c420:	fffffeff 	.word	0xfffffeff
 801c424:	fffffdff 	.word	0xfffffdff

0801c428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b086      	sub	sp, #24
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	6078      	str	r0, [r7, #4]
 801c430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6a1b      	ldr	r3, [r3, #32]
 801c436:	4a1b      	ldr	r2, [pc, #108]	@ (801c4a4 <TIM_OC4_SetConfig+0x7c>)
 801c438:	401a      	ands	r2, r3
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	6a1b      	ldr	r3, [r3, #32]
 801c442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	685b      	ldr	r3, [r3, #4]
 801c448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	69db      	ldr	r3, [r3, #28]
 801c44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	4a15      	ldr	r2, [pc, #84]	@ (801c4a8 <TIM_OC4_SetConfig+0x80>)
 801c454:	4013      	ands	r3, r2
 801c456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	4a14      	ldr	r2, [pc, #80]	@ (801c4ac <TIM_OC4_SetConfig+0x84>)
 801c45c:	4013      	ands	r3, r2
 801c45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	021b      	lsls	r3, r3, #8
 801c466:	68fa      	ldr	r2, [r7, #12]
 801c468:	4313      	orrs	r3, r2
 801c46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c46c:	697b      	ldr	r3, [r7, #20]
 801c46e:	4a10      	ldr	r2, [pc, #64]	@ (801c4b0 <TIM_OC4_SetConfig+0x88>)
 801c470:	4013      	ands	r3, r2
 801c472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	689b      	ldr	r3, [r3, #8]
 801c478:	031b      	lsls	r3, r3, #12
 801c47a:	697a      	ldr	r2, [r7, #20]
 801c47c:	4313      	orrs	r3, r2
 801c47e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	693a      	ldr	r2, [r7, #16]
 801c484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	68fa      	ldr	r2, [r7, #12]
 801c48a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	685a      	ldr	r2, [r3, #4]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	697a      	ldr	r2, [r7, #20]
 801c498:	621a      	str	r2, [r3, #32]
}
 801c49a:	46c0      	nop			@ (mov r8, r8)
 801c49c:	46bd      	mov	sp, r7
 801c49e:	b006      	add	sp, #24
 801c4a0:	bd80      	pop	{r7, pc}
 801c4a2:	46c0      	nop			@ (mov r8, r8)
 801c4a4:	ffffefff 	.word	0xffffefff
 801c4a8:	ffff8fff 	.word	0xffff8fff
 801c4ac:	fffffcff 	.word	0xfffffcff
 801c4b0:	ffffdfff 	.word	0xffffdfff

0801c4b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b086      	sub	sp, #24
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	60f8      	str	r0, [r7, #12]
 801c4bc:	60b9      	str	r1, [r7, #8]
 801c4be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c4c0:	68bb      	ldr	r3, [r7, #8]
 801c4c2:	221f      	movs	r2, #31
 801c4c4:	4013      	ands	r3, r2
 801c4c6:	2201      	movs	r2, #1
 801c4c8:	409a      	lsls	r2, r3
 801c4ca:	0013      	movs	r3, r2
 801c4cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	6a1b      	ldr	r3, [r3, #32]
 801c4d2:	697a      	ldr	r2, [r7, #20]
 801c4d4:	43d2      	mvns	r2, r2
 801c4d6:	401a      	ands	r2, r3
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	6a1a      	ldr	r2, [r3, #32]
 801c4e0:	68bb      	ldr	r3, [r7, #8]
 801c4e2:	211f      	movs	r1, #31
 801c4e4:	400b      	ands	r3, r1
 801c4e6:	6879      	ldr	r1, [r7, #4]
 801c4e8:	4099      	lsls	r1, r3
 801c4ea:	000b      	movs	r3, r1
 801c4ec:	431a      	orrs	r2, r3
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	621a      	str	r2, [r3, #32]
}
 801c4f2:	46c0      	nop			@ (mov r8, r8)
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	b006      	add	sp, #24
 801c4f8:	bd80      	pop	{r7, pc}
	...

0801c4fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b084      	sub	sp, #16
 801c500:	af00      	add	r7, sp, #0
 801c502:	6078      	str	r0, [r7, #4]
 801c504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	2238      	movs	r2, #56	@ 0x38
 801c50a:	5c9b      	ldrb	r3, [r3, r2]
 801c50c:	2b01      	cmp	r3, #1
 801c50e:	d101      	bne.n	801c514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c510:	2302      	movs	r3, #2
 801c512:	e047      	b.n	801c5a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2238      	movs	r2, #56	@ 0x38
 801c518:	2101      	movs	r1, #1
 801c51a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	2239      	movs	r2, #57	@ 0x39
 801c520:	2102      	movs	r1, #2
 801c522:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	685b      	ldr	r3, [r3, #4]
 801c52a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	689b      	ldr	r3, [r3, #8]
 801c532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	2270      	movs	r2, #112	@ 0x70
 801c538:	4393      	bics	r3, r2
 801c53a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c53c:	683b      	ldr	r3, [r7, #0]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	68fa      	ldr	r2, [r7, #12]
 801c542:	4313      	orrs	r3, r2
 801c544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	68fa      	ldr	r2, [r7, #12]
 801c54c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681a      	ldr	r2, [r3, #0]
 801c552:	2380      	movs	r3, #128	@ 0x80
 801c554:	05db      	lsls	r3, r3, #23
 801c556:	429a      	cmp	r2, r3
 801c558:	d00e      	beq.n	801c578 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	4a13      	ldr	r2, [pc, #76]	@ (801c5ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801c560:	4293      	cmp	r3, r2
 801c562:	d009      	beq.n	801c578 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	4a11      	ldr	r2, [pc, #68]	@ (801c5b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801c56a:	4293      	cmp	r3, r2
 801c56c:	d004      	beq.n	801c578 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	4a10      	ldr	r2, [pc, #64]	@ (801c5b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801c574:	4293      	cmp	r3, r2
 801c576:	d10c      	bne.n	801c592 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c578:	68bb      	ldr	r3, [r7, #8]
 801c57a:	2280      	movs	r2, #128	@ 0x80
 801c57c:	4393      	bics	r3, r2
 801c57e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c580:	683b      	ldr	r3, [r7, #0]
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	68ba      	ldr	r2, [r7, #8]
 801c586:	4313      	orrs	r3, r2
 801c588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	68ba      	ldr	r2, [r7, #8]
 801c590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	2239      	movs	r2, #57	@ 0x39
 801c596:	2101      	movs	r1, #1
 801c598:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	2238      	movs	r2, #56	@ 0x38
 801c59e:	2100      	movs	r1, #0
 801c5a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c5a2:	2300      	movs	r3, #0
}
 801c5a4:	0018      	movs	r0, r3
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	b004      	add	sp, #16
 801c5aa:	bd80      	pop	{r7, pc}
 801c5ac:	40000400 	.word	0x40000400
 801c5b0:	40010800 	.word	0x40010800
 801c5b4:	40011400 	.word	0x40011400

0801c5b8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801c5b8:	b580      	push	{r7, lr}
 801c5ba:	b082      	sub	sp, #8
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	6078      	str	r0, [r7, #4]
 801c5c0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2238      	movs	r2, #56	@ 0x38
 801c5c6:	5c9b      	ldrb	r3, [r3, r2]
 801c5c8:	2b01      	cmp	r3, #1
 801c5ca:	d101      	bne.n	801c5d0 <HAL_TIMEx_RemapConfig+0x18>
 801c5cc:	2302      	movs	r3, #2
 801c5ce:	e00c      	b.n	801c5ea <HAL_TIMEx_RemapConfig+0x32>
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	2238      	movs	r2, #56	@ 0x38
 801c5d4:	2101      	movs	r1, #1
 801c5d6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	683a      	ldr	r2, [r7, #0]
 801c5de:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	2238      	movs	r2, #56	@ 0x38
 801c5e4:	2100      	movs	r1, #0
 801c5e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c5e8:	2300      	movs	r3, #0
}
 801c5ea:	0018      	movs	r0, r3
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	b002      	add	sp, #8
 801c5f0:	bd80      	pop	{r7, pc}
	...

0801c5f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b082      	sub	sp, #8
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d101      	bne.n	801c606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c602:	2301      	movs	r3, #1
 801c604:	e053      	b.n	801c6ae <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d116      	bne.n	801c63c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	2278      	movs	r2, #120	@ 0x78
 801c612:	2100      	movs	r1, #0
 801c614:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	0018      	movs	r0, r3
 801c61a:	f000 fd65 	bl	801d0e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	22b0      	movs	r2, #176	@ 0xb0
 801c622:	589b      	ldr	r3, [r3, r2]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d103      	bne.n	801c630 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	21b0      	movs	r1, #176	@ 0xb0
 801c62c:	4a22      	ldr	r2, [pc, #136]	@ (801c6b8 <HAL_UART_Init+0xc4>)
 801c62e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	22b0      	movs	r2, #176	@ 0xb0
 801c634:	589b      	ldr	r3, [r3, r2]
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	0010      	movs	r0, r2
 801c63a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	2224      	movs	r2, #36	@ 0x24
 801c640:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	681a      	ldr	r2, [r3, #0]
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	2101      	movs	r1, #1
 801c64e:	438a      	bics	r2, r1
 801c650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	0018      	movs	r0, r3
 801c656:	f000 fd8b 	bl	801d170 <UART_SetConfig>
 801c65a:	0003      	movs	r3, r0
 801c65c:	2b01      	cmp	r3, #1
 801c65e:	d101      	bne.n	801c664 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801c660:	2301      	movs	r3, #1
 801c662:	e024      	b.n	801c6ae <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d003      	beq.n	801c674 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	0018      	movs	r0, r3
 801c670:	f001 f81c 	bl	801d6ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	685a      	ldr	r2, [r3, #4]
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	490f      	ldr	r1, [pc, #60]	@ (801c6bc <HAL_UART_Init+0xc8>)
 801c680:	400a      	ands	r2, r1
 801c682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	689a      	ldr	r2, [r3, #8]
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	212a      	movs	r1, #42	@ 0x2a
 801c690:	438a      	bics	r2, r1
 801c692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	681a      	ldr	r2, [r3, #0]
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	2101      	movs	r1, #1
 801c6a0:	430a      	orrs	r2, r1
 801c6a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	f001 f8b4 	bl	801d814 <UART_CheckIdleState>
 801c6ac:	0003      	movs	r3, r0
}
 801c6ae:	0018      	movs	r0, r3
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	b002      	add	sp, #8
 801c6b4:	bd80      	pop	{r7, pc}
 801c6b6:	46c0      	nop			@ (mov r8, r8)
 801c6b8:	08012e79 	.word	0x08012e79
 801c6bc:	ffffb7ff 	.word	0xffffb7ff

0801c6c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b08a      	sub	sp, #40	@ 0x28
 801c6c4:	af02      	add	r7, sp, #8
 801c6c6:	60f8      	str	r0, [r7, #12]
 801c6c8:	60b9      	str	r1, [r7, #8]
 801c6ca:	603b      	str	r3, [r7, #0]
 801c6cc:	1dbb      	adds	r3, r7, #6
 801c6ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c6d4:	2b20      	cmp	r3, #32
 801c6d6:	d000      	beq.n	801c6da <HAL_UART_Transmit+0x1a>
 801c6d8:	e08c      	b.n	801c7f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801c6da:	68bb      	ldr	r3, [r7, #8]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d003      	beq.n	801c6e8 <HAL_UART_Transmit+0x28>
 801c6e0:	1dbb      	adds	r3, r7, #6
 801c6e2:	881b      	ldrh	r3, [r3, #0]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d101      	bne.n	801c6ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801c6e8:	2301      	movs	r3, #1
 801c6ea:	e084      	b.n	801c7f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	689a      	ldr	r2, [r3, #8]
 801c6f0:	2380      	movs	r3, #128	@ 0x80
 801c6f2:	015b      	lsls	r3, r3, #5
 801c6f4:	429a      	cmp	r2, r3
 801c6f6:	d109      	bne.n	801c70c <HAL_UART_Transmit+0x4c>
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	691b      	ldr	r3, [r3, #16]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d105      	bne.n	801c70c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c700:	68bb      	ldr	r3, [r7, #8]
 801c702:	2201      	movs	r2, #1
 801c704:	4013      	ands	r3, r2
 801c706:	d001      	beq.n	801c70c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801c708:	2301      	movs	r3, #1
 801c70a:	e074      	b.n	801c7f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	2284      	movs	r2, #132	@ 0x84
 801c710:	2100      	movs	r1, #0
 801c712:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	2221      	movs	r2, #33	@ 0x21
 801c718:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c71a:	f7f7 fa7b 	bl	8013c14 <HAL_GetTick>
 801c71e:	0003      	movs	r3, r0
 801c720:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	1dba      	adds	r2, r7, #6
 801c726:	2150      	movs	r1, #80	@ 0x50
 801c728:	8812      	ldrh	r2, [r2, #0]
 801c72a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	1dba      	adds	r2, r7, #6
 801c730:	2152      	movs	r1, #82	@ 0x52
 801c732:	8812      	ldrh	r2, [r2, #0]
 801c734:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	689a      	ldr	r2, [r3, #8]
 801c73a:	2380      	movs	r3, #128	@ 0x80
 801c73c:	015b      	lsls	r3, r3, #5
 801c73e:	429a      	cmp	r2, r3
 801c740:	d108      	bne.n	801c754 <HAL_UART_Transmit+0x94>
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	691b      	ldr	r3, [r3, #16]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d104      	bne.n	801c754 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801c74a:	2300      	movs	r3, #0
 801c74c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	61bb      	str	r3, [r7, #24]
 801c752:	e003      	b.n	801c75c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801c754:	68bb      	ldr	r3, [r7, #8]
 801c756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c758:	2300      	movs	r3, #0
 801c75a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c75c:	e02f      	b.n	801c7be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c75e:	697a      	ldr	r2, [r7, #20]
 801c760:	68f8      	ldr	r0, [r7, #12]
 801c762:	683b      	ldr	r3, [r7, #0]
 801c764:	9300      	str	r3, [sp, #0]
 801c766:	0013      	movs	r3, r2
 801c768:	2200      	movs	r2, #0
 801c76a:	2180      	movs	r1, #128	@ 0x80
 801c76c:	f001 f8fa 	bl	801d964 <UART_WaitOnFlagUntilTimeout>
 801c770:	1e03      	subs	r3, r0, #0
 801c772:	d004      	beq.n	801c77e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	2220      	movs	r2, #32
 801c778:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801c77a:	2303      	movs	r3, #3
 801c77c:	e03b      	b.n	801c7f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801c77e:	69fb      	ldr	r3, [r7, #28]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d10b      	bne.n	801c79c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c784:	69bb      	ldr	r3, [r7, #24]
 801c786:	881b      	ldrh	r3, [r3, #0]
 801c788:	001a      	movs	r2, r3
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	05d2      	lsls	r2, r2, #23
 801c790:	0dd2      	lsrs	r2, r2, #23
 801c792:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801c794:	69bb      	ldr	r3, [r7, #24]
 801c796:	3302      	adds	r3, #2
 801c798:	61bb      	str	r3, [r7, #24]
 801c79a:	e007      	b.n	801c7ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	781a      	ldrb	r2, [r3, #0]
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801c7a6:	69fb      	ldr	r3, [r7, #28]
 801c7a8:	3301      	adds	r3, #1
 801c7aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	2252      	movs	r2, #82	@ 0x52
 801c7b0:	5a9b      	ldrh	r3, [r3, r2]
 801c7b2:	b29b      	uxth	r3, r3
 801c7b4:	3b01      	subs	r3, #1
 801c7b6:	b299      	uxth	r1, r3
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	2252      	movs	r2, #82	@ 0x52
 801c7bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	2252      	movs	r2, #82	@ 0x52
 801c7c2:	5a9b      	ldrh	r3, [r3, r2]
 801c7c4:	b29b      	uxth	r3, r3
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d1c9      	bne.n	801c75e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c7ca:	697a      	ldr	r2, [r7, #20]
 801c7cc:	68f8      	ldr	r0, [r7, #12]
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	9300      	str	r3, [sp, #0]
 801c7d2:	0013      	movs	r3, r2
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	2140      	movs	r1, #64	@ 0x40
 801c7d8:	f001 f8c4 	bl	801d964 <UART_WaitOnFlagUntilTimeout>
 801c7dc:	1e03      	subs	r3, r0, #0
 801c7de:	d004      	beq.n	801c7ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2220      	movs	r2, #32
 801c7e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801c7e6:	2303      	movs	r3, #3
 801c7e8:	e005      	b.n	801c7f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	2220      	movs	r2, #32
 801c7ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	e000      	b.n	801c7f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801c7f4:	2302      	movs	r3, #2
  }
}
 801c7f6:	0018      	movs	r0, r3
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	b008      	add	sp, #32
 801c7fc:	bd80      	pop	{r7, pc}
	...

0801c800 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b088      	sub	sp, #32
 801c804:	af00      	add	r7, sp, #0
 801c806:	60f8      	str	r0, [r7, #12]
 801c808:	60b9      	str	r1, [r7, #8]
 801c80a:	1dbb      	adds	r3, r7, #6
 801c80c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	2280      	movs	r2, #128	@ 0x80
 801c812:	589b      	ldr	r3, [r3, r2]
 801c814:	2b20      	cmp	r3, #32
 801c816:	d14a      	bne.n	801c8ae <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c818:	68bb      	ldr	r3, [r7, #8]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d003      	beq.n	801c826 <HAL_UART_Receive_IT+0x26>
 801c81e:	1dbb      	adds	r3, r7, #6
 801c820:	881b      	ldrh	r3, [r3, #0]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d101      	bne.n	801c82a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c826:	2301      	movs	r3, #1
 801c828:	e042      	b.n	801c8b0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	689a      	ldr	r2, [r3, #8]
 801c82e:	2380      	movs	r3, #128	@ 0x80
 801c830:	015b      	lsls	r3, r3, #5
 801c832:	429a      	cmp	r2, r3
 801c834:	d109      	bne.n	801c84a <HAL_UART_Receive_IT+0x4a>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	691b      	ldr	r3, [r3, #16]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d105      	bne.n	801c84a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	2201      	movs	r2, #1
 801c842:	4013      	ands	r3, r2
 801c844:	d001      	beq.n	801c84a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c846:	2301      	movs	r3, #1
 801c848:	e032      	b.n	801c8b0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2200      	movs	r2, #0
 801c84e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	4a18      	ldr	r2, [pc, #96]	@ (801c8b8 <HAL_UART_Receive_IT+0xb8>)
 801c856:	4293      	cmp	r3, r2
 801c858:	d020      	beq.n	801c89c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	685a      	ldr	r2, [r3, #4]
 801c860:	2380      	movs	r3, #128	@ 0x80
 801c862:	041b      	lsls	r3, r3, #16
 801c864:	4013      	ands	r3, r2
 801c866:	d019      	beq.n	801c89c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c868:	f3ef 8310 	mrs	r3, PRIMASK
 801c86c:	613b      	str	r3, [r7, #16]
  return(result);
 801c86e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c870:	61fb      	str	r3, [r7, #28]
 801c872:	2301      	movs	r3, #1
 801c874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	f383 8810 	msr	PRIMASK, r3
}
 801c87c:	46c0      	nop			@ (mov r8, r8)
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	681a      	ldr	r2, [r3, #0]
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	2180      	movs	r1, #128	@ 0x80
 801c88a:	04c9      	lsls	r1, r1, #19
 801c88c:	430a      	orrs	r2, r1
 801c88e:	601a      	str	r2, [r3, #0]
 801c890:	69fb      	ldr	r3, [r7, #28]
 801c892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c894:	69bb      	ldr	r3, [r7, #24]
 801c896:	f383 8810 	msr	PRIMASK, r3
}
 801c89a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c89c:	1dbb      	adds	r3, r7, #6
 801c89e:	881a      	ldrh	r2, [r3, #0]
 801c8a0:	68b9      	ldr	r1, [r7, #8]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	0018      	movs	r0, r3
 801c8a6:	f001 f8c7 	bl	801da38 <UART_Start_Receive_IT>
 801c8aa:	0003      	movs	r3, r0
 801c8ac:	e000      	b.n	801c8b0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c8ae:	2302      	movs	r3, #2
  }
}
 801c8b0:	0018      	movs	r0, r3
 801c8b2:	46bd      	mov	sp, r7
 801c8b4:	b008      	add	sp, #32
 801c8b6:	bd80      	pop	{r7, pc}
 801c8b8:	40004800 	.word	0x40004800

0801c8bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b088      	sub	sp, #32
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	60f8      	str	r0, [r7, #12]
 801c8c4:	60b9      	str	r1, [r7, #8]
 801c8c6:	1dbb      	adds	r3, r7, #6
 801c8c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c8ce:	2b20      	cmp	r3, #32
 801c8d0:	d000      	beq.n	801c8d4 <HAL_UART_Transmit_DMA+0x18>
 801c8d2:	e077      	b.n	801c9c4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801c8d4:	68bb      	ldr	r3, [r7, #8]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d003      	beq.n	801c8e2 <HAL_UART_Transmit_DMA+0x26>
 801c8da:	1dbb      	adds	r3, r7, #6
 801c8dc:	881b      	ldrh	r3, [r3, #0]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d101      	bne.n	801c8e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801c8e2:	2301      	movs	r3, #1
 801c8e4:	e06f      	b.n	801c9c6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	689a      	ldr	r2, [r3, #8]
 801c8ea:	2380      	movs	r3, #128	@ 0x80
 801c8ec:	015b      	lsls	r3, r3, #5
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d109      	bne.n	801c906 <HAL_UART_Transmit_DMA+0x4a>
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	691b      	ldr	r3, [r3, #16]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d105      	bne.n	801c906 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c8fa:	68bb      	ldr	r3, [r7, #8]
 801c8fc:	2201      	movs	r2, #1
 801c8fe:	4013      	ands	r3, r2
 801c900:	d001      	beq.n	801c906 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c902:	2301      	movs	r3, #1
 801c904:	e05f      	b.n	801c9c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	68ba      	ldr	r2, [r7, #8]
 801c90a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	1dba      	adds	r2, r7, #6
 801c910:	2150      	movs	r1, #80	@ 0x50
 801c912:	8812      	ldrh	r2, [r2, #0]
 801c914:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	1dba      	adds	r2, r7, #6
 801c91a:	2152      	movs	r1, #82	@ 0x52
 801c91c:	8812      	ldrh	r2, [r2, #0]
 801c91e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	2284      	movs	r2, #132	@ 0x84
 801c924:	2100      	movs	r1, #0
 801c926:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	2221      	movs	r2, #33	@ 0x21
 801c92c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c932:	2b00      	cmp	r3, #0
 801c934:	d027      	beq.n	801c986 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c93a:	4a25      	ldr	r2, [pc, #148]	@ (801c9d0 <HAL_UART_Transmit_DMA+0x114>)
 801c93c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c942:	4a24      	ldr	r2, [pc, #144]	@ (801c9d4 <HAL_UART_Transmit_DMA+0x118>)
 801c944:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c94a:	4a23      	ldr	r2, [pc, #140]	@ (801c9d8 <HAL_UART_Transmit_DMA+0x11c>)
 801c94c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c952:	2200      	movs	r2, #0
 801c954:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c95e:	0019      	movs	r1, r3
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	3328      	adds	r3, #40	@ 0x28
 801c966:	001a      	movs	r2, r3
 801c968:	1dbb      	adds	r3, r7, #6
 801c96a:	881b      	ldrh	r3, [r3, #0]
 801c96c:	f7f7 fea4 	bl	80146b8 <HAL_DMA_Start_IT>
 801c970:	1e03      	subs	r3, r0, #0
 801c972:	d008      	beq.n	801c986 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	2284      	movs	r2, #132	@ 0x84
 801c978:	2110      	movs	r1, #16
 801c97a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	2220      	movs	r2, #32
 801c980:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801c982:	2301      	movs	r3, #1
 801c984:	e01f      	b.n	801c9c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	2240      	movs	r2, #64	@ 0x40
 801c98c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c98e:	f3ef 8310 	mrs	r3, PRIMASK
 801c992:	613b      	str	r3, [r7, #16]
  return(result);
 801c994:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c996:	61fb      	str	r3, [r7, #28]
 801c998:	2301      	movs	r3, #1
 801c99a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	f383 8810 	msr	PRIMASK, r3
}
 801c9a2:	46c0      	nop			@ (mov r8, r8)
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	689a      	ldr	r2, [r3, #8]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	2180      	movs	r1, #128	@ 0x80
 801c9b0:	430a      	orrs	r2, r1
 801c9b2:	609a      	str	r2, [r3, #8]
 801c9b4:	69fb      	ldr	r3, [r7, #28]
 801c9b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9b8:	69bb      	ldr	r3, [r7, #24]
 801c9ba:	f383 8810 	msr	PRIMASK, r3
}
 801c9be:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	e000      	b.n	801c9c6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801c9c4:	2302      	movs	r3, #2
  }
}
 801c9c6:	0018      	movs	r0, r3
 801c9c8:	46bd      	mov	sp, r7
 801c9ca:	b008      	add	sp, #32
 801c9cc:	bd80      	pop	{r7, pc}
 801c9ce:	46c0      	nop			@ (mov r8, r8)
 801c9d0:	0801de1d 	.word	0x0801de1d
 801c9d4:	0801deb9 	.word	0x0801deb9
 801c9d8:	0801e059 	.word	0x0801e059

0801c9dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b088      	sub	sp, #32
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	60f8      	str	r0, [r7, #12]
 801c9e4:	60b9      	str	r1, [r7, #8]
 801c9e6:	1dbb      	adds	r3, r7, #6
 801c9e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	2280      	movs	r2, #128	@ 0x80
 801c9ee:	589b      	ldr	r3, [r3, r2]
 801c9f0:	2b20      	cmp	r3, #32
 801c9f2:	d14a      	bne.n	801ca8a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c9f4:	68bb      	ldr	r3, [r7, #8]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d003      	beq.n	801ca02 <HAL_UART_Receive_DMA+0x26>
 801c9fa:	1dbb      	adds	r3, r7, #6
 801c9fc:	881b      	ldrh	r3, [r3, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d101      	bne.n	801ca06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801ca02:	2301      	movs	r3, #1
 801ca04:	e042      	b.n	801ca8c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	689a      	ldr	r2, [r3, #8]
 801ca0a:	2380      	movs	r3, #128	@ 0x80
 801ca0c:	015b      	lsls	r3, r3, #5
 801ca0e:	429a      	cmp	r2, r3
 801ca10:	d109      	bne.n	801ca26 <HAL_UART_Receive_DMA+0x4a>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	691b      	ldr	r3, [r3, #16]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d105      	bne.n	801ca26 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801ca1a:	68bb      	ldr	r3, [r7, #8]
 801ca1c:	2201      	movs	r2, #1
 801ca1e:	4013      	ands	r3, r2
 801ca20:	d001      	beq.n	801ca26 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801ca22:	2301      	movs	r3, #1
 801ca24:	e032      	b.n	801ca8c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	2200      	movs	r2, #0
 801ca2a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	4a18      	ldr	r2, [pc, #96]	@ (801ca94 <HAL_UART_Receive_DMA+0xb8>)
 801ca32:	4293      	cmp	r3, r2
 801ca34:	d020      	beq.n	801ca78 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	685a      	ldr	r2, [r3, #4]
 801ca3c:	2380      	movs	r3, #128	@ 0x80
 801ca3e:	041b      	lsls	r3, r3, #16
 801ca40:	4013      	ands	r3, r2
 801ca42:	d019      	beq.n	801ca78 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca44:	f3ef 8310 	mrs	r3, PRIMASK
 801ca48:	613b      	str	r3, [r7, #16]
  return(result);
 801ca4a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ca4c:	61fb      	str	r3, [r7, #28]
 801ca4e:	2301      	movs	r3, #1
 801ca50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	f383 8810 	msr	PRIMASK, r3
}
 801ca58:	46c0      	nop			@ (mov r8, r8)
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	681a      	ldr	r2, [r3, #0]
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	2180      	movs	r1, #128	@ 0x80
 801ca66:	04c9      	lsls	r1, r1, #19
 801ca68:	430a      	orrs	r2, r1
 801ca6a:	601a      	str	r2, [r3, #0]
 801ca6c:	69fb      	ldr	r3, [r7, #28]
 801ca6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca70:	69bb      	ldr	r3, [r7, #24]
 801ca72:	f383 8810 	msr	PRIMASK, r3
}
 801ca76:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801ca78:	1dbb      	adds	r3, r7, #6
 801ca7a:	881a      	ldrh	r2, [r3, #0]
 801ca7c:	68b9      	ldr	r1, [r7, #8]
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	0018      	movs	r0, r3
 801ca82:	f001 f8a3 	bl	801dbcc <UART_Start_Receive_DMA>
 801ca86:	0003      	movs	r3, r0
 801ca88:	e000      	b.n	801ca8c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ca8a:	2302      	movs	r3, #2
  }
}
 801ca8c:	0018      	movs	r0, r3
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	b008      	add	sp, #32
 801ca92:	bd80      	pop	{r7, pc}
 801ca94:	40004800 	.word	0x40004800

0801ca98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ca98:	b590      	push	{r4, r7, lr}
 801ca9a:	b0ab      	sub	sp, #172	@ 0xac
 801ca9c:	af00      	add	r7, sp, #0
 801ca9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	69db      	ldr	r3, [r3, #28]
 801caa6:	22a4      	movs	r2, #164	@ 0xa4
 801caa8:	18b9      	adds	r1, r7, r2
 801caaa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	20a0      	movs	r0, #160	@ 0xa0
 801cab4:	1839      	adds	r1, r7, r0
 801cab6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	689b      	ldr	r3, [r3, #8]
 801cabe:	219c      	movs	r1, #156	@ 0x9c
 801cac0:	1879      	adds	r1, r7, r1
 801cac2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801cac4:	0011      	movs	r1, r2
 801cac6:	18bb      	adds	r3, r7, r2
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	4a9c      	ldr	r2, [pc, #624]	@ (801cd3c <HAL_UART_IRQHandler+0x2a4>)
 801cacc:	4013      	ands	r3, r2
 801cace:	2298      	movs	r2, #152	@ 0x98
 801cad0:	18bc      	adds	r4, r7, r2
 801cad2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801cad4:	18bb      	adds	r3, r7, r2
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d114      	bne.n	801cb06 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801cadc:	187b      	adds	r3, r7, r1
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	2220      	movs	r2, #32
 801cae2:	4013      	ands	r3, r2
 801cae4:	d00f      	beq.n	801cb06 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cae6:	183b      	adds	r3, r7, r0
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	2220      	movs	r2, #32
 801caec:	4013      	ands	r3, r2
 801caee:	d00a      	beq.n	801cb06 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d100      	bne.n	801cafa <HAL_UART_IRQHandler+0x62>
 801caf8:	e2aa      	b.n	801d050 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cafe:	687a      	ldr	r2, [r7, #4]
 801cb00:	0010      	movs	r0, r2
 801cb02:	4798      	blx	r3
      }
      return;
 801cb04:	e2a4      	b.n	801d050 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801cb06:	2398      	movs	r3, #152	@ 0x98
 801cb08:	18fb      	adds	r3, r7, r3
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d100      	bne.n	801cb12 <HAL_UART_IRQHandler+0x7a>
 801cb10:	e11a      	b.n	801cd48 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801cb12:	239c      	movs	r3, #156	@ 0x9c
 801cb14:	18fb      	adds	r3, r7, r3
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	2201      	movs	r2, #1
 801cb1a:	4013      	ands	r3, r2
 801cb1c:	d106      	bne.n	801cb2c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801cb1e:	23a0      	movs	r3, #160	@ 0xa0
 801cb20:	18fb      	adds	r3, r7, r3
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	4a86      	ldr	r2, [pc, #536]	@ (801cd40 <HAL_UART_IRQHandler+0x2a8>)
 801cb26:	4013      	ands	r3, r2
 801cb28:	d100      	bne.n	801cb2c <HAL_UART_IRQHandler+0x94>
 801cb2a:	e10d      	b.n	801cd48 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801cb2c:	23a4      	movs	r3, #164	@ 0xa4
 801cb2e:	18fb      	adds	r3, r7, r3
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	2201      	movs	r2, #1
 801cb34:	4013      	ands	r3, r2
 801cb36:	d012      	beq.n	801cb5e <HAL_UART_IRQHandler+0xc6>
 801cb38:	23a0      	movs	r3, #160	@ 0xa0
 801cb3a:	18fb      	adds	r3, r7, r3
 801cb3c:	681a      	ldr	r2, [r3, #0]
 801cb3e:	2380      	movs	r3, #128	@ 0x80
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	4013      	ands	r3, r2
 801cb44:	d00b      	beq.n	801cb5e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	2201      	movs	r2, #1
 801cb4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	2284      	movs	r2, #132	@ 0x84
 801cb52:	589b      	ldr	r3, [r3, r2]
 801cb54:	2201      	movs	r2, #1
 801cb56:	431a      	orrs	r2, r3
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2184      	movs	r1, #132	@ 0x84
 801cb5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cb5e:	23a4      	movs	r3, #164	@ 0xa4
 801cb60:	18fb      	adds	r3, r7, r3
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	2202      	movs	r2, #2
 801cb66:	4013      	ands	r3, r2
 801cb68:	d011      	beq.n	801cb8e <HAL_UART_IRQHandler+0xf6>
 801cb6a:	239c      	movs	r3, #156	@ 0x9c
 801cb6c:	18fb      	adds	r3, r7, r3
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	2201      	movs	r2, #1
 801cb72:	4013      	ands	r3, r2
 801cb74:	d00b      	beq.n	801cb8e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2202      	movs	r2, #2
 801cb7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	2284      	movs	r2, #132	@ 0x84
 801cb82:	589b      	ldr	r3, [r3, r2]
 801cb84:	2204      	movs	r2, #4
 801cb86:	431a      	orrs	r2, r3
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2184      	movs	r1, #132	@ 0x84
 801cb8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cb8e:	23a4      	movs	r3, #164	@ 0xa4
 801cb90:	18fb      	adds	r3, r7, r3
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	2204      	movs	r2, #4
 801cb96:	4013      	ands	r3, r2
 801cb98:	d011      	beq.n	801cbbe <HAL_UART_IRQHandler+0x126>
 801cb9a:	239c      	movs	r3, #156	@ 0x9c
 801cb9c:	18fb      	adds	r3, r7, r3
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	2201      	movs	r2, #1
 801cba2:	4013      	ands	r3, r2
 801cba4:	d00b      	beq.n	801cbbe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	2204      	movs	r2, #4
 801cbac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	2284      	movs	r2, #132	@ 0x84
 801cbb2:	589b      	ldr	r3, [r3, r2]
 801cbb4:	2202      	movs	r2, #2
 801cbb6:	431a      	orrs	r2, r3
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	2184      	movs	r1, #132	@ 0x84
 801cbbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801cbbe:	23a4      	movs	r3, #164	@ 0xa4
 801cbc0:	18fb      	adds	r3, r7, r3
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	2208      	movs	r2, #8
 801cbc6:	4013      	ands	r3, r2
 801cbc8:	d017      	beq.n	801cbfa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cbca:	23a0      	movs	r3, #160	@ 0xa0
 801cbcc:	18fb      	adds	r3, r7, r3
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	2220      	movs	r2, #32
 801cbd2:	4013      	ands	r3, r2
 801cbd4:	d105      	bne.n	801cbe2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801cbd6:	239c      	movs	r3, #156	@ 0x9c
 801cbd8:	18fb      	adds	r3, r7, r3
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	2201      	movs	r2, #1
 801cbde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cbe0:	d00b      	beq.n	801cbfa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	2208      	movs	r2, #8
 801cbe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	2284      	movs	r2, #132	@ 0x84
 801cbee:	589b      	ldr	r3, [r3, r2]
 801cbf0:	2208      	movs	r2, #8
 801cbf2:	431a      	orrs	r2, r3
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	2184      	movs	r1, #132	@ 0x84
 801cbf8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cbfa:	23a4      	movs	r3, #164	@ 0xa4
 801cbfc:	18fb      	adds	r3, r7, r3
 801cbfe:	681a      	ldr	r2, [r3, #0]
 801cc00:	2380      	movs	r3, #128	@ 0x80
 801cc02:	011b      	lsls	r3, r3, #4
 801cc04:	4013      	ands	r3, r2
 801cc06:	d013      	beq.n	801cc30 <HAL_UART_IRQHandler+0x198>
 801cc08:	23a0      	movs	r3, #160	@ 0xa0
 801cc0a:	18fb      	adds	r3, r7, r3
 801cc0c:	681a      	ldr	r2, [r3, #0]
 801cc0e:	2380      	movs	r3, #128	@ 0x80
 801cc10:	04db      	lsls	r3, r3, #19
 801cc12:	4013      	ands	r3, r2
 801cc14:	d00c      	beq.n	801cc30 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	2280      	movs	r2, #128	@ 0x80
 801cc1c:	0112      	lsls	r2, r2, #4
 801cc1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	2284      	movs	r2, #132	@ 0x84
 801cc24:	589b      	ldr	r3, [r3, r2]
 801cc26:	2220      	movs	r2, #32
 801cc28:	431a      	orrs	r2, r3
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	2184      	movs	r1, #132	@ 0x84
 801cc2e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	2284      	movs	r2, #132	@ 0x84
 801cc34:	589b      	ldr	r3, [r3, r2]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d100      	bne.n	801cc3c <HAL_UART_IRQHandler+0x1a4>
 801cc3a:	e20b      	b.n	801d054 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cc3c:	23a4      	movs	r3, #164	@ 0xa4
 801cc3e:	18fb      	adds	r3, r7, r3
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	2220      	movs	r2, #32
 801cc44:	4013      	ands	r3, r2
 801cc46:	d00e      	beq.n	801cc66 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cc48:	23a0      	movs	r3, #160	@ 0xa0
 801cc4a:	18fb      	adds	r3, r7, r3
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	2220      	movs	r2, #32
 801cc50:	4013      	ands	r3, r2
 801cc52:	d008      	beq.n	801cc66 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d004      	beq.n	801cc66 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cc60:	687a      	ldr	r2, [r7, #4]
 801cc62:	0010      	movs	r0, r2
 801cc64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	2284      	movs	r2, #132	@ 0x84
 801cc6a:	589b      	ldr	r3, [r3, r2]
 801cc6c:	2194      	movs	r1, #148	@ 0x94
 801cc6e:	187a      	adds	r2, r7, r1
 801cc70:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	689b      	ldr	r3, [r3, #8]
 801cc78:	2240      	movs	r2, #64	@ 0x40
 801cc7a:	4013      	ands	r3, r2
 801cc7c:	2b40      	cmp	r3, #64	@ 0x40
 801cc7e:	d004      	beq.n	801cc8a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801cc80:	187b      	adds	r3, r7, r1
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	2228      	movs	r2, #40	@ 0x28
 801cc86:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cc88:	d04b      	beq.n	801cd22 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	0018      	movs	r0, r3
 801cc8e:	f001 f861 	bl	801dd54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	689b      	ldr	r3, [r3, #8]
 801cc98:	2240      	movs	r2, #64	@ 0x40
 801cc9a:	4013      	ands	r3, r2
 801cc9c:	2b40      	cmp	r3, #64	@ 0x40
 801cc9e:	d139      	bne.n	801cd14 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cca0:	f3ef 8310 	mrs	r3, PRIMASK
 801cca4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801cca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cca8:	2090      	movs	r0, #144	@ 0x90
 801ccaa:	183a      	adds	r2, r7, r0
 801ccac:	6013      	str	r3, [r2, #0]
 801ccae:	2301      	movs	r3, #1
 801ccb0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ccb4:	f383 8810 	msr	PRIMASK, r3
}
 801ccb8:	46c0      	nop			@ (mov r8, r8)
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	689a      	ldr	r2, [r3, #8]
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	2140      	movs	r1, #64	@ 0x40
 801ccc6:	438a      	bics	r2, r1
 801ccc8:	609a      	str	r2, [r3, #8]
 801ccca:	183b      	adds	r3, r7, r0
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ccd2:	f383 8810 	msr	PRIMASK, r3
}
 801ccd6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d012      	beq.n	801cd06 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cce4:	4a17      	ldr	r2, [pc, #92]	@ (801cd44 <HAL_UART_IRQHandler+0x2ac>)
 801cce6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccec:	0018      	movs	r0, r3
 801ccee:	f7f7 fd89 	bl	8014804 <HAL_DMA_Abort_IT>
 801ccf2:	1e03      	subs	r3, r0, #0
 801ccf4:	d020      	beq.n	801cd38 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cd00:	0018      	movs	r0, r3
 801cd02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cd04:	e018      	b.n	801cd38 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2298      	movs	r2, #152	@ 0x98
 801cd0a:	589b      	ldr	r3, [r3, r2]
 801cd0c:	687a      	ldr	r2, [r7, #4]
 801cd0e:	0010      	movs	r0, r2
 801cd10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cd12:	e011      	b.n	801cd38 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	2298      	movs	r2, #152	@ 0x98
 801cd18:	589b      	ldr	r3, [r3, r2]
 801cd1a:	687a      	ldr	r2, [r7, #4]
 801cd1c:	0010      	movs	r0, r2
 801cd1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cd20:	e00a      	b.n	801cd38 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2298      	movs	r2, #152	@ 0x98
 801cd26:	589b      	ldr	r3, [r3, r2]
 801cd28:	687a      	ldr	r2, [r7, #4]
 801cd2a:	0010      	movs	r0, r2
 801cd2c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	2284      	movs	r2, #132	@ 0x84
 801cd32:	2100      	movs	r1, #0
 801cd34:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801cd36:	e18d      	b.n	801d054 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cd38:	46c0      	nop			@ (mov r8, r8)
    return;
 801cd3a:	e18b      	b.n	801d054 <HAL_UART_IRQHandler+0x5bc>
 801cd3c:	0000080f 	.word	0x0000080f
 801cd40:	04000120 	.word	0x04000120
 801cd44:	0801e0e1 	.word	0x0801e0e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cd4c:	2b01      	cmp	r3, #1
 801cd4e:	d000      	beq.n	801cd52 <HAL_UART_IRQHandler+0x2ba>
 801cd50:	e13d      	b.n	801cfce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801cd52:	23a4      	movs	r3, #164	@ 0xa4
 801cd54:	18fb      	adds	r3, r7, r3
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	2210      	movs	r2, #16
 801cd5a:	4013      	ands	r3, r2
 801cd5c:	d100      	bne.n	801cd60 <HAL_UART_IRQHandler+0x2c8>
 801cd5e:	e136      	b.n	801cfce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801cd60:	23a0      	movs	r3, #160	@ 0xa0
 801cd62:	18fb      	adds	r3, r7, r3
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	2210      	movs	r2, #16
 801cd68:	4013      	ands	r3, r2
 801cd6a:	d100      	bne.n	801cd6e <HAL_UART_IRQHandler+0x2d6>
 801cd6c:	e12f      	b.n	801cfce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	2210      	movs	r2, #16
 801cd74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	689b      	ldr	r3, [r3, #8]
 801cd7c:	2240      	movs	r2, #64	@ 0x40
 801cd7e:	4013      	ands	r3, r2
 801cd80:	2b40      	cmp	r3, #64	@ 0x40
 801cd82:	d000      	beq.n	801cd86 <HAL_UART_IRQHandler+0x2ee>
 801cd84:	e0a2      	b.n	801cecc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	685a      	ldr	r2, [r3, #4]
 801cd8e:	217e      	movs	r1, #126	@ 0x7e
 801cd90:	187b      	adds	r3, r7, r1
 801cd92:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801cd94:	187b      	adds	r3, r7, r1
 801cd96:	881b      	ldrh	r3, [r3, #0]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d100      	bne.n	801cd9e <HAL_UART_IRQHandler+0x306>
 801cd9c:	e15c      	b.n	801d058 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	2258      	movs	r2, #88	@ 0x58
 801cda2:	5a9b      	ldrh	r3, [r3, r2]
 801cda4:	187a      	adds	r2, r7, r1
 801cda6:	8812      	ldrh	r2, [r2, #0]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	d300      	bcc.n	801cdae <HAL_UART_IRQHandler+0x316>
 801cdac:	e154      	b.n	801d058 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	187a      	adds	r2, r7, r1
 801cdb2:	215a      	movs	r1, #90	@ 0x5a
 801cdb4:	8812      	ldrh	r2, [r2, #0]
 801cdb6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	2220      	movs	r2, #32
 801cdc2:	4013      	ands	r3, r2
 801cdc4:	d16f      	bne.n	801cea6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdc6:	f3ef 8310 	mrs	r3, PRIMASK
 801cdca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cdce:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdd6:	f383 8810 	msr	PRIMASK, r3
}
 801cdda:	46c0      	nop			@ (mov r8, r8)
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	681a      	ldr	r2, [r3, #0]
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	49a0      	ldr	r1, [pc, #640]	@ (801d068 <HAL_UART_IRQHandler+0x5d0>)
 801cde8:	400a      	ands	r2, r1
 801cdea:	601a      	str	r2, [r3, #0]
 801cdec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cdee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdf2:	f383 8810 	msr	PRIMASK, r3
}
 801cdf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdf8:	f3ef 8310 	mrs	r3, PRIMASK
 801cdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801cdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ce00:	677b      	str	r3, [r7, #116]	@ 0x74
 801ce02:	2301      	movs	r3, #1
 801ce04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ce08:	f383 8810 	msr	PRIMASK, r3
}
 801ce0c:	46c0      	nop			@ (mov r8, r8)
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	689a      	ldr	r2, [r3, #8]
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	2101      	movs	r1, #1
 801ce1a:	438a      	bics	r2, r1
 801ce1c:	609a      	str	r2, [r3, #8]
 801ce1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ce20:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ce24:	f383 8810 	msr	PRIMASK, r3
}
 801ce28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce2a:	f3ef 8310 	mrs	r3, PRIMASK
 801ce2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801ce30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ce32:	673b      	str	r3, [r7, #112]	@ 0x70
 801ce34:	2301      	movs	r3, #1
 801ce36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ce3a:	f383 8810 	msr	PRIMASK, r3
}
 801ce3e:	46c0      	nop			@ (mov r8, r8)
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	689a      	ldr	r2, [r3, #8]
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	2140      	movs	r1, #64	@ 0x40
 801ce4c:	438a      	bics	r2, r1
 801ce4e:	609a      	str	r2, [r3, #8]
 801ce50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ce52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ce56:	f383 8810 	msr	PRIMASK, r3
}
 801ce5a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2280      	movs	r2, #128	@ 0x80
 801ce60:	2120      	movs	r1, #32
 801ce62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2200      	movs	r2, #0
 801ce68:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce6a:	f3ef 8310 	mrs	r3, PRIMASK
 801ce6e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801ce70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ce72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ce74:	2301      	movs	r3, #1
 801ce76:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ce7a:	f383 8810 	msr	PRIMASK, r3
}
 801ce7e:	46c0      	nop			@ (mov r8, r8)
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	681a      	ldr	r2, [r3, #0]
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	2110      	movs	r1, #16
 801ce8c:	438a      	bics	r2, r1
 801ce8e:	601a      	str	r2, [r3, #0]
 801ce90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ce92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ce96:	f383 8810 	msr	PRIMASK, r3
}
 801ce9a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cea0:	0018      	movs	r0, r3
 801cea2:	f7f7 fc6f 	bl	8014784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	2202      	movs	r2, #2
 801ceaa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	22ac      	movs	r2, #172	@ 0xac
 801ceb0:	589b      	ldr	r3, [r3, r2]
 801ceb2:	687a      	ldr	r2, [r7, #4]
 801ceb4:	2158      	movs	r1, #88	@ 0x58
 801ceb6:	5a51      	ldrh	r1, [r2, r1]
 801ceb8:	687a      	ldr	r2, [r7, #4]
 801ceba:	205a      	movs	r0, #90	@ 0x5a
 801cebc:	5a12      	ldrh	r2, [r2, r0]
 801cebe:	b292      	uxth	r2, r2
 801cec0:	1a8a      	subs	r2, r1, r2
 801cec2:	b291      	uxth	r1, r2
 801cec4:	687a      	ldr	r2, [r7, #4]
 801cec6:	0010      	movs	r0, r2
 801cec8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ceca:	e0c5      	b.n	801d058 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2258      	movs	r2, #88	@ 0x58
 801ced0:	5a99      	ldrh	r1, [r3, r2]
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	225a      	movs	r2, #90	@ 0x5a
 801ced6:	5a9b      	ldrh	r3, [r3, r2]
 801ced8:	b29a      	uxth	r2, r3
 801ceda:	208e      	movs	r0, #142	@ 0x8e
 801cedc:	183b      	adds	r3, r7, r0
 801cede:	1a8a      	subs	r2, r1, r2
 801cee0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	225a      	movs	r2, #90	@ 0x5a
 801cee6:	5a9b      	ldrh	r3, [r3, r2]
 801cee8:	b29b      	uxth	r3, r3
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d100      	bne.n	801cef0 <HAL_UART_IRQHandler+0x458>
 801ceee:	e0b5      	b.n	801d05c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801cef0:	183b      	adds	r3, r7, r0
 801cef2:	881b      	ldrh	r3, [r3, #0]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d100      	bne.n	801cefa <HAL_UART_IRQHandler+0x462>
 801cef8:	e0b0      	b.n	801d05c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cefa:	f3ef 8310 	mrs	r3, PRIMASK
 801cefe:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801cf02:	2488      	movs	r4, #136	@ 0x88
 801cf04:	193a      	adds	r2, r7, r4
 801cf06:	6013      	str	r3, [r2, #0]
 801cf08:	2301      	movs	r3, #1
 801cf0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf0c:	693b      	ldr	r3, [r7, #16]
 801cf0e:	f383 8810 	msr	PRIMASK, r3
}
 801cf12:	46c0      	nop			@ (mov r8, r8)
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	681a      	ldr	r2, [r3, #0]
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4953      	ldr	r1, [pc, #332]	@ (801d06c <HAL_UART_IRQHandler+0x5d4>)
 801cf20:	400a      	ands	r2, r1
 801cf22:	601a      	str	r2, [r3, #0]
 801cf24:	193b      	adds	r3, r7, r4
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf2a:	697b      	ldr	r3, [r7, #20]
 801cf2c:	f383 8810 	msr	PRIMASK, r3
}
 801cf30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf32:	f3ef 8310 	mrs	r3, PRIMASK
 801cf36:	61bb      	str	r3, [r7, #24]
  return(result);
 801cf38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cf3a:	2484      	movs	r4, #132	@ 0x84
 801cf3c:	193a      	adds	r2, r7, r4
 801cf3e:	6013      	str	r3, [r2, #0]
 801cf40:	2301      	movs	r3, #1
 801cf42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf44:	69fb      	ldr	r3, [r7, #28]
 801cf46:	f383 8810 	msr	PRIMASK, r3
}
 801cf4a:	46c0      	nop			@ (mov r8, r8)
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	689a      	ldr	r2, [r3, #8]
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	2101      	movs	r1, #1
 801cf58:	438a      	bics	r2, r1
 801cf5a:	609a      	str	r2, [r3, #8]
 801cf5c:	193b      	adds	r3, r7, r4
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf62:	6a3b      	ldr	r3, [r7, #32]
 801cf64:	f383 8810 	msr	PRIMASK, r3
}
 801cf68:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	2280      	movs	r2, #128	@ 0x80
 801cf6e:	2120      	movs	r1, #32
 801cf70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	2200      	movs	r2, #0
 801cf76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf7e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf82:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cf86:	2480      	movs	r4, #128	@ 0x80
 801cf88:	193a      	adds	r2, r7, r4
 801cf8a:	6013      	str	r3, [r2, #0]
 801cf8c:	2301      	movs	r3, #1
 801cf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf92:	f383 8810 	msr	PRIMASK, r3
}
 801cf96:	46c0      	nop			@ (mov r8, r8)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	681a      	ldr	r2, [r3, #0]
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	2110      	movs	r1, #16
 801cfa4:	438a      	bics	r2, r1
 801cfa6:	601a      	str	r2, [r3, #0]
 801cfa8:	193b      	adds	r3, r7, r4
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfb0:	f383 8810 	msr	PRIMASK, r3
}
 801cfb4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	2202      	movs	r2, #2
 801cfba:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	22ac      	movs	r2, #172	@ 0xac
 801cfc0:	589b      	ldr	r3, [r3, r2]
 801cfc2:	183a      	adds	r2, r7, r0
 801cfc4:	8811      	ldrh	r1, [r2, #0]
 801cfc6:	687a      	ldr	r2, [r7, #4]
 801cfc8:	0010      	movs	r0, r2
 801cfca:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cfcc:	e046      	b.n	801d05c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801cfce:	23a4      	movs	r3, #164	@ 0xa4
 801cfd0:	18fb      	adds	r3, r7, r3
 801cfd2:	681a      	ldr	r2, [r3, #0]
 801cfd4:	2380      	movs	r3, #128	@ 0x80
 801cfd6:	035b      	lsls	r3, r3, #13
 801cfd8:	4013      	ands	r3, r2
 801cfda:	d012      	beq.n	801d002 <HAL_UART_IRQHandler+0x56a>
 801cfdc:	239c      	movs	r3, #156	@ 0x9c
 801cfde:	18fb      	adds	r3, r7, r3
 801cfe0:	681a      	ldr	r2, [r3, #0]
 801cfe2:	2380      	movs	r3, #128	@ 0x80
 801cfe4:	03db      	lsls	r3, r3, #15
 801cfe6:	4013      	ands	r3, r2
 801cfe8:	d00b      	beq.n	801d002 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	2280      	movs	r2, #128	@ 0x80
 801cff0:	0352      	lsls	r2, r2, #13
 801cff2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	22a8      	movs	r2, #168	@ 0xa8
 801cff8:	589b      	ldr	r3, [r3, r2]
 801cffa:	687a      	ldr	r2, [r7, #4]
 801cffc:	0010      	movs	r0, r2
 801cffe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801d000:	e02f      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801d002:	23a4      	movs	r3, #164	@ 0xa4
 801d004:	18fb      	adds	r3, r7, r3
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	2280      	movs	r2, #128	@ 0x80
 801d00a:	4013      	ands	r3, r2
 801d00c:	d00f      	beq.n	801d02e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801d00e:	23a0      	movs	r3, #160	@ 0xa0
 801d010:	18fb      	adds	r3, r7, r3
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	2280      	movs	r2, #128	@ 0x80
 801d016:	4013      	ands	r3, r2
 801d018:	d009      	beq.n	801d02e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d01e      	beq.n	801d060 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d026:	687a      	ldr	r2, [r7, #4]
 801d028:	0010      	movs	r0, r2
 801d02a:	4798      	blx	r3
    }
    return;
 801d02c:	e018      	b.n	801d060 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801d02e:	23a4      	movs	r3, #164	@ 0xa4
 801d030:	18fb      	adds	r3, r7, r3
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2240      	movs	r2, #64	@ 0x40
 801d036:	4013      	ands	r3, r2
 801d038:	d013      	beq.n	801d062 <HAL_UART_IRQHandler+0x5ca>
 801d03a:	23a0      	movs	r3, #160	@ 0xa0
 801d03c:	18fb      	adds	r3, r7, r3
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	2240      	movs	r2, #64	@ 0x40
 801d042:	4013      	ands	r3, r2
 801d044:	d00d      	beq.n	801d062 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	0018      	movs	r0, r3
 801d04a:	f001 f862 	bl	801e112 <UART_EndTransmit_IT>
    return;
 801d04e:	e008      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d050:	46c0      	nop			@ (mov r8, r8)
 801d052:	e006      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
    return;
 801d054:	46c0      	nop			@ (mov r8, r8)
 801d056:	e004      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d058:	46c0      	nop			@ (mov r8, r8)
 801d05a:	e002      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d05c:	46c0      	nop			@ (mov r8, r8)
 801d05e:	e000      	b.n	801d062 <HAL_UART_IRQHandler+0x5ca>
    return;
 801d060:	46c0      	nop			@ (mov r8, r8)
  }

}
 801d062:	46bd      	mov	sp, r7
 801d064:	b02b      	add	sp, #172	@ 0xac
 801d066:	bd90      	pop	{r4, r7, pc}
 801d068:	fffffeff 	.word	0xfffffeff
 801d06c:	fffffedf 	.word	0xfffffedf

0801d070 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b082      	sub	sp, #8
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801d078:	46c0      	nop			@ (mov r8, r8)
 801d07a:	46bd      	mov	sp, r7
 801d07c:	b002      	add	sp, #8
 801d07e:	bd80      	pop	{r7, pc}

0801d080 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b082      	sub	sp, #8
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801d088:	46c0      	nop			@ (mov r8, r8)
 801d08a:	46bd      	mov	sp, r7
 801d08c:	b002      	add	sp, #8
 801d08e:	bd80      	pop	{r7, pc}

0801d090 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801d098:	46c0      	nop			@ (mov r8, r8)
 801d09a:	46bd      	mov	sp, r7
 801d09c:	b002      	add	sp, #8
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b082      	sub	sp, #8
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801d0a8:	46c0      	nop			@ (mov r8, r8)
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	b002      	add	sp, #8
 801d0ae:	bd80      	pop	{r7, pc}

0801d0b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	b082      	sub	sp, #8
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801d0b8:	46c0      	nop			@ (mov r8, r8)
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	b002      	add	sp, #8
 801d0be:	bd80      	pop	{r7, pc}

0801d0c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b082      	sub	sp, #8
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801d0c8:	46c0      	nop			@ (mov r8, r8)
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	b002      	add	sp, #8
 801d0ce:	bd80      	pop	{r7, pc}

0801d0d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b082      	sub	sp, #8
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
 801d0d8:	000a      	movs	r2, r1
 801d0da:	1cbb      	adds	r3, r7, #2
 801d0dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801d0de:	46c0      	nop			@ (mov r8, r8)
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	b002      	add	sp, #8
 801d0e4:	bd80      	pop	{r7, pc}
	...

0801d0e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b082      	sub	sp, #8
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	2188      	movs	r1, #136	@ 0x88
 801d0f4:	4a14      	ldr	r2, [pc, #80]	@ (801d148 <UART_InitCallbacksToDefault+0x60>)
 801d0f6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	218c      	movs	r1, #140	@ 0x8c
 801d0fc:	4a13      	ldr	r2, [pc, #76]	@ (801d14c <UART_InitCallbacksToDefault+0x64>)
 801d0fe:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	2190      	movs	r1, #144	@ 0x90
 801d104:	4a12      	ldr	r2, [pc, #72]	@ (801d150 <UART_InitCallbacksToDefault+0x68>)
 801d106:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	2194      	movs	r1, #148	@ 0x94
 801d10c:	4a11      	ldr	r2, [pc, #68]	@ (801d154 <UART_InitCallbacksToDefault+0x6c>)
 801d10e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	2198      	movs	r1, #152	@ 0x98
 801d114:	4a10      	ldr	r2, [pc, #64]	@ (801d158 <UART_InitCallbacksToDefault+0x70>)
 801d116:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	219c      	movs	r1, #156	@ 0x9c
 801d11c:	4a0f      	ldr	r2, [pc, #60]	@ (801d15c <UART_InitCallbacksToDefault+0x74>)
 801d11e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	21a0      	movs	r1, #160	@ 0xa0
 801d124:	4a0e      	ldr	r2, [pc, #56]	@ (801d160 <UART_InitCallbacksToDefault+0x78>)
 801d126:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	21a4      	movs	r1, #164	@ 0xa4
 801d12c:	4a0d      	ldr	r2, [pc, #52]	@ (801d164 <UART_InitCallbacksToDefault+0x7c>)
 801d12e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	21a8      	movs	r1, #168	@ 0xa8
 801d134:	4a0c      	ldr	r2, [pc, #48]	@ (801d168 <UART_InitCallbacksToDefault+0x80>)
 801d136:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	21ac      	movs	r1, #172	@ 0xac
 801d13c:	4a0b      	ldr	r2, [pc, #44]	@ (801d16c <UART_InitCallbacksToDefault+0x84>)
 801d13e:	505a      	str	r2, [r3, r1]

}
 801d140:	46c0      	nop			@ (mov r8, r8)
 801d142:	46bd      	mov	sp, r7
 801d144:	b002      	add	sp, #8
 801d146:	bd80      	pop	{r7, pc}
 801d148:	0801d081 	.word	0x0801d081
 801d14c:	0801d071 	.word	0x0801d071
 801d150:	0801d091 	.word	0x0801d091
 801d154:	0800c865 	.word	0x0800c865
 801d158:	08005069 	.word	0x08005069
 801d15c:	0801d0a1 	.word	0x0801d0a1
 801d160:	0801d0b1 	.word	0x0801d0b1
 801d164:	0801d0c1 	.word	0x0801d0c1
 801d168:	0801e505 	.word	0x0801e505
 801d16c:	0801d0d1 	.word	0x0801d0d1

0801d170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d170:	b5b0      	push	{r4, r5, r7, lr}
 801d172:	b08e      	sub	sp, #56	@ 0x38
 801d174:	af00      	add	r7, sp, #0
 801d176:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d178:	231a      	movs	r3, #26
 801d17a:	2218      	movs	r2, #24
 801d17c:	189b      	adds	r3, r3, r2
 801d17e:	19db      	adds	r3, r3, r7
 801d180:	2200      	movs	r2, #0
 801d182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d184:	69fb      	ldr	r3, [r7, #28]
 801d186:	689a      	ldr	r2, [r3, #8]
 801d188:	69fb      	ldr	r3, [r7, #28]
 801d18a:	691b      	ldr	r3, [r3, #16]
 801d18c:	431a      	orrs	r2, r3
 801d18e:	69fb      	ldr	r3, [r7, #28]
 801d190:	695b      	ldr	r3, [r3, #20]
 801d192:	431a      	orrs	r2, r3
 801d194:	69fb      	ldr	r3, [r7, #28]
 801d196:	69db      	ldr	r3, [r3, #28]
 801d198:	4313      	orrs	r3, r2
 801d19a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	4ac3      	ldr	r2, [pc, #780]	@ (801d4b0 <UART_SetConfig+0x340>)
 801d1a4:	4013      	ands	r3, r2
 801d1a6:	0019      	movs	r1, r3
 801d1a8:	69fb      	ldr	r3, [r7, #28]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d1ae:	430a      	orrs	r2, r1
 801d1b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d1b2:	69fb      	ldr	r3, [r7, #28]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	685b      	ldr	r3, [r3, #4]
 801d1b8:	4abe      	ldr	r2, [pc, #760]	@ (801d4b4 <UART_SetConfig+0x344>)
 801d1ba:	4013      	ands	r3, r2
 801d1bc:	0019      	movs	r1, r3
 801d1be:	69fb      	ldr	r3, [r7, #28]
 801d1c0:	68da      	ldr	r2, [r3, #12]
 801d1c2:	69fb      	ldr	r3, [r7, #28]
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	430a      	orrs	r2, r1
 801d1c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d1ca:	69fb      	ldr	r3, [r7, #28]
 801d1cc:	699b      	ldr	r3, [r3, #24]
 801d1ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d1d0:	69fb      	ldr	r3, [r7, #28]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	4ab8      	ldr	r2, [pc, #736]	@ (801d4b8 <UART_SetConfig+0x348>)
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	d004      	beq.n	801d1e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d1da:	69fb      	ldr	r3, [r7, #28]
 801d1dc:	6a1b      	ldr	r3, [r3, #32]
 801d1de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d1e0:	4313      	orrs	r3, r2
 801d1e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d1e4:	69fb      	ldr	r3, [r7, #28]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	689b      	ldr	r3, [r3, #8]
 801d1ea:	4ab4      	ldr	r2, [pc, #720]	@ (801d4bc <UART_SetConfig+0x34c>)
 801d1ec:	4013      	ands	r3, r2
 801d1ee:	0019      	movs	r1, r3
 801d1f0:	69fb      	ldr	r3, [r7, #28]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d1f6:	430a      	orrs	r2, r1
 801d1f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d1fa:	69fb      	ldr	r3, [r7, #28]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	4ab0      	ldr	r2, [pc, #704]	@ (801d4c0 <UART_SetConfig+0x350>)
 801d200:	4293      	cmp	r3, r2
 801d202:	d131      	bne.n	801d268 <UART_SetConfig+0xf8>
 801d204:	4baf      	ldr	r3, [pc, #700]	@ (801d4c4 <UART_SetConfig+0x354>)
 801d206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d208:	2203      	movs	r2, #3
 801d20a:	4013      	ands	r3, r2
 801d20c:	2b03      	cmp	r3, #3
 801d20e:	d01d      	beq.n	801d24c <UART_SetConfig+0xdc>
 801d210:	d823      	bhi.n	801d25a <UART_SetConfig+0xea>
 801d212:	2b02      	cmp	r3, #2
 801d214:	d00c      	beq.n	801d230 <UART_SetConfig+0xc0>
 801d216:	d820      	bhi.n	801d25a <UART_SetConfig+0xea>
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d002      	beq.n	801d222 <UART_SetConfig+0xb2>
 801d21c:	2b01      	cmp	r3, #1
 801d21e:	d00e      	beq.n	801d23e <UART_SetConfig+0xce>
 801d220:	e01b      	b.n	801d25a <UART_SetConfig+0xea>
 801d222:	231b      	movs	r3, #27
 801d224:	2218      	movs	r2, #24
 801d226:	189b      	adds	r3, r3, r2
 801d228:	19db      	adds	r3, r3, r7
 801d22a:	2201      	movs	r2, #1
 801d22c:	701a      	strb	r2, [r3, #0]
 801d22e:	e0b4      	b.n	801d39a <UART_SetConfig+0x22a>
 801d230:	231b      	movs	r3, #27
 801d232:	2218      	movs	r2, #24
 801d234:	189b      	adds	r3, r3, r2
 801d236:	19db      	adds	r3, r3, r7
 801d238:	2202      	movs	r2, #2
 801d23a:	701a      	strb	r2, [r3, #0]
 801d23c:	e0ad      	b.n	801d39a <UART_SetConfig+0x22a>
 801d23e:	231b      	movs	r3, #27
 801d240:	2218      	movs	r2, #24
 801d242:	189b      	adds	r3, r3, r2
 801d244:	19db      	adds	r3, r3, r7
 801d246:	2204      	movs	r2, #4
 801d248:	701a      	strb	r2, [r3, #0]
 801d24a:	e0a6      	b.n	801d39a <UART_SetConfig+0x22a>
 801d24c:	231b      	movs	r3, #27
 801d24e:	2218      	movs	r2, #24
 801d250:	189b      	adds	r3, r3, r2
 801d252:	19db      	adds	r3, r3, r7
 801d254:	2208      	movs	r2, #8
 801d256:	701a      	strb	r2, [r3, #0]
 801d258:	e09f      	b.n	801d39a <UART_SetConfig+0x22a>
 801d25a:	231b      	movs	r3, #27
 801d25c:	2218      	movs	r2, #24
 801d25e:	189b      	adds	r3, r3, r2
 801d260:	19db      	adds	r3, r3, r7
 801d262:	2210      	movs	r2, #16
 801d264:	701a      	strb	r2, [r3, #0]
 801d266:	e098      	b.n	801d39a <UART_SetConfig+0x22a>
 801d268:	69fb      	ldr	r3, [r7, #28]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4a96      	ldr	r2, [pc, #600]	@ (801d4c8 <UART_SetConfig+0x358>)
 801d26e:	4293      	cmp	r3, r2
 801d270:	d131      	bne.n	801d2d6 <UART_SetConfig+0x166>
 801d272:	4b94      	ldr	r3, [pc, #592]	@ (801d4c4 <UART_SetConfig+0x354>)
 801d274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d276:	220c      	movs	r2, #12
 801d278:	4013      	ands	r3, r2
 801d27a:	2b0c      	cmp	r3, #12
 801d27c:	d01d      	beq.n	801d2ba <UART_SetConfig+0x14a>
 801d27e:	d823      	bhi.n	801d2c8 <UART_SetConfig+0x158>
 801d280:	2b08      	cmp	r3, #8
 801d282:	d00c      	beq.n	801d29e <UART_SetConfig+0x12e>
 801d284:	d820      	bhi.n	801d2c8 <UART_SetConfig+0x158>
 801d286:	2b00      	cmp	r3, #0
 801d288:	d002      	beq.n	801d290 <UART_SetConfig+0x120>
 801d28a:	2b04      	cmp	r3, #4
 801d28c:	d00e      	beq.n	801d2ac <UART_SetConfig+0x13c>
 801d28e:	e01b      	b.n	801d2c8 <UART_SetConfig+0x158>
 801d290:	231b      	movs	r3, #27
 801d292:	2218      	movs	r2, #24
 801d294:	189b      	adds	r3, r3, r2
 801d296:	19db      	adds	r3, r3, r7
 801d298:	2200      	movs	r2, #0
 801d29a:	701a      	strb	r2, [r3, #0]
 801d29c:	e07d      	b.n	801d39a <UART_SetConfig+0x22a>
 801d29e:	231b      	movs	r3, #27
 801d2a0:	2218      	movs	r2, #24
 801d2a2:	189b      	adds	r3, r3, r2
 801d2a4:	19db      	adds	r3, r3, r7
 801d2a6:	2202      	movs	r2, #2
 801d2a8:	701a      	strb	r2, [r3, #0]
 801d2aa:	e076      	b.n	801d39a <UART_SetConfig+0x22a>
 801d2ac:	231b      	movs	r3, #27
 801d2ae:	2218      	movs	r2, #24
 801d2b0:	189b      	adds	r3, r3, r2
 801d2b2:	19db      	adds	r3, r3, r7
 801d2b4:	2204      	movs	r2, #4
 801d2b6:	701a      	strb	r2, [r3, #0]
 801d2b8:	e06f      	b.n	801d39a <UART_SetConfig+0x22a>
 801d2ba:	231b      	movs	r3, #27
 801d2bc:	2218      	movs	r2, #24
 801d2be:	189b      	adds	r3, r3, r2
 801d2c0:	19db      	adds	r3, r3, r7
 801d2c2:	2208      	movs	r2, #8
 801d2c4:	701a      	strb	r2, [r3, #0]
 801d2c6:	e068      	b.n	801d39a <UART_SetConfig+0x22a>
 801d2c8:	231b      	movs	r3, #27
 801d2ca:	2218      	movs	r2, #24
 801d2cc:	189b      	adds	r3, r3, r2
 801d2ce:	19db      	adds	r3, r3, r7
 801d2d0:	2210      	movs	r2, #16
 801d2d2:	701a      	strb	r2, [r3, #0]
 801d2d4:	e061      	b.n	801d39a <UART_SetConfig+0x22a>
 801d2d6:	69fb      	ldr	r3, [r7, #28]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	4a7c      	ldr	r2, [pc, #496]	@ (801d4cc <UART_SetConfig+0x35c>)
 801d2dc:	4293      	cmp	r3, r2
 801d2de:	d106      	bne.n	801d2ee <UART_SetConfig+0x17e>
 801d2e0:	231b      	movs	r3, #27
 801d2e2:	2218      	movs	r2, #24
 801d2e4:	189b      	adds	r3, r3, r2
 801d2e6:	19db      	adds	r3, r3, r7
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	701a      	strb	r2, [r3, #0]
 801d2ec:	e055      	b.n	801d39a <UART_SetConfig+0x22a>
 801d2ee:	69fb      	ldr	r3, [r7, #28]
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	4a77      	ldr	r2, [pc, #476]	@ (801d4d0 <UART_SetConfig+0x360>)
 801d2f4:	4293      	cmp	r3, r2
 801d2f6:	d106      	bne.n	801d306 <UART_SetConfig+0x196>
 801d2f8:	231b      	movs	r3, #27
 801d2fa:	2218      	movs	r2, #24
 801d2fc:	189b      	adds	r3, r3, r2
 801d2fe:	19db      	adds	r3, r3, r7
 801d300:	2200      	movs	r2, #0
 801d302:	701a      	strb	r2, [r3, #0]
 801d304:	e049      	b.n	801d39a <UART_SetConfig+0x22a>
 801d306:	69fb      	ldr	r3, [r7, #28]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	4a6b      	ldr	r2, [pc, #428]	@ (801d4b8 <UART_SetConfig+0x348>)
 801d30c:	4293      	cmp	r3, r2
 801d30e:	d13e      	bne.n	801d38e <UART_SetConfig+0x21e>
 801d310:	4b6c      	ldr	r3, [pc, #432]	@ (801d4c4 <UART_SetConfig+0x354>)
 801d312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801d314:	23c0      	movs	r3, #192	@ 0xc0
 801d316:	011b      	lsls	r3, r3, #4
 801d318:	4013      	ands	r3, r2
 801d31a:	22c0      	movs	r2, #192	@ 0xc0
 801d31c:	0112      	lsls	r2, r2, #4
 801d31e:	4293      	cmp	r3, r2
 801d320:	d027      	beq.n	801d372 <UART_SetConfig+0x202>
 801d322:	22c0      	movs	r2, #192	@ 0xc0
 801d324:	0112      	lsls	r2, r2, #4
 801d326:	4293      	cmp	r3, r2
 801d328:	d82a      	bhi.n	801d380 <UART_SetConfig+0x210>
 801d32a:	2280      	movs	r2, #128	@ 0x80
 801d32c:	0112      	lsls	r2, r2, #4
 801d32e:	4293      	cmp	r3, r2
 801d330:	d011      	beq.n	801d356 <UART_SetConfig+0x1e6>
 801d332:	2280      	movs	r2, #128	@ 0x80
 801d334:	0112      	lsls	r2, r2, #4
 801d336:	4293      	cmp	r3, r2
 801d338:	d822      	bhi.n	801d380 <UART_SetConfig+0x210>
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d004      	beq.n	801d348 <UART_SetConfig+0x1d8>
 801d33e:	2280      	movs	r2, #128	@ 0x80
 801d340:	00d2      	lsls	r2, r2, #3
 801d342:	4293      	cmp	r3, r2
 801d344:	d00e      	beq.n	801d364 <UART_SetConfig+0x1f4>
 801d346:	e01b      	b.n	801d380 <UART_SetConfig+0x210>
 801d348:	231b      	movs	r3, #27
 801d34a:	2218      	movs	r2, #24
 801d34c:	189b      	adds	r3, r3, r2
 801d34e:	19db      	adds	r3, r3, r7
 801d350:	2200      	movs	r2, #0
 801d352:	701a      	strb	r2, [r3, #0]
 801d354:	e021      	b.n	801d39a <UART_SetConfig+0x22a>
 801d356:	231b      	movs	r3, #27
 801d358:	2218      	movs	r2, #24
 801d35a:	189b      	adds	r3, r3, r2
 801d35c:	19db      	adds	r3, r3, r7
 801d35e:	2202      	movs	r2, #2
 801d360:	701a      	strb	r2, [r3, #0]
 801d362:	e01a      	b.n	801d39a <UART_SetConfig+0x22a>
 801d364:	231b      	movs	r3, #27
 801d366:	2218      	movs	r2, #24
 801d368:	189b      	adds	r3, r3, r2
 801d36a:	19db      	adds	r3, r3, r7
 801d36c:	2204      	movs	r2, #4
 801d36e:	701a      	strb	r2, [r3, #0]
 801d370:	e013      	b.n	801d39a <UART_SetConfig+0x22a>
 801d372:	231b      	movs	r3, #27
 801d374:	2218      	movs	r2, #24
 801d376:	189b      	adds	r3, r3, r2
 801d378:	19db      	adds	r3, r3, r7
 801d37a:	2208      	movs	r2, #8
 801d37c:	701a      	strb	r2, [r3, #0]
 801d37e:	e00c      	b.n	801d39a <UART_SetConfig+0x22a>
 801d380:	231b      	movs	r3, #27
 801d382:	2218      	movs	r2, #24
 801d384:	189b      	adds	r3, r3, r2
 801d386:	19db      	adds	r3, r3, r7
 801d388:	2210      	movs	r2, #16
 801d38a:	701a      	strb	r2, [r3, #0]
 801d38c:	e005      	b.n	801d39a <UART_SetConfig+0x22a>
 801d38e:	231b      	movs	r3, #27
 801d390:	2218      	movs	r2, #24
 801d392:	189b      	adds	r3, r3, r2
 801d394:	19db      	adds	r3, r3, r7
 801d396:	2210      	movs	r2, #16
 801d398:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d39a:	69fb      	ldr	r3, [r7, #28]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	4a46      	ldr	r2, [pc, #280]	@ (801d4b8 <UART_SetConfig+0x348>)
 801d3a0:	4293      	cmp	r3, r2
 801d3a2:	d000      	beq.n	801d3a6 <UART_SetConfig+0x236>
 801d3a4:	e09a      	b.n	801d4dc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d3a6:	231b      	movs	r3, #27
 801d3a8:	2218      	movs	r2, #24
 801d3aa:	189b      	adds	r3, r3, r2
 801d3ac:	19db      	adds	r3, r3, r7
 801d3ae:	781b      	ldrb	r3, [r3, #0]
 801d3b0:	2b08      	cmp	r3, #8
 801d3b2:	d01d      	beq.n	801d3f0 <UART_SetConfig+0x280>
 801d3b4:	dc20      	bgt.n	801d3f8 <UART_SetConfig+0x288>
 801d3b6:	2b04      	cmp	r3, #4
 801d3b8:	d015      	beq.n	801d3e6 <UART_SetConfig+0x276>
 801d3ba:	dc1d      	bgt.n	801d3f8 <UART_SetConfig+0x288>
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d002      	beq.n	801d3c6 <UART_SetConfig+0x256>
 801d3c0:	2b02      	cmp	r3, #2
 801d3c2:	d005      	beq.n	801d3d0 <UART_SetConfig+0x260>
 801d3c4:	e018      	b.n	801d3f8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d3c6:	f7fd fe2d 	bl	801b024 <HAL_RCC_GetPCLK1Freq>
 801d3ca:	0003      	movs	r3, r0
 801d3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3ce:	e01c      	b.n	801d40a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d3d0:	4b3c      	ldr	r3, [pc, #240]	@ (801d4c4 <UART_SetConfig+0x354>)
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	2210      	movs	r2, #16
 801d3d6:	4013      	ands	r3, r2
 801d3d8:	d002      	beq.n	801d3e0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d3da:	4b3e      	ldr	r3, [pc, #248]	@ (801d4d4 <UART_SetConfig+0x364>)
 801d3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d3de:	e014      	b.n	801d40a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801d3e0:	4b3d      	ldr	r3, [pc, #244]	@ (801d4d8 <UART_SetConfig+0x368>)
 801d3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3e4:	e011      	b.n	801d40a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d3e6:	f7fd fd6d 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801d3ea:	0003      	movs	r3, r0
 801d3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3ee:	e00c      	b.n	801d40a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d3f0:	2380      	movs	r3, #128	@ 0x80
 801d3f2:	021b      	lsls	r3, r3, #8
 801d3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3f6:	e008      	b.n	801d40a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d3fc:	231a      	movs	r3, #26
 801d3fe:	2218      	movs	r2, #24
 801d400:	189b      	adds	r3, r3, r2
 801d402:	19db      	adds	r3, r3, r7
 801d404:	2201      	movs	r2, #1
 801d406:	701a      	strb	r2, [r3, #0]
        break;
 801d408:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d100      	bne.n	801d412 <UART_SetConfig+0x2a2>
 801d410:	e133      	b.n	801d67a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d412:	69fb      	ldr	r3, [r7, #28]
 801d414:	685a      	ldr	r2, [r3, #4]
 801d416:	0013      	movs	r3, r2
 801d418:	005b      	lsls	r3, r3, #1
 801d41a:	189b      	adds	r3, r3, r2
 801d41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d41e:	429a      	cmp	r2, r3
 801d420:	d305      	bcc.n	801d42e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d422:	69fb      	ldr	r3, [r7, #28]
 801d424:	685b      	ldr	r3, [r3, #4]
 801d426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d42a:	429a      	cmp	r2, r3
 801d42c:	d906      	bls.n	801d43c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801d42e:	231a      	movs	r3, #26
 801d430:	2218      	movs	r2, #24
 801d432:	189b      	adds	r3, r3, r2
 801d434:	19db      	adds	r3, r3, r7
 801d436:	2201      	movs	r2, #1
 801d438:	701a      	strb	r2, [r3, #0]
 801d43a:	e11e      	b.n	801d67a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d43e:	613b      	str	r3, [r7, #16]
 801d440:	2300      	movs	r3, #0
 801d442:	617b      	str	r3, [r7, #20]
 801d444:	6939      	ldr	r1, [r7, #16]
 801d446:	697a      	ldr	r2, [r7, #20]
 801d448:	000b      	movs	r3, r1
 801d44a:	0e1b      	lsrs	r3, r3, #24
 801d44c:	0010      	movs	r0, r2
 801d44e:	0205      	lsls	r5, r0, #8
 801d450:	431d      	orrs	r5, r3
 801d452:	000b      	movs	r3, r1
 801d454:	021c      	lsls	r4, r3, #8
 801d456:	69fb      	ldr	r3, [r7, #28]
 801d458:	685b      	ldr	r3, [r3, #4]
 801d45a:	085b      	lsrs	r3, r3, #1
 801d45c:	60bb      	str	r3, [r7, #8]
 801d45e:	2300      	movs	r3, #0
 801d460:	60fb      	str	r3, [r7, #12]
 801d462:	68b8      	ldr	r0, [r7, #8]
 801d464:	68f9      	ldr	r1, [r7, #12]
 801d466:	1900      	adds	r0, r0, r4
 801d468:	4169      	adcs	r1, r5
 801d46a:	69fb      	ldr	r3, [r7, #28]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	603b      	str	r3, [r7, #0]
 801d470:	2300      	movs	r3, #0
 801d472:	607b      	str	r3, [r7, #4]
 801d474:	683a      	ldr	r2, [r7, #0]
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	f7e3 f882 	bl	8000580 <__aeabi_uldivmod>
 801d47c:	0002      	movs	r2, r0
 801d47e:	000b      	movs	r3, r1
 801d480:	0013      	movs	r3, r2
 801d482:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d486:	23c0      	movs	r3, #192	@ 0xc0
 801d488:	009b      	lsls	r3, r3, #2
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d309      	bcc.n	801d4a2 <UART_SetConfig+0x332>
 801d48e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d490:	2380      	movs	r3, #128	@ 0x80
 801d492:	035b      	lsls	r3, r3, #13
 801d494:	429a      	cmp	r2, r3
 801d496:	d204      	bcs.n	801d4a2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801d498:	69fb      	ldr	r3, [r7, #28]
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d49e:	60da      	str	r2, [r3, #12]
 801d4a0:	e0eb      	b.n	801d67a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801d4a2:	231a      	movs	r3, #26
 801d4a4:	2218      	movs	r2, #24
 801d4a6:	189b      	adds	r3, r3, r2
 801d4a8:	19db      	adds	r3, r3, r7
 801d4aa:	2201      	movs	r2, #1
 801d4ac:	701a      	strb	r2, [r3, #0]
 801d4ae:	e0e4      	b.n	801d67a <UART_SetConfig+0x50a>
 801d4b0:	efff69f3 	.word	0xefff69f3
 801d4b4:	ffffcfff 	.word	0xffffcfff
 801d4b8:	40004800 	.word	0x40004800
 801d4bc:	fffff4ff 	.word	0xfffff4ff
 801d4c0:	40013800 	.word	0x40013800
 801d4c4:	40021000 	.word	0x40021000
 801d4c8:	40004400 	.word	0x40004400
 801d4cc:	40004c00 	.word	0x40004c00
 801d4d0:	40005000 	.word	0x40005000
 801d4d4:	003d0900 	.word	0x003d0900
 801d4d8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d4dc:	69fb      	ldr	r3, [r7, #28]
 801d4de:	69da      	ldr	r2, [r3, #28]
 801d4e0:	2380      	movs	r3, #128	@ 0x80
 801d4e2:	021b      	lsls	r3, r3, #8
 801d4e4:	429a      	cmp	r2, r3
 801d4e6:	d000      	beq.n	801d4ea <UART_SetConfig+0x37a>
 801d4e8:	e070      	b.n	801d5cc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801d4ea:	231b      	movs	r3, #27
 801d4ec:	2218      	movs	r2, #24
 801d4ee:	189b      	adds	r3, r3, r2
 801d4f0:	19db      	adds	r3, r3, r7
 801d4f2:	781b      	ldrb	r3, [r3, #0]
 801d4f4:	2b08      	cmp	r3, #8
 801d4f6:	d822      	bhi.n	801d53e <UART_SetConfig+0x3ce>
 801d4f8:	009a      	lsls	r2, r3, #2
 801d4fa:	4b67      	ldr	r3, [pc, #412]	@ (801d698 <UART_SetConfig+0x528>)
 801d4fc:	18d3      	adds	r3, r2, r3
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d502:	f7fd fd8f 	bl	801b024 <HAL_RCC_GetPCLK1Freq>
 801d506:	0003      	movs	r3, r0
 801d508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d50a:	e021      	b.n	801d550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d50c:	f7fd fda0 	bl	801b050 <HAL_RCC_GetPCLK2Freq>
 801d510:	0003      	movs	r3, r0
 801d512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d514:	e01c      	b.n	801d550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d516:	4b61      	ldr	r3, [pc, #388]	@ (801d69c <UART_SetConfig+0x52c>)
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	2210      	movs	r2, #16
 801d51c:	4013      	ands	r3, r2
 801d51e:	d002      	beq.n	801d526 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d520:	4b5f      	ldr	r3, [pc, #380]	@ (801d6a0 <UART_SetConfig+0x530>)
 801d522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d524:	e014      	b.n	801d550 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801d526:	4b5f      	ldr	r3, [pc, #380]	@ (801d6a4 <UART_SetConfig+0x534>)
 801d528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d52a:	e011      	b.n	801d550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d52c:	f7fd fcca 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801d530:	0003      	movs	r3, r0
 801d532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d534:	e00c      	b.n	801d550 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d536:	2380      	movs	r3, #128	@ 0x80
 801d538:	021b      	lsls	r3, r3, #8
 801d53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d53c:	e008      	b.n	801d550 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801d53e:	2300      	movs	r3, #0
 801d540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d542:	231a      	movs	r3, #26
 801d544:	2218      	movs	r2, #24
 801d546:	189b      	adds	r3, r3, r2
 801d548:	19db      	adds	r3, r3, r7
 801d54a:	2201      	movs	r2, #1
 801d54c:	701a      	strb	r2, [r3, #0]
        break;
 801d54e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d552:	2b00      	cmp	r3, #0
 801d554:	d100      	bne.n	801d558 <UART_SetConfig+0x3e8>
 801d556:	e090      	b.n	801d67a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d55a:	005a      	lsls	r2, r3, #1
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	685b      	ldr	r3, [r3, #4]
 801d560:	085b      	lsrs	r3, r3, #1
 801d562:	18d2      	adds	r2, r2, r3
 801d564:	69fb      	ldr	r3, [r7, #28]
 801d566:	685b      	ldr	r3, [r3, #4]
 801d568:	0019      	movs	r1, r3
 801d56a:	0010      	movs	r0, r2
 801d56c:	f7e2 fe1a 	bl	80001a4 <__udivsi3>
 801d570:	0003      	movs	r3, r0
 801d572:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d576:	2b0f      	cmp	r3, #15
 801d578:	d921      	bls.n	801d5be <UART_SetConfig+0x44e>
 801d57a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d57c:	2380      	movs	r3, #128	@ 0x80
 801d57e:	025b      	lsls	r3, r3, #9
 801d580:	429a      	cmp	r2, r3
 801d582:	d21c      	bcs.n	801d5be <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d586:	b29a      	uxth	r2, r3
 801d588:	200e      	movs	r0, #14
 801d58a:	2418      	movs	r4, #24
 801d58c:	1903      	adds	r3, r0, r4
 801d58e:	19db      	adds	r3, r3, r7
 801d590:	210f      	movs	r1, #15
 801d592:	438a      	bics	r2, r1
 801d594:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d598:	085b      	lsrs	r3, r3, #1
 801d59a:	b29b      	uxth	r3, r3
 801d59c:	2207      	movs	r2, #7
 801d59e:	4013      	ands	r3, r2
 801d5a0:	b299      	uxth	r1, r3
 801d5a2:	1903      	adds	r3, r0, r4
 801d5a4:	19db      	adds	r3, r3, r7
 801d5a6:	1902      	adds	r2, r0, r4
 801d5a8:	19d2      	adds	r2, r2, r7
 801d5aa:	8812      	ldrh	r2, [r2, #0]
 801d5ac:	430a      	orrs	r2, r1
 801d5ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801d5b0:	69fb      	ldr	r3, [r7, #28]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	1902      	adds	r2, r0, r4
 801d5b6:	19d2      	adds	r2, r2, r7
 801d5b8:	8812      	ldrh	r2, [r2, #0]
 801d5ba:	60da      	str	r2, [r3, #12]
 801d5bc:	e05d      	b.n	801d67a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d5be:	231a      	movs	r3, #26
 801d5c0:	2218      	movs	r2, #24
 801d5c2:	189b      	adds	r3, r3, r2
 801d5c4:	19db      	adds	r3, r3, r7
 801d5c6:	2201      	movs	r2, #1
 801d5c8:	701a      	strb	r2, [r3, #0]
 801d5ca:	e056      	b.n	801d67a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d5cc:	231b      	movs	r3, #27
 801d5ce:	2218      	movs	r2, #24
 801d5d0:	189b      	adds	r3, r3, r2
 801d5d2:	19db      	adds	r3, r3, r7
 801d5d4:	781b      	ldrb	r3, [r3, #0]
 801d5d6:	2b08      	cmp	r3, #8
 801d5d8:	d822      	bhi.n	801d620 <UART_SetConfig+0x4b0>
 801d5da:	009a      	lsls	r2, r3, #2
 801d5dc:	4b32      	ldr	r3, [pc, #200]	@ (801d6a8 <UART_SetConfig+0x538>)
 801d5de:	18d3      	adds	r3, r2, r3
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d5e4:	f7fd fd1e 	bl	801b024 <HAL_RCC_GetPCLK1Freq>
 801d5e8:	0003      	movs	r3, r0
 801d5ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d5ec:	e021      	b.n	801d632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d5ee:	f7fd fd2f 	bl	801b050 <HAL_RCC_GetPCLK2Freq>
 801d5f2:	0003      	movs	r3, r0
 801d5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d5f6:	e01c      	b.n	801d632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d5f8:	4b28      	ldr	r3, [pc, #160]	@ (801d69c <UART_SetConfig+0x52c>)
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	2210      	movs	r2, #16
 801d5fe:	4013      	ands	r3, r2
 801d600:	d002      	beq.n	801d608 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d602:	4b27      	ldr	r3, [pc, #156]	@ (801d6a0 <UART_SetConfig+0x530>)
 801d604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d606:	e014      	b.n	801d632 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801d608:	4b26      	ldr	r3, [pc, #152]	@ (801d6a4 <UART_SetConfig+0x534>)
 801d60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d60c:	e011      	b.n	801d632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d60e:	f7fd fc59 	bl	801aec4 <HAL_RCC_GetSysClockFreq>
 801d612:	0003      	movs	r3, r0
 801d614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d616:	e00c      	b.n	801d632 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d618:	2380      	movs	r3, #128	@ 0x80
 801d61a:	021b      	lsls	r3, r3, #8
 801d61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d61e:	e008      	b.n	801d632 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801d620:	2300      	movs	r3, #0
 801d622:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d624:	231a      	movs	r3, #26
 801d626:	2218      	movs	r2, #24
 801d628:	189b      	adds	r3, r3, r2
 801d62a:	19db      	adds	r3, r3, r7
 801d62c:	2201      	movs	r2, #1
 801d62e:	701a      	strb	r2, [r3, #0]
        break;
 801d630:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801d632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d634:	2b00      	cmp	r3, #0
 801d636:	d020      	beq.n	801d67a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d638:	69fb      	ldr	r3, [r7, #28]
 801d63a:	685b      	ldr	r3, [r3, #4]
 801d63c:	085a      	lsrs	r2, r3, #1
 801d63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d640:	18d2      	adds	r2, r2, r3
 801d642:	69fb      	ldr	r3, [r7, #28]
 801d644:	685b      	ldr	r3, [r3, #4]
 801d646:	0019      	movs	r1, r3
 801d648:	0010      	movs	r0, r2
 801d64a:	f7e2 fdab 	bl	80001a4 <__udivsi3>
 801d64e:	0003      	movs	r3, r0
 801d650:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d654:	2b0f      	cmp	r3, #15
 801d656:	d90a      	bls.n	801d66e <UART_SetConfig+0x4fe>
 801d658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d65a:	2380      	movs	r3, #128	@ 0x80
 801d65c:	025b      	lsls	r3, r3, #9
 801d65e:	429a      	cmp	r2, r3
 801d660:	d205      	bcs.n	801d66e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d664:	b29a      	uxth	r2, r3
 801d666:	69fb      	ldr	r3, [r7, #28]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	60da      	str	r2, [r3, #12]
 801d66c:	e005      	b.n	801d67a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d66e:	231a      	movs	r3, #26
 801d670:	2218      	movs	r2, #24
 801d672:	189b      	adds	r3, r3, r2
 801d674:	19db      	adds	r3, r3, r7
 801d676:	2201      	movs	r2, #1
 801d678:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d67a:	69fb      	ldr	r3, [r7, #28]
 801d67c:	2200      	movs	r2, #0
 801d67e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d680:	69fb      	ldr	r3, [r7, #28]
 801d682:	2200      	movs	r2, #0
 801d684:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d686:	231a      	movs	r3, #26
 801d688:	2218      	movs	r2, #24
 801d68a:	189b      	adds	r3, r3, r2
 801d68c:	19db      	adds	r3, r3, r7
 801d68e:	781b      	ldrb	r3, [r3, #0]
}
 801d690:	0018      	movs	r0, r3
 801d692:	46bd      	mov	sp, r7
 801d694:	b00e      	add	sp, #56	@ 0x38
 801d696:	bdb0      	pop	{r4, r5, r7, pc}
 801d698:	0802dc68 	.word	0x0802dc68
 801d69c:	40021000 	.word	0x40021000
 801d6a0:	003d0900 	.word	0x003d0900
 801d6a4:	00f42400 	.word	0x00f42400
 801d6a8:	0802dc8c 	.word	0x0802dc8c

0801d6ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b082      	sub	sp, #8
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6b8:	2201      	movs	r2, #1
 801d6ba:	4013      	ands	r3, r2
 801d6bc:	d00b      	beq.n	801d6d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	685b      	ldr	r3, [r3, #4]
 801d6c4:	4a4a      	ldr	r2, [pc, #296]	@ (801d7f0 <UART_AdvFeatureConfig+0x144>)
 801d6c6:	4013      	ands	r3, r2
 801d6c8:	0019      	movs	r1, r3
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	430a      	orrs	r2, r1
 801d6d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6da:	2202      	movs	r2, #2
 801d6dc:	4013      	ands	r3, r2
 801d6de:	d00b      	beq.n	801d6f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	685b      	ldr	r3, [r3, #4]
 801d6e6:	4a43      	ldr	r2, [pc, #268]	@ (801d7f4 <UART_AdvFeatureConfig+0x148>)
 801d6e8:	4013      	ands	r3, r2
 801d6ea:	0019      	movs	r1, r3
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	430a      	orrs	r2, r1
 801d6f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6fc:	2204      	movs	r2, #4
 801d6fe:	4013      	ands	r3, r2
 801d700:	d00b      	beq.n	801d71a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	685b      	ldr	r3, [r3, #4]
 801d708:	4a3b      	ldr	r2, [pc, #236]	@ (801d7f8 <UART_AdvFeatureConfig+0x14c>)
 801d70a:	4013      	ands	r3, r2
 801d70c:	0019      	movs	r1, r3
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	430a      	orrs	r2, r1
 801d718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d71e:	2208      	movs	r2, #8
 801d720:	4013      	ands	r3, r2
 801d722:	d00b      	beq.n	801d73c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	685b      	ldr	r3, [r3, #4]
 801d72a:	4a34      	ldr	r2, [pc, #208]	@ (801d7fc <UART_AdvFeatureConfig+0x150>)
 801d72c:	4013      	ands	r3, r2
 801d72e:	0019      	movs	r1, r3
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	430a      	orrs	r2, r1
 801d73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d740:	2210      	movs	r2, #16
 801d742:	4013      	ands	r3, r2
 801d744:	d00b      	beq.n	801d75e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	689b      	ldr	r3, [r3, #8]
 801d74c:	4a2c      	ldr	r2, [pc, #176]	@ (801d800 <UART_AdvFeatureConfig+0x154>)
 801d74e:	4013      	ands	r3, r2
 801d750:	0019      	movs	r1, r3
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	430a      	orrs	r2, r1
 801d75c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d762:	2220      	movs	r2, #32
 801d764:	4013      	ands	r3, r2
 801d766:	d00b      	beq.n	801d780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	689b      	ldr	r3, [r3, #8]
 801d76e:	4a25      	ldr	r2, [pc, #148]	@ (801d804 <UART_AdvFeatureConfig+0x158>)
 801d770:	4013      	ands	r3, r2
 801d772:	0019      	movs	r1, r3
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	430a      	orrs	r2, r1
 801d77e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d784:	2240      	movs	r2, #64	@ 0x40
 801d786:	4013      	ands	r3, r2
 801d788:	d01d      	beq.n	801d7c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	685b      	ldr	r3, [r3, #4]
 801d790:	4a1d      	ldr	r2, [pc, #116]	@ (801d808 <UART_AdvFeatureConfig+0x15c>)
 801d792:	4013      	ands	r3, r2
 801d794:	0019      	movs	r1, r3
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	430a      	orrs	r2, r1
 801d7a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d7a6:	2380      	movs	r3, #128	@ 0x80
 801d7a8:	035b      	lsls	r3, r3, #13
 801d7aa:	429a      	cmp	r2, r3
 801d7ac:	d10b      	bne.n	801d7c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	685b      	ldr	r3, [r3, #4]
 801d7b4:	4a15      	ldr	r2, [pc, #84]	@ (801d80c <UART_AdvFeatureConfig+0x160>)
 801d7b6:	4013      	ands	r3, r2
 801d7b8:	0019      	movs	r1, r3
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	430a      	orrs	r2, r1
 801d7c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7ca:	2280      	movs	r2, #128	@ 0x80
 801d7cc:	4013      	ands	r3, r2
 801d7ce:	d00b      	beq.n	801d7e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	4a0e      	ldr	r2, [pc, #56]	@ (801d810 <UART_AdvFeatureConfig+0x164>)
 801d7d8:	4013      	ands	r3, r2
 801d7da:	0019      	movs	r1, r3
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	430a      	orrs	r2, r1
 801d7e6:	605a      	str	r2, [r3, #4]
  }
}
 801d7e8:	46c0      	nop			@ (mov r8, r8)
 801d7ea:	46bd      	mov	sp, r7
 801d7ec:	b002      	add	sp, #8
 801d7ee:	bd80      	pop	{r7, pc}
 801d7f0:	fffdffff 	.word	0xfffdffff
 801d7f4:	fffeffff 	.word	0xfffeffff
 801d7f8:	fffbffff 	.word	0xfffbffff
 801d7fc:	ffff7fff 	.word	0xffff7fff
 801d800:	ffffefff 	.word	0xffffefff
 801d804:	ffffdfff 	.word	0xffffdfff
 801d808:	ffefffff 	.word	0xffefffff
 801d80c:	ff9fffff 	.word	0xff9fffff
 801d810:	fff7ffff 	.word	0xfff7ffff

0801d814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d814:	b580      	push	{r7, lr}
 801d816:	b092      	sub	sp, #72	@ 0x48
 801d818:	af02      	add	r7, sp, #8
 801d81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	2284      	movs	r2, #132	@ 0x84
 801d820:	2100      	movs	r1, #0
 801d822:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d824:	f7f6 f9f6 	bl	8013c14 <HAL_GetTick>
 801d828:	0003      	movs	r3, r0
 801d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	2208      	movs	r2, #8
 801d834:	4013      	ands	r3, r2
 801d836:	2b08      	cmp	r3, #8
 801d838:	d12c      	bne.n	801d894 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d83c:	2280      	movs	r2, #128	@ 0x80
 801d83e:	0391      	lsls	r1, r2, #14
 801d840:	6878      	ldr	r0, [r7, #4]
 801d842:	4a46      	ldr	r2, [pc, #280]	@ (801d95c <UART_CheckIdleState+0x148>)
 801d844:	9200      	str	r2, [sp, #0]
 801d846:	2200      	movs	r2, #0
 801d848:	f000 f88c 	bl	801d964 <UART_WaitOnFlagUntilTimeout>
 801d84c:	1e03      	subs	r3, r0, #0
 801d84e:	d021      	beq.n	801d894 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d850:	f3ef 8310 	mrs	r3, PRIMASK
 801d854:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d858:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d85a:	2301      	movs	r3, #1
 801d85c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d860:	f383 8810 	msr	PRIMASK, r3
}
 801d864:	46c0      	nop			@ (mov r8, r8)
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	681a      	ldr	r2, [r3, #0]
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	2180      	movs	r1, #128	@ 0x80
 801d872:	438a      	bics	r2, r1
 801d874:	601a      	str	r2, [r3, #0]
 801d876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d87c:	f383 8810 	msr	PRIMASK, r3
}
 801d880:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	2220      	movs	r2, #32
 801d886:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	2278      	movs	r2, #120	@ 0x78
 801d88c:	2100      	movs	r1, #0
 801d88e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d890:	2303      	movs	r3, #3
 801d892:	e05f      	b.n	801d954 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	2204      	movs	r2, #4
 801d89c:	4013      	ands	r3, r2
 801d89e:	2b04      	cmp	r3, #4
 801d8a0:	d146      	bne.n	801d930 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d8a4:	2280      	movs	r2, #128	@ 0x80
 801d8a6:	03d1      	lsls	r1, r2, #15
 801d8a8:	6878      	ldr	r0, [r7, #4]
 801d8aa:	4a2c      	ldr	r2, [pc, #176]	@ (801d95c <UART_CheckIdleState+0x148>)
 801d8ac:	9200      	str	r2, [sp, #0]
 801d8ae:	2200      	movs	r2, #0
 801d8b0:	f000 f858 	bl	801d964 <UART_WaitOnFlagUntilTimeout>
 801d8b4:	1e03      	subs	r3, r0, #0
 801d8b6:	d03b      	beq.n	801d930 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8b8:	f3ef 8310 	mrs	r3, PRIMASK
 801d8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801d8be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d8c0:	637b      	str	r3, [r7, #52]	@ 0x34
 801d8c2:	2301      	movs	r3, #1
 801d8c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8c6:	693b      	ldr	r3, [r7, #16]
 801d8c8:	f383 8810 	msr	PRIMASK, r3
}
 801d8cc:	46c0      	nop			@ (mov r8, r8)
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	681a      	ldr	r2, [r3, #0]
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	4921      	ldr	r1, [pc, #132]	@ (801d960 <UART_CheckIdleState+0x14c>)
 801d8da:	400a      	ands	r2, r1
 801d8dc:	601a      	str	r2, [r3, #0]
 801d8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	f383 8810 	msr	PRIMASK, r3
}
 801d8e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8ea:	f3ef 8310 	mrs	r3, PRIMASK
 801d8ee:	61bb      	str	r3, [r7, #24]
  return(result);
 801d8f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d8f2:	633b      	str	r3, [r7, #48]	@ 0x30
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8f8:	69fb      	ldr	r3, [r7, #28]
 801d8fa:	f383 8810 	msr	PRIMASK, r3
}
 801d8fe:	46c0      	nop			@ (mov r8, r8)
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	689a      	ldr	r2, [r3, #8]
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	2101      	movs	r1, #1
 801d90c:	438a      	bics	r2, r1
 801d90e:	609a      	str	r2, [r3, #8]
 801d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d912:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d914:	6a3b      	ldr	r3, [r7, #32]
 801d916:	f383 8810 	msr	PRIMASK, r3
}
 801d91a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	2280      	movs	r2, #128	@ 0x80
 801d920:	2120      	movs	r1, #32
 801d922:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	2278      	movs	r2, #120	@ 0x78
 801d928:	2100      	movs	r1, #0
 801d92a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d92c:	2303      	movs	r3, #3
 801d92e:	e011      	b.n	801d954 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	2220      	movs	r2, #32
 801d934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	2280      	movs	r2, #128	@ 0x80
 801d93a:	2120      	movs	r1, #32
 801d93c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	2200      	movs	r2, #0
 801d942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	2200      	movs	r2, #0
 801d948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	2278      	movs	r2, #120	@ 0x78
 801d94e:	2100      	movs	r1, #0
 801d950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d952:	2300      	movs	r3, #0
}
 801d954:	0018      	movs	r0, r3
 801d956:	46bd      	mov	sp, r7
 801d958:	b010      	add	sp, #64	@ 0x40
 801d95a:	bd80      	pop	{r7, pc}
 801d95c:	01ffffff 	.word	0x01ffffff
 801d960:	fffffedf 	.word	0xfffffedf

0801d964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d964:	b580      	push	{r7, lr}
 801d966:	b084      	sub	sp, #16
 801d968:	af00      	add	r7, sp, #0
 801d96a:	60f8      	str	r0, [r7, #12]
 801d96c:	60b9      	str	r1, [r7, #8]
 801d96e:	603b      	str	r3, [r7, #0]
 801d970:	1dfb      	adds	r3, r7, #7
 801d972:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d974:	e04b      	b.n	801da0e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d976:	69bb      	ldr	r3, [r7, #24]
 801d978:	3301      	adds	r3, #1
 801d97a:	d048      	beq.n	801da0e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d97c:	f7f6 f94a 	bl	8013c14 <HAL_GetTick>
 801d980:	0002      	movs	r2, r0
 801d982:	683b      	ldr	r3, [r7, #0]
 801d984:	1ad3      	subs	r3, r2, r3
 801d986:	69ba      	ldr	r2, [r7, #24]
 801d988:	429a      	cmp	r2, r3
 801d98a:	d302      	bcc.n	801d992 <UART_WaitOnFlagUntilTimeout+0x2e>
 801d98c:	69bb      	ldr	r3, [r7, #24]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d101      	bne.n	801d996 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801d992:	2303      	movs	r3, #3
 801d994:	e04b      	b.n	801da2e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	2204      	movs	r2, #4
 801d99e:	4013      	ands	r3, r2
 801d9a0:	d035      	beq.n	801da0e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	69db      	ldr	r3, [r3, #28]
 801d9a8:	2208      	movs	r2, #8
 801d9aa:	4013      	ands	r3, r2
 801d9ac:	2b08      	cmp	r3, #8
 801d9ae:	d111      	bne.n	801d9d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	681b      	ldr	r3, [r3, #0]
 801d9b4:	2208      	movs	r2, #8
 801d9b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	0018      	movs	r0, r3
 801d9bc:	f000 f9ca 	bl	801dd54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	2284      	movs	r2, #132	@ 0x84
 801d9c4:	2108      	movs	r1, #8
 801d9c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	2278      	movs	r2, #120	@ 0x78
 801d9cc:	2100      	movs	r1, #0
 801d9ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801d9d0:	2301      	movs	r3, #1
 801d9d2:	e02c      	b.n	801da2e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	69da      	ldr	r2, [r3, #28]
 801d9da:	2380      	movs	r3, #128	@ 0x80
 801d9dc:	011b      	lsls	r3, r3, #4
 801d9de:	401a      	ands	r2, r3
 801d9e0:	2380      	movs	r3, #128	@ 0x80
 801d9e2:	011b      	lsls	r3, r3, #4
 801d9e4:	429a      	cmp	r2, r3
 801d9e6:	d112      	bne.n	801da0e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	2280      	movs	r2, #128	@ 0x80
 801d9ee:	0112      	lsls	r2, r2, #4
 801d9f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	0018      	movs	r0, r3
 801d9f6:	f000 f9ad 	bl	801dd54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	2284      	movs	r2, #132	@ 0x84
 801d9fe:	2120      	movs	r1, #32
 801da00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	2278      	movs	r2, #120	@ 0x78
 801da06:	2100      	movs	r1, #0
 801da08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801da0a:	2303      	movs	r3, #3
 801da0c:	e00f      	b.n	801da2e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	681b      	ldr	r3, [r3, #0]
 801da12:	69db      	ldr	r3, [r3, #28]
 801da14:	68ba      	ldr	r2, [r7, #8]
 801da16:	4013      	ands	r3, r2
 801da18:	68ba      	ldr	r2, [r7, #8]
 801da1a:	1ad3      	subs	r3, r2, r3
 801da1c:	425a      	negs	r2, r3
 801da1e:	4153      	adcs	r3, r2
 801da20:	b2db      	uxtb	r3, r3
 801da22:	001a      	movs	r2, r3
 801da24:	1dfb      	adds	r3, r7, #7
 801da26:	781b      	ldrb	r3, [r3, #0]
 801da28:	429a      	cmp	r2, r3
 801da2a:	d0a4      	beq.n	801d976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801da2c:	2300      	movs	r3, #0
}
 801da2e:	0018      	movs	r0, r3
 801da30:	46bd      	mov	sp, r7
 801da32:	b004      	add	sp, #16
 801da34:	bd80      	pop	{r7, pc}
	...

0801da38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801da38:	b580      	push	{r7, lr}
 801da3a:	b090      	sub	sp, #64	@ 0x40
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	60f8      	str	r0, [r7, #12]
 801da40:	60b9      	str	r1, [r7, #8]
 801da42:	1dbb      	adds	r3, r7, #6
 801da44:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	68ba      	ldr	r2, [r7, #8]
 801da4a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	1dba      	adds	r2, r7, #6
 801da50:	2158      	movs	r1, #88	@ 0x58
 801da52:	8812      	ldrh	r2, [r2, #0]
 801da54:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	1dba      	adds	r2, r7, #6
 801da5a:	215a      	movs	r1, #90	@ 0x5a
 801da5c:	8812      	ldrh	r2, [r2, #0]
 801da5e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	2200      	movs	r2, #0
 801da64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	689a      	ldr	r2, [r3, #8]
 801da6a:	2380      	movs	r3, #128	@ 0x80
 801da6c:	015b      	lsls	r3, r3, #5
 801da6e:	429a      	cmp	r2, r3
 801da70:	d10d      	bne.n	801da8e <UART_Start_Receive_IT+0x56>
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	691b      	ldr	r3, [r3, #16]
 801da76:	2b00      	cmp	r3, #0
 801da78:	d104      	bne.n	801da84 <UART_Start_Receive_IT+0x4c>
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	225c      	movs	r2, #92	@ 0x5c
 801da7e:	4950      	ldr	r1, [pc, #320]	@ (801dbc0 <UART_Start_Receive_IT+0x188>)
 801da80:	5299      	strh	r1, [r3, r2]
 801da82:	e02e      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	225c      	movs	r2, #92	@ 0x5c
 801da88:	21ff      	movs	r1, #255	@ 0xff
 801da8a:	5299      	strh	r1, [r3, r2]
 801da8c:	e029      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	689b      	ldr	r3, [r3, #8]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d10d      	bne.n	801dab2 <UART_Start_Receive_IT+0x7a>
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	691b      	ldr	r3, [r3, #16]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d104      	bne.n	801daa8 <UART_Start_Receive_IT+0x70>
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	225c      	movs	r2, #92	@ 0x5c
 801daa2:	21ff      	movs	r1, #255	@ 0xff
 801daa4:	5299      	strh	r1, [r3, r2]
 801daa6:	e01c      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	225c      	movs	r2, #92	@ 0x5c
 801daac:	217f      	movs	r1, #127	@ 0x7f
 801daae:	5299      	strh	r1, [r3, r2]
 801dab0:	e017      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	689a      	ldr	r2, [r3, #8]
 801dab6:	2380      	movs	r3, #128	@ 0x80
 801dab8:	055b      	lsls	r3, r3, #21
 801daba:	429a      	cmp	r2, r3
 801dabc:	d10d      	bne.n	801dada <UART_Start_Receive_IT+0xa2>
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	691b      	ldr	r3, [r3, #16]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d104      	bne.n	801dad0 <UART_Start_Receive_IT+0x98>
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	225c      	movs	r2, #92	@ 0x5c
 801daca:	217f      	movs	r1, #127	@ 0x7f
 801dacc:	5299      	strh	r1, [r3, r2]
 801dace:	e008      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	225c      	movs	r2, #92	@ 0x5c
 801dad4:	213f      	movs	r1, #63	@ 0x3f
 801dad6:	5299      	strh	r1, [r3, r2]
 801dad8:	e003      	b.n	801dae2 <UART_Start_Receive_IT+0xaa>
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	225c      	movs	r2, #92	@ 0x5c
 801dade:	2100      	movs	r1, #0
 801dae0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	2284      	movs	r2, #132	@ 0x84
 801dae6:	2100      	movs	r1, #0
 801dae8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	2280      	movs	r2, #128	@ 0x80
 801daee:	2122      	movs	r1, #34	@ 0x22
 801daf0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801daf2:	f3ef 8310 	mrs	r3, PRIMASK
 801daf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801daf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dafc:	2301      	movs	r3, #1
 801dafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db02:	f383 8810 	msr	PRIMASK, r3
}
 801db06:	46c0      	nop			@ (mov r8, r8)
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	689a      	ldr	r2, [r3, #8]
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	2101      	movs	r1, #1
 801db14:	430a      	orrs	r2, r1
 801db16:	609a      	str	r2, [r3, #8]
 801db18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db1e:	f383 8810 	msr	PRIMASK, r3
}
 801db22:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	689a      	ldr	r2, [r3, #8]
 801db28:	2380      	movs	r3, #128	@ 0x80
 801db2a:	015b      	lsls	r3, r3, #5
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d107      	bne.n	801db40 <UART_Start_Receive_IT+0x108>
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	691b      	ldr	r3, [r3, #16]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d103      	bne.n	801db40 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	4a22      	ldr	r2, [pc, #136]	@ (801dbc4 <UART_Start_Receive_IT+0x18c>)
 801db3c:	669a      	str	r2, [r3, #104]	@ 0x68
 801db3e:	e002      	b.n	801db46 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	4a21      	ldr	r2, [pc, #132]	@ (801dbc8 <UART_Start_Receive_IT+0x190>)
 801db44:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	691b      	ldr	r3, [r3, #16]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d019      	beq.n	801db82 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db4e:	f3ef 8310 	mrs	r3, PRIMASK
 801db52:	61fb      	str	r3, [r7, #28]
  return(result);
 801db54:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801db56:	637b      	str	r3, [r7, #52]	@ 0x34
 801db58:	2301      	movs	r3, #1
 801db5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db5c:	6a3b      	ldr	r3, [r7, #32]
 801db5e:	f383 8810 	msr	PRIMASK, r3
}
 801db62:	46c0      	nop			@ (mov r8, r8)
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	681a      	ldr	r2, [r3, #0]
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	2190      	movs	r1, #144	@ 0x90
 801db70:	0049      	lsls	r1, r1, #1
 801db72:	430a      	orrs	r2, r1
 801db74:	601a      	str	r2, [r3, #0]
 801db76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801db78:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db7c:	f383 8810 	msr	PRIMASK, r3
}
 801db80:	e018      	b.n	801dbb4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db82:	f3ef 8310 	mrs	r3, PRIMASK
 801db86:	613b      	str	r3, [r7, #16]
  return(result);
 801db88:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801db8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801db8c:	2301      	movs	r3, #1
 801db8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db90:	697b      	ldr	r3, [r7, #20]
 801db92:	f383 8810 	msr	PRIMASK, r3
}
 801db96:	46c0      	nop			@ (mov r8, r8)
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	681a      	ldr	r2, [r3, #0]
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	2120      	movs	r1, #32
 801dba4:	430a      	orrs	r2, r1
 801dba6:	601a      	str	r2, [r3, #0]
 801dba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbac:	69bb      	ldr	r3, [r7, #24]
 801dbae:	f383 8810 	msr	PRIMASK, r3
}
 801dbb2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801dbb4:	2300      	movs	r3, #0
}
 801dbb6:	0018      	movs	r0, r3
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	b010      	add	sp, #64	@ 0x40
 801dbbc:	bd80      	pop	{r7, pc}
 801dbbe:	46c0      	nop			@ (mov r8, r8)
 801dbc0:	000001ff 	.word	0x000001ff
 801dbc4:	0801e339 	.word	0x0801e339
 801dbc8:	0801e16d 	.word	0x0801e16d

0801dbcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801dbcc:	b580      	push	{r7, lr}
 801dbce:	b090      	sub	sp, #64	@ 0x40
 801dbd0:	af00      	add	r7, sp, #0
 801dbd2:	60f8      	str	r0, [r7, #12]
 801dbd4:	60b9      	str	r1, [r7, #8]
 801dbd6:	1dbb      	adds	r3, r7, #6
 801dbd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	68ba      	ldr	r2, [r7, #8]
 801dbde:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	1dba      	adds	r2, r7, #6
 801dbe4:	2158      	movs	r1, #88	@ 0x58
 801dbe6:	8812      	ldrh	r2, [r2, #0]
 801dbe8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	2284      	movs	r2, #132	@ 0x84
 801dbee:	2100      	movs	r1, #0
 801dbf0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	2280      	movs	r2, #128	@ 0x80
 801dbf6:	2122      	movs	r1, #34	@ 0x22
 801dbf8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d028      	beq.n	801dc54 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc06:	4a3e      	ldr	r2, [pc, #248]	@ (801dd00 <UART_Start_Receive_DMA+0x134>)
 801dc08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc0e:	4a3d      	ldr	r2, [pc, #244]	@ (801dd04 <UART_Start_Receive_DMA+0x138>)
 801dc10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc16:	4a3c      	ldr	r2, [pc, #240]	@ (801dd08 <UART_Start_Receive_DMA+0x13c>)
 801dc18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc1e:	2200      	movs	r2, #0
 801dc20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	3324      	adds	r3, #36	@ 0x24
 801dc2c:	0019      	movs	r1, r3
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc32:	001a      	movs	r2, r3
 801dc34:	1dbb      	adds	r3, r7, #6
 801dc36:	881b      	ldrh	r3, [r3, #0]
 801dc38:	f7f6 fd3e 	bl	80146b8 <HAL_DMA_Start_IT>
 801dc3c:	1e03      	subs	r3, r0, #0
 801dc3e:	d009      	beq.n	801dc54 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	2284      	movs	r2, #132	@ 0x84
 801dc44:	2110      	movs	r1, #16
 801dc46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	2280      	movs	r2, #128	@ 0x80
 801dc4c:	2120      	movs	r1, #32
 801dc4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801dc50:	2301      	movs	r3, #1
 801dc52:	e050      	b.n	801dcf6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	691b      	ldr	r3, [r3, #16]
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d019      	beq.n	801dc90 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc5c:	f3ef 8310 	mrs	r3, PRIMASK
 801dc60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801dc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dc66:	2301      	movs	r3, #1
 801dc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc6c:	f383 8810 	msr	PRIMASK, r3
}
 801dc70:	46c0      	nop			@ (mov r8, r8)
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	681a      	ldr	r2, [r3, #0]
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	2180      	movs	r1, #128	@ 0x80
 801dc7e:	0049      	lsls	r1, r1, #1
 801dc80:	430a      	orrs	r2, r1
 801dc82:	601a      	str	r2, [r3, #0]
 801dc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc8a:	f383 8810 	msr	PRIMASK, r3
}
 801dc8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc90:	f3ef 8310 	mrs	r3, PRIMASK
 801dc94:	613b      	str	r3, [r7, #16]
  return(result);
 801dc96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc98:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dc9a:	2301      	movs	r3, #1
 801dc9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc9e:	697b      	ldr	r3, [r7, #20]
 801dca0:	f383 8810 	msr	PRIMASK, r3
}
 801dca4:	46c0      	nop			@ (mov r8, r8)
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	689a      	ldr	r2, [r3, #8]
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	2101      	movs	r1, #1
 801dcb2:	430a      	orrs	r2, r1
 801dcb4:	609a      	str	r2, [r3, #8]
 801dcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcba:	69bb      	ldr	r3, [r7, #24]
 801dcbc:	f383 8810 	msr	PRIMASK, r3
}
 801dcc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 801dcc6:	61fb      	str	r3, [r7, #28]
  return(result);
 801dcc8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dcca:	637b      	str	r3, [r7, #52]	@ 0x34
 801dccc:	2301      	movs	r3, #1
 801dcce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcd0:	6a3b      	ldr	r3, [r7, #32]
 801dcd2:	f383 8810 	msr	PRIMASK, r3
}
 801dcd6:	46c0      	nop			@ (mov r8, r8)
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	689a      	ldr	r2, [r3, #8]
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	2140      	movs	r1, #64	@ 0x40
 801dce4:	430a      	orrs	r2, r1
 801dce6:	609a      	str	r2, [r3, #8]
 801dce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dcea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcee:	f383 8810 	msr	PRIMASK, r3
}
 801dcf2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801dcf4:	2300      	movs	r3, #0
}
 801dcf6:	0018      	movs	r0, r3
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	b010      	add	sp, #64	@ 0x40
 801dcfc:	bd80      	pop	{r7, pc}
 801dcfe:	46c0      	nop			@ (mov r8, r8)
 801dd00:	0801dedd 	.word	0x0801dedd
 801dd04:	0801e011 	.word	0x0801e011
 801dd08:	0801e059 	.word	0x0801e059

0801dd0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b086      	sub	sp, #24
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd14:	f3ef 8310 	mrs	r3, PRIMASK
 801dd18:	60bb      	str	r3, [r7, #8]
  return(result);
 801dd1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801dd1c:	617b      	str	r3, [r7, #20]
 801dd1e:	2301      	movs	r3, #1
 801dd20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	f383 8810 	msr	PRIMASK, r3
}
 801dd28:	46c0      	nop			@ (mov r8, r8)
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	681a      	ldr	r2, [r3, #0]
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	21c0      	movs	r1, #192	@ 0xc0
 801dd36:	438a      	bics	r2, r1
 801dd38:	601a      	str	r2, [r3, #0]
 801dd3a:	697b      	ldr	r3, [r7, #20]
 801dd3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd3e:	693b      	ldr	r3, [r7, #16]
 801dd40:	f383 8810 	msr	PRIMASK, r3
}
 801dd44:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	2220      	movs	r2, #32
 801dd4a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801dd4c:	46c0      	nop			@ (mov r8, r8)
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	b006      	add	sp, #24
 801dd52:	bd80      	pop	{r7, pc}

0801dd54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801dd54:	b580      	push	{r7, lr}
 801dd56:	b08e      	sub	sp, #56	@ 0x38
 801dd58:	af00      	add	r7, sp, #0
 801dd5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd5c:	f3ef 8310 	mrs	r3, PRIMASK
 801dd60:	617b      	str	r3, [r7, #20]
  return(result);
 801dd62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dd64:	637b      	str	r3, [r7, #52]	@ 0x34
 801dd66:	2301      	movs	r3, #1
 801dd68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd6a:	69bb      	ldr	r3, [r7, #24]
 801dd6c:	f383 8810 	msr	PRIMASK, r3
}
 801dd70:	46c0      	nop			@ (mov r8, r8)
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	681a      	ldr	r2, [r3, #0]
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	4926      	ldr	r1, [pc, #152]	@ (801de18 <UART_EndRxTransfer+0xc4>)
 801dd7e:	400a      	ands	r2, r1
 801dd80:	601a      	str	r2, [r3, #0]
 801dd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	f383 8810 	msr	PRIMASK, r3
}
 801dd8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd8e:	f3ef 8310 	mrs	r3, PRIMASK
 801dd92:	623b      	str	r3, [r7, #32]
  return(result);
 801dd94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dd96:	633b      	str	r3, [r7, #48]	@ 0x30
 801dd98:	2301      	movs	r3, #1
 801dd9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd9e:	f383 8810 	msr	PRIMASK, r3
}
 801dda2:	46c0      	nop			@ (mov r8, r8)
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	689a      	ldr	r2, [r3, #8]
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	2101      	movs	r1, #1
 801ddb0:	438a      	bics	r2, r1
 801ddb2:	609a      	str	r2, [r3, #8]
 801ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddba:	f383 8810 	msr	PRIMASK, r3
}
 801ddbe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ddc4:	2b01      	cmp	r3, #1
 801ddc6:	d118      	bne.n	801ddfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddc8:	f3ef 8310 	mrs	r3, PRIMASK
 801ddcc:	60bb      	str	r3, [r7, #8]
  return(result);
 801ddce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ddd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ddd2:	2301      	movs	r3, #1
 801ddd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	f383 8810 	msr	PRIMASK, r3
}
 801dddc:	46c0      	nop			@ (mov r8, r8)
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	681a      	ldr	r2, [r3, #0]
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	2110      	movs	r1, #16
 801ddea:	438a      	bics	r2, r1
 801ddec:	601a      	str	r2, [r3, #0]
 801ddee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddf2:	693b      	ldr	r3, [r7, #16]
 801ddf4:	f383 8810 	msr	PRIMASK, r3
}
 801ddf8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	2280      	movs	r2, #128	@ 0x80
 801ddfe:	2120      	movs	r1, #32
 801de00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	2200      	movs	r2, #0
 801de06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	2200      	movs	r2, #0
 801de0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801de0e:	46c0      	nop			@ (mov r8, r8)
 801de10:	46bd      	mov	sp, r7
 801de12:	b00e      	add	sp, #56	@ 0x38
 801de14:	bd80      	pop	{r7, pc}
 801de16:	46c0      	nop			@ (mov r8, r8)
 801de18:	fffffedf 	.word	0xfffffedf

0801de1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b08c      	sub	sp, #48	@ 0x30
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	2220      	movs	r2, #32
 801de32:	4013      	ands	r3, r2
 801de34:	d135      	bne.n	801dea2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de38:	2252      	movs	r2, #82	@ 0x52
 801de3a:	2100      	movs	r1, #0
 801de3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de3e:	f3ef 8310 	mrs	r3, PRIMASK
 801de42:	60fb      	str	r3, [r7, #12]
  return(result);
 801de44:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801de46:	62bb      	str	r3, [r7, #40]	@ 0x28
 801de48:	2301      	movs	r3, #1
 801de4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de4c:	693b      	ldr	r3, [r7, #16]
 801de4e:	f383 8810 	msr	PRIMASK, r3
}
 801de52:	46c0      	nop			@ (mov r8, r8)
 801de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	689a      	ldr	r2, [r3, #8]
 801de5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	2180      	movs	r1, #128	@ 0x80
 801de60:	438a      	bics	r2, r1
 801de62:	609a      	str	r2, [r3, #8]
 801de64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de68:	697b      	ldr	r3, [r7, #20]
 801de6a:	f383 8810 	msr	PRIMASK, r3
}
 801de6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de70:	f3ef 8310 	mrs	r3, PRIMASK
 801de74:	61bb      	str	r3, [r7, #24]
  return(result);
 801de76:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801de78:	627b      	str	r3, [r7, #36]	@ 0x24
 801de7a:	2301      	movs	r3, #1
 801de7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de7e:	69fb      	ldr	r3, [r7, #28]
 801de80:	f383 8810 	msr	PRIMASK, r3
}
 801de84:	46c0      	nop			@ (mov r8, r8)
 801de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	681a      	ldr	r2, [r3, #0]
 801de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	2140      	movs	r1, #64	@ 0x40
 801de92:	430a      	orrs	r2, r1
 801de94:	601a      	str	r2, [r3, #0]
 801de96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de9a:	6a3b      	ldr	r3, [r7, #32]
 801de9c:	f383 8810 	msr	PRIMASK, r3
}
 801dea0:	e006      	b.n	801deb0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801dea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dea4:	228c      	movs	r2, #140	@ 0x8c
 801dea6:	589b      	ldr	r3, [r3, r2]
 801dea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801deaa:	0010      	movs	r0, r2
 801deac:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801deae:	46c0      	nop			@ (mov r8, r8)
 801deb0:	46c0      	nop			@ (mov r8, r8)
 801deb2:	46bd      	mov	sp, r7
 801deb4:	b00c      	add	sp, #48	@ 0x30
 801deb6:	bd80      	pop	{r7, pc}

0801deb8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b084      	sub	sp, #16
 801debc:	af00      	add	r7, sp, #0
 801debe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dec4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	2288      	movs	r2, #136	@ 0x88
 801deca:	589b      	ldr	r3, [r3, r2]
 801decc:	68fa      	ldr	r2, [r7, #12]
 801dece:	0010      	movs	r0, r2
 801ded0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ded2:	46c0      	nop			@ (mov r8, r8)
 801ded4:	46bd      	mov	sp, r7
 801ded6:	b004      	add	sp, #16
 801ded8:	bd80      	pop	{r7, pc}
	...

0801dedc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b094      	sub	sp, #80	@ 0x50
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dee8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	2220      	movs	r2, #32
 801def2:	4013      	ands	r3, r2
 801def4:	d16f      	bne.n	801dfd6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801def6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801def8:	225a      	movs	r2, #90	@ 0x5a
 801defa:	2100      	movs	r1, #0
 801defc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801defe:	f3ef 8310 	mrs	r3, PRIMASK
 801df02:	61bb      	str	r3, [r7, #24]
  return(result);
 801df04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801df06:	64bb      	str	r3, [r7, #72]	@ 0x48
 801df08:	2301      	movs	r3, #1
 801df0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df0c:	69fb      	ldr	r3, [r7, #28]
 801df0e:	f383 8810 	msr	PRIMASK, r3
}
 801df12:	46c0      	nop			@ (mov r8, r8)
 801df14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	493b      	ldr	r1, [pc, #236]	@ (801e00c <UART_DMAReceiveCplt+0x130>)
 801df20:	400a      	ands	r2, r1
 801df22:	601a      	str	r2, [r3, #0]
 801df24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801df26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df28:	6a3b      	ldr	r3, [r7, #32]
 801df2a:	f383 8810 	msr	PRIMASK, r3
}
 801df2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df30:	f3ef 8310 	mrs	r3, PRIMASK
 801df34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801df36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801df38:	647b      	str	r3, [r7, #68]	@ 0x44
 801df3a:	2301      	movs	r3, #1
 801df3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df40:	f383 8810 	msr	PRIMASK, r3
}
 801df44:	46c0      	nop			@ (mov r8, r8)
 801df46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	689a      	ldr	r2, [r3, #8]
 801df4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	2101      	movs	r1, #1
 801df52:	438a      	bics	r2, r1
 801df54:	609a      	str	r2, [r3, #8]
 801df56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801df58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df5c:	f383 8810 	msr	PRIMASK, r3
}
 801df60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df62:	f3ef 8310 	mrs	r3, PRIMASK
 801df66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801df68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801df6a:	643b      	str	r3, [r7, #64]	@ 0x40
 801df6c:	2301      	movs	r3, #1
 801df6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df72:	f383 8810 	msr	PRIMASK, r3
}
 801df76:	46c0      	nop			@ (mov r8, r8)
 801df78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	689a      	ldr	r2, [r3, #8]
 801df7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	2140      	movs	r1, #64	@ 0x40
 801df84:	438a      	bics	r2, r1
 801df86:	609a      	str	r2, [r3, #8]
 801df88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801df8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df8e:	f383 8810 	msr	PRIMASK, r3
}
 801df92:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801df94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df96:	2280      	movs	r2, #128	@ 0x80
 801df98:	2120      	movs	r1, #32
 801df9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dfa0:	2b01      	cmp	r3, #1
 801dfa2:	d118      	bne.n	801dfd6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dfa4:	f3ef 8310 	mrs	r3, PRIMASK
 801dfa8:	60fb      	str	r3, [r7, #12]
  return(result);
 801dfaa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dfac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dfae:	2301      	movs	r3, #1
 801dfb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfb2:	693b      	ldr	r3, [r7, #16]
 801dfb4:	f383 8810 	msr	PRIMASK, r3
}
 801dfb8:	46c0      	nop			@ (mov r8, r8)
 801dfba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	681a      	ldr	r2, [r3, #0]
 801dfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	2110      	movs	r1, #16
 801dfc6:	438a      	bics	r2, r1
 801dfc8:	601a      	str	r2, [r3, #0]
 801dfca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfce:	697b      	ldr	r3, [r7, #20]
 801dfd0:	f383 8810 	msr	PRIMASK, r3
}
 801dfd4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dfd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dfd8:	2200      	movs	r2, #0
 801dfda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dfde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dfe0:	2b01      	cmp	r3, #1
 801dfe2:	d109      	bne.n	801dff8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801dfe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dfe6:	22ac      	movs	r2, #172	@ 0xac
 801dfe8:	589b      	ldr	r3, [r3, r2]
 801dfea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801dfec:	2158      	movs	r1, #88	@ 0x58
 801dfee:	5a51      	ldrh	r1, [r2, r1]
 801dff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801dff2:	0010      	movs	r0, r2
 801dff4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801dff6:	e005      	b.n	801e004 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801dff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dffa:	2294      	movs	r2, #148	@ 0x94
 801dffc:	589b      	ldr	r3, [r3, r2]
 801dffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e000:	0010      	movs	r0, r2
 801e002:	4798      	blx	r3
}
 801e004:	46c0      	nop			@ (mov r8, r8)
 801e006:	46bd      	mov	sp, r7
 801e008:	b014      	add	sp, #80	@ 0x50
 801e00a:	bd80      	pop	{r7, pc}
 801e00c:	fffffeff 	.word	0xfffffeff

0801e010 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	b084      	sub	sp, #16
 801e014:	af00      	add	r7, sp, #0
 801e016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e01c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	2201      	movs	r2, #1
 801e022:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e028:	2b01      	cmp	r3, #1
 801e02a:	d10b      	bne.n	801e044 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	22ac      	movs	r2, #172	@ 0xac
 801e030:	589b      	ldr	r3, [r3, r2]
 801e032:	68fa      	ldr	r2, [r7, #12]
 801e034:	2158      	movs	r1, #88	@ 0x58
 801e036:	5a52      	ldrh	r2, [r2, r1]
 801e038:	0852      	lsrs	r2, r2, #1
 801e03a:	b291      	uxth	r1, r2
 801e03c:	68fa      	ldr	r2, [r7, #12]
 801e03e:	0010      	movs	r0, r2
 801e040:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e042:	e005      	b.n	801e050 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	2290      	movs	r2, #144	@ 0x90
 801e048:	589b      	ldr	r3, [r3, r2]
 801e04a:	68fa      	ldr	r2, [r7, #12]
 801e04c:	0010      	movs	r0, r2
 801e04e:	4798      	blx	r3
}
 801e050:	46c0      	nop			@ (mov r8, r8)
 801e052:	46bd      	mov	sp, r7
 801e054:	b004      	add	sp, #16
 801e056:	bd80      	pop	{r7, pc}

0801e058 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b086      	sub	sp, #24
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e064:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801e066:	697b      	ldr	r3, [r7, #20]
 801e068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e06a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801e06c:	697b      	ldr	r3, [r7, #20]
 801e06e:	2280      	movs	r2, #128	@ 0x80
 801e070:	589b      	ldr	r3, [r3, r2]
 801e072:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801e074:	697b      	ldr	r3, [r7, #20]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	689b      	ldr	r3, [r3, #8]
 801e07a:	2280      	movs	r2, #128	@ 0x80
 801e07c:	4013      	ands	r3, r2
 801e07e:	2b80      	cmp	r3, #128	@ 0x80
 801e080:	d10a      	bne.n	801e098 <UART_DMAError+0x40>
 801e082:	693b      	ldr	r3, [r7, #16]
 801e084:	2b21      	cmp	r3, #33	@ 0x21
 801e086:	d107      	bne.n	801e098 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801e088:	697b      	ldr	r3, [r7, #20]
 801e08a:	2252      	movs	r2, #82	@ 0x52
 801e08c:	2100      	movs	r1, #0
 801e08e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	0018      	movs	r0, r3
 801e094:	f7ff fe3a 	bl	801dd0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801e098:	697b      	ldr	r3, [r7, #20]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	689b      	ldr	r3, [r3, #8]
 801e09e:	2240      	movs	r2, #64	@ 0x40
 801e0a0:	4013      	ands	r3, r2
 801e0a2:	2b40      	cmp	r3, #64	@ 0x40
 801e0a4:	d10a      	bne.n	801e0bc <UART_DMAError+0x64>
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	2b22      	cmp	r3, #34	@ 0x22
 801e0aa:	d107      	bne.n	801e0bc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801e0ac:	697b      	ldr	r3, [r7, #20]
 801e0ae:	225a      	movs	r2, #90	@ 0x5a
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801e0b4:	697b      	ldr	r3, [r7, #20]
 801e0b6:	0018      	movs	r0, r3
 801e0b8:	f7ff fe4c 	bl	801dd54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e0bc:	697b      	ldr	r3, [r7, #20]
 801e0be:	2284      	movs	r2, #132	@ 0x84
 801e0c0:	589b      	ldr	r3, [r3, r2]
 801e0c2:	2210      	movs	r2, #16
 801e0c4:	431a      	orrs	r2, r3
 801e0c6:	697b      	ldr	r3, [r7, #20]
 801e0c8:	2184      	movs	r1, #132	@ 0x84
 801e0ca:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e0cc:	697b      	ldr	r3, [r7, #20]
 801e0ce:	2298      	movs	r2, #152	@ 0x98
 801e0d0:	589b      	ldr	r3, [r3, r2]
 801e0d2:	697a      	ldr	r2, [r7, #20]
 801e0d4:	0010      	movs	r0, r2
 801e0d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e0d8:	46c0      	nop			@ (mov r8, r8)
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	b006      	add	sp, #24
 801e0de:	bd80      	pop	{r7, pc}

0801e0e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b084      	sub	sp, #16
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e0ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e0ee:	68fb      	ldr	r3, [r7, #12]
 801e0f0:	225a      	movs	r2, #90	@ 0x5a
 801e0f2:	2100      	movs	r1, #0
 801e0f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	2252      	movs	r2, #82	@ 0x52
 801e0fa:	2100      	movs	r1, #0
 801e0fc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	2298      	movs	r2, #152	@ 0x98
 801e102:	589b      	ldr	r3, [r3, r2]
 801e104:	68fa      	ldr	r2, [r7, #12]
 801e106:	0010      	movs	r0, r2
 801e108:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e10a:	46c0      	nop			@ (mov r8, r8)
 801e10c:	46bd      	mov	sp, r7
 801e10e:	b004      	add	sp, #16
 801e110:	bd80      	pop	{r7, pc}

0801e112 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e112:	b580      	push	{r7, lr}
 801e114:	b086      	sub	sp, #24
 801e116:	af00      	add	r7, sp, #0
 801e118:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e11a:	f3ef 8310 	mrs	r3, PRIMASK
 801e11e:	60bb      	str	r3, [r7, #8]
  return(result);
 801e120:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e122:	617b      	str	r3, [r7, #20]
 801e124:	2301      	movs	r3, #1
 801e126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	f383 8810 	msr	PRIMASK, r3
}
 801e12e:	46c0      	nop			@ (mov r8, r8)
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	681a      	ldr	r2, [r3, #0]
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	2140      	movs	r1, #64	@ 0x40
 801e13c:	438a      	bics	r2, r1
 801e13e:	601a      	str	r2, [r3, #0]
 801e140:	697b      	ldr	r3, [r7, #20]
 801e142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e144:	693b      	ldr	r3, [r7, #16]
 801e146:	f383 8810 	msr	PRIMASK, r3
}
 801e14a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	2220      	movs	r2, #32
 801e150:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	2200      	movs	r2, #0
 801e156:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	228c      	movs	r2, #140	@ 0x8c
 801e15c:	589b      	ldr	r3, [r3, r2]
 801e15e:	687a      	ldr	r2, [r7, #4]
 801e160:	0010      	movs	r0, r2
 801e162:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e164:	46c0      	nop			@ (mov r8, r8)
 801e166:	46bd      	mov	sp, r7
 801e168:	b006      	add	sp, #24
 801e16a:	bd80      	pop	{r7, pc}

0801e16c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e16c:	b580      	push	{r7, lr}
 801e16e:	b094      	sub	sp, #80	@ 0x50
 801e170:	af00      	add	r7, sp, #0
 801e172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e174:	204e      	movs	r0, #78	@ 0x4e
 801e176:	183b      	adds	r3, r7, r0
 801e178:	687a      	ldr	r2, [r7, #4]
 801e17a:	215c      	movs	r1, #92	@ 0x5c
 801e17c:	5a52      	ldrh	r2, [r2, r1]
 801e17e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	2280      	movs	r2, #128	@ 0x80
 801e184:	589b      	ldr	r3, [r3, r2]
 801e186:	2b22      	cmp	r3, #34	@ 0x22
 801e188:	d000      	beq.n	801e18c <UART_RxISR_8BIT+0x20>
 801e18a:	e0c2      	b.n	801e312 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e192:	214c      	movs	r1, #76	@ 0x4c
 801e194:	187b      	adds	r3, r7, r1
 801e196:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e198:	187b      	adds	r3, r7, r1
 801e19a:	881b      	ldrh	r3, [r3, #0]
 801e19c:	b2da      	uxtb	r2, r3
 801e19e:	183b      	adds	r3, r7, r0
 801e1a0:	881b      	ldrh	r3, [r3, #0]
 801e1a2:	b2d9      	uxtb	r1, r3
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e1a8:	400a      	ands	r2, r1
 801e1aa:	b2d2      	uxtb	r2, r2
 801e1ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e1b2:	1c5a      	adds	r2, r3, #1
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	225a      	movs	r2, #90	@ 0x5a
 801e1bc:	5a9b      	ldrh	r3, [r3, r2]
 801e1be:	b29b      	uxth	r3, r3
 801e1c0:	3b01      	subs	r3, #1
 801e1c2:	b299      	uxth	r1, r3
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	225a      	movs	r2, #90	@ 0x5a
 801e1c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	225a      	movs	r2, #90	@ 0x5a
 801e1ce:	5a9b      	ldrh	r3, [r3, r2]
 801e1d0:	b29b      	uxth	r3, r3
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d000      	beq.n	801e1d8 <UART_RxISR_8BIT+0x6c>
 801e1d6:	e0a4      	b.n	801e322 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1d8:	f3ef 8310 	mrs	r3, PRIMASK
 801e1dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e1e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e1e2:	2301      	movs	r3, #1
 801e1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1e8:	f383 8810 	msr	PRIMASK, r3
}
 801e1ec:	46c0      	nop			@ (mov r8, r8)
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	681a      	ldr	r2, [r3, #0]
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	494c      	ldr	r1, [pc, #304]	@ (801e32c <UART_RxISR_8BIT+0x1c0>)
 801e1fa:	400a      	ands	r2, r1
 801e1fc:	601a      	str	r2, [r3, #0]
 801e1fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e204:	f383 8810 	msr	PRIMASK, r3
}
 801e208:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e20a:	f3ef 8310 	mrs	r3, PRIMASK
 801e20e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e212:	647b      	str	r3, [r7, #68]	@ 0x44
 801e214:	2301      	movs	r3, #1
 801e216:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e21a:	f383 8810 	msr	PRIMASK, r3
}
 801e21e:	46c0      	nop			@ (mov r8, r8)
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	689a      	ldr	r2, [r3, #8]
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	2101      	movs	r1, #1
 801e22c:	438a      	bics	r2, r1
 801e22e:	609a      	str	r2, [r3, #8]
 801e230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e232:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e236:	f383 8810 	msr	PRIMASK, r3
}
 801e23a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	2280      	movs	r2, #128	@ 0x80
 801e240:	2120      	movs	r1, #32
 801e242:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	2200      	movs	r2, #0
 801e248:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	2200      	movs	r2, #0
 801e24e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	4a36      	ldr	r2, [pc, #216]	@ (801e330 <UART_RxISR_8BIT+0x1c4>)
 801e256:	4293      	cmp	r3, r2
 801e258:	d01f      	beq.n	801e29a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	685a      	ldr	r2, [r3, #4]
 801e260:	2380      	movs	r3, #128	@ 0x80
 801e262:	041b      	lsls	r3, r3, #16
 801e264:	4013      	ands	r3, r2
 801e266:	d018      	beq.n	801e29a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e268:	f3ef 8310 	mrs	r3, PRIMASK
 801e26c:	61bb      	str	r3, [r7, #24]
  return(result);
 801e26e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e270:	643b      	str	r3, [r7, #64]	@ 0x40
 801e272:	2301      	movs	r3, #1
 801e274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e276:	69fb      	ldr	r3, [r7, #28]
 801e278:	f383 8810 	msr	PRIMASK, r3
}
 801e27c:	46c0      	nop			@ (mov r8, r8)
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	681a      	ldr	r2, [r3, #0]
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	492a      	ldr	r1, [pc, #168]	@ (801e334 <UART_RxISR_8BIT+0x1c8>)
 801e28a:	400a      	ands	r2, r1
 801e28c:	601a      	str	r2, [r3, #0]
 801e28e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e290:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e292:	6a3b      	ldr	r3, [r7, #32]
 801e294:	f383 8810 	msr	PRIMASK, r3
}
 801e298:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e29e:	2b01      	cmp	r3, #1
 801e2a0:	d130      	bne.n	801e304 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e2ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801e2ae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2b2:	2301      	movs	r3, #1
 801e2b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2b6:	693b      	ldr	r3, [r7, #16]
 801e2b8:	f383 8810 	msr	PRIMASK, r3
}
 801e2bc:	46c0      	nop			@ (mov r8, r8)
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	681a      	ldr	r2, [r3, #0]
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	2110      	movs	r1, #16
 801e2ca:	438a      	bics	r2, r1
 801e2cc:	601a      	str	r2, [r3, #0]
 801e2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e2d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	f383 8810 	msr	PRIMASK, r3
}
 801e2d8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	69db      	ldr	r3, [r3, #28]
 801e2e0:	2210      	movs	r2, #16
 801e2e2:	4013      	ands	r3, r2
 801e2e4:	2b10      	cmp	r3, #16
 801e2e6:	d103      	bne.n	801e2f0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	2210      	movs	r2, #16
 801e2ee:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	22ac      	movs	r2, #172	@ 0xac
 801e2f4:	589b      	ldr	r3, [r3, r2]
 801e2f6:	687a      	ldr	r2, [r7, #4]
 801e2f8:	2158      	movs	r1, #88	@ 0x58
 801e2fa:	5a51      	ldrh	r1, [r2, r1]
 801e2fc:	687a      	ldr	r2, [r7, #4]
 801e2fe:	0010      	movs	r0, r2
 801e300:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e302:	e00e      	b.n	801e322 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	2294      	movs	r2, #148	@ 0x94
 801e308:	589b      	ldr	r3, [r3, r2]
 801e30a:	687a      	ldr	r2, [r7, #4]
 801e30c:	0010      	movs	r0, r2
 801e30e:	4798      	blx	r3
}
 801e310:	e007      	b.n	801e322 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	699a      	ldr	r2, [r3, #24]
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	2108      	movs	r1, #8
 801e31e:	430a      	orrs	r2, r1
 801e320:	619a      	str	r2, [r3, #24]
}
 801e322:	46c0      	nop			@ (mov r8, r8)
 801e324:	46bd      	mov	sp, r7
 801e326:	b014      	add	sp, #80	@ 0x50
 801e328:	bd80      	pop	{r7, pc}
 801e32a:	46c0      	nop			@ (mov r8, r8)
 801e32c:	fffffedf 	.word	0xfffffedf
 801e330:	40004800 	.word	0x40004800
 801e334:	fbffffff 	.word	0xfbffffff

0801e338 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e338:	b580      	push	{r7, lr}
 801e33a:	b094      	sub	sp, #80	@ 0x50
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e340:	204e      	movs	r0, #78	@ 0x4e
 801e342:	183b      	adds	r3, r7, r0
 801e344:	687a      	ldr	r2, [r7, #4]
 801e346:	215c      	movs	r1, #92	@ 0x5c
 801e348:	5a52      	ldrh	r2, [r2, r1]
 801e34a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	2280      	movs	r2, #128	@ 0x80
 801e350:	589b      	ldr	r3, [r3, r2]
 801e352:	2b22      	cmp	r3, #34	@ 0x22
 801e354:	d000      	beq.n	801e358 <UART_RxISR_16BIT+0x20>
 801e356:	e0c2      	b.n	801e4de <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e35e:	214c      	movs	r1, #76	@ 0x4c
 801e360:	187b      	adds	r3, r7, r1
 801e362:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e368:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801e36a:	187b      	adds	r3, r7, r1
 801e36c:	183a      	adds	r2, r7, r0
 801e36e:	881b      	ldrh	r3, [r3, #0]
 801e370:	8812      	ldrh	r2, [r2, #0]
 801e372:	4013      	ands	r3, r2
 801e374:	b29a      	uxth	r2, r3
 801e376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e37e:	1c9a      	adds	r2, r3, #2
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	225a      	movs	r2, #90	@ 0x5a
 801e388:	5a9b      	ldrh	r3, [r3, r2]
 801e38a:	b29b      	uxth	r3, r3
 801e38c:	3b01      	subs	r3, #1
 801e38e:	b299      	uxth	r1, r3
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	225a      	movs	r2, #90	@ 0x5a
 801e394:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	225a      	movs	r2, #90	@ 0x5a
 801e39a:	5a9b      	ldrh	r3, [r3, r2]
 801e39c:	b29b      	uxth	r3, r3
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d000      	beq.n	801e3a4 <UART_RxISR_16BIT+0x6c>
 801e3a2:	e0a4      	b.n	801e4ee <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3a4:	f3ef 8310 	mrs	r3, PRIMASK
 801e3a8:	623b      	str	r3, [r7, #32]
  return(result);
 801e3aa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e3ac:	647b      	str	r3, [r7, #68]	@ 0x44
 801e3ae:	2301      	movs	r3, #1
 801e3b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3b4:	f383 8810 	msr	PRIMASK, r3
}
 801e3b8:	46c0      	nop			@ (mov r8, r8)
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	681a      	ldr	r2, [r3, #0]
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	494c      	ldr	r1, [pc, #304]	@ (801e4f8 <UART_RxISR_16BIT+0x1c0>)
 801e3c6:	400a      	ands	r2, r1
 801e3c8:	601a      	str	r2, [r3, #0]
 801e3ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3d0:	f383 8810 	msr	PRIMASK, r3
}
 801e3d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3d6:	f3ef 8310 	mrs	r3, PRIMASK
 801e3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801e3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e3de:	643b      	str	r3, [r7, #64]	@ 0x40
 801e3e0:	2301      	movs	r3, #1
 801e3e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e3e6:	f383 8810 	msr	PRIMASK, r3
}
 801e3ea:	46c0      	nop			@ (mov r8, r8)
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	689a      	ldr	r2, [r3, #8]
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	2101      	movs	r1, #1
 801e3f8:	438a      	bics	r2, r1
 801e3fa:	609a      	str	r2, [r3, #8]
 801e3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e3fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e402:	f383 8810 	msr	PRIMASK, r3
}
 801e406:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	2280      	movs	r2, #128	@ 0x80
 801e40c:	2120      	movs	r1, #32
 801e40e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	2200      	movs	r2, #0
 801e414:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	2200      	movs	r2, #0
 801e41a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	4a36      	ldr	r2, [pc, #216]	@ (801e4fc <UART_RxISR_16BIT+0x1c4>)
 801e422:	4293      	cmp	r3, r2
 801e424:	d01f      	beq.n	801e466 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	685a      	ldr	r2, [r3, #4]
 801e42c:	2380      	movs	r3, #128	@ 0x80
 801e42e:	041b      	lsls	r3, r3, #16
 801e430:	4013      	ands	r3, r2
 801e432:	d018      	beq.n	801e466 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e434:	f3ef 8310 	mrs	r3, PRIMASK
 801e438:	617b      	str	r3, [r7, #20]
  return(result);
 801e43a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e43e:	2301      	movs	r3, #1
 801e440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e442:	69bb      	ldr	r3, [r7, #24]
 801e444:	f383 8810 	msr	PRIMASK, r3
}
 801e448:	46c0      	nop			@ (mov r8, r8)
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	681a      	ldr	r2, [r3, #0]
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	492a      	ldr	r1, [pc, #168]	@ (801e500 <UART_RxISR_16BIT+0x1c8>)
 801e456:	400a      	ands	r2, r1
 801e458:	601a      	str	r2, [r3, #0]
 801e45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e45c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e45e:	69fb      	ldr	r3, [r7, #28]
 801e460:	f383 8810 	msr	PRIMASK, r3
}
 801e464:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e46a:	2b01      	cmp	r3, #1
 801e46c:	d130      	bne.n	801e4d0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	2200      	movs	r2, #0
 801e472:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e474:	f3ef 8310 	mrs	r3, PRIMASK
 801e478:	60bb      	str	r3, [r7, #8]
  return(result);
 801e47a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e47c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e47e:	2301      	movs	r3, #1
 801e480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	f383 8810 	msr	PRIMASK, r3
}
 801e488:	46c0      	nop			@ (mov r8, r8)
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	681a      	ldr	r2, [r3, #0]
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	2110      	movs	r1, #16
 801e496:	438a      	bics	r2, r1
 801e498:	601a      	str	r2, [r3, #0]
 801e49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e49c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e49e:	693b      	ldr	r3, [r7, #16]
 801e4a0:	f383 8810 	msr	PRIMASK, r3
}
 801e4a4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	69db      	ldr	r3, [r3, #28]
 801e4ac:	2210      	movs	r2, #16
 801e4ae:	4013      	ands	r3, r2
 801e4b0:	2b10      	cmp	r3, #16
 801e4b2:	d103      	bne.n	801e4bc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	2210      	movs	r2, #16
 801e4ba:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	22ac      	movs	r2, #172	@ 0xac
 801e4c0:	589b      	ldr	r3, [r3, r2]
 801e4c2:	687a      	ldr	r2, [r7, #4]
 801e4c4:	2158      	movs	r1, #88	@ 0x58
 801e4c6:	5a51      	ldrh	r1, [r2, r1]
 801e4c8:	687a      	ldr	r2, [r7, #4]
 801e4ca:	0010      	movs	r0, r2
 801e4cc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e4ce:	e00e      	b.n	801e4ee <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	2294      	movs	r2, #148	@ 0x94
 801e4d4:	589b      	ldr	r3, [r3, r2]
 801e4d6:	687a      	ldr	r2, [r7, #4]
 801e4d8:	0010      	movs	r0, r2
 801e4da:	4798      	blx	r3
}
 801e4dc:	e007      	b.n	801e4ee <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	699a      	ldr	r2, [r3, #24]
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	2108      	movs	r1, #8
 801e4ea:	430a      	orrs	r2, r1
 801e4ec:	619a      	str	r2, [r3, #24]
}
 801e4ee:	46c0      	nop			@ (mov r8, r8)
 801e4f0:	46bd      	mov	sp, r7
 801e4f2:	b014      	add	sp, #80	@ 0x50
 801e4f4:	bd80      	pop	{r7, pc}
 801e4f6:	46c0      	nop			@ (mov r8, r8)
 801e4f8:	fffffedf 	.word	0xfffffedf
 801e4fc:	40004800 	.word	0x40004800
 801e500:	fbffffff 	.word	0xfbffffff

0801e504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b082      	sub	sp, #8
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e50c:	46c0      	nop			@ (mov r8, r8)
 801e50e:	46bd      	mov	sp, r7
 801e510:	b002      	add	sp, #8
 801e512:	bd80      	pop	{r7, pc}

0801e514 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b084      	sub	sp, #16
 801e518:	af00      	add	r7, sp, #0
 801e51a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2244      	movs	r2, #68	@ 0x44
 801e520:	2100      	movs	r1, #0
 801e522:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e524:	4b05      	ldr	r3, [pc, #20]	@ (801e53c <USB_EnableGlobalInt+0x28>)
 801e526:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	b299      	uxth	r1, r3
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	2240      	movs	r2, #64	@ 0x40
 801e530:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e532:	2300      	movs	r3, #0
}
 801e534:	0018      	movs	r0, r3
 801e536:	46bd      	mov	sp, r7
 801e538:	b004      	add	sp, #16
 801e53a:	bd80      	pop	{r7, pc}
 801e53c:	0000bf80 	.word	0x0000bf80

0801e540 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e540:	b580      	push	{r7, lr}
 801e542:	b084      	sub	sp, #16
 801e544:	af00      	add	r7, sp, #0
 801e546:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e548:	4b09      	ldr	r3, [pc, #36]	@ (801e570 <USB_DisableGlobalInt+0x30>)
 801e54a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	2240      	movs	r2, #64	@ 0x40
 801e550:	5a9b      	ldrh	r3, [r3, r2]
 801e552:	b29b      	uxth	r3, r3
 801e554:	68fa      	ldr	r2, [r7, #12]
 801e556:	b292      	uxth	r2, r2
 801e558:	43d2      	mvns	r2, r2
 801e55a:	b292      	uxth	r2, r2
 801e55c:	4013      	ands	r3, r2
 801e55e:	b299      	uxth	r1, r3
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	2240      	movs	r2, #64	@ 0x40
 801e564:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e566:	2300      	movs	r3, #0
}
 801e568:	0018      	movs	r0, r3
 801e56a:	46bd      	mov	sp, r7
 801e56c:	b004      	add	sp, #16
 801e56e:	bd80      	pop	{r7, pc}
 801e570:	0000bf80 	.word	0x0000bf80

0801e574 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e574:	b084      	sub	sp, #16
 801e576:	b590      	push	{r4, r7, lr}
 801e578:	b083      	sub	sp, #12
 801e57a:	af00      	add	r7, sp, #0
 801e57c:	6078      	str	r0, [r7, #4]
 801e57e:	2004      	movs	r0, #4
 801e580:	2410      	movs	r4, #16
 801e582:	1900      	adds	r0, r0, r4
 801e584:	2408      	movs	r4, #8
 801e586:	46a4      	mov	ip, r4
 801e588:	44bc      	add	ip, r7
 801e58a:	4460      	add	r0, ip
 801e58c:	6001      	str	r1, [r0, #0]
 801e58e:	6042      	str	r2, [r0, #4]
 801e590:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	2240      	movs	r2, #64	@ 0x40
 801e596:	2101      	movs	r1, #1
 801e598:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2240      	movs	r2, #64	@ 0x40
 801e59e:	2100      	movs	r1, #0
 801e5a0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	2244      	movs	r2, #68	@ 0x44
 801e5a6:	2100      	movs	r1, #0
 801e5a8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2250      	movs	r2, #80	@ 0x50
 801e5ae:	2100      	movs	r1, #0
 801e5b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e5b2:	2300      	movs	r3, #0
}
 801e5b4:	0018      	movs	r0, r3
 801e5b6:	46bd      	mov	sp, r7
 801e5b8:	b003      	add	sp, #12
 801e5ba:	bc90      	pop	{r4, r7}
 801e5bc:	bc08      	pop	{r3}
 801e5be:	b004      	add	sp, #16
 801e5c0:	4718      	bx	r3
	...

0801e5c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e5c4:	b580      	push	{r7, lr}
 801e5c6:	b09c      	sub	sp, #112	@ 0x70
 801e5c8:	af00      	add	r7, sp, #0
 801e5ca:	6078      	str	r0, [r7, #4]
 801e5cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801e5ce:	236f      	movs	r3, #111	@ 0x6f
 801e5d0:	18fb      	adds	r3, r7, r3
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801e5d6:	687a      	ldr	r2, [r7, #4]
 801e5d8:	683b      	ldr	r3, [r7, #0]
 801e5da:	781b      	ldrb	r3, [r3, #0]
 801e5dc:	009b      	lsls	r3, r3, #2
 801e5de:	18d3      	adds	r3, r2, r3
 801e5e0:	881b      	ldrh	r3, [r3, #0]
 801e5e2:	b29a      	uxth	r2, r3
 801e5e4:	236c      	movs	r3, #108	@ 0x6c
 801e5e6:	18fb      	adds	r3, r7, r3
 801e5e8:	49a3      	ldr	r1, [pc, #652]	@ (801e878 <USB_ActivateEndpoint+0x2b4>)
 801e5ea:	400a      	ands	r2, r1
 801e5ec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801e5ee:	683b      	ldr	r3, [r7, #0]
 801e5f0:	78db      	ldrb	r3, [r3, #3]
 801e5f2:	2b03      	cmp	r3, #3
 801e5f4:	d017      	beq.n	801e626 <USB_ActivateEndpoint+0x62>
 801e5f6:	dc28      	bgt.n	801e64a <USB_ActivateEndpoint+0x86>
 801e5f8:	2b02      	cmp	r3, #2
 801e5fa:	d00e      	beq.n	801e61a <USB_ActivateEndpoint+0x56>
 801e5fc:	dc25      	bgt.n	801e64a <USB_ActivateEndpoint+0x86>
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d002      	beq.n	801e608 <USB_ActivateEndpoint+0x44>
 801e602:	2b01      	cmp	r3, #1
 801e604:	d018      	beq.n	801e638 <USB_ActivateEndpoint+0x74>
 801e606:	e020      	b.n	801e64a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801e608:	226c      	movs	r2, #108	@ 0x6c
 801e60a:	18bb      	adds	r3, r7, r2
 801e60c:	18ba      	adds	r2, r7, r2
 801e60e:	8812      	ldrh	r2, [r2, #0]
 801e610:	2180      	movs	r1, #128	@ 0x80
 801e612:	0089      	lsls	r1, r1, #2
 801e614:	430a      	orrs	r2, r1
 801e616:	801a      	strh	r2, [r3, #0]
      break;
 801e618:	e01c      	b.n	801e654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801e61a:	226c      	movs	r2, #108	@ 0x6c
 801e61c:	18bb      	adds	r3, r7, r2
 801e61e:	18ba      	adds	r2, r7, r2
 801e620:	8812      	ldrh	r2, [r2, #0]
 801e622:	801a      	strh	r2, [r3, #0]
      break;
 801e624:	e016      	b.n	801e654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801e626:	226c      	movs	r2, #108	@ 0x6c
 801e628:	18bb      	adds	r3, r7, r2
 801e62a:	18ba      	adds	r2, r7, r2
 801e62c:	8812      	ldrh	r2, [r2, #0]
 801e62e:	21c0      	movs	r1, #192	@ 0xc0
 801e630:	00c9      	lsls	r1, r1, #3
 801e632:	430a      	orrs	r2, r1
 801e634:	801a      	strh	r2, [r3, #0]
      break;
 801e636:	e00d      	b.n	801e654 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801e638:	226c      	movs	r2, #108	@ 0x6c
 801e63a:	18bb      	adds	r3, r7, r2
 801e63c:	18ba      	adds	r2, r7, r2
 801e63e:	8812      	ldrh	r2, [r2, #0]
 801e640:	2180      	movs	r1, #128	@ 0x80
 801e642:	00c9      	lsls	r1, r1, #3
 801e644:	430a      	orrs	r2, r1
 801e646:	801a      	strh	r2, [r3, #0]
      break;
 801e648:	e004      	b.n	801e654 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801e64a:	236f      	movs	r3, #111	@ 0x6f
 801e64c:	18fb      	adds	r3, r7, r3
 801e64e:	2201      	movs	r2, #1
 801e650:	701a      	strb	r2, [r3, #0]
      break;
 801e652:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801e654:	687a      	ldr	r2, [r7, #4]
 801e656:	683b      	ldr	r3, [r7, #0]
 801e658:	781b      	ldrb	r3, [r3, #0]
 801e65a:	009b      	lsls	r3, r3, #2
 801e65c:	18d3      	adds	r3, r2, r3
 801e65e:	226c      	movs	r2, #108	@ 0x6c
 801e660:	18ba      	adds	r2, r7, r2
 801e662:	8812      	ldrh	r2, [r2, #0]
 801e664:	4985      	ldr	r1, [pc, #532]	@ (801e87c <USB_ActivateEndpoint+0x2b8>)
 801e666:	430a      	orrs	r2, r1
 801e668:	b292      	uxth	r2, r2
 801e66a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801e66c:	687a      	ldr	r2, [r7, #4]
 801e66e:	683b      	ldr	r3, [r7, #0]
 801e670:	781b      	ldrb	r3, [r3, #0]
 801e672:	009b      	lsls	r3, r3, #2
 801e674:	18d3      	adds	r3, r2, r3
 801e676:	881b      	ldrh	r3, [r3, #0]
 801e678:	b29b      	uxth	r3, r3
 801e67a:	b21b      	sxth	r3, r3
 801e67c:	4a80      	ldr	r2, [pc, #512]	@ (801e880 <USB_ActivateEndpoint+0x2bc>)
 801e67e:	4013      	ands	r3, r2
 801e680:	b21a      	sxth	r2, r3
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	781b      	ldrb	r3, [r3, #0]
 801e686:	b21b      	sxth	r3, r3
 801e688:	4313      	orrs	r3, r2
 801e68a:	b21a      	sxth	r2, r3
 801e68c:	2166      	movs	r1, #102	@ 0x66
 801e68e:	187b      	adds	r3, r7, r1
 801e690:	801a      	strh	r2, [r3, #0]
 801e692:	687a      	ldr	r2, [r7, #4]
 801e694:	683b      	ldr	r3, [r7, #0]
 801e696:	781b      	ldrb	r3, [r3, #0]
 801e698:	009b      	lsls	r3, r3, #2
 801e69a:	18d3      	adds	r3, r2, r3
 801e69c:	187a      	adds	r2, r7, r1
 801e69e:	8812      	ldrh	r2, [r2, #0]
 801e6a0:	4976      	ldr	r1, [pc, #472]	@ (801e87c <USB_ActivateEndpoint+0x2b8>)
 801e6a2:	430a      	orrs	r2, r1
 801e6a4:	b292      	uxth	r2, r2
 801e6a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801e6a8:	683b      	ldr	r3, [r7, #0]
 801e6aa:	7b1b      	ldrb	r3, [r3, #12]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d000      	beq.n	801e6b2 <USB_ActivateEndpoint+0xee>
 801e6b0:	e178      	b.n	801e9a4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801e6b2:	683b      	ldr	r3, [r7, #0]
 801e6b4:	785b      	ldrb	r3, [r3, #1]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d100      	bne.n	801e6bc <USB_ActivateEndpoint+0xf8>
 801e6ba:	e07a      	b.n	801e7b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	61bb      	str	r3, [r7, #24]
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	2250      	movs	r2, #80	@ 0x50
 801e6c4:	5a9b      	ldrh	r3, [r3, r2]
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	001a      	movs	r2, r3
 801e6ca:	69bb      	ldr	r3, [r7, #24]
 801e6cc:	189b      	adds	r3, r3, r2
 801e6ce:	61bb      	str	r3, [r7, #24]
 801e6d0:	683b      	ldr	r3, [r7, #0]
 801e6d2:	781b      	ldrb	r3, [r3, #0]
 801e6d4:	00da      	lsls	r2, r3, #3
 801e6d6:	69bb      	ldr	r3, [r7, #24]
 801e6d8:	18d3      	adds	r3, r2, r3
 801e6da:	2280      	movs	r2, #128	@ 0x80
 801e6dc:	00d2      	lsls	r2, r2, #3
 801e6de:	4694      	mov	ip, r2
 801e6e0:	4463      	add	r3, ip
 801e6e2:	617b      	str	r3, [r7, #20]
 801e6e4:	683b      	ldr	r3, [r7, #0]
 801e6e6:	88db      	ldrh	r3, [r3, #6]
 801e6e8:	085b      	lsrs	r3, r3, #1
 801e6ea:	b29b      	uxth	r3, r3
 801e6ec:	18db      	adds	r3, r3, r3
 801e6ee:	b29a      	uxth	r2, r3
 801e6f0:	697b      	ldr	r3, [r7, #20]
 801e6f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e6f4:	687a      	ldr	r2, [r7, #4]
 801e6f6:	683b      	ldr	r3, [r7, #0]
 801e6f8:	781b      	ldrb	r3, [r3, #0]
 801e6fa:	009b      	lsls	r3, r3, #2
 801e6fc:	18d2      	adds	r2, r2, r3
 801e6fe:	2112      	movs	r1, #18
 801e700:	187b      	adds	r3, r7, r1
 801e702:	8812      	ldrh	r2, [r2, #0]
 801e704:	801a      	strh	r2, [r3, #0]
 801e706:	187b      	adds	r3, r7, r1
 801e708:	881b      	ldrh	r3, [r3, #0]
 801e70a:	2240      	movs	r2, #64	@ 0x40
 801e70c:	4013      	ands	r3, r2
 801e70e:	d016      	beq.n	801e73e <USB_ActivateEndpoint+0x17a>
 801e710:	687a      	ldr	r2, [r7, #4]
 801e712:	683b      	ldr	r3, [r7, #0]
 801e714:	781b      	ldrb	r3, [r3, #0]
 801e716:	009b      	lsls	r3, r3, #2
 801e718:	18d3      	adds	r3, r2, r3
 801e71a:	881b      	ldrh	r3, [r3, #0]
 801e71c:	b29a      	uxth	r2, r3
 801e71e:	2010      	movs	r0, #16
 801e720:	183b      	adds	r3, r7, r0
 801e722:	4957      	ldr	r1, [pc, #348]	@ (801e880 <USB_ActivateEndpoint+0x2bc>)
 801e724:	400a      	ands	r2, r1
 801e726:	801a      	strh	r2, [r3, #0]
 801e728:	687a      	ldr	r2, [r7, #4]
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	781b      	ldrb	r3, [r3, #0]
 801e72e:	009b      	lsls	r3, r3, #2
 801e730:	18d3      	adds	r3, r2, r3
 801e732:	183a      	adds	r2, r7, r0
 801e734:	8812      	ldrh	r2, [r2, #0]
 801e736:	4953      	ldr	r1, [pc, #332]	@ (801e884 <USB_ActivateEndpoint+0x2c0>)
 801e738:	430a      	orrs	r2, r1
 801e73a:	b292      	uxth	r2, r2
 801e73c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e73e:	683b      	ldr	r3, [r7, #0]
 801e740:	78db      	ldrb	r3, [r3, #3]
 801e742:	2b01      	cmp	r3, #1
 801e744:	d01d      	beq.n	801e782 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e746:	687a      	ldr	r2, [r7, #4]
 801e748:	683b      	ldr	r3, [r7, #0]
 801e74a:	781b      	ldrb	r3, [r3, #0]
 801e74c:	009b      	lsls	r3, r3, #2
 801e74e:	18d3      	adds	r3, r2, r3
 801e750:	881b      	ldrh	r3, [r3, #0]
 801e752:	b29a      	uxth	r2, r3
 801e754:	200c      	movs	r0, #12
 801e756:	183b      	adds	r3, r7, r0
 801e758:	494b      	ldr	r1, [pc, #300]	@ (801e888 <USB_ActivateEndpoint+0x2c4>)
 801e75a:	400a      	ands	r2, r1
 801e75c:	801a      	strh	r2, [r3, #0]
 801e75e:	183b      	adds	r3, r7, r0
 801e760:	183a      	adds	r2, r7, r0
 801e762:	8812      	ldrh	r2, [r2, #0]
 801e764:	2120      	movs	r1, #32
 801e766:	404a      	eors	r2, r1
 801e768:	801a      	strh	r2, [r3, #0]
 801e76a:	687a      	ldr	r2, [r7, #4]
 801e76c:	683b      	ldr	r3, [r7, #0]
 801e76e:	781b      	ldrb	r3, [r3, #0]
 801e770:	009b      	lsls	r3, r3, #2
 801e772:	18d3      	adds	r3, r2, r3
 801e774:	183a      	adds	r2, r7, r0
 801e776:	8812      	ldrh	r2, [r2, #0]
 801e778:	4940      	ldr	r1, [pc, #256]	@ (801e87c <USB_ActivateEndpoint+0x2b8>)
 801e77a:	430a      	orrs	r2, r1
 801e77c:	b292      	uxth	r2, r2
 801e77e:	801a      	strh	r2, [r3, #0]
 801e780:	e2b4      	b.n	801ecec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e782:	687a      	ldr	r2, [r7, #4]
 801e784:	683b      	ldr	r3, [r7, #0]
 801e786:	781b      	ldrb	r3, [r3, #0]
 801e788:	009b      	lsls	r3, r3, #2
 801e78a:	18d3      	adds	r3, r2, r3
 801e78c:	881b      	ldrh	r3, [r3, #0]
 801e78e:	b29a      	uxth	r2, r3
 801e790:	200e      	movs	r0, #14
 801e792:	183b      	adds	r3, r7, r0
 801e794:	493c      	ldr	r1, [pc, #240]	@ (801e888 <USB_ActivateEndpoint+0x2c4>)
 801e796:	400a      	ands	r2, r1
 801e798:	801a      	strh	r2, [r3, #0]
 801e79a:	687a      	ldr	r2, [r7, #4]
 801e79c:	683b      	ldr	r3, [r7, #0]
 801e79e:	781b      	ldrb	r3, [r3, #0]
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	18d3      	adds	r3, r2, r3
 801e7a4:	183a      	adds	r2, r7, r0
 801e7a6:	8812      	ldrh	r2, [r2, #0]
 801e7a8:	4934      	ldr	r1, [pc, #208]	@ (801e87c <USB_ActivateEndpoint+0x2b8>)
 801e7aa:	430a      	orrs	r2, r1
 801e7ac:	b292      	uxth	r2, r2
 801e7ae:	801a      	strh	r2, [r3, #0]
 801e7b0:	e29c      	b.n	801ecec <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	2250      	movs	r2, #80	@ 0x50
 801e7ba:	5a9b      	ldrh	r3, [r3, r2]
 801e7bc:	b29b      	uxth	r3, r3
 801e7be:	001a      	movs	r2, r3
 801e7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7c2:	189b      	adds	r3, r3, r2
 801e7c4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e7c6:	683b      	ldr	r3, [r7, #0]
 801e7c8:	781b      	ldrb	r3, [r3, #0]
 801e7ca:	00da      	lsls	r2, r3, #3
 801e7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7ce:	18d3      	adds	r3, r2, r3
 801e7d0:	4a2e      	ldr	r2, [pc, #184]	@ (801e88c <USB_ActivateEndpoint+0x2c8>)
 801e7d2:	4694      	mov	ip, r2
 801e7d4:	4463      	add	r3, ip
 801e7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e7d8:	683b      	ldr	r3, [r7, #0]
 801e7da:	88db      	ldrh	r3, [r3, #6]
 801e7dc:	085b      	lsrs	r3, r3, #1
 801e7de:	b29b      	uxth	r3, r3
 801e7e0:	18db      	adds	r3, r3, r3
 801e7e2:	b29a      	uxth	r2, r3
 801e7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	2250      	movs	r2, #80	@ 0x50
 801e7f0:	5a9b      	ldrh	r3, [r3, r2]
 801e7f2:	b29b      	uxth	r3, r3
 801e7f4:	001a      	movs	r2, r3
 801e7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e7f8:	189b      	adds	r3, r3, r2
 801e7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e7fc:	683b      	ldr	r3, [r7, #0]
 801e7fe:	781b      	ldrb	r3, [r3, #0]
 801e800:	00da      	lsls	r2, r3, #3
 801e802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e804:	18d3      	adds	r3, r2, r3
 801e806:	4a22      	ldr	r2, [pc, #136]	@ (801e890 <USB_ActivateEndpoint+0x2cc>)
 801e808:	4694      	mov	ip, r2
 801e80a:	4463      	add	r3, ip
 801e80c:	627b      	str	r3, [r7, #36]	@ 0x24
 801e80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e810:	881b      	ldrh	r3, [r3, #0]
 801e812:	b29b      	uxth	r3, r3
 801e814:	059b      	lsls	r3, r3, #22
 801e816:	0d9b      	lsrs	r3, r3, #22
 801e818:	b29a      	uxth	r2, r3
 801e81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e81c:	801a      	strh	r2, [r3, #0]
 801e81e:	683b      	ldr	r3, [r7, #0]
 801e820:	691b      	ldr	r3, [r3, #16]
 801e822:	2b3e      	cmp	r3, #62	@ 0x3e
 801e824:	d91a      	bls.n	801e85c <USB_ActivateEndpoint+0x298>
 801e826:	683b      	ldr	r3, [r7, #0]
 801e828:	691b      	ldr	r3, [r3, #16]
 801e82a:	095b      	lsrs	r3, r3, #5
 801e82c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	691b      	ldr	r3, [r3, #16]
 801e832:	221f      	movs	r2, #31
 801e834:	4013      	ands	r3, r2
 801e836:	d102      	bne.n	801e83e <USB_ActivateEndpoint+0x27a>
 801e838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e83a:	3b01      	subs	r3, #1
 801e83c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e840:	881b      	ldrh	r3, [r3, #0]
 801e842:	b29a      	uxth	r2, r3
 801e844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e846:	b29b      	uxth	r3, r3
 801e848:	029b      	lsls	r3, r3, #10
 801e84a:	b29b      	uxth	r3, r3
 801e84c:	4313      	orrs	r3, r2
 801e84e:	b29b      	uxth	r3, r3
 801e850:	4a10      	ldr	r2, [pc, #64]	@ (801e894 <USB_ActivateEndpoint+0x2d0>)
 801e852:	4313      	orrs	r3, r2
 801e854:	b29a      	uxth	r2, r3
 801e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e858:	801a      	strh	r2, [r3, #0]
 801e85a:	e034      	b.n	801e8c6 <USB_ActivateEndpoint+0x302>
 801e85c:	683b      	ldr	r3, [r7, #0]
 801e85e:	691b      	ldr	r3, [r3, #16]
 801e860:	2b00      	cmp	r3, #0
 801e862:	d119      	bne.n	801e898 <USB_ActivateEndpoint+0x2d4>
 801e864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e866:	881b      	ldrh	r3, [r3, #0]
 801e868:	b29b      	uxth	r3, r3
 801e86a:	4a0a      	ldr	r2, [pc, #40]	@ (801e894 <USB_ActivateEndpoint+0x2d0>)
 801e86c:	4313      	orrs	r3, r2
 801e86e:	b29a      	uxth	r2, r3
 801e870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e872:	801a      	strh	r2, [r3, #0]
 801e874:	e027      	b.n	801e8c6 <USB_ActivateEndpoint+0x302>
 801e876:	46c0      	nop			@ (mov r8, r8)
 801e878:	ffff898f 	.word	0xffff898f
 801e87c:	ffff8080 	.word	0xffff8080
 801e880:	ffff8f8f 	.word	0xffff8f8f
 801e884:	ffff80c0 	.word	0xffff80c0
 801e888:	ffff8fbf 	.word	0xffff8fbf
 801e88c:	00000404 	.word	0x00000404
 801e890:	00000406 	.word	0x00000406
 801e894:	ffff8000 	.word	0xffff8000
 801e898:	683b      	ldr	r3, [r7, #0]
 801e89a:	691b      	ldr	r3, [r3, #16]
 801e89c:	085b      	lsrs	r3, r3, #1
 801e89e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e8a0:	683b      	ldr	r3, [r7, #0]
 801e8a2:	691b      	ldr	r3, [r3, #16]
 801e8a4:	2201      	movs	r2, #1
 801e8a6:	4013      	ands	r3, r2
 801e8a8:	d002      	beq.n	801e8b0 <USB_ActivateEndpoint+0x2ec>
 801e8aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e8ac:	3301      	adds	r3, #1
 801e8ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8b2:	881b      	ldrh	r3, [r3, #0]
 801e8b4:	b29a      	uxth	r2, r3
 801e8b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e8b8:	b29b      	uxth	r3, r3
 801e8ba:	029b      	lsls	r3, r3, #10
 801e8bc:	b29b      	uxth	r3, r3
 801e8be:	4313      	orrs	r3, r2
 801e8c0:	b29a      	uxth	r2, r3
 801e8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e8c6:	687a      	ldr	r2, [r7, #4]
 801e8c8:	683b      	ldr	r3, [r7, #0]
 801e8ca:	781b      	ldrb	r3, [r3, #0]
 801e8cc:	009b      	lsls	r3, r3, #2
 801e8ce:	18d2      	adds	r2, r2, r3
 801e8d0:	2122      	movs	r1, #34	@ 0x22
 801e8d2:	187b      	adds	r3, r7, r1
 801e8d4:	8812      	ldrh	r2, [r2, #0]
 801e8d6:	801a      	strh	r2, [r3, #0]
 801e8d8:	187b      	adds	r3, r7, r1
 801e8da:	881a      	ldrh	r2, [r3, #0]
 801e8dc:	2380      	movs	r3, #128	@ 0x80
 801e8de:	01db      	lsls	r3, r3, #7
 801e8e0:	4013      	ands	r3, r2
 801e8e2:	d016      	beq.n	801e912 <USB_ActivateEndpoint+0x34e>
 801e8e4:	687a      	ldr	r2, [r7, #4]
 801e8e6:	683b      	ldr	r3, [r7, #0]
 801e8e8:	781b      	ldrb	r3, [r3, #0]
 801e8ea:	009b      	lsls	r3, r3, #2
 801e8ec:	18d3      	adds	r3, r2, r3
 801e8ee:	881b      	ldrh	r3, [r3, #0]
 801e8f0:	b29a      	uxth	r2, r3
 801e8f2:	2020      	movs	r0, #32
 801e8f4:	183b      	adds	r3, r7, r0
 801e8f6:	49dd      	ldr	r1, [pc, #884]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801e8f8:	400a      	ands	r2, r1
 801e8fa:	801a      	strh	r2, [r3, #0]
 801e8fc:	687a      	ldr	r2, [r7, #4]
 801e8fe:	683b      	ldr	r3, [r7, #0]
 801e900:	781b      	ldrb	r3, [r3, #0]
 801e902:	009b      	lsls	r3, r3, #2
 801e904:	18d3      	adds	r3, r2, r3
 801e906:	183a      	adds	r2, r7, r0
 801e908:	8812      	ldrh	r2, [r2, #0]
 801e90a:	49d9      	ldr	r1, [pc, #868]	@ (801ec70 <USB_ActivateEndpoint+0x6ac>)
 801e90c:	430a      	orrs	r2, r1
 801e90e:	b292      	uxth	r2, r2
 801e910:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801e912:	683b      	ldr	r3, [r7, #0]
 801e914:	781b      	ldrb	r3, [r3, #0]
 801e916:	2b00      	cmp	r3, #0
 801e918:	d125      	bne.n	801e966 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e91a:	687a      	ldr	r2, [r7, #4]
 801e91c:	683b      	ldr	r3, [r7, #0]
 801e91e:	781b      	ldrb	r3, [r3, #0]
 801e920:	009b      	lsls	r3, r3, #2
 801e922:	18d3      	adds	r3, r2, r3
 801e924:	881b      	ldrh	r3, [r3, #0]
 801e926:	b29a      	uxth	r2, r3
 801e928:	201c      	movs	r0, #28
 801e92a:	183b      	adds	r3, r7, r0
 801e92c:	49d1      	ldr	r1, [pc, #836]	@ (801ec74 <USB_ActivateEndpoint+0x6b0>)
 801e92e:	400a      	ands	r2, r1
 801e930:	801a      	strh	r2, [r3, #0]
 801e932:	183b      	adds	r3, r7, r0
 801e934:	183a      	adds	r2, r7, r0
 801e936:	8812      	ldrh	r2, [r2, #0]
 801e938:	2180      	movs	r1, #128	@ 0x80
 801e93a:	0149      	lsls	r1, r1, #5
 801e93c:	404a      	eors	r2, r1
 801e93e:	801a      	strh	r2, [r3, #0]
 801e940:	183b      	adds	r3, r7, r0
 801e942:	183a      	adds	r2, r7, r0
 801e944:	8812      	ldrh	r2, [r2, #0]
 801e946:	2180      	movs	r1, #128	@ 0x80
 801e948:	0189      	lsls	r1, r1, #6
 801e94a:	404a      	eors	r2, r1
 801e94c:	801a      	strh	r2, [r3, #0]
 801e94e:	687a      	ldr	r2, [r7, #4]
 801e950:	683b      	ldr	r3, [r7, #0]
 801e952:	781b      	ldrb	r3, [r3, #0]
 801e954:	009b      	lsls	r3, r3, #2
 801e956:	18d3      	adds	r3, r2, r3
 801e958:	183a      	adds	r2, r7, r0
 801e95a:	8812      	ldrh	r2, [r2, #0]
 801e95c:	49c6      	ldr	r1, [pc, #792]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801e95e:	430a      	orrs	r2, r1
 801e960:	b292      	uxth	r2, r2
 801e962:	801a      	strh	r2, [r3, #0]
 801e964:	e1c2      	b.n	801ecec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801e966:	687a      	ldr	r2, [r7, #4]
 801e968:	683b      	ldr	r3, [r7, #0]
 801e96a:	781b      	ldrb	r3, [r3, #0]
 801e96c:	009b      	lsls	r3, r3, #2
 801e96e:	18d3      	adds	r3, r2, r3
 801e970:	881b      	ldrh	r3, [r3, #0]
 801e972:	b29a      	uxth	r2, r3
 801e974:	201e      	movs	r0, #30
 801e976:	183b      	adds	r3, r7, r0
 801e978:	49be      	ldr	r1, [pc, #760]	@ (801ec74 <USB_ActivateEndpoint+0x6b0>)
 801e97a:	400a      	ands	r2, r1
 801e97c:	801a      	strh	r2, [r3, #0]
 801e97e:	183b      	adds	r3, r7, r0
 801e980:	183a      	adds	r2, r7, r0
 801e982:	8812      	ldrh	r2, [r2, #0]
 801e984:	2180      	movs	r1, #128	@ 0x80
 801e986:	0189      	lsls	r1, r1, #6
 801e988:	404a      	eors	r2, r1
 801e98a:	801a      	strh	r2, [r3, #0]
 801e98c:	687a      	ldr	r2, [r7, #4]
 801e98e:	683b      	ldr	r3, [r7, #0]
 801e990:	781b      	ldrb	r3, [r3, #0]
 801e992:	009b      	lsls	r3, r3, #2
 801e994:	18d3      	adds	r3, r2, r3
 801e996:	183a      	adds	r2, r7, r0
 801e998:	8812      	ldrh	r2, [r2, #0]
 801e99a:	49b7      	ldr	r1, [pc, #732]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801e99c:	430a      	orrs	r2, r1
 801e99e:	b292      	uxth	r2, r2
 801e9a0:	801a      	strh	r2, [r3, #0]
 801e9a2:	e1a3      	b.n	801ecec <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801e9a4:	683b      	ldr	r3, [r7, #0]
 801e9a6:	78db      	ldrb	r3, [r3, #3]
 801e9a8:	2b02      	cmp	r3, #2
 801e9aa:	d117      	bne.n	801e9dc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e9ac:	687a      	ldr	r2, [r7, #4]
 801e9ae:	683b      	ldr	r3, [r7, #0]
 801e9b0:	781b      	ldrb	r3, [r3, #0]
 801e9b2:	009b      	lsls	r3, r3, #2
 801e9b4:	18d3      	adds	r3, r2, r3
 801e9b6:	881b      	ldrh	r3, [r3, #0]
 801e9b8:	b29a      	uxth	r2, r3
 801e9ba:	2062      	movs	r0, #98	@ 0x62
 801e9bc:	183b      	adds	r3, r7, r0
 801e9be:	49ab      	ldr	r1, [pc, #684]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801e9c0:	400a      	ands	r2, r1
 801e9c2:	801a      	strh	r2, [r3, #0]
 801e9c4:	687a      	ldr	r2, [r7, #4]
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	781b      	ldrb	r3, [r3, #0]
 801e9ca:	009b      	lsls	r3, r3, #2
 801e9cc:	18d3      	adds	r3, r2, r3
 801e9ce:	183a      	adds	r2, r7, r0
 801e9d0:	8812      	ldrh	r2, [r2, #0]
 801e9d2:	49aa      	ldr	r1, [pc, #680]	@ (801ec7c <USB_ActivateEndpoint+0x6b8>)
 801e9d4:	430a      	orrs	r2, r1
 801e9d6:	b292      	uxth	r2, r2
 801e9d8:	801a      	strh	r2, [r3, #0]
 801e9da:	e016      	b.n	801ea0a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801e9dc:	687a      	ldr	r2, [r7, #4]
 801e9de:	683b      	ldr	r3, [r7, #0]
 801e9e0:	781b      	ldrb	r3, [r3, #0]
 801e9e2:	009b      	lsls	r3, r3, #2
 801e9e4:	18d3      	adds	r3, r2, r3
 801e9e6:	881b      	ldrh	r3, [r3, #0]
 801e9e8:	b29a      	uxth	r2, r3
 801e9ea:	2064      	movs	r0, #100	@ 0x64
 801e9ec:	183b      	adds	r3, r7, r0
 801e9ee:	49a4      	ldr	r1, [pc, #656]	@ (801ec80 <USB_ActivateEndpoint+0x6bc>)
 801e9f0:	400a      	ands	r2, r1
 801e9f2:	801a      	strh	r2, [r3, #0]
 801e9f4:	687a      	ldr	r2, [r7, #4]
 801e9f6:	683b      	ldr	r3, [r7, #0]
 801e9f8:	781b      	ldrb	r3, [r3, #0]
 801e9fa:	009b      	lsls	r3, r3, #2
 801e9fc:	18d3      	adds	r3, r2, r3
 801e9fe:	183a      	adds	r2, r7, r0
 801ea00:	8812      	ldrh	r2, [r2, #0]
 801ea02:	499d      	ldr	r1, [pc, #628]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801ea04:	430a      	orrs	r2, r1
 801ea06:	b292      	uxth	r2, r2
 801ea08:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	2250      	movs	r2, #80	@ 0x50
 801ea12:	5a9b      	ldrh	r3, [r3, r2]
 801ea14:	b29b      	uxth	r3, r3
 801ea16:	001a      	movs	r2, r3
 801ea18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ea1a:	189b      	adds	r3, r3, r2
 801ea1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ea1e:	683b      	ldr	r3, [r7, #0]
 801ea20:	781b      	ldrb	r3, [r3, #0]
 801ea22:	00da      	lsls	r2, r3, #3
 801ea24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ea26:	18d3      	adds	r3, r2, r3
 801ea28:	2280      	movs	r2, #128	@ 0x80
 801ea2a:	00d2      	lsls	r2, r2, #3
 801ea2c:	4694      	mov	ip, r2
 801ea2e:	4463      	add	r3, ip
 801ea30:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ea32:	683b      	ldr	r3, [r7, #0]
 801ea34:	891b      	ldrh	r3, [r3, #8]
 801ea36:	085b      	lsrs	r3, r3, #1
 801ea38:	b29b      	uxth	r3, r3
 801ea3a:	18db      	adds	r3, r3, r3
 801ea3c:	b29a      	uxth	r2, r3
 801ea3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ea40:	801a      	strh	r2, [r3, #0]
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	657b      	str	r3, [r7, #84]	@ 0x54
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	2250      	movs	r2, #80	@ 0x50
 801ea4a:	5a9b      	ldrh	r3, [r3, r2]
 801ea4c:	b29b      	uxth	r3, r3
 801ea4e:	001a      	movs	r2, r3
 801ea50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea52:	189b      	adds	r3, r3, r2
 801ea54:	657b      	str	r3, [r7, #84]	@ 0x54
 801ea56:	683b      	ldr	r3, [r7, #0]
 801ea58:	781b      	ldrb	r3, [r3, #0]
 801ea5a:	00da      	lsls	r2, r3, #3
 801ea5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ea5e:	18d3      	adds	r3, r2, r3
 801ea60:	4a88      	ldr	r2, [pc, #544]	@ (801ec84 <USB_ActivateEndpoint+0x6c0>)
 801ea62:	4694      	mov	ip, r2
 801ea64:	4463      	add	r3, ip
 801ea66:	653b      	str	r3, [r7, #80]	@ 0x50
 801ea68:	683b      	ldr	r3, [r7, #0]
 801ea6a:	895b      	ldrh	r3, [r3, #10]
 801ea6c:	085b      	lsrs	r3, r3, #1
 801ea6e:	b29b      	uxth	r3, r3
 801ea70:	18db      	adds	r3, r3, r3
 801ea72:	b29a      	uxth	r2, r3
 801ea74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ea76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801ea78:	683b      	ldr	r3, [r7, #0]
 801ea7a:	785b      	ldrb	r3, [r3, #1]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d000      	beq.n	801ea82 <USB_ActivateEndpoint+0x4be>
 801ea80:	e087      	b.n	801eb92 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ea82:	687a      	ldr	r2, [r7, #4]
 801ea84:	683b      	ldr	r3, [r7, #0]
 801ea86:	781b      	ldrb	r3, [r3, #0]
 801ea88:	009b      	lsls	r3, r3, #2
 801ea8a:	18d2      	adds	r2, r2, r3
 801ea8c:	2140      	movs	r1, #64	@ 0x40
 801ea8e:	187b      	adds	r3, r7, r1
 801ea90:	8812      	ldrh	r2, [r2, #0]
 801ea92:	801a      	strh	r2, [r3, #0]
 801ea94:	187b      	adds	r3, r7, r1
 801ea96:	881a      	ldrh	r2, [r3, #0]
 801ea98:	2380      	movs	r3, #128	@ 0x80
 801ea9a:	01db      	lsls	r3, r3, #7
 801ea9c:	4013      	ands	r3, r2
 801ea9e:	d016      	beq.n	801eace <USB_ActivateEndpoint+0x50a>
 801eaa0:	687a      	ldr	r2, [r7, #4]
 801eaa2:	683b      	ldr	r3, [r7, #0]
 801eaa4:	781b      	ldrb	r3, [r3, #0]
 801eaa6:	009b      	lsls	r3, r3, #2
 801eaa8:	18d3      	adds	r3, r2, r3
 801eaaa:	881b      	ldrh	r3, [r3, #0]
 801eaac:	b29a      	uxth	r2, r3
 801eaae:	203e      	movs	r0, #62	@ 0x3e
 801eab0:	183b      	adds	r3, r7, r0
 801eab2:	496e      	ldr	r1, [pc, #440]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801eab4:	400a      	ands	r2, r1
 801eab6:	801a      	strh	r2, [r3, #0]
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	683b      	ldr	r3, [r7, #0]
 801eabc:	781b      	ldrb	r3, [r3, #0]
 801eabe:	009b      	lsls	r3, r3, #2
 801eac0:	18d3      	adds	r3, r2, r3
 801eac2:	183a      	adds	r2, r7, r0
 801eac4:	8812      	ldrh	r2, [r2, #0]
 801eac6:	496a      	ldr	r1, [pc, #424]	@ (801ec70 <USB_ActivateEndpoint+0x6ac>)
 801eac8:	430a      	orrs	r2, r1
 801eaca:	b292      	uxth	r2, r2
 801eacc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801eace:	687a      	ldr	r2, [r7, #4]
 801ead0:	683b      	ldr	r3, [r7, #0]
 801ead2:	781b      	ldrb	r3, [r3, #0]
 801ead4:	009b      	lsls	r3, r3, #2
 801ead6:	18d2      	adds	r2, r2, r3
 801ead8:	213c      	movs	r1, #60	@ 0x3c
 801eada:	187b      	adds	r3, r7, r1
 801eadc:	8812      	ldrh	r2, [r2, #0]
 801eade:	801a      	strh	r2, [r3, #0]
 801eae0:	187b      	adds	r3, r7, r1
 801eae2:	881b      	ldrh	r3, [r3, #0]
 801eae4:	2240      	movs	r2, #64	@ 0x40
 801eae6:	4013      	ands	r3, r2
 801eae8:	d016      	beq.n	801eb18 <USB_ActivateEndpoint+0x554>
 801eaea:	687a      	ldr	r2, [r7, #4]
 801eaec:	683b      	ldr	r3, [r7, #0]
 801eaee:	781b      	ldrb	r3, [r3, #0]
 801eaf0:	009b      	lsls	r3, r3, #2
 801eaf2:	18d3      	adds	r3, r2, r3
 801eaf4:	881b      	ldrh	r3, [r3, #0]
 801eaf6:	b29a      	uxth	r2, r3
 801eaf8:	203a      	movs	r0, #58	@ 0x3a
 801eafa:	183b      	adds	r3, r7, r0
 801eafc:	495b      	ldr	r1, [pc, #364]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801eafe:	400a      	ands	r2, r1
 801eb00:	801a      	strh	r2, [r3, #0]
 801eb02:	687a      	ldr	r2, [r7, #4]
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	781b      	ldrb	r3, [r3, #0]
 801eb08:	009b      	lsls	r3, r3, #2
 801eb0a:	18d3      	adds	r3, r2, r3
 801eb0c:	183a      	adds	r2, r7, r0
 801eb0e:	8812      	ldrh	r2, [r2, #0]
 801eb10:	495d      	ldr	r1, [pc, #372]	@ (801ec88 <USB_ActivateEndpoint+0x6c4>)
 801eb12:	430a      	orrs	r2, r1
 801eb14:	b292      	uxth	r2, r2
 801eb16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801eb18:	687a      	ldr	r2, [r7, #4]
 801eb1a:	683b      	ldr	r3, [r7, #0]
 801eb1c:	781b      	ldrb	r3, [r3, #0]
 801eb1e:	009b      	lsls	r3, r3, #2
 801eb20:	18d3      	adds	r3, r2, r3
 801eb22:	881b      	ldrh	r3, [r3, #0]
 801eb24:	b29a      	uxth	r2, r3
 801eb26:	2038      	movs	r0, #56	@ 0x38
 801eb28:	183b      	adds	r3, r7, r0
 801eb2a:	4952      	ldr	r1, [pc, #328]	@ (801ec74 <USB_ActivateEndpoint+0x6b0>)
 801eb2c:	400a      	ands	r2, r1
 801eb2e:	801a      	strh	r2, [r3, #0]
 801eb30:	183b      	adds	r3, r7, r0
 801eb32:	183a      	adds	r2, r7, r0
 801eb34:	8812      	ldrh	r2, [r2, #0]
 801eb36:	2180      	movs	r1, #128	@ 0x80
 801eb38:	0149      	lsls	r1, r1, #5
 801eb3a:	404a      	eors	r2, r1
 801eb3c:	801a      	strh	r2, [r3, #0]
 801eb3e:	183b      	adds	r3, r7, r0
 801eb40:	183a      	adds	r2, r7, r0
 801eb42:	8812      	ldrh	r2, [r2, #0]
 801eb44:	2180      	movs	r1, #128	@ 0x80
 801eb46:	0189      	lsls	r1, r1, #6
 801eb48:	404a      	eors	r2, r1
 801eb4a:	801a      	strh	r2, [r3, #0]
 801eb4c:	687a      	ldr	r2, [r7, #4]
 801eb4e:	683b      	ldr	r3, [r7, #0]
 801eb50:	781b      	ldrb	r3, [r3, #0]
 801eb52:	009b      	lsls	r3, r3, #2
 801eb54:	18d3      	adds	r3, r2, r3
 801eb56:	183a      	adds	r2, r7, r0
 801eb58:	8812      	ldrh	r2, [r2, #0]
 801eb5a:	4947      	ldr	r1, [pc, #284]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801eb5c:	430a      	orrs	r2, r1
 801eb5e:	b292      	uxth	r2, r2
 801eb60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eb62:	687a      	ldr	r2, [r7, #4]
 801eb64:	683b      	ldr	r3, [r7, #0]
 801eb66:	781b      	ldrb	r3, [r3, #0]
 801eb68:	009b      	lsls	r3, r3, #2
 801eb6a:	18d3      	adds	r3, r2, r3
 801eb6c:	881b      	ldrh	r3, [r3, #0]
 801eb6e:	b29a      	uxth	r2, r3
 801eb70:	2036      	movs	r0, #54	@ 0x36
 801eb72:	183b      	adds	r3, r7, r0
 801eb74:	4945      	ldr	r1, [pc, #276]	@ (801ec8c <USB_ActivateEndpoint+0x6c8>)
 801eb76:	400a      	ands	r2, r1
 801eb78:	801a      	strh	r2, [r3, #0]
 801eb7a:	687a      	ldr	r2, [r7, #4]
 801eb7c:	683b      	ldr	r3, [r7, #0]
 801eb7e:	781b      	ldrb	r3, [r3, #0]
 801eb80:	009b      	lsls	r3, r3, #2
 801eb82:	18d3      	adds	r3, r2, r3
 801eb84:	183a      	adds	r2, r7, r0
 801eb86:	8812      	ldrh	r2, [r2, #0]
 801eb88:	493b      	ldr	r1, [pc, #236]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801eb8a:	430a      	orrs	r2, r1
 801eb8c:	b292      	uxth	r2, r2
 801eb8e:	801a      	strh	r2, [r3, #0]
 801eb90:	e0ac      	b.n	801ecec <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801eb92:	687a      	ldr	r2, [r7, #4]
 801eb94:	683b      	ldr	r3, [r7, #0]
 801eb96:	781b      	ldrb	r3, [r3, #0]
 801eb98:	009b      	lsls	r3, r3, #2
 801eb9a:	18d2      	adds	r2, r2, r3
 801eb9c:	214e      	movs	r1, #78	@ 0x4e
 801eb9e:	187b      	adds	r3, r7, r1
 801eba0:	8812      	ldrh	r2, [r2, #0]
 801eba2:	801a      	strh	r2, [r3, #0]
 801eba4:	187b      	adds	r3, r7, r1
 801eba6:	881a      	ldrh	r2, [r3, #0]
 801eba8:	2380      	movs	r3, #128	@ 0x80
 801ebaa:	01db      	lsls	r3, r3, #7
 801ebac:	4013      	ands	r3, r2
 801ebae:	d016      	beq.n	801ebde <USB_ActivateEndpoint+0x61a>
 801ebb0:	687a      	ldr	r2, [r7, #4]
 801ebb2:	683b      	ldr	r3, [r7, #0]
 801ebb4:	781b      	ldrb	r3, [r3, #0]
 801ebb6:	009b      	lsls	r3, r3, #2
 801ebb8:	18d3      	adds	r3, r2, r3
 801ebba:	881b      	ldrh	r3, [r3, #0]
 801ebbc:	b29a      	uxth	r2, r3
 801ebbe:	204c      	movs	r0, #76	@ 0x4c
 801ebc0:	183b      	adds	r3, r7, r0
 801ebc2:	492a      	ldr	r1, [pc, #168]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801ebc4:	400a      	ands	r2, r1
 801ebc6:	801a      	strh	r2, [r3, #0]
 801ebc8:	687a      	ldr	r2, [r7, #4]
 801ebca:	683b      	ldr	r3, [r7, #0]
 801ebcc:	781b      	ldrb	r3, [r3, #0]
 801ebce:	009b      	lsls	r3, r3, #2
 801ebd0:	18d3      	adds	r3, r2, r3
 801ebd2:	183a      	adds	r2, r7, r0
 801ebd4:	8812      	ldrh	r2, [r2, #0]
 801ebd6:	4926      	ldr	r1, [pc, #152]	@ (801ec70 <USB_ActivateEndpoint+0x6ac>)
 801ebd8:	430a      	orrs	r2, r1
 801ebda:	b292      	uxth	r2, r2
 801ebdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ebde:	687a      	ldr	r2, [r7, #4]
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	781b      	ldrb	r3, [r3, #0]
 801ebe4:	009b      	lsls	r3, r3, #2
 801ebe6:	18d2      	adds	r2, r2, r3
 801ebe8:	214a      	movs	r1, #74	@ 0x4a
 801ebea:	187b      	adds	r3, r7, r1
 801ebec:	8812      	ldrh	r2, [r2, #0]
 801ebee:	801a      	strh	r2, [r3, #0]
 801ebf0:	187b      	adds	r3, r7, r1
 801ebf2:	881b      	ldrh	r3, [r3, #0]
 801ebf4:	2240      	movs	r2, #64	@ 0x40
 801ebf6:	4013      	ands	r3, r2
 801ebf8:	d016      	beq.n	801ec28 <USB_ActivateEndpoint+0x664>
 801ebfa:	687a      	ldr	r2, [r7, #4]
 801ebfc:	683b      	ldr	r3, [r7, #0]
 801ebfe:	781b      	ldrb	r3, [r3, #0]
 801ec00:	009b      	lsls	r3, r3, #2
 801ec02:	18d3      	adds	r3, r2, r3
 801ec04:	881b      	ldrh	r3, [r3, #0]
 801ec06:	b29a      	uxth	r2, r3
 801ec08:	2048      	movs	r0, #72	@ 0x48
 801ec0a:	183b      	adds	r3, r7, r0
 801ec0c:	4917      	ldr	r1, [pc, #92]	@ (801ec6c <USB_ActivateEndpoint+0x6a8>)
 801ec0e:	400a      	ands	r2, r1
 801ec10:	801a      	strh	r2, [r3, #0]
 801ec12:	687a      	ldr	r2, [r7, #4]
 801ec14:	683b      	ldr	r3, [r7, #0]
 801ec16:	781b      	ldrb	r3, [r3, #0]
 801ec18:	009b      	lsls	r3, r3, #2
 801ec1a:	18d3      	adds	r3, r2, r3
 801ec1c:	183a      	adds	r2, r7, r0
 801ec1e:	8812      	ldrh	r2, [r2, #0]
 801ec20:	4919      	ldr	r1, [pc, #100]	@ (801ec88 <USB_ActivateEndpoint+0x6c4>)
 801ec22:	430a      	orrs	r2, r1
 801ec24:	b292      	uxth	r2, r2
 801ec26:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ec28:	683b      	ldr	r3, [r7, #0]
 801ec2a:	78db      	ldrb	r3, [r3, #3]
 801ec2c:	2b01      	cmp	r3, #1
 801ec2e:	d02f      	beq.n	801ec90 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ec30:	687a      	ldr	r2, [r7, #4]
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	781b      	ldrb	r3, [r3, #0]
 801ec36:	009b      	lsls	r3, r3, #2
 801ec38:	18d3      	adds	r3, r2, r3
 801ec3a:	881b      	ldrh	r3, [r3, #0]
 801ec3c:	b29a      	uxth	r2, r3
 801ec3e:	2044      	movs	r0, #68	@ 0x44
 801ec40:	183b      	adds	r3, r7, r0
 801ec42:	4912      	ldr	r1, [pc, #72]	@ (801ec8c <USB_ActivateEndpoint+0x6c8>)
 801ec44:	400a      	ands	r2, r1
 801ec46:	801a      	strh	r2, [r3, #0]
 801ec48:	183b      	adds	r3, r7, r0
 801ec4a:	183a      	adds	r2, r7, r0
 801ec4c:	8812      	ldrh	r2, [r2, #0]
 801ec4e:	2120      	movs	r1, #32
 801ec50:	404a      	eors	r2, r1
 801ec52:	801a      	strh	r2, [r3, #0]
 801ec54:	687a      	ldr	r2, [r7, #4]
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	781b      	ldrb	r3, [r3, #0]
 801ec5a:	009b      	lsls	r3, r3, #2
 801ec5c:	18d3      	adds	r3, r2, r3
 801ec5e:	183a      	adds	r2, r7, r0
 801ec60:	8812      	ldrh	r2, [r2, #0]
 801ec62:	4905      	ldr	r1, [pc, #20]	@ (801ec78 <USB_ActivateEndpoint+0x6b4>)
 801ec64:	430a      	orrs	r2, r1
 801ec66:	b292      	uxth	r2, r2
 801ec68:	801a      	strh	r2, [r3, #0]
 801ec6a:	e028      	b.n	801ecbe <USB_ActivateEndpoint+0x6fa>
 801ec6c:	ffff8f8f 	.word	0xffff8f8f
 801ec70:	ffffc080 	.word	0xffffc080
 801ec74:	ffffbf8f 	.word	0xffffbf8f
 801ec78:	ffff8080 	.word	0xffff8080
 801ec7c:	ffff8180 	.word	0xffff8180
 801ec80:	ffff8e8f 	.word	0xffff8e8f
 801ec84:	00000404 	.word	0x00000404
 801ec88:	ffff80c0 	.word	0xffff80c0
 801ec8c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ec90:	687a      	ldr	r2, [r7, #4]
 801ec92:	683b      	ldr	r3, [r7, #0]
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	009b      	lsls	r3, r3, #2
 801ec98:	18d3      	adds	r3, r2, r3
 801ec9a:	881b      	ldrh	r3, [r3, #0]
 801ec9c:	b29a      	uxth	r2, r3
 801ec9e:	2046      	movs	r0, #70	@ 0x46
 801eca0:	183b      	adds	r3, r7, r0
 801eca2:	4916      	ldr	r1, [pc, #88]	@ (801ecfc <USB_ActivateEndpoint+0x738>)
 801eca4:	400a      	ands	r2, r1
 801eca6:	801a      	strh	r2, [r3, #0]
 801eca8:	687a      	ldr	r2, [r7, #4]
 801ecaa:	683b      	ldr	r3, [r7, #0]
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	009b      	lsls	r3, r3, #2
 801ecb0:	18d3      	adds	r3, r2, r3
 801ecb2:	183a      	adds	r2, r7, r0
 801ecb4:	8812      	ldrh	r2, [r2, #0]
 801ecb6:	4912      	ldr	r1, [pc, #72]	@ (801ed00 <USB_ActivateEndpoint+0x73c>)
 801ecb8:	430a      	orrs	r2, r1
 801ecba:	b292      	uxth	r2, r2
 801ecbc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ecbe:	687a      	ldr	r2, [r7, #4]
 801ecc0:	683b      	ldr	r3, [r7, #0]
 801ecc2:	781b      	ldrb	r3, [r3, #0]
 801ecc4:	009b      	lsls	r3, r3, #2
 801ecc6:	18d3      	adds	r3, r2, r3
 801ecc8:	881b      	ldrh	r3, [r3, #0]
 801ecca:	b29a      	uxth	r2, r3
 801eccc:	2042      	movs	r0, #66	@ 0x42
 801ecce:	183b      	adds	r3, r7, r0
 801ecd0:	490c      	ldr	r1, [pc, #48]	@ (801ed04 <USB_ActivateEndpoint+0x740>)
 801ecd2:	400a      	ands	r2, r1
 801ecd4:	801a      	strh	r2, [r3, #0]
 801ecd6:	687a      	ldr	r2, [r7, #4]
 801ecd8:	683b      	ldr	r3, [r7, #0]
 801ecda:	781b      	ldrb	r3, [r3, #0]
 801ecdc:	009b      	lsls	r3, r3, #2
 801ecde:	18d3      	adds	r3, r2, r3
 801ece0:	183a      	adds	r2, r7, r0
 801ece2:	8812      	ldrh	r2, [r2, #0]
 801ece4:	4906      	ldr	r1, [pc, #24]	@ (801ed00 <USB_ActivateEndpoint+0x73c>)
 801ece6:	430a      	orrs	r2, r1
 801ece8:	b292      	uxth	r2, r2
 801ecea:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801ecec:	236f      	movs	r3, #111	@ 0x6f
 801ecee:	18fb      	adds	r3, r7, r3
 801ecf0:	781b      	ldrb	r3, [r3, #0]
}
 801ecf2:	0018      	movs	r0, r3
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	b01c      	add	sp, #112	@ 0x70
 801ecf8:	bd80      	pop	{r7, pc}
 801ecfa:	46c0      	nop			@ (mov r8, r8)
 801ecfc:	ffff8fbf 	.word	0xffff8fbf
 801ed00:	ffff8080 	.word	0xffff8080
 801ed04:	ffffbf8f 	.word	0xffffbf8f

0801ed08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ed08:	b580      	push	{r7, lr}
 801ed0a:	b08c      	sub	sp, #48	@ 0x30
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	6078      	str	r0, [r7, #4]
 801ed10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ed12:	683b      	ldr	r3, [r7, #0]
 801ed14:	7b1b      	ldrb	r3, [r3, #12]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	d000      	beq.n	801ed1c <USB_DeactivateEndpoint+0x14>
 801ed1a:	e07e      	b.n	801ee1a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	785b      	ldrb	r3, [r3, #1]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d03c      	beq.n	801ed9e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ed24:	687a      	ldr	r2, [r7, #4]
 801ed26:	683b      	ldr	r3, [r7, #0]
 801ed28:	781b      	ldrb	r3, [r3, #0]
 801ed2a:	009b      	lsls	r3, r3, #2
 801ed2c:	18d2      	adds	r2, r2, r3
 801ed2e:	210c      	movs	r1, #12
 801ed30:	187b      	adds	r3, r7, r1
 801ed32:	8812      	ldrh	r2, [r2, #0]
 801ed34:	801a      	strh	r2, [r3, #0]
 801ed36:	187b      	adds	r3, r7, r1
 801ed38:	881b      	ldrh	r3, [r3, #0]
 801ed3a:	2240      	movs	r2, #64	@ 0x40
 801ed3c:	4013      	ands	r3, r2
 801ed3e:	d016      	beq.n	801ed6e <USB_DeactivateEndpoint+0x66>
 801ed40:	687a      	ldr	r2, [r7, #4]
 801ed42:	683b      	ldr	r3, [r7, #0]
 801ed44:	781b      	ldrb	r3, [r3, #0]
 801ed46:	009b      	lsls	r3, r3, #2
 801ed48:	18d3      	adds	r3, r2, r3
 801ed4a:	881b      	ldrh	r3, [r3, #0]
 801ed4c:	b29a      	uxth	r2, r3
 801ed4e:	200a      	movs	r0, #10
 801ed50:	183b      	adds	r3, r7, r0
 801ed52:	49c7      	ldr	r1, [pc, #796]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801ed54:	400a      	ands	r2, r1
 801ed56:	801a      	strh	r2, [r3, #0]
 801ed58:	687a      	ldr	r2, [r7, #4]
 801ed5a:	683b      	ldr	r3, [r7, #0]
 801ed5c:	781b      	ldrb	r3, [r3, #0]
 801ed5e:	009b      	lsls	r3, r3, #2
 801ed60:	18d3      	adds	r3, r2, r3
 801ed62:	183a      	adds	r2, r7, r0
 801ed64:	8812      	ldrh	r2, [r2, #0]
 801ed66:	49c3      	ldr	r1, [pc, #780]	@ (801f074 <USB_DeactivateEndpoint+0x36c>)
 801ed68:	430a      	orrs	r2, r1
 801ed6a:	b292      	uxth	r2, r2
 801ed6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ed6e:	687a      	ldr	r2, [r7, #4]
 801ed70:	683b      	ldr	r3, [r7, #0]
 801ed72:	781b      	ldrb	r3, [r3, #0]
 801ed74:	009b      	lsls	r3, r3, #2
 801ed76:	18d3      	adds	r3, r2, r3
 801ed78:	881b      	ldrh	r3, [r3, #0]
 801ed7a:	b29a      	uxth	r2, r3
 801ed7c:	2008      	movs	r0, #8
 801ed7e:	183b      	adds	r3, r7, r0
 801ed80:	49bd      	ldr	r1, [pc, #756]	@ (801f078 <USB_DeactivateEndpoint+0x370>)
 801ed82:	400a      	ands	r2, r1
 801ed84:	801a      	strh	r2, [r3, #0]
 801ed86:	687a      	ldr	r2, [r7, #4]
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	781b      	ldrb	r3, [r3, #0]
 801ed8c:	009b      	lsls	r3, r3, #2
 801ed8e:	18d3      	adds	r3, r2, r3
 801ed90:	183a      	adds	r2, r7, r0
 801ed92:	8812      	ldrh	r2, [r2, #0]
 801ed94:	49b9      	ldr	r1, [pc, #740]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801ed96:	430a      	orrs	r2, r1
 801ed98:	b292      	uxth	r2, r2
 801ed9a:	801a      	strh	r2, [r3, #0]
 801ed9c:	e163      	b.n	801f066 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ed9e:	687a      	ldr	r2, [r7, #4]
 801eda0:	683b      	ldr	r3, [r7, #0]
 801eda2:	781b      	ldrb	r3, [r3, #0]
 801eda4:	009b      	lsls	r3, r3, #2
 801eda6:	18d2      	adds	r2, r2, r3
 801eda8:	2112      	movs	r1, #18
 801edaa:	187b      	adds	r3, r7, r1
 801edac:	8812      	ldrh	r2, [r2, #0]
 801edae:	801a      	strh	r2, [r3, #0]
 801edb0:	187b      	adds	r3, r7, r1
 801edb2:	881a      	ldrh	r2, [r3, #0]
 801edb4:	2380      	movs	r3, #128	@ 0x80
 801edb6:	01db      	lsls	r3, r3, #7
 801edb8:	4013      	ands	r3, r2
 801edba:	d016      	beq.n	801edea <USB_DeactivateEndpoint+0xe2>
 801edbc:	687a      	ldr	r2, [r7, #4]
 801edbe:	683b      	ldr	r3, [r7, #0]
 801edc0:	781b      	ldrb	r3, [r3, #0]
 801edc2:	009b      	lsls	r3, r3, #2
 801edc4:	18d3      	adds	r3, r2, r3
 801edc6:	881b      	ldrh	r3, [r3, #0]
 801edc8:	b29a      	uxth	r2, r3
 801edca:	2010      	movs	r0, #16
 801edcc:	183b      	adds	r3, r7, r0
 801edce:	49a8      	ldr	r1, [pc, #672]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801edd0:	400a      	ands	r2, r1
 801edd2:	801a      	strh	r2, [r3, #0]
 801edd4:	687a      	ldr	r2, [r7, #4]
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	781b      	ldrb	r3, [r3, #0]
 801edda:	009b      	lsls	r3, r3, #2
 801eddc:	18d3      	adds	r3, r2, r3
 801edde:	183a      	adds	r2, r7, r0
 801ede0:	8812      	ldrh	r2, [r2, #0]
 801ede2:	49a7      	ldr	r1, [pc, #668]	@ (801f080 <USB_DeactivateEndpoint+0x378>)
 801ede4:	430a      	orrs	r2, r1
 801ede6:	b292      	uxth	r2, r2
 801ede8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801edea:	687a      	ldr	r2, [r7, #4]
 801edec:	683b      	ldr	r3, [r7, #0]
 801edee:	781b      	ldrb	r3, [r3, #0]
 801edf0:	009b      	lsls	r3, r3, #2
 801edf2:	18d3      	adds	r3, r2, r3
 801edf4:	881b      	ldrh	r3, [r3, #0]
 801edf6:	b29a      	uxth	r2, r3
 801edf8:	200e      	movs	r0, #14
 801edfa:	183b      	adds	r3, r7, r0
 801edfc:	49a1      	ldr	r1, [pc, #644]	@ (801f084 <USB_DeactivateEndpoint+0x37c>)
 801edfe:	400a      	ands	r2, r1
 801ee00:	801a      	strh	r2, [r3, #0]
 801ee02:	687a      	ldr	r2, [r7, #4]
 801ee04:	683b      	ldr	r3, [r7, #0]
 801ee06:	781b      	ldrb	r3, [r3, #0]
 801ee08:	009b      	lsls	r3, r3, #2
 801ee0a:	18d3      	adds	r3, r2, r3
 801ee0c:	183a      	adds	r2, r7, r0
 801ee0e:	8812      	ldrh	r2, [r2, #0]
 801ee10:	499a      	ldr	r1, [pc, #616]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801ee12:	430a      	orrs	r2, r1
 801ee14:	b292      	uxth	r2, r2
 801ee16:	801a      	strh	r2, [r3, #0]
 801ee18:	e125      	b.n	801f066 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801ee1a:	683b      	ldr	r3, [r7, #0]
 801ee1c:	785b      	ldrb	r3, [r3, #1]
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	d000      	beq.n	801ee24 <USB_DeactivateEndpoint+0x11c>
 801ee22:	e090      	b.n	801ef46 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ee24:	687a      	ldr	r2, [r7, #4]
 801ee26:	683b      	ldr	r3, [r7, #0]
 801ee28:	781b      	ldrb	r3, [r3, #0]
 801ee2a:	009b      	lsls	r3, r3, #2
 801ee2c:	18d2      	adds	r2, r2, r3
 801ee2e:	2120      	movs	r1, #32
 801ee30:	187b      	adds	r3, r7, r1
 801ee32:	8812      	ldrh	r2, [r2, #0]
 801ee34:	801a      	strh	r2, [r3, #0]
 801ee36:	187b      	adds	r3, r7, r1
 801ee38:	881a      	ldrh	r2, [r3, #0]
 801ee3a:	2380      	movs	r3, #128	@ 0x80
 801ee3c:	01db      	lsls	r3, r3, #7
 801ee3e:	4013      	ands	r3, r2
 801ee40:	d016      	beq.n	801ee70 <USB_DeactivateEndpoint+0x168>
 801ee42:	687a      	ldr	r2, [r7, #4]
 801ee44:	683b      	ldr	r3, [r7, #0]
 801ee46:	781b      	ldrb	r3, [r3, #0]
 801ee48:	009b      	lsls	r3, r3, #2
 801ee4a:	18d3      	adds	r3, r2, r3
 801ee4c:	881b      	ldrh	r3, [r3, #0]
 801ee4e:	b29a      	uxth	r2, r3
 801ee50:	201e      	movs	r0, #30
 801ee52:	183b      	adds	r3, r7, r0
 801ee54:	4986      	ldr	r1, [pc, #536]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801ee56:	400a      	ands	r2, r1
 801ee58:	801a      	strh	r2, [r3, #0]
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	683b      	ldr	r3, [r7, #0]
 801ee5e:	781b      	ldrb	r3, [r3, #0]
 801ee60:	009b      	lsls	r3, r3, #2
 801ee62:	18d3      	adds	r3, r2, r3
 801ee64:	183a      	adds	r2, r7, r0
 801ee66:	8812      	ldrh	r2, [r2, #0]
 801ee68:	4985      	ldr	r1, [pc, #532]	@ (801f080 <USB_DeactivateEndpoint+0x378>)
 801ee6a:	430a      	orrs	r2, r1
 801ee6c:	b292      	uxth	r2, r2
 801ee6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ee70:	687a      	ldr	r2, [r7, #4]
 801ee72:	683b      	ldr	r3, [r7, #0]
 801ee74:	781b      	ldrb	r3, [r3, #0]
 801ee76:	009b      	lsls	r3, r3, #2
 801ee78:	18d2      	adds	r2, r2, r3
 801ee7a:	211c      	movs	r1, #28
 801ee7c:	187b      	adds	r3, r7, r1
 801ee7e:	8812      	ldrh	r2, [r2, #0]
 801ee80:	801a      	strh	r2, [r3, #0]
 801ee82:	187b      	adds	r3, r7, r1
 801ee84:	881b      	ldrh	r3, [r3, #0]
 801ee86:	2240      	movs	r2, #64	@ 0x40
 801ee88:	4013      	ands	r3, r2
 801ee8a:	d016      	beq.n	801eeba <USB_DeactivateEndpoint+0x1b2>
 801ee8c:	687a      	ldr	r2, [r7, #4]
 801ee8e:	683b      	ldr	r3, [r7, #0]
 801ee90:	781b      	ldrb	r3, [r3, #0]
 801ee92:	009b      	lsls	r3, r3, #2
 801ee94:	18d3      	adds	r3, r2, r3
 801ee96:	881b      	ldrh	r3, [r3, #0]
 801ee98:	b29a      	uxth	r2, r3
 801ee9a:	201a      	movs	r0, #26
 801ee9c:	183b      	adds	r3, r7, r0
 801ee9e:	4974      	ldr	r1, [pc, #464]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801eea0:	400a      	ands	r2, r1
 801eea2:	801a      	strh	r2, [r3, #0]
 801eea4:	687a      	ldr	r2, [r7, #4]
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	781b      	ldrb	r3, [r3, #0]
 801eeaa:	009b      	lsls	r3, r3, #2
 801eeac:	18d3      	adds	r3, r2, r3
 801eeae:	183a      	adds	r2, r7, r0
 801eeb0:	8812      	ldrh	r2, [r2, #0]
 801eeb2:	4970      	ldr	r1, [pc, #448]	@ (801f074 <USB_DeactivateEndpoint+0x36c>)
 801eeb4:	430a      	orrs	r2, r1
 801eeb6:	b292      	uxth	r2, r2
 801eeb8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801eeba:	687a      	ldr	r2, [r7, #4]
 801eebc:	683b      	ldr	r3, [r7, #0]
 801eebe:	781b      	ldrb	r3, [r3, #0]
 801eec0:	009b      	lsls	r3, r3, #2
 801eec2:	18d3      	adds	r3, r2, r3
 801eec4:	881b      	ldrh	r3, [r3, #0]
 801eec6:	b29a      	uxth	r2, r3
 801eec8:	2018      	movs	r0, #24
 801eeca:	183b      	adds	r3, r7, r0
 801eecc:	4968      	ldr	r1, [pc, #416]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801eece:	400a      	ands	r2, r1
 801eed0:	801a      	strh	r2, [r3, #0]
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	683b      	ldr	r3, [r7, #0]
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	18d3      	adds	r3, r2, r3
 801eedc:	183a      	adds	r2, r7, r0
 801eede:	8812      	ldrh	r2, [r2, #0]
 801eee0:	4964      	ldr	r1, [pc, #400]	@ (801f074 <USB_DeactivateEndpoint+0x36c>)
 801eee2:	430a      	orrs	r2, r1
 801eee4:	b292      	uxth	r2, r2
 801eee6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801eee8:	687a      	ldr	r2, [r7, #4]
 801eeea:	683b      	ldr	r3, [r7, #0]
 801eeec:	781b      	ldrb	r3, [r3, #0]
 801eeee:	009b      	lsls	r3, r3, #2
 801eef0:	18d3      	adds	r3, r2, r3
 801eef2:	881b      	ldrh	r3, [r3, #0]
 801eef4:	b29a      	uxth	r2, r3
 801eef6:	2016      	movs	r0, #22
 801eef8:	183b      	adds	r3, r7, r0
 801eefa:	4962      	ldr	r1, [pc, #392]	@ (801f084 <USB_DeactivateEndpoint+0x37c>)
 801eefc:	400a      	ands	r2, r1
 801eefe:	801a      	strh	r2, [r3, #0]
 801ef00:	687a      	ldr	r2, [r7, #4]
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	781b      	ldrb	r3, [r3, #0]
 801ef06:	009b      	lsls	r3, r3, #2
 801ef08:	18d3      	adds	r3, r2, r3
 801ef0a:	183a      	adds	r2, r7, r0
 801ef0c:	8812      	ldrh	r2, [r2, #0]
 801ef0e:	495b      	ldr	r1, [pc, #364]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801ef10:	430a      	orrs	r2, r1
 801ef12:	b292      	uxth	r2, r2
 801ef14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ef16:	687a      	ldr	r2, [r7, #4]
 801ef18:	683b      	ldr	r3, [r7, #0]
 801ef1a:	781b      	ldrb	r3, [r3, #0]
 801ef1c:	009b      	lsls	r3, r3, #2
 801ef1e:	18d3      	adds	r3, r2, r3
 801ef20:	881b      	ldrh	r3, [r3, #0]
 801ef22:	b29a      	uxth	r2, r3
 801ef24:	2014      	movs	r0, #20
 801ef26:	183b      	adds	r3, r7, r0
 801ef28:	4953      	ldr	r1, [pc, #332]	@ (801f078 <USB_DeactivateEndpoint+0x370>)
 801ef2a:	400a      	ands	r2, r1
 801ef2c:	801a      	strh	r2, [r3, #0]
 801ef2e:	687a      	ldr	r2, [r7, #4]
 801ef30:	683b      	ldr	r3, [r7, #0]
 801ef32:	781b      	ldrb	r3, [r3, #0]
 801ef34:	009b      	lsls	r3, r3, #2
 801ef36:	18d3      	adds	r3, r2, r3
 801ef38:	183a      	adds	r2, r7, r0
 801ef3a:	8812      	ldrh	r2, [r2, #0]
 801ef3c:	494f      	ldr	r1, [pc, #316]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801ef3e:	430a      	orrs	r2, r1
 801ef40:	b292      	uxth	r2, r2
 801ef42:	801a      	strh	r2, [r3, #0]
 801ef44:	e08f      	b.n	801f066 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ef46:	687a      	ldr	r2, [r7, #4]
 801ef48:	683b      	ldr	r3, [r7, #0]
 801ef4a:	781b      	ldrb	r3, [r3, #0]
 801ef4c:	009b      	lsls	r3, r3, #2
 801ef4e:	18d2      	adds	r2, r2, r3
 801ef50:	212e      	movs	r1, #46	@ 0x2e
 801ef52:	187b      	adds	r3, r7, r1
 801ef54:	8812      	ldrh	r2, [r2, #0]
 801ef56:	801a      	strh	r2, [r3, #0]
 801ef58:	187b      	adds	r3, r7, r1
 801ef5a:	881a      	ldrh	r2, [r3, #0]
 801ef5c:	2380      	movs	r3, #128	@ 0x80
 801ef5e:	01db      	lsls	r3, r3, #7
 801ef60:	4013      	ands	r3, r2
 801ef62:	d016      	beq.n	801ef92 <USB_DeactivateEndpoint+0x28a>
 801ef64:	687a      	ldr	r2, [r7, #4]
 801ef66:	683b      	ldr	r3, [r7, #0]
 801ef68:	781b      	ldrb	r3, [r3, #0]
 801ef6a:	009b      	lsls	r3, r3, #2
 801ef6c:	18d3      	adds	r3, r2, r3
 801ef6e:	881b      	ldrh	r3, [r3, #0]
 801ef70:	b29a      	uxth	r2, r3
 801ef72:	202c      	movs	r0, #44	@ 0x2c
 801ef74:	183b      	adds	r3, r7, r0
 801ef76:	493e      	ldr	r1, [pc, #248]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801ef78:	400a      	ands	r2, r1
 801ef7a:	801a      	strh	r2, [r3, #0]
 801ef7c:	687a      	ldr	r2, [r7, #4]
 801ef7e:	683b      	ldr	r3, [r7, #0]
 801ef80:	781b      	ldrb	r3, [r3, #0]
 801ef82:	009b      	lsls	r3, r3, #2
 801ef84:	18d3      	adds	r3, r2, r3
 801ef86:	183a      	adds	r2, r7, r0
 801ef88:	8812      	ldrh	r2, [r2, #0]
 801ef8a:	493d      	ldr	r1, [pc, #244]	@ (801f080 <USB_DeactivateEndpoint+0x378>)
 801ef8c:	430a      	orrs	r2, r1
 801ef8e:	b292      	uxth	r2, r2
 801ef90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ef92:	687a      	ldr	r2, [r7, #4]
 801ef94:	683b      	ldr	r3, [r7, #0]
 801ef96:	781b      	ldrb	r3, [r3, #0]
 801ef98:	009b      	lsls	r3, r3, #2
 801ef9a:	18d2      	adds	r2, r2, r3
 801ef9c:	212a      	movs	r1, #42	@ 0x2a
 801ef9e:	187b      	adds	r3, r7, r1
 801efa0:	8812      	ldrh	r2, [r2, #0]
 801efa2:	801a      	strh	r2, [r3, #0]
 801efa4:	187b      	adds	r3, r7, r1
 801efa6:	881b      	ldrh	r3, [r3, #0]
 801efa8:	2240      	movs	r2, #64	@ 0x40
 801efaa:	4013      	ands	r3, r2
 801efac:	d016      	beq.n	801efdc <USB_DeactivateEndpoint+0x2d4>
 801efae:	687a      	ldr	r2, [r7, #4]
 801efb0:	683b      	ldr	r3, [r7, #0]
 801efb2:	781b      	ldrb	r3, [r3, #0]
 801efb4:	009b      	lsls	r3, r3, #2
 801efb6:	18d3      	adds	r3, r2, r3
 801efb8:	881b      	ldrh	r3, [r3, #0]
 801efba:	b29a      	uxth	r2, r3
 801efbc:	2028      	movs	r0, #40	@ 0x28
 801efbe:	183b      	adds	r3, r7, r0
 801efc0:	492b      	ldr	r1, [pc, #172]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801efc2:	400a      	ands	r2, r1
 801efc4:	801a      	strh	r2, [r3, #0]
 801efc6:	687a      	ldr	r2, [r7, #4]
 801efc8:	683b      	ldr	r3, [r7, #0]
 801efca:	781b      	ldrb	r3, [r3, #0]
 801efcc:	009b      	lsls	r3, r3, #2
 801efce:	18d3      	adds	r3, r2, r3
 801efd0:	183a      	adds	r2, r7, r0
 801efd2:	8812      	ldrh	r2, [r2, #0]
 801efd4:	4927      	ldr	r1, [pc, #156]	@ (801f074 <USB_DeactivateEndpoint+0x36c>)
 801efd6:	430a      	orrs	r2, r1
 801efd8:	b292      	uxth	r2, r2
 801efda:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801efdc:	687a      	ldr	r2, [r7, #4]
 801efde:	683b      	ldr	r3, [r7, #0]
 801efe0:	781b      	ldrb	r3, [r3, #0]
 801efe2:	009b      	lsls	r3, r3, #2
 801efe4:	18d3      	adds	r3, r2, r3
 801efe6:	881b      	ldrh	r3, [r3, #0]
 801efe8:	b29a      	uxth	r2, r3
 801efea:	2026      	movs	r0, #38	@ 0x26
 801efec:	183b      	adds	r3, r7, r0
 801efee:	4920      	ldr	r1, [pc, #128]	@ (801f070 <USB_DeactivateEndpoint+0x368>)
 801eff0:	400a      	ands	r2, r1
 801eff2:	801a      	strh	r2, [r3, #0]
 801eff4:	687a      	ldr	r2, [r7, #4]
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	781b      	ldrb	r3, [r3, #0]
 801effa:	009b      	lsls	r3, r3, #2
 801effc:	18d3      	adds	r3, r2, r3
 801effe:	183a      	adds	r2, r7, r0
 801f000:	8812      	ldrh	r2, [r2, #0]
 801f002:	491f      	ldr	r1, [pc, #124]	@ (801f080 <USB_DeactivateEndpoint+0x378>)
 801f004:	430a      	orrs	r2, r1
 801f006:	b292      	uxth	r2, r2
 801f008:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f00a:	687a      	ldr	r2, [r7, #4]
 801f00c:	683b      	ldr	r3, [r7, #0]
 801f00e:	781b      	ldrb	r3, [r3, #0]
 801f010:	009b      	lsls	r3, r3, #2
 801f012:	18d3      	adds	r3, r2, r3
 801f014:	881b      	ldrh	r3, [r3, #0]
 801f016:	b29a      	uxth	r2, r3
 801f018:	2024      	movs	r0, #36	@ 0x24
 801f01a:	183b      	adds	r3, r7, r0
 801f01c:	4916      	ldr	r1, [pc, #88]	@ (801f078 <USB_DeactivateEndpoint+0x370>)
 801f01e:	400a      	ands	r2, r1
 801f020:	801a      	strh	r2, [r3, #0]
 801f022:	687a      	ldr	r2, [r7, #4]
 801f024:	683b      	ldr	r3, [r7, #0]
 801f026:	781b      	ldrb	r3, [r3, #0]
 801f028:	009b      	lsls	r3, r3, #2
 801f02a:	18d3      	adds	r3, r2, r3
 801f02c:	183a      	adds	r2, r7, r0
 801f02e:	8812      	ldrh	r2, [r2, #0]
 801f030:	4912      	ldr	r1, [pc, #72]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801f032:	430a      	orrs	r2, r1
 801f034:	b292      	uxth	r2, r2
 801f036:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f038:	687a      	ldr	r2, [r7, #4]
 801f03a:	683b      	ldr	r3, [r7, #0]
 801f03c:	781b      	ldrb	r3, [r3, #0]
 801f03e:	009b      	lsls	r3, r3, #2
 801f040:	18d3      	adds	r3, r2, r3
 801f042:	881b      	ldrh	r3, [r3, #0]
 801f044:	b29a      	uxth	r2, r3
 801f046:	2022      	movs	r0, #34	@ 0x22
 801f048:	183b      	adds	r3, r7, r0
 801f04a:	490e      	ldr	r1, [pc, #56]	@ (801f084 <USB_DeactivateEndpoint+0x37c>)
 801f04c:	400a      	ands	r2, r1
 801f04e:	801a      	strh	r2, [r3, #0]
 801f050:	687a      	ldr	r2, [r7, #4]
 801f052:	683b      	ldr	r3, [r7, #0]
 801f054:	781b      	ldrb	r3, [r3, #0]
 801f056:	009b      	lsls	r3, r3, #2
 801f058:	18d3      	adds	r3, r2, r3
 801f05a:	183a      	adds	r2, r7, r0
 801f05c:	8812      	ldrh	r2, [r2, #0]
 801f05e:	4907      	ldr	r1, [pc, #28]	@ (801f07c <USB_DeactivateEndpoint+0x374>)
 801f060:	430a      	orrs	r2, r1
 801f062:	b292      	uxth	r2, r2
 801f064:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801f066:	2300      	movs	r3, #0
}
 801f068:	0018      	movs	r0, r3
 801f06a:	46bd      	mov	sp, r7
 801f06c:	b00c      	add	sp, #48	@ 0x30
 801f06e:	bd80      	pop	{r7, pc}
 801f070:	ffff8f8f 	.word	0xffff8f8f
 801f074:	ffff80c0 	.word	0xffff80c0
 801f078:	ffff8fbf 	.word	0xffff8fbf
 801f07c:	ffff8080 	.word	0xffff8080
 801f080:	ffffc080 	.word	0xffffc080
 801f084:	ffffbf8f 	.word	0xffffbf8f

0801f088 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f088:	b590      	push	{r4, r7, lr}
 801f08a:	b0c3      	sub	sp, #268	@ 0x10c
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	6078      	str	r0, [r7, #4]
 801f090:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801f092:	683b      	ldr	r3, [r7, #0]
 801f094:	785b      	ldrb	r3, [r3, #1]
 801f096:	2b01      	cmp	r3, #1
 801f098:	d001      	beq.n	801f09e <USB_EPStartXfer+0x16>
 801f09a:	f000 fd2d 	bl	801faf8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801f09e:	683b      	ldr	r3, [r7, #0]
 801f0a0:	699a      	ldr	r2, [r3, #24]
 801f0a2:	683b      	ldr	r3, [r7, #0]
 801f0a4:	691b      	ldr	r3, [r3, #16]
 801f0a6:	429a      	cmp	r2, r3
 801f0a8:	d905      	bls.n	801f0b6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801f0aa:	683b      	ldr	r3, [r7, #0]
 801f0ac:	691b      	ldr	r3, [r3, #16]
 801f0ae:	1d7a      	adds	r2, r7, #5
 801f0b0:	32ff      	adds	r2, #255	@ 0xff
 801f0b2:	6013      	str	r3, [r2, #0]
 801f0b4:	e004      	b.n	801f0c0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801f0b6:	683b      	ldr	r3, [r7, #0]
 801f0b8:	699b      	ldr	r3, [r3, #24]
 801f0ba:	1d7a      	adds	r2, r7, #5
 801f0bc:	32ff      	adds	r2, #255	@ 0xff
 801f0be:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801f0c0:	683b      	ldr	r3, [r7, #0]
 801f0c2:	7b1b      	ldrb	r3, [r3, #12]
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d125      	bne.n	801f114 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801f0c8:	683b      	ldr	r3, [r7, #0]
 801f0ca:	6959      	ldr	r1, [r3, #20]
 801f0cc:	683b      	ldr	r3, [r7, #0]
 801f0ce:	88da      	ldrh	r2, [r3, #6]
 801f0d0:	1d7b      	adds	r3, r7, #5
 801f0d2:	33ff      	adds	r3, #255	@ 0xff
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	b29b      	uxth	r3, r3
 801f0d8:	6878      	ldr	r0, [r7, #4]
 801f0da:	f001 fa47 	bl	802056c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	613b      	str	r3, [r7, #16]
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	2250      	movs	r2, #80	@ 0x50
 801f0e6:	5a9b      	ldrh	r3, [r3, r2]
 801f0e8:	b29b      	uxth	r3, r3
 801f0ea:	001a      	movs	r2, r3
 801f0ec:	693b      	ldr	r3, [r7, #16]
 801f0ee:	189b      	adds	r3, r3, r2
 801f0f0:	613b      	str	r3, [r7, #16]
 801f0f2:	683b      	ldr	r3, [r7, #0]
 801f0f4:	781b      	ldrb	r3, [r3, #0]
 801f0f6:	00da      	lsls	r2, r3, #3
 801f0f8:	693b      	ldr	r3, [r7, #16]
 801f0fa:	18d3      	adds	r3, r2, r3
 801f0fc:	4ad7      	ldr	r2, [pc, #860]	@ (801f45c <USB_EPStartXfer+0x3d4>)
 801f0fe:	4694      	mov	ip, r2
 801f100:	4463      	add	r3, ip
 801f102:	60fb      	str	r3, [r7, #12]
 801f104:	1d7b      	adds	r3, r7, #5
 801f106:	33ff      	adds	r3, #255	@ 0xff
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	b29a      	uxth	r2, r3
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	801a      	strh	r2, [r3, #0]
 801f110:	f000 fccd 	bl	801faae <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801f114:	683b      	ldr	r3, [r7, #0]
 801f116:	78db      	ldrb	r3, [r3, #3]
 801f118:	2b02      	cmp	r3, #2
 801f11a:	d000      	beq.n	801f11e <USB_EPStartXfer+0x96>
 801f11c:	e362      	b.n	801f7e4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801f11e:	683b      	ldr	r3, [r7, #0]
 801f120:	6a1a      	ldr	r2, [r3, #32]
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	691b      	ldr	r3, [r3, #16]
 801f126:	429a      	cmp	r2, r3
 801f128:	d800      	bhi.n	801f12c <USB_EPStartXfer+0xa4>
 801f12a:	e309      	b.n	801f740 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f12c:	687a      	ldr	r2, [r7, #4]
 801f12e:	683b      	ldr	r3, [r7, #0]
 801f130:	781b      	ldrb	r3, [r3, #0]
 801f132:	009b      	lsls	r3, r3, #2
 801f134:	18d3      	adds	r3, r2, r3
 801f136:	881b      	ldrh	r3, [r3, #0]
 801f138:	b29a      	uxth	r2, r3
 801f13a:	2056      	movs	r0, #86	@ 0x56
 801f13c:	183b      	adds	r3, r7, r0
 801f13e:	49c8      	ldr	r1, [pc, #800]	@ (801f460 <USB_EPStartXfer+0x3d8>)
 801f140:	400a      	ands	r2, r1
 801f142:	801a      	strh	r2, [r3, #0]
 801f144:	687a      	ldr	r2, [r7, #4]
 801f146:	683b      	ldr	r3, [r7, #0]
 801f148:	781b      	ldrb	r3, [r3, #0]
 801f14a:	009b      	lsls	r3, r3, #2
 801f14c:	18d3      	adds	r3, r2, r3
 801f14e:	183a      	adds	r2, r7, r0
 801f150:	8812      	ldrh	r2, [r2, #0]
 801f152:	49c4      	ldr	r1, [pc, #784]	@ (801f464 <USB_EPStartXfer+0x3dc>)
 801f154:	430a      	orrs	r2, r1
 801f156:	b292      	uxth	r2, r2
 801f158:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801f15a:	683b      	ldr	r3, [r7, #0]
 801f15c:	6a1a      	ldr	r2, [r3, #32]
 801f15e:	1d7b      	adds	r3, r7, #5
 801f160:	33ff      	adds	r3, #255	@ 0xff
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	1ad2      	subs	r2, r2, r3
 801f166:	683b      	ldr	r3, [r7, #0]
 801f168:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f16a:	687a      	ldr	r2, [r7, #4]
 801f16c:	683b      	ldr	r3, [r7, #0]
 801f16e:	781b      	ldrb	r3, [r3, #0]
 801f170:	009b      	lsls	r3, r3, #2
 801f172:	18d3      	adds	r3, r2, r3
 801f174:	881b      	ldrh	r3, [r3, #0]
 801f176:	b29b      	uxth	r3, r3
 801f178:	001a      	movs	r2, r3
 801f17a:	2340      	movs	r3, #64	@ 0x40
 801f17c:	4013      	ands	r3, r2
 801f17e:	d100      	bne.n	801f182 <USB_EPStartXfer+0xfa>
 801f180:	e176      	b.n	801f470 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	633b      	str	r3, [r7, #48]	@ 0x30
 801f186:	683b      	ldr	r3, [r7, #0]
 801f188:	785b      	ldrb	r3, [r3, #1]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d000      	beq.n	801f190 <USB_EPStartXfer+0x108>
 801f18e:	e074      	b.n	801f27a <USB_EPStartXfer+0x1f2>
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	2250      	movs	r2, #80	@ 0x50
 801f198:	5a9b      	ldrh	r3, [r3, r2]
 801f19a:	b29b      	uxth	r3, r3
 801f19c:	001a      	movs	r2, r3
 801f19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1a0:	189b      	adds	r3, r3, r2
 801f1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f1a4:	683b      	ldr	r3, [r7, #0]
 801f1a6:	781b      	ldrb	r3, [r3, #0]
 801f1a8:	00da      	lsls	r2, r3, #3
 801f1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1ac:	18d3      	adds	r3, r2, r3
 801f1ae:	4aae      	ldr	r2, [pc, #696]	@ (801f468 <USB_EPStartXfer+0x3e0>)
 801f1b0:	4694      	mov	ip, r2
 801f1b2:	4463      	add	r3, ip
 801f1b4:	627b      	str	r3, [r7, #36]	@ 0x24
 801f1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1b8:	881b      	ldrh	r3, [r3, #0]
 801f1ba:	b29b      	uxth	r3, r3
 801f1bc:	059b      	lsls	r3, r3, #22
 801f1be:	0d9b      	lsrs	r3, r3, #22
 801f1c0:	b29a      	uxth	r2, r3
 801f1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1c4:	801a      	strh	r2, [r3, #0]
 801f1c6:	1d7b      	adds	r3, r7, #5
 801f1c8:	33ff      	adds	r3, #255	@ 0xff
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	2b3e      	cmp	r3, #62	@ 0x3e
 801f1ce:	d924      	bls.n	801f21a <USB_EPStartXfer+0x192>
 801f1d0:	1d7b      	adds	r3, r7, #5
 801f1d2:	33ff      	adds	r3, #255	@ 0xff
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	095b      	lsrs	r3, r3, #5
 801f1d8:	1c7a      	adds	r2, r7, #1
 801f1da:	32ff      	adds	r2, #255	@ 0xff
 801f1dc:	6013      	str	r3, [r2, #0]
 801f1de:	1d7b      	adds	r3, r7, #5
 801f1e0:	33ff      	adds	r3, #255	@ 0xff
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	221f      	movs	r2, #31
 801f1e6:	4013      	ands	r3, r2
 801f1e8:	d106      	bne.n	801f1f8 <USB_EPStartXfer+0x170>
 801f1ea:	1c7b      	adds	r3, r7, #1
 801f1ec:	33ff      	adds	r3, #255	@ 0xff
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	3b01      	subs	r3, #1
 801f1f2:	1c7a      	adds	r2, r7, #1
 801f1f4:	32ff      	adds	r2, #255	@ 0xff
 801f1f6:	6013      	str	r3, [r2, #0]
 801f1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1fa:	881b      	ldrh	r3, [r3, #0]
 801f1fc:	b29a      	uxth	r2, r3
 801f1fe:	1c7b      	adds	r3, r7, #1
 801f200:	33ff      	adds	r3, #255	@ 0xff
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	b29b      	uxth	r3, r3
 801f206:	029b      	lsls	r3, r3, #10
 801f208:	b29b      	uxth	r3, r3
 801f20a:	4313      	orrs	r3, r2
 801f20c:	b29b      	uxth	r3, r3
 801f20e:	4a97      	ldr	r2, [pc, #604]	@ (801f46c <USB_EPStartXfer+0x3e4>)
 801f210:	4313      	orrs	r3, r2
 801f212:	b29a      	uxth	r2, r3
 801f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f216:	801a      	strh	r2, [r3, #0]
 801f218:	e04a      	b.n	801f2b0 <USB_EPStartXfer+0x228>
 801f21a:	1d7b      	adds	r3, r7, #5
 801f21c:	33ff      	adds	r3, #255	@ 0xff
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	2b00      	cmp	r3, #0
 801f222:	d108      	bne.n	801f236 <USB_EPStartXfer+0x1ae>
 801f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f226:	881b      	ldrh	r3, [r3, #0]
 801f228:	b29b      	uxth	r3, r3
 801f22a:	4a90      	ldr	r2, [pc, #576]	@ (801f46c <USB_EPStartXfer+0x3e4>)
 801f22c:	4313      	orrs	r3, r2
 801f22e:	b29a      	uxth	r2, r3
 801f230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f232:	801a      	strh	r2, [r3, #0]
 801f234:	e03c      	b.n	801f2b0 <USB_EPStartXfer+0x228>
 801f236:	1d7b      	adds	r3, r7, #5
 801f238:	33ff      	adds	r3, #255	@ 0xff
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	085b      	lsrs	r3, r3, #1
 801f23e:	1c7a      	adds	r2, r7, #1
 801f240:	32ff      	adds	r2, #255	@ 0xff
 801f242:	6013      	str	r3, [r2, #0]
 801f244:	1d7b      	adds	r3, r7, #5
 801f246:	33ff      	adds	r3, #255	@ 0xff
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	2201      	movs	r2, #1
 801f24c:	4013      	ands	r3, r2
 801f24e:	d006      	beq.n	801f25e <USB_EPStartXfer+0x1d6>
 801f250:	1c7b      	adds	r3, r7, #1
 801f252:	33ff      	adds	r3, #255	@ 0xff
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	3301      	adds	r3, #1
 801f258:	1c7a      	adds	r2, r7, #1
 801f25a:	32ff      	adds	r2, #255	@ 0xff
 801f25c:	6013      	str	r3, [r2, #0]
 801f25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f260:	881b      	ldrh	r3, [r3, #0]
 801f262:	b29a      	uxth	r2, r3
 801f264:	1c7b      	adds	r3, r7, #1
 801f266:	33ff      	adds	r3, #255	@ 0xff
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	b29b      	uxth	r3, r3
 801f26c:	029b      	lsls	r3, r3, #10
 801f26e:	b29b      	uxth	r3, r3
 801f270:	4313      	orrs	r3, r2
 801f272:	b29a      	uxth	r2, r3
 801f274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f276:	801a      	strh	r2, [r3, #0]
 801f278:	e01a      	b.n	801f2b0 <USB_EPStartXfer+0x228>
 801f27a:	683b      	ldr	r3, [r7, #0]
 801f27c:	785b      	ldrb	r3, [r3, #1]
 801f27e:	2b01      	cmp	r3, #1
 801f280:	d116      	bne.n	801f2b0 <USB_EPStartXfer+0x228>
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	2250      	movs	r2, #80	@ 0x50
 801f286:	5a9b      	ldrh	r3, [r3, r2]
 801f288:	b29b      	uxth	r3, r3
 801f28a:	001a      	movs	r2, r3
 801f28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f28e:	189b      	adds	r3, r3, r2
 801f290:	633b      	str	r3, [r7, #48]	@ 0x30
 801f292:	683b      	ldr	r3, [r7, #0]
 801f294:	781b      	ldrb	r3, [r3, #0]
 801f296:	00da      	lsls	r2, r3, #3
 801f298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f29a:	18d3      	adds	r3, r2, r3
 801f29c:	4a72      	ldr	r2, [pc, #456]	@ (801f468 <USB_EPStartXfer+0x3e0>)
 801f29e:	4694      	mov	ip, r2
 801f2a0:	4463      	add	r3, ip
 801f2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f2a4:	1d7b      	adds	r3, r7, #5
 801f2a6:	33ff      	adds	r3, #255	@ 0xff
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	b29a      	uxth	r2, r3
 801f2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f2b0:	2076      	movs	r0, #118	@ 0x76
 801f2b2:	183b      	adds	r3, r7, r0
 801f2b4:	683a      	ldr	r2, [r7, #0]
 801f2b6:	8952      	ldrh	r2, [r2, #10]
 801f2b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f2ba:	683b      	ldr	r3, [r7, #0]
 801f2bc:	6959      	ldr	r1, [r3, #20]
 801f2be:	1d7b      	adds	r3, r7, #5
 801f2c0:	33ff      	adds	r3, #255	@ 0xff
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	b29c      	uxth	r4, r3
 801f2c6:	183b      	adds	r3, r7, r0
 801f2c8:	881a      	ldrh	r2, [r3, #0]
 801f2ca:	6878      	ldr	r0, [r7, #4]
 801f2cc:	0023      	movs	r3, r4
 801f2ce:	f001 f94d 	bl	802056c <USB_WritePMA>
            ep->xfer_buff += len;
 801f2d2:	683b      	ldr	r3, [r7, #0]
 801f2d4:	695a      	ldr	r2, [r3, #20]
 801f2d6:	1d7b      	adds	r3, r7, #5
 801f2d8:	33ff      	adds	r3, #255	@ 0xff
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	18d2      	adds	r2, r2, r3
 801f2de:	683b      	ldr	r3, [r7, #0]
 801f2e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f2e2:	683b      	ldr	r3, [r7, #0]
 801f2e4:	6a1a      	ldr	r2, [r3, #32]
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	691b      	ldr	r3, [r3, #16]
 801f2ea:	429a      	cmp	r2, r3
 801f2ec:	d908      	bls.n	801f300 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801f2ee:	683b      	ldr	r3, [r7, #0]
 801f2f0:	6a1a      	ldr	r2, [r3, #32]
 801f2f2:	1d7b      	adds	r3, r7, #5
 801f2f4:	33ff      	adds	r3, #255	@ 0xff
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	1ad2      	subs	r2, r2, r3
 801f2fa:	683b      	ldr	r3, [r7, #0]
 801f2fc:	621a      	str	r2, [r3, #32]
 801f2fe:	e007      	b.n	801f310 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	6a1b      	ldr	r3, [r3, #32]
 801f304:	1d7a      	adds	r2, r7, #5
 801f306:	32ff      	adds	r2, #255	@ 0xff
 801f308:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f30a:	683b      	ldr	r3, [r7, #0]
 801f30c:	2200      	movs	r2, #0
 801f30e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f310:	683b      	ldr	r3, [r7, #0]
 801f312:	785b      	ldrb	r3, [r3, #1]
 801f314:	2b00      	cmp	r3, #0
 801f316:	d000      	beq.n	801f31a <USB_EPStartXfer+0x292>
 801f318:	e070      	b.n	801f3fc <USB_EPStartXfer+0x374>
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	61bb      	str	r3, [r7, #24]
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	2250      	movs	r2, #80	@ 0x50
 801f322:	5a9b      	ldrh	r3, [r3, r2]
 801f324:	b29b      	uxth	r3, r3
 801f326:	001a      	movs	r2, r3
 801f328:	69bb      	ldr	r3, [r7, #24]
 801f32a:	189b      	adds	r3, r3, r2
 801f32c:	61bb      	str	r3, [r7, #24]
 801f32e:	683b      	ldr	r3, [r7, #0]
 801f330:	781b      	ldrb	r3, [r3, #0]
 801f332:	00da      	lsls	r2, r3, #3
 801f334:	69bb      	ldr	r3, [r7, #24]
 801f336:	18d3      	adds	r3, r2, r3
 801f338:	4a48      	ldr	r2, [pc, #288]	@ (801f45c <USB_EPStartXfer+0x3d4>)
 801f33a:	4694      	mov	ip, r2
 801f33c:	4463      	add	r3, ip
 801f33e:	617b      	str	r3, [r7, #20]
 801f340:	697b      	ldr	r3, [r7, #20]
 801f342:	881b      	ldrh	r3, [r3, #0]
 801f344:	b29b      	uxth	r3, r3
 801f346:	059b      	lsls	r3, r3, #22
 801f348:	0d9b      	lsrs	r3, r3, #22
 801f34a:	b29a      	uxth	r2, r3
 801f34c:	697b      	ldr	r3, [r7, #20]
 801f34e:	801a      	strh	r2, [r3, #0]
 801f350:	1d7b      	adds	r3, r7, #5
 801f352:	33ff      	adds	r3, #255	@ 0xff
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	2b3e      	cmp	r3, #62	@ 0x3e
 801f358:	d922      	bls.n	801f3a0 <USB_EPStartXfer+0x318>
 801f35a:	1d7b      	adds	r3, r7, #5
 801f35c:	33ff      	adds	r3, #255	@ 0xff
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	095b      	lsrs	r3, r3, #5
 801f362:	21fc      	movs	r1, #252	@ 0xfc
 801f364:	187a      	adds	r2, r7, r1
 801f366:	6013      	str	r3, [r2, #0]
 801f368:	1d7b      	adds	r3, r7, #5
 801f36a:	33ff      	adds	r3, #255	@ 0xff
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	221f      	movs	r2, #31
 801f370:	4013      	ands	r3, r2
 801f372:	d104      	bne.n	801f37e <USB_EPStartXfer+0x2f6>
 801f374:	187b      	adds	r3, r7, r1
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	3b01      	subs	r3, #1
 801f37a:	187a      	adds	r2, r7, r1
 801f37c:	6013      	str	r3, [r2, #0]
 801f37e:	697b      	ldr	r3, [r7, #20]
 801f380:	881b      	ldrh	r3, [r3, #0]
 801f382:	b29a      	uxth	r2, r3
 801f384:	23fc      	movs	r3, #252	@ 0xfc
 801f386:	18fb      	adds	r3, r7, r3
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	b29b      	uxth	r3, r3
 801f38c:	029b      	lsls	r3, r3, #10
 801f38e:	b29b      	uxth	r3, r3
 801f390:	4313      	orrs	r3, r2
 801f392:	b29b      	uxth	r3, r3
 801f394:	4a35      	ldr	r2, [pc, #212]	@ (801f46c <USB_EPStartXfer+0x3e4>)
 801f396:	4313      	orrs	r3, r2
 801f398:	b29a      	uxth	r2, r3
 801f39a:	697b      	ldr	r3, [r7, #20]
 801f39c:	801a      	strh	r2, [r3, #0]
 801f39e:	e04a      	b.n	801f436 <USB_EPStartXfer+0x3ae>
 801f3a0:	1d7b      	adds	r3, r7, #5
 801f3a2:	33ff      	adds	r3, #255	@ 0xff
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	d108      	bne.n	801f3bc <USB_EPStartXfer+0x334>
 801f3aa:	697b      	ldr	r3, [r7, #20]
 801f3ac:	881b      	ldrh	r3, [r3, #0]
 801f3ae:	b29b      	uxth	r3, r3
 801f3b0:	4a2e      	ldr	r2, [pc, #184]	@ (801f46c <USB_EPStartXfer+0x3e4>)
 801f3b2:	4313      	orrs	r3, r2
 801f3b4:	b29a      	uxth	r2, r3
 801f3b6:	697b      	ldr	r3, [r7, #20]
 801f3b8:	801a      	strh	r2, [r3, #0]
 801f3ba:	e03c      	b.n	801f436 <USB_EPStartXfer+0x3ae>
 801f3bc:	1d7b      	adds	r3, r7, #5
 801f3be:	33ff      	adds	r3, #255	@ 0xff
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	085b      	lsrs	r3, r3, #1
 801f3c4:	21fc      	movs	r1, #252	@ 0xfc
 801f3c6:	187a      	adds	r2, r7, r1
 801f3c8:	6013      	str	r3, [r2, #0]
 801f3ca:	1d7b      	adds	r3, r7, #5
 801f3cc:	33ff      	adds	r3, #255	@ 0xff
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	2201      	movs	r2, #1
 801f3d2:	4013      	ands	r3, r2
 801f3d4:	d004      	beq.n	801f3e0 <USB_EPStartXfer+0x358>
 801f3d6:	187b      	adds	r3, r7, r1
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	3301      	adds	r3, #1
 801f3dc:	187a      	adds	r2, r7, r1
 801f3de:	6013      	str	r3, [r2, #0]
 801f3e0:	697b      	ldr	r3, [r7, #20]
 801f3e2:	881b      	ldrh	r3, [r3, #0]
 801f3e4:	b29a      	uxth	r2, r3
 801f3e6:	23fc      	movs	r3, #252	@ 0xfc
 801f3e8:	18fb      	adds	r3, r7, r3
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	b29b      	uxth	r3, r3
 801f3ee:	029b      	lsls	r3, r3, #10
 801f3f0:	b29b      	uxth	r3, r3
 801f3f2:	4313      	orrs	r3, r2
 801f3f4:	b29a      	uxth	r2, r3
 801f3f6:	697b      	ldr	r3, [r7, #20]
 801f3f8:	801a      	strh	r2, [r3, #0]
 801f3fa:	e01c      	b.n	801f436 <USB_EPStartXfer+0x3ae>
 801f3fc:	683b      	ldr	r3, [r7, #0]
 801f3fe:	785b      	ldrb	r3, [r3, #1]
 801f400:	2b01      	cmp	r3, #1
 801f402:	d118      	bne.n	801f436 <USB_EPStartXfer+0x3ae>
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	623b      	str	r3, [r7, #32]
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	2250      	movs	r2, #80	@ 0x50
 801f40c:	5a9b      	ldrh	r3, [r3, r2]
 801f40e:	b29b      	uxth	r3, r3
 801f410:	001a      	movs	r2, r3
 801f412:	6a3b      	ldr	r3, [r7, #32]
 801f414:	189b      	adds	r3, r3, r2
 801f416:	623b      	str	r3, [r7, #32]
 801f418:	683b      	ldr	r3, [r7, #0]
 801f41a:	781b      	ldrb	r3, [r3, #0]
 801f41c:	00da      	lsls	r2, r3, #3
 801f41e:	6a3b      	ldr	r3, [r7, #32]
 801f420:	18d3      	adds	r3, r2, r3
 801f422:	4a0e      	ldr	r2, [pc, #56]	@ (801f45c <USB_EPStartXfer+0x3d4>)
 801f424:	4694      	mov	ip, r2
 801f426:	4463      	add	r3, ip
 801f428:	61fb      	str	r3, [r7, #28]
 801f42a:	1d7b      	adds	r3, r7, #5
 801f42c:	33ff      	adds	r3, #255	@ 0xff
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	b29a      	uxth	r2, r3
 801f432:	69fb      	ldr	r3, [r7, #28]
 801f434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f436:	2076      	movs	r0, #118	@ 0x76
 801f438:	183b      	adds	r3, r7, r0
 801f43a:	683a      	ldr	r2, [r7, #0]
 801f43c:	8912      	ldrh	r2, [r2, #8]
 801f43e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f440:	683b      	ldr	r3, [r7, #0]
 801f442:	6959      	ldr	r1, [r3, #20]
 801f444:	1d7b      	adds	r3, r7, #5
 801f446:	33ff      	adds	r3, #255	@ 0xff
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	b29c      	uxth	r4, r3
 801f44c:	183b      	adds	r3, r7, r0
 801f44e:	881a      	ldrh	r2, [r3, #0]
 801f450:	6878      	ldr	r0, [r7, #4]
 801f452:	0023      	movs	r3, r4
 801f454:	f001 f88a 	bl	802056c <USB_WritePMA>
 801f458:	e329      	b.n	801faae <USB_EPStartXfer+0xa26>
 801f45a:	46c0      	nop			@ (mov r8, r8)
 801f45c:	00000402 	.word	0x00000402
 801f460:	ffff8f8f 	.word	0xffff8f8f
 801f464:	ffff8180 	.word	0xffff8180
 801f468:	00000406 	.word	0x00000406
 801f46c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f470:	683b      	ldr	r3, [r7, #0]
 801f472:	785b      	ldrb	r3, [r3, #1]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d000      	beq.n	801f47a <USB_EPStartXfer+0x3f2>
 801f478:	e070      	b.n	801f55c <USB_EPStartXfer+0x4d4>
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	2250      	movs	r2, #80	@ 0x50
 801f482:	5a9b      	ldrh	r3, [r3, r2]
 801f484:	b29b      	uxth	r3, r3
 801f486:	001a      	movs	r2, r3
 801f488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f48a:	189b      	adds	r3, r3, r2
 801f48c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	781b      	ldrb	r3, [r3, #0]
 801f492:	00da      	lsls	r2, r3, #3
 801f494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f496:	18d3      	adds	r3, r2, r3
 801f498:	4acd      	ldr	r2, [pc, #820]	@ (801f7d0 <USB_EPStartXfer+0x748>)
 801f49a:	4694      	mov	ip, r2
 801f49c:	4463      	add	r3, ip
 801f49e:	647b      	str	r3, [r7, #68]	@ 0x44
 801f4a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f4a2:	881b      	ldrh	r3, [r3, #0]
 801f4a4:	b29b      	uxth	r3, r3
 801f4a6:	059b      	lsls	r3, r3, #22
 801f4a8:	0d9b      	lsrs	r3, r3, #22
 801f4aa:	b29a      	uxth	r2, r3
 801f4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f4ae:	801a      	strh	r2, [r3, #0]
 801f4b0:	1d7b      	adds	r3, r7, #5
 801f4b2:	33ff      	adds	r3, #255	@ 0xff
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	2b3e      	cmp	r3, #62	@ 0x3e
 801f4b8:	d922      	bls.n	801f500 <USB_EPStartXfer+0x478>
 801f4ba:	1d7b      	adds	r3, r7, #5
 801f4bc:	33ff      	adds	r3, #255	@ 0xff
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	095b      	lsrs	r3, r3, #5
 801f4c2:	21f8      	movs	r1, #248	@ 0xf8
 801f4c4:	187a      	adds	r2, r7, r1
 801f4c6:	6013      	str	r3, [r2, #0]
 801f4c8:	1d7b      	adds	r3, r7, #5
 801f4ca:	33ff      	adds	r3, #255	@ 0xff
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	221f      	movs	r2, #31
 801f4d0:	4013      	ands	r3, r2
 801f4d2:	d104      	bne.n	801f4de <USB_EPStartXfer+0x456>
 801f4d4:	187b      	adds	r3, r7, r1
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	3b01      	subs	r3, #1
 801f4da:	187a      	adds	r2, r7, r1
 801f4dc:	6013      	str	r3, [r2, #0]
 801f4de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f4e0:	881b      	ldrh	r3, [r3, #0]
 801f4e2:	b29a      	uxth	r2, r3
 801f4e4:	23f8      	movs	r3, #248	@ 0xf8
 801f4e6:	18fb      	adds	r3, r7, r3
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	b29b      	uxth	r3, r3
 801f4ec:	029b      	lsls	r3, r3, #10
 801f4ee:	b29b      	uxth	r3, r3
 801f4f0:	4313      	orrs	r3, r2
 801f4f2:	b29b      	uxth	r3, r3
 801f4f4:	4ab7      	ldr	r2, [pc, #732]	@ (801f7d4 <USB_EPStartXfer+0x74c>)
 801f4f6:	4313      	orrs	r3, r2
 801f4f8:	b29a      	uxth	r2, r3
 801f4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f4fc:	801a      	strh	r2, [r3, #0]
 801f4fe:	e04a      	b.n	801f596 <USB_EPStartXfer+0x50e>
 801f500:	1d7b      	adds	r3, r7, #5
 801f502:	33ff      	adds	r3, #255	@ 0xff
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d108      	bne.n	801f51c <USB_EPStartXfer+0x494>
 801f50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f50c:	881b      	ldrh	r3, [r3, #0]
 801f50e:	b29b      	uxth	r3, r3
 801f510:	4ab0      	ldr	r2, [pc, #704]	@ (801f7d4 <USB_EPStartXfer+0x74c>)
 801f512:	4313      	orrs	r3, r2
 801f514:	b29a      	uxth	r2, r3
 801f516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f518:	801a      	strh	r2, [r3, #0]
 801f51a:	e03c      	b.n	801f596 <USB_EPStartXfer+0x50e>
 801f51c:	1d7b      	adds	r3, r7, #5
 801f51e:	33ff      	adds	r3, #255	@ 0xff
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	085b      	lsrs	r3, r3, #1
 801f524:	21f8      	movs	r1, #248	@ 0xf8
 801f526:	187a      	adds	r2, r7, r1
 801f528:	6013      	str	r3, [r2, #0]
 801f52a:	1d7b      	adds	r3, r7, #5
 801f52c:	33ff      	adds	r3, #255	@ 0xff
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	2201      	movs	r2, #1
 801f532:	4013      	ands	r3, r2
 801f534:	d004      	beq.n	801f540 <USB_EPStartXfer+0x4b8>
 801f536:	187b      	adds	r3, r7, r1
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	3301      	adds	r3, #1
 801f53c:	187a      	adds	r2, r7, r1
 801f53e:	6013      	str	r3, [r2, #0]
 801f540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f542:	881b      	ldrh	r3, [r3, #0]
 801f544:	b29a      	uxth	r2, r3
 801f546:	23f8      	movs	r3, #248	@ 0xf8
 801f548:	18fb      	adds	r3, r7, r3
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	b29b      	uxth	r3, r3
 801f54e:	029b      	lsls	r3, r3, #10
 801f550:	b29b      	uxth	r3, r3
 801f552:	4313      	orrs	r3, r2
 801f554:	b29a      	uxth	r2, r3
 801f556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f558:	801a      	strh	r2, [r3, #0]
 801f55a:	e01c      	b.n	801f596 <USB_EPStartXfer+0x50e>
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	785b      	ldrb	r3, [r3, #1]
 801f560:	2b01      	cmp	r3, #1
 801f562:	d118      	bne.n	801f596 <USB_EPStartXfer+0x50e>
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	653b      	str	r3, [r7, #80]	@ 0x50
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	2250      	movs	r2, #80	@ 0x50
 801f56c:	5a9b      	ldrh	r3, [r3, r2]
 801f56e:	b29b      	uxth	r3, r3
 801f570:	001a      	movs	r2, r3
 801f572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f574:	189b      	adds	r3, r3, r2
 801f576:	653b      	str	r3, [r7, #80]	@ 0x50
 801f578:	683b      	ldr	r3, [r7, #0]
 801f57a:	781b      	ldrb	r3, [r3, #0]
 801f57c:	00da      	lsls	r2, r3, #3
 801f57e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f580:	18d3      	adds	r3, r2, r3
 801f582:	4a93      	ldr	r2, [pc, #588]	@ (801f7d0 <USB_EPStartXfer+0x748>)
 801f584:	4694      	mov	ip, r2
 801f586:	4463      	add	r3, ip
 801f588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f58a:	1d7b      	adds	r3, r7, #5
 801f58c:	33ff      	adds	r3, #255	@ 0xff
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	b29a      	uxth	r2, r3
 801f592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f594:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f596:	2076      	movs	r0, #118	@ 0x76
 801f598:	183b      	adds	r3, r7, r0
 801f59a:	683a      	ldr	r2, [r7, #0]
 801f59c:	8912      	ldrh	r2, [r2, #8]
 801f59e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f5a0:	683b      	ldr	r3, [r7, #0]
 801f5a2:	6959      	ldr	r1, [r3, #20]
 801f5a4:	1d7b      	adds	r3, r7, #5
 801f5a6:	33ff      	adds	r3, #255	@ 0xff
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	b29c      	uxth	r4, r3
 801f5ac:	183b      	adds	r3, r7, r0
 801f5ae:	881a      	ldrh	r2, [r3, #0]
 801f5b0:	6878      	ldr	r0, [r7, #4]
 801f5b2:	0023      	movs	r3, r4
 801f5b4:	f000 ffda 	bl	802056c <USB_WritePMA>
            ep->xfer_buff += len;
 801f5b8:	683b      	ldr	r3, [r7, #0]
 801f5ba:	695a      	ldr	r2, [r3, #20]
 801f5bc:	1d7b      	adds	r3, r7, #5
 801f5be:	33ff      	adds	r3, #255	@ 0xff
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	18d2      	adds	r2, r2, r3
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f5c8:	683b      	ldr	r3, [r7, #0]
 801f5ca:	6a1a      	ldr	r2, [r3, #32]
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	691b      	ldr	r3, [r3, #16]
 801f5d0:	429a      	cmp	r2, r3
 801f5d2:	d908      	bls.n	801f5e6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801f5d4:	683b      	ldr	r3, [r7, #0]
 801f5d6:	6a1a      	ldr	r2, [r3, #32]
 801f5d8:	1d7b      	adds	r3, r7, #5
 801f5da:	33ff      	adds	r3, #255	@ 0xff
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	1ad2      	subs	r2, r2, r3
 801f5e0:	683b      	ldr	r3, [r7, #0]
 801f5e2:	621a      	str	r2, [r3, #32]
 801f5e4:	e007      	b.n	801f5f6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801f5e6:	683b      	ldr	r3, [r7, #0]
 801f5e8:	6a1b      	ldr	r3, [r3, #32]
 801f5ea:	1d7a      	adds	r2, r7, #5
 801f5ec:	32ff      	adds	r2, #255	@ 0xff
 801f5ee:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f5f0:	683b      	ldr	r3, [r7, #0]
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	643b      	str	r3, [r7, #64]	@ 0x40
 801f5fa:	683b      	ldr	r3, [r7, #0]
 801f5fc:	785b      	ldrb	r3, [r3, #1]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d000      	beq.n	801f604 <USB_EPStartXfer+0x57c>
 801f602:	e070      	b.n	801f6e6 <USB_EPStartXfer+0x65e>
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	2250      	movs	r2, #80	@ 0x50
 801f60c:	5a9b      	ldrh	r3, [r3, r2]
 801f60e:	b29b      	uxth	r3, r3
 801f610:	001a      	movs	r2, r3
 801f612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f614:	189b      	adds	r3, r3, r2
 801f616:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f618:	683b      	ldr	r3, [r7, #0]
 801f61a:	781b      	ldrb	r3, [r3, #0]
 801f61c:	00da      	lsls	r2, r3, #3
 801f61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f620:	18d3      	adds	r3, r2, r3
 801f622:	4a6d      	ldr	r2, [pc, #436]	@ (801f7d8 <USB_EPStartXfer+0x750>)
 801f624:	4694      	mov	ip, r2
 801f626:	4463      	add	r3, ip
 801f628:	637b      	str	r3, [r7, #52]	@ 0x34
 801f62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f62c:	881b      	ldrh	r3, [r3, #0]
 801f62e:	b29b      	uxth	r3, r3
 801f630:	059b      	lsls	r3, r3, #22
 801f632:	0d9b      	lsrs	r3, r3, #22
 801f634:	b29a      	uxth	r2, r3
 801f636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f638:	801a      	strh	r2, [r3, #0]
 801f63a:	1d7b      	adds	r3, r7, #5
 801f63c:	33ff      	adds	r3, #255	@ 0xff
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	2b3e      	cmp	r3, #62	@ 0x3e
 801f642:	d922      	bls.n	801f68a <USB_EPStartXfer+0x602>
 801f644:	1d7b      	adds	r3, r7, #5
 801f646:	33ff      	adds	r3, #255	@ 0xff
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	095b      	lsrs	r3, r3, #5
 801f64c:	21f4      	movs	r1, #244	@ 0xf4
 801f64e:	187a      	adds	r2, r7, r1
 801f650:	6013      	str	r3, [r2, #0]
 801f652:	1d7b      	adds	r3, r7, #5
 801f654:	33ff      	adds	r3, #255	@ 0xff
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	221f      	movs	r2, #31
 801f65a:	4013      	ands	r3, r2
 801f65c:	d104      	bne.n	801f668 <USB_EPStartXfer+0x5e0>
 801f65e:	187b      	adds	r3, r7, r1
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	3b01      	subs	r3, #1
 801f664:	187a      	adds	r2, r7, r1
 801f666:	6013      	str	r3, [r2, #0]
 801f668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f66a:	881b      	ldrh	r3, [r3, #0]
 801f66c:	b29a      	uxth	r2, r3
 801f66e:	23f4      	movs	r3, #244	@ 0xf4
 801f670:	18fb      	adds	r3, r7, r3
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	b29b      	uxth	r3, r3
 801f676:	029b      	lsls	r3, r3, #10
 801f678:	b29b      	uxth	r3, r3
 801f67a:	4313      	orrs	r3, r2
 801f67c:	b29b      	uxth	r3, r3
 801f67e:	4a55      	ldr	r2, [pc, #340]	@ (801f7d4 <USB_EPStartXfer+0x74c>)
 801f680:	4313      	orrs	r3, r2
 801f682:	b29a      	uxth	r2, r3
 801f684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f686:	801a      	strh	r2, [r3, #0]
 801f688:	e048      	b.n	801f71c <USB_EPStartXfer+0x694>
 801f68a:	1d7b      	adds	r3, r7, #5
 801f68c:	33ff      	adds	r3, #255	@ 0xff
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d108      	bne.n	801f6a6 <USB_EPStartXfer+0x61e>
 801f694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f696:	881b      	ldrh	r3, [r3, #0]
 801f698:	b29b      	uxth	r3, r3
 801f69a:	4a4e      	ldr	r2, [pc, #312]	@ (801f7d4 <USB_EPStartXfer+0x74c>)
 801f69c:	4313      	orrs	r3, r2
 801f69e:	b29a      	uxth	r2, r3
 801f6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f6a2:	801a      	strh	r2, [r3, #0]
 801f6a4:	e03a      	b.n	801f71c <USB_EPStartXfer+0x694>
 801f6a6:	1d7b      	adds	r3, r7, #5
 801f6a8:	33ff      	adds	r3, #255	@ 0xff
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	085b      	lsrs	r3, r3, #1
 801f6ae:	21f4      	movs	r1, #244	@ 0xf4
 801f6b0:	187a      	adds	r2, r7, r1
 801f6b2:	6013      	str	r3, [r2, #0]
 801f6b4:	1d7b      	adds	r3, r7, #5
 801f6b6:	33ff      	adds	r3, #255	@ 0xff
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	2201      	movs	r2, #1
 801f6bc:	4013      	ands	r3, r2
 801f6be:	d004      	beq.n	801f6ca <USB_EPStartXfer+0x642>
 801f6c0:	187b      	adds	r3, r7, r1
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	3301      	adds	r3, #1
 801f6c6:	187a      	adds	r2, r7, r1
 801f6c8:	6013      	str	r3, [r2, #0]
 801f6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f6cc:	881b      	ldrh	r3, [r3, #0]
 801f6ce:	b29a      	uxth	r2, r3
 801f6d0:	23f4      	movs	r3, #244	@ 0xf4
 801f6d2:	18fb      	adds	r3, r7, r3
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	b29b      	uxth	r3, r3
 801f6d8:	029b      	lsls	r3, r3, #10
 801f6da:	b29b      	uxth	r3, r3
 801f6dc:	4313      	orrs	r3, r2
 801f6de:	b29a      	uxth	r2, r3
 801f6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f6e2:	801a      	strh	r2, [r3, #0]
 801f6e4:	e01a      	b.n	801f71c <USB_EPStartXfer+0x694>
 801f6e6:	683b      	ldr	r3, [r7, #0]
 801f6e8:	785b      	ldrb	r3, [r3, #1]
 801f6ea:	2b01      	cmp	r3, #1
 801f6ec:	d116      	bne.n	801f71c <USB_EPStartXfer+0x694>
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2250      	movs	r2, #80	@ 0x50
 801f6f2:	5a9b      	ldrh	r3, [r3, r2]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	001a      	movs	r2, r3
 801f6f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f6fa:	189b      	adds	r3, r3, r2
 801f6fc:	643b      	str	r3, [r7, #64]	@ 0x40
 801f6fe:	683b      	ldr	r3, [r7, #0]
 801f700:	781b      	ldrb	r3, [r3, #0]
 801f702:	00da      	lsls	r2, r3, #3
 801f704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f706:	18d3      	adds	r3, r2, r3
 801f708:	4a33      	ldr	r2, [pc, #204]	@ (801f7d8 <USB_EPStartXfer+0x750>)
 801f70a:	4694      	mov	ip, r2
 801f70c:	4463      	add	r3, ip
 801f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f710:	1d7b      	adds	r3, r7, #5
 801f712:	33ff      	adds	r3, #255	@ 0xff
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	b29a      	uxth	r2, r3
 801f718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f71a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f71c:	2076      	movs	r0, #118	@ 0x76
 801f71e:	183b      	adds	r3, r7, r0
 801f720:	683a      	ldr	r2, [r7, #0]
 801f722:	8952      	ldrh	r2, [r2, #10]
 801f724:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f726:	683b      	ldr	r3, [r7, #0]
 801f728:	6959      	ldr	r1, [r3, #20]
 801f72a:	1d7b      	adds	r3, r7, #5
 801f72c:	33ff      	adds	r3, #255	@ 0xff
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	b29c      	uxth	r4, r3
 801f732:	183b      	adds	r3, r7, r0
 801f734:	881a      	ldrh	r2, [r3, #0]
 801f736:	6878      	ldr	r0, [r7, #4]
 801f738:	0023      	movs	r3, r4
 801f73a:	f000 ff17 	bl	802056c <USB_WritePMA>
 801f73e:	e1b6      	b.n	801faae <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801f740:	683b      	ldr	r3, [r7, #0]
 801f742:	6a1b      	ldr	r3, [r3, #32]
 801f744:	1d7a      	adds	r2, r7, #5
 801f746:	32ff      	adds	r2, #255	@ 0xff
 801f748:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801f74a:	687a      	ldr	r2, [r7, #4]
 801f74c:	683b      	ldr	r3, [r7, #0]
 801f74e:	781b      	ldrb	r3, [r3, #0]
 801f750:	009b      	lsls	r3, r3, #2
 801f752:	18d3      	adds	r3, r2, r3
 801f754:	881b      	ldrh	r3, [r3, #0]
 801f756:	b29a      	uxth	r2, r3
 801f758:	2062      	movs	r0, #98	@ 0x62
 801f75a:	183b      	adds	r3, r7, r0
 801f75c:	491f      	ldr	r1, [pc, #124]	@ (801f7dc <USB_EPStartXfer+0x754>)
 801f75e:	400a      	ands	r2, r1
 801f760:	801a      	strh	r2, [r3, #0]
 801f762:	687a      	ldr	r2, [r7, #4]
 801f764:	683b      	ldr	r3, [r7, #0]
 801f766:	781b      	ldrb	r3, [r3, #0]
 801f768:	009b      	lsls	r3, r3, #2
 801f76a:	18d3      	adds	r3, r2, r3
 801f76c:	183a      	adds	r2, r7, r0
 801f76e:	8812      	ldrh	r2, [r2, #0]
 801f770:	491b      	ldr	r1, [pc, #108]	@ (801f7e0 <USB_EPStartXfer+0x758>)
 801f772:	430a      	orrs	r2, r1
 801f774:	b292      	uxth	r2, r2
 801f776:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	2250      	movs	r2, #80	@ 0x50
 801f780:	5a9b      	ldrh	r3, [r3, r2]
 801f782:	b29b      	uxth	r3, r3
 801f784:	001a      	movs	r2, r3
 801f786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f788:	189b      	adds	r3, r3, r2
 801f78a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	781b      	ldrb	r3, [r3, #0]
 801f790:	00da      	lsls	r2, r3, #3
 801f792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f794:	18d3      	adds	r3, r2, r3
 801f796:	4a0e      	ldr	r2, [pc, #56]	@ (801f7d0 <USB_EPStartXfer+0x748>)
 801f798:	4694      	mov	ip, r2
 801f79a:	4463      	add	r3, ip
 801f79c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f79e:	1d7b      	adds	r3, r7, #5
 801f7a0:	33ff      	adds	r3, #255	@ 0xff
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	b29a      	uxth	r2, r3
 801f7a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f7a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f7aa:	2076      	movs	r0, #118	@ 0x76
 801f7ac:	183b      	adds	r3, r7, r0
 801f7ae:	683a      	ldr	r2, [r7, #0]
 801f7b0:	8912      	ldrh	r2, [r2, #8]
 801f7b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f7b4:	683b      	ldr	r3, [r7, #0]
 801f7b6:	6959      	ldr	r1, [r3, #20]
 801f7b8:	1d7b      	adds	r3, r7, #5
 801f7ba:	33ff      	adds	r3, #255	@ 0xff
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	b29c      	uxth	r4, r3
 801f7c0:	183b      	adds	r3, r7, r0
 801f7c2:	881a      	ldrh	r2, [r3, #0]
 801f7c4:	6878      	ldr	r0, [r7, #4]
 801f7c6:	0023      	movs	r3, r4
 801f7c8:	f000 fed0 	bl	802056c <USB_WritePMA>
 801f7cc:	e16f      	b.n	801faae <USB_EPStartXfer+0xa26>
 801f7ce:	46c0      	nop			@ (mov r8, r8)
 801f7d0:	00000402 	.word	0x00000402
 801f7d4:	ffff8000 	.word	0xffff8000
 801f7d8:	00000406 	.word	0x00000406
 801f7dc:	ffff8e8f 	.word	0xffff8e8f
 801f7e0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801f7e4:	683b      	ldr	r3, [r7, #0]
 801f7e6:	6a1a      	ldr	r2, [r3, #32]
 801f7e8:	1d7b      	adds	r3, r7, #5
 801f7ea:	33ff      	adds	r3, #255	@ 0xff
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	1ad2      	subs	r2, r2, r3
 801f7f0:	683b      	ldr	r3, [r7, #0]
 801f7f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f7f4:	687a      	ldr	r2, [r7, #4]
 801f7f6:	683b      	ldr	r3, [r7, #0]
 801f7f8:	781b      	ldrb	r3, [r3, #0]
 801f7fa:	009b      	lsls	r3, r3, #2
 801f7fc:	18d3      	adds	r3, r2, r3
 801f7fe:	881b      	ldrh	r3, [r3, #0]
 801f800:	b29b      	uxth	r3, r3
 801f802:	001a      	movs	r2, r3
 801f804:	2340      	movs	r3, #64	@ 0x40
 801f806:	4013      	ands	r3, r2
 801f808:	d100      	bne.n	801f80c <USB_EPStartXfer+0x784>
 801f80a:	e0a4      	b.n	801f956 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	673b      	str	r3, [r7, #112]	@ 0x70
 801f810:	683b      	ldr	r3, [r7, #0]
 801f812:	785b      	ldrb	r3, [r3, #1]
 801f814:	2b00      	cmp	r3, #0
 801f816:	d000      	beq.n	801f81a <USB_EPStartXfer+0x792>
 801f818:	e070      	b.n	801f8fc <USB_EPStartXfer+0x874>
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	2250      	movs	r2, #80	@ 0x50
 801f822:	5a9b      	ldrh	r3, [r3, r2]
 801f824:	b29b      	uxth	r3, r3
 801f826:	001a      	movs	r2, r3
 801f828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f82a:	189b      	adds	r3, r3, r2
 801f82c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	781b      	ldrb	r3, [r3, #0]
 801f832:	00da      	lsls	r2, r3, #3
 801f834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f836:	18d3      	adds	r3, r2, r3
 801f838:	4abc      	ldr	r2, [pc, #752]	@ (801fb2c <USB_EPStartXfer+0xaa4>)
 801f83a:	4694      	mov	ip, r2
 801f83c:	4463      	add	r3, ip
 801f83e:	667b      	str	r3, [r7, #100]	@ 0x64
 801f840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f842:	881b      	ldrh	r3, [r3, #0]
 801f844:	b29b      	uxth	r3, r3
 801f846:	059b      	lsls	r3, r3, #22
 801f848:	0d9b      	lsrs	r3, r3, #22
 801f84a:	b29a      	uxth	r2, r3
 801f84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f84e:	801a      	strh	r2, [r3, #0]
 801f850:	1d7b      	adds	r3, r7, #5
 801f852:	33ff      	adds	r3, #255	@ 0xff
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	2b3e      	cmp	r3, #62	@ 0x3e
 801f858:	d922      	bls.n	801f8a0 <USB_EPStartXfer+0x818>
 801f85a:	1d7b      	adds	r3, r7, #5
 801f85c:	33ff      	adds	r3, #255	@ 0xff
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	095b      	lsrs	r3, r3, #5
 801f862:	21f0      	movs	r1, #240	@ 0xf0
 801f864:	187a      	adds	r2, r7, r1
 801f866:	6013      	str	r3, [r2, #0]
 801f868:	1d7b      	adds	r3, r7, #5
 801f86a:	33ff      	adds	r3, #255	@ 0xff
 801f86c:	681b      	ldr	r3, [r3, #0]
 801f86e:	221f      	movs	r2, #31
 801f870:	4013      	ands	r3, r2
 801f872:	d104      	bne.n	801f87e <USB_EPStartXfer+0x7f6>
 801f874:	187b      	adds	r3, r7, r1
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	3b01      	subs	r3, #1
 801f87a:	187a      	adds	r2, r7, r1
 801f87c:	6013      	str	r3, [r2, #0]
 801f87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f880:	881b      	ldrh	r3, [r3, #0]
 801f882:	b29a      	uxth	r2, r3
 801f884:	23f0      	movs	r3, #240	@ 0xf0
 801f886:	18fb      	adds	r3, r7, r3
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	b29b      	uxth	r3, r3
 801f88c:	029b      	lsls	r3, r3, #10
 801f88e:	b29b      	uxth	r3, r3
 801f890:	4313      	orrs	r3, r2
 801f892:	b29b      	uxth	r3, r3
 801f894:	4aa6      	ldr	r2, [pc, #664]	@ (801fb30 <USB_EPStartXfer+0xaa8>)
 801f896:	4313      	orrs	r3, r2
 801f898:	b29a      	uxth	r2, r3
 801f89a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f89c:	801a      	strh	r2, [r3, #0]
 801f89e:	e048      	b.n	801f932 <USB_EPStartXfer+0x8aa>
 801f8a0:	1d7b      	adds	r3, r7, #5
 801f8a2:	33ff      	adds	r3, #255	@ 0xff
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d108      	bne.n	801f8bc <USB_EPStartXfer+0x834>
 801f8aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f8ac:	881b      	ldrh	r3, [r3, #0]
 801f8ae:	b29b      	uxth	r3, r3
 801f8b0:	4a9f      	ldr	r2, [pc, #636]	@ (801fb30 <USB_EPStartXfer+0xaa8>)
 801f8b2:	4313      	orrs	r3, r2
 801f8b4:	b29a      	uxth	r2, r3
 801f8b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f8b8:	801a      	strh	r2, [r3, #0]
 801f8ba:	e03a      	b.n	801f932 <USB_EPStartXfer+0x8aa>
 801f8bc:	1d7b      	adds	r3, r7, #5
 801f8be:	33ff      	adds	r3, #255	@ 0xff
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	085b      	lsrs	r3, r3, #1
 801f8c4:	21f0      	movs	r1, #240	@ 0xf0
 801f8c6:	187a      	adds	r2, r7, r1
 801f8c8:	6013      	str	r3, [r2, #0]
 801f8ca:	1d7b      	adds	r3, r7, #5
 801f8cc:	33ff      	adds	r3, #255	@ 0xff
 801f8ce:	681b      	ldr	r3, [r3, #0]
 801f8d0:	2201      	movs	r2, #1
 801f8d2:	4013      	ands	r3, r2
 801f8d4:	d004      	beq.n	801f8e0 <USB_EPStartXfer+0x858>
 801f8d6:	187b      	adds	r3, r7, r1
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	3301      	adds	r3, #1
 801f8dc:	187a      	adds	r2, r7, r1
 801f8de:	6013      	str	r3, [r2, #0]
 801f8e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f8e2:	881b      	ldrh	r3, [r3, #0]
 801f8e4:	b29a      	uxth	r2, r3
 801f8e6:	23f0      	movs	r3, #240	@ 0xf0
 801f8e8:	18fb      	adds	r3, r7, r3
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	029b      	lsls	r3, r3, #10
 801f8f0:	b29b      	uxth	r3, r3
 801f8f2:	4313      	orrs	r3, r2
 801f8f4:	b29a      	uxth	r2, r3
 801f8f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f8f8:	801a      	strh	r2, [r3, #0]
 801f8fa:	e01a      	b.n	801f932 <USB_EPStartXfer+0x8aa>
 801f8fc:	683b      	ldr	r3, [r7, #0]
 801f8fe:	785b      	ldrb	r3, [r3, #1]
 801f900:	2b01      	cmp	r3, #1
 801f902:	d116      	bne.n	801f932 <USB_EPStartXfer+0x8aa>
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2250      	movs	r2, #80	@ 0x50
 801f908:	5a9b      	ldrh	r3, [r3, r2]
 801f90a:	b29b      	uxth	r3, r3
 801f90c:	001a      	movs	r2, r3
 801f90e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f910:	189b      	adds	r3, r3, r2
 801f912:	673b      	str	r3, [r7, #112]	@ 0x70
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	781b      	ldrb	r3, [r3, #0]
 801f918:	00da      	lsls	r2, r3, #3
 801f91a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f91c:	18d3      	adds	r3, r2, r3
 801f91e:	4a83      	ldr	r2, [pc, #524]	@ (801fb2c <USB_EPStartXfer+0xaa4>)
 801f920:	4694      	mov	ip, r2
 801f922:	4463      	add	r3, ip
 801f924:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f926:	1d7b      	adds	r3, r7, #5
 801f928:	33ff      	adds	r3, #255	@ 0xff
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	b29a      	uxth	r2, r3
 801f92e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f930:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801f932:	2076      	movs	r0, #118	@ 0x76
 801f934:	183b      	adds	r3, r7, r0
 801f936:	683a      	ldr	r2, [r7, #0]
 801f938:	8952      	ldrh	r2, [r2, #10]
 801f93a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f93c:	683b      	ldr	r3, [r7, #0]
 801f93e:	6959      	ldr	r1, [r3, #20]
 801f940:	1d7b      	adds	r3, r7, #5
 801f942:	33ff      	adds	r3, #255	@ 0xff
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	b29c      	uxth	r4, r3
 801f948:	183b      	adds	r3, r7, r0
 801f94a:	881a      	ldrh	r2, [r3, #0]
 801f94c:	6878      	ldr	r0, [r7, #4]
 801f94e:	0023      	movs	r3, r4
 801f950:	f000 fe0c 	bl	802056c <USB_WritePMA>
 801f954:	e0ab      	b.n	801faae <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f956:	683b      	ldr	r3, [r7, #0]
 801f958:	785b      	ldrb	r3, [r3, #1]
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d000      	beq.n	801f960 <USB_EPStartXfer+0x8d8>
 801f95e:	e070      	b.n	801fa42 <USB_EPStartXfer+0x9ba>
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	2250      	movs	r2, #80	@ 0x50
 801f968:	5a9b      	ldrh	r3, [r3, r2]
 801f96a:	b29b      	uxth	r3, r3
 801f96c:	001a      	movs	r2, r3
 801f96e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f970:	189b      	adds	r3, r3, r2
 801f972:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	781b      	ldrb	r3, [r3, #0]
 801f978:	00da      	lsls	r2, r3, #3
 801f97a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f97c:	18d3      	adds	r3, r2, r3
 801f97e:	4a6d      	ldr	r2, [pc, #436]	@ (801fb34 <USB_EPStartXfer+0xaac>)
 801f980:	4694      	mov	ip, r2
 801f982:	4463      	add	r3, ip
 801f984:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f988:	881b      	ldrh	r3, [r3, #0]
 801f98a:	b29b      	uxth	r3, r3
 801f98c:	059b      	lsls	r3, r3, #22
 801f98e:	0d9b      	lsrs	r3, r3, #22
 801f990:	b29a      	uxth	r2, r3
 801f992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f994:	801a      	strh	r2, [r3, #0]
 801f996:	1d7b      	adds	r3, r7, #5
 801f998:	33ff      	adds	r3, #255	@ 0xff
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	2b3e      	cmp	r3, #62	@ 0x3e
 801f99e:	d922      	bls.n	801f9e6 <USB_EPStartXfer+0x95e>
 801f9a0:	1d7b      	adds	r3, r7, #5
 801f9a2:	33ff      	adds	r3, #255	@ 0xff
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	095b      	lsrs	r3, r3, #5
 801f9a8:	21ec      	movs	r1, #236	@ 0xec
 801f9aa:	187a      	adds	r2, r7, r1
 801f9ac:	6013      	str	r3, [r2, #0]
 801f9ae:	1d7b      	adds	r3, r7, #5
 801f9b0:	33ff      	adds	r3, #255	@ 0xff
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	221f      	movs	r2, #31
 801f9b6:	4013      	ands	r3, r2
 801f9b8:	d104      	bne.n	801f9c4 <USB_EPStartXfer+0x93c>
 801f9ba:	187b      	adds	r3, r7, r1
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	3b01      	subs	r3, #1
 801f9c0:	187a      	adds	r2, r7, r1
 801f9c2:	6013      	str	r3, [r2, #0]
 801f9c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f9c6:	881b      	ldrh	r3, [r3, #0]
 801f9c8:	b29a      	uxth	r2, r3
 801f9ca:	23ec      	movs	r3, #236	@ 0xec
 801f9cc:	18fb      	adds	r3, r7, r3
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	b29b      	uxth	r3, r3
 801f9d2:	029b      	lsls	r3, r3, #10
 801f9d4:	b29b      	uxth	r3, r3
 801f9d6:	4313      	orrs	r3, r2
 801f9d8:	b29b      	uxth	r3, r3
 801f9da:	4a55      	ldr	r2, [pc, #340]	@ (801fb30 <USB_EPStartXfer+0xaa8>)
 801f9dc:	4313      	orrs	r3, r2
 801f9de:	b29a      	uxth	r2, r3
 801f9e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f9e2:	801a      	strh	r2, [r3, #0]
 801f9e4:	e052      	b.n	801fa8c <USB_EPStartXfer+0xa04>
 801f9e6:	1d7b      	adds	r3, r7, #5
 801f9e8:	33ff      	adds	r3, #255	@ 0xff
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d108      	bne.n	801fa02 <USB_EPStartXfer+0x97a>
 801f9f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f9f2:	881b      	ldrh	r3, [r3, #0]
 801f9f4:	b29b      	uxth	r3, r3
 801f9f6:	4a4e      	ldr	r2, [pc, #312]	@ (801fb30 <USB_EPStartXfer+0xaa8>)
 801f9f8:	4313      	orrs	r3, r2
 801f9fa:	b29a      	uxth	r2, r3
 801f9fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f9fe:	801a      	strh	r2, [r3, #0]
 801fa00:	e044      	b.n	801fa8c <USB_EPStartXfer+0xa04>
 801fa02:	1d7b      	adds	r3, r7, #5
 801fa04:	33ff      	adds	r3, #255	@ 0xff
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	085b      	lsrs	r3, r3, #1
 801fa0a:	21ec      	movs	r1, #236	@ 0xec
 801fa0c:	187a      	adds	r2, r7, r1
 801fa0e:	6013      	str	r3, [r2, #0]
 801fa10:	1d7b      	adds	r3, r7, #5
 801fa12:	33ff      	adds	r3, #255	@ 0xff
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	2201      	movs	r2, #1
 801fa18:	4013      	ands	r3, r2
 801fa1a:	d004      	beq.n	801fa26 <USB_EPStartXfer+0x99e>
 801fa1c:	187b      	adds	r3, r7, r1
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	3301      	adds	r3, #1
 801fa22:	187a      	adds	r2, r7, r1
 801fa24:	6013      	str	r3, [r2, #0]
 801fa26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fa28:	881b      	ldrh	r3, [r3, #0]
 801fa2a:	b29a      	uxth	r2, r3
 801fa2c:	23ec      	movs	r3, #236	@ 0xec
 801fa2e:	18fb      	adds	r3, r7, r3
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	b29b      	uxth	r3, r3
 801fa34:	029b      	lsls	r3, r3, #10
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	4313      	orrs	r3, r2
 801fa3a:	b29a      	uxth	r2, r3
 801fa3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fa3e:	801a      	strh	r2, [r3, #0]
 801fa40:	e024      	b.n	801fa8c <USB_EPStartXfer+0xa04>
 801fa42:	683b      	ldr	r3, [r7, #0]
 801fa44:	785b      	ldrb	r3, [r3, #1]
 801fa46:	2b01      	cmp	r3, #1
 801fa48:	d120      	bne.n	801fa8c <USB_EPStartXfer+0xa04>
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	2184      	movs	r1, #132	@ 0x84
 801fa4e:	187a      	adds	r2, r7, r1
 801fa50:	6013      	str	r3, [r2, #0]
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	2250      	movs	r2, #80	@ 0x50
 801fa56:	5a9b      	ldrh	r3, [r3, r2]
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	001a      	movs	r2, r3
 801fa5c:	187b      	adds	r3, r7, r1
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	189b      	adds	r3, r3, r2
 801fa62:	187a      	adds	r2, r7, r1
 801fa64:	6013      	str	r3, [r2, #0]
 801fa66:	683b      	ldr	r3, [r7, #0]
 801fa68:	781b      	ldrb	r3, [r3, #0]
 801fa6a:	00da      	lsls	r2, r3, #3
 801fa6c:	187b      	adds	r3, r7, r1
 801fa6e:	681b      	ldr	r3, [r3, #0]
 801fa70:	18d3      	adds	r3, r2, r3
 801fa72:	4a30      	ldr	r2, [pc, #192]	@ (801fb34 <USB_EPStartXfer+0xaac>)
 801fa74:	4694      	mov	ip, r2
 801fa76:	4463      	add	r3, ip
 801fa78:	2180      	movs	r1, #128	@ 0x80
 801fa7a:	187a      	adds	r2, r7, r1
 801fa7c:	6013      	str	r3, [r2, #0]
 801fa7e:	1d7b      	adds	r3, r7, #5
 801fa80:	33ff      	adds	r3, #255	@ 0xff
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	b29a      	uxth	r2, r3
 801fa86:	187b      	adds	r3, r7, r1
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801fa8c:	2076      	movs	r0, #118	@ 0x76
 801fa8e:	183b      	adds	r3, r7, r0
 801fa90:	683a      	ldr	r2, [r7, #0]
 801fa92:	8912      	ldrh	r2, [r2, #8]
 801fa94:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fa96:	683b      	ldr	r3, [r7, #0]
 801fa98:	6959      	ldr	r1, [r3, #20]
 801fa9a:	1d7b      	adds	r3, r7, #5
 801fa9c:	33ff      	adds	r3, #255	@ 0xff
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	b29c      	uxth	r4, r3
 801faa2:	183b      	adds	r3, r7, r0
 801faa4:	881a      	ldrh	r2, [r3, #0]
 801faa6:	6878      	ldr	r0, [r7, #4]
 801faa8:	0023      	movs	r3, r4
 801faaa:	f000 fd5f 	bl	802056c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801faae:	687a      	ldr	r2, [r7, #4]
 801fab0:	683b      	ldr	r3, [r7, #0]
 801fab2:	781b      	ldrb	r3, [r3, #0]
 801fab4:	009b      	lsls	r3, r3, #2
 801fab6:	18d3      	adds	r3, r2, r3
 801fab8:	881b      	ldrh	r3, [r3, #0]
 801faba:	b29a      	uxth	r2, r3
 801fabc:	200a      	movs	r0, #10
 801fabe:	183b      	adds	r3, r7, r0
 801fac0:	491d      	ldr	r1, [pc, #116]	@ (801fb38 <USB_EPStartXfer+0xab0>)
 801fac2:	400a      	ands	r2, r1
 801fac4:	801a      	strh	r2, [r3, #0]
 801fac6:	183b      	adds	r3, r7, r0
 801fac8:	183a      	adds	r2, r7, r0
 801faca:	8812      	ldrh	r2, [r2, #0]
 801facc:	2110      	movs	r1, #16
 801face:	404a      	eors	r2, r1
 801fad0:	801a      	strh	r2, [r3, #0]
 801fad2:	183b      	adds	r3, r7, r0
 801fad4:	183a      	adds	r2, r7, r0
 801fad6:	8812      	ldrh	r2, [r2, #0]
 801fad8:	2120      	movs	r1, #32
 801fada:	404a      	eors	r2, r1
 801fadc:	801a      	strh	r2, [r3, #0]
 801fade:	687a      	ldr	r2, [r7, #4]
 801fae0:	683b      	ldr	r3, [r7, #0]
 801fae2:	781b      	ldrb	r3, [r3, #0]
 801fae4:	009b      	lsls	r3, r3, #2
 801fae6:	18d3      	adds	r3, r2, r3
 801fae8:	183a      	adds	r2, r7, r0
 801faea:	8812      	ldrh	r2, [r2, #0]
 801faec:	4913      	ldr	r1, [pc, #76]	@ (801fb3c <USB_EPStartXfer+0xab4>)
 801faee:	430a      	orrs	r2, r1
 801faf0:	b292      	uxth	r2, r2
 801faf2:	801a      	strh	r2, [r3, #0]
 801faf4:	f000 fbf4 	bl	80202e0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801faf8:	683b      	ldr	r3, [r7, #0]
 801fafa:	7b1b      	ldrb	r3, [r3, #12]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d000      	beq.n	801fb02 <USB_EPStartXfer+0xa7a>
 801fb00:	e0a9      	b.n	801fc56 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	699a      	ldr	r2, [r3, #24]
 801fb06:	683b      	ldr	r3, [r7, #0]
 801fb08:	691b      	ldr	r3, [r3, #16]
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d918      	bls.n	801fb40 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	691b      	ldr	r3, [r3, #16]
 801fb12:	1d7a      	adds	r2, r7, #5
 801fb14:	32ff      	adds	r2, #255	@ 0xff
 801fb16:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801fb18:	683b      	ldr	r3, [r7, #0]
 801fb1a:	699a      	ldr	r2, [r3, #24]
 801fb1c:	1d7b      	adds	r3, r7, #5
 801fb1e:	33ff      	adds	r3, #255	@ 0xff
 801fb20:	681b      	ldr	r3, [r3, #0]
 801fb22:	1ad2      	subs	r2, r2, r3
 801fb24:	683b      	ldr	r3, [r7, #0]
 801fb26:	619a      	str	r2, [r3, #24]
 801fb28:	e012      	b.n	801fb50 <USB_EPStartXfer+0xac8>
 801fb2a:	46c0      	nop			@ (mov r8, r8)
 801fb2c:	00000406 	.word	0x00000406
 801fb30:	ffff8000 	.word	0xffff8000
 801fb34:	00000402 	.word	0x00000402
 801fb38:	ffff8fbf 	.word	0xffff8fbf
 801fb3c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801fb40:	683b      	ldr	r3, [r7, #0]
 801fb42:	699b      	ldr	r3, [r3, #24]
 801fb44:	1d7a      	adds	r2, r7, #5
 801fb46:	32ff      	adds	r2, #255	@ 0xff
 801fb48:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	2200      	movs	r2, #0
 801fb4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	2190      	movs	r1, #144	@ 0x90
 801fb54:	187a      	adds	r2, r7, r1
 801fb56:	6013      	str	r3, [r2, #0]
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	2250      	movs	r2, #80	@ 0x50
 801fb5c:	5a9b      	ldrh	r3, [r3, r2]
 801fb5e:	b29b      	uxth	r3, r3
 801fb60:	001a      	movs	r2, r3
 801fb62:	187b      	adds	r3, r7, r1
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	189b      	adds	r3, r3, r2
 801fb68:	187a      	adds	r2, r7, r1
 801fb6a:	6013      	str	r3, [r2, #0]
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	781b      	ldrb	r3, [r3, #0]
 801fb70:	00da      	lsls	r2, r3, #3
 801fb72:	187b      	adds	r3, r7, r1
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	18d3      	adds	r3, r2, r3
 801fb78:	4acf      	ldr	r2, [pc, #828]	@ (801feb8 <USB_EPStartXfer+0xe30>)
 801fb7a:	4694      	mov	ip, r2
 801fb7c:	4463      	add	r3, ip
 801fb7e:	218c      	movs	r1, #140	@ 0x8c
 801fb80:	187a      	adds	r2, r7, r1
 801fb82:	6013      	str	r3, [r2, #0]
 801fb84:	187b      	adds	r3, r7, r1
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	881b      	ldrh	r3, [r3, #0]
 801fb8a:	b29b      	uxth	r3, r3
 801fb8c:	059b      	lsls	r3, r3, #22
 801fb8e:	0d9b      	lsrs	r3, r3, #22
 801fb90:	b29a      	uxth	r2, r3
 801fb92:	187b      	adds	r3, r7, r1
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	801a      	strh	r2, [r3, #0]
 801fb98:	1d7b      	adds	r3, r7, #5
 801fb9a:	33ff      	adds	r3, #255	@ 0xff
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fba0:	d925      	bls.n	801fbee <USB_EPStartXfer+0xb66>
 801fba2:	1d7b      	adds	r3, r7, #5
 801fba4:	33ff      	adds	r3, #255	@ 0xff
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	095b      	lsrs	r3, r3, #5
 801fbaa:	21e8      	movs	r1, #232	@ 0xe8
 801fbac:	187a      	adds	r2, r7, r1
 801fbae:	6013      	str	r3, [r2, #0]
 801fbb0:	1d7b      	adds	r3, r7, #5
 801fbb2:	33ff      	adds	r3, #255	@ 0xff
 801fbb4:	681b      	ldr	r3, [r3, #0]
 801fbb6:	221f      	movs	r2, #31
 801fbb8:	4013      	ands	r3, r2
 801fbba:	d104      	bne.n	801fbc6 <USB_EPStartXfer+0xb3e>
 801fbbc:	187b      	adds	r3, r7, r1
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	3b01      	subs	r3, #1
 801fbc2:	187a      	adds	r2, r7, r1
 801fbc4:	6013      	str	r3, [r2, #0]
 801fbc6:	218c      	movs	r1, #140	@ 0x8c
 801fbc8:	187b      	adds	r3, r7, r1
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	881b      	ldrh	r3, [r3, #0]
 801fbce:	b29a      	uxth	r2, r3
 801fbd0:	23e8      	movs	r3, #232	@ 0xe8
 801fbd2:	18fb      	adds	r3, r7, r3
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	b29b      	uxth	r3, r3
 801fbd8:	029b      	lsls	r3, r3, #10
 801fbda:	b29b      	uxth	r3, r3
 801fbdc:	4313      	orrs	r3, r2
 801fbde:	b29b      	uxth	r3, r3
 801fbe0:	4ab6      	ldr	r2, [pc, #728]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fbe2:	4313      	orrs	r3, r2
 801fbe4:	b29a      	uxth	r2, r3
 801fbe6:	187b      	adds	r3, r7, r1
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	801a      	strh	r2, [r3, #0]
 801fbec:	e353      	b.n	8020296 <USB_EPStartXfer+0x120e>
 801fbee:	1d7b      	adds	r3, r7, #5
 801fbf0:	33ff      	adds	r3, #255	@ 0xff
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d10b      	bne.n	801fc10 <USB_EPStartXfer+0xb88>
 801fbf8:	218c      	movs	r1, #140	@ 0x8c
 801fbfa:	187b      	adds	r3, r7, r1
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	881b      	ldrh	r3, [r3, #0]
 801fc00:	b29b      	uxth	r3, r3
 801fc02:	4aae      	ldr	r2, [pc, #696]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fc04:	4313      	orrs	r3, r2
 801fc06:	b29a      	uxth	r2, r3
 801fc08:	187b      	adds	r3, r7, r1
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	801a      	strh	r2, [r3, #0]
 801fc0e:	e342      	b.n	8020296 <USB_EPStartXfer+0x120e>
 801fc10:	1d7b      	adds	r3, r7, #5
 801fc12:	33ff      	adds	r3, #255	@ 0xff
 801fc14:	681b      	ldr	r3, [r3, #0]
 801fc16:	085b      	lsrs	r3, r3, #1
 801fc18:	21e8      	movs	r1, #232	@ 0xe8
 801fc1a:	187a      	adds	r2, r7, r1
 801fc1c:	6013      	str	r3, [r2, #0]
 801fc1e:	1d7b      	adds	r3, r7, #5
 801fc20:	33ff      	adds	r3, #255	@ 0xff
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	2201      	movs	r2, #1
 801fc26:	4013      	ands	r3, r2
 801fc28:	d004      	beq.n	801fc34 <USB_EPStartXfer+0xbac>
 801fc2a:	187b      	adds	r3, r7, r1
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	3301      	adds	r3, #1
 801fc30:	187a      	adds	r2, r7, r1
 801fc32:	6013      	str	r3, [r2, #0]
 801fc34:	218c      	movs	r1, #140	@ 0x8c
 801fc36:	187b      	adds	r3, r7, r1
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	881b      	ldrh	r3, [r3, #0]
 801fc3c:	b29a      	uxth	r2, r3
 801fc3e:	23e8      	movs	r3, #232	@ 0xe8
 801fc40:	18fb      	adds	r3, r7, r3
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	b29b      	uxth	r3, r3
 801fc46:	029b      	lsls	r3, r3, #10
 801fc48:	b29b      	uxth	r3, r3
 801fc4a:	4313      	orrs	r3, r2
 801fc4c:	b29a      	uxth	r2, r3
 801fc4e:	187b      	adds	r3, r7, r1
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	801a      	strh	r2, [r3, #0]
 801fc54:	e31f      	b.n	8020296 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801fc56:	683b      	ldr	r3, [r7, #0]
 801fc58:	78db      	ldrb	r3, [r3, #3]
 801fc5a:	2b02      	cmp	r3, #2
 801fc5c:	d000      	beq.n	801fc60 <USB_EPStartXfer+0xbd8>
 801fc5e:	e191      	b.n	801ff84 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	785b      	ldrb	r3, [r3, #1]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d000      	beq.n	801fc6a <USB_EPStartXfer+0xbe2>
 801fc68:	e07c      	b.n	801fd64 <USB_EPStartXfer+0xcdc>
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	21ac      	movs	r1, #172	@ 0xac
 801fc6e:	187a      	adds	r2, r7, r1
 801fc70:	6013      	str	r3, [r2, #0]
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	2250      	movs	r2, #80	@ 0x50
 801fc76:	5a9b      	ldrh	r3, [r3, r2]
 801fc78:	b29b      	uxth	r3, r3
 801fc7a:	001a      	movs	r2, r3
 801fc7c:	187b      	adds	r3, r7, r1
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	189b      	adds	r3, r3, r2
 801fc82:	187a      	adds	r2, r7, r1
 801fc84:	6013      	str	r3, [r2, #0]
 801fc86:	683b      	ldr	r3, [r7, #0]
 801fc88:	781b      	ldrb	r3, [r3, #0]
 801fc8a:	00da      	lsls	r2, r3, #3
 801fc8c:	187b      	adds	r3, r7, r1
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	18d3      	adds	r3, r2, r3
 801fc92:	4a8b      	ldr	r2, [pc, #556]	@ (801fec0 <USB_EPStartXfer+0xe38>)
 801fc94:	4694      	mov	ip, r2
 801fc96:	4463      	add	r3, ip
 801fc98:	21a8      	movs	r1, #168	@ 0xa8
 801fc9a:	187a      	adds	r2, r7, r1
 801fc9c:	6013      	str	r3, [r2, #0]
 801fc9e:	187b      	adds	r3, r7, r1
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	881b      	ldrh	r3, [r3, #0]
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	059b      	lsls	r3, r3, #22
 801fca8:	0d9b      	lsrs	r3, r3, #22
 801fcaa:	b29a      	uxth	r2, r3
 801fcac:	187b      	adds	r3, r7, r1
 801fcae:	681b      	ldr	r3, [r3, #0]
 801fcb0:	801a      	strh	r2, [r3, #0]
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	691b      	ldr	r3, [r3, #16]
 801fcb6:	2b3e      	cmp	r3, #62	@ 0x3e
 801fcb8:	d923      	bls.n	801fd02 <USB_EPStartXfer+0xc7a>
 801fcba:	683b      	ldr	r3, [r7, #0]
 801fcbc:	691b      	ldr	r3, [r3, #16]
 801fcbe:	095b      	lsrs	r3, r3, #5
 801fcc0:	21e4      	movs	r1, #228	@ 0xe4
 801fcc2:	187a      	adds	r2, r7, r1
 801fcc4:	6013      	str	r3, [r2, #0]
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	691b      	ldr	r3, [r3, #16]
 801fcca:	221f      	movs	r2, #31
 801fccc:	4013      	ands	r3, r2
 801fcce:	d104      	bne.n	801fcda <USB_EPStartXfer+0xc52>
 801fcd0:	187b      	adds	r3, r7, r1
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	3b01      	subs	r3, #1
 801fcd6:	187a      	adds	r2, r7, r1
 801fcd8:	6013      	str	r3, [r2, #0]
 801fcda:	21a8      	movs	r1, #168	@ 0xa8
 801fcdc:	187b      	adds	r3, r7, r1
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	881b      	ldrh	r3, [r3, #0]
 801fce2:	b29a      	uxth	r2, r3
 801fce4:	23e4      	movs	r3, #228	@ 0xe4
 801fce6:	18fb      	adds	r3, r7, r3
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	b29b      	uxth	r3, r3
 801fcec:	029b      	lsls	r3, r3, #10
 801fcee:	b29b      	uxth	r3, r3
 801fcf0:	4313      	orrs	r3, r2
 801fcf2:	b29b      	uxth	r3, r3
 801fcf4:	4a71      	ldr	r2, [pc, #452]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fcf6:	4313      	orrs	r3, r2
 801fcf8:	b29a      	uxth	r2, r3
 801fcfa:	187b      	adds	r3, r7, r1
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	801a      	strh	r2, [r3, #0]
 801fd00:	e054      	b.n	801fdac <USB_EPStartXfer+0xd24>
 801fd02:	683b      	ldr	r3, [r7, #0]
 801fd04:	691b      	ldr	r3, [r3, #16]
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d10b      	bne.n	801fd22 <USB_EPStartXfer+0xc9a>
 801fd0a:	21a8      	movs	r1, #168	@ 0xa8
 801fd0c:	187b      	adds	r3, r7, r1
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	881b      	ldrh	r3, [r3, #0]
 801fd12:	b29b      	uxth	r3, r3
 801fd14:	4a69      	ldr	r2, [pc, #420]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fd16:	4313      	orrs	r3, r2
 801fd18:	b29a      	uxth	r2, r3
 801fd1a:	187b      	adds	r3, r7, r1
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	801a      	strh	r2, [r3, #0]
 801fd20:	e044      	b.n	801fdac <USB_EPStartXfer+0xd24>
 801fd22:	683b      	ldr	r3, [r7, #0]
 801fd24:	691b      	ldr	r3, [r3, #16]
 801fd26:	085b      	lsrs	r3, r3, #1
 801fd28:	21e4      	movs	r1, #228	@ 0xe4
 801fd2a:	187a      	adds	r2, r7, r1
 801fd2c:	6013      	str	r3, [r2, #0]
 801fd2e:	683b      	ldr	r3, [r7, #0]
 801fd30:	691b      	ldr	r3, [r3, #16]
 801fd32:	2201      	movs	r2, #1
 801fd34:	4013      	ands	r3, r2
 801fd36:	d004      	beq.n	801fd42 <USB_EPStartXfer+0xcba>
 801fd38:	187b      	adds	r3, r7, r1
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	3301      	adds	r3, #1
 801fd3e:	187a      	adds	r2, r7, r1
 801fd40:	6013      	str	r3, [r2, #0]
 801fd42:	21a8      	movs	r1, #168	@ 0xa8
 801fd44:	187b      	adds	r3, r7, r1
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	881b      	ldrh	r3, [r3, #0]
 801fd4a:	b29a      	uxth	r2, r3
 801fd4c:	23e4      	movs	r3, #228	@ 0xe4
 801fd4e:	18fb      	adds	r3, r7, r3
 801fd50:	681b      	ldr	r3, [r3, #0]
 801fd52:	b29b      	uxth	r3, r3
 801fd54:	029b      	lsls	r3, r3, #10
 801fd56:	b29b      	uxth	r3, r3
 801fd58:	4313      	orrs	r3, r2
 801fd5a:	b29a      	uxth	r2, r3
 801fd5c:	187b      	adds	r3, r7, r1
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	801a      	strh	r2, [r3, #0]
 801fd62:	e023      	b.n	801fdac <USB_EPStartXfer+0xd24>
 801fd64:	683b      	ldr	r3, [r7, #0]
 801fd66:	785b      	ldrb	r3, [r3, #1]
 801fd68:	2b01      	cmp	r3, #1
 801fd6a:	d11f      	bne.n	801fdac <USB_EPStartXfer+0xd24>
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	21b4      	movs	r1, #180	@ 0xb4
 801fd70:	187a      	adds	r2, r7, r1
 801fd72:	6013      	str	r3, [r2, #0]
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	2250      	movs	r2, #80	@ 0x50
 801fd78:	5a9b      	ldrh	r3, [r3, r2]
 801fd7a:	b29b      	uxth	r3, r3
 801fd7c:	001a      	movs	r2, r3
 801fd7e:	187b      	adds	r3, r7, r1
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	189b      	adds	r3, r3, r2
 801fd84:	187a      	adds	r2, r7, r1
 801fd86:	6013      	str	r3, [r2, #0]
 801fd88:	683b      	ldr	r3, [r7, #0]
 801fd8a:	781b      	ldrb	r3, [r3, #0]
 801fd8c:	00da      	lsls	r2, r3, #3
 801fd8e:	187b      	adds	r3, r7, r1
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	18d3      	adds	r3, r2, r3
 801fd94:	4a4a      	ldr	r2, [pc, #296]	@ (801fec0 <USB_EPStartXfer+0xe38>)
 801fd96:	4694      	mov	ip, r2
 801fd98:	4463      	add	r3, ip
 801fd9a:	21b0      	movs	r1, #176	@ 0xb0
 801fd9c:	187a      	adds	r2, r7, r1
 801fd9e:	6013      	str	r3, [r2, #0]
 801fda0:	683b      	ldr	r3, [r7, #0]
 801fda2:	691b      	ldr	r3, [r3, #16]
 801fda4:	b29a      	uxth	r2, r3
 801fda6:	187b      	adds	r3, r7, r1
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	801a      	strh	r2, [r3, #0]
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	22a4      	movs	r2, #164	@ 0xa4
 801fdb0:	18ba      	adds	r2, r7, r2
 801fdb2:	6013      	str	r3, [r2, #0]
 801fdb4:	683b      	ldr	r3, [r7, #0]
 801fdb6:	785b      	ldrb	r3, [r3, #1]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d000      	beq.n	801fdbe <USB_EPStartXfer+0xd36>
 801fdbc:	e082      	b.n	801fec4 <USB_EPStartXfer+0xe3c>
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	219c      	movs	r1, #156	@ 0x9c
 801fdc2:	187a      	adds	r2, r7, r1
 801fdc4:	6013      	str	r3, [r2, #0]
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	2250      	movs	r2, #80	@ 0x50
 801fdca:	5a9b      	ldrh	r3, [r3, r2]
 801fdcc:	b29b      	uxth	r3, r3
 801fdce:	001a      	movs	r2, r3
 801fdd0:	187b      	adds	r3, r7, r1
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	189b      	adds	r3, r3, r2
 801fdd6:	187a      	adds	r2, r7, r1
 801fdd8:	6013      	str	r3, [r2, #0]
 801fdda:	683b      	ldr	r3, [r7, #0]
 801fddc:	781b      	ldrb	r3, [r3, #0]
 801fdde:	00da      	lsls	r2, r3, #3
 801fde0:	187b      	adds	r3, r7, r1
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	18d3      	adds	r3, r2, r3
 801fde6:	4a34      	ldr	r2, [pc, #208]	@ (801feb8 <USB_EPStartXfer+0xe30>)
 801fde8:	4694      	mov	ip, r2
 801fdea:	4463      	add	r3, ip
 801fdec:	2198      	movs	r1, #152	@ 0x98
 801fdee:	187a      	adds	r2, r7, r1
 801fdf0:	6013      	str	r3, [r2, #0]
 801fdf2:	187b      	adds	r3, r7, r1
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	881b      	ldrh	r3, [r3, #0]
 801fdf8:	b29b      	uxth	r3, r3
 801fdfa:	059b      	lsls	r3, r3, #22
 801fdfc:	0d9b      	lsrs	r3, r3, #22
 801fdfe:	b29a      	uxth	r2, r3
 801fe00:	187b      	adds	r3, r7, r1
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	801a      	strh	r2, [r3, #0]
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	691b      	ldr	r3, [r3, #16]
 801fe0a:	2b3e      	cmp	r3, #62	@ 0x3e
 801fe0c:	d923      	bls.n	801fe56 <USB_EPStartXfer+0xdce>
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	691b      	ldr	r3, [r3, #16]
 801fe12:	095b      	lsrs	r3, r3, #5
 801fe14:	21e0      	movs	r1, #224	@ 0xe0
 801fe16:	187a      	adds	r2, r7, r1
 801fe18:	6013      	str	r3, [r2, #0]
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	691b      	ldr	r3, [r3, #16]
 801fe1e:	221f      	movs	r2, #31
 801fe20:	4013      	ands	r3, r2
 801fe22:	d104      	bne.n	801fe2e <USB_EPStartXfer+0xda6>
 801fe24:	187b      	adds	r3, r7, r1
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	3b01      	subs	r3, #1
 801fe2a:	187a      	adds	r2, r7, r1
 801fe2c:	6013      	str	r3, [r2, #0]
 801fe2e:	2198      	movs	r1, #152	@ 0x98
 801fe30:	187b      	adds	r3, r7, r1
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	881b      	ldrh	r3, [r3, #0]
 801fe36:	b29a      	uxth	r2, r3
 801fe38:	23e0      	movs	r3, #224	@ 0xe0
 801fe3a:	18fb      	adds	r3, r7, r3
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	b29b      	uxth	r3, r3
 801fe40:	029b      	lsls	r3, r3, #10
 801fe42:	b29b      	uxth	r3, r3
 801fe44:	4313      	orrs	r3, r2
 801fe46:	b29b      	uxth	r3, r3
 801fe48:	4a1c      	ldr	r2, [pc, #112]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fe4a:	4313      	orrs	r3, r2
 801fe4c:	b29a      	uxth	r2, r3
 801fe4e:	187b      	adds	r3, r7, r1
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	801a      	strh	r2, [r3, #0]
 801fe54:	e057      	b.n	801ff06 <USB_EPStartXfer+0xe7e>
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	691b      	ldr	r3, [r3, #16]
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d10b      	bne.n	801fe76 <USB_EPStartXfer+0xdee>
 801fe5e:	2198      	movs	r1, #152	@ 0x98
 801fe60:	187b      	adds	r3, r7, r1
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	881b      	ldrh	r3, [r3, #0]
 801fe66:	b29b      	uxth	r3, r3
 801fe68:	4a14      	ldr	r2, [pc, #80]	@ (801febc <USB_EPStartXfer+0xe34>)
 801fe6a:	4313      	orrs	r3, r2
 801fe6c:	b29a      	uxth	r2, r3
 801fe6e:	187b      	adds	r3, r7, r1
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	801a      	strh	r2, [r3, #0]
 801fe74:	e047      	b.n	801ff06 <USB_EPStartXfer+0xe7e>
 801fe76:	683b      	ldr	r3, [r7, #0]
 801fe78:	691b      	ldr	r3, [r3, #16]
 801fe7a:	085b      	lsrs	r3, r3, #1
 801fe7c:	21e0      	movs	r1, #224	@ 0xe0
 801fe7e:	187a      	adds	r2, r7, r1
 801fe80:	6013      	str	r3, [r2, #0]
 801fe82:	683b      	ldr	r3, [r7, #0]
 801fe84:	691b      	ldr	r3, [r3, #16]
 801fe86:	2201      	movs	r2, #1
 801fe88:	4013      	ands	r3, r2
 801fe8a:	d004      	beq.n	801fe96 <USB_EPStartXfer+0xe0e>
 801fe8c:	187b      	adds	r3, r7, r1
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	3301      	adds	r3, #1
 801fe92:	187a      	adds	r2, r7, r1
 801fe94:	6013      	str	r3, [r2, #0]
 801fe96:	2198      	movs	r1, #152	@ 0x98
 801fe98:	187b      	adds	r3, r7, r1
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	881b      	ldrh	r3, [r3, #0]
 801fe9e:	b29a      	uxth	r2, r3
 801fea0:	23e0      	movs	r3, #224	@ 0xe0
 801fea2:	18fb      	adds	r3, r7, r3
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	029b      	lsls	r3, r3, #10
 801feaa:	b29b      	uxth	r3, r3
 801feac:	4313      	orrs	r3, r2
 801feae:	b29a      	uxth	r2, r3
 801feb0:	187b      	adds	r3, r7, r1
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	801a      	strh	r2, [r3, #0]
 801feb6:	e026      	b.n	801ff06 <USB_EPStartXfer+0xe7e>
 801feb8:	00000406 	.word	0x00000406
 801febc:	ffff8000 	.word	0xffff8000
 801fec0:	00000402 	.word	0x00000402
 801fec4:	683b      	ldr	r3, [r7, #0]
 801fec6:	785b      	ldrb	r3, [r3, #1]
 801fec8:	2b01      	cmp	r3, #1
 801feca:	d11c      	bne.n	801ff06 <USB_EPStartXfer+0xe7e>
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	2250      	movs	r2, #80	@ 0x50
 801fed0:	5a9b      	ldrh	r3, [r3, r2]
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	001a      	movs	r2, r3
 801fed6:	21a4      	movs	r1, #164	@ 0xa4
 801fed8:	187b      	adds	r3, r7, r1
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	189b      	adds	r3, r3, r2
 801fede:	187a      	adds	r2, r7, r1
 801fee0:	6013      	str	r3, [r2, #0]
 801fee2:	683b      	ldr	r3, [r7, #0]
 801fee4:	781b      	ldrb	r3, [r3, #0]
 801fee6:	00da      	lsls	r2, r3, #3
 801fee8:	187b      	adds	r3, r7, r1
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	18d3      	adds	r3, r2, r3
 801feee:	4ad2      	ldr	r2, [pc, #840]	@ (8020238 <USB_EPStartXfer+0x11b0>)
 801fef0:	4694      	mov	ip, r2
 801fef2:	4463      	add	r3, ip
 801fef4:	21a0      	movs	r1, #160	@ 0xa0
 801fef6:	187a      	adds	r2, r7, r1
 801fef8:	6013      	str	r3, [r2, #0]
 801fefa:	683b      	ldr	r3, [r7, #0]
 801fefc:	691b      	ldr	r3, [r3, #16]
 801fefe:	b29a      	uxth	r2, r3
 801ff00:	187b      	adds	r3, r7, r1
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ff06:	683b      	ldr	r3, [r7, #0]
 801ff08:	69db      	ldr	r3, [r3, #28]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d100      	bne.n	801ff10 <USB_EPStartXfer+0xe88>
 801ff0e:	e1c2      	b.n	8020296 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ff10:	687a      	ldr	r2, [r7, #4]
 801ff12:	683b      	ldr	r3, [r7, #0]
 801ff14:	781b      	ldrb	r3, [r3, #0]
 801ff16:	009b      	lsls	r3, r3, #2
 801ff18:	18d2      	adds	r2, r2, r3
 801ff1a:	2196      	movs	r1, #150	@ 0x96
 801ff1c:	187b      	adds	r3, r7, r1
 801ff1e:	8812      	ldrh	r2, [r2, #0]
 801ff20:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ff22:	187b      	adds	r3, r7, r1
 801ff24:	881a      	ldrh	r2, [r3, #0]
 801ff26:	2380      	movs	r3, #128	@ 0x80
 801ff28:	01db      	lsls	r3, r3, #7
 801ff2a:	4013      	ands	r3, r2
 801ff2c:	d004      	beq.n	801ff38 <USB_EPStartXfer+0xeb0>
 801ff2e:	187b      	adds	r3, r7, r1
 801ff30:	881b      	ldrh	r3, [r3, #0]
 801ff32:	2240      	movs	r2, #64	@ 0x40
 801ff34:	4013      	ands	r3, r2
 801ff36:	d10d      	bne.n	801ff54 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ff38:	2196      	movs	r1, #150	@ 0x96
 801ff3a:	187b      	adds	r3, r7, r1
 801ff3c:	881a      	ldrh	r2, [r3, #0]
 801ff3e:	2380      	movs	r3, #128	@ 0x80
 801ff40:	01db      	lsls	r3, r3, #7
 801ff42:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ff44:	d000      	beq.n	801ff48 <USB_EPStartXfer+0xec0>
 801ff46:	e1a6      	b.n	8020296 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ff48:	187b      	adds	r3, r7, r1
 801ff4a:	881b      	ldrh	r3, [r3, #0]
 801ff4c:	2240      	movs	r2, #64	@ 0x40
 801ff4e:	4013      	ands	r3, r2
 801ff50:	d000      	beq.n	801ff54 <USB_EPStartXfer+0xecc>
 801ff52:	e1a0      	b.n	8020296 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801ff54:	687a      	ldr	r2, [r7, #4]
 801ff56:	683b      	ldr	r3, [r7, #0]
 801ff58:	781b      	ldrb	r3, [r3, #0]
 801ff5a:	009b      	lsls	r3, r3, #2
 801ff5c:	18d3      	adds	r3, r2, r3
 801ff5e:	881b      	ldrh	r3, [r3, #0]
 801ff60:	b29a      	uxth	r2, r3
 801ff62:	2094      	movs	r0, #148	@ 0x94
 801ff64:	183b      	adds	r3, r7, r0
 801ff66:	49b5      	ldr	r1, [pc, #724]	@ (802023c <USB_EPStartXfer+0x11b4>)
 801ff68:	400a      	ands	r2, r1
 801ff6a:	801a      	strh	r2, [r3, #0]
 801ff6c:	687a      	ldr	r2, [r7, #4]
 801ff6e:	683b      	ldr	r3, [r7, #0]
 801ff70:	781b      	ldrb	r3, [r3, #0]
 801ff72:	009b      	lsls	r3, r3, #2
 801ff74:	18d3      	adds	r3, r2, r3
 801ff76:	183a      	adds	r2, r7, r0
 801ff78:	8812      	ldrh	r2, [r2, #0]
 801ff7a:	49b1      	ldr	r1, [pc, #708]	@ (8020240 <USB_EPStartXfer+0x11b8>)
 801ff7c:	430a      	orrs	r2, r1
 801ff7e:	b292      	uxth	r2, r2
 801ff80:	801a      	strh	r2, [r3, #0]
 801ff82:	e188      	b.n	8020296 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801ff84:	683b      	ldr	r3, [r7, #0]
 801ff86:	78db      	ldrb	r3, [r3, #3]
 801ff88:	2b01      	cmp	r3, #1
 801ff8a:	d000      	beq.n	801ff8e <USB_EPStartXfer+0xf06>
 801ff8c:	e181      	b.n	8020292 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801ff8e:	683b      	ldr	r3, [r7, #0]
 801ff90:	699a      	ldr	r2, [r3, #24]
 801ff92:	683b      	ldr	r3, [r7, #0]
 801ff94:	691b      	ldr	r3, [r3, #16]
 801ff96:	429a      	cmp	r2, r3
 801ff98:	d90d      	bls.n	801ffb6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801ff9a:	683b      	ldr	r3, [r7, #0]
 801ff9c:	691b      	ldr	r3, [r3, #16]
 801ff9e:	1d7a      	adds	r2, r7, #5
 801ffa0:	32ff      	adds	r2, #255	@ 0xff
 801ffa2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	699a      	ldr	r2, [r3, #24]
 801ffa8:	1d7b      	adds	r3, r7, #5
 801ffaa:	33ff      	adds	r3, #255	@ 0xff
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	1ad2      	subs	r2, r2, r3
 801ffb0:	683b      	ldr	r3, [r7, #0]
 801ffb2:	619a      	str	r2, [r3, #24]
 801ffb4:	e007      	b.n	801ffc6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801ffb6:	683b      	ldr	r3, [r7, #0]
 801ffb8:	699b      	ldr	r3, [r3, #24]
 801ffba:	1d7a      	adds	r2, r7, #5
 801ffbc:	32ff      	adds	r2, #255	@ 0xff
 801ffbe:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801ffc0:	683b      	ldr	r3, [r7, #0]
 801ffc2:	2200      	movs	r2, #0
 801ffc4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801ffc6:	683b      	ldr	r3, [r7, #0]
 801ffc8:	785b      	ldrb	r3, [r3, #1]
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d000      	beq.n	801ffd0 <USB_EPStartXfer+0xf48>
 801ffce:	e082      	b.n	80200d6 <USB_EPStartXfer+0x104e>
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	21cc      	movs	r1, #204	@ 0xcc
 801ffd4:	187a      	adds	r2, r7, r1
 801ffd6:	6013      	str	r3, [r2, #0]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	2250      	movs	r2, #80	@ 0x50
 801ffdc:	5a9b      	ldrh	r3, [r3, r2]
 801ffde:	b29b      	uxth	r3, r3
 801ffe0:	001a      	movs	r2, r3
 801ffe2:	187b      	adds	r3, r7, r1
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	189b      	adds	r3, r3, r2
 801ffe8:	187a      	adds	r2, r7, r1
 801ffea:	6013      	str	r3, [r2, #0]
 801ffec:	683b      	ldr	r3, [r7, #0]
 801ffee:	781b      	ldrb	r3, [r3, #0]
 801fff0:	00da      	lsls	r2, r3, #3
 801fff2:	187b      	adds	r3, r7, r1
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	18d3      	adds	r3, r2, r3
 801fff8:	4a92      	ldr	r2, [pc, #584]	@ (8020244 <USB_EPStartXfer+0x11bc>)
 801fffa:	4694      	mov	ip, r2
 801fffc:	4463      	add	r3, ip
 801fffe:	21c8      	movs	r1, #200	@ 0xc8
 8020000:	187a      	adds	r2, r7, r1
 8020002:	6013      	str	r3, [r2, #0]
 8020004:	187b      	adds	r3, r7, r1
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	881b      	ldrh	r3, [r3, #0]
 802000a:	b29b      	uxth	r3, r3
 802000c:	059b      	lsls	r3, r3, #22
 802000e:	0d9b      	lsrs	r3, r3, #22
 8020010:	b29a      	uxth	r2, r3
 8020012:	187b      	adds	r3, r7, r1
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	801a      	strh	r2, [r3, #0]
 8020018:	1d7b      	adds	r3, r7, #5
 802001a:	33ff      	adds	r3, #255	@ 0xff
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020020:	d925      	bls.n	802006e <USB_EPStartXfer+0xfe6>
 8020022:	1d7b      	adds	r3, r7, #5
 8020024:	33ff      	adds	r3, #255	@ 0xff
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	095b      	lsrs	r3, r3, #5
 802002a:	21dc      	movs	r1, #220	@ 0xdc
 802002c:	187a      	adds	r2, r7, r1
 802002e:	6013      	str	r3, [r2, #0]
 8020030:	1d7b      	adds	r3, r7, #5
 8020032:	33ff      	adds	r3, #255	@ 0xff
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	221f      	movs	r2, #31
 8020038:	4013      	ands	r3, r2
 802003a:	d104      	bne.n	8020046 <USB_EPStartXfer+0xfbe>
 802003c:	187b      	adds	r3, r7, r1
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	3b01      	subs	r3, #1
 8020042:	187a      	adds	r2, r7, r1
 8020044:	6013      	str	r3, [r2, #0]
 8020046:	21c8      	movs	r1, #200	@ 0xc8
 8020048:	187b      	adds	r3, r7, r1
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	881b      	ldrh	r3, [r3, #0]
 802004e:	b29a      	uxth	r2, r3
 8020050:	23dc      	movs	r3, #220	@ 0xdc
 8020052:	18fb      	adds	r3, r7, r3
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	b29b      	uxth	r3, r3
 8020058:	029b      	lsls	r3, r3, #10
 802005a:	b29b      	uxth	r3, r3
 802005c:	4313      	orrs	r3, r2
 802005e:	b29b      	uxth	r3, r3
 8020060:	4a79      	ldr	r2, [pc, #484]	@ (8020248 <USB_EPStartXfer+0x11c0>)
 8020062:	4313      	orrs	r3, r2
 8020064:	b29a      	uxth	r2, r3
 8020066:	187b      	adds	r3, r7, r1
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	801a      	strh	r2, [r3, #0]
 802006c:	e058      	b.n	8020120 <USB_EPStartXfer+0x1098>
 802006e:	1d7b      	adds	r3, r7, #5
 8020070:	33ff      	adds	r3, #255	@ 0xff
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d10b      	bne.n	8020090 <USB_EPStartXfer+0x1008>
 8020078:	21c8      	movs	r1, #200	@ 0xc8
 802007a:	187b      	adds	r3, r7, r1
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	881b      	ldrh	r3, [r3, #0]
 8020080:	b29b      	uxth	r3, r3
 8020082:	4a71      	ldr	r2, [pc, #452]	@ (8020248 <USB_EPStartXfer+0x11c0>)
 8020084:	4313      	orrs	r3, r2
 8020086:	b29a      	uxth	r2, r3
 8020088:	187b      	adds	r3, r7, r1
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	801a      	strh	r2, [r3, #0]
 802008e:	e047      	b.n	8020120 <USB_EPStartXfer+0x1098>
 8020090:	1d7b      	adds	r3, r7, #5
 8020092:	33ff      	adds	r3, #255	@ 0xff
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	085b      	lsrs	r3, r3, #1
 8020098:	21dc      	movs	r1, #220	@ 0xdc
 802009a:	187a      	adds	r2, r7, r1
 802009c:	6013      	str	r3, [r2, #0]
 802009e:	1d7b      	adds	r3, r7, #5
 80200a0:	33ff      	adds	r3, #255	@ 0xff
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	2201      	movs	r2, #1
 80200a6:	4013      	ands	r3, r2
 80200a8:	d004      	beq.n	80200b4 <USB_EPStartXfer+0x102c>
 80200aa:	187b      	adds	r3, r7, r1
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	3301      	adds	r3, #1
 80200b0:	187a      	adds	r2, r7, r1
 80200b2:	6013      	str	r3, [r2, #0]
 80200b4:	21c8      	movs	r1, #200	@ 0xc8
 80200b6:	187b      	adds	r3, r7, r1
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	881b      	ldrh	r3, [r3, #0]
 80200bc:	b29a      	uxth	r2, r3
 80200be:	23dc      	movs	r3, #220	@ 0xdc
 80200c0:	18fb      	adds	r3, r7, r3
 80200c2:	681b      	ldr	r3, [r3, #0]
 80200c4:	b29b      	uxth	r3, r3
 80200c6:	029b      	lsls	r3, r3, #10
 80200c8:	b29b      	uxth	r3, r3
 80200ca:	4313      	orrs	r3, r2
 80200cc:	b29a      	uxth	r2, r3
 80200ce:	187b      	adds	r3, r7, r1
 80200d0:	681b      	ldr	r3, [r3, #0]
 80200d2:	801a      	strh	r2, [r3, #0]
 80200d4:	e024      	b.n	8020120 <USB_EPStartXfer+0x1098>
 80200d6:	683b      	ldr	r3, [r7, #0]
 80200d8:	785b      	ldrb	r3, [r3, #1]
 80200da:	2b01      	cmp	r3, #1
 80200dc:	d120      	bne.n	8020120 <USB_EPStartXfer+0x1098>
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	21d4      	movs	r1, #212	@ 0xd4
 80200e2:	187a      	adds	r2, r7, r1
 80200e4:	6013      	str	r3, [r2, #0]
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	2250      	movs	r2, #80	@ 0x50
 80200ea:	5a9b      	ldrh	r3, [r3, r2]
 80200ec:	b29b      	uxth	r3, r3
 80200ee:	001a      	movs	r2, r3
 80200f0:	187b      	adds	r3, r7, r1
 80200f2:	681b      	ldr	r3, [r3, #0]
 80200f4:	189b      	adds	r3, r3, r2
 80200f6:	187a      	adds	r2, r7, r1
 80200f8:	6013      	str	r3, [r2, #0]
 80200fa:	683b      	ldr	r3, [r7, #0]
 80200fc:	781b      	ldrb	r3, [r3, #0]
 80200fe:	00da      	lsls	r2, r3, #3
 8020100:	187b      	adds	r3, r7, r1
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	18d3      	adds	r3, r2, r3
 8020106:	4a4f      	ldr	r2, [pc, #316]	@ (8020244 <USB_EPStartXfer+0x11bc>)
 8020108:	4694      	mov	ip, r2
 802010a:	4463      	add	r3, ip
 802010c:	21d0      	movs	r1, #208	@ 0xd0
 802010e:	187a      	adds	r2, r7, r1
 8020110:	6013      	str	r3, [r2, #0]
 8020112:	1d7b      	adds	r3, r7, #5
 8020114:	33ff      	adds	r3, #255	@ 0xff
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	b29a      	uxth	r2, r3
 802011a:	187b      	adds	r3, r7, r1
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	801a      	strh	r2, [r3, #0]
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	22c4      	movs	r2, #196	@ 0xc4
 8020124:	18ba      	adds	r2, r7, r2
 8020126:	6013      	str	r3, [r2, #0]
 8020128:	683b      	ldr	r3, [r7, #0]
 802012a:	785b      	ldrb	r3, [r3, #1]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d000      	beq.n	8020132 <USB_EPStartXfer+0x10aa>
 8020130:	e08c      	b.n	802024c <USB_EPStartXfer+0x11c4>
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	21bc      	movs	r1, #188	@ 0xbc
 8020136:	187a      	adds	r2, r7, r1
 8020138:	6013      	str	r3, [r2, #0]
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	2250      	movs	r2, #80	@ 0x50
 802013e:	5a9b      	ldrh	r3, [r3, r2]
 8020140:	b29b      	uxth	r3, r3
 8020142:	001a      	movs	r2, r3
 8020144:	187b      	adds	r3, r7, r1
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	189b      	adds	r3, r3, r2
 802014a:	187a      	adds	r2, r7, r1
 802014c:	6013      	str	r3, [r2, #0]
 802014e:	683b      	ldr	r3, [r7, #0]
 8020150:	781b      	ldrb	r3, [r3, #0]
 8020152:	00da      	lsls	r2, r3, #3
 8020154:	187b      	adds	r3, r7, r1
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	18d3      	adds	r3, r2, r3
 802015a:	4a37      	ldr	r2, [pc, #220]	@ (8020238 <USB_EPStartXfer+0x11b0>)
 802015c:	4694      	mov	ip, r2
 802015e:	4463      	add	r3, ip
 8020160:	21b8      	movs	r1, #184	@ 0xb8
 8020162:	187a      	adds	r2, r7, r1
 8020164:	6013      	str	r3, [r2, #0]
 8020166:	187b      	adds	r3, r7, r1
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	881b      	ldrh	r3, [r3, #0]
 802016c:	b29b      	uxth	r3, r3
 802016e:	059b      	lsls	r3, r3, #22
 8020170:	0d9b      	lsrs	r3, r3, #22
 8020172:	b29a      	uxth	r2, r3
 8020174:	187b      	adds	r3, r7, r1
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	801a      	strh	r2, [r3, #0]
 802017a:	1d7b      	adds	r3, r7, #5
 802017c:	33ff      	adds	r3, #255	@ 0xff
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	2b3e      	cmp	r3, #62	@ 0x3e
 8020182:	d925      	bls.n	80201d0 <USB_EPStartXfer+0x1148>
 8020184:	1d7b      	adds	r3, r7, #5
 8020186:	33ff      	adds	r3, #255	@ 0xff
 8020188:	681b      	ldr	r3, [r3, #0]
 802018a:	095b      	lsrs	r3, r3, #5
 802018c:	21d8      	movs	r1, #216	@ 0xd8
 802018e:	187a      	adds	r2, r7, r1
 8020190:	6013      	str	r3, [r2, #0]
 8020192:	1d7b      	adds	r3, r7, #5
 8020194:	33ff      	adds	r3, #255	@ 0xff
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	221f      	movs	r2, #31
 802019a:	4013      	ands	r3, r2
 802019c:	d104      	bne.n	80201a8 <USB_EPStartXfer+0x1120>
 802019e:	187b      	adds	r3, r7, r1
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	3b01      	subs	r3, #1
 80201a4:	187a      	adds	r2, r7, r1
 80201a6:	6013      	str	r3, [r2, #0]
 80201a8:	21b8      	movs	r1, #184	@ 0xb8
 80201aa:	187b      	adds	r3, r7, r1
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	881b      	ldrh	r3, [r3, #0]
 80201b0:	b29a      	uxth	r2, r3
 80201b2:	23d8      	movs	r3, #216	@ 0xd8
 80201b4:	18fb      	adds	r3, r7, r3
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	b29b      	uxth	r3, r3
 80201ba:	029b      	lsls	r3, r3, #10
 80201bc:	b29b      	uxth	r3, r3
 80201be:	4313      	orrs	r3, r2
 80201c0:	b29b      	uxth	r3, r3
 80201c2:	4a21      	ldr	r2, [pc, #132]	@ (8020248 <USB_EPStartXfer+0x11c0>)
 80201c4:	4313      	orrs	r3, r2
 80201c6:	b29a      	uxth	r2, r3
 80201c8:	187b      	adds	r3, r7, r1
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	801a      	strh	r2, [r3, #0]
 80201ce:	e062      	b.n	8020296 <USB_EPStartXfer+0x120e>
 80201d0:	1d7b      	adds	r3, r7, #5
 80201d2:	33ff      	adds	r3, #255	@ 0xff
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	d10b      	bne.n	80201f2 <USB_EPStartXfer+0x116a>
 80201da:	21b8      	movs	r1, #184	@ 0xb8
 80201dc:	187b      	adds	r3, r7, r1
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	881b      	ldrh	r3, [r3, #0]
 80201e2:	b29b      	uxth	r3, r3
 80201e4:	4a18      	ldr	r2, [pc, #96]	@ (8020248 <USB_EPStartXfer+0x11c0>)
 80201e6:	4313      	orrs	r3, r2
 80201e8:	b29a      	uxth	r2, r3
 80201ea:	187b      	adds	r3, r7, r1
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	801a      	strh	r2, [r3, #0]
 80201f0:	e051      	b.n	8020296 <USB_EPStartXfer+0x120e>
 80201f2:	1d7b      	adds	r3, r7, #5
 80201f4:	33ff      	adds	r3, #255	@ 0xff
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	085b      	lsrs	r3, r3, #1
 80201fa:	21d8      	movs	r1, #216	@ 0xd8
 80201fc:	187a      	adds	r2, r7, r1
 80201fe:	6013      	str	r3, [r2, #0]
 8020200:	1d7b      	adds	r3, r7, #5
 8020202:	33ff      	adds	r3, #255	@ 0xff
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	2201      	movs	r2, #1
 8020208:	4013      	ands	r3, r2
 802020a:	d004      	beq.n	8020216 <USB_EPStartXfer+0x118e>
 802020c:	187b      	adds	r3, r7, r1
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	3301      	adds	r3, #1
 8020212:	187a      	adds	r2, r7, r1
 8020214:	6013      	str	r3, [r2, #0]
 8020216:	21b8      	movs	r1, #184	@ 0xb8
 8020218:	187b      	adds	r3, r7, r1
 802021a:	681b      	ldr	r3, [r3, #0]
 802021c:	881b      	ldrh	r3, [r3, #0]
 802021e:	b29a      	uxth	r2, r3
 8020220:	23d8      	movs	r3, #216	@ 0xd8
 8020222:	18fb      	adds	r3, r7, r3
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	b29b      	uxth	r3, r3
 8020228:	029b      	lsls	r3, r3, #10
 802022a:	b29b      	uxth	r3, r3
 802022c:	4313      	orrs	r3, r2
 802022e:	b29a      	uxth	r2, r3
 8020230:	187b      	adds	r3, r7, r1
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	801a      	strh	r2, [r3, #0]
 8020236:	e02e      	b.n	8020296 <USB_EPStartXfer+0x120e>
 8020238:	00000406 	.word	0x00000406
 802023c:	ffff8f8f 	.word	0xffff8f8f
 8020240:	ffff80c0 	.word	0xffff80c0
 8020244:	00000402 	.word	0x00000402
 8020248:	ffff8000 	.word	0xffff8000
 802024c:	683b      	ldr	r3, [r7, #0]
 802024e:	785b      	ldrb	r3, [r3, #1]
 8020250:	2b01      	cmp	r3, #1
 8020252:	d120      	bne.n	8020296 <USB_EPStartXfer+0x120e>
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	2250      	movs	r2, #80	@ 0x50
 8020258:	5a9b      	ldrh	r3, [r3, r2]
 802025a:	b29b      	uxth	r3, r3
 802025c:	001a      	movs	r2, r3
 802025e:	21c4      	movs	r1, #196	@ 0xc4
 8020260:	187b      	adds	r3, r7, r1
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	189b      	adds	r3, r3, r2
 8020266:	187a      	adds	r2, r7, r1
 8020268:	6013      	str	r3, [r2, #0]
 802026a:	683b      	ldr	r3, [r7, #0]
 802026c:	781b      	ldrb	r3, [r3, #0]
 802026e:	00da      	lsls	r2, r3, #3
 8020270:	187b      	adds	r3, r7, r1
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	18d3      	adds	r3, r2, r3
 8020276:	4a1d      	ldr	r2, [pc, #116]	@ (80202ec <USB_EPStartXfer+0x1264>)
 8020278:	4694      	mov	ip, r2
 802027a:	4463      	add	r3, ip
 802027c:	21c0      	movs	r1, #192	@ 0xc0
 802027e:	187a      	adds	r2, r7, r1
 8020280:	6013      	str	r3, [r2, #0]
 8020282:	1d7b      	adds	r3, r7, #5
 8020284:	33ff      	adds	r3, #255	@ 0xff
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	b29a      	uxth	r2, r3
 802028a:	187b      	adds	r3, r7, r1
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	801a      	strh	r2, [r3, #0]
 8020290:	e001      	b.n	8020296 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8020292:	2301      	movs	r3, #1
 8020294:	e025      	b.n	80202e2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020296:	687a      	ldr	r2, [r7, #4]
 8020298:	683b      	ldr	r3, [r7, #0]
 802029a:	781b      	ldrb	r3, [r3, #0]
 802029c:	009b      	lsls	r3, r3, #2
 802029e:	18d3      	adds	r3, r2, r3
 80202a0:	881b      	ldrh	r3, [r3, #0]
 80202a2:	b29a      	uxth	r2, r3
 80202a4:	208a      	movs	r0, #138	@ 0x8a
 80202a6:	183b      	adds	r3, r7, r0
 80202a8:	4911      	ldr	r1, [pc, #68]	@ (80202f0 <USB_EPStartXfer+0x1268>)
 80202aa:	400a      	ands	r2, r1
 80202ac:	801a      	strh	r2, [r3, #0]
 80202ae:	183b      	adds	r3, r7, r0
 80202b0:	183a      	adds	r2, r7, r0
 80202b2:	8812      	ldrh	r2, [r2, #0]
 80202b4:	2180      	movs	r1, #128	@ 0x80
 80202b6:	0149      	lsls	r1, r1, #5
 80202b8:	404a      	eors	r2, r1
 80202ba:	801a      	strh	r2, [r3, #0]
 80202bc:	183b      	adds	r3, r7, r0
 80202be:	183a      	adds	r2, r7, r0
 80202c0:	8812      	ldrh	r2, [r2, #0]
 80202c2:	2180      	movs	r1, #128	@ 0x80
 80202c4:	0189      	lsls	r1, r1, #6
 80202c6:	404a      	eors	r2, r1
 80202c8:	801a      	strh	r2, [r3, #0]
 80202ca:	687a      	ldr	r2, [r7, #4]
 80202cc:	683b      	ldr	r3, [r7, #0]
 80202ce:	781b      	ldrb	r3, [r3, #0]
 80202d0:	009b      	lsls	r3, r3, #2
 80202d2:	18d3      	adds	r3, r2, r3
 80202d4:	183a      	adds	r2, r7, r0
 80202d6:	8812      	ldrh	r2, [r2, #0]
 80202d8:	4906      	ldr	r1, [pc, #24]	@ (80202f4 <USB_EPStartXfer+0x126c>)
 80202da:	430a      	orrs	r2, r1
 80202dc:	b292      	uxth	r2, r2
 80202de:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80202e0:	2300      	movs	r3, #0
}
 80202e2:	0018      	movs	r0, r3
 80202e4:	46bd      	mov	sp, r7
 80202e6:	b043      	add	sp, #268	@ 0x10c
 80202e8:	bd90      	pop	{r4, r7, pc}
 80202ea:	46c0      	nop			@ (mov r8, r8)
 80202ec:	00000406 	.word	0x00000406
 80202f0:	ffffbf8f 	.word	0xffffbf8f
 80202f4:	ffff8080 	.word	0xffff8080

080202f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80202f8:	b580      	push	{r7, lr}
 80202fa:	b084      	sub	sp, #16
 80202fc:	af00      	add	r7, sp, #0
 80202fe:	6078      	str	r0, [r7, #4]
 8020300:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8020302:	683b      	ldr	r3, [r7, #0]
 8020304:	785b      	ldrb	r3, [r3, #1]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d01d      	beq.n	8020346 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802030a:	687a      	ldr	r2, [r7, #4]
 802030c:	683b      	ldr	r3, [r7, #0]
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	009b      	lsls	r3, r3, #2
 8020312:	18d3      	adds	r3, r2, r3
 8020314:	881b      	ldrh	r3, [r3, #0]
 8020316:	b29a      	uxth	r2, r3
 8020318:	200c      	movs	r0, #12
 802031a:	183b      	adds	r3, r7, r0
 802031c:	491b      	ldr	r1, [pc, #108]	@ (802038c <USB_EPSetStall+0x94>)
 802031e:	400a      	ands	r2, r1
 8020320:	801a      	strh	r2, [r3, #0]
 8020322:	183b      	adds	r3, r7, r0
 8020324:	183a      	adds	r2, r7, r0
 8020326:	8812      	ldrh	r2, [r2, #0]
 8020328:	2110      	movs	r1, #16
 802032a:	404a      	eors	r2, r1
 802032c:	801a      	strh	r2, [r3, #0]
 802032e:	687a      	ldr	r2, [r7, #4]
 8020330:	683b      	ldr	r3, [r7, #0]
 8020332:	781b      	ldrb	r3, [r3, #0]
 8020334:	009b      	lsls	r3, r3, #2
 8020336:	18d3      	adds	r3, r2, r3
 8020338:	183a      	adds	r2, r7, r0
 802033a:	8812      	ldrh	r2, [r2, #0]
 802033c:	4914      	ldr	r1, [pc, #80]	@ (8020390 <USB_EPSetStall+0x98>)
 802033e:	430a      	orrs	r2, r1
 8020340:	b292      	uxth	r2, r2
 8020342:	801a      	strh	r2, [r3, #0]
 8020344:	e01d      	b.n	8020382 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8020346:	687a      	ldr	r2, [r7, #4]
 8020348:	683b      	ldr	r3, [r7, #0]
 802034a:	781b      	ldrb	r3, [r3, #0]
 802034c:	009b      	lsls	r3, r3, #2
 802034e:	18d3      	adds	r3, r2, r3
 8020350:	881b      	ldrh	r3, [r3, #0]
 8020352:	b29a      	uxth	r2, r3
 8020354:	200e      	movs	r0, #14
 8020356:	183b      	adds	r3, r7, r0
 8020358:	490e      	ldr	r1, [pc, #56]	@ (8020394 <USB_EPSetStall+0x9c>)
 802035a:	400a      	ands	r2, r1
 802035c:	801a      	strh	r2, [r3, #0]
 802035e:	183b      	adds	r3, r7, r0
 8020360:	183a      	adds	r2, r7, r0
 8020362:	8812      	ldrh	r2, [r2, #0]
 8020364:	2180      	movs	r1, #128	@ 0x80
 8020366:	0149      	lsls	r1, r1, #5
 8020368:	404a      	eors	r2, r1
 802036a:	801a      	strh	r2, [r3, #0]
 802036c:	687a      	ldr	r2, [r7, #4]
 802036e:	683b      	ldr	r3, [r7, #0]
 8020370:	781b      	ldrb	r3, [r3, #0]
 8020372:	009b      	lsls	r3, r3, #2
 8020374:	18d3      	adds	r3, r2, r3
 8020376:	183a      	adds	r2, r7, r0
 8020378:	8812      	ldrh	r2, [r2, #0]
 802037a:	4905      	ldr	r1, [pc, #20]	@ (8020390 <USB_EPSetStall+0x98>)
 802037c:	430a      	orrs	r2, r1
 802037e:	b292      	uxth	r2, r2
 8020380:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020382:	2300      	movs	r3, #0
}
 8020384:	0018      	movs	r0, r3
 8020386:	46bd      	mov	sp, r7
 8020388:	b004      	add	sp, #16
 802038a:	bd80      	pop	{r7, pc}
 802038c:	ffff8fbf 	.word	0xffff8fbf
 8020390:	ffff8080 	.word	0xffff8080
 8020394:	ffffbf8f 	.word	0xffffbf8f

08020398 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020398:	b580      	push	{r7, lr}
 802039a:	b086      	sub	sp, #24
 802039c:	af00      	add	r7, sp, #0
 802039e:	6078      	str	r0, [r7, #4]
 80203a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80203a2:	683b      	ldr	r3, [r7, #0]
 80203a4:	7b1b      	ldrb	r3, [r3, #12]
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d000      	beq.n	80203ac <USB_EPClearStall+0x14>
 80203aa:	e095      	b.n	80204d8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80203ac:	683b      	ldr	r3, [r7, #0]
 80203ae:	785b      	ldrb	r3, [r3, #1]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d046      	beq.n	8020442 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80203b4:	687a      	ldr	r2, [r7, #4]
 80203b6:	683b      	ldr	r3, [r7, #0]
 80203b8:	781b      	ldrb	r3, [r3, #0]
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	18d2      	adds	r2, r2, r3
 80203be:	2110      	movs	r1, #16
 80203c0:	187b      	adds	r3, r7, r1
 80203c2:	8812      	ldrh	r2, [r2, #0]
 80203c4:	801a      	strh	r2, [r3, #0]
 80203c6:	187b      	adds	r3, r7, r1
 80203c8:	881b      	ldrh	r3, [r3, #0]
 80203ca:	2240      	movs	r2, #64	@ 0x40
 80203cc:	4013      	ands	r3, r2
 80203ce:	d016      	beq.n	80203fe <USB_EPClearStall+0x66>
 80203d0:	687a      	ldr	r2, [r7, #4]
 80203d2:	683b      	ldr	r3, [r7, #0]
 80203d4:	781b      	ldrb	r3, [r3, #0]
 80203d6:	009b      	lsls	r3, r3, #2
 80203d8:	18d3      	adds	r3, r2, r3
 80203da:	881b      	ldrh	r3, [r3, #0]
 80203dc:	b29a      	uxth	r2, r3
 80203de:	200e      	movs	r0, #14
 80203e0:	183b      	adds	r3, r7, r0
 80203e2:	4940      	ldr	r1, [pc, #256]	@ (80204e4 <USB_EPClearStall+0x14c>)
 80203e4:	400a      	ands	r2, r1
 80203e6:	801a      	strh	r2, [r3, #0]
 80203e8:	687a      	ldr	r2, [r7, #4]
 80203ea:	683b      	ldr	r3, [r7, #0]
 80203ec:	781b      	ldrb	r3, [r3, #0]
 80203ee:	009b      	lsls	r3, r3, #2
 80203f0:	18d3      	adds	r3, r2, r3
 80203f2:	183a      	adds	r2, r7, r0
 80203f4:	8812      	ldrh	r2, [r2, #0]
 80203f6:	493c      	ldr	r1, [pc, #240]	@ (80204e8 <USB_EPClearStall+0x150>)
 80203f8:	430a      	orrs	r2, r1
 80203fa:	b292      	uxth	r2, r2
 80203fc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	78db      	ldrb	r3, [r3, #3]
 8020402:	2b01      	cmp	r3, #1
 8020404:	d068      	beq.n	80204d8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8020406:	687a      	ldr	r2, [r7, #4]
 8020408:	683b      	ldr	r3, [r7, #0]
 802040a:	781b      	ldrb	r3, [r3, #0]
 802040c:	009b      	lsls	r3, r3, #2
 802040e:	18d3      	adds	r3, r2, r3
 8020410:	881b      	ldrh	r3, [r3, #0]
 8020412:	b29a      	uxth	r2, r3
 8020414:	200c      	movs	r0, #12
 8020416:	183b      	adds	r3, r7, r0
 8020418:	4934      	ldr	r1, [pc, #208]	@ (80204ec <USB_EPClearStall+0x154>)
 802041a:	400a      	ands	r2, r1
 802041c:	801a      	strh	r2, [r3, #0]
 802041e:	183b      	adds	r3, r7, r0
 8020420:	183a      	adds	r2, r7, r0
 8020422:	8812      	ldrh	r2, [r2, #0]
 8020424:	2120      	movs	r1, #32
 8020426:	404a      	eors	r2, r1
 8020428:	801a      	strh	r2, [r3, #0]
 802042a:	687a      	ldr	r2, [r7, #4]
 802042c:	683b      	ldr	r3, [r7, #0]
 802042e:	781b      	ldrb	r3, [r3, #0]
 8020430:	009b      	lsls	r3, r3, #2
 8020432:	18d3      	adds	r3, r2, r3
 8020434:	183a      	adds	r2, r7, r0
 8020436:	8812      	ldrh	r2, [r2, #0]
 8020438:	492d      	ldr	r1, [pc, #180]	@ (80204f0 <USB_EPClearStall+0x158>)
 802043a:	430a      	orrs	r2, r1
 802043c:	b292      	uxth	r2, r2
 802043e:	801a      	strh	r2, [r3, #0]
 8020440:	e04a      	b.n	80204d8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8020442:	687a      	ldr	r2, [r7, #4]
 8020444:	683b      	ldr	r3, [r7, #0]
 8020446:	781b      	ldrb	r3, [r3, #0]
 8020448:	009b      	lsls	r3, r3, #2
 802044a:	18d2      	adds	r2, r2, r3
 802044c:	2116      	movs	r1, #22
 802044e:	187b      	adds	r3, r7, r1
 8020450:	8812      	ldrh	r2, [r2, #0]
 8020452:	801a      	strh	r2, [r3, #0]
 8020454:	187b      	adds	r3, r7, r1
 8020456:	881a      	ldrh	r2, [r3, #0]
 8020458:	2380      	movs	r3, #128	@ 0x80
 802045a:	01db      	lsls	r3, r3, #7
 802045c:	4013      	ands	r3, r2
 802045e:	d016      	beq.n	802048e <USB_EPClearStall+0xf6>
 8020460:	687a      	ldr	r2, [r7, #4]
 8020462:	683b      	ldr	r3, [r7, #0]
 8020464:	781b      	ldrb	r3, [r3, #0]
 8020466:	009b      	lsls	r3, r3, #2
 8020468:	18d3      	adds	r3, r2, r3
 802046a:	881b      	ldrh	r3, [r3, #0]
 802046c:	b29a      	uxth	r2, r3
 802046e:	2014      	movs	r0, #20
 8020470:	183b      	adds	r3, r7, r0
 8020472:	491c      	ldr	r1, [pc, #112]	@ (80204e4 <USB_EPClearStall+0x14c>)
 8020474:	400a      	ands	r2, r1
 8020476:	801a      	strh	r2, [r3, #0]
 8020478:	687a      	ldr	r2, [r7, #4]
 802047a:	683b      	ldr	r3, [r7, #0]
 802047c:	781b      	ldrb	r3, [r3, #0]
 802047e:	009b      	lsls	r3, r3, #2
 8020480:	18d3      	adds	r3, r2, r3
 8020482:	183a      	adds	r2, r7, r0
 8020484:	8812      	ldrh	r2, [r2, #0]
 8020486:	491b      	ldr	r1, [pc, #108]	@ (80204f4 <USB_EPClearStall+0x15c>)
 8020488:	430a      	orrs	r2, r1
 802048a:	b292      	uxth	r2, r2
 802048c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802048e:	687a      	ldr	r2, [r7, #4]
 8020490:	683b      	ldr	r3, [r7, #0]
 8020492:	781b      	ldrb	r3, [r3, #0]
 8020494:	009b      	lsls	r3, r3, #2
 8020496:	18d3      	adds	r3, r2, r3
 8020498:	881b      	ldrh	r3, [r3, #0]
 802049a:	b29a      	uxth	r2, r3
 802049c:	2012      	movs	r0, #18
 802049e:	183b      	adds	r3, r7, r0
 80204a0:	4915      	ldr	r1, [pc, #84]	@ (80204f8 <USB_EPClearStall+0x160>)
 80204a2:	400a      	ands	r2, r1
 80204a4:	801a      	strh	r2, [r3, #0]
 80204a6:	183b      	adds	r3, r7, r0
 80204a8:	183a      	adds	r2, r7, r0
 80204aa:	8812      	ldrh	r2, [r2, #0]
 80204ac:	2180      	movs	r1, #128	@ 0x80
 80204ae:	0149      	lsls	r1, r1, #5
 80204b0:	404a      	eors	r2, r1
 80204b2:	801a      	strh	r2, [r3, #0]
 80204b4:	183b      	adds	r3, r7, r0
 80204b6:	183a      	adds	r2, r7, r0
 80204b8:	8812      	ldrh	r2, [r2, #0]
 80204ba:	2180      	movs	r1, #128	@ 0x80
 80204bc:	0189      	lsls	r1, r1, #6
 80204be:	404a      	eors	r2, r1
 80204c0:	801a      	strh	r2, [r3, #0]
 80204c2:	687a      	ldr	r2, [r7, #4]
 80204c4:	683b      	ldr	r3, [r7, #0]
 80204c6:	781b      	ldrb	r3, [r3, #0]
 80204c8:	009b      	lsls	r3, r3, #2
 80204ca:	18d3      	adds	r3, r2, r3
 80204cc:	183a      	adds	r2, r7, r0
 80204ce:	8812      	ldrh	r2, [r2, #0]
 80204d0:	4907      	ldr	r1, [pc, #28]	@ (80204f0 <USB_EPClearStall+0x158>)
 80204d2:	430a      	orrs	r2, r1
 80204d4:	b292      	uxth	r2, r2
 80204d6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80204d8:	2300      	movs	r3, #0
}
 80204da:	0018      	movs	r0, r3
 80204dc:	46bd      	mov	sp, r7
 80204de:	b006      	add	sp, #24
 80204e0:	bd80      	pop	{r7, pc}
 80204e2:	46c0      	nop			@ (mov r8, r8)
 80204e4:	ffff8f8f 	.word	0xffff8f8f
 80204e8:	ffff80c0 	.word	0xffff80c0
 80204ec:	ffff8fbf 	.word	0xffff8fbf
 80204f0:	ffff8080 	.word	0xffff8080
 80204f4:	ffffc080 	.word	0xffffc080
 80204f8:	ffffbf8f 	.word	0xffffbf8f

080204fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80204fc:	b580      	push	{r7, lr}
 80204fe:	b082      	sub	sp, #8
 8020500:	af00      	add	r7, sp, #0
 8020502:	6078      	str	r0, [r7, #4]
 8020504:	000a      	movs	r2, r1
 8020506:	1cfb      	adds	r3, r7, #3
 8020508:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802050a:	1cfb      	adds	r3, r7, #3
 802050c:	781b      	ldrb	r3, [r3, #0]
 802050e:	2b00      	cmp	r3, #0
 8020510:	d103      	bne.n	802051a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	224c      	movs	r2, #76	@ 0x4c
 8020516:	2180      	movs	r1, #128	@ 0x80
 8020518:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802051a:	2300      	movs	r3, #0
}
 802051c:	0018      	movs	r0, r3
 802051e:	46bd      	mov	sp, r7
 8020520:	b002      	add	sp, #8
 8020522:	bd80      	pop	{r7, pc}

08020524 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8020524:	b580      	push	{r7, lr}
 8020526:	b082      	sub	sp, #8
 8020528:	af00      	add	r7, sp, #0
 802052a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	2258      	movs	r2, #88	@ 0x58
 8020530:	5a9b      	ldrh	r3, [r3, r2]
 8020532:	b29b      	uxth	r3, r3
 8020534:	4a05      	ldr	r2, [pc, #20]	@ (802054c <USB_DevConnect+0x28>)
 8020536:	4313      	orrs	r3, r2
 8020538:	b299      	uxth	r1, r3
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	2258      	movs	r2, #88	@ 0x58
 802053e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8020540:	2300      	movs	r3, #0
}
 8020542:	0018      	movs	r0, r3
 8020544:	46bd      	mov	sp, r7
 8020546:	b002      	add	sp, #8
 8020548:	bd80      	pop	{r7, pc}
 802054a:	46c0      	nop			@ (mov r8, r8)
 802054c:	ffff8000 	.word	0xffff8000

08020550 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8020550:	b580      	push	{r7, lr}
 8020552:	b084      	sub	sp, #16
 8020554:	af00      	add	r7, sp, #0
 8020556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	2244      	movs	r2, #68	@ 0x44
 802055c:	5a9b      	ldrh	r3, [r3, r2]
 802055e:	b29b      	uxth	r3, r3
 8020560:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8020562:	68fb      	ldr	r3, [r7, #12]
}
 8020564:	0018      	movs	r0, r3
 8020566:	46bd      	mov	sp, r7
 8020568:	b004      	add	sp, #16
 802056a:	bd80      	pop	{r7, pc}

0802056c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802056c:	b580      	push	{r7, lr}
 802056e:	b08a      	sub	sp, #40	@ 0x28
 8020570:	af00      	add	r7, sp, #0
 8020572:	60f8      	str	r0, [r7, #12]
 8020574:	60b9      	str	r1, [r7, #8]
 8020576:	0019      	movs	r1, r3
 8020578:	1dbb      	adds	r3, r7, #6
 802057a:	801a      	strh	r2, [r3, #0]
 802057c:	1d3b      	adds	r3, r7, #4
 802057e:	1c0a      	adds	r2, r1, #0
 8020580:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8020582:	1d3b      	adds	r3, r7, #4
 8020584:	881b      	ldrh	r3, [r3, #0]
 8020586:	3301      	adds	r3, #1
 8020588:	085b      	lsrs	r3, r3, #1
 802058a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020590:	68bb      	ldr	r3, [r7, #8]
 8020592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020594:	1dbb      	adds	r3, r7, #6
 8020596:	881a      	ldrh	r2, [r3, #0]
 8020598:	697b      	ldr	r3, [r7, #20]
 802059a:	18d3      	adds	r3, r2, r3
 802059c:	2280      	movs	r2, #128	@ 0x80
 802059e:	00d2      	lsls	r2, r2, #3
 80205a0:	4694      	mov	ip, r2
 80205a2:	4463      	add	r3, ip
 80205a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80205a6:	69bb      	ldr	r3, [r7, #24]
 80205a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80205aa:	e021      	b.n	80205f0 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80205ac:	69fb      	ldr	r3, [r7, #28]
 80205ae:	781a      	ldrb	r2, [r3, #0]
 80205b0:	2112      	movs	r1, #18
 80205b2:	187b      	adds	r3, r7, r1
 80205b4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80205b6:	69fb      	ldr	r3, [r7, #28]
 80205b8:	3301      	adds	r3, #1
 80205ba:	781b      	ldrb	r3, [r3, #0]
 80205bc:	b21b      	sxth	r3, r3
 80205be:	021b      	lsls	r3, r3, #8
 80205c0:	b21a      	sxth	r2, r3
 80205c2:	187b      	adds	r3, r7, r1
 80205c4:	2000      	movs	r0, #0
 80205c6:	5e1b      	ldrsh	r3, [r3, r0]
 80205c8:	4313      	orrs	r3, r2
 80205ca:	b21a      	sxth	r2, r3
 80205cc:	187b      	adds	r3, r7, r1
 80205ce:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80205d0:	6a3b      	ldr	r3, [r7, #32]
 80205d2:	187a      	adds	r2, r7, r1
 80205d4:	8812      	ldrh	r2, [r2, #0]
 80205d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80205d8:	6a3b      	ldr	r3, [r7, #32]
 80205da:	3302      	adds	r3, #2
 80205dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80205de:	69fb      	ldr	r3, [r7, #28]
 80205e0:	3301      	adds	r3, #1
 80205e2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80205e4:	69fb      	ldr	r3, [r7, #28]
 80205e6:	3301      	adds	r3, #1
 80205e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80205ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205ec:	3b01      	subs	r3, #1
 80205ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80205f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d1da      	bne.n	80205ac <USB_WritePMA+0x40>
  }
}
 80205f6:	46c0      	nop			@ (mov r8, r8)
 80205f8:	46c0      	nop			@ (mov r8, r8)
 80205fa:	46bd      	mov	sp, r7
 80205fc:	b00a      	add	sp, #40	@ 0x28
 80205fe:	bd80      	pop	{r7, pc}

08020600 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020600:	b580      	push	{r7, lr}
 8020602:	b08a      	sub	sp, #40	@ 0x28
 8020604:	af00      	add	r7, sp, #0
 8020606:	60f8      	str	r0, [r7, #12]
 8020608:	60b9      	str	r1, [r7, #8]
 802060a:	0019      	movs	r1, r3
 802060c:	1dbb      	adds	r3, r7, #6
 802060e:	801a      	strh	r2, [r3, #0]
 8020610:	1d3b      	adds	r3, r7, #4
 8020612:	1c0a      	adds	r2, r1, #0
 8020614:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8020616:	1d3b      	adds	r3, r7, #4
 8020618:	881b      	ldrh	r3, [r3, #0]
 802061a:	085b      	lsrs	r3, r3, #1
 802061c:	b29b      	uxth	r3, r3
 802061e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020624:	68bb      	ldr	r3, [r7, #8]
 8020626:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020628:	1dbb      	adds	r3, r7, #6
 802062a:	881a      	ldrh	r2, [r3, #0]
 802062c:	697b      	ldr	r3, [r7, #20]
 802062e:	18d3      	adds	r3, r2, r3
 8020630:	2280      	movs	r2, #128	@ 0x80
 8020632:	00d2      	lsls	r2, r2, #3
 8020634:	4694      	mov	ip, r2
 8020636:	4463      	add	r3, ip
 8020638:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802063a:	69bb      	ldr	r3, [r7, #24]
 802063c:	627b      	str	r3, [r7, #36]	@ 0x24
 802063e:	e018      	b.n	8020672 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8020640:	6a3b      	ldr	r3, [r7, #32]
 8020642:	881b      	ldrh	r3, [r3, #0]
 8020644:	b29b      	uxth	r3, r3
 8020646:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8020648:	6a3b      	ldr	r3, [r7, #32]
 802064a:	3302      	adds	r3, #2
 802064c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802064e:	693b      	ldr	r3, [r7, #16]
 8020650:	b2da      	uxtb	r2, r3
 8020652:	69fb      	ldr	r3, [r7, #28]
 8020654:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8020656:	69fb      	ldr	r3, [r7, #28]
 8020658:	3301      	adds	r3, #1
 802065a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802065c:	693b      	ldr	r3, [r7, #16]
 802065e:	0a1b      	lsrs	r3, r3, #8
 8020660:	b2da      	uxtb	r2, r3
 8020662:	69fb      	ldr	r3, [r7, #28]
 8020664:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8020666:	69fb      	ldr	r3, [r7, #28]
 8020668:	3301      	adds	r3, #1
 802066a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802066e:	3b01      	subs	r3, #1
 8020670:	627b      	str	r3, [r7, #36]	@ 0x24
 8020672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020674:	2b00      	cmp	r3, #0
 8020676:	d1e3      	bne.n	8020640 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8020678:	1d3b      	adds	r3, r7, #4
 802067a:	881b      	ldrh	r3, [r3, #0]
 802067c:	2201      	movs	r2, #1
 802067e:	4013      	ands	r3, r2
 8020680:	b29b      	uxth	r3, r3
 8020682:	2b00      	cmp	r3, #0
 8020684:	d007      	beq.n	8020696 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8020686:	6a3b      	ldr	r3, [r7, #32]
 8020688:	881b      	ldrh	r3, [r3, #0]
 802068a:	b29b      	uxth	r3, r3
 802068c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802068e:	693b      	ldr	r3, [r7, #16]
 8020690:	b2da      	uxtb	r2, r3
 8020692:	69fb      	ldr	r3, [r7, #28]
 8020694:	701a      	strb	r2, [r3, #0]
  }
}
 8020696:	46c0      	nop			@ (mov r8, r8)
 8020698:	46bd      	mov	sp, r7
 802069a:	b00a      	add	sp, #40	@ 0x28
 802069c:	bd80      	pop	{r7, pc}

0802069e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802069e:	b580      	push	{r7, lr}
 80206a0:	b084      	sub	sp, #16
 80206a2:	af00      	add	r7, sp, #0
 80206a4:	6078      	str	r0, [r7, #4]
 80206a6:	000a      	movs	r2, r1
 80206a8:	1cfb      	adds	r3, r7, #3
 80206aa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80206ac:	230f      	movs	r3, #15
 80206ae:	18fb      	adds	r3, r7, r3
 80206b0:	2200      	movs	r2, #0
 80206b2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	7c1b      	ldrb	r3, [r3, #16]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d116      	bne.n	80206ea <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80206bc:	2380      	movs	r3, #128	@ 0x80
 80206be:	009b      	lsls	r3, r3, #2
 80206c0:	6878      	ldr	r0, [r7, #4]
 80206c2:	2202      	movs	r2, #2
 80206c4:	2181      	movs	r1, #129	@ 0x81
 80206c6:	f002 f8ec 	bl	80228a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	2201      	movs	r2, #1
 80206ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80206d0:	2380      	movs	r3, #128	@ 0x80
 80206d2:	009b      	lsls	r3, r3, #2
 80206d4:	6878      	ldr	r0, [r7, #4]
 80206d6:	2202      	movs	r2, #2
 80206d8:	2101      	movs	r1, #1
 80206da:	f002 f8e2 	bl	80228a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80206de:	687a      	ldr	r2, [r7, #4]
 80206e0:	23b6      	movs	r3, #182	@ 0xb6
 80206e2:	005b      	lsls	r3, r3, #1
 80206e4:	2101      	movs	r1, #1
 80206e6:	50d1      	str	r1, [r2, r3]
 80206e8:	e013      	b.n	8020712 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80206ea:	6878      	ldr	r0, [r7, #4]
 80206ec:	2340      	movs	r3, #64	@ 0x40
 80206ee:	2202      	movs	r2, #2
 80206f0:	2181      	movs	r1, #129	@ 0x81
 80206f2:	f002 f8d6 	bl	80228a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	2201      	movs	r2, #1
 80206fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80206fc:	6878      	ldr	r0, [r7, #4]
 80206fe:	2340      	movs	r3, #64	@ 0x40
 8020700:	2202      	movs	r2, #2
 8020702:	2101      	movs	r1, #1
 8020704:	f002 f8cd 	bl	80228a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020708:	687a      	ldr	r2, [r7, #4]
 802070a:	23b6      	movs	r3, #182	@ 0xb6
 802070c:	005b      	lsls	r3, r3, #1
 802070e:	2101      	movs	r1, #1
 8020710:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020712:	6878      	ldr	r0, [r7, #4]
 8020714:	2308      	movs	r3, #8
 8020716:	2203      	movs	r2, #3
 8020718:	2182      	movs	r1, #130	@ 0x82
 802071a:	f002 f8c2 	bl	80228a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	2201      	movs	r2, #1
 8020722:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8020724:	2387      	movs	r3, #135	@ 0x87
 8020726:	009b      	lsls	r3, r3, #2
 8020728:	0018      	movs	r0, r3
 802072a:	f002 fa53 	bl	8022bd4 <USBD_static_malloc>
 802072e:	0001      	movs	r1, r0
 8020730:	687a      	ldr	r2, [r7, #4]
 8020732:	23ae      	movs	r3, #174	@ 0xae
 8020734:	009b      	lsls	r3, r3, #2
 8020736:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8020738:	687a      	ldr	r2, [r7, #4]
 802073a:	23ae      	movs	r3, #174	@ 0xae
 802073c:	009b      	lsls	r3, r3, #2
 802073e:	58d3      	ldr	r3, [r2, r3]
 8020740:	2b00      	cmp	r3, #0
 8020742:	d104      	bne.n	802074e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8020744:	230f      	movs	r3, #15
 8020746:	18fb      	adds	r3, r7, r3
 8020748:	2201      	movs	r2, #1
 802074a:	701a      	strb	r2, [r3, #0]
 802074c:	e02c      	b.n	80207a8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802074e:	687a      	ldr	r2, [r7, #4]
 8020750:	23ae      	movs	r3, #174	@ 0xae
 8020752:	009b      	lsls	r3, r3, #2
 8020754:	58d3      	ldr	r3, [r2, r3]
 8020756:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020758:	687a      	ldr	r2, [r7, #4]
 802075a:	23af      	movs	r3, #175	@ 0xaf
 802075c:	009b      	lsls	r3, r3, #2
 802075e:	58d3      	ldr	r3, [r2, r3]
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8020764:	68ba      	ldr	r2, [r7, #8]
 8020766:	2385      	movs	r3, #133	@ 0x85
 8020768:	009b      	lsls	r3, r3, #2
 802076a:	2100      	movs	r1, #0
 802076c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802076e:	68ba      	ldr	r2, [r7, #8]
 8020770:	2386      	movs	r3, #134	@ 0x86
 8020772:	009b      	lsls	r3, r3, #2
 8020774:	2100      	movs	r1, #0
 8020776:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	7c1b      	ldrb	r3, [r3, #16]
 802077c:	2b00      	cmp	r3, #0
 802077e:	d10a      	bne.n	8020796 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020780:	68ba      	ldr	r2, [r7, #8]
 8020782:	2381      	movs	r3, #129	@ 0x81
 8020784:	009b      	lsls	r3, r3, #2
 8020786:	58d2      	ldr	r2, [r2, r3]
 8020788:	2380      	movs	r3, #128	@ 0x80
 802078a:	009b      	lsls	r3, r3, #2
 802078c:	6878      	ldr	r0, [r7, #4]
 802078e:	2101      	movs	r1, #1
 8020790:	f002 f9d2 	bl	8022b38 <USBD_LL_PrepareReceive>
 8020794:	e008      	b.n	80207a8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020796:	68ba      	ldr	r2, [r7, #8]
 8020798:	2381      	movs	r3, #129	@ 0x81
 802079a:	009b      	lsls	r3, r3, #2
 802079c:	58d2      	ldr	r2, [r2, r3]
 802079e:	6878      	ldr	r0, [r7, #4]
 80207a0:	2340      	movs	r3, #64	@ 0x40
 80207a2:	2101      	movs	r1, #1
 80207a4:	f002 f9c8 	bl	8022b38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80207a8:	230f      	movs	r3, #15
 80207aa:	18fb      	adds	r3, r7, r3
 80207ac:	781b      	ldrb	r3, [r3, #0]
}
 80207ae:	0018      	movs	r0, r3
 80207b0:	46bd      	mov	sp, r7
 80207b2:	b004      	add	sp, #16
 80207b4:	bd80      	pop	{r7, pc}

080207b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80207b6:	b580      	push	{r7, lr}
 80207b8:	b084      	sub	sp, #16
 80207ba:	af00      	add	r7, sp, #0
 80207bc:	6078      	str	r0, [r7, #4]
 80207be:	000a      	movs	r2, r1
 80207c0:	1cfb      	adds	r3, r7, #3
 80207c2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80207c4:	230f      	movs	r3, #15
 80207c6:	18fb      	adds	r3, r7, r3
 80207c8:	2200      	movs	r2, #0
 80207ca:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	2181      	movs	r1, #129	@ 0x81
 80207d0:	0018      	movs	r0, r3
 80207d2:	f002 f89d 	bl	8022910 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	2200      	movs	r2, #0
 80207da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	2101      	movs	r1, #1
 80207e0:	0018      	movs	r0, r3
 80207e2:	f002 f895 	bl	8022910 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80207e6:	687a      	ldr	r2, [r7, #4]
 80207e8:	23b6      	movs	r3, #182	@ 0xb6
 80207ea:	005b      	lsls	r3, r3, #1
 80207ec:	2100      	movs	r1, #0
 80207ee:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2182      	movs	r1, #130	@ 0x82
 80207f4:	0018      	movs	r0, r3
 80207f6:	f002 f88b 	bl	8022910 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	2200      	movs	r2, #0
 80207fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8020800:	687a      	ldr	r2, [r7, #4]
 8020802:	23ae      	movs	r3, #174	@ 0xae
 8020804:	009b      	lsls	r3, r3, #2
 8020806:	58d3      	ldr	r3, [r2, r3]
 8020808:	2b00      	cmp	r3, #0
 802080a:	d011      	beq.n	8020830 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 802080c:	687a      	ldr	r2, [r7, #4]
 802080e:	23af      	movs	r3, #175	@ 0xaf
 8020810:	009b      	lsls	r3, r3, #2
 8020812:	58d3      	ldr	r3, [r2, r3]
 8020814:	685b      	ldr	r3, [r3, #4]
 8020816:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8020818:	687a      	ldr	r2, [r7, #4]
 802081a:	23ae      	movs	r3, #174	@ 0xae
 802081c:	009b      	lsls	r3, r3, #2
 802081e:	58d3      	ldr	r3, [r2, r3]
 8020820:	0018      	movs	r0, r3
 8020822:	f002 f9e3 	bl	8022bec <USBD_static_free>
    pdev->pClassData = NULL;
 8020826:	687a      	ldr	r2, [r7, #4]
 8020828:	23ae      	movs	r3, #174	@ 0xae
 802082a:	009b      	lsls	r3, r3, #2
 802082c:	2100      	movs	r1, #0
 802082e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8020830:	230f      	movs	r3, #15
 8020832:	18fb      	adds	r3, r7, r3
 8020834:	781b      	ldrb	r3, [r3, #0]
}
 8020836:	0018      	movs	r0, r3
 8020838:	46bd      	mov	sp, r7
 802083a:	b004      	add	sp, #16
 802083c:	bd80      	pop	{r7, pc}
	...

08020840 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020840:	b580      	push	{r7, lr}
 8020842:	b086      	sub	sp, #24
 8020844:	af00      	add	r7, sp, #0
 8020846:	6078      	str	r0, [r7, #4]
 8020848:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802084a:	687a      	ldr	r2, [r7, #4]
 802084c:	23ae      	movs	r3, #174	@ 0xae
 802084e:	009b      	lsls	r3, r3, #2
 8020850:	58d3      	ldr	r3, [r2, r3]
 8020852:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8020854:	230f      	movs	r3, #15
 8020856:	18fb      	adds	r3, r7, r3
 8020858:	2200      	movs	r2, #0
 802085a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802085c:	230c      	movs	r3, #12
 802085e:	18fb      	adds	r3, r7, r3
 8020860:	2200      	movs	r2, #0
 8020862:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8020864:	2317      	movs	r3, #23
 8020866:	18fb      	adds	r3, r7, r3
 8020868:	2200      	movs	r2, #0
 802086a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802086c:	683b      	ldr	r3, [r7, #0]
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	001a      	movs	r2, r3
 8020872:	2360      	movs	r3, #96	@ 0x60
 8020874:	4013      	ands	r3, r2
 8020876:	d03d      	beq.n	80208f4 <USBD_CDC_Setup+0xb4>
 8020878:	2b20      	cmp	r3, #32
 802087a:	d000      	beq.n	802087e <USBD_CDC_Setup+0x3e>
 802087c:	e094      	b.n	80209a8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 802087e:	683b      	ldr	r3, [r7, #0]
 8020880:	88db      	ldrh	r3, [r3, #6]
 8020882:	2b00      	cmp	r3, #0
 8020884:	d02b      	beq.n	80208de <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8020886:	683b      	ldr	r3, [r7, #0]
 8020888:	781b      	ldrb	r3, [r3, #0]
 802088a:	b25b      	sxtb	r3, r3
 802088c:	2b00      	cmp	r3, #0
 802088e:	da12      	bge.n	80208b6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020890:	687a      	ldr	r2, [r7, #4]
 8020892:	23af      	movs	r3, #175	@ 0xaf
 8020894:	009b      	lsls	r3, r3, #2
 8020896:	58d3      	ldr	r3, [r2, r3]
 8020898:	689b      	ldr	r3, [r3, #8]
 802089a:	683a      	ldr	r2, [r7, #0]
 802089c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 802089e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80208a0:	683a      	ldr	r2, [r7, #0]
 80208a2:	88d2      	ldrh	r2, [r2, #6]
 80208a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80208a6:	6939      	ldr	r1, [r7, #16]
 80208a8:	683b      	ldr	r3, [r7, #0]
 80208aa:	88da      	ldrh	r2, [r3, #6]
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	0018      	movs	r0, r3
 80208b0:	f001 fbaf 	bl	8022012 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80208b4:	e083      	b.n	80209be <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80208b6:	683b      	ldr	r3, [r7, #0]
 80208b8:	7859      	ldrb	r1, [r3, #1]
 80208ba:	693a      	ldr	r2, [r7, #16]
 80208bc:	2380      	movs	r3, #128	@ 0x80
 80208be:	009b      	lsls	r3, r3, #2
 80208c0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80208c2:	683b      	ldr	r3, [r7, #0]
 80208c4:	88db      	ldrh	r3, [r3, #6]
 80208c6:	b2d9      	uxtb	r1, r3
 80208c8:	693b      	ldr	r3, [r7, #16]
 80208ca:	4a40      	ldr	r2, [pc, #256]	@ (80209cc <USBD_CDC_Setup+0x18c>)
 80208cc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80208ce:	6939      	ldr	r1, [r7, #16]
 80208d0:	683b      	ldr	r3, [r7, #0]
 80208d2:	88da      	ldrh	r2, [r3, #6]
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	0018      	movs	r0, r3
 80208d8:	f001 fbce 	bl	8022078 <USBD_CtlPrepareRx>
      break;
 80208dc:	e06f      	b.n	80209be <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80208de:	687a      	ldr	r2, [r7, #4]
 80208e0:	23af      	movs	r3, #175	@ 0xaf
 80208e2:	009b      	lsls	r3, r3, #2
 80208e4:	58d3      	ldr	r3, [r2, r3]
 80208e6:	689b      	ldr	r3, [r3, #8]
 80208e8:	683a      	ldr	r2, [r7, #0]
 80208ea:	7850      	ldrb	r0, [r2, #1]
 80208ec:	6839      	ldr	r1, [r7, #0]
 80208ee:	2200      	movs	r2, #0
 80208f0:	4798      	blx	r3
      break;
 80208f2:	e064      	b.n	80209be <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80208f4:	683b      	ldr	r3, [r7, #0]
 80208f6:	785b      	ldrb	r3, [r3, #1]
 80208f8:	2b0b      	cmp	r3, #11
 80208fa:	d037      	beq.n	802096c <USBD_CDC_Setup+0x12c>
 80208fc:	dc47      	bgt.n	802098e <USBD_CDC_Setup+0x14e>
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d002      	beq.n	8020908 <USBD_CDC_Setup+0xc8>
 8020902:	2b0a      	cmp	r3, #10
 8020904:	d019      	beq.n	802093a <USBD_CDC_Setup+0xfa>
 8020906:	e042      	b.n	802098e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020908:	687a      	ldr	r2, [r7, #4]
 802090a:	23a7      	movs	r3, #167	@ 0xa7
 802090c:	009b      	lsls	r3, r3, #2
 802090e:	5cd3      	ldrb	r3, [r2, r3]
 8020910:	2b03      	cmp	r3, #3
 8020912:	d107      	bne.n	8020924 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8020914:	230c      	movs	r3, #12
 8020916:	18f9      	adds	r1, r7, r3
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	2202      	movs	r2, #2
 802091c:	0018      	movs	r0, r3
 802091e:	f001 fb78 	bl	8022012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020922:	e040      	b.n	80209a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020924:	683a      	ldr	r2, [r7, #0]
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	0011      	movs	r1, r2
 802092a:	0018      	movs	r0, r3
 802092c:	f001 faf3 	bl	8021f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8020930:	2317      	movs	r3, #23
 8020932:	18fb      	adds	r3, r7, r3
 8020934:	2202      	movs	r2, #2
 8020936:	701a      	strb	r2, [r3, #0]
          break;
 8020938:	e035      	b.n	80209a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802093a:	687a      	ldr	r2, [r7, #4]
 802093c:	23a7      	movs	r3, #167	@ 0xa7
 802093e:	009b      	lsls	r3, r3, #2
 8020940:	5cd3      	ldrb	r3, [r2, r3]
 8020942:	2b03      	cmp	r3, #3
 8020944:	d107      	bne.n	8020956 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8020946:	230f      	movs	r3, #15
 8020948:	18f9      	adds	r1, r7, r3
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	2201      	movs	r2, #1
 802094e:	0018      	movs	r0, r3
 8020950:	f001 fb5f 	bl	8022012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020954:	e027      	b.n	80209a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020956:	683a      	ldr	r2, [r7, #0]
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	0011      	movs	r1, r2
 802095c:	0018      	movs	r0, r3
 802095e:	f001 fada 	bl	8021f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8020962:	2317      	movs	r3, #23
 8020964:	18fb      	adds	r3, r7, r3
 8020966:	2202      	movs	r2, #2
 8020968:	701a      	strb	r2, [r3, #0]
          break;
 802096a:	e01c      	b.n	80209a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802096c:	687a      	ldr	r2, [r7, #4]
 802096e:	23a7      	movs	r3, #167	@ 0xa7
 8020970:	009b      	lsls	r3, r3, #2
 8020972:	5cd3      	ldrb	r3, [r2, r3]
 8020974:	2b03      	cmp	r3, #3
 8020976:	d015      	beq.n	80209a4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020978:	683a      	ldr	r2, [r7, #0]
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	0011      	movs	r1, r2
 802097e:	0018      	movs	r0, r3
 8020980:	f001 fac9 	bl	8021f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8020984:	2317      	movs	r3, #23
 8020986:	18fb      	adds	r3, r7, r3
 8020988:	2202      	movs	r2, #2
 802098a:	701a      	strb	r2, [r3, #0]
          }
          break;
 802098c:	e00a      	b.n	80209a4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 802098e:	683a      	ldr	r2, [r7, #0]
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	0011      	movs	r1, r2
 8020994:	0018      	movs	r0, r3
 8020996:	f001 fabe 	bl	8021f16 <USBD_CtlError>
          ret = USBD_FAIL;
 802099a:	2317      	movs	r3, #23
 802099c:	18fb      	adds	r3, r7, r3
 802099e:	2202      	movs	r2, #2
 80209a0:	701a      	strb	r2, [r3, #0]
          break;
 80209a2:	e000      	b.n	80209a6 <USBD_CDC_Setup+0x166>
          break;
 80209a4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80209a6:	e00a      	b.n	80209be <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80209a8:	683a      	ldr	r2, [r7, #0]
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	0011      	movs	r1, r2
 80209ae:	0018      	movs	r0, r3
 80209b0:	f001 fab1 	bl	8021f16 <USBD_CtlError>
      ret = USBD_FAIL;
 80209b4:	2317      	movs	r3, #23
 80209b6:	18fb      	adds	r3, r7, r3
 80209b8:	2202      	movs	r2, #2
 80209ba:	701a      	strb	r2, [r3, #0]
      break;
 80209bc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80209be:	2317      	movs	r3, #23
 80209c0:	18fb      	adds	r3, r7, r3
 80209c2:	781b      	ldrb	r3, [r3, #0]
}
 80209c4:	0018      	movs	r0, r3
 80209c6:	46bd      	mov	sp, r7
 80209c8:	b006      	add	sp, #24
 80209ca:	bd80      	pop	{r7, pc}
 80209cc:	00000201 	.word	0x00000201

080209d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80209d0:	b580      	push	{r7, lr}
 80209d2:	b084      	sub	sp, #16
 80209d4:	af00      	add	r7, sp, #0
 80209d6:	6078      	str	r0, [r7, #4]
 80209d8:	000a      	movs	r2, r1
 80209da:	1cfb      	adds	r3, r7, #3
 80209dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80209de:	687a      	ldr	r2, [r7, #4]
 80209e0:	23ae      	movs	r3, #174	@ 0xae
 80209e2:	009b      	lsls	r3, r3, #2
 80209e4:	58d3      	ldr	r3, [r2, r3]
 80209e6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80209e8:	687a      	ldr	r2, [r7, #4]
 80209ea:	23b0      	movs	r3, #176	@ 0xb0
 80209ec:	009b      	lsls	r3, r3, #2
 80209ee:	58d3      	ldr	r3, [r2, r3]
 80209f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80209f2:	687a      	ldr	r2, [r7, #4]
 80209f4:	23ae      	movs	r3, #174	@ 0xae
 80209f6:	009b      	lsls	r3, r3, #2
 80209f8:	58d3      	ldr	r3, [r2, r3]
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d03e      	beq.n	8020a7c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80209fe:	1cfb      	adds	r3, r7, #3
 8020a00:	781a      	ldrb	r2, [r3, #0]
 8020a02:	6879      	ldr	r1, [r7, #4]
 8020a04:	0013      	movs	r3, r2
 8020a06:	009b      	lsls	r3, r3, #2
 8020a08:	189b      	adds	r3, r3, r2
 8020a0a:	009b      	lsls	r3, r3, #2
 8020a0c:	18cb      	adds	r3, r1, r3
 8020a0e:	331c      	adds	r3, #28
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d02b      	beq.n	8020a6e <USBD_CDC_DataIn+0x9e>
 8020a16:	1cfb      	adds	r3, r7, #3
 8020a18:	781a      	ldrb	r2, [r3, #0]
 8020a1a:	6879      	ldr	r1, [r7, #4]
 8020a1c:	0013      	movs	r3, r2
 8020a1e:	009b      	lsls	r3, r3, #2
 8020a20:	189b      	adds	r3, r3, r2
 8020a22:	009b      	lsls	r3, r3, #2
 8020a24:	18cb      	adds	r3, r1, r3
 8020a26:	331c      	adds	r3, #28
 8020a28:	6818      	ldr	r0, [r3, #0]
 8020a2a:	1cfb      	adds	r3, r7, #3
 8020a2c:	781a      	ldrb	r2, [r3, #0]
 8020a2e:	68b9      	ldr	r1, [r7, #8]
 8020a30:	0013      	movs	r3, r2
 8020a32:	009b      	lsls	r3, r3, #2
 8020a34:	189b      	adds	r3, r3, r2
 8020a36:	00db      	lsls	r3, r3, #3
 8020a38:	18cb      	adds	r3, r1, r3
 8020a3a:	3338      	adds	r3, #56	@ 0x38
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	0019      	movs	r1, r3
 8020a40:	f7df fc36 	bl	80002b0 <__aeabi_uidivmod>
 8020a44:	1e0b      	subs	r3, r1, #0
 8020a46:	d112      	bne.n	8020a6e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8020a48:	1cfb      	adds	r3, r7, #3
 8020a4a:	781a      	ldrb	r2, [r3, #0]
 8020a4c:	6879      	ldr	r1, [r7, #4]
 8020a4e:	0013      	movs	r3, r2
 8020a50:	009b      	lsls	r3, r3, #2
 8020a52:	189b      	adds	r3, r3, r2
 8020a54:	009b      	lsls	r3, r3, #2
 8020a56:	18cb      	adds	r3, r1, r3
 8020a58:	331c      	adds	r3, #28
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020a5e:	1cfb      	adds	r3, r7, #3
 8020a60:	7819      	ldrb	r1, [r3, #0]
 8020a62:	6878      	ldr	r0, [r7, #4]
 8020a64:	2300      	movs	r3, #0
 8020a66:	2200      	movs	r2, #0
 8020a68:	f002 f82f 	bl	8022aca <USBD_LL_Transmit>
 8020a6c:	e004      	b.n	8020a78 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8020a6e:	68fa      	ldr	r2, [r7, #12]
 8020a70:	2385      	movs	r3, #133	@ 0x85
 8020a72:	009b      	lsls	r3, r3, #2
 8020a74:	2100      	movs	r1, #0
 8020a76:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020a78:	2300      	movs	r3, #0
 8020a7a:	e000      	b.n	8020a7e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8020a7c:	2302      	movs	r3, #2
  }
}
 8020a7e:	0018      	movs	r0, r3
 8020a80:	46bd      	mov	sp, r7
 8020a82:	b004      	add	sp, #16
 8020a84:	bd80      	pop	{r7, pc}

08020a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020a86:	b580      	push	{r7, lr}
 8020a88:	b084      	sub	sp, #16
 8020a8a:	af00      	add	r7, sp, #0
 8020a8c:	6078      	str	r0, [r7, #4]
 8020a8e:	000a      	movs	r2, r1
 8020a90:	1cfb      	adds	r3, r7, #3
 8020a92:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020a94:	687a      	ldr	r2, [r7, #4]
 8020a96:	23ae      	movs	r3, #174	@ 0xae
 8020a98:	009b      	lsls	r3, r3, #2
 8020a9a:	58d3      	ldr	r3, [r2, r3]
 8020a9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020a9e:	1cfb      	adds	r3, r7, #3
 8020aa0:	781a      	ldrb	r2, [r3, #0]
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	0011      	movs	r1, r2
 8020aa6:	0018      	movs	r0, r3
 8020aa8:	f002 f87d 	bl	8022ba6 <USBD_LL_GetRxDataSize>
 8020aac:	0001      	movs	r1, r0
 8020aae:	68fa      	ldr	r2, [r7, #12]
 8020ab0:	2383      	movs	r3, #131	@ 0x83
 8020ab2:	009b      	lsls	r3, r3, #2
 8020ab4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8020ab6:	687a      	ldr	r2, [r7, #4]
 8020ab8:	23ae      	movs	r3, #174	@ 0xae
 8020aba:	009b      	lsls	r3, r3, #2
 8020abc:	58d3      	ldr	r3, [r2, r3]
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d011      	beq.n	8020ae6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020ac2:	687a      	ldr	r2, [r7, #4]
 8020ac4:	23af      	movs	r3, #175	@ 0xaf
 8020ac6:	009b      	lsls	r3, r3, #2
 8020ac8:	58d3      	ldr	r3, [r2, r3]
 8020aca:	68da      	ldr	r2, [r3, #12]
 8020acc:	68f9      	ldr	r1, [r7, #12]
 8020ace:	2381      	movs	r3, #129	@ 0x81
 8020ad0:	009b      	lsls	r3, r3, #2
 8020ad2:	58c8      	ldr	r0, [r1, r3]
 8020ad4:	68fb      	ldr	r3, [r7, #12]
 8020ad6:	2183      	movs	r1, #131	@ 0x83
 8020ad8:	0089      	lsls	r1, r1, #2
 8020ada:	468c      	mov	ip, r1
 8020adc:	4463      	add	r3, ip
 8020ade:	0019      	movs	r1, r3
 8020ae0:	4790      	blx	r2

    return USBD_OK;
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	e000      	b.n	8020ae8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8020ae6:	2302      	movs	r3, #2
  }
}
 8020ae8:	0018      	movs	r0, r3
 8020aea:	46bd      	mov	sp, r7
 8020aec:	b004      	add	sp, #16
 8020aee:	bd80      	pop	{r7, pc}

08020af0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020af0:	b590      	push	{r4, r7, lr}
 8020af2:	b085      	sub	sp, #20
 8020af4:	af00      	add	r7, sp, #0
 8020af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020af8:	687a      	ldr	r2, [r7, #4]
 8020afa:	23ae      	movs	r3, #174	@ 0xae
 8020afc:	009b      	lsls	r3, r3, #2
 8020afe:	58d3      	ldr	r3, [r2, r3]
 8020b00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020b02:	687a      	ldr	r2, [r7, #4]
 8020b04:	23af      	movs	r3, #175	@ 0xaf
 8020b06:	009b      	lsls	r3, r3, #2
 8020b08:	58d3      	ldr	r3, [r2, r3]
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d018      	beq.n	8020b40 <USBD_CDC_EP0_RxReady+0x50>
 8020b0e:	68fa      	ldr	r2, [r7, #12]
 8020b10:	2380      	movs	r3, #128	@ 0x80
 8020b12:	009b      	lsls	r3, r3, #2
 8020b14:	5cd3      	ldrb	r3, [r2, r3]
 8020b16:	2bff      	cmp	r3, #255	@ 0xff
 8020b18:	d012      	beq.n	8020b40 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020b1a:	687a      	ldr	r2, [r7, #4]
 8020b1c:	23af      	movs	r3, #175	@ 0xaf
 8020b1e:	009b      	lsls	r3, r3, #2
 8020b20:	58d3      	ldr	r3, [r2, r3]
 8020b22:	689b      	ldr	r3, [r3, #8]
 8020b24:	68f9      	ldr	r1, [r7, #12]
 8020b26:	2280      	movs	r2, #128	@ 0x80
 8020b28:	0092      	lsls	r2, r2, #2
 8020b2a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8020b2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020b2e:	68fa      	ldr	r2, [r7, #12]
 8020b30:	4c06      	ldr	r4, [pc, #24]	@ (8020b4c <USBD_CDC_EP0_RxReady+0x5c>)
 8020b32:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020b34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020b36:	68fa      	ldr	r2, [r7, #12]
 8020b38:	2380      	movs	r3, #128	@ 0x80
 8020b3a:	009b      	lsls	r3, r3, #2
 8020b3c:	21ff      	movs	r1, #255	@ 0xff
 8020b3e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020b40:	2300      	movs	r3, #0
}
 8020b42:	0018      	movs	r0, r3
 8020b44:	46bd      	mov	sp, r7
 8020b46:	b005      	add	sp, #20
 8020b48:	bd90      	pop	{r4, r7, pc}
 8020b4a:	46c0      	nop			@ (mov r8, r8)
 8020b4c:	00000201 	.word	0x00000201

08020b50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b082      	sub	sp, #8
 8020b54:	af00      	add	r7, sp, #0
 8020b56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	2243      	movs	r2, #67	@ 0x43
 8020b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8020b5e:	4b02      	ldr	r3, [pc, #8]	@ (8020b68 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020b60:	0018      	movs	r0, r3
 8020b62:	46bd      	mov	sp, r7
 8020b64:	b002      	add	sp, #8
 8020b66:	bd80      	pop	{r7, pc}
 8020b68:	20000180 	.word	0x20000180

08020b6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020b6c:	b580      	push	{r7, lr}
 8020b6e:	b082      	sub	sp, #8
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	2243      	movs	r2, #67	@ 0x43
 8020b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020b7a:	4b02      	ldr	r3, [pc, #8]	@ (8020b84 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020b7c:	0018      	movs	r0, r3
 8020b7e:	46bd      	mov	sp, r7
 8020b80:	b002      	add	sp, #8
 8020b82:	bd80      	pop	{r7, pc}
 8020b84:	2000013c 	.word	0x2000013c

08020b88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020b88:	b580      	push	{r7, lr}
 8020b8a:	b082      	sub	sp, #8
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	2243      	movs	r2, #67	@ 0x43
 8020b94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020b96:	4b02      	ldr	r3, [pc, #8]	@ (8020ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020b98:	0018      	movs	r0, r3
 8020b9a:	46bd      	mov	sp, r7
 8020b9c:	b002      	add	sp, #8
 8020b9e:	bd80      	pop	{r7, pc}
 8020ba0:	200001c4 	.word	0x200001c4

08020ba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	b082      	sub	sp, #8
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	220a      	movs	r2, #10
 8020bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8020bb2:	4b02      	ldr	r3, [pc, #8]	@ (8020bbc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8020bb4:	0018      	movs	r0, r3
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	b002      	add	sp, #8
 8020bba:	bd80      	pop	{r7, pc}
 8020bbc:	200000f8 	.word	0x200000f8

08020bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b084      	sub	sp, #16
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	6078      	str	r0, [r7, #4]
 8020bc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020bca:	200f      	movs	r0, #15
 8020bcc:	183b      	adds	r3, r7, r0
 8020bce:	2202      	movs	r2, #2
 8020bd0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8020bd2:	683b      	ldr	r3, [r7, #0]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d007      	beq.n	8020be8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020bd8:	687a      	ldr	r2, [r7, #4]
 8020bda:	23af      	movs	r3, #175	@ 0xaf
 8020bdc:	009b      	lsls	r3, r3, #2
 8020bde:	6839      	ldr	r1, [r7, #0]
 8020be0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8020be2:	183b      	adds	r3, r7, r0
 8020be4:	2200      	movs	r2, #0
 8020be6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020be8:	230f      	movs	r3, #15
 8020bea:	18fb      	adds	r3, r7, r3
 8020bec:	781b      	ldrb	r3, [r3, #0]
}
 8020bee:	0018      	movs	r0, r3
 8020bf0:	46bd      	mov	sp, r7
 8020bf2:	b004      	add	sp, #16
 8020bf4:	bd80      	pop	{r7, pc}

08020bf6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8020bf6:	b580      	push	{r7, lr}
 8020bf8:	b086      	sub	sp, #24
 8020bfa:	af00      	add	r7, sp, #0
 8020bfc:	60f8      	str	r0, [r7, #12]
 8020bfe:	60b9      	str	r1, [r7, #8]
 8020c00:	1dbb      	adds	r3, r7, #6
 8020c02:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020c04:	68fa      	ldr	r2, [r7, #12]
 8020c06:	23ae      	movs	r3, #174	@ 0xae
 8020c08:	009b      	lsls	r3, r3, #2
 8020c0a:	58d3      	ldr	r3, [r2, r3]
 8020c0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020c0e:	697a      	ldr	r2, [r7, #20]
 8020c10:	2382      	movs	r3, #130	@ 0x82
 8020c12:	009b      	lsls	r3, r3, #2
 8020c14:	68b9      	ldr	r1, [r7, #8]
 8020c16:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020c18:	1dbb      	adds	r3, r7, #6
 8020c1a:	8819      	ldrh	r1, [r3, #0]
 8020c1c:	697a      	ldr	r2, [r7, #20]
 8020c1e:	2384      	movs	r3, #132	@ 0x84
 8020c20:	009b      	lsls	r3, r3, #2
 8020c22:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020c24:	2300      	movs	r3, #0
}
 8020c26:	0018      	movs	r0, r3
 8020c28:	46bd      	mov	sp, r7
 8020c2a:	b006      	add	sp, #24
 8020c2c:	bd80      	pop	{r7, pc}

08020c2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8020c2e:	b580      	push	{r7, lr}
 8020c30:	b084      	sub	sp, #16
 8020c32:	af00      	add	r7, sp, #0
 8020c34:	6078      	str	r0, [r7, #4]
 8020c36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020c38:	687a      	ldr	r2, [r7, #4]
 8020c3a:	23ae      	movs	r3, #174	@ 0xae
 8020c3c:	009b      	lsls	r3, r3, #2
 8020c3e:	58d3      	ldr	r3, [r2, r3]
 8020c40:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020c42:	68fa      	ldr	r2, [r7, #12]
 8020c44:	2381      	movs	r3, #129	@ 0x81
 8020c46:	009b      	lsls	r3, r3, #2
 8020c48:	6839      	ldr	r1, [r7, #0]
 8020c4a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020c4c:	2300      	movs	r3, #0
}
 8020c4e:	0018      	movs	r0, r3
 8020c50:	46bd      	mov	sp, r7
 8020c52:	b004      	add	sp, #16
 8020c54:	bd80      	pop	{r7, pc}

08020c56 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020c56:	b580      	push	{r7, lr}
 8020c58:	b084      	sub	sp, #16
 8020c5a:	af00      	add	r7, sp, #0
 8020c5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020c5e:	687a      	ldr	r2, [r7, #4]
 8020c60:	23ae      	movs	r3, #174	@ 0xae
 8020c62:	009b      	lsls	r3, r3, #2
 8020c64:	58d3      	ldr	r3, [r2, r3]
 8020c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020c68:	687a      	ldr	r2, [r7, #4]
 8020c6a:	23ae      	movs	r3, #174	@ 0xae
 8020c6c:	009b      	lsls	r3, r3, #2
 8020c6e:	58d3      	ldr	r3, [r2, r3]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d022      	beq.n	8020cba <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020c74:	68fa      	ldr	r2, [r7, #12]
 8020c76:	2385      	movs	r3, #133	@ 0x85
 8020c78:	009b      	lsls	r3, r3, #2
 8020c7a:	58d3      	ldr	r3, [r2, r3]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d11a      	bne.n	8020cb6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020c80:	68fa      	ldr	r2, [r7, #12]
 8020c82:	2385      	movs	r3, #133	@ 0x85
 8020c84:	009b      	lsls	r3, r3, #2
 8020c86:	2101      	movs	r1, #1
 8020c88:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020c8a:	68fa      	ldr	r2, [r7, #12]
 8020c8c:	2384      	movs	r3, #132	@ 0x84
 8020c8e:	009b      	lsls	r3, r3, #2
 8020c90:	58d2      	ldr	r2, [r2, r3]
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020c96:	68fa      	ldr	r2, [r7, #12]
 8020c98:	2382      	movs	r3, #130	@ 0x82
 8020c9a:	009b      	lsls	r3, r3, #2
 8020c9c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020c9e:	68fa      	ldr	r2, [r7, #12]
 8020ca0:	2384      	movs	r3, #132	@ 0x84
 8020ca2:	009b      	lsls	r3, r3, #2
 8020ca4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020ca6:	b29b      	uxth	r3, r3
 8020ca8:	6878      	ldr	r0, [r7, #4]
 8020caa:	000a      	movs	r2, r1
 8020cac:	2181      	movs	r1, #129	@ 0x81
 8020cae:	f001 ff0c 	bl	8022aca <USBD_LL_Transmit>

      return USBD_OK;
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	e002      	b.n	8020cbc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8020cb6:	2301      	movs	r3, #1
 8020cb8:	e000      	b.n	8020cbc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8020cba:	2302      	movs	r3, #2
  }
}
 8020cbc:	0018      	movs	r0, r3
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	b004      	add	sp, #16
 8020cc2:	bd80      	pop	{r7, pc}

08020cc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020cc4:	b580      	push	{r7, lr}
 8020cc6:	b084      	sub	sp, #16
 8020cc8:	af00      	add	r7, sp, #0
 8020cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020ccc:	687a      	ldr	r2, [r7, #4]
 8020cce:	23ae      	movs	r3, #174	@ 0xae
 8020cd0:	009b      	lsls	r3, r3, #2
 8020cd2:	58d3      	ldr	r3, [r2, r3]
 8020cd4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8020cd6:	687a      	ldr	r2, [r7, #4]
 8020cd8:	23ae      	movs	r3, #174	@ 0xae
 8020cda:	009b      	lsls	r3, r3, #2
 8020cdc:	58d3      	ldr	r3, [r2, r3]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d019      	beq.n	8020d16 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	7c1b      	ldrb	r3, [r3, #16]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d10a      	bne.n	8020d00 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020cea:	68fa      	ldr	r2, [r7, #12]
 8020cec:	2381      	movs	r3, #129	@ 0x81
 8020cee:	009b      	lsls	r3, r3, #2
 8020cf0:	58d2      	ldr	r2, [r2, r3]
 8020cf2:	2380      	movs	r3, #128	@ 0x80
 8020cf4:	009b      	lsls	r3, r3, #2
 8020cf6:	6878      	ldr	r0, [r7, #4]
 8020cf8:	2101      	movs	r1, #1
 8020cfa:	f001 ff1d 	bl	8022b38 <USBD_LL_PrepareReceive>
 8020cfe:	e008      	b.n	8020d12 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020d00:	68fa      	ldr	r2, [r7, #12]
 8020d02:	2381      	movs	r3, #129	@ 0x81
 8020d04:	009b      	lsls	r3, r3, #2
 8020d06:	58d2      	ldr	r2, [r2, r3]
 8020d08:	6878      	ldr	r0, [r7, #4]
 8020d0a:	2340      	movs	r3, #64	@ 0x40
 8020d0c:	2101      	movs	r1, #1
 8020d0e:	f001 ff13 	bl	8022b38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020d12:	2300      	movs	r3, #0
 8020d14:	e000      	b.n	8020d18 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020d16:	2302      	movs	r3, #2
  }
}
 8020d18:	0018      	movs	r0, r3
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	b004      	add	sp, #16
 8020d1e:	bd80      	pop	{r7, pc}

08020d20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b084      	sub	sp, #16
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	60f8      	str	r0, [r7, #12]
 8020d28:	60b9      	str	r1, [r7, #8]
 8020d2a:	1dfb      	adds	r3, r7, #7
 8020d2c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d101      	bne.n	8020d38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020d34:	2302      	movs	r3, #2
 8020d36:	e020      	b.n	8020d7a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020d38:	68fa      	ldr	r2, [r7, #12]
 8020d3a:	23ad      	movs	r3, #173	@ 0xad
 8020d3c:	009b      	lsls	r3, r3, #2
 8020d3e:	58d3      	ldr	r3, [r2, r3]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d004      	beq.n	8020d4e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020d44:	68fa      	ldr	r2, [r7, #12]
 8020d46:	23ad      	movs	r3, #173	@ 0xad
 8020d48:	009b      	lsls	r3, r3, #2
 8020d4a:	2100      	movs	r1, #0
 8020d4c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020d4e:	68bb      	ldr	r3, [r7, #8]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d004      	beq.n	8020d5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020d54:	68fa      	ldr	r2, [r7, #12]
 8020d56:	23ac      	movs	r3, #172	@ 0xac
 8020d58:	009b      	lsls	r3, r3, #2
 8020d5a:	68b9      	ldr	r1, [r7, #8]
 8020d5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020d5e:	68fa      	ldr	r2, [r7, #12]
 8020d60:	23a7      	movs	r3, #167	@ 0xa7
 8020d62:	009b      	lsls	r3, r3, #2
 8020d64:	2101      	movs	r1, #1
 8020d66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	1dfa      	adds	r2, r7, #7
 8020d6c:	7812      	ldrb	r2, [r2, #0]
 8020d6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020d70:	68fb      	ldr	r3, [r7, #12]
 8020d72:	0018      	movs	r0, r3
 8020d74:	f001 fd0c 	bl	8022790 <USBD_LL_Init>

  return USBD_OK;
 8020d78:	2300      	movs	r3, #0
}
 8020d7a:	0018      	movs	r0, r3
 8020d7c:	46bd      	mov	sp, r7
 8020d7e:	b004      	add	sp, #16
 8020d80:	bd80      	pop	{r7, pc}

08020d82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020d82:	b580      	push	{r7, lr}
 8020d84:	b084      	sub	sp, #16
 8020d86:	af00      	add	r7, sp, #0
 8020d88:	6078      	str	r0, [r7, #4]
 8020d8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8020d8c:	200f      	movs	r0, #15
 8020d8e:	183b      	adds	r3, r7, r0
 8020d90:	2200      	movs	r2, #0
 8020d92:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020d94:	683b      	ldr	r3, [r7, #0]
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d008      	beq.n	8020dac <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8020d9a:	687a      	ldr	r2, [r7, #4]
 8020d9c:	23ad      	movs	r3, #173	@ 0xad
 8020d9e:	009b      	lsls	r3, r3, #2
 8020da0:	6839      	ldr	r1, [r7, #0]
 8020da2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020da4:	183b      	adds	r3, r7, r0
 8020da6:	2200      	movs	r2, #0
 8020da8:	701a      	strb	r2, [r3, #0]
 8020daa:	e003      	b.n	8020db4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8020dac:	230f      	movs	r3, #15
 8020dae:	18fb      	adds	r3, r7, r3
 8020db0:	2202      	movs	r2, #2
 8020db2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8020db4:	230f      	movs	r3, #15
 8020db6:	18fb      	adds	r3, r7, r3
 8020db8:	781b      	ldrb	r3, [r3, #0]
}
 8020dba:	0018      	movs	r0, r3
 8020dbc:	46bd      	mov	sp, r7
 8020dbe:	b004      	add	sp, #16
 8020dc0:	bd80      	pop	{r7, pc}

08020dc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020dc2:	b580      	push	{r7, lr}
 8020dc4:	b082      	sub	sp, #8
 8020dc6:	af00      	add	r7, sp, #0
 8020dc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	0018      	movs	r0, r3
 8020dce:	f001 fd43 	bl	8022858 <USBD_LL_Start>

  return USBD_OK;
 8020dd2:	2300      	movs	r3, #0
}
 8020dd4:	0018      	movs	r0, r3
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	b002      	add	sp, #8
 8020dda:	bd80      	pop	{r7, pc}

08020ddc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020ddc:	b580      	push	{r7, lr}
 8020dde:	b082      	sub	sp, #8
 8020de0:	af00      	add	r7, sp, #0
 8020de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020de4:	2300      	movs	r3, #0
}
 8020de6:	0018      	movs	r0, r3
 8020de8:	46bd      	mov	sp, r7
 8020dea:	b002      	add	sp, #8
 8020dec:	bd80      	pop	{r7, pc}

08020dee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020dee:	b590      	push	{r4, r7, lr}
 8020df0:	b085      	sub	sp, #20
 8020df2:	af00      	add	r7, sp, #0
 8020df4:	6078      	str	r0, [r7, #4]
 8020df6:	000a      	movs	r2, r1
 8020df8:	1cfb      	adds	r3, r7, #3
 8020dfa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020dfc:	240f      	movs	r4, #15
 8020dfe:	193b      	adds	r3, r7, r4
 8020e00:	2202      	movs	r2, #2
 8020e02:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8020e04:	687a      	ldr	r2, [r7, #4]
 8020e06:	23ad      	movs	r3, #173	@ 0xad
 8020e08:	009b      	lsls	r3, r3, #2
 8020e0a:	58d3      	ldr	r3, [r2, r3]
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d00e      	beq.n	8020e2e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020e10:	687a      	ldr	r2, [r7, #4]
 8020e12:	23ad      	movs	r3, #173	@ 0xad
 8020e14:	009b      	lsls	r3, r3, #2
 8020e16:	58d3      	ldr	r3, [r2, r3]
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	1cfa      	adds	r2, r7, #3
 8020e1c:	7811      	ldrb	r1, [r2, #0]
 8020e1e:	687a      	ldr	r2, [r7, #4]
 8020e20:	0010      	movs	r0, r2
 8020e22:	4798      	blx	r3
 8020e24:	1e03      	subs	r3, r0, #0
 8020e26:	d102      	bne.n	8020e2e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020e28:	193b      	adds	r3, r7, r4
 8020e2a:	2200      	movs	r2, #0
 8020e2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8020e2e:	230f      	movs	r3, #15
 8020e30:	18fb      	adds	r3, r7, r3
 8020e32:	781b      	ldrb	r3, [r3, #0]
}
 8020e34:	0018      	movs	r0, r3
 8020e36:	46bd      	mov	sp, r7
 8020e38:	b005      	add	sp, #20
 8020e3a:	bd90      	pop	{r4, r7, pc}

08020e3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b082      	sub	sp, #8
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
 8020e44:	000a      	movs	r2, r1
 8020e46:	1cfb      	adds	r3, r7, #3
 8020e48:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8020e4a:	687a      	ldr	r2, [r7, #4]
 8020e4c:	23ad      	movs	r3, #173	@ 0xad
 8020e4e:	009b      	lsls	r3, r3, #2
 8020e50:	58d3      	ldr	r3, [r2, r3]
 8020e52:	685b      	ldr	r3, [r3, #4]
 8020e54:	1cfa      	adds	r2, r7, #3
 8020e56:	7811      	ldrb	r1, [r2, #0]
 8020e58:	687a      	ldr	r2, [r7, #4]
 8020e5a:	0010      	movs	r0, r2
 8020e5c:	4798      	blx	r3

  return USBD_OK;
 8020e5e:	2300      	movs	r3, #0
}
 8020e60:	0018      	movs	r0, r3
 8020e62:	46bd      	mov	sp, r7
 8020e64:	b002      	add	sp, #8
 8020e66:	bd80      	pop	{r7, pc}

08020e68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b082      	sub	sp, #8
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	6078      	str	r0, [r7, #4]
 8020e70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	22aa      	movs	r2, #170	@ 0xaa
 8020e76:	0092      	lsls	r2, r2, #2
 8020e78:	4694      	mov	ip, r2
 8020e7a:	4463      	add	r3, ip
 8020e7c:	683a      	ldr	r2, [r7, #0]
 8020e7e:	0011      	movs	r1, r2
 8020e80:	0018      	movs	r0, r3
 8020e82:	f001 f810 	bl	8021ea6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020e86:	687a      	ldr	r2, [r7, #4]
 8020e88:	23a5      	movs	r3, #165	@ 0xa5
 8020e8a:	009b      	lsls	r3, r3, #2
 8020e8c:	2101      	movs	r1, #1
 8020e8e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	4a23      	ldr	r2, [pc, #140]	@ (8020f20 <USBD_LL_SetupStage+0xb8>)
 8020e94:	5a9b      	ldrh	r3, [r3, r2]
 8020e96:	0019      	movs	r1, r3
 8020e98:	687a      	ldr	r2, [r7, #4]
 8020e9a:	23a6      	movs	r3, #166	@ 0xa6
 8020e9c:	009b      	lsls	r3, r3, #2
 8020e9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020ea0:	687a      	ldr	r2, [r7, #4]
 8020ea2:	23aa      	movs	r3, #170	@ 0xaa
 8020ea4:	009b      	lsls	r3, r3, #2
 8020ea6:	5cd3      	ldrb	r3, [r2, r3]
 8020ea8:	001a      	movs	r2, r3
 8020eaa:	231f      	movs	r3, #31
 8020eac:	4013      	ands	r3, r2
 8020eae:	2b02      	cmp	r3, #2
 8020eb0:	d019      	beq.n	8020ee6 <USBD_LL_SetupStage+0x7e>
 8020eb2:	d822      	bhi.n	8020efa <USBD_LL_SetupStage+0x92>
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d002      	beq.n	8020ebe <USBD_LL_SetupStage+0x56>
 8020eb8:	2b01      	cmp	r3, #1
 8020eba:	d00a      	beq.n	8020ed2 <USBD_LL_SetupStage+0x6a>
 8020ebc:	e01d      	b.n	8020efa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	22aa      	movs	r2, #170	@ 0xaa
 8020ec2:	0092      	lsls	r2, r2, #2
 8020ec4:	189a      	adds	r2, r3, r2
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	0011      	movs	r1, r2
 8020eca:	0018      	movs	r0, r3
 8020ecc:	f000 fa10 	bl	80212f0 <USBD_StdDevReq>
      break;
 8020ed0:	e020      	b.n	8020f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	22aa      	movs	r2, #170	@ 0xaa
 8020ed6:	0092      	lsls	r2, r2, #2
 8020ed8:	189a      	adds	r2, r3, r2
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	0011      	movs	r1, r2
 8020ede:	0018      	movs	r0, r3
 8020ee0:	f000 fa78 	bl	80213d4 <USBD_StdItfReq>
      break;
 8020ee4:	e016      	b.n	8020f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	22aa      	movs	r2, #170	@ 0xaa
 8020eea:	0092      	lsls	r2, r2, #2
 8020eec:	189a      	adds	r2, r3, r2
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	0011      	movs	r1, r2
 8020ef2:	0018      	movs	r0, r3
 8020ef4:	f000 fac5 	bl	8021482 <USBD_StdEPReq>
      break;
 8020ef8:	e00c      	b.n	8020f14 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020efa:	687a      	ldr	r2, [r7, #4]
 8020efc:	23aa      	movs	r3, #170	@ 0xaa
 8020efe:	009b      	lsls	r3, r3, #2
 8020f00:	5cd3      	ldrb	r3, [r2, r3]
 8020f02:	227f      	movs	r2, #127	@ 0x7f
 8020f04:	4393      	bics	r3, r2
 8020f06:	b2da      	uxtb	r2, r3
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	0011      	movs	r1, r2
 8020f0c:	0018      	movs	r0, r3
 8020f0e:	f001 fd2a 	bl	8022966 <USBD_LL_StallEP>
      break;
 8020f12:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020f14:	2300      	movs	r3, #0
}
 8020f16:	0018      	movs	r0, r3
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	b002      	add	sp, #8
 8020f1c:	bd80      	pop	{r7, pc}
 8020f1e:	46c0      	nop			@ (mov r8, r8)
 8020f20:	000002ae 	.word	0x000002ae

08020f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020f24:	b580      	push	{r7, lr}
 8020f26:	b086      	sub	sp, #24
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	60f8      	str	r0, [r7, #12]
 8020f2c:	607a      	str	r2, [r7, #4]
 8020f2e:	200b      	movs	r0, #11
 8020f30:	183b      	adds	r3, r7, r0
 8020f32:	1c0a      	adds	r2, r1, #0
 8020f34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020f36:	183b      	adds	r3, r7, r0
 8020f38:	781b      	ldrb	r3, [r3, #0]
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d154      	bne.n	8020fe8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8020f3e:	68fb      	ldr	r3, [r7, #12]
 8020f40:	3355      	adds	r3, #85	@ 0x55
 8020f42:	33ff      	adds	r3, #255	@ 0xff
 8020f44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020f46:	68fa      	ldr	r2, [r7, #12]
 8020f48:	23a5      	movs	r3, #165	@ 0xa5
 8020f4a:	009b      	lsls	r3, r3, #2
 8020f4c:	58d3      	ldr	r3, [r2, r3]
 8020f4e:	2b03      	cmp	r3, #3
 8020f50:	d139      	bne.n	8020fc6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020f52:	697b      	ldr	r3, [r7, #20]
 8020f54:	68da      	ldr	r2, [r3, #12]
 8020f56:	697b      	ldr	r3, [r7, #20]
 8020f58:	691b      	ldr	r3, [r3, #16]
 8020f5a:	429a      	cmp	r2, r3
 8020f5c:	d919      	bls.n	8020f92 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8020f5e:	697b      	ldr	r3, [r7, #20]
 8020f60:	68da      	ldr	r2, [r3, #12]
 8020f62:	697b      	ldr	r3, [r7, #20]
 8020f64:	691b      	ldr	r3, [r3, #16]
 8020f66:	1ad2      	subs	r2, r2, r3
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020f6c:	697b      	ldr	r3, [r7, #20]
 8020f6e:	68da      	ldr	r2, [r3, #12]
 8020f70:	697b      	ldr	r3, [r7, #20]
 8020f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020f74:	429a      	cmp	r2, r3
 8020f76:	d203      	bcs.n	8020f80 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8020f7c:	b29b      	uxth	r3, r3
 8020f7e:	e002      	b.n	8020f86 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020f80:	697b      	ldr	r3, [r7, #20]
 8020f82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020f84:	b29b      	uxth	r3, r3
 8020f86:	6879      	ldr	r1, [r7, #4]
 8020f88:	68f8      	ldr	r0, [r7, #12]
 8020f8a:	001a      	movs	r2, r3
 8020f8c:	f001 f898 	bl	80220c0 <USBD_CtlContinueRx>
 8020f90:	e045      	b.n	802101e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020f92:	68fa      	ldr	r2, [r7, #12]
 8020f94:	23ad      	movs	r3, #173	@ 0xad
 8020f96:	009b      	lsls	r3, r3, #2
 8020f98:	58d3      	ldr	r3, [r2, r3]
 8020f9a:	691b      	ldr	r3, [r3, #16]
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d00d      	beq.n	8020fbc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020fa0:	68fa      	ldr	r2, [r7, #12]
 8020fa2:	23a7      	movs	r3, #167	@ 0xa7
 8020fa4:	009b      	lsls	r3, r3, #2
 8020fa6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020fa8:	2b03      	cmp	r3, #3
 8020faa:	d107      	bne.n	8020fbc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8020fac:	68fa      	ldr	r2, [r7, #12]
 8020fae:	23ad      	movs	r3, #173	@ 0xad
 8020fb0:	009b      	lsls	r3, r3, #2
 8020fb2:	58d3      	ldr	r3, [r2, r3]
 8020fb4:	691b      	ldr	r3, [r3, #16]
 8020fb6:	68fa      	ldr	r2, [r7, #12]
 8020fb8:	0010      	movs	r0, r2
 8020fba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	0018      	movs	r0, r3
 8020fc0:	f001 f891 	bl	80220e6 <USBD_CtlSendStatus>
 8020fc4:	e02b      	b.n	802101e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8020fc6:	68fa      	ldr	r2, [r7, #12]
 8020fc8:	23a5      	movs	r3, #165	@ 0xa5
 8020fca:	009b      	lsls	r3, r3, #2
 8020fcc:	58d3      	ldr	r3, [r2, r3]
 8020fce:	2b05      	cmp	r3, #5
 8020fd0:	d125      	bne.n	802101e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8020fd2:	68fa      	ldr	r2, [r7, #12]
 8020fd4:	23a5      	movs	r3, #165	@ 0xa5
 8020fd6:	009b      	lsls	r3, r3, #2
 8020fd8:	2100      	movs	r1, #0
 8020fda:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	2100      	movs	r1, #0
 8020fe0:	0018      	movs	r0, r3
 8020fe2:	f001 fcc0 	bl	8022966 <USBD_LL_StallEP>
 8020fe6:	e01a      	b.n	802101e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8020fe8:	68fa      	ldr	r2, [r7, #12]
 8020fea:	23ad      	movs	r3, #173	@ 0xad
 8020fec:	009b      	lsls	r3, r3, #2
 8020fee:	58d3      	ldr	r3, [r2, r3]
 8020ff0:	699b      	ldr	r3, [r3, #24]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d011      	beq.n	802101a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020ff6:	68fa      	ldr	r2, [r7, #12]
 8020ff8:	23a7      	movs	r3, #167	@ 0xa7
 8020ffa:	009b      	lsls	r3, r3, #2
 8020ffc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8020ffe:	2b03      	cmp	r3, #3
 8021000:	d10b      	bne.n	802101a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021002:	68fa      	ldr	r2, [r7, #12]
 8021004:	23ad      	movs	r3, #173	@ 0xad
 8021006:	009b      	lsls	r3, r3, #2
 8021008:	58d3      	ldr	r3, [r2, r3]
 802100a:	699b      	ldr	r3, [r3, #24]
 802100c:	220b      	movs	r2, #11
 802100e:	18ba      	adds	r2, r7, r2
 8021010:	7811      	ldrb	r1, [r2, #0]
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	0010      	movs	r0, r2
 8021016:	4798      	blx	r3
 8021018:	e001      	b.n	802101e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802101a:	2302      	movs	r3, #2
 802101c:	e000      	b.n	8021020 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802101e:	2300      	movs	r3, #0
}
 8021020:	0018      	movs	r0, r3
 8021022:	46bd      	mov	sp, r7
 8021024:	b006      	add	sp, #24
 8021026:	bd80      	pop	{r7, pc}

08021028 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b086      	sub	sp, #24
 802102c:	af00      	add	r7, sp, #0
 802102e:	60f8      	str	r0, [r7, #12]
 8021030:	607a      	str	r2, [r7, #4]
 8021032:	200b      	movs	r0, #11
 8021034:	183b      	adds	r3, r7, r0
 8021036:	1c0a      	adds	r2, r1, #0
 8021038:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802103a:	183b      	adds	r3, r7, r0
 802103c:	781b      	ldrb	r3, [r3, #0]
 802103e:	2b00      	cmp	r3, #0
 8021040:	d000      	beq.n	8021044 <USBD_LL_DataInStage+0x1c>
 8021042:	e08e      	b.n	8021162 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	3314      	adds	r3, #20
 8021048:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802104a:	68fa      	ldr	r2, [r7, #12]
 802104c:	23a5      	movs	r3, #165	@ 0xa5
 802104e:	009b      	lsls	r3, r3, #2
 8021050:	58d3      	ldr	r3, [r2, r3]
 8021052:	2b02      	cmp	r3, #2
 8021054:	d164      	bne.n	8021120 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021056:	697b      	ldr	r3, [r7, #20]
 8021058:	68da      	ldr	r2, [r3, #12]
 802105a:	697b      	ldr	r3, [r7, #20]
 802105c:	691b      	ldr	r3, [r3, #16]
 802105e:	429a      	cmp	r2, r3
 8021060:	d915      	bls.n	802108e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021062:	697b      	ldr	r3, [r7, #20]
 8021064:	68da      	ldr	r2, [r3, #12]
 8021066:	697b      	ldr	r3, [r7, #20]
 8021068:	691b      	ldr	r3, [r3, #16]
 802106a:	1ad2      	subs	r2, r2, r3
 802106c:	697b      	ldr	r3, [r7, #20]
 802106e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021070:	697b      	ldr	r3, [r7, #20]
 8021072:	68db      	ldr	r3, [r3, #12]
 8021074:	b29a      	uxth	r2, r3
 8021076:	6879      	ldr	r1, [r7, #4]
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	0018      	movs	r0, r3
 802107c:	f000 ffe9 	bl	8022052 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021080:	68f8      	ldr	r0, [r7, #12]
 8021082:	2300      	movs	r3, #0
 8021084:	2200      	movs	r2, #0
 8021086:	2100      	movs	r1, #0
 8021088:	f001 fd56 	bl	8022b38 <USBD_LL_PrepareReceive>
 802108c:	e059      	b.n	8021142 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802108e:	697b      	ldr	r3, [r7, #20]
 8021090:	689a      	ldr	r2, [r3, #8]
 8021092:	697b      	ldr	r3, [r7, #20]
 8021094:	691b      	ldr	r3, [r3, #16]
 8021096:	0019      	movs	r1, r3
 8021098:	0010      	movs	r0, r2
 802109a:	f7df f909 	bl	80002b0 <__aeabi_uidivmod>
 802109e:	1e0b      	subs	r3, r1, #0
 80210a0:	d11f      	bne.n	80210e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80210a2:	697b      	ldr	r3, [r7, #20]
 80210a4:	689a      	ldr	r2, [r3, #8]
 80210a6:	697b      	ldr	r3, [r7, #20]
 80210a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80210aa:	429a      	cmp	r2, r3
 80210ac:	d319      	bcc.n	80210e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80210ae:	697b      	ldr	r3, [r7, #20]
 80210b0:	689a      	ldr	r2, [r3, #8]
 80210b2:	68f9      	ldr	r1, [r7, #12]
 80210b4:	23a6      	movs	r3, #166	@ 0xa6
 80210b6:	009b      	lsls	r3, r3, #2
 80210b8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80210ba:	429a      	cmp	r2, r3
 80210bc:	d211      	bcs.n	80210e2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80210be:	68fb      	ldr	r3, [r7, #12]
 80210c0:	2200      	movs	r2, #0
 80210c2:	2100      	movs	r1, #0
 80210c4:	0018      	movs	r0, r3
 80210c6:	f000 ffc4 	bl	8022052 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80210ca:	68fa      	ldr	r2, [r7, #12]
 80210cc:	23a6      	movs	r3, #166	@ 0xa6
 80210ce:	009b      	lsls	r3, r3, #2
 80210d0:	2100      	movs	r1, #0
 80210d2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80210d4:	68f8      	ldr	r0, [r7, #12]
 80210d6:	2300      	movs	r3, #0
 80210d8:	2200      	movs	r2, #0
 80210da:	2100      	movs	r1, #0
 80210dc:	f001 fd2c 	bl	8022b38 <USBD_LL_PrepareReceive>
 80210e0:	e02f      	b.n	8021142 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80210e2:	68fa      	ldr	r2, [r7, #12]
 80210e4:	23ad      	movs	r3, #173	@ 0xad
 80210e6:	009b      	lsls	r3, r3, #2
 80210e8:	58d3      	ldr	r3, [r2, r3]
 80210ea:	68db      	ldr	r3, [r3, #12]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d00d      	beq.n	802110c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80210f0:	68fa      	ldr	r2, [r7, #12]
 80210f2:	23a7      	movs	r3, #167	@ 0xa7
 80210f4:	009b      	lsls	r3, r3, #2
 80210f6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80210f8:	2b03      	cmp	r3, #3
 80210fa:	d107      	bne.n	802110c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80210fc:	68fa      	ldr	r2, [r7, #12]
 80210fe:	23ad      	movs	r3, #173	@ 0xad
 8021100:	009b      	lsls	r3, r3, #2
 8021102:	58d3      	ldr	r3, [r2, r3]
 8021104:	68db      	ldr	r3, [r3, #12]
 8021106:	68fa      	ldr	r2, [r7, #12]
 8021108:	0010      	movs	r0, r2
 802110a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 802110c:	68fb      	ldr	r3, [r7, #12]
 802110e:	2180      	movs	r1, #128	@ 0x80
 8021110:	0018      	movs	r0, r3
 8021112:	f001 fc28 	bl	8022966 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	0018      	movs	r0, r3
 802111a:	f000 fff8 	bl	802210e <USBD_CtlReceiveStatus>
 802111e:	e010      	b.n	8021142 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021120:	68fa      	ldr	r2, [r7, #12]
 8021122:	23a5      	movs	r3, #165	@ 0xa5
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	58d3      	ldr	r3, [r2, r3]
 8021128:	2b04      	cmp	r3, #4
 802112a:	d005      	beq.n	8021138 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802112c:	68fa      	ldr	r2, [r7, #12]
 802112e:	23a5      	movs	r3, #165	@ 0xa5
 8021130:	009b      	lsls	r3, r3, #2
 8021132:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021134:	2b00      	cmp	r3, #0
 8021136:	d104      	bne.n	8021142 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	2180      	movs	r1, #128	@ 0x80
 802113c:	0018      	movs	r0, r3
 802113e:	f001 fc12 	bl	8022966 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021142:	68fa      	ldr	r2, [r7, #12]
 8021144:	23a8      	movs	r3, #168	@ 0xa8
 8021146:	009b      	lsls	r3, r3, #2
 8021148:	5cd3      	ldrb	r3, [r2, r3]
 802114a:	2b01      	cmp	r3, #1
 802114c:	d124      	bne.n	8021198 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	0018      	movs	r0, r3
 8021152:	f7ff fe43 	bl	8020ddc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021156:	68fa      	ldr	r2, [r7, #12]
 8021158:	23a8      	movs	r3, #168	@ 0xa8
 802115a:	009b      	lsls	r3, r3, #2
 802115c:	2100      	movs	r1, #0
 802115e:	54d1      	strb	r1, [r2, r3]
 8021160:	e01a      	b.n	8021198 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8021162:	68fa      	ldr	r2, [r7, #12]
 8021164:	23ad      	movs	r3, #173	@ 0xad
 8021166:	009b      	lsls	r3, r3, #2
 8021168:	58d3      	ldr	r3, [r2, r3]
 802116a:	695b      	ldr	r3, [r3, #20]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d011      	beq.n	8021194 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021170:	68fa      	ldr	r2, [r7, #12]
 8021172:	23a7      	movs	r3, #167	@ 0xa7
 8021174:	009b      	lsls	r3, r3, #2
 8021176:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021178:	2b03      	cmp	r3, #3
 802117a:	d10b      	bne.n	8021194 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 802117c:	68fa      	ldr	r2, [r7, #12]
 802117e:	23ad      	movs	r3, #173	@ 0xad
 8021180:	009b      	lsls	r3, r3, #2
 8021182:	58d3      	ldr	r3, [r2, r3]
 8021184:	695b      	ldr	r3, [r3, #20]
 8021186:	220b      	movs	r2, #11
 8021188:	18ba      	adds	r2, r7, r2
 802118a:	7811      	ldrb	r1, [r2, #0]
 802118c:	68fa      	ldr	r2, [r7, #12]
 802118e:	0010      	movs	r0, r2
 8021190:	4798      	blx	r3
 8021192:	e001      	b.n	8021198 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021194:	2302      	movs	r3, #2
 8021196:	e000      	b.n	802119a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021198:	2300      	movs	r3, #0
}
 802119a:	0018      	movs	r0, r3
 802119c:	46bd      	mov	sp, r7
 802119e:	b006      	add	sp, #24
 80211a0:	bd80      	pop	{r7, pc}

080211a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80211a2:	b580      	push	{r7, lr}
 80211a4:	b082      	sub	sp, #8
 80211a6:	af00      	add	r7, sp, #0
 80211a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80211aa:	6878      	ldr	r0, [r7, #4]
 80211ac:	2340      	movs	r3, #64	@ 0x40
 80211ae:	2200      	movs	r2, #0
 80211b0:	2100      	movs	r1, #0
 80211b2:	f001 fb76 	bl	80228a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80211b6:	687a      	ldr	r2, [r7, #4]
 80211b8:	23ac      	movs	r3, #172	@ 0xac
 80211ba:	005b      	lsls	r3, r3, #1
 80211bc:	2101      	movs	r1, #1
 80211be:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80211c0:	687a      	ldr	r2, [r7, #4]
 80211c2:	23b2      	movs	r3, #178	@ 0xb2
 80211c4:	005b      	lsls	r3, r3, #1
 80211c6:	2140      	movs	r1, #64	@ 0x40
 80211c8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80211ca:	6878      	ldr	r0, [r7, #4]
 80211cc:	2340      	movs	r3, #64	@ 0x40
 80211ce:	2200      	movs	r2, #0
 80211d0:	2180      	movs	r1, #128	@ 0x80
 80211d2:	f001 fb66 	bl	80228a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	2201      	movs	r2, #1
 80211da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	2240      	movs	r2, #64	@ 0x40
 80211e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80211e2:	687a      	ldr	r2, [r7, #4]
 80211e4:	23a7      	movs	r3, #167	@ 0xa7
 80211e6:	009b      	lsls	r3, r3, #2
 80211e8:	2101      	movs	r1, #1
 80211ea:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80211ec:	687a      	ldr	r2, [r7, #4]
 80211ee:	23a5      	movs	r3, #165	@ 0xa5
 80211f0:	009b      	lsls	r3, r3, #2
 80211f2:	2100      	movs	r1, #0
 80211f4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	2200      	movs	r2, #0
 80211fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80211fc:	687a      	ldr	r2, [r7, #4]
 80211fe:	23a9      	movs	r3, #169	@ 0xa9
 8021200:	009b      	lsls	r3, r3, #2
 8021202:	2100      	movs	r1, #0
 8021204:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021206:	687a      	ldr	r2, [r7, #4]
 8021208:	23ae      	movs	r3, #174	@ 0xae
 802120a:	009b      	lsls	r3, r3, #2
 802120c:	58d3      	ldr	r3, [r2, r3]
 802120e:	2b00      	cmp	r3, #0
 8021210:	d00a      	beq.n	8021228 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021212:	687a      	ldr	r2, [r7, #4]
 8021214:	23ad      	movs	r3, #173	@ 0xad
 8021216:	009b      	lsls	r3, r3, #2
 8021218:	58d3      	ldr	r3, [r2, r3]
 802121a:	685a      	ldr	r2, [r3, #4]
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	b2d9      	uxtb	r1, r3
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	0018      	movs	r0, r3
 8021226:	4790      	blx	r2
  }

  return USBD_OK;
 8021228:	2300      	movs	r3, #0
}
 802122a:	0018      	movs	r0, r3
 802122c:	46bd      	mov	sp, r7
 802122e:	b002      	add	sp, #8
 8021230:	bd80      	pop	{r7, pc}

08021232 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021232:	b580      	push	{r7, lr}
 8021234:	b082      	sub	sp, #8
 8021236:	af00      	add	r7, sp, #0
 8021238:	6078      	str	r0, [r7, #4]
 802123a:	000a      	movs	r2, r1
 802123c:	1cfb      	adds	r3, r7, #3
 802123e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	1cfa      	adds	r2, r7, #3
 8021244:	7812      	ldrb	r2, [r2, #0]
 8021246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021248:	2300      	movs	r3, #0
}
 802124a:	0018      	movs	r0, r3
 802124c:	46bd      	mov	sp, r7
 802124e:	b002      	add	sp, #8
 8021250:	bd80      	pop	{r7, pc}
	...

08021254 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021254:	b580      	push	{r7, lr}
 8021256:	b082      	sub	sp, #8
 8021258:	af00      	add	r7, sp, #0
 802125a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802125c:	687a      	ldr	r2, [r7, #4]
 802125e:	23a7      	movs	r3, #167	@ 0xa7
 8021260:	009b      	lsls	r3, r3, #2
 8021262:	5cd1      	ldrb	r1, [r2, r3]
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	4a06      	ldr	r2, [pc, #24]	@ (8021280 <USBD_LL_Suspend+0x2c>)
 8021268:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802126a:	687a      	ldr	r2, [r7, #4]
 802126c:	23a7      	movs	r3, #167	@ 0xa7
 802126e:	009b      	lsls	r3, r3, #2
 8021270:	2104      	movs	r1, #4
 8021272:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8021274:	2300      	movs	r3, #0
}
 8021276:	0018      	movs	r0, r3
 8021278:	46bd      	mov	sp, r7
 802127a:	b002      	add	sp, #8
 802127c:	bd80      	pop	{r7, pc}
 802127e:	46c0      	nop			@ (mov r8, r8)
 8021280:	0000029d 	.word	0x0000029d

08021284 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021284:	b580      	push	{r7, lr}
 8021286:	b082      	sub	sp, #8
 8021288:	af00      	add	r7, sp, #0
 802128a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802128c:	687a      	ldr	r2, [r7, #4]
 802128e:	23a7      	movs	r3, #167	@ 0xa7
 8021290:	009b      	lsls	r3, r3, #2
 8021292:	5cd3      	ldrb	r3, [r2, r3]
 8021294:	2b04      	cmp	r3, #4
 8021296:	d106      	bne.n	80212a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	4a05      	ldr	r2, [pc, #20]	@ (80212b0 <USBD_LL_Resume+0x2c>)
 802129c:	5c99      	ldrb	r1, [r3, r2]
 802129e:	687a      	ldr	r2, [r7, #4]
 80212a0:	23a7      	movs	r3, #167	@ 0xa7
 80212a2:	009b      	lsls	r3, r3, #2
 80212a4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80212a6:	2300      	movs	r3, #0
}
 80212a8:	0018      	movs	r0, r3
 80212aa:	46bd      	mov	sp, r7
 80212ac:	b002      	add	sp, #8
 80212ae:	bd80      	pop	{r7, pc}
 80212b0:	0000029d 	.word	0x0000029d

080212b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b082      	sub	sp, #8
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212bc:	687a      	ldr	r2, [r7, #4]
 80212be:	23a7      	movs	r3, #167	@ 0xa7
 80212c0:	009b      	lsls	r3, r3, #2
 80212c2:	5cd3      	ldrb	r3, [r2, r3]
 80212c4:	2b03      	cmp	r3, #3
 80212c6:	d10e      	bne.n	80212e6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80212c8:	687a      	ldr	r2, [r7, #4]
 80212ca:	23ad      	movs	r3, #173	@ 0xad
 80212cc:	009b      	lsls	r3, r3, #2
 80212ce:	58d3      	ldr	r3, [r2, r3]
 80212d0:	69db      	ldr	r3, [r3, #28]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d007      	beq.n	80212e6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80212d6:	687a      	ldr	r2, [r7, #4]
 80212d8:	23ad      	movs	r3, #173	@ 0xad
 80212da:	009b      	lsls	r3, r3, #2
 80212dc:	58d3      	ldr	r3, [r2, r3]
 80212de:	69db      	ldr	r3, [r3, #28]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	0010      	movs	r0, r2
 80212e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80212e6:	2300      	movs	r3, #0
}
 80212e8:	0018      	movs	r0, r3
 80212ea:	46bd      	mov	sp, r7
 80212ec:	b002      	add	sp, #8
 80212ee:	bd80      	pop	{r7, pc}

080212f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80212f0:	b580      	push	{r7, lr}
 80212f2:	b084      	sub	sp, #16
 80212f4:	af00      	add	r7, sp, #0
 80212f6:	6078      	str	r0, [r7, #4]
 80212f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80212fa:	230f      	movs	r3, #15
 80212fc:	18fb      	adds	r3, r7, r3
 80212fe:	2200      	movs	r2, #0
 8021300:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021302:	683b      	ldr	r3, [r7, #0]
 8021304:	781b      	ldrb	r3, [r3, #0]
 8021306:	001a      	movs	r2, r3
 8021308:	2360      	movs	r3, #96	@ 0x60
 802130a:	4013      	ands	r3, r2
 802130c:	2b40      	cmp	r3, #64	@ 0x40
 802130e:	d004      	beq.n	802131a <USBD_StdDevReq+0x2a>
 8021310:	d84f      	bhi.n	80213b2 <USBD_StdDevReq+0xc2>
 8021312:	2b00      	cmp	r3, #0
 8021314:	d00b      	beq.n	802132e <USBD_StdDevReq+0x3e>
 8021316:	2b20      	cmp	r3, #32
 8021318:	d14b      	bne.n	80213b2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802131a:	687a      	ldr	r2, [r7, #4]
 802131c:	23ad      	movs	r3, #173	@ 0xad
 802131e:	009b      	lsls	r3, r3, #2
 8021320:	58d3      	ldr	r3, [r2, r3]
 8021322:	689b      	ldr	r3, [r3, #8]
 8021324:	6839      	ldr	r1, [r7, #0]
 8021326:	687a      	ldr	r2, [r7, #4]
 8021328:	0010      	movs	r0, r2
 802132a:	4798      	blx	r3
      break;
 802132c:	e048      	b.n	80213c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802132e:	683b      	ldr	r3, [r7, #0]
 8021330:	785b      	ldrb	r3, [r3, #1]
 8021332:	2b09      	cmp	r3, #9
 8021334:	d835      	bhi.n	80213a2 <USBD_StdDevReq+0xb2>
 8021336:	009a      	lsls	r2, r3, #2
 8021338:	4b25      	ldr	r3, [pc, #148]	@ (80213d0 <USBD_StdDevReq+0xe0>)
 802133a:	18d3      	adds	r3, r2, r3
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021340:	683a      	ldr	r2, [r7, #0]
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	0011      	movs	r1, r2
 8021346:	0018      	movs	r0, r3
 8021348:	f000 fa52 	bl	80217f0 <USBD_GetDescriptor>
          break;
 802134c:	e030      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802134e:	683a      	ldr	r2, [r7, #0]
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	0011      	movs	r1, r2
 8021354:	0018      	movs	r0, r3
 8021356:	f000 fbfd 	bl	8021b54 <USBD_SetAddress>
          break;
 802135a:	e029      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802135c:	683a      	ldr	r2, [r7, #0]
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	0011      	movs	r1, r2
 8021362:	0018      	movs	r0, r3
 8021364:	f000 fc4a 	bl	8021bfc <USBD_SetConfig>
          break;
 8021368:	e022      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802136a:	683a      	ldr	r2, [r7, #0]
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	0011      	movs	r1, r2
 8021370:	0018      	movs	r0, r3
 8021372:	f000 fce7 	bl	8021d44 <USBD_GetConfig>
          break;
 8021376:	e01b      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021378:	683a      	ldr	r2, [r7, #0]
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	0011      	movs	r1, r2
 802137e:	0018      	movs	r0, r3
 8021380:	f000 fd1b 	bl	8021dba <USBD_GetStatus>
          break;
 8021384:	e014      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021386:	683a      	ldr	r2, [r7, #0]
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	0011      	movs	r1, r2
 802138c:	0018      	movs	r0, r3
 802138e:	f000 fd4e 	bl	8021e2e <USBD_SetFeature>
          break;
 8021392:	e00d      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021394:	683a      	ldr	r2, [r7, #0]
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	0011      	movs	r1, r2
 802139a:	0018      	movs	r0, r3
 802139c:	f000 fd5d 	bl	8021e5a <USBD_ClrFeature>
          break;
 80213a0:	e006      	b.n	80213b0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80213a2:	683a      	ldr	r2, [r7, #0]
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	0011      	movs	r1, r2
 80213a8:	0018      	movs	r0, r3
 80213aa:	f000 fdb4 	bl	8021f16 <USBD_CtlError>
          break;
 80213ae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80213b0:	e006      	b.n	80213c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80213b2:	683a      	ldr	r2, [r7, #0]
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	0011      	movs	r1, r2
 80213b8:	0018      	movs	r0, r3
 80213ba:	f000 fdac 	bl	8021f16 <USBD_CtlError>
      break;
 80213be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80213c0:	230f      	movs	r3, #15
 80213c2:	18fb      	adds	r3, r7, r3
 80213c4:	781b      	ldrb	r3, [r3, #0]
}
 80213c6:	0018      	movs	r0, r3
 80213c8:	46bd      	mov	sp, r7
 80213ca:	b004      	add	sp, #16
 80213cc:	bd80      	pop	{r7, pc}
 80213ce:	46c0      	nop			@ (mov r8, r8)
 80213d0:	0802dcb0 	.word	0x0802dcb0

080213d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80213d4:	b5b0      	push	{r4, r5, r7, lr}
 80213d6:	b084      	sub	sp, #16
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
 80213dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80213de:	230f      	movs	r3, #15
 80213e0:	18fb      	adds	r3, r7, r3
 80213e2:	2200      	movs	r2, #0
 80213e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	781b      	ldrb	r3, [r3, #0]
 80213ea:	001a      	movs	r2, r3
 80213ec:	2360      	movs	r3, #96	@ 0x60
 80213ee:	4013      	ands	r3, r2
 80213f0:	2b40      	cmp	r3, #64	@ 0x40
 80213f2:	d004      	beq.n	80213fe <USBD_StdItfReq+0x2a>
 80213f4:	d839      	bhi.n	802146a <USBD_StdItfReq+0x96>
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d001      	beq.n	80213fe <USBD_StdItfReq+0x2a>
 80213fa:	2b20      	cmp	r3, #32
 80213fc:	d135      	bne.n	802146a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80213fe:	687a      	ldr	r2, [r7, #4]
 8021400:	23a7      	movs	r3, #167	@ 0xa7
 8021402:	009b      	lsls	r3, r3, #2
 8021404:	5cd3      	ldrb	r3, [r2, r3]
 8021406:	3b01      	subs	r3, #1
 8021408:	2b02      	cmp	r3, #2
 802140a:	d825      	bhi.n	8021458 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802140c:	683b      	ldr	r3, [r7, #0]
 802140e:	889b      	ldrh	r3, [r3, #4]
 8021410:	b2db      	uxtb	r3, r3
 8021412:	2b01      	cmp	r3, #1
 8021414:	d819      	bhi.n	802144a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021416:	687a      	ldr	r2, [r7, #4]
 8021418:	23ad      	movs	r3, #173	@ 0xad
 802141a:	009b      	lsls	r3, r3, #2
 802141c:	58d3      	ldr	r3, [r2, r3]
 802141e:	689b      	ldr	r3, [r3, #8]
 8021420:	250f      	movs	r5, #15
 8021422:	197c      	adds	r4, r7, r5
 8021424:	6839      	ldr	r1, [r7, #0]
 8021426:	687a      	ldr	r2, [r7, #4]
 8021428:	0010      	movs	r0, r2
 802142a:	4798      	blx	r3
 802142c:	0003      	movs	r3, r0
 802142e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021430:	683b      	ldr	r3, [r7, #0]
 8021432:	88db      	ldrh	r3, [r3, #6]
 8021434:	2b00      	cmp	r3, #0
 8021436:	d116      	bne.n	8021466 <USBD_StdItfReq+0x92>
 8021438:	197b      	adds	r3, r7, r5
 802143a:	781b      	ldrb	r3, [r3, #0]
 802143c:	2b00      	cmp	r3, #0
 802143e:	d112      	bne.n	8021466 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	0018      	movs	r0, r3
 8021444:	f000 fe4f 	bl	80220e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021448:	e00d      	b.n	8021466 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802144a:	683a      	ldr	r2, [r7, #0]
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	0011      	movs	r1, r2
 8021450:	0018      	movs	r0, r3
 8021452:	f000 fd60 	bl	8021f16 <USBD_CtlError>
          break;
 8021456:	e006      	b.n	8021466 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8021458:	683a      	ldr	r2, [r7, #0]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	0011      	movs	r1, r2
 802145e:	0018      	movs	r0, r3
 8021460:	f000 fd59 	bl	8021f16 <USBD_CtlError>
          break;
 8021464:	e000      	b.n	8021468 <USBD_StdItfReq+0x94>
          break;
 8021466:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021468:	e006      	b.n	8021478 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802146a:	683a      	ldr	r2, [r7, #0]
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	0011      	movs	r1, r2
 8021470:	0018      	movs	r0, r3
 8021472:	f000 fd50 	bl	8021f16 <USBD_CtlError>
      break;
 8021476:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021478:	2300      	movs	r3, #0
}
 802147a:	0018      	movs	r0, r3
 802147c:	46bd      	mov	sp, r7
 802147e:	b004      	add	sp, #16
 8021480:	bdb0      	pop	{r4, r5, r7, pc}

08021482 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8021482:	b5b0      	push	{r4, r5, r7, lr}
 8021484:	b084      	sub	sp, #16
 8021486:	af00      	add	r7, sp, #0
 8021488:	6078      	str	r0, [r7, #4]
 802148a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 802148c:	230f      	movs	r3, #15
 802148e:	18fb      	adds	r3, r7, r3
 8021490:	2200      	movs	r2, #0
 8021492:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8021494:	683b      	ldr	r3, [r7, #0]
 8021496:	889a      	ldrh	r2, [r3, #4]
 8021498:	230e      	movs	r3, #14
 802149a:	18fb      	adds	r3, r7, r3
 802149c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802149e:	683b      	ldr	r3, [r7, #0]
 80214a0:	781b      	ldrb	r3, [r3, #0]
 80214a2:	001a      	movs	r2, r3
 80214a4:	2360      	movs	r3, #96	@ 0x60
 80214a6:	4013      	ands	r3, r2
 80214a8:	2b40      	cmp	r3, #64	@ 0x40
 80214aa:	d006      	beq.n	80214ba <USBD_StdEPReq+0x38>
 80214ac:	d900      	bls.n	80214b0 <USBD_StdEPReq+0x2e>
 80214ae:	e190      	b.n	80217d2 <USBD_StdEPReq+0x350>
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d00c      	beq.n	80214ce <USBD_StdEPReq+0x4c>
 80214b4:	2b20      	cmp	r3, #32
 80214b6:	d000      	beq.n	80214ba <USBD_StdEPReq+0x38>
 80214b8:	e18b      	b.n	80217d2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80214ba:	687a      	ldr	r2, [r7, #4]
 80214bc:	23ad      	movs	r3, #173	@ 0xad
 80214be:	009b      	lsls	r3, r3, #2
 80214c0:	58d3      	ldr	r3, [r2, r3]
 80214c2:	689b      	ldr	r3, [r3, #8]
 80214c4:	6839      	ldr	r1, [r7, #0]
 80214c6:	687a      	ldr	r2, [r7, #4]
 80214c8:	0010      	movs	r0, r2
 80214ca:	4798      	blx	r3
      break;
 80214cc:	e188      	b.n	80217e0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80214ce:	683b      	ldr	r3, [r7, #0]
 80214d0:	781b      	ldrb	r3, [r3, #0]
 80214d2:	001a      	movs	r2, r3
 80214d4:	2360      	movs	r3, #96	@ 0x60
 80214d6:	4013      	ands	r3, r2
 80214d8:	2b20      	cmp	r3, #32
 80214da:	d10f      	bne.n	80214fc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80214dc:	687a      	ldr	r2, [r7, #4]
 80214de:	23ad      	movs	r3, #173	@ 0xad
 80214e0:	009b      	lsls	r3, r3, #2
 80214e2:	58d3      	ldr	r3, [r2, r3]
 80214e4:	689b      	ldr	r3, [r3, #8]
 80214e6:	250f      	movs	r5, #15
 80214e8:	197c      	adds	r4, r7, r5
 80214ea:	6839      	ldr	r1, [r7, #0]
 80214ec:	687a      	ldr	r2, [r7, #4]
 80214ee:	0010      	movs	r0, r2
 80214f0:	4798      	blx	r3
 80214f2:	0003      	movs	r3, r0
 80214f4:	7023      	strb	r3, [r4, #0]

        return ret;
 80214f6:	197b      	adds	r3, r7, r5
 80214f8:	781b      	ldrb	r3, [r3, #0]
 80214fa:	e174      	b.n	80217e6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80214fc:	683b      	ldr	r3, [r7, #0]
 80214fe:	785b      	ldrb	r3, [r3, #1]
 8021500:	2b03      	cmp	r3, #3
 8021502:	d007      	beq.n	8021514 <USBD_StdEPReq+0x92>
 8021504:	dd00      	ble.n	8021508 <USBD_StdEPReq+0x86>
 8021506:	e15c      	b.n	80217c2 <USBD_StdEPReq+0x340>
 8021508:	2b00      	cmp	r3, #0
 802150a:	d100      	bne.n	802150e <USBD_StdEPReq+0x8c>
 802150c:	e092      	b.n	8021634 <USBD_StdEPReq+0x1b2>
 802150e:	2b01      	cmp	r3, #1
 8021510:	d04b      	beq.n	80215aa <USBD_StdEPReq+0x128>
 8021512:	e156      	b.n	80217c2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021514:	687a      	ldr	r2, [r7, #4]
 8021516:	23a7      	movs	r3, #167	@ 0xa7
 8021518:	009b      	lsls	r3, r3, #2
 802151a:	5cd3      	ldrb	r3, [r2, r3]
 802151c:	2b02      	cmp	r3, #2
 802151e:	d002      	beq.n	8021526 <USBD_StdEPReq+0xa4>
 8021520:	2b03      	cmp	r3, #3
 8021522:	d01d      	beq.n	8021560 <USBD_StdEPReq+0xde>
 8021524:	e039      	b.n	802159a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021526:	220e      	movs	r2, #14
 8021528:	18bb      	adds	r3, r7, r2
 802152a:	781b      	ldrb	r3, [r3, #0]
 802152c:	2b00      	cmp	r3, #0
 802152e:	d010      	beq.n	8021552 <USBD_StdEPReq+0xd0>
 8021530:	18bb      	adds	r3, r7, r2
 8021532:	781b      	ldrb	r3, [r3, #0]
 8021534:	2b80      	cmp	r3, #128	@ 0x80
 8021536:	d00c      	beq.n	8021552 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021538:	18bb      	adds	r3, r7, r2
 802153a:	781a      	ldrb	r2, [r3, #0]
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	0011      	movs	r1, r2
 8021540:	0018      	movs	r0, r3
 8021542:	f001 fa10 	bl	8022966 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	2180      	movs	r1, #128	@ 0x80
 802154a:	0018      	movs	r0, r3
 802154c:	f001 fa0b 	bl	8022966 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021550:	e02a      	b.n	80215a8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8021552:	683a      	ldr	r2, [r7, #0]
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	0011      	movs	r1, r2
 8021558:	0018      	movs	r0, r3
 802155a:	f000 fcdc 	bl	8021f16 <USBD_CtlError>
              break;
 802155e:	e023      	b.n	80215a8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021560:	683b      	ldr	r3, [r7, #0]
 8021562:	885b      	ldrh	r3, [r3, #2]
 8021564:	2b00      	cmp	r3, #0
 8021566:	d113      	bne.n	8021590 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8021568:	220e      	movs	r2, #14
 802156a:	18bb      	adds	r3, r7, r2
 802156c:	781b      	ldrb	r3, [r3, #0]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d00e      	beq.n	8021590 <USBD_StdEPReq+0x10e>
 8021572:	18bb      	adds	r3, r7, r2
 8021574:	781b      	ldrb	r3, [r3, #0]
 8021576:	2b80      	cmp	r3, #128	@ 0x80
 8021578:	d00a      	beq.n	8021590 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802157a:	683b      	ldr	r3, [r7, #0]
 802157c:	88db      	ldrh	r3, [r3, #6]
 802157e:	2b00      	cmp	r3, #0
 8021580:	d106      	bne.n	8021590 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8021582:	18bb      	adds	r3, r7, r2
 8021584:	781a      	ldrb	r2, [r3, #0]
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	0011      	movs	r1, r2
 802158a:	0018      	movs	r0, r3
 802158c:	f001 f9eb 	bl	8022966 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	0018      	movs	r0, r3
 8021594:	f000 fda7 	bl	80220e6 <USBD_CtlSendStatus>

              break;
 8021598:	e006      	b.n	80215a8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 802159a:	683a      	ldr	r2, [r7, #0]
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	0011      	movs	r1, r2
 80215a0:	0018      	movs	r0, r3
 80215a2:	f000 fcb8 	bl	8021f16 <USBD_CtlError>
              break;
 80215a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80215a8:	e112      	b.n	80217d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80215aa:	687a      	ldr	r2, [r7, #4]
 80215ac:	23a7      	movs	r3, #167	@ 0xa7
 80215ae:	009b      	lsls	r3, r3, #2
 80215b0:	5cd3      	ldrb	r3, [r2, r3]
 80215b2:	2b02      	cmp	r3, #2
 80215b4:	d002      	beq.n	80215bc <USBD_StdEPReq+0x13a>
 80215b6:	2b03      	cmp	r3, #3
 80215b8:	d01d      	beq.n	80215f6 <USBD_StdEPReq+0x174>
 80215ba:	e032      	b.n	8021622 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80215bc:	220e      	movs	r2, #14
 80215be:	18bb      	adds	r3, r7, r2
 80215c0:	781b      	ldrb	r3, [r3, #0]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d010      	beq.n	80215e8 <USBD_StdEPReq+0x166>
 80215c6:	18bb      	adds	r3, r7, r2
 80215c8:	781b      	ldrb	r3, [r3, #0]
 80215ca:	2b80      	cmp	r3, #128	@ 0x80
 80215cc:	d00c      	beq.n	80215e8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80215ce:	18bb      	adds	r3, r7, r2
 80215d0:	781a      	ldrb	r2, [r3, #0]
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	0011      	movs	r1, r2
 80215d6:	0018      	movs	r0, r3
 80215d8:	f001 f9c5 	bl	8022966 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	2180      	movs	r1, #128	@ 0x80
 80215e0:	0018      	movs	r0, r3
 80215e2:	f001 f9c0 	bl	8022966 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80215e6:	e024      	b.n	8021632 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80215e8:	683a      	ldr	r2, [r7, #0]
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	0011      	movs	r1, r2
 80215ee:	0018      	movs	r0, r3
 80215f0:	f000 fc91 	bl	8021f16 <USBD_CtlError>
              break;
 80215f4:	e01d      	b.n	8021632 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80215f6:	683b      	ldr	r3, [r7, #0]
 80215f8:	885b      	ldrh	r3, [r3, #2]
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d118      	bne.n	8021630 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80215fe:	210e      	movs	r1, #14
 8021600:	187b      	adds	r3, r7, r1
 8021602:	781b      	ldrb	r3, [r3, #0]
 8021604:	227f      	movs	r2, #127	@ 0x7f
 8021606:	4013      	ands	r3, r2
 8021608:	d006      	beq.n	8021618 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802160a:	187b      	adds	r3, r7, r1
 802160c:	781a      	ldrb	r2, [r3, #0]
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	0011      	movs	r1, r2
 8021612:	0018      	movs	r0, r3
 8021614:	f001 f9d2 	bl	80229bc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	0018      	movs	r0, r3
 802161c:	f000 fd63 	bl	80220e6 <USBD_CtlSendStatus>
              }
              break;
 8021620:	e006      	b.n	8021630 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8021622:	683a      	ldr	r2, [r7, #0]
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	0011      	movs	r1, r2
 8021628:	0018      	movs	r0, r3
 802162a:	f000 fc74 	bl	8021f16 <USBD_CtlError>
              break;
 802162e:	e000      	b.n	8021632 <USBD_StdEPReq+0x1b0>
              break;
 8021630:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021632:	e0cd      	b.n	80217d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021634:	687a      	ldr	r2, [r7, #4]
 8021636:	23a7      	movs	r3, #167	@ 0xa7
 8021638:	009b      	lsls	r3, r3, #2
 802163a:	5cd3      	ldrb	r3, [r2, r3]
 802163c:	2b02      	cmp	r3, #2
 802163e:	d002      	beq.n	8021646 <USBD_StdEPReq+0x1c4>
 8021640:	2b03      	cmp	r3, #3
 8021642:	d03c      	beq.n	80216be <USBD_StdEPReq+0x23c>
 8021644:	e0b5      	b.n	80217b2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021646:	220e      	movs	r2, #14
 8021648:	18bb      	adds	r3, r7, r2
 802164a:	781b      	ldrb	r3, [r3, #0]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d00a      	beq.n	8021666 <USBD_StdEPReq+0x1e4>
 8021650:	18bb      	adds	r3, r7, r2
 8021652:	781b      	ldrb	r3, [r3, #0]
 8021654:	2b80      	cmp	r3, #128	@ 0x80
 8021656:	d006      	beq.n	8021666 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8021658:	683a      	ldr	r2, [r7, #0]
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	0011      	movs	r1, r2
 802165e:	0018      	movs	r0, r3
 8021660:	f000 fc59 	bl	8021f16 <USBD_CtlError>
                break;
 8021664:	e0ac      	b.n	80217c0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021666:	220e      	movs	r2, #14
 8021668:	18bb      	adds	r3, r7, r2
 802166a:	781b      	ldrb	r3, [r3, #0]
 802166c:	b25b      	sxtb	r3, r3
 802166e:	2b00      	cmp	r3, #0
 8021670:	da0c      	bge.n	802168c <USBD_StdEPReq+0x20a>
 8021672:	18bb      	adds	r3, r7, r2
 8021674:	781b      	ldrb	r3, [r3, #0]
 8021676:	227f      	movs	r2, #127	@ 0x7f
 8021678:	401a      	ands	r2, r3
 802167a:	0013      	movs	r3, r2
 802167c:	009b      	lsls	r3, r3, #2
 802167e:	189b      	adds	r3, r3, r2
 8021680:	009b      	lsls	r3, r3, #2
 8021682:	3310      	adds	r3, #16
 8021684:	687a      	ldr	r2, [r7, #4]
 8021686:	18d3      	adds	r3, r2, r3
 8021688:	3304      	adds	r3, #4
 802168a:	e00d      	b.n	80216a8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802168c:	230e      	movs	r3, #14
 802168e:	18fb      	adds	r3, r7, r3
 8021690:	781b      	ldrb	r3, [r3, #0]
 8021692:	227f      	movs	r2, #127	@ 0x7f
 8021694:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021696:	0013      	movs	r3, r2
 8021698:	009b      	lsls	r3, r3, #2
 802169a:	189b      	adds	r3, r3, r2
 802169c:	009b      	lsls	r3, r3, #2
 802169e:	3351      	adds	r3, #81	@ 0x51
 80216a0:	33ff      	adds	r3, #255	@ 0xff
 80216a2:	687a      	ldr	r2, [r7, #4]
 80216a4:	18d3      	adds	r3, r2, r3
 80216a6:	3304      	adds	r3, #4
 80216a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80216aa:	68bb      	ldr	r3, [r7, #8]
 80216ac:	2200      	movs	r2, #0
 80216ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80216b0:	68b9      	ldr	r1, [r7, #8]
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	2202      	movs	r2, #2
 80216b6:	0018      	movs	r0, r3
 80216b8:	f000 fcab 	bl	8022012 <USBD_CtlSendData>
              break;
 80216bc:	e080      	b.n	80217c0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80216be:	220e      	movs	r2, #14
 80216c0:	18bb      	adds	r3, r7, r2
 80216c2:	781b      	ldrb	r3, [r3, #0]
 80216c4:	b25b      	sxtb	r3, r3
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	da14      	bge.n	80216f4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80216ca:	18bb      	adds	r3, r7, r2
 80216cc:	781b      	ldrb	r3, [r3, #0]
 80216ce:	220f      	movs	r2, #15
 80216d0:	401a      	ands	r2, r3
 80216d2:	6879      	ldr	r1, [r7, #4]
 80216d4:	0013      	movs	r3, r2
 80216d6:	009b      	lsls	r3, r3, #2
 80216d8:	189b      	adds	r3, r3, r2
 80216da:	009b      	lsls	r3, r3, #2
 80216dc:	18cb      	adds	r3, r1, r3
 80216de:	3318      	adds	r3, #24
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d11e      	bne.n	8021724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80216e6:	683a      	ldr	r2, [r7, #0]
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	0011      	movs	r1, r2
 80216ec:	0018      	movs	r0, r3
 80216ee:	f000 fc12 	bl	8021f16 <USBD_CtlError>
                  break;
 80216f2:	e065      	b.n	80217c0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80216f4:	230e      	movs	r3, #14
 80216f6:	18fb      	adds	r3, r7, r3
 80216f8:	781b      	ldrb	r3, [r3, #0]
 80216fa:	220f      	movs	r2, #15
 80216fc:	401a      	ands	r2, r3
 80216fe:	6878      	ldr	r0, [r7, #4]
 8021700:	23ac      	movs	r3, #172	@ 0xac
 8021702:	0059      	lsls	r1, r3, #1
 8021704:	0013      	movs	r3, r2
 8021706:	009b      	lsls	r3, r3, #2
 8021708:	189b      	adds	r3, r3, r2
 802170a:	009b      	lsls	r3, r3, #2
 802170c:	18c3      	adds	r3, r0, r3
 802170e:	185b      	adds	r3, r3, r1
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d106      	bne.n	8021724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8021716:	683a      	ldr	r2, [r7, #0]
 8021718:	687b      	ldr	r3, [r7, #4]
 802171a:	0011      	movs	r1, r2
 802171c:	0018      	movs	r0, r3
 802171e:	f000 fbfa 	bl	8021f16 <USBD_CtlError>
                  break;
 8021722:	e04d      	b.n	80217c0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021724:	220e      	movs	r2, #14
 8021726:	18bb      	adds	r3, r7, r2
 8021728:	781b      	ldrb	r3, [r3, #0]
 802172a:	b25b      	sxtb	r3, r3
 802172c:	2b00      	cmp	r3, #0
 802172e:	da0c      	bge.n	802174a <USBD_StdEPReq+0x2c8>
 8021730:	18bb      	adds	r3, r7, r2
 8021732:	781b      	ldrb	r3, [r3, #0]
 8021734:	227f      	movs	r2, #127	@ 0x7f
 8021736:	401a      	ands	r2, r3
 8021738:	0013      	movs	r3, r2
 802173a:	009b      	lsls	r3, r3, #2
 802173c:	189b      	adds	r3, r3, r2
 802173e:	009b      	lsls	r3, r3, #2
 8021740:	3310      	adds	r3, #16
 8021742:	687a      	ldr	r2, [r7, #4]
 8021744:	18d3      	adds	r3, r2, r3
 8021746:	3304      	adds	r3, #4
 8021748:	e00d      	b.n	8021766 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802174a:	230e      	movs	r3, #14
 802174c:	18fb      	adds	r3, r7, r3
 802174e:	781b      	ldrb	r3, [r3, #0]
 8021750:	227f      	movs	r2, #127	@ 0x7f
 8021752:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021754:	0013      	movs	r3, r2
 8021756:	009b      	lsls	r3, r3, #2
 8021758:	189b      	adds	r3, r3, r2
 802175a:	009b      	lsls	r3, r3, #2
 802175c:	3351      	adds	r3, #81	@ 0x51
 802175e:	33ff      	adds	r3, #255	@ 0xff
 8021760:	687a      	ldr	r2, [r7, #4]
 8021762:	18d3      	adds	r3, r2, r3
 8021764:	3304      	adds	r3, #4
 8021766:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021768:	220e      	movs	r2, #14
 802176a:	18bb      	adds	r3, r7, r2
 802176c:	781b      	ldrb	r3, [r3, #0]
 802176e:	2b00      	cmp	r3, #0
 8021770:	d003      	beq.n	802177a <USBD_StdEPReq+0x2f8>
 8021772:	18bb      	adds	r3, r7, r2
 8021774:	781b      	ldrb	r3, [r3, #0]
 8021776:	2b80      	cmp	r3, #128	@ 0x80
 8021778:	d103      	bne.n	8021782 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 802177a:	68bb      	ldr	r3, [r7, #8]
 802177c:	2200      	movs	r2, #0
 802177e:	601a      	str	r2, [r3, #0]
 8021780:	e010      	b.n	80217a4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8021782:	230e      	movs	r3, #14
 8021784:	18fb      	adds	r3, r7, r3
 8021786:	781a      	ldrb	r2, [r3, #0]
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	0011      	movs	r1, r2
 802178c:	0018      	movs	r0, r3
 802178e:	f001 f940 	bl	8022a12 <USBD_LL_IsStallEP>
 8021792:	1e03      	subs	r3, r0, #0
 8021794:	d003      	beq.n	802179e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8021796:	68bb      	ldr	r3, [r7, #8]
 8021798:	2201      	movs	r2, #1
 802179a:	601a      	str	r2, [r3, #0]
 802179c:	e002      	b.n	80217a4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 802179e:	68bb      	ldr	r3, [r7, #8]
 80217a0:	2200      	movs	r2, #0
 80217a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80217a4:	68b9      	ldr	r1, [r7, #8]
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	2202      	movs	r2, #2
 80217aa:	0018      	movs	r0, r3
 80217ac:	f000 fc31 	bl	8022012 <USBD_CtlSendData>
              break;
 80217b0:	e006      	b.n	80217c0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80217b2:	683a      	ldr	r2, [r7, #0]
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	0011      	movs	r1, r2
 80217b8:	0018      	movs	r0, r3
 80217ba:	f000 fbac 	bl	8021f16 <USBD_CtlError>
              break;
 80217be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80217c0:	e006      	b.n	80217d0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80217c2:	683a      	ldr	r2, [r7, #0]
 80217c4:	687b      	ldr	r3, [r7, #4]
 80217c6:	0011      	movs	r1, r2
 80217c8:	0018      	movs	r0, r3
 80217ca:	f000 fba4 	bl	8021f16 <USBD_CtlError>
          break;
 80217ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80217d0:	e006      	b.n	80217e0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80217d2:	683a      	ldr	r2, [r7, #0]
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	0011      	movs	r1, r2
 80217d8:	0018      	movs	r0, r3
 80217da:	f000 fb9c 	bl	8021f16 <USBD_CtlError>
      break;
 80217de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80217e0:	230f      	movs	r3, #15
 80217e2:	18fb      	adds	r3, r7, r3
 80217e4:	781b      	ldrb	r3, [r3, #0]
}
 80217e6:	0018      	movs	r0, r3
 80217e8:	46bd      	mov	sp, r7
 80217ea:	b004      	add	sp, #16
 80217ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080217f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80217f0:	b580      	push	{r7, lr}
 80217f2:	b084      	sub	sp, #16
 80217f4:	af00      	add	r7, sp, #0
 80217f6:	6078      	str	r0, [r7, #4]
 80217f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80217fa:	2308      	movs	r3, #8
 80217fc:	18fb      	adds	r3, r7, r3
 80217fe:	2200      	movs	r2, #0
 8021800:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8021802:	2300      	movs	r3, #0
 8021804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021806:	230b      	movs	r3, #11
 8021808:	18fb      	adds	r3, r7, r3
 802180a:	2200      	movs	r2, #0
 802180c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 802180e:	683b      	ldr	r3, [r7, #0]
 8021810:	885b      	ldrh	r3, [r3, #2]
 8021812:	0a1b      	lsrs	r3, r3, #8
 8021814:	b29b      	uxth	r3, r3
 8021816:	2b07      	cmp	r3, #7
 8021818:	d900      	bls.n	802181c <USBD_GetDescriptor+0x2c>
 802181a:	e159      	b.n	8021ad0 <USBD_GetDescriptor+0x2e0>
 802181c:	009a      	lsls	r2, r3, #2
 802181e:	4bcb      	ldr	r3, [pc, #812]	@ (8021b4c <USBD_GetDescriptor+0x35c>)
 8021820:	18d3      	adds	r3, r2, r3
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021826:	687a      	ldr	r2, [r7, #4]
 8021828:	23ac      	movs	r3, #172	@ 0xac
 802182a:	009b      	lsls	r3, r3, #2
 802182c:	58d3      	ldr	r3, [r2, r3]
 802182e:	681b      	ldr	r3, [r3, #0]
 8021830:	687a      	ldr	r2, [r7, #4]
 8021832:	7c12      	ldrb	r2, [r2, #16]
 8021834:	2108      	movs	r1, #8
 8021836:	1879      	adds	r1, r7, r1
 8021838:	0010      	movs	r0, r2
 802183a:	4798      	blx	r3
 802183c:	0003      	movs	r3, r0
 802183e:	60fb      	str	r3, [r7, #12]
      break;
 8021840:	e153      	b.n	8021aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	7c1b      	ldrb	r3, [r3, #16]
 8021846:	2b00      	cmp	r3, #0
 8021848:	d10f      	bne.n	802186a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802184a:	687a      	ldr	r2, [r7, #4]
 802184c:	23ad      	movs	r3, #173	@ 0xad
 802184e:	009b      	lsls	r3, r3, #2
 8021850:	58d3      	ldr	r3, [r2, r3]
 8021852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021854:	2208      	movs	r2, #8
 8021856:	18ba      	adds	r2, r7, r2
 8021858:	0010      	movs	r0, r2
 802185a:	4798      	blx	r3
 802185c:	0003      	movs	r3, r0
 802185e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021860:	68fb      	ldr	r3, [r7, #12]
 8021862:	3301      	adds	r3, #1
 8021864:	2202      	movs	r2, #2
 8021866:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021868:	e13f      	b.n	8021aea <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802186a:	687a      	ldr	r2, [r7, #4]
 802186c:	23ad      	movs	r3, #173	@ 0xad
 802186e:	009b      	lsls	r3, r3, #2
 8021870:	58d3      	ldr	r3, [r2, r3]
 8021872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021874:	2208      	movs	r2, #8
 8021876:	18ba      	adds	r2, r7, r2
 8021878:	0010      	movs	r0, r2
 802187a:	4798      	blx	r3
 802187c:	0003      	movs	r3, r0
 802187e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	3301      	adds	r3, #1
 8021884:	2202      	movs	r2, #2
 8021886:	701a      	strb	r2, [r3, #0]
      break;
 8021888:	e12f      	b.n	8021aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802188a:	683b      	ldr	r3, [r7, #0]
 802188c:	885b      	ldrh	r3, [r3, #2]
 802188e:	b2db      	uxtb	r3, r3
 8021890:	2b05      	cmp	r3, #5
 8021892:	d900      	bls.n	8021896 <USBD_GetDescriptor+0xa6>
 8021894:	e0d0      	b.n	8021a38 <USBD_GetDescriptor+0x248>
 8021896:	009a      	lsls	r2, r3, #2
 8021898:	4bad      	ldr	r3, [pc, #692]	@ (8021b50 <USBD_GetDescriptor+0x360>)
 802189a:	18d3      	adds	r3, r2, r3
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80218a0:	687a      	ldr	r2, [r7, #4]
 80218a2:	23ac      	movs	r3, #172	@ 0xac
 80218a4:	009b      	lsls	r3, r3, #2
 80218a6:	58d3      	ldr	r3, [r2, r3]
 80218a8:	685b      	ldr	r3, [r3, #4]
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d00d      	beq.n	80218ca <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80218ae:	687a      	ldr	r2, [r7, #4]
 80218b0:	23ac      	movs	r3, #172	@ 0xac
 80218b2:	009b      	lsls	r3, r3, #2
 80218b4:	58d3      	ldr	r3, [r2, r3]
 80218b6:	685b      	ldr	r3, [r3, #4]
 80218b8:	687a      	ldr	r2, [r7, #4]
 80218ba:	7c12      	ldrb	r2, [r2, #16]
 80218bc:	2108      	movs	r1, #8
 80218be:	1879      	adds	r1, r7, r1
 80218c0:	0010      	movs	r0, r2
 80218c2:	4798      	blx	r3
 80218c4:	0003      	movs	r3, r0
 80218c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80218c8:	e0c3      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80218ca:	683a      	ldr	r2, [r7, #0]
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	0011      	movs	r1, r2
 80218d0:	0018      	movs	r0, r3
 80218d2:	f000 fb20 	bl	8021f16 <USBD_CtlError>
            err++;
 80218d6:	210b      	movs	r1, #11
 80218d8:	187b      	adds	r3, r7, r1
 80218da:	781a      	ldrb	r2, [r3, #0]
 80218dc:	187b      	adds	r3, r7, r1
 80218de:	3201      	adds	r2, #1
 80218e0:	701a      	strb	r2, [r3, #0]
          break;
 80218e2:	e0b6      	b.n	8021a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80218e4:	687a      	ldr	r2, [r7, #4]
 80218e6:	23ac      	movs	r3, #172	@ 0xac
 80218e8:	009b      	lsls	r3, r3, #2
 80218ea:	58d3      	ldr	r3, [r2, r3]
 80218ec:	689b      	ldr	r3, [r3, #8]
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	d00d      	beq.n	802190e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80218f2:	687a      	ldr	r2, [r7, #4]
 80218f4:	23ac      	movs	r3, #172	@ 0xac
 80218f6:	009b      	lsls	r3, r3, #2
 80218f8:	58d3      	ldr	r3, [r2, r3]
 80218fa:	689b      	ldr	r3, [r3, #8]
 80218fc:	687a      	ldr	r2, [r7, #4]
 80218fe:	7c12      	ldrb	r2, [r2, #16]
 8021900:	2108      	movs	r1, #8
 8021902:	1879      	adds	r1, r7, r1
 8021904:	0010      	movs	r0, r2
 8021906:	4798      	blx	r3
 8021908:	0003      	movs	r3, r0
 802190a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802190c:	e0a1      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802190e:	683a      	ldr	r2, [r7, #0]
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	0011      	movs	r1, r2
 8021914:	0018      	movs	r0, r3
 8021916:	f000 fafe 	bl	8021f16 <USBD_CtlError>
            err++;
 802191a:	210b      	movs	r1, #11
 802191c:	187b      	adds	r3, r7, r1
 802191e:	781a      	ldrb	r2, [r3, #0]
 8021920:	187b      	adds	r3, r7, r1
 8021922:	3201      	adds	r2, #1
 8021924:	701a      	strb	r2, [r3, #0]
          break;
 8021926:	e094      	b.n	8021a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021928:	687a      	ldr	r2, [r7, #4]
 802192a:	23ac      	movs	r3, #172	@ 0xac
 802192c:	009b      	lsls	r3, r3, #2
 802192e:	58d3      	ldr	r3, [r2, r3]
 8021930:	68db      	ldr	r3, [r3, #12]
 8021932:	2b00      	cmp	r3, #0
 8021934:	d00d      	beq.n	8021952 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021936:	687a      	ldr	r2, [r7, #4]
 8021938:	23ac      	movs	r3, #172	@ 0xac
 802193a:	009b      	lsls	r3, r3, #2
 802193c:	58d3      	ldr	r3, [r2, r3]
 802193e:	68db      	ldr	r3, [r3, #12]
 8021940:	687a      	ldr	r2, [r7, #4]
 8021942:	7c12      	ldrb	r2, [r2, #16]
 8021944:	2108      	movs	r1, #8
 8021946:	1879      	adds	r1, r7, r1
 8021948:	0010      	movs	r0, r2
 802194a:	4798      	blx	r3
 802194c:	0003      	movs	r3, r0
 802194e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021950:	e07f      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021952:	683a      	ldr	r2, [r7, #0]
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	0011      	movs	r1, r2
 8021958:	0018      	movs	r0, r3
 802195a:	f000 fadc 	bl	8021f16 <USBD_CtlError>
            err++;
 802195e:	210b      	movs	r1, #11
 8021960:	187b      	adds	r3, r7, r1
 8021962:	781a      	ldrb	r2, [r3, #0]
 8021964:	187b      	adds	r3, r7, r1
 8021966:	3201      	adds	r2, #1
 8021968:	701a      	strb	r2, [r3, #0]
          break;
 802196a:	e072      	b.n	8021a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802196c:	687a      	ldr	r2, [r7, #4]
 802196e:	23ac      	movs	r3, #172	@ 0xac
 8021970:	009b      	lsls	r3, r3, #2
 8021972:	58d3      	ldr	r3, [r2, r3]
 8021974:	691b      	ldr	r3, [r3, #16]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d00d      	beq.n	8021996 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802197a:	687a      	ldr	r2, [r7, #4]
 802197c:	23ac      	movs	r3, #172	@ 0xac
 802197e:	009b      	lsls	r3, r3, #2
 8021980:	58d3      	ldr	r3, [r2, r3]
 8021982:	691b      	ldr	r3, [r3, #16]
 8021984:	687a      	ldr	r2, [r7, #4]
 8021986:	7c12      	ldrb	r2, [r2, #16]
 8021988:	2108      	movs	r1, #8
 802198a:	1879      	adds	r1, r7, r1
 802198c:	0010      	movs	r0, r2
 802198e:	4798      	blx	r3
 8021990:	0003      	movs	r3, r0
 8021992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021994:	e05d      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021996:	683a      	ldr	r2, [r7, #0]
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	0011      	movs	r1, r2
 802199c:	0018      	movs	r0, r3
 802199e:	f000 faba 	bl	8021f16 <USBD_CtlError>
            err++;
 80219a2:	210b      	movs	r1, #11
 80219a4:	187b      	adds	r3, r7, r1
 80219a6:	781a      	ldrb	r2, [r3, #0]
 80219a8:	187b      	adds	r3, r7, r1
 80219aa:	3201      	adds	r2, #1
 80219ac:	701a      	strb	r2, [r3, #0]
          break;
 80219ae:	e050      	b.n	8021a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80219b0:	687a      	ldr	r2, [r7, #4]
 80219b2:	23ac      	movs	r3, #172	@ 0xac
 80219b4:	009b      	lsls	r3, r3, #2
 80219b6:	58d3      	ldr	r3, [r2, r3]
 80219b8:	695b      	ldr	r3, [r3, #20]
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d00d      	beq.n	80219da <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80219be:	687a      	ldr	r2, [r7, #4]
 80219c0:	23ac      	movs	r3, #172	@ 0xac
 80219c2:	009b      	lsls	r3, r3, #2
 80219c4:	58d3      	ldr	r3, [r2, r3]
 80219c6:	695b      	ldr	r3, [r3, #20]
 80219c8:	687a      	ldr	r2, [r7, #4]
 80219ca:	7c12      	ldrb	r2, [r2, #16]
 80219cc:	2108      	movs	r1, #8
 80219ce:	1879      	adds	r1, r7, r1
 80219d0:	0010      	movs	r0, r2
 80219d2:	4798      	blx	r3
 80219d4:	0003      	movs	r3, r0
 80219d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80219d8:	e03b      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80219da:	683a      	ldr	r2, [r7, #0]
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	0011      	movs	r1, r2
 80219e0:	0018      	movs	r0, r3
 80219e2:	f000 fa98 	bl	8021f16 <USBD_CtlError>
            err++;
 80219e6:	210b      	movs	r1, #11
 80219e8:	187b      	adds	r3, r7, r1
 80219ea:	781a      	ldrb	r2, [r3, #0]
 80219ec:	187b      	adds	r3, r7, r1
 80219ee:	3201      	adds	r2, #1
 80219f0:	701a      	strb	r2, [r3, #0]
          break;
 80219f2:	e02e      	b.n	8021a52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80219f4:	687a      	ldr	r2, [r7, #4]
 80219f6:	23ac      	movs	r3, #172	@ 0xac
 80219f8:	009b      	lsls	r3, r3, #2
 80219fa:	58d3      	ldr	r3, [r2, r3]
 80219fc:	699b      	ldr	r3, [r3, #24]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d00d      	beq.n	8021a1e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021a02:	687a      	ldr	r2, [r7, #4]
 8021a04:	23ac      	movs	r3, #172	@ 0xac
 8021a06:	009b      	lsls	r3, r3, #2
 8021a08:	58d3      	ldr	r3, [r2, r3]
 8021a0a:	699b      	ldr	r3, [r3, #24]
 8021a0c:	687a      	ldr	r2, [r7, #4]
 8021a0e:	7c12      	ldrb	r2, [r2, #16]
 8021a10:	2108      	movs	r1, #8
 8021a12:	1879      	adds	r1, r7, r1
 8021a14:	0010      	movs	r0, r2
 8021a16:	4798      	blx	r3
 8021a18:	0003      	movs	r3, r0
 8021a1a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a1c:	e019      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021a1e:	683a      	ldr	r2, [r7, #0]
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	0011      	movs	r1, r2
 8021a24:	0018      	movs	r0, r3
 8021a26:	f000 fa76 	bl	8021f16 <USBD_CtlError>
            err++;
 8021a2a:	210b      	movs	r1, #11
 8021a2c:	187b      	adds	r3, r7, r1
 8021a2e:	781a      	ldrb	r2, [r3, #0]
 8021a30:	187b      	adds	r3, r7, r1
 8021a32:	3201      	adds	r2, #1
 8021a34:	701a      	strb	r2, [r3, #0]
          break;
 8021a36:	e00c      	b.n	8021a52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8021a38:	683a      	ldr	r2, [r7, #0]
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	0011      	movs	r1, r2
 8021a3e:	0018      	movs	r0, r3
 8021a40:	f000 fa69 	bl	8021f16 <USBD_CtlError>
          err++;
 8021a44:	210b      	movs	r1, #11
 8021a46:	187b      	adds	r3, r7, r1
 8021a48:	781a      	ldrb	r2, [r3, #0]
 8021a4a:	187b      	adds	r3, r7, r1
 8021a4c:	3201      	adds	r2, #1
 8021a4e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021a50:	e04b      	b.n	8021aea <USBD_GetDescriptor+0x2fa>
 8021a52:	e04a      	b.n	8021aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	7c1b      	ldrb	r3, [r3, #16]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d10b      	bne.n	8021a74 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021a5c:	687a      	ldr	r2, [r7, #4]
 8021a5e:	23ad      	movs	r3, #173	@ 0xad
 8021a60:	009b      	lsls	r3, r3, #2
 8021a62:	58d3      	ldr	r3, [r2, r3]
 8021a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021a66:	2208      	movs	r2, #8
 8021a68:	18ba      	adds	r2, r7, r2
 8021a6a:	0010      	movs	r0, r2
 8021a6c:	4798      	blx	r3
 8021a6e:	0003      	movs	r3, r0
 8021a70:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a72:	e03a      	b.n	8021aea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021a74:	683a      	ldr	r2, [r7, #0]
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	0011      	movs	r1, r2
 8021a7a:	0018      	movs	r0, r3
 8021a7c:	f000 fa4b 	bl	8021f16 <USBD_CtlError>
        err++;
 8021a80:	210b      	movs	r1, #11
 8021a82:	187b      	adds	r3, r7, r1
 8021a84:	781a      	ldrb	r2, [r3, #0]
 8021a86:	187b      	adds	r3, r7, r1
 8021a88:	3201      	adds	r2, #1
 8021a8a:	701a      	strb	r2, [r3, #0]
      break;
 8021a8c:	e02d      	b.n	8021aea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	7c1b      	ldrb	r3, [r3, #16]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d10f      	bne.n	8021ab6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021a96:	687a      	ldr	r2, [r7, #4]
 8021a98:	23ad      	movs	r3, #173	@ 0xad
 8021a9a:	009b      	lsls	r3, r3, #2
 8021a9c:	58d3      	ldr	r3, [r2, r3]
 8021a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021aa0:	2208      	movs	r2, #8
 8021aa2:	18ba      	adds	r2, r7, r2
 8021aa4:	0010      	movs	r0, r2
 8021aa6:	4798      	blx	r3
 8021aa8:	0003      	movs	r3, r0
 8021aaa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	3301      	adds	r3, #1
 8021ab0:	2207      	movs	r2, #7
 8021ab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021ab4:	e019      	b.n	8021aea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021ab6:	683a      	ldr	r2, [r7, #0]
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	0011      	movs	r1, r2
 8021abc:	0018      	movs	r0, r3
 8021abe:	f000 fa2a 	bl	8021f16 <USBD_CtlError>
        err++;
 8021ac2:	210b      	movs	r1, #11
 8021ac4:	187b      	adds	r3, r7, r1
 8021ac6:	781a      	ldrb	r2, [r3, #0]
 8021ac8:	187b      	adds	r3, r7, r1
 8021aca:	3201      	adds	r2, #1
 8021acc:	701a      	strb	r2, [r3, #0]
      break;
 8021ace:	e00c      	b.n	8021aea <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8021ad0:	683a      	ldr	r2, [r7, #0]
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	0011      	movs	r1, r2
 8021ad6:	0018      	movs	r0, r3
 8021ad8:	f000 fa1d 	bl	8021f16 <USBD_CtlError>
      err++;
 8021adc:	210b      	movs	r1, #11
 8021ade:	187b      	adds	r3, r7, r1
 8021ae0:	781a      	ldrb	r2, [r3, #0]
 8021ae2:	187b      	adds	r3, r7, r1
 8021ae4:	3201      	adds	r2, #1
 8021ae6:	701a      	strb	r2, [r3, #0]
      break;
 8021ae8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8021aea:	230b      	movs	r3, #11
 8021aec:	18fb      	adds	r3, r7, r3
 8021aee:	781b      	ldrb	r3, [r3, #0]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d127      	bne.n	8021b44 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8021af4:	2108      	movs	r1, #8
 8021af6:	187b      	adds	r3, r7, r1
 8021af8:	881b      	ldrh	r3, [r3, #0]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d019      	beq.n	8021b32 <USBD_GetDescriptor+0x342>
 8021afe:	683b      	ldr	r3, [r7, #0]
 8021b00:	88db      	ldrh	r3, [r3, #6]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d015      	beq.n	8021b32 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8021b06:	683b      	ldr	r3, [r7, #0]
 8021b08:	88da      	ldrh	r2, [r3, #6]
 8021b0a:	187b      	adds	r3, r7, r1
 8021b0c:	881b      	ldrh	r3, [r3, #0]
 8021b0e:	1c18      	adds	r0, r3, #0
 8021b10:	1c11      	adds	r1, r2, #0
 8021b12:	b28a      	uxth	r2, r1
 8021b14:	b283      	uxth	r3, r0
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d900      	bls.n	8021b1c <USBD_GetDescriptor+0x32c>
 8021b1a:	1c01      	adds	r1, r0, #0
 8021b1c:	b28a      	uxth	r2, r1
 8021b1e:	2108      	movs	r1, #8
 8021b20:	187b      	adds	r3, r7, r1
 8021b22:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021b24:	187b      	adds	r3, r7, r1
 8021b26:	881a      	ldrh	r2, [r3, #0]
 8021b28:	68f9      	ldr	r1, [r7, #12]
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	0018      	movs	r0, r3
 8021b2e:	f000 fa70 	bl	8022012 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021b32:	683b      	ldr	r3, [r7, #0]
 8021b34:	88db      	ldrh	r3, [r3, #6]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d105      	bne.n	8021b46 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	0018      	movs	r0, r3
 8021b3e:	f000 fad2 	bl	80220e6 <USBD_CtlSendStatus>
 8021b42:	e000      	b.n	8021b46 <USBD_GetDescriptor+0x356>
    return;
 8021b44:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021b46:	46bd      	mov	sp, r7
 8021b48:	b004      	add	sp, #16
 8021b4a:	bd80      	pop	{r7, pc}
 8021b4c:	0802dcd8 	.word	0x0802dcd8
 8021b50:	0802dcf8 	.word	0x0802dcf8

08021b54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021b54:	b590      	push	{r4, r7, lr}
 8021b56:	b085      	sub	sp, #20
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
 8021b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021b5e:	683b      	ldr	r3, [r7, #0]
 8021b60:	889b      	ldrh	r3, [r3, #4]
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d13d      	bne.n	8021be2 <USBD_SetAddress+0x8e>
 8021b66:	683b      	ldr	r3, [r7, #0]
 8021b68:	88db      	ldrh	r3, [r3, #6]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d139      	bne.n	8021be2 <USBD_SetAddress+0x8e>
 8021b6e:	683b      	ldr	r3, [r7, #0]
 8021b70:	885b      	ldrh	r3, [r3, #2]
 8021b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8021b74:	d835      	bhi.n	8021be2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021b76:	683b      	ldr	r3, [r7, #0]
 8021b78:	885b      	ldrh	r3, [r3, #2]
 8021b7a:	b2da      	uxtb	r2, r3
 8021b7c:	230f      	movs	r3, #15
 8021b7e:	18fb      	adds	r3, r7, r3
 8021b80:	217f      	movs	r1, #127	@ 0x7f
 8021b82:	400a      	ands	r2, r1
 8021b84:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b86:	687a      	ldr	r2, [r7, #4]
 8021b88:	23a7      	movs	r3, #167	@ 0xa7
 8021b8a:	009b      	lsls	r3, r3, #2
 8021b8c:	5cd3      	ldrb	r3, [r2, r3]
 8021b8e:	2b03      	cmp	r3, #3
 8021b90:	d106      	bne.n	8021ba0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021b92:	683a      	ldr	r2, [r7, #0]
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	0011      	movs	r1, r2
 8021b98:	0018      	movs	r0, r3
 8021b9a:	f000 f9bc 	bl	8021f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b9e:	e027      	b.n	8021bf0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	240f      	movs	r4, #15
 8021ba4:	193a      	adds	r2, r7, r4
 8021ba6:	4914      	ldr	r1, [pc, #80]	@ (8021bf8 <USBD_SetAddress+0xa4>)
 8021ba8:	7812      	ldrb	r2, [r2, #0]
 8021baa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021bac:	193b      	adds	r3, r7, r4
 8021bae:	781a      	ldrb	r2, [r3, #0]
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	0011      	movs	r1, r2
 8021bb4:	0018      	movs	r0, r3
 8021bb6:	f000 ff5d 	bl	8022a74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	0018      	movs	r0, r3
 8021bbe:	f000 fa92 	bl	80220e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021bc2:	193b      	adds	r3, r7, r4
 8021bc4:	781b      	ldrb	r3, [r3, #0]
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	d005      	beq.n	8021bd6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021bca:	687a      	ldr	r2, [r7, #4]
 8021bcc:	23a7      	movs	r3, #167	@ 0xa7
 8021bce:	009b      	lsls	r3, r3, #2
 8021bd0:	2102      	movs	r1, #2
 8021bd2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bd4:	e00c      	b.n	8021bf0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021bd6:	687a      	ldr	r2, [r7, #4]
 8021bd8:	23a7      	movs	r3, #167	@ 0xa7
 8021bda:	009b      	lsls	r3, r3, #2
 8021bdc:	2101      	movs	r1, #1
 8021bde:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021be0:	e006      	b.n	8021bf0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021be2:	683a      	ldr	r2, [r7, #0]
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	0011      	movs	r1, r2
 8021be8:	0018      	movs	r0, r3
 8021bea:	f000 f994 	bl	8021f16 <USBD_CtlError>
  }
}
 8021bee:	46c0      	nop			@ (mov r8, r8)
 8021bf0:	46c0      	nop			@ (mov r8, r8)
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	b005      	add	sp, #20
 8021bf6:	bd90      	pop	{r4, r7, pc}
 8021bf8:	0000029e 	.word	0x0000029e

08021bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021bfc:	b580      	push	{r7, lr}
 8021bfe:	b082      	sub	sp, #8
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	6078      	str	r0, [r7, #4]
 8021c04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021c06:	683b      	ldr	r3, [r7, #0]
 8021c08:	885b      	ldrh	r3, [r3, #2]
 8021c0a:	b2da      	uxtb	r2, r3
 8021c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021c10:	4b4b      	ldr	r3, [pc, #300]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c12:	781b      	ldrb	r3, [r3, #0]
 8021c14:	2b01      	cmp	r3, #1
 8021c16:	d906      	bls.n	8021c26 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021c18:	683a      	ldr	r2, [r7, #0]
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	0011      	movs	r1, r2
 8021c1e:	0018      	movs	r0, r3
 8021c20:	f000 f979 	bl	8021f16 <USBD_CtlError>
 8021c24:	e088      	b.n	8021d38 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021c26:	687a      	ldr	r2, [r7, #4]
 8021c28:	23a7      	movs	r3, #167	@ 0xa7
 8021c2a:	009b      	lsls	r3, r3, #2
 8021c2c:	5cd3      	ldrb	r3, [r2, r3]
 8021c2e:	2b02      	cmp	r3, #2
 8021c30:	d002      	beq.n	8021c38 <USBD_SetConfig+0x3c>
 8021c32:	2b03      	cmp	r3, #3
 8021c34:	d029      	beq.n	8021c8a <USBD_SetConfig+0x8e>
 8021c36:	e071      	b.n	8021d1c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021c38:	4b41      	ldr	r3, [pc, #260]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c3a:	781b      	ldrb	r3, [r3, #0]
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d01f      	beq.n	8021c80 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021c40:	4b3f      	ldr	r3, [pc, #252]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c42:	781b      	ldrb	r3, [r3, #0]
 8021c44:	001a      	movs	r2, r3
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021c4a:	687a      	ldr	r2, [r7, #4]
 8021c4c:	23a7      	movs	r3, #167	@ 0xa7
 8021c4e:	009b      	lsls	r3, r3, #2
 8021c50:	2103      	movs	r1, #3
 8021c52:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021c54:	4b3a      	ldr	r3, [pc, #232]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c56:	781a      	ldrb	r2, [r3, #0]
 8021c58:	687b      	ldr	r3, [r7, #4]
 8021c5a:	0011      	movs	r1, r2
 8021c5c:	0018      	movs	r0, r3
 8021c5e:	f7ff f8c6 	bl	8020dee <USBD_SetClassConfig>
 8021c62:	0003      	movs	r3, r0
 8021c64:	2b02      	cmp	r3, #2
 8021c66:	d106      	bne.n	8021c76 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021c68:	683a      	ldr	r2, [r7, #0]
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	0011      	movs	r1, r2
 8021c6e:	0018      	movs	r0, r3
 8021c70:	f000 f951 	bl	8021f16 <USBD_CtlError>
            return;
 8021c74:	e060      	b.n	8021d38 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	0018      	movs	r0, r3
 8021c7a:	f000 fa34 	bl	80220e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021c7e:	e05b      	b.n	8021d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	0018      	movs	r0, r3
 8021c84:	f000 fa2f 	bl	80220e6 <USBD_CtlSendStatus>
        break;
 8021c88:	e056      	b.n	8021d38 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c8c:	781b      	ldrb	r3, [r3, #0]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d115      	bne.n	8021cbe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c92:	687a      	ldr	r2, [r7, #4]
 8021c94:	23a7      	movs	r3, #167	@ 0xa7
 8021c96:	009b      	lsls	r3, r3, #2
 8021c98:	2102      	movs	r1, #2
 8021c9a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021c9c:	4b28      	ldr	r3, [pc, #160]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021c9e:	781b      	ldrb	r3, [r3, #0]
 8021ca0:	001a      	movs	r2, r3
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021ca6:	4b26      	ldr	r3, [pc, #152]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021ca8:	781a      	ldrb	r2, [r3, #0]
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	0011      	movs	r1, r2
 8021cae:	0018      	movs	r0, r3
 8021cb0:	f7ff f8c4 	bl	8020e3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	0018      	movs	r0, r3
 8021cb8:	f000 fa15 	bl	80220e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021cbc:	e03c      	b.n	8021d38 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8021cbe:	4b20      	ldr	r3, [pc, #128]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021cc0:	781b      	ldrb	r3, [r3, #0]
 8021cc2:	001a      	movs	r2, r3
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	685b      	ldr	r3, [r3, #4]
 8021cc8:	429a      	cmp	r2, r3
 8021cca:	d022      	beq.n	8021d12 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	685b      	ldr	r3, [r3, #4]
 8021cd0:	b2da      	uxtb	r2, r3
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	0011      	movs	r1, r2
 8021cd6:	0018      	movs	r0, r3
 8021cd8:	f7ff f8b0 	bl	8020e3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8021cdc:	4b18      	ldr	r3, [pc, #96]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021cde:	781b      	ldrb	r3, [r3, #0]
 8021ce0:	001a      	movs	r2, r3
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021ce6:	4b16      	ldr	r3, [pc, #88]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021ce8:	781a      	ldrb	r2, [r3, #0]
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	0011      	movs	r1, r2
 8021cee:	0018      	movs	r0, r3
 8021cf0:	f7ff f87d 	bl	8020dee <USBD_SetClassConfig>
 8021cf4:	0003      	movs	r3, r0
 8021cf6:	2b02      	cmp	r3, #2
 8021cf8:	d106      	bne.n	8021d08 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8021cfa:	683a      	ldr	r2, [r7, #0]
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	0011      	movs	r1, r2
 8021d00:	0018      	movs	r0, r3
 8021d02:	f000 f908 	bl	8021f16 <USBD_CtlError>
            return;
 8021d06:	e017      	b.n	8021d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	0018      	movs	r0, r3
 8021d0c:	f000 f9eb 	bl	80220e6 <USBD_CtlSendStatus>
        break;
 8021d10:	e012      	b.n	8021d38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	0018      	movs	r0, r3
 8021d16:	f000 f9e6 	bl	80220e6 <USBD_CtlSendStatus>
        break;
 8021d1a:	e00d      	b.n	8021d38 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8021d1c:	683a      	ldr	r2, [r7, #0]
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	0011      	movs	r1, r2
 8021d22:	0018      	movs	r0, r3
 8021d24:	f000 f8f7 	bl	8021f16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021d28:	4b05      	ldr	r3, [pc, #20]	@ (8021d40 <USBD_SetConfig+0x144>)
 8021d2a:	781a      	ldrb	r2, [r3, #0]
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	0011      	movs	r1, r2
 8021d30:	0018      	movs	r0, r3
 8021d32:	f7ff f883 	bl	8020e3c <USBD_ClrClassConfig>
        break;
 8021d36:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021d38:	46bd      	mov	sp, r7
 8021d3a:	b002      	add	sp, #8
 8021d3c:	bd80      	pop	{r7, pc}
 8021d3e:	46c0      	nop			@ (mov r8, r8)
 8021d40:	2000222c 	.word	0x2000222c

08021d44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d44:	b580      	push	{r7, lr}
 8021d46:	b082      	sub	sp, #8
 8021d48:	af00      	add	r7, sp, #0
 8021d4a:	6078      	str	r0, [r7, #4]
 8021d4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021d4e:	683b      	ldr	r3, [r7, #0]
 8021d50:	88db      	ldrh	r3, [r3, #6]
 8021d52:	2b01      	cmp	r3, #1
 8021d54:	d006      	beq.n	8021d64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021d56:	683a      	ldr	r2, [r7, #0]
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	0011      	movs	r1, r2
 8021d5c:	0018      	movs	r0, r3
 8021d5e:	f000 f8da 	bl	8021f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021d62:	e026      	b.n	8021db2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021d64:	687a      	ldr	r2, [r7, #4]
 8021d66:	23a7      	movs	r3, #167	@ 0xa7
 8021d68:	009b      	lsls	r3, r3, #2
 8021d6a:	5cd3      	ldrb	r3, [r2, r3]
 8021d6c:	2b02      	cmp	r3, #2
 8021d6e:	dc02      	bgt.n	8021d76 <USBD_GetConfig+0x32>
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	dc03      	bgt.n	8021d7c <USBD_GetConfig+0x38>
 8021d74:	e016      	b.n	8021da4 <USBD_GetConfig+0x60>
 8021d76:	2b03      	cmp	r3, #3
 8021d78:	d00c      	beq.n	8021d94 <USBD_GetConfig+0x50>
 8021d7a:	e013      	b.n	8021da4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	2200      	movs	r2, #0
 8021d80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	3308      	adds	r3, #8
 8021d86:	0019      	movs	r1, r3
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	2201      	movs	r2, #1
 8021d8c:	0018      	movs	r0, r3
 8021d8e:	f000 f940 	bl	8022012 <USBD_CtlSendData>
        break;
 8021d92:	e00e      	b.n	8021db2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	1d19      	adds	r1, r3, #4
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	2201      	movs	r2, #1
 8021d9c:	0018      	movs	r0, r3
 8021d9e:	f000 f938 	bl	8022012 <USBD_CtlSendData>
        break;
 8021da2:	e006      	b.n	8021db2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021da4:	683a      	ldr	r2, [r7, #0]
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	0011      	movs	r1, r2
 8021daa:	0018      	movs	r0, r3
 8021dac:	f000 f8b3 	bl	8021f16 <USBD_CtlError>
        break;
 8021db0:	46c0      	nop			@ (mov r8, r8)
}
 8021db2:	46c0      	nop			@ (mov r8, r8)
 8021db4:	46bd      	mov	sp, r7
 8021db6:	b002      	add	sp, #8
 8021db8:	bd80      	pop	{r7, pc}

08021dba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021dba:	b580      	push	{r7, lr}
 8021dbc:	b082      	sub	sp, #8
 8021dbe:	af00      	add	r7, sp, #0
 8021dc0:	6078      	str	r0, [r7, #4]
 8021dc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021dc4:	687a      	ldr	r2, [r7, #4]
 8021dc6:	23a7      	movs	r3, #167	@ 0xa7
 8021dc8:	009b      	lsls	r3, r3, #2
 8021dca:	5cd3      	ldrb	r3, [r2, r3]
 8021dcc:	3b01      	subs	r3, #1
 8021dce:	2b02      	cmp	r3, #2
 8021dd0:	d822      	bhi.n	8021e18 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021dd2:	683b      	ldr	r3, [r7, #0]
 8021dd4:	88db      	ldrh	r3, [r3, #6]
 8021dd6:	2b02      	cmp	r3, #2
 8021dd8:	d006      	beq.n	8021de8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8021dda:	683a      	ldr	r2, [r7, #0]
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	0011      	movs	r1, r2
 8021de0:	0018      	movs	r0, r3
 8021de2:	f000 f898 	bl	8021f16 <USBD_CtlError>
        break;
 8021de6:	e01e      	b.n	8021e26 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	2201      	movs	r2, #1
 8021dec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8021dee:	687a      	ldr	r2, [r7, #4]
 8021df0:	23a9      	movs	r3, #169	@ 0xa9
 8021df2:	009b      	lsls	r3, r3, #2
 8021df4:	58d3      	ldr	r3, [r2, r3]
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d005      	beq.n	8021e06 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	68db      	ldr	r3, [r3, #12]
 8021dfe:	2202      	movs	r2, #2
 8021e00:	431a      	orrs	r2, r3
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	330c      	adds	r3, #12
 8021e0a:	0019      	movs	r1, r3
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	2202      	movs	r2, #2
 8021e10:	0018      	movs	r0, r3
 8021e12:	f000 f8fe 	bl	8022012 <USBD_CtlSendData>
      break;
 8021e16:	e006      	b.n	8021e26 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021e18:	683a      	ldr	r2, [r7, #0]
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	0011      	movs	r1, r2
 8021e1e:	0018      	movs	r0, r3
 8021e20:	f000 f879 	bl	8021f16 <USBD_CtlError>
      break;
 8021e24:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021e26:	46c0      	nop			@ (mov r8, r8)
 8021e28:	46bd      	mov	sp, r7
 8021e2a:	b002      	add	sp, #8
 8021e2c:	bd80      	pop	{r7, pc}

08021e2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021e2e:	b580      	push	{r7, lr}
 8021e30:	b082      	sub	sp, #8
 8021e32:	af00      	add	r7, sp, #0
 8021e34:	6078      	str	r0, [r7, #4]
 8021e36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e38:	683b      	ldr	r3, [r7, #0]
 8021e3a:	885b      	ldrh	r3, [r3, #2]
 8021e3c:	2b01      	cmp	r3, #1
 8021e3e:	d108      	bne.n	8021e52 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021e40:	687a      	ldr	r2, [r7, #4]
 8021e42:	23a9      	movs	r3, #169	@ 0xa9
 8021e44:	009b      	lsls	r3, r3, #2
 8021e46:	2101      	movs	r1, #1
 8021e48:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	0018      	movs	r0, r3
 8021e4e:	f000 f94a 	bl	80220e6 <USBD_CtlSendStatus>
  }
}
 8021e52:	46c0      	nop			@ (mov r8, r8)
 8021e54:	46bd      	mov	sp, r7
 8021e56:	b002      	add	sp, #8
 8021e58:	bd80      	pop	{r7, pc}

08021e5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021e5a:	b580      	push	{r7, lr}
 8021e5c:	b082      	sub	sp, #8
 8021e5e:	af00      	add	r7, sp, #0
 8021e60:	6078      	str	r0, [r7, #4]
 8021e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021e64:	687a      	ldr	r2, [r7, #4]
 8021e66:	23a7      	movs	r3, #167	@ 0xa7
 8021e68:	009b      	lsls	r3, r3, #2
 8021e6a:	5cd3      	ldrb	r3, [r2, r3]
 8021e6c:	3b01      	subs	r3, #1
 8021e6e:	2b02      	cmp	r3, #2
 8021e70:	d80d      	bhi.n	8021e8e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021e72:	683b      	ldr	r3, [r7, #0]
 8021e74:	885b      	ldrh	r3, [r3, #2]
 8021e76:	2b01      	cmp	r3, #1
 8021e78:	d110      	bne.n	8021e9c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8021e7a:	687a      	ldr	r2, [r7, #4]
 8021e7c:	23a9      	movs	r3, #169	@ 0xa9
 8021e7e:	009b      	lsls	r3, r3, #2
 8021e80:	2100      	movs	r1, #0
 8021e82:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	0018      	movs	r0, r3
 8021e88:	f000 f92d 	bl	80220e6 <USBD_CtlSendStatus>
      }
      break;
 8021e8c:	e006      	b.n	8021e9c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8021e8e:	683a      	ldr	r2, [r7, #0]
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	0011      	movs	r1, r2
 8021e94:	0018      	movs	r0, r3
 8021e96:	f000 f83e 	bl	8021f16 <USBD_CtlError>
      break;
 8021e9a:	e000      	b.n	8021e9e <USBD_ClrFeature+0x44>
      break;
 8021e9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021e9e:	46c0      	nop			@ (mov r8, r8)
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	b002      	add	sp, #8
 8021ea4:	bd80      	pop	{r7, pc}

08021ea6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021ea6:	b580      	push	{r7, lr}
 8021ea8:	b082      	sub	sp, #8
 8021eaa:	af00      	add	r7, sp, #0
 8021eac:	6078      	str	r0, [r7, #4]
 8021eae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8021eb0:	683b      	ldr	r3, [r7, #0]
 8021eb2:	781a      	ldrb	r2, [r3, #0]
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8021eb8:	683b      	ldr	r3, [r7, #0]
 8021eba:	785a      	ldrb	r2, [r3, #1]
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8021ec0:	683b      	ldr	r3, [r7, #0]
 8021ec2:	3302      	adds	r3, #2
 8021ec4:	781b      	ldrb	r3, [r3, #0]
 8021ec6:	001a      	movs	r2, r3
 8021ec8:	683b      	ldr	r3, [r7, #0]
 8021eca:	3303      	adds	r3, #3
 8021ecc:	781b      	ldrb	r3, [r3, #0]
 8021ece:	021b      	lsls	r3, r3, #8
 8021ed0:	b29b      	uxth	r3, r3
 8021ed2:	18d3      	adds	r3, r2, r3
 8021ed4:	b29a      	uxth	r2, r3
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8021eda:	683b      	ldr	r3, [r7, #0]
 8021edc:	3304      	adds	r3, #4
 8021ede:	781b      	ldrb	r3, [r3, #0]
 8021ee0:	001a      	movs	r2, r3
 8021ee2:	683b      	ldr	r3, [r7, #0]
 8021ee4:	3305      	adds	r3, #5
 8021ee6:	781b      	ldrb	r3, [r3, #0]
 8021ee8:	021b      	lsls	r3, r3, #8
 8021eea:	b29b      	uxth	r3, r3
 8021eec:	18d3      	adds	r3, r2, r3
 8021eee:	b29a      	uxth	r2, r3
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8021ef4:	683b      	ldr	r3, [r7, #0]
 8021ef6:	3306      	adds	r3, #6
 8021ef8:	781b      	ldrb	r3, [r3, #0]
 8021efa:	001a      	movs	r2, r3
 8021efc:	683b      	ldr	r3, [r7, #0]
 8021efe:	3307      	adds	r3, #7
 8021f00:	781b      	ldrb	r3, [r3, #0]
 8021f02:	021b      	lsls	r3, r3, #8
 8021f04:	b29b      	uxth	r3, r3
 8021f06:	18d3      	adds	r3, r2, r3
 8021f08:	b29a      	uxth	r2, r3
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	80da      	strh	r2, [r3, #6]

}
 8021f0e:	46c0      	nop			@ (mov r8, r8)
 8021f10:	46bd      	mov	sp, r7
 8021f12:	b002      	add	sp, #8
 8021f14:	bd80      	pop	{r7, pc}

08021f16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8021f16:	b580      	push	{r7, lr}
 8021f18:	b082      	sub	sp, #8
 8021f1a:	af00      	add	r7, sp, #0
 8021f1c:	6078      	str	r0, [r7, #4]
 8021f1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8021f20:	687b      	ldr	r3, [r7, #4]
 8021f22:	2180      	movs	r1, #128	@ 0x80
 8021f24:	0018      	movs	r0, r3
 8021f26:	f000 fd1e 	bl	8022966 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	2100      	movs	r1, #0
 8021f2e:	0018      	movs	r0, r3
 8021f30:	f000 fd19 	bl	8022966 <USBD_LL_StallEP>
}
 8021f34:	46c0      	nop			@ (mov r8, r8)
 8021f36:	46bd      	mov	sp, r7
 8021f38:	b002      	add	sp, #8
 8021f3a:	bd80      	pop	{r7, pc}

08021f3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021f3c:	b590      	push	{r4, r7, lr}
 8021f3e:	b087      	sub	sp, #28
 8021f40:	af00      	add	r7, sp, #0
 8021f42:	60f8      	str	r0, [r7, #12]
 8021f44:	60b9      	str	r1, [r7, #8]
 8021f46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021f48:	2417      	movs	r4, #23
 8021f4a:	193b      	adds	r3, r7, r4
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d03c      	beq.n	8021fd0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	0018      	movs	r0, r3
 8021f5a:	f000 f83d 	bl	8021fd8 <USBD_GetLen>
 8021f5e:	0003      	movs	r3, r0
 8021f60:	3301      	adds	r3, #1
 8021f62:	b29b      	uxth	r3, r3
 8021f64:	18db      	adds	r3, r3, r3
 8021f66:	b29a      	uxth	r2, r3
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8021f6c:	193b      	adds	r3, r7, r4
 8021f6e:	781b      	ldrb	r3, [r3, #0]
 8021f70:	193a      	adds	r2, r7, r4
 8021f72:	1c59      	adds	r1, r3, #1
 8021f74:	7011      	strb	r1, [r2, #0]
 8021f76:	001a      	movs	r2, r3
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	189b      	adds	r3, r3, r2
 8021f7c:	687a      	ldr	r2, [r7, #4]
 8021f7e:	7812      	ldrb	r2, [r2, #0]
 8021f80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8021f82:	193b      	adds	r3, r7, r4
 8021f84:	781b      	ldrb	r3, [r3, #0]
 8021f86:	193a      	adds	r2, r7, r4
 8021f88:	1c59      	adds	r1, r3, #1
 8021f8a:	7011      	strb	r1, [r2, #0]
 8021f8c:	001a      	movs	r2, r3
 8021f8e:	68bb      	ldr	r3, [r7, #8]
 8021f90:	189b      	adds	r3, r3, r2
 8021f92:	2203      	movs	r2, #3
 8021f94:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8021f96:	e017      	b.n	8021fc8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021f98:	68fb      	ldr	r3, [r7, #12]
 8021f9a:	1c5a      	adds	r2, r3, #1
 8021f9c:	60fa      	str	r2, [r7, #12]
 8021f9e:	2417      	movs	r4, #23
 8021fa0:	193a      	adds	r2, r7, r4
 8021fa2:	7812      	ldrb	r2, [r2, #0]
 8021fa4:	1939      	adds	r1, r7, r4
 8021fa6:	1c50      	adds	r0, r2, #1
 8021fa8:	7008      	strb	r0, [r1, #0]
 8021faa:	0011      	movs	r1, r2
 8021fac:	68ba      	ldr	r2, [r7, #8]
 8021fae:	1852      	adds	r2, r2, r1
 8021fb0:	781b      	ldrb	r3, [r3, #0]
 8021fb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8021fb4:	193b      	adds	r3, r7, r4
 8021fb6:	781b      	ldrb	r3, [r3, #0]
 8021fb8:	193a      	adds	r2, r7, r4
 8021fba:	1c59      	adds	r1, r3, #1
 8021fbc:	7011      	strb	r1, [r2, #0]
 8021fbe:	001a      	movs	r2, r3
 8021fc0:	68bb      	ldr	r3, [r7, #8]
 8021fc2:	189b      	adds	r3, r3, r2
 8021fc4:	2200      	movs	r2, #0
 8021fc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	781b      	ldrb	r3, [r3, #0]
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d1e3      	bne.n	8021f98 <USBD_GetString+0x5c>
    }
  }
}
 8021fd0:	46c0      	nop			@ (mov r8, r8)
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	b007      	add	sp, #28
 8021fd6:	bd90      	pop	{r4, r7, pc}

08021fd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021fd8:	b580      	push	{r7, lr}
 8021fda:	b084      	sub	sp, #16
 8021fdc:	af00      	add	r7, sp, #0
 8021fde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021fe0:	230f      	movs	r3, #15
 8021fe2:	18fb      	adds	r3, r7, r3
 8021fe4:	2200      	movs	r2, #0
 8021fe6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8021fe8:	e008      	b.n	8021ffc <USBD_GetLen+0x24>
  {
    len++;
 8021fea:	210f      	movs	r1, #15
 8021fec:	187b      	adds	r3, r7, r1
 8021fee:	781a      	ldrb	r2, [r3, #0]
 8021ff0:	187b      	adds	r3, r7, r1
 8021ff2:	3201      	adds	r2, #1
 8021ff4:	701a      	strb	r2, [r3, #0]
    buf++;
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	3301      	adds	r3, #1
 8021ffa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	781b      	ldrb	r3, [r3, #0]
 8022000:	2b00      	cmp	r3, #0
 8022002:	d1f2      	bne.n	8021fea <USBD_GetLen+0x12>
  }

  return len;
 8022004:	230f      	movs	r3, #15
 8022006:	18fb      	adds	r3, r7, r3
 8022008:	781b      	ldrb	r3, [r3, #0]
}
 802200a:	0018      	movs	r0, r3
 802200c:	46bd      	mov	sp, r7
 802200e:	b004      	add	sp, #16
 8022010:	bd80      	pop	{r7, pc}

08022012 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022012:	b580      	push	{r7, lr}
 8022014:	b084      	sub	sp, #16
 8022016:	af00      	add	r7, sp, #0
 8022018:	60f8      	str	r0, [r7, #12]
 802201a:	60b9      	str	r1, [r7, #8]
 802201c:	1dbb      	adds	r3, r7, #6
 802201e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022020:	68fa      	ldr	r2, [r7, #12]
 8022022:	23a5      	movs	r3, #165	@ 0xa5
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	2102      	movs	r1, #2
 8022028:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802202a:	1dbb      	adds	r3, r7, #6
 802202c:	881a      	ldrh	r2, [r3, #0]
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022032:	1dbb      	adds	r3, r7, #6
 8022034:	881a      	ldrh	r2, [r3, #0]
 8022036:	68fb      	ldr	r3, [r7, #12]
 8022038:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802203a:	1dbb      	adds	r3, r7, #6
 802203c:	881b      	ldrh	r3, [r3, #0]
 802203e:	68ba      	ldr	r2, [r7, #8]
 8022040:	68f8      	ldr	r0, [r7, #12]
 8022042:	2100      	movs	r1, #0
 8022044:	f000 fd41 	bl	8022aca <USBD_LL_Transmit>

  return USBD_OK;
 8022048:	2300      	movs	r3, #0
}
 802204a:	0018      	movs	r0, r3
 802204c:	46bd      	mov	sp, r7
 802204e:	b004      	add	sp, #16
 8022050:	bd80      	pop	{r7, pc}

08022052 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022052:	b580      	push	{r7, lr}
 8022054:	b084      	sub	sp, #16
 8022056:	af00      	add	r7, sp, #0
 8022058:	60f8      	str	r0, [r7, #12]
 802205a:	60b9      	str	r1, [r7, #8]
 802205c:	1dbb      	adds	r3, r7, #6
 802205e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022060:	1dbb      	adds	r3, r7, #6
 8022062:	881b      	ldrh	r3, [r3, #0]
 8022064:	68ba      	ldr	r2, [r7, #8]
 8022066:	68f8      	ldr	r0, [r7, #12]
 8022068:	2100      	movs	r1, #0
 802206a:	f000 fd2e 	bl	8022aca <USBD_LL_Transmit>

  return USBD_OK;
 802206e:	2300      	movs	r3, #0
}
 8022070:	0018      	movs	r0, r3
 8022072:	46bd      	mov	sp, r7
 8022074:	b004      	add	sp, #16
 8022076:	bd80      	pop	{r7, pc}

08022078 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	b084      	sub	sp, #16
 802207c:	af00      	add	r7, sp, #0
 802207e:	60f8      	str	r0, [r7, #12]
 8022080:	60b9      	str	r1, [r7, #8]
 8022082:	1dbb      	adds	r3, r7, #6
 8022084:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022086:	68fa      	ldr	r2, [r7, #12]
 8022088:	23a5      	movs	r3, #165	@ 0xa5
 802208a:	009b      	lsls	r3, r3, #2
 802208c:	2103      	movs	r1, #3
 802208e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022090:	1dbb      	adds	r3, r7, #6
 8022092:	8819      	ldrh	r1, [r3, #0]
 8022094:	68fa      	ldr	r2, [r7, #12]
 8022096:	23ae      	movs	r3, #174	@ 0xae
 8022098:	005b      	lsls	r3, r3, #1
 802209a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 802209c:	1dbb      	adds	r3, r7, #6
 802209e:	8819      	ldrh	r1, [r3, #0]
 80220a0:	68fa      	ldr	r2, [r7, #12]
 80220a2:	23b0      	movs	r3, #176	@ 0xb0
 80220a4:	005b      	lsls	r3, r3, #1
 80220a6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80220a8:	1dbb      	adds	r3, r7, #6
 80220aa:	881b      	ldrh	r3, [r3, #0]
 80220ac:	68ba      	ldr	r2, [r7, #8]
 80220ae:	68f8      	ldr	r0, [r7, #12]
 80220b0:	2100      	movs	r1, #0
 80220b2:	f000 fd41 	bl	8022b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80220b6:	2300      	movs	r3, #0
}
 80220b8:	0018      	movs	r0, r3
 80220ba:	46bd      	mov	sp, r7
 80220bc:	b004      	add	sp, #16
 80220be:	bd80      	pop	{r7, pc}

080220c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80220c0:	b580      	push	{r7, lr}
 80220c2:	b084      	sub	sp, #16
 80220c4:	af00      	add	r7, sp, #0
 80220c6:	60f8      	str	r0, [r7, #12]
 80220c8:	60b9      	str	r1, [r7, #8]
 80220ca:	1dbb      	adds	r3, r7, #6
 80220cc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80220ce:	1dbb      	adds	r3, r7, #6
 80220d0:	881b      	ldrh	r3, [r3, #0]
 80220d2:	68ba      	ldr	r2, [r7, #8]
 80220d4:	68f8      	ldr	r0, [r7, #12]
 80220d6:	2100      	movs	r1, #0
 80220d8:	f000 fd2e 	bl	8022b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80220dc:	2300      	movs	r3, #0
}
 80220de:	0018      	movs	r0, r3
 80220e0:	46bd      	mov	sp, r7
 80220e2:	b004      	add	sp, #16
 80220e4:	bd80      	pop	{r7, pc}

080220e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80220e6:	b580      	push	{r7, lr}
 80220e8:	b082      	sub	sp, #8
 80220ea:	af00      	add	r7, sp, #0
 80220ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80220ee:	687a      	ldr	r2, [r7, #4]
 80220f0:	23a5      	movs	r3, #165	@ 0xa5
 80220f2:	009b      	lsls	r3, r3, #2
 80220f4:	2104      	movs	r1, #4
 80220f6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80220f8:	6878      	ldr	r0, [r7, #4]
 80220fa:	2300      	movs	r3, #0
 80220fc:	2200      	movs	r2, #0
 80220fe:	2100      	movs	r1, #0
 8022100:	f000 fce3 	bl	8022aca <USBD_LL_Transmit>

  return USBD_OK;
 8022104:	2300      	movs	r3, #0
}
 8022106:	0018      	movs	r0, r3
 8022108:	46bd      	mov	sp, r7
 802210a:	b002      	add	sp, #8
 802210c:	bd80      	pop	{r7, pc}

0802210e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802210e:	b580      	push	{r7, lr}
 8022110:	b082      	sub	sp, #8
 8022112:	af00      	add	r7, sp, #0
 8022114:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022116:	687a      	ldr	r2, [r7, #4]
 8022118:	23a5      	movs	r3, #165	@ 0xa5
 802211a:	009b      	lsls	r3, r3, #2
 802211c:	2105      	movs	r1, #5
 802211e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022120:	6878      	ldr	r0, [r7, #4]
 8022122:	2300      	movs	r3, #0
 8022124:	2200      	movs	r2, #0
 8022126:	2100      	movs	r1, #0
 8022128:	f000 fd06 	bl	8022b38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802212c:	2300      	movs	r3, #0
}
 802212e:	0018      	movs	r0, r3
 8022130:	46bd      	mov	sp, r7
 8022132:	b002      	add	sp, #8
 8022134:	bd80      	pop	{r7, pc}
	...

08022138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022138:	b580      	push	{r7, lr}
 802213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802213c:	4914      	ldr	r1, [pc, #80]	@ (8022190 <MX_USB_DEVICE_Init+0x58>)
 802213e:	4b15      	ldr	r3, [pc, #84]	@ (8022194 <MX_USB_DEVICE_Init+0x5c>)
 8022140:	2200      	movs	r2, #0
 8022142:	0018      	movs	r0, r3
 8022144:	f7fe fdec 	bl	8020d20 <USBD_Init>
 8022148:	1e03      	subs	r3, r0, #0
 802214a:	d001      	beq.n	8022150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802214c:	f7ea fbc0 	bl	800c8d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022150:	4a11      	ldr	r2, [pc, #68]	@ (8022198 <MX_USB_DEVICE_Init+0x60>)
 8022152:	4b10      	ldr	r3, [pc, #64]	@ (8022194 <MX_USB_DEVICE_Init+0x5c>)
 8022154:	0011      	movs	r1, r2
 8022156:	0018      	movs	r0, r3
 8022158:	f7fe fe13 	bl	8020d82 <USBD_RegisterClass>
 802215c:	1e03      	subs	r3, r0, #0
 802215e:	d001      	beq.n	8022164 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022160:	f7ea fbb6 	bl	800c8d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8022164:	4a0d      	ldr	r2, [pc, #52]	@ (802219c <MX_USB_DEVICE_Init+0x64>)
 8022166:	4b0b      	ldr	r3, [pc, #44]	@ (8022194 <MX_USB_DEVICE_Init+0x5c>)
 8022168:	0011      	movs	r1, r2
 802216a:	0018      	movs	r0, r3
 802216c:	f7fe fd28 	bl	8020bc0 <USBD_CDC_RegisterInterface>
 8022170:	1e03      	subs	r3, r0, #0
 8022172:	d001      	beq.n	8022178 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8022174:	f7ea fbac 	bl	800c8d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022178:	4b06      	ldr	r3, [pc, #24]	@ (8022194 <MX_USB_DEVICE_Init+0x5c>)
 802217a:	0018      	movs	r0, r3
 802217c:	f7fe fe21 	bl	8020dc2 <USBD_Start>
 8022180:	1e03      	subs	r3, r0, #0
 8022182:	d001      	beq.n	8022188 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8022184:	f7ea fba4 	bl	800c8d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022188:	46c0      	nop			@ (mov r8, r8)
 802218a:	46bd      	mov	sp, r7
 802218c:	bd80      	pop	{r7, pc}
 802218e:	46c0      	nop			@ (mov r8, r8)
 8022190:	20000218 	.word	0x20000218
 8022194:	20002230 	.word	0x20002230
 8022198:	20000104 	.word	0x20000104
 802219c:	20000208 	.word	0x20000208

080221a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80221a0:	b580      	push	{r7, lr}
 80221a2:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80221a4:	4907      	ldr	r1, [pc, #28]	@ (80221c4 <CDC_Init_FS+0x24>)
 80221a6:	4b08      	ldr	r3, [pc, #32]	@ (80221c8 <CDC_Init_FS+0x28>)
 80221a8:	2200      	movs	r2, #0
 80221aa:	0018      	movs	r0, r3
 80221ac:	f7fe fd23 	bl	8020bf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80221b0:	4a06      	ldr	r2, [pc, #24]	@ (80221cc <CDC_Init_FS+0x2c>)
 80221b2:	4b05      	ldr	r3, [pc, #20]	@ (80221c8 <CDC_Init_FS+0x28>)
 80221b4:	0011      	movs	r1, r2
 80221b6:	0018      	movs	r0, r3
 80221b8:	f7fe fd39 	bl	8020c2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80221bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80221be:	0018      	movs	r0, r3
 80221c0:	46bd      	mov	sp, r7
 80221c2:	bd80      	pop	{r7, pc}
 80221c4:	200029b4 	.word	0x200029b4
 80221c8:	20002230 	.word	0x20002230
 80221cc:	200025b4 	.word	0x200025b4

080221d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80221d0:	b580      	push	{r7, lr}
 80221d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80221d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80221d6:	0018      	movs	r0, r3
 80221d8:	46bd      	mov	sp, r7
 80221da:	bd80      	pop	{r7, pc}

080221dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80221dc:	b580      	push	{r7, lr}
 80221de:	b082      	sub	sp, #8
 80221e0:	af00      	add	r7, sp, #0
 80221e2:	6039      	str	r1, [r7, #0]
 80221e4:	0011      	movs	r1, r2
 80221e6:	1dfb      	adds	r3, r7, #7
 80221e8:	1c02      	adds	r2, r0, #0
 80221ea:	701a      	strb	r2, [r3, #0]
 80221ec:	1d3b      	adds	r3, r7, #4
 80221ee:	1c0a      	adds	r2, r1, #0
 80221f0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80221f2:	1dfb      	adds	r3, r7, #7
 80221f4:	781b      	ldrb	r3, [r3, #0]
 80221f6:	2b23      	cmp	r3, #35	@ 0x23
 80221f8:	d804      	bhi.n	8022204 <CDC_Control_FS+0x28>
 80221fa:	009a      	lsls	r2, r3, #2
 80221fc:	4b04      	ldr	r3, [pc, #16]	@ (8022210 <CDC_Control_FS+0x34>)
 80221fe:	18d3      	adds	r3, r2, r3
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022204:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8022206:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022208:	0018      	movs	r0, r3
 802220a:	46bd      	mov	sp, r7
 802220c:	b002      	add	sp, #8
 802220e:	bd80      	pop	{r7, pc}
 8022210:	0802dd10 	.word	0x0802dd10

08022214 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022214:	b580      	push	{r7, lr}
 8022216:	b082      	sub	sp, #8
 8022218:	af00      	add	r7, sp, #0
 802221a:	6078      	str	r0, [r7, #4]
 802221c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 802221e:	4b12      	ldr	r3, [pc, #72]	@ (8022268 <CDC_Receive_FS+0x54>)
 8022220:	781b      	ldrb	r3, [r3, #0]
 8022222:	2b00      	cmp	r3, #0
 8022224:	d013      	beq.n	802224e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8022226:	683b      	ldr	r3, [r7, #0]
 8022228:	681b      	ldr	r3, [r3, #0]
 802222a:	b29a      	uxth	r2, r3
 802222c:	2301      	movs	r3, #1
 802222e:	425b      	negs	r3, r3
 8022230:	6879      	ldr	r1, [r7, #4]
 8022232:	480e      	ldr	r0, [pc, #56]	@ (802226c <CDC_Receive_FS+0x58>)
 8022234:	f7fa fa44 	bl	801c6c0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022238:	687a      	ldr	r2, [r7, #4]
 802223a:	4b0d      	ldr	r3, [pc, #52]	@ (8022270 <CDC_Receive_FS+0x5c>)
 802223c:	0011      	movs	r1, r2
 802223e:	0018      	movs	r0, r3
 8022240:	f7fe fcf5 	bl	8020c2e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022244:	4b0a      	ldr	r3, [pc, #40]	@ (8022270 <CDC_Receive_FS+0x5c>)
 8022246:	0018      	movs	r0, r3
 8022248:	f7fe fd3c 	bl	8020cc4 <USBD_CDC_ReceivePacket>
 802224c:	e006      	b.n	802225c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 802224e:	683b      	ldr	r3, [r7, #0]
 8022250:	681a      	ldr	r2, [r3, #0]
 8022252:	4b08      	ldr	r3, [pc, #32]	@ (8022274 <CDC_Receive_FS+0x60>)
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	18d2      	adds	r2, r2, r3
 8022258:	4b06      	ldr	r3, [pc, #24]	@ (8022274 <CDC_Receive_FS+0x60>)
 802225a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 802225c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802225e:	0018      	movs	r0, r3
 8022260:	46bd      	mov	sp, r7
 8022262:	b002      	add	sp, #8
 8022264:	bd80      	pop	{r7, pc}
 8022266:	46c0      	nop			@ (mov r8, r8)
 8022268:	200024f4 	.word	0x200024f4
 802226c:	200024f8 	.word	0x200024f8
 8022270:	20002230 	.word	0x20002230
 8022274:	200025b0 	.word	0x200025b0

08022278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022278:	b5b0      	push	{r4, r5, r7, lr}
 802227a:	b084      	sub	sp, #16
 802227c:	af00      	add	r7, sp, #0
 802227e:	6078      	str	r0, [r7, #4]
 8022280:	000a      	movs	r2, r1
 8022282:	1cbb      	adds	r3, r7, #2
 8022284:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8022286:	230f      	movs	r3, #15
 8022288:	18fb      	adds	r3, r7, r3
 802228a:	2200      	movs	r2, #0
 802228c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802228e:	4a11      	ldr	r2, [pc, #68]	@ (80222d4 <CDC_Transmit_FS+0x5c>)
 8022290:	23ae      	movs	r3, #174	@ 0xae
 8022292:	009b      	lsls	r3, r3, #2
 8022294:	58d3      	ldr	r3, [r2, r3]
 8022296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022298:	68ba      	ldr	r2, [r7, #8]
 802229a:	2385      	movs	r3, #133	@ 0x85
 802229c:	009b      	lsls	r3, r3, #2
 802229e:	58d3      	ldr	r3, [r2, r3]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d001      	beq.n	80222a8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80222a4:	2301      	movs	r3, #1
 80222a6:	e010      	b.n	80222ca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80222a8:	1cbb      	adds	r3, r7, #2
 80222aa:	881a      	ldrh	r2, [r3, #0]
 80222ac:	6879      	ldr	r1, [r7, #4]
 80222ae:	4b09      	ldr	r3, [pc, #36]	@ (80222d4 <CDC_Transmit_FS+0x5c>)
 80222b0:	0018      	movs	r0, r3
 80222b2:	f7fe fca0 	bl	8020bf6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80222b6:	250f      	movs	r5, #15
 80222b8:	197c      	adds	r4, r7, r5
 80222ba:	4b06      	ldr	r3, [pc, #24]	@ (80222d4 <CDC_Transmit_FS+0x5c>)
 80222bc:	0018      	movs	r0, r3
 80222be:	f7fe fcca 	bl	8020c56 <USBD_CDC_TransmitPacket>
 80222c2:	0003      	movs	r3, r0
 80222c4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80222c6:	197b      	adds	r3, r7, r5
 80222c8:	781b      	ldrb	r3, [r3, #0]
}
 80222ca:	0018      	movs	r0, r3
 80222cc:	46bd      	mov	sp, r7
 80222ce:	b004      	add	sp, #16
 80222d0:	bdb0      	pop	{r4, r5, r7, pc}
 80222d2:	46c0      	nop			@ (mov r8, r8)
 80222d4:	20002230 	.word	0x20002230

080222d8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80222d8:	b580      	push	{r7, lr}
 80222da:	af00      	add	r7, sp, #0
  ESPProg = true;
 80222dc:	4b02      	ldr	r3, [pc, #8]	@ (80222e8 <EnableESPProg+0x10>)
 80222de:	2201      	movs	r2, #1
 80222e0:	701a      	strb	r2, [r3, #0]
}
 80222e2:	46c0      	nop			@ (mov r8, r8)
 80222e4:	46bd      	mov	sp, r7
 80222e6:	bd80      	pop	{r7, pc}
 80222e8:	200024f4 	.word	0x200024f4

080222ec <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80222ec:	b580      	push	{r7, lr}
 80222ee:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80222f0:	4b01      	ldr	r3, [pc, #4]	@ (80222f8 <GetUsbRxPointer+0xc>)
}
 80222f2:	0018      	movs	r0, r3
 80222f4:	46bd      	mov	sp, r7
 80222f6:	bd80      	pop	{r7, pc}
 80222f8:	200025b4 	.word	0x200025b4

080222fc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8022300:	4b07      	ldr	r3, [pc, #28]	@ (8022320 <ResetUsbRxDataSize+0x24>)
 8022302:	2200      	movs	r2, #0
 8022304:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8022306:	4a07      	ldr	r2, [pc, #28]	@ (8022324 <ResetUsbRxDataSize+0x28>)
 8022308:	4b07      	ldr	r3, [pc, #28]	@ (8022328 <ResetUsbRxDataSize+0x2c>)
 802230a:	0011      	movs	r1, r2
 802230c:	0018      	movs	r0, r3
 802230e:	f7fe fc8e 	bl	8020c2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022312:	4b05      	ldr	r3, [pc, #20]	@ (8022328 <ResetUsbRxDataSize+0x2c>)
 8022314:	0018      	movs	r0, r3
 8022316:	f7fe fcd5 	bl	8020cc4 <USBD_CDC_ReceivePacket>
}
 802231a:	46c0      	nop			@ (mov r8, r8)
 802231c:	46bd      	mov	sp, r7
 802231e:	bd80      	pop	{r7, pc}
 8022320:	200025b0 	.word	0x200025b0
 8022324:	200025b4 	.word	0x200025b4
 8022328:	20002230 	.word	0x20002230

0802232c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 802232c:	b580      	push	{r7, lr}
 802232e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8022330:	4b02      	ldr	r3, [pc, #8]	@ (802233c <GetUsbRxDataSize+0x10>)
 8022332:	681b      	ldr	r3, [r3, #0]
}
 8022334:	0018      	movs	r0, r3
 8022336:	46bd      	mov	sp, r7
 8022338:	bd80      	pop	{r7, pc}
 802233a:	46c0      	nop			@ (mov r8, r8)
 802233c:	200025b0 	.word	0x200025b0

08022340 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8022340:	b580      	push	{r7, lr}
 8022342:	b082      	sub	sp, #8
 8022344:	af00      	add	r7, sp, #0
 8022346:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8022348:	687a      	ldr	r2, [r7, #4]
 802234a:	4b07      	ldr	r3, [pc, #28]	@ (8022368 <GetUsbRxNextChunk+0x28>)
 802234c:	18d2      	adds	r2, r2, r3
 802234e:	4b07      	ldr	r3, [pc, #28]	@ (802236c <GetUsbRxNextChunk+0x2c>)
 8022350:	0011      	movs	r1, r2
 8022352:	0018      	movs	r0, r3
 8022354:	f7fe fc6b 	bl	8020c2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022358:	4b04      	ldr	r3, [pc, #16]	@ (802236c <GetUsbRxNextChunk+0x2c>)
 802235a:	0018      	movs	r0, r3
 802235c:	f7fe fcb2 	bl	8020cc4 <USBD_CDC_ReceivePacket>
}
 8022360:	46c0      	nop			@ (mov r8, r8)
 8022362:	46bd      	mov	sp, r7
 8022364:	b002      	add	sp, #8
 8022366:	bd80      	pop	{r7, pc}
 8022368:	200025b4 	.word	0x200025b4
 802236c:	20002230 	.word	0x20002230

08022370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022370:	b580      	push	{r7, lr}
 8022372:	b082      	sub	sp, #8
 8022374:	af00      	add	r7, sp, #0
 8022376:	0002      	movs	r2, r0
 8022378:	6039      	str	r1, [r7, #0]
 802237a:	1dfb      	adds	r3, r7, #7
 802237c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802237e:	683b      	ldr	r3, [r7, #0]
 8022380:	2212      	movs	r2, #18
 8022382:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8022384:	4b02      	ldr	r3, [pc, #8]	@ (8022390 <USBD_FS_DeviceDescriptor+0x20>)
}
 8022386:	0018      	movs	r0, r3
 8022388:	46bd      	mov	sp, r7
 802238a:	b002      	add	sp, #8
 802238c:	bd80      	pop	{r7, pc}
 802238e:	46c0      	nop			@ (mov r8, r8)
 8022390:	20000234 	.word	0x20000234

08022394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	b082      	sub	sp, #8
 8022398:	af00      	add	r7, sp, #0
 802239a:	0002      	movs	r2, r0
 802239c:	6039      	str	r1, [r7, #0]
 802239e:	1dfb      	adds	r3, r7, #7
 80223a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80223a2:	683b      	ldr	r3, [r7, #0]
 80223a4:	2204      	movs	r2, #4
 80223a6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80223a8:	4b02      	ldr	r3, [pc, #8]	@ (80223b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80223aa:	0018      	movs	r0, r3
 80223ac:	46bd      	mov	sp, r7
 80223ae:	b002      	add	sp, #8
 80223b0:	bd80      	pop	{r7, pc}
 80223b2:	46c0      	nop			@ (mov r8, r8)
 80223b4:	20000248 	.word	0x20000248

080223b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223b8:	b580      	push	{r7, lr}
 80223ba:	b082      	sub	sp, #8
 80223bc:	af00      	add	r7, sp, #0
 80223be:	0002      	movs	r2, r0
 80223c0:	6039      	str	r1, [r7, #0]
 80223c2:	1dfb      	adds	r3, r7, #7
 80223c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80223c6:	1dfb      	adds	r3, r7, #7
 80223c8:	781b      	ldrb	r3, [r3, #0]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d106      	bne.n	80223dc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80223ce:	683a      	ldr	r2, [r7, #0]
 80223d0:	4908      	ldr	r1, [pc, #32]	@ (80223f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80223d2:	4b09      	ldr	r3, [pc, #36]	@ (80223f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80223d4:	0018      	movs	r0, r3
 80223d6:	f7ff fdb1 	bl	8021f3c <USBD_GetString>
 80223da:	e005      	b.n	80223e8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80223dc:	683a      	ldr	r2, [r7, #0]
 80223de:	4905      	ldr	r1, [pc, #20]	@ (80223f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80223e0:	4b05      	ldr	r3, [pc, #20]	@ (80223f8 <USBD_FS_ProductStrDescriptor+0x40>)
 80223e2:	0018      	movs	r0, r3
 80223e4:	f7ff fdaa 	bl	8021f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80223e8:	4b02      	ldr	r3, [pc, #8]	@ (80223f4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80223ea:	0018      	movs	r0, r3
 80223ec:	46bd      	mov	sp, r7
 80223ee:	b002      	add	sp, #8
 80223f0:	bd80      	pop	{r7, pc}
 80223f2:	46c0      	nop			@ (mov r8, r8)
 80223f4:	20002db4 	.word	0x20002db4
 80223f8:	0802d6cc 	.word	0x0802d6cc

080223fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223fc:	b580      	push	{r7, lr}
 80223fe:	b082      	sub	sp, #8
 8022400:	af00      	add	r7, sp, #0
 8022402:	0002      	movs	r2, r0
 8022404:	6039      	str	r1, [r7, #0]
 8022406:	1dfb      	adds	r3, r7, #7
 8022408:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802240a:	683a      	ldr	r2, [r7, #0]
 802240c:	4904      	ldr	r1, [pc, #16]	@ (8022420 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802240e:	4b05      	ldr	r3, [pc, #20]	@ (8022424 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8022410:	0018      	movs	r0, r3
 8022412:	f7ff fd93 	bl	8021f3c <USBD_GetString>
  return USBD_StrDesc;
 8022416:	4b02      	ldr	r3, [pc, #8]	@ (8022420 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8022418:	0018      	movs	r0, r3
 802241a:	46bd      	mov	sp, r7
 802241c:	b002      	add	sp, #8
 802241e:	bd80      	pop	{r7, pc}
 8022420:	20002db4 	.word	0x20002db4
 8022424:	0802d6e4 	.word	0x0802d6e4

08022428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022428:	b580      	push	{r7, lr}
 802242a:	b082      	sub	sp, #8
 802242c:	af00      	add	r7, sp, #0
 802242e:	0002      	movs	r2, r0
 8022430:	6039      	str	r1, [r7, #0]
 8022432:	1dfb      	adds	r3, r7, #7
 8022434:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022436:	683b      	ldr	r3, [r7, #0]
 8022438:	221a      	movs	r2, #26
 802243a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802243c:	f000 f84c 	bl	80224d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022440:	4b02      	ldr	r3, [pc, #8]	@ (802244c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8022442:	0018      	movs	r0, r3
 8022444:	46bd      	mov	sp, r7
 8022446:	b002      	add	sp, #8
 8022448:	bd80      	pop	{r7, pc}
 802244a:	46c0      	nop			@ (mov r8, r8)
 802244c:	2000024c 	.word	0x2000024c

08022450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022450:	b580      	push	{r7, lr}
 8022452:	b082      	sub	sp, #8
 8022454:	af00      	add	r7, sp, #0
 8022456:	0002      	movs	r2, r0
 8022458:	6039      	str	r1, [r7, #0]
 802245a:	1dfb      	adds	r3, r7, #7
 802245c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 802245e:	1dfb      	adds	r3, r7, #7
 8022460:	781b      	ldrb	r3, [r3, #0]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d106      	bne.n	8022474 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022466:	683a      	ldr	r2, [r7, #0]
 8022468:	4908      	ldr	r1, [pc, #32]	@ (802248c <USBD_FS_ConfigStrDescriptor+0x3c>)
 802246a:	4b09      	ldr	r3, [pc, #36]	@ (8022490 <USBD_FS_ConfigStrDescriptor+0x40>)
 802246c:	0018      	movs	r0, r3
 802246e:	f7ff fd65 	bl	8021f3c <USBD_GetString>
 8022472:	e005      	b.n	8022480 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022474:	683a      	ldr	r2, [r7, #0]
 8022476:	4905      	ldr	r1, [pc, #20]	@ (802248c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022478:	4b05      	ldr	r3, [pc, #20]	@ (8022490 <USBD_FS_ConfigStrDescriptor+0x40>)
 802247a:	0018      	movs	r0, r3
 802247c:	f7ff fd5e 	bl	8021f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8022480:	4b02      	ldr	r3, [pc, #8]	@ (802248c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8022482:	0018      	movs	r0, r3
 8022484:	46bd      	mov	sp, r7
 8022486:	b002      	add	sp, #8
 8022488:	bd80      	pop	{r7, pc}
 802248a:	46c0      	nop			@ (mov r8, r8)
 802248c:	20002db4 	.word	0x20002db4
 8022490:	0802d6f8 	.word	0x0802d6f8

08022494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b082      	sub	sp, #8
 8022498:	af00      	add	r7, sp, #0
 802249a:	0002      	movs	r2, r0
 802249c:	6039      	str	r1, [r7, #0]
 802249e:	1dfb      	adds	r3, r7, #7
 80224a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80224a2:	1dfb      	adds	r3, r7, #7
 80224a4:	781b      	ldrb	r3, [r3, #0]
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d106      	bne.n	80224b8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80224aa:	683a      	ldr	r2, [r7, #0]
 80224ac:	4908      	ldr	r1, [pc, #32]	@ (80224d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80224ae:	4b09      	ldr	r3, [pc, #36]	@ (80224d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80224b0:	0018      	movs	r0, r3
 80224b2:	f7ff fd43 	bl	8021f3c <USBD_GetString>
 80224b6:	e005      	b.n	80224c4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80224b8:	683a      	ldr	r2, [r7, #0]
 80224ba:	4905      	ldr	r1, [pc, #20]	@ (80224d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80224bc:	4b05      	ldr	r3, [pc, #20]	@ (80224d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80224be:	0018      	movs	r0, r3
 80224c0:	f7ff fd3c 	bl	8021f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80224c4:	4b02      	ldr	r3, [pc, #8]	@ (80224d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80224c6:	0018      	movs	r0, r3
 80224c8:	46bd      	mov	sp, r7
 80224ca:	b002      	add	sp, #8
 80224cc:	bd80      	pop	{r7, pc}
 80224ce:	46c0      	nop			@ (mov r8, r8)
 80224d0:	20002db4 	.word	0x20002db4
 80224d4:	0802d704 	.word	0x0802d704

080224d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80224d8:	b580      	push	{r7, lr}
 80224da:	b084      	sub	sp, #16
 80224dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80224de:	4b10      	ldr	r3, [pc, #64]	@ (8022520 <Get_SerialNum+0x48>)
 80224e0:	681b      	ldr	r3, [r3, #0]
 80224e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80224e4:	4b0f      	ldr	r3, [pc, #60]	@ (8022524 <Get_SerialNum+0x4c>)
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80224ea:	4b0f      	ldr	r3, [pc, #60]	@ (8022528 <Get_SerialNum+0x50>)
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80224f0:	68fa      	ldr	r2, [r7, #12]
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	18d3      	adds	r3, r2, r3
 80224f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80224f8:	68fb      	ldr	r3, [r7, #12]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d00b      	beq.n	8022516 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80224fe:	490b      	ldr	r1, [pc, #44]	@ (802252c <Get_SerialNum+0x54>)
 8022500:	68fb      	ldr	r3, [r7, #12]
 8022502:	2208      	movs	r2, #8
 8022504:	0018      	movs	r0, r3
 8022506:	f000 f815 	bl	8022534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802250a:	4909      	ldr	r1, [pc, #36]	@ (8022530 <Get_SerialNum+0x58>)
 802250c:	68bb      	ldr	r3, [r7, #8]
 802250e:	2204      	movs	r2, #4
 8022510:	0018      	movs	r0, r3
 8022512:	f000 f80f 	bl	8022534 <IntToUnicode>
  }
}
 8022516:	46c0      	nop			@ (mov r8, r8)
 8022518:	46bd      	mov	sp, r7
 802251a:	b004      	add	sp, #16
 802251c:	bd80      	pop	{r7, pc}
 802251e:	46c0      	nop			@ (mov r8, r8)
 8022520:	1ff80050 	.word	0x1ff80050
 8022524:	1ff80054 	.word	0x1ff80054
 8022528:	1ff80058 	.word	0x1ff80058
 802252c:	2000024e 	.word	0x2000024e
 8022530:	2000025e 	.word	0x2000025e

08022534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022534:	b580      	push	{r7, lr}
 8022536:	b086      	sub	sp, #24
 8022538:	af00      	add	r7, sp, #0
 802253a:	60f8      	str	r0, [r7, #12]
 802253c:	60b9      	str	r1, [r7, #8]
 802253e:	1dfb      	adds	r3, r7, #7
 8022540:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8022542:	2117      	movs	r1, #23
 8022544:	187b      	adds	r3, r7, r1
 8022546:	2200      	movs	r2, #0
 8022548:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802254a:	187b      	adds	r3, r7, r1
 802254c:	2200      	movs	r2, #0
 802254e:	701a      	strb	r2, [r3, #0]
 8022550:	e02f      	b.n	80225b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8022552:	68fb      	ldr	r3, [r7, #12]
 8022554:	0f1b      	lsrs	r3, r3, #28
 8022556:	2b09      	cmp	r3, #9
 8022558:	d80d      	bhi.n	8022576 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802255a:	68fb      	ldr	r3, [r7, #12]
 802255c:	0f1b      	lsrs	r3, r3, #28
 802255e:	b2da      	uxtb	r2, r3
 8022560:	2317      	movs	r3, #23
 8022562:	18fb      	adds	r3, r7, r3
 8022564:	781b      	ldrb	r3, [r3, #0]
 8022566:	005b      	lsls	r3, r3, #1
 8022568:	0019      	movs	r1, r3
 802256a:	68bb      	ldr	r3, [r7, #8]
 802256c:	185b      	adds	r3, r3, r1
 802256e:	3230      	adds	r2, #48	@ 0x30
 8022570:	b2d2      	uxtb	r2, r2
 8022572:	701a      	strb	r2, [r3, #0]
 8022574:	e00c      	b.n	8022590 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022576:	68fb      	ldr	r3, [r7, #12]
 8022578:	0f1b      	lsrs	r3, r3, #28
 802257a:	b2da      	uxtb	r2, r3
 802257c:	2317      	movs	r3, #23
 802257e:	18fb      	adds	r3, r7, r3
 8022580:	781b      	ldrb	r3, [r3, #0]
 8022582:	005b      	lsls	r3, r3, #1
 8022584:	0019      	movs	r1, r3
 8022586:	68bb      	ldr	r3, [r7, #8]
 8022588:	185b      	adds	r3, r3, r1
 802258a:	3237      	adds	r2, #55	@ 0x37
 802258c:	b2d2      	uxtb	r2, r2
 802258e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022590:	68fb      	ldr	r3, [r7, #12]
 8022592:	011b      	lsls	r3, r3, #4
 8022594:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022596:	2117      	movs	r1, #23
 8022598:	187b      	adds	r3, r7, r1
 802259a:	781b      	ldrb	r3, [r3, #0]
 802259c:	005b      	lsls	r3, r3, #1
 802259e:	3301      	adds	r3, #1
 80225a0:	68ba      	ldr	r2, [r7, #8]
 80225a2:	18d3      	adds	r3, r2, r3
 80225a4:	2200      	movs	r2, #0
 80225a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80225a8:	187b      	adds	r3, r7, r1
 80225aa:	781a      	ldrb	r2, [r3, #0]
 80225ac:	187b      	adds	r3, r7, r1
 80225ae:	3201      	adds	r2, #1
 80225b0:	701a      	strb	r2, [r3, #0]
 80225b2:	2317      	movs	r3, #23
 80225b4:	18fa      	adds	r2, r7, r3
 80225b6:	1dfb      	adds	r3, r7, #7
 80225b8:	7812      	ldrb	r2, [r2, #0]
 80225ba:	781b      	ldrb	r3, [r3, #0]
 80225bc:	429a      	cmp	r2, r3
 80225be:	d3c8      	bcc.n	8022552 <IntToUnicode+0x1e>
  }
}
 80225c0:	46c0      	nop			@ (mov r8, r8)
 80225c2:	46c0      	nop			@ (mov r8, r8)
 80225c4:	46bd      	mov	sp, r7
 80225c6:	b006      	add	sp, #24
 80225c8:	bd80      	pop	{r7, pc}
	...

080225cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80225cc:	b580      	push	{r7, lr}
 80225ce:	b082      	sub	sp, #8
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	4a0a      	ldr	r2, [pc, #40]	@ (8022604 <HAL_PCD_MspInit+0x38>)
 80225da:	4293      	cmp	r3, r2
 80225dc:	d10e      	bne.n	80225fc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80225de:	4b0a      	ldr	r3, [pc, #40]	@ (8022608 <HAL_PCD_MspInit+0x3c>)
 80225e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80225e2:	4b09      	ldr	r3, [pc, #36]	@ (8022608 <HAL_PCD_MspInit+0x3c>)
 80225e4:	2180      	movs	r1, #128	@ 0x80
 80225e6:	0409      	lsls	r1, r1, #16
 80225e8:	430a      	orrs	r2, r1
 80225ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80225ec:	2200      	movs	r2, #0
 80225ee:	2100      	movs	r1, #0
 80225f0:	201f      	movs	r0, #31
 80225f2:	f7f1 ffb3 	bl	801455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80225f6:	201f      	movs	r0, #31
 80225f8:	f7f1 ffc5 	bl	8014586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80225fc:	46c0      	nop			@ (mov r8, r8)
 80225fe:	46bd      	mov	sp, r7
 8022600:	b002      	add	sp, #8
 8022602:	bd80      	pop	{r7, pc}
 8022604:	40005c00 	.word	0x40005c00
 8022608:	40021000 	.word	0x40021000

0802260c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802260c:	b580      	push	{r7, lr}
 802260e:	b082      	sub	sp, #8
 8022610:	af00      	add	r7, sp, #0
 8022612:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022614:	687a      	ldr	r2, [r7, #4]
 8022616:	23bc      	movs	r3, #188	@ 0xbc
 8022618:	009b      	lsls	r3, r3, #2
 802261a:	58d2      	ldr	r2, [r2, r3]
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	21ac      	movs	r1, #172	@ 0xac
 8022620:	0089      	lsls	r1, r1, #2
 8022622:	468c      	mov	ip, r1
 8022624:	4463      	add	r3, ip
 8022626:	0019      	movs	r1, r3
 8022628:	0010      	movs	r0, r2
 802262a:	f7fe fc1d 	bl	8020e68 <USBD_LL_SetupStage>
}
 802262e:	46c0      	nop			@ (mov r8, r8)
 8022630:	46bd      	mov	sp, r7
 8022632:	b002      	add	sp, #8
 8022634:	bd80      	pop	{r7, pc}

08022636 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022636:	b590      	push	{r4, r7, lr}
 8022638:	b083      	sub	sp, #12
 802263a:	af00      	add	r7, sp, #0
 802263c:	6078      	str	r0, [r7, #4]
 802263e:	000a      	movs	r2, r1
 8022640:	1cfb      	adds	r3, r7, #3
 8022642:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022644:	687a      	ldr	r2, [r7, #4]
 8022646:	23bc      	movs	r3, #188	@ 0xbc
 8022648:	009b      	lsls	r3, r3, #2
 802264a:	58d4      	ldr	r4, [r2, r3]
 802264c:	1cfb      	adds	r3, r7, #3
 802264e:	781a      	ldrb	r2, [r3, #0]
 8022650:	6878      	ldr	r0, [r7, #4]
 8022652:	23be      	movs	r3, #190	@ 0xbe
 8022654:	0059      	lsls	r1, r3, #1
 8022656:	0013      	movs	r3, r2
 8022658:	009b      	lsls	r3, r3, #2
 802265a:	189b      	adds	r3, r3, r2
 802265c:	00db      	lsls	r3, r3, #3
 802265e:	18c3      	adds	r3, r0, r3
 8022660:	185b      	adds	r3, r3, r1
 8022662:	681a      	ldr	r2, [r3, #0]
 8022664:	1cfb      	adds	r3, r7, #3
 8022666:	781b      	ldrb	r3, [r3, #0]
 8022668:	0019      	movs	r1, r3
 802266a:	0020      	movs	r0, r4
 802266c:	f7fe fc5a 	bl	8020f24 <USBD_LL_DataOutStage>
}
 8022670:	46c0      	nop			@ (mov r8, r8)
 8022672:	46bd      	mov	sp, r7
 8022674:	b003      	add	sp, #12
 8022676:	bd90      	pop	{r4, r7, pc}

08022678 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022678:	b580      	push	{r7, lr}
 802267a:	b082      	sub	sp, #8
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
 8022680:	000a      	movs	r2, r1
 8022682:	1cfb      	adds	r3, r7, #3
 8022684:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022686:	687a      	ldr	r2, [r7, #4]
 8022688:	23bc      	movs	r3, #188	@ 0xbc
 802268a:	009b      	lsls	r3, r3, #2
 802268c:	58d0      	ldr	r0, [r2, r3]
 802268e:	1cfb      	adds	r3, r7, #3
 8022690:	781a      	ldrb	r2, [r3, #0]
 8022692:	6879      	ldr	r1, [r7, #4]
 8022694:	0013      	movs	r3, r2
 8022696:	009b      	lsls	r3, r3, #2
 8022698:	189b      	adds	r3, r3, r2
 802269a:	00db      	lsls	r3, r3, #3
 802269c:	18cb      	adds	r3, r1, r3
 802269e:	333c      	adds	r3, #60	@ 0x3c
 80226a0:	681a      	ldr	r2, [r3, #0]
 80226a2:	1cfb      	adds	r3, r7, #3
 80226a4:	781b      	ldrb	r3, [r3, #0]
 80226a6:	0019      	movs	r1, r3
 80226a8:	f7fe fcbe 	bl	8021028 <USBD_LL_DataInStage>
}
 80226ac:	46c0      	nop			@ (mov r8, r8)
 80226ae:	46bd      	mov	sp, r7
 80226b0:	b002      	add	sp, #8
 80226b2:	bd80      	pop	{r7, pc}

080226b4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b082      	sub	sp, #8
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80226bc:	687a      	ldr	r2, [r7, #4]
 80226be:	23bc      	movs	r3, #188	@ 0xbc
 80226c0:	009b      	lsls	r3, r3, #2
 80226c2:	58d3      	ldr	r3, [r2, r3]
 80226c4:	0018      	movs	r0, r3
 80226c6:	f7fe fdf5 	bl	80212b4 <USBD_LL_SOF>
}
 80226ca:	46c0      	nop			@ (mov r8, r8)
 80226cc:	46bd      	mov	sp, r7
 80226ce:	b002      	add	sp, #8
 80226d0:	bd80      	pop	{r7, pc}

080226d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226d2:	b580      	push	{r7, lr}
 80226d4:	b084      	sub	sp, #16
 80226d6:	af00      	add	r7, sp, #0
 80226d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80226da:	230f      	movs	r3, #15
 80226dc:	18fb      	adds	r3, r7, r3
 80226de:	2201      	movs	r2, #1
 80226e0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	689b      	ldr	r3, [r3, #8]
 80226e6:	2b02      	cmp	r3, #2
 80226e8:	d001      	beq.n	80226ee <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80226ea:	f7ea f8f1 	bl	800c8d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80226ee:	687a      	ldr	r2, [r7, #4]
 80226f0:	23bc      	movs	r3, #188	@ 0xbc
 80226f2:	009b      	lsls	r3, r3, #2
 80226f4:	58d2      	ldr	r2, [r2, r3]
 80226f6:	230f      	movs	r3, #15
 80226f8:	18fb      	adds	r3, r7, r3
 80226fa:	781b      	ldrb	r3, [r3, #0]
 80226fc:	0019      	movs	r1, r3
 80226fe:	0010      	movs	r0, r2
 8022700:	f7fe fd97 	bl	8021232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022704:	687a      	ldr	r2, [r7, #4]
 8022706:	23bc      	movs	r3, #188	@ 0xbc
 8022708:	009b      	lsls	r3, r3, #2
 802270a:	58d3      	ldr	r3, [r2, r3]
 802270c:	0018      	movs	r0, r3
 802270e:	f7fe fd48 	bl	80211a2 <USBD_LL_Reset>
}
 8022712:	46c0      	nop			@ (mov r8, r8)
 8022714:	46bd      	mov	sp, r7
 8022716:	b004      	add	sp, #16
 8022718:	bd80      	pop	{r7, pc}
	...

0802271c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802271c:	b580      	push	{r7, lr}
 802271e:	b082      	sub	sp, #8
 8022720:	af00      	add	r7, sp, #0
 8022722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022724:	687a      	ldr	r2, [r7, #4]
 8022726:	23bc      	movs	r3, #188	@ 0xbc
 8022728:	009b      	lsls	r3, r3, #2
 802272a:	58d3      	ldr	r3, [r2, r3]
 802272c:	0018      	movs	r0, r3
 802272e:	f7fe fd91 	bl	8021254 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	699b      	ldr	r3, [r3, #24]
 8022736:	2b00      	cmp	r3, #0
 8022738:	d005      	beq.n	8022746 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802273a:	4b05      	ldr	r3, [pc, #20]	@ (8022750 <HAL_PCD_SuspendCallback+0x34>)
 802273c:	691a      	ldr	r2, [r3, #16]
 802273e:	4b04      	ldr	r3, [pc, #16]	@ (8022750 <HAL_PCD_SuspendCallback+0x34>)
 8022740:	2106      	movs	r1, #6
 8022742:	430a      	orrs	r2, r1
 8022744:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8022746:	46c0      	nop			@ (mov r8, r8)
 8022748:	46bd      	mov	sp, r7
 802274a:	b002      	add	sp, #8
 802274c:	bd80      	pop	{r7, pc}
 802274e:	46c0      	nop			@ (mov r8, r8)
 8022750:	e000ed00 	.word	0xe000ed00

08022754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022754:	b580      	push	{r7, lr}
 8022756:	b082      	sub	sp, #8
 8022758:	af00      	add	r7, sp, #0
 802275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	699b      	ldr	r3, [r3, #24]
 8022760:	2b00      	cmp	r3, #0
 8022762:	d007      	beq.n	8022774 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022764:	4b09      	ldr	r3, [pc, #36]	@ (802278c <HAL_PCD_ResumeCallback+0x38>)
 8022766:	691a      	ldr	r2, [r3, #16]
 8022768:	4b08      	ldr	r3, [pc, #32]	@ (802278c <HAL_PCD_ResumeCallback+0x38>)
 802276a:	2106      	movs	r1, #6
 802276c:	438a      	bics	r2, r1
 802276e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8022770:	f000 fa44 	bl	8022bfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022774:	687a      	ldr	r2, [r7, #4]
 8022776:	23bc      	movs	r3, #188	@ 0xbc
 8022778:	009b      	lsls	r3, r3, #2
 802277a:	58d3      	ldr	r3, [r2, r3]
 802277c:	0018      	movs	r0, r3
 802277e:	f7fe fd81 	bl	8021284 <USBD_LL_Resume>
}
 8022782:	46c0      	nop			@ (mov r8, r8)
 8022784:	46bd      	mov	sp, r7
 8022786:	b002      	add	sp, #8
 8022788:	bd80      	pop	{r7, pc}
 802278a:	46c0      	nop			@ (mov r8, r8)
 802278c:	e000ed00 	.word	0xe000ed00

08022790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b082      	sub	sp, #8
 8022794:	af00      	add	r7, sp, #0
 8022796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8022798:	4a2d      	ldr	r2, [pc, #180]	@ (8022850 <USBD_LL_Init+0xc0>)
 802279a:	23bc      	movs	r3, #188	@ 0xbc
 802279c:	009b      	lsls	r3, r3, #2
 802279e:	6879      	ldr	r1, [r7, #4]
 80227a0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80227a2:	687a      	ldr	r2, [r7, #4]
 80227a4:	23b0      	movs	r3, #176	@ 0xb0
 80227a6:	009b      	lsls	r3, r3, #2
 80227a8:	4929      	ldr	r1, [pc, #164]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227aa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80227ac:	4b28      	ldr	r3, [pc, #160]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227ae:	4a29      	ldr	r2, [pc, #164]	@ (8022854 <USBD_LL_Init+0xc4>)
 80227b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80227b2:	4b27      	ldr	r3, [pc, #156]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227b4:	2208      	movs	r2, #8
 80227b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80227b8:	4b25      	ldr	r3, [pc, #148]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227ba:	2202      	movs	r2, #2
 80227bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80227be:	4b24      	ldr	r3, [pc, #144]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227c0:	2202      	movs	r2, #2
 80227c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80227c4:	4b22      	ldr	r3, [pc, #136]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227c6:	2200      	movs	r2, #0
 80227c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80227ca:	4b21      	ldr	r3, [pc, #132]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227cc:	2200      	movs	r2, #0
 80227ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80227d0:	4b1f      	ldr	r3, [pc, #124]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227d2:	2200      	movs	r2, #0
 80227d4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80227d6:	4b1e      	ldr	r3, [pc, #120]	@ (8022850 <USBD_LL_Init+0xc0>)
 80227d8:	0018      	movs	r0, r3
 80227da:	f7f5 ff75 	bl	80186c8 <HAL_PCD_Init>
 80227de:	1e03      	subs	r3, r0, #0
 80227e0:	d001      	beq.n	80227e6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80227e2:	f7ea f875 	bl	800c8d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80227e6:	687a      	ldr	r2, [r7, #4]
 80227e8:	23b0      	movs	r3, #176	@ 0xb0
 80227ea:	009b      	lsls	r3, r3, #2
 80227ec:	58d0      	ldr	r0, [r2, r3]
 80227ee:	2318      	movs	r3, #24
 80227f0:	2200      	movs	r2, #0
 80227f2:	2100      	movs	r1, #0
 80227f4:	f7f7 fd36 	bl	801a264 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80227f8:	687a      	ldr	r2, [r7, #4]
 80227fa:	23b0      	movs	r3, #176	@ 0xb0
 80227fc:	009b      	lsls	r3, r3, #2
 80227fe:	58d0      	ldr	r0, [r2, r3]
 8022800:	2358      	movs	r3, #88	@ 0x58
 8022802:	2200      	movs	r2, #0
 8022804:	2180      	movs	r1, #128	@ 0x80
 8022806:	f7f7 fd2d 	bl	801a264 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802280a:	687a      	ldr	r2, [r7, #4]
 802280c:	23b0      	movs	r3, #176	@ 0xb0
 802280e:	009b      	lsls	r3, r3, #2
 8022810:	58d0      	ldr	r0, [r2, r3]
 8022812:	23c0      	movs	r3, #192	@ 0xc0
 8022814:	2200      	movs	r2, #0
 8022816:	2181      	movs	r1, #129	@ 0x81
 8022818:	f7f7 fd24 	bl	801a264 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802281c:	687a      	ldr	r2, [r7, #4]
 802281e:	23b0      	movs	r3, #176	@ 0xb0
 8022820:	009b      	lsls	r3, r3, #2
 8022822:	58d0      	ldr	r0, [r2, r3]
 8022824:	2388      	movs	r3, #136	@ 0x88
 8022826:	005b      	lsls	r3, r3, #1
 8022828:	2200      	movs	r2, #0
 802282a:	2101      	movs	r1, #1
 802282c:	f7f7 fd1a 	bl	801a264 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8022830:	687a      	ldr	r2, [r7, #4]
 8022832:	23b0      	movs	r3, #176	@ 0xb0
 8022834:	009b      	lsls	r3, r3, #2
 8022836:	58d0      	ldr	r0, [r2, r3]
 8022838:	2380      	movs	r3, #128	@ 0x80
 802283a:	005b      	lsls	r3, r3, #1
 802283c:	2200      	movs	r2, #0
 802283e:	2182      	movs	r1, #130	@ 0x82
 8022840:	f7f7 fd10 	bl	801a264 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8022844:	2300      	movs	r3, #0
}
 8022846:	0018      	movs	r0, r3
 8022848:	46bd      	mov	sp, r7
 802284a:	b002      	add	sp, #8
 802284c:	bd80      	pop	{r7, pc}
 802284e:	46c0      	nop			@ (mov r8, r8)
 8022850:	20002fb4 	.word	0x20002fb4
 8022854:	40005c00 	.word	0x40005c00

08022858 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022858:	b5f0      	push	{r4, r5, r6, r7, lr}
 802285a:	b085      	sub	sp, #20
 802285c:	af00      	add	r7, sp, #0
 802285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022860:	210f      	movs	r1, #15
 8022862:	187b      	adds	r3, r7, r1
 8022864:	2200      	movs	r2, #0
 8022866:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022868:	260e      	movs	r6, #14
 802286a:	19bb      	adds	r3, r7, r6
 802286c:	2200      	movs	r2, #0
 802286e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022870:	687a      	ldr	r2, [r7, #4]
 8022872:	23b0      	movs	r3, #176	@ 0xb0
 8022874:	009b      	lsls	r3, r3, #2
 8022876:	58d3      	ldr	r3, [r2, r3]
 8022878:	000d      	movs	r5, r1
 802287a:	187c      	adds	r4, r7, r1
 802287c:	0018      	movs	r0, r3
 802287e:	f7f6 f823 	bl	80188c8 <HAL_PCD_Start>
 8022882:	0003      	movs	r3, r0
 8022884:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022886:	19bc      	adds	r4, r7, r6
 8022888:	197b      	adds	r3, r7, r5
 802288a:	781b      	ldrb	r3, [r3, #0]
 802288c:	0018      	movs	r0, r3
 802288e:	f000 f9bc 	bl	8022c0a <USBD_Get_USB_Status>
 8022892:	0003      	movs	r3, r0
 8022894:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022896:	19bb      	adds	r3, r7, r6
 8022898:	781b      	ldrb	r3, [r3, #0]
}
 802289a:	0018      	movs	r0, r3
 802289c:	46bd      	mov	sp, r7
 802289e:	b005      	add	sp, #20
 80228a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080228a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80228a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228a4:	b085      	sub	sp, #20
 80228a6:	af00      	add	r7, sp, #0
 80228a8:	6078      	str	r0, [r7, #4]
 80228aa:	000c      	movs	r4, r1
 80228ac:	0010      	movs	r0, r2
 80228ae:	0019      	movs	r1, r3
 80228b0:	1cfb      	adds	r3, r7, #3
 80228b2:	1c22      	adds	r2, r4, #0
 80228b4:	701a      	strb	r2, [r3, #0]
 80228b6:	1cbb      	adds	r3, r7, #2
 80228b8:	1c02      	adds	r2, r0, #0
 80228ba:	701a      	strb	r2, [r3, #0]
 80228bc:	003b      	movs	r3, r7
 80228be:	1c0a      	adds	r2, r1, #0
 80228c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228c2:	260f      	movs	r6, #15
 80228c4:	19bb      	adds	r3, r7, r6
 80228c6:	2200      	movs	r2, #0
 80228c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228ca:	250e      	movs	r5, #14
 80228cc:	197b      	adds	r3, r7, r5
 80228ce:	2200      	movs	r2, #0
 80228d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80228d2:	687a      	ldr	r2, [r7, #4]
 80228d4:	23b0      	movs	r3, #176	@ 0xb0
 80228d6:	009b      	lsls	r3, r3, #2
 80228d8:	58d0      	ldr	r0, [r2, r3]
 80228da:	19bc      	adds	r4, r7, r6
 80228dc:	1cbb      	adds	r3, r7, #2
 80228de:	781d      	ldrb	r5, [r3, #0]
 80228e0:	003b      	movs	r3, r7
 80228e2:	881a      	ldrh	r2, [r3, #0]
 80228e4:	1cfb      	adds	r3, r7, #3
 80228e6:	7819      	ldrb	r1, [r3, #0]
 80228e8:	002b      	movs	r3, r5
 80228ea:	f7f6 f982 	bl	8018bf2 <HAL_PCD_EP_Open>
 80228ee:	0003      	movs	r3, r0
 80228f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228f2:	250e      	movs	r5, #14
 80228f4:	197c      	adds	r4, r7, r5
 80228f6:	19bb      	adds	r3, r7, r6
 80228f8:	781b      	ldrb	r3, [r3, #0]
 80228fa:	0018      	movs	r0, r3
 80228fc:	f000 f985 	bl	8022c0a <USBD_Get_USB_Status>
 8022900:	0003      	movs	r3, r0
 8022902:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022904:	197b      	adds	r3, r7, r5
 8022906:	781b      	ldrb	r3, [r3, #0]
}
 8022908:	0018      	movs	r0, r3
 802290a:	46bd      	mov	sp, r7
 802290c:	b005      	add	sp, #20
 802290e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022910 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022912:	b085      	sub	sp, #20
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
 8022918:	000a      	movs	r2, r1
 802291a:	1cfb      	adds	r3, r7, #3
 802291c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802291e:	210f      	movs	r1, #15
 8022920:	187b      	adds	r3, r7, r1
 8022922:	2200      	movs	r2, #0
 8022924:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022926:	260e      	movs	r6, #14
 8022928:	19bb      	adds	r3, r7, r6
 802292a:	2200      	movs	r2, #0
 802292c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802292e:	687a      	ldr	r2, [r7, #4]
 8022930:	23b0      	movs	r3, #176	@ 0xb0
 8022932:	009b      	lsls	r3, r3, #2
 8022934:	58d2      	ldr	r2, [r2, r3]
 8022936:	000d      	movs	r5, r1
 8022938:	187c      	adds	r4, r7, r1
 802293a:	1cfb      	adds	r3, r7, #3
 802293c:	781b      	ldrb	r3, [r3, #0]
 802293e:	0019      	movs	r1, r3
 8022940:	0010      	movs	r0, r2
 8022942:	f7f6 f9c5 	bl	8018cd0 <HAL_PCD_EP_Close>
 8022946:	0003      	movs	r3, r0
 8022948:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802294a:	19bc      	adds	r4, r7, r6
 802294c:	197b      	adds	r3, r7, r5
 802294e:	781b      	ldrb	r3, [r3, #0]
 8022950:	0018      	movs	r0, r3
 8022952:	f000 f95a 	bl	8022c0a <USBD_Get_USB_Status>
 8022956:	0003      	movs	r3, r0
 8022958:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802295a:	19bb      	adds	r3, r7, r6
 802295c:	781b      	ldrb	r3, [r3, #0]
}
 802295e:	0018      	movs	r0, r3
 8022960:	46bd      	mov	sp, r7
 8022962:	b005      	add	sp, #20
 8022964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022966 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022968:	b085      	sub	sp, #20
 802296a:	af00      	add	r7, sp, #0
 802296c:	6078      	str	r0, [r7, #4]
 802296e:	000a      	movs	r2, r1
 8022970:	1cfb      	adds	r3, r7, #3
 8022972:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022974:	210f      	movs	r1, #15
 8022976:	187b      	adds	r3, r7, r1
 8022978:	2200      	movs	r2, #0
 802297a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802297c:	260e      	movs	r6, #14
 802297e:	19bb      	adds	r3, r7, r6
 8022980:	2200      	movs	r2, #0
 8022982:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022984:	687a      	ldr	r2, [r7, #4]
 8022986:	23b0      	movs	r3, #176	@ 0xb0
 8022988:	009b      	lsls	r3, r3, #2
 802298a:	58d2      	ldr	r2, [r2, r3]
 802298c:	000d      	movs	r5, r1
 802298e:	187c      	adds	r4, r7, r1
 8022990:	1cfb      	adds	r3, r7, #3
 8022992:	781b      	ldrb	r3, [r3, #0]
 8022994:	0019      	movs	r1, r3
 8022996:	0010      	movs	r0, r2
 8022998:	f7f6 fa77 	bl	8018e8a <HAL_PCD_EP_SetStall>
 802299c:	0003      	movs	r3, r0
 802299e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229a0:	19bc      	adds	r4, r7, r6
 80229a2:	197b      	adds	r3, r7, r5
 80229a4:	781b      	ldrb	r3, [r3, #0]
 80229a6:	0018      	movs	r0, r3
 80229a8:	f000 f92f 	bl	8022c0a <USBD_Get_USB_Status>
 80229ac:	0003      	movs	r3, r0
 80229ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80229b0:	19bb      	adds	r3, r7, r6
 80229b2:	781b      	ldrb	r3, [r3, #0]
}
 80229b4:	0018      	movs	r0, r3
 80229b6:	46bd      	mov	sp, r7
 80229b8:	b005      	add	sp, #20
 80229ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080229bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80229bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229be:	b085      	sub	sp, #20
 80229c0:	af00      	add	r7, sp, #0
 80229c2:	6078      	str	r0, [r7, #4]
 80229c4:	000a      	movs	r2, r1
 80229c6:	1cfb      	adds	r3, r7, #3
 80229c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229ca:	210f      	movs	r1, #15
 80229cc:	187b      	adds	r3, r7, r1
 80229ce:	2200      	movs	r2, #0
 80229d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229d2:	260e      	movs	r6, #14
 80229d4:	19bb      	adds	r3, r7, r6
 80229d6:	2200      	movs	r2, #0
 80229d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80229da:	687a      	ldr	r2, [r7, #4]
 80229dc:	23b0      	movs	r3, #176	@ 0xb0
 80229de:	009b      	lsls	r3, r3, #2
 80229e0:	58d2      	ldr	r2, [r2, r3]
 80229e2:	000d      	movs	r5, r1
 80229e4:	187c      	adds	r4, r7, r1
 80229e6:	1cfb      	adds	r3, r7, #3
 80229e8:	781b      	ldrb	r3, [r3, #0]
 80229ea:	0019      	movs	r1, r3
 80229ec:	0010      	movs	r0, r2
 80229ee:	f7f6 faa8 	bl	8018f42 <HAL_PCD_EP_ClrStall>
 80229f2:	0003      	movs	r3, r0
 80229f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229f6:	19bc      	adds	r4, r7, r6
 80229f8:	197b      	adds	r3, r7, r5
 80229fa:	781b      	ldrb	r3, [r3, #0]
 80229fc:	0018      	movs	r0, r3
 80229fe:	f000 f904 	bl	8022c0a <USBD_Get_USB_Status>
 8022a02:	0003      	movs	r3, r0
 8022a04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a06:	19bb      	adds	r3, r7, r6
 8022a08:	781b      	ldrb	r3, [r3, #0]
}
 8022a0a:	0018      	movs	r0, r3
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	b005      	add	sp, #20
 8022a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a12 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a12:	b580      	push	{r7, lr}
 8022a14:	b084      	sub	sp, #16
 8022a16:	af00      	add	r7, sp, #0
 8022a18:	6078      	str	r0, [r7, #4]
 8022a1a:	000a      	movs	r2, r1
 8022a1c:	1cfb      	adds	r3, r7, #3
 8022a1e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022a20:	687a      	ldr	r2, [r7, #4]
 8022a22:	23b0      	movs	r3, #176	@ 0xb0
 8022a24:	009b      	lsls	r3, r3, #2
 8022a26:	58d3      	ldr	r3, [r2, r3]
 8022a28:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022a2a:	1cfb      	adds	r3, r7, #3
 8022a2c:	781b      	ldrb	r3, [r3, #0]
 8022a2e:	b25b      	sxtb	r3, r3
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	da0d      	bge.n	8022a50 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022a34:	1cfb      	adds	r3, r7, #3
 8022a36:	781b      	ldrb	r3, [r3, #0]
 8022a38:	227f      	movs	r2, #127	@ 0x7f
 8022a3a:	4013      	ands	r3, r2
 8022a3c:	68f9      	ldr	r1, [r7, #12]
 8022a3e:	1c5a      	adds	r2, r3, #1
 8022a40:	0013      	movs	r3, r2
 8022a42:	009b      	lsls	r3, r3, #2
 8022a44:	189b      	adds	r3, r3, r2
 8022a46:	00db      	lsls	r3, r3, #3
 8022a48:	18cb      	adds	r3, r1, r3
 8022a4a:	3302      	adds	r3, #2
 8022a4c:	781b      	ldrb	r3, [r3, #0]
 8022a4e:	e00d      	b.n	8022a6c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022a50:	1cfb      	adds	r3, r7, #3
 8022a52:	781b      	ldrb	r3, [r3, #0]
 8022a54:	227f      	movs	r2, #127	@ 0x7f
 8022a56:	401a      	ands	r2, r3
 8022a58:	68f8      	ldr	r0, [r7, #12]
 8022a5a:	23b5      	movs	r3, #181	@ 0xb5
 8022a5c:	0059      	lsls	r1, r3, #1
 8022a5e:	0013      	movs	r3, r2
 8022a60:	009b      	lsls	r3, r3, #2
 8022a62:	189b      	adds	r3, r3, r2
 8022a64:	00db      	lsls	r3, r3, #3
 8022a66:	18c3      	adds	r3, r0, r3
 8022a68:	185b      	adds	r3, r3, r1
 8022a6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022a6c:	0018      	movs	r0, r3
 8022a6e:	46bd      	mov	sp, r7
 8022a70:	b004      	add	sp, #16
 8022a72:	bd80      	pop	{r7, pc}

08022a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a76:	b085      	sub	sp, #20
 8022a78:	af00      	add	r7, sp, #0
 8022a7a:	6078      	str	r0, [r7, #4]
 8022a7c:	000a      	movs	r2, r1
 8022a7e:	1cfb      	adds	r3, r7, #3
 8022a80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a82:	210f      	movs	r1, #15
 8022a84:	187b      	adds	r3, r7, r1
 8022a86:	2200      	movs	r2, #0
 8022a88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a8a:	260e      	movs	r6, #14
 8022a8c:	19bb      	adds	r3, r7, r6
 8022a8e:	2200      	movs	r2, #0
 8022a90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022a92:	687a      	ldr	r2, [r7, #4]
 8022a94:	23b0      	movs	r3, #176	@ 0xb0
 8022a96:	009b      	lsls	r3, r3, #2
 8022a98:	58d2      	ldr	r2, [r2, r3]
 8022a9a:	000d      	movs	r5, r1
 8022a9c:	187c      	adds	r4, r7, r1
 8022a9e:	1cfb      	adds	r3, r7, #3
 8022aa0:	781b      	ldrb	r3, [r3, #0]
 8022aa2:	0019      	movs	r1, r3
 8022aa4:	0010      	movs	r0, r2
 8022aa6:	f7f6 f879 	bl	8018b9c <HAL_PCD_SetAddress>
 8022aaa:	0003      	movs	r3, r0
 8022aac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022aae:	19bc      	adds	r4, r7, r6
 8022ab0:	197b      	adds	r3, r7, r5
 8022ab2:	781b      	ldrb	r3, [r3, #0]
 8022ab4:	0018      	movs	r0, r3
 8022ab6:	f000 f8a8 	bl	8022c0a <USBD_Get_USB_Status>
 8022aba:	0003      	movs	r3, r0
 8022abc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022abe:	19bb      	adds	r3, r7, r6
 8022ac0:	781b      	ldrb	r3, [r3, #0]
}
 8022ac2:	0018      	movs	r0, r3
 8022ac4:	46bd      	mov	sp, r7
 8022ac6:	b005      	add	sp, #20
 8022ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022aca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022acc:	b087      	sub	sp, #28
 8022ace:	af00      	add	r7, sp, #0
 8022ad0:	60f8      	str	r0, [r7, #12]
 8022ad2:	0008      	movs	r0, r1
 8022ad4:	607a      	str	r2, [r7, #4]
 8022ad6:	0019      	movs	r1, r3
 8022ad8:	230b      	movs	r3, #11
 8022ada:	18fb      	adds	r3, r7, r3
 8022adc:	1c02      	adds	r2, r0, #0
 8022ade:	701a      	strb	r2, [r3, #0]
 8022ae0:	2408      	movs	r4, #8
 8022ae2:	193b      	adds	r3, r7, r4
 8022ae4:	1c0a      	adds	r2, r1, #0
 8022ae6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ae8:	2117      	movs	r1, #23
 8022aea:	187b      	adds	r3, r7, r1
 8022aec:	2200      	movs	r2, #0
 8022aee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022af0:	2516      	movs	r5, #22
 8022af2:	197b      	adds	r3, r7, r5
 8022af4:	2200      	movs	r2, #0
 8022af6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022af8:	68fa      	ldr	r2, [r7, #12]
 8022afa:	23b0      	movs	r3, #176	@ 0xb0
 8022afc:	009b      	lsls	r3, r3, #2
 8022afe:	58d0      	ldr	r0, [r2, r3]
 8022b00:	193b      	adds	r3, r7, r4
 8022b02:	881d      	ldrh	r5, [r3, #0]
 8022b04:	000e      	movs	r6, r1
 8022b06:	187c      	adds	r4, r7, r1
 8022b08:	687a      	ldr	r2, [r7, #4]
 8022b0a:	230b      	movs	r3, #11
 8022b0c:	18fb      	adds	r3, r7, r3
 8022b0e:	7819      	ldrb	r1, [r3, #0]
 8022b10:	002b      	movs	r3, r5
 8022b12:	f7f6 f97e 	bl	8018e12 <HAL_PCD_EP_Transmit>
 8022b16:	0003      	movs	r3, r0
 8022b18:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b1a:	2516      	movs	r5, #22
 8022b1c:	197c      	adds	r4, r7, r5
 8022b1e:	19bb      	adds	r3, r7, r6
 8022b20:	781b      	ldrb	r3, [r3, #0]
 8022b22:	0018      	movs	r0, r3
 8022b24:	f000 f871 	bl	8022c0a <USBD_Get_USB_Status>
 8022b28:	0003      	movs	r3, r0
 8022b2a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022b2c:	197b      	adds	r3, r7, r5
 8022b2e:	781b      	ldrb	r3, [r3, #0]
}
 8022b30:	0018      	movs	r0, r3
 8022b32:	46bd      	mov	sp, r7
 8022b34:	b007      	add	sp, #28
 8022b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022b38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b3a:	b087      	sub	sp, #28
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	60f8      	str	r0, [r7, #12]
 8022b40:	0008      	movs	r0, r1
 8022b42:	607a      	str	r2, [r7, #4]
 8022b44:	0019      	movs	r1, r3
 8022b46:	230b      	movs	r3, #11
 8022b48:	18fb      	adds	r3, r7, r3
 8022b4a:	1c02      	adds	r2, r0, #0
 8022b4c:	701a      	strb	r2, [r3, #0]
 8022b4e:	2408      	movs	r4, #8
 8022b50:	193b      	adds	r3, r7, r4
 8022b52:	1c0a      	adds	r2, r1, #0
 8022b54:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b56:	2117      	movs	r1, #23
 8022b58:	187b      	adds	r3, r7, r1
 8022b5a:	2200      	movs	r2, #0
 8022b5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b5e:	2516      	movs	r5, #22
 8022b60:	197b      	adds	r3, r7, r5
 8022b62:	2200      	movs	r2, #0
 8022b64:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022b66:	68fa      	ldr	r2, [r7, #12]
 8022b68:	23b0      	movs	r3, #176	@ 0xb0
 8022b6a:	009b      	lsls	r3, r3, #2
 8022b6c:	58d0      	ldr	r0, [r2, r3]
 8022b6e:	193b      	adds	r3, r7, r4
 8022b70:	881d      	ldrh	r5, [r3, #0]
 8022b72:	000e      	movs	r6, r1
 8022b74:	187c      	adds	r4, r7, r1
 8022b76:	687a      	ldr	r2, [r7, #4]
 8022b78:	230b      	movs	r3, #11
 8022b7a:	18fb      	adds	r3, r7, r3
 8022b7c:	7819      	ldrb	r1, [r3, #0]
 8022b7e:	002b      	movs	r3, r5
 8022b80:	f7f6 f8f7 	bl	8018d72 <HAL_PCD_EP_Receive>
 8022b84:	0003      	movs	r3, r0
 8022b86:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b88:	2516      	movs	r5, #22
 8022b8a:	197c      	adds	r4, r7, r5
 8022b8c:	19bb      	adds	r3, r7, r6
 8022b8e:	781b      	ldrb	r3, [r3, #0]
 8022b90:	0018      	movs	r0, r3
 8022b92:	f000 f83a 	bl	8022c0a <USBD_Get_USB_Status>
 8022b96:	0003      	movs	r3, r0
 8022b98:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022b9a:	197b      	adds	r3, r7, r5
 8022b9c:	781b      	ldrb	r3, [r3, #0]
}
 8022b9e:	0018      	movs	r0, r3
 8022ba0:	46bd      	mov	sp, r7
 8022ba2:	b007      	add	sp, #28
 8022ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022ba6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ba6:	b580      	push	{r7, lr}
 8022ba8:	b082      	sub	sp, #8
 8022baa:	af00      	add	r7, sp, #0
 8022bac:	6078      	str	r0, [r7, #4]
 8022bae:	000a      	movs	r2, r1
 8022bb0:	1cfb      	adds	r3, r7, #3
 8022bb2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022bb4:	687a      	ldr	r2, [r7, #4]
 8022bb6:	23b0      	movs	r3, #176	@ 0xb0
 8022bb8:	009b      	lsls	r3, r3, #2
 8022bba:	58d2      	ldr	r2, [r2, r3]
 8022bbc:	1cfb      	adds	r3, r7, #3
 8022bbe:	781b      	ldrb	r3, [r3, #0]
 8022bc0:	0019      	movs	r1, r3
 8022bc2:	0010      	movs	r0, r2
 8022bc4:	f7f6 f90c 	bl	8018de0 <HAL_PCD_EP_GetRxCount>
 8022bc8:	0003      	movs	r3, r0
}
 8022bca:	0018      	movs	r0, r3
 8022bcc:	46bd      	mov	sp, r7
 8022bce:	b002      	add	sp, #8
 8022bd0:	bd80      	pop	{r7, pc}
	...

08022bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022bd4:	b580      	push	{r7, lr}
 8022bd6:	b082      	sub	sp, #8
 8022bd8:	af00      	add	r7, sp, #0
 8022bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022bdc:	4b02      	ldr	r3, [pc, #8]	@ (8022be8 <USBD_static_malloc+0x14>)
}
 8022bde:	0018      	movs	r0, r3
 8022be0:	46bd      	mov	sp, r7
 8022be2:	b002      	add	sp, #8
 8022be4:	bd80      	pop	{r7, pc}
 8022be6:	46c0      	nop			@ (mov r8, r8)
 8022be8:	200032a8 	.word	0x200032a8

08022bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	b082      	sub	sp, #8
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	6078      	str	r0, [r7, #4]

}
 8022bf4:	46c0      	nop			@ (mov r8, r8)
 8022bf6:	46bd      	mov	sp, r7
 8022bf8:	b002      	add	sp, #8
 8022bfa:	bd80      	pop	{r7, pc}

08022bfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8022c00:	f7e9 fd0c 	bl	800c61c <SystemClock_Config>
}
 8022c04:	46c0      	nop			@ (mov r8, r8)
 8022c06:	46bd      	mov	sp, r7
 8022c08:	bd80      	pop	{r7, pc}

08022c0a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022c0a:	b580      	push	{r7, lr}
 8022c0c:	b084      	sub	sp, #16
 8022c0e:	af00      	add	r7, sp, #0
 8022c10:	0002      	movs	r2, r0
 8022c12:	1dfb      	adds	r3, r7, #7
 8022c14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022c16:	230f      	movs	r3, #15
 8022c18:	18fb      	adds	r3, r7, r3
 8022c1a:	2200      	movs	r2, #0
 8022c1c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8022c1e:	1dfb      	adds	r3, r7, #7
 8022c20:	781b      	ldrb	r3, [r3, #0]
 8022c22:	2b03      	cmp	r3, #3
 8022c24:	d017      	beq.n	8022c56 <USBD_Get_USB_Status+0x4c>
 8022c26:	dc1b      	bgt.n	8022c60 <USBD_Get_USB_Status+0x56>
 8022c28:	2b02      	cmp	r3, #2
 8022c2a:	d00f      	beq.n	8022c4c <USBD_Get_USB_Status+0x42>
 8022c2c:	dc18      	bgt.n	8022c60 <USBD_Get_USB_Status+0x56>
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d002      	beq.n	8022c38 <USBD_Get_USB_Status+0x2e>
 8022c32:	2b01      	cmp	r3, #1
 8022c34:	d005      	beq.n	8022c42 <USBD_Get_USB_Status+0x38>
 8022c36:	e013      	b.n	8022c60 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022c38:	230f      	movs	r3, #15
 8022c3a:	18fb      	adds	r3, r7, r3
 8022c3c:	2200      	movs	r2, #0
 8022c3e:	701a      	strb	r2, [r3, #0]
    break;
 8022c40:	e013      	b.n	8022c6a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022c42:	230f      	movs	r3, #15
 8022c44:	18fb      	adds	r3, r7, r3
 8022c46:	2202      	movs	r2, #2
 8022c48:	701a      	strb	r2, [r3, #0]
    break;
 8022c4a:	e00e      	b.n	8022c6a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022c4c:	230f      	movs	r3, #15
 8022c4e:	18fb      	adds	r3, r7, r3
 8022c50:	2201      	movs	r2, #1
 8022c52:	701a      	strb	r2, [r3, #0]
    break;
 8022c54:	e009      	b.n	8022c6a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022c56:	230f      	movs	r3, #15
 8022c58:	18fb      	adds	r3, r7, r3
 8022c5a:	2202      	movs	r2, #2
 8022c5c:	701a      	strb	r2, [r3, #0]
    break;
 8022c5e:	e004      	b.n	8022c6a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022c60:	230f      	movs	r3, #15
 8022c62:	18fb      	adds	r3, r7, r3
 8022c64:	2202      	movs	r2, #2
 8022c66:	701a      	strb	r2, [r3, #0]
    break;
 8022c68:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8022c6a:	230f      	movs	r3, #15
 8022c6c:	18fb      	adds	r3, r7, r3
 8022c6e:	781b      	ldrb	r3, [r3, #0]
}
 8022c70:	0018      	movs	r0, r3
 8022c72:	46bd      	mov	sp, r7
 8022c74:	b004      	add	sp, #16
 8022c76:	bd80      	pop	{r7, pc}

08022c78 <arm_cfft_radix4by2_q31>:
 8022c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c7a:	465f      	mov	r7, fp
 8022c7c:	4656      	mov	r6, sl
 8022c7e:	464d      	mov	r5, r9
 8022c80:	4644      	mov	r4, r8
 8022c82:	000b      	movs	r3, r1
 8022c84:	b4f0      	push	{r4, r5, r6, r7}
 8022c86:	085b      	lsrs	r3, r3, #1
 8022c88:	b08f      	sub	sp, #60	@ 0x3c
 8022c8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8022c8c:	0007      	movs	r7, r0
 8022c8e:	9009      	str	r0, [sp, #36]	@ 0x24
 8022c90:	0011      	movs	r1, r2
 8022c92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022c94:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	d100      	bne.n	8022c9c <arm_cfft_radix4by2_q31+0x24>
 8022c9a:	e0a0      	b.n	8022dde <arm_cfft_radix4by2_q31+0x166>
 8022c9c:	0002      	movs	r2, r0
 8022c9e:	00db      	lsls	r3, r3, #3
 8022ca0:	3204      	adds	r2, #4
 8022ca2:	4691      	mov	r9, r2
 8022ca4:	4698      	mov	r8, r3
 8022ca6:	000a      	movs	r2, r1
 8022ca8:	464e      	mov	r6, r9
 8022caa:	4442      	add	r2, r8
 8022cac:	4699      	mov	r9, r3
 8022cae:	4688      	mov	r8, r1
 8022cb0:	9208      	str	r2, [sp, #32]
 8022cb2:	900d      	str	r0, [sp, #52]	@ 0x34
 8022cb4:	4643      	mov	r3, r8
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	469b      	mov	fp, r3
 8022cba:	4643      	mov	r3, r8
 8022cbc:	685b      	ldr	r3, [r3, #4]
 8022cbe:	469a      	mov	sl, r3
 8022cc0:	683b      	ldr	r3, [r7, #0]
 8022cc2:	109c      	asrs	r4, r3, #2
 8022cc4:	464b      	mov	r3, r9
 8022cc6:	58fb      	ldr	r3, [r7, r3]
 8022cc8:	109a      	asrs	r2, r3, #2
 8022cca:	18a3      	adds	r3, r4, r2
 8022ccc:	603b      	str	r3, [r7, #0]
 8022cce:	6833      	ldr	r3, [r6, #0]
 8022cd0:	1aa4      	subs	r4, r4, r2
 8022cd2:	109d      	asrs	r5, r3, #2
 8022cd4:	464b      	mov	r3, r9
 8022cd6:	58f3      	ldr	r3, [r6, r3]
 8022cd8:	17e2      	asrs	r2, r4, #31
 8022cda:	109b      	asrs	r3, r3, #2
 8022cdc:	18e9      	adds	r1, r5, r3
 8022cde:	6031      	str	r1, [r6, #0]
 8022ce0:	0011      	movs	r1, r2
 8022ce2:	465a      	mov	r2, fp
 8022ce4:	17d2      	asrs	r2, r2, #31
 8022ce6:	0010      	movs	r0, r2
 8022ce8:	4652      	mov	r2, sl
 8022cea:	1aed      	subs	r5, r5, r3
 8022cec:	17eb      	asrs	r3, r5, #31
 8022cee:	17d2      	asrs	r2, r2, #31
 8022cf0:	9307      	str	r3, [sp, #28]
 8022cf2:	9204      	str	r2, [sp, #16]
 8022cf4:	0003      	movs	r3, r0
 8022cf6:	465a      	mov	r2, fp
 8022cf8:	9006      	str	r0, [sp, #24]
 8022cfa:	0020      	movs	r0, r4
 8022cfc:	9105      	str	r1, [sp, #20]
 8022cfe:	f7dd fc5f 	bl	80005c0 <__aeabi_lmul>
 8022d02:	2280      	movs	r2, #128	@ 0x80
 8022d04:	2300      	movs	r3, #0
 8022d06:	0612      	lsls	r2, r2, #24
 8022d08:	1880      	adds	r0, r0, r2
 8022d0a:	4159      	adcs	r1, r3
 8022d0c:	2300      	movs	r3, #0
 8022d0e:	9101      	str	r1, [sp, #4]
 8022d10:	9300      	str	r3, [sp, #0]
 8022d12:	4652      	mov	r2, sl
 8022d14:	9b04      	ldr	r3, [sp, #16]
 8022d16:	0028      	movs	r0, r5
 8022d18:	17e9      	asrs	r1, r5, #31
 8022d1a:	f7dd fc51 	bl	80005c0 <__aeabi_lmul>
 8022d1e:	9a00      	ldr	r2, [sp, #0]
 8022d20:	9b01      	ldr	r3, [sp, #4]
 8022d22:	1880      	adds	r0, r0, r2
 8022d24:	4159      	adcs	r1, r3
 8022d26:	2280      	movs	r2, #128	@ 0x80
 8022d28:	2300      	movs	r3, #0
 8022d2a:	0612      	lsls	r2, r2, #24
 8022d2c:	1880      	adds	r0, r0, r2
 8022d2e:	4159      	adcs	r1, r3
 8022d30:	464a      	mov	r2, r9
 8022d32:	004b      	lsls	r3, r1, #1
 8022d34:	50bb      	str	r3, [r7, r2]
 8022d36:	4658      	mov	r0, fp
 8022d38:	002a      	movs	r2, r5
 8022d3a:	9b07      	ldr	r3, [sp, #28]
 8022d3c:	9906      	ldr	r1, [sp, #24]
 8022d3e:	f7dd fc3f 	bl	80005c0 <__aeabi_lmul>
 8022d42:	2280      	movs	r2, #128	@ 0x80
 8022d44:	2300      	movs	r3, #0
 8022d46:	0612      	lsls	r2, r2, #24
 8022d48:	1880      	adds	r0, r0, r2
 8022d4a:	4159      	adcs	r1, r3
 8022d4c:	2000      	movs	r0, #0
 8022d4e:	9103      	str	r1, [sp, #12]
 8022d50:	9002      	str	r0, [sp, #8]
 8022d52:	4652      	mov	r2, sl
 8022d54:	9b04      	ldr	r3, [sp, #16]
 8022d56:	0020      	movs	r0, r4
 8022d58:	9905      	ldr	r1, [sp, #20]
 8022d5a:	f7dd fc31 	bl	80005c0 <__aeabi_lmul>
 8022d5e:	9a02      	ldr	r2, [sp, #8]
 8022d60:	9b03      	ldr	r3, [sp, #12]
 8022d62:	1a12      	subs	r2, r2, r0
 8022d64:	418b      	sbcs	r3, r1
 8022d66:	2080      	movs	r0, #128	@ 0x80
 8022d68:	2100      	movs	r1, #0
 8022d6a:	0600      	lsls	r0, r0, #24
 8022d6c:	1812      	adds	r2, r2, r0
 8022d6e:	414b      	adcs	r3, r1
 8022d70:	464a      	mov	r2, r9
 8022d72:	005b      	lsls	r3, r3, #1
 8022d74:	50b3      	str	r3, [r6, r2]
 8022d76:	2308      	movs	r3, #8
 8022d78:	469c      	mov	ip, r3
 8022d7a:	9b08      	ldr	r3, [sp, #32]
 8022d7c:	44e0      	add	r8, ip
 8022d7e:	3708      	adds	r7, #8
 8022d80:	3608      	adds	r6, #8
 8022d82:	4598      	cmp	r8, r3
 8022d84:	d196      	bne.n	8022cb4 <arm_cfft_radix4by2_q31+0x3c>
 8022d86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022d88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022d8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022d8c:	2302      	movs	r3, #2
 8022d8e:	003a      	movs	r2, r7
 8022d90:	0029      	movs	r1, r5
 8022d92:	0020      	movs	r0, r4
 8022d94:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022d96:	f000 f957 	bl	8023048 <arm_radix4_butterfly_q31>
 8022d9a:	46a4      	mov	ip, r4
 8022d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022d9e:	2302      	movs	r3, #2
 8022da0:	0088      	lsls	r0, r1, #2
 8022da2:	4460      	add	r0, ip
 8022da4:	003a      	movs	r2, r7
 8022da6:	0029      	movs	r1, r5
 8022da8:	f000 f94e 	bl	8023048 <arm_radix4_butterfly_q31>
 8022dac:	46a4      	mov	ip, r4
 8022dae:	0128      	lsls	r0, r5, #4
 8022db0:	4460      	add	r0, ip
 8022db2:	6833      	ldr	r3, [r6, #0]
 8022db4:	005b      	lsls	r3, r3, #1
 8022db6:	6033      	str	r3, [r6, #0]
 8022db8:	6873      	ldr	r3, [r6, #4]
 8022dba:	005b      	lsls	r3, r3, #1
 8022dbc:	6073      	str	r3, [r6, #4]
 8022dbe:	68b3      	ldr	r3, [r6, #8]
 8022dc0:	005b      	lsls	r3, r3, #1
 8022dc2:	60b3      	str	r3, [r6, #8]
 8022dc4:	68f3      	ldr	r3, [r6, #12]
 8022dc6:	005b      	lsls	r3, r3, #1
 8022dc8:	60f3      	str	r3, [r6, #12]
 8022dca:	3610      	adds	r6, #16
 8022dcc:	42b0      	cmp	r0, r6
 8022dce:	d1f0      	bne.n	8022db2 <arm_cfft_radix4by2_q31+0x13a>
 8022dd0:	b00f      	add	sp, #60	@ 0x3c
 8022dd2:	bc3c      	pop	{r2, r3, r4, r5}
 8022dd4:	4690      	mov	r8, r2
 8022dd6:	4699      	mov	r9, r3
 8022dd8:	46a2      	mov	sl, r4
 8022dda:	46ab      	mov	fp, r5
 8022ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dde:	2302      	movs	r3, #2
 8022de0:	2100      	movs	r1, #0
 8022de2:	0015      	movs	r5, r2
 8022de4:	f000 f930 	bl	8023048 <arm_radix4_butterfly_q31>
 8022de8:	46bc      	mov	ip, r7
 8022dea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022dec:	002a      	movs	r2, r5
 8022dee:	0098      	lsls	r0, r3, #2
 8022df0:	4460      	add	r0, ip
 8022df2:	2302      	movs	r3, #2
 8022df4:	2100      	movs	r1, #0
 8022df6:	f000 f927 	bl	8023048 <arm_radix4_butterfly_q31>
 8022dfa:	e7e9      	b.n	8022dd0 <arm_cfft_radix4by2_q31+0x158>

08022dfc <arm_cfft_radix4by2_inverse_q31>:
 8022dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dfe:	465f      	mov	r7, fp
 8022e00:	4656      	mov	r6, sl
 8022e02:	464d      	mov	r5, r9
 8022e04:	4644      	mov	r4, r8
 8022e06:	000b      	movs	r3, r1
 8022e08:	b4f0      	push	{r4, r5, r6, r7}
 8022e0a:	085b      	lsrs	r3, r3, #1
 8022e0c:	b08f      	sub	sp, #60	@ 0x3c
 8022e0e:	910a      	str	r1, [sp, #40]	@ 0x28
 8022e10:	0007      	movs	r7, r0
 8022e12:	9009      	str	r0, [sp, #36]	@ 0x24
 8022e14:	0011      	movs	r1, r2
 8022e16:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	d100      	bne.n	8022e20 <arm_cfft_radix4by2_inverse_q31+0x24>
 8022e1e:	e0a0      	b.n	8022f62 <arm_cfft_radix4by2_inverse_q31+0x166>
 8022e20:	0002      	movs	r2, r0
 8022e22:	00db      	lsls	r3, r3, #3
 8022e24:	3204      	adds	r2, #4
 8022e26:	4691      	mov	r9, r2
 8022e28:	4698      	mov	r8, r3
 8022e2a:	000a      	movs	r2, r1
 8022e2c:	464e      	mov	r6, r9
 8022e2e:	4442      	add	r2, r8
 8022e30:	4699      	mov	r9, r3
 8022e32:	4688      	mov	r8, r1
 8022e34:	9208      	str	r2, [sp, #32]
 8022e36:	900d      	str	r0, [sp, #52]	@ 0x34
 8022e38:	4643      	mov	r3, r8
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	469b      	mov	fp, r3
 8022e3e:	4643      	mov	r3, r8
 8022e40:	685b      	ldr	r3, [r3, #4]
 8022e42:	469a      	mov	sl, r3
 8022e44:	683b      	ldr	r3, [r7, #0]
 8022e46:	109c      	asrs	r4, r3, #2
 8022e48:	464b      	mov	r3, r9
 8022e4a:	58fb      	ldr	r3, [r7, r3]
 8022e4c:	109a      	asrs	r2, r3, #2
 8022e4e:	18a3      	adds	r3, r4, r2
 8022e50:	603b      	str	r3, [r7, #0]
 8022e52:	6833      	ldr	r3, [r6, #0]
 8022e54:	1aa4      	subs	r4, r4, r2
 8022e56:	109d      	asrs	r5, r3, #2
 8022e58:	464b      	mov	r3, r9
 8022e5a:	58f3      	ldr	r3, [r6, r3]
 8022e5c:	17e2      	asrs	r2, r4, #31
 8022e5e:	109b      	asrs	r3, r3, #2
 8022e60:	18e9      	adds	r1, r5, r3
 8022e62:	6031      	str	r1, [r6, #0]
 8022e64:	0011      	movs	r1, r2
 8022e66:	465a      	mov	r2, fp
 8022e68:	17d2      	asrs	r2, r2, #31
 8022e6a:	0010      	movs	r0, r2
 8022e6c:	4652      	mov	r2, sl
 8022e6e:	1aed      	subs	r5, r5, r3
 8022e70:	17eb      	asrs	r3, r5, #31
 8022e72:	17d2      	asrs	r2, r2, #31
 8022e74:	9307      	str	r3, [sp, #28]
 8022e76:	9204      	str	r2, [sp, #16]
 8022e78:	0003      	movs	r3, r0
 8022e7a:	465a      	mov	r2, fp
 8022e7c:	9006      	str	r0, [sp, #24]
 8022e7e:	0020      	movs	r0, r4
 8022e80:	9105      	str	r1, [sp, #20]
 8022e82:	f7dd fb9d 	bl	80005c0 <__aeabi_lmul>
 8022e86:	2280      	movs	r2, #128	@ 0x80
 8022e88:	2300      	movs	r3, #0
 8022e8a:	0612      	lsls	r2, r2, #24
 8022e8c:	1880      	adds	r0, r0, r2
 8022e8e:	4159      	adcs	r1, r3
 8022e90:	2300      	movs	r3, #0
 8022e92:	9101      	str	r1, [sp, #4]
 8022e94:	9300      	str	r3, [sp, #0]
 8022e96:	4652      	mov	r2, sl
 8022e98:	9b04      	ldr	r3, [sp, #16]
 8022e9a:	0028      	movs	r0, r5
 8022e9c:	17e9      	asrs	r1, r5, #31
 8022e9e:	f7dd fb8f 	bl	80005c0 <__aeabi_lmul>
 8022ea2:	9a00      	ldr	r2, [sp, #0]
 8022ea4:	9b01      	ldr	r3, [sp, #4]
 8022ea6:	1a12      	subs	r2, r2, r0
 8022ea8:	418b      	sbcs	r3, r1
 8022eaa:	2080      	movs	r0, #128	@ 0x80
 8022eac:	2100      	movs	r1, #0
 8022eae:	0600      	lsls	r0, r0, #24
 8022eb0:	1812      	adds	r2, r2, r0
 8022eb2:	414b      	adcs	r3, r1
 8022eb4:	464a      	mov	r2, r9
 8022eb6:	005b      	lsls	r3, r3, #1
 8022eb8:	50bb      	str	r3, [r7, r2]
 8022eba:	4658      	mov	r0, fp
 8022ebc:	002a      	movs	r2, r5
 8022ebe:	9b07      	ldr	r3, [sp, #28]
 8022ec0:	9906      	ldr	r1, [sp, #24]
 8022ec2:	f7dd fb7d 	bl	80005c0 <__aeabi_lmul>
 8022ec6:	2280      	movs	r2, #128	@ 0x80
 8022ec8:	2300      	movs	r3, #0
 8022eca:	0612      	lsls	r2, r2, #24
 8022ecc:	1880      	adds	r0, r0, r2
 8022ece:	4159      	adcs	r1, r3
 8022ed0:	2000      	movs	r0, #0
 8022ed2:	9103      	str	r1, [sp, #12]
 8022ed4:	9002      	str	r0, [sp, #8]
 8022ed6:	4652      	mov	r2, sl
 8022ed8:	9b04      	ldr	r3, [sp, #16]
 8022eda:	0020      	movs	r0, r4
 8022edc:	9905      	ldr	r1, [sp, #20]
 8022ede:	f7dd fb6f 	bl	80005c0 <__aeabi_lmul>
 8022ee2:	9b02      	ldr	r3, [sp, #8]
 8022ee4:	9c03      	ldr	r4, [sp, #12]
 8022ee6:	18c0      	adds	r0, r0, r3
 8022ee8:	4161      	adcs	r1, r4
 8022eea:	2380      	movs	r3, #128	@ 0x80
 8022eec:	2400      	movs	r4, #0
 8022eee:	061b      	lsls	r3, r3, #24
 8022ef0:	18c0      	adds	r0, r0, r3
 8022ef2:	4161      	adcs	r1, r4
 8022ef4:	464a      	mov	r2, r9
 8022ef6:	004b      	lsls	r3, r1, #1
 8022ef8:	50b3      	str	r3, [r6, r2]
 8022efa:	2308      	movs	r3, #8
 8022efc:	469c      	mov	ip, r3
 8022efe:	9b08      	ldr	r3, [sp, #32]
 8022f00:	44e0      	add	r8, ip
 8022f02:	3708      	adds	r7, #8
 8022f04:	3608      	adds	r6, #8
 8022f06:	4598      	cmp	r8, r3
 8022f08:	d196      	bne.n	8022e38 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8022f0a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022f0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022f0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022f10:	2302      	movs	r3, #2
 8022f12:	003a      	movs	r2, r7
 8022f14:	0029      	movs	r1, r5
 8022f16:	0020      	movs	r0, r4
 8022f18:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022f1a:	f000 fb3b 	bl	8023594 <arm_radix4_butterfly_inverse_q31>
 8022f1e:	46a4      	mov	ip, r4
 8022f20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022f22:	2302      	movs	r3, #2
 8022f24:	0088      	lsls	r0, r1, #2
 8022f26:	4460      	add	r0, ip
 8022f28:	003a      	movs	r2, r7
 8022f2a:	0029      	movs	r1, r5
 8022f2c:	f000 fb32 	bl	8023594 <arm_radix4_butterfly_inverse_q31>
 8022f30:	46a4      	mov	ip, r4
 8022f32:	0128      	lsls	r0, r5, #4
 8022f34:	4460      	add	r0, ip
 8022f36:	6833      	ldr	r3, [r6, #0]
 8022f38:	005b      	lsls	r3, r3, #1
 8022f3a:	6033      	str	r3, [r6, #0]
 8022f3c:	6873      	ldr	r3, [r6, #4]
 8022f3e:	005b      	lsls	r3, r3, #1
 8022f40:	6073      	str	r3, [r6, #4]
 8022f42:	68b3      	ldr	r3, [r6, #8]
 8022f44:	005b      	lsls	r3, r3, #1
 8022f46:	60b3      	str	r3, [r6, #8]
 8022f48:	68f3      	ldr	r3, [r6, #12]
 8022f4a:	005b      	lsls	r3, r3, #1
 8022f4c:	60f3      	str	r3, [r6, #12]
 8022f4e:	3610      	adds	r6, #16
 8022f50:	42b0      	cmp	r0, r6
 8022f52:	d1f0      	bne.n	8022f36 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8022f54:	b00f      	add	sp, #60	@ 0x3c
 8022f56:	bc3c      	pop	{r2, r3, r4, r5}
 8022f58:	4690      	mov	r8, r2
 8022f5a:	4699      	mov	r9, r3
 8022f5c:	46a2      	mov	sl, r4
 8022f5e:	46ab      	mov	fp, r5
 8022f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f62:	2302      	movs	r3, #2
 8022f64:	2100      	movs	r1, #0
 8022f66:	0015      	movs	r5, r2
 8022f68:	f000 fb14 	bl	8023594 <arm_radix4_butterfly_inverse_q31>
 8022f6c:	46bc      	mov	ip, r7
 8022f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f70:	002a      	movs	r2, r5
 8022f72:	0098      	lsls	r0, r3, #2
 8022f74:	4460      	add	r0, ip
 8022f76:	2302      	movs	r3, #2
 8022f78:	2100      	movs	r1, #0
 8022f7a:	f000 fb0b 	bl	8023594 <arm_radix4_butterfly_inverse_q31>
 8022f7e:	e7e9      	b.n	8022f54 <arm_cfft_radix4by2_inverse_q31+0x158>

08022f80 <arm_cfft_q31>:
 8022f80:	b570      	push	{r4, r5, r6, lr}
 8022f82:	001e      	movs	r6, r3
 8022f84:	2380      	movs	r3, #128	@ 0x80
 8022f86:	000d      	movs	r5, r1
 8022f88:	0004      	movs	r4, r0
 8022f8a:	8801      	ldrh	r1, [r0, #0]
 8022f8c:	005b      	lsls	r3, r3, #1
 8022f8e:	2a01      	cmp	r2, #1
 8022f90:	d028      	beq.n	8022fe4 <arm_cfft_q31+0x64>
 8022f92:	4299      	cmp	r1, r3
 8022f94:	d020      	beq.n	8022fd8 <arm_cfft_q31+0x58>
 8022f96:	d812      	bhi.n	8022fbe <arm_cfft_q31+0x3e>
 8022f98:	2920      	cmp	r1, #32
 8022f9a:	d004      	beq.n	8022fa6 <arm_cfft_q31+0x26>
 8022f9c:	d949      	bls.n	8023032 <arm_cfft_q31+0xb2>
 8022f9e:	2940      	cmp	r1, #64	@ 0x40
 8022fa0:	d01a      	beq.n	8022fd8 <arm_cfft_q31+0x58>
 8022fa2:	2980      	cmp	r1, #128	@ 0x80
 8022fa4:	d103      	bne.n	8022fae <arm_cfft_q31+0x2e>
 8022fa6:	6862      	ldr	r2, [r4, #4]
 8022fa8:	0028      	movs	r0, r5
 8022faa:	f7ff fe65 	bl	8022c78 <arm_cfft_radix4by2_q31>
 8022fae:	2e00      	cmp	r6, #0
 8022fb0:	d004      	beq.n	8022fbc <arm_cfft_q31+0x3c>
 8022fb2:	68a2      	ldr	r2, [r4, #8]
 8022fb4:	89a1      	ldrh	r1, [r4, #12]
 8022fb6:	0028      	movs	r0, r5
 8022fb8:	f7dd f8a6 	bl	8000108 <arm_bitreversal_32>
 8022fbc:	bd70      	pop	{r4, r5, r6, pc}
 8022fbe:	2380      	movs	r3, #128	@ 0x80
 8022fc0:	00db      	lsls	r3, r3, #3
 8022fc2:	4299      	cmp	r1, r3
 8022fc4:	d008      	beq.n	8022fd8 <arm_cfft_q31+0x58>
 8022fc6:	d92f      	bls.n	8023028 <arm_cfft_q31+0xa8>
 8022fc8:	2380      	movs	r3, #128	@ 0x80
 8022fca:	011b      	lsls	r3, r3, #4
 8022fcc:	4299      	cmp	r1, r3
 8022fce:	d0ea      	beq.n	8022fa6 <arm_cfft_q31+0x26>
 8022fd0:	2380      	movs	r3, #128	@ 0x80
 8022fd2:	015b      	lsls	r3, r3, #5
 8022fd4:	4299      	cmp	r1, r3
 8022fd6:	d1ea      	bne.n	8022fae <arm_cfft_q31+0x2e>
 8022fd8:	2301      	movs	r3, #1
 8022fda:	6862      	ldr	r2, [r4, #4]
 8022fdc:	0028      	movs	r0, r5
 8022fde:	f000 f833 	bl	8023048 <arm_radix4_butterfly_q31>
 8022fe2:	e7e4      	b.n	8022fae <arm_cfft_q31+0x2e>
 8022fe4:	4299      	cmp	r1, r3
 8022fe6:	d019      	beq.n	802301c <arm_cfft_q31+0x9c>
 8022fe8:	d80b      	bhi.n	8023002 <arm_cfft_q31+0x82>
 8022fea:	2920      	cmp	r1, #32
 8022fec:	d004      	beq.n	8022ff8 <arm_cfft_q31+0x78>
 8022fee:	d928      	bls.n	8023042 <arm_cfft_q31+0xc2>
 8022ff0:	2940      	cmp	r1, #64	@ 0x40
 8022ff2:	d013      	beq.n	802301c <arm_cfft_q31+0x9c>
 8022ff4:	2980      	cmp	r1, #128	@ 0x80
 8022ff6:	d1da      	bne.n	8022fae <arm_cfft_q31+0x2e>
 8022ff8:	6862      	ldr	r2, [r4, #4]
 8022ffa:	0028      	movs	r0, r5
 8022ffc:	f7ff fefe 	bl	8022dfc <arm_cfft_radix4by2_inverse_q31>
 8023000:	e7d5      	b.n	8022fae <arm_cfft_q31+0x2e>
 8023002:	2380      	movs	r3, #128	@ 0x80
 8023004:	00db      	lsls	r3, r3, #3
 8023006:	4299      	cmp	r1, r3
 8023008:	d008      	beq.n	802301c <arm_cfft_q31+0x9c>
 802300a:	d915      	bls.n	8023038 <arm_cfft_q31+0xb8>
 802300c:	2380      	movs	r3, #128	@ 0x80
 802300e:	011b      	lsls	r3, r3, #4
 8023010:	4299      	cmp	r1, r3
 8023012:	d0f1      	beq.n	8022ff8 <arm_cfft_q31+0x78>
 8023014:	2380      	movs	r3, #128	@ 0x80
 8023016:	015b      	lsls	r3, r3, #5
 8023018:	4299      	cmp	r1, r3
 802301a:	d1c8      	bne.n	8022fae <arm_cfft_q31+0x2e>
 802301c:	2301      	movs	r3, #1
 802301e:	6862      	ldr	r2, [r4, #4]
 8023020:	0028      	movs	r0, r5
 8023022:	f000 fab7 	bl	8023594 <arm_radix4_butterfly_inverse_q31>
 8023026:	e7c2      	b.n	8022fae <arm_cfft_q31+0x2e>
 8023028:	2380      	movs	r3, #128	@ 0x80
 802302a:	009b      	lsls	r3, r3, #2
 802302c:	4299      	cmp	r1, r3
 802302e:	d0ba      	beq.n	8022fa6 <arm_cfft_q31+0x26>
 8023030:	e7bd      	b.n	8022fae <arm_cfft_q31+0x2e>
 8023032:	2910      	cmp	r1, #16
 8023034:	d1bb      	bne.n	8022fae <arm_cfft_q31+0x2e>
 8023036:	e7cf      	b.n	8022fd8 <arm_cfft_q31+0x58>
 8023038:	2380      	movs	r3, #128	@ 0x80
 802303a:	009b      	lsls	r3, r3, #2
 802303c:	4299      	cmp	r1, r3
 802303e:	d0db      	beq.n	8022ff8 <arm_cfft_q31+0x78>
 8023040:	e7b5      	b.n	8022fae <arm_cfft_q31+0x2e>
 8023042:	2910      	cmp	r1, #16
 8023044:	d1b3      	bne.n	8022fae <arm_cfft_q31+0x2e>
 8023046:	e7e9      	b.n	802301c <arm_cfft_q31+0x9c>

08023048 <arm_radix4_butterfly_q31>:
 8023048:	b5f0      	push	{r4, r5, r6, r7, lr}
 802304a:	464d      	mov	r5, r9
 802304c:	4644      	mov	r4, r8
 802304e:	465f      	mov	r7, fp
 8023050:	4656      	mov	r6, sl
 8023052:	469c      	mov	ip, r3
 8023054:	b4f0      	push	{r4, r5, r6, r7}
 8023056:	b0a7      	sub	sp, #156	@ 0x9c
 8023058:	9114      	str	r1, [sp, #80]	@ 0x50
 802305a:	0889      	lsrs	r1, r1, #2
 802305c:	9310      	str	r3, [sp, #64]	@ 0x40
 802305e:	00cb      	lsls	r3, r1, #3
 8023060:	0015      	movs	r5, r2
 8023062:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023064:	18c2      	adds	r2, r0, r3
 8023066:	000c      	movs	r4, r1
 8023068:	469a      	mov	sl, r3
 802306a:	9124      	str	r1, [sp, #144]	@ 0x90
 802306c:	18d1      	adds	r1, r2, r3
 802306e:	4663      	mov	r3, ip
 8023070:	468b      	mov	fp, r1
 8023072:	0119      	lsls	r1, r3, #4
 8023074:	910d      	str	r1, [sp, #52]	@ 0x34
 8023076:	00d9      	lsls	r1, r3, #3
 8023078:	005b      	lsls	r3, r3, #1
 802307a:	4463      	add	r3, ip
 802307c:	910e      	str	r1, [sp, #56]	@ 0x38
 802307e:	00d9      	lsls	r1, r3, #3
 8023080:	465b      	mov	r3, fp
 8023082:	44da      	add	sl, fp
 8023084:	4690      	mov	r8, r2
 8023086:	4683      	mov	fp, r0
 8023088:	4699      	mov	r9, r3
 802308a:	9022      	str	r0, [sp, #136]	@ 0x88
 802308c:	9025      	str	r0, [sp, #148]	@ 0x94
 802308e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023090:	9502      	str	r5, [sp, #8]
 8023092:	9500      	str	r5, [sp, #0]
 8023094:	9501      	str	r5, [sp, #4]
 8023096:	9407      	str	r4, [sp, #28]
 8023098:	465b      	mov	r3, fp
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	4642      	mov	r2, r8
 802309e:	111c      	asrs	r4, r3, #4
 80230a0:	464b      	mov	r3, r9
 80230a2:	4658      	mov	r0, fp
 80230a4:	681b      	ldr	r3, [r3, #0]
 80230a6:	6812      	ldr	r2, [r2, #0]
 80230a8:	111b      	asrs	r3, r3, #4
 80230aa:	18e7      	adds	r7, r4, r3
 80230ac:	1ae3      	subs	r3, r4, r3
 80230ae:	1114      	asrs	r4, r2, #4
 80230b0:	4652      	mov	r2, sl
 80230b2:	6840      	ldr	r0, [r0, #4]
 80230b4:	6812      	ldr	r2, [r2, #0]
 80230b6:	1105      	asrs	r5, r0, #4
 80230b8:	4648      	mov	r0, r9
 80230ba:	9303      	str	r3, [sp, #12]
 80230bc:	1113      	asrs	r3, r2, #4
 80230be:	18e2      	adds	r2, r4, r3
 80230c0:	465c      	mov	r4, fp
 80230c2:	6840      	ldr	r0, [r0, #4]
 80230c4:	1103      	asrs	r3, r0, #4
 80230c6:	18ee      	adds	r6, r5, r3
 80230c8:	1ae8      	subs	r0, r5, r3
 80230ca:	18bb      	adds	r3, r7, r2
 80230cc:	6023      	str	r3, [r4, #0]
 80230ce:	4644      	mov	r4, r8
 80230d0:	6864      	ldr	r4, [r4, #4]
 80230d2:	9004      	str	r0, [sp, #16]
 80230d4:	1125      	asrs	r5, r4, #4
 80230d6:	4654      	mov	r4, sl
 80230d8:	6864      	ldr	r4, [r4, #4]
 80230da:	1123      	asrs	r3, r4, #4
 80230dc:	465c      	mov	r4, fp
 80230de:	18eb      	adds	r3, r5, r3
 80230e0:	18f1      	adds	r1, r6, r3
 80230e2:	6061      	str	r1, [r4, #4]
 80230e4:	4655      	mov	r5, sl
 80230e6:	4644      	mov	r4, r8
 80230e8:	686d      	ldr	r5, [r5, #4]
 80230ea:	6864      	ldr	r4, [r4, #4]
 80230ec:	1129      	asrs	r1, r5, #4
 80230ee:	1124      	asrs	r4, r4, #4
 80230f0:	1a64      	subs	r4, r4, r1
 80230f2:	4641      	mov	r1, r8
 80230f4:	6809      	ldr	r1, [r1, #0]
 80230f6:	9405      	str	r4, [sp, #20]
 80230f8:	1108      	asrs	r0, r1, #4
 80230fa:	4651      	mov	r1, sl
 80230fc:	6809      	ldr	r1, [r1, #0]
 80230fe:	1abc      	subs	r4, r7, r2
 8023100:	1109      	asrs	r1, r1, #4
 8023102:	1a41      	subs	r1, r0, r1
 8023104:	17e2      	asrs	r2, r4, #31
 8023106:	9106      	str	r1, [sp, #24]
 8023108:	0011      	movs	r1, r2
 802310a:	9a01      	ldr	r2, [sp, #4]
 802310c:	9108      	str	r1, [sp, #32]
 802310e:	6817      	ldr	r7, [r2, #0]
 8023110:	17fd      	asrs	r5, r7, #31
 8023112:	0028      	movs	r0, r5
 8023114:	1af5      	subs	r5, r6, r3
 8023116:	17ee      	asrs	r6, r5, #31
 8023118:	960a      	str	r6, [sp, #40]	@ 0x28
 802311a:	6856      	ldr	r6, [r2, #4]
 802311c:	9009      	str	r0, [sp, #36]	@ 0x24
 802311e:	17f3      	asrs	r3, r6, #31
 8023120:	003a      	movs	r2, r7
 8023122:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023124:	0003      	movs	r3, r0
 8023126:	0020      	movs	r0, r4
 8023128:	f7dd fa4a 	bl	80005c0 <__aeabi_lmul>
 802312c:	0032      	movs	r2, r6
 802312e:	17f3      	asrs	r3, r6, #31
 8023130:	910c      	str	r1, [sp, #48]	@ 0x30
 8023132:	0028      	movs	r0, r5
 8023134:	17e9      	asrs	r1, r5, #31
 8023136:	f7dd fa43 	bl	80005c0 <__aeabi_lmul>
 802313a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802313c:	002a      	movs	r2, r5
 802313e:	4684      	mov	ip, r0
 8023140:	4640      	mov	r0, r8
 8023142:	4461      	add	r1, ip
 8023144:	0049      	lsls	r1, r1, #1
 8023146:	6001      	str	r1, [r0, #0]
 8023148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802314a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802314c:	0038      	movs	r0, r7
 802314e:	f7dd fa37 	bl	80005c0 <__aeabi_lmul>
 8023152:	0032      	movs	r2, r6
 8023154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023156:	000d      	movs	r5, r1
 8023158:	0020      	movs	r0, r4
 802315a:	9908      	ldr	r1, [sp, #32]
 802315c:	f7dd fa30 	bl	80005c0 <__aeabi_lmul>
 8023160:	4646      	mov	r6, r8
 8023162:	1a6d      	subs	r5, r5, r1
 8023164:	006d      	lsls	r5, r5, #1
 8023166:	6075      	str	r5, [r6, #4]
 8023168:	9903      	ldr	r1, [sp, #12]
 802316a:	9d05      	ldr	r5, [sp, #20]
 802316c:	000c      	movs	r4, r1
 802316e:	46ac      	mov	ip, r5
 8023170:	4464      	add	r4, ip
 8023172:	17e6      	asrs	r6, r4, #31
 8023174:	0031      	movs	r1, r6
 8023176:	9b00      	ldr	r3, [sp, #0]
 8023178:	9804      	ldr	r0, [sp, #16]
 802317a:	681e      	ldr	r6, [r3, #0]
 802317c:	17f7      	asrs	r7, r6, #31
 802317e:	9709      	str	r7, [sp, #36]	@ 0x24
 8023180:	9f06      	ldr	r7, [sp, #24]
 8023182:	0032      	movs	r2, r6
 8023184:	1bc7      	subs	r7, r0, r7
 8023186:	17fd      	asrs	r5, r7, #31
 8023188:	950a      	str	r5, [sp, #40]	@ 0x28
 802318a:	685d      	ldr	r5, [r3, #4]
 802318c:	17f3      	asrs	r3, r6, #31
 802318e:	17e8      	asrs	r0, r5, #31
 8023190:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023192:	0020      	movs	r0, r4
 8023194:	9108      	str	r1, [sp, #32]
 8023196:	f7dd fa13 	bl	80005c0 <__aeabi_lmul>
 802319a:	002a      	movs	r2, r5
 802319c:	17eb      	asrs	r3, r5, #31
 802319e:	910c      	str	r1, [sp, #48]	@ 0x30
 80231a0:	0038      	movs	r0, r7
 80231a2:	17f9      	asrs	r1, r7, #31
 80231a4:	f7dd fa0c 	bl	80005c0 <__aeabi_lmul>
 80231a8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80231aa:	003a      	movs	r2, r7
 80231ac:	4684      	mov	ip, r0
 80231ae:	4648      	mov	r0, r9
 80231b0:	4461      	add	r1, ip
 80231b2:	0049      	lsls	r1, r1, #1
 80231b4:	6001      	str	r1, [r0, #0]
 80231b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80231b8:	0030      	movs	r0, r6
 80231ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80231bc:	f7dd fa00 	bl	80005c0 <__aeabi_lmul>
 80231c0:	002a      	movs	r2, r5
 80231c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80231c4:	000e      	movs	r6, r1
 80231c6:	0020      	movs	r0, r4
 80231c8:	9908      	ldr	r1, [sp, #32]
 80231ca:	f7dd f9f9 	bl	80005c0 <__aeabi_lmul>
 80231ce:	464c      	mov	r4, r9
 80231d0:	9d05      	ldr	r5, [sp, #20]
 80231d2:	1a76      	subs	r6, r6, r1
 80231d4:	9903      	ldr	r1, [sp, #12]
 80231d6:	0076      	lsls	r6, r6, #1
 80231d8:	6066      	str	r6, [r4, #4]
 80231da:	1b4c      	subs	r4, r1, r5
 80231dc:	9e06      	ldr	r6, [sp, #24]
 80231de:	17e1      	asrs	r1, r4, #31
 80231e0:	9103      	str	r1, [sp, #12]
 80231e2:	9902      	ldr	r1, [sp, #8]
 80231e4:	46b4      	mov	ip, r6
 80231e6:	680f      	ldr	r7, [r1, #0]
 80231e8:	9804      	ldr	r0, [sp, #16]
 80231ea:	17fd      	asrs	r5, r7, #31
 80231ec:	002b      	movs	r3, r5
 80231ee:	684e      	ldr	r6, [r1, #4]
 80231f0:	4460      	add	r0, ip
 80231f2:	0005      	movs	r5, r0
 80231f4:	17c0      	asrs	r0, r0, #31
 80231f6:	9005      	str	r0, [sp, #20]
 80231f8:	17f0      	asrs	r0, r6, #31
 80231fa:	9006      	str	r0, [sp, #24]
 80231fc:	003a      	movs	r2, r7
 80231fe:	0020      	movs	r0, r4
 8023200:	17e1      	asrs	r1, r4, #31
 8023202:	9304      	str	r3, [sp, #16]
 8023204:	f7dd f9dc 	bl	80005c0 <__aeabi_lmul>
 8023208:	0032      	movs	r2, r6
 802320a:	9108      	str	r1, [sp, #32]
 802320c:	17f3      	asrs	r3, r6, #31
 802320e:	0028      	movs	r0, r5
 8023210:	17e9      	asrs	r1, r5, #31
 8023212:	f7dd f9d5 	bl	80005c0 <__aeabi_lmul>
 8023216:	9808      	ldr	r0, [sp, #32]
 8023218:	002a      	movs	r2, r5
 802321a:	4684      	mov	ip, r0
 802321c:	4650      	mov	r0, sl
 802321e:	4461      	add	r1, ip
 8023220:	0049      	lsls	r1, r1, #1
 8023222:	6001      	str	r1, [r0, #0]
 8023224:	9b05      	ldr	r3, [sp, #20]
 8023226:	9904      	ldr	r1, [sp, #16]
 8023228:	0038      	movs	r0, r7
 802322a:	f7dd f9c9 	bl	80005c0 <__aeabi_lmul>
 802322e:	0020      	movs	r0, r4
 8023230:	2408      	movs	r4, #8
 8023232:	000d      	movs	r5, r1
 8023234:	0032      	movs	r2, r6
 8023236:	9b06      	ldr	r3, [sp, #24]
 8023238:	9903      	ldr	r1, [sp, #12]
 802323a:	f7dd f9c1 	bl	80005c0 <__aeabi_lmul>
 802323e:	46a4      	mov	ip, r4
 8023240:	4650      	mov	r0, sl
 8023242:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023244:	44e3      	add	fp, ip
 8023246:	44e0      	add	r8, ip
 8023248:	44e1      	add	r9, ip
 802324a:	44e2      	add	sl, ip
 802324c:	46a4      	mov	ip, r4
 802324e:	1a6d      	subs	r5, r5, r1
 8023250:	006d      	lsls	r5, r5, #1
 8023252:	9a01      	ldr	r2, [sp, #4]
 8023254:	6045      	str	r5, [r0, #4]
 8023256:	9807      	ldr	r0, [sp, #28]
 8023258:	4462      	add	r2, ip
 802325a:	3801      	subs	r0, #1
 802325c:	9201      	str	r2, [sp, #4]
 802325e:	9007      	str	r0, [sp, #28]
 8023260:	9b00      	ldr	r3, [sp, #0]
 8023262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023264:	9902      	ldr	r1, [sp, #8]
 8023266:	4694      	mov	ip, r2
 8023268:	4463      	add	r3, ip
 802326a:	9300      	str	r3, [sp, #0]
 802326c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802326e:	469c      	mov	ip, r3
 8023270:	4461      	add	r1, ip
 8023272:	9102      	str	r1, [sp, #8]
 8023274:	2800      	cmp	r0, #0
 8023276:	d000      	beq.n	802327a <arm_radix4_butterfly_q31+0x232>
 8023278:	e70e      	b.n	8023098 <arm_radix4_butterfly_q31+0x50>
 802327a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802327c:	009b      	lsls	r3, r3, #2
 802327e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023280:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023282:	9320      	str	r3, [sp, #128]	@ 0x80
 8023284:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023286:	2b04      	cmp	r3, #4
 8023288:	d800      	bhi.n	802328c <arm_radix4_butterfly_q31+0x244>
 802328a:	e180      	b.n	802358e <arm_radix4_butterfly_q31+0x546>
 802328c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802328e:	0893      	lsrs	r3, r2, #2
 8023290:	1e59      	subs	r1, r3, #1
 8023292:	9321      	str	r3, [sp, #132]	@ 0x84
 8023294:	00db      	lsls	r3, r3, #3
 8023296:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023298:	00d3      	lsls	r3, r2, #3
 802329a:	9300      	str	r3, [sp, #0]
 802329c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802329e:	911a      	str	r1, [sp, #104]	@ 0x68
 80232a0:	00da      	lsls	r2, r3, #3
 80232a2:	921e      	str	r2, [sp, #120]	@ 0x78
 80232a4:	011a      	lsls	r2, r3, #4
 80232a6:	921d      	str	r2, [sp, #116]	@ 0x74
 80232a8:	001a      	movs	r2, r3
 80232aa:	4694      	mov	ip, r2
 80232ac:	005b      	lsls	r3, r3, #1
 80232ae:	4463      	add	r3, ip
 80232b0:	00db      	lsls	r3, r3, #3
 80232b2:	931c      	str	r3, [sp, #112]	@ 0x70
 80232b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80232b6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80232b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80232ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80232bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80232be:	9316      	str	r3, [sp, #88]	@ 0x58
 80232c0:	2300      	movs	r3, #0
 80232c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80232c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80232c6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80232c8:	681a      	ldr	r2, [r3, #0]
 80232ca:	685b      	ldr	r3, [r3, #4]
 80232cc:	9205      	str	r2, [sp, #20]
 80232ce:	9306      	str	r3, [sp, #24]
 80232d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80232d2:	468c      	mov	ip, r1
 80232d4:	681a      	ldr	r2, [r3, #0]
 80232d6:	685b      	ldr	r3, [r3, #4]
 80232d8:	9207      	str	r2, [sp, #28]
 80232da:	9308      	str	r3, [sp, #32]
 80232dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80232de:	681a      	ldr	r2, [r3, #0]
 80232e0:	685b      	ldr	r3, [r3, #4]
 80232e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80232e4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80232e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80232e8:	0013      	movs	r3, r2
 80232ea:	4463      	add	r3, ip
 80232ec:	4698      	mov	r8, r3
 80232ee:	0013      	movs	r3, r2
 80232f0:	4442      	add	r2, r8
 80232f2:	4691      	mov	r9, r2
 80232f4:	001a      	movs	r2, r3
 80232f6:	444a      	add	r2, r9
 80232f8:	4692      	mov	sl, r2
 80232fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80232fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80232fe:	4293      	cmp	r3, r2
 8023300:	d800      	bhi.n	8023304 <arm_radix4_butterfly_q31+0x2bc>
 8023302:	e0dd      	b.n	80234c0 <arm_radix4_butterfly_q31+0x478>
 8023304:	4694      	mov	ip, r2
 8023306:	468b      	mov	fp, r1
 8023308:	4644      	mov	r4, r8
 802330a:	4655      	mov	r5, sl
 802330c:	9b07      	ldr	r3, [sp, #28]
 802330e:	17db      	asrs	r3, r3, #31
 8023310:	930c      	str	r3, [sp, #48]	@ 0x30
 8023312:	9b08      	ldr	r3, [sp, #32]
 8023314:	17db      	asrs	r3, r3, #31
 8023316:	930d      	str	r3, [sp, #52]	@ 0x34
 8023318:	9b05      	ldr	r3, [sp, #20]
 802331a:	17db      	asrs	r3, r3, #31
 802331c:	930e      	str	r3, [sp, #56]	@ 0x38
 802331e:	9b06      	ldr	r3, [sp, #24]
 8023320:	17db      	asrs	r3, r3, #31
 8023322:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023326:	17db      	asrs	r3, r3, #31
 8023328:	9310      	str	r3, [sp, #64]	@ 0x40
 802332a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802332c:	17db      	asrs	r3, r3, #31
 802332e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023332:	4463      	add	r3, ip
 8023334:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023336:	465b      	mov	r3, fp
 8023338:	4659      	mov	r1, fp
 802333a:	681a      	ldr	r2, [r3, #0]
 802333c:	464b      	mov	r3, r9
 802333e:	684f      	ldr	r7, [r1, #4]
 8023340:	4649      	mov	r1, r9
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	18d6      	adds	r6, r2, r3
 8023346:	1ad3      	subs	r3, r2, r3
 8023348:	9301      	str	r3, [sp, #4]
 802334a:	684b      	ldr	r3, [r1, #4]
 802334c:	18f8      	adds	r0, r7, r3
 802334e:	1af9      	subs	r1, r7, r3
 8023350:	6827      	ldr	r7, [r4, #0]
 8023352:	9102      	str	r1, [sp, #8]
 8023354:	003a      	movs	r2, r7
 8023356:	682f      	ldr	r7, [r5, #0]
 8023358:	46bc      	mov	ip, r7
 802335a:	465f      	mov	r7, fp
 802335c:	4462      	add	r2, ip
 802335e:	18b3      	adds	r3, r6, r2
 8023360:	109b      	asrs	r3, r3, #2
 8023362:	603b      	str	r3, [r7, #0]
 8023364:	6867      	ldr	r7, [r4, #4]
 8023366:	1ab6      	subs	r6, r6, r2
 8023368:	46b8      	mov	r8, r7
 802336a:	686f      	ldr	r7, [r5, #4]
 802336c:	17f2      	asrs	r2, r6, #31
 802336e:	46bc      	mov	ip, r7
 8023370:	44e0      	add	r8, ip
 8023372:	4643      	mov	r3, r8
 8023374:	465f      	mov	r7, fp
 8023376:	18c1      	adds	r1, r0, r3
 8023378:	1089      	asrs	r1, r1, #2
 802337a:	6079      	str	r1, [r7, #4]
 802337c:	9900      	ldr	r1, [sp, #0]
 802337e:	4690      	mov	r8, r2
 8023380:	468c      	mov	ip, r1
 8023382:	6867      	ldr	r7, [r4, #4]
 8023384:	6869      	ldr	r1, [r5, #4]
 8023386:	44e3      	add	fp, ip
 8023388:	1a7f      	subs	r7, r7, r1
 802338a:	9703      	str	r7, [sp, #12]
 802338c:	6829      	ldr	r1, [r5, #0]
 802338e:	6827      	ldr	r7, [r4, #0]
 8023390:	1a7f      	subs	r7, r7, r1
 8023392:	9704      	str	r7, [sp, #16]
 8023394:	1ac7      	subs	r7, r0, r3
 8023396:	17fa      	asrs	r2, r7, #31
 8023398:	4692      	mov	sl, r2
 802339a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802339c:	9a07      	ldr	r2, [sp, #28]
 802339e:	0030      	movs	r0, r6
 80233a0:	4641      	mov	r1, r8
 80233a2:	f7dd f90d 	bl	80005c0 <__aeabi_lmul>
 80233a6:	9a08      	ldr	r2, [sp, #32]
 80233a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80233aa:	9112      	str	r1, [sp, #72]	@ 0x48
 80233ac:	0038      	movs	r0, r7
 80233ae:	4651      	mov	r1, sl
 80233b0:	f7dd f906 	bl	80005c0 <__aeabi_lmul>
 80233b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80233b6:	9a07      	ldr	r2, [sp, #28]
 80233b8:	4684      	mov	ip, r0
 80233ba:	4461      	add	r1, ip
 80233bc:	1049      	asrs	r1, r1, #1
 80233be:	6021      	str	r1, [r4, #0]
 80233c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80233c2:	0038      	movs	r0, r7
 80233c4:	4651      	mov	r1, sl
 80233c6:	f7dd f8fb 	bl	80005c0 <__aeabi_lmul>
 80233ca:	9a08      	ldr	r2, [sp, #32]
 80233cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80233ce:	000f      	movs	r7, r1
 80233d0:	0030      	movs	r0, r6
 80233d2:	4641      	mov	r1, r8
 80233d4:	f7dd f8f4 	bl	80005c0 <__aeabi_lmul>
 80233d8:	9b00      	ldr	r3, [sp, #0]
 80233da:	9a01      	ldr	r2, [sp, #4]
 80233dc:	469c      	mov	ip, r3
 80233de:	9803      	ldr	r0, [sp, #12]
 80233e0:	1a7f      	subs	r7, r7, r1
 80233e2:	107f      	asrs	r7, r7, #1
 80233e4:	6067      	str	r7, [r4, #4]
 80233e6:	0016      	movs	r6, r2
 80233e8:	4464      	add	r4, ip
 80233ea:	4684      	mov	ip, r0
 80233ec:	4466      	add	r6, ip
 80233ee:	17f2      	asrs	r2, r6, #31
 80233f0:	4690      	mov	r8, r2
 80233f2:	9902      	ldr	r1, [sp, #8]
 80233f4:	9f04      	ldr	r7, [sp, #16]
 80233f6:	0030      	movs	r0, r6
 80233f8:	1bcf      	subs	r7, r1, r7
 80233fa:	17fa      	asrs	r2, r7, #31
 80233fc:	4692      	mov	sl, r2
 80233fe:	4641      	mov	r1, r8
 8023400:	9a05      	ldr	r2, [sp, #20]
 8023402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023404:	f7dd f8dc 	bl	80005c0 <__aeabi_lmul>
 8023408:	9a06      	ldr	r2, [sp, #24]
 802340a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802340c:	9112      	str	r1, [sp, #72]	@ 0x48
 802340e:	0038      	movs	r0, r7
 8023410:	4651      	mov	r1, sl
 8023412:	f7dd f8d5 	bl	80005c0 <__aeabi_lmul>
 8023416:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023418:	9a05      	ldr	r2, [sp, #20]
 802341a:	4684      	mov	ip, r0
 802341c:	4648      	mov	r0, r9
 802341e:	4461      	add	r1, ip
 8023420:	1049      	asrs	r1, r1, #1
 8023422:	6001      	str	r1, [r0, #0]
 8023424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023426:	0038      	movs	r0, r7
 8023428:	4651      	mov	r1, sl
 802342a:	f7dd f8c9 	bl	80005c0 <__aeabi_lmul>
 802342e:	9a06      	ldr	r2, [sp, #24]
 8023430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023432:	000f      	movs	r7, r1
 8023434:	0030      	movs	r0, r6
 8023436:	4641      	mov	r1, r8
 8023438:	f7dd f8c2 	bl	80005c0 <__aeabi_lmul>
 802343c:	464e      	mov	r6, r9
 802343e:	9a00      	ldr	r2, [sp, #0]
 8023440:	9b01      	ldr	r3, [sp, #4]
 8023442:	4694      	mov	ip, r2
 8023444:	9803      	ldr	r0, [sp, #12]
 8023446:	1a7f      	subs	r7, r7, r1
 8023448:	107f      	asrs	r7, r7, #1
 802344a:	6077      	str	r7, [r6, #4]
 802344c:	1a1e      	subs	r6, r3, r0
 802344e:	9b04      	ldr	r3, [sp, #16]
 8023450:	44e1      	add	r9, ip
 8023452:	469c      	mov	ip, r3
 8023454:	17f0      	asrs	r0, r6, #31
 8023456:	4680      	mov	r8, r0
 8023458:	9902      	ldr	r1, [sp, #8]
 802345a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802345c:	4461      	add	r1, ip
 802345e:	17cb      	asrs	r3, r1, #31
 8023460:	000f      	movs	r7, r1
 8023462:	469a      	mov	sl, r3
 8023464:	0030      	movs	r0, r6
 8023466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023468:	4641      	mov	r1, r8
 802346a:	f7dd f8a9 	bl	80005c0 <__aeabi_lmul>
 802346e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023470:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023472:	9101      	str	r1, [sp, #4]
 8023474:	0038      	movs	r0, r7
 8023476:	4651      	mov	r1, sl
 8023478:	f7dd f8a2 	bl	80005c0 <__aeabi_lmul>
 802347c:	9801      	ldr	r0, [sp, #4]
 802347e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023480:	4684      	mov	ip, r0
 8023482:	4461      	add	r1, ip
 8023484:	1049      	asrs	r1, r1, #1
 8023486:	6029      	str	r1, [r5, #0]
 8023488:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802348a:	0038      	movs	r0, r7
 802348c:	4651      	mov	r1, sl
 802348e:	f7dd f897 	bl	80005c0 <__aeabi_lmul>
 8023492:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023494:	000f      	movs	r7, r1
 8023496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023498:	0030      	movs	r0, r6
 802349a:	4641      	mov	r1, r8
 802349c:	f7dd f890 	bl	80005c0 <__aeabi_lmul>
 80234a0:	1a7f      	subs	r7, r7, r1
 80234a2:	107f      	asrs	r7, r7, #1
 80234a4:	606f      	str	r7, [r5, #4]
 80234a6:	9a00      	ldr	r2, [sp, #0]
 80234a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80234aa:	4694      	mov	ip, r2
 80234ac:	4465      	add	r5, ip
 80234ae:	468c      	mov	ip, r1
 80234b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80234b2:	0013      	movs	r3, r2
 80234b4:	4462      	add	r2, ip
 80234b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80234b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80234ba:	429a      	cmp	r2, r3
 80234bc:	d900      	bls.n	80234c0 <arm_radix4_butterfly_q31+0x478>
 80234be:	e73a      	b.n	8023336 <arm_radix4_butterfly_q31+0x2ee>
 80234c0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80234c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80234c4:	468c      	mov	ip, r1
 80234c6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80234c8:	4462      	add	r2, ip
 80234ca:	468c      	mov	ip, r1
 80234cc:	9216      	str	r2, [sp, #88]	@ 0x58
 80234ce:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80234d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80234d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80234d4:	4462      	add	r2, ip
 80234d6:	468c      	mov	ip, r1
 80234d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80234da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80234dc:	3301      	adds	r3, #1
 80234de:	4462      	add	r2, ip
 80234e0:	9218      	str	r2, [sp, #96]	@ 0x60
 80234e2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80234e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80234e6:	3208      	adds	r2, #8
 80234e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80234ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80234ec:	4293      	cmp	r3, r2
 80234ee:	d800      	bhi.n	80234f2 <arm_radix4_butterfly_q31+0x4aa>
 80234f0:	e6e8      	b.n	80232c4 <arm_radix4_butterfly_q31+0x27c>
 80234f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80234f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80234f6:	009b      	lsls	r3, r3, #2
 80234f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80234fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80234fc:	9213      	str	r2, [sp, #76]	@ 0x4c
 80234fe:	089b      	lsrs	r3, r3, #2
 8023500:	9320      	str	r3, [sp, #128]	@ 0x80
 8023502:	2b04      	cmp	r3, #4
 8023504:	d900      	bls.n	8023508 <arm_radix4_butterfly_q31+0x4c0>
 8023506:	e6c1      	b.n	802328c <arm_radix4_butterfly_q31+0x244>
 8023508:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802350a:	469a      	mov	sl, r3
 802350c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802350e:	691c      	ldr	r4, [r3, #16]
 8023510:	685a      	ldr	r2, [r3, #4]
 8023512:	46a1      	mov	r9, r4
 8023514:	4690      	mov	r8, r2
 8023516:	6819      	ldr	r1, [r3, #0]
 8023518:	689a      	ldr	r2, [r3, #8]
 802351a:	699f      	ldr	r7, [r3, #24]
 802351c:	188d      	adds	r5, r1, r2
 802351e:	444d      	add	r5, r9
 8023520:	19ed      	adds	r5, r5, r7
 8023522:	69de      	ldr	r6, [r3, #28]
 8023524:	601d      	str	r5, [r3, #0]
 8023526:	4645      	mov	r5, r8
 8023528:	46b4      	mov	ip, r6
 802352a:	68d8      	ldr	r0, [r3, #12]
 802352c:	695c      	ldr	r4, [r3, #20]
 802352e:	182d      	adds	r5, r5, r0
 8023530:	192d      	adds	r5, r5, r4
 8023532:	4465      	add	r5, ip
 8023534:	605d      	str	r5, [r3, #4]
 8023536:	1a8d      	subs	r5, r1, r2
 8023538:	444d      	add	r5, r9
 802353a:	1bed      	subs	r5, r5, r7
 802353c:	609d      	str	r5, [r3, #8]
 802353e:	4645      	mov	r5, r8
 8023540:	1a2d      	subs	r5, r5, r0
 8023542:	192d      	adds	r5, r5, r4
 8023544:	1bad      	subs	r5, r5, r6
 8023546:	464e      	mov	r6, r9
 8023548:	60dd      	str	r5, [r3, #12]
 802354a:	180d      	adds	r5, r1, r0
 802354c:	1bad      	subs	r5, r5, r6
 802354e:	4666      	mov	r6, ip
 8023550:	1bad      	subs	r5, r5, r6
 8023552:	611d      	str	r5, [r3, #16]
 8023554:	4645      	mov	r5, r8
 8023556:	1aad      	subs	r5, r5, r2
 8023558:	4442      	add	r2, r8
 802355a:	1b12      	subs	r2, r2, r4
 802355c:	1bd2      	subs	r2, r2, r7
 802355e:	1a08      	subs	r0, r1, r0
 8023560:	61da      	str	r2, [r3, #28]
 8023562:	4649      	mov	r1, r9
 8023564:	2201      	movs	r2, #1
 8023566:	1a41      	subs	r1, r0, r1
 8023568:	4252      	negs	r2, r2
 802356a:	4461      	add	r1, ip
 802356c:	4694      	mov	ip, r2
 802356e:	44e2      	add	sl, ip
 8023570:	4652      	mov	r2, sl
 8023572:	1b2d      	subs	r5, r5, r4
 8023574:	19ed      	adds	r5, r5, r7
 8023576:	615d      	str	r5, [r3, #20]
 8023578:	6199      	str	r1, [r3, #24]
 802357a:	3320      	adds	r3, #32
 802357c:	2a00      	cmp	r2, #0
 802357e:	d1c6      	bne.n	802350e <arm_radix4_butterfly_q31+0x4c6>
 8023580:	b027      	add	sp, #156	@ 0x9c
 8023582:	bc3c      	pop	{r2, r3, r4, r5}
 8023584:	4690      	mov	r8, r2
 8023586:	4699      	mov	r9, r3
 8023588:	46a2      	mov	sl, r4
 802358a:	46ab      	mov	fp, r5
 802358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802358e:	469a      	mov	sl, r3
 8023590:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023592:	e7bc      	b.n	802350e <arm_radix4_butterfly_q31+0x4c6>

08023594 <arm_radix4_butterfly_inverse_q31>:
 8023594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023596:	464d      	mov	r5, r9
 8023598:	4644      	mov	r4, r8
 802359a:	465f      	mov	r7, fp
 802359c:	4656      	mov	r6, sl
 802359e:	b4f0      	push	{r4, r5, r6, r7}
 80235a0:	b0a7      	sub	sp, #156	@ 0x9c
 80235a2:	469c      	mov	ip, r3
 80235a4:	9114      	str	r1, [sp, #80]	@ 0x50
 80235a6:	0889      	lsrs	r1, r1, #2
 80235a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80235aa:	00cb      	lsls	r3, r1, #3
 80235ac:	0015      	movs	r5, r2
 80235ae:	9223      	str	r2, [sp, #140]	@ 0x8c
 80235b0:	18c2      	adds	r2, r0, r3
 80235b2:	000c      	movs	r4, r1
 80235b4:	9124      	str	r1, [sp, #144]	@ 0x90
 80235b6:	18d1      	adds	r1, r2, r3
 80235b8:	468b      	mov	fp, r1
 80235ba:	469a      	mov	sl, r3
 80235bc:	4663      	mov	r3, ip
 80235be:	44da      	add	sl, fp
 80235c0:	46d0      	mov	r8, sl
 80235c2:	4681      	mov	r9, r0
 80235c4:	4692      	mov	sl, r2
 80235c6:	0119      	lsls	r1, r3, #4
 80235c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80235ca:	00d9      	lsls	r1, r3, #3
 80235cc:	005b      	lsls	r3, r3, #1
 80235ce:	4463      	add	r3, ip
 80235d0:	910e      	str	r1, [sp, #56]	@ 0x38
 80235d2:	00d9      	lsls	r1, r3, #3
 80235d4:	9022      	str	r0, [sp, #136]	@ 0x88
 80235d6:	9025      	str	r0, [sp, #148]	@ 0x94
 80235d8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80235da:	9502      	str	r5, [sp, #8]
 80235dc:	9500      	str	r5, [sp, #0]
 80235de:	9501      	str	r5, [sp, #4]
 80235e0:	9409      	str	r4, [sp, #36]	@ 0x24
 80235e2:	464b      	mov	r3, r9
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	4652      	mov	r2, sl
 80235e8:	111c      	asrs	r4, r3, #4
 80235ea:	465b      	mov	r3, fp
 80235ec:	4648      	mov	r0, r9
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	6812      	ldr	r2, [r2, #0]
 80235f2:	6840      	ldr	r0, [r0, #4]
 80235f4:	111b      	asrs	r3, r3, #4
 80235f6:	18e7      	adds	r7, r4, r3
 80235f8:	1ae3      	subs	r3, r4, r3
 80235fa:	1114      	asrs	r4, r2, #4
 80235fc:	4642      	mov	r2, r8
 80235fe:	1105      	asrs	r5, r0, #4
 8023600:	4658      	mov	r0, fp
 8023602:	6812      	ldr	r2, [r2, #0]
 8023604:	6840      	ldr	r0, [r0, #4]
 8023606:	9303      	str	r3, [sp, #12]
 8023608:	1113      	asrs	r3, r2, #4
 802360a:	18e2      	adds	r2, r4, r3
 802360c:	1103      	asrs	r3, r0, #4
 802360e:	18ee      	adds	r6, r5, r3
 8023610:	1ae8      	subs	r0, r5, r3
 8023612:	464d      	mov	r5, r9
 8023614:	18bb      	adds	r3, r7, r2
 8023616:	602b      	str	r3, [r5, #0]
 8023618:	4641      	mov	r1, r8
 802361a:	4655      	mov	r5, sl
 802361c:	6849      	ldr	r1, [r1, #4]
 802361e:	686d      	ldr	r5, [r5, #4]
 8023620:	110b      	asrs	r3, r1, #4
 8023622:	112d      	asrs	r5, r5, #4
 8023624:	18eb      	adds	r3, r5, r3
 8023626:	464d      	mov	r5, r9
 8023628:	18f1      	adds	r1, r6, r3
 802362a:	6069      	str	r1, [r5, #4]
 802362c:	4655      	mov	r5, sl
 802362e:	686d      	ldr	r5, [r5, #4]
 8023630:	9004      	str	r0, [sp, #16]
 8023632:	112c      	asrs	r4, r5, #4
 8023634:	4645      	mov	r5, r8
 8023636:	686d      	ldr	r5, [r5, #4]
 8023638:	1129      	asrs	r1, r5, #4
 802363a:	1a65      	subs	r5, r4, r1
 802363c:	4651      	mov	r1, sl
 802363e:	6809      	ldr	r1, [r1, #0]
 8023640:	1abc      	subs	r4, r7, r2
 8023642:	1108      	asrs	r0, r1, #4
 8023644:	4641      	mov	r1, r8
 8023646:	17e2      	asrs	r2, r4, #31
 8023648:	6809      	ldr	r1, [r1, #0]
 802364a:	9207      	str	r2, [sp, #28]
 802364c:	9a01      	ldr	r2, [sp, #4]
 802364e:	1109      	asrs	r1, r1, #4
 8023650:	6817      	ldr	r7, [r2, #0]
 8023652:	1a41      	subs	r1, r0, r1
 8023654:	9106      	str	r1, [sp, #24]
 8023656:	0039      	movs	r1, r7
 8023658:	17ff      	asrs	r7, r7, #31
 802365a:	0038      	movs	r0, r7
 802365c:	9505      	str	r5, [sp, #20]
 802365e:	1af5      	subs	r5, r6, r3
 8023660:	17ef      	asrs	r7, r5, #31
 8023662:	970b      	str	r7, [sp, #44]	@ 0x2c
 8023664:	6857      	ldr	r7, [r2, #4]
 8023666:	0003      	movs	r3, r0
 8023668:	17fe      	asrs	r6, r7, #31
 802366a:	000a      	movs	r2, r1
 802366c:	9108      	str	r1, [sp, #32]
 802366e:	900a      	str	r0, [sp, #40]	@ 0x28
 8023670:	17e1      	asrs	r1, r4, #31
 8023672:	0020      	movs	r0, r4
 8023674:	960c      	str	r6, [sp, #48]	@ 0x30
 8023676:	f7dc ffa3 	bl	80005c0 <__aeabi_lmul>
 802367a:	003a      	movs	r2, r7
 802367c:	17fb      	asrs	r3, r7, #31
 802367e:	000e      	movs	r6, r1
 8023680:	0028      	movs	r0, r5
 8023682:	17e9      	asrs	r1, r5, #31
 8023684:	f7dc ff9c 	bl	80005c0 <__aeabi_lmul>
 8023688:	4653      	mov	r3, sl
 802368a:	1a76      	subs	r6, r6, r1
 802368c:	0076      	lsls	r6, r6, #1
 802368e:	601e      	str	r6, [r3, #0]
 8023690:	002a      	movs	r2, r5
 8023692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023694:	9808      	ldr	r0, [sp, #32]
 8023696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023698:	f7dc ff92 	bl	80005c0 <__aeabi_lmul>
 802369c:	003a      	movs	r2, r7
 802369e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80236a0:	000d      	movs	r5, r1
 80236a2:	0020      	movs	r0, r4
 80236a4:	9907      	ldr	r1, [sp, #28]
 80236a6:	f7dc ff8b 	bl	80005c0 <__aeabi_lmul>
 80236aa:	4657      	mov	r7, sl
 80236ac:	186d      	adds	r5, r5, r1
 80236ae:	006d      	lsls	r5, r5, #1
 80236b0:	607d      	str	r5, [r7, #4]
 80236b2:	9b03      	ldr	r3, [sp, #12]
 80236b4:	9e06      	ldr	r6, [sp, #24]
 80236b6:	9d05      	ldr	r5, [sp, #20]
 80236b8:	46b4      	mov	ip, r6
 80236ba:	1b5d      	subs	r5, r3, r5
 80236bc:	9b00      	ldr	r3, [sp, #0]
 80236be:	17ef      	asrs	r7, r5, #31
 80236c0:	0039      	movs	r1, r7
 80236c2:	681f      	ldr	r7, [r3, #0]
 80236c4:	17fc      	asrs	r4, r7, #31
 80236c6:	0020      	movs	r0, r4
 80236c8:	9c04      	ldr	r4, [sp, #16]
 80236ca:	4464      	add	r4, ip
 80236cc:	17e6      	asrs	r6, r4, #31
 80236ce:	9407      	str	r4, [sp, #28]
 80236d0:	9608      	str	r6, [sp, #32]
 80236d2:	685e      	ldr	r6, [r3, #4]
 80236d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80236d6:	17f2      	asrs	r2, r6, #31
 80236d8:	0003      	movs	r3, r0
 80236da:	920c      	str	r2, [sp, #48]	@ 0x30
 80236dc:	0028      	movs	r0, r5
 80236de:	003a      	movs	r2, r7
 80236e0:	910a      	str	r1, [sp, #40]	@ 0x28
 80236e2:	f7dc ff6d 	bl	80005c0 <__aeabi_lmul>
 80236e6:	0032      	movs	r2, r6
 80236e8:	17f3      	asrs	r3, r6, #31
 80236ea:	9807      	ldr	r0, [sp, #28]
 80236ec:	000c      	movs	r4, r1
 80236ee:	9908      	ldr	r1, [sp, #32]
 80236f0:	f7dc ff66 	bl	80005c0 <__aeabi_lmul>
 80236f4:	4658      	mov	r0, fp
 80236f6:	1a64      	subs	r4, r4, r1
 80236f8:	0064      	lsls	r4, r4, #1
 80236fa:	9a07      	ldr	r2, [sp, #28]
 80236fc:	6004      	str	r4, [r0, #0]
 80236fe:	9b08      	ldr	r3, [sp, #32]
 8023700:	0038      	movs	r0, r7
 8023702:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023704:	f7dc ff5c 	bl	80005c0 <__aeabi_lmul>
 8023708:	0032      	movs	r2, r6
 802370a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802370c:	000c      	movs	r4, r1
 802370e:	0028      	movs	r0, r5
 8023710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023712:	f7dc ff55 	bl	80005c0 <__aeabi_lmul>
 8023716:	9d05      	ldr	r5, [sp, #20]
 8023718:	465f      	mov	r7, fp
 802371a:	46ac      	mov	ip, r5
 802371c:	1864      	adds	r4, r4, r1
 802371e:	9903      	ldr	r1, [sp, #12]
 8023720:	0064      	lsls	r4, r4, #1
 8023722:	4461      	add	r1, ip
 8023724:	607c      	str	r4, [r7, #4]
 8023726:	000c      	movs	r4, r1
 8023728:	17c9      	asrs	r1, r1, #31
 802372a:	9105      	str	r1, [sp, #20]
 802372c:	9902      	ldr	r1, [sp, #8]
 802372e:	9804      	ldr	r0, [sp, #16]
 8023730:	680d      	ldr	r5, [r1, #0]
 8023732:	9e06      	ldr	r6, [sp, #24]
 8023734:	002b      	movs	r3, r5
 8023736:	17ed      	asrs	r5, r5, #31
 8023738:	684f      	ldr	r7, [r1, #4]
 802373a:	9503      	str	r5, [sp, #12]
 802373c:	1b85      	subs	r5, r0, r6
 802373e:	17e8      	asrs	r0, r5, #31
 8023740:	001a      	movs	r2, r3
 8023742:	9006      	str	r0, [sp, #24]
 8023744:	17fe      	asrs	r6, r7, #31
 8023746:	9304      	str	r3, [sp, #16]
 8023748:	0020      	movs	r0, r4
 802374a:	9b03      	ldr	r3, [sp, #12]
 802374c:	17e1      	asrs	r1, r4, #31
 802374e:	9607      	str	r6, [sp, #28]
 8023750:	f7dc ff36 	bl	80005c0 <__aeabi_lmul>
 8023754:	003a      	movs	r2, r7
 8023756:	000e      	movs	r6, r1
 8023758:	17fb      	asrs	r3, r7, #31
 802375a:	0028      	movs	r0, r5
 802375c:	17e9      	asrs	r1, r5, #31
 802375e:	f7dc ff2f 	bl	80005c0 <__aeabi_lmul>
 8023762:	4640      	mov	r0, r8
 8023764:	1a76      	subs	r6, r6, r1
 8023766:	0076      	lsls	r6, r6, #1
 8023768:	002a      	movs	r2, r5
 802376a:	9b06      	ldr	r3, [sp, #24]
 802376c:	6006      	str	r6, [r0, #0]
 802376e:	9903      	ldr	r1, [sp, #12]
 8023770:	9804      	ldr	r0, [sp, #16]
 8023772:	f7dc ff25 	bl	80005c0 <__aeabi_lmul>
 8023776:	0020      	movs	r0, r4
 8023778:	2408      	movs	r4, #8
 802377a:	9b07      	ldr	r3, [sp, #28]
 802377c:	000d      	movs	r5, r1
 802377e:	003a      	movs	r2, r7
 8023780:	9905      	ldr	r1, [sp, #20]
 8023782:	f7dc ff1d 	bl	80005c0 <__aeabi_lmul>
 8023786:	4640      	mov	r0, r8
 8023788:	46a4      	mov	ip, r4
 802378a:	186d      	adds	r5, r5, r1
 802378c:	006d      	lsls	r5, r5, #1
 802378e:	6045      	str	r5, [r0, #4]
 8023790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023792:	44e1      	add	r9, ip
 8023794:	3801      	subs	r0, #1
 8023796:	9009      	str	r0, [sp, #36]	@ 0x24
 8023798:	9a01      	ldr	r2, [sp, #4]
 802379a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802379c:	44e2      	add	sl, ip
 802379e:	44e3      	add	fp, ip
 80237a0:	44e0      	add	r8, ip
 80237a2:	46a4      	mov	ip, r4
 80237a4:	4462      	add	r2, ip
 80237a6:	9201      	str	r2, [sp, #4]
 80237a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80237aa:	9b00      	ldr	r3, [sp, #0]
 80237ac:	4694      	mov	ip, r2
 80237ae:	4463      	add	r3, ip
 80237b0:	9300      	str	r3, [sp, #0]
 80237b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80237b4:	9902      	ldr	r1, [sp, #8]
 80237b6:	469c      	mov	ip, r3
 80237b8:	4461      	add	r1, ip
 80237ba:	9102      	str	r1, [sp, #8]
 80237bc:	2800      	cmp	r0, #0
 80237be:	d000      	beq.n	80237c2 <arm_radix4_butterfly_inverse_q31+0x22e>
 80237c0:	e70f      	b.n	80235e2 <arm_radix4_butterfly_inverse_q31+0x4e>
 80237c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80237c4:	009b      	lsls	r3, r3, #2
 80237c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80237c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80237ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80237cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80237ce:	2b04      	cmp	r3, #4
 80237d0:	d800      	bhi.n	80237d4 <arm_radix4_butterfly_inverse_q31+0x240>
 80237d2:	e17c      	b.n	8023ace <arm_radix4_butterfly_inverse_q31+0x53a>
 80237d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80237d6:	0893      	lsrs	r3, r2, #2
 80237d8:	1e59      	subs	r1, r3, #1
 80237da:	9321      	str	r3, [sp, #132]	@ 0x84
 80237dc:	00db      	lsls	r3, r3, #3
 80237de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80237e0:	00d3      	lsls	r3, r2, #3
 80237e2:	9300      	str	r3, [sp, #0]
 80237e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80237e6:	911a      	str	r1, [sp, #104]	@ 0x68
 80237e8:	00da      	lsls	r2, r3, #3
 80237ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80237ec:	011a      	lsls	r2, r3, #4
 80237ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80237f0:	001a      	movs	r2, r3
 80237f2:	4694      	mov	ip, r2
 80237f4:	005b      	lsls	r3, r3, #1
 80237f6:	4463      	add	r3, ip
 80237f8:	00db      	lsls	r3, r3, #3
 80237fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80237fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80237fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023800:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023802:	9318      	str	r3, [sp, #96]	@ 0x60
 8023804:	9319      	str	r3, [sp, #100]	@ 0x64
 8023806:	9316      	str	r3, [sp, #88]	@ 0x58
 8023808:	2300      	movs	r3, #0
 802380a:	9315      	str	r3, [sp, #84]	@ 0x54
 802380c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802380e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023810:	681a      	ldr	r2, [r3, #0]
 8023812:	685b      	ldr	r3, [r3, #4]
 8023814:	9205      	str	r2, [sp, #20]
 8023816:	9306      	str	r3, [sp, #24]
 8023818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802381a:	468c      	mov	ip, r1
 802381c:	681a      	ldr	r2, [r3, #0]
 802381e:	685b      	ldr	r3, [r3, #4]
 8023820:	9207      	str	r2, [sp, #28]
 8023822:	9308      	str	r3, [sp, #32]
 8023824:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023826:	681a      	ldr	r2, [r3, #0]
 8023828:	685b      	ldr	r3, [r3, #4]
 802382a:	9209      	str	r2, [sp, #36]	@ 0x24
 802382c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802382e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023830:	0013      	movs	r3, r2
 8023832:	4463      	add	r3, ip
 8023834:	4698      	mov	r8, r3
 8023836:	0013      	movs	r3, r2
 8023838:	4442      	add	r2, r8
 802383a:	4691      	mov	r9, r2
 802383c:	001a      	movs	r2, r3
 802383e:	444a      	add	r2, r9
 8023840:	4692      	mov	sl, r2
 8023842:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023844:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023846:	4293      	cmp	r3, r2
 8023848:	d800      	bhi.n	802384c <arm_radix4_butterfly_inverse_q31+0x2b8>
 802384a:	e0d9      	b.n	8023a00 <arm_radix4_butterfly_inverse_q31+0x46c>
 802384c:	4694      	mov	ip, r2
 802384e:	4644      	mov	r4, r8
 8023850:	4655      	mov	r5, sl
 8023852:	4688      	mov	r8, r1
 8023854:	9b07      	ldr	r3, [sp, #28]
 8023856:	17db      	asrs	r3, r3, #31
 8023858:	930c      	str	r3, [sp, #48]	@ 0x30
 802385a:	9b08      	ldr	r3, [sp, #32]
 802385c:	17db      	asrs	r3, r3, #31
 802385e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023860:	9b05      	ldr	r3, [sp, #20]
 8023862:	17db      	asrs	r3, r3, #31
 8023864:	930e      	str	r3, [sp, #56]	@ 0x38
 8023866:	9b06      	ldr	r3, [sp, #24]
 8023868:	17db      	asrs	r3, r3, #31
 802386a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802386c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802386e:	17db      	asrs	r3, r3, #31
 8023870:	9310      	str	r3, [sp, #64]	@ 0x40
 8023872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023874:	17db      	asrs	r3, r3, #31
 8023876:	9311      	str	r3, [sp, #68]	@ 0x44
 8023878:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802387a:	4463      	add	r3, ip
 802387c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802387e:	4643      	mov	r3, r8
 8023880:	4641      	mov	r1, r8
 8023882:	681a      	ldr	r2, [r3, #0]
 8023884:	464b      	mov	r3, r9
 8023886:	684f      	ldr	r7, [r1, #4]
 8023888:	4649      	mov	r1, r9
 802388a:	681b      	ldr	r3, [r3, #0]
 802388c:	18d6      	adds	r6, r2, r3
 802388e:	1ad3      	subs	r3, r2, r3
 8023890:	9301      	str	r3, [sp, #4]
 8023892:	684b      	ldr	r3, [r1, #4]
 8023894:	1af9      	subs	r1, r7, r3
 8023896:	9102      	str	r1, [sp, #8]
 8023898:	6829      	ldr	r1, [r5, #0]
 802389a:	18f8      	adds	r0, r7, r3
 802389c:	468c      	mov	ip, r1
 802389e:	6827      	ldr	r7, [r4, #0]
 80238a0:	4467      	add	r7, ip
 80238a2:	003a      	movs	r2, r7
 80238a4:	19f3      	adds	r3, r6, r7
 80238a6:	4647      	mov	r7, r8
 80238a8:	109b      	asrs	r3, r3, #2
 80238aa:	603b      	str	r3, [r7, #0]
 80238ac:	6869      	ldr	r1, [r5, #4]
 80238ae:	6867      	ldr	r7, [r4, #4]
 80238b0:	468c      	mov	ip, r1
 80238b2:	4467      	add	r7, ip
 80238b4:	003b      	movs	r3, r7
 80238b6:	19c1      	adds	r1, r0, r7
 80238b8:	4647      	mov	r7, r8
 80238ba:	1ab6      	subs	r6, r6, r2
 80238bc:	1089      	asrs	r1, r1, #2
 80238be:	6079      	str	r1, [r7, #4]
 80238c0:	17f2      	asrs	r2, r6, #31
 80238c2:	9900      	ldr	r1, [sp, #0]
 80238c4:	4692      	mov	sl, r2
 80238c6:	468c      	mov	ip, r1
 80238c8:	6867      	ldr	r7, [r4, #4]
 80238ca:	6869      	ldr	r1, [r5, #4]
 80238cc:	44e0      	add	r8, ip
 80238ce:	1a7f      	subs	r7, r7, r1
 80238d0:	9703      	str	r7, [sp, #12]
 80238d2:	6821      	ldr	r1, [r4, #0]
 80238d4:	682f      	ldr	r7, [r5, #0]
 80238d6:	1bc9      	subs	r1, r1, r7
 80238d8:	1ac7      	subs	r7, r0, r3
 80238da:	17fa      	asrs	r2, r7, #31
 80238dc:	4693      	mov	fp, r2
 80238de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80238e0:	9a07      	ldr	r2, [sp, #28]
 80238e2:	9104      	str	r1, [sp, #16]
 80238e4:	0030      	movs	r0, r6
 80238e6:	4651      	mov	r1, sl
 80238e8:	f7dc fe6a 	bl	80005c0 <__aeabi_lmul>
 80238ec:	9a08      	ldr	r2, [sp, #32]
 80238ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80238f0:	9112      	str	r1, [sp, #72]	@ 0x48
 80238f2:	0038      	movs	r0, r7
 80238f4:	4659      	mov	r1, fp
 80238f6:	f7dc fe63 	bl	80005c0 <__aeabi_lmul>
 80238fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80238fc:	9a07      	ldr	r2, [sp, #28]
 80238fe:	1a41      	subs	r1, r0, r1
 8023900:	1049      	asrs	r1, r1, #1
 8023902:	6021      	str	r1, [r4, #0]
 8023904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023906:	0038      	movs	r0, r7
 8023908:	4659      	mov	r1, fp
 802390a:	f7dc fe59 	bl	80005c0 <__aeabi_lmul>
 802390e:	9a08      	ldr	r2, [sp, #32]
 8023910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023912:	000f      	movs	r7, r1
 8023914:	0030      	movs	r0, r6
 8023916:	4651      	mov	r1, sl
 8023918:	f7dc fe52 	bl	80005c0 <__aeabi_lmul>
 802391c:	9b00      	ldr	r3, [sp, #0]
 802391e:	187f      	adds	r7, r7, r1
 8023920:	469c      	mov	ip, r3
 8023922:	107f      	asrs	r7, r7, #1
 8023924:	6067      	str	r7, [r4, #4]
 8023926:	9a01      	ldr	r2, [sp, #4]
 8023928:	9f03      	ldr	r7, [sp, #12]
 802392a:	9802      	ldr	r0, [sp, #8]
 802392c:	1bd7      	subs	r7, r2, r7
 802392e:	17fe      	asrs	r6, r7, #31
 8023930:	0031      	movs	r1, r6
 8023932:	9e04      	ldr	r6, [sp, #16]
 8023934:	4682      	mov	sl, r0
 8023936:	4464      	add	r4, ip
 8023938:	46b4      	mov	ip, r6
 802393a:	44e2      	add	sl, ip
 802393c:	4652      	mov	r2, sl
 802393e:	17d2      	asrs	r2, r2, #31
 8023940:	4693      	mov	fp, r2
 8023942:	0038      	movs	r0, r7
 8023944:	9a05      	ldr	r2, [sp, #20]
 8023946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023948:	9112      	str	r1, [sp, #72]	@ 0x48
 802394a:	f7dc fe39 	bl	80005c0 <__aeabi_lmul>
 802394e:	9a06      	ldr	r2, [sp, #24]
 8023950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023952:	000e      	movs	r6, r1
 8023954:	4650      	mov	r0, sl
 8023956:	4659      	mov	r1, fp
 8023958:	f7dc fe32 	bl	80005c0 <__aeabi_lmul>
 802395c:	4648      	mov	r0, r9
 802395e:	1a76      	subs	r6, r6, r1
 8023960:	1076      	asrs	r6, r6, #1
 8023962:	6006      	str	r6, [r0, #0]
 8023964:	9a05      	ldr	r2, [sp, #20]
 8023966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023968:	4650      	mov	r0, sl
 802396a:	4659      	mov	r1, fp
 802396c:	f7dc fe28 	bl	80005c0 <__aeabi_lmul>
 8023970:	9a06      	ldr	r2, [sp, #24]
 8023972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023974:	000e      	movs	r6, r1
 8023976:	0038      	movs	r0, r7
 8023978:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802397a:	f7dc fe21 	bl	80005c0 <__aeabi_lmul>
 802397e:	9a00      	ldr	r2, [sp, #0]
 8023980:	9f03      	ldr	r7, [sp, #12]
 8023982:	4694      	mov	ip, r2
 8023984:	1876      	adds	r6, r6, r1
 8023986:	4649      	mov	r1, r9
 8023988:	44e1      	add	r9, ip
 802398a:	46bc      	mov	ip, r7
 802398c:	9b01      	ldr	r3, [sp, #4]
 802398e:	1076      	asrs	r6, r6, #1
 8023990:	4463      	add	r3, ip
 8023992:	17df      	asrs	r7, r3, #31
 8023994:	604e      	str	r6, [r1, #4]
 8023996:	46ba      	mov	sl, r7
 8023998:	001e      	movs	r6, r3
 802399a:	9802      	ldr	r0, [sp, #8]
 802399c:	9b04      	ldr	r3, [sp, #16]
 802399e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80239a0:	1ac7      	subs	r7, r0, r3
 80239a2:	17fb      	asrs	r3, r7, #31
 80239a4:	469b      	mov	fp, r3
 80239a6:	0030      	movs	r0, r6
 80239a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80239aa:	4651      	mov	r1, sl
 80239ac:	f7dc fe08 	bl	80005c0 <__aeabi_lmul>
 80239b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80239b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80239b4:	9101      	str	r1, [sp, #4]
 80239b6:	0038      	movs	r0, r7
 80239b8:	4659      	mov	r1, fp
 80239ba:	f7dc fe01 	bl	80005c0 <__aeabi_lmul>
 80239be:	9801      	ldr	r0, [sp, #4]
 80239c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80239c2:	1a41      	subs	r1, r0, r1
 80239c4:	1049      	asrs	r1, r1, #1
 80239c6:	6029      	str	r1, [r5, #0]
 80239c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80239ca:	0038      	movs	r0, r7
 80239cc:	4659      	mov	r1, fp
 80239ce:	f7dc fdf7 	bl	80005c0 <__aeabi_lmul>
 80239d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80239d4:	000f      	movs	r7, r1
 80239d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80239d8:	0030      	movs	r0, r6
 80239da:	4651      	mov	r1, sl
 80239dc:	f7dc fdf0 	bl	80005c0 <__aeabi_lmul>
 80239e0:	187f      	adds	r7, r7, r1
 80239e2:	107f      	asrs	r7, r7, #1
 80239e4:	606f      	str	r7, [r5, #4]
 80239e6:	9a00      	ldr	r2, [sp, #0]
 80239e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80239ea:	4694      	mov	ip, r2
 80239ec:	4465      	add	r5, ip
 80239ee:	468c      	mov	ip, r1
 80239f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80239f2:	0013      	movs	r3, r2
 80239f4:	4462      	add	r2, ip
 80239f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80239f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80239fa:	429a      	cmp	r2, r3
 80239fc:	d900      	bls.n	8023a00 <arm_radix4_butterfly_inverse_q31+0x46c>
 80239fe:	e73e      	b.n	802387e <arm_radix4_butterfly_inverse_q31+0x2ea>
 8023a00:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023a02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023a04:	468c      	mov	ip, r1
 8023a06:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023a08:	4462      	add	r2, ip
 8023a0a:	468c      	mov	ip, r1
 8023a0c:	9216      	str	r2, [sp, #88]	@ 0x58
 8023a0e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023a10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023a12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023a14:	4462      	add	r2, ip
 8023a16:	468c      	mov	ip, r1
 8023a18:	9219      	str	r2, [sp, #100]	@ 0x64
 8023a1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023a1c:	3301      	adds	r3, #1
 8023a1e:	4462      	add	r2, ip
 8023a20:	9218      	str	r2, [sp, #96]	@ 0x60
 8023a22:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023a24:	9315      	str	r3, [sp, #84]	@ 0x54
 8023a26:	3208      	adds	r2, #8
 8023a28:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023a2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023a2c:	4293      	cmp	r3, r2
 8023a2e:	d800      	bhi.n	8023a32 <arm_radix4_butterfly_inverse_q31+0x49e>
 8023a30:	e6ec      	b.n	802380c <arm_radix4_butterfly_inverse_q31+0x278>
 8023a32:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023a34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023a36:	009b      	lsls	r3, r3, #2
 8023a38:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023a3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023a3c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023a3e:	089b      	lsrs	r3, r3, #2
 8023a40:	9320      	str	r3, [sp, #128]	@ 0x80
 8023a42:	2b04      	cmp	r3, #4
 8023a44:	d900      	bls.n	8023a48 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8023a46:	e6c5      	b.n	80237d4 <arm_radix4_butterfly_inverse_q31+0x240>
 8023a48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023a4a:	469a      	mov	sl, r3
 8023a4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023a4e:	681a      	ldr	r2, [r3, #0]
 8023a50:	6918      	ldr	r0, [r3, #16]
 8023a52:	4691      	mov	r9, r2
 8023a54:	464c      	mov	r4, r9
 8023a56:	4680      	mov	r8, r0
 8023a58:	69de      	ldr	r6, [r3, #28]
 8023a5a:	689d      	ldr	r5, [r3, #8]
 8023a5c:	46b4      	mov	ip, r6
 8023a5e:	6998      	ldr	r0, [r3, #24]
 8023a60:	1964      	adds	r4, r4, r5
 8023a62:	6859      	ldr	r1, [r3, #4]
 8023a64:	68da      	ldr	r2, [r3, #12]
 8023a66:	4444      	add	r4, r8
 8023a68:	695f      	ldr	r7, [r3, #20]
 8023a6a:	1824      	adds	r4, r4, r0
 8023a6c:	601c      	str	r4, [r3, #0]
 8023a6e:	188c      	adds	r4, r1, r2
 8023a70:	19e4      	adds	r4, r4, r7
 8023a72:	4464      	add	r4, ip
 8023a74:	605c      	str	r4, [r3, #4]
 8023a76:	464c      	mov	r4, r9
 8023a78:	1b64      	subs	r4, r4, r5
 8023a7a:	4444      	add	r4, r8
 8023a7c:	1a24      	subs	r4, r4, r0
 8023a7e:	609c      	str	r4, [r3, #8]
 8023a80:	1a8c      	subs	r4, r1, r2
 8023a82:	19e4      	adds	r4, r4, r7
 8023a84:	1ba4      	subs	r4, r4, r6
 8023a86:	60dc      	str	r4, [r3, #12]
 8023a88:	464c      	mov	r4, r9
 8023a8a:	4646      	mov	r6, r8
 8023a8c:	1aa4      	subs	r4, r4, r2
 8023a8e:	1ba4      	subs	r4, r4, r6
 8023a90:	4464      	add	r4, ip
 8023a92:	611c      	str	r4, [r3, #16]
 8023a94:	194c      	adds	r4, r1, r5
 8023a96:	1be4      	subs	r4, r4, r7
 8023a98:	1a24      	subs	r4, r4, r0
 8023a9a:	615c      	str	r4, [r3, #20]
 8023a9c:	4644      	mov	r4, r8
 8023a9e:	4666      	mov	r6, ip
 8023aa0:	444a      	add	r2, r9
 8023aa2:	1b12      	subs	r2, r2, r4
 8023aa4:	1b92      	subs	r2, r2, r6
 8023aa6:	619a      	str	r2, [r3, #24]
 8023aa8:	1b4a      	subs	r2, r1, r5
 8023aaa:	1bd1      	subs	r1, r2, r7
 8023aac:	2201      	movs	r2, #1
 8023aae:	4252      	negs	r2, r2
 8023ab0:	4694      	mov	ip, r2
 8023ab2:	44e2      	add	sl, ip
 8023ab4:	4652      	mov	r2, sl
 8023ab6:	1809      	adds	r1, r1, r0
 8023ab8:	61d9      	str	r1, [r3, #28]
 8023aba:	3320      	adds	r3, #32
 8023abc:	2a00      	cmp	r2, #0
 8023abe:	d1c6      	bne.n	8023a4e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8023ac0:	b027      	add	sp, #156	@ 0x9c
 8023ac2:	bc3c      	pop	{r2, r3, r4, r5}
 8023ac4:	4690      	mov	r8, r2
 8023ac6:	4699      	mov	r9, r3
 8023ac8:	46a2      	mov	sl, r4
 8023aca:	46ab      	mov	fp, r5
 8023acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ace:	469a      	mov	sl, r3
 8023ad0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023ad2:	e7bc      	b.n	8023a4e <arm_radix4_butterfly_inverse_q31+0x4ba>

08023ad4 <arm_cmplx_mag_squared_q31>:
 8023ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ad6:	464f      	mov	r7, r9
 8023ad8:	4646      	mov	r6, r8
 8023ada:	0004      	movs	r4, r0
 8023adc:	b4c0      	push	{r6, r7}
 8023ade:	0016      	movs	r6, r2
 8023ae0:	000f      	movs	r7, r1
 8023ae2:	2a00      	cmp	r2, #0
 8023ae4:	d018      	beq.n	8023b18 <arm_cmplx_mag_squared_q31+0x44>
 8023ae6:	6823      	ldr	r3, [r4, #0]
 8023ae8:	6822      	ldr	r2, [r4, #0]
 8023aea:	17d9      	asrs	r1, r3, #31
 8023aec:	6863      	ldr	r3, [r4, #4]
 8023aee:	0010      	movs	r0, r2
 8023af0:	4698      	mov	r8, r3
 8023af2:	17db      	asrs	r3, r3, #31
 8023af4:	4699      	mov	r9, r3
 8023af6:	000b      	movs	r3, r1
 8023af8:	f7dc fd62 	bl	80005c0 <__aeabi_lmul>
 8023afc:	4642      	mov	r2, r8
 8023afe:	104d      	asrs	r5, r1, #1
 8023b00:	464b      	mov	r3, r9
 8023b02:	4640      	mov	r0, r8
 8023b04:	4649      	mov	r1, r9
 8023b06:	f7dc fd5b 	bl	80005c0 <__aeabi_lmul>
 8023b0a:	1049      	asrs	r1, r1, #1
 8023b0c:	1869      	adds	r1, r5, r1
 8023b0e:	3e01      	subs	r6, #1
 8023b10:	c702      	stmia	r7!, {r1}
 8023b12:	3408      	adds	r4, #8
 8023b14:	2e00      	cmp	r6, #0
 8023b16:	d1e6      	bne.n	8023ae6 <arm_cmplx_mag_squared_q31+0x12>
 8023b18:	bc0c      	pop	{r2, r3}
 8023b1a:	4690      	mov	r8, r2
 8023b1c:	4699      	mov	r9, r3
 8023b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023b20 <arm_mult_q31>:
 8023b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b22:	4646      	mov	r6, r8
 8023b24:	464f      	mov	r7, r9
 8023b26:	4690      	mov	r8, r2
 8023b28:	b4c0      	push	{r6, r7}
 8023b2a:	001d      	movs	r5, r3
 8023b2c:	0006      	movs	r6, r0
 8023b2e:	000f      	movs	r7, r1
 8023b30:	2400      	movs	r4, #0
 8023b32:	2b00      	cmp	r3, #0
 8023b34:	d020      	beq.n	8023b78 <arm_mult_q31+0x58>
 8023b36:	4b12      	ldr	r3, [pc, #72]	@ (8023b80 <arm_mult_q31+0x60>)
 8023b38:	4699      	mov	r9, r3
 8023b3a:	e007      	b.n	8023b4c <arm_mult_q31+0x2c>
 8023b3c:	464b      	mov	r3, r9
 8023b3e:	4059      	eors	r1, r3
 8023b40:	4643      	mov	r3, r8
 8023b42:	3d01      	subs	r5, #1
 8023b44:	5119      	str	r1, [r3, r4]
 8023b46:	3404      	adds	r4, #4
 8023b48:	2d00      	cmp	r5, #0
 8023b4a:	d015      	beq.n	8023b78 <arm_mult_q31+0x58>
 8023b4c:	5933      	ldr	r3, [r6, r4]
 8023b4e:	593a      	ldr	r2, [r7, r4]
 8023b50:	17d9      	asrs	r1, r3, #31
 8023b52:	593b      	ldr	r3, [r7, r4]
 8023b54:	5930      	ldr	r0, [r6, r4]
 8023b56:	17db      	asrs	r3, r3, #31
 8023b58:	f7dc fd32 	bl	80005c0 <__aeabi_lmul>
 8023b5c:	004b      	lsls	r3, r1, #1
 8023b5e:	0fc0      	lsrs	r0, r0, #31
 8023b60:	4318      	orrs	r0, r3
 8023b62:	17c9      	asrs	r1, r1, #31
 8023b64:	17c3      	asrs	r3, r0, #31
 8023b66:	428b      	cmp	r3, r1
 8023b68:	d1e8      	bne.n	8023b3c <arm_mult_q31+0x1c>
 8023b6a:	0001      	movs	r1, r0
 8023b6c:	4643      	mov	r3, r8
 8023b6e:	3d01      	subs	r5, #1
 8023b70:	5119      	str	r1, [r3, r4]
 8023b72:	3404      	adds	r4, #4
 8023b74:	2d00      	cmp	r5, #0
 8023b76:	d1e9      	bne.n	8023b4c <arm_mult_q31+0x2c>
 8023b78:	bc0c      	pop	{r2, r3}
 8023b7a:	4690      	mov	r8, r2
 8023b7c:	4699      	mov	r9, r3
 8023b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023b80:	7fffffff 	.word	0x7fffffff

08023b84 <arm_add_q31>:
 8023b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b86:	465f      	mov	r7, fp
 8023b88:	4656      	mov	r6, sl
 8023b8a:	464d      	mov	r5, r9
 8023b8c:	4644      	mov	r4, r8
 8023b8e:	b4f0      	push	{r4, r5, r6, r7}
 8023b90:	4693      	mov	fp, r2
 8023b92:	b083      	sub	sp, #12
 8023b94:	4681      	mov	r9, r0
 8023b96:	468a      	mov	sl, r1
 8023b98:	4698      	mov	r8, r3
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	d020      	beq.n	8023be2 <arm_add_q31+0x5e>
 8023ba0:	4649      	mov	r1, r9
 8023ba2:	4653      	mov	r3, sl
 8023ba4:	588e      	ldr	r6, [r1, r2]
 8023ba6:	589b      	ldr	r3, [r3, r2]
 8023ba8:	17f7      	asrs	r7, r6, #31
 8023baa:	001c      	movs	r4, r3
 8023bac:	0030      	movs	r0, r6
 8023bae:	0039      	movs	r1, r7
 8023bb0:	17dd      	asrs	r5, r3, #31
 8023bb2:	46b4      	mov	ip, r6
 8023bb4:	1900      	adds	r0, r0, r4
 8023bb6:	4169      	adcs	r1, r5
 8023bb8:	4463      	add	r3, ip
 8023bba:	9000      	str	r0, [sp, #0]
 8023bbc:	9101      	str	r1, [sp, #4]
 8023bbe:	17d9      	asrs	r1, r3, #31
 8023bc0:	468c      	mov	ip, r1
 8023bc2:	9901      	ldr	r1, [sp, #4]
 8023bc4:	458c      	cmp	ip, r1
 8023bc6:	d002      	beq.n	8023bce <arm_add_q31+0x4a>
 8023bc8:	17cb      	asrs	r3, r1, #31
 8023bca:	4909      	ldr	r1, [pc, #36]	@ (8023bf0 <arm_add_q31+0x6c>)
 8023bcc:	404b      	eors	r3, r1
 8023bce:	4659      	mov	r1, fp
 8023bd0:	508b      	str	r3, [r1, r2]
 8023bd2:	2301      	movs	r3, #1
 8023bd4:	425b      	negs	r3, r3
 8023bd6:	469c      	mov	ip, r3
 8023bd8:	44e0      	add	r8, ip
 8023bda:	4643      	mov	r3, r8
 8023bdc:	3204      	adds	r2, #4
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	d1de      	bne.n	8023ba0 <arm_add_q31+0x1c>
 8023be2:	b003      	add	sp, #12
 8023be4:	bc3c      	pop	{r2, r3, r4, r5}
 8023be6:	4690      	mov	r8, r2
 8023be8:	4699      	mov	r9, r3
 8023bea:	46a2      	mov	sl, r4
 8023bec:	46ab      	mov	fp, r5
 8023bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bf0:	7fffffff 	.word	0x7fffffff

08023bf4 <atof>:
 8023bf4:	b510      	push	{r4, lr}
 8023bf6:	2100      	movs	r1, #0
 8023bf8:	f000 fe1e 	bl	8024838 <strtod>
 8023bfc:	bd10      	pop	{r4, pc}

08023bfe <atoi>:
 8023bfe:	b510      	push	{r4, lr}
 8023c00:	220a      	movs	r2, #10
 8023c02:	2100      	movs	r1, #0
 8023c04:	f000 feb0 	bl	8024968 <strtol>
 8023c08:	bd10      	pop	{r4, pc}
	...

08023c0c <sulp>:
 8023c0c:	b570      	push	{r4, r5, r6, lr}
 8023c0e:	0016      	movs	r6, r2
 8023c10:	000d      	movs	r5, r1
 8023c12:	f003 fd0f 	bl	8027634 <__ulp>
 8023c16:	2e00      	cmp	r6, #0
 8023c18:	d00d      	beq.n	8023c36 <sulp+0x2a>
 8023c1a:	236b      	movs	r3, #107	@ 0x6b
 8023c1c:	006a      	lsls	r2, r5, #1
 8023c1e:	0d52      	lsrs	r2, r2, #21
 8023c20:	1a9b      	subs	r3, r3, r2
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	dd07      	ble.n	8023c36 <sulp+0x2a>
 8023c26:	2400      	movs	r4, #0
 8023c28:	4a03      	ldr	r2, [pc, #12]	@ (8023c38 <sulp+0x2c>)
 8023c2a:	051b      	lsls	r3, r3, #20
 8023c2c:	189d      	adds	r5, r3, r2
 8023c2e:	002b      	movs	r3, r5
 8023c30:	0022      	movs	r2, r4
 8023c32:	f7de fe8f 	bl	8002954 <__aeabi_dmul>
 8023c36:	bd70      	pop	{r4, r5, r6, pc}
 8023c38:	3ff00000 	.word	0x3ff00000

08023c3c <_strtod_l>:
 8023c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c3e:	b0a3      	sub	sp, #140	@ 0x8c
 8023c40:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023c42:	2200      	movs	r2, #0
 8023c44:	2600      	movs	r6, #0
 8023c46:	2700      	movs	r7, #0
 8023c48:	9005      	str	r0, [sp, #20]
 8023c4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8023c4c:	921e      	str	r2, [sp, #120]	@ 0x78
 8023c4e:	911d      	str	r1, [sp, #116]	@ 0x74
 8023c50:	780a      	ldrb	r2, [r1, #0]
 8023c52:	2a2b      	cmp	r2, #43	@ 0x2b
 8023c54:	d053      	beq.n	8023cfe <_strtod_l+0xc2>
 8023c56:	d83f      	bhi.n	8023cd8 <_strtod_l+0x9c>
 8023c58:	2a0d      	cmp	r2, #13
 8023c5a:	d839      	bhi.n	8023cd0 <_strtod_l+0x94>
 8023c5c:	2a08      	cmp	r2, #8
 8023c5e:	d839      	bhi.n	8023cd4 <_strtod_l+0x98>
 8023c60:	2a00      	cmp	r2, #0
 8023c62:	d042      	beq.n	8023cea <_strtod_l+0xae>
 8023c64:	2200      	movs	r2, #0
 8023c66:	9212      	str	r2, [sp, #72]	@ 0x48
 8023c68:	2100      	movs	r1, #0
 8023c6a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023c6c:	910c      	str	r1, [sp, #48]	@ 0x30
 8023c6e:	782a      	ldrb	r2, [r5, #0]
 8023c70:	2a30      	cmp	r2, #48	@ 0x30
 8023c72:	d000      	beq.n	8023c76 <_strtod_l+0x3a>
 8023c74:	e083      	b.n	8023d7e <_strtod_l+0x142>
 8023c76:	786a      	ldrb	r2, [r5, #1]
 8023c78:	3120      	adds	r1, #32
 8023c7a:	438a      	bics	r2, r1
 8023c7c:	2a58      	cmp	r2, #88	@ 0x58
 8023c7e:	d000      	beq.n	8023c82 <_strtod_l+0x46>
 8023c80:	e073      	b.n	8023d6a <_strtod_l+0x12e>
 8023c82:	9302      	str	r3, [sp, #8]
 8023c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023c86:	4a9b      	ldr	r2, [pc, #620]	@ (8023ef4 <_strtod_l+0x2b8>)
 8023c88:	9301      	str	r3, [sp, #4]
 8023c8a:	ab1e      	add	r3, sp, #120	@ 0x78
 8023c8c:	9300      	str	r3, [sp, #0]
 8023c8e:	9805      	ldr	r0, [sp, #20]
 8023c90:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023c92:	a91d      	add	r1, sp, #116	@ 0x74
 8023c94:	f002 fd86 	bl	80267a4 <__gethex>
 8023c98:	230f      	movs	r3, #15
 8023c9a:	0002      	movs	r2, r0
 8023c9c:	401a      	ands	r2, r3
 8023c9e:	0004      	movs	r4, r0
 8023ca0:	9206      	str	r2, [sp, #24]
 8023ca2:	4218      	tst	r0, r3
 8023ca4:	d005      	beq.n	8023cb2 <_strtod_l+0x76>
 8023ca6:	2a06      	cmp	r2, #6
 8023ca8:	d12b      	bne.n	8023d02 <_strtod_l+0xc6>
 8023caa:	2300      	movs	r3, #0
 8023cac:	3501      	adds	r5, #1
 8023cae:	951d      	str	r5, [sp, #116]	@ 0x74
 8023cb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8023cb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	d002      	beq.n	8023cbe <_strtod_l+0x82>
 8023cb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023cba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023cbc:	6013      	str	r3, [r2, #0]
 8023cbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	d019      	beq.n	8023cf8 <_strtod_l+0xbc>
 8023cc4:	2380      	movs	r3, #128	@ 0x80
 8023cc6:	0030      	movs	r0, r6
 8023cc8:	061b      	lsls	r3, r3, #24
 8023cca:	18f9      	adds	r1, r7, r3
 8023ccc:	b023      	add	sp, #140	@ 0x8c
 8023cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023cd0:	2a20      	cmp	r2, #32
 8023cd2:	d1c7      	bne.n	8023c64 <_strtod_l+0x28>
 8023cd4:	3101      	adds	r1, #1
 8023cd6:	e7ba      	b.n	8023c4e <_strtod_l+0x12>
 8023cd8:	2a2d      	cmp	r2, #45	@ 0x2d
 8023cda:	d1c3      	bne.n	8023c64 <_strtod_l+0x28>
 8023cdc:	3a2c      	subs	r2, #44	@ 0x2c
 8023cde:	9212      	str	r2, [sp, #72]	@ 0x48
 8023ce0:	1c4a      	adds	r2, r1, #1
 8023ce2:	921d      	str	r2, [sp, #116]	@ 0x74
 8023ce4:	784a      	ldrb	r2, [r1, #1]
 8023ce6:	2a00      	cmp	r2, #0
 8023ce8:	d1be      	bne.n	8023c68 <_strtod_l+0x2c>
 8023cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cec:	931d      	str	r3, [sp, #116]	@ 0x74
 8023cee:	2300      	movs	r3, #0
 8023cf0:	9312      	str	r3, [sp, #72]	@ 0x48
 8023cf2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	d1df      	bne.n	8023cb8 <_strtod_l+0x7c>
 8023cf8:	0030      	movs	r0, r6
 8023cfa:	0039      	movs	r1, r7
 8023cfc:	e7e6      	b.n	8023ccc <_strtod_l+0x90>
 8023cfe:	2200      	movs	r2, #0
 8023d00:	e7ed      	b.n	8023cde <_strtod_l+0xa2>
 8023d02:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023d04:	2a00      	cmp	r2, #0
 8023d06:	d007      	beq.n	8023d18 <_strtod_l+0xdc>
 8023d08:	2135      	movs	r1, #53	@ 0x35
 8023d0a:	a820      	add	r0, sp, #128	@ 0x80
 8023d0c:	f003 fd88 	bl	8027820 <__copybits>
 8023d10:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023d12:	9805      	ldr	r0, [sp, #20]
 8023d14:	f003 f94a 	bl	8026fac <_Bfree>
 8023d18:	9806      	ldr	r0, [sp, #24]
 8023d1a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023d1c:	3801      	subs	r0, #1
 8023d1e:	2804      	cmp	r0, #4
 8023d20:	d806      	bhi.n	8023d30 <_strtod_l+0xf4>
 8023d22:	f7dc fa2b 	bl	800017c <__gnu_thumb1_case_uqi>
 8023d26:	0312      	.short	0x0312
 8023d28:	1e1c      	.short	0x1e1c
 8023d2a:	12          	.byte	0x12
 8023d2b:	00          	.byte	0x00
 8023d2c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023d2e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023d30:	05e4      	lsls	r4, r4, #23
 8023d32:	d502      	bpl.n	8023d3a <_strtod_l+0xfe>
 8023d34:	2380      	movs	r3, #128	@ 0x80
 8023d36:	061b      	lsls	r3, r3, #24
 8023d38:	431f      	orrs	r7, r3
 8023d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8023ef8 <_strtod_l+0x2bc>)
 8023d3c:	423b      	tst	r3, r7
 8023d3e:	d1b8      	bne.n	8023cb2 <_strtod_l+0x76>
 8023d40:	f001 fdc0 	bl	80258c4 <__errno>
 8023d44:	2322      	movs	r3, #34	@ 0x22
 8023d46:	6003      	str	r3, [r0, #0]
 8023d48:	e7b3      	b.n	8023cb2 <_strtod_l+0x76>
 8023d4a:	496c      	ldr	r1, [pc, #432]	@ (8023efc <_strtod_l+0x2c0>)
 8023d4c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023d4e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023d50:	400a      	ands	r2, r1
 8023d52:	496b      	ldr	r1, [pc, #428]	@ (8023f00 <_strtod_l+0x2c4>)
 8023d54:	185b      	adds	r3, r3, r1
 8023d56:	051b      	lsls	r3, r3, #20
 8023d58:	431a      	orrs	r2, r3
 8023d5a:	0017      	movs	r7, r2
 8023d5c:	e7e8      	b.n	8023d30 <_strtod_l+0xf4>
 8023d5e:	4f66      	ldr	r7, [pc, #408]	@ (8023ef8 <_strtod_l+0x2bc>)
 8023d60:	e7e6      	b.n	8023d30 <_strtod_l+0xf4>
 8023d62:	2601      	movs	r6, #1
 8023d64:	4f67      	ldr	r7, [pc, #412]	@ (8023f04 <_strtod_l+0x2c8>)
 8023d66:	4276      	negs	r6, r6
 8023d68:	e7e2      	b.n	8023d30 <_strtod_l+0xf4>
 8023d6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d6c:	1c5a      	adds	r2, r3, #1
 8023d6e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023d70:	785b      	ldrb	r3, [r3, #1]
 8023d72:	2b30      	cmp	r3, #48	@ 0x30
 8023d74:	d0f9      	beq.n	8023d6a <_strtod_l+0x12e>
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d09b      	beq.n	8023cb2 <_strtod_l+0x76>
 8023d7a:	2301      	movs	r3, #1
 8023d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8023d7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d80:	220a      	movs	r2, #10
 8023d82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023d84:	2300      	movs	r3, #0
 8023d86:	9310      	str	r3, [sp, #64]	@ 0x40
 8023d88:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d8a:	9308      	str	r3, [sp, #32]
 8023d8c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023d8e:	7804      	ldrb	r4, [r0, #0]
 8023d90:	0023      	movs	r3, r4
 8023d92:	3b30      	subs	r3, #48	@ 0x30
 8023d94:	b2d9      	uxtb	r1, r3
 8023d96:	2909      	cmp	r1, #9
 8023d98:	d927      	bls.n	8023dea <_strtod_l+0x1ae>
 8023d9a:	2201      	movs	r2, #1
 8023d9c:	495a      	ldr	r1, [pc, #360]	@ (8023f08 <_strtod_l+0x2cc>)
 8023d9e:	f001 fd03 	bl	80257a8 <strncmp>
 8023da2:	2800      	cmp	r0, #0
 8023da4:	d033      	beq.n	8023e0e <_strtod_l+0x1d2>
 8023da6:	2000      	movs	r0, #0
 8023da8:	0023      	movs	r3, r4
 8023daa:	4684      	mov	ip, r0
 8023dac:	9a08      	ldr	r2, [sp, #32]
 8023dae:	900e      	str	r0, [sp, #56]	@ 0x38
 8023db0:	9206      	str	r2, [sp, #24]
 8023db2:	2220      	movs	r2, #32
 8023db4:	0019      	movs	r1, r3
 8023db6:	4391      	bics	r1, r2
 8023db8:	000a      	movs	r2, r1
 8023dba:	2100      	movs	r1, #0
 8023dbc:	9107      	str	r1, [sp, #28]
 8023dbe:	2a45      	cmp	r2, #69	@ 0x45
 8023dc0:	d000      	beq.n	8023dc4 <_strtod_l+0x188>
 8023dc2:	e0cb      	b.n	8023f5c <_strtod_l+0x320>
 8023dc4:	9b06      	ldr	r3, [sp, #24]
 8023dc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023dc8:	4303      	orrs	r3, r0
 8023dca:	4313      	orrs	r3, r2
 8023dcc:	428b      	cmp	r3, r1
 8023dce:	d08c      	beq.n	8023cea <_strtod_l+0xae>
 8023dd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8023dd4:	3301      	adds	r3, #1
 8023dd6:	931d      	str	r3, [sp, #116]	@ 0x74
 8023dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dda:	785b      	ldrb	r3, [r3, #1]
 8023ddc:	2b2b      	cmp	r3, #43	@ 0x2b
 8023dde:	d07b      	beq.n	8023ed8 <_strtod_l+0x29c>
 8023de0:	000c      	movs	r4, r1
 8023de2:	2b2d      	cmp	r3, #45	@ 0x2d
 8023de4:	d17e      	bne.n	8023ee4 <_strtod_l+0x2a8>
 8023de6:	2401      	movs	r4, #1
 8023de8:	e077      	b.n	8023eda <_strtod_l+0x29e>
 8023dea:	9908      	ldr	r1, [sp, #32]
 8023dec:	2908      	cmp	r1, #8
 8023dee:	dc09      	bgt.n	8023e04 <_strtod_l+0x1c8>
 8023df0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023df2:	4351      	muls	r1, r2
 8023df4:	185b      	adds	r3, r3, r1
 8023df6:	930d      	str	r3, [sp, #52]	@ 0x34
 8023df8:	9b08      	ldr	r3, [sp, #32]
 8023dfa:	3001      	adds	r0, #1
 8023dfc:	3301      	adds	r3, #1
 8023dfe:	9308      	str	r3, [sp, #32]
 8023e00:	901d      	str	r0, [sp, #116]	@ 0x74
 8023e02:	e7c3      	b.n	8023d8c <_strtod_l+0x150>
 8023e04:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023e06:	4355      	muls	r5, r2
 8023e08:	195b      	adds	r3, r3, r5
 8023e0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8023e0c:	e7f4      	b.n	8023df8 <_strtod_l+0x1bc>
 8023e0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e10:	1c5a      	adds	r2, r3, #1
 8023e12:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e14:	9a08      	ldr	r2, [sp, #32]
 8023e16:	785b      	ldrb	r3, [r3, #1]
 8023e18:	2a00      	cmp	r2, #0
 8023e1a:	d03e      	beq.n	8023e9a <_strtod_l+0x25e>
 8023e1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8023e1e:	9206      	str	r2, [sp, #24]
 8023e20:	001a      	movs	r2, r3
 8023e22:	3a30      	subs	r2, #48	@ 0x30
 8023e24:	2a09      	cmp	r2, #9
 8023e26:	d912      	bls.n	8023e4e <_strtod_l+0x212>
 8023e28:	2201      	movs	r2, #1
 8023e2a:	4694      	mov	ip, r2
 8023e2c:	e7c1      	b.n	8023db2 <_strtod_l+0x176>
 8023e2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e30:	3001      	adds	r0, #1
 8023e32:	1c5a      	adds	r2, r3, #1
 8023e34:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e36:	785b      	ldrb	r3, [r3, #1]
 8023e38:	2b30      	cmp	r3, #48	@ 0x30
 8023e3a:	d0f8      	beq.n	8023e2e <_strtod_l+0x1f2>
 8023e3c:	001a      	movs	r2, r3
 8023e3e:	3a31      	subs	r2, #49	@ 0x31
 8023e40:	2a08      	cmp	r2, #8
 8023e42:	d844      	bhi.n	8023ece <_strtod_l+0x292>
 8023e44:	900e      	str	r0, [sp, #56]	@ 0x38
 8023e46:	2000      	movs	r0, #0
 8023e48:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023e4a:	9006      	str	r0, [sp, #24]
 8023e4c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023e4e:	001c      	movs	r4, r3
 8023e50:	1c42      	adds	r2, r0, #1
 8023e52:	3c30      	subs	r4, #48	@ 0x30
 8023e54:	2b30      	cmp	r3, #48	@ 0x30
 8023e56:	d01a      	beq.n	8023e8e <_strtod_l+0x252>
 8023e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e5a:	9906      	ldr	r1, [sp, #24]
 8023e5c:	189b      	adds	r3, r3, r2
 8023e5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023e60:	230a      	movs	r3, #10
 8023e62:	469c      	mov	ip, r3
 8023e64:	9d06      	ldr	r5, [sp, #24]
 8023e66:	1c4b      	adds	r3, r1, #1
 8023e68:	1b5d      	subs	r5, r3, r5
 8023e6a:	42aa      	cmp	r2, r5
 8023e6c:	dc17      	bgt.n	8023e9e <_strtod_l+0x262>
 8023e6e:	43c3      	mvns	r3, r0
 8023e70:	9a06      	ldr	r2, [sp, #24]
 8023e72:	17db      	asrs	r3, r3, #31
 8023e74:	4003      	ands	r3, r0
 8023e76:	18d1      	adds	r1, r2, r3
 8023e78:	3201      	adds	r2, #1
 8023e7a:	18d3      	adds	r3, r2, r3
 8023e7c:	9306      	str	r3, [sp, #24]
 8023e7e:	2908      	cmp	r1, #8
 8023e80:	dc1c      	bgt.n	8023ebc <_strtod_l+0x280>
 8023e82:	230a      	movs	r3, #10
 8023e84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023e86:	4353      	muls	r3, r2
 8023e88:	2200      	movs	r2, #0
 8023e8a:	18e3      	adds	r3, r4, r3
 8023e8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8023e8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e90:	0010      	movs	r0, r2
 8023e92:	1c59      	adds	r1, r3, #1
 8023e94:	911d      	str	r1, [sp, #116]	@ 0x74
 8023e96:	785b      	ldrb	r3, [r3, #1]
 8023e98:	e7c2      	b.n	8023e20 <_strtod_l+0x1e4>
 8023e9a:	9808      	ldr	r0, [sp, #32]
 8023e9c:	e7cc      	b.n	8023e38 <_strtod_l+0x1fc>
 8023e9e:	2908      	cmp	r1, #8
 8023ea0:	dc05      	bgt.n	8023eae <_strtod_l+0x272>
 8023ea2:	4665      	mov	r5, ip
 8023ea4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023ea6:	4369      	muls	r1, r5
 8023ea8:	910d      	str	r1, [sp, #52]	@ 0x34
 8023eaa:	0019      	movs	r1, r3
 8023eac:	e7da      	b.n	8023e64 <_strtod_l+0x228>
 8023eae:	2b10      	cmp	r3, #16
 8023eb0:	dcfb      	bgt.n	8023eaa <_strtod_l+0x26e>
 8023eb2:	4661      	mov	r1, ip
 8023eb4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023eb6:	434d      	muls	r5, r1
 8023eb8:	9510      	str	r5, [sp, #64]	@ 0x40
 8023eba:	e7f6      	b.n	8023eaa <_strtod_l+0x26e>
 8023ebc:	2200      	movs	r2, #0
 8023ebe:	290f      	cmp	r1, #15
 8023ec0:	dce5      	bgt.n	8023e8e <_strtod_l+0x252>
 8023ec2:	230a      	movs	r3, #10
 8023ec4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023ec6:	435d      	muls	r5, r3
 8023ec8:	1963      	adds	r3, r4, r5
 8023eca:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ecc:	e7df      	b.n	8023e8e <_strtod_l+0x252>
 8023ece:	2200      	movs	r2, #0
 8023ed0:	920e      	str	r2, [sp, #56]	@ 0x38
 8023ed2:	9206      	str	r2, [sp, #24]
 8023ed4:	3201      	adds	r2, #1
 8023ed6:	e7a8      	b.n	8023e2a <_strtod_l+0x1ee>
 8023ed8:	2400      	movs	r4, #0
 8023eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023edc:	3302      	adds	r3, #2
 8023ede:	931d      	str	r3, [sp, #116]	@ 0x74
 8023ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ee2:	789b      	ldrb	r3, [r3, #2]
 8023ee4:	001a      	movs	r2, r3
 8023ee6:	3a30      	subs	r2, #48	@ 0x30
 8023ee8:	2a09      	cmp	r2, #9
 8023eea:	d913      	bls.n	8023f14 <_strtod_l+0x2d8>
 8023eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023eee:	921d      	str	r2, [sp, #116]	@ 0x74
 8023ef0:	2200      	movs	r2, #0
 8023ef2:	e032      	b.n	8023f5a <_strtod_l+0x31e>
 8023ef4:	0802e378 	.word	0x0802e378
 8023ef8:	7ff00000 	.word	0x7ff00000
 8023efc:	ffefffff 	.word	0xffefffff
 8023f00:	00000433 	.word	0x00000433
 8023f04:	7fffffff 	.word	0x7fffffff
 8023f08:	0802e190 	.word	0x0802e190
 8023f0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f0e:	1c5a      	adds	r2, r3, #1
 8023f10:	921d      	str	r2, [sp, #116]	@ 0x74
 8023f12:	785b      	ldrb	r3, [r3, #1]
 8023f14:	2b30      	cmp	r3, #48	@ 0x30
 8023f16:	d0f9      	beq.n	8023f0c <_strtod_l+0x2d0>
 8023f18:	2200      	movs	r2, #0
 8023f1a:	9207      	str	r2, [sp, #28]
 8023f1c:	001a      	movs	r2, r3
 8023f1e:	3a31      	subs	r2, #49	@ 0x31
 8023f20:	2a08      	cmp	r2, #8
 8023f22:	d81b      	bhi.n	8023f5c <_strtod_l+0x320>
 8023f24:	3b30      	subs	r3, #48	@ 0x30
 8023f26:	001a      	movs	r2, r3
 8023f28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f2a:	9307      	str	r3, [sp, #28]
 8023f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f2e:	1c59      	adds	r1, r3, #1
 8023f30:	911d      	str	r1, [sp, #116]	@ 0x74
 8023f32:	785b      	ldrb	r3, [r3, #1]
 8023f34:	001d      	movs	r5, r3
 8023f36:	3d30      	subs	r5, #48	@ 0x30
 8023f38:	2d09      	cmp	r5, #9
 8023f3a:	d93a      	bls.n	8023fb2 <_strtod_l+0x376>
 8023f3c:	9d07      	ldr	r5, [sp, #28]
 8023f3e:	1b49      	subs	r1, r1, r5
 8023f40:	000d      	movs	r5, r1
 8023f42:	49b3      	ldr	r1, [pc, #716]	@ (8024210 <_strtod_l+0x5d4>)
 8023f44:	9107      	str	r1, [sp, #28]
 8023f46:	2d08      	cmp	r5, #8
 8023f48:	dc03      	bgt.n	8023f52 <_strtod_l+0x316>
 8023f4a:	9207      	str	r2, [sp, #28]
 8023f4c:	428a      	cmp	r2, r1
 8023f4e:	dd00      	ble.n	8023f52 <_strtod_l+0x316>
 8023f50:	9107      	str	r1, [sp, #28]
 8023f52:	2c00      	cmp	r4, #0
 8023f54:	d002      	beq.n	8023f5c <_strtod_l+0x320>
 8023f56:	9a07      	ldr	r2, [sp, #28]
 8023f58:	4252      	negs	r2, r2
 8023f5a:	9207      	str	r2, [sp, #28]
 8023f5c:	9a06      	ldr	r2, [sp, #24]
 8023f5e:	2a00      	cmp	r2, #0
 8023f60:	d14b      	bne.n	8023ffa <_strtod_l+0x3be>
 8023f62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023f64:	4310      	orrs	r0, r2
 8023f66:	d000      	beq.n	8023f6a <_strtod_l+0x32e>
 8023f68:	e6a3      	b.n	8023cb2 <_strtod_l+0x76>
 8023f6a:	4662      	mov	r2, ip
 8023f6c:	2a00      	cmp	r2, #0
 8023f6e:	d000      	beq.n	8023f72 <_strtod_l+0x336>
 8023f70:	e6bb      	b.n	8023cea <_strtod_l+0xae>
 8023f72:	2b69      	cmp	r3, #105	@ 0x69
 8023f74:	d025      	beq.n	8023fc2 <_strtod_l+0x386>
 8023f76:	dc21      	bgt.n	8023fbc <_strtod_l+0x380>
 8023f78:	2b49      	cmp	r3, #73	@ 0x49
 8023f7a:	d022      	beq.n	8023fc2 <_strtod_l+0x386>
 8023f7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8023f7e:	d000      	beq.n	8023f82 <_strtod_l+0x346>
 8023f80:	e6b3      	b.n	8023cea <_strtod_l+0xae>
 8023f82:	49a4      	ldr	r1, [pc, #656]	@ (8024214 <_strtod_l+0x5d8>)
 8023f84:	a81d      	add	r0, sp, #116	@ 0x74
 8023f86:	f002 fe43 	bl	8026c10 <__match>
 8023f8a:	2800      	cmp	r0, #0
 8023f8c:	d100      	bne.n	8023f90 <_strtod_l+0x354>
 8023f8e:	e6ac      	b.n	8023cea <_strtod_l+0xae>
 8023f90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f92:	781b      	ldrb	r3, [r3, #0]
 8023f94:	2b28      	cmp	r3, #40	@ 0x28
 8023f96:	d12a      	bne.n	8023fee <_strtod_l+0x3b2>
 8023f98:	499f      	ldr	r1, [pc, #636]	@ (8024218 <_strtod_l+0x5dc>)
 8023f9a:	aa20      	add	r2, sp, #128	@ 0x80
 8023f9c:	a81d      	add	r0, sp, #116	@ 0x74
 8023f9e:	f002 fe4b 	bl	8026c38 <__hexnan>
 8023fa2:	2805      	cmp	r0, #5
 8023fa4:	d123      	bne.n	8023fee <_strtod_l+0x3b2>
 8023fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023fa8:	4a9c      	ldr	r2, [pc, #624]	@ (802421c <_strtod_l+0x5e0>)
 8023faa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023fac:	431a      	orrs	r2, r3
 8023fae:	0017      	movs	r7, r2
 8023fb0:	e67f      	b.n	8023cb2 <_strtod_l+0x76>
 8023fb2:	210a      	movs	r1, #10
 8023fb4:	434a      	muls	r2, r1
 8023fb6:	18d2      	adds	r2, r2, r3
 8023fb8:	3a30      	subs	r2, #48	@ 0x30
 8023fba:	e7b7      	b.n	8023f2c <_strtod_l+0x2f0>
 8023fbc:	2b6e      	cmp	r3, #110	@ 0x6e
 8023fbe:	d0e0      	beq.n	8023f82 <_strtod_l+0x346>
 8023fc0:	e693      	b.n	8023cea <_strtod_l+0xae>
 8023fc2:	4997      	ldr	r1, [pc, #604]	@ (8024220 <_strtod_l+0x5e4>)
 8023fc4:	a81d      	add	r0, sp, #116	@ 0x74
 8023fc6:	f002 fe23 	bl	8026c10 <__match>
 8023fca:	2800      	cmp	r0, #0
 8023fcc:	d100      	bne.n	8023fd0 <_strtod_l+0x394>
 8023fce:	e68c      	b.n	8023cea <_strtod_l+0xae>
 8023fd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023fd2:	4994      	ldr	r1, [pc, #592]	@ (8024224 <_strtod_l+0x5e8>)
 8023fd4:	3b01      	subs	r3, #1
 8023fd6:	a81d      	add	r0, sp, #116	@ 0x74
 8023fd8:	931d      	str	r3, [sp, #116]	@ 0x74
 8023fda:	f002 fe19 	bl	8026c10 <__match>
 8023fde:	2800      	cmp	r0, #0
 8023fe0:	d102      	bne.n	8023fe8 <_strtod_l+0x3ac>
 8023fe2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023fe4:	3301      	adds	r3, #1
 8023fe6:	931d      	str	r3, [sp, #116]	@ 0x74
 8023fe8:	2600      	movs	r6, #0
 8023fea:	4f8c      	ldr	r7, [pc, #560]	@ (802421c <_strtod_l+0x5e0>)
 8023fec:	e661      	b.n	8023cb2 <_strtod_l+0x76>
 8023fee:	488e      	ldr	r0, [pc, #568]	@ (8024228 <_strtod_l+0x5ec>)
 8023ff0:	f001 fcaa 	bl	8025948 <nan>
 8023ff4:	0006      	movs	r6, r0
 8023ff6:	000f      	movs	r7, r1
 8023ff8:	e65b      	b.n	8023cb2 <_strtod_l+0x76>
 8023ffa:	9b07      	ldr	r3, [sp, #28]
 8023ffc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023ffe:	1a9b      	subs	r3, r3, r2
 8024000:	930c      	str	r3, [sp, #48]	@ 0x30
 8024002:	9b08      	ldr	r3, [sp, #32]
 8024004:	2b00      	cmp	r3, #0
 8024006:	d101      	bne.n	802400c <_strtod_l+0x3d0>
 8024008:	9b06      	ldr	r3, [sp, #24]
 802400a:	9308      	str	r3, [sp, #32]
 802400c:	9c06      	ldr	r4, [sp, #24]
 802400e:	2c10      	cmp	r4, #16
 8024010:	dd00      	ble.n	8024014 <_strtod_l+0x3d8>
 8024012:	2410      	movs	r4, #16
 8024014:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024016:	f7df fc19 	bl	800384c <__aeabi_ui2d>
 802401a:	9b06      	ldr	r3, [sp, #24]
 802401c:	0006      	movs	r6, r0
 802401e:	000f      	movs	r7, r1
 8024020:	2b09      	cmp	r3, #9
 8024022:	dc13      	bgt.n	802404c <_strtod_l+0x410>
 8024024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024026:	2b00      	cmp	r3, #0
 8024028:	d100      	bne.n	802402c <_strtod_l+0x3f0>
 802402a:	e642      	b.n	8023cb2 <_strtod_l+0x76>
 802402c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802402e:	2b00      	cmp	r3, #0
 8024030:	dc00      	bgt.n	8024034 <_strtod_l+0x3f8>
 8024032:	e07e      	b.n	8024132 <_strtod_l+0x4f6>
 8024034:	2b16      	cmp	r3, #22
 8024036:	dc63      	bgt.n	8024100 <_strtod_l+0x4c4>
 8024038:	497c      	ldr	r1, [pc, #496]	@ (802422c <_strtod_l+0x5f0>)
 802403a:	00db      	lsls	r3, r3, #3
 802403c:	18c9      	adds	r1, r1, r3
 802403e:	0032      	movs	r2, r6
 8024040:	6808      	ldr	r0, [r1, #0]
 8024042:	6849      	ldr	r1, [r1, #4]
 8024044:	003b      	movs	r3, r7
 8024046:	f7de fc85 	bl	8002954 <__aeabi_dmul>
 802404a:	e7d3      	b.n	8023ff4 <_strtod_l+0x3b8>
 802404c:	0022      	movs	r2, r4
 802404e:	4b77      	ldr	r3, [pc, #476]	@ (802422c <_strtod_l+0x5f0>)
 8024050:	3a09      	subs	r2, #9
 8024052:	00d2      	lsls	r2, r2, #3
 8024054:	189b      	adds	r3, r3, r2
 8024056:	681a      	ldr	r2, [r3, #0]
 8024058:	685b      	ldr	r3, [r3, #4]
 802405a:	f7de fc7b 	bl	8002954 <__aeabi_dmul>
 802405e:	0006      	movs	r6, r0
 8024060:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024062:	000f      	movs	r7, r1
 8024064:	f7df fbf2 	bl	800384c <__aeabi_ui2d>
 8024068:	000b      	movs	r3, r1
 802406a:	0002      	movs	r2, r0
 802406c:	0039      	movs	r1, r7
 802406e:	0030      	movs	r0, r6
 8024070:	f7dd fc70 	bl	8001954 <__aeabi_dadd>
 8024074:	9b06      	ldr	r3, [sp, #24]
 8024076:	0006      	movs	r6, r0
 8024078:	000f      	movs	r7, r1
 802407a:	2b0f      	cmp	r3, #15
 802407c:	ddd2      	ble.n	8024024 <_strtod_l+0x3e8>
 802407e:	9b06      	ldr	r3, [sp, #24]
 8024080:	1b1c      	subs	r4, r3, r4
 8024082:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024084:	18e4      	adds	r4, r4, r3
 8024086:	2c00      	cmp	r4, #0
 8024088:	dc00      	bgt.n	802408c <_strtod_l+0x450>
 802408a:	e09b      	b.n	80241c4 <_strtod_l+0x588>
 802408c:	220f      	movs	r2, #15
 802408e:	0023      	movs	r3, r4
 8024090:	4013      	ands	r3, r2
 8024092:	4214      	tst	r4, r2
 8024094:	d00a      	beq.n	80240ac <_strtod_l+0x470>
 8024096:	4965      	ldr	r1, [pc, #404]	@ (802422c <_strtod_l+0x5f0>)
 8024098:	00db      	lsls	r3, r3, #3
 802409a:	18c9      	adds	r1, r1, r3
 802409c:	0032      	movs	r2, r6
 802409e:	6808      	ldr	r0, [r1, #0]
 80240a0:	6849      	ldr	r1, [r1, #4]
 80240a2:	003b      	movs	r3, r7
 80240a4:	f7de fc56 	bl	8002954 <__aeabi_dmul>
 80240a8:	0006      	movs	r6, r0
 80240aa:	000f      	movs	r7, r1
 80240ac:	230f      	movs	r3, #15
 80240ae:	439c      	bics	r4, r3
 80240b0:	d073      	beq.n	802419a <_strtod_l+0x55e>
 80240b2:	3326      	adds	r3, #38	@ 0x26
 80240b4:	33ff      	adds	r3, #255	@ 0xff
 80240b6:	429c      	cmp	r4, r3
 80240b8:	dd4b      	ble.n	8024152 <_strtod_l+0x516>
 80240ba:	2300      	movs	r3, #0
 80240bc:	9306      	str	r3, [sp, #24]
 80240be:	9307      	str	r3, [sp, #28]
 80240c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80240c2:	9308      	str	r3, [sp, #32]
 80240c4:	2322      	movs	r3, #34	@ 0x22
 80240c6:	2600      	movs	r6, #0
 80240c8:	9a05      	ldr	r2, [sp, #20]
 80240ca:	4f54      	ldr	r7, [pc, #336]	@ (802421c <_strtod_l+0x5e0>)
 80240cc:	6013      	str	r3, [r2, #0]
 80240ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80240d0:	42b3      	cmp	r3, r6
 80240d2:	d100      	bne.n	80240d6 <_strtod_l+0x49a>
 80240d4:	e5ed      	b.n	8023cb2 <_strtod_l+0x76>
 80240d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80240d8:	9805      	ldr	r0, [sp, #20]
 80240da:	f002 ff67 	bl	8026fac <_Bfree>
 80240de:	9908      	ldr	r1, [sp, #32]
 80240e0:	9805      	ldr	r0, [sp, #20]
 80240e2:	f002 ff63 	bl	8026fac <_Bfree>
 80240e6:	9907      	ldr	r1, [sp, #28]
 80240e8:	9805      	ldr	r0, [sp, #20]
 80240ea:	f002 ff5f 	bl	8026fac <_Bfree>
 80240ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80240f0:	9805      	ldr	r0, [sp, #20]
 80240f2:	f002 ff5b 	bl	8026fac <_Bfree>
 80240f6:	9906      	ldr	r1, [sp, #24]
 80240f8:	9805      	ldr	r0, [sp, #20]
 80240fa:	f002 ff57 	bl	8026fac <_Bfree>
 80240fe:	e5d8      	b.n	8023cb2 <_strtod_l+0x76>
 8024100:	2325      	movs	r3, #37	@ 0x25
 8024102:	9a06      	ldr	r2, [sp, #24]
 8024104:	1a9b      	subs	r3, r3, r2
 8024106:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024108:	4293      	cmp	r3, r2
 802410a:	dbb8      	blt.n	802407e <_strtod_l+0x442>
 802410c:	240f      	movs	r4, #15
 802410e:	9b06      	ldr	r3, [sp, #24]
 8024110:	4d46      	ldr	r5, [pc, #280]	@ (802422c <_strtod_l+0x5f0>)
 8024112:	1ae4      	subs	r4, r4, r3
 8024114:	00e1      	lsls	r1, r4, #3
 8024116:	1869      	adds	r1, r5, r1
 8024118:	0032      	movs	r2, r6
 802411a:	6808      	ldr	r0, [r1, #0]
 802411c:	6849      	ldr	r1, [r1, #4]
 802411e:	003b      	movs	r3, r7
 8024120:	f7de fc18 	bl	8002954 <__aeabi_dmul>
 8024124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024126:	1b1c      	subs	r4, r3, r4
 8024128:	00e4      	lsls	r4, r4, #3
 802412a:	192d      	adds	r5, r5, r4
 802412c:	682a      	ldr	r2, [r5, #0]
 802412e:	686b      	ldr	r3, [r5, #4]
 8024130:	e789      	b.n	8024046 <_strtod_l+0x40a>
 8024132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024134:	3316      	adds	r3, #22
 8024136:	dba2      	blt.n	802407e <_strtod_l+0x442>
 8024138:	9907      	ldr	r1, [sp, #28]
 802413a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802413c:	4b3b      	ldr	r3, [pc, #236]	@ (802422c <_strtod_l+0x5f0>)
 802413e:	1a52      	subs	r2, r2, r1
 8024140:	00d2      	lsls	r2, r2, #3
 8024142:	189b      	adds	r3, r3, r2
 8024144:	0030      	movs	r0, r6
 8024146:	681a      	ldr	r2, [r3, #0]
 8024148:	685b      	ldr	r3, [r3, #4]
 802414a:	0039      	movs	r1, r7
 802414c:	f7dd ffc8 	bl	80020e0 <__aeabi_ddiv>
 8024150:	e750      	b.n	8023ff4 <_strtod_l+0x3b8>
 8024152:	2300      	movs	r3, #0
 8024154:	0030      	movs	r0, r6
 8024156:	0039      	movs	r1, r7
 8024158:	4d35      	ldr	r5, [pc, #212]	@ (8024230 <_strtod_l+0x5f4>)
 802415a:	1124      	asrs	r4, r4, #4
 802415c:	9309      	str	r3, [sp, #36]	@ 0x24
 802415e:	2c01      	cmp	r4, #1
 8024160:	dc1e      	bgt.n	80241a0 <_strtod_l+0x564>
 8024162:	2b00      	cmp	r3, #0
 8024164:	d001      	beq.n	802416a <_strtod_l+0x52e>
 8024166:	0006      	movs	r6, r0
 8024168:	000f      	movs	r7, r1
 802416a:	4b32      	ldr	r3, [pc, #200]	@ (8024234 <_strtod_l+0x5f8>)
 802416c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802416e:	18ff      	adds	r7, r7, r3
 8024170:	4b2f      	ldr	r3, [pc, #188]	@ (8024230 <_strtod_l+0x5f4>)
 8024172:	00d5      	lsls	r5, r2, #3
 8024174:	195d      	adds	r5, r3, r5
 8024176:	0032      	movs	r2, r6
 8024178:	6828      	ldr	r0, [r5, #0]
 802417a:	6869      	ldr	r1, [r5, #4]
 802417c:	003b      	movs	r3, r7
 802417e:	f7de fbe9 	bl	8002954 <__aeabi_dmul>
 8024182:	4b26      	ldr	r3, [pc, #152]	@ (802421c <_strtod_l+0x5e0>)
 8024184:	4a2c      	ldr	r2, [pc, #176]	@ (8024238 <_strtod_l+0x5fc>)
 8024186:	0006      	movs	r6, r0
 8024188:	400b      	ands	r3, r1
 802418a:	4293      	cmp	r3, r2
 802418c:	d895      	bhi.n	80240ba <_strtod_l+0x47e>
 802418e:	4a2b      	ldr	r2, [pc, #172]	@ (802423c <_strtod_l+0x600>)
 8024190:	4293      	cmp	r3, r2
 8024192:	d913      	bls.n	80241bc <_strtod_l+0x580>
 8024194:	2601      	movs	r6, #1
 8024196:	4f2a      	ldr	r7, [pc, #168]	@ (8024240 <_strtod_l+0x604>)
 8024198:	4276      	negs	r6, r6
 802419a:	2300      	movs	r3, #0
 802419c:	9309      	str	r3, [sp, #36]	@ 0x24
 802419e:	e086      	b.n	80242ae <_strtod_l+0x672>
 80241a0:	2201      	movs	r2, #1
 80241a2:	4214      	tst	r4, r2
 80241a4:	d004      	beq.n	80241b0 <_strtod_l+0x574>
 80241a6:	682a      	ldr	r2, [r5, #0]
 80241a8:	686b      	ldr	r3, [r5, #4]
 80241aa:	f7de fbd3 	bl	8002954 <__aeabi_dmul>
 80241ae:	2301      	movs	r3, #1
 80241b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80241b2:	1064      	asrs	r4, r4, #1
 80241b4:	3201      	adds	r2, #1
 80241b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80241b8:	3508      	adds	r5, #8
 80241ba:	e7d0      	b.n	802415e <_strtod_l+0x522>
 80241bc:	23d4      	movs	r3, #212	@ 0xd4
 80241be:	049b      	lsls	r3, r3, #18
 80241c0:	18cf      	adds	r7, r1, r3
 80241c2:	e7ea      	b.n	802419a <_strtod_l+0x55e>
 80241c4:	2c00      	cmp	r4, #0
 80241c6:	d0e8      	beq.n	802419a <_strtod_l+0x55e>
 80241c8:	4264      	negs	r4, r4
 80241ca:	230f      	movs	r3, #15
 80241cc:	0022      	movs	r2, r4
 80241ce:	401a      	ands	r2, r3
 80241d0:	421c      	tst	r4, r3
 80241d2:	d00a      	beq.n	80241ea <_strtod_l+0x5ae>
 80241d4:	4b15      	ldr	r3, [pc, #84]	@ (802422c <_strtod_l+0x5f0>)
 80241d6:	00d2      	lsls	r2, r2, #3
 80241d8:	189b      	adds	r3, r3, r2
 80241da:	0030      	movs	r0, r6
 80241dc:	681a      	ldr	r2, [r3, #0]
 80241de:	685b      	ldr	r3, [r3, #4]
 80241e0:	0039      	movs	r1, r7
 80241e2:	f7dd ff7d 	bl	80020e0 <__aeabi_ddiv>
 80241e6:	0006      	movs	r6, r0
 80241e8:	000f      	movs	r7, r1
 80241ea:	1124      	asrs	r4, r4, #4
 80241ec:	d0d5      	beq.n	802419a <_strtod_l+0x55e>
 80241ee:	2c1f      	cmp	r4, #31
 80241f0:	dd28      	ble.n	8024244 <_strtod_l+0x608>
 80241f2:	2300      	movs	r3, #0
 80241f4:	9306      	str	r3, [sp, #24]
 80241f6:	9307      	str	r3, [sp, #28]
 80241f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80241fa:	9308      	str	r3, [sp, #32]
 80241fc:	2322      	movs	r3, #34	@ 0x22
 80241fe:	9a05      	ldr	r2, [sp, #20]
 8024200:	2600      	movs	r6, #0
 8024202:	6013      	str	r3, [r2, #0]
 8024204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024206:	2700      	movs	r7, #0
 8024208:	2b00      	cmp	r3, #0
 802420a:	d000      	beq.n	802420e <_strtod_l+0x5d2>
 802420c:	e763      	b.n	80240d6 <_strtod_l+0x49a>
 802420e:	e550      	b.n	8023cb2 <_strtod_l+0x76>
 8024210:	00004e1f 	.word	0x00004e1f
 8024214:	0802e19f 	.word	0x0802e19f
 8024218:	0802e364 	.word	0x0802e364
 802421c:	7ff00000 	.word	0x7ff00000
 8024220:	0802e197 	.word	0x0802e197
 8024224:	0802e1d1 	.word	0x0802e1d1
 8024228:	0802e360 	.word	0x0802e360
 802422c:	0802e4f0 	.word	0x0802e4f0
 8024230:	0802e4c8 	.word	0x0802e4c8
 8024234:	fcb00000 	.word	0xfcb00000
 8024238:	7ca00000 	.word	0x7ca00000
 802423c:	7c900000 	.word	0x7c900000
 8024240:	7fefffff 	.word	0x7fefffff
 8024244:	2310      	movs	r3, #16
 8024246:	0022      	movs	r2, r4
 8024248:	401a      	ands	r2, r3
 802424a:	9209      	str	r2, [sp, #36]	@ 0x24
 802424c:	421c      	tst	r4, r3
 802424e:	d001      	beq.n	8024254 <_strtod_l+0x618>
 8024250:	335a      	adds	r3, #90	@ 0x5a
 8024252:	9309      	str	r3, [sp, #36]	@ 0x24
 8024254:	0030      	movs	r0, r6
 8024256:	0039      	movs	r1, r7
 8024258:	2300      	movs	r3, #0
 802425a:	4dc0      	ldr	r5, [pc, #768]	@ (802455c <_strtod_l+0x920>)
 802425c:	2201      	movs	r2, #1
 802425e:	4214      	tst	r4, r2
 8024260:	d004      	beq.n	802426c <_strtod_l+0x630>
 8024262:	682a      	ldr	r2, [r5, #0]
 8024264:	686b      	ldr	r3, [r5, #4]
 8024266:	f7de fb75 	bl	8002954 <__aeabi_dmul>
 802426a:	2301      	movs	r3, #1
 802426c:	1064      	asrs	r4, r4, #1
 802426e:	3508      	adds	r5, #8
 8024270:	2c00      	cmp	r4, #0
 8024272:	d1f3      	bne.n	802425c <_strtod_l+0x620>
 8024274:	2b00      	cmp	r3, #0
 8024276:	d001      	beq.n	802427c <_strtod_l+0x640>
 8024278:	0006      	movs	r6, r0
 802427a:	000f      	movs	r7, r1
 802427c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802427e:	2b00      	cmp	r3, #0
 8024280:	d00d      	beq.n	802429e <_strtod_l+0x662>
 8024282:	236b      	movs	r3, #107	@ 0x6b
 8024284:	007a      	lsls	r2, r7, #1
 8024286:	0d52      	lsrs	r2, r2, #21
 8024288:	0039      	movs	r1, r7
 802428a:	1a9b      	subs	r3, r3, r2
 802428c:	2b00      	cmp	r3, #0
 802428e:	dd06      	ble.n	802429e <_strtod_l+0x662>
 8024290:	2b1f      	cmp	r3, #31
 8024292:	dd5c      	ble.n	802434e <_strtod_l+0x712>
 8024294:	2600      	movs	r6, #0
 8024296:	2b34      	cmp	r3, #52	@ 0x34
 8024298:	dd52      	ble.n	8024340 <_strtod_l+0x704>
 802429a:	27dc      	movs	r7, #220	@ 0xdc
 802429c:	04bf      	lsls	r7, r7, #18
 802429e:	2200      	movs	r2, #0
 80242a0:	2300      	movs	r3, #0
 80242a2:	0030      	movs	r0, r6
 80242a4:	0039      	movs	r1, r7
 80242a6:	f7dc f903 	bl	80004b0 <__aeabi_dcmpeq>
 80242aa:	2800      	cmp	r0, #0
 80242ac:	d1a1      	bne.n	80241f2 <_strtod_l+0x5b6>
 80242ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242b0:	9a08      	ldr	r2, [sp, #32]
 80242b2:	9300      	str	r3, [sp, #0]
 80242b4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80242b6:	9b06      	ldr	r3, [sp, #24]
 80242b8:	9805      	ldr	r0, [sp, #20]
 80242ba:	f002 fedf 	bl	802707c <__s2b>
 80242be:	900d      	str	r0, [sp, #52]	@ 0x34
 80242c0:	2800      	cmp	r0, #0
 80242c2:	d100      	bne.n	80242c6 <_strtod_l+0x68a>
 80242c4:	e6f9      	b.n	80240ba <_strtod_l+0x47e>
 80242c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242c8:	9907      	ldr	r1, [sp, #28]
 80242ca:	43db      	mvns	r3, r3
 80242cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242ce:	17db      	asrs	r3, r3, #31
 80242d0:	1a52      	subs	r2, r2, r1
 80242d2:	9214      	str	r2, [sp, #80]	@ 0x50
 80242d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80242d6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80242d8:	17d2      	asrs	r2, r2, #31
 80242da:	4011      	ands	r1, r2
 80242dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80242de:	9114      	str	r1, [sp, #80]	@ 0x50
 80242e0:	401a      	ands	r2, r3
 80242e2:	2300      	movs	r3, #0
 80242e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80242e6:	9306      	str	r3, [sp, #24]
 80242e8:	9307      	str	r3, [sp, #28]
 80242ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242ec:	9805      	ldr	r0, [sp, #20]
 80242ee:	6859      	ldr	r1, [r3, #4]
 80242f0:	f002 fe18 	bl	8026f24 <_Balloc>
 80242f4:	9008      	str	r0, [sp, #32]
 80242f6:	2800      	cmp	r0, #0
 80242f8:	d100      	bne.n	80242fc <_strtod_l+0x6c0>
 80242fa:	e6e3      	b.n	80240c4 <_strtod_l+0x488>
 80242fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242fe:	300c      	adds	r0, #12
 8024300:	0019      	movs	r1, r3
 8024302:	691a      	ldr	r2, [r3, #16]
 8024304:	310c      	adds	r1, #12
 8024306:	3202      	adds	r2, #2
 8024308:	0092      	lsls	r2, r2, #2
 802430a:	f001 fb13 	bl	8025934 <memcpy>
 802430e:	ab20      	add	r3, sp, #128	@ 0x80
 8024310:	9301      	str	r3, [sp, #4]
 8024312:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024314:	9300      	str	r3, [sp, #0]
 8024316:	0032      	movs	r2, r6
 8024318:	003b      	movs	r3, r7
 802431a:	9805      	ldr	r0, [sp, #20]
 802431c:	9610      	str	r6, [sp, #64]	@ 0x40
 802431e:	9711      	str	r7, [sp, #68]	@ 0x44
 8024320:	f003 f9f4 	bl	802770c <__d2b>
 8024324:	901e      	str	r0, [sp, #120]	@ 0x78
 8024326:	2800      	cmp	r0, #0
 8024328:	d100      	bne.n	802432c <_strtod_l+0x6f0>
 802432a:	e6cb      	b.n	80240c4 <_strtod_l+0x488>
 802432c:	2101      	movs	r1, #1
 802432e:	9805      	ldr	r0, [sp, #20]
 8024330:	f002 ff40 	bl	80271b4 <__i2b>
 8024334:	9007      	str	r0, [sp, #28]
 8024336:	2800      	cmp	r0, #0
 8024338:	d10e      	bne.n	8024358 <_strtod_l+0x71c>
 802433a:	2300      	movs	r3, #0
 802433c:	9307      	str	r3, [sp, #28]
 802433e:	e6c1      	b.n	80240c4 <_strtod_l+0x488>
 8024340:	234b      	movs	r3, #75	@ 0x4b
 8024342:	1a9a      	subs	r2, r3, r2
 8024344:	3b4c      	subs	r3, #76	@ 0x4c
 8024346:	4093      	lsls	r3, r2
 8024348:	4019      	ands	r1, r3
 802434a:	000f      	movs	r7, r1
 802434c:	e7a7      	b.n	802429e <_strtod_l+0x662>
 802434e:	2201      	movs	r2, #1
 8024350:	4252      	negs	r2, r2
 8024352:	409a      	lsls	r2, r3
 8024354:	4016      	ands	r6, r2
 8024356:	e7a2      	b.n	802429e <_strtod_l+0x662>
 8024358:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802435a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802435c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802435e:	1ad4      	subs	r4, r2, r3
 8024360:	2b00      	cmp	r3, #0
 8024362:	db01      	blt.n	8024368 <_strtod_l+0x72c>
 8024364:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8024366:	195d      	adds	r5, r3, r5
 8024368:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802436a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802436c:	1a5b      	subs	r3, r3, r1
 802436e:	2136      	movs	r1, #54	@ 0x36
 8024370:	189b      	adds	r3, r3, r2
 8024372:	1a8a      	subs	r2, r1, r2
 8024374:	497a      	ldr	r1, [pc, #488]	@ (8024560 <_strtod_l+0x924>)
 8024376:	2001      	movs	r0, #1
 8024378:	468c      	mov	ip, r1
 802437a:	2100      	movs	r1, #0
 802437c:	3b01      	subs	r3, #1
 802437e:	9115      	str	r1, [sp, #84]	@ 0x54
 8024380:	9016      	str	r0, [sp, #88]	@ 0x58
 8024382:	4563      	cmp	r3, ip
 8024384:	da06      	bge.n	8024394 <_strtod_l+0x758>
 8024386:	4661      	mov	r1, ip
 8024388:	1ac9      	subs	r1, r1, r3
 802438a:	1a52      	subs	r2, r2, r1
 802438c:	291f      	cmp	r1, #31
 802438e:	dc3f      	bgt.n	8024410 <_strtod_l+0x7d4>
 8024390:	4088      	lsls	r0, r1
 8024392:	9016      	str	r0, [sp, #88]	@ 0x58
 8024394:	18ab      	adds	r3, r5, r2
 8024396:	930e      	str	r3, [sp, #56]	@ 0x38
 8024398:	18a4      	adds	r4, r4, r2
 802439a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802439c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802439e:	191c      	adds	r4, r3, r4
 80243a0:	002b      	movs	r3, r5
 80243a2:	4295      	cmp	r5, r2
 80243a4:	dd00      	ble.n	80243a8 <_strtod_l+0x76c>
 80243a6:	0013      	movs	r3, r2
 80243a8:	42a3      	cmp	r3, r4
 80243aa:	dd00      	ble.n	80243ae <_strtod_l+0x772>
 80243ac:	0023      	movs	r3, r4
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	dd04      	ble.n	80243bc <_strtod_l+0x780>
 80243b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80243b4:	1ae4      	subs	r4, r4, r3
 80243b6:	1ad2      	subs	r2, r2, r3
 80243b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80243ba:	1aed      	subs	r5, r5, r3
 80243bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80243be:	2b00      	cmp	r3, #0
 80243c0:	dd16      	ble.n	80243f0 <_strtod_l+0x7b4>
 80243c2:	001a      	movs	r2, r3
 80243c4:	9907      	ldr	r1, [sp, #28]
 80243c6:	9805      	ldr	r0, [sp, #20]
 80243c8:	f002 ffb6 	bl	8027338 <__pow5mult>
 80243cc:	9007      	str	r0, [sp, #28]
 80243ce:	2800      	cmp	r0, #0
 80243d0:	d0b3      	beq.n	802433a <_strtod_l+0x6fe>
 80243d2:	0001      	movs	r1, r0
 80243d4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80243d6:	9805      	ldr	r0, [sp, #20]
 80243d8:	f002 ff04 	bl	80271e4 <__multiply>
 80243dc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80243de:	2800      	cmp	r0, #0
 80243e0:	d100      	bne.n	80243e4 <_strtod_l+0x7a8>
 80243e2:	e66f      	b.n	80240c4 <_strtod_l+0x488>
 80243e4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80243e6:	9805      	ldr	r0, [sp, #20]
 80243e8:	f002 fde0 	bl	8026fac <_Bfree>
 80243ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80243ee:	931e      	str	r3, [sp, #120]	@ 0x78
 80243f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80243f2:	2b00      	cmp	r3, #0
 80243f4:	dc12      	bgt.n	802441c <_strtod_l+0x7e0>
 80243f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	dd18      	ble.n	802442e <_strtod_l+0x7f2>
 80243fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80243fe:	9908      	ldr	r1, [sp, #32]
 8024400:	9805      	ldr	r0, [sp, #20]
 8024402:	f002 ff99 	bl	8027338 <__pow5mult>
 8024406:	9008      	str	r0, [sp, #32]
 8024408:	2800      	cmp	r0, #0
 802440a:	d110      	bne.n	802442e <_strtod_l+0x7f2>
 802440c:	2300      	movs	r3, #0
 802440e:	e658      	b.n	80240c2 <_strtod_l+0x486>
 8024410:	4954      	ldr	r1, [pc, #336]	@ (8024564 <_strtod_l+0x928>)
 8024412:	1acb      	subs	r3, r1, r3
 8024414:	0001      	movs	r1, r0
 8024416:	4099      	lsls	r1, r3
 8024418:	9115      	str	r1, [sp, #84]	@ 0x54
 802441a:	e7ba      	b.n	8024392 <_strtod_l+0x756>
 802441c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802441e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024420:	9805      	ldr	r0, [sp, #20]
 8024422:	f002 ffe5 	bl	80273f0 <__lshift>
 8024426:	901e      	str	r0, [sp, #120]	@ 0x78
 8024428:	2800      	cmp	r0, #0
 802442a:	d1e4      	bne.n	80243f6 <_strtod_l+0x7ba>
 802442c:	e64a      	b.n	80240c4 <_strtod_l+0x488>
 802442e:	2c00      	cmp	r4, #0
 8024430:	dd07      	ble.n	8024442 <_strtod_l+0x806>
 8024432:	0022      	movs	r2, r4
 8024434:	9908      	ldr	r1, [sp, #32]
 8024436:	9805      	ldr	r0, [sp, #20]
 8024438:	f002 ffda 	bl	80273f0 <__lshift>
 802443c:	9008      	str	r0, [sp, #32]
 802443e:	2800      	cmp	r0, #0
 8024440:	d0e4      	beq.n	802440c <_strtod_l+0x7d0>
 8024442:	2d00      	cmp	r5, #0
 8024444:	dd08      	ble.n	8024458 <_strtod_l+0x81c>
 8024446:	002a      	movs	r2, r5
 8024448:	9907      	ldr	r1, [sp, #28]
 802444a:	9805      	ldr	r0, [sp, #20]
 802444c:	f002 ffd0 	bl	80273f0 <__lshift>
 8024450:	9007      	str	r0, [sp, #28]
 8024452:	2800      	cmp	r0, #0
 8024454:	d100      	bne.n	8024458 <_strtod_l+0x81c>
 8024456:	e635      	b.n	80240c4 <_strtod_l+0x488>
 8024458:	9a08      	ldr	r2, [sp, #32]
 802445a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802445c:	9805      	ldr	r0, [sp, #20]
 802445e:	f003 f84f 	bl	8027500 <__mdiff>
 8024462:	9006      	str	r0, [sp, #24]
 8024464:	2800      	cmp	r0, #0
 8024466:	d100      	bne.n	802446a <_strtod_l+0x82e>
 8024468:	e62c      	b.n	80240c4 <_strtod_l+0x488>
 802446a:	68c3      	ldr	r3, [r0, #12]
 802446c:	9907      	ldr	r1, [sp, #28]
 802446e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024470:	2300      	movs	r3, #0
 8024472:	60c3      	str	r3, [r0, #12]
 8024474:	f003 f828 	bl	80274c8 <__mcmp>
 8024478:	2800      	cmp	r0, #0
 802447a:	da3b      	bge.n	80244f4 <_strtod_l+0x8b8>
 802447c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802447e:	4333      	orrs	r3, r6
 8024480:	d167      	bne.n	8024552 <_strtod_l+0x916>
 8024482:	033b      	lsls	r3, r7, #12
 8024484:	d165      	bne.n	8024552 <_strtod_l+0x916>
 8024486:	22d6      	movs	r2, #214	@ 0xd6
 8024488:	4b37      	ldr	r3, [pc, #220]	@ (8024568 <_strtod_l+0x92c>)
 802448a:	04d2      	lsls	r2, r2, #19
 802448c:	403b      	ands	r3, r7
 802448e:	4293      	cmp	r3, r2
 8024490:	d95f      	bls.n	8024552 <_strtod_l+0x916>
 8024492:	9b06      	ldr	r3, [sp, #24]
 8024494:	695b      	ldr	r3, [r3, #20]
 8024496:	2b00      	cmp	r3, #0
 8024498:	d103      	bne.n	80244a2 <_strtod_l+0x866>
 802449a:	9b06      	ldr	r3, [sp, #24]
 802449c:	691b      	ldr	r3, [r3, #16]
 802449e:	2b01      	cmp	r3, #1
 80244a0:	dd57      	ble.n	8024552 <_strtod_l+0x916>
 80244a2:	9906      	ldr	r1, [sp, #24]
 80244a4:	2201      	movs	r2, #1
 80244a6:	9805      	ldr	r0, [sp, #20]
 80244a8:	f002 ffa2 	bl	80273f0 <__lshift>
 80244ac:	9907      	ldr	r1, [sp, #28]
 80244ae:	9006      	str	r0, [sp, #24]
 80244b0:	f003 f80a 	bl	80274c8 <__mcmp>
 80244b4:	2800      	cmp	r0, #0
 80244b6:	dd4c      	ble.n	8024552 <_strtod_l+0x916>
 80244b8:	4b2b      	ldr	r3, [pc, #172]	@ (8024568 <_strtod_l+0x92c>)
 80244ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244bc:	403b      	ands	r3, r7
 80244be:	2a00      	cmp	r2, #0
 80244c0:	d074      	beq.n	80245ac <_strtod_l+0x970>
 80244c2:	22d6      	movs	r2, #214	@ 0xd6
 80244c4:	04d2      	lsls	r2, r2, #19
 80244c6:	4293      	cmp	r3, r2
 80244c8:	d870      	bhi.n	80245ac <_strtod_l+0x970>
 80244ca:	22dc      	movs	r2, #220	@ 0xdc
 80244cc:	0492      	lsls	r2, r2, #18
 80244ce:	4293      	cmp	r3, r2
 80244d0:	d800      	bhi.n	80244d4 <_strtod_l+0x898>
 80244d2:	e693      	b.n	80241fc <_strtod_l+0x5c0>
 80244d4:	0030      	movs	r0, r6
 80244d6:	0039      	movs	r1, r7
 80244d8:	4b24      	ldr	r3, [pc, #144]	@ (802456c <_strtod_l+0x930>)
 80244da:	2200      	movs	r2, #0
 80244dc:	f7de fa3a 	bl	8002954 <__aeabi_dmul>
 80244e0:	4b21      	ldr	r3, [pc, #132]	@ (8024568 <_strtod_l+0x92c>)
 80244e2:	0006      	movs	r6, r0
 80244e4:	000f      	movs	r7, r1
 80244e6:	420b      	tst	r3, r1
 80244e8:	d000      	beq.n	80244ec <_strtod_l+0x8b0>
 80244ea:	e5f4      	b.n	80240d6 <_strtod_l+0x49a>
 80244ec:	2322      	movs	r3, #34	@ 0x22
 80244ee:	9a05      	ldr	r2, [sp, #20]
 80244f0:	6013      	str	r3, [r2, #0]
 80244f2:	e5f0      	b.n	80240d6 <_strtod_l+0x49a>
 80244f4:	970e      	str	r7, [sp, #56]	@ 0x38
 80244f6:	2800      	cmp	r0, #0
 80244f8:	d175      	bne.n	80245e6 <_strtod_l+0x9aa>
 80244fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80244fc:	033b      	lsls	r3, r7, #12
 80244fe:	0b1b      	lsrs	r3, r3, #12
 8024500:	2a00      	cmp	r2, #0
 8024502:	d039      	beq.n	8024578 <_strtod_l+0x93c>
 8024504:	4a1a      	ldr	r2, [pc, #104]	@ (8024570 <_strtod_l+0x934>)
 8024506:	4293      	cmp	r3, r2
 8024508:	d138      	bne.n	802457c <_strtod_l+0x940>
 802450a:	2101      	movs	r1, #1
 802450c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802450e:	4249      	negs	r1, r1
 8024510:	0032      	movs	r2, r6
 8024512:	0008      	movs	r0, r1
 8024514:	2b00      	cmp	r3, #0
 8024516:	d00b      	beq.n	8024530 <_strtod_l+0x8f4>
 8024518:	24d4      	movs	r4, #212	@ 0xd4
 802451a:	4b13      	ldr	r3, [pc, #76]	@ (8024568 <_strtod_l+0x92c>)
 802451c:	0008      	movs	r0, r1
 802451e:	403b      	ands	r3, r7
 8024520:	04e4      	lsls	r4, r4, #19
 8024522:	42a3      	cmp	r3, r4
 8024524:	d804      	bhi.n	8024530 <_strtod_l+0x8f4>
 8024526:	306c      	adds	r0, #108	@ 0x6c
 8024528:	0d1b      	lsrs	r3, r3, #20
 802452a:	1ac3      	subs	r3, r0, r3
 802452c:	4099      	lsls	r1, r3
 802452e:	0008      	movs	r0, r1
 8024530:	4282      	cmp	r2, r0
 8024532:	d123      	bne.n	802457c <_strtod_l+0x940>
 8024534:	4b0f      	ldr	r3, [pc, #60]	@ (8024574 <_strtod_l+0x938>)
 8024536:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024538:	4299      	cmp	r1, r3
 802453a:	d102      	bne.n	8024542 <_strtod_l+0x906>
 802453c:	3201      	adds	r2, #1
 802453e:	d100      	bne.n	8024542 <_strtod_l+0x906>
 8024540:	e5c0      	b.n	80240c4 <_strtod_l+0x488>
 8024542:	4b09      	ldr	r3, [pc, #36]	@ (8024568 <_strtod_l+0x92c>)
 8024544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024546:	2600      	movs	r6, #0
 8024548:	401a      	ands	r2, r3
 802454a:	0013      	movs	r3, r2
 802454c:	2280      	movs	r2, #128	@ 0x80
 802454e:	0352      	lsls	r2, r2, #13
 8024550:	189f      	adds	r7, r3, r2
 8024552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024554:	2b00      	cmp	r3, #0
 8024556:	d1bd      	bne.n	80244d4 <_strtod_l+0x898>
 8024558:	e5bd      	b.n	80240d6 <_strtod_l+0x49a>
 802455a:	46c0      	nop			@ (mov r8, r8)
 802455c:	0802e390 	.word	0x0802e390
 8024560:	fffffc02 	.word	0xfffffc02
 8024564:	fffffbe2 	.word	0xfffffbe2
 8024568:	7ff00000 	.word	0x7ff00000
 802456c:	39500000 	.word	0x39500000
 8024570:	000fffff 	.word	0x000fffff
 8024574:	7fefffff 	.word	0x7fefffff
 8024578:	4333      	orrs	r3, r6
 802457a:	d09d      	beq.n	80244b8 <_strtod_l+0x87c>
 802457c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802457e:	2b00      	cmp	r3, #0
 8024580:	d01c      	beq.n	80245bc <_strtod_l+0x980>
 8024582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024584:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024586:	4213      	tst	r3, r2
 8024588:	d0e3      	beq.n	8024552 <_strtod_l+0x916>
 802458a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802458c:	0030      	movs	r0, r6
 802458e:	0039      	movs	r1, r7
 8024590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024592:	2b00      	cmp	r3, #0
 8024594:	d016      	beq.n	80245c4 <_strtod_l+0x988>
 8024596:	f7ff fb39 	bl	8023c0c <sulp>
 802459a:	0002      	movs	r2, r0
 802459c:	000b      	movs	r3, r1
 802459e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80245a0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80245a2:	f7dd f9d7 	bl	8001954 <__aeabi_dadd>
 80245a6:	0006      	movs	r6, r0
 80245a8:	000f      	movs	r7, r1
 80245aa:	e7d2      	b.n	8024552 <_strtod_l+0x916>
 80245ac:	2601      	movs	r6, #1
 80245ae:	4a92      	ldr	r2, [pc, #584]	@ (80247f8 <_strtod_l+0xbbc>)
 80245b0:	4276      	negs	r6, r6
 80245b2:	189b      	adds	r3, r3, r2
 80245b4:	4a91      	ldr	r2, [pc, #580]	@ (80247fc <_strtod_l+0xbc0>)
 80245b6:	431a      	orrs	r2, r3
 80245b8:	0017      	movs	r7, r2
 80245ba:	e7ca      	b.n	8024552 <_strtod_l+0x916>
 80245bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80245be:	4233      	tst	r3, r6
 80245c0:	d0c7      	beq.n	8024552 <_strtod_l+0x916>
 80245c2:	e7e2      	b.n	802458a <_strtod_l+0x94e>
 80245c4:	f7ff fb22 	bl	8023c0c <sulp>
 80245c8:	0002      	movs	r2, r0
 80245ca:	000b      	movs	r3, r1
 80245cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80245ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80245d0:	f7de fca6 	bl	8002f20 <__aeabi_dsub>
 80245d4:	2200      	movs	r2, #0
 80245d6:	2300      	movs	r3, #0
 80245d8:	0006      	movs	r6, r0
 80245da:	000f      	movs	r7, r1
 80245dc:	f7db ff68 	bl	80004b0 <__aeabi_dcmpeq>
 80245e0:	2800      	cmp	r0, #0
 80245e2:	d0b6      	beq.n	8024552 <_strtod_l+0x916>
 80245e4:	e60a      	b.n	80241fc <_strtod_l+0x5c0>
 80245e6:	9907      	ldr	r1, [sp, #28]
 80245e8:	9806      	ldr	r0, [sp, #24]
 80245ea:	f003 f8ef 	bl	80277cc <__ratio>
 80245ee:	2380      	movs	r3, #128	@ 0x80
 80245f0:	2200      	movs	r2, #0
 80245f2:	05db      	lsls	r3, r3, #23
 80245f4:	0004      	movs	r4, r0
 80245f6:	000d      	movs	r5, r1
 80245f8:	f7db ff6a 	bl	80004d0 <__aeabi_dcmple>
 80245fc:	2800      	cmp	r0, #0
 80245fe:	d06c      	beq.n	80246da <_strtod_l+0xa9e>
 8024600:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024602:	2b00      	cmp	r3, #0
 8024604:	d177      	bne.n	80246f6 <_strtod_l+0xaba>
 8024606:	2e00      	cmp	r6, #0
 8024608:	d157      	bne.n	80246ba <_strtod_l+0xa7e>
 802460a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802460c:	031b      	lsls	r3, r3, #12
 802460e:	d15a      	bne.n	80246c6 <_strtod_l+0xa8a>
 8024610:	2200      	movs	r2, #0
 8024612:	0020      	movs	r0, r4
 8024614:	0029      	movs	r1, r5
 8024616:	4b7a      	ldr	r3, [pc, #488]	@ (8024800 <_strtod_l+0xbc4>)
 8024618:	f7db ff50 	bl	80004bc <__aeabi_dcmplt>
 802461c:	2800      	cmp	r0, #0
 802461e:	d159      	bne.n	80246d4 <_strtod_l+0xa98>
 8024620:	0020      	movs	r0, r4
 8024622:	0029      	movs	r1, r5
 8024624:	2200      	movs	r2, #0
 8024626:	4b77      	ldr	r3, [pc, #476]	@ (8024804 <_strtod_l+0xbc8>)
 8024628:	f7de f994 	bl	8002954 <__aeabi_dmul>
 802462c:	0004      	movs	r4, r0
 802462e:	000d      	movs	r5, r1
 8024630:	2380      	movs	r3, #128	@ 0x80
 8024632:	061b      	lsls	r3, r3, #24
 8024634:	18eb      	adds	r3, r5, r3
 8024636:	940a      	str	r4, [sp, #40]	@ 0x28
 8024638:	930b      	str	r3, [sp, #44]	@ 0x2c
 802463a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802463c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802463e:	9216      	str	r2, [sp, #88]	@ 0x58
 8024640:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024642:	4a71      	ldr	r2, [pc, #452]	@ (8024808 <_strtod_l+0xbcc>)
 8024644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024646:	4013      	ands	r3, r2
 8024648:	9315      	str	r3, [sp, #84]	@ 0x54
 802464a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802464c:	4b6f      	ldr	r3, [pc, #444]	@ (802480c <_strtod_l+0xbd0>)
 802464e:	429a      	cmp	r2, r3
 8024650:	d000      	beq.n	8024654 <_strtod_l+0xa18>
 8024652:	e087      	b.n	8024764 <_strtod_l+0xb28>
 8024654:	4a6e      	ldr	r2, [pc, #440]	@ (8024810 <_strtod_l+0xbd4>)
 8024656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024658:	4694      	mov	ip, r2
 802465a:	4463      	add	r3, ip
 802465c:	001f      	movs	r7, r3
 802465e:	0030      	movs	r0, r6
 8024660:	0019      	movs	r1, r3
 8024662:	f002 ffe7 	bl	8027634 <__ulp>
 8024666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802466a:	f7de f973 	bl	8002954 <__aeabi_dmul>
 802466e:	0032      	movs	r2, r6
 8024670:	003b      	movs	r3, r7
 8024672:	f7dd f96f 	bl	8001954 <__aeabi_dadd>
 8024676:	4a64      	ldr	r2, [pc, #400]	@ (8024808 <_strtod_l+0xbcc>)
 8024678:	4b66      	ldr	r3, [pc, #408]	@ (8024814 <_strtod_l+0xbd8>)
 802467a:	0006      	movs	r6, r0
 802467c:	400a      	ands	r2, r1
 802467e:	429a      	cmp	r2, r3
 8024680:	d940      	bls.n	8024704 <_strtod_l+0xac8>
 8024682:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024684:	4a64      	ldr	r2, [pc, #400]	@ (8024818 <_strtod_l+0xbdc>)
 8024686:	4293      	cmp	r3, r2
 8024688:	d103      	bne.n	8024692 <_strtod_l+0xa56>
 802468a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802468c:	3301      	adds	r3, #1
 802468e:	d100      	bne.n	8024692 <_strtod_l+0xa56>
 8024690:	e518      	b.n	80240c4 <_strtod_l+0x488>
 8024692:	2601      	movs	r6, #1
 8024694:	4f60      	ldr	r7, [pc, #384]	@ (8024818 <_strtod_l+0xbdc>)
 8024696:	4276      	negs	r6, r6
 8024698:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802469a:	9805      	ldr	r0, [sp, #20]
 802469c:	f002 fc86 	bl	8026fac <_Bfree>
 80246a0:	9908      	ldr	r1, [sp, #32]
 80246a2:	9805      	ldr	r0, [sp, #20]
 80246a4:	f002 fc82 	bl	8026fac <_Bfree>
 80246a8:	9907      	ldr	r1, [sp, #28]
 80246aa:	9805      	ldr	r0, [sp, #20]
 80246ac:	f002 fc7e 	bl	8026fac <_Bfree>
 80246b0:	9906      	ldr	r1, [sp, #24]
 80246b2:	9805      	ldr	r0, [sp, #20]
 80246b4:	f002 fc7a 	bl	8026fac <_Bfree>
 80246b8:	e617      	b.n	80242ea <_strtod_l+0x6ae>
 80246ba:	2e01      	cmp	r6, #1
 80246bc:	d103      	bne.n	80246c6 <_strtod_l+0xa8a>
 80246be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	d100      	bne.n	80246c6 <_strtod_l+0xa8a>
 80246c4:	e59a      	b.n	80241fc <_strtod_l+0x5c0>
 80246c6:	2300      	movs	r3, #0
 80246c8:	4c54      	ldr	r4, [pc, #336]	@ (802481c <_strtod_l+0xbe0>)
 80246ca:	4d4d      	ldr	r5, [pc, #308]	@ (8024800 <_strtod_l+0xbc4>)
 80246cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80246ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80246d0:	2400      	movs	r4, #0
 80246d2:	e7b2      	b.n	802463a <_strtod_l+0x9fe>
 80246d4:	2400      	movs	r4, #0
 80246d6:	4d4b      	ldr	r5, [pc, #300]	@ (8024804 <_strtod_l+0xbc8>)
 80246d8:	e7aa      	b.n	8024630 <_strtod_l+0x9f4>
 80246da:	0020      	movs	r0, r4
 80246dc:	0029      	movs	r1, r5
 80246de:	4b49      	ldr	r3, [pc, #292]	@ (8024804 <_strtod_l+0xbc8>)
 80246e0:	2200      	movs	r2, #0
 80246e2:	f7de f937 	bl	8002954 <__aeabi_dmul>
 80246e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80246e8:	0004      	movs	r4, r0
 80246ea:	000d      	movs	r5, r1
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	d09f      	beq.n	8024630 <_strtod_l+0x9f4>
 80246f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80246f2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80246f4:	e7a1      	b.n	802463a <_strtod_l+0x9fe>
 80246f6:	2300      	movs	r3, #0
 80246f8:	4c41      	ldr	r4, [pc, #260]	@ (8024800 <_strtod_l+0xbc4>)
 80246fa:	0025      	movs	r5, r4
 80246fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80246fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024700:	001c      	movs	r4, r3
 8024702:	e79a      	b.n	802463a <_strtod_l+0x9fe>
 8024704:	23d4      	movs	r3, #212	@ 0xd4
 8024706:	049b      	lsls	r3, r3, #18
 8024708:	18cf      	adds	r7, r1, r3
 802470a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802470c:	9710      	str	r7, [sp, #64]	@ 0x40
 802470e:	2b00      	cmp	r3, #0
 8024710:	d1c2      	bne.n	8024698 <_strtod_l+0xa5c>
 8024712:	4b3d      	ldr	r3, [pc, #244]	@ (8024808 <_strtod_l+0xbcc>)
 8024714:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024716:	403b      	ands	r3, r7
 8024718:	429a      	cmp	r2, r3
 802471a:	d1bd      	bne.n	8024698 <_strtod_l+0xa5c>
 802471c:	0020      	movs	r0, r4
 802471e:	0029      	movs	r1, r5
 8024720:	f7db ffb2 	bl	8000688 <__aeabi_d2lz>
 8024724:	f7db ffea 	bl	80006fc <__aeabi_l2d>
 8024728:	0002      	movs	r2, r0
 802472a:	000b      	movs	r3, r1
 802472c:	0020      	movs	r0, r4
 802472e:	0029      	movs	r1, r5
 8024730:	f7de fbf6 	bl	8002f20 <__aeabi_dsub>
 8024734:	033c      	lsls	r4, r7, #12
 8024736:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024738:	0b24      	lsrs	r4, r4, #12
 802473a:	4334      	orrs	r4, r6
 802473c:	900e      	str	r0, [sp, #56]	@ 0x38
 802473e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024740:	4a37      	ldr	r2, [pc, #220]	@ (8024820 <_strtod_l+0xbe4>)
 8024742:	431c      	orrs	r4, r3
 8024744:	d052      	beq.n	80247ec <_strtod_l+0xbb0>
 8024746:	4b37      	ldr	r3, [pc, #220]	@ (8024824 <_strtod_l+0xbe8>)
 8024748:	f7db feb8 	bl	80004bc <__aeabi_dcmplt>
 802474c:	2800      	cmp	r0, #0
 802474e:	d000      	beq.n	8024752 <_strtod_l+0xb16>
 8024750:	e4c1      	b.n	80240d6 <_strtod_l+0x49a>
 8024752:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024754:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024756:	4a34      	ldr	r2, [pc, #208]	@ (8024828 <_strtod_l+0xbec>)
 8024758:	4b2a      	ldr	r3, [pc, #168]	@ (8024804 <_strtod_l+0xbc8>)
 802475a:	f7db fec3 	bl	80004e4 <__aeabi_dcmpgt>
 802475e:	2800      	cmp	r0, #0
 8024760:	d09a      	beq.n	8024698 <_strtod_l+0xa5c>
 8024762:	e4b8      	b.n	80240d6 <_strtod_l+0x49a>
 8024764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024766:	2b00      	cmp	r3, #0
 8024768:	d02a      	beq.n	80247c0 <_strtod_l+0xb84>
 802476a:	23d4      	movs	r3, #212	@ 0xd4
 802476c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802476e:	04db      	lsls	r3, r3, #19
 8024770:	429a      	cmp	r2, r3
 8024772:	d825      	bhi.n	80247c0 <_strtod_l+0xb84>
 8024774:	0020      	movs	r0, r4
 8024776:	0029      	movs	r1, r5
 8024778:	4a2c      	ldr	r2, [pc, #176]	@ (802482c <_strtod_l+0xbf0>)
 802477a:	4b2d      	ldr	r3, [pc, #180]	@ (8024830 <_strtod_l+0xbf4>)
 802477c:	f7db fea8 	bl	80004d0 <__aeabi_dcmple>
 8024780:	2800      	cmp	r0, #0
 8024782:	d016      	beq.n	80247b2 <_strtod_l+0xb76>
 8024784:	0020      	movs	r0, r4
 8024786:	0029      	movs	r1, r5
 8024788:	f7db ff60 	bl	800064c <__aeabi_d2uiz>
 802478c:	2800      	cmp	r0, #0
 802478e:	d100      	bne.n	8024792 <_strtod_l+0xb56>
 8024790:	3001      	adds	r0, #1
 8024792:	f7df f85b 	bl	800384c <__aeabi_ui2d>
 8024796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024798:	0004      	movs	r4, r0
 802479a:	000d      	movs	r5, r1
 802479c:	2b00      	cmp	r3, #0
 802479e:	d122      	bne.n	80247e6 <_strtod_l+0xbaa>
 80247a0:	2380      	movs	r3, #128	@ 0x80
 80247a2:	061b      	lsls	r3, r3, #24
 80247a4:	18cb      	adds	r3, r1, r3
 80247a6:	9018      	str	r0, [sp, #96]	@ 0x60
 80247a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80247aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80247ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80247ae:	9216      	str	r2, [sp, #88]	@ 0x58
 80247b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80247b2:	22d6      	movs	r2, #214	@ 0xd6
 80247b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80247b6:	04d2      	lsls	r2, r2, #19
 80247b8:	189b      	adds	r3, r3, r2
 80247ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80247bc:	1a9b      	subs	r3, r3, r2
 80247be:	9317      	str	r3, [sp, #92]	@ 0x5c
 80247c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80247c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80247c4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80247c6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80247c8:	f002 ff34 	bl	8027634 <__ulp>
 80247cc:	0002      	movs	r2, r0
 80247ce:	000b      	movs	r3, r1
 80247d0:	0030      	movs	r0, r6
 80247d2:	0039      	movs	r1, r7
 80247d4:	f7de f8be 	bl	8002954 <__aeabi_dmul>
 80247d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80247da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80247dc:	f7dd f8ba 	bl	8001954 <__aeabi_dadd>
 80247e0:	0006      	movs	r6, r0
 80247e2:	000f      	movs	r7, r1
 80247e4:	e791      	b.n	802470a <_strtod_l+0xace>
 80247e6:	9418      	str	r4, [sp, #96]	@ 0x60
 80247e8:	9519      	str	r5, [sp, #100]	@ 0x64
 80247ea:	e7de      	b.n	80247aa <_strtod_l+0xb6e>
 80247ec:	4b11      	ldr	r3, [pc, #68]	@ (8024834 <_strtod_l+0xbf8>)
 80247ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80247f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80247f2:	f7db fe63 	bl	80004bc <__aeabi_dcmplt>
 80247f6:	e7b2      	b.n	802475e <_strtod_l+0xb22>
 80247f8:	fff00000 	.word	0xfff00000
 80247fc:	000fffff 	.word	0x000fffff
 8024800:	3ff00000 	.word	0x3ff00000
 8024804:	3fe00000 	.word	0x3fe00000
 8024808:	7ff00000 	.word	0x7ff00000
 802480c:	7fe00000 	.word	0x7fe00000
 8024810:	fcb00000 	.word	0xfcb00000
 8024814:	7c9fffff 	.word	0x7c9fffff
 8024818:	7fefffff 	.word	0x7fefffff
 802481c:	bff00000 	.word	0xbff00000
 8024820:	94a03595 	.word	0x94a03595
 8024824:	3fdfffff 	.word	0x3fdfffff
 8024828:	35afe535 	.word	0x35afe535
 802482c:	ffc00000 	.word	0xffc00000
 8024830:	41dfffff 	.word	0x41dfffff
 8024834:	3fcfffff 	.word	0x3fcfffff

08024838 <strtod>:
 8024838:	b510      	push	{r4, lr}
 802483a:	4c04      	ldr	r4, [pc, #16]	@ (802484c <strtod+0x14>)
 802483c:	000a      	movs	r2, r1
 802483e:	0001      	movs	r1, r0
 8024840:	4b03      	ldr	r3, [pc, #12]	@ (8024850 <strtod+0x18>)
 8024842:	6820      	ldr	r0, [r4, #0]
 8024844:	f7ff f9fa 	bl	8023c3c <_strtod_l>
 8024848:	bd10      	pop	{r4, pc}
 802484a:	46c0      	nop			@ (mov r8, r8)
 802484c:	200003e0 	.word	0x200003e0
 8024850:	20000274 	.word	0x20000274

08024854 <_strtol_l.isra.0>:
 8024854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024856:	b085      	sub	sp, #20
 8024858:	0017      	movs	r7, r2
 802485a:	001e      	movs	r6, r3
 802485c:	9003      	str	r0, [sp, #12]
 802485e:	9101      	str	r1, [sp, #4]
 8024860:	2b24      	cmp	r3, #36	@ 0x24
 8024862:	d823      	bhi.n	80248ac <_strtol_l.isra.0+0x58>
 8024864:	000c      	movs	r4, r1
 8024866:	2b01      	cmp	r3, #1
 8024868:	d020      	beq.n	80248ac <_strtol_l.isra.0+0x58>
 802486a:	4b3d      	ldr	r3, [pc, #244]	@ (8024960 <_strtol_l.isra.0+0x10c>)
 802486c:	2208      	movs	r2, #8
 802486e:	469c      	mov	ip, r3
 8024870:	0023      	movs	r3, r4
 8024872:	4661      	mov	r1, ip
 8024874:	781d      	ldrb	r5, [r3, #0]
 8024876:	3401      	adds	r4, #1
 8024878:	5d48      	ldrb	r0, [r1, r5]
 802487a:	0001      	movs	r1, r0
 802487c:	4011      	ands	r1, r2
 802487e:	4210      	tst	r0, r2
 8024880:	d1f6      	bne.n	8024870 <_strtol_l.isra.0+0x1c>
 8024882:	2d2d      	cmp	r5, #45	@ 0x2d
 8024884:	d119      	bne.n	80248ba <_strtol_l.isra.0+0x66>
 8024886:	7825      	ldrb	r5, [r4, #0]
 8024888:	1c9c      	adds	r4, r3, #2
 802488a:	2301      	movs	r3, #1
 802488c:	9300      	str	r3, [sp, #0]
 802488e:	2210      	movs	r2, #16
 8024890:	0033      	movs	r3, r6
 8024892:	4393      	bics	r3, r2
 8024894:	d11d      	bne.n	80248d2 <_strtol_l.isra.0+0x7e>
 8024896:	2d30      	cmp	r5, #48	@ 0x30
 8024898:	d115      	bne.n	80248c6 <_strtol_l.isra.0+0x72>
 802489a:	2120      	movs	r1, #32
 802489c:	7823      	ldrb	r3, [r4, #0]
 802489e:	438b      	bics	r3, r1
 80248a0:	2b58      	cmp	r3, #88	@ 0x58
 80248a2:	d110      	bne.n	80248c6 <_strtol_l.isra.0+0x72>
 80248a4:	7865      	ldrb	r5, [r4, #1]
 80248a6:	3402      	adds	r4, #2
 80248a8:	2610      	movs	r6, #16
 80248aa:	e012      	b.n	80248d2 <_strtol_l.isra.0+0x7e>
 80248ac:	f001 f80a 	bl	80258c4 <__errno>
 80248b0:	2316      	movs	r3, #22
 80248b2:	6003      	str	r3, [r0, #0]
 80248b4:	2000      	movs	r0, #0
 80248b6:	b005      	add	sp, #20
 80248b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248ba:	9100      	str	r1, [sp, #0]
 80248bc:	2d2b      	cmp	r5, #43	@ 0x2b
 80248be:	d1e6      	bne.n	802488e <_strtol_l.isra.0+0x3a>
 80248c0:	7825      	ldrb	r5, [r4, #0]
 80248c2:	1c9c      	adds	r4, r3, #2
 80248c4:	e7e3      	b.n	802488e <_strtol_l.isra.0+0x3a>
 80248c6:	2e00      	cmp	r6, #0
 80248c8:	d1ee      	bne.n	80248a8 <_strtol_l.isra.0+0x54>
 80248ca:	360a      	adds	r6, #10
 80248cc:	2d30      	cmp	r5, #48	@ 0x30
 80248ce:	d100      	bne.n	80248d2 <_strtol_l.isra.0+0x7e>
 80248d0:	3e02      	subs	r6, #2
 80248d2:	4a24      	ldr	r2, [pc, #144]	@ (8024964 <_strtol_l.isra.0+0x110>)
 80248d4:	9b00      	ldr	r3, [sp, #0]
 80248d6:	4694      	mov	ip, r2
 80248d8:	4463      	add	r3, ip
 80248da:	0031      	movs	r1, r6
 80248dc:	0018      	movs	r0, r3
 80248de:	9302      	str	r3, [sp, #8]
 80248e0:	f7db fce6 	bl	80002b0 <__aeabi_uidivmod>
 80248e4:	2200      	movs	r2, #0
 80248e6:	4684      	mov	ip, r0
 80248e8:	0010      	movs	r0, r2
 80248ea:	002b      	movs	r3, r5
 80248ec:	3b30      	subs	r3, #48	@ 0x30
 80248ee:	2b09      	cmp	r3, #9
 80248f0:	d811      	bhi.n	8024916 <_strtol_l.isra.0+0xc2>
 80248f2:	001d      	movs	r5, r3
 80248f4:	42ae      	cmp	r6, r5
 80248f6:	dd1d      	ble.n	8024934 <_strtol_l.isra.0+0xe0>
 80248f8:	1c53      	adds	r3, r2, #1
 80248fa:	d009      	beq.n	8024910 <_strtol_l.isra.0+0xbc>
 80248fc:	2201      	movs	r2, #1
 80248fe:	4252      	negs	r2, r2
 8024900:	4584      	cmp	ip, r0
 8024902:	d305      	bcc.n	8024910 <_strtol_l.isra.0+0xbc>
 8024904:	d101      	bne.n	802490a <_strtol_l.isra.0+0xb6>
 8024906:	42a9      	cmp	r1, r5
 8024908:	db11      	blt.n	802492e <_strtol_l.isra.0+0xda>
 802490a:	2201      	movs	r2, #1
 802490c:	4370      	muls	r0, r6
 802490e:	1828      	adds	r0, r5, r0
 8024910:	7825      	ldrb	r5, [r4, #0]
 8024912:	3401      	adds	r4, #1
 8024914:	e7e9      	b.n	80248ea <_strtol_l.isra.0+0x96>
 8024916:	002b      	movs	r3, r5
 8024918:	3b41      	subs	r3, #65	@ 0x41
 802491a:	2b19      	cmp	r3, #25
 802491c:	d801      	bhi.n	8024922 <_strtol_l.isra.0+0xce>
 802491e:	3d37      	subs	r5, #55	@ 0x37
 8024920:	e7e8      	b.n	80248f4 <_strtol_l.isra.0+0xa0>
 8024922:	002b      	movs	r3, r5
 8024924:	3b61      	subs	r3, #97	@ 0x61
 8024926:	2b19      	cmp	r3, #25
 8024928:	d804      	bhi.n	8024934 <_strtol_l.isra.0+0xe0>
 802492a:	3d57      	subs	r5, #87	@ 0x57
 802492c:	e7e2      	b.n	80248f4 <_strtol_l.isra.0+0xa0>
 802492e:	2201      	movs	r2, #1
 8024930:	4252      	negs	r2, r2
 8024932:	e7ed      	b.n	8024910 <_strtol_l.isra.0+0xbc>
 8024934:	1c53      	adds	r3, r2, #1
 8024936:	d108      	bne.n	802494a <_strtol_l.isra.0+0xf6>
 8024938:	2322      	movs	r3, #34	@ 0x22
 802493a:	9a03      	ldr	r2, [sp, #12]
 802493c:	9802      	ldr	r0, [sp, #8]
 802493e:	6013      	str	r3, [r2, #0]
 8024940:	2f00      	cmp	r7, #0
 8024942:	d0b8      	beq.n	80248b6 <_strtol_l.isra.0+0x62>
 8024944:	1e63      	subs	r3, r4, #1
 8024946:	9301      	str	r3, [sp, #4]
 8024948:	e007      	b.n	802495a <_strtol_l.isra.0+0x106>
 802494a:	9b00      	ldr	r3, [sp, #0]
 802494c:	2b00      	cmp	r3, #0
 802494e:	d000      	beq.n	8024952 <_strtol_l.isra.0+0xfe>
 8024950:	4240      	negs	r0, r0
 8024952:	2f00      	cmp	r7, #0
 8024954:	d0af      	beq.n	80248b6 <_strtol_l.isra.0+0x62>
 8024956:	2a00      	cmp	r2, #0
 8024958:	d1f4      	bne.n	8024944 <_strtol_l.isra.0+0xf0>
 802495a:	9b01      	ldr	r3, [sp, #4]
 802495c:	603b      	str	r3, [r7, #0]
 802495e:	e7aa      	b.n	80248b6 <_strtol_l.isra.0+0x62>
 8024960:	0802e3b9 	.word	0x0802e3b9
 8024964:	7fffffff 	.word	0x7fffffff

08024968 <strtol>:
 8024968:	b510      	push	{r4, lr}
 802496a:	4c04      	ldr	r4, [pc, #16]	@ (802497c <strtol+0x14>)
 802496c:	0013      	movs	r3, r2
 802496e:	000a      	movs	r2, r1
 8024970:	0001      	movs	r1, r0
 8024972:	6820      	ldr	r0, [r4, #0]
 8024974:	f7ff ff6e 	bl	8024854 <_strtol_l.isra.0>
 8024978:	bd10      	pop	{r4, pc}
 802497a:	46c0      	nop			@ (mov r8, r8)
 802497c:	200003e0 	.word	0x200003e0

08024980 <__cvt>:
 8024980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024982:	001f      	movs	r7, r3
 8024984:	2300      	movs	r3, #0
 8024986:	0016      	movs	r6, r2
 8024988:	b08b      	sub	sp, #44	@ 0x2c
 802498a:	429f      	cmp	r7, r3
 802498c:	da04      	bge.n	8024998 <__cvt+0x18>
 802498e:	2180      	movs	r1, #128	@ 0x80
 8024990:	0609      	lsls	r1, r1, #24
 8024992:	187b      	adds	r3, r7, r1
 8024994:	001f      	movs	r7, r3
 8024996:	232d      	movs	r3, #45	@ 0x2d
 8024998:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802499a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802499c:	7013      	strb	r3, [r2, #0]
 802499e:	2320      	movs	r3, #32
 80249a0:	2203      	movs	r2, #3
 80249a2:	439d      	bics	r5, r3
 80249a4:	2d46      	cmp	r5, #70	@ 0x46
 80249a6:	d007      	beq.n	80249b8 <__cvt+0x38>
 80249a8:	002b      	movs	r3, r5
 80249aa:	3b45      	subs	r3, #69	@ 0x45
 80249ac:	4259      	negs	r1, r3
 80249ae:	414b      	adcs	r3, r1
 80249b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80249b2:	3a01      	subs	r2, #1
 80249b4:	18cb      	adds	r3, r1, r3
 80249b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80249b8:	ab09      	add	r3, sp, #36	@ 0x24
 80249ba:	9304      	str	r3, [sp, #16]
 80249bc:	ab08      	add	r3, sp, #32
 80249be:	9303      	str	r3, [sp, #12]
 80249c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80249c2:	9200      	str	r2, [sp, #0]
 80249c4:	9302      	str	r3, [sp, #8]
 80249c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249c8:	0032      	movs	r2, r6
 80249ca:	9301      	str	r3, [sp, #4]
 80249cc:	003b      	movs	r3, r7
 80249ce:	f001 f847 	bl	8025a60 <_dtoa_r>
 80249d2:	0004      	movs	r4, r0
 80249d4:	2d47      	cmp	r5, #71	@ 0x47
 80249d6:	d11b      	bne.n	8024a10 <__cvt+0x90>
 80249d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80249da:	07db      	lsls	r3, r3, #31
 80249dc:	d511      	bpl.n	8024a02 <__cvt+0x82>
 80249de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249e0:	18c3      	adds	r3, r0, r3
 80249e2:	9307      	str	r3, [sp, #28]
 80249e4:	2200      	movs	r2, #0
 80249e6:	2300      	movs	r3, #0
 80249e8:	0030      	movs	r0, r6
 80249ea:	0039      	movs	r1, r7
 80249ec:	f7db fd60 	bl	80004b0 <__aeabi_dcmpeq>
 80249f0:	2800      	cmp	r0, #0
 80249f2:	d001      	beq.n	80249f8 <__cvt+0x78>
 80249f4:	9b07      	ldr	r3, [sp, #28]
 80249f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80249f8:	2230      	movs	r2, #48	@ 0x30
 80249fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249fc:	9907      	ldr	r1, [sp, #28]
 80249fe:	428b      	cmp	r3, r1
 8024a00:	d320      	bcc.n	8024a44 <__cvt+0xc4>
 8024a02:	0020      	movs	r0, r4
 8024a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024a08:	1b1b      	subs	r3, r3, r4
 8024a0a:	6013      	str	r3, [r2, #0]
 8024a0c:	b00b      	add	sp, #44	@ 0x2c
 8024a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024a12:	18c3      	adds	r3, r0, r3
 8024a14:	9307      	str	r3, [sp, #28]
 8024a16:	2d46      	cmp	r5, #70	@ 0x46
 8024a18:	d1e4      	bne.n	80249e4 <__cvt+0x64>
 8024a1a:	7803      	ldrb	r3, [r0, #0]
 8024a1c:	2b30      	cmp	r3, #48	@ 0x30
 8024a1e:	d10c      	bne.n	8024a3a <__cvt+0xba>
 8024a20:	2200      	movs	r2, #0
 8024a22:	2300      	movs	r3, #0
 8024a24:	0030      	movs	r0, r6
 8024a26:	0039      	movs	r1, r7
 8024a28:	f7db fd42 	bl	80004b0 <__aeabi_dcmpeq>
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	d104      	bne.n	8024a3a <__cvt+0xba>
 8024a30:	2301      	movs	r3, #1
 8024a32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024a34:	1a9b      	subs	r3, r3, r2
 8024a36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024a38:	6013      	str	r3, [r2, #0]
 8024a3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024a3c:	9a07      	ldr	r2, [sp, #28]
 8024a3e:	681b      	ldr	r3, [r3, #0]
 8024a40:	18d3      	adds	r3, r2, r3
 8024a42:	e7ce      	b.n	80249e2 <__cvt+0x62>
 8024a44:	1c59      	adds	r1, r3, #1
 8024a46:	9109      	str	r1, [sp, #36]	@ 0x24
 8024a48:	701a      	strb	r2, [r3, #0]
 8024a4a:	e7d6      	b.n	80249fa <__cvt+0x7a>

08024a4c <__exponent>:
 8024a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a4e:	232b      	movs	r3, #43	@ 0x2b
 8024a50:	b085      	sub	sp, #20
 8024a52:	0005      	movs	r5, r0
 8024a54:	1e0c      	subs	r4, r1, #0
 8024a56:	7002      	strb	r2, [r0, #0]
 8024a58:	da01      	bge.n	8024a5e <__exponent+0x12>
 8024a5a:	424c      	negs	r4, r1
 8024a5c:	3302      	adds	r3, #2
 8024a5e:	706b      	strb	r3, [r5, #1]
 8024a60:	2c09      	cmp	r4, #9
 8024a62:	dd2c      	ble.n	8024abe <__exponent+0x72>
 8024a64:	ab02      	add	r3, sp, #8
 8024a66:	1dde      	adds	r6, r3, #7
 8024a68:	0020      	movs	r0, r4
 8024a6a:	210a      	movs	r1, #10
 8024a6c:	f7db fd0a 	bl	8000484 <__aeabi_idivmod>
 8024a70:	0037      	movs	r7, r6
 8024a72:	3130      	adds	r1, #48	@ 0x30
 8024a74:	3e01      	subs	r6, #1
 8024a76:	0020      	movs	r0, r4
 8024a78:	7031      	strb	r1, [r6, #0]
 8024a7a:	210a      	movs	r1, #10
 8024a7c:	9401      	str	r4, [sp, #4]
 8024a7e:	f7db fc1b 	bl	80002b8 <__divsi3>
 8024a82:	9b01      	ldr	r3, [sp, #4]
 8024a84:	0004      	movs	r4, r0
 8024a86:	2b63      	cmp	r3, #99	@ 0x63
 8024a88:	dcee      	bgt.n	8024a68 <__exponent+0x1c>
 8024a8a:	1eba      	subs	r2, r7, #2
 8024a8c:	1ca8      	adds	r0, r5, #2
 8024a8e:	0001      	movs	r1, r0
 8024a90:	0013      	movs	r3, r2
 8024a92:	3430      	adds	r4, #48	@ 0x30
 8024a94:	7014      	strb	r4, [r2, #0]
 8024a96:	ac02      	add	r4, sp, #8
 8024a98:	3407      	adds	r4, #7
 8024a9a:	429c      	cmp	r4, r3
 8024a9c:	d80a      	bhi.n	8024ab4 <__exponent+0x68>
 8024a9e:	2300      	movs	r3, #0
 8024aa0:	4294      	cmp	r4, r2
 8024aa2:	d303      	bcc.n	8024aac <__exponent+0x60>
 8024aa4:	3309      	adds	r3, #9
 8024aa6:	aa02      	add	r2, sp, #8
 8024aa8:	189b      	adds	r3, r3, r2
 8024aaa:	1bdb      	subs	r3, r3, r7
 8024aac:	18c0      	adds	r0, r0, r3
 8024aae:	1b40      	subs	r0, r0, r5
 8024ab0:	b005      	add	sp, #20
 8024ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ab4:	781c      	ldrb	r4, [r3, #0]
 8024ab6:	3301      	adds	r3, #1
 8024ab8:	700c      	strb	r4, [r1, #0]
 8024aba:	3101      	adds	r1, #1
 8024abc:	e7eb      	b.n	8024a96 <__exponent+0x4a>
 8024abe:	2330      	movs	r3, #48	@ 0x30
 8024ac0:	18e4      	adds	r4, r4, r3
 8024ac2:	70ab      	strb	r3, [r5, #2]
 8024ac4:	1d28      	adds	r0, r5, #4
 8024ac6:	70ec      	strb	r4, [r5, #3]
 8024ac8:	e7f1      	b.n	8024aae <__exponent+0x62>
	...

08024acc <_printf_float>:
 8024acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ace:	b097      	sub	sp, #92	@ 0x5c
 8024ad0:	000d      	movs	r5, r1
 8024ad2:	920a      	str	r2, [sp, #40]	@ 0x28
 8024ad4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ad8:	9009      	str	r0, [sp, #36]	@ 0x24
 8024ada:	f000 fea1 	bl	8025820 <_localeconv_r>
 8024ade:	6803      	ldr	r3, [r0, #0]
 8024ae0:	0018      	movs	r0, r3
 8024ae2:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ae4:	f7db fb42 	bl	800016c <strlen>
 8024ae8:	2300      	movs	r3, #0
 8024aea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024aec:	9314      	str	r3, [sp, #80]	@ 0x50
 8024aee:	7e2b      	ldrb	r3, [r5, #24]
 8024af0:	2207      	movs	r2, #7
 8024af2:	930c      	str	r3, [sp, #48]	@ 0x30
 8024af4:	682b      	ldr	r3, [r5, #0]
 8024af6:	930e      	str	r3, [sp, #56]	@ 0x38
 8024af8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024afa:	6823      	ldr	r3, [r4, #0]
 8024afc:	05c9      	lsls	r1, r1, #23
 8024afe:	d545      	bpl.n	8024b8c <_printf_float+0xc0>
 8024b00:	189b      	adds	r3, r3, r2
 8024b02:	4393      	bics	r3, r2
 8024b04:	001a      	movs	r2, r3
 8024b06:	3208      	adds	r2, #8
 8024b08:	6022      	str	r2, [r4, #0]
 8024b0a:	2201      	movs	r2, #1
 8024b0c:	681e      	ldr	r6, [r3, #0]
 8024b0e:	685f      	ldr	r7, [r3, #4]
 8024b10:	007b      	lsls	r3, r7, #1
 8024b12:	085b      	lsrs	r3, r3, #1
 8024b14:	9311      	str	r3, [sp, #68]	@ 0x44
 8024b16:	9610      	str	r6, [sp, #64]	@ 0x40
 8024b18:	64ae      	str	r6, [r5, #72]	@ 0x48
 8024b1a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8024b1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024b1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024b20:	4ba7      	ldr	r3, [pc, #668]	@ (8024dc0 <_printf_float+0x2f4>)
 8024b22:	4252      	negs	r2, r2
 8024b24:	f7de fe06 	bl	8003734 <__aeabi_dcmpun>
 8024b28:	2800      	cmp	r0, #0
 8024b2a:	d131      	bne.n	8024b90 <_printf_float+0xc4>
 8024b2c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024b2e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024b30:	2201      	movs	r2, #1
 8024b32:	4ba3      	ldr	r3, [pc, #652]	@ (8024dc0 <_printf_float+0x2f4>)
 8024b34:	4252      	negs	r2, r2
 8024b36:	f7db fccb 	bl	80004d0 <__aeabi_dcmple>
 8024b3a:	2800      	cmp	r0, #0
 8024b3c:	d128      	bne.n	8024b90 <_printf_float+0xc4>
 8024b3e:	2200      	movs	r2, #0
 8024b40:	2300      	movs	r3, #0
 8024b42:	0030      	movs	r0, r6
 8024b44:	0039      	movs	r1, r7
 8024b46:	f7db fcb9 	bl	80004bc <__aeabi_dcmplt>
 8024b4a:	2800      	cmp	r0, #0
 8024b4c:	d003      	beq.n	8024b56 <_printf_float+0x8a>
 8024b4e:	002b      	movs	r3, r5
 8024b50:	222d      	movs	r2, #45	@ 0x2d
 8024b52:	3343      	adds	r3, #67	@ 0x43
 8024b54:	701a      	strb	r2, [r3, #0]
 8024b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b58:	4f9a      	ldr	r7, [pc, #616]	@ (8024dc4 <_printf_float+0x2f8>)
 8024b5a:	2b47      	cmp	r3, #71	@ 0x47
 8024b5c:	d800      	bhi.n	8024b60 <_printf_float+0x94>
 8024b5e:	4f9a      	ldr	r7, [pc, #616]	@ (8024dc8 <_printf_float+0x2fc>)
 8024b60:	2303      	movs	r3, #3
 8024b62:	2400      	movs	r4, #0
 8024b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024b66:	612b      	str	r3, [r5, #16]
 8024b68:	3301      	adds	r3, #1
 8024b6a:	439a      	bics	r2, r3
 8024b6c:	602a      	str	r2, [r5, #0]
 8024b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b70:	0029      	movs	r1, r5
 8024b72:	9300      	str	r3, [sp, #0]
 8024b74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b78:	aa15      	add	r2, sp, #84	@ 0x54
 8024b7a:	f000 f9e5 	bl	8024f48 <_printf_common>
 8024b7e:	3001      	adds	r0, #1
 8024b80:	d000      	beq.n	8024b84 <_printf_float+0xb8>
 8024b82:	e09e      	b.n	8024cc2 <_printf_float+0x1f6>
 8024b84:	2001      	movs	r0, #1
 8024b86:	4240      	negs	r0, r0
 8024b88:	b017      	add	sp, #92	@ 0x5c
 8024b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b8c:	3307      	adds	r3, #7
 8024b8e:	e7b8      	b.n	8024b02 <_printf_float+0x36>
 8024b90:	0032      	movs	r2, r6
 8024b92:	003b      	movs	r3, r7
 8024b94:	0030      	movs	r0, r6
 8024b96:	0039      	movs	r1, r7
 8024b98:	f7de fdcc 	bl	8003734 <__aeabi_dcmpun>
 8024b9c:	2800      	cmp	r0, #0
 8024b9e:	d00b      	beq.n	8024bb8 <_printf_float+0xec>
 8024ba0:	2f00      	cmp	r7, #0
 8024ba2:	da03      	bge.n	8024bac <_printf_float+0xe0>
 8024ba4:	002b      	movs	r3, r5
 8024ba6:	222d      	movs	r2, #45	@ 0x2d
 8024ba8:	3343      	adds	r3, #67	@ 0x43
 8024baa:	701a      	strb	r2, [r3, #0]
 8024bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024bae:	4f87      	ldr	r7, [pc, #540]	@ (8024dcc <_printf_float+0x300>)
 8024bb0:	2b47      	cmp	r3, #71	@ 0x47
 8024bb2:	d8d5      	bhi.n	8024b60 <_printf_float+0x94>
 8024bb4:	4f86      	ldr	r7, [pc, #536]	@ (8024dd0 <_printf_float+0x304>)
 8024bb6:	e7d3      	b.n	8024b60 <_printf_float+0x94>
 8024bb8:	2220      	movs	r2, #32
 8024bba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024bbc:	686b      	ldr	r3, [r5, #4]
 8024bbe:	4394      	bics	r4, r2
 8024bc0:	1c5a      	adds	r2, r3, #1
 8024bc2:	d146      	bne.n	8024c52 <_printf_float+0x186>
 8024bc4:	3307      	adds	r3, #7
 8024bc6:	606b      	str	r3, [r5, #4]
 8024bc8:	2380      	movs	r3, #128	@ 0x80
 8024bca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024bcc:	00db      	lsls	r3, r3, #3
 8024bce:	4313      	orrs	r3, r2
 8024bd0:	2200      	movs	r2, #0
 8024bd2:	602b      	str	r3, [r5, #0]
 8024bd4:	9206      	str	r2, [sp, #24]
 8024bd6:	aa14      	add	r2, sp, #80	@ 0x50
 8024bd8:	9205      	str	r2, [sp, #20]
 8024bda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024bdc:	a90a      	add	r1, sp, #40	@ 0x28
 8024bde:	9204      	str	r2, [sp, #16]
 8024be0:	aa13      	add	r2, sp, #76	@ 0x4c
 8024be2:	9203      	str	r2, [sp, #12]
 8024be4:	2223      	movs	r2, #35	@ 0x23
 8024be6:	1852      	adds	r2, r2, r1
 8024be8:	9202      	str	r2, [sp, #8]
 8024bea:	9301      	str	r3, [sp, #4]
 8024bec:	686b      	ldr	r3, [r5, #4]
 8024bee:	0032      	movs	r2, r6
 8024bf0:	9300      	str	r3, [sp, #0]
 8024bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024bf4:	003b      	movs	r3, r7
 8024bf6:	f7ff fec3 	bl	8024980 <__cvt>
 8024bfa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024bfc:	0007      	movs	r7, r0
 8024bfe:	2c47      	cmp	r4, #71	@ 0x47
 8024c00:	d12d      	bne.n	8024c5e <_printf_float+0x192>
 8024c02:	1cd3      	adds	r3, r2, #3
 8024c04:	db02      	blt.n	8024c0c <_printf_float+0x140>
 8024c06:	686b      	ldr	r3, [r5, #4]
 8024c08:	429a      	cmp	r2, r3
 8024c0a:	dd47      	ble.n	8024c9c <_printf_float+0x1d0>
 8024c0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c0e:	3b02      	subs	r3, #2
 8024c10:	b2db      	uxtb	r3, r3
 8024c12:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c14:	0028      	movs	r0, r5
 8024c16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024c18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024c1a:	3901      	subs	r1, #1
 8024c1c:	3050      	adds	r0, #80	@ 0x50
 8024c1e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024c20:	f7ff ff14 	bl	8024a4c <__exponent>
 8024c24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024c26:	0004      	movs	r4, r0
 8024c28:	1813      	adds	r3, r2, r0
 8024c2a:	612b      	str	r3, [r5, #16]
 8024c2c:	2a01      	cmp	r2, #1
 8024c2e:	dc02      	bgt.n	8024c36 <_printf_float+0x16a>
 8024c30:	682a      	ldr	r2, [r5, #0]
 8024c32:	07d2      	lsls	r2, r2, #31
 8024c34:	d501      	bpl.n	8024c3a <_printf_float+0x16e>
 8024c36:	3301      	adds	r3, #1
 8024c38:	612b      	str	r3, [r5, #16]
 8024c3a:	2323      	movs	r3, #35	@ 0x23
 8024c3c:	aa0a      	add	r2, sp, #40	@ 0x28
 8024c3e:	189b      	adds	r3, r3, r2
 8024c40:	781b      	ldrb	r3, [r3, #0]
 8024c42:	2b00      	cmp	r3, #0
 8024c44:	d100      	bne.n	8024c48 <_printf_float+0x17c>
 8024c46:	e792      	b.n	8024b6e <_printf_float+0xa2>
 8024c48:	002b      	movs	r3, r5
 8024c4a:	222d      	movs	r2, #45	@ 0x2d
 8024c4c:	3343      	adds	r3, #67	@ 0x43
 8024c4e:	701a      	strb	r2, [r3, #0]
 8024c50:	e78d      	b.n	8024b6e <_printf_float+0xa2>
 8024c52:	2c47      	cmp	r4, #71	@ 0x47
 8024c54:	d1b8      	bne.n	8024bc8 <_printf_float+0xfc>
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	d1b6      	bne.n	8024bc8 <_printf_float+0xfc>
 8024c5a:	3301      	adds	r3, #1
 8024c5c:	e7b3      	b.n	8024bc6 <_printf_float+0xfa>
 8024c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c60:	2b65      	cmp	r3, #101	@ 0x65
 8024c62:	d9d7      	bls.n	8024c14 <_printf_float+0x148>
 8024c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c66:	2b66      	cmp	r3, #102	@ 0x66
 8024c68:	d11a      	bne.n	8024ca0 <_printf_float+0x1d4>
 8024c6a:	686b      	ldr	r3, [r5, #4]
 8024c6c:	2a00      	cmp	r2, #0
 8024c6e:	dd09      	ble.n	8024c84 <_printf_float+0x1b8>
 8024c70:	612a      	str	r2, [r5, #16]
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d102      	bne.n	8024c7c <_printf_float+0x1b0>
 8024c76:	6829      	ldr	r1, [r5, #0]
 8024c78:	07c9      	lsls	r1, r1, #31
 8024c7a:	d50b      	bpl.n	8024c94 <_printf_float+0x1c8>
 8024c7c:	3301      	adds	r3, #1
 8024c7e:	189b      	adds	r3, r3, r2
 8024c80:	612b      	str	r3, [r5, #16]
 8024c82:	e007      	b.n	8024c94 <_printf_float+0x1c8>
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	d103      	bne.n	8024c90 <_printf_float+0x1c4>
 8024c88:	2201      	movs	r2, #1
 8024c8a:	6829      	ldr	r1, [r5, #0]
 8024c8c:	4211      	tst	r1, r2
 8024c8e:	d000      	beq.n	8024c92 <_printf_float+0x1c6>
 8024c90:	1c9a      	adds	r2, r3, #2
 8024c92:	612a      	str	r2, [r5, #16]
 8024c94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c96:	2400      	movs	r4, #0
 8024c98:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024c9a:	e7ce      	b.n	8024c3a <_printf_float+0x16e>
 8024c9c:	2367      	movs	r3, #103	@ 0x67
 8024c9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024ca0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024ca2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024ca4:	4299      	cmp	r1, r3
 8024ca6:	db06      	blt.n	8024cb6 <_printf_float+0x1ea>
 8024ca8:	682b      	ldr	r3, [r5, #0]
 8024caa:	6129      	str	r1, [r5, #16]
 8024cac:	07db      	lsls	r3, r3, #31
 8024cae:	d5f1      	bpl.n	8024c94 <_printf_float+0x1c8>
 8024cb0:	3101      	adds	r1, #1
 8024cb2:	6129      	str	r1, [r5, #16]
 8024cb4:	e7ee      	b.n	8024c94 <_printf_float+0x1c8>
 8024cb6:	2201      	movs	r2, #1
 8024cb8:	2900      	cmp	r1, #0
 8024cba:	dce0      	bgt.n	8024c7e <_printf_float+0x1b2>
 8024cbc:	1892      	adds	r2, r2, r2
 8024cbe:	1a52      	subs	r2, r2, r1
 8024cc0:	e7dd      	b.n	8024c7e <_printf_float+0x1b2>
 8024cc2:	682a      	ldr	r2, [r5, #0]
 8024cc4:	0553      	lsls	r3, r2, #21
 8024cc6:	d408      	bmi.n	8024cda <_printf_float+0x20e>
 8024cc8:	692b      	ldr	r3, [r5, #16]
 8024cca:	003a      	movs	r2, r7
 8024ccc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024cd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cd2:	47a0      	blx	r4
 8024cd4:	3001      	adds	r0, #1
 8024cd6:	d129      	bne.n	8024d2c <_printf_float+0x260>
 8024cd8:	e754      	b.n	8024b84 <_printf_float+0xb8>
 8024cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024cdc:	2b65      	cmp	r3, #101	@ 0x65
 8024cde:	d800      	bhi.n	8024ce2 <_printf_float+0x216>
 8024ce0:	e0db      	b.n	8024e9a <_printf_float+0x3ce>
 8024ce2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024ce4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	2300      	movs	r3, #0
 8024cea:	f7db fbe1 	bl	80004b0 <__aeabi_dcmpeq>
 8024cee:	2800      	cmp	r0, #0
 8024cf0:	d033      	beq.n	8024d5a <_printf_float+0x28e>
 8024cf2:	2301      	movs	r3, #1
 8024cf4:	4a37      	ldr	r2, [pc, #220]	@ (8024dd4 <_printf_float+0x308>)
 8024cf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024cf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024cfa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cfc:	47a0      	blx	r4
 8024cfe:	3001      	adds	r0, #1
 8024d00:	d100      	bne.n	8024d04 <_printf_float+0x238>
 8024d02:	e73f      	b.n	8024b84 <_printf_float+0xb8>
 8024d04:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024d06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d08:	42b3      	cmp	r3, r6
 8024d0a:	db02      	blt.n	8024d12 <_printf_float+0x246>
 8024d0c:	682b      	ldr	r3, [r5, #0]
 8024d0e:	07db      	lsls	r3, r3, #31
 8024d10:	d50c      	bpl.n	8024d2c <_printf_float+0x260>
 8024d12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024d18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d1c:	47a0      	blx	r4
 8024d1e:	2400      	movs	r4, #0
 8024d20:	3001      	adds	r0, #1
 8024d22:	d100      	bne.n	8024d26 <_printf_float+0x25a>
 8024d24:	e72e      	b.n	8024b84 <_printf_float+0xb8>
 8024d26:	1e73      	subs	r3, r6, #1
 8024d28:	42a3      	cmp	r3, r4
 8024d2a:	dc0a      	bgt.n	8024d42 <_printf_float+0x276>
 8024d2c:	682b      	ldr	r3, [r5, #0]
 8024d2e:	079b      	lsls	r3, r3, #30
 8024d30:	d500      	bpl.n	8024d34 <_printf_float+0x268>
 8024d32:	e106      	b.n	8024f42 <_printf_float+0x476>
 8024d34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024d36:	68e8      	ldr	r0, [r5, #12]
 8024d38:	4298      	cmp	r0, r3
 8024d3a:	db00      	blt.n	8024d3e <_printf_float+0x272>
 8024d3c:	e724      	b.n	8024b88 <_printf_float+0xbc>
 8024d3e:	0018      	movs	r0, r3
 8024d40:	e722      	b.n	8024b88 <_printf_float+0xbc>
 8024d42:	002a      	movs	r2, r5
 8024d44:	2301      	movs	r3, #1
 8024d46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024d4c:	321a      	adds	r2, #26
 8024d4e:	47b8      	blx	r7
 8024d50:	3001      	adds	r0, #1
 8024d52:	d100      	bne.n	8024d56 <_printf_float+0x28a>
 8024d54:	e716      	b.n	8024b84 <_printf_float+0xb8>
 8024d56:	3401      	adds	r4, #1
 8024d58:	e7e5      	b.n	8024d26 <_printf_float+0x25a>
 8024d5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	dc3b      	bgt.n	8024dd8 <_printf_float+0x30c>
 8024d60:	2301      	movs	r3, #1
 8024d62:	4a1c      	ldr	r2, [pc, #112]	@ (8024dd4 <_printf_float+0x308>)
 8024d64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d6a:	47a0      	blx	r4
 8024d6c:	3001      	adds	r0, #1
 8024d6e:	d100      	bne.n	8024d72 <_printf_float+0x2a6>
 8024d70:	e708      	b.n	8024b84 <_printf_float+0xb8>
 8024d72:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d76:	4333      	orrs	r3, r6
 8024d78:	d102      	bne.n	8024d80 <_printf_float+0x2b4>
 8024d7a:	682b      	ldr	r3, [r5, #0]
 8024d7c:	07db      	lsls	r3, r3, #31
 8024d7e:	d5d5      	bpl.n	8024d2c <_printf_float+0x260>
 8024d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024d84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d8a:	47a0      	blx	r4
 8024d8c:	2300      	movs	r3, #0
 8024d8e:	3001      	adds	r0, #1
 8024d90:	d100      	bne.n	8024d94 <_printf_float+0x2c8>
 8024d92:	e6f7      	b.n	8024b84 <_printf_float+0xb8>
 8024d94:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d9a:	425b      	negs	r3, r3
 8024d9c:	4293      	cmp	r3, r2
 8024d9e:	dc01      	bgt.n	8024da4 <_printf_float+0x2d8>
 8024da0:	0033      	movs	r3, r6
 8024da2:	e792      	b.n	8024cca <_printf_float+0x1fe>
 8024da4:	002a      	movs	r2, r5
 8024da6:	2301      	movs	r3, #1
 8024da8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024dae:	321a      	adds	r2, #26
 8024db0:	47a0      	blx	r4
 8024db2:	3001      	adds	r0, #1
 8024db4:	d100      	bne.n	8024db8 <_printf_float+0x2ec>
 8024db6:	e6e5      	b.n	8024b84 <_printf_float+0xb8>
 8024db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024dba:	3301      	adds	r3, #1
 8024dbc:	e7ea      	b.n	8024d94 <_printf_float+0x2c8>
 8024dbe:	46c0      	nop			@ (mov r8, r8)
 8024dc0:	7fefffff 	.word	0x7fefffff
 8024dc4:	0802e196 	.word	0x0802e196
 8024dc8:	0802e192 	.word	0x0802e192
 8024dcc:	0802e19e 	.word	0x0802e19e
 8024dd0:	0802e19a 	.word	0x0802e19a
 8024dd4:	0802e1a2 	.word	0x0802e1a2
 8024dd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024dda:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8024dde:	429e      	cmp	r6, r3
 8024de0:	dd00      	ble.n	8024de4 <_printf_float+0x318>
 8024de2:	001e      	movs	r6, r3
 8024de4:	2e00      	cmp	r6, #0
 8024de6:	dc31      	bgt.n	8024e4c <_printf_float+0x380>
 8024de8:	43f3      	mvns	r3, r6
 8024dea:	2400      	movs	r4, #0
 8024dec:	17db      	asrs	r3, r3, #31
 8024dee:	4033      	ands	r3, r6
 8024df0:	930e      	str	r3, [sp, #56]	@ 0x38
 8024df2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024df6:	1af3      	subs	r3, r6, r3
 8024df8:	42a3      	cmp	r3, r4
 8024dfa:	dc30      	bgt.n	8024e5e <_printf_float+0x392>
 8024dfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024dfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e00:	429a      	cmp	r2, r3
 8024e02:	dc38      	bgt.n	8024e76 <_printf_float+0x3aa>
 8024e04:	682b      	ldr	r3, [r5, #0]
 8024e06:	07db      	lsls	r3, r3, #31
 8024e08:	d435      	bmi.n	8024e76 <_printf_float+0x3aa>
 8024e0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e10:	1b9b      	subs	r3, r3, r6
 8024e12:	1b14      	subs	r4, r2, r4
 8024e14:	429c      	cmp	r4, r3
 8024e16:	dd00      	ble.n	8024e1a <_printf_float+0x34e>
 8024e18:	001c      	movs	r4, r3
 8024e1a:	2c00      	cmp	r4, #0
 8024e1c:	dc34      	bgt.n	8024e88 <_printf_float+0x3bc>
 8024e1e:	43e3      	mvns	r3, r4
 8024e20:	2600      	movs	r6, #0
 8024e22:	17db      	asrs	r3, r3, #31
 8024e24:	401c      	ands	r4, r3
 8024e26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024e28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024e2a:	1ad3      	subs	r3, r2, r3
 8024e2c:	1b1b      	subs	r3, r3, r4
 8024e2e:	42b3      	cmp	r3, r6
 8024e30:	dc00      	bgt.n	8024e34 <_printf_float+0x368>
 8024e32:	e77b      	b.n	8024d2c <_printf_float+0x260>
 8024e34:	002a      	movs	r2, r5
 8024e36:	2301      	movs	r3, #1
 8024e38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024e3e:	321a      	adds	r2, #26
 8024e40:	47b8      	blx	r7
 8024e42:	3001      	adds	r0, #1
 8024e44:	d100      	bne.n	8024e48 <_printf_float+0x37c>
 8024e46:	e69d      	b.n	8024b84 <_printf_float+0xb8>
 8024e48:	3601      	adds	r6, #1
 8024e4a:	e7ec      	b.n	8024e26 <_printf_float+0x35a>
 8024e4c:	0033      	movs	r3, r6
 8024e4e:	003a      	movs	r2, r7
 8024e50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024e56:	47a0      	blx	r4
 8024e58:	3001      	adds	r0, #1
 8024e5a:	d1c5      	bne.n	8024de8 <_printf_float+0x31c>
 8024e5c:	e692      	b.n	8024b84 <_printf_float+0xb8>
 8024e5e:	002a      	movs	r2, r5
 8024e60:	2301      	movs	r3, #1
 8024e62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e66:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e68:	321a      	adds	r2, #26
 8024e6a:	47b0      	blx	r6
 8024e6c:	3001      	adds	r0, #1
 8024e6e:	d100      	bne.n	8024e72 <_printf_float+0x3a6>
 8024e70:	e688      	b.n	8024b84 <_printf_float+0xb8>
 8024e72:	3401      	adds	r4, #1
 8024e74:	e7bd      	b.n	8024df2 <_printf_float+0x326>
 8024e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024e7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024e80:	47a0      	blx	r4
 8024e82:	3001      	adds	r0, #1
 8024e84:	d1c1      	bne.n	8024e0a <_printf_float+0x33e>
 8024e86:	e67d      	b.n	8024b84 <_printf_float+0xb8>
 8024e88:	19ba      	adds	r2, r7, r6
 8024e8a:	0023      	movs	r3, r4
 8024e8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e92:	47b0      	blx	r6
 8024e94:	3001      	adds	r0, #1
 8024e96:	d1c2      	bne.n	8024e1e <_printf_float+0x352>
 8024e98:	e674      	b.n	8024b84 <_printf_float+0xb8>
 8024e9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024e9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e9e:	2b01      	cmp	r3, #1
 8024ea0:	dc02      	bgt.n	8024ea8 <_printf_float+0x3dc>
 8024ea2:	2301      	movs	r3, #1
 8024ea4:	421a      	tst	r2, r3
 8024ea6:	d039      	beq.n	8024f1c <_printf_float+0x450>
 8024ea8:	2301      	movs	r3, #1
 8024eaa:	003a      	movs	r2, r7
 8024eac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024eb0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024eb2:	47b0      	blx	r6
 8024eb4:	3001      	adds	r0, #1
 8024eb6:	d100      	bne.n	8024eba <_printf_float+0x3ee>
 8024eb8:	e664      	b.n	8024b84 <_printf_float+0xb8>
 8024eba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024ebc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024ebe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024ec0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ec2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024ec4:	47b0      	blx	r6
 8024ec6:	3001      	adds	r0, #1
 8024ec8:	d100      	bne.n	8024ecc <_printf_float+0x400>
 8024eca:	e65b      	b.n	8024b84 <_printf_float+0xb8>
 8024ecc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024ece:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ed2:	2200      	movs	r2, #0
 8024ed4:	3b01      	subs	r3, #1
 8024ed6:	930c      	str	r3, [sp, #48]	@ 0x30
 8024ed8:	2300      	movs	r3, #0
 8024eda:	f7db fae9 	bl	80004b0 <__aeabi_dcmpeq>
 8024ede:	2800      	cmp	r0, #0
 8024ee0:	d11a      	bne.n	8024f18 <_printf_float+0x44c>
 8024ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ee4:	1c7a      	adds	r2, r7, #1
 8024ee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024ee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024eea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024eec:	47b0      	blx	r6
 8024eee:	3001      	adds	r0, #1
 8024ef0:	d10e      	bne.n	8024f10 <_printf_float+0x444>
 8024ef2:	e647      	b.n	8024b84 <_printf_float+0xb8>
 8024ef4:	002a      	movs	r2, r5
 8024ef6:	2301      	movs	r3, #1
 8024ef8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024efc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024efe:	321a      	adds	r2, #26
 8024f00:	47b8      	blx	r7
 8024f02:	3001      	adds	r0, #1
 8024f04:	d100      	bne.n	8024f08 <_printf_float+0x43c>
 8024f06:	e63d      	b.n	8024b84 <_printf_float+0xb8>
 8024f08:	3601      	adds	r6, #1
 8024f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f0c:	429e      	cmp	r6, r3
 8024f0e:	dbf1      	blt.n	8024ef4 <_printf_float+0x428>
 8024f10:	002a      	movs	r2, r5
 8024f12:	0023      	movs	r3, r4
 8024f14:	3250      	adds	r2, #80	@ 0x50
 8024f16:	e6d9      	b.n	8024ccc <_printf_float+0x200>
 8024f18:	2600      	movs	r6, #0
 8024f1a:	e7f6      	b.n	8024f0a <_printf_float+0x43e>
 8024f1c:	003a      	movs	r2, r7
 8024f1e:	e7e2      	b.n	8024ee6 <_printf_float+0x41a>
 8024f20:	002a      	movs	r2, r5
 8024f22:	2301      	movs	r3, #1
 8024f24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024f28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024f2a:	3219      	adds	r2, #25
 8024f2c:	47b0      	blx	r6
 8024f2e:	3001      	adds	r0, #1
 8024f30:	d100      	bne.n	8024f34 <_printf_float+0x468>
 8024f32:	e627      	b.n	8024b84 <_printf_float+0xb8>
 8024f34:	3401      	adds	r4, #1
 8024f36:	68eb      	ldr	r3, [r5, #12]
 8024f38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024f3a:	1a9b      	subs	r3, r3, r2
 8024f3c:	42a3      	cmp	r3, r4
 8024f3e:	dcef      	bgt.n	8024f20 <_printf_float+0x454>
 8024f40:	e6f8      	b.n	8024d34 <_printf_float+0x268>
 8024f42:	2400      	movs	r4, #0
 8024f44:	e7f7      	b.n	8024f36 <_printf_float+0x46a>
 8024f46:	46c0      	nop			@ (mov r8, r8)

08024f48 <_printf_common>:
 8024f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024f4a:	0016      	movs	r6, r2
 8024f4c:	9301      	str	r3, [sp, #4]
 8024f4e:	688a      	ldr	r2, [r1, #8]
 8024f50:	690b      	ldr	r3, [r1, #16]
 8024f52:	000c      	movs	r4, r1
 8024f54:	9000      	str	r0, [sp, #0]
 8024f56:	4293      	cmp	r3, r2
 8024f58:	da00      	bge.n	8024f5c <_printf_common+0x14>
 8024f5a:	0013      	movs	r3, r2
 8024f5c:	0022      	movs	r2, r4
 8024f5e:	6033      	str	r3, [r6, #0]
 8024f60:	3243      	adds	r2, #67	@ 0x43
 8024f62:	7812      	ldrb	r2, [r2, #0]
 8024f64:	2a00      	cmp	r2, #0
 8024f66:	d001      	beq.n	8024f6c <_printf_common+0x24>
 8024f68:	3301      	adds	r3, #1
 8024f6a:	6033      	str	r3, [r6, #0]
 8024f6c:	6823      	ldr	r3, [r4, #0]
 8024f6e:	069b      	lsls	r3, r3, #26
 8024f70:	d502      	bpl.n	8024f78 <_printf_common+0x30>
 8024f72:	6833      	ldr	r3, [r6, #0]
 8024f74:	3302      	adds	r3, #2
 8024f76:	6033      	str	r3, [r6, #0]
 8024f78:	6822      	ldr	r2, [r4, #0]
 8024f7a:	2306      	movs	r3, #6
 8024f7c:	0015      	movs	r5, r2
 8024f7e:	401d      	ands	r5, r3
 8024f80:	421a      	tst	r2, r3
 8024f82:	d027      	beq.n	8024fd4 <_printf_common+0x8c>
 8024f84:	0023      	movs	r3, r4
 8024f86:	3343      	adds	r3, #67	@ 0x43
 8024f88:	781b      	ldrb	r3, [r3, #0]
 8024f8a:	1e5a      	subs	r2, r3, #1
 8024f8c:	4193      	sbcs	r3, r2
 8024f8e:	6822      	ldr	r2, [r4, #0]
 8024f90:	0692      	lsls	r2, r2, #26
 8024f92:	d430      	bmi.n	8024ff6 <_printf_common+0xae>
 8024f94:	0022      	movs	r2, r4
 8024f96:	9901      	ldr	r1, [sp, #4]
 8024f98:	9800      	ldr	r0, [sp, #0]
 8024f9a:	9d08      	ldr	r5, [sp, #32]
 8024f9c:	3243      	adds	r2, #67	@ 0x43
 8024f9e:	47a8      	blx	r5
 8024fa0:	3001      	adds	r0, #1
 8024fa2:	d025      	beq.n	8024ff0 <_printf_common+0xa8>
 8024fa4:	2206      	movs	r2, #6
 8024fa6:	6823      	ldr	r3, [r4, #0]
 8024fa8:	2500      	movs	r5, #0
 8024faa:	4013      	ands	r3, r2
 8024fac:	2b04      	cmp	r3, #4
 8024fae:	d105      	bne.n	8024fbc <_printf_common+0x74>
 8024fb0:	6833      	ldr	r3, [r6, #0]
 8024fb2:	68e5      	ldr	r5, [r4, #12]
 8024fb4:	1aed      	subs	r5, r5, r3
 8024fb6:	43eb      	mvns	r3, r5
 8024fb8:	17db      	asrs	r3, r3, #31
 8024fba:	401d      	ands	r5, r3
 8024fbc:	68a3      	ldr	r3, [r4, #8]
 8024fbe:	6922      	ldr	r2, [r4, #16]
 8024fc0:	4293      	cmp	r3, r2
 8024fc2:	dd01      	ble.n	8024fc8 <_printf_common+0x80>
 8024fc4:	1a9b      	subs	r3, r3, r2
 8024fc6:	18ed      	adds	r5, r5, r3
 8024fc8:	2600      	movs	r6, #0
 8024fca:	42b5      	cmp	r5, r6
 8024fcc:	d120      	bne.n	8025010 <_printf_common+0xc8>
 8024fce:	2000      	movs	r0, #0
 8024fd0:	e010      	b.n	8024ff4 <_printf_common+0xac>
 8024fd2:	3501      	adds	r5, #1
 8024fd4:	68e3      	ldr	r3, [r4, #12]
 8024fd6:	6832      	ldr	r2, [r6, #0]
 8024fd8:	1a9b      	subs	r3, r3, r2
 8024fda:	42ab      	cmp	r3, r5
 8024fdc:	ddd2      	ble.n	8024f84 <_printf_common+0x3c>
 8024fde:	0022      	movs	r2, r4
 8024fe0:	2301      	movs	r3, #1
 8024fe2:	9901      	ldr	r1, [sp, #4]
 8024fe4:	9800      	ldr	r0, [sp, #0]
 8024fe6:	9f08      	ldr	r7, [sp, #32]
 8024fe8:	3219      	adds	r2, #25
 8024fea:	47b8      	blx	r7
 8024fec:	3001      	adds	r0, #1
 8024fee:	d1f0      	bne.n	8024fd2 <_printf_common+0x8a>
 8024ff0:	2001      	movs	r0, #1
 8024ff2:	4240      	negs	r0, r0
 8024ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024ff6:	2030      	movs	r0, #48	@ 0x30
 8024ff8:	18e1      	adds	r1, r4, r3
 8024ffa:	3143      	adds	r1, #67	@ 0x43
 8024ffc:	7008      	strb	r0, [r1, #0]
 8024ffe:	0021      	movs	r1, r4
 8025000:	1c5a      	adds	r2, r3, #1
 8025002:	3145      	adds	r1, #69	@ 0x45
 8025004:	7809      	ldrb	r1, [r1, #0]
 8025006:	18a2      	adds	r2, r4, r2
 8025008:	3243      	adds	r2, #67	@ 0x43
 802500a:	3302      	adds	r3, #2
 802500c:	7011      	strb	r1, [r2, #0]
 802500e:	e7c1      	b.n	8024f94 <_printf_common+0x4c>
 8025010:	0022      	movs	r2, r4
 8025012:	2301      	movs	r3, #1
 8025014:	9901      	ldr	r1, [sp, #4]
 8025016:	9800      	ldr	r0, [sp, #0]
 8025018:	9f08      	ldr	r7, [sp, #32]
 802501a:	321a      	adds	r2, #26
 802501c:	47b8      	blx	r7
 802501e:	3001      	adds	r0, #1
 8025020:	d0e6      	beq.n	8024ff0 <_printf_common+0xa8>
 8025022:	3601      	adds	r6, #1
 8025024:	e7d1      	b.n	8024fca <_printf_common+0x82>
	...

08025028 <_printf_i>:
 8025028:	b5f0      	push	{r4, r5, r6, r7, lr}
 802502a:	b08b      	sub	sp, #44	@ 0x2c
 802502c:	9206      	str	r2, [sp, #24]
 802502e:	000a      	movs	r2, r1
 8025030:	3243      	adds	r2, #67	@ 0x43
 8025032:	9307      	str	r3, [sp, #28]
 8025034:	9005      	str	r0, [sp, #20]
 8025036:	9203      	str	r2, [sp, #12]
 8025038:	7e0a      	ldrb	r2, [r1, #24]
 802503a:	000c      	movs	r4, r1
 802503c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802503e:	2a78      	cmp	r2, #120	@ 0x78
 8025040:	d809      	bhi.n	8025056 <_printf_i+0x2e>
 8025042:	2a62      	cmp	r2, #98	@ 0x62
 8025044:	d80b      	bhi.n	802505e <_printf_i+0x36>
 8025046:	2a00      	cmp	r2, #0
 8025048:	d100      	bne.n	802504c <_printf_i+0x24>
 802504a:	e0ba      	b.n	80251c2 <_printf_i+0x19a>
 802504c:	497a      	ldr	r1, [pc, #488]	@ (8025238 <_printf_i+0x210>)
 802504e:	9104      	str	r1, [sp, #16]
 8025050:	2a58      	cmp	r2, #88	@ 0x58
 8025052:	d100      	bne.n	8025056 <_printf_i+0x2e>
 8025054:	e08e      	b.n	8025174 <_printf_i+0x14c>
 8025056:	0025      	movs	r5, r4
 8025058:	3542      	adds	r5, #66	@ 0x42
 802505a:	702a      	strb	r2, [r5, #0]
 802505c:	e022      	b.n	80250a4 <_printf_i+0x7c>
 802505e:	0010      	movs	r0, r2
 8025060:	3863      	subs	r0, #99	@ 0x63
 8025062:	2815      	cmp	r0, #21
 8025064:	d8f7      	bhi.n	8025056 <_printf_i+0x2e>
 8025066:	f7db f893 	bl	8000190 <__gnu_thumb1_case_shi>
 802506a:	0016      	.short	0x0016
 802506c:	fff6001f 	.word	0xfff6001f
 8025070:	fff6fff6 	.word	0xfff6fff6
 8025074:	001ffff6 	.word	0x001ffff6
 8025078:	fff6fff6 	.word	0xfff6fff6
 802507c:	fff6fff6 	.word	0xfff6fff6
 8025080:	0036009f 	.word	0x0036009f
 8025084:	fff6007e 	.word	0xfff6007e
 8025088:	00b0fff6 	.word	0x00b0fff6
 802508c:	0036fff6 	.word	0x0036fff6
 8025090:	fff6fff6 	.word	0xfff6fff6
 8025094:	0082      	.short	0x0082
 8025096:	0025      	movs	r5, r4
 8025098:	681a      	ldr	r2, [r3, #0]
 802509a:	3542      	adds	r5, #66	@ 0x42
 802509c:	1d11      	adds	r1, r2, #4
 802509e:	6019      	str	r1, [r3, #0]
 80250a0:	6813      	ldr	r3, [r2, #0]
 80250a2:	702b      	strb	r3, [r5, #0]
 80250a4:	2301      	movs	r3, #1
 80250a6:	e09e      	b.n	80251e6 <_printf_i+0x1be>
 80250a8:	6818      	ldr	r0, [r3, #0]
 80250aa:	6809      	ldr	r1, [r1, #0]
 80250ac:	1d02      	adds	r2, r0, #4
 80250ae:	060d      	lsls	r5, r1, #24
 80250b0:	d50b      	bpl.n	80250ca <_printf_i+0xa2>
 80250b2:	6806      	ldr	r6, [r0, #0]
 80250b4:	601a      	str	r2, [r3, #0]
 80250b6:	2e00      	cmp	r6, #0
 80250b8:	da03      	bge.n	80250c2 <_printf_i+0x9a>
 80250ba:	232d      	movs	r3, #45	@ 0x2d
 80250bc:	9a03      	ldr	r2, [sp, #12]
 80250be:	4276      	negs	r6, r6
 80250c0:	7013      	strb	r3, [r2, #0]
 80250c2:	4b5d      	ldr	r3, [pc, #372]	@ (8025238 <_printf_i+0x210>)
 80250c4:	270a      	movs	r7, #10
 80250c6:	9304      	str	r3, [sp, #16]
 80250c8:	e018      	b.n	80250fc <_printf_i+0xd4>
 80250ca:	6806      	ldr	r6, [r0, #0]
 80250cc:	601a      	str	r2, [r3, #0]
 80250ce:	0649      	lsls	r1, r1, #25
 80250d0:	d5f1      	bpl.n	80250b6 <_printf_i+0x8e>
 80250d2:	b236      	sxth	r6, r6
 80250d4:	e7ef      	b.n	80250b6 <_printf_i+0x8e>
 80250d6:	6808      	ldr	r0, [r1, #0]
 80250d8:	6819      	ldr	r1, [r3, #0]
 80250da:	c940      	ldmia	r1!, {r6}
 80250dc:	0605      	lsls	r5, r0, #24
 80250de:	d402      	bmi.n	80250e6 <_printf_i+0xbe>
 80250e0:	0640      	lsls	r0, r0, #25
 80250e2:	d500      	bpl.n	80250e6 <_printf_i+0xbe>
 80250e4:	b2b6      	uxth	r6, r6
 80250e6:	6019      	str	r1, [r3, #0]
 80250e8:	4b53      	ldr	r3, [pc, #332]	@ (8025238 <_printf_i+0x210>)
 80250ea:	270a      	movs	r7, #10
 80250ec:	9304      	str	r3, [sp, #16]
 80250ee:	2a6f      	cmp	r2, #111	@ 0x6f
 80250f0:	d100      	bne.n	80250f4 <_printf_i+0xcc>
 80250f2:	3f02      	subs	r7, #2
 80250f4:	0023      	movs	r3, r4
 80250f6:	2200      	movs	r2, #0
 80250f8:	3343      	adds	r3, #67	@ 0x43
 80250fa:	701a      	strb	r2, [r3, #0]
 80250fc:	6863      	ldr	r3, [r4, #4]
 80250fe:	60a3      	str	r3, [r4, #8]
 8025100:	2b00      	cmp	r3, #0
 8025102:	db06      	blt.n	8025112 <_printf_i+0xea>
 8025104:	2104      	movs	r1, #4
 8025106:	6822      	ldr	r2, [r4, #0]
 8025108:	9d03      	ldr	r5, [sp, #12]
 802510a:	438a      	bics	r2, r1
 802510c:	6022      	str	r2, [r4, #0]
 802510e:	4333      	orrs	r3, r6
 8025110:	d00c      	beq.n	802512c <_printf_i+0x104>
 8025112:	9d03      	ldr	r5, [sp, #12]
 8025114:	0030      	movs	r0, r6
 8025116:	0039      	movs	r1, r7
 8025118:	f7db f8ca 	bl	80002b0 <__aeabi_uidivmod>
 802511c:	9b04      	ldr	r3, [sp, #16]
 802511e:	3d01      	subs	r5, #1
 8025120:	5c5b      	ldrb	r3, [r3, r1]
 8025122:	702b      	strb	r3, [r5, #0]
 8025124:	0033      	movs	r3, r6
 8025126:	0006      	movs	r6, r0
 8025128:	429f      	cmp	r7, r3
 802512a:	d9f3      	bls.n	8025114 <_printf_i+0xec>
 802512c:	2f08      	cmp	r7, #8
 802512e:	d109      	bne.n	8025144 <_printf_i+0x11c>
 8025130:	6823      	ldr	r3, [r4, #0]
 8025132:	07db      	lsls	r3, r3, #31
 8025134:	d506      	bpl.n	8025144 <_printf_i+0x11c>
 8025136:	6862      	ldr	r2, [r4, #4]
 8025138:	6923      	ldr	r3, [r4, #16]
 802513a:	429a      	cmp	r2, r3
 802513c:	dc02      	bgt.n	8025144 <_printf_i+0x11c>
 802513e:	2330      	movs	r3, #48	@ 0x30
 8025140:	3d01      	subs	r5, #1
 8025142:	702b      	strb	r3, [r5, #0]
 8025144:	9b03      	ldr	r3, [sp, #12]
 8025146:	1b5b      	subs	r3, r3, r5
 8025148:	6123      	str	r3, [r4, #16]
 802514a:	9b07      	ldr	r3, [sp, #28]
 802514c:	0021      	movs	r1, r4
 802514e:	9300      	str	r3, [sp, #0]
 8025150:	9805      	ldr	r0, [sp, #20]
 8025152:	9b06      	ldr	r3, [sp, #24]
 8025154:	aa09      	add	r2, sp, #36	@ 0x24
 8025156:	f7ff fef7 	bl	8024f48 <_printf_common>
 802515a:	3001      	adds	r0, #1
 802515c:	d148      	bne.n	80251f0 <_printf_i+0x1c8>
 802515e:	2001      	movs	r0, #1
 8025160:	4240      	negs	r0, r0
 8025162:	b00b      	add	sp, #44	@ 0x2c
 8025164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025166:	2220      	movs	r2, #32
 8025168:	6809      	ldr	r1, [r1, #0]
 802516a:	430a      	orrs	r2, r1
 802516c:	6022      	str	r2, [r4, #0]
 802516e:	2278      	movs	r2, #120	@ 0x78
 8025170:	4932      	ldr	r1, [pc, #200]	@ (802523c <_printf_i+0x214>)
 8025172:	9104      	str	r1, [sp, #16]
 8025174:	0021      	movs	r1, r4
 8025176:	3145      	adds	r1, #69	@ 0x45
 8025178:	700a      	strb	r2, [r1, #0]
 802517a:	6819      	ldr	r1, [r3, #0]
 802517c:	6822      	ldr	r2, [r4, #0]
 802517e:	c940      	ldmia	r1!, {r6}
 8025180:	0610      	lsls	r0, r2, #24
 8025182:	d402      	bmi.n	802518a <_printf_i+0x162>
 8025184:	0650      	lsls	r0, r2, #25
 8025186:	d500      	bpl.n	802518a <_printf_i+0x162>
 8025188:	b2b6      	uxth	r6, r6
 802518a:	6019      	str	r1, [r3, #0]
 802518c:	07d3      	lsls	r3, r2, #31
 802518e:	d502      	bpl.n	8025196 <_printf_i+0x16e>
 8025190:	2320      	movs	r3, #32
 8025192:	4313      	orrs	r3, r2
 8025194:	6023      	str	r3, [r4, #0]
 8025196:	2e00      	cmp	r6, #0
 8025198:	d001      	beq.n	802519e <_printf_i+0x176>
 802519a:	2710      	movs	r7, #16
 802519c:	e7aa      	b.n	80250f4 <_printf_i+0xcc>
 802519e:	2220      	movs	r2, #32
 80251a0:	6823      	ldr	r3, [r4, #0]
 80251a2:	4393      	bics	r3, r2
 80251a4:	6023      	str	r3, [r4, #0]
 80251a6:	e7f8      	b.n	802519a <_printf_i+0x172>
 80251a8:	681a      	ldr	r2, [r3, #0]
 80251aa:	680d      	ldr	r5, [r1, #0]
 80251ac:	1d10      	adds	r0, r2, #4
 80251ae:	6949      	ldr	r1, [r1, #20]
 80251b0:	6018      	str	r0, [r3, #0]
 80251b2:	6813      	ldr	r3, [r2, #0]
 80251b4:	062e      	lsls	r6, r5, #24
 80251b6:	d501      	bpl.n	80251bc <_printf_i+0x194>
 80251b8:	6019      	str	r1, [r3, #0]
 80251ba:	e002      	b.n	80251c2 <_printf_i+0x19a>
 80251bc:	066d      	lsls	r5, r5, #25
 80251be:	d5fb      	bpl.n	80251b8 <_printf_i+0x190>
 80251c0:	8019      	strh	r1, [r3, #0]
 80251c2:	2300      	movs	r3, #0
 80251c4:	9d03      	ldr	r5, [sp, #12]
 80251c6:	6123      	str	r3, [r4, #16]
 80251c8:	e7bf      	b.n	802514a <_printf_i+0x122>
 80251ca:	681a      	ldr	r2, [r3, #0]
 80251cc:	1d11      	adds	r1, r2, #4
 80251ce:	6019      	str	r1, [r3, #0]
 80251d0:	6815      	ldr	r5, [r2, #0]
 80251d2:	2100      	movs	r1, #0
 80251d4:	0028      	movs	r0, r5
 80251d6:	6862      	ldr	r2, [r4, #4]
 80251d8:	f000 fba1 	bl	802591e <memchr>
 80251dc:	2800      	cmp	r0, #0
 80251de:	d001      	beq.n	80251e4 <_printf_i+0x1bc>
 80251e0:	1b40      	subs	r0, r0, r5
 80251e2:	6060      	str	r0, [r4, #4]
 80251e4:	6863      	ldr	r3, [r4, #4]
 80251e6:	6123      	str	r3, [r4, #16]
 80251e8:	2300      	movs	r3, #0
 80251ea:	9a03      	ldr	r2, [sp, #12]
 80251ec:	7013      	strb	r3, [r2, #0]
 80251ee:	e7ac      	b.n	802514a <_printf_i+0x122>
 80251f0:	002a      	movs	r2, r5
 80251f2:	6923      	ldr	r3, [r4, #16]
 80251f4:	9906      	ldr	r1, [sp, #24]
 80251f6:	9805      	ldr	r0, [sp, #20]
 80251f8:	9d07      	ldr	r5, [sp, #28]
 80251fa:	47a8      	blx	r5
 80251fc:	3001      	adds	r0, #1
 80251fe:	d0ae      	beq.n	802515e <_printf_i+0x136>
 8025200:	6823      	ldr	r3, [r4, #0]
 8025202:	079b      	lsls	r3, r3, #30
 8025204:	d415      	bmi.n	8025232 <_printf_i+0x20a>
 8025206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025208:	68e0      	ldr	r0, [r4, #12]
 802520a:	4298      	cmp	r0, r3
 802520c:	daa9      	bge.n	8025162 <_printf_i+0x13a>
 802520e:	0018      	movs	r0, r3
 8025210:	e7a7      	b.n	8025162 <_printf_i+0x13a>
 8025212:	0022      	movs	r2, r4
 8025214:	2301      	movs	r3, #1
 8025216:	9906      	ldr	r1, [sp, #24]
 8025218:	9805      	ldr	r0, [sp, #20]
 802521a:	9e07      	ldr	r6, [sp, #28]
 802521c:	3219      	adds	r2, #25
 802521e:	47b0      	blx	r6
 8025220:	3001      	adds	r0, #1
 8025222:	d09c      	beq.n	802515e <_printf_i+0x136>
 8025224:	3501      	adds	r5, #1
 8025226:	68e3      	ldr	r3, [r4, #12]
 8025228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802522a:	1a9b      	subs	r3, r3, r2
 802522c:	42ab      	cmp	r3, r5
 802522e:	dcf0      	bgt.n	8025212 <_printf_i+0x1ea>
 8025230:	e7e9      	b.n	8025206 <_printf_i+0x1de>
 8025232:	2500      	movs	r5, #0
 8025234:	e7f7      	b.n	8025226 <_printf_i+0x1fe>
 8025236:	46c0      	nop			@ (mov r8, r8)
 8025238:	0802e1a4 	.word	0x0802e1a4
 802523c:	0802e1b5 	.word	0x0802e1b5

08025240 <std>:
 8025240:	2300      	movs	r3, #0
 8025242:	b510      	push	{r4, lr}
 8025244:	0004      	movs	r4, r0
 8025246:	6003      	str	r3, [r0, #0]
 8025248:	6043      	str	r3, [r0, #4]
 802524a:	6083      	str	r3, [r0, #8]
 802524c:	8181      	strh	r1, [r0, #12]
 802524e:	6643      	str	r3, [r0, #100]	@ 0x64
 8025250:	81c2      	strh	r2, [r0, #14]
 8025252:	6103      	str	r3, [r0, #16]
 8025254:	6143      	str	r3, [r0, #20]
 8025256:	6183      	str	r3, [r0, #24]
 8025258:	0019      	movs	r1, r3
 802525a:	2208      	movs	r2, #8
 802525c:	305c      	adds	r0, #92	@ 0x5c
 802525e:	f000 fa8d 	bl	802577c <memset>
 8025262:	4b0b      	ldr	r3, [pc, #44]	@ (8025290 <std+0x50>)
 8025264:	6224      	str	r4, [r4, #32]
 8025266:	6263      	str	r3, [r4, #36]	@ 0x24
 8025268:	4b0a      	ldr	r3, [pc, #40]	@ (8025294 <std+0x54>)
 802526a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802526c:	4b0a      	ldr	r3, [pc, #40]	@ (8025298 <std+0x58>)
 802526e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025270:	4b0a      	ldr	r3, [pc, #40]	@ (802529c <std+0x5c>)
 8025272:	6323      	str	r3, [r4, #48]	@ 0x30
 8025274:	4b0a      	ldr	r3, [pc, #40]	@ (80252a0 <std+0x60>)
 8025276:	429c      	cmp	r4, r3
 8025278:	d005      	beq.n	8025286 <std+0x46>
 802527a:	4b0a      	ldr	r3, [pc, #40]	@ (80252a4 <std+0x64>)
 802527c:	429c      	cmp	r4, r3
 802527e:	d002      	beq.n	8025286 <std+0x46>
 8025280:	4b09      	ldr	r3, [pc, #36]	@ (80252a8 <std+0x68>)
 8025282:	429c      	cmp	r4, r3
 8025284:	d103      	bne.n	802528e <std+0x4e>
 8025286:	0020      	movs	r0, r4
 8025288:	3058      	adds	r0, #88	@ 0x58
 802528a:	f000 fb45 	bl	8025918 <__retarget_lock_init_recursive>
 802528e:	bd10      	pop	{r4, pc}
 8025290:	080254ed 	.word	0x080254ed
 8025294:	08025515 	.word	0x08025515
 8025298:	0802554d 	.word	0x0802554d
 802529c:	08025579 	.word	0x08025579
 80252a0:	200034c8 	.word	0x200034c8
 80252a4:	20003530 	.word	0x20003530
 80252a8:	20003598 	.word	0x20003598

080252ac <stdio_exit_handler>:
 80252ac:	b510      	push	{r4, lr}
 80252ae:	4a03      	ldr	r2, [pc, #12]	@ (80252bc <stdio_exit_handler+0x10>)
 80252b0:	4903      	ldr	r1, [pc, #12]	@ (80252c0 <stdio_exit_handler+0x14>)
 80252b2:	4804      	ldr	r0, [pc, #16]	@ (80252c4 <stdio_exit_handler+0x18>)
 80252b4:	f000 f86c 	bl	8025390 <_fwalk_sglue>
 80252b8:	bd10      	pop	{r4, pc}
 80252ba:	46c0      	nop			@ (mov r8, r8)
 80252bc:	20000268 	.word	0x20000268
 80252c0:	08027f15 	.word	0x08027f15
 80252c4:	200003e4 	.word	0x200003e4

080252c8 <cleanup_stdio>:
 80252c8:	6841      	ldr	r1, [r0, #4]
 80252ca:	4b0b      	ldr	r3, [pc, #44]	@ (80252f8 <cleanup_stdio+0x30>)
 80252cc:	b510      	push	{r4, lr}
 80252ce:	0004      	movs	r4, r0
 80252d0:	4299      	cmp	r1, r3
 80252d2:	d001      	beq.n	80252d8 <cleanup_stdio+0x10>
 80252d4:	f002 fe1e 	bl	8027f14 <_fflush_r>
 80252d8:	68a1      	ldr	r1, [r4, #8]
 80252da:	4b08      	ldr	r3, [pc, #32]	@ (80252fc <cleanup_stdio+0x34>)
 80252dc:	4299      	cmp	r1, r3
 80252de:	d002      	beq.n	80252e6 <cleanup_stdio+0x1e>
 80252e0:	0020      	movs	r0, r4
 80252e2:	f002 fe17 	bl	8027f14 <_fflush_r>
 80252e6:	68e1      	ldr	r1, [r4, #12]
 80252e8:	4b05      	ldr	r3, [pc, #20]	@ (8025300 <cleanup_stdio+0x38>)
 80252ea:	4299      	cmp	r1, r3
 80252ec:	d002      	beq.n	80252f4 <cleanup_stdio+0x2c>
 80252ee:	0020      	movs	r0, r4
 80252f0:	f002 fe10 	bl	8027f14 <_fflush_r>
 80252f4:	bd10      	pop	{r4, pc}
 80252f6:	46c0      	nop			@ (mov r8, r8)
 80252f8:	200034c8 	.word	0x200034c8
 80252fc:	20003530 	.word	0x20003530
 8025300:	20003598 	.word	0x20003598

08025304 <global_stdio_init.part.0>:
 8025304:	b510      	push	{r4, lr}
 8025306:	4b09      	ldr	r3, [pc, #36]	@ (802532c <global_stdio_init.part.0+0x28>)
 8025308:	4a09      	ldr	r2, [pc, #36]	@ (8025330 <global_stdio_init.part.0+0x2c>)
 802530a:	2104      	movs	r1, #4
 802530c:	601a      	str	r2, [r3, #0]
 802530e:	4809      	ldr	r0, [pc, #36]	@ (8025334 <global_stdio_init.part.0+0x30>)
 8025310:	2200      	movs	r2, #0
 8025312:	f7ff ff95 	bl	8025240 <std>
 8025316:	2201      	movs	r2, #1
 8025318:	2109      	movs	r1, #9
 802531a:	4807      	ldr	r0, [pc, #28]	@ (8025338 <global_stdio_init.part.0+0x34>)
 802531c:	f7ff ff90 	bl	8025240 <std>
 8025320:	2202      	movs	r2, #2
 8025322:	2112      	movs	r1, #18
 8025324:	4805      	ldr	r0, [pc, #20]	@ (802533c <global_stdio_init.part.0+0x38>)
 8025326:	f7ff ff8b 	bl	8025240 <std>
 802532a:	bd10      	pop	{r4, pc}
 802532c:	20003600 	.word	0x20003600
 8025330:	080252ad 	.word	0x080252ad
 8025334:	200034c8 	.word	0x200034c8
 8025338:	20003530 	.word	0x20003530
 802533c:	20003598 	.word	0x20003598

08025340 <__sfp_lock_acquire>:
 8025340:	b510      	push	{r4, lr}
 8025342:	4802      	ldr	r0, [pc, #8]	@ (802534c <__sfp_lock_acquire+0xc>)
 8025344:	f000 fae9 	bl	802591a <__retarget_lock_acquire_recursive>
 8025348:	bd10      	pop	{r4, pc}
 802534a:	46c0      	nop			@ (mov r8, r8)
 802534c:	20003609 	.word	0x20003609

08025350 <__sfp_lock_release>:
 8025350:	b510      	push	{r4, lr}
 8025352:	4802      	ldr	r0, [pc, #8]	@ (802535c <__sfp_lock_release+0xc>)
 8025354:	f000 fae2 	bl	802591c <__retarget_lock_release_recursive>
 8025358:	bd10      	pop	{r4, pc}
 802535a:	46c0      	nop			@ (mov r8, r8)
 802535c:	20003609 	.word	0x20003609

08025360 <__sinit>:
 8025360:	b510      	push	{r4, lr}
 8025362:	0004      	movs	r4, r0
 8025364:	f7ff ffec 	bl	8025340 <__sfp_lock_acquire>
 8025368:	6a23      	ldr	r3, [r4, #32]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d002      	beq.n	8025374 <__sinit+0x14>
 802536e:	f7ff ffef 	bl	8025350 <__sfp_lock_release>
 8025372:	bd10      	pop	{r4, pc}
 8025374:	4b04      	ldr	r3, [pc, #16]	@ (8025388 <__sinit+0x28>)
 8025376:	6223      	str	r3, [r4, #32]
 8025378:	4b04      	ldr	r3, [pc, #16]	@ (802538c <__sinit+0x2c>)
 802537a:	681b      	ldr	r3, [r3, #0]
 802537c:	2b00      	cmp	r3, #0
 802537e:	d1f6      	bne.n	802536e <__sinit+0xe>
 8025380:	f7ff ffc0 	bl	8025304 <global_stdio_init.part.0>
 8025384:	e7f3      	b.n	802536e <__sinit+0xe>
 8025386:	46c0      	nop			@ (mov r8, r8)
 8025388:	080252c9 	.word	0x080252c9
 802538c:	20003600 	.word	0x20003600

08025390 <_fwalk_sglue>:
 8025390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025392:	0014      	movs	r4, r2
 8025394:	2600      	movs	r6, #0
 8025396:	9000      	str	r0, [sp, #0]
 8025398:	9101      	str	r1, [sp, #4]
 802539a:	68a5      	ldr	r5, [r4, #8]
 802539c:	6867      	ldr	r7, [r4, #4]
 802539e:	3f01      	subs	r7, #1
 80253a0:	d504      	bpl.n	80253ac <_fwalk_sglue+0x1c>
 80253a2:	6824      	ldr	r4, [r4, #0]
 80253a4:	2c00      	cmp	r4, #0
 80253a6:	d1f8      	bne.n	802539a <_fwalk_sglue+0xa>
 80253a8:	0030      	movs	r0, r6
 80253aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80253ac:	89ab      	ldrh	r3, [r5, #12]
 80253ae:	2b01      	cmp	r3, #1
 80253b0:	d908      	bls.n	80253c4 <_fwalk_sglue+0x34>
 80253b2:	220e      	movs	r2, #14
 80253b4:	5eab      	ldrsh	r3, [r5, r2]
 80253b6:	3301      	adds	r3, #1
 80253b8:	d004      	beq.n	80253c4 <_fwalk_sglue+0x34>
 80253ba:	0029      	movs	r1, r5
 80253bc:	9800      	ldr	r0, [sp, #0]
 80253be:	9b01      	ldr	r3, [sp, #4]
 80253c0:	4798      	blx	r3
 80253c2:	4306      	orrs	r6, r0
 80253c4:	3568      	adds	r5, #104	@ 0x68
 80253c6:	e7ea      	b.n	802539e <_fwalk_sglue+0xe>

080253c8 <iprintf>:
 80253c8:	b40f      	push	{r0, r1, r2, r3}
 80253ca:	b507      	push	{r0, r1, r2, lr}
 80253cc:	4905      	ldr	r1, [pc, #20]	@ (80253e4 <iprintf+0x1c>)
 80253ce:	ab04      	add	r3, sp, #16
 80253d0:	6808      	ldr	r0, [r1, #0]
 80253d2:	cb04      	ldmia	r3!, {r2}
 80253d4:	6881      	ldr	r1, [r0, #8]
 80253d6:	9301      	str	r3, [sp, #4]
 80253d8:	f002 fbfa 	bl	8027bd0 <_vfiprintf_r>
 80253dc:	b003      	add	sp, #12
 80253de:	bc08      	pop	{r3}
 80253e0:	b004      	add	sp, #16
 80253e2:	4718      	bx	r3
 80253e4:	200003e0 	.word	0x200003e0

080253e8 <_puts_r>:
 80253e8:	6a03      	ldr	r3, [r0, #32]
 80253ea:	b570      	push	{r4, r5, r6, lr}
 80253ec:	0005      	movs	r5, r0
 80253ee:	000e      	movs	r6, r1
 80253f0:	6884      	ldr	r4, [r0, #8]
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	d101      	bne.n	80253fa <_puts_r+0x12>
 80253f6:	f7ff ffb3 	bl	8025360 <__sinit>
 80253fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80253fc:	07db      	lsls	r3, r3, #31
 80253fe:	d405      	bmi.n	802540c <_puts_r+0x24>
 8025400:	89a3      	ldrh	r3, [r4, #12]
 8025402:	059b      	lsls	r3, r3, #22
 8025404:	d402      	bmi.n	802540c <_puts_r+0x24>
 8025406:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025408:	f000 fa87 	bl	802591a <__retarget_lock_acquire_recursive>
 802540c:	89a3      	ldrh	r3, [r4, #12]
 802540e:	071b      	lsls	r3, r3, #28
 8025410:	d502      	bpl.n	8025418 <_puts_r+0x30>
 8025412:	6923      	ldr	r3, [r4, #16]
 8025414:	2b00      	cmp	r3, #0
 8025416:	d11f      	bne.n	8025458 <_puts_r+0x70>
 8025418:	0021      	movs	r1, r4
 802541a:	0028      	movs	r0, r5
 802541c:	f000 f950 	bl	80256c0 <__swsetup_r>
 8025420:	2800      	cmp	r0, #0
 8025422:	d019      	beq.n	8025458 <_puts_r+0x70>
 8025424:	2501      	movs	r5, #1
 8025426:	426d      	negs	r5, r5
 8025428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802542a:	07db      	lsls	r3, r3, #31
 802542c:	d405      	bmi.n	802543a <_puts_r+0x52>
 802542e:	89a3      	ldrh	r3, [r4, #12]
 8025430:	059b      	lsls	r3, r3, #22
 8025432:	d402      	bmi.n	802543a <_puts_r+0x52>
 8025434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025436:	f000 fa71 	bl	802591c <__retarget_lock_release_recursive>
 802543a:	0028      	movs	r0, r5
 802543c:	bd70      	pop	{r4, r5, r6, pc}
 802543e:	3601      	adds	r6, #1
 8025440:	60a3      	str	r3, [r4, #8]
 8025442:	2b00      	cmp	r3, #0
 8025444:	da04      	bge.n	8025450 <_puts_r+0x68>
 8025446:	69a2      	ldr	r2, [r4, #24]
 8025448:	429a      	cmp	r2, r3
 802544a:	dc16      	bgt.n	802547a <_puts_r+0x92>
 802544c:	290a      	cmp	r1, #10
 802544e:	d014      	beq.n	802547a <_puts_r+0x92>
 8025450:	6823      	ldr	r3, [r4, #0]
 8025452:	1c5a      	adds	r2, r3, #1
 8025454:	6022      	str	r2, [r4, #0]
 8025456:	7019      	strb	r1, [r3, #0]
 8025458:	68a3      	ldr	r3, [r4, #8]
 802545a:	7831      	ldrb	r1, [r6, #0]
 802545c:	3b01      	subs	r3, #1
 802545e:	2900      	cmp	r1, #0
 8025460:	d1ed      	bne.n	802543e <_puts_r+0x56>
 8025462:	60a3      	str	r3, [r4, #8]
 8025464:	2b00      	cmp	r3, #0
 8025466:	da0f      	bge.n	8025488 <_puts_r+0xa0>
 8025468:	0022      	movs	r2, r4
 802546a:	0028      	movs	r0, r5
 802546c:	310a      	adds	r1, #10
 802546e:	f000 f8e5 	bl	802563c <__swbuf_r>
 8025472:	3001      	adds	r0, #1
 8025474:	d0d6      	beq.n	8025424 <_puts_r+0x3c>
 8025476:	250a      	movs	r5, #10
 8025478:	e7d6      	b.n	8025428 <_puts_r+0x40>
 802547a:	0022      	movs	r2, r4
 802547c:	0028      	movs	r0, r5
 802547e:	f000 f8dd 	bl	802563c <__swbuf_r>
 8025482:	3001      	adds	r0, #1
 8025484:	d1e8      	bne.n	8025458 <_puts_r+0x70>
 8025486:	e7cd      	b.n	8025424 <_puts_r+0x3c>
 8025488:	6823      	ldr	r3, [r4, #0]
 802548a:	1c5a      	adds	r2, r3, #1
 802548c:	6022      	str	r2, [r4, #0]
 802548e:	220a      	movs	r2, #10
 8025490:	701a      	strb	r2, [r3, #0]
 8025492:	e7f0      	b.n	8025476 <_puts_r+0x8e>

08025494 <puts>:
 8025494:	b510      	push	{r4, lr}
 8025496:	4b03      	ldr	r3, [pc, #12]	@ (80254a4 <puts+0x10>)
 8025498:	0001      	movs	r1, r0
 802549a:	6818      	ldr	r0, [r3, #0]
 802549c:	f7ff ffa4 	bl	80253e8 <_puts_r>
 80254a0:	bd10      	pop	{r4, pc}
 80254a2:	46c0      	nop			@ (mov r8, r8)
 80254a4:	200003e0 	.word	0x200003e0

080254a8 <siprintf>:
 80254a8:	b40e      	push	{r1, r2, r3}
 80254aa:	b510      	push	{r4, lr}
 80254ac:	2400      	movs	r4, #0
 80254ae:	490c      	ldr	r1, [pc, #48]	@ (80254e0 <siprintf+0x38>)
 80254b0:	b09d      	sub	sp, #116	@ 0x74
 80254b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80254b4:	9002      	str	r0, [sp, #8]
 80254b6:	9006      	str	r0, [sp, #24]
 80254b8:	9107      	str	r1, [sp, #28]
 80254ba:	9104      	str	r1, [sp, #16]
 80254bc:	4809      	ldr	r0, [pc, #36]	@ (80254e4 <siprintf+0x3c>)
 80254be:	490a      	ldr	r1, [pc, #40]	@ (80254e8 <siprintf+0x40>)
 80254c0:	cb04      	ldmia	r3!, {r2}
 80254c2:	9105      	str	r1, [sp, #20]
 80254c4:	6800      	ldr	r0, [r0, #0]
 80254c6:	a902      	add	r1, sp, #8
 80254c8:	9301      	str	r3, [sp, #4]
 80254ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80254cc:	f002 fa5a 	bl	8027984 <_svfiprintf_r>
 80254d0:	9b02      	ldr	r3, [sp, #8]
 80254d2:	701c      	strb	r4, [r3, #0]
 80254d4:	b01d      	add	sp, #116	@ 0x74
 80254d6:	bc10      	pop	{r4}
 80254d8:	bc08      	pop	{r3}
 80254da:	b003      	add	sp, #12
 80254dc:	4718      	bx	r3
 80254de:	46c0      	nop			@ (mov r8, r8)
 80254e0:	7fffffff 	.word	0x7fffffff
 80254e4:	200003e0 	.word	0x200003e0
 80254e8:	ffff0208 	.word	0xffff0208

080254ec <__sread>:
 80254ec:	b570      	push	{r4, r5, r6, lr}
 80254ee:	000c      	movs	r4, r1
 80254f0:	250e      	movs	r5, #14
 80254f2:	5f49      	ldrsh	r1, [r1, r5]
 80254f4:	f000 f9be 	bl	8025874 <_read_r>
 80254f8:	2800      	cmp	r0, #0
 80254fa:	db03      	blt.n	8025504 <__sread+0x18>
 80254fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80254fe:	181b      	adds	r3, r3, r0
 8025500:	6563      	str	r3, [r4, #84]	@ 0x54
 8025502:	bd70      	pop	{r4, r5, r6, pc}
 8025504:	89a3      	ldrh	r3, [r4, #12]
 8025506:	4a02      	ldr	r2, [pc, #8]	@ (8025510 <__sread+0x24>)
 8025508:	4013      	ands	r3, r2
 802550a:	81a3      	strh	r3, [r4, #12]
 802550c:	e7f9      	b.n	8025502 <__sread+0x16>
 802550e:	46c0      	nop			@ (mov r8, r8)
 8025510:	ffffefff 	.word	0xffffefff

08025514 <__swrite>:
 8025514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025516:	001f      	movs	r7, r3
 8025518:	898b      	ldrh	r3, [r1, #12]
 802551a:	0005      	movs	r5, r0
 802551c:	000c      	movs	r4, r1
 802551e:	0016      	movs	r6, r2
 8025520:	05db      	lsls	r3, r3, #23
 8025522:	d505      	bpl.n	8025530 <__swrite+0x1c>
 8025524:	230e      	movs	r3, #14
 8025526:	5ec9      	ldrsh	r1, [r1, r3]
 8025528:	2200      	movs	r2, #0
 802552a:	2302      	movs	r3, #2
 802552c:	f000 f98e 	bl	802584c <_lseek_r>
 8025530:	89a3      	ldrh	r3, [r4, #12]
 8025532:	4a05      	ldr	r2, [pc, #20]	@ (8025548 <__swrite+0x34>)
 8025534:	0028      	movs	r0, r5
 8025536:	4013      	ands	r3, r2
 8025538:	81a3      	strh	r3, [r4, #12]
 802553a:	0032      	movs	r2, r6
 802553c:	230e      	movs	r3, #14
 802553e:	5ee1      	ldrsh	r1, [r4, r3]
 8025540:	003b      	movs	r3, r7
 8025542:	f000 f9ab 	bl	802589c <_write_r>
 8025546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025548:	ffffefff 	.word	0xffffefff

0802554c <__sseek>:
 802554c:	b570      	push	{r4, r5, r6, lr}
 802554e:	000c      	movs	r4, r1
 8025550:	250e      	movs	r5, #14
 8025552:	5f49      	ldrsh	r1, [r1, r5]
 8025554:	f000 f97a 	bl	802584c <_lseek_r>
 8025558:	89a3      	ldrh	r3, [r4, #12]
 802555a:	1c42      	adds	r2, r0, #1
 802555c:	d103      	bne.n	8025566 <__sseek+0x1a>
 802555e:	4a05      	ldr	r2, [pc, #20]	@ (8025574 <__sseek+0x28>)
 8025560:	4013      	ands	r3, r2
 8025562:	81a3      	strh	r3, [r4, #12]
 8025564:	bd70      	pop	{r4, r5, r6, pc}
 8025566:	2280      	movs	r2, #128	@ 0x80
 8025568:	0152      	lsls	r2, r2, #5
 802556a:	4313      	orrs	r3, r2
 802556c:	81a3      	strh	r3, [r4, #12]
 802556e:	6560      	str	r0, [r4, #84]	@ 0x54
 8025570:	e7f8      	b.n	8025564 <__sseek+0x18>
 8025572:	46c0      	nop			@ (mov r8, r8)
 8025574:	ffffefff 	.word	0xffffefff

08025578 <__sclose>:
 8025578:	b510      	push	{r4, lr}
 802557a:	230e      	movs	r3, #14
 802557c:	5ec9      	ldrsh	r1, [r1, r3]
 802557e:	f000 f953 	bl	8025828 <_close_r>
 8025582:	bd10      	pop	{r4, pc}

08025584 <_vsniprintf_r>:
 8025584:	b530      	push	{r4, r5, lr}
 8025586:	0005      	movs	r5, r0
 8025588:	0014      	movs	r4, r2
 802558a:	0008      	movs	r0, r1
 802558c:	001a      	movs	r2, r3
 802558e:	b09b      	sub	sp, #108	@ 0x6c
 8025590:	2c00      	cmp	r4, #0
 8025592:	da05      	bge.n	80255a0 <_vsniprintf_r+0x1c>
 8025594:	238b      	movs	r3, #139	@ 0x8b
 8025596:	2001      	movs	r0, #1
 8025598:	602b      	str	r3, [r5, #0]
 802559a:	4240      	negs	r0, r0
 802559c:	b01b      	add	sp, #108	@ 0x6c
 802559e:	bd30      	pop	{r4, r5, pc}
 80255a0:	2382      	movs	r3, #130	@ 0x82
 80255a2:	4669      	mov	r1, sp
 80255a4:	009b      	lsls	r3, r3, #2
 80255a6:	818b      	strh	r3, [r1, #12]
 80255a8:	2100      	movs	r1, #0
 80255aa:	9000      	str	r0, [sp, #0]
 80255ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80255ae:	9004      	str	r0, [sp, #16]
 80255b0:	428c      	cmp	r4, r1
 80255b2:	d000      	beq.n	80255b6 <_vsniprintf_r+0x32>
 80255b4:	1e61      	subs	r1, r4, #1
 80255b6:	2301      	movs	r3, #1
 80255b8:	9102      	str	r1, [sp, #8]
 80255ba:	9105      	str	r1, [sp, #20]
 80255bc:	4669      	mov	r1, sp
 80255be:	425b      	negs	r3, r3
 80255c0:	81cb      	strh	r3, [r1, #14]
 80255c2:	0028      	movs	r0, r5
 80255c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80255c6:	f002 f9dd 	bl	8027984 <_svfiprintf_r>
 80255ca:	1c43      	adds	r3, r0, #1
 80255cc:	da01      	bge.n	80255d2 <_vsniprintf_r+0x4e>
 80255ce:	238b      	movs	r3, #139	@ 0x8b
 80255d0:	602b      	str	r3, [r5, #0]
 80255d2:	2c00      	cmp	r4, #0
 80255d4:	d0e2      	beq.n	802559c <_vsniprintf_r+0x18>
 80255d6:	2200      	movs	r2, #0
 80255d8:	9b00      	ldr	r3, [sp, #0]
 80255da:	701a      	strb	r2, [r3, #0]
 80255dc:	e7de      	b.n	802559c <_vsniprintf_r+0x18>
	...

080255e0 <vsniprintf>:
 80255e0:	b513      	push	{r0, r1, r4, lr}
 80255e2:	4c04      	ldr	r4, [pc, #16]	@ (80255f4 <vsniprintf+0x14>)
 80255e4:	9300      	str	r3, [sp, #0]
 80255e6:	0013      	movs	r3, r2
 80255e8:	000a      	movs	r2, r1
 80255ea:	0001      	movs	r1, r0
 80255ec:	6820      	ldr	r0, [r4, #0]
 80255ee:	f7ff ffc9 	bl	8025584 <_vsniprintf_r>
 80255f2:	bd16      	pop	{r1, r2, r4, pc}
 80255f4:	200003e0 	.word	0x200003e0

080255f8 <_vsiprintf_r>:
 80255f8:	b510      	push	{r4, lr}
 80255fa:	2400      	movs	r4, #0
 80255fc:	b09a      	sub	sp, #104	@ 0x68
 80255fe:	9100      	str	r1, [sp, #0]
 8025600:	9104      	str	r1, [sp, #16]
 8025602:	4906      	ldr	r1, [pc, #24]	@ (802561c <_vsiprintf_r+0x24>)
 8025604:	9419      	str	r4, [sp, #100]	@ 0x64
 8025606:	9105      	str	r1, [sp, #20]
 8025608:	9102      	str	r1, [sp, #8]
 802560a:	4905      	ldr	r1, [pc, #20]	@ (8025620 <_vsiprintf_r+0x28>)
 802560c:	9103      	str	r1, [sp, #12]
 802560e:	4669      	mov	r1, sp
 8025610:	f002 f9b8 	bl	8027984 <_svfiprintf_r>
 8025614:	9b00      	ldr	r3, [sp, #0]
 8025616:	701c      	strb	r4, [r3, #0]
 8025618:	b01a      	add	sp, #104	@ 0x68
 802561a:	bd10      	pop	{r4, pc}
 802561c:	7fffffff 	.word	0x7fffffff
 8025620:	ffff0208 	.word	0xffff0208

08025624 <vsiprintf>:
 8025624:	b510      	push	{r4, lr}
 8025626:	4c04      	ldr	r4, [pc, #16]	@ (8025638 <vsiprintf+0x14>)
 8025628:	0013      	movs	r3, r2
 802562a:	000a      	movs	r2, r1
 802562c:	0001      	movs	r1, r0
 802562e:	6820      	ldr	r0, [r4, #0]
 8025630:	f7ff ffe2 	bl	80255f8 <_vsiprintf_r>
 8025634:	bd10      	pop	{r4, pc}
 8025636:	46c0      	nop			@ (mov r8, r8)
 8025638:	200003e0 	.word	0x200003e0

0802563c <__swbuf_r>:
 802563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802563e:	0006      	movs	r6, r0
 8025640:	000d      	movs	r5, r1
 8025642:	0014      	movs	r4, r2
 8025644:	2800      	cmp	r0, #0
 8025646:	d004      	beq.n	8025652 <__swbuf_r+0x16>
 8025648:	6a03      	ldr	r3, [r0, #32]
 802564a:	2b00      	cmp	r3, #0
 802564c:	d101      	bne.n	8025652 <__swbuf_r+0x16>
 802564e:	f7ff fe87 	bl	8025360 <__sinit>
 8025652:	69a3      	ldr	r3, [r4, #24]
 8025654:	60a3      	str	r3, [r4, #8]
 8025656:	89a3      	ldrh	r3, [r4, #12]
 8025658:	071b      	lsls	r3, r3, #28
 802565a:	d502      	bpl.n	8025662 <__swbuf_r+0x26>
 802565c:	6923      	ldr	r3, [r4, #16]
 802565e:	2b00      	cmp	r3, #0
 8025660:	d109      	bne.n	8025676 <__swbuf_r+0x3a>
 8025662:	0021      	movs	r1, r4
 8025664:	0030      	movs	r0, r6
 8025666:	f000 f82b 	bl	80256c0 <__swsetup_r>
 802566a:	2800      	cmp	r0, #0
 802566c:	d003      	beq.n	8025676 <__swbuf_r+0x3a>
 802566e:	2501      	movs	r5, #1
 8025670:	426d      	negs	r5, r5
 8025672:	0028      	movs	r0, r5
 8025674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025676:	6923      	ldr	r3, [r4, #16]
 8025678:	6820      	ldr	r0, [r4, #0]
 802567a:	b2ef      	uxtb	r7, r5
 802567c:	1ac0      	subs	r0, r0, r3
 802567e:	6963      	ldr	r3, [r4, #20]
 8025680:	b2ed      	uxtb	r5, r5
 8025682:	4283      	cmp	r3, r0
 8025684:	dc05      	bgt.n	8025692 <__swbuf_r+0x56>
 8025686:	0021      	movs	r1, r4
 8025688:	0030      	movs	r0, r6
 802568a:	f002 fc43 	bl	8027f14 <_fflush_r>
 802568e:	2800      	cmp	r0, #0
 8025690:	d1ed      	bne.n	802566e <__swbuf_r+0x32>
 8025692:	68a3      	ldr	r3, [r4, #8]
 8025694:	3001      	adds	r0, #1
 8025696:	3b01      	subs	r3, #1
 8025698:	60a3      	str	r3, [r4, #8]
 802569a:	6823      	ldr	r3, [r4, #0]
 802569c:	1c5a      	adds	r2, r3, #1
 802569e:	6022      	str	r2, [r4, #0]
 80256a0:	701f      	strb	r7, [r3, #0]
 80256a2:	6963      	ldr	r3, [r4, #20]
 80256a4:	4283      	cmp	r3, r0
 80256a6:	d004      	beq.n	80256b2 <__swbuf_r+0x76>
 80256a8:	89a3      	ldrh	r3, [r4, #12]
 80256aa:	07db      	lsls	r3, r3, #31
 80256ac:	d5e1      	bpl.n	8025672 <__swbuf_r+0x36>
 80256ae:	2d0a      	cmp	r5, #10
 80256b0:	d1df      	bne.n	8025672 <__swbuf_r+0x36>
 80256b2:	0021      	movs	r1, r4
 80256b4:	0030      	movs	r0, r6
 80256b6:	f002 fc2d 	bl	8027f14 <_fflush_r>
 80256ba:	2800      	cmp	r0, #0
 80256bc:	d0d9      	beq.n	8025672 <__swbuf_r+0x36>
 80256be:	e7d6      	b.n	802566e <__swbuf_r+0x32>

080256c0 <__swsetup_r>:
 80256c0:	4b2d      	ldr	r3, [pc, #180]	@ (8025778 <__swsetup_r+0xb8>)
 80256c2:	b570      	push	{r4, r5, r6, lr}
 80256c4:	0005      	movs	r5, r0
 80256c6:	6818      	ldr	r0, [r3, #0]
 80256c8:	000c      	movs	r4, r1
 80256ca:	2800      	cmp	r0, #0
 80256cc:	d004      	beq.n	80256d8 <__swsetup_r+0x18>
 80256ce:	6a03      	ldr	r3, [r0, #32]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d101      	bne.n	80256d8 <__swsetup_r+0x18>
 80256d4:	f7ff fe44 	bl	8025360 <__sinit>
 80256d8:	220c      	movs	r2, #12
 80256da:	5ea3      	ldrsh	r3, [r4, r2]
 80256dc:	071a      	lsls	r2, r3, #28
 80256de:	d423      	bmi.n	8025728 <__swsetup_r+0x68>
 80256e0:	06da      	lsls	r2, r3, #27
 80256e2:	d407      	bmi.n	80256f4 <__swsetup_r+0x34>
 80256e4:	2209      	movs	r2, #9
 80256e6:	602a      	str	r2, [r5, #0]
 80256e8:	2240      	movs	r2, #64	@ 0x40
 80256ea:	2001      	movs	r0, #1
 80256ec:	4313      	orrs	r3, r2
 80256ee:	81a3      	strh	r3, [r4, #12]
 80256f0:	4240      	negs	r0, r0
 80256f2:	e03a      	b.n	802576a <__swsetup_r+0xaa>
 80256f4:	075b      	lsls	r3, r3, #29
 80256f6:	d513      	bpl.n	8025720 <__swsetup_r+0x60>
 80256f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80256fa:	2900      	cmp	r1, #0
 80256fc:	d008      	beq.n	8025710 <__swsetup_r+0x50>
 80256fe:	0023      	movs	r3, r4
 8025700:	3344      	adds	r3, #68	@ 0x44
 8025702:	4299      	cmp	r1, r3
 8025704:	d002      	beq.n	802570c <__swsetup_r+0x4c>
 8025706:	0028      	movs	r0, r5
 8025708:	f000 ff9a 	bl	8026640 <_free_r>
 802570c:	2300      	movs	r3, #0
 802570e:	6363      	str	r3, [r4, #52]	@ 0x34
 8025710:	2224      	movs	r2, #36	@ 0x24
 8025712:	89a3      	ldrh	r3, [r4, #12]
 8025714:	4393      	bics	r3, r2
 8025716:	81a3      	strh	r3, [r4, #12]
 8025718:	2300      	movs	r3, #0
 802571a:	6063      	str	r3, [r4, #4]
 802571c:	6923      	ldr	r3, [r4, #16]
 802571e:	6023      	str	r3, [r4, #0]
 8025720:	2308      	movs	r3, #8
 8025722:	89a2      	ldrh	r2, [r4, #12]
 8025724:	4313      	orrs	r3, r2
 8025726:	81a3      	strh	r3, [r4, #12]
 8025728:	6923      	ldr	r3, [r4, #16]
 802572a:	2b00      	cmp	r3, #0
 802572c:	d10b      	bne.n	8025746 <__swsetup_r+0x86>
 802572e:	21a0      	movs	r1, #160	@ 0xa0
 8025730:	2280      	movs	r2, #128	@ 0x80
 8025732:	89a3      	ldrh	r3, [r4, #12]
 8025734:	0089      	lsls	r1, r1, #2
 8025736:	0092      	lsls	r2, r2, #2
 8025738:	400b      	ands	r3, r1
 802573a:	4293      	cmp	r3, r2
 802573c:	d003      	beq.n	8025746 <__swsetup_r+0x86>
 802573e:	0021      	movs	r1, r4
 8025740:	0028      	movs	r0, r5
 8025742:	f002 fc3d 	bl	8027fc0 <__smakebuf_r>
 8025746:	220c      	movs	r2, #12
 8025748:	5ea3      	ldrsh	r3, [r4, r2]
 802574a:	2101      	movs	r1, #1
 802574c:	001a      	movs	r2, r3
 802574e:	400a      	ands	r2, r1
 8025750:	420b      	tst	r3, r1
 8025752:	d00b      	beq.n	802576c <__swsetup_r+0xac>
 8025754:	2200      	movs	r2, #0
 8025756:	60a2      	str	r2, [r4, #8]
 8025758:	6962      	ldr	r2, [r4, #20]
 802575a:	4252      	negs	r2, r2
 802575c:	61a2      	str	r2, [r4, #24]
 802575e:	2000      	movs	r0, #0
 8025760:	6922      	ldr	r2, [r4, #16]
 8025762:	4282      	cmp	r2, r0
 8025764:	d101      	bne.n	802576a <__swsetup_r+0xaa>
 8025766:	061a      	lsls	r2, r3, #24
 8025768:	d4be      	bmi.n	80256e8 <__swsetup_r+0x28>
 802576a:	bd70      	pop	{r4, r5, r6, pc}
 802576c:	0799      	lsls	r1, r3, #30
 802576e:	d400      	bmi.n	8025772 <__swsetup_r+0xb2>
 8025770:	6962      	ldr	r2, [r4, #20]
 8025772:	60a2      	str	r2, [r4, #8]
 8025774:	e7f3      	b.n	802575e <__swsetup_r+0x9e>
 8025776:	46c0      	nop			@ (mov r8, r8)
 8025778:	200003e0 	.word	0x200003e0

0802577c <memset>:
 802577c:	0003      	movs	r3, r0
 802577e:	1882      	adds	r2, r0, r2
 8025780:	4293      	cmp	r3, r2
 8025782:	d100      	bne.n	8025786 <memset+0xa>
 8025784:	4770      	bx	lr
 8025786:	7019      	strb	r1, [r3, #0]
 8025788:	3301      	adds	r3, #1
 802578a:	e7f9      	b.n	8025780 <memset+0x4>

0802578c <strchr>:
 802578c:	b2c9      	uxtb	r1, r1
 802578e:	7803      	ldrb	r3, [r0, #0]
 8025790:	2b00      	cmp	r3, #0
 8025792:	d004      	beq.n	802579e <strchr+0x12>
 8025794:	428b      	cmp	r3, r1
 8025796:	d100      	bne.n	802579a <strchr+0xe>
 8025798:	4770      	bx	lr
 802579a:	3001      	adds	r0, #1
 802579c:	e7f7      	b.n	802578e <strchr+0x2>
 802579e:	424b      	negs	r3, r1
 80257a0:	4159      	adcs	r1, r3
 80257a2:	4249      	negs	r1, r1
 80257a4:	4008      	ands	r0, r1
 80257a6:	e7f7      	b.n	8025798 <strchr+0xc>

080257a8 <strncmp>:
 80257a8:	b530      	push	{r4, r5, lr}
 80257aa:	0005      	movs	r5, r0
 80257ac:	1e10      	subs	r0, r2, #0
 80257ae:	d00b      	beq.n	80257c8 <strncmp+0x20>
 80257b0:	2400      	movs	r4, #0
 80257b2:	3a01      	subs	r2, #1
 80257b4:	5d2b      	ldrb	r3, [r5, r4]
 80257b6:	5d08      	ldrb	r0, [r1, r4]
 80257b8:	4283      	cmp	r3, r0
 80257ba:	d104      	bne.n	80257c6 <strncmp+0x1e>
 80257bc:	4294      	cmp	r4, r2
 80257be:	d002      	beq.n	80257c6 <strncmp+0x1e>
 80257c0:	3401      	adds	r4, #1
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	d1f6      	bne.n	80257b4 <strncmp+0xc>
 80257c6:	1a18      	subs	r0, r3, r0
 80257c8:	bd30      	pop	{r4, r5, pc}

080257ca <strncpy>:
 80257ca:	0003      	movs	r3, r0
 80257cc:	b530      	push	{r4, r5, lr}
 80257ce:	001d      	movs	r5, r3
 80257d0:	2a00      	cmp	r2, #0
 80257d2:	d006      	beq.n	80257e2 <strncpy+0x18>
 80257d4:	780c      	ldrb	r4, [r1, #0]
 80257d6:	3a01      	subs	r2, #1
 80257d8:	3301      	adds	r3, #1
 80257da:	702c      	strb	r4, [r5, #0]
 80257dc:	3101      	adds	r1, #1
 80257de:	2c00      	cmp	r4, #0
 80257e0:	d1f5      	bne.n	80257ce <strncpy+0x4>
 80257e2:	2100      	movs	r1, #0
 80257e4:	189a      	adds	r2, r3, r2
 80257e6:	4293      	cmp	r3, r2
 80257e8:	d100      	bne.n	80257ec <strncpy+0x22>
 80257ea:	bd30      	pop	{r4, r5, pc}
 80257ec:	7019      	strb	r1, [r3, #0]
 80257ee:	3301      	adds	r3, #1
 80257f0:	e7f9      	b.n	80257e6 <strncpy+0x1c>

080257f2 <strstr>:
 80257f2:	780a      	ldrb	r2, [r1, #0]
 80257f4:	b530      	push	{r4, r5, lr}
 80257f6:	2a00      	cmp	r2, #0
 80257f8:	d10c      	bne.n	8025814 <strstr+0x22>
 80257fa:	bd30      	pop	{r4, r5, pc}
 80257fc:	429a      	cmp	r2, r3
 80257fe:	d108      	bne.n	8025812 <strstr+0x20>
 8025800:	2301      	movs	r3, #1
 8025802:	5ccc      	ldrb	r4, [r1, r3]
 8025804:	2c00      	cmp	r4, #0
 8025806:	d0f8      	beq.n	80257fa <strstr+0x8>
 8025808:	5cc5      	ldrb	r5, [r0, r3]
 802580a:	42a5      	cmp	r5, r4
 802580c:	d101      	bne.n	8025812 <strstr+0x20>
 802580e:	3301      	adds	r3, #1
 8025810:	e7f7      	b.n	8025802 <strstr+0x10>
 8025812:	3001      	adds	r0, #1
 8025814:	7803      	ldrb	r3, [r0, #0]
 8025816:	2b00      	cmp	r3, #0
 8025818:	d1f0      	bne.n	80257fc <strstr+0xa>
 802581a:	0018      	movs	r0, r3
 802581c:	e7ed      	b.n	80257fa <strstr+0x8>
	...

08025820 <_localeconv_r>:
 8025820:	4800      	ldr	r0, [pc, #0]	@ (8025824 <_localeconv_r+0x4>)
 8025822:	4770      	bx	lr
 8025824:	20000364 	.word	0x20000364

08025828 <_close_r>:
 8025828:	2300      	movs	r3, #0
 802582a:	b570      	push	{r4, r5, r6, lr}
 802582c:	4d06      	ldr	r5, [pc, #24]	@ (8025848 <_close_r+0x20>)
 802582e:	0004      	movs	r4, r0
 8025830:	0008      	movs	r0, r1
 8025832:	602b      	str	r3, [r5, #0]
 8025834:	f7ed f850 	bl	80128d8 <_close>
 8025838:	1c43      	adds	r3, r0, #1
 802583a:	d103      	bne.n	8025844 <_close_r+0x1c>
 802583c:	682b      	ldr	r3, [r5, #0]
 802583e:	2b00      	cmp	r3, #0
 8025840:	d000      	beq.n	8025844 <_close_r+0x1c>
 8025842:	6023      	str	r3, [r4, #0]
 8025844:	bd70      	pop	{r4, r5, r6, pc}
 8025846:	46c0      	nop			@ (mov r8, r8)
 8025848:	20003604 	.word	0x20003604

0802584c <_lseek_r>:
 802584c:	b570      	push	{r4, r5, r6, lr}
 802584e:	0004      	movs	r4, r0
 8025850:	0008      	movs	r0, r1
 8025852:	0011      	movs	r1, r2
 8025854:	001a      	movs	r2, r3
 8025856:	2300      	movs	r3, #0
 8025858:	4d05      	ldr	r5, [pc, #20]	@ (8025870 <_lseek_r+0x24>)
 802585a:	602b      	str	r3, [r5, #0]
 802585c:	f7ed f85d 	bl	801291a <_lseek>
 8025860:	1c43      	adds	r3, r0, #1
 8025862:	d103      	bne.n	802586c <_lseek_r+0x20>
 8025864:	682b      	ldr	r3, [r5, #0]
 8025866:	2b00      	cmp	r3, #0
 8025868:	d000      	beq.n	802586c <_lseek_r+0x20>
 802586a:	6023      	str	r3, [r4, #0]
 802586c:	bd70      	pop	{r4, r5, r6, pc}
 802586e:	46c0      	nop			@ (mov r8, r8)
 8025870:	20003604 	.word	0x20003604

08025874 <_read_r>:
 8025874:	b570      	push	{r4, r5, r6, lr}
 8025876:	0004      	movs	r4, r0
 8025878:	0008      	movs	r0, r1
 802587a:	0011      	movs	r1, r2
 802587c:	001a      	movs	r2, r3
 802587e:	2300      	movs	r3, #0
 8025880:	4d05      	ldr	r5, [pc, #20]	@ (8025898 <_read_r+0x24>)
 8025882:	602b      	str	r3, [r5, #0]
 8025884:	f7ed f80b 	bl	801289e <_read>
 8025888:	1c43      	adds	r3, r0, #1
 802588a:	d103      	bne.n	8025894 <_read_r+0x20>
 802588c:	682b      	ldr	r3, [r5, #0]
 802588e:	2b00      	cmp	r3, #0
 8025890:	d000      	beq.n	8025894 <_read_r+0x20>
 8025892:	6023      	str	r3, [r4, #0]
 8025894:	bd70      	pop	{r4, r5, r6, pc}
 8025896:	46c0      	nop			@ (mov r8, r8)
 8025898:	20003604 	.word	0x20003604

0802589c <_write_r>:
 802589c:	b570      	push	{r4, r5, r6, lr}
 802589e:	0004      	movs	r4, r0
 80258a0:	0008      	movs	r0, r1
 80258a2:	0011      	movs	r1, r2
 80258a4:	001a      	movs	r2, r3
 80258a6:	2300      	movs	r3, #0
 80258a8:	4d05      	ldr	r5, [pc, #20]	@ (80258c0 <_write_r+0x24>)
 80258aa:	602b      	str	r3, [r5, #0]
 80258ac:	f7ed fcc8 	bl	8013240 <_write>
 80258b0:	1c43      	adds	r3, r0, #1
 80258b2:	d103      	bne.n	80258bc <_write_r+0x20>
 80258b4:	682b      	ldr	r3, [r5, #0]
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d000      	beq.n	80258bc <_write_r+0x20>
 80258ba:	6023      	str	r3, [r4, #0]
 80258bc:	bd70      	pop	{r4, r5, r6, pc}
 80258be:	46c0      	nop			@ (mov r8, r8)
 80258c0:	20003604 	.word	0x20003604

080258c4 <__errno>:
 80258c4:	4b01      	ldr	r3, [pc, #4]	@ (80258cc <__errno+0x8>)
 80258c6:	6818      	ldr	r0, [r3, #0]
 80258c8:	4770      	bx	lr
 80258ca:	46c0      	nop			@ (mov r8, r8)
 80258cc:	200003e0 	.word	0x200003e0

080258d0 <__libc_init_array>:
 80258d0:	b570      	push	{r4, r5, r6, lr}
 80258d2:	2600      	movs	r6, #0
 80258d4:	4c0c      	ldr	r4, [pc, #48]	@ (8025908 <__libc_init_array+0x38>)
 80258d6:	4d0d      	ldr	r5, [pc, #52]	@ (802590c <__libc_init_array+0x3c>)
 80258d8:	1b64      	subs	r4, r4, r5
 80258da:	10a4      	asrs	r4, r4, #2
 80258dc:	42a6      	cmp	r6, r4
 80258de:	d109      	bne.n	80258f4 <__libc_init_array+0x24>
 80258e0:	2600      	movs	r6, #0
 80258e2:	f003 ffcb 	bl	802987c <_init>
 80258e6:	4c0a      	ldr	r4, [pc, #40]	@ (8025910 <__libc_init_array+0x40>)
 80258e8:	4d0a      	ldr	r5, [pc, #40]	@ (8025914 <__libc_init_array+0x44>)
 80258ea:	1b64      	subs	r4, r4, r5
 80258ec:	10a4      	asrs	r4, r4, #2
 80258ee:	42a6      	cmp	r6, r4
 80258f0:	d105      	bne.n	80258fe <__libc_init_array+0x2e>
 80258f2:	bd70      	pop	{r4, r5, r6, pc}
 80258f4:	00b3      	lsls	r3, r6, #2
 80258f6:	58eb      	ldr	r3, [r5, r3]
 80258f8:	4798      	blx	r3
 80258fa:	3601      	adds	r6, #1
 80258fc:	e7ee      	b.n	80258dc <__libc_init_array+0xc>
 80258fe:	00b3      	lsls	r3, r6, #2
 8025900:	58eb      	ldr	r3, [r5, r3]
 8025902:	4798      	blx	r3
 8025904:	3601      	adds	r6, #1
 8025906:	e7f2      	b.n	80258ee <__libc_init_array+0x1e>
 8025908:	0802e620 	.word	0x0802e620
 802590c:	0802e620 	.word	0x0802e620
 8025910:	0802e624 	.word	0x0802e624
 8025914:	0802e620 	.word	0x0802e620

08025918 <__retarget_lock_init_recursive>:
 8025918:	4770      	bx	lr

0802591a <__retarget_lock_acquire_recursive>:
 802591a:	4770      	bx	lr

0802591c <__retarget_lock_release_recursive>:
 802591c:	4770      	bx	lr

0802591e <memchr>:
 802591e:	b2c9      	uxtb	r1, r1
 8025920:	1882      	adds	r2, r0, r2
 8025922:	4290      	cmp	r0, r2
 8025924:	d101      	bne.n	802592a <memchr+0xc>
 8025926:	2000      	movs	r0, #0
 8025928:	4770      	bx	lr
 802592a:	7803      	ldrb	r3, [r0, #0]
 802592c:	428b      	cmp	r3, r1
 802592e:	d0fb      	beq.n	8025928 <memchr+0xa>
 8025930:	3001      	adds	r0, #1
 8025932:	e7f6      	b.n	8025922 <memchr+0x4>

08025934 <memcpy>:
 8025934:	2300      	movs	r3, #0
 8025936:	b510      	push	{r4, lr}
 8025938:	429a      	cmp	r2, r3
 802593a:	d100      	bne.n	802593e <memcpy+0xa>
 802593c:	bd10      	pop	{r4, pc}
 802593e:	5ccc      	ldrb	r4, [r1, r3]
 8025940:	54c4      	strb	r4, [r0, r3]
 8025942:	3301      	adds	r3, #1
 8025944:	e7f8      	b.n	8025938 <memcpy+0x4>
	...

08025948 <nan>:
 8025948:	2000      	movs	r0, #0
 802594a:	4901      	ldr	r1, [pc, #4]	@ (8025950 <nan+0x8>)
 802594c:	4770      	bx	lr
 802594e:	46c0      	nop			@ (mov r8, r8)
 8025950:	7ff80000 	.word	0x7ff80000

08025954 <quorem>:
 8025954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025956:	6903      	ldr	r3, [r0, #16]
 8025958:	690c      	ldr	r4, [r1, #16]
 802595a:	b089      	sub	sp, #36	@ 0x24
 802595c:	9003      	str	r0, [sp, #12]
 802595e:	9106      	str	r1, [sp, #24]
 8025960:	2000      	movs	r0, #0
 8025962:	42a3      	cmp	r3, r4
 8025964:	db63      	blt.n	8025a2e <quorem+0xda>
 8025966:	000b      	movs	r3, r1
 8025968:	3c01      	subs	r4, #1
 802596a:	3314      	adds	r3, #20
 802596c:	00a5      	lsls	r5, r4, #2
 802596e:	9304      	str	r3, [sp, #16]
 8025970:	195b      	adds	r3, r3, r5
 8025972:	9305      	str	r3, [sp, #20]
 8025974:	9b03      	ldr	r3, [sp, #12]
 8025976:	3314      	adds	r3, #20
 8025978:	9301      	str	r3, [sp, #4]
 802597a:	195d      	adds	r5, r3, r5
 802597c:	9b05      	ldr	r3, [sp, #20]
 802597e:	682f      	ldr	r7, [r5, #0]
 8025980:	681e      	ldr	r6, [r3, #0]
 8025982:	0038      	movs	r0, r7
 8025984:	3601      	adds	r6, #1
 8025986:	0031      	movs	r1, r6
 8025988:	f7da fc0c 	bl	80001a4 <__udivsi3>
 802598c:	9002      	str	r0, [sp, #8]
 802598e:	42b7      	cmp	r7, r6
 8025990:	d327      	bcc.n	80259e2 <quorem+0x8e>
 8025992:	9b04      	ldr	r3, [sp, #16]
 8025994:	2700      	movs	r7, #0
 8025996:	469c      	mov	ip, r3
 8025998:	9e01      	ldr	r6, [sp, #4]
 802599a:	9707      	str	r7, [sp, #28]
 802599c:	4662      	mov	r2, ip
 802599e:	ca08      	ldmia	r2!, {r3}
 80259a0:	6830      	ldr	r0, [r6, #0]
 80259a2:	4694      	mov	ip, r2
 80259a4:	9a02      	ldr	r2, [sp, #8]
 80259a6:	b299      	uxth	r1, r3
 80259a8:	4351      	muls	r1, r2
 80259aa:	0c1b      	lsrs	r3, r3, #16
 80259ac:	4353      	muls	r3, r2
 80259ae:	19c9      	adds	r1, r1, r7
 80259b0:	0c0a      	lsrs	r2, r1, #16
 80259b2:	189b      	adds	r3, r3, r2
 80259b4:	b289      	uxth	r1, r1
 80259b6:	b282      	uxth	r2, r0
 80259b8:	1a52      	subs	r2, r2, r1
 80259ba:	9907      	ldr	r1, [sp, #28]
 80259bc:	0c1f      	lsrs	r7, r3, #16
 80259be:	1852      	adds	r2, r2, r1
 80259c0:	0c00      	lsrs	r0, r0, #16
 80259c2:	b29b      	uxth	r3, r3
 80259c4:	1411      	asrs	r1, r2, #16
 80259c6:	1ac3      	subs	r3, r0, r3
 80259c8:	185b      	adds	r3, r3, r1
 80259ca:	1419      	asrs	r1, r3, #16
 80259cc:	b292      	uxth	r2, r2
 80259ce:	041b      	lsls	r3, r3, #16
 80259d0:	431a      	orrs	r2, r3
 80259d2:	9b05      	ldr	r3, [sp, #20]
 80259d4:	9107      	str	r1, [sp, #28]
 80259d6:	c604      	stmia	r6!, {r2}
 80259d8:	4563      	cmp	r3, ip
 80259da:	d2df      	bcs.n	802599c <quorem+0x48>
 80259dc:	682b      	ldr	r3, [r5, #0]
 80259de:	2b00      	cmp	r3, #0
 80259e0:	d02b      	beq.n	8025a3a <quorem+0xe6>
 80259e2:	9906      	ldr	r1, [sp, #24]
 80259e4:	9803      	ldr	r0, [sp, #12]
 80259e6:	f001 fd6f 	bl	80274c8 <__mcmp>
 80259ea:	2800      	cmp	r0, #0
 80259ec:	db1e      	blt.n	8025a2c <quorem+0xd8>
 80259ee:	2600      	movs	r6, #0
 80259f0:	9d01      	ldr	r5, [sp, #4]
 80259f2:	9904      	ldr	r1, [sp, #16]
 80259f4:	c901      	ldmia	r1!, {r0}
 80259f6:	682b      	ldr	r3, [r5, #0]
 80259f8:	b287      	uxth	r7, r0
 80259fa:	b29a      	uxth	r2, r3
 80259fc:	1bd2      	subs	r2, r2, r7
 80259fe:	1992      	adds	r2, r2, r6
 8025a00:	0c00      	lsrs	r0, r0, #16
 8025a02:	0c1b      	lsrs	r3, r3, #16
 8025a04:	1a1b      	subs	r3, r3, r0
 8025a06:	1410      	asrs	r0, r2, #16
 8025a08:	181b      	adds	r3, r3, r0
 8025a0a:	141e      	asrs	r6, r3, #16
 8025a0c:	b292      	uxth	r2, r2
 8025a0e:	041b      	lsls	r3, r3, #16
 8025a10:	431a      	orrs	r2, r3
 8025a12:	9b05      	ldr	r3, [sp, #20]
 8025a14:	c504      	stmia	r5!, {r2}
 8025a16:	428b      	cmp	r3, r1
 8025a18:	d2ec      	bcs.n	80259f4 <quorem+0xa0>
 8025a1a:	9a01      	ldr	r2, [sp, #4]
 8025a1c:	00a3      	lsls	r3, r4, #2
 8025a1e:	18d3      	adds	r3, r2, r3
 8025a20:	681a      	ldr	r2, [r3, #0]
 8025a22:	2a00      	cmp	r2, #0
 8025a24:	d014      	beq.n	8025a50 <quorem+0xfc>
 8025a26:	9b02      	ldr	r3, [sp, #8]
 8025a28:	3301      	adds	r3, #1
 8025a2a:	9302      	str	r3, [sp, #8]
 8025a2c:	9802      	ldr	r0, [sp, #8]
 8025a2e:	b009      	add	sp, #36	@ 0x24
 8025a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a32:	682b      	ldr	r3, [r5, #0]
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	d104      	bne.n	8025a42 <quorem+0xee>
 8025a38:	3c01      	subs	r4, #1
 8025a3a:	9b01      	ldr	r3, [sp, #4]
 8025a3c:	3d04      	subs	r5, #4
 8025a3e:	42ab      	cmp	r3, r5
 8025a40:	d3f7      	bcc.n	8025a32 <quorem+0xde>
 8025a42:	9b03      	ldr	r3, [sp, #12]
 8025a44:	611c      	str	r4, [r3, #16]
 8025a46:	e7cc      	b.n	80259e2 <quorem+0x8e>
 8025a48:	681a      	ldr	r2, [r3, #0]
 8025a4a:	2a00      	cmp	r2, #0
 8025a4c:	d104      	bne.n	8025a58 <quorem+0x104>
 8025a4e:	3c01      	subs	r4, #1
 8025a50:	9a01      	ldr	r2, [sp, #4]
 8025a52:	3b04      	subs	r3, #4
 8025a54:	429a      	cmp	r2, r3
 8025a56:	d3f7      	bcc.n	8025a48 <quorem+0xf4>
 8025a58:	9b03      	ldr	r3, [sp, #12]
 8025a5a:	611c      	str	r4, [r3, #16]
 8025a5c:	e7e3      	b.n	8025a26 <quorem+0xd2>
	...

08025a60 <_dtoa_r>:
 8025a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a62:	0014      	movs	r4, r2
 8025a64:	001d      	movs	r5, r3
 8025a66:	69c6      	ldr	r6, [r0, #28]
 8025a68:	b09d      	sub	sp, #116	@ 0x74
 8025a6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8025a6c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025a6e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8025a70:	9003      	str	r0, [sp, #12]
 8025a72:	2e00      	cmp	r6, #0
 8025a74:	d10f      	bne.n	8025a96 <_dtoa_r+0x36>
 8025a76:	2010      	movs	r0, #16
 8025a78:	f001 f986 	bl	8026d88 <malloc>
 8025a7c:	9b03      	ldr	r3, [sp, #12]
 8025a7e:	1e02      	subs	r2, r0, #0
 8025a80:	61d8      	str	r0, [r3, #28]
 8025a82:	d104      	bne.n	8025a8e <_dtoa_r+0x2e>
 8025a84:	21ef      	movs	r1, #239	@ 0xef
 8025a86:	4bc7      	ldr	r3, [pc, #796]	@ (8025da4 <_dtoa_r+0x344>)
 8025a88:	48c7      	ldr	r0, [pc, #796]	@ (8025da8 <_dtoa_r+0x348>)
 8025a8a:	f002 fb23 	bl	80280d4 <__assert_func>
 8025a8e:	6046      	str	r6, [r0, #4]
 8025a90:	6086      	str	r6, [r0, #8]
 8025a92:	6006      	str	r6, [r0, #0]
 8025a94:	60c6      	str	r6, [r0, #12]
 8025a96:	9b03      	ldr	r3, [sp, #12]
 8025a98:	69db      	ldr	r3, [r3, #28]
 8025a9a:	6819      	ldr	r1, [r3, #0]
 8025a9c:	2900      	cmp	r1, #0
 8025a9e:	d00b      	beq.n	8025ab8 <_dtoa_r+0x58>
 8025aa0:	685a      	ldr	r2, [r3, #4]
 8025aa2:	2301      	movs	r3, #1
 8025aa4:	4093      	lsls	r3, r2
 8025aa6:	604a      	str	r2, [r1, #4]
 8025aa8:	608b      	str	r3, [r1, #8]
 8025aaa:	9803      	ldr	r0, [sp, #12]
 8025aac:	f001 fa7e 	bl	8026fac <_Bfree>
 8025ab0:	2200      	movs	r2, #0
 8025ab2:	9b03      	ldr	r3, [sp, #12]
 8025ab4:	69db      	ldr	r3, [r3, #28]
 8025ab6:	601a      	str	r2, [r3, #0]
 8025ab8:	2d00      	cmp	r5, #0
 8025aba:	da1e      	bge.n	8025afa <_dtoa_r+0x9a>
 8025abc:	2301      	movs	r3, #1
 8025abe:	603b      	str	r3, [r7, #0]
 8025ac0:	006b      	lsls	r3, r5, #1
 8025ac2:	085b      	lsrs	r3, r3, #1
 8025ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025ac6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8025dac <_dtoa_r+0x34c>)
 8025aca:	4ab8      	ldr	r2, [pc, #736]	@ (8025dac <_dtoa_r+0x34c>)
 8025acc:	403b      	ands	r3, r7
 8025ace:	4293      	cmp	r3, r2
 8025ad0:	d116      	bne.n	8025b00 <_dtoa_r+0xa0>
 8025ad2:	4bb7      	ldr	r3, [pc, #732]	@ (8025db0 <_dtoa_r+0x350>)
 8025ad4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025ad6:	6013      	str	r3, [r2, #0]
 8025ad8:	033b      	lsls	r3, r7, #12
 8025ada:	0b1b      	lsrs	r3, r3, #12
 8025adc:	4323      	orrs	r3, r4
 8025ade:	d101      	bne.n	8025ae4 <_dtoa_r+0x84>
 8025ae0:	f000 fd80 	bl	80265e4 <_dtoa_r+0xb84>
 8025ae4:	4bb3      	ldr	r3, [pc, #716]	@ (8025db4 <_dtoa_r+0x354>)
 8025ae6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025ae8:	9308      	str	r3, [sp, #32]
 8025aea:	2a00      	cmp	r2, #0
 8025aec:	d002      	beq.n	8025af4 <_dtoa_r+0x94>
 8025aee:	4bb2      	ldr	r3, [pc, #712]	@ (8025db8 <_dtoa_r+0x358>)
 8025af0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025af2:	6013      	str	r3, [r2, #0]
 8025af4:	9808      	ldr	r0, [sp, #32]
 8025af6:	b01d      	add	sp, #116	@ 0x74
 8025af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025afa:	2300      	movs	r3, #0
 8025afc:	603b      	str	r3, [r7, #0]
 8025afe:	e7e2      	b.n	8025ac6 <_dtoa_r+0x66>
 8025b00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025b02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025b04:	9212      	str	r2, [sp, #72]	@ 0x48
 8025b06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025b08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025b0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025b0c:	2200      	movs	r2, #0
 8025b0e:	2300      	movs	r3, #0
 8025b10:	f7da fcce 	bl	80004b0 <__aeabi_dcmpeq>
 8025b14:	1e06      	subs	r6, r0, #0
 8025b16:	d00b      	beq.n	8025b30 <_dtoa_r+0xd0>
 8025b18:	2301      	movs	r3, #1
 8025b1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025b1c:	6013      	str	r3, [r2, #0]
 8025b1e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025b20:	2b00      	cmp	r3, #0
 8025b22:	d002      	beq.n	8025b2a <_dtoa_r+0xca>
 8025b24:	4ba5      	ldr	r3, [pc, #660]	@ (8025dbc <_dtoa_r+0x35c>)
 8025b26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025b28:	6013      	str	r3, [r2, #0]
 8025b2a:	4ba5      	ldr	r3, [pc, #660]	@ (8025dc0 <_dtoa_r+0x360>)
 8025b2c:	9308      	str	r3, [sp, #32]
 8025b2e:	e7e1      	b.n	8025af4 <_dtoa_r+0x94>
 8025b30:	ab1a      	add	r3, sp, #104	@ 0x68
 8025b32:	9301      	str	r3, [sp, #4]
 8025b34:	ab1b      	add	r3, sp, #108	@ 0x6c
 8025b36:	9300      	str	r3, [sp, #0]
 8025b38:	9803      	ldr	r0, [sp, #12]
 8025b3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025b3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b3e:	f001 fde5 	bl	802770c <__d2b>
 8025b42:	007a      	lsls	r2, r7, #1
 8025b44:	9005      	str	r0, [sp, #20]
 8025b46:	0d52      	lsrs	r2, r2, #21
 8025b48:	d100      	bne.n	8025b4c <_dtoa_r+0xec>
 8025b4a:	e07b      	b.n	8025c44 <_dtoa_r+0x1e4>
 8025b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025b4e:	9618      	str	r6, [sp, #96]	@ 0x60
 8025b50:	0319      	lsls	r1, r3, #12
 8025b52:	4b9c      	ldr	r3, [pc, #624]	@ (8025dc4 <_dtoa_r+0x364>)
 8025b54:	0b09      	lsrs	r1, r1, #12
 8025b56:	430b      	orrs	r3, r1
 8025b58:	499b      	ldr	r1, [pc, #620]	@ (8025dc8 <_dtoa_r+0x368>)
 8025b5a:	1857      	adds	r7, r2, r1
 8025b5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025b5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025b60:	0019      	movs	r1, r3
 8025b62:	2200      	movs	r2, #0
 8025b64:	4b99      	ldr	r3, [pc, #612]	@ (8025dcc <_dtoa_r+0x36c>)
 8025b66:	f7dd f9db 	bl	8002f20 <__aeabi_dsub>
 8025b6a:	4a99      	ldr	r2, [pc, #612]	@ (8025dd0 <_dtoa_r+0x370>)
 8025b6c:	4b99      	ldr	r3, [pc, #612]	@ (8025dd4 <_dtoa_r+0x374>)
 8025b6e:	f7dc fef1 	bl	8002954 <__aeabi_dmul>
 8025b72:	4a99      	ldr	r2, [pc, #612]	@ (8025dd8 <_dtoa_r+0x378>)
 8025b74:	4b99      	ldr	r3, [pc, #612]	@ (8025ddc <_dtoa_r+0x37c>)
 8025b76:	f7db feed 	bl	8001954 <__aeabi_dadd>
 8025b7a:	0004      	movs	r4, r0
 8025b7c:	0038      	movs	r0, r7
 8025b7e:	000d      	movs	r5, r1
 8025b80:	f7dd fe36 	bl	80037f0 <__aeabi_i2d>
 8025b84:	4a96      	ldr	r2, [pc, #600]	@ (8025de0 <_dtoa_r+0x380>)
 8025b86:	4b97      	ldr	r3, [pc, #604]	@ (8025de4 <_dtoa_r+0x384>)
 8025b88:	f7dc fee4 	bl	8002954 <__aeabi_dmul>
 8025b8c:	0002      	movs	r2, r0
 8025b8e:	000b      	movs	r3, r1
 8025b90:	0020      	movs	r0, r4
 8025b92:	0029      	movs	r1, r5
 8025b94:	f7db fede 	bl	8001954 <__aeabi_dadd>
 8025b98:	0004      	movs	r4, r0
 8025b9a:	000d      	movs	r5, r1
 8025b9c:	f7dd fdec 	bl	8003778 <__aeabi_d2iz>
 8025ba0:	2200      	movs	r2, #0
 8025ba2:	9004      	str	r0, [sp, #16]
 8025ba4:	2300      	movs	r3, #0
 8025ba6:	0020      	movs	r0, r4
 8025ba8:	0029      	movs	r1, r5
 8025baa:	f7da fc87 	bl	80004bc <__aeabi_dcmplt>
 8025bae:	2800      	cmp	r0, #0
 8025bb0:	d00b      	beq.n	8025bca <_dtoa_r+0x16a>
 8025bb2:	9804      	ldr	r0, [sp, #16]
 8025bb4:	f7dd fe1c 	bl	80037f0 <__aeabi_i2d>
 8025bb8:	002b      	movs	r3, r5
 8025bba:	0022      	movs	r2, r4
 8025bbc:	f7da fc78 	bl	80004b0 <__aeabi_dcmpeq>
 8025bc0:	4243      	negs	r3, r0
 8025bc2:	4158      	adcs	r0, r3
 8025bc4:	9b04      	ldr	r3, [sp, #16]
 8025bc6:	1a1b      	subs	r3, r3, r0
 8025bc8:	9304      	str	r3, [sp, #16]
 8025bca:	2301      	movs	r3, #1
 8025bcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8025bce:	9b04      	ldr	r3, [sp, #16]
 8025bd0:	2b16      	cmp	r3, #22
 8025bd2:	d810      	bhi.n	8025bf6 <_dtoa_r+0x196>
 8025bd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025bd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025bd8:	9a04      	ldr	r2, [sp, #16]
 8025bda:	4b83      	ldr	r3, [pc, #524]	@ (8025de8 <_dtoa_r+0x388>)
 8025bdc:	00d2      	lsls	r2, r2, #3
 8025bde:	189b      	adds	r3, r3, r2
 8025be0:	681a      	ldr	r2, [r3, #0]
 8025be2:	685b      	ldr	r3, [r3, #4]
 8025be4:	f7da fc6a 	bl	80004bc <__aeabi_dcmplt>
 8025be8:	2800      	cmp	r0, #0
 8025bea:	d047      	beq.n	8025c7c <_dtoa_r+0x21c>
 8025bec:	9b04      	ldr	r3, [sp, #16]
 8025bee:	3b01      	subs	r3, #1
 8025bf0:	9304      	str	r3, [sp, #16]
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	9315      	str	r3, [sp, #84]	@ 0x54
 8025bf6:	2200      	movs	r2, #0
 8025bf8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025bfa:	9206      	str	r2, [sp, #24]
 8025bfc:	1bdb      	subs	r3, r3, r7
 8025bfe:	1e5a      	subs	r2, r3, #1
 8025c00:	d53e      	bpl.n	8025c80 <_dtoa_r+0x220>
 8025c02:	2201      	movs	r2, #1
 8025c04:	1ad3      	subs	r3, r2, r3
 8025c06:	9306      	str	r3, [sp, #24]
 8025c08:	2300      	movs	r3, #0
 8025c0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c0c:	9b04      	ldr	r3, [sp, #16]
 8025c0e:	2b00      	cmp	r3, #0
 8025c10:	db38      	blt.n	8025c84 <_dtoa_r+0x224>
 8025c12:	9a04      	ldr	r2, [sp, #16]
 8025c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c16:	4694      	mov	ip, r2
 8025c18:	4463      	add	r3, ip
 8025c1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c1c:	2300      	movs	r3, #0
 8025c1e:	9214      	str	r2, [sp, #80]	@ 0x50
 8025c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025c22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025c24:	2401      	movs	r4, #1
 8025c26:	2b09      	cmp	r3, #9
 8025c28:	d862      	bhi.n	8025cf0 <_dtoa_r+0x290>
 8025c2a:	2b05      	cmp	r3, #5
 8025c2c:	dd02      	ble.n	8025c34 <_dtoa_r+0x1d4>
 8025c2e:	2400      	movs	r4, #0
 8025c30:	3b04      	subs	r3, #4
 8025c32:	9322      	str	r3, [sp, #136]	@ 0x88
 8025c34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025c36:	1e98      	subs	r0, r3, #2
 8025c38:	2803      	cmp	r0, #3
 8025c3a:	d863      	bhi.n	8025d04 <_dtoa_r+0x2a4>
 8025c3c:	f7da fa9e 	bl	800017c <__gnu_thumb1_case_uqi>
 8025c40:	2b385654 	.word	0x2b385654
 8025c44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025c46:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8025c48:	18f6      	adds	r6, r6, r3
 8025c4a:	4b68      	ldr	r3, [pc, #416]	@ (8025dec <_dtoa_r+0x38c>)
 8025c4c:	18f2      	adds	r2, r6, r3
 8025c4e:	2a20      	cmp	r2, #32
 8025c50:	dd0f      	ble.n	8025c72 <_dtoa_r+0x212>
 8025c52:	2340      	movs	r3, #64	@ 0x40
 8025c54:	1a9b      	subs	r3, r3, r2
 8025c56:	409f      	lsls	r7, r3
 8025c58:	4b65      	ldr	r3, [pc, #404]	@ (8025df0 <_dtoa_r+0x390>)
 8025c5a:	0038      	movs	r0, r7
 8025c5c:	18f3      	adds	r3, r6, r3
 8025c5e:	40dc      	lsrs	r4, r3
 8025c60:	4320      	orrs	r0, r4
 8025c62:	f7dd fdf3 	bl	800384c <__aeabi_ui2d>
 8025c66:	2201      	movs	r2, #1
 8025c68:	4b62      	ldr	r3, [pc, #392]	@ (8025df4 <_dtoa_r+0x394>)
 8025c6a:	1e77      	subs	r7, r6, #1
 8025c6c:	18cb      	adds	r3, r1, r3
 8025c6e:	9218      	str	r2, [sp, #96]	@ 0x60
 8025c70:	e776      	b.n	8025b60 <_dtoa_r+0x100>
 8025c72:	2320      	movs	r3, #32
 8025c74:	0020      	movs	r0, r4
 8025c76:	1a9b      	subs	r3, r3, r2
 8025c78:	4098      	lsls	r0, r3
 8025c7a:	e7f2      	b.n	8025c62 <_dtoa_r+0x202>
 8025c7c:	9015      	str	r0, [sp, #84]	@ 0x54
 8025c7e:	e7ba      	b.n	8025bf6 <_dtoa_r+0x196>
 8025c80:	920d      	str	r2, [sp, #52]	@ 0x34
 8025c82:	e7c3      	b.n	8025c0c <_dtoa_r+0x1ac>
 8025c84:	9b06      	ldr	r3, [sp, #24]
 8025c86:	9a04      	ldr	r2, [sp, #16]
 8025c88:	1a9b      	subs	r3, r3, r2
 8025c8a:	9306      	str	r3, [sp, #24]
 8025c8c:	4253      	negs	r3, r2
 8025c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025c90:	2300      	movs	r3, #0
 8025c92:	9314      	str	r3, [sp, #80]	@ 0x50
 8025c94:	e7c5      	b.n	8025c22 <_dtoa_r+0x1c2>
 8025c96:	2301      	movs	r3, #1
 8025c98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8025c9c:	4694      	mov	ip, r2
 8025c9e:	9b04      	ldr	r3, [sp, #16]
 8025ca0:	4463      	add	r3, ip
 8025ca2:	930e      	str	r3, [sp, #56]	@ 0x38
 8025ca4:	3301      	adds	r3, #1
 8025ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	dc08      	bgt.n	8025cbe <_dtoa_r+0x25e>
 8025cac:	2301      	movs	r3, #1
 8025cae:	e006      	b.n	8025cbe <_dtoa_r+0x25e>
 8025cb0:	2301      	movs	r3, #1
 8025cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8025cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	dd28      	ble.n	8025d0c <_dtoa_r+0x2ac>
 8025cba:	930e      	str	r3, [sp, #56]	@ 0x38
 8025cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cbe:	9a03      	ldr	r2, [sp, #12]
 8025cc0:	2100      	movs	r1, #0
 8025cc2:	69d0      	ldr	r0, [r2, #28]
 8025cc4:	2204      	movs	r2, #4
 8025cc6:	0015      	movs	r5, r2
 8025cc8:	3514      	adds	r5, #20
 8025cca:	429d      	cmp	r5, r3
 8025ccc:	d923      	bls.n	8025d16 <_dtoa_r+0x2b6>
 8025cce:	6041      	str	r1, [r0, #4]
 8025cd0:	9803      	ldr	r0, [sp, #12]
 8025cd2:	f001 f927 	bl	8026f24 <_Balloc>
 8025cd6:	9008      	str	r0, [sp, #32]
 8025cd8:	2800      	cmp	r0, #0
 8025cda:	d11f      	bne.n	8025d1c <_dtoa_r+0x2bc>
 8025cdc:	21b0      	movs	r1, #176	@ 0xb0
 8025cde:	4b46      	ldr	r3, [pc, #280]	@ (8025df8 <_dtoa_r+0x398>)
 8025ce0:	4831      	ldr	r0, [pc, #196]	@ (8025da8 <_dtoa_r+0x348>)
 8025ce2:	9a08      	ldr	r2, [sp, #32]
 8025ce4:	31ff      	adds	r1, #255	@ 0xff
 8025ce6:	e6d0      	b.n	8025a8a <_dtoa_r+0x2a>
 8025ce8:	2300      	movs	r3, #0
 8025cea:	e7e2      	b.n	8025cb2 <_dtoa_r+0x252>
 8025cec:	2300      	movs	r3, #0
 8025cee:	e7d3      	b.n	8025c98 <_dtoa_r+0x238>
 8025cf0:	2300      	movs	r3, #0
 8025cf2:	9410      	str	r4, [sp, #64]	@ 0x40
 8025cf4:	9322      	str	r3, [sp, #136]	@ 0x88
 8025cf6:	3b01      	subs	r3, #1
 8025cf8:	2200      	movs	r2, #0
 8025cfa:	930e      	str	r3, [sp, #56]	@ 0x38
 8025cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cfe:	3313      	adds	r3, #19
 8025d00:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025d02:	e7dc      	b.n	8025cbe <_dtoa_r+0x25e>
 8025d04:	2301      	movs	r3, #1
 8025d06:	9310      	str	r3, [sp, #64]	@ 0x40
 8025d08:	3b02      	subs	r3, #2
 8025d0a:	e7f5      	b.n	8025cf8 <_dtoa_r+0x298>
 8025d0c:	2301      	movs	r3, #1
 8025d0e:	001a      	movs	r2, r3
 8025d10:	930e      	str	r3, [sp, #56]	@ 0x38
 8025d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d14:	e7f4      	b.n	8025d00 <_dtoa_r+0x2a0>
 8025d16:	3101      	adds	r1, #1
 8025d18:	0052      	lsls	r2, r2, #1
 8025d1a:	e7d4      	b.n	8025cc6 <_dtoa_r+0x266>
 8025d1c:	9b03      	ldr	r3, [sp, #12]
 8025d1e:	9a08      	ldr	r2, [sp, #32]
 8025d20:	69db      	ldr	r3, [r3, #28]
 8025d22:	601a      	str	r2, [r3, #0]
 8025d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d26:	2b0e      	cmp	r3, #14
 8025d28:	d900      	bls.n	8025d2c <_dtoa_r+0x2cc>
 8025d2a:	e0d6      	b.n	8025eda <_dtoa_r+0x47a>
 8025d2c:	2c00      	cmp	r4, #0
 8025d2e:	d100      	bne.n	8025d32 <_dtoa_r+0x2d2>
 8025d30:	e0d3      	b.n	8025eda <_dtoa_r+0x47a>
 8025d32:	9b04      	ldr	r3, [sp, #16]
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	dd63      	ble.n	8025e00 <_dtoa_r+0x3a0>
 8025d38:	210f      	movs	r1, #15
 8025d3a:	9a04      	ldr	r2, [sp, #16]
 8025d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8025de8 <_dtoa_r+0x388>)
 8025d3e:	400a      	ands	r2, r1
 8025d40:	00d2      	lsls	r2, r2, #3
 8025d42:	189b      	adds	r3, r3, r2
 8025d44:	681e      	ldr	r6, [r3, #0]
 8025d46:	685f      	ldr	r7, [r3, #4]
 8025d48:	9b04      	ldr	r3, [sp, #16]
 8025d4a:	2402      	movs	r4, #2
 8025d4c:	111d      	asrs	r5, r3, #4
 8025d4e:	05db      	lsls	r3, r3, #23
 8025d50:	d50a      	bpl.n	8025d68 <_dtoa_r+0x308>
 8025d52:	4b2a      	ldr	r3, [pc, #168]	@ (8025dfc <_dtoa_r+0x39c>)
 8025d54:	400d      	ands	r5, r1
 8025d56:	6a1a      	ldr	r2, [r3, #32]
 8025d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025d5a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025d5c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025d5e:	f7dc f9bf 	bl	80020e0 <__aeabi_ddiv>
 8025d62:	900a      	str	r0, [sp, #40]	@ 0x28
 8025d64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d66:	3401      	adds	r4, #1
 8025d68:	4b24      	ldr	r3, [pc, #144]	@ (8025dfc <_dtoa_r+0x39c>)
 8025d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d6c:	2d00      	cmp	r5, #0
 8025d6e:	d108      	bne.n	8025d82 <_dtoa_r+0x322>
 8025d70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025d72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025d74:	0032      	movs	r2, r6
 8025d76:	003b      	movs	r3, r7
 8025d78:	f7dc f9b2 	bl	80020e0 <__aeabi_ddiv>
 8025d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8025d7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d80:	e059      	b.n	8025e36 <_dtoa_r+0x3d6>
 8025d82:	2301      	movs	r3, #1
 8025d84:	421d      	tst	r5, r3
 8025d86:	d009      	beq.n	8025d9c <_dtoa_r+0x33c>
 8025d88:	18e4      	adds	r4, r4, r3
 8025d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d8c:	0030      	movs	r0, r6
 8025d8e:	681a      	ldr	r2, [r3, #0]
 8025d90:	685b      	ldr	r3, [r3, #4]
 8025d92:	0039      	movs	r1, r7
 8025d94:	f7dc fdde 	bl	8002954 <__aeabi_dmul>
 8025d98:	0006      	movs	r6, r0
 8025d9a:	000f      	movs	r7, r1
 8025d9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d9e:	106d      	asrs	r5, r5, #1
 8025da0:	3308      	adds	r3, #8
 8025da2:	e7e2      	b.n	8025d6a <_dtoa_r+0x30a>
 8025da4:	0802e1db 	.word	0x0802e1db
 8025da8:	0802e1f2 	.word	0x0802e1f2
 8025dac:	7ff00000 	.word	0x7ff00000
 8025db0:	0000270f 	.word	0x0000270f
 8025db4:	0802e1d7 	.word	0x0802e1d7
 8025db8:	0802e1da 	.word	0x0802e1da
 8025dbc:	0802e1a3 	.word	0x0802e1a3
 8025dc0:	0802e1a2 	.word	0x0802e1a2
 8025dc4:	3ff00000 	.word	0x3ff00000
 8025dc8:	fffffc01 	.word	0xfffffc01
 8025dcc:	3ff80000 	.word	0x3ff80000
 8025dd0:	636f4361 	.word	0x636f4361
 8025dd4:	3fd287a7 	.word	0x3fd287a7
 8025dd8:	8b60c8b3 	.word	0x8b60c8b3
 8025ddc:	3fc68a28 	.word	0x3fc68a28
 8025de0:	509f79fb 	.word	0x509f79fb
 8025de4:	3fd34413 	.word	0x3fd34413
 8025de8:	0802e4f0 	.word	0x0802e4f0
 8025dec:	00000432 	.word	0x00000432
 8025df0:	00000412 	.word	0x00000412
 8025df4:	fe100000 	.word	0xfe100000
 8025df8:	0802e24a 	.word	0x0802e24a
 8025dfc:	0802e4c8 	.word	0x0802e4c8
 8025e00:	9b04      	ldr	r3, [sp, #16]
 8025e02:	2402      	movs	r4, #2
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	d016      	beq.n	8025e36 <_dtoa_r+0x3d6>
 8025e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025e0c:	220f      	movs	r2, #15
 8025e0e:	425d      	negs	r5, r3
 8025e10:	402a      	ands	r2, r5
 8025e12:	4bd5      	ldr	r3, [pc, #852]	@ (8026168 <_dtoa_r+0x708>)
 8025e14:	00d2      	lsls	r2, r2, #3
 8025e16:	189b      	adds	r3, r3, r2
 8025e18:	681a      	ldr	r2, [r3, #0]
 8025e1a:	685b      	ldr	r3, [r3, #4]
 8025e1c:	f7dc fd9a 	bl	8002954 <__aeabi_dmul>
 8025e20:	2701      	movs	r7, #1
 8025e22:	2300      	movs	r3, #0
 8025e24:	900a      	str	r0, [sp, #40]	@ 0x28
 8025e26:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025e28:	4ed0      	ldr	r6, [pc, #832]	@ (802616c <_dtoa_r+0x70c>)
 8025e2a:	112d      	asrs	r5, r5, #4
 8025e2c:	2d00      	cmp	r5, #0
 8025e2e:	d000      	beq.n	8025e32 <_dtoa_r+0x3d2>
 8025e30:	e095      	b.n	8025f5e <_dtoa_r+0x4fe>
 8025e32:	2b00      	cmp	r3, #0
 8025e34:	d1a2      	bne.n	8025d7c <_dtoa_r+0x31c>
 8025e36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025e38:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025e3c:	2b00      	cmp	r3, #0
 8025e3e:	d100      	bne.n	8025e42 <_dtoa_r+0x3e2>
 8025e40:	e098      	b.n	8025f74 <_dtoa_r+0x514>
 8025e42:	2200      	movs	r2, #0
 8025e44:	0030      	movs	r0, r6
 8025e46:	0039      	movs	r1, r7
 8025e48:	4bc9      	ldr	r3, [pc, #804]	@ (8026170 <_dtoa_r+0x710>)
 8025e4a:	f7da fb37 	bl	80004bc <__aeabi_dcmplt>
 8025e4e:	2800      	cmp	r0, #0
 8025e50:	d100      	bne.n	8025e54 <_dtoa_r+0x3f4>
 8025e52:	e08f      	b.n	8025f74 <_dtoa_r+0x514>
 8025e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d100      	bne.n	8025e5c <_dtoa_r+0x3fc>
 8025e5a:	e08b      	b.n	8025f74 <_dtoa_r+0x514>
 8025e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e5e:	2b00      	cmp	r3, #0
 8025e60:	dd37      	ble.n	8025ed2 <_dtoa_r+0x472>
 8025e62:	9b04      	ldr	r3, [sp, #16]
 8025e64:	2200      	movs	r2, #0
 8025e66:	3b01      	subs	r3, #1
 8025e68:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e6a:	0030      	movs	r0, r6
 8025e6c:	4bc1      	ldr	r3, [pc, #772]	@ (8026174 <_dtoa_r+0x714>)
 8025e6e:	0039      	movs	r1, r7
 8025e70:	f7dc fd70 	bl	8002954 <__aeabi_dmul>
 8025e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8025e76:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025e7a:	3401      	adds	r4, #1
 8025e7c:	0020      	movs	r0, r4
 8025e7e:	9311      	str	r3, [sp, #68]	@ 0x44
 8025e80:	f7dd fcb6 	bl	80037f0 <__aeabi_i2d>
 8025e84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e88:	f7dc fd64 	bl	8002954 <__aeabi_dmul>
 8025e8c:	4bba      	ldr	r3, [pc, #744]	@ (8026178 <_dtoa_r+0x718>)
 8025e8e:	2200      	movs	r2, #0
 8025e90:	f7db fd60 	bl	8001954 <__aeabi_dadd>
 8025e94:	4bb9      	ldr	r3, [pc, #740]	@ (802617c <_dtoa_r+0x71c>)
 8025e96:	0006      	movs	r6, r0
 8025e98:	18cf      	adds	r7, r1, r3
 8025e9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e9c:	2b00      	cmp	r3, #0
 8025e9e:	d16d      	bne.n	8025f7c <_dtoa_r+0x51c>
 8025ea0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025ea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025ea4:	2200      	movs	r2, #0
 8025ea6:	4bb6      	ldr	r3, [pc, #728]	@ (8026180 <_dtoa_r+0x720>)
 8025ea8:	f7dd f83a 	bl	8002f20 <__aeabi_dsub>
 8025eac:	0032      	movs	r2, r6
 8025eae:	003b      	movs	r3, r7
 8025eb0:	0004      	movs	r4, r0
 8025eb2:	000d      	movs	r5, r1
 8025eb4:	f7da fb16 	bl	80004e4 <__aeabi_dcmpgt>
 8025eb8:	2800      	cmp	r0, #0
 8025eba:	d000      	beq.n	8025ebe <_dtoa_r+0x45e>
 8025ebc:	e2b6      	b.n	802642c <_dtoa_r+0x9cc>
 8025ebe:	2180      	movs	r1, #128	@ 0x80
 8025ec0:	0609      	lsls	r1, r1, #24
 8025ec2:	187b      	adds	r3, r7, r1
 8025ec4:	0032      	movs	r2, r6
 8025ec6:	0020      	movs	r0, r4
 8025ec8:	0029      	movs	r1, r5
 8025eca:	f7da faf7 	bl	80004bc <__aeabi_dcmplt>
 8025ece:	2800      	cmp	r0, #0
 8025ed0:	d128      	bne.n	8025f24 <_dtoa_r+0x4c4>
 8025ed2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025ed4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ed8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025eda:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	da00      	bge.n	8025ee2 <_dtoa_r+0x482>
 8025ee0:	e174      	b.n	80261cc <_dtoa_r+0x76c>
 8025ee2:	9a04      	ldr	r2, [sp, #16]
 8025ee4:	2a0e      	cmp	r2, #14
 8025ee6:	dd00      	ble.n	8025eea <_dtoa_r+0x48a>
 8025ee8:	e170      	b.n	80261cc <_dtoa_r+0x76c>
 8025eea:	4b9f      	ldr	r3, [pc, #636]	@ (8026168 <_dtoa_r+0x708>)
 8025eec:	00d2      	lsls	r2, r2, #3
 8025eee:	189b      	adds	r3, r3, r2
 8025ef0:	685c      	ldr	r4, [r3, #4]
 8025ef2:	681b      	ldr	r3, [r3, #0]
 8025ef4:	9306      	str	r3, [sp, #24]
 8025ef6:	9407      	str	r4, [sp, #28]
 8025ef8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025efa:	2b00      	cmp	r3, #0
 8025efc:	db00      	blt.n	8025f00 <_dtoa_r+0x4a0>
 8025efe:	e0e7      	b.n	80260d0 <_dtoa_r+0x670>
 8025f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	dd00      	ble.n	8025f08 <_dtoa_r+0x4a8>
 8025f06:	e0e3      	b.n	80260d0 <_dtoa_r+0x670>
 8025f08:	d10c      	bne.n	8025f24 <_dtoa_r+0x4c4>
 8025f0a:	9806      	ldr	r0, [sp, #24]
 8025f0c:	9907      	ldr	r1, [sp, #28]
 8025f0e:	2200      	movs	r2, #0
 8025f10:	4b9b      	ldr	r3, [pc, #620]	@ (8026180 <_dtoa_r+0x720>)
 8025f12:	f7dc fd1f 	bl	8002954 <__aeabi_dmul>
 8025f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f1a:	f7da faed 	bl	80004f8 <__aeabi_dcmpge>
 8025f1e:	2800      	cmp	r0, #0
 8025f20:	d100      	bne.n	8025f24 <_dtoa_r+0x4c4>
 8025f22:	e286      	b.n	8026432 <_dtoa_r+0x9d2>
 8025f24:	2600      	movs	r6, #0
 8025f26:	0037      	movs	r7, r6
 8025f28:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025f2a:	9c08      	ldr	r4, [sp, #32]
 8025f2c:	43db      	mvns	r3, r3
 8025f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f30:	9704      	str	r7, [sp, #16]
 8025f32:	2700      	movs	r7, #0
 8025f34:	0031      	movs	r1, r6
 8025f36:	9803      	ldr	r0, [sp, #12]
 8025f38:	f001 f838 	bl	8026fac <_Bfree>
 8025f3c:	9b04      	ldr	r3, [sp, #16]
 8025f3e:	2b00      	cmp	r3, #0
 8025f40:	d100      	bne.n	8025f44 <_dtoa_r+0x4e4>
 8025f42:	e0bb      	b.n	80260bc <_dtoa_r+0x65c>
 8025f44:	2f00      	cmp	r7, #0
 8025f46:	d005      	beq.n	8025f54 <_dtoa_r+0x4f4>
 8025f48:	429f      	cmp	r7, r3
 8025f4a:	d003      	beq.n	8025f54 <_dtoa_r+0x4f4>
 8025f4c:	0039      	movs	r1, r7
 8025f4e:	9803      	ldr	r0, [sp, #12]
 8025f50:	f001 f82c 	bl	8026fac <_Bfree>
 8025f54:	9904      	ldr	r1, [sp, #16]
 8025f56:	9803      	ldr	r0, [sp, #12]
 8025f58:	f001 f828 	bl	8026fac <_Bfree>
 8025f5c:	e0ae      	b.n	80260bc <_dtoa_r+0x65c>
 8025f5e:	423d      	tst	r5, r7
 8025f60:	d005      	beq.n	8025f6e <_dtoa_r+0x50e>
 8025f62:	6832      	ldr	r2, [r6, #0]
 8025f64:	6873      	ldr	r3, [r6, #4]
 8025f66:	f7dc fcf5 	bl	8002954 <__aeabi_dmul>
 8025f6a:	003b      	movs	r3, r7
 8025f6c:	3401      	adds	r4, #1
 8025f6e:	106d      	asrs	r5, r5, #1
 8025f70:	3608      	adds	r6, #8
 8025f72:	e75b      	b.n	8025e2c <_dtoa_r+0x3cc>
 8025f74:	9b04      	ldr	r3, [sp, #16]
 8025f76:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f7a:	e77f      	b.n	8025e7c <_dtoa_r+0x41c>
 8025f7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8026168 <_dtoa_r+0x708>)
 8025f80:	3a01      	subs	r2, #1
 8025f82:	00d2      	lsls	r2, r2, #3
 8025f84:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025f86:	189b      	adds	r3, r3, r2
 8025f88:	681a      	ldr	r2, [r3, #0]
 8025f8a:	685b      	ldr	r3, [r3, #4]
 8025f8c:	2900      	cmp	r1, #0
 8025f8e:	d04c      	beq.n	802602a <_dtoa_r+0x5ca>
 8025f90:	2000      	movs	r0, #0
 8025f92:	497c      	ldr	r1, [pc, #496]	@ (8026184 <_dtoa_r+0x724>)
 8025f94:	f7dc f8a4 	bl	80020e0 <__aeabi_ddiv>
 8025f98:	0032      	movs	r2, r6
 8025f9a:	003b      	movs	r3, r7
 8025f9c:	f7dc ffc0 	bl	8002f20 <__aeabi_dsub>
 8025fa0:	9a08      	ldr	r2, [sp, #32]
 8025fa2:	0006      	movs	r6, r0
 8025fa4:	4694      	mov	ip, r2
 8025fa6:	000f      	movs	r7, r1
 8025fa8:	9b08      	ldr	r3, [sp, #32]
 8025faa:	9316      	str	r3, [sp, #88]	@ 0x58
 8025fac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025fae:	4463      	add	r3, ip
 8025fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8025fb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025fb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025fb6:	f7dd fbdf 	bl	8003778 <__aeabi_d2iz>
 8025fba:	0005      	movs	r5, r0
 8025fbc:	f7dd fc18 	bl	80037f0 <__aeabi_i2d>
 8025fc0:	0002      	movs	r2, r0
 8025fc2:	000b      	movs	r3, r1
 8025fc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025fc6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025fc8:	f7dc ffaa 	bl	8002f20 <__aeabi_dsub>
 8025fcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025fce:	3530      	adds	r5, #48	@ 0x30
 8025fd0:	1c5c      	adds	r4, r3, #1
 8025fd2:	701d      	strb	r5, [r3, #0]
 8025fd4:	0032      	movs	r2, r6
 8025fd6:	003b      	movs	r3, r7
 8025fd8:	900a      	str	r0, [sp, #40]	@ 0x28
 8025fda:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025fdc:	f7da fa6e 	bl	80004bc <__aeabi_dcmplt>
 8025fe0:	2800      	cmp	r0, #0
 8025fe2:	d16b      	bne.n	80260bc <_dtoa_r+0x65c>
 8025fe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025fe8:	2000      	movs	r0, #0
 8025fea:	4961      	ldr	r1, [pc, #388]	@ (8026170 <_dtoa_r+0x710>)
 8025fec:	f7dc ff98 	bl	8002f20 <__aeabi_dsub>
 8025ff0:	0032      	movs	r2, r6
 8025ff2:	003b      	movs	r3, r7
 8025ff4:	f7da fa62 	bl	80004bc <__aeabi_dcmplt>
 8025ff8:	2800      	cmp	r0, #0
 8025ffa:	d000      	beq.n	8025ffe <_dtoa_r+0x59e>
 8025ffc:	e0c6      	b.n	802618c <_dtoa_r+0x72c>
 8025ffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026000:	42a3      	cmp	r3, r4
 8026002:	d100      	bne.n	8026006 <_dtoa_r+0x5a6>
 8026004:	e765      	b.n	8025ed2 <_dtoa_r+0x472>
 8026006:	2200      	movs	r2, #0
 8026008:	0030      	movs	r0, r6
 802600a:	0039      	movs	r1, r7
 802600c:	4b59      	ldr	r3, [pc, #356]	@ (8026174 <_dtoa_r+0x714>)
 802600e:	f7dc fca1 	bl	8002954 <__aeabi_dmul>
 8026012:	2200      	movs	r2, #0
 8026014:	0006      	movs	r6, r0
 8026016:	000f      	movs	r7, r1
 8026018:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802601a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802601c:	4b55      	ldr	r3, [pc, #340]	@ (8026174 <_dtoa_r+0x714>)
 802601e:	f7dc fc99 	bl	8002954 <__aeabi_dmul>
 8026022:	9416      	str	r4, [sp, #88]	@ 0x58
 8026024:	900a      	str	r0, [sp, #40]	@ 0x28
 8026026:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026028:	e7c3      	b.n	8025fb2 <_dtoa_r+0x552>
 802602a:	0030      	movs	r0, r6
 802602c:	0039      	movs	r1, r7
 802602e:	f7dc fc91 	bl	8002954 <__aeabi_dmul>
 8026032:	9d08      	ldr	r5, [sp, #32]
 8026034:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026036:	002b      	movs	r3, r5
 8026038:	4694      	mov	ip, r2
 802603a:	9016      	str	r0, [sp, #88]	@ 0x58
 802603c:	9117      	str	r1, [sp, #92]	@ 0x5c
 802603e:	4463      	add	r3, ip
 8026040:	9319      	str	r3, [sp, #100]	@ 0x64
 8026042:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026046:	f7dd fb97 	bl	8003778 <__aeabi_d2iz>
 802604a:	0004      	movs	r4, r0
 802604c:	f7dd fbd0 	bl	80037f0 <__aeabi_i2d>
 8026050:	000b      	movs	r3, r1
 8026052:	0002      	movs	r2, r0
 8026054:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026056:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026058:	f7dc ff62 	bl	8002f20 <__aeabi_dsub>
 802605c:	3430      	adds	r4, #48	@ 0x30
 802605e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026060:	702c      	strb	r4, [r5, #0]
 8026062:	3501      	adds	r5, #1
 8026064:	0006      	movs	r6, r0
 8026066:	000f      	movs	r7, r1
 8026068:	42ab      	cmp	r3, r5
 802606a:	d12a      	bne.n	80260c2 <_dtoa_r+0x662>
 802606c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802606e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026070:	9b08      	ldr	r3, [sp, #32]
 8026072:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026074:	469c      	mov	ip, r3
 8026076:	2200      	movs	r2, #0
 8026078:	4b42      	ldr	r3, [pc, #264]	@ (8026184 <_dtoa_r+0x724>)
 802607a:	4464      	add	r4, ip
 802607c:	f7db fc6a 	bl	8001954 <__aeabi_dadd>
 8026080:	0002      	movs	r2, r0
 8026082:	000b      	movs	r3, r1
 8026084:	0030      	movs	r0, r6
 8026086:	0039      	movs	r1, r7
 8026088:	f7da fa2c 	bl	80004e4 <__aeabi_dcmpgt>
 802608c:	2800      	cmp	r0, #0
 802608e:	d000      	beq.n	8026092 <_dtoa_r+0x632>
 8026090:	e07c      	b.n	802618c <_dtoa_r+0x72c>
 8026092:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026094:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026096:	2000      	movs	r0, #0
 8026098:	493a      	ldr	r1, [pc, #232]	@ (8026184 <_dtoa_r+0x724>)
 802609a:	f7dc ff41 	bl	8002f20 <__aeabi_dsub>
 802609e:	0002      	movs	r2, r0
 80260a0:	000b      	movs	r3, r1
 80260a2:	0030      	movs	r0, r6
 80260a4:	0039      	movs	r1, r7
 80260a6:	f7da fa09 	bl	80004bc <__aeabi_dcmplt>
 80260aa:	2800      	cmp	r0, #0
 80260ac:	d100      	bne.n	80260b0 <_dtoa_r+0x650>
 80260ae:	e710      	b.n	8025ed2 <_dtoa_r+0x472>
 80260b0:	0023      	movs	r3, r4
 80260b2:	3c01      	subs	r4, #1
 80260b4:	7822      	ldrb	r2, [r4, #0]
 80260b6:	2a30      	cmp	r2, #48	@ 0x30
 80260b8:	d0fa      	beq.n	80260b0 <_dtoa_r+0x650>
 80260ba:	001c      	movs	r4, r3
 80260bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80260be:	9304      	str	r3, [sp, #16]
 80260c0:	e042      	b.n	8026148 <_dtoa_r+0x6e8>
 80260c2:	2200      	movs	r2, #0
 80260c4:	4b2b      	ldr	r3, [pc, #172]	@ (8026174 <_dtoa_r+0x714>)
 80260c6:	f7dc fc45 	bl	8002954 <__aeabi_dmul>
 80260ca:	900a      	str	r0, [sp, #40]	@ 0x28
 80260cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80260ce:	e7b8      	b.n	8026042 <_dtoa_r+0x5e2>
 80260d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80260d2:	9d08      	ldr	r5, [sp, #32]
 80260d4:	3b01      	subs	r3, #1
 80260d6:	195b      	adds	r3, r3, r5
 80260d8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80260da:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80260dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80260de:	9a06      	ldr	r2, [sp, #24]
 80260e0:	9b07      	ldr	r3, [sp, #28]
 80260e2:	0030      	movs	r0, r6
 80260e4:	0039      	movs	r1, r7
 80260e6:	f7db fffb 	bl	80020e0 <__aeabi_ddiv>
 80260ea:	f7dd fb45 	bl	8003778 <__aeabi_d2iz>
 80260ee:	9009      	str	r0, [sp, #36]	@ 0x24
 80260f0:	f7dd fb7e 	bl	80037f0 <__aeabi_i2d>
 80260f4:	9a06      	ldr	r2, [sp, #24]
 80260f6:	9b07      	ldr	r3, [sp, #28]
 80260f8:	f7dc fc2c 	bl	8002954 <__aeabi_dmul>
 80260fc:	0002      	movs	r2, r0
 80260fe:	000b      	movs	r3, r1
 8026100:	0030      	movs	r0, r6
 8026102:	0039      	movs	r1, r7
 8026104:	f7dc ff0c 	bl	8002f20 <__aeabi_dsub>
 8026108:	002b      	movs	r3, r5
 802610a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802610c:	3501      	adds	r5, #1
 802610e:	3230      	adds	r2, #48	@ 0x30
 8026110:	701a      	strb	r2, [r3, #0]
 8026112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026114:	002c      	movs	r4, r5
 8026116:	429a      	cmp	r2, r3
 8026118:	d14b      	bne.n	80261b2 <_dtoa_r+0x752>
 802611a:	0002      	movs	r2, r0
 802611c:	000b      	movs	r3, r1
 802611e:	f7db fc19 	bl	8001954 <__aeabi_dadd>
 8026122:	9a06      	ldr	r2, [sp, #24]
 8026124:	9b07      	ldr	r3, [sp, #28]
 8026126:	0006      	movs	r6, r0
 8026128:	000f      	movs	r7, r1
 802612a:	f7da f9db 	bl	80004e4 <__aeabi_dcmpgt>
 802612e:	2800      	cmp	r0, #0
 8026130:	d12a      	bne.n	8026188 <_dtoa_r+0x728>
 8026132:	9a06      	ldr	r2, [sp, #24]
 8026134:	9b07      	ldr	r3, [sp, #28]
 8026136:	0030      	movs	r0, r6
 8026138:	0039      	movs	r1, r7
 802613a:	f7da f9b9 	bl	80004b0 <__aeabi_dcmpeq>
 802613e:	2800      	cmp	r0, #0
 8026140:	d002      	beq.n	8026148 <_dtoa_r+0x6e8>
 8026142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026144:	07dd      	lsls	r5, r3, #31
 8026146:	d41f      	bmi.n	8026188 <_dtoa_r+0x728>
 8026148:	9905      	ldr	r1, [sp, #20]
 802614a:	9803      	ldr	r0, [sp, #12]
 802614c:	f000 ff2e 	bl	8026fac <_Bfree>
 8026150:	2300      	movs	r3, #0
 8026152:	7023      	strb	r3, [r4, #0]
 8026154:	9b04      	ldr	r3, [sp, #16]
 8026156:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026158:	3301      	adds	r3, #1
 802615a:	6013      	str	r3, [r2, #0]
 802615c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802615e:	2b00      	cmp	r3, #0
 8026160:	d100      	bne.n	8026164 <_dtoa_r+0x704>
 8026162:	e4c7      	b.n	8025af4 <_dtoa_r+0x94>
 8026164:	601c      	str	r4, [r3, #0]
 8026166:	e4c5      	b.n	8025af4 <_dtoa_r+0x94>
 8026168:	0802e4f0 	.word	0x0802e4f0
 802616c:	0802e4c8 	.word	0x0802e4c8
 8026170:	3ff00000 	.word	0x3ff00000
 8026174:	40240000 	.word	0x40240000
 8026178:	401c0000 	.word	0x401c0000
 802617c:	fcc00000 	.word	0xfcc00000
 8026180:	40140000 	.word	0x40140000
 8026184:	3fe00000 	.word	0x3fe00000
 8026188:	9b04      	ldr	r3, [sp, #16]
 802618a:	930c      	str	r3, [sp, #48]	@ 0x30
 802618c:	0023      	movs	r3, r4
 802618e:	001c      	movs	r4, r3
 8026190:	3b01      	subs	r3, #1
 8026192:	781a      	ldrb	r2, [r3, #0]
 8026194:	2a39      	cmp	r2, #57	@ 0x39
 8026196:	d108      	bne.n	80261aa <_dtoa_r+0x74a>
 8026198:	9a08      	ldr	r2, [sp, #32]
 802619a:	429a      	cmp	r2, r3
 802619c:	d1f7      	bne.n	802618e <_dtoa_r+0x72e>
 802619e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80261a0:	9908      	ldr	r1, [sp, #32]
 80261a2:	3201      	adds	r2, #1
 80261a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80261a6:	2230      	movs	r2, #48	@ 0x30
 80261a8:	700a      	strb	r2, [r1, #0]
 80261aa:	781a      	ldrb	r2, [r3, #0]
 80261ac:	3201      	adds	r2, #1
 80261ae:	701a      	strb	r2, [r3, #0]
 80261b0:	e784      	b.n	80260bc <_dtoa_r+0x65c>
 80261b2:	2200      	movs	r2, #0
 80261b4:	4bc6      	ldr	r3, [pc, #792]	@ (80264d0 <_dtoa_r+0xa70>)
 80261b6:	f7dc fbcd 	bl	8002954 <__aeabi_dmul>
 80261ba:	2200      	movs	r2, #0
 80261bc:	2300      	movs	r3, #0
 80261be:	0006      	movs	r6, r0
 80261c0:	000f      	movs	r7, r1
 80261c2:	f7da f975 	bl	80004b0 <__aeabi_dcmpeq>
 80261c6:	2800      	cmp	r0, #0
 80261c8:	d089      	beq.n	80260de <_dtoa_r+0x67e>
 80261ca:	e7bd      	b.n	8026148 <_dtoa_r+0x6e8>
 80261cc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80261ce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80261d0:	9c06      	ldr	r4, [sp, #24]
 80261d2:	2f00      	cmp	r7, #0
 80261d4:	d014      	beq.n	8026200 <_dtoa_r+0x7a0>
 80261d6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80261d8:	2a01      	cmp	r2, #1
 80261da:	dd00      	ble.n	80261de <_dtoa_r+0x77e>
 80261dc:	e0e4      	b.n	80263a8 <_dtoa_r+0x948>
 80261de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80261e0:	2a00      	cmp	r2, #0
 80261e2:	d100      	bne.n	80261e6 <_dtoa_r+0x786>
 80261e4:	e0da      	b.n	802639c <_dtoa_r+0x93c>
 80261e6:	4abb      	ldr	r2, [pc, #748]	@ (80264d4 <_dtoa_r+0xa74>)
 80261e8:	189b      	adds	r3, r3, r2
 80261ea:	9a06      	ldr	r2, [sp, #24]
 80261ec:	2101      	movs	r1, #1
 80261ee:	18d2      	adds	r2, r2, r3
 80261f0:	9206      	str	r2, [sp, #24]
 80261f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80261f4:	9803      	ldr	r0, [sp, #12]
 80261f6:	18d3      	adds	r3, r2, r3
 80261f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80261fa:	f000 ffdb 	bl	80271b4 <__i2b>
 80261fe:	0007      	movs	r7, r0
 8026200:	2c00      	cmp	r4, #0
 8026202:	d00e      	beq.n	8026222 <_dtoa_r+0x7c2>
 8026204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026206:	2b00      	cmp	r3, #0
 8026208:	dd0b      	ble.n	8026222 <_dtoa_r+0x7c2>
 802620a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802620c:	0023      	movs	r3, r4
 802620e:	4294      	cmp	r4, r2
 8026210:	dd00      	ble.n	8026214 <_dtoa_r+0x7b4>
 8026212:	0013      	movs	r3, r2
 8026214:	9a06      	ldr	r2, [sp, #24]
 8026216:	1ae4      	subs	r4, r4, r3
 8026218:	1ad2      	subs	r2, r2, r3
 802621a:	9206      	str	r2, [sp, #24]
 802621c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802621e:	1ad3      	subs	r3, r2, r3
 8026220:	930d      	str	r3, [sp, #52]	@ 0x34
 8026222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026224:	2b00      	cmp	r3, #0
 8026226:	d021      	beq.n	802626c <_dtoa_r+0x80c>
 8026228:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802622a:	2b00      	cmp	r3, #0
 802622c:	d100      	bne.n	8026230 <_dtoa_r+0x7d0>
 802622e:	e0d3      	b.n	80263d8 <_dtoa_r+0x978>
 8026230:	9e05      	ldr	r6, [sp, #20]
 8026232:	2d00      	cmp	r5, #0
 8026234:	d014      	beq.n	8026260 <_dtoa_r+0x800>
 8026236:	0039      	movs	r1, r7
 8026238:	002a      	movs	r2, r5
 802623a:	9803      	ldr	r0, [sp, #12]
 802623c:	f001 f87c 	bl	8027338 <__pow5mult>
 8026240:	9a05      	ldr	r2, [sp, #20]
 8026242:	0001      	movs	r1, r0
 8026244:	0007      	movs	r7, r0
 8026246:	9803      	ldr	r0, [sp, #12]
 8026248:	f000 ffcc 	bl	80271e4 <__multiply>
 802624c:	0006      	movs	r6, r0
 802624e:	9905      	ldr	r1, [sp, #20]
 8026250:	9803      	ldr	r0, [sp, #12]
 8026252:	f000 feab 	bl	8026fac <_Bfree>
 8026256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026258:	9605      	str	r6, [sp, #20]
 802625a:	1b5b      	subs	r3, r3, r5
 802625c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802625e:	d005      	beq.n	802626c <_dtoa_r+0x80c>
 8026260:	0031      	movs	r1, r6
 8026262:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026264:	9803      	ldr	r0, [sp, #12]
 8026266:	f001 f867 	bl	8027338 <__pow5mult>
 802626a:	9005      	str	r0, [sp, #20]
 802626c:	2101      	movs	r1, #1
 802626e:	9803      	ldr	r0, [sp, #12]
 8026270:	f000 ffa0 	bl	80271b4 <__i2b>
 8026274:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026276:	0006      	movs	r6, r0
 8026278:	2b00      	cmp	r3, #0
 802627a:	d100      	bne.n	802627e <_dtoa_r+0x81e>
 802627c:	e1bc      	b.n	80265f8 <_dtoa_r+0xb98>
 802627e:	001a      	movs	r2, r3
 8026280:	0001      	movs	r1, r0
 8026282:	9803      	ldr	r0, [sp, #12]
 8026284:	f001 f858 	bl	8027338 <__pow5mult>
 8026288:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802628a:	0006      	movs	r6, r0
 802628c:	2500      	movs	r5, #0
 802628e:	2b01      	cmp	r3, #1
 8026290:	dc16      	bgt.n	80262c0 <_dtoa_r+0x860>
 8026292:	2500      	movs	r5, #0
 8026294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026296:	42ab      	cmp	r3, r5
 8026298:	d10e      	bne.n	80262b8 <_dtoa_r+0x858>
 802629a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802629c:	031b      	lsls	r3, r3, #12
 802629e:	42ab      	cmp	r3, r5
 80262a0:	d10a      	bne.n	80262b8 <_dtoa_r+0x858>
 80262a2:	4b8d      	ldr	r3, [pc, #564]	@ (80264d8 <_dtoa_r+0xa78>)
 80262a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80262a6:	4213      	tst	r3, r2
 80262a8:	d006      	beq.n	80262b8 <_dtoa_r+0x858>
 80262aa:	9b06      	ldr	r3, [sp, #24]
 80262ac:	3501      	adds	r5, #1
 80262ae:	3301      	adds	r3, #1
 80262b0:	9306      	str	r3, [sp, #24]
 80262b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80262b4:	3301      	adds	r3, #1
 80262b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80262b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80262ba:	2001      	movs	r0, #1
 80262bc:	2b00      	cmp	r3, #0
 80262be:	d008      	beq.n	80262d2 <_dtoa_r+0x872>
 80262c0:	6933      	ldr	r3, [r6, #16]
 80262c2:	3303      	adds	r3, #3
 80262c4:	009b      	lsls	r3, r3, #2
 80262c6:	18f3      	adds	r3, r6, r3
 80262c8:	6858      	ldr	r0, [r3, #4]
 80262ca:	f000 ff23 	bl	8027114 <__hi0bits>
 80262ce:	2320      	movs	r3, #32
 80262d0:	1a18      	subs	r0, r3, r0
 80262d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80262d4:	1818      	adds	r0, r3, r0
 80262d6:	0002      	movs	r2, r0
 80262d8:	231f      	movs	r3, #31
 80262da:	401a      	ands	r2, r3
 80262dc:	4218      	tst	r0, r3
 80262de:	d100      	bne.n	80262e2 <_dtoa_r+0x882>
 80262e0:	e081      	b.n	80263e6 <_dtoa_r+0x986>
 80262e2:	3301      	adds	r3, #1
 80262e4:	1a9b      	subs	r3, r3, r2
 80262e6:	2b04      	cmp	r3, #4
 80262e8:	dd79      	ble.n	80263de <_dtoa_r+0x97e>
 80262ea:	231c      	movs	r3, #28
 80262ec:	1a9b      	subs	r3, r3, r2
 80262ee:	9a06      	ldr	r2, [sp, #24]
 80262f0:	18e4      	adds	r4, r4, r3
 80262f2:	18d2      	adds	r2, r2, r3
 80262f4:	9206      	str	r2, [sp, #24]
 80262f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80262f8:	18d3      	adds	r3, r2, r3
 80262fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80262fc:	9b06      	ldr	r3, [sp, #24]
 80262fe:	2b00      	cmp	r3, #0
 8026300:	dd05      	ble.n	802630e <_dtoa_r+0x8ae>
 8026302:	001a      	movs	r2, r3
 8026304:	9905      	ldr	r1, [sp, #20]
 8026306:	9803      	ldr	r0, [sp, #12]
 8026308:	f001 f872 	bl	80273f0 <__lshift>
 802630c:	9005      	str	r0, [sp, #20]
 802630e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026310:	2b00      	cmp	r3, #0
 8026312:	dd05      	ble.n	8026320 <_dtoa_r+0x8c0>
 8026314:	0031      	movs	r1, r6
 8026316:	001a      	movs	r2, r3
 8026318:	9803      	ldr	r0, [sp, #12]
 802631a:	f001 f869 	bl	80273f0 <__lshift>
 802631e:	0006      	movs	r6, r0
 8026320:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026322:	2b00      	cmp	r3, #0
 8026324:	d061      	beq.n	80263ea <_dtoa_r+0x98a>
 8026326:	0031      	movs	r1, r6
 8026328:	9805      	ldr	r0, [sp, #20]
 802632a:	f001 f8cd 	bl	80274c8 <__mcmp>
 802632e:	2800      	cmp	r0, #0
 8026330:	da5b      	bge.n	80263ea <_dtoa_r+0x98a>
 8026332:	9b04      	ldr	r3, [sp, #16]
 8026334:	220a      	movs	r2, #10
 8026336:	3b01      	subs	r3, #1
 8026338:	930c      	str	r3, [sp, #48]	@ 0x30
 802633a:	9905      	ldr	r1, [sp, #20]
 802633c:	2300      	movs	r3, #0
 802633e:	9803      	ldr	r0, [sp, #12]
 8026340:	f000 fe58 	bl	8026ff4 <__multadd>
 8026344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026346:	9005      	str	r0, [sp, #20]
 8026348:	2b00      	cmp	r3, #0
 802634a:	d100      	bne.n	802634e <_dtoa_r+0x8ee>
 802634c:	e15b      	b.n	8026606 <_dtoa_r+0xba6>
 802634e:	2300      	movs	r3, #0
 8026350:	0039      	movs	r1, r7
 8026352:	220a      	movs	r2, #10
 8026354:	9803      	ldr	r0, [sp, #12]
 8026356:	f000 fe4d 	bl	8026ff4 <__multadd>
 802635a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802635c:	0007      	movs	r7, r0
 802635e:	2b00      	cmp	r3, #0
 8026360:	dc4d      	bgt.n	80263fe <_dtoa_r+0x99e>
 8026362:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026364:	2b02      	cmp	r3, #2
 8026366:	dd46      	ble.n	80263f6 <_dtoa_r+0x996>
 8026368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802636a:	2b00      	cmp	r3, #0
 802636c:	d000      	beq.n	8026370 <_dtoa_r+0x910>
 802636e:	e5db      	b.n	8025f28 <_dtoa_r+0x4c8>
 8026370:	0031      	movs	r1, r6
 8026372:	2205      	movs	r2, #5
 8026374:	9803      	ldr	r0, [sp, #12]
 8026376:	f000 fe3d 	bl	8026ff4 <__multadd>
 802637a:	0006      	movs	r6, r0
 802637c:	0001      	movs	r1, r0
 802637e:	9805      	ldr	r0, [sp, #20]
 8026380:	f001 f8a2 	bl	80274c8 <__mcmp>
 8026384:	2800      	cmp	r0, #0
 8026386:	dc00      	bgt.n	802638a <_dtoa_r+0x92a>
 8026388:	e5ce      	b.n	8025f28 <_dtoa_r+0x4c8>
 802638a:	9b08      	ldr	r3, [sp, #32]
 802638c:	9a08      	ldr	r2, [sp, #32]
 802638e:	1c5c      	adds	r4, r3, #1
 8026390:	2331      	movs	r3, #49	@ 0x31
 8026392:	7013      	strb	r3, [r2, #0]
 8026394:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026396:	3301      	adds	r3, #1
 8026398:	930c      	str	r3, [sp, #48]	@ 0x30
 802639a:	e5c9      	b.n	8025f30 <_dtoa_r+0x4d0>
 802639c:	2336      	movs	r3, #54	@ 0x36
 802639e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80263a0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80263a2:	1a9b      	subs	r3, r3, r2
 80263a4:	9c06      	ldr	r4, [sp, #24]
 80263a6:	e720      	b.n	80261ea <_dtoa_r+0x78a>
 80263a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263aa:	1e5d      	subs	r5, r3, #1
 80263ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263ae:	42ab      	cmp	r3, r5
 80263b0:	db08      	blt.n	80263c4 <_dtoa_r+0x964>
 80263b2:	1b5d      	subs	r5, r3, r5
 80263b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263b6:	2b00      	cmp	r3, #0
 80263b8:	daf4      	bge.n	80263a4 <_dtoa_r+0x944>
 80263ba:	9b06      	ldr	r3, [sp, #24]
 80263bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80263be:	1a9c      	subs	r4, r3, r2
 80263c0:	2300      	movs	r3, #0
 80263c2:	e712      	b.n	80261ea <_dtoa_r+0x78a>
 80263c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80263c8:	1aeb      	subs	r3, r5, r3
 80263ca:	18d3      	adds	r3, r2, r3
 80263cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80263ce:	950f      	str	r5, [sp, #60]	@ 0x3c
 80263d0:	9c06      	ldr	r4, [sp, #24]
 80263d2:	2500      	movs	r5, #0
 80263d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263d6:	e708      	b.n	80261ea <_dtoa_r+0x78a>
 80263d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80263da:	9905      	ldr	r1, [sp, #20]
 80263dc:	e742      	b.n	8026264 <_dtoa_r+0x804>
 80263de:	2b04      	cmp	r3, #4
 80263e0:	d08c      	beq.n	80262fc <_dtoa_r+0x89c>
 80263e2:	331c      	adds	r3, #28
 80263e4:	e783      	b.n	80262ee <_dtoa_r+0x88e>
 80263e6:	0013      	movs	r3, r2
 80263e8:	e7fb      	b.n	80263e2 <_dtoa_r+0x982>
 80263ea:	9b04      	ldr	r3, [sp, #16]
 80263ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80263ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	ddb5      	ble.n	8026362 <_dtoa_r+0x902>
 80263f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80263f8:	2b00      	cmp	r3, #0
 80263fa:	d100      	bne.n	80263fe <_dtoa_r+0x99e>
 80263fc:	e107      	b.n	802660e <_dtoa_r+0xbae>
 80263fe:	2c00      	cmp	r4, #0
 8026400:	dd05      	ble.n	802640e <_dtoa_r+0x9ae>
 8026402:	0039      	movs	r1, r7
 8026404:	0022      	movs	r2, r4
 8026406:	9803      	ldr	r0, [sp, #12]
 8026408:	f000 fff2 	bl	80273f0 <__lshift>
 802640c:	0007      	movs	r7, r0
 802640e:	9704      	str	r7, [sp, #16]
 8026410:	2d00      	cmp	r5, #0
 8026412:	d020      	beq.n	8026456 <_dtoa_r+0x9f6>
 8026414:	6879      	ldr	r1, [r7, #4]
 8026416:	9803      	ldr	r0, [sp, #12]
 8026418:	f000 fd84 	bl	8026f24 <_Balloc>
 802641c:	1e04      	subs	r4, r0, #0
 802641e:	d10c      	bne.n	802643a <_dtoa_r+0x9da>
 8026420:	0022      	movs	r2, r4
 8026422:	4b2e      	ldr	r3, [pc, #184]	@ (80264dc <_dtoa_r+0xa7c>)
 8026424:	482e      	ldr	r0, [pc, #184]	@ (80264e0 <_dtoa_r+0xa80>)
 8026426:	492f      	ldr	r1, [pc, #188]	@ (80264e4 <_dtoa_r+0xa84>)
 8026428:	f7ff fb2f 	bl	8025a8a <_dtoa_r+0x2a>
 802642c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802642e:	0037      	movs	r7, r6
 8026430:	e7ab      	b.n	802638a <_dtoa_r+0x92a>
 8026432:	9b04      	ldr	r3, [sp, #16]
 8026434:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8026436:	930c      	str	r3, [sp, #48]	@ 0x30
 8026438:	e7f9      	b.n	802642e <_dtoa_r+0x9ce>
 802643a:	0039      	movs	r1, r7
 802643c:	693a      	ldr	r2, [r7, #16]
 802643e:	310c      	adds	r1, #12
 8026440:	3202      	adds	r2, #2
 8026442:	0092      	lsls	r2, r2, #2
 8026444:	300c      	adds	r0, #12
 8026446:	f7ff fa75 	bl	8025934 <memcpy>
 802644a:	2201      	movs	r2, #1
 802644c:	0021      	movs	r1, r4
 802644e:	9803      	ldr	r0, [sp, #12]
 8026450:	f000 ffce 	bl	80273f0 <__lshift>
 8026454:	9004      	str	r0, [sp, #16]
 8026456:	9b08      	ldr	r3, [sp, #32]
 8026458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802645a:	9306      	str	r3, [sp, #24]
 802645c:	3b01      	subs	r3, #1
 802645e:	189b      	adds	r3, r3, r2
 8026460:	2201      	movs	r2, #1
 8026462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026466:	4013      	ands	r3, r2
 8026468:	930e      	str	r3, [sp, #56]	@ 0x38
 802646a:	0031      	movs	r1, r6
 802646c:	9805      	ldr	r0, [sp, #20]
 802646e:	f7ff fa71 	bl	8025954 <quorem>
 8026472:	0039      	movs	r1, r7
 8026474:	0005      	movs	r5, r0
 8026476:	900a      	str	r0, [sp, #40]	@ 0x28
 8026478:	9805      	ldr	r0, [sp, #20]
 802647a:	f001 f825 	bl	80274c8 <__mcmp>
 802647e:	9a04      	ldr	r2, [sp, #16]
 8026480:	900d      	str	r0, [sp, #52]	@ 0x34
 8026482:	0031      	movs	r1, r6
 8026484:	9803      	ldr	r0, [sp, #12]
 8026486:	f001 f83b 	bl	8027500 <__mdiff>
 802648a:	2201      	movs	r2, #1
 802648c:	68c3      	ldr	r3, [r0, #12]
 802648e:	0004      	movs	r4, r0
 8026490:	3530      	adds	r5, #48	@ 0x30
 8026492:	9209      	str	r2, [sp, #36]	@ 0x24
 8026494:	2b00      	cmp	r3, #0
 8026496:	d104      	bne.n	80264a2 <_dtoa_r+0xa42>
 8026498:	0001      	movs	r1, r0
 802649a:	9805      	ldr	r0, [sp, #20]
 802649c:	f001 f814 	bl	80274c8 <__mcmp>
 80264a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80264a2:	0021      	movs	r1, r4
 80264a4:	9803      	ldr	r0, [sp, #12]
 80264a6:	f000 fd81 	bl	8026fac <_Bfree>
 80264aa:	9b06      	ldr	r3, [sp, #24]
 80264ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80264ae:	1c5c      	adds	r4, r3, #1
 80264b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264b2:	4313      	orrs	r3, r2
 80264b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80264b6:	4313      	orrs	r3, r2
 80264b8:	d116      	bne.n	80264e8 <_dtoa_r+0xa88>
 80264ba:	2d39      	cmp	r5, #57	@ 0x39
 80264bc:	d02f      	beq.n	802651e <_dtoa_r+0xabe>
 80264be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	dd01      	ble.n	80264c8 <_dtoa_r+0xa68>
 80264c4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80264c6:	3531      	adds	r5, #49	@ 0x31
 80264c8:	9b06      	ldr	r3, [sp, #24]
 80264ca:	701d      	strb	r5, [r3, #0]
 80264cc:	e532      	b.n	8025f34 <_dtoa_r+0x4d4>
 80264ce:	46c0      	nop			@ (mov r8, r8)
 80264d0:	40240000 	.word	0x40240000
 80264d4:	00000433 	.word	0x00000433
 80264d8:	7ff00000 	.word	0x7ff00000
 80264dc:	0802e24a 	.word	0x0802e24a
 80264e0:	0802e1f2 	.word	0x0802e1f2
 80264e4:	000002ef 	.word	0x000002ef
 80264e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80264ea:	2b00      	cmp	r3, #0
 80264ec:	db04      	blt.n	80264f8 <_dtoa_r+0xa98>
 80264ee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80264f0:	4313      	orrs	r3, r2
 80264f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80264f4:	4313      	orrs	r3, r2
 80264f6:	d11e      	bne.n	8026536 <_dtoa_r+0xad6>
 80264f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	dde4      	ble.n	80264c8 <_dtoa_r+0xa68>
 80264fe:	9905      	ldr	r1, [sp, #20]
 8026500:	2201      	movs	r2, #1
 8026502:	9803      	ldr	r0, [sp, #12]
 8026504:	f000 ff74 	bl	80273f0 <__lshift>
 8026508:	0031      	movs	r1, r6
 802650a:	9005      	str	r0, [sp, #20]
 802650c:	f000 ffdc 	bl	80274c8 <__mcmp>
 8026510:	2800      	cmp	r0, #0
 8026512:	dc02      	bgt.n	802651a <_dtoa_r+0xaba>
 8026514:	d1d8      	bne.n	80264c8 <_dtoa_r+0xa68>
 8026516:	07eb      	lsls	r3, r5, #31
 8026518:	d5d6      	bpl.n	80264c8 <_dtoa_r+0xa68>
 802651a:	2d39      	cmp	r5, #57	@ 0x39
 802651c:	d1d2      	bne.n	80264c4 <_dtoa_r+0xa64>
 802651e:	2339      	movs	r3, #57	@ 0x39
 8026520:	9a06      	ldr	r2, [sp, #24]
 8026522:	7013      	strb	r3, [r2, #0]
 8026524:	0023      	movs	r3, r4
 8026526:	001c      	movs	r4, r3
 8026528:	3b01      	subs	r3, #1
 802652a:	781a      	ldrb	r2, [r3, #0]
 802652c:	2a39      	cmp	r2, #57	@ 0x39
 802652e:	d050      	beq.n	80265d2 <_dtoa_r+0xb72>
 8026530:	3201      	adds	r2, #1
 8026532:	701a      	strb	r2, [r3, #0]
 8026534:	e4fe      	b.n	8025f34 <_dtoa_r+0x4d4>
 8026536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026538:	2b00      	cmp	r3, #0
 802653a:	dd03      	ble.n	8026544 <_dtoa_r+0xae4>
 802653c:	2d39      	cmp	r5, #57	@ 0x39
 802653e:	d0ee      	beq.n	802651e <_dtoa_r+0xabe>
 8026540:	3501      	adds	r5, #1
 8026542:	e7c1      	b.n	80264c8 <_dtoa_r+0xa68>
 8026544:	9b06      	ldr	r3, [sp, #24]
 8026546:	9a06      	ldr	r2, [sp, #24]
 8026548:	701d      	strb	r5, [r3, #0]
 802654a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802654c:	4293      	cmp	r3, r2
 802654e:	d02b      	beq.n	80265a8 <_dtoa_r+0xb48>
 8026550:	2300      	movs	r3, #0
 8026552:	220a      	movs	r2, #10
 8026554:	9905      	ldr	r1, [sp, #20]
 8026556:	9803      	ldr	r0, [sp, #12]
 8026558:	f000 fd4c 	bl	8026ff4 <__multadd>
 802655c:	9b04      	ldr	r3, [sp, #16]
 802655e:	9005      	str	r0, [sp, #20]
 8026560:	429f      	cmp	r7, r3
 8026562:	d109      	bne.n	8026578 <_dtoa_r+0xb18>
 8026564:	0039      	movs	r1, r7
 8026566:	2300      	movs	r3, #0
 8026568:	220a      	movs	r2, #10
 802656a:	9803      	ldr	r0, [sp, #12]
 802656c:	f000 fd42 	bl	8026ff4 <__multadd>
 8026570:	0007      	movs	r7, r0
 8026572:	9004      	str	r0, [sp, #16]
 8026574:	9406      	str	r4, [sp, #24]
 8026576:	e778      	b.n	802646a <_dtoa_r+0xa0a>
 8026578:	0039      	movs	r1, r7
 802657a:	2300      	movs	r3, #0
 802657c:	220a      	movs	r2, #10
 802657e:	9803      	ldr	r0, [sp, #12]
 8026580:	f000 fd38 	bl	8026ff4 <__multadd>
 8026584:	2300      	movs	r3, #0
 8026586:	0007      	movs	r7, r0
 8026588:	220a      	movs	r2, #10
 802658a:	9904      	ldr	r1, [sp, #16]
 802658c:	9803      	ldr	r0, [sp, #12]
 802658e:	f000 fd31 	bl	8026ff4 <__multadd>
 8026592:	9004      	str	r0, [sp, #16]
 8026594:	e7ee      	b.n	8026574 <_dtoa_r+0xb14>
 8026596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026598:	2401      	movs	r4, #1
 802659a:	2b00      	cmp	r3, #0
 802659c:	dd00      	ble.n	80265a0 <_dtoa_r+0xb40>
 802659e:	001c      	movs	r4, r3
 80265a0:	9704      	str	r7, [sp, #16]
 80265a2:	2700      	movs	r7, #0
 80265a4:	9b08      	ldr	r3, [sp, #32]
 80265a6:	191c      	adds	r4, r3, r4
 80265a8:	9905      	ldr	r1, [sp, #20]
 80265aa:	2201      	movs	r2, #1
 80265ac:	9803      	ldr	r0, [sp, #12]
 80265ae:	f000 ff1f 	bl	80273f0 <__lshift>
 80265b2:	0031      	movs	r1, r6
 80265b4:	9005      	str	r0, [sp, #20]
 80265b6:	f000 ff87 	bl	80274c8 <__mcmp>
 80265ba:	2800      	cmp	r0, #0
 80265bc:	dcb2      	bgt.n	8026524 <_dtoa_r+0xac4>
 80265be:	d101      	bne.n	80265c4 <_dtoa_r+0xb64>
 80265c0:	07ed      	lsls	r5, r5, #31
 80265c2:	d4af      	bmi.n	8026524 <_dtoa_r+0xac4>
 80265c4:	0023      	movs	r3, r4
 80265c6:	001c      	movs	r4, r3
 80265c8:	3b01      	subs	r3, #1
 80265ca:	781a      	ldrb	r2, [r3, #0]
 80265cc:	2a30      	cmp	r2, #48	@ 0x30
 80265ce:	d0fa      	beq.n	80265c6 <_dtoa_r+0xb66>
 80265d0:	e4b0      	b.n	8025f34 <_dtoa_r+0x4d4>
 80265d2:	9a08      	ldr	r2, [sp, #32]
 80265d4:	429a      	cmp	r2, r3
 80265d6:	d1a6      	bne.n	8026526 <_dtoa_r+0xac6>
 80265d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80265da:	3301      	adds	r3, #1
 80265dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80265de:	2331      	movs	r3, #49	@ 0x31
 80265e0:	7013      	strb	r3, [r2, #0]
 80265e2:	e4a7      	b.n	8025f34 <_dtoa_r+0x4d4>
 80265e4:	4b14      	ldr	r3, [pc, #80]	@ (8026638 <_dtoa_r+0xbd8>)
 80265e6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80265e8:	9308      	str	r3, [sp, #32]
 80265ea:	4b14      	ldr	r3, [pc, #80]	@ (802663c <_dtoa_r+0xbdc>)
 80265ec:	2a00      	cmp	r2, #0
 80265ee:	d001      	beq.n	80265f4 <_dtoa_r+0xb94>
 80265f0:	f7ff fa7e 	bl	8025af0 <_dtoa_r+0x90>
 80265f4:	f7ff fa7e 	bl	8025af4 <_dtoa_r+0x94>
 80265f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80265fa:	2b01      	cmp	r3, #1
 80265fc:	dc00      	bgt.n	8026600 <_dtoa_r+0xba0>
 80265fe:	e648      	b.n	8026292 <_dtoa_r+0x832>
 8026600:	2001      	movs	r0, #1
 8026602:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026604:	e665      	b.n	80262d2 <_dtoa_r+0x872>
 8026606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026608:	2b00      	cmp	r3, #0
 802660a:	dc00      	bgt.n	802660e <_dtoa_r+0xbae>
 802660c:	e6a9      	b.n	8026362 <_dtoa_r+0x902>
 802660e:	2400      	movs	r4, #0
 8026610:	0031      	movs	r1, r6
 8026612:	9805      	ldr	r0, [sp, #20]
 8026614:	f7ff f99e 	bl	8025954 <quorem>
 8026618:	9b08      	ldr	r3, [sp, #32]
 802661a:	3030      	adds	r0, #48	@ 0x30
 802661c:	5518      	strb	r0, [r3, r4]
 802661e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026620:	3401      	adds	r4, #1
 8026622:	0005      	movs	r5, r0
 8026624:	42a3      	cmp	r3, r4
 8026626:	ddb6      	ble.n	8026596 <_dtoa_r+0xb36>
 8026628:	2300      	movs	r3, #0
 802662a:	220a      	movs	r2, #10
 802662c:	9905      	ldr	r1, [sp, #20]
 802662e:	9803      	ldr	r0, [sp, #12]
 8026630:	f000 fce0 	bl	8026ff4 <__multadd>
 8026634:	9005      	str	r0, [sp, #20]
 8026636:	e7eb      	b.n	8026610 <_dtoa_r+0xbb0>
 8026638:	0802e1ce 	.word	0x0802e1ce
 802663c:	0802e1d6 	.word	0x0802e1d6

08026640 <_free_r>:
 8026640:	b570      	push	{r4, r5, r6, lr}
 8026642:	0005      	movs	r5, r0
 8026644:	1e0c      	subs	r4, r1, #0
 8026646:	d010      	beq.n	802666a <_free_r+0x2a>
 8026648:	3c04      	subs	r4, #4
 802664a:	6823      	ldr	r3, [r4, #0]
 802664c:	2b00      	cmp	r3, #0
 802664e:	da00      	bge.n	8026652 <_free_r+0x12>
 8026650:	18e4      	adds	r4, r4, r3
 8026652:	0028      	movs	r0, r5
 8026654:	f000 fc56 	bl	8026f04 <__malloc_lock>
 8026658:	4a1d      	ldr	r2, [pc, #116]	@ (80266d0 <_free_r+0x90>)
 802665a:	6813      	ldr	r3, [r2, #0]
 802665c:	2b00      	cmp	r3, #0
 802665e:	d105      	bne.n	802666c <_free_r+0x2c>
 8026660:	6063      	str	r3, [r4, #4]
 8026662:	6014      	str	r4, [r2, #0]
 8026664:	0028      	movs	r0, r5
 8026666:	f000 fc55 	bl	8026f14 <__malloc_unlock>
 802666a:	bd70      	pop	{r4, r5, r6, pc}
 802666c:	42a3      	cmp	r3, r4
 802666e:	d908      	bls.n	8026682 <_free_r+0x42>
 8026670:	6820      	ldr	r0, [r4, #0]
 8026672:	1821      	adds	r1, r4, r0
 8026674:	428b      	cmp	r3, r1
 8026676:	d1f3      	bne.n	8026660 <_free_r+0x20>
 8026678:	6819      	ldr	r1, [r3, #0]
 802667a:	685b      	ldr	r3, [r3, #4]
 802667c:	1809      	adds	r1, r1, r0
 802667e:	6021      	str	r1, [r4, #0]
 8026680:	e7ee      	b.n	8026660 <_free_r+0x20>
 8026682:	001a      	movs	r2, r3
 8026684:	685b      	ldr	r3, [r3, #4]
 8026686:	2b00      	cmp	r3, #0
 8026688:	d001      	beq.n	802668e <_free_r+0x4e>
 802668a:	42a3      	cmp	r3, r4
 802668c:	d9f9      	bls.n	8026682 <_free_r+0x42>
 802668e:	6811      	ldr	r1, [r2, #0]
 8026690:	1850      	adds	r0, r2, r1
 8026692:	42a0      	cmp	r0, r4
 8026694:	d10b      	bne.n	80266ae <_free_r+0x6e>
 8026696:	6820      	ldr	r0, [r4, #0]
 8026698:	1809      	adds	r1, r1, r0
 802669a:	1850      	adds	r0, r2, r1
 802669c:	6011      	str	r1, [r2, #0]
 802669e:	4283      	cmp	r3, r0
 80266a0:	d1e0      	bne.n	8026664 <_free_r+0x24>
 80266a2:	6818      	ldr	r0, [r3, #0]
 80266a4:	685b      	ldr	r3, [r3, #4]
 80266a6:	1841      	adds	r1, r0, r1
 80266a8:	6011      	str	r1, [r2, #0]
 80266aa:	6053      	str	r3, [r2, #4]
 80266ac:	e7da      	b.n	8026664 <_free_r+0x24>
 80266ae:	42a0      	cmp	r0, r4
 80266b0:	d902      	bls.n	80266b8 <_free_r+0x78>
 80266b2:	230c      	movs	r3, #12
 80266b4:	602b      	str	r3, [r5, #0]
 80266b6:	e7d5      	b.n	8026664 <_free_r+0x24>
 80266b8:	6820      	ldr	r0, [r4, #0]
 80266ba:	1821      	adds	r1, r4, r0
 80266bc:	428b      	cmp	r3, r1
 80266be:	d103      	bne.n	80266c8 <_free_r+0x88>
 80266c0:	6819      	ldr	r1, [r3, #0]
 80266c2:	685b      	ldr	r3, [r3, #4]
 80266c4:	1809      	adds	r1, r1, r0
 80266c6:	6021      	str	r1, [r4, #0]
 80266c8:	6063      	str	r3, [r4, #4]
 80266ca:	6054      	str	r4, [r2, #4]
 80266cc:	e7ca      	b.n	8026664 <_free_r+0x24>
 80266ce:	46c0      	nop			@ (mov r8, r8)
 80266d0:	20003610 	.word	0x20003610

080266d4 <rshift>:
 80266d4:	0002      	movs	r2, r0
 80266d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266d8:	6904      	ldr	r4, [r0, #16]
 80266da:	b085      	sub	sp, #20
 80266dc:	3214      	adds	r2, #20
 80266de:	114b      	asrs	r3, r1, #5
 80266e0:	0016      	movs	r6, r2
 80266e2:	9302      	str	r3, [sp, #8]
 80266e4:	429c      	cmp	r4, r3
 80266e6:	dd31      	ble.n	802674c <rshift+0x78>
 80266e8:	261f      	movs	r6, #31
 80266ea:	000f      	movs	r7, r1
 80266ec:	009b      	lsls	r3, r3, #2
 80266ee:	00a5      	lsls	r5, r4, #2
 80266f0:	18d3      	adds	r3, r2, r3
 80266f2:	4037      	ands	r7, r6
 80266f4:	1955      	adds	r5, r2, r5
 80266f6:	9300      	str	r3, [sp, #0]
 80266f8:	9701      	str	r7, [sp, #4]
 80266fa:	4231      	tst	r1, r6
 80266fc:	d10d      	bne.n	802671a <rshift+0x46>
 80266fe:	0016      	movs	r6, r2
 8026700:	0019      	movs	r1, r3
 8026702:	428d      	cmp	r5, r1
 8026704:	d836      	bhi.n	8026774 <rshift+0xa0>
 8026706:	9b00      	ldr	r3, [sp, #0]
 8026708:	2600      	movs	r6, #0
 802670a:	3b03      	subs	r3, #3
 802670c:	429d      	cmp	r5, r3
 802670e:	d302      	bcc.n	8026716 <rshift+0x42>
 8026710:	9b02      	ldr	r3, [sp, #8]
 8026712:	1ae4      	subs	r4, r4, r3
 8026714:	00a6      	lsls	r6, r4, #2
 8026716:	1996      	adds	r6, r2, r6
 8026718:	e018      	b.n	802674c <rshift+0x78>
 802671a:	2120      	movs	r1, #32
 802671c:	9e01      	ldr	r6, [sp, #4]
 802671e:	9f01      	ldr	r7, [sp, #4]
 8026720:	1b89      	subs	r1, r1, r6
 8026722:	9e00      	ldr	r6, [sp, #0]
 8026724:	9103      	str	r1, [sp, #12]
 8026726:	ce02      	ldmia	r6!, {r1}
 8026728:	4694      	mov	ip, r2
 802672a:	40f9      	lsrs	r1, r7
 802672c:	42b5      	cmp	r5, r6
 802672e:	d816      	bhi.n	802675e <rshift+0x8a>
 8026730:	9b00      	ldr	r3, [sp, #0]
 8026732:	2600      	movs	r6, #0
 8026734:	3301      	adds	r3, #1
 8026736:	429d      	cmp	r5, r3
 8026738:	d303      	bcc.n	8026742 <rshift+0x6e>
 802673a:	9b02      	ldr	r3, [sp, #8]
 802673c:	1ae4      	subs	r4, r4, r3
 802673e:	00a6      	lsls	r6, r4, #2
 8026740:	3e04      	subs	r6, #4
 8026742:	1996      	adds	r6, r2, r6
 8026744:	6031      	str	r1, [r6, #0]
 8026746:	2900      	cmp	r1, #0
 8026748:	d000      	beq.n	802674c <rshift+0x78>
 802674a:	3604      	adds	r6, #4
 802674c:	1ab1      	subs	r1, r6, r2
 802674e:	1089      	asrs	r1, r1, #2
 8026750:	6101      	str	r1, [r0, #16]
 8026752:	4296      	cmp	r6, r2
 8026754:	d101      	bne.n	802675a <rshift+0x86>
 8026756:	2300      	movs	r3, #0
 8026758:	6143      	str	r3, [r0, #20]
 802675a:	b005      	add	sp, #20
 802675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802675e:	6837      	ldr	r7, [r6, #0]
 8026760:	9b03      	ldr	r3, [sp, #12]
 8026762:	409f      	lsls	r7, r3
 8026764:	430f      	orrs	r7, r1
 8026766:	4661      	mov	r1, ip
 8026768:	c180      	stmia	r1!, {r7}
 802676a:	468c      	mov	ip, r1
 802676c:	9b01      	ldr	r3, [sp, #4]
 802676e:	ce02      	ldmia	r6!, {r1}
 8026770:	40d9      	lsrs	r1, r3
 8026772:	e7db      	b.n	802672c <rshift+0x58>
 8026774:	c980      	ldmia	r1!, {r7}
 8026776:	c680      	stmia	r6!, {r7}
 8026778:	e7c3      	b.n	8026702 <rshift+0x2e>

0802677a <__hexdig_fun>:
 802677a:	0002      	movs	r2, r0
 802677c:	3a30      	subs	r2, #48	@ 0x30
 802677e:	0003      	movs	r3, r0
 8026780:	2a09      	cmp	r2, #9
 8026782:	d802      	bhi.n	802678a <__hexdig_fun+0x10>
 8026784:	3b20      	subs	r3, #32
 8026786:	b2d8      	uxtb	r0, r3
 8026788:	4770      	bx	lr
 802678a:	0002      	movs	r2, r0
 802678c:	3a61      	subs	r2, #97	@ 0x61
 802678e:	2a05      	cmp	r2, #5
 8026790:	d801      	bhi.n	8026796 <__hexdig_fun+0x1c>
 8026792:	3b47      	subs	r3, #71	@ 0x47
 8026794:	e7f7      	b.n	8026786 <__hexdig_fun+0xc>
 8026796:	001a      	movs	r2, r3
 8026798:	3a41      	subs	r2, #65	@ 0x41
 802679a:	2000      	movs	r0, #0
 802679c:	2a05      	cmp	r2, #5
 802679e:	d8f3      	bhi.n	8026788 <__hexdig_fun+0xe>
 80267a0:	3b27      	subs	r3, #39	@ 0x27
 80267a2:	e7f0      	b.n	8026786 <__hexdig_fun+0xc>

080267a4 <__gethex>:
 80267a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80267a6:	b089      	sub	sp, #36	@ 0x24
 80267a8:	9307      	str	r3, [sp, #28]
 80267aa:	680b      	ldr	r3, [r1, #0]
 80267ac:	9201      	str	r2, [sp, #4]
 80267ae:	9003      	str	r0, [sp, #12]
 80267b0:	9106      	str	r1, [sp, #24]
 80267b2:	1c9a      	adds	r2, r3, #2
 80267b4:	0011      	movs	r1, r2
 80267b6:	3201      	adds	r2, #1
 80267b8:	1e50      	subs	r0, r2, #1
 80267ba:	7800      	ldrb	r0, [r0, #0]
 80267bc:	2830      	cmp	r0, #48	@ 0x30
 80267be:	d0f9      	beq.n	80267b4 <__gethex+0x10>
 80267c0:	1acb      	subs	r3, r1, r3
 80267c2:	3b02      	subs	r3, #2
 80267c4:	9305      	str	r3, [sp, #20]
 80267c6:	9100      	str	r1, [sp, #0]
 80267c8:	f7ff ffd7 	bl	802677a <__hexdig_fun>
 80267cc:	2300      	movs	r3, #0
 80267ce:	001d      	movs	r5, r3
 80267d0:	9302      	str	r3, [sp, #8]
 80267d2:	4298      	cmp	r0, r3
 80267d4:	d11e      	bne.n	8026814 <__gethex+0x70>
 80267d6:	2201      	movs	r2, #1
 80267d8:	49a6      	ldr	r1, [pc, #664]	@ (8026a74 <__gethex+0x2d0>)
 80267da:	9800      	ldr	r0, [sp, #0]
 80267dc:	f7fe ffe4 	bl	80257a8 <strncmp>
 80267e0:	0007      	movs	r7, r0
 80267e2:	42a8      	cmp	r0, r5
 80267e4:	d000      	beq.n	80267e8 <__gethex+0x44>
 80267e6:	e06a      	b.n	80268be <__gethex+0x11a>
 80267e8:	9b00      	ldr	r3, [sp, #0]
 80267ea:	7858      	ldrb	r0, [r3, #1]
 80267ec:	1c5c      	adds	r4, r3, #1
 80267ee:	f7ff ffc4 	bl	802677a <__hexdig_fun>
 80267f2:	2301      	movs	r3, #1
 80267f4:	9302      	str	r3, [sp, #8]
 80267f6:	42a8      	cmp	r0, r5
 80267f8:	d02f      	beq.n	802685a <__gethex+0xb6>
 80267fa:	9400      	str	r4, [sp, #0]
 80267fc:	9b00      	ldr	r3, [sp, #0]
 80267fe:	7818      	ldrb	r0, [r3, #0]
 8026800:	2830      	cmp	r0, #48	@ 0x30
 8026802:	d009      	beq.n	8026818 <__gethex+0x74>
 8026804:	f7ff ffb9 	bl	802677a <__hexdig_fun>
 8026808:	4242      	negs	r2, r0
 802680a:	4142      	adcs	r2, r0
 802680c:	2301      	movs	r3, #1
 802680e:	0025      	movs	r5, r4
 8026810:	9202      	str	r2, [sp, #8]
 8026812:	9305      	str	r3, [sp, #20]
 8026814:	9c00      	ldr	r4, [sp, #0]
 8026816:	e004      	b.n	8026822 <__gethex+0x7e>
 8026818:	9b00      	ldr	r3, [sp, #0]
 802681a:	3301      	adds	r3, #1
 802681c:	9300      	str	r3, [sp, #0]
 802681e:	e7ed      	b.n	80267fc <__gethex+0x58>
 8026820:	3401      	adds	r4, #1
 8026822:	7820      	ldrb	r0, [r4, #0]
 8026824:	f7ff ffa9 	bl	802677a <__hexdig_fun>
 8026828:	1e07      	subs	r7, r0, #0
 802682a:	d1f9      	bne.n	8026820 <__gethex+0x7c>
 802682c:	2201      	movs	r2, #1
 802682e:	0020      	movs	r0, r4
 8026830:	4990      	ldr	r1, [pc, #576]	@ (8026a74 <__gethex+0x2d0>)
 8026832:	f7fe ffb9 	bl	80257a8 <strncmp>
 8026836:	2800      	cmp	r0, #0
 8026838:	d10d      	bne.n	8026856 <__gethex+0xb2>
 802683a:	2d00      	cmp	r5, #0
 802683c:	d106      	bne.n	802684c <__gethex+0xa8>
 802683e:	3401      	adds	r4, #1
 8026840:	0025      	movs	r5, r4
 8026842:	7820      	ldrb	r0, [r4, #0]
 8026844:	f7ff ff99 	bl	802677a <__hexdig_fun>
 8026848:	2800      	cmp	r0, #0
 802684a:	d102      	bne.n	8026852 <__gethex+0xae>
 802684c:	1b2d      	subs	r5, r5, r4
 802684e:	00af      	lsls	r7, r5, #2
 8026850:	e003      	b.n	802685a <__gethex+0xb6>
 8026852:	3401      	adds	r4, #1
 8026854:	e7f5      	b.n	8026842 <__gethex+0x9e>
 8026856:	2d00      	cmp	r5, #0
 8026858:	d1f8      	bne.n	802684c <__gethex+0xa8>
 802685a:	2220      	movs	r2, #32
 802685c:	7823      	ldrb	r3, [r4, #0]
 802685e:	0026      	movs	r6, r4
 8026860:	4393      	bics	r3, r2
 8026862:	2b50      	cmp	r3, #80	@ 0x50
 8026864:	d11d      	bne.n	80268a2 <__gethex+0xfe>
 8026866:	7863      	ldrb	r3, [r4, #1]
 8026868:	2b2b      	cmp	r3, #43	@ 0x2b
 802686a:	d02d      	beq.n	80268c8 <__gethex+0x124>
 802686c:	2b2d      	cmp	r3, #45	@ 0x2d
 802686e:	d02f      	beq.n	80268d0 <__gethex+0x12c>
 8026870:	2300      	movs	r3, #0
 8026872:	1c66      	adds	r6, r4, #1
 8026874:	9304      	str	r3, [sp, #16]
 8026876:	7830      	ldrb	r0, [r6, #0]
 8026878:	f7ff ff7f 	bl	802677a <__hexdig_fun>
 802687c:	1e43      	subs	r3, r0, #1
 802687e:	b2db      	uxtb	r3, r3
 8026880:	0005      	movs	r5, r0
 8026882:	2b18      	cmp	r3, #24
 8026884:	d82a      	bhi.n	80268dc <__gethex+0x138>
 8026886:	7870      	ldrb	r0, [r6, #1]
 8026888:	f7ff ff77 	bl	802677a <__hexdig_fun>
 802688c:	1e43      	subs	r3, r0, #1
 802688e:	b2db      	uxtb	r3, r3
 8026890:	3601      	adds	r6, #1
 8026892:	3d10      	subs	r5, #16
 8026894:	2b18      	cmp	r3, #24
 8026896:	d91d      	bls.n	80268d4 <__gethex+0x130>
 8026898:	9b04      	ldr	r3, [sp, #16]
 802689a:	2b00      	cmp	r3, #0
 802689c:	d000      	beq.n	80268a0 <__gethex+0xfc>
 802689e:	426d      	negs	r5, r5
 80268a0:	197f      	adds	r7, r7, r5
 80268a2:	9b06      	ldr	r3, [sp, #24]
 80268a4:	601e      	str	r6, [r3, #0]
 80268a6:	9b02      	ldr	r3, [sp, #8]
 80268a8:	2b00      	cmp	r3, #0
 80268aa:	d019      	beq.n	80268e0 <__gethex+0x13c>
 80268ac:	9b05      	ldr	r3, [sp, #20]
 80268ae:	2606      	movs	r6, #6
 80268b0:	425a      	negs	r2, r3
 80268b2:	4153      	adcs	r3, r2
 80268b4:	425b      	negs	r3, r3
 80268b6:	401e      	ands	r6, r3
 80268b8:	0030      	movs	r0, r6
 80268ba:	b009      	add	sp, #36	@ 0x24
 80268bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80268be:	2301      	movs	r3, #1
 80268c0:	2700      	movs	r7, #0
 80268c2:	9c00      	ldr	r4, [sp, #0]
 80268c4:	9302      	str	r3, [sp, #8]
 80268c6:	e7c8      	b.n	802685a <__gethex+0xb6>
 80268c8:	2300      	movs	r3, #0
 80268ca:	9304      	str	r3, [sp, #16]
 80268cc:	1ca6      	adds	r6, r4, #2
 80268ce:	e7d2      	b.n	8026876 <__gethex+0xd2>
 80268d0:	2301      	movs	r3, #1
 80268d2:	e7fa      	b.n	80268ca <__gethex+0x126>
 80268d4:	230a      	movs	r3, #10
 80268d6:	435d      	muls	r5, r3
 80268d8:	182d      	adds	r5, r5, r0
 80268da:	e7d4      	b.n	8026886 <__gethex+0xe2>
 80268dc:	0026      	movs	r6, r4
 80268de:	e7e0      	b.n	80268a2 <__gethex+0xfe>
 80268e0:	9b00      	ldr	r3, [sp, #0]
 80268e2:	9902      	ldr	r1, [sp, #8]
 80268e4:	1ae3      	subs	r3, r4, r3
 80268e6:	3b01      	subs	r3, #1
 80268e8:	2b07      	cmp	r3, #7
 80268ea:	dc0a      	bgt.n	8026902 <__gethex+0x15e>
 80268ec:	9803      	ldr	r0, [sp, #12]
 80268ee:	f000 fb19 	bl	8026f24 <_Balloc>
 80268f2:	1e05      	subs	r5, r0, #0
 80268f4:	d108      	bne.n	8026908 <__gethex+0x164>
 80268f6:	002a      	movs	r2, r5
 80268f8:	21e4      	movs	r1, #228	@ 0xe4
 80268fa:	4b5f      	ldr	r3, [pc, #380]	@ (8026a78 <__gethex+0x2d4>)
 80268fc:	485f      	ldr	r0, [pc, #380]	@ (8026a7c <__gethex+0x2d8>)
 80268fe:	f001 fbe9 	bl	80280d4 <__assert_func>
 8026902:	3101      	adds	r1, #1
 8026904:	105b      	asrs	r3, r3, #1
 8026906:	e7ef      	b.n	80268e8 <__gethex+0x144>
 8026908:	0003      	movs	r3, r0
 802690a:	3314      	adds	r3, #20
 802690c:	9302      	str	r3, [sp, #8]
 802690e:	9305      	str	r3, [sp, #20]
 8026910:	2300      	movs	r3, #0
 8026912:	001e      	movs	r6, r3
 8026914:	9304      	str	r3, [sp, #16]
 8026916:	9b00      	ldr	r3, [sp, #0]
 8026918:	42a3      	cmp	r3, r4
 802691a:	d338      	bcc.n	802698e <__gethex+0x1ea>
 802691c:	9c05      	ldr	r4, [sp, #20]
 802691e:	9b02      	ldr	r3, [sp, #8]
 8026920:	c440      	stmia	r4!, {r6}
 8026922:	1ae4      	subs	r4, r4, r3
 8026924:	10a4      	asrs	r4, r4, #2
 8026926:	0030      	movs	r0, r6
 8026928:	612c      	str	r4, [r5, #16]
 802692a:	f000 fbf3 	bl	8027114 <__hi0bits>
 802692e:	9b01      	ldr	r3, [sp, #4]
 8026930:	0164      	lsls	r4, r4, #5
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	1a26      	subs	r6, r4, r0
 8026936:	9300      	str	r3, [sp, #0]
 8026938:	429e      	cmp	r6, r3
 802693a:	dd52      	ble.n	80269e2 <__gethex+0x23e>
 802693c:	1af6      	subs	r6, r6, r3
 802693e:	0031      	movs	r1, r6
 8026940:	0028      	movs	r0, r5
 8026942:	f000 ff8e 	bl	8027862 <__any_on>
 8026946:	1e04      	subs	r4, r0, #0
 8026948:	d00f      	beq.n	802696a <__gethex+0x1c6>
 802694a:	2401      	movs	r4, #1
 802694c:	211f      	movs	r1, #31
 802694e:	0020      	movs	r0, r4
 8026950:	1e73      	subs	r3, r6, #1
 8026952:	4019      	ands	r1, r3
 8026954:	4088      	lsls	r0, r1
 8026956:	0001      	movs	r1, r0
 8026958:	115a      	asrs	r2, r3, #5
 802695a:	9802      	ldr	r0, [sp, #8]
 802695c:	0092      	lsls	r2, r2, #2
 802695e:	5812      	ldr	r2, [r2, r0]
 8026960:	420a      	tst	r2, r1
 8026962:	d002      	beq.n	802696a <__gethex+0x1c6>
 8026964:	42a3      	cmp	r3, r4
 8026966:	dc34      	bgt.n	80269d2 <__gethex+0x22e>
 8026968:	2402      	movs	r4, #2
 802696a:	0031      	movs	r1, r6
 802696c:	0028      	movs	r0, r5
 802696e:	f7ff feb1 	bl	80266d4 <rshift>
 8026972:	19bf      	adds	r7, r7, r6
 8026974:	9b01      	ldr	r3, [sp, #4]
 8026976:	689b      	ldr	r3, [r3, #8]
 8026978:	42bb      	cmp	r3, r7
 802697a:	da42      	bge.n	8026a02 <__gethex+0x25e>
 802697c:	0029      	movs	r1, r5
 802697e:	9803      	ldr	r0, [sp, #12]
 8026980:	f000 fb14 	bl	8026fac <_Bfree>
 8026984:	2300      	movs	r3, #0
 8026986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026988:	26a3      	movs	r6, #163	@ 0xa3
 802698a:	6013      	str	r3, [r2, #0]
 802698c:	e794      	b.n	80268b8 <__gethex+0x114>
 802698e:	3c01      	subs	r4, #1
 8026990:	7823      	ldrb	r3, [r4, #0]
 8026992:	2b2e      	cmp	r3, #46	@ 0x2e
 8026994:	d012      	beq.n	80269bc <__gethex+0x218>
 8026996:	9b04      	ldr	r3, [sp, #16]
 8026998:	2b20      	cmp	r3, #32
 802699a:	d104      	bne.n	80269a6 <__gethex+0x202>
 802699c:	9b05      	ldr	r3, [sp, #20]
 802699e:	c340      	stmia	r3!, {r6}
 80269a0:	2600      	movs	r6, #0
 80269a2:	9305      	str	r3, [sp, #20]
 80269a4:	9604      	str	r6, [sp, #16]
 80269a6:	7820      	ldrb	r0, [r4, #0]
 80269a8:	f7ff fee7 	bl	802677a <__hexdig_fun>
 80269ac:	230f      	movs	r3, #15
 80269ae:	4018      	ands	r0, r3
 80269b0:	9b04      	ldr	r3, [sp, #16]
 80269b2:	4098      	lsls	r0, r3
 80269b4:	3304      	adds	r3, #4
 80269b6:	4306      	orrs	r6, r0
 80269b8:	9304      	str	r3, [sp, #16]
 80269ba:	e7ac      	b.n	8026916 <__gethex+0x172>
 80269bc:	9b00      	ldr	r3, [sp, #0]
 80269be:	42a3      	cmp	r3, r4
 80269c0:	d8e9      	bhi.n	8026996 <__gethex+0x1f2>
 80269c2:	2201      	movs	r2, #1
 80269c4:	0020      	movs	r0, r4
 80269c6:	492b      	ldr	r1, [pc, #172]	@ (8026a74 <__gethex+0x2d0>)
 80269c8:	f7fe feee 	bl	80257a8 <strncmp>
 80269cc:	2800      	cmp	r0, #0
 80269ce:	d1e2      	bne.n	8026996 <__gethex+0x1f2>
 80269d0:	e7a1      	b.n	8026916 <__gethex+0x172>
 80269d2:	0028      	movs	r0, r5
 80269d4:	1eb1      	subs	r1, r6, #2
 80269d6:	f000 ff44 	bl	8027862 <__any_on>
 80269da:	2800      	cmp	r0, #0
 80269dc:	d0c4      	beq.n	8026968 <__gethex+0x1c4>
 80269de:	2403      	movs	r4, #3
 80269e0:	e7c3      	b.n	802696a <__gethex+0x1c6>
 80269e2:	9b00      	ldr	r3, [sp, #0]
 80269e4:	2400      	movs	r4, #0
 80269e6:	429e      	cmp	r6, r3
 80269e8:	dac4      	bge.n	8026974 <__gethex+0x1d0>
 80269ea:	1b9e      	subs	r6, r3, r6
 80269ec:	0029      	movs	r1, r5
 80269ee:	0032      	movs	r2, r6
 80269f0:	9803      	ldr	r0, [sp, #12]
 80269f2:	f000 fcfd 	bl	80273f0 <__lshift>
 80269f6:	0003      	movs	r3, r0
 80269f8:	3314      	adds	r3, #20
 80269fa:	0005      	movs	r5, r0
 80269fc:	1bbf      	subs	r7, r7, r6
 80269fe:	9302      	str	r3, [sp, #8]
 8026a00:	e7b8      	b.n	8026974 <__gethex+0x1d0>
 8026a02:	9b01      	ldr	r3, [sp, #4]
 8026a04:	685e      	ldr	r6, [r3, #4]
 8026a06:	42be      	cmp	r6, r7
 8026a08:	dd6f      	ble.n	8026aea <__gethex+0x346>
 8026a0a:	9b00      	ldr	r3, [sp, #0]
 8026a0c:	1bf6      	subs	r6, r6, r7
 8026a0e:	42b3      	cmp	r3, r6
 8026a10:	dc36      	bgt.n	8026a80 <__gethex+0x2dc>
 8026a12:	9b01      	ldr	r3, [sp, #4]
 8026a14:	68db      	ldr	r3, [r3, #12]
 8026a16:	2b02      	cmp	r3, #2
 8026a18:	d024      	beq.n	8026a64 <__gethex+0x2c0>
 8026a1a:	2b03      	cmp	r3, #3
 8026a1c:	d026      	beq.n	8026a6c <__gethex+0x2c8>
 8026a1e:	2b01      	cmp	r3, #1
 8026a20:	d117      	bne.n	8026a52 <__gethex+0x2ae>
 8026a22:	9b00      	ldr	r3, [sp, #0]
 8026a24:	42b3      	cmp	r3, r6
 8026a26:	d114      	bne.n	8026a52 <__gethex+0x2ae>
 8026a28:	2b01      	cmp	r3, #1
 8026a2a:	d10b      	bne.n	8026a44 <__gethex+0x2a0>
 8026a2c:	9b01      	ldr	r3, [sp, #4]
 8026a2e:	9a07      	ldr	r2, [sp, #28]
 8026a30:	685b      	ldr	r3, [r3, #4]
 8026a32:	2662      	movs	r6, #98	@ 0x62
 8026a34:	6013      	str	r3, [r2, #0]
 8026a36:	2301      	movs	r3, #1
 8026a38:	9a02      	ldr	r2, [sp, #8]
 8026a3a:	612b      	str	r3, [r5, #16]
 8026a3c:	6013      	str	r3, [r2, #0]
 8026a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026a40:	601d      	str	r5, [r3, #0]
 8026a42:	e739      	b.n	80268b8 <__gethex+0x114>
 8026a44:	9900      	ldr	r1, [sp, #0]
 8026a46:	0028      	movs	r0, r5
 8026a48:	3901      	subs	r1, #1
 8026a4a:	f000 ff0a 	bl	8027862 <__any_on>
 8026a4e:	2800      	cmp	r0, #0
 8026a50:	d1ec      	bne.n	8026a2c <__gethex+0x288>
 8026a52:	0029      	movs	r1, r5
 8026a54:	9803      	ldr	r0, [sp, #12]
 8026a56:	f000 faa9 	bl	8026fac <_Bfree>
 8026a5a:	2300      	movs	r3, #0
 8026a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026a5e:	2650      	movs	r6, #80	@ 0x50
 8026a60:	6013      	str	r3, [r2, #0]
 8026a62:	e729      	b.n	80268b8 <__gethex+0x114>
 8026a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	d1f3      	bne.n	8026a52 <__gethex+0x2ae>
 8026a6a:	e7df      	b.n	8026a2c <__gethex+0x288>
 8026a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	d1dc      	bne.n	8026a2c <__gethex+0x288>
 8026a72:	e7ee      	b.n	8026a52 <__gethex+0x2ae>
 8026a74:	0802e190 	.word	0x0802e190
 8026a78:	0802e24a 	.word	0x0802e24a
 8026a7c:	0802e25b 	.word	0x0802e25b
 8026a80:	1e77      	subs	r7, r6, #1
 8026a82:	2c00      	cmp	r4, #0
 8026a84:	d12f      	bne.n	8026ae6 <__gethex+0x342>
 8026a86:	2f00      	cmp	r7, #0
 8026a88:	d004      	beq.n	8026a94 <__gethex+0x2f0>
 8026a8a:	0039      	movs	r1, r7
 8026a8c:	0028      	movs	r0, r5
 8026a8e:	f000 fee8 	bl	8027862 <__any_on>
 8026a92:	0004      	movs	r4, r0
 8026a94:	231f      	movs	r3, #31
 8026a96:	117a      	asrs	r2, r7, #5
 8026a98:	401f      	ands	r7, r3
 8026a9a:	3b1e      	subs	r3, #30
 8026a9c:	40bb      	lsls	r3, r7
 8026a9e:	9902      	ldr	r1, [sp, #8]
 8026aa0:	0092      	lsls	r2, r2, #2
 8026aa2:	5852      	ldr	r2, [r2, r1]
 8026aa4:	421a      	tst	r2, r3
 8026aa6:	d001      	beq.n	8026aac <__gethex+0x308>
 8026aa8:	2302      	movs	r3, #2
 8026aaa:	431c      	orrs	r4, r3
 8026aac:	9b00      	ldr	r3, [sp, #0]
 8026aae:	0031      	movs	r1, r6
 8026ab0:	1b9b      	subs	r3, r3, r6
 8026ab2:	2602      	movs	r6, #2
 8026ab4:	0028      	movs	r0, r5
 8026ab6:	9300      	str	r3, [sp, #0]
 8026ab8:	f7ff fe0c 	bl	80266d4 <rshift>
 8026abc:	9b01      	ldr	r3, [sp, #4]
 8026abe:	685f      	ldr	r7, [r3, #4]
 8026ac0:	2c00      	cmp	r4, #0
 8026ac2:	d03f      	beq.n	8026b44 <__gethex+0x3a0>
 8026ac4:	9b01      	ldr	r3, [sp, #4]
 8026ac6:	68db      	ldr	r3, [r3, #12]
 8026ac8:	2b02      	cmp	r3, #2
 8026aca:	d010      	beq.n	8026aee <__gethex+0x34a>
 8026acc:	2b03      	cmp	r3, #3
 8026ace:	d012      	beq.n	8026af6 <__gethex+0x352>
 8026ad0:	2b01      	cmp	r3, #1
 8026ad2:	d106      	bne.n	8026ae2 <__gethex+0x33e>
 8026ad4:	07a2      	lsls	r2, r4, #30
 8026ad6:	d504      	bpl.n	8026ae2 <__gethex+0x33e>
 8026ad8:	9a02      	ldr	r2, [sp, #8]
 8026ada:	6812      	ldr	r2, [r2, #0]
 8026adc:	4314      	orrs	r4, r2
 8026ade:	421c      	tst	r4, r3
 8026ae0:	d10c      	bne.n	8026afc <__gethex+0x358>
 8026ae2:	2310      	movs	r3, #16
 8026ae4:	e02d      	b.n	8026b42 <__gethex+0x39e>
 8026ae6:	2401      	movs	r4, #1
 8026ae8:	e7d4      	b.n	8026a94 <__gethex+0x2f0>
 8026aea:	2601      	movs	r6, #1
 8026aec:	e7e8      	b.n	8026ac0 <__gethex+0x31c>
 8026aee:	2301      	movs	r3, #1
 8026af0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026af2:	1a9b      	subs	r3, r3, r2
 8026af4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026af6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d0f2      	beq.n	8026ae2 <__gethex+0x33e>
 8026afc:	692b      	ldr	r3, [r5, #16]
 8026afe:	2000      	movs	r0, #0
 8026b00:	9302      	str	r3, [sp, #8]
 8026b02:	009b      	lsls	r3, r3, #2
 8026b04:	9304      	str	r3, [sp, #16]
 8026b06:	002b      	movs	r3, r5
 8026b08:	9a04      	ldr	r2, [sp, #16]
 8026b0a:	3314      	adds	r3, #20
 8026b0c:	1899      	adds	r1, r3, r2
 8026b0e:	681a      	ldr	r2, [r3, #0]
 8026b10:	1c54      	adds	r4, r2, #1
 8026b12:	d01c      	beq.n	8026b4e <__gethex+0x3aa>
 8026b14:	3201      	adds	r2, #1
 8026b16:	601a      	str	r2, [r3, #0]
 8026b18:	002b      	movs	r3, r5
 8026b1a:	3314      	adds	r3, #20
 8026b1c:	2e02      	cmp	r6, #2
 8026b1e:	d13f      	bne.n	8026ba0 <__gethex+0x3fc>
 8026b20:	9a01      	ldr	r2, [sp, #4]
 8026b22:	9900      	ldr	r1, [sp, #0]
 8026b24:	6812      	ldr	r2, [r2, #0]
 8026b26:	3a01      	subs	r2, #1
 8026b28:	428a      	cmp	r2, r1
 8026b2a:	d109      	bne.n	8026b40 <__gethex+0x39c>
 8026b2c:	000a      	movs	r2, r1
 8026b2e:	201f      	movs	r0, #31
 8026b30:	4010      	ands	r0, r2
 8026b32:	2201      	movs	r2, #1
 8026b34:	4082      	lsls	r2, r0
 8026b36:	1149      	asrs	r1, r1, #5
 8026b38:	0089      	lsls	r1, r1, #2
 8026b3a:	58cb      	ldr	r3, [r1, r3]
 8026b3c:	4213      	tst	r3, r2
 8026b3e:	d13d      	bne.n	8026bbc <__gethex+0x418>
 8026b40:	2320      	movs	r3, #32
 8026b42:	431e      	orrs	r6, r3
 8026b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b46:	601d      	str	r5, [r3, #0]
 8026b48:	9b07      	ldr	r3, [sp, #28]
 8026b4a:	601f      	str	r7, [r3, #0]
 8026b4c:	e6b4      	b.n	80268b8 <__gethex+0x114>
 8026b4e:	c301      	stmia	r3!, {r0}
 8026b50:	4299      	cmp	r1, r3
 8026b52:	d8dc      	bhi.n	8026b0e <__gethex+0x36a>
 8026b54:	68ab      	ldr	r3, [r5, #8]
 8026b56:	9a02      	ldr	r2, [sp, #8]
 8026b58:	429a      	cmp	r2, r3
 8026b5a:	db18      	blt.n	8026b8e <__gethex+0x3ea>
 8026b5c:	6869      	ldr	r1, [r5, #4]
 8026b5e:	9803      	ldr	r0, [sp, #12]
 8026b60:	3101      	adds	r1, #1
 8026b62:	f000 f9df 	bl	8026f24 <_Balloc>
 8026b66:	1e04      	subs	r4, r0, #0
 8026b68:	d104      	bne.n	8026b74 <__gethex+0x3d0>
 8026b6a:	0022      	movs	r2, r4
 8026b6c:	2184      	movs	r1, #132	@ 0x84
 8026b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8026be4 <__gethex+0x440>)
 8026b70:	481d      	ldr	r0, [pc, #116]	@ (8026be8 <__gethex+0x444>)
 8026b72:	e6c4      	b.n	80268fe <__gethex+0x15a>
 8026b74:	0029      	movs	r1, r5
 8026b76:	692a      	ldr	r2, [r5, #16]
 8026b78:	310c      	adds	r1, #12
 8026b7a:	3202      	adds	r2, #2
 8026b7c:	0092      	lsls	r2, r2, #2
 8026b7e:	300c      	adds	r0, #12
 8026b80:	f7fe fed8 	bl	8025934 <memcpy>
 8026b84:	0029      	movs	r1, r5
 8026b86:	9803      	ldr	r0, [sp, #12]
 8026b88:	f000 fa10 	bl	8026fac <_Bfree>
 8026b8c:	0025      	movs	r5, r4
 8026b8e:	692b      	ldr	r3, [r5, #16]
 8026b90:	1c5a      	adds	r2, r3, #1
 8026b92:	612a      	str	r2, [r5, #16]
 8026b94:	2201      	movs	r2, #1
 8026b96:	3304      	adds	r3, #4
 8026b98:	009b      	lsls	r3, r3, #2
 8026b9a:	18eb      	adds	r3, r5, r3
 8026b9c:	605a      	str	r2, [r3, #4]
 8026b9e:	e7bb      	b.n	8026b18 <__gethex+0x374>
 8026ba0:	692a      	ldr	r2, [r5, #16]
 8026ba2:	9902      	ldr	r1, [sp, #8]
 8026ba4:	428a      	cmp	r2, r1
 8026ba6:	dd0b      	ble.n	8026bc0 <__gethex+0x41c>
 8026ba8:	2101      	movs	r1, #1
 8026baa:	0028      	movs	r0, r5
 8026bac:	f7ff fd92 	bl	80266d4 <rshift>
 8026bb0:	9b01      	ldr	r3, [sp, #4]
 8026bb2:	3701      	adds	r7, #1
 8026bb4:	689b      	ldr	r3, [r3, #8]
 8026bb6:	42bb      	cmp	r3, r7
 8026bb8:	da00      	bge.n	8026bbc <__gethex+0x418>
 8026bba:	e6df      	b.n	802697c <__gethex+0x1d8>
 8026bbc:	2601      	movs	r6, #1
 8026bbe:	e7bf      	b.n	8026b40 <__gethex+0x39c>
 8026bc0:	221f      	movs	r2, #31
 8026bc2:	9c00      	ldr	r4, [sp, #0]
 8026bc4:	9900      	ldr	r1, [sp, #0]
 8026bc6:	4014      	ands	r4, r2
 8026bc8:	4211      	tst	r1, r2
 8026bca:	d0f7      	beq.n	8026bbc <__gethex+0x418>
 8026bcc:	9a04      	ldr	r2, [sp, #16]
 8026bce:	189b      	adds	r3, r3, r2
 8026bd0:	3b04      	subs	r3, #4
 8026bd2:	6818      	ldr	r0, [r3, #0]
 8026bd4:	f000 fa9e 	bl	8027114 <__hi0bits>
 8026bd8:	2320      	movs	r3, #32
 8026bda:	1b1b      	subs	r3, r3, r4
 8026bdc:	4298      	cmp	r0, r3
 8026bde:	dbe3      	blt.n	8026ba8 <__gethex+0x404>
 8026be0:	e7ec      	b.n	8026bbc <__gethex+0x418>
 8026be2:	46c0      	nop			@ (mov r8, r8)
 8026be4:	0802e24a 	.word	0x0802e24a
 8026be8:	0802e25b 	.word	0x0802e25b

08026bec <L_shift>:
 8026bec:	2308      	movs	r3, #8
 8026bee:	b570      	push	{r4, r5, r6, lr}
 8026bf0:	2520      	movs	r5, #32
 8026bf2:	1a9a      	subs	r2, r3, r2
 8026bf4:	0092      	lsls	r2, r2, #2
 8026bf6:	1aad      	subs	r5, r5, r2
 8026bf8:	6843      	ldr	r3, [r0, #4]
 8026bfa:	6804      	ldr	r4, [r0, #0]
 8026bfc:	001e      	movs	r6, r3
 8026bfe:	40ae      	lsls	r6, r5
 8026c00:	40d3      	lsrs	r3, r2
 8026c02:	4334      	orrs	r4, r6
 8026c04:	6004      	str	r4, [r0, #0]
 8026c06:	6043      	str	r3, [r0, #4]
 8026c08:	3004      	adds	r0, #4
 8026c0a:	4288      	cmp	r0, r1
 8026c0c:	d3f4      	bcc.n	8026bf8 <L_shift+0xc>
 8026c0e:	bd70      	pop	{r4, r5, r6, pc}

08026c10 <__match>:
 8026c10:	b530      	push	{r4, r5, lr}
 8026c12:	6803      	ldr	r3, [r0, #0]
 8026c14:	780c      	ldrb	r4, [r1, #0]
 8026c16:	3301      	adds	r3, #1
 8026c18:	2c00      	cmp	r4, #0
 8026c1a:	d102      	bne.n	8026c22 <__match+0x12>
 8026c1c:	6003      	str	r3, [r0, #0]
 8026c1e:	2001      	movs	r0, #1
 8026c20:	bd30      	pop	{r4, r5, pc}
 8026c22:	781a      	ldrb	r2, [r3, #0]
 8026c24:	0015      	movs	r5, r2
 8026c26:	3d41      	subs	r5, #65	@ 0x41
 8026c28:	2d19      	cmp	r5, #25
 8026c2a:	d800      	bhi.n	8026c2e <__match+0x1e>
 8026c2c:	3220      	adds	r2, #32
 8026c2e:	3101      	adds	r1, #1
 8026c30:	42a2      	cmp	r2, r4
 8026c32:	d0ef      	beq.n	8026c14 <__match+0x4>
 8026c34:	2000      	movs	r0, #0
 8026c36:	e7f3      	b.n	8026c20 <__match+0x10>

08026c38 <__hexnan>:
 8026c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026c3a:	680b      	ldr	r3, [r1, #0]
 8026c3c:	b08b      	sub	sp, #44	@ 0x2c
 8026c3e:	9201      	str	r2, [sp, #4]
 8026c40:	9901      	ldr	r1, [sp, #4]
 8026c42:	115a      	asrs	r2, r3, #5
 8026c44:	0092      	lsls	r2, r2, #2
 8026c46:	188a      	adds	r2, r1, r2
 8026c48:	9202      	str	r2, [sp, #8]
 8026c4a:	0019      	movs	r1, r3
 8026c4c:	221f      	movs	r2, #31
 8026c4e:	4011      	ands	r1, r2
 8026c50:	9008      	str	r0, [sp, #32]
 8026c52:	9106      	str	r1, [sp, #24]
 8026c54:	4213      	tst	r3, r2
 8026c56:	d002      	beq.n	8026c5e <__hexnan+0x26>
 8026c58:	9b02      	ldr	r3, [sp, #8]
 8026c5a:	3304      	adds	r3, #4
 8026c5c:	9302      	str	r3, [sp, #8]
 8026c5e:	9b02      	ldr	r3, [sp, #8]
 8026c60:	2500      	movs	r5, #0
 8026c62:	1f1f      	subs	r7, r3, #4
 8026c64:	003e      	movs	r6, r7
 8026c66:	003c      	movs	r4, r7
 8026c68:	9b08      	ldr	r3, [sp, #32]
 8026c6a:	603d      	str	r5, [r7, #0]
 8026c6c:	681b      	ldr	r3, [r3, #0]
 8026c6e:	9507      	str	r5, [sp, #28]
 8026c70:	9305      	str	r3, [sp, #20]
 8026c72:	9503      	str	r5, [sp, #12]
 8026c74:	9b05      	ldr	r3, [sp, #20]
 8026c76:	3301      	adds	r3, #1
 8026c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c7a:	9b05      	ldr	r3, [sp, #20]
 8026c7c:	785b      	ldrb	r3, [r3, #1]
 8026c7e:	9304      	str	r3, [sp, #16]
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	d028      	beq.n	8026cd6 <__hexnan+0x9e>
 8026c84:	9804      	ldr	r0, [sp, #16]
 8026c86:	f7ff fd78 	bl	802677a <__hexdig_fun>
 8026c8a:	2800      	cmp	r0, #0
 8026c8c:	d155      	bne.n	8026d3a <__hexnan+0x102>
 8026c8e:	9b04      	ldr	r3, [sp, #16]
 8026c90:	2b20      	cmp	r3, #32
 8026c92:	d819      	bhi.n	8026cc8 <__hexnan+0x90>
 8026c94:	9b03      	ldr	r3, [sp, #12]
 8026c96:	9a07      	ldr	r2, [sp, #28]
 8026c98:	4293      	cmp	r3, r2
 8026c9a:	dd12      	ble.n	8026cc2 <__hexnan+0x8a>
 8026c9c:	42b4      	cmp	r4, r6
 8026c9e:	d206      	bcs.n	8026cae <__hexnan+0x76>
 8026ca0:	2d07      	cmp	r5, #7
 8026ca2:	dc04      	bgt.n	8026cae <__hexnan+0x76>
 8026ca4:	002a      	movs	r2, r5
 8026ca6:	0031      	movs	r1, r6
 8026ca8:	0020      	movs	r0, r4
 8026caa:	f7ff ff9f 	bl	8026bec <L_shift>
 8026cae:	9b01      	ldr	r3, [sp, #4]
 8026cb0:	2508      	movs	r5, #8
 8026cb2:	429c      	cmp	r4, r3
 8026cb4:	d905      	bls.n	8026cc2 <__hexnan+0x8a>
 8026cb6:	1f26      	subs	r6, r4, #4
 8026cb8:	2500      	movs	r5, #0
 8026cba:	0034      	movs	r4, r6
 8026cbc:	9b03      	ldr	r3, [sp, #12]
 8026cbe:	6035      	str	r5, [r6, #0]
 8026cc0:	9307      	str	r3, [sp, #28]
 8026cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cc4:	9305      	str	r3, [sp, #20]
 8026cc6:	e7d5      	b.n	8026c74 <__hexnan+0x3c>
 8026cc8:	9b04      	ldr	r3, [sp, #16]
 8026cca:	2b29      	cmp	r3, #41	@ 0x29
 8026ccc:	d15a      	bne.n	8026d84 <__hexnan+0x14c>
 8026cce:	9b05      	ldr	r3, [sp, #20]
 8026cd0:	9a08      	ldr	r2, [sp, #32]
 8026cd2:	3302      	adds	r3, #2
 8026cd4:	6013      	str	r3, [r2, #0]
 8026cd6:	9b03      	ldr	r3, [sp, #12]
 8026cd8:	2b00      	cmp	r3, #0
 8026cda:	d053      	beq.n	8026d84 <__hexnan+0x14c>
 8026cdc:	42b4      	cmp	r4, r6
 8026cde:	d206      	bcs.n	8026cee <__hexnan+0xb6>
 8026ce0:	2d07      	cmp	r5, #7
 8026ce2:	dc04      	bgt.n	8026cee <__hexnan+0xb6>
 8026ce4:	002a      	movs	r2, r5
 8026ce6:	0031      	movs	r1, r6
 8026ce8:	0020      	movs	r0, r4
 8026cea:	f7ff ff7f 	bl	8026bec <L_shift>
 8026cee:	9b01      	ldr	r3, [sp, #4]
 8026cf0:	429c      	cmp	r4, r3
 8026cf2:	d936      	bls.n	8026d62 <__hexnan+0x12a>
 8026cf4:	001a      	movs	r2, r3
 8026cf6:	0023      	movs	r3, r4
 8026cf8:	cb02      	ldmia	r3!, {r1}
 8026cfa:	c202      	stmia	r2!, {r1}
 8026cfc:	429f      	cmp	r7, r3
 8026cfe:	d2fb      	bcs.n	8026cf8 <__hexnan+0xc0>
 8026d00:	9b02      	ldr	r3, [sp, #8]
 8026d02:	1c62      	adds	r2, r4, #1
 8026d04:	1ed9      	subs	r1, r3, #3
 8026d06:	2304      	movs	r3, #4
 8026d08:	4291      	cmp	r1, r2
 8026d0a:	d305      	bcc.n	8026d18 <__hexnan+0xe0>
 8026d0c:	9b02      	ldr	r3, [sp, #8]
 8026d0e:	3b04      	subs	r3, #4
 8026d10:	1b1b      	subs	r3, r3, r4
 8026d12:	089b      	lsrs	r3, r3, #2
 8026d14:	3301      	adds	r3, #1
 8026d16:	009b      	lsls	r3, r3, #2
 8026d18:	9a01      	ldr	r2, [sp, #4]
 8026d1a:	18d3      	adds	r3, r2, r3
 8026d1c:	2200      	movs	r2, #0
 8026d1e:	c304      	stmia	r3!, {r2}
 8026d20:	429f      	cmp	r7, r3
 8026d22:	d2fc      	bcs.n	8026d1e <__hexnan+0xe6>
 8026d24:	683b      	ldr	r3, [r7, #0]
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	d104      	bne.n	8026d34 <__hexnan+0xfc>
 8026d2a:	9b01      	ldr	r3, [sp, #4]
 8026d2c:	429f      	cmp	r7, r3
 8026d2e:	d127      	bne.n	8026d80 <__hexnan+0x148>
 8026d30:	2301      	movs	r3, #1
 8026d32:	603b      	str	r3, [r7, #0]
 8026d34:	2005      	movs	r0, #5
 8026d36:	b00b      	add	sp, #44	@ 0x2c
 8026d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d3a:	9b03      	ldr	r3, [sp, #12]
 8026d3c:	3501      	adds	r5, #1
 8026d3e:	3301      	adds	r3, #1
 8026d40:	9303      	str	r3, [sp, #12]
 8026d42:	2d08      	cmp	r5, #8
 8026d44:	dd06      	ble.n	8026d54 <__hexnan+0x11c>
 8026d46:	9b01      	ldr	r3, [sp, #4]
 8026d48:	429c      	cmp	r4, r3
 8026d4a:	d9ba      	bls.n	8026cc2 <__hexnan+0x8a>
 8026d4c:	2300      	movs	r3, #0
 8026d4e:	2501      	movs	r5, #1
 8026d50:	3c04      	subs	r4, #4
 8026d52:	6023      	str	r3, [r4, #0]
 8026d54:	220f      	movs	r2, #15
 8026d56:	6823      	ldr	r3, [r4, #0]
 8026d58:	4010      	ands	r0, r2
 8026d5a:	011b      	lsls	r3, r3, #4
 8026d5c:	4303      	orrs	r3, r0
 8026d5e:	6023      	str	r3, [r4, #0]
 8026d60:	e7af      	b.n	8026cc2 <__hexnan+0x8a>
 8026d62:	9b06      	ldr	r3, [sp, #24]
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	d0dd      	beq.n	8026d24 <__hexnan+0xec>
 8026d68:	2320      	movs	r3, #32
 8026d6a:	9a06      	ldr	r2, [sp, #24]
 8026d6c:	9902      	ldr	r1, [sp, #8]
 8026d6e:	1a9b      	subs	r3, r3, r2
 8026d70:	2201      	movs	r2, #1
 8026d72:	4252      	negs	r2, r2
 8026d74:	40da      	lsrs	r2, r3
 8026d76:	3904      	subs	r1, #4
 8026d78:	680b      	ldr	r3, [r1, #0]
 8026d7a:	4013      	ands	r3, r2
 8026d7c:	600b      	str	r3, [r1, #0]
 8026d7e:	e7d1      	b.n	8026d24 <__hexnan+0xec>
 8026d80:	3f04      	subs	r7, #4
 8026d82:	e7cf      	b.n	8026d24 <__hexnan+0xec>
 8026d84:	2004      	movs	r0, #4
 8026d86:	e7d6      	b.n	8026d36 <__hexnan+0xfe>

08026d88 <malloc>:
 8026d88:	b510      	push	{r4, lr}
 8026d8a:	4b03      	ldr	r3, [pc, #12]	@ (8026d98 <malloc+0x10>)
 8026d8c:	0001      	movs	r1, r0
 8026d8e:	6818      	ldr	r0, [r3, #0]
 8026d90:	f000 f826 	bl	8026de0 <_malloc_r>
 8026d94:	bd10      	pop	{r4, pc}
 8026d96:	46c0      	nop			@ (mov r8, r8)
 8026d98:	200003e0 	.word	0x200003e0

08026d9c <sbrk_aligned>:
 8026d9c:	b570      	push	{r4, r5, r6, lr}
 8026d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8026ddc <sbrk_aligned+0x40>)
 8026da0:	000d      	movs	r5, r1
 8026da2:	6831      	ldr	r1, [r6, #0]
 8026da4:	0004      	movs	r4, r0
 8026da6:	2900      	cmp	r1, #0
 8026da8:	d102      	bne.n	8026db0 <sbrk_aligned+0x14>
 8026daa:	f001 f981 	bl	80280b0 <_sbrk_r>
 8026dae:	6030      	str	r0, [r6, #0]
 8026db0:	0029      	movs	r1, r5
 8026db2:	0020      	movs	r0, r4
 8026db4:	f001 f97c 	bl	80280b0 <_sbrk_r>
 8026db8:	1c43      	adds	r3, r0, #1
 8026dba:	d103      	bne.n	8026dc4 <sbrk_aligned+0x28>
 8026dbc:	2501      	movs	r5, #1
 8026dbe:	426d      	negs	r5, r5
 8026dc0:	0028      	movs	r0, r5
 8026dc2:	bd70      	pop	{r4, r5, r6, pc}
 8026dc4:	2303      	movs	r3, #3
 8026dc6:	1cc5      	adds	r5, r0, #3
 8026dc8:	439d      	bics	r5, r3
 8026dca:	42a8      	cmp	r0, r5
 8026dcc:	d0f8      	beq.n	8026dc0 <sbrk_aligned+0x24>
 8026dce:	1a29      	subs	r1, r5, r0
 8026dd0:	0020      	movs	r0, r4
 8026dd2:	f001 f96d 	bl	80280b0 <_sbrk_r>
 8026dd6:	3001      	adds	r0, #1
 8026dd8:	d1f2      	bne.n	8026dc0 <sbrk_aligned+0x24>
 8026dda:	e7ef      	b.n	8026dbc <sbrk_aligned+0x20>
 8026ddc:	2000360c 	.word	0x2000360c

08026de0 <_malloc_r>:
 8026de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026de2:	2203      	movs	r2, #3
 8026de4:	1ccb      	adds	r3, r1, #3
 8026de6:	4393      	bics	r3, r2
 8026de8:	3308      	adds	r3, #8
 8026dea:	0005      	movs	r5, r0
 8026dec:	001f      	movs	r7, r3
 8026dee:	2b0c      	cmp	r3, #12
 8026df0:	d234      	bcs.n	8026e5c <_malloc_r+0x7c>
 8026df2:	270c      	movs	r7, #12
 8026df4:	42b9      	cmp	r1, r7
 8026df6:	d833      	bhi.n	8026e60 <_malloc_r+0x80>
 8026df8:	0028      	movs	r0, r5
 8026dfa:	f000 f883 	bl	8026f04 <__malloc_lock>
 8026dfe:	4e37      	ldr	r6, [pc, #220]	@ (8026edc <_malloc_r+0xfc>)
 8026e00:	6833      	ldr	r3, [r6, #0]
 8026e02:	001c      	movs	r4, r3
 8026e04:	2c00      	cmp	r4, #0
 8026e06:	d12f      	bne.n	8026e68 <_malloc_r+0x88>
 8026e08:	0039      	movs	r1, r7
 8026e0a:	0028      	movs	r0, r5
 8026e0c:	f7ff ffc6 	bl	8026d9c <sbrk_aligned>
 8026e10:	0004      	movs	r4, r0
 8026e12:	1c43      	adds	r3, r0, #1
 8026e14:	d15f      	bne.n	8026ed6 <_malloc_r+0xf6>
 8026e16:	6834      	ldr	r4, [r6, #0]
 8026e18:	9400      	str	r4, [sp, #0]
 8026e1a:	9b00      	ldr	r3, [sp, #0]
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	d14a      	bne.n	8026eb6 <_malloc_r+0xd6>
 8026e20:	2c00      	cmp	r4, #0
 8026e22:	d052      	beq.n	8026eca <_malloc_r+0xea>
 8026e24:	6823      	ldr	r3, [r4, #0]
 8026e26:	0028      	movs	r0, r5
 8026e28:	18e3      	adds	r3, r4, r3
 8026e2a:	9900      	ldr	r1, [sp, #0]
 8026e2c:	9301      	str	r3, [sp, #4]
 8026e2e:	f001 f93f 	bl	80280b0 <_sbrk_r>
 8026e32:	9b01      	ldr	r3, [sp, #4]
 8026e34:	4283      	cmp	r3, r0
 8026e36:	d148      	bne.n	8026eca <_malloc_r+0xea>
 8026e38:	6823      	ldr	r3, [r4, #0]
 8026e3a:	0028      	movs	r0, r5
 8026e3c:	1aff      	subs	r7, r7, r3
 8026e3e:	0039      	movs	r1, r7
 8026e40:	f7ff ffac 	bl	8026d9c <sbrk_aligned>
 8026e44:	3001      	adds	r0, #1
 8026e46:	d040      	beq.n	8026eca <_malloc_r+0xea>
 8026e48:	6823      	ldr	r3, [r4, #0]
 8026e4a:	19db      	adds	r3, r3, r7
 8026e4c:	6023      	str	r3, [r4, #0]
 8026e4e:	6833      	ldr	r3, [r6, #0]
 8026e50:	685a      	ldr	r2, [r3, #4]
 8026e52:	2a00      	cmp	r2, #0
 8026e54:	d133      	bne.n	8026ebe <_malloc_r+0xde>
 8026e56:	9b00      	ldr	r3, [sp, #0]
 8026e58:	6033      	str	r3, [r6, #0]
 8026e5a:	e019      	b.n	8026e90 <_malloc_r+0xb0>
 8026e5c:	2b00      	cmp	r3, #0
 8026e5e:	dac9      	bge.n	8026df4 <_malloc_r+0x14>
 8026e60:	230c      	movs	r3, #12
 8026e62:	602b      	str	r3, [r5, #0]
 8026e64:	2000      	movs	r0, #0
 8026e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026e68:	6821      	ldr	r1, [r4, #0]
 8026e6a:	1bc9      	subs	r1, r1, r7
 8026e6c:	d420      	bmi.n	8026eb0 <_malloc_r+0xd0>
 8026e6e:	290b      	cmp	r1, #11
 8026e70:	d90a      	bls.n	8026e88 <_malloc_r+0xa8>
 8026e72:	19e2      	adds	r2, r4, r7
 8026e74:	6027      	str	r7, [r4, #0]
 8026e76:	42a3      	cmp	r3, r4
 8026e78:	d104      	bne.n	8026e84 <_malloc_r+0xa4>
 8026e7a:	6032      	str	r2, [r6, #0]
 8026e7c:	6863      	ldr	r3, [r4, #4]
 8026e7e:	6011      	str	r1, [r2, #0]
 8026e80:	6053      	str	r3, [r2, #4]
 8026e82:	e005      	b.n	8026e90 <_malloc_r+0xb0>
 8026e84:	605a      	str	r2, [r3, #4]
 8026e86:	e7f9      	b.n	8026e7c <_malloc_r+0x9c>
 8026e88:	6862      	ldr	r2, [r4, #4]
 8026e8a:	42a3      	cmp	r3, r4
 8026e8c:	d10e      	bne.n	8026eac <_malloc_r+0xcc>
 8026e8e:	6032      	str	r2, [r6, #0]
 8026e90:	0028      	movs	r0, r5
 8026e92:	f000 f83f 	bl	8026f14 <__malloc_unlock>
 8026e96:	0020      	movs	r0, r4
 8026e98:	2207      	movs	r2, #7
 8026e9a:	300b      	adds	r0, #11
 8026e9c:	1d23      	adds	r3, r4, #4
 8026e9e:	4390      	bics	r0, r2
 8026ea0:	1ac2      	subs	r2, r0, r3
 8026ea2:	4298      	cmp	r0, r3
 8026ea4:	d0df      	beq.n	8026e66 <_malloc_r+0x86>
 8026ea6:	1a1b      	subs	r3, r3, r0
 8026ea8:	50a3      	str	r3, [r4, r2]
 8026eaa:	e7dc      	b.n	8026e66 <_malloc_r+0x86>
 8026eac:	605a      	str	r2, [r3, #4]
 8026eae:	e7ef      	b.n	8026e90 <_malloc_r+0xb0>
 8026eb0:	0023      	movs	r3, r4
 8026eb2:	6864      	ldr	r4, [r4, #4]
 8026eb4:	e7a6      	b.n	8026e04 <_malloc_r+0x24>
 8026eb6:	9c00      	ldr	r4, [sp, #0]
 8026eb8:	6863      	ldr	r3, [r4, #4]
 8026eba:	9300      	str	r3, [sp, #0]
 8026ebc:	e7ad      	b.n	8026e1a <_malloc_r+0x3a>
 8026ebe:	001a      	movs	r2, r3
 8026ec0:	685b      	ldr	r3, [r3, #4]
 8026ec2:	42a3      	cmp	r3, r4
 8026ec4:	d1fb      	bne.n	8026ebe <_malloc_r+0xde>
 8026ec6:	2300      	movs	r3, #0
 8026ec8:	e7da      	b.n	8026e80 <_malloc_r+0xa0>
 8026eca:	230c      	movs	r3, #12
 8026ecc:	0028      	movs	r0, r5
 8026ece:	602b      	str	r3, [r5, #0]
 8026ed0:	f000 f820 	bl	8026f14 <__malloc_unlock>
 8026ed4:	e7c6      	b.n	8026e64 <_malloc_r+0x84>
 8026ed6:	6007      	str	r7, [r0, #0]
 8026ed8:	e7da      	b.n	8026e90 <_malloc_r+0xb0>
 8026eda:	46c0      	nop			@ (mov r8, r8)
 8026edc:	20003610 	.word	0x20003610

08026ee0 <__ascii_mbtowc>:
 8026ee0:	b082      	sub	sp, #8
 8026ee2:	2900      	cmp	r1, #0
 8026ee4:	d100      	bne.n	8026ee8 <__ascii_mbtowc+0x8>
 8026ee6:	a901      	add	r1, sp, #4
 8026ee8:	1e10      	subs	r0, r2, #0
 8026eea:	d006      	beq.n	8026efa <__ascii_mbtowc+0x1a>
 8026eec:	2b00      	cmp	r3, #0
 8026eee:	d006      	beq.n	8026efe <__ascii_mbtowc+0x1e>
 8026ef0:	7813      	ldrb	r3, [r2, #0]
 8026ef2:	600b      	str	r3, [r1, #0]
 8026ef4:	7810      	ldrb	r0, [r2, #0]
 8026ef6:	1e43      	subs	r3, r0, #1
 8026ef8:	4198      	sbcs	r0, r3
 8026efa:	b002      	add	sp, #8
 8026efc:	4770      	bx	lr
 8026efe:	2002      	movs	r0, #2
 8026f00:	4240      	negs	r0, r0
 8026f02:	e7fa      	b.n	8026efa <__ascii_mbtowc+0x1a>

08026f04 <__malloc_lock>:
 8026f04:	b510      	push	{r4, lr}
 8026f06:	4802      	ldr	r0, [pc, #8]	@ (8026f10 <__malloc_lock+0xc>)
 8026f08:	f7fe fd07 	bl	802591a <__retarget_lock_acquire_recursive>
 8026f0c:	bd10      	pop	{r4, pc}
 8026f0e:	46c0      	nop			@ (mov r8, r8)
 8026f10:	20003608 	.word	0x20003608

08026f14 <__malloc_unlock>:
 8026f14:	b510      	push	{r4, lr}
 8026f16:	4802      	ldr	r0, [pc, #8]	@ (8026f20 <__malloc_unlock+0xc>)
 8026f18:	f7fe fd00 	bl	802591c <__retarget_lock_release_recursive>
 8026f1c:	bd10      	pop	{r4, pc}
 8026f1e:	46c0      	nop			@ (mov r8, r8)
 8026f20:	20003608 	.word	0x20003608

08026f24 <_Balloc>:
 8026f24:	b570      	push	{r4, r5, r6, lr}
 8026f26:	69c5      	ldr	r5, [r0, #28]
 8026f28:	0006      	movs	r6, r0
 8026f2a:	000c      	movs	r4, r1
 8026f2c:	2d00      	cmp	r5, #0
 8026f2e:	d10e      	bne.n	8026f4e <_Balloc+0x2a>
 8026f30:	2010      	movs	r0, #16
 8026f32:	f7ff ff29 	bl	8026d88 <malloc>
 8026f36:	1e02      	subs	r2, r0, #0
 8026f38:	61f0      	str	r0, [r6, #28]
 8026f3a:	d104      	bne.n	8026f46 <_Balloc+0x22>
 8026f3c:	216b      	movs	r1, #107	@ 0x6b
 8026f3e:	4b19      	ldr	r3, [pc, #100]	@ (8026fa4 <_Balloc+0x80>)
 8026f40:	4819      	ldr	r0, [pc, #100]	@ (8026fa8 <_Balloc+0x84>)
 8026f42:	f001 f8c7 	bl	80280d4 <__assert_func>
 8026f46:	6045      	str	r5, [r0, #4]
 8026f48:	6085      	str	r5, [r0, #8]
 8026f4a:	6005      	str	r5, [r0, #0]
 8026f4c:	60c5      	str	r5, [r0, #12]
 8026f4e:	69f5      	ldr	r5, [r6, #28]
 8026f50:	68eb      	ldr	r3, [r5, #12]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d013      	beq.n	8026f7e <_Balloc+0x5a>
 8026f56:	69f3      	ldr	r3, [r6, #28]
 8026f58:	00a2      	lsls	r2, r4, #2
 8026f5a:	68db      	ldr	r3, [r3, #12]
 8026f5c:	189b      	adds	r3, r3, r2
 8026f5e:	6818      	ldr	r0, [r3, #0]
 8026f60:	2800      	cmp	r0, #0
 8026f62:	d118      	bne.n	8026f96 <_Balloc+0x72>
 8026f64:	2101      	movs	r1, #1
 8026f66:	000d      	movs	r5, r1
 8026f68:	40a5      	lsls	r5, r4
 8026f6a:	1d6a      	adds	r2, r5, #5
 8026f6c:	0030      	movs	r0, r6
 8026f6e:	0092      	lsls	r2, r2, #2
 8026f70:	f001 f8ce 	bl	8028110 <_calloc_r>
 8026f74:	2800      	cmp	r0, #0
 8026f76:	d00c      	beq.n	8026f92 <_Balloc+0x6e>
 8026f78:	6044      	str	r4, [r0, #4]
 8026f7a:	6085      	str	r5, [r0, #8]
 8026f7c:	e00d      	b.n	8026f9a <_Balloc+0x76>
 8026f7e:	2221      	movs	r2, #33	@ 0x21
 8026f80:	2104      	movs	r1, #4
 8026f82:	0030      	movs	r0, r6
 8026f84:	f001 f8c4 	bl	8028110 <_calloc_r>
 8026f88:	69f3      	ldr	r3, [r6, #28]
 8026f8a:	60e8      	str	r0, [r5, #12]
 8026f8c:	68db      	ldr	r3, [r3, #12]
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	d1e1      	bne.n	8026f56 <_Balloc+0x32>
 8026f92:	2000      	movs	r0, #0
 8026f94:	bd70      	pop	{r4, r5, r6, pc}
 8026f96:	6802      	ldr	r2, [r0, #0]
 8026f98:	601a      	str	r2, [r3, #0]
 8026f9a:	2300      	movs	r3, #0
 8026f9c:	6103      	str	r3, [r0, #16]
 8026f9e:	60c3      	str	r3, [r0, #12]
 8026fa0:	e7f8      	b.n	8026f94 <_Balloc+0x70>
 8026fa2:	46c0      	nop			@ (mov r8, r8)
 8026fa4:	0802e1db 	.word	0x0802e1db
 8026fa8:	0802e2bb 	.word	0x0802e2bb

08026fac <_Bfree>:
 8026fac:	b570      	push	{r4, r5, r6, lr}
 8026fae:	69c6      	ldr	r6, [r0, #28]
 8026fb0:	0005      	movs	r5, r0
 8026fb2:	000c      	movs	r4, r1
 8026fb4:	2e00      	cmp	r6, #0
 8026fb6:	d10e      	bne.n	8026fd6 <_Bfree+0x2a>
 8026fb8:	2010      	movs	r0, #16
 8026fba:	f7ff fee5 	bl	8026d88 <malloc>
 8026fbe:	1e02      	subs	r2, r0, #0
 8026fc0:	61e8      	str	r0, [r5, #28]
 8026fc2:	d104      	bne.n	8026fce <_Bfree+0x22>
 8026fc4:	218f      	movs	r1, #143	@ 0x8f
 8026fc6:	4b09      	ldr	r3, [pc, #36]	@ (8026fec <_Bfree+0x40>)
 8026fc8:	4809      	ldr	r0, [pc, #36]	@ (8026ff0 <_Bfree+0x44>)
 8026fca:	f001 f883 	bl	80280d4 <__assert_func>
 8026fce:	6046      	str	r6, [r0, #4]
 8026fd0:	6086      	str	r6, [r0, #8]
 8026fd2:	6006      	str	r6, [r0, #0]
 8026fd4:	60c6      	str	r6, [r0, #12]
 8026fd6:	2c00      	cmp	r4, #0
 8026fd8:	d007      	beq.n	8026fea <_Bfree+0x3e>
 8026fda:	69eb      	ldr	r3, [r5, #28]
 8026fdc:	6862      	ldr	r2, [r4, #4]
 8026fde:	68db      	ldr	r3, [r3, #12]
 8026fe0:	0092      	lsls	r2, r2, #2
 8026fe2:	189b      	adds	r3, r3, r2
 8026fe4:	681a      	ldr	r2, [r3, #0]
 8026fe6:	6022      	str	r2, [r4, #0]
 8026fe8:	601c      	str	r4, [r3, #0]
 8026fea:	bd70      	pop	{r4, r5, r6, pc}
 8026fec:	0802e1db 	.word	0x0802e1db
 8026ff0:	0802e2bb 	.word	0x0802e2bb

08026ff4 <__multadd>:
 8026ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026ff6:	000f      	movs	r7, r1
 8026ff8:	9001      	str	r0, [sp, #4]
 8026ffa:	000c      	movs	r4, r1
 8026ffc:	001e      	movs	r6, r3
 8026ffe:	2000      	movs	r0, #0
 8027000:	690d      	ldr	r5, [r1, #16]
 8027002:	3714      	adds	r7, #20
 8027004:	683b      	ldr	r3, [r7, #0]
 8027006:	3001      	adds	r0, #1
 8027008:	b299      	uxth	r1, r3
 802700a:	4351      	muls	r1, r2
 802700c:	0c1b      	lsrs	r3, r3, #16
 802700e:	4353      	muls	r3, r2
 8027010:	1989      	adds	r1, r1, r6
 8027012:	0c0e      	lsrs	r6, r1, #16
 8027014:	199b      	adds	r3, r3, r6
 8027016:	0c1e      	lsrs	r6, r3, #16
 8027018:	b289      	uxth	r1, r1
 802701a:	041b      	lsls	r3, r3, #16
 802701c:	185b      	adds	r3, r3, r1
 802701e:	c708      	stmia	r7!, {r3}
 8027020:	4285      	cmp	r5, r0
 8027022:	dcef      	bgt.n	8027004 <__multadd+0x10>
 8027024:	2e00      	cmp	r6, #0
 8027026:	d022      	beq.n	802706e <__multadd+0x7a>
 8027028:	68a3      	ldr	r3, [r4, #8]
 802702a:	42ab      	cmp	r3, r5
 802702c:	dc19      	bgt.n	8027062 <__multadd+0x6e>
 802702e:	6861      	ldr	r1, [r4, #4]
 8027030:	9801      	ldr	r0, [sp, #4]
 8027032:	3101      	adds	r1, #1
 8027034:	f7ff ff76 	bl	8026f24 <_Balloc>
 8027038:	1e07      	subs	r7, r0, #0
 802703a:	d105      	bne.n	8027048 <__multadd+0x54>
 802703c:	003a      	movs	r2, r7
 802703e:	21ba      	movs	r1, #186	@ 0xba
 8027040:	4b0c      	ldr	r3, [pc, #48]	@ (8027074 <__multadd+0x80>)
 8027042:	480d      	ldr	r0, [pc, #52]	@ (8027078 <__multadd+0x84>)
 8027044:	f001 f846 	bl	80280d4 <__assert_func>
 8027048:	0021      	movs	r1, r4
 802704a:	6922      	ldr	r2, [r4, #16]
 802704c:	310c      	adds	r1, #12
 802704e:	3202      	adds	r2, #2
 8027050:	0092      	lsls	r2, r2, #2
 8027052:	300c      	adds	r0, #12
 8027054:	f7fe fc6e 	bl	8025934 <memcpy>
 8027058:	0021      	movs	r1, r4
 802705a:	9801      	ldr	r0, [sp, #4]
 802705c:	f7ff ffa6 	bl	8026fac <_Bfree>
 8027060:	003c      	movs	r4, r7
 8027062:	1d2b      	adds	r3, r5, #4
 8027064:	009b      	lsls	r3, r3, #2
 8027066:	18e3      	adds	r3, r4, r3
 8027068:	3501      	adds	r5, #1
 802706a:	605e      	str	r6, [r3, #4]
 802706c:	6125      	str	r5, [r4, #16]
 802706e:	0020      	movs	r0, r4
 8027070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027072:	46c0      	nop			@ (mov r8, r8)
 8027074:	0802e24a 	.word	0x0802e24a
 8027078:	0802e2bb 	.word	0x0802e2bb

0802707c <__s2b>:
 802707c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802707e:	0007      	movs	r7, r0
 8027080:	0018      	movs	r0, r3
 8027082:	000c      	movs	r4, r1
 8027084:	3008      	adds	r0, #8
 8027086:	2109      	movs	r1, #9
 8027088:	9301      	str	r3, [sp, #4]
 802708a:	0015      	movs	r5, r2
 802708c:	f7d9 f914 	bl	80002b8 <__divsi3>
 8027090:	2301      	movs	r3, #1
 8027092:	2100      	movs	r1, #0
 8027094:	4283      	cmp	r3, r0
 8027096:	db0a      	blt.n	80270ae <__s2b+0x32>
 8027098:	0038      	movs	r0, r7
 802709a:	f7ff ff43 	bl	8026f24 <_Balloc>
 802709e:	1e01      	subs	r1, r0, #0
 80270a0:	d108      	bne.n	80270b4 <__s2b+0x38>
 80270a2:	000a      	movs	r2, r1
 80270a4:	4b19      	ldr	r3, [pc, #100]	@ (802710c <__s2b+0x90>)
 80270a6:	481a      	ldr	r0, [pc, #104]	@ (8027110 <__s2b+0x94>)
 80270a8:	31d3      	adds	r1, #211	@ 0xd3
 80270aa:	f001 f813 	bl	80280d4 <__assert_func>
 80270ae:	005b      	lsls	r3, r3, #1
 80270b0:	3101      	adds	r1, #1
 80270b2:	e7ef      	b.n	8027094 <__s2b+0x18>
 80270b4:	9b08      	ldr	r3, [sp, #32]
 80270b6:	6143      	str	r3, [r0, #20]
 80270b8:	2301      	movs	r3, #1
 80270ba:	6103      	str	r3, [r0, #16]
 80270bc:	2d09      	cmp	r5, #9
 80270be:	dd18      	ble.n	80270f2 <__s2b+0x76>
 80270c0:	0023      	movs	r3, r4
 80270c2:	3309      	adds	r3, #9
 80270c4:	001e      	movs	r6, r3
 80270c6:	9300      	str	r3, [sp, #0]
 80270c8:	1964      	adds	r4, r4, r5
 80270ca:	7833      	ldrb	r3, [r6, #0]
 80270cc:	220a      	movs	r2, #10
 80270ce:	0038      	movs	r0, r7
 80270d0:	3b30      	subs	r3, #48	@ 0x30
 80270d2:	f7ff ff8f 	bl	8026ff4 <__multadd>
 80270d6:	3601      	adds	r6, #1
 80270d8:	0001      	movs	r1, r0
 80270da:	42a6      	cmp	r6, r4
 80270dc:	d1f5      	bne.n	80270ca <__s2b+0x4e>
 80270de:	002c      	movs	r4, r5
 80270e0:	9b00      	ldr	r3, [sp, #0]
 80270e2:	3c08      	subs	r4, #8
 80270e4:	191c      	adds	r4, r3, r4
 80270e6:	002e      	movs	r6, r5
 80270e8:	9b01      	ldr	r3, [sp, #4]
 80270ea:	429e      	cmp	r6, r3
 80270ec:	db04      	blt.n	80270f8 <__s2b+0x7c>
 80270ee:	0008      	movs	r0, r1
 80270f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80270f2:	2509      	movs	r5, #9
 80270f4:	340a      	adds	r4, #10
 80270f6:	e7f6      	b.n	80270e6 <__s2b+0x6a>
 80270f8:	1b63      	subs	r3, r4, r5
 80270fa:	5d9b      	ldrb	r3, [r3, r6]
 80270fc:	220a      	movs	r2, #10
 80270fe:	0038      	movs	r0, r7
 8027100:	3b30      	subs	r3, #48	@ 0x30
 8027102:	f7ff ff77 	bl	8026ff4 <__multadd>
 8027106:	3601      	adds	r6, #1
 8027108:	0001      	movs	r1, r0
 802710a:	e7ed      	b.n	80270e8 <__s2b+0x6c>
 802710c:	0802e24a 	.word	0x0802e24a
 8027110:	0802e2bb 	.word	0x0802e2bb

08027114 <__hi0bits>:
 8027114:	2280      	movs	r2, #128	@ 0x80
 8027116:	0003      	movs	r3, r0
 8027118:	0252      	lsls	r2, r2, #9
 802711a:	2000      	movs	r0, #0
 802711c:	4293      	cmp	r3, r2
 802711e:	d201      	bcs.n	8027124 <__hi0bits+0x10>
 8027120:	041b      	lsls	r3, r3, #16
 8027122:	3010      	adds	r0, #16
 8027124:	2280      	movs	r2, #128	@ 0x80
 8027126:	0452      	lsls	r2, r2, #17
 8027128:	4293      	cmp	r3, r2
 802712a:	d201      	bcs.n	8027130 <__hi0bits+0x1c>
 802712c:	3008      	adds	r0, #8
 802712e:	021b      	lsls	r3, r3, #8
 8027130:	2280      	movs	r2, #128	@ 0x80
 8027132:	0552      	lsls	r2, r2, #21
 8027134:	4293      	cmp	r3, r2
 8027136:	d201      	bcs.n	802713c <__hi0bits+0x28>
 8027138:	3004      	adds	r0, #4
 802713a:	011b      	lsls	r3, r3, #4
 802713c:	2280      	movs	r2, #128	@ 0x80
 802713e:	05d2      	lsls	r2, r2, #23
 8027140:	4293      	cmp	r3, r2
 8027142:	d201      	bcs.n	8027148 <__hi0bits+0x34>
 8027144:	3002      	adds	r0, #2
 8027146:	009b      	lsls	r3, r3, #2
 8027148:	2b00      	cmp	r3, #0
 802714a:	db03      	blt.n	8027154 <__hi0bits+0x40>
 802714c:	3001      	adds	r0, #1
 802714e:	4213      	tst	r3, r2
 8027150:	d100      	bne.n	8027154 <__hi0bits+0x40>
 8027152:	2020      	movs	r0, #32
 8027154:	4770      	bx	lr

08027156 <__lo0bits>:
 8027156:	6803      	ldr	r3, [r0, #0]
 8027158:	0001      	movs	r1, r0
 802715a:	2207      	movs	r2, #7
 802715c:	0018      	movs	r0, r3
 802715e:	4010      	ands	r0, r2
 8027160:	4213      	tst	r3, r2
 8027162:	d00d      	beq.n	8027180 <__lo0bits+0x2a>
 8027164:	3a06      	subs	r2, #6
 8027166:	2000      	movs	r0, #0
 8027168:	4213      	tst	r3, r2
 802716a:	d105      	bne.n	8027178 <__lo0bits+0x22>
 802716c:	3002      	adds	r0, #2
 802716e:	4203      	tst	r3, r0
 8027170:	d003      	beq.n	802717a <__lo0bits+0x24>
 8027172:	40d3      	lsrs	r3, r2
 8027174:	0010      	movs	r0, r2
 8027176:	600b      	str	r3, [r1, #0]
 8027178:	4770      	bx	lr
 802717a:	089b      	lsrs	r3, r3, #2
 802717c:	600b      	str	r3, [r1, #0]
 802717e:	e7fb      	b.n	8027178 <__lo0bits+0x22>
 8027180:	b29a      	uxth	r2, r3
 8027182:	2a00      	cmp	r2, #0
 8027184:	d101      	bne.n	802718a <__lo0bits+0x34>
 8027186:	2010      	movs	r0, #16
 8027188:	0c1b      	lsrs	r3, r3, #16
 802718a:	b2da      	uxtb	r2, r3
 802718c:	2a00      	cmp	r2, #0
 802718e:	d101      	bne.n	8027194 <__lo0bits+0x3e>
 8027190:	3008      	adds	r0, #8
 8027192:	0a1b      	lsrs	r3, r3, #8
 8027194:	071a      	lsls	r2, r3, #28
 8027196:	d101      	bne.n	802719c <__lo0bits+0x46>
 8027198:	3004      	adds	r0, #4
 802719a:	091b      	lsrs	r3, r3, #4
 802719c:	079a      	lsls	r2, r3, #30
 802719e:	d101      	bne.n	80271a4 <__lo0bits+0x4e>
 80271a0:	3002      	adds	r0, #2
 80271a2:	089b      	lsrs	r3, r3, #2
 80271a4:	07da      	lsls	r2, r3, #31
 80271a6:	d4e9      	bmi.n	802717c <__lo0bits+0x26>
 80271a8:	3001      	adds	r0, #1
 80271aa:	085b      	lsrs	r3, r3, #1
 80271ac:	d1e6      	bne.n	802717c <__lo0bits+0x26>
 80271ae:	2020      	movs	r0, #32
 80271b0:	e7e2      	b.n	8027178 <__lo0bits+0x22>
	...

080271b4 <__i2b>:
 80271b4:	b510      	push	{r4, lr}
 80271b6:	000c      	movs	r4, r1
 80271b8:	2101      	movs	r1, #1
 80271ba:	f7ff feb3 	bl	8026f24 <_Balloc>
 80271be:	2800      	cmp	r0, #0
 80271c0:	d107      	bne.n	80271d2 <__i2b+0x1e>
 80271c2:	2146      	movs	r1, #70	@ 0x46
 80271c4:	4c05      	ldr	r4, [pc, #20]	@ (80271dc <__i2b+0x28>)
 80271c6:	0002      	movs	r2, r0
 80271c8:	4b05      	ldr	r3, [pc, #20]	@ (80271e0 <__i2b+0x2c>)
 80271ca:	0020      	movs	r0, r4
 80271cc:	31ff      	adds	r1, #255	@ 0xff
 80271ce:	f000 ff81 	bl	80280d4 <__assert_func>
 80271d2:	2301      	movs	r3, #1
 80271d4:	6144      	str	r4, [r0, #20]
 80271d6:	6103      	str	r3, [r0, #16]
 80271d8:	bd10      	pop	{r4, pc}
 80271da:	46c0      	nop			@ (mov r8, r8)
 80271dc:	0802e2bb 	.word	0x0802e2bb
 80271e0:	0802e24a 	.word	0x0802e24a

080271e4 <__multiply>:
 80271e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80271e6:	0014      	movs	r4, r2
 80271e8:	690a      	ldr	r2, [r1, #16]
 80271ea:	6923      	ldr	r3, [r4, #16]
 80271ec:	000d      	movs	r5, r1
 80271ee:	b089      	sub	sp, #36	@ 0x24
 80271f0:	429a      	cmp	r2, r3
 80271f2:	db02      	blt.n	80271fa <__multiply+0x16>
 80271f4:	0023      	movs	r3, r4
 80271f6:	000c      	movs	r4, r1
 80271f8:	001d      	movs	r5, r3
 80271fa:	6927      	ldr	r7, [r4, #16]
 80271fc:	692e      	ldr	r6, [r5, #16]
 80271fe:	6861      	ldr	r1, [r4, #4]
 8027200:	19bb      	adds	r3, r7, r6
 8027202:	9300      	str	r3, [sp, #0]
 8027204:	68a3      	ldr	r3, [r4, #8]
 8027206:	19ba      	adds	r2, r7, r6
 8027208:	4293      	cmp	r3, r2
 802720a:	da00      	bge.n	802720e <__multiply+0x2a>
 802720c:	3101      	adds	r1, #1
 802720e:	f7ff fe89 	bl	8026f24 <_Balloc>
 8027212:	4684      	mov	ip, r0
 8027214:	2800      	cmp	r0, #0
 8027216:	d106      	bne.n	8027226 <__multiply+0x42>
 8027218:	21b1      	movs	r1, #177	@ 0xb1
 802721a:	4662      	mov	r2, ip
 802721c:	4b44      	ldr	r3, [pc, #272]	@ (8027330 <__multiply+0x14c>)
 802721e:	4845      	ldr	r0, [pc, #276]	@ (8027334 <__multiply+0x150>)
 8027220:	0049      	lsls	r1, r1, #1
 8027222:	f000 ff57 	bl	80280d4 <__assert_func>
 8027226:	0002      	movs	r2, r0
 8027228:	19bb      	adds	r3, r7, r6
 802722a:	3214      	adds	r2, #20
 802722c:	009b      	lsls	r3, r3, #2
 802722e:	18d3      	adds	r3, r2, r3
 8027230:	9301      	str	r3, [sp, #4]
 8027232:	2100      	movs	r1, #0
 8027234:	0013      	movs	r3, r2
 8027236:	9801      	ldr	r0, [sp, #4]
 8027238:	4283      	cmp	r3, r0
 802723a:	d328      	bcc.n	802728e <__multiply+0xaa>
 802723c:	0023      	movs	r3, r4
 802723e:	00bf      	lsls	r7, r7, #2
 8027240:	3314      	adds	r3, #20
 8027242:	9304      	str	r3, [sp, #16]
 8027244:	3514      	adds	r5, #20
 8027246:	19db      	adds	r3, r3, r7
 8027248:	00b6      	lsls	r6, r6, #2
 802724a:	9302      	str	r3, [sp, #8]
 802724c:	19ab      	adds	r3, r5, r6
 802724e:	9307      	str	r3, [sp, #28]
 8027250:	2304      	movs	r3, #4
 8027252:	9305      	str	r3, [sp, #20]
 8027254:	0023      	movs	r3, r4
 8027256:	9902      	ldr	r1, [sp, #8]
 8027258:	3315      	adds	r3, #21
 802725a:	4299      	cmp	r1, r3
 802725c:	d305      	bcc.n	802726a <__multiply+0x86>
 802725e:	1b0c      	subs	r4, r1, r4
 8027260:	3c15      	subs	r4, #21
 8027262:	08a4      	lsrs	r4, r4, #2
 8027264:	3401      	adds	r4, #1
 8027266:	00a3      	lsls	r3, r4, #2
 8027268:	9305      	str	r3, [sp, #20]
 802726a:	9b07      	ldr	r3, [sp, #28]
 802726c:	429d      	cmp	r5, r3
 802726e:	d310      	bcc.n	8027292 <__multiply+0xae>
 8027270:	9b00      	ldr	r3, [sp, #0]
 8027272:	2b00      	cmp	r3, #0
 8027274:	dd05      	ble.n	8027282 <__multiply+0x9e>
 8027276:	9b01      	ldr	r3, [sp, #4]
 8027278:	3b04      	subs	r3, #4
 802727a:	9301      	str	r3, [sp, #4]
 802727c:	681b      	ldr	r3, [r3, #0]
 802727e:	2b00      	cmp	r3, #0
 8027280:	d052      	beq.n	8027328 <__multiply+0x144>
 8027282:	4663      	mov	r3, ip
 8027284:	4660      	mov	r0, ip
 8027286:	9a00      	ldr	r2, [sp, #0]
 8027288:	611a      	str	r2, [r3, #16]
 802728a:	b009      	add	sp, #36	@ 0x24
 802728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802728e:	c302      	stmia	r3!, {r1}
 8027290:	e7d1      	b.n	8027236 <__multiply+0x52>
 8027292:	682c      	ldr	r4, [r5, #0]
 8027294:	b2a4      	uxth	r4, r4
 8027296:	2c00      	cmp	r4, #0
 8027298:	d01f      	beq.n	80272da <__multiply+0xf6>
 802729a:	2300      	movs	r3, #0
 802729c:	0017      	movs	r7, r2
 802729e:	9e04      	ldr	r6, [sp, #16]
 80272a0:	9303      	str	r3, [sp, #12]
 80272a2:	ce08      	ldmia	r6!, {r3}
 80272a4:	6839      	ldr	r1, [r7, #0]
 80272a6:	9306      	str	r3, [sp, #24]
 80272a8:	466b      	mov	r3, sp
 80272aa:	8b1b      	ldrh	r3, [r3, #24]
 80272ac:	b288      	uxth	r0, r1
 80272ae:	4363      	muls	r3, r4
 80272b0:	181b      	adds	r3, r3, r0
 80272b2:	9803      	ldr	r0, [sp, #12]
 80272b4:	0c09      	lsrs	r1, r1, #16
 80272b6:	181b      	adds	r3, r3, r0
 80272b8:	9806      	ldr	r0, [sp, #24]
 80272ba:	0c00      	lsrs	r0, r0, #16
 80272bc:	4360      	muls	r0, r4
 80272be:	1840      	adds	r0, r0, r1
 80272c0:	0c19      	lsrs	r1, r3, #16
 80272c2:	1841      	adds	r1, r0, r1
 80272c4:	0c08      	lsrs	r0, r1, #16
 80272c6:	b29b      	uxth	r3, r3
 80272c8:	0409      	lsls	r1, r1, #16
 80272ca:	4319      	orrs	r1, r3
 80272cc:	9b02      	ldr	r3, [sp, #8]
 80272ce:	9003      	str	r0, [sp, #12]
 80272d0:	c702      	stmia	r7!, {r1}
 80272d2:	42b3      	cmp	r3, r6
 80272d4:	d8e5      	bhi.n	80272a2 <__multiply+0xbe>
 80272d6:	9b05      	ldr	r3, [sp, #20]
 80272d8:	50d0      	str	r0, [r2, r3]
 80272da:	682c      	ldr	r4, [r5, #0]
 80272dc:	0c24      	lsrs	r4, r4, #16
 80272de:	d020      	beq.n	8027322 <__multiply+0x13e>
 80272e0:	2100      	movs	r1, #0
 80272e2:	0010      	movs	r0, r2
 80272e4:	6813      	ldr	r3, [r2, #0]
 80272e6:	9e04      	ldr	r6, [sp, #16]
 80272e8:	9103      	str	r1, [sp, #12]
 80272ea:	6831      	ldr	r1, [r6, #0]
 80272ec:	6807      	ldr	r7, [r0, #0]
 80272ee:	b289      	uxth	r1, r1
 80272f0:	4361      	muls	r1, r4
 80272f2:	0c3f      	lsrs	r7, r7, #16
 80272f4:	19c9      	adds	r1, r1, r7
 80272f6:	9f03      	ldr	r7, [sp, #12]
 80272f8:	b29b      	uxth	r3, r3
 80272fa:	19c9      	adds	r1, r1, r7
 80272fc:	040f      	lsls	r7, r1, #16
 80272fe:	431f      	orrs	r7, r3
 8027300:	6007      	str	r7, [r0, #0]
 8027302:	ce80      	ldmia	r6!, {r7}
 8027304:	6843      	ldr	r3, [r0, #4]
 8027306:	0c3f      	lsrs	r7, r7, #16
 8027308:	4367      	muls	r7, r4
 802730a:	b29b      	uxth	r3, r3
 802730c:	0c09      	lsrs	r1, r1, #16
 802730e:	18fb      	adds	r3, r7, r3
 8027310:	185b      	adds	r3, r3, r1
 8027312:	0c19      	lsrs	r1, r3, #16
 8027314:	9103      	str	r1, [sp, #12]
 8027316:	9902      	ldr	r1, [sp, #8]
 8027318:	3004      	adds	r0, #4
 802731a:	42b1      	cmp	r1, r6
 802731c:	d8e5      	bhi.n	80272ea <__multiply+0x106>
 802731e:	9905      	ldr	r1, [sp, #20]
 8027320:	5053      	str	r3, [r2, r1]
 8027322:	3504      	adds	r5, #4
 8027324:	3204      	adds	r2, #4
 8027326:	e7a0      	b.n	802726a <__multiply+0x86>
 8027328:	9b00      	ldr	r3, [sp, #0]
 802732a:	3b01      	subs	r3, #1
 802732c:	9300      	str	r3, [sp, #0]
 802732e:	e79f      	b.n	8027270 <__multiply+0x8c>
 8027330:	0802e24a 	.word	0x0802e24a
 8027334:	0802e2bb 	.word	0x0802e2bb

08027338 <__pow5mult>:
 8027338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802733a:	2303      	movs	r3, #3
 802733c:	0015      	movs	r5, r2
 802733e:	0007      	movs	r7, r0
 8027340:	000e      	movs	r6, r1
 8027342:	401a      	ands	r2, r3
 8027344:	421d      	tst	r5, r3
 8027346:	d008      	beq.n	802735a <__pow5mult+0x22>
 8027348:	4925      	ldr	r1, [pc, #148]	@ (80273e0 <__pow5mult+0xa8>)
 802734a:	3a01      	subs	r2, #1
 802734c:	0092      	lsls	r2, r2, #2
 802734e:	5852      	ldr	r2, [r2, r1]
 8027350:	2300      	movs	r3, #0
 8027352:	0031      	movs	r1, r6
 8027354:	f7ff fe4e 	bl	8026ff4 <__multadd>
 8027358:	0006      	movs	r6, r0
 802735a:	10ad      	asrs	r5, r5, #2
 802735c:	d03d      	beq.n	80273da <__pow5mult+0xa2>
 802735e:	69fc      	ldr	r4, [r7, #28]
 8027360:	2c00      	cmp	r4, #0
 8027362:	d10f      	bne.n	8027384 <__pow5mult+0x4c>
 8027364:	2010      	movs	r0, #16
 8027366:	f7ff fd0f 	bl	8026d88 <malloc>
 802736a:	1e02      	subs	r2, r0, #0
 802736c:	61f8      	str	r0, [r7, #28]
 802736e:	d105      	bne.n	802737c <__pow5mult+0x44>
 8027370:	21b4      	movs	r1, #180	@ 0xb4
 8027372:	4b1c      	ldr	r3, [pc, #112]	@ (80273e4 <__pow5mult+0xac>)
 8027374:	481c      	ldr	r0, [pc, #112]	@ (80273e8 <__pow5mult+0xb0>)
 8027376:	31ff      	adds	r1, #255	@ 0xff
 8027378:	f000 feac 	bl	80280d4 <__assert_func>
 802737c:	6044      	str	r4, [r0, #4]
 802737e:	6084      	str	r4, [r0, #8]
 8027380:	6004      	str	r4, [r0, #0]
 8027382:	60c4      	str	r4, [r0, #12]
 8027384:	69fb      	ldr	r3, [r7, #28]
 8027386:	689c      	ldr	r4, [r3, #8]
 8027388:	9301      	str	r3, [sp, #4]
 802738a:	2c00      	cmp	r4, #0
 802738c:	d108      	bne.n	80273a0 <__pow5mult+0x68>
 802738e:	0038      	movs	r0, r7
 8027390:	4916      	ldr	r1, [pc, #88]	@ (80273ec <__pow5mult+0xb4>)
 8027392:	f7ff ff0f 	bl	80271b4 <__i2b>
 8027396:	9b01      	ldr	r3, [sp, #4]
 8027398:	0004      	movs	r4, r0
 802739a:	6098      	str	r0, [r3, #8]
 802739c:	2300      	movs	r3, #0
 802739e:	6003      	str	r3, [r0, #0]
 80273a0:	2301      	movs	r3, #1
 80273a2:	421d      	tst	r5, r3
 80273a4:	d00a      	beq.n	80273bc <__pow5mult+0x84>
 80273a6:	0031      	movs	r1, r6
 80273a8:	0022      	movs	r2, r4
 80273aa:	0038      	movs	r0, r7
 80273ac:	f7ff ff1a 	bl	80271e4 <__multiply>
 80273b0:	0031      	movs	r1, r6
 80273b2:	9001      	str	r0, [sp, #4]
 80273b4:	0038      	movs	r0, r7
 80273b6:	f7ff fdf9 	bl	8026fac <_Bfree>
 80273ba:	9e01      	ldr	r6, [sp, #4]
 80273bc:	106d      	asrs	r5, r5, #1
 80273be:	d00c      	beq.n	80273da <__pow5mult+0xa2>
 80273c0:	6820      	ldr	r0, [r4, #0]
 80273c2:	2800      	cmp	r0, #0
 80273c4:	d107      	bne.n	80273d6 <__pow5mult+0x9e>
 80273c6:	0022      	movs	r2, r4
 80273c8:	0021      	movs	r1, r4
 80273ca:	0038      	movs	r0, r7
 80273cc:	f7ff ff0a 	bl	80271e4 <__multiply>
 80273d0:	2300      	movs	r3, #0
 80273d2:	6020      	str	r0, [r4, #0]
 80273d4:	6003      	str	r3, [r0, #0]
 80273d6:	0004      	movs	r4, r0
 80273d8:	e7e2      	b.n	80273a0 <__pow5mult+0x68>
 80273da:	0030      	movs	r0, r6
 80273dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80273de:	46c0      	nop			@ (mov r8, r8)
 80273e0:	0802e4bc 	.word	0x0802e4bc
 80273e4:	0802e1db 	.word	0x0802e1db
 80273e8:	0802e2bb 	.word	0x0802e2bb
 80273ec:	00000271 	.word	0x00000271

080273f0 <__lshift>:
 80273f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273f2:	000c      	movs	r4, r1
 80273f4:	0016      	movs	r6, r2
 80273f6:	6923      	ldr	r3, [r4, #16]
 80273f8:	1157      	asrs	r7, r2, #5
 80273fa:	b085      	sub	sp, #20
 80273fc:	18fb      	adds	r3, r7, r3
 80273fe:	9301      	str	r3, [sp, #4]
 8027400:	3301      	adds	r3, #1
 8027402:	9300      	str	r3, [sp, #0]
 8027404:	6849      	ldr	r1, [r1, #4]
 8027406:	68a3      	ldr	r3, [r4, #8]
 8027408:	9002      	str	r0, [sp, #8]
 802740a:	9a00      	ldr	r2, [sp, #0]
 802740c:	4293      	cmp	r3, r2
 802740e:	db10      	blt.n	8027432 <__lshift+0x42>
 8027410:	9802      	ldr	r0, [sp, #8]
 8027412:	f7ff fd87 	bl	8026f24 <_Balloc>
 8027416:	2300      	movs	r3, #0
 8027418:	0001      	movs	r1, r0
 802741a:	0005      	movs	r5, r0
 802741c:	001a      	movs	r2, r3
 802741e:	3114      	adds	r1, #20
 8027420:	4298      	cmp	r0, r3
 8027422:	d10c      	bne.n	802743e <__lshift+0x4e>
 8027424:	21ef      	movs	r1, #239	@ 0xef
 8027426:	002a      	movs	r2, r5
 8027428:	4b25      	ldr	r3, [pc, #148]	@ (80274c0 <__lshift+0xd0>)
 802742a:	4826      	ldr	r0, [pc, #152]	@ (80274c4 <__lshift+0xd4>)
 802742c:	0049      	lsls	r1, r1, #1
 802742e:	f000 fe51 	bl	80280d4 <__assert_func>
 8027432:	3101      	adds	r1, #1
 8027434:	005b      	lsls	r3, r3, #1
 8027436:	e7e8      	b.n	802740a <__lshift+0x1a>
 8027438:	0098      	lsls	r0, r3, #2
 802743a:	500a      	str	r2, [r1, r0]
 802743c:	3301      	adds	r3, #1
 802743e:	42bb      	cmp	r3, r7
 8027440:	dbfa      	blt.n	8027438 <__lshift+0x48>
 8027442:	43fb      	mvns	r3, r7
 8027444:	17db      	asrs	r3, r3, #31
 8027446:	401f      	ands	r7, r3
 8027448:	00bf      	lsls	r7, r7, #2
 802744a:	0023      	movs	r3, r4
 802744c:	201f      	movs	r0, #31
 802744e:	19c9      	adds	r1, r1, r7
 8027450:	0037      	movs	r7, r6
 8027452:	6922      	ldr	r2, [r4, #16]
 8027454:	3314      	adds	r3, #20
 8027456:	0092      	lsls	r2, r2, #2
 8027458:	189a      	adds	r2, r3, r2
 802745a:	4007      	ands	r7, r0
 802745c:	4206      	tst	r6, r0
 802745e:	d029      	beq.n	80274b4 <__lshift+0xc4>
 8027460:	3001      	adds	r0, #1
 8027462:	1bc0      	subs	r0, r0, r7
 8027464:	9003      	str	r0, [sp, #12]
 8027466:	468c      	mov	ip, r1
 8027468:	2000      	movs	r0, #0
 802746a:	681e      	ldr	r6, [r3, #0]
 802746c:	40be      	lsls	r6, r7
 802746e:	4306      	orrs	r6, r0
 8027470:	4660      	mov	r0, ip
 8027472:	c040      	stmia	r0!, {r6}
 8027474:	4684      	mov	ip, r0
 8027476:	9e03      	ldr	r6, [sp, #12]
 8027478:	cb01      	ldmia	r3!, {r0}
 802747a:	40f0      	lsrs	r0, r6
 802747c:	429a      	cmp	r2, r3
 802747e:	d8f4      	bhi.n	802746a <__lshift+0x7a>
 8027480:	0026      	movs	r6, r4
 8027482:	3615      	adds	r6, #21
 8027484:	2304      	movs	r3, #4
 8027486:	42b2      	cmp	r2, r6
 8027488:	d304      	bcc.n	8027494 <__lshift+0xa4>
 802748a:	1b13      	subs	r3, r2, r4
 802748c:	3b15      	subs	r3, #21
 802748e:	089b      	lsrs	r3, r3, #2
 8027490:	3301      	adds	r3, #1
 8027492:	009b      	lsls	r3, r3, #2
 8027494:	50c8      	str	r0, [r1, r3]
 8027496:	2800      	cmp	r0, #0
 8027498:	d002      	beq.n	80274a0 <__lshift+0xb0>
 802749a:	9b01      	ldr	r3, [sp, #4]
 802749c:	3302      	adds	r3, #2
 802749e:	9300      	str	r3, [sp, #0]
 80274a0:	9b00      	ldr	r3, [sp, #0]
 80274a2:	9802      	ldr	r0, [sp, #8]
 80274a4:	3b01      	subs	r3, #1
 80274a6:	0021      	movs	r1, r4
 80274a8:	612b      	str	r3, [r5, #16]
 80274aa:	f7ff fd7f 	bl	8026fac <_Bfree>
 80274ae:	0028      	movs	r0, r5
 80274b0:	b005      	add	sp, #20
 80274b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80274b4:	cb01      	ldmia	r3!, {r0}
 80274b6:	c101      	stmia	r1!, {r0}
 80274b8:	429a      	cmp	r2, r3
 80274ba:	d8fb      	bhi.n	80274b4 <__lshift+0xc4>
 80274bc:	e7f0      	b.n	80274a0 <__lshift+0xb0>
 80274be:	46c0      	nop			@ (mov r8, r8)
 80274c0:	0802e24a 	.word	0x0802e24a
 80274c4:	0802e2bb 	.word	0x0802e2bb

080274c8 <__mcmp>:
 80274c8:	b530      	push	{r4, r5, lr}
 80274ca:	690b      	ldr	r3, [r1, #16]
 80274cc:	6904      	ldr	r4, [r0, #16]
 80274ce:	0002      	movs	r2, r0
 80274d0:	1ae0      	subs	r0, r4, r3
 80274d2:	429c      	cmp	r4, r3
 80274d4:	d10f      	bne.n	80274f6 <__mcmp+0x2e>
 80274d6:	3214      	adds	r2, #20
 80274d8:	009b      	lsls	r3, r3, #2
 80274da:	3114      	adds	r1, #20
 80274dc:	0014      	movs	r4, r2
 80274de:	18c9      	adds	r1, r1, r3
 80274e0:	18d2      	adds	r2, r2, r3
 80274e2:	3a04      	subs	r2, #4
 80274e4:	3904      	subs	r1, #4
 80274e6:	6815      	ldr	r5, [r2, #0]
 80274e8:	680b      	ldr	r3, [r1, #0]
 80274ea:	429d      	cmp	r5, r3
 80274ec:	d004      	beq.n	80274f8 <__mcmp+0x30>
 80274ee:	2001      	movs	r0, #1
 80274f0:	429d      	cmp	r5, r3
 80274f2:	d200      	bcs.n	80274f6 <__mcmp+0x2e>
 80274f4:	3802      	subs	r0, #2
 80274f6:	bd30      	pop	{r4, r5, pc}
 80274f8:	4294      	cmp	r4, r2
 80274fa:	d3f2      	bcc.n	80274e2 <__mcmp+0x1a>
 80274fc:	e7fb      	b.n	80274f6 <__mcmp+0x2e>
	...

08027500 <__mdiff>:
 8027500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027502:	000c      	movs	r4, r1
 8027504:	b087      	sub	sp, #28
 8027506:	9000      	str	r0, [sp, #0]
 8027508:	0011      	movs	r1, r2
 802750a:	0020      	movs	r0, r4
 802750c:	0017      	movs	r7, r2
 802750e:	f7ff ffdb 	bl	80274c8 <__mcmp>
 8027512:	1e05      	subs	r5, r0, #0
 8027514:	d110      	bne.n	8027538 <__mdiff+0x38>
 8027516:	0001      	movs	r1, r0
 8027518:	9800      	ldr	r0, [sp, #0]
 802751a:	f7ff fd03 	bl	8026f24 <_Balloc>
 802751e:	1e02      	subs	r2, r0, #0
 8027520:	d104      	bne.n	802752c <__mdiff+0x2c>
 8027522:	4b40      	ldr	r3, [pc, #256]	@ (8027624 <__mdiff+0x124>)
 8027524:	4840      	ldr	r0, [pc, #256]	@ (8027628 <__mdiff+0x128>)
 8027526:	4941      	ldr	r1, [pc, #260]	@ (802762c <__mdiff+0x12c>)
 8027528:	f000 fdd4 	bl	80280d4 <__assert_func>
 802752c:	2301      	movs	r3, #1
 802752e:	6145      	str	r5, [r0, #20]
 8027530:	6103      	str	r3, [r0, #16]
 8027532:	0010      	movs	r0, r2
 8027534:	b007      	add	sp, #28
 8027536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027538:	2600      	movs	r6, #0
 802753a:	42b0      	cmp	r0, r6
 802753c:	da03      	bge.n	8027546 <__mdiff+0x46>
 802753e:	0023      	movs	r3, r4
 8027540:	003c      	movs	r4, r7
 8027542:	001f      	movs	r7, r3
 8027544:	3601      	adds	r6, #1
 8027546:	6861      	ldr	r1, [r4, #4]
 8027548:	9800      	ldr	r0, [sp, #0]
 802754a:	f7ff fceb 	bl	8026f24 <_Balloc>
 802754e:	1e02      	subs	r2, r0, #0
 8027550:	d103      	bne.n	802755a <__mdiff+0x5a>
 8027552:	4b34      	ldr	r3, [pc, #208]	@ (8027624 <__mdiff+0x124>)
 8027554:	4834      	ldr	r0, [pc, #208]	@ (8027628 <__mdiff+0x128>)
 8027556:	4936      	ldr	r1, [pc, #216]	@ (8027630 <__mdiff+0x130>)
 8027558:	e7e6      	b.n	8027528 <__mdiff+0x28>
 802755a:	6923      	ldr	r3, [r4, #16]
 802755c:	3414      	adds	r4, #20
 802755e:	9300      	str	r3, [sp, #0]
 8027560:	009b      	lsls	r3, r3, #2
 8027562:	18e3      	adds	r3, r4, r3
 8027564:	0021      	movs	r1, r4
 8027566:	9401      	str	r4, [sp, #4]
 8027568:	003c      	movs	r4, r7
 802756a:	9302      	str	r3, [sp, #8]
 802756c:	693b      	ldr	r3, [r7, #16]
 802756e:	3414      	adds	r4, #20
 8027570:	009b      	lsls	r3, r3, #2
 8027572:	18e3      	adds	r3, r4, r3
 8027574:	9303      	str	r3, [sp, #12]
 8027576:	0003      	movs	r3, r0
 8027578:	60c6      	str	r6, [r0, #12]
 802757a:	468c      	mov	ip, r1
 802757c:	2000      	movs	r0, #0
 802757e:	3314      	adds	r3, #20
 8027580:	9304      	str	r3, [sp, #16]
 8027582:	9305      	str	r3, [sp, #20]
 8027584:	4663      	mov	r3, ip
 8027586:	cb20      	ldmia	r3!, {r5}
 8027588:	b2a9      	uxth	r1, r5
 802758a:	000e      	movs	r6, r1
 802758c:	469c      	mov	ip, r3
 802758e:	cc08      	ldmia	r4!, {r3}
 8027590:	0c2d      	lsrs	r5, r5, #16
 8027592:	b299      	uxth	r1, r3
 8027594:	1a71      	subs	r1, r6, r1
 8027596:	1809      	adds	r1, r1, r0
 8027598:	0c1b      	lsrs	r3, r3, #16
 802759a:	1408      	asrs	r0, r1, #16
 802759c:	1aeb      	subs	r3, r5, r3
 802759e:	181b      	adds	r3, r3, r0
 80275a0:	1418      	asrs	r0, r3, #16
 80275a2:	b289      	uxth	r1, r1
 80275a4:	041b      	lsls	r3, r3, #16
 80275a6:	4319      	orrs	r1, r3
 80275a8:	9b05      	ldr	r3, [sp, #20]
 80275aa:	c302      	stmia	r3!, {r1}
 80275ac:	9305      	str	r3, [sp, #20]
 80275ae:	9b03      	ldr	r3, [sp, #12]
 80275b0:	42a3      	cmp	r3, r4
 80275b2:	d8e7      	bhi.n	8027584 <__mdiff+0x84>
 80275b4:	0039      	movs	r1, r7
 80275b6:	9c03      	ldr	r4, [sp, #12]
 80275b8:	3115      	adds	r1, #21
 80275ba:	2304      	movs	r3, #4
 80275bc:	428c      	cmp	r4, r1
 80275be:	d304      	bcc.n	80275ca <__mdiff+0xca>
 80275c0:	1be3      	subs	r3, r4, r7
 80275c2:	3b15      	subs	r3, #21
 80275c4:	089b      	lsrs	r3, r3, #2
 80275c6:	3301      	adds	r3, #1
 80275c8:	009b      	lsls	r3, r3, #2
 80275ca:	9901      	ldr	r1, [sp, #4]
 80275cc:	18cd      	adds	r5, r1, r3
 80275ce:	9904      	ldr	r1, [sp, #16]
 80275d0:	002e      	movs	r6, r5
 80275d2:	18cb      	adds	r3, r1, r3
 80275d4:	001f      	movs	r7, r3
 80275d6:	9902      	ldr	r1, [sp, #8]
 80275d8:	428e      	cmp	r6, r1
 80275da:	d311      	bcc.n	8027600 <__mdiff+0x100>
 80275dc:	9c02      	ldr	r4, [sp, #8]
 80275de:	1ee9      	subs	r1, r5, #3
 80275e0:	2000      	movs	r0, #0
 80275e2:	428c      	cmp	r4, r1
 80275e4:	d304      	bcc.n	80275f0 <__mdiff+0xf0>
 80275e6:	0021      	movs	r1, r4
 80275e8:	3103      	adds	r1, #3
 80275ea:	1b49      	subs	r1, r1, r5
 80275ec:	0889      	lsrs	r1, r1, #2
 80275ee:	0088      	lsls	r0, r1, #2
 80275f0:	181b      	adds	r3, r3, r0
 80275f2:	3b04      	subs	r3, #4
 80275f4:	6819      	ldr	r1, [r3, #0]
 80275f6:	2900      	cmp	r1, #0
 80275f8:	d010      	beq.n	802761c <__mdiff+0x11c>
 80275fa:	9b00      	ldr	r3, [sp, #0]
 80275fc:	6113      	str	r3, [r2, #16]
 80275fe:	e798      	b.n	8027532 <__mdiff+0x32>
 8027600:	4684      	mov	ip, r0
 8027602:	ce02      	ldmia	r6!, {r1}
 8027604:	b288      	uxth	r0, r1
 8027606:	4460      	add	r0, ip
 8027608:	1400      	asrs	r0, r0, #16
 802760a:	0c0c      	lsrs	r4, r1, #16
 802760c:	1904      	adds	r4, r0, r4
 802760e:	4461      	add	r1, ip
 8027610:	1420      	asrs	r0, r4, #16
 8027612:	b289      	uxth	r1, r1
 8027614:	0424      	lsls	r4, r4, #16
 8027616:	4321      	orrs	r1, r4
 8027618:	c702      	stmia	r7!, {r1}
 802761a:	e7dc      	b.n	80275d6 <__mdiff+0xd6>
 802761c:	9900      	ldr	r1, [sp, #0]
 802761e:	3901      	subs	r1, #1
 8027620:	9100      	str	r1, [sp, #0]
 8027622:	e7e6      	b.n	80275f2 <__mdiff+0xf2>
 8027624:	0802e24a 	.word	0x0802e24a
 8027628:	0802e2bb 	.word	0x0802e2bb
 802762c:	00000237 	.word	0x00000237
 8027630:	00000245 	.word	0x00000245

08027634 <__ulp>:
 8027634:	b510      	push	{r4, lr}
 8027636:	2400      	movs	r4, #0
 8027638:	4b0c      	ldr	r3, [pc, #48]	@ (802766c <__ulp+0x38>)
 802763a:	4a0d      	ldr	r2, [pc, #52]	@ (8027670 <__ulp+0x3c>)
 802763c:	400b      	ands	r3, r1
 802763e:	189b      	adds	r3, r3, r2
 8027640:	42a3      	cmp	r3, r4
 8027642:	dc06      	bgt.n	8027652 <__ulp+0x1e>
 8027644:	425b      	negs	r3, r3
 8027646:	151a      	asrs	r2, r3, #20
 8027648:	2a13      	cmp	r2, #19
 802764a:	dc05      	bgt.n	8027658 <__ulp+0x24>
 802764c:	2380      	movs	r3, #128	@ 0x80
 802764e:	031b      	lsls	r3, r3, #12
 8027650:	4113      	asrs	r3, r2
 8027652:	0019      	movs	r1, r3
 8027654:	0020      	movs	r0, r4
 8027656:	bd10      	pop	{r4, pc}
 8027658:	3a14      	subs	r2, #20
 802765a:	2401      	movs	r4, #1
 802765c:	2a1e      	cmp	r2, #30
 802765e:	dc02      	bgt.n	8027666 <__ulp+0x32>
 8027660:	2480      	movs	r4, #128	@ 0x80
 8027662:	0624      	lsls	r4, r4, #24
 8027664:	40d4      	lsrs	r4, r2
 8027666:	2300      	movs	r3, #0
 8027668:	e7f3      	b.n	8027652 <__ulp+0x1e>
 802766a:	46c0      	nop			@ (mov r8, r8)
 802766c:	7ff00000 	.word	0x7ff00000
 8027670:	fcc00000 	.word	0xfcc00000

08027674 <__b2d>:
 8027674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027676:	0006      	movs	r6, r0
 8027678:	6903      	ldr	r3, [r0, #16]
 802767a:	3614      	adds	r6, #20
 802767c:	009b      	lsls	r3, r3, #2
 802767e:	18f3      	adds	r3, r6, r3
 8027680:	1f1d      	subs	r5, r3, #4
 8027682:	682c      	ldr	r4, [r5, #0]
 8027684:	000f      	movs	r7, r1
 8027686:	0020      	movs	r0, r4
 8027688:	9301      	str	r3, [sp, #4]
 802768a:	f7ff fd43 	bl	8027114 <__hi0bits>
 802768e:	2220      	movs	r2, #32
 8027690:	1a12      	subs	r2, r2, r0
 8027692:	603a      	str	r2, [r7, #0]
 8027694:	0003      	movs	r3, r0
 8027696:	4a1c      	ldr	r2, [pc, #112]	@ (8027708 <__b2d+0x94>)
 8027698:	280a      	cmp	r0, #10
 802769a:	dc15      	bgt.n	80276c8 <__b2d+0x54>
 802769c:	210b      	movs	r1, #11
 802769e:	0027      	movs	r7, r4
 80276a0:	1a09      	subs	r1, r1, r0
 80276a2:	40cf      	lsrs	r7, r1
 80276a4:	433a      	orrs	r2, r7
 80276a6:	468c      	mov	ip, r1
 80276a8:	0011      	movs	r1, r2
 80276aa:	2200      	movs	r2, #0
 80276ac:	42ae      	cmp	r6, r5
 80276ae:	d202      	bcs.n	80276b6 <__b2d+0x42>
 80276b0:	9a01      	ldr	r2, [sp, #4]
 80276b2:	3a08      	subs	r2, #8
 80276b4:	6812      	ldr	r2, [r2, #0]
 80276b6:	3315      	adds	r3, #21
 80276b8:	409c      	lsls	r4, r3
 80276ba:	4663      	mov	r3, ip
 80276bc:	0027      	movs	r7, r4
 80276be:	40da      	lsrs	r2, r3
 80276c0:	4317      	orrs	r7, r2
 80276c2:	0038      	movs	r0, r7
 80276c4:	b003      	add	sp, #12
 80276c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80276c8:	2700      	movs	r7, #0
 80276ca:	42ae      	cmp	r6, r5
 80276cc:	d202      	bcs.n	80276d4 <__b2d+0x60>
 80276ce:	9d01      	ldr	r5, [sp, #4]
 80276d0:	3d08      	subs	r5, #8
 80276d2:	682f      	ldr	r7, [r5, #0]
 80276d4:	210b      	movs	r1, #11
 80276d6:	4249      	negs	r1, r1
 80276d8:	468c      	mov	ip, r1
 80276da:	449c      	add	ip, r3
 80276dc:	2b0b      	cmp	r3, #11
 80276de:	d010      	beq.n	8027702 <__b2d+0x8e>
 80276e0:	4661      	mov	r1, ip
 80276e2:	2320      	movs	r3, #32
 80276e4:	408c      	lsls	r4, r1
 80276e6:	1a5b      	subs	r3, r3, r1
 80276e8:	0039      	movs	r1, r7
 80276ea:	40d9      	lsrs	r1, r3
 80276ec:	430c      	orrs	r4, r1
 80276ee:	4322      	orrs	r2, r4
 80276f0:	0011      	movs	r1, r2
 80276f2:	2200      	movs	r2, #0
 80276f4:	42b5      	cmp	r5, r6
 80276f6:	d901      	bls.n	80276fc <__b2d+0x88>
 80276f8:	3d04      	subs	r5, #4
 80276fa:	682a      	ldr	r2, [r5, #0]
 80276fc:	4664      	mov	r4, ip
 80276fe:	40a7      	lsls	r7, r4
 8027700:	e7dd      	b.n	80276be <__b2d+0x4a>
 8027702:	4322      	orrs	r2, r4
 8027704:	0011      	movs	r1, r2
 8027706:	e7dc      	b.n	80276c2 <__b2d+0x4e>
 8027708:	3ff00000 	.word	0x3ff00000

0802770c <__d2b>:
 802770c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802770e:	2101      	movs	r1, #1
 8027710:	0016      	movs	r6, r2
 8027712:	001f      	movs	r7, r3
 8027714:	f7ff fc06 	bl	8026f24 <_Balloc>
 8027718:	1e04      	subs	r4, r0, #0
 802771a:	d105      	bne.n	8027728 <__d2b+0x1c>
 802771c:	0022      	movs	r2, r4
 802771e:	4b25      	ldr	r3, [pc, #148]	@ (80277b4 <__d2b+0xa8>)
 8027720:	4825      	ldr	r0, [pc, #148]	@ (80277b8 <__d2b+0xac>)
 8027722:	4926      	ldr	r1, [pc, #152]	@ (80277bc <__d2b+0xb0>)
 8027724:	f000 fcd6 	bl	80280d4 <__assert_func>
 8027728:	033b      	lsls	r3, r7, #12
 802772a:	007d      	lsls	r5, r7, #1
 802772c:	0b1b      	lsrs	r3, r3, #12
 802772e:	0d6d      	lsrs	r5, r5, #21
 8027730:	d002      	beq.n	8027738 <__d2b+0x2c>
 8027732:	2280      	movs	r2, #128	@ 0x80
 8027734:	0352      	lsls	r2, r2, #13
 8027736:	4313      	orrs	r3, r2
 8027738:	9301      	str	r3, [sp, #4]
 802773a:	2e00      	cmp	r6, #0
 802773c:	d025      	beq.n	802778a <__d2b+0x7e>
 802773e:	4668      	mov	r0, sp
 8027740:	9600      	str	r6, [sp, #0]
 8027742:	f7ff fd08 	bl	8027156 <__lo0bits>
 8027746:	9b01      	ldr	r3, [sp, #4]
 8027748:	9900      	ldr	r1, [sp, #0]
 802774a:	2800      	cmp	r0, #0
 802774c:	d01b      	beq.n	8027786 <__d2b+0x7a>
 802774e:	2220      	movs	r2, #32
 8027750:	001e      	movs	r6, r3
 8027752:	1a12      	subs	r2, r2, r0
 8027754:	4096      	lsls	r6, r2
 8027756:	0032      	movs	r2, r6
 8027758:	40c3      	lsrs	r3, r0
 802775a:	430a      	orrs	r2, r1
 802775c:	6162      	str	r2, [r4, #20]
 802775e:	9301      	str	r3, [sp, #4]
 8027760:	9e01      	ldr	r6, [sp, #4]
 8027762:	61a6      	str	r6, [r4, #24]
 8027764:	1e73      	subs	r3, r6, #1
 8027766:	419e      	sbcs	r6, r3
 8027768:	3601      	adds	r6, #1
 802776a:	6126      	str	r6, [r4, #16]
 802776c:	2d00      	cmp	r5, #0
 802776e:	d014      	beq.n	802779a <__d2b+0x8e>
 8027770:	2635      	movs	r6, #53	@ 0x35
 8027772:	4b13      	ldr	r3, [pc, #76]	@ (80277c0 <__d2b+0xb4>)
 8027774:	18ed      	adds	r5, r5, r3
 8027776:	9b08      	ldr	r3, [sp, #32]
 8027778:	182d      	adds	r5, r5, r0
 802777a:	601d      	str	r5, [r3, #0]
 802777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802777e:	1a36      	subs	r6, r6, r0
 8027780:	601e      	str	r6, [r3, #0]
 8027782:	0020      	movs	r0, r4
 8027784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027786:	6161      	str	r1, [r4, #20]
 8027788:	e7ea      	b.n	8027760 <__d2b+0x54>
 802778a:	a801      	add	r0, sp, #4
 802778c:	f7ff fce3 	bl	8027156 <__lo0bits>
 8027790:	9b01      	ldr	r3, [sp, #4]
 8027792:	2601      	movs	r6, #1
 8027794:	6163      	str	r3, [r4, #20]
 8027796:	3020      	adds	r0, #32
 8027798:	e7e7      	b.n	802776a <__d2b+0x5e>
 802779a:	4b0a      	ldr	r3, [pc, #40]	@ (80277c4 <__d2b+0xb8>)
 802779c:	18c0      	adds	r0, r0, r3
 802779e:	9b08      	ldr	r3, [sp, #32]
 80277a0:	6018      	str	r0, [r3, #0]
 80277a2:	4b09      	ldr	r3, [pc, #36]	@ (80277c8 <__d2b+0xbc>)
 80277a4:	18f3      	adds	r3, r6, r3
 80277a6:	009b      	lsls	r3, r3, #2
 80277a8:	18e3      	adds	r3, r4, r3
 80277aa:	6958      	ldr	r0, [r3, #20]
 80277ac:	f7ff fcb2 	bl	8027114 <__hi0bits>
 80277b0:	0176      	lsls	r6, r6, #5
 80277b2:	e7e3      	b.n	802777c <__d2b+0x70>
 80277b4:	0802e24a 	.word	0x0802e24a
 80277b8:	0802e2bb 	.word	0x0802e2bb
 80277bc:	0000030f 	.word	0x0000030f
 80277c0:	fffffbcd 	.word	0xfffffbcd
 80277c4:	fffffbce 	.word	0xfffffbce
 80277c8:	3fffffff 	.word	0x3fffffff

080277cc <__ratio>:
 80277cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80277ce:	b087      	sub	sp, #28
 80277d0:	000f      	movs	r7, r1
 80277d2:	a904      	add	r1, sp, #16
 80277d4:	0006      	movs	r6, r0
 80277d6:	f7ff ff4d 	bl	8027674 <__b2d>
 80277da:	9000      	str	r0, [sp, #0]
 80277dc:	9101      	str	r1, [sp, #4]
 80277de:	9b00      	ldr	r3, [sp, #0]
 80277e0:	9c01      	ldr	r4, [sp, #4]
 80277e2:	0038      	movs	r0, r7
 80277e4:	a905      	add	r1, sp, #20
 80277e6:	9302      	str	r3, [sp, #8]
 80277e8:	9403      	str	r4, [sp, #12]
 80277ea:	f7ff ff43 	bl	8027674 <__b2d>
 80277ee:	000d      	movs	r5, r1
 80277f0:	0002      	movs	r2, r0
 80277f2:	000b      	movs	r3, r1
 80277f4:	6930      	ldr	r0, [r6, #16]
 80277f6:	6939      	ldr	r1, [r7, #16]
 80277f8:	9e04      	ldr	r6, [sp, #16]
 80277fa:	1a40      	subs	r0, r0, r1
 80277fc:	9905      	ldr	r1, [sp, #20]
 80277fe:	0140      	lsls	r0, r0, #5
 8027800:	1a71      	subs	r1, r6, r1
 8027802:	1841      	adds	r1, r0, r1
 8027804:	0508      	lsls	r0, r1, #20
 8027806:	2900      	cmp	r1, #0
 8027808:	dd08      	ble.n	802781c <__ratio+0x50>
 802780a:	9901      	ldr	r1, [sp, #4]
 802780c:	1841      	adds	r1, r0, r1
 802780e:	9103      	str	r1, [sp, #12]
 8027810:	9802      	ldr	r0, [sp, #8]
 8027812:	9903      	ldr	r1, [sp, #12]
 8027814:	f7da fc64 	bl	80020e0 <__aeabi_ddiv>
 8027818:	b007      	add	sp, #28
 802781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802781c:	1a2b      	subs	r3, r5, r0
 802781e:	e7f7      	b.n	8027810 <__ratio+0x44>

08027820 <__copybits>:
 8027820:	b570      	push	{r4, r5, r6, lr}
 8027822:	0014      	movs	r4, r2
 8027824:	0005      	movs	r5, r0
 8027826:	3901      	subs	r1, #1
 8027828:	6913      	ldr	r3, [r2, #16]
 802782a:	1149      	asrs	r1, r1, #5
 802782c:	3101      	adds	r1, #1
 802782e:	0089      	lsls	r1, r1, #2
 8027830:	3414      	adds	r4, #20
 8027832:	009b      	lsls	r3, r3, #2
 8027834:	1841      	adds	r1, r0, r1
 8027836:	18e3      	adds	r3, r4, r3
 8027838:	42a3      	cmp	r3, r4
 802783a:	d80d      	bhi.n	8027858 <__copybits+0x38>
 802783c:	0014      	movs	r4, r2
 802783e:	3411      	adds	r4, #17
 8027840:	2500      	movs	r5, #0
 8027842:	42a3      	cmp	r3, r4
 8027844:	d303      	bcc.n	802784e <__copybits+0x2e>
 8027846:	1a9b      	subs	r3, r3, r2
 8027848:	3b11      	subs	r3, #17
 802784a:	089b      	lsrs	r3, r3, #2
 802784c:	009d      	lsls	r5, r3, #2
 802784e:	2300      	movs	r3, #0
 8027850:	1940      	adds	r0, r0, r5
 8027852:	4281      	cmp	r1, r0
 8027854:	d803      	bhi.n	802785e <__copybits+0x3e>
 8027856:	bd70      	pop	{r4, r5, r6, pc}
 8027858:	cc40      	ldmia	r4!, {r6}
 802785a:	c540      	stmia	r5!, {r6}
 802785c:	e7ec      	b.n	8027838 <__copybits+0x18>
 802785e:	c008      	stmia	r0!, {r3}
 8027860:	e7f7      	b.n	8027852 <__copybits+0x32>

08027862 <__any_on>:
 8027862:	0002      	movs	r2, r0
 8027864:	6900      	ldr	r0, [r0, #16]
 8027866:	b510      	push	{r4, lr}
 8027868:	3214      	adds	r2, #20
 802786a:	114b      	asrs	r3, r1, #5
 802786c:	4298      	cmp	r0, r3
 802786e:	db13      	blt.n	8027898 <__any_on+0x36>
 8027870:	dd0c      	ble.n	802788c <__any_on+0x2a>
 8027872:	241f      	movs	r4, #31
 8027874:	0008      	movs	r0, r1
 8027876:	4020      	ands	r0, r4
 8027878:	4221      	tst	r1, r4
 802787a:	d007      	beq.n	802788c <__any_on+0x2a>
 802787c:	0099      	lsls	r1, r3, #2
 802787e:	588c      	ldr	r4, [r1, r2]
 8027880:	0021      	movs	r1, r4
 8027882:	40c1      	lsrs	r1, r0
 8027884:	4081      	lsls	r1, r0
 8027886:	2001      	movs	r0, #1
 8027888:	428c      	cmp	r4, r1
 802788a:	d104      	bne.n	8027896 <__any_on+0x34>
 802788c:	009b      	lsls	r3, r3, #2
 802788e:	18d3      	adds	r3, r2, r3
 8027890:	4293      	cmp	r3, r2
 8027892:	d803      	bhi.n	802789c <__any_on+0x3a>
 8027894:	2000      	movs	r0, #0
 8027896:	bd10      	pop	{r4, pc}
 8027898:	0003      	movs	r3, r0
 802789a:	e7f7      	b.n	802788c <__any_on+0x2a>
 802789c:	3b04      	subs	r3, #4
 802789e:	6819      	ldr	r1, [r3, #0]
 80278a0:	2900      	cmp	r1, #0
 80278a2:	d0f5      	beq.n	8027890 <__any_on+0x2e>
 80278a4:	2001      	movs	r0, #1
 80278a6:	e7f6      	b.n	8027896 <__any_on+0x34>

080278a8 <__ascii_wctomb>:
 80278a8:	0003      	movs	r3, r0
 80278aa:	1e08      	subs	r0, r1, #0
 80278ac:	d005      	beq.n	80278ba <__ascii_wctomb+0x12>
 80278ae:	2aff      	cmp	r2, #255	@ 0xff
 80278b0:	d904      	bls.n	80278bc <__ascii_wctomb+0x14>
 80278b2:	228a      	movs	r2, #138	@ 0x8a
 80278b4:	2001      	movs	r0, #1
 80278b6:	601a      	str	r2, [r3, #0]
 80278b8:	4240      	negs	r0, r0
 80278ba:	4770      	bx	lr
 80278bc:	2001      	movs	r0, #1
 80278be:	700a      	strb	r2, [r1, #0]
 80278c0:	e7fb      	b.n	80278ba <__ascii_wctomb+0x12>
	...

080278c4 <__ssputs_r>:
 80278c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278c6:	688e      	ldr	r6, [r1, #8]
 80278c8:	b085      	sub	sp, #20
 80278ca:	001f      	movs	r7, r3
 80278cc:	000c      	movs	r4, r1
 80278ce:	680b      	ldr	r3, [r1, #0]
 80278d0:	9002      	str	r0, [sp, #8]
 80278d2:	9203      	str	r2, [sp, #12]
 80278d4:	42be      	cmp	r6, r7
 80278d6:	d830      	bhi.n	802793a <__ssputs_r+0x76>
 80278d8:	210c      	movs	r1, #12
 80278da:	5e62      	ldrsh	r2, [r4, r1]
 80278dc:	2190      	movs	r1, #144	@ 0x90
 80278de:	00c9      	lsls	r1, r1, #3
 80278e0:	420a      	tst	r2, r1
 80278e2:	d028      	beq.n	8027936 <__ssputs_r+0x72>
 80278e4:	2003      	movs	r0, #3
 80278e6:	6921      	ldr	r1, [r4, #16]
 80278e8:	1a5b      	subs	r3, r3, r1
 80278ea:	9301      	str	r3, [sp, #4]
 80278ec:	6963      	ldr	r3, [r4, #20]
 80278ee:	4343      	muls	r3, r0
 80278f0:	9801      	ldr	r0, [sp, #4]
 80278f2:	0fdd      	lsrs	r5, r3, #31
 80278f4:	18ed      	adds	r5, r5, r3
 80278f6:	1c7b      	adds	r3, r7, #1
 80278f8:	181b      	adds	r3, r3, r0
 80278fa:	106d      	asrs	r5, r5, #1
 80278fc:	42ab      	cmp	r3, r5
 80278fe:	d900      	bls.n	8027902 <__ssputs_r+0x3e>
 8027900:	001d      	movs	r5, r3
 8027902:	0552      	lsls	r2, r2, #21
 8027904:	d528      	bpl.n	8027958 <__ssputs_r+0x94>
 8027906:	0029      	movs	r1, r5
 8027908:	9802      	ldr	r0, [sp, #8]
 802790a:	f7ff fa69 	bl	8026de0 <_malloc_r>
 802790e:	1e06      	subs	r6, r0, #0
 8027910:	d02c      	beq.n	802796c <__ssputs_r+0xa8>
 8027912:	9a01      	ldr	r2, [sp, #4]
 8027914:	6921      	ldr	r1, [r4, #16]
 8027916:	f7fe f80d 	bl	8025934 <memcpy>
 802791a:	89a2      	ldrh	r2, [r4, #12]
 802791c:	4b18      	ldr	r3, [pc, #96]	@ (8027980 <__ssputs_r+0xbc>)
 802791e:	401a      	ands	r2, r3
 8027920:	2380      	movs	r3, #128	@ 0x80
 8027922:	4313      	orrs	r3, r2
 8027924:	81a3      	strh	r3, [r4, #12]
 8027926:	9b01      	ldr	r3, [sp, #4]
 8027928:	6126      	str	r6, [r4, #16]
 802792a:	18f6      	adds	r6, r6, r3
 802792c:	6026      	str	r6, [r4, #0]
 802792e:	003e      	movs	r6, r7
 8027930:	6165      	str	r5, [r4, #20]
 8027932:	1aed      	subs	r5, r5, r3
 8027934:	60a5      	str	r5, [r4, #8]
 8027936:	42be      	cmp	r6, r7
 8027938:	d900      	bls.n	802793c <__ssputs_r+0x78>
 802793a:	003e      	movs	r6, r7
 802793c:	0032      	movs	r2, r6
 802793e:	9903      	ldr	r1, [sp, #12]
 8027940:	6820      	ldr	r0, [r4, #0]
 8027942:	f000 fb7e 	bl	8028042 <memmove>
 8027946:	2000      	movs	r0, #0
 8027948:	68a3      	ldr	r3, [r4, #8]
 802794a:	1b9b      	subs	r3, r3, r6
 802794c:	60a3      	str	r3, [r4, #8]
 802794e:	6823      	ldr	r3, [r4, #0]
 8027950:	199b      	adds	r3, r3, r6
 8027952:	6023      	str	r3, [r4, #0]
 8027954:	b005      	add	sp, #20
 8027956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027958:	002a      	movs	r2, r5
 802795a:	9802      	ldr	r0, [sp, #8]
 802795c:	f000 fc05 	bl	802816a <_realloc_r>
 8027960:	1e06      	subs	r6, r0, #0
 8027962:	d1e0      	bne.n	8027926 <__ssputs_r+0x62>
 8027964:	6921      	ldr	r1, [r4, #16]
 8027966:	9802      	ldr	r0, [sp, #8]
 8027968:	f7fe fe6a 	bl	8026640 <_free_r>
 802796c:	230c      	movs	r3, #12
 802796e:	2001      	movs	r0, #1
 8027970:	9a02      	ldr	r2, [sp, #8]
 8027972:	4240      	negs	r0, r0
 8027974:	6013      	str	r3, [r2, #0]
 8027976:	89a2      	ldrh	r2, [r4, #12]
 8027978:	3334      	adds	r3, #52	@ 0x34
 802797a:	4313      	orrs	r3, r2
 802797c:	81a3      	strh	r3, [r4, #12]
 802797e:	e7e9      	b.n	8027954 <__ssputs_r+0x90>
 8027980:	fffffb7f 	.word	0xfffffb7f

08027984 <_svfiprintf_r>:
 8027984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027986:	b0a1      	sub	sp, #132	@ 0x84
 8027988:	9003      	str	r0, [sp, #12]
 802798a:	001d      	movs	r5, r3
 802798c:	898b      	ldrh	r3, [r1, #12]
 802798e:	000f      	movs	r7, r1
 8027990:	0016      	movs	r6, r2
 8027992:	061b      	lsls	r3, r3, #24
 8027994:	d511      	bpl.n	80279ba <_svfiprintf_r+0x36>
 8027996:	690b      	ldr	r3, [r1, #16]
 8027998:	2b00      	cmp	r3, #0
 802799a:	d10e      	bne.n	80279ba <_svfiprintf_r+0x36>
 802799c:	2140      	movs	r1, #64	@ 0x40
 802799e:	f7ff fa1f 	bl	8026de0 <_malloc_r>
 80279a2:	6038      	str	r0, [r7, #0]
 80279a4:	6138      	str	r0, [r7, #16]
 80279a6:	2800      	cmp	r0, #0
 80279a8:	d105      	bne.n	80279b6 <_svfiprintf_r+0x32>
 80279aa:	230c      	movs	r3, #12
 80279ac:	9a03      	ldr	r2, [sp, #12]
 80279ae:	6013      	str	r3, [r2, #0]
 80279b0:	2001      	movs	r0, #1
 80279b2:	4240      	negs	r0, r0
 80279b4:	e0cf      	b.n	8027b56 <_svfiprintf_r+0x1d2>
 80279b6:	2340      	movs	r3, #64	@ 0x40
 80279b8:	617b      	str	r3, [r7, #20]
 80279ba:	2300      	movs	r3, #0
 80279bc:	ac08      	add	r4, sp, #32
 80279be:	6163      	str	r3, [r4, #20]
 80279c0:	3320      	adds	r3, #32
 80279c2:	7663      	strb	r3, [r4, #25]
 80279c4:	3310      	adds	r3, #16
 80279c6:	76a3      	strb	r3, [r4, #26]
 80279c8:	9507      	str	r5, [sp, #28]
 80279ca:	0035      	movs	r5, r6
 80279cc:	782b      	ldrb	r3, [r5, #0]
 80279ce:	2b00      	cmp	r3, #0
 80279d0:	d001      	beq.n	80279d6 <_svfiprintf_r+0x52>
 80279d2:	2b25      	cmp	r3, #37	@ 0x25
 80279d4:	d148      	bne.n	8027a68 <_svfiprintf_r+0xe4>
 80279d6:	1bab      	subs	r3, r5, r6
 80279d8:	9305      	str	r3, [sp, #20]
 80279da:	42b5      	cmp	r5, r6
 80279dc:	d00b      	beq.n	80279f6 <_svfiprintf_r+0x72>
 80279de:	0032      	movs	r2, r6
 80279e0:	0039      	movs	r1, r7
 80279e2:	9803      	ldr	r0, [sp, #12]
 80279e4:	f7ff ff6e 	bl	80278c4 <__ssputs_r>
 80279e8:	3001      	adds	r0, #1
 80279ea:	d100      	bne.n	80279ee <_svfiprintf_r+0x6a>
 80279ec:	e0ae      	b.n	8027b4c <_svfiprintf_r+0x1c8>
 80279ee:	6963      	ldr	r3, [r4, #20]
 80279f0:	9a05      	ldr	r2, [sp, #20]
 80279f2:	189b      	adds	r3, r3, r2
 80279f4:	6163      	str	r3, [r4, #20]
 80279f6:	782b      	ldrb	r3, [r5, #0]
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	d100      	bne.n	80279fe <_svfiprintf_r+0x7a>
 80279fc:	e0a6      	b.n	8027b4c <_svfiprintf_r+0x1c8>
 80279fe:	2201      	movs	r2, #1
 8027a00:	2300      	movs	r3, #0
 8027a02:	4252      	negs	r2, r2
 8027a04:	6062      	str	r2, [r4, #4]
 8027a06:	a904      	add	r1, sp, #16
 8027a08:	3254      	adds	r2, #84	@ 0x54
 8027a0a:	1852      	adds	r2, r2, r1
 8027a0c:	1c6e      	adds	r6, r5, #1
 8027a0e:	6023      	str	r3, [r4, #0]
 8027a10:	60e3      	str	r3, [r4, #12]
 8027a12:	60a3      	str	r3, [r4, #8]
 8027a14:	7013      	strb	r3, [r2, #0]
 8027a16:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027a18:	4b54      	ldr	r3, [pc, #336]	@ (8027b6c <_svfiprintf_r+0x1e8>)
 8027a1a:	2205      	movs	r2, #5
 8027a1c:	0018      	movs	r0, r3
 8027a1e:	7831      	ldrb	r1, [r6, #0]
 8027a20:	9305      	str	r3, [sp, #20]
 8027a22:	f7fd ff7c 	bl	802591e <memchr>
 8027a26:	1c75      	adds	r5, r6, #1
 8027a28:	2800      	cmp	r0, #0
 8027a2a:	d11f      	bne.n	8027a6c <_svfiprintf_r+0xe8>
 8027a2c:	6822      	ldr	r2, [r4, #0]
 8027a2e:	06d3      	lsls	r3, r2, #27
 8027a30:	d504      	bpl.n	8027a3c <_svfiprintf_r+0xb8>
 8027a32:	2353      	movs	r3, #83	@ 0x53
 8027a34:	a904      	add	r1, sp, #16
 8027a36:	185b      	adds	r3, r3, r1
 8027a38:	2120      	movs	r1, #32
 8027a3a:	7019      	strb	r1, [r3, #0]
 8027a3c:	0713      	lsls	r3, r2, #28
 8027a3e:	d504      	bpl.n	8027a4a <_svfiprintf_r+0xc6>
 8027a40:	2353      	movs	r3, #83	@ 0x53
 8027a42:	a904      	add	r1, sp, #16
 8027a44:	185b      	adds	r3, r3, r1
 8027a46:	212b      	movs	r1, #43	@ 0x2b
 8027a48:	7019      	strb	r1, [r3, #0]
 8027a4a:	7833      	ldrb	r3, [r6, #0]
 8027a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8027a4e:	d016      	beq.n	8027a7e <_svfiprintf_r+0xfa>
 8027a50:	0035      	movs	r5, r6
 8027a52:	2100      	movs	r1, #0
 8027a54:	200a      	movs	r0, #10
 8027a56:	68e3      	ldr	r3, [r4, #12]
 8027a58:	782a      	ldrb	r2, [r5, #0]
 8027a5a:	1c6e      	adds	r6, r5, #1
 8027a5c:	3a30      	subs	r2, #48	@ 0x30
 8027a5e:	2a09      	cmp	r2, #9
 8027a60:	d950      	bls.n	8027b04 <_svfiprintf_r+0x180>
 8027a62:	2900      	cmp	r1, #0
 8027a64:	d111      	bne.n	8027a8a <_svfiprintf_r+0x106>
 8027a66:	e017      	b.n	8027a98 <_svfiprintf_r+0x114>
 8027a68:	3501      	adds	r5, #1
 8027a6a:	e7af      	b.n	80279cc <_svfiprintf_r+0x48>
 8027a6c:	9b05      	ldr	r3, [sp, #20]
 8027a6e:	6822      	ldr	r2, [r4, #0]
 8027a70:	1ac0      	subs	r0, r0, r3
 8027a72:	2301      	movs	r3, #1
 8027a74:	4083      	lsls	r3, r0
 8027a76:	4313      	orrs	r3, r2
 8027a78:	002e      	movs	r6, r5
 8027a7a:	6023      	str	r3, [r4, #0]
 8027a7c:	e7cc      	b.n	8027a18 <_svfiprintf_r+0x94>
 8027a7e:	9b07      	ldr	r3, [sp, #28]
 8027a80:	1d19      	adds	r1, r3, #4
 8027a82:	681b      	ldr	r3, [r3, #0]
 8027a84:	9107      	str	r1, [sp, #28]
 8027a86:	2b00      	cmp	r3, #0
 8027a88:	db01      	blt.n	8027a8e <_svfiprintf_r+0x10a>
 8027a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027a8c:	e004      	b.n	8027a98 <_svfiprintf_r+0x114>
 8027a8e:	425b      	negs	r3, r3
 8027a90:	60e3      	str	r3, [r4, #12]
 8027a92:	2302      	movs	r3, #2
 8027a94:	4313      	orrs	r3, r2
 8027a96:	6023      	str	r3, [r4, #0]
 8027a98:	782b      	ldrb	r3, [r5, #0]
 8027a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8027a9c:	d10c      	bne.n	8027ab8 <_svfiprintf_r+0x134>
 8027a9e:	786b      	ldrb	r3, [r5, #1]
 8027aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8027aa2:	d134      	bne.n	8027b0e <_svfiprintf_r+0x18a>
 8027aa4:	9b07      	ldr	r3, [sp, #28]
 8027aa6:	3502      	adds	r5, #2
 8027aa8:	1d1a      	adds	r2, r3, #4
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	9207      	str	r2, [sp, #28]
 8027aae:	2b00      	cmp	r3, #0
 8027ab0:	da01      	bge.n	8027ab6 <_svfiprintf_r+0x132>
 8027ab2:	2301      	movs	r3, #1
 8027ab4:	425b      	negs	r3, r3
 8027ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ab8:	4e2d      	ldr	r6, [pc, #180]	@ (8027b70 <_svfiprintf_r+0x1ec>)
 8027aba:	2203      	movs	r2, #3
 8027abc:	0030      	movs	r0, r6
 8027abe:	7829      	ldrb	r1, [r5, #0]
 8027ac0:	f7fd ff2d 	bl	802591e <memchr>
 8027ac4:	2800      	cmp	r0, #0
 8027ac6:	d006      	beq.n	8027ad6 <_svfiprintf_r+0x152>
 8027ac8:	2340      	movs	r3, #64	@ 0x40
 8027aca:	1b80      	subs	r0, r0, r6
 8027acc:	4083      	lsls	r3, r0
 8027ace:	6822      	ldr	r2, [r4, #0]
 8027ad0:	3501      	adds	r5, #1
 8027ad2:	4313      	orrs	r3, r2
 8027ad4:	6023      	str	r3, [r4, #0]
 8027ad6:	7829      	ldrb	r1, [r5, #0]
 8027ad8:	2206      	movs	r2, #6
 8027ada:	4826      	ldr	r0, [pc, #152]	@ (8027b74 <_svfiprintf_r+0x1f0>)
 8027adc:	1c6e      	adds	r6, r5, #1
 8027ade:	7621      	strb	r1, [r4, #24]
 8027ae0:	f7fd ff1d 	bl	802591e <memchr>
 8027ae4:	2800      	cmp	r0, #0
 8027ae6:	d038      	beq.n	8027b5a <_svfiprintf_r+0x1d6>
 8027ae8:	4b23      	ldr	r3, [pc, #140]	@ (8027b78 <_svfiprintf_r+0x1f4>)
 8027aea:	2b00      	cmp	r3, #0
 8027aec:	d122      	bne.n	8027b34 <_svfiprintf_r+0x1b0>
 8027aee:	2207      	movs	r2, #7
 8027af0:	9b07      	ldr	r3, [sp, #28]
 8027af2:	3307      	adds	r3, #7
 8027af4:	4393      	bics	r3, r2
 8027af6:	3308      	adds	r3, #8
 8027af8:	9307      	str	r3, [sp, #28]
 8027afa:	6963      	ldr	r3, [r4, #20]
 8027afc:	9a04      	ldr	r2, [sp, #16]
 8027afe:	189b      	adds	r3, r3, r2
 8027b00:	6163      	str	r3, [r4, #20]
 8027b02:	e762      	b.n	80279ca <_svfiprintf_r+0x46>
 8027b04:	4343      	muls	r3, r0
 8027b06:	0035      	movs	r5, r6
 8027b08:	2101      	movs	r1, #1
 8027b0a:	189b      	adds	r3, r3, r2
 8027b0c:	e7a4      	b.n	8027a58 <_svfiprintf_r+0xd4>
 8027b0e:	2300      	movs	r3, #0
 8027b10:	200a      	movs	r0, #10
 8027b12:	0019      	movs	r1, r3
 8027b14:	3501      	adds	r5, #1
 8027b16:	6063      	str	r3, [r4, #4]
 8027b18:	782a      	ldrb	r2, [r5, #0]
 8027b1a:	1c6e      	adds	r6, r5, #1
 8027b1c:	3a30      	subs	r2, #48	@ 0x30
 8027b1e:	2a09      	cmp	r2, #9
 8027b20:	d903      	bls.n	8027b2a <_svfiprintf_r+0x1a6>
 8027b22:	2b00      	cmp	r3, #0
 8027b24:	d0c8      	beq.n	8027ab8 <_svfiprintf_r+0x134>
 8027b26:	9109      	str	r1, [sp, #36]	@ 0x24
 8027b28:	e7c6      	b.n	8027ab8 <_svfiprintf_r+0x134>
 8027b2a:	4341      	muls	r1, r0
 8027b2c:	0035      	movs	r5, r6
 8027b2e:	2301      	movs	r3, #1
 8027b30:	1889      	adds	r1, r1, r2
 8027b32:	e7f1      	b.n	8027b18 <_svfiprintf_r+0x194>
 8027b34:	aa07      	add	r2, sp, #28
 8027b36:	9200      	str	r2, [sp, #0]
 8027b38:	0021      	movs	r1, r4
 8027b3a:	003a      	movs	r2, r7
 8027b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8027b7c <_svfiprintf_r+0x1f8>)
 8027b3e:	9803      	ldr	r0, [sp, #12]
 8027b40:	f7fc ffc4 	bl	8024acc <_printf_float>
 8027b44:	9004      	str	r0, [sp, #16]
 8027b46:	9b04      	ldr	r3, [sp, #16]
 8027b48:	3301      	adds	r3, #1
 8027b4a:	d1d6      	bne.n	8027afa <_svfiprintf_r+0x176>
 8027b4c:	89bb      	ldrh	r3, [r7, #12]
 8027b4e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027b50:	065b      	lsls	r3, r3, #25
 8027b52:	d500      	bpl.n	8027b56 <_svfiprintf_r+0x1d2>
 8027b54:	e72c      	b.n	80279b0 <_svfiprintf_r+0x2c>
 8027b56:	b021      	add	sp, #132	@ 0x84
 8027b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b5a:	aa07      	add	r2, sp, #28
 8027b5c:	9200      	str	r2, [sp, #0]
 8027b5e:	0021      	movs	r1, r4
 8027b60:	003a      	movs	r2, r7
 8027b62:	4b06      	ldr	r3, [pc, #24]	@ (8027b7c <_svfiprintf_r+0x1f8>)
 8027b64:	9803      	ldr	r0, [sp, #12]
 8027b66:	f7fd fa5f 	bl	8025028 <_printf_i>
 8027b6a:	e7eb      	b.n	8027b44 <_svfiprintf_r+0x1c0>
 8027b6c:	0802e314 	.word	0x0802e314
 8027b70:	0802e31a 	.word	0x0802e31a
 8027b74:	0802e31e 	.word	0x0802e31e
 8027b78:	08024acd 	.word	0x08024acd
 8027b7c:	080278c5 	.word	0x080278c5

08027b80 <__sfputc_r>:
 8027b80:	6893      	ldr	r3, [r2, #8]
 8027b82:	b510      	push	{r4, lr}
 8027b84:	3b01      	subs	r3, #1
 8027b86:	6093      	str	r3, [r2, #8]
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	da04      	bge.n	8027b96 <__sfputc_r+0x16>
 8027b8c:	6994      	ldr	r4, [r2, #24]
 8027b8e:	42a3      	cmp	r3, r4
 8027b90:	db07      	blt.n	8027ba2 <__sfputc_r+0x22>
 8027b92:	290a      	cmp	r1, #10
 8027b94:	d005      	beq.n	8027ba2 <__sfputc_r+0x22>
 8027b96:	6813      	ldr	r3, [r2, #0]
 8027b98:	1c58      	adds	r0, r3, #1
 8027b9a:	6010      	str	r0, [r2, #0]
 8027b9c:	7019      	strb	r1, [r3, #0]
 8027b9e:	0008      	movs	r0, r1
 8027ba0:	bd10      	pop	{r4, pc}
 8027ba2:	f7fd fd4b 	bl	802563c <__swbuf_r>
 8027ba6:	0001      	movs	r1, r0
 8027ba8:	e7f9      	b.n	8027b9e <__sfputc_r+0x1e>

08027baa <__sfputs_r>:
 8027baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027bac:	0006      	movs	r6, r0
 8027bae:	000f      	movs	r7, r1
 8027bb0:	0014      	movs	r4, r2
 8027bb2:	18d5      	adds	r5, r2, r3
 8027bb4:	42ac      	cmp	r4, r5
 8027bb6:	d101      	bne.n	8027bbc <__sfputs_r+0x12>
 8027bb8:	2000      	movs	r0, #0
 8027bba:	e007      	b.n	8027bcc <__sfputs_r+0x22>
 8027bbc:	7821      	ldrb	r1, [r4, #0]
 8027bbe:	003a      	movs	r2, r7
 8027bc0:	0030      	movs	r0, r6
 8027bc2:	f7ff ffdd 	bl	8027b80 <__sfputc_r>
 8027bc6:	3401      	adds	r4, #1
 8027bc8:	1c43      	adds	r3, r0, #1
 8027bca:	d1f3      	bne.n	8027bb4 <__sfputs_r+0xa>
 8027bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027bd0 <_vfiprintf_r>:
 8027bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027bd2:	b0a1      	sub	sp, #132	@ 0x84
 8027bd4:	000f      	movs	r7, r1
 8027bd6:	0015      	movs	r5, r2
 8027bd8:	001e      	movs	r6, r3
 8027bda:	9003      	str	r0, [sp, #12]
 8027bdc:	2800      	cmp	r0, #0
 8027bde:	d004      	beq.n	8027bea <_vfiprintf_r+0x1a>
 8027be0:	6a03      	ldr	r3, [r0, #32]
 8027be2:	2b00      	cmp	r3, #0
 8027be4:	d101      	bne.n	8027bea <_vfiprintf_r+0x1a>
 8027be6:	f7fd fbbb 	bl	8025360 <__sinit>
 8027bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027bec:	07db      	lsls	r3, r3, #31
 8027bee:	d405      	bmi.n	8027bfc <_vfiprintf_r+0x2c>
 8027bf0:	89bb      	ldrh	r3, [r7, #12]
 8027bf2:	059b      	lsls	r3, r3, #22
 8027bf4:	d402      	bmi.n	8027bfc <_vfiprintf_r+0x2c>
 8027bf6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027bf8:	f7fd fe8f 	bl	802591a <__retarget_lock_acquire_recursive>
 8027bfc:	89bb      	ldrh	r3, [r7, #12]
 8027bfe:	071b      	lsls	r3, r3, #28
 8027c00:	d502      	bpl.n	8027c08 <_vfiprintf_r+0x38>
 8027c02:	693b      	ldr	r3, [r7, #16]
 8027c04:	2b00      	cmp	r3, #0
 8027c06:	d113      	bne.n	8027c30 <_vfiprintf_r+0x60>
 8027c08:	0039      	movs	r1, r7
 8027c0a:	9803      	ldr	r0, [sp, #12]
 8027c0c:	f7fd fd58 	bl	80256c0 <__swsetup_r>
 8027c10:	2800      	cmp	r0, #0
 8027c12:	d00d      	beq.n	8027c30 <_vfiprintf_r+0x60>
 8027c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027c16:	07db      	lsls	r3, r3, #31
 8027c18:	d503      	bpl.n	8027c22 <_vfiprintf_r+0x52>
 8027c1a:	2001      	movs	r0, #1
 8027c1c:	4240      	negs	r0, r0
 8027c1e:	b021      	add	sp, #132	@ 0x84
 8027c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027c22:	89bb      	ldrh	r3, [r7, #12]
 8027c24:	059b      	lsls	r3, r3, #22
 8027c26:	d4f8      	bmi.n	8027c1a <_vfiprintf_r+0x4a>
 8027c28:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027c2a:	f7fd fe77 	bl	802591c <__retarget_lock_release_recursive>
 8027c2e:	e7f4      	b.n	8027c1a <_vfiprintf_r+0x4a>
 8027c30:	2300      	movs	r3, #0
 8027c32:	ac08      	add	r4, sp, #32
 8027c34:	6163      	str	r3, [r4, #20]
 8027c36:	3320      	adds	r3, #32
 8027c38:	7663      	strb	r3, [r4, #25]
 8027c3a:	3310      	adds	r3, #16
 8027c3c:	76a3      	strb	r3, [r4, #26]
 8027c3e:	9607      	str	r6, [sp, #28]
 8027c40:	002e      	movs	r6, r5
 8027c42:	7833      	ldrb	r3, [r6, #0]
 8027c44:	2b00      	cmp	r3, #0
 8027c46:	d001      	beq.n	8027c4c <_vfiprintf_r+0x7c>
 8027c48:	2b25      	cmp	r3, #37	@ 0x25
 8027c4a:	d148      	bne.n	8027cde <_vfiprintf_r+0x10e>
 8027c4c:	1b73      	subs	r3, r6, r5
 8027c4e:	9305      	str	r3, [sp, #20]
 8027c50:	42ae      	cmp	r6, r5
 8027c52:	d00b      	beq.n	8027c6c <_vfiprintf_r+0x9c>
 8027c54:	002a      	movs	r2, r5
 8027c56:	0039      	movs	r1, r7
 8027c58:	9803      	ldr	r0, [sp, #12]
 8027c5a:	f7ff ffa6 	bl	8027baa <__sfputs_r>
 8027c5e:	3001      	adds	r0, #1
 8027c60:	d100      	bne.n	8027c64 <_vfiprintf_r+0x94>
 8027c62:	e0ae      	b.n	8027dc2 <_vfiprintf_r+0x1f2>
 8027c64:	6963      	ldr	r3, [r4, #20]
 8027c66:	9a05      	ldr	r2, [sp, #20]
 8027c68:	189b      	adds	r3, r3, r2
 8027c6a:	6163      	str	r3, [r4, #20]
 8027c6c:	7833      	ldrb	r3, [r6, #0]
 8027c6e:	2b00      	cmp	r3, #0
 8027c70:	d100      	bne.n	8027c74 <_vfiprintf_r+0xa4>
 8027c72:	e0a6      	b.n	8027dc2 <_vfiprintf_r+0x1f2>
 8027c74:	2201      	movs	r2, #1
 8027c76:	2300      	movs	r3, #0
 8027c78:	4252      	negs	r2, r2
 8027c7a:	6062      	str	r2, [r4, #4]
 8027c7c:	a904      	add	r1, sp, #16
 8027c7e:	3254      	adds	r2, #84	@ 0x54
 8027c80:	1852      	adds	r2, r2, r1
 8027c82:	1c75      	adds	r5, r6, #1
 8027c84:	6023      	str	r3, [r4, #0]
 8027c86:	60e3      	str	r3, [r4, #12]
 8027c88:	60a3      	str	r3, [r4, #8]
 8027c8a:	7013      	strb	r3, [r2, #0]
 8027c8c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027c8e:	4b59      	ldr	r3, [pc, #356]	@ (8027df4 <_vfiprintf_r+0x224>)
 8027c90:	2205      	movs	r2, #5
 8027c92:	0018      	movs	r0, r3
 8027c94:	7829      	ldrb	r1, [r5, #0]
 8027c96:	9305      	str	r3, [sp, #20]
 8027c98:	f7fd fe41 	bl	802591e <memchr>
 8027c9c:	1c6e      	adds	r6, r5, #1
 8027c9e:	2800      	cmp	r0, #0
 8027ca0:	d11f      	bne.n	8027ce2 <_vfiprintf_r+0x112>
 8027ca2:	6822      	ldr	r2, [r4, #0]
 8027ca4:	06d3      	lsls	r3, r2, #27
 8027ca6:	d504      	bpl.n	8027cb2 <_vfiprintf_r+0xe2>
 8027ca8:	2353      	movs	r3, #83	@ 0x53
 8027caa:	a904      	add	r1, sp, #16
 8027cac:	185b      	adds	r3, r3, r1
 8027cae:	2120      	movs	r1, #32
 8027cb0:	7019      	strb	r1, [r3, #0]
 8027cb2:	0713      	lsls	r3, r2, #28
 8027cb4:	d504      	bpl.n	8027cc0 <_vfiprintf_r+0xf0>
 8027cb6:	2353      	movs	r3, #83	@ 0x53
 8027cb8:	a904      	add	r1, sp, #16
 8027cba:	185b      	adds	r3, r3, r1
 8027cbc:	212b      	movs	r1, #43	@ 0x2b
 8027cbe:	7019      	strb	r1, [r3, #0]
 8027cc0:	782b      	ldrb	r3, [r5, #0]
 8027cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8027cc4:	d016      	beq.n	8027cf4 <_vfiprintf_r+0x124>
 8027cc6:	002e      	movs	r6, r5
 8027cc8:	2100      	movs	r1, #0
 8027cca:	200a      	movs	r0, #10
 8027ccc:	68e3      	ldr	r3, [r4, #12]
 8027cce:	7832      	ldrb	r2, [r6, #0]
 8027cd0:	1c75      	adds	r5, r6, #1
 8027cd2:	3a30      	subs	r2, #48	@ 0x30
 8027cd4:	2a09      	cmp	r2, #9
 8027cd6:	d950      	bls.n	8027d7a <_vfiprintf_r+0x1aa>
 8027cd8:	2900      	cmp	r1, #0
 8027cda:	d111      	bne.n	8027d00 <_vfiprintf_r+0x130>
 8027cdc:	e017      	b.n	8027d0e <_vfiprintf_r+0x13e>
 8027cde:	3601      	adds	r6, #1
 8027ce0:	e7af      	b.n	8027c42 <_vfiprintf_r+0x72>
 8027ce2:	9b05      	ldr	r3, [sp, #20]
 8027ce4:	6822      	ldr	r2, [r4, #0]
 8027ce6:	1ac0      	subs	r0, r0, r3
 8027ce8:	2301      	movs	r3, #1
 8027cea:	4083      	lsls	r3, r0
 8027cec:	4313      	orrs	r3, r2
 8027cee:	0035      	movs	r5, r6
 8027cf0:	6023      	str	r3, [r4, #0]
 8027cf2:	e7cc      	b.n	8027c8e <_vfiprintf_r+0xbe>
 8027cf4:	9b07      	ldr	r3, [sp, #28]
 8027cf6:	1d19      	adds	r1, r3, #4
 8027cf8:	681b      	ldr	r3, [r3, #0]
 8027cfa:	9107      	str	r1, [sp, #28]
 8027cfc:	2b00      	cmp	r3, #0
 8027cfe:	db01      	blt.n	8027d04 <_vfiprintf_r+0x134>
 8027d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027d02:	e004      	b.n	8027d0e <_vfiprintf_r+0x13e>
 8027d04:	425b      	negs	r3, r3
 8027d06:	60e3      	str	r3, [r4, #12]
 8027d08:	2302      	movs	r3, #2
 8027d0a:	4313      	orrs	r3, r2
 8027d0c:	6023      	str	r3, [r4, #0]
 8027d0e:	7833      	ldrb	r3, [r6, #0]
 8027d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8027d12:	d10c      	bne.n	8027d2e <_vfiprintf_r+0x15e>
 8027d14:	7873      	ldrb	r3, [r6, #1]
 8027d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8027d18:	d134      	bne.n	8027d84 <_vfiprintf_r+0x1b4>
 8027d1a:	9b07      	ldr	r3, [sp, #28]
 8027d1c:	3602      	adds	r6, #2
 8027d1e:	1d1a      	adds	r2, r3, #4
 8027d20:	681b      	ldr	r3, [r3, #0]
 8027d22:	9207      	str	r2, [sp, #28]
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	da01      	bge.n	8027d2c <_vfiprintf_r+0x15c>
 8027d28:	2301      	movs	r3, #1
 8027d2a:	425b      	negs	r3, r3
 8027d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d2e:	4d32      	ldr	r5, [pc, #200]	@ (8027df8 <_vfiprintf_r+0x228>)
 8027d30:	2203      	movs	r2, #3
 8027d32:	0028      	movs	r0, r5
 8027d34:	7831      	ldrb	r1, [r6, #0]
 8027d36:	f7fd fdf2 	bl	802591e <memchr>
 8027d3a:	2800      	cmp	r0, #0
 8027d3c:	d006      	beq.n	8027d4c <_vfiprintf_r+0x17c>
 8027d3e:	2340      	movs	r3, #64	@ 0x40
 8027d40:	1b40      	subs	r0, r0, r5
 8027d42:	4083      	lsls	r3, r0
 8027d44:	6822      	ldr	r2, [r4, #0]
 8027d46:	3601      	adds	r6, #1
 8027d48:	4313      	orrs	r3, r2
 8027d4a:	6023      	str	r3, [r4, #0]
 8027d4c:	7831      	ldrb	r1, [r6, #0]
 8027d4e:	2206      	movs	r2, #6
 8027d50:	482a      	ldr	r0, [pc, #168]	@ (8027dfc <_vfiprintf_r+0x22c>)
 8027d52:	1c75      	adds	r5, r6, #1
 8027d54:	7621      	strb	r1, [r4, #24]
 8027d56:	f7fd fde2 	bl	802591e <memchr>
 8027d5a:	2800      	cmp	r0, #0
 8027d5c:	d040      	beq.n	8027de0 <_vfiprintf_r+0x210>
 8027d5e:	4b28      	ldr	r3, [pc, #160]	@ (8027e00 <_vfiprintf_r+0x230>)
 8027d60:	2b00      	cmp	r3, #0
 8027d62:	d122      	bne.n	8027daa <_vfiprintf_r+0x1da>
 8027d64:	2207      	movs	r2, #7
 8027d66:	9b07      	ldr	r3, [sp, #28]
 8027d68:	3307      	adds	r3, #7
 8027d6a:	4393      	bics	r3, r2
 8027d6c:	3308      	adds	r3, #8
 8027d6e:	9307      	str	r3, [sp, #28]
 8027d70:	6963      	ldr	r3, [r4, #20]
 8027d72:	9a04      	ldr	r2, [sp, #16]
 8027d74:	189b      	adds	r3, r3, r2
 8027d76:	6163      	str	r3, [r4, #20]
 8027d78:	e762      	b.n	8027c40 <_vfiprintf_r+0x70>
 8027d7a:	4343      	muls	r3, r0
 8027d7c:	002e      	movs	r6, r5
 8027d7e:	2101      	movs	r1, #1
 8027d80:	189b      	adds	r3, r3, r2
 8027d82:	e7a4      	b.n	8027cce <_vfiprintf_r+0xfe>
 8027d84:	2300      	movs	r3, #0
 8027d86:	200a      	movs	r0, #10
 8027d88:	0019      	movs	r1, r3
 8027d8a:	3601      	adds	r6, #1
 8027d8c:	6063      	str	r3, [r4, #4]
 8027d8e:	7832      	ldrb	r2, [r6, #0]
 8027d90:	1c75      	adds	r5, r6, #1
 8027d92:	3a30      	subs	r2, #48	@ 0x30
 8027d94:	2a09      	cmp	r2, #9
 8027d96:	d903      	bls.n	8027da0 <_vfiprintf_r+0x1d0>
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	d0c8      	beq.n	8027d2e <_vfiprintf_r+0x15e>
 8027d9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8027d9e:	e7c6      	b.n	8027d2e <_vfiprintf_r+0x15e>
 8027da0:	4341      	muls	r1, r0
 8027da2:	002e      	movs	r6, r5
 8027da4:	2301      	movs	r3, #1
 8027da6:	1889      	adds	r1, r1, r2
 8027da8:	e7f1      	b.n	8027d8e <_vfiprintf_r+0x1be>
 8027daa:	aa07      	add	r2, sp, #28
 8027dac:	9200      	str	r2, [sp, #0]
 8027dae:	0021      	movs	r1, r4
 8027db0:	003a      	movs	r2, r7
 8027db2:	4b14      	ldr	r3, [pc, #80]	@ (8027e04 <_vfiprintf_r+0x234>)
 8027db4:	9803      	ldr	r0, [sp, #12]
 8027db6:	f7fc fe89 	bl	8024acc <_printf_float>
 8027dba:	9004      	str	r0, [sp, #16]
 8027dbc:	9b04      	ldr	r3, [sp, #16]
 8027dbe:	3301      	adds	r3, #1
 8027dc0:	d1d6      	bne.n	8027d70 <_vfiprintf_r+0x1a0>
 8027dc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027dc4:	07db      	lsls	r3, r3, #31
 8027dc6:	d405      	bmi.n	8027dd4 <_vfiprintf_r+0x204>
 8027dc8:	89bb      	ldrh	r3, [r7, #12]
 8027dca:	059b      	lsls	r3, r3, #22
 8027dcc:	d402      	bmi.n	8027dd4 <_vfiprintf_r+0x204>
 8027dce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027dd0:	f7fd fda4 	bl	802591c <__retarget_lock_release_recursive>
 8027dd4:	89bb      	ldrh	r3, [r7, #12]
 8027dd6:	065b      	lsls	r3, r3, #25
 8027dd8:	d500      	bpl.n	8027ddc <_vfiprintf_r+0x20c>
 8027dda:	e71e      	b.n	8027c1a <_vfiprintf_r+0x4a>
 8027ddc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027dde:	e71e      	b.n	8027c1e <_vfiprintf_r+0x4e>
 8027de0:	aa07      	add	r2, sp, #28
 8027de2:	9200      	str	r2, [sp, #0]
 8027de4:	0021      	movs	r1, r4
 8027de6:	003a      	movs	r2, r7
 8027de8:	4b06      	ldr	r3, [pc, #24]	@ (8027e04 <_vfiprintf_r+0x234>)
 8027dea:	9803      	ldr	r0, [sp, #12]
 8027dec:	f7fd f91c 	bl	8025028 <_printf_i>
 8027df0:	e7e3      	b.n	8027dba <_vfiprintf_r+0x1ea>
 8027df2:	46c0      	nop			@ (mov r8, r8)
 8027df4:	0802e314 	.word	0x0802e314
 8027df8:	0802e31a 	.word	0x0802e31a
 8027dfc:	0802e31e 	.word	0x0802e31e
 8027e00:	08024acd 	.word	0x08024acd
 8027e04:	08027bab 	.word	0x08027bab

08027e08 <__sflush_r>:
 8027e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027e0a:	220c      	movs	r2, #12
 8027e0c:	5e8b      	ldrsh	r3, [r1, r2]
 8027e0e:	0005      	movs	r5, r0
 8027e10:	000c      	movs	r4, r1
 8027e12:	071a      	lsls	r2, r3, #28
 8027e14:	d456      	bmi.n	8027ec4 <__sflush_r+0xbc>
 8027e16:	684a      	ldr	r2, [r1, #4]
 8027e18:	2a00      	cmp	r2, #0
 8027e1a:	dc02      	bgt.n	8027e22 <__sflush_r+0x1a>
 8027e1c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8027e1e:	2a00      	cmp	r2, #0
 8027e20:	dd4e      	ble.n	8027ec0 <__sflush_r+0xb8>
 8027e22:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027e24:	2f00      	cmp	r7, #0
 8027e26:	d04b      	beq.n	8027ec0 <__sflush_r+0xb8>
 8027e28:	2200      	movs	r2, #0
 8027e2a:	2080      	movs	r0, #128	@ 0x80
 8027e2c:	682e      	ldr	r6, [r5, #0]
 8027e2e:	602a      	str	r2, [r5, #0]
 8027e30:	001a      	movs	r2, r3
 8027e32:	0140      	lsls	r0, r0, #5
 8027e34:	6a21      	ldr	r1, [r4, #32]
 8027e36:	4002      	ands	r2, r0
 8027e38:	4203      	tst	r3, r0
 8027e3a:	d033      	beq.n	8027ea4 <__sflush_r+0x9c>
 8027e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027e3e:	89a3      	ldrh	r3, [r4, #12]
 8027e40:	075b      	lsls	r3, r3, #29
 8027e42:	d506      	bpl.n	8027e52 <__sflush_r+0x4a>
 8027e44:	6863      	ldr	r3, [r4, #4]
 8027e46:	1ad2      	subs	r2, r2, r3
 8027e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027e4a:	2b00      	cmp	r3, #0
 8027e4c:	d001      	beq.n	8027e52 <__sflush_r+0x4a>
 8027e4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027e50:	1ad2      	subs	r2, r2, r3
 8027e52:	2300      	movs	r3, #0
 8027e54:	0028      	movs	r0, r5
 8027e56:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027e58:	6a21      	ldr	r1, [r4, #32]
 8027e5a:	47b8      	blx	r7
 8027e5c:	89a2      	ldrh	r2, [r4, #12]
 8027e5e:	1c43      	adds	r3, r0, #1
 8027e60:	d106      	bne.n	8027e70 <__sflush_r+0x68>
 8027e62:	6829      	ldr	r1, [r5, #0]
 8027e64:	291d      	cmp	r1, #29
 8027e66:	d846      	bhi.n	8027ef6 <__sflush_r+0xee>
 8027e68:	4b29      	ldr	r3, [pc, #164]	@ (8027f10 <__sflush_r+0x108>)
 8027e6a:	40cb      	lsrs	r3, r1
 8027e6c:	07db      	lsls	r3, r3, #31
 8027e6e:	d542      	bpl.n	8027ef6 <__sflush_r+0xee>
 8027e70:	2300      	movs	r3, #0
 8027e72:	6063      	str	r3, [r4, #4]
 8027e74:	6923      	ldr	r3, [r4, #16]
 8027e76:	6023      	str	r3, [r4, #0]
 8027e78:	04d2      	lsls	r2, r2, #19
 8027e7a:	d505      	bpl.n	8027e88 <__sflush_r+0x80>
 8027e7c:	1c43      	adds	r3, r0, #1
 8027e7e:	d102      	bne.n	8027e86 <__sflush_r+0x7e>
 8027e80:	682b      	ldr	r3, [r5, #0]
 8027e82:	2b00      	cmp	r3, #0
 8027e84:	d100      	bne.n	8027e88 <__sflush_r+0x80>
 8027e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8027e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027e8a:	602e      	str	r6, [r5, #0]
 8027e8c:	2900      	cmp	r1, #0
 8027e8e:	d017      	beq.n	8027ec0 <__sflush_r+0xb8>
 8027e90:	0023      	movs	r3, r4
 8027e92:	3344      	adds	r3, #68	@ 0x44
 8027e94:	4299      	cmp	r1, r3
 8027e96:	d002      	beq.n	8027e9e <__sflush_r+0x96>
 8027e98:	0028      	movs	r0, r5
 8027e9a:	f7fe fbd1 	bl	8026640 <_free_r>
 8027e9e:	2300      	movs	r3, #0
 8027ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8027ea2:	e00d      	b.n	8027ec0 <__sflush_r+0xb8>
 8027ea4:	2301      	movs	r3, #1
 8027ea6:	0028      	movs	r0, r5
 8027ea8:	47b8      	blx	r7
 8027eaa:	0002      	movs	r2, r0
 8027eac:	1c43      	adds	r3, r0, #1
 8027eae:	d1c6      	bne.n	8027e3e <__sflush_r+0x36>
 8027eb0:	682b      	ldr	r3, [r5, #0]
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d0c3      	beq.n	8027e3e <__sflush_r+0x36>
 8027eb6:	2b1d      	cmp	r3, #29
 8027eb8:	d001      	beq.n	8027ebe <__sflush_r+0xb6>
 8027eba:	2b16      	cmp	r3, #22
 8027ebc:	d11a      	bne.n	8027ef4 <__sflush_r+0xec>
 8027ebe:	602e      	str	r6, [r5, #0]
 8027ec0:	2000      	movs	r0, #0
 8027ec2:	e01e      	b.n	8027f02 <__sflush_r+0xfa>
 8027ec4:	690e      	ldr	r6, [r1, #16]
 8027ec6:	2e00      	cmp	r6, #0
 8027ec8:	d0fa      	beq.n	8027ec0 <__sflush_r+0xb8>
 8027eca:	680f      	ldr	r7, [r1, #0]
 8027ecc:	600e      	str	r6, [r1, #0]
 8027ece:	1bba      	subs	r2, r7, r6
 8027ed0:	9201      	str	r2, [sp, #4]
 8027ed2:	2200      	movs	r2, #0
 8027ed4:	079b      	lsls	r3, r3, #30
 8027ed6:	d100      	bne.n	8027eda <__sflush_r+0xd2>
 8027ed8:	694a      	ldr	r2, [r1, #20]
 8027eda:	60a2      	str	r2, [r4, #8]
 8027edc:	9b01      	ldr	r3, [sp, #4]
 8027ede:	2b00      	cmp	r3, #0
 8027ee0:	ddee      	ble.n	8027ec0 <__sflush_r+0xb8>
 8027ee2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027ee4:	0032      	movs	r2, r6
 8027ee6:	001f      	movs	r7, r3
 8027ee8:	0028      	movs	r0, r5
 8027eea:	9b01      	ldr	r3, [sp, #4]
 8027eec:	6a21      	ldr	r1, [r4, #32]
 8027eee:	47b8      	blx	r7
 8027ef0:	2800      	cmp	r0, #0
 8027ef2:	dc07      	bgt.n	8027f04 <__sflush_r+0xfc>
 8027ef4:	89a2      	ldrh	r2, [r4, #12]
 8027ef6:	2340      	movs	r3, #64	@ 0x40
 8027ef8:	2001      	movs	r0, #1
 8027efa:	4313      	orrs	r3, r2
 8027efc:	b21b      	sxth	r3, r3
 8027efe:	81a3      	strh	r3, [r4, #12]
 8027f00:	4240      	negs	r0, r0
 8027f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027f04:	9b01      	ldr	r3, [sp, #4]
 8027f06:	1836      	adds	r6, r6, r0
 8027f08:	1a1b      	subs	r3, r3, r0
 8027f0a:	9301      	str	r3, [sp, #4]
 8027f0c:	e7e6      	b.n	8027edc <__sflush_r+0xd4>
 8027f0e:	46c0      	nop			@ (mov r8, r8)
 8027f10:	20400001 	.word	0x20400001

08027f14 <_fflush_r>:
 8027f14:	690b      	ldr	r3, [r1, #16]
 8027f16:	b570      	push	{r4, r5, r6, lr}
 8027f18:	0005      	movs	r5, r0
 8027f1a:	000c      	movs	r4, r1
 8027f1c:	2b00      	cmp	r3, #0
 8027f1e:	d102      	bne.n	8027f26 <_fflush_r+0x12>
 8027f20:	2500      	movs	r5, #0
 8027f22:	0028      	movs	r0, r5
 8027f24:	bd70      	pop	{r4, r5, r6, pc}
 8027f26:	2800      	cmp	r0, #0
 8027f28:	d004      	beq.n	8027f34 <_fflush_r+0x20>
 8027f2a:	6a03      	ldr	r3, [r0, #32]
 8027f2c:	2b00      	cmp	r3, #0
 8027f2e:	d101      	bne.n	8027f34 <_fflush_r+0x20>
 8027f30:	f7fd fa16 	bl	8025360 <__sinit>
 8027f34:	220c      	movs	r2, #12
 8027f36:	5ea3      	ldrsh	r3, [r4, r2]
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d0f1      	beq.n	8027f20 <_fflush_r+0xc>
 8027f3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027f3e:	07d2      	lsls	r2, r2, #31
 8027f40:	d404      	bmi.n	8027f4c <_fflush_r+0x38>
 8027f42:	059b      	lsls	r3, r3, #22
 8027f44:	d402      	bmi.n	8027f4c <_fflush_r+0x38>
 8027f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027f48:	f7fd fce7 	bl	802591a <__retarget_lock_acquire_recursive>
 8027f4c:	0028      	movs	r0, r5
 8027f4e:	0021      	movs	r1, r4
 8027f50:	f7ff ff5a 	bl	8027e08 <__sflush_r>
 8027f54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027f56:	0005      	movs	r5, r0
 8027f58:	07db      	lsls	r3, r3, #31
 8027f5a:	d4e2      	bmi.n	8027f22 <_fflush_r+0xe>
 8027f5c:	89a3      	ldrh	r3, [r4, #12]
 8027f5e:	059b      	lsls	r3, r3, #22
 8027f60:	d4df      	bmi.n	8027f22 <_fflush_r+0xe>
 8027f62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027f64:	f7fd fcda 	bl	802591c <__retarget_lock_release_recursive>
 8027f68:	e7db      	b.n	8027f22 <_fflush_r+0xe>
	...

08027f6c <__swhatbuf_r>:
 8027f6c:	b570      	push	{r4, r5, r6, lr}
 8027f6e:	000e      	movs	r6, r1
 8027f70:	001d      	movs	r5, r3
 8027f72:	230e      	movs	r3, #14
 8027f74:	5ec9      	ldrsh	r1, [r1, r3]
 8027f76:	0014      	movs	r4, r2
 8027f78:	b096      	sub	sp, #88	@ 0x58
 8027f7a:	2900      	cmp	r1, #0
 8027f7c:	da0c      	bge.n	8027f98 <__swhatbuf_r+0x2c>
 8027f7e:	89b2      	ldrh	r2, [r6, #12]
 8027f80:	2380      	movs	r3, #128	@ 0x80
 8027f82:	0011      	movs	r1, r2
 8027f84:	4019      	ands	r1, r3
 8027f86:	421a      	tst	r2, r3
 8027f88:	d114      	bne.n	8027fb4 <__swhatbuf_r+0x48>
 8027f8a:	2380      	movs	r3, #128	@ 0x80
 8027f8c:	00db      	lsls	r3, r3, #3
 8027f8e:	2000      	movs	r0, #0
 8027f90:	6029      	str	r1, [r5, #0]
 8027f92:	6023      	str	r3, [r4, #0]
 8027f94:	b016      	add	sp, #88	@ 0x58
 8027f96:	bd70      	pop	{r4, r5, r6, pc}
 8027f98:	466a      	mov	r2, sp
 8027f9a:	f000 f865 	bl	8028068 <_fstat_r>
 8027f9e:	2800      	cmp	r0, #0
 8027fa0:	dbed      	blt.n	8027f7e <__swhatbuf_r+0x12>
 8027fa2:	23f0      	movs	r3, #240	@ 0xf0
 8027fa4:	9901      	ldr	r1, [sp, #4]
 8027fa6:	021b      	lsls	r3, r3, #8
 8027fa8:	4019      	ands	r1, r3
 8027faa:	4b04      	ldr	r3, [pc, #16]	@ (8027fbc <__swhatbuf_r+0x50>)
 8027fac:	18c9      	adds	r1, r1, r3
 8027fae:	424b      	negs	r3, r1
 8027fb0:	4159      	adcs	r1, r3
 8027fb2:	e7ea      	b.n	8027f8a <__swhatbuf_r+0x1e>
 8027fb4:	2100      	movs	r1, #0
 8027fb6:	2340      	movs	r3, #64	@ 0x40
 8027fb8:	e7e9      	b.n	8027f8e <__swhatbuf_r+0x22>
 8027fba:	46c0      	nop			@ (mov r8, r8)
 8027fbc:	ffffe000 	.word	0xffffe000

08027fc0 <__smakebuf_r>:
 8027fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027fc2:	2602      	movs	r6, #2
 8027fc4:	898b      	ldrh	r3, [r1, #12]
 8027fc6:	0005      	movs	r5, r0
 8027fc8:	000c      	movs	r4, r1
 8027fca:	b085      	sub	sp, #20
 8027fcc:	4233      	tst	r3, r6
 8027fce:	d007      	beq.n	8027fe0 <__smakebuf_r+0x20>
 8027fd0:	0023      	movs	r3, r4
 8027fd2:	3347      	adds	r3, #71	@ 0x47
 8027fd4:	6023      	str	r3, [r4, #0]
 8027fd6:	6123      	str	r3, [r4, #16]
 8027fd8:	2301      	movs	r3, #1
 8027fda:	6163      	str	r3, [r4, #20]
 8027fdc:	b005      	add	sp, #20
 8027fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027fe0:	ab03      	add	r3, sp, #12
 8027fe2:	aa02      	add	r2, sp, #8
 8027fe4:	f7ff ffc2 	bl	8027f6c <__swhatbuf_r>
 8027fe8:	9f02      	ldr	r7, [sp, #8]
 8027fea:	9001      	str	r0, [sp, #4]
 8027fec:	0039      	movs	r1, r7
 8027fee:	0028      	movs	r0, r5
 8027ff0:	f7fe fef6 	bl	8026de0 <_malloc_r>
 8027ff4:	2800      	cmp	r0, #0
 8027ff6:	d108      	bne.n	802800a <__smakebuf_r+0x4a>
 8027ff8:	220c      	movs	r2, #12
 8027ffa:	5ea3      	ldrsh	r3, [r4, r2]
 8027ffc:	059a      	lsls	r2, r3, #22
 8027ffe:	d4ed      	bmi.n	8027fdc <__smakebuf_r+0x1c>
 8028000:	2203      	movs	r2, #3
 8028002:	4393      	bics	r3, r2
 8028004:	431e      	orrs	r6, r3
 8028006:	81a6      	strh	r6, [r4, #12]
 8028008:	e7e2      	b.n	8027fd0 <__smakebuf_r+0x10>
 802800a:	2380      	movs	r3, #128	@ 0x80
 802800c:	89a2      	ldrh	r2, [r4, #12]
 802800e:	6020      	str	r0, [r4, #0]
 8028010:	4313      	orrs	r3, r2
 8028012:	81a3      	strh	r3, [r4, #12]
 8028014:	9b03      	ldr	r3, [sp, #12]
 8028016:	6120      	str	r0, [r4, #16]
 8028018:	6167      	str	r7, [r4, #20]
 802801a:	2b00      	cmp	r3, #0
 802801c:	d00c      	beq.n	8028038 <__smakebuf_r+0x78>
 802801e:	0028      	movs	r0, r5
 8028020:	230e      	movs	r3, #14
 8028022:	5ee1      	ldrsh	r1, [r4, r3]
 8028024:	f000 f832 	bl	802808c <_isatty_r>
 8028028:	2800      	cmp	r0, #0
 802802a:	d005      	beq.n	8028038 <__smakebuf_r+0x78>
 802802c:	2303      	movs	r3, #3
 802802e:	89a2      	ldrh	r2, [r4, #12]
 8028030:	439a      	bics	r2, r3
 8028032:	3b02      	subs	r3, #2
 8028034:	4313      	orrs	r3, r2
 8028036:	81a3      	strh	r3, [r4, #12]
 8028038:	89a3      	ldrh	r3, [r4, #12]
 802803a:	9a01      	ldr	r2, [sp, #4]
 802803c:	4313      	orrs	r3, r2
 802803e:	81a3      	strh	r3, [r4, #12]
 8028040:	e7cc      	b.n	8027fdc <__smakebuf_r+0x1c>

08028042 <memmove>:
 8028042:	b510      	push	{r4, lr}
 8028044:	4288      	cmp	r0, r1
 8028046:	d902      	bls.n	802804e <memmove+0xc>
 8028048:	188b      	adds	r3, r1, r2
 802804a:	4298      	cmp	r0, r3
 802804c:	d308      	bcc.n	8028060 <memmove+0x1e>
 802804e:	2300      	movs	r3, #0
 8028050:	429a      	cmp	r2, r3
 8028052:	d007      	beq.n	8028064 <memmove+0x22>
 8028054:	5ccc      	ldrb	r4, [r1, r3]
 8028056:	54c4      	strb	r4, [r0, r3]
 8028058:	3301      	adds	r3, #1
 802805a:	e7f9      	b.n	8028050 <memmove+0xe>
 802805c:	5c8b      	ldrb	r3, [r1, r2]
 802805e:	5483      	strb	r3, [r0, r2]
 8028060:	3a01      	subs	r2, #1
 8028062:	d2fb      	bcs.n	802805c <memmove+0x1a>
 8028064:	bd10      	pop	{r4, pc}
	...

08028068 <_fstat_r>:
 8028068:	2300      	movs	r3, #0
 802806a:	b570      	push	{r4, r5, r6, lr}
 802806c:	4d06      	ldr	r5, [pc, #24]	@ (8028088 <_fstat_r+0x20>)
 802806e:	0004      	movs	r4, r0
 8028070:	0008      	movs	r0, r1
 8028072:	0011      	movs	r1, r2
 8028074:	602b      	str	r3, [r5, #0]
 8028076:	f7ea fc39 	bl	80128ec <_fstat>
 802807a:	1c43      	adds	r3, r0, #1
 802807c:	d103      	bne.n	8028086 <_fstat_r+0x1e>
 802807e:	682b      	ldr	r3, [r5, #0]
 8028080:	2b00      	cmp	r3, #0
 8028082:	d000      	beq.n	8028086 <_fstat_r+0x1e>
 8028084:	6023      	str	r3, [r4, #0]
 8028086:	bd70      	pop	{r4, r5, r6, pc}
 8028088:	20003604 	.word	0x20003604

0802808c <_isatty_r>:
 802808c:	2300      	movs	r3, #0
 802808e:	b570      	push	{r4, r5, r6, lr}
 8028090:	4d06      	ldr	r5, [pc, #24]	@ (80280ac <_isatty_r+0x20>)
 8028092:	0004      	movs	r4, r0
 8028094:	0008      	movs	r0, r1
 8028096:	602b      	str	r3, [r5, #0]
 8028098:	f7ea fc36 	bl	8012908 <_isatty>
 802809c:	1c43      	adds	r3, r0, #1
 802809e:	d103      	bne.n	80280a8 <_isatty_r+0x1c>
 80280a0:	682b      	ldr	r3, [r5, #0]
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d000      	beq.n	80280a8 <_isatty_r+0x1c>
 80280a6:	6023      	str	r3, [r4, #0]
 80280a8:	bd70      	pop	{r4, r5, r6, pc}
 80280aa:	46c0      	nop			@ (mov r8, r8)
 80280ac:	20003604 	.word	0x20003604

080280b0 <_sbrk_r>:
 80280b0:	2300      	movs	r3, #0
 80280b2:	b570      	push	{r4, r5, r6, lr}
 80280b4:	4d06      	ldr	r5, [pc, #24]	@ (80280d0 <_sbrk_r+0x20>)
 80280b6:	0004      	movs	r4, r0
 80280b8:	0008      	movs	r0, r1
 80280ba:	602b      	str	r3, [r5, #0]
 80280bc:	f7ea fc38 	bl	8012930 <_sbrk>
 80280c0:	1c43      	adds	r3, r0, #1
 80280c2:	d103      	bne.n	80280cc <_sbrk_r+0x1c>
 80280c4:	682b      	ldr	r3, [r5, #0]
 80280c6:	2b00      	cmp	r3, #0
 80280c8:	d000      	beq.n	80280cc <_sbrk_r+0x1c>
 80280ca:	6023      	str	r3, [r4, #0]
 80280cc:	bd70      	pop	{r4, r5, r6, pc}
 80280ce:	46c0      	nop			@ (mov r8, r8)
 80280d0:	20003604 	.word	0x20003604

080280d4 <__assert_func>:
 80280d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80280d6:	0014      	movs	r4, r2
 80280d8:	001a      	movs	r2, r3
 80280da:	4b09      	ldr	r3, [pc, #36]	@ (8028100 <__assert_func+0x2c>)
 80280dc:	0005      	movs	r5, r0
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	000e      	movs	r6, r1
 80280e2:	68d8      	ldr	r0, [r3, #12]
 80280e4:	4b07      	ldr	r3, [pc, #28]	@ (8028104 <__assert_func+0x30>)
 80280e6:	2c00      	cmp	r4, #0
 80280e8:	d101      	bne.n	80280ee <__assert_func+0x1a>
 80280ea:	4b07      	ldr	r3, [pc, #28]	@ (8028108 <__assert_func+0x34>)
 80280ec:	001c      	movs	r4, r3
 80280ee:	4907      	ldr	r1, [pc, #28]	@ (802810c <__assert_func+0x38>)
 80280f0:	9301      	str	r3, [sp, #4]
 80280f2:	9402      	str	r4, [sp, #8]
 80280f4:	002b      	movs	r3, r5
 80280f6:	9600      	str	r6, [sp, #0]
 80280f8:	f000 f868 	bl	80281cc <fiprintf>
 80280fc:	f000 f876 	bl	80281ec <abort>
 8028100:	200003e0 	.word	0x200003e0
 8028104:	0802e325 	.word	0x0802e325
 8028108:	0802e360 	.word	0x0802e360
 802810c:	0802e332 	.word	0x0802e332

08028110 <_calloc_r>:
 8028110:	b570      	push	{r4, r5, r6, lr}
 8028112:	0c0b      	lsrs	r3, r1, #16
 8028114:	0c15      	lsrs	r5, r2, #16
 8028116:	2b00      	cmp	r3, #0
 8028118:	d11e      	bne.n	8028158 <_calloc_r+0x48>
 802811a:	2d00      	cmp	r5, #0
 802811c:	d10c      	bne.n	8028138 <_calloc_r+0x28>
 802811e:	b289      	uxth	r1, r1
 8028120:	b294      	uxth	r4, r2
 8028122:	434c      	muls	r4, r1
 8028124:	0021      	movs	r1, r4
 8028126:	f7fe fe5b 	bl	8026de0 <_malloc_r>
 802812a:	1e05      	subs	r5, r0, #0
 802812c:	d01b      	beq.n	8028166 <_calloc_r+0x56>
 802812e:	0022      	movs	r2, r4
 8028130:	2100      	movs	r1, #0
 8028132:	f7fd fb23 	bl	802577c <memset>
 8028136:	e016      	b.n	8028166 <_calloc_r+0x56>
 8028138:	1c2b      	adds	r3, r5, #0
 802813a:	1c0c      	adds	r4, r1, #0
 802813c:	b289      	uxth	r1, r1
 802813e:	b292      	uxth	r2, r2
 8028140:	434a      	muls	r2, r1
 8028142:	b29b      	uxth	r3, r3
 8028144:	b2a1      	uxth	r1, r4
 8028146:	4359      	muls	r1, r3
 8028148:	0c14      	lsrs	r4, r2, #16
 802814a:	190c      	adds	r4, r1, r4
 802814c:	0c23      	lsrs	r3, r4, #16
 802814e:	d107      	bne.n	8028160 <_calloc_r+0x50>
 8028150:	0424      	lsls	r4, r4, #16
 8028152:	b292      	uxth	r2, r2
 8028154:	4314      	orrs	r4, r2
 8028156:	e7e5      	b.n	8028124 <_calloc_r+0x14>
 8028158:	2d00      	cmp	r5, #0
 802815a:	d101      	bne.n	8028160 <_calloc_r+0x50>
 802815c:	1c14      	adds	r4, r2, #0
 802815e:	e7ed      	b.n	802813c <_calloc_r+0x2c>
 8028160:	230c      	movs	r3, #12
 8028162:	2500      	movs	r5, #0
 8028164:	6003      	str	r3, [r0, #0]
 8028166:	0028      	movs	r0, r5
 8028168:	bd70      	pop	{r4, r5, r6, pc}

0802816a <_realloc_r>:
 802816a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802816c:	0006      	movs	r6, r0
 802816e:	000c      	movs	r4, r1
 8028170:	0015      	movs	r5, r2
 8028172:	2900      	cmp	r1, #0
 8028174:	d105      	bne.n	8028182 <_realloc_r+0x18>
 8028176:	0011      	movs	r1, r2
 8028178:	f7fe fe32 	bl	8026de0 <_malloc_r>
 802817c:	0004      	movs	r4, r0
 802817e:	0020      	movs	r0, r4
 8028180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028182:	2a00      	cmp	r2, #0
 8028184:	d103      	bne.n	802818e <_realloc_r+0x24>
 8028186:	f7fe fa5b 	bl	8026640 <_free_r>
 802818a:	002c      	movs	r4, r5
 802818c:	e7f7      	b.n	802817e <_realloc_r+0x14>
 802818e:	f000 f834 	bl	80281fa <_malloc_usable_size_r>
 8028192:	0007      	movs	r7, r0
 8028194:	4285      	cmp	r5, r0
 8028196:	d802      	bhi.n	802819e <_realloc_r+0x34>
 8028198:	0843      	lsrs	r3, r0, #1
 802819a:	42ab      	cmp	r3, r5
 802819c:	d3ef      	bcc.n	802817e <_realloc_r+0x14>
 802819e:	0029      	movs	r1, r5
 80281a0:	0030      	movs	r0, r6
 80281a2:	f7fe fe1d 	bl	8026de0 <_malloc_r>
 80281a6:	9001      	str	r0, [sp, #4]
 80281a8:	2800      	cmp	r0, #0
 80281aa:	d101      	bne.n	80281b0 <_realloc_r+0x46>
 80281ac:	9c01      	ldr	r4, [sp, #4]
 80281ae:	e7e6      	b.n	802817e <_realloc_r+0x14>
 80281b0:	002a      	movs	r2, r5
 80281b2:	42bd      	cmp	r5, r7
 80281b4:	d900      	bls.n	80281b8 <_realloc_r+0x4e>
 80281b6:	003a      	movs	r2, r7
 80281b8:	0021      	movs	r1, r4
 80281ba:	9801      	ldr	r0, [sp, #4]
 80281bc:	f7fd fbba 	bl	8025934 <memcpy>
 80281c0:	0021      	movs	r1, r4
 80281c2:	0030      	movs	r0, r6
 80281c4:	f7fe fa3c 	bl	8026640 <_free_r>
 80281c8:	e7f0      	b.n	80281ac <_realloc_r+0x42>
	...

080281cc <fiprintf>:
 80281cc:	b40e      	push	{r1, r2, r3}
 80281ce:	b517      	push	{r0, r1, r2, r4, lr}
 80281d0:	4c05      	ldr	r4, [pc, #20]	@ (80281e8 <fiprintf+0x1c>)
 80281d2:	ab05      	add	r3, sp, #20
 80281d4:	cb04      	ldmia	r3!, {r2}
 80281d6:	0001      	movs	r1, r0
 80281d8:	6820      	ldr	r0, [r4, #0]
 80281da:	9301      	str	r3, [sp, #4]
 80281dc:	f7ff fcf8 	bl	8027bd0 <_vfiprintf_r>
 80281e0:	bc1e      	pop	{r1, r2, r3, r4}
 80281e2:	bc08      	pop	{r3}
 80281e4:	b003      	add	sp, #12
 80281e6:	4718      	bx	r3
 80281e8:	200003e0 	.word	0x200003e0

080281ec <abort>:
 80281ec:	2006      	movs	r0, #6
 80281ee:	b510      	push	{r4, lr}
 80281f0:	f000 f834 	bl	802825c <raise>
 80281f4:	2001      	movs	r0, #1
 80281f6:	f7ea fb45 	bl	8012884 <_exit>

080281fa <_malloc_usable_size_r>:
 80281fa:	1f0b      	subs	r3, r1, #4
 80281fc:	681b      	ldr	r3, [r3, #0]
 80281fe:	1f18      	subs	r0, r3, #4
 8028200:	2b00      	cmp	r3, #0
 8028202:	da01      	bge.n	8028208 <_malloc_usable_size_r+0xe>
 8028204:	580b      	ldr	r3, [r1, r0]
 8028206:	18c0      	adds	r0, r0, r3
 8028208:	4770      	bx	lr

0802820a <_raise_r>:
 802820a:	b570      	push	{r4, r5, r6, lr}
 802820c:	0004      	movs	r4, r0
 802820e:	000d      	movs	r5, r1
 8028210:	291f      	cmp	r1, #31
 8028212:	d904      	bls.n	802821e <_raise_r+0x14>
 8028214:	2316      	movs	r3, #22
 8028216:	6003      	str	r3, [r0, #0]
 8028218:	2001      	movs	r0, #1
 802821a:	4240      	negs	r0, r0
 802821c:	bd70      	pop	{r4, r5, r6, pc}
 802821e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028220:	2b00      	cmp	r3, #0
 8028222:	d004      	beq.n	802822e <_raise_r+0x24>
 8028224:	008a      	lsls	r2, r1, #2
 8028226:	189b      	adds	r3, r3, r2
 8028228:	681a      	ldr	r2, [r3, #0]
 802822a:	2a00      	cmp	r2, #0
 802822c:	d108      	bne.n	8028240 <_raise_r+0x36>
 802822e:	0020      	movs	r0, r4
 8028230:	f000 f830 	bl	8028294 <_getpid_r>
 8028234:	002a      	movs	r2, r5
 8028236:	0001      	movs	r1, r0
 8028238:	0020      	movs	r0, r4
 802823a:	f000 f819 	bl	8028270 <_kill_r>
 802823e:	e7ed      	b.n	802821c <_raise_r+0x12>
 8028240:	2a01      	cmp	r2, #1
 8028242:	d009      	beq.n	8028258 <_raise_r+0x4e>
 8028244:	1c51      	adds	r1, r2, #1
 8028246:	d103      	bne.n	8028250 <_raise_r+0x46>
 8028248:	2316      	movs	r3, #22
 802824a:	6003      	str	r3, [r0, #0]
 802824c:	2001      	movs	r0, #1
 802824e:	e7e5      	b.n	802821c <_raise_r+0x12>
 8028250:	2100      	movs	r1, #0
 8028252:	0028      	movs	r0, r5
 8028254:	6019      	str	r1, [r3, #0]
 8028256:	4790      	blx	r2
 8028258:	2000      	movs	r0, #0
 802825a:	e7df      	b.n	802821c <_raise_r+0x12>

0802825c <raise>:
 802825c:	b510      	push	{r4, lr}
 802825e:	4b03      	ldr	r3, [pc, #12]	@ (802826c <raise+0x10>)
 8028260:	0001      	movs	r1, r0
 8028262:	6818      	ldr	r0, [r3, #0]
 8028264:	f7ff ffd1 	bl	802820a <_raise_r>
 8028268:	bd10      	pop	{r4, pc}
 802826a:	46c0      	nop			@ (mov r8, r8)
 802826c:	200003e0 	.word	0x200003e0

08028270 <_kill_r>:
 8028270:	2300      	movs	r3, #0
 8028272:	b570      	push	{r4, r5, r6, lr}
 8028274:	4d06      	ldr	r5, [pc, #24]	@ (8028290 <_kill_r+0x20>)
 8028276:	0004      	movs	r4, r0
 8028278:	0008      	movs	r0, r1
 802827a:	0011      	movs	r1, r2
 802827c:	602b      	str	r3, [r5, #0]
 802827e:	f7ea faf1 	bl	8012864 <_kill>
 8028282:	1c43      	adds	r3, r0, #1
 8028284:	d103      	bne.n	802828e <_kill_r+0x1e>
 8028286:	682b      	ldr	r3, [r5, #0]
 8028288:	2b00      	cmp	r3, #0
 802828a:	d000      	beq.n	802828e <_kill_r+0x1e>
 802828c:	6023      	str	r3, [r4, #0]
 802828e:	bd70      	pop	{r4, r5, r6, pc}
 8028290:	20003604 	.word	0x20003604

08028294 <_getpid_r>:
 8028294:	b510      	push	{r4, lr}
 8028296:	f7ea fadf 	bl	8012858 <_getpid>
 802829a:	bd10      	pop	{r4, pc}

0802829c <log>:
 802829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802829e:	0004      	movs	r4, r0
 80282a0:	000d      	movs	r5, r1
 80282a2:	f000 f98d 	bl	80285c0 <__ieee754_log>
 80282a6:	0022      	movs	r2, r4
 80282a8:	0006      	movs	r6, r0
 80282aa:	000f      	movs	r7, r1
 80282ac:	002b      	movs	r3, r5
 80282ae:	0020      	movs	r0, r4
 80282b0:	0029      	movs	r1, r5
 80282b2:	f7db fa3f 	bl	8003734 <__aeabi_dcmpun>
 80282b6:	2800      	cmp	r0, #0
 80282b8:	d115      	bne.n	80282e6 <log+0x4a>
 80282ba:	2200      	movs	r2, #0
 80282bc:	2300      	movs	r3, #0
 80282be:	0020      	movs	r0, r4
 80282c0:	0029      	movs	r1, r5
 80282c2:	f7d8 f90f 	bl	80004e4 <__aeabi_dcmpgt>
 80282c6:	2800      	cmp	r0, #0
 80282c8:	d10d      	bne.n	80282e6 <log+0x4a>
 80282ca:	2200      	movs	r2, #0
 80282cc:	2300      	movs	r3, #0
 80282ce:	0020      	movs	r0, r4
 80282d0:	0029      	movs	r1, r5
 80282d2:	f7d8 f8ed 	bl	80004b0 <__aeabi_dcmpeq>
 80282d6:	2800      	cmp	r0, #0
 80282d8:	d008      	beq.n	80282ec <log+0x50>
 80282da:	f7fd faf3 	bl	80258c4 <__errno>
 80282de:	2322      	movs	r3, #34	@ 0x22
 80282e0:	2600      	movs	r6, #0
 80282e2:	4f07      	ldr	r7, [pc, #28]	@ (8028300 <log+0x64>)
 80282e4:	6003      	str	r3, [r0, #0]
 80282e6:	0030      	movs	r0, r6
 80282e8:	0039      	movs	r1, r7
 80282ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80282ec:	f7fd faea 	bl	80258c4 <__errno>
 80282f0:	2321      	movs	r3, #33	@ 0x21
 80282f2:	6003      	str	r3, [r0, #0]
 80282f4:	4803      	ldr	r0, [pc, #12]	@ (8028304 <log+0x68>)
 80282f6:	f7fd fb27 	bl	8025948 <nan>
 80282fa:	0006      	movs	r6, r0
 80282fc:	000f      	movs	r7, r1
 80282fe:	e7f2      	b.n	80282e6 <log+0x4a>
 8028300:	fff00000 	.word	0xfff00000
 8028304:	0802e360 	.word	0x0802e360

08028308 <pow>:
 8028308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802830a:	0014      	movs	r4, r2
 802830c:	001d      	movs	r5, r3
 802830e:	9000      	str	r0, [sp, #0]
 8028310:	9101      	str	r1, [sp, #4]
 8028312:	f000 fb07 	bl	8028924 <__ieee754_pow>
 8028316:	0022      	movs	r2, r4
 8028318:	0006      	movs	r6, r0
 802831a:	000f      	movs	r7, r1
 802831c:	002b      	movs	r3, r5
 802831e:	0020      	movs	r0, r4
 8028320:	0029      	movs	r1, r5
 8028322:	f7db fa07 	bl	8003734 <__aeabi_dcmpun>
 8028326:	2800      	cmp	r0, #0
 8028328:	d13f      	bne.n	80283aa <pow+0xa2>
 802832a:	9800      	ldr	r0, [sp, #0]
 802832c:	9901      	ldr	r1, [sp, #4]
 802832e:	2200      	movs	r2, #0
 8028330:	2300      	movs	r3, #0
 8028332:	f7d8 f8bd 	bl	80004b0 <__aeabi_dcmpeq>
 8028336:	2800      	cmp	r0, #0
 8028338:	d019      	beq.n	802836e <pow+0x66>
 802833a:	2200      	movs	r2, #0
 802833c:	2300      	movs	r3, #0
 802833e:	0020      	movs	r0, r4
 8028340:	0029      	movs	r1, r5
 8028342:	f7d8 f8b5 	bl	80004b0 <__aeabi_dcmpeq>
 8028346:	2800      	cmp	r0, #0
 8028348:	d146      	bne.n	80283d8 <pow+0xd0>
 802834a:	0020      	movs	r0, r4
 802834c:	0029      	movs	r1, r5
 802834e:	f000 f88d 	bl	802846c <finite>
 8028352:	2800      	cmp	r0, #0
 8028354:	d029      	beq.n	80283aa <pow+0xa2>
 8028356:	2200      	movs	r2, #0
 8028358:	2300      	movs	r3, #0
 802835a:	0020      	movs	r0, r4
 802835c:	0029      	movs	r1, r5
 802835e:	f7d8 f8ad 	bl	80004bc <__aeabi_dcmplt>
 8028362:	2800      	cmp	r0, #0
 8028364:	d021      	beq.n	80283aa <pow+0xa2>
 8028366:	f7fd faad 	bl	80258c4 <__errno>
 802836a:	2322      	movs	r3, #34	@ 0x22
 802836c:	e01c      	b.n	80283a8 <pow+0xa0>
 802836e:	0030      	movs	r0, r6
 8028370:	0039      	movs	r1, r7
 8028372:	f000 f87b 	bl	802846c <finite>
 8028376:	2800      	cmp	r0, #0
 8028378:	d11b      	bne.n	80283b2 <pow+0xaa>
 802837a:	9800      	ldr	r0, [sp, #0]
 802837c:	9901      	ldr	r1, [sp, #4]
 802837e:	f000 f875 	bl	802846c <finite>
 8028382:	2800      	cmp	r0, #0
 8028384:	d015      	beq.n	80283b2 <pow+0xaa>
 8028386:	0020      	movs	r0, r4
 8028388:	0029      	movs	r1, r5
 802838a:	f000 f86f 	bl	802846c <finite>
 802838e:	2800      	cmp	r0, #0
 8028390:	d00f      	beq.n	80283b2 <pow+0xaa>
 8028392:	0032      	movs	r2, r6
 8028394:	003b      	movs	r3, r7
 8028396:	0030      	movs	r0, r6
 8028398:	0039      	movs	r1, r7
 802839a:	f7db f9cb 	bl	8003734 <__aeabi_dcmpun>
 802839e:	2800      	cmp	r0, #0
 80283a0:	d0e1      	beq.n	8028366 <pow+0x5e>
 80283a2:	f7fd fa8f 	bl	80258c4 <__errno>
 80283a6:	2321      	movs	r3, #33	@ 0x21
 80283a8:	6003      	str	r3, [r0, #0]
 80283aa:	0030      	movs	r0, r6
 80283ac:	0039      	movs	r1, r7
 80283ae:	b003      	add	sp, #12
 80283b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283b2:	2200      	movs	r2, #0
 80283b4:	2300      	movs	r3, #0
 80283b6:	0030      	movs	r0, r6
 80283b8:	0039      	movs	r1, r7
 80283ba:	f7d8 f879 	bl	80004b0 <__aeabi_dcmpeq>
 80283be:	2800      	cmp	r0, #0
 80283c0:	d0f3      	beq.n	80283aa <pow+0xa2>
 80283c2:	9800      	ldr	r0, [sp, #0]
 80283c4:	9901      	ldr	r1, [sp, #4]
 80283c6:	f000 f851 	bl	802846c <finite>
 80283ca:	2800      	cmp	r0, #0
 80283cc:	d0ed      	beq.n	80283aa <pow+0xa2>
 80283ce:	0020      	movs	r0, r4
 80283d0:	0029      	movs	r1, r5
 80283d2:	f000 f84b 	bl	802846c <finite>
 80283d6:	e7c4      	b.n	8028362 <pow+0x5a>
 80283d8:	2600      	movs	r6, #0
 80283da:	4f01      	ldr	r7, [pc, #4]	@ (80283e0 <pow+0xd8>)
 80283dc:	e7e5      	b.n	80283aa <pow+0xa2>
 80283de:	46c0      	nop			@ (mov r8, r8)
 80283e0:	3ff00000 	.word	0x3ff00000

080283e4 <expf>:
 80283e4:	b570      	push	{r4, r5, r6, lr}
 80283e6:	1c04      	adds	r4, r0, #0
 80283e8:	f000 ffb8 	bl	802935c <__ieee754_expf>
 80283ec:	1c05      	adds	r5, r0, #0
 80283ee:	1c20      	adds	r0, r4, #0
 80283f0:	f000 f844 	bl	802847c <finitef>
 80283f4:	2800      	cmp	r0, #0
 80283f6:	d00b      	beq.n	8028410 <expf+0x2c>
 80283f8:	490c      	ldr	r1, [pc, #48]	@ (802842c <expf+0x48>)
 80283fa:	1c20      	adds	r0, r4, #0
 80283fc:	f7d8 f8ac 	bl	8000558 <__aeabi_fcmpgt>
 8028400:	2800      	cmp	r0, #0
 8028402:	d007      	beq.n	8028414 <expf+0x30>
 8028404:	f7fd fa5e 	bl	80258c4 <__errno>
 8028408:	25ff      	movs	r5, #255	@ 0xff
 802840a:	2322      	movs	r3, #34	@ 0x22
 802840c:	05ed      	lsls	r5, r5, #23
 802840e:	6003      	str	r3, [r0, #0]
 8028410:	1c28      	adds	r0, r5, #0
 8028412:	bd70      	pop	{r4, r5, r6, pc}
 8028414:	4906      	ldr	r1, [pc, #24]	@ (8028430 <expf+0x4c>)
 8028416:	1c20      	adds	r0, r4, #0
 8028418:	f7d8 f88a 	bl	8000530 <__aeabi_fcmplt>
 802841c:	2800      	cmp	r0, #0
 802841e:	d0f7      	beq.n	8028410 <expf+0x2c>
 8028420:	f7fd fa50 	bl	80258c4 <__errno>
 8028424:	2322      	movs	r3, #34	@ 0x22
 8028426:	2500      	movs	r5, #0
 8028428:	6003      	str	r3, [r0, #0]
 802842a:	e7f1      	b.n	8028410 <expf+0x2c>
 802842c:	42b17217 	.word	0x42b17217
 8028430:	c2cff1b5 	.word	0xc2cff1b5

08028434 <sqrtf>:
 8028434:	b570      	push	{r4, r5, r6, lr}
 8028436:	1c05      	adds	r5, r0, #0
 8028438:	f000 f82a 	bl	8028490 <__ieee754_sqrtf>
 802843c:	1c29      	adds	r1, r5, #0
 802843e:	1c04      	adds	r4, r0, #0
 8028440:	1c28      	adds	r0, r5, #0
 8028442:	f7d9 f9bb 	bl	80017bc <__aeabi_fcmpun>
 8028446:	2800      	cmp	r0, #0
 8028448:	d10e      	bne.n	8028468 <sqrtf+0x34>
 802844a:	2100      	movs	r1, #0
 802844c:	1c28      	adds	r0, r5, #0
 802844e:	f7d8 f86f 	bl	8000530 <__aeabi_fcmplt>
 8028452:	2800      	cmp	r0, #0
 8028454:	d008      	beq.n	8028468 <sqrtf+0x34>
 8028456:	f7fd fa35 	bl	80258c4 <__errno>
 802845a:	2321      	movs	r3, #33	@ 0x21
 802845c:	2100      	movs	r1, #0
 802845e:	6003      	str	r3, [r0, #0]
 8028460:	1c08      	adds	r0, r1, #0
 8028462:	f7d8 fc1f 	bl	8000ca4 <__aeabi_fdiv>
 8028466:	1c04      	adds	r4, r0, #0
 8028468:	1c20      	adds	r0, r4, #0
 802846a:	bd70      	pop	{r4, r5, r6, pc}

0802846c <finite>:
 802846c:	4b02      	ldr	r3, [pc, #8]	@ (8028478 <finite+0xc>)
 802846e:	0048      	lsls	r0, r1, #1
 8028470:	0840      	lsrs	r0, r0, #1
 8028472:	18c0      	adds	r0, r0, r3
 8028474:	0fc0      	lsrs	r0, r0, #31
 8028476:	4770      	bx	lr
 8028478:	80100000 	.word	0x80100000

0802847c <finitef>:
 802847c:	22ff      	movs	r2, #255	@ 0xff
 802847e:	0043      	lsls	r3, r0, #1
 8028480:	085b      	lsrs	r3, r3, #1
 8028482:	2001      	movs	r0, #1
 8028484:	05d2      	lsls	r2, r2, #23
 8028486:	4293      	cmp	r3, r2
 8028488:	db00      	blt.n	802848c <finitef+0x10>
 802848a:	2000      	movs	r0, #0
 802848c:	4770      	bx	lr
	...

08028490 <__ieee754_sqrtf>:
 8028490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028492:	21ff      	movs	r1, #255	@ 0xff
 8028494:	0042      	lsls	r2, r0, #1
 8028496:	0003      	movs	r3, r0
 8028498:	1c04      	adds	r4, r0, #0
 802849a:	0852      	lsrs	r2, r2, #1
 802849c:	05c9      	lsls	r1, r1, #23
 802849e:	428a      	cmp	r2, r1
 80284a0:	d309      	bcc.n	80284b6 <__ieee754_sqrtf+0x26>
 80284a2:	1c01      	adds	r1, r0, #0
 80284a4:	f7d8 fdcc 	bl	8001040 <__aeabi_fmul>
 80284a8:	1c01      	adds	r1, r0, #0
 80284aa:	1c20      	adds	r0, r4, #0
 80284ac:	f7d8 fa08 	bl	80008c0 <__aeabi_fadd>
 80284b0:	1c04      	adds	r4, r0, #0
 80284b2:	1c20      	adds	r0, r4, #0
 80284b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80284b6:	2a00      	cmp	r2, #0
 80284b8:	d0fb      	beq.n	80284b2 <__ieee754_sqrtf+0x22>
 80284ba:	2800      	cmp	r0, #0
 80284bc:	da06      	bge.n	80284cc <__ieee754_sqrtf+0x3c>
 80284be:	1c01      	adds	r1, r0, #0
 80284c0:	f7d8 ff18 	bl	80012f4 <__aeabi_fsub>
 80284c4:	1c01      	adds	r1, r0, #0
 80284c6:	f7d8 fbed 	bl	8000ca4 <__aeabi_fdiv>
 80284ca:	e7f1      	b.n	80284b0 <__ieee754_sqrtf+0x20>
 80284cc:	0002      	movs	r2, r0
 80284ce:	400a      	ands	r2, r1
 80284d0:	4208      	tst	r0, r1
 80284d2:	d040      	beq.n	8028556 <__ieee754_sqrtf+0xc6>
 80284d4:	15c1      	asrs	r1, r0, #23
 80284d6:	2280      	movs	r2, #128	@ 0x80
 80284d8:	000f      	movs	r7, r1
 80284da:	025b      	lsls	r3, r3, #9
 80284dc:	0a5b      	lsrs	r3, r3, #9
 80284de:	0412      	lsls	r2, r2, #16
 80284e0:	3f7f      	subs	r7, #127	@ 0x7f
 80284e2:	4313      	orrs	r3, r2
 80284e4:	07c9      	lsls	r1, r1, #31
 80284e6:	d400      	bmi.n	80284ea <__ieee754_sqrtf+0x5a>
 80284e8:	005b      	lsls	r3, r3, #1
 80284ea:	2400      	movs	r4, #0
 80284ec:	2180      	movs	r1, #128	@ 0x80
 80284ee:	2019      	movs	r0, #25
 80284f0:	0026      	movs	r6, r4
 80284f2:	107f      	asrs	r7, r7, #1
 80284f4:	005b      	lsls	r3, r3, #1
 80284f6:	0449      	lsls	r1, r1, #17
 80284f8:	1875      	adds	r5, r6, r1
 80284fa:	001a      	movs	r2, r3
 80284fc:	429d      	cmp	r5, r3
 80284fe:	dc02      	bgt.n	8028506 <__ieee754_sqrtf+0x76>
 8028500:	186e      	adds	r6, r5, r1
 8028502:	1b5a      	subs	r2, r3, r5
 8028504:	1864      	adds	r4, r4, r1
 8028506:	3801      	subs	r0, #1
 8028508:	0053      	lsls	r3, r2, #1
 802850a:	0849      	lsrs	r1, r1, #1
 802850c:	2800      	cmp	r0, #0
 802850e:	d1f3      	bne.n	80284f8 <__ieee754_sqrtf+0x68>
 8028510:	2a00      	cmp	r2, #0
 8028512:	d019      	beq.n	8028548 <__ieee754_sqrtf+0xb8>
 8028514:	4d16      	ldr	r5, [pc, #88]	@ (8028570 <__ieee754_sqrtf+0xe0>)
 8028516:	4e17      	ldr	r6, [pc, #92]	@ (8028574 <__ieee754_sqrtf+0xe4>)
 8028518:	6828      	ldr	r0, [r5, #0]
 802851a:	6831      	ldr	r1, [r6, #0]
 802851c:	682b      	ldr	r3, [r5, #0]
 802851e:	9301      	str	r3, [sp, #4]
 8028520:	f7d8 fee8 	bl	80012f4 <__aeabi_fsub>
 8028524:	1c01      	adds	r1, r0, #0
 8028526:	9801      	ldr	r0, [sp, #4]
 8028528:	f7d8 f80c 	bl	8000544 <__aeabi_fcmple>
 802852c:	2800      	cmp	r0, #0
 802852e:	d00b      	beq.n	8028548 <__ieee754_sqrtf+0xb8>
 8028530:	6828      	ldr	r0, [r5, #0]
 8028532:	6831      	ldr	r1, [r6, #0]
 8028534:	f7d8 f9c4 	bl	80008c0 <__aeabi_fadd>
 8028538:	682d      	ldr	r5, [r5, #0]
 802853a:	1c01      	adds	r1, r0, #0
 802853c:	1c28      	adds	r0, r5, #0
 802853e:	f7d7 fff7 	bl	8000530 <__aeabi_fcmplt>
 8028542:	2800      	cmp	r0, #0
 8028544:	d010      	beq.n	8028568 <__ieee754_sqrtf+0xd8>
 8028546:	3402      	adds	r4, #2
 8028548:	23fc      	movs	r3, #252	@ 0xfc
 802854a:	1064      	asrs	r4, r4, #1
 802854c:	059b      	lsls	r3, r3, #22
 802854e:	18e3      	adds	r3, r4, r3
 8028550:	05fc      	lsls	r4, r7, #23
 8028552:	18e4      	adds	r4, r4, r3
 8028554:	e7ad      	b.n	80284b2 <__ieee754_sqrtf+0x22>
 8028556:	2080      	movs	r0, #128	@ 0x80
 8028558:	0400      	lsls	r0, r0, #16
 802855a:	005b      	lsls	r3, r3, #1
 802855c:	0011      	movs	r1, r2
 802855e:	3201      	adds	r2, #1
 8028560:	4203      	tst	r3, r0
 8028562:	d0fa      	beq.n	802855a <__ieee754_sqrtf+0xca>
 8028564:	4249      	negs	r1, r1
 8028566:	e7b6      	b.n	80284d6 <__ieee754_sqrtf+0x46>
 8028568:	2301      	movs	r3, #1
 802856a:	3401      	adds	r4, #1
 802856c:	439c      	bics	r4, r3
 802856e:	e7eb      	b.n	8028548 <__ieee754_sqrtf+0xb8>
 8028570:	0802e5bc 	.word	0x0802e5bc
 8028574:	0802e5b8 	.word	0x0802e5b8

08028578 <roundf>:
 8028578:	0dc3      	lsrs	r3, r0, #23
 802857a:	b2db      	uxtb	r3, r3
 802857c:	3b7f      	subs	r3, #127	@ 0x7f
 802857e:	0002      	movs	r2, r0
 8028580:	b510      	push	{r4, lr}
 8028582:	2b16      	cmp	r3, #22
 8028584:	dc13      	bgt.n	80285ae <roundf+0x36>
 8028586:	2b00      	cmp	r3, #0
 8028588:	da07      	bge.n	802859a <roundf+0x22>
 802858a:	0fc2      	lsrs	r2, r0, #31
 802858c:	07d0      	lsls	r0, r2, #31
 802858e:	3301      	adds	r3, #1
 8028590:	d102      	bne.n	8028598 <roundf+0x20>
 8028592:	23fe      	movs	r3, #254	@ 0xfe
 8028594:	059b      	lsls	r3, r3, #22
 8028596:	4318      	orrs	r0, r3
 8028598:	bd10      	pop	{r4, pc}
 802859a:	4908      	ldr	r1, [pc, #32]	@ (80285bc <roundf+0x44>)
 802859c:	4119      	asrs	r1, r3
 802859e:	4208      	tst	r0, r1
 80285a0:	d0fa      	beq.n	8028598 <roundf+0x20>
 80285a2:	2080      	movs	r0, #128	@ 0x80
 80285a4:	03c0      	lsls	r0, r0, #15
 80285a6:	4118      	asrs	r0, r3
 80285a8:	1880      	adds	r0, r0, r2
 80285aa:	4388      	bics	r0, r1
 80285ac:	e7f4      	b.n	8028598 <roundf+0x20>
 80285ae:	2b80      	cmp	r3, #128	@ 0x80
 80285b0:	d1f2      	bne.n	8028598 <roundf+0x20>
 80285b2:	1c01      	adds	r1, r0, #0
 80285b4:	f7d8 f984 	bl	80008c0 <__aeabi_fadd>
 80285b8:	e7ee      	b.n	8028598 <roundf+0x20>
 80285ba:	46c0      	nop			@ (mov r8, r8)
 80285bc:	007fffff 	.word	0x007fffff

080285c0 <__ieee754_log>:
 80285c0:	2380      	movs	r3, #128	@ 0x80
 80285c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285c4:	035b      	lsls	r3, r3, #13
 80285c6:	000e      	movs	r6, r1
 80285c8:	b08d      	sub	sp, #52	@ 0x34
 80285ca:	4299      	cmp	r1, r3
 80285cc:	da23      	bge.n	8028616 <__ieee754_log+0x56>
 80285ce:	004b      	lsls	r3, r1, #1
 80285d0:	085b      	lsrs	r3, r3, #1
 80285d2:	4303      	orrs	r3, r0
 80285d4:	d107      	bne.n	80285e6 <__ieee754_log+0x26>
 80285d6:	2200      	movs	r2, #0
 80285d8:	2300      	movs	r3, #0
 80285da:	2000      	movs	r0, #0
 80285dc:	49b4      	ldr	r1, [pc, #720]	@ (80288b0 <__ieee754_log+0x2f0>)
 80285de:	f7d9 fd7f 	bl	80020e0 <__aeabi_ddiv>
 80285e2:	b00d      	add	sp, #52	@ 0x34
 80285e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285e6:	2900      	cmp	r1, #0
 80285e8:	da06      	bge.n	80285f8 <__ieee754_log+0x38>
 80285ea:	0002      	movs	r2, r0
 80285ec:	000b      	movs	r3, r1
 80285ee:	f7da fc97 	bl	8002f20 <__aeabi_dsub>
 80285f2:	2200      	movs	r2, #0
 80285f4:	2300      	movs	r3, #0
 80285f6:	e7f2      	b.n	80285de <__ieee754_log+0x1e>
 80285f8:	4bae      	ldr	r3, [pc, #696]	@ (80288b4 <__ieee754_log+0x2f4>)
 80285fa:	2200      	movs	r2, #0
 80285fc:	f7da f9aa 	bl	8002954 <__aeabi_dmul>
 8028600:	2336      	movs	r3, #54	@ 0x36
 8028602:	000e      	movs	r6, r1
 8028604:	425b      	negs	r3, r3
 8028606:	4aac      	ldr	r2, [pc, #688]	@ (80288b8 <__ieee754_log+0x2f8>)
 8028608:	4296      	cmp	r6, r2
 802860a:	dd06      	ble.n	802861a <__ieee754_log+0x5a>
 802860c:	0002      	movs	r2, r0
 802860e:	000b      	movs	r3, r1
 8028610:	f7d9 f9a0 	bl	8001954 <__aeabi_dadd>
 8028614:	e7e5      	b.n	80285e2 <__ieee754_log+0x22>
 8028616:	2300      	movs	r3, #0
 8028618:	e7f5      	b.n	8028606 <__ieee754_log+0x46>
 802861a:	4ca8      	ldr	r4, [pc, #672]	@ (80288bc <__ieee754_log+0x2fc>)
 802861c:	1532      	asrs	r2, r6, #20
 802861e:	1912      	adds	r2, r2, r4
 8028620:	0336      	lsls	r6, r6, #12
 8028622:	4ca7      	ldr	r4, [pc, #668]	@ (80288c0 <__ieee754_log+0x300>)
 8028624:	18d2      	adds	r2, r2, r3
 8028626:	0b33      	lsrs	r3, r6, #12
 8028628:	9302      	str	r3, [sp, #8]
 802862a:	191b      	adds	r3, r3, r4
 802862c:	2480      	movs	r4, #128	@ 0x80
 802862e:	0364      	lsls	r4, r4, #13
 8028630:	4023      	ands	r3, r4
 8028632:	4ca4      	ldr	r4, [pc, #656]	@ (80288c4 <__ieee754_log+0x304>)
 8028634:	9d02      	ldr	r5, [sp, #8]
 8028636:	405c      	eors	r4, r3
 8028638:	151b      	asrs	r3, r3, #20
 802863a:	189b      	adds	r3, r3, r2
 802863c:	4325      	orrs	r5, r4
 802863e:	2200      	movs	r2, #0
 8028640:	9300      	str	r3, [sp, #0]
 8028642:	0029      	movs	r1, r5
 8028644:	4b9f      	ldr	r3, [pc, #636]	@ (80288c4 <__ieee754_log+0x304>)
 8028646:	f7da fc6b 	bl	8002f20 <__aeabi_dsub>
 802864a:	9b02      	ldr	r3, [sp, #8]
 802864c:	0006      	movs	r6, r0
 802864e:	3302      	adds	r3, #2
 8028650:	031b      	lsls	r3, r3, #12
 8028652:	000f      	movs	r7, r1
 8028654:	2200      	movs	r2, #0
 8028656:	0b1b      	lsrs	r3, r3, #12
 8028658:	2b02      	cmp	r3, #2
 802865a:	dc64      	bgt.n	8028726 <__ieee754_log+0x166>
 802865c:	2300      	movs	r3, #0
 802865e:	f7d7 ff27 	bl	80004b0 <__aeabi_dcmpeq>
 8028662:	2800      	cmp	r0, #0
 8028664:	d019      	beq.n	802869a <__ieee754_log+0xda>
 8028666:	9b00      	ldr	r3, [sp, #0]
 8028668:	2b00      	cmp	r3, #0
 802866a:	d100      	bne.n	802866e <__ieee754_log+0xae>
 802866c:	e11c      	b.n	80288a8 <__ieee754_log+0x2e8>
 802866e:	0018      	movs	r0, r3
 8028670:	f7db f8be 	bl	80037f0 <__aeabi_i2d>
 8028674:	4a94      	ldr	r2, [pc, #592]	@ (80288c8 <__ieee754_log+0x308>)
 8028676:	4b95      	ldr	r3, [pc, #596]	@ (80288cc <__ieee754_log+0x30c>)
 8028678:	0004      	movs	r4, r0
 802867a:	000d      	movs	r5, r1
 802867c:	f7da f96a 	bl	8002954 <__aeabi_dmul>
 8028680:	4a93      	ldr	r2, [pc, #588]	@ (80288d0 <__ieee754_log+0x310>)
 8028682:	0006      	movs	r6, r0
 8028684:	000f      	movs	r7, r1
 8028686:	4b93      	ldr	r3, [pc, #588]	@ (80288d4 <__ieee754_log+0x314>)
 8028688:	0020      	movs	r0, r4
 802868a:	0029      	movs	r1, r5
 802868c:	f7da f962 	bl	8002954 <__aeabi_dmul>
 8028690:	0002      	movs	r2, r0
 8028692:	000b      	movs	r3, r1
 8028694:	0030      	movs	r0, r6
 8028696:	0039      	movs	r1, r7
 8028698:	e7ba      	b.n	8028610 <__ieee754_log+0x50>
 802869a:	4a8f      	ldr	r2, [pc, #572]	@ (80288d8 <__ieee754_log+0x318>)
 802869c:	4b8f      	ldr	r3, [pc, #572]	@ (80288dc <__ieee754_log+0x31c>)
 802869e:	0030      	movs	r0, r6
 80286a0:	0039      	movs	r1, r7
 80286a2:	f7da f957 	bl	8002954 <__aeabi_dmul>
 80286a6:	0002      	movs	r2, r0
 80286a8:	000b      	movs	r3, r1
 80286aa:	2000      	movs	r0, #0
 80286ac:	498c      	ldr	r1, [pc, #560]	@ (80288e0 <__ieee754_log+0x320>)
 80286ae:	f7da fc37 	bl	8002f20 <__aeabi_dsub>
 80286b2:	0032      	movs	r2, r6
 80286b4:	0004      	movs	r4, r0
 80286b6:	000d      	movs	r5, r1
 80286b8:	003b      	movs	r3, r7
 80286ba:	0030      	movs	r0, r6
 80286bc:	0039      	movs	r1, r7
 80286be:	f7da f949 	bl	8002954 <__aeabi_dmul>
 80286c2:	000b      	movs	r3, r1
 80286c4:	0002      	movs	r2, r0
 80286c6:	0029      	movs	r1, r5
 80286c8:	0020      	movs	r0, r4
 80286ca:	f7da f943 	bl	8002954 <__aeabi_dmul>
 80286ce:	9b00      	ldr	r3, [sp, #0]
 80286d0:	9002      	str	r0, [sp, #8]
 80286d2:	9103      	str	r1, [sp, #12]
 80286d4:	2b00      	cmp	r3, #0
 80286d6:	d106      	bne.n	80286e6 <__ieee754_log+0x126>
 80286d8:	0002      	movs	r2, r0
 80286da:	000b      	movs	r3, r1
 80286dc:	0030      	movs	r0, r6
 80286de:	0039      	movs	r1, r7
 80286e0:	f7da fc1e 	bl	8002f20 <__aeabi_dsub>
 80286e4:	e77d      	b.n	80285e2 <__ieee754_log+0x22>
 80286e6:	9800      	ldr	r0, [sp, #0]
 80286e8:	f7db f882 	bl	80037f0 <__aeabi_i2d>
 80286ec:	4a76      	ldr	r2, [pc, #472]	@ (80288c8 <__ieee754_log+0x308>)
 80286ee:	4b77      	ldr	r3, [pc, #476]	@ (80288cc <__ieee754_log+0x30c>)
 80286f0:	0004      	movs	r4, r0
 80286f2:	000d      	movs	r5, r1
 80286f4:	f7da f92e 	bl	8002954 <__aeabi_dmul>
 80286f8:	4a75      	ldr	r2, [pc, #468]	@ (80288d0 <__ieee754_log+0x310>)
 80286fa:	9000      	str	r0, [sp, #0]
 80286fc:	9101      	str	r1, [sp, #4]
 80286fe:	4b75      	ldr	r3, [pc, #468]	@ (80288d4 <__ieee754_log+0x314>)
 8028700:	0020      	movs	r0, r4
 8028702:	0029      	movs	r1, r5
 8028704:	f7da f926 	bl	8002954 <__aeabi_dmul>
 8028708:	0002      	movs	r2, r0
 802870a:	000b      	movs	r3, r1
 802870c:	9802      	ldr	r0, [sp, #8]
 802870e:	9903      	ldr	r1, [sp, #12]
 8028710:	f7da fc06 	bl	8002f20 <__aeabi_dsub>
 8028714:	0032      	movs	r2, r6
 8028716:	003b      	movs	r3, r7
 8028718:	f7da fc02 	bl	8002f20 <__aeabi_dsub>
 802871c:	0002      	movs	r2, r0
 802871e:	000b      	movs	r3, r1
 8028720:	9800      	ldr	r0, [sp, #0]
 8028722:	9901      	ldr	r1, [sp, #4]
 8028724:	e7dc      	b.n	80286e0 <__ieee754_log+0x120>
 8028726:	2380      	movs	r3, #128	@ 0x80
 8028728:	05db      	lsls	r3, r3, #23
 802872a:	f7d9 f913 	bl	8001954 <__aeabi_dadd>
 802872e:	0002      	movs	r2, r0
 8028730:	000b      	movs	r3, r1
 8028732:	0030      	movs	r0, r6
 8028734:	0039      	movs	r1, r7
 8028736:	f7d9 fcd3 	bl	80020e0 <__aeabi_ddiv>
 802873a:	9004      	str	r0, [sp, #16]
 802873c:	9105      	str	r1, [sp, #20]
 802873e:	9800      	ldr	r0, [sp, #0]
 8028740:	f7db f856 	bl	80037f0 <__aeabi_i2d>
 8028744:	9a04      	ldr	r2, [sp, #16]
 8028746:	9b05      	ldr	r3, [sp, #20]
 8028748:	9006      	str	r0, [sp, #24]
 802874a:	9107      	str	r1, [sp, #28]
 802874c:	0010      	movs	r0, r2
 802874e:	0019      	movs	r1, r3
 8028750:	f7da f900 	bl	8002954 <__aeabi_dmul>
 8028754:	4a63      	ldr	r2, [pc, #396]	@ (80288e4 <__ieee754_log+0x324>)
 8028756:	9b02      	ldr	r3, [sp, #8]
 8028758:	4694      	mov	ip, r2
 802875a:	4463      	add	r3, ip
 802875c:	0002      	movs	r2, r0
 802875e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028760:	000b      	movs	r3, r1
 8028762:	9008      	str	r0, [sp, #32]
 8028764:	9109      	str	r1, [sp, #36]	@ 0x24
 8028766:	f7da f8f5 	bl	8002954 <__aeabi_dmul>
 802876a:	0004      	movs	r4, r0
 802876c:	000d      	movs	r5, r1
 802876e:	4a5e      	ldr	r2, [pc, #376]	@ (80288e8 <__ieee754_log+0x328>)
 8028770:	4b5e      	ldr	r3, [pc, #376]	@ (80288ec <__ieee754_log+0x32c>)
 8028772:	f7da f8ef 	bl	8002954 <__aeabi_dmul>
 8028776:	4a5e      	ldr	r2, [pc, #376]	@ (80288f0 <__ieee754_log+0x330>)
 8028778:	4b5e      	ldr	r3, [pc, #376]	@ (80288f4 <__ieee754_log+0x334>)
 802877a:	f7d9 f8eb 	bl	8001954 <__aeabi_dadd>
 802877e:	0022      	movs	r2, r4
 8028780:	002b      	movs	r3, r5
 8028782:	f7da f8e7 	bl	8002954 <__aeabi_dmul>
 8028786:	4a5c      	ldr	r2, [pc, #368]	@ (80288f8 <__ieee754_log+0x338>)
 8028788:	4b5c      	ldr	r3, [pc, #368]	@ (80288fc <__ieee754_log+0x33c>)
 802878a:	f7d9 f8e3 	bl	8001954 <__aeabi_dadd>
 802878e:	0022      	movs	r2, r4
 8028790:	002b      	movs	r3, r5
 8028792:	f7da f8df 	bl	8002954 <__aeabi_dmul>
 8028796:	4a5a      	ldr	r2, [pc, #360]	@ (8028900 <__ieee754_log+0x340>)
 8028798:	4b5a      	ldr	r3, [pc, #360]	@ (8028904 <__ieee754_log+0x344>)
 802879a:	f7d9 f8db 	bl	8001954 <__aeabi_dadd>
 802879e:	9a08      	ldr	r2, [sp, #32]
 80287a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287a2:	f7da f8d7 	bl	8002954 <__aeabi_dmul>
 80287a6:	4a58      	ldr	r2, [pc, #352]	@ (8028908 <__ieee754_log+0x348>)
 80287a8:	9008      	str	r0, [sp, #32]
 80287aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80287ac:	4b57      	ldr	r3, [pc, #348]	@ (802890c <__ieee754_log+0x34c>)
 80287ae:	0020      	movs	r0, r4
 80287b0:	0029      	movs	r1, r5
 80287b2:	f7da f8cf 	bl	8002954 <__aeabi_dmul>
 80287b6:	4a56      	ldr	r2, [pc, #344]	@ (8028910 <__ieee754_log+0x350>)
 80287b8:	4b56      	ldr	r3, [pc, #344]	@ (8028914 <__ieee754_log+0x354>)
 80287ba:	f7d9 f8cb 	bl	8001954 <__aeabi_dadd>
 80287be:	0022      	movs	r2, r4
 80287c0:	002b      	movs	r3, r5
 80287c2:	f7da f8c7 	bl	8002954 <__aeabi_dmul>
 80287c6:	4a54      	ldr	r2, [pc, #336]	@ (8028918 <__ieee754_log+0x358>)
 80287c8:	4b54      	ldr	r3, [pc, #336]	@ (802891c <__ieee754_log+0x35c>)
 80287ca:	f7d9 f8c3 	bl	8001954 <__aeabi_dadd>
 80287ce:	0022      	movs	r2, r4
 80287d0:	002b      	movs	r3, r5
 80287d2:	f7da f8bf 	bl	8002954 <__aeabi_dmul>
 80287d6:	0002      	movs	r2, r0
 80287d8:	000b      	movs	r3, r1
 80287da:	9808      	ldr	r0, [sp, #32]
 80287dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80287de:	f7d9 f8b9 	bl	8001954 <__aeabi_dadd>
 80287e2:	9a02      	ldr	r2, [sp, #8]
 80287e4:	4b4e      	ldr	r3, [pc, #312]	@ (8028920 <__ieee754_log+0x360>)
 80287e6:	0004      	movs	r4, r0
 80287e8:	1a9b      	subs	r3, r3, r2
 80287ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80287ec:	000d      	movs	r5, r1
 80287ee:	4313      	orrs	r3, r2
 80287f0:	2b00      	cmp	r3, #0
 80287f2:	dd34      	ble.n	802885e <__ieee754_log+0x29e>
 80287f4:	2200      	movs	r2, #0
 80287f6:	4b3a      	ldr	r3, [pc, #232]	@ (80288e0 <__ieee754_log+0x320>)
 80287f8:	0030      	movs	r0, r6
 80287fa:	0039      	movs	r1, r7
 80287fc:	f7da f8aa 	bl	8002954 <__aeabi_dmul>
 8028800:	0032      	movs	r2, r6
 8028802:	003b      	movs	r3, r7
 8028804:	f7da f8a6 	bl	8002954 <__aeabi_dmul>
 8028808:	0002      	movs	r2, r0
 802880a:	000b      	movs	r3, r1
 802880c:	9002      	str	r0, [sp, #8]
 802880e:	9103      	str	r1, [sp, #12]
 8028810:	0020      	movs	r0, r4
 8028812:	0029      	movs	r1, r5
 8028814:	f7d9 f89e 	bl	8001954 <__aeabi_dadd>
 8028818:	9a04      	ldr	r2, [sp, #16]
 802881a:	9b05      	ldr	r3, [sp, #20]
 802881c:	f7da f89a 	bl	8002954 <__aeabi_dmul>
 8028820:	9b00      	ldr	r3, [sp, #0]
 8028822:	0004      	movs	r4, r0
 8028824:	000d      	movs	r5, r1
 8028826:	2b00      	cmp	r3, #0
 8028828:	d106      	bne.n	8028838 <__ieee754_log+0x278>
 802882a:	0002      	movs	r2, r0
 802882c:	000b      	movs	r3, r1
 802882e:	9802      	ldr	r0, [sp, #8]
 8028830:	9903      	ldr	r1, [sp, #12]
 8028832:	f7da fb75 	bl	8002f20 <__aeabi_dsub>
 8028836:	e74f      	b.n	80286d8 <__ieee754_log+0x118>
 8028838:	4a23      	ldr	r2, [pc, #140]	@ (80288c8 <__ieee754_log+0x308>)
 802883a:	4b24      	ldr	r3, [pc, #144]	@ (80288cc <__ieee754_log+0x30c>)
 802883c:	9806      	ldr	r0, [sp, #24]
 802883e:	9907      	ldr	r1, [sp, #28]
 8028840:	f7da f888 	bl	8002954 <__aeabi_dmul>
 8028844:	4a22      	ldr	r2, [pc, #136]	@ (80288d0 <__ieee754_log+0x310>)
 8028846:	9000      	str	r0, [sp, #0]
 8028848:	9101      	str	r1, [sp, #4]
 802884a:	9806      	ldr	r0, [sp, #24]
 802884c:	9907      	ldr	r1, [sp, #28]
 802884e:	4b21      	ldr	r3, [pc, #132]	@ (80288d4 <__ieee754_log+0x314>)
 8028850:	f7da f880 	bl	8002954 <__aeabi_dmul>
 8028854:	0022      	movs	r2, r4
 8028856:	002b      	movs	r3, r5
 8028858:	f7d9 f87c 	bl	8001954 <__aeabi_dadd>
 802885c:	e754      	b.n	8028708 <__ieee754_log+0x148>
 802885e:	0002      	movs	r2, r0
 8028860:	000b      	movs	r3, r1
 8028862:	0030      	movs	r0, r6
 8028864:	0039      	movs	r1, r7
 8028866:	f7da fb5b 	bl	8002f20 <__aeabi_dsub>
 802886a:	9a04      	ldr	r2, [sp, #16]
 802886c:	9b05      	ldr	r3, [sp, #20]
 802886e:	f7da f871 	bl	8002954 <__aeabi_dmul>
 8028872:	9b00      	ldr	r3, [sp, #0]
 8028874:	0004      	movs	r4, r0
 8028876:	000d      	movs	r5, r1
 8028878:	2b00      	cmp	r3, #0
 802887a:	d102      	bne.n	8028882 <__ieee754_log+0x2c2>
 802887c:	0002      	movs	r2, r0
 802887e:	000b      	movs	r3, r1
 8028880:	e72c      	b.n	80286dc <__ieee754_log+0x11c>
 8028882:	4a11      	ldr	r2, [pc, #68]	@ (80288c8 <__ieee754_log+0x308>)
 8028884:	4b11      	ldr	r3, [pc, #68]	@ (80288cc <__ieee754_log+0x30c>)
 8028886:	9806      	ldr	r0, [sp, #24]
 8028888:	9907      	ldr	r1, [sp, #28]
 802888a:	f7da f863 	bl	8002954 <__aeabi_dmul>
 802888e:	4a10      	ldr	r2, [pc, #64]	@ (80288d0 <__ieee754_log+0x310>)
 8028890:	9000      	str	r0, [sp, #0]
 8028892:	9101      	str	r1, [sp, #4]
 8028894:	9806      	ldr	r0, [sp, #24]
 8028896:	9907      	ldr	r1, [sp, #28]
 8028898:	4b0e      	ldr	r3, [pc, #56]	@ (80288d4 <__ieee754_log+0x314>)
 802889a:	f7da f85b 	bl	8002954 <__aeabi_dmul>
 802889e:	0002      	movs	r2, r0
 80288a0:	000b      	movs	r3, r1
 80288a2:	0020      	movs	r0, r4
 80288a4:	0029      	movs	r1, r5
 80288a6:	e733      	b.n	8028710 <__ieee754_log+0x150>
 80288a8:	2000      	movs	r0, #0
 80288aa:	2100      	movs	r1, #0
 80288ac:	e699      	b.n	80285e2 <__ieee754_log+0x22>
 80288ae:	46c0      	nop			@ (mov r8, r8)
 80288b0:	c3500000 	.word	0xc3500000
 80288b4:	43500000 	.word	0x43500000
 80288b8:	7fefffff 	.word	0x7fefffff
 80288bc:	fffffc01 	.word	0xfffffc01
 80288c0:	00095f64 	.word	0x00095f64
 80288c4:	3ff00000 	.word	0x3ff00000
 80288c8:	fee00000 	.word	0xfee00000
 80288cc:	3fe62e42 	.word	0x3fe62e42
 80288d0:	35793c76 	.word	0x35793c76
 80288d4:	3dea39ef 	.word	0x3dea39ef
 80288d8:	55555555 	.word	0x55555555
 80288dc:	3fd55555 	.word	0x3fd55555
 80288e0:	3fe00000 	.word	0x3fe00000
 80288e4:	fff9eb86 	.word	0xfff9eb86
 80288e8:	df3e5244 	.word	0xdf3e5244
 80288ec:	3fc2f112 	.word	0x3fc2f112
 80288f0:	96cb03de 	.word	0x96cb03de
 80288f4:	3fc74664 	.word	0x3fc74664
 80288f8:	94229359 	.word	0x94229359
 80288fc:	3fd24924 	.word	0x3fd24924
 8028900:	55555593 	.word	0x55555593
 8028904:	3fe55555 	.word	0x3fe55555
 8028908:	d078c69f 	.word	0xd078c69f
 802890c:	3fc39a09 	.word	0x3fc39a09
 8028910:	1d8e78af 	.word	0x1d8e78af
 8028914:	3fcc71c5 	.word	0x3fcc71c5
 8028918:	9997fa04 	.word	0x9997fa04
 802891c:	3fd99999 	.word	0x3fd99999
 8028920:	0006b851 	.word	0x0006b851

08028924 <__ieee754_pow>:
 8028924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028926:	b095      	sub	sp, #84	@ 0x54
 8028928:	9204      	str	r2, [sp, #16]
 802892a:	9305      	str	r3, [sp, #20]
 802892c:	9b04      	ldr	r3, [sp, #16]
 802892e:	9f05      	ldr	r7, [sp, #20]
 8028930:	001a      	movs	r2, r3
 8028932:	007d      	lsls	r5, r7, #1
 8028934:	086d      	lsrs	r5, r5, #1
 8028936:	9002      	str	r0, [sp, #8]
 8028938:	9103      	str	r1, [sp, #12]
 802893a:	432a      	orrs	r2, r5
 802893c:	d11a      	bne.n	8028974 <__ieee754_pow+0x50>
 802893e:	2180      	movs	r1, #128	@ 0x80
 8028940:	9a02      	ldr	r2, [sp, #8]
 8028942:	9803      	ldr	r0, [sp, #12]
 8028944:	0309      	lsls	r1, r1, #12
 8028946:	4048      	eors	r0, r1
 8028948:	0003      	movs	r3, r0
 802894a:	1892      	adds	r2, r2, r2
 802894c:	415b      	adcs	r3, r3
 802894e:	4996      	ldr	r1, [pc, #600]	@ (8028ba8 <__ieee754_pow+0x284>)
 8028950:	428b      	cmp	r3, r1
 8028952:	d806      	bhi.n	8028962 <__ieee754_pow+0x3e>
 8028954:	d001      	beq.n	802895a <__ieee754_pow+0x36>
 8028956:	f000 fcce 	bl	80292f6 <__ieee754_pow+0x9d2>
 802895a:	2a00      	cmp	r2, #0
 802895c:	d101      	bne.n	8028962 <__ieee754_pow+0x3e>
 802895e:	f000 fcca 	bl	80292f6 <__ieee754_pow+0x9d2>
 8028962:	9a04      	ldr	r2, [sp, #16]
 8028964:	9b05      	ldr	r3, [sp, #20]
 8028966:	9802      	ldr	r0, [sp, #8]
 8028968:	9903      	ldr	r1, [sp, #12]
 802896a:	f7d8 fff3 	bl	8001954 <__aeabi_dadd>
 802896e:	9000      	str	r0, [sp, #0]
 8028970:	9101      	str	r1, [sp, #4]
 8028972:	e08e      	b.n	8028a92 <__ieee754_pow+0x16e>
 8028974:	9a03      	ldr	r2, [sp, #12]
 8028976:	9206      	str	r2, [sp, #24]
 8028978:	9a02      	ldr	r2, [sp, #8]
 802897a:	920a      	str	r2, [sp, #40]	@ 0x28
 802897c:	9a03      	ldr	r2, [sp, #12]
 802897e:	0054      	lsls	r4, r2, #1
 8028980:	4a8a      	ldr	r2, [pc, #552]	@ (8028bac <__ieee754_pow+0x288>)
 8028982:	0864      	lsrs	r4, r4, #1
 8028984:	4294      	cmp	r4, r2
 8028986:	d80e      	bhi.n	80289a6 <__ieee754_pow+0x82>
 8028988:	d105      	bne.n	8028996 <__ieee754_pow+0x72>
 802898a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802898c:	2a00      	cmp	r2, #0
 802898e:	d1e8      	bne.n	8028962 <__ieee754_pow+0x3e>
 8028990:	42a5      	cmp	r5, r4
 8028992:	d8e6      	bhi.n	8028962 <__ieee754_pow+0x3e>
 8028994:	e002      	b.n	802899c <__ieee754_pow+0x78>
 8028996:	4a85      	ldr	r2, [pc, #532]	@ (8028bac <__ieee754_pow+0x288>)
 8028998:	4295      	cmp	r5, r2
 802899a:	d804      	bhi.n	80289a6 <__ieee754_pow+0x82>
 802899c:	4a83      	ldr	r2, [pc, #524]	@ (8028bac <__ieee754_pow+0x288>)
 802899e:	4295      	cmp	r5, r2
 80289a0:	d10c      	bne.n	80289bc <__ieee754_pow+0x98>
 80289a2:	2b00      	cmp	r3, #0
 80289a4:	d00a      	beq.n	80289bc <__ieee754_pow+0x98>
 80289a6:	4a82      	ldr	r2, [pc, #520]	@ (8028bb0 <__ieee754_pow+0x28c>)
 80289a8:	9b03      	ldr	r3, [sp, #12]
 80289aa:	189b      	adds	r3, r3, r2
 80289ac:	9a02      	ldr	r2, [sp, #8]
 80289ae:	4313      	orrs	r3, r2
 80289b0:	d1d7      	bne.n	8028962 <__ieee754_pow+0x3e>
 80289b2:	2180      	movs	r1, #128	@ 0x80
 80289b4:	9a04      	ldr	r2, [sp, #16]
 80289b6:	9805      	ldr	r0, [sp, #20]
 80289b8:	0309      	lsls	r1, r1, #12
 80289ba:	e7c4      	b.n	8028946 <__ieee754_pow+0x22>
 80289bc:	2600      	movs	r6, #0
 80289be:	9a06      	ldr	r2, [sp, #24]
 80289c0:	9408      	str	r4, [sp, #32]
 80289c2:	42b2      	cmp	r2, r6
 80289c4:	da42      	bge.n	8028a4c <__ieee754_pow+0x128>
 80289c6:	4a7b      	ldr	r2, [pc, #492]	@ (8028bb4 <__ieee754_pow+0x290>)
 80289c8:	4295      	cmp	r5, r2
 80289ca:	d83e      	bhi.n	8028a4a <__ieee754_pow+0x126>
 80289cc:	4a7a      	ldr	r2, [pc, #488]	@ (8028bb8 <__ieee754_pow+0x294>)
 80289ce:	4295      	cmp	r5, r2
 80289d0:	d910      	bls.n	80289f4 <__ieee754_pow+0xd0>
 80289d2:	497a      	ldr	r1, [pc, #488]	@ (8028bbc <__ieee754_pow+0x298>)
 80289d4:	152a      	asrs	r2, r5, #20
 80289d6:	1852      	adds	r2, r2, r1
 80289d8:	2a14      	cmp	r2, #20
 80289da:	dd18      	ble.n	8028a0e <__ieee754_pow+0xea>
 80289dc:	2134      	movs	r1, #52	@ 0x34
 80289de:	1a89      	subs	r1, r1, r2
 80289e0:	9a04      	ldr	r2, [sp, #16]
 80289e2:	40ca      	lsrs	r2, r1
 80289e4:	0010      	movs	r0, r2
 80289e6:	4088      	lsls	r0, r1
 80289e8:	4298      	cmp	r0, r3
 80289ea:	d103      	bne.n	80289f4 <__ieee754_pow+0xd0>
 80289ec:	2101      	movs	r1, #1
 80289ee:	3602      	adds	r6, #2
 80289f0:	400a      	ands	r2, r1
 80289f2:	1ab6      	subs	r6, r6, r2
 80289f4:	2b00      	cmp	r3, #0
 80289f6:	d15b      	bne.n	8028ab0 <__ieee754_pow+0x18c>
 80289f8:	2380      	movs	r3, #128	@ 0x80
 80289fa:	05db      	lsls	r3, r3, #23
 80289fc:	429f      	cmp	r7, r3
 80289fe:	d14c      	bne.n	8028a9a <__ieee754_pow+0x176>
 8028a00:	9a02      	ldr	r2, [sp, #8]
 8028a02:	9b03      	ldr	r3, [sp, #12]
 8028a04:	0010      	movs	r0, r2
 8028a06:	0019      	movs	r1, r3
 8028a08:	f7d9 ffa4 	bl	8002954 <__aeabi_dmul>
 8028a0c:	e7af      	b.n	802896e <__ieee754_pow+0x4a>
 8028a0e:	2b00      	cmp	r3, #0
 8028a10:	d14e      	bne.n	8028ab0 <__ieee754_pow+0x18c>
 8028a12:	3314      	adds	r3, #20
 8028a14:	1a9a      	subs	r2, r3, r2
 8028a16:	002b      	movs	r3, r5
 8028a18:	4113      	asrs	r3, r2
 8028a1a:	0019      	movs	r1, r3
 8028a1c:	4091      	lsls	r1, r2
 8028a1e:	42a9      	cmp	r1, r5
 8028a20:	d103      	bne.n	8028a2a <__ieee754_pow+0x106>
 8028a22:	2201      	movs	r2, #1
 8028a24:	2602      	movs	r6, #2
 8028a26:	4013      	ands	r3, r2
 8028a28:	1af6      	subs	r6, r6, r3
 8028a2a:	4b65      	ldr	r3, [pc, #404]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028a2c:	429d      	cmp	r5, r3
 8028a2e:	d1e3      	bne.n	80289f8 <__ieee754_pow+0xd4>
 8028a30:	9b02      	ldr	r3, [sp, #8]
 8028a32:	9c03      	ldr	r4, [sp, #12]
 8028a34:	9300      	str	r3, [sp, #0]
 8028a36:	9401      	str	r4, [sp, #4]
 8028a38:	2f00      	cmp	r7, #0
 8028a3a:	da2a      	bge.n	8028a92 <__ieee754_pow+0x16e>
 8028a3c:	001a      	movs	r2, r3
 8028a3e:	2000      	movs	r0, #0
 8028a40:	0023      	movs	r3, r4
 8028a42:	495f      	ldr	r1, [pc, #380]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028a44:	f7d9 fb4c 	bl	80020e0 <__aeabi_ddiv>
 8028a48:	e791      	b.n	802896e <__ieee754_pow+0x4a>
 8028a4a:	2602      	movs	r6, #2
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d12f      	bne.n	8028ab0 <__ieee754_pow+0x18c>
 8028a50:	4b56      	ldr	r3, [pc, #344]	@ (8028bac <__ieee754_pow+0x288>)
 8028a52:	429d      	cmp	r5, r3
 8028a54:	d1e9      	bne.n	8028a2a <__ieee754_pow+0x106>
 8028a56:	4b56      	ldr	r3, [pc, #344]	@ (8028bb0 <__ieee754_pow+0x28c>)
 8028a58:	9a02      	ldr	r2, [sp, #8]
 8028a5a:	18e3      	adds	r3, r4, r3
 8028a5c:	4313      	orrs	r3, r2
 8028a5e:	d101      	bne.n	8028a64 <__ieee754_pow+0x140>
 8028a60:	f000 fc49 	bl	80292f6 <__ieee754_pow+0x9d2>
 8028a64:	4b54      	ldr	r3, [pc, #336]	@ (8028bb8 <__ieee754_pow+0x294>)
 8028a66:	429c      	cmp	r4, r3
 8028a68:	d909      	bls.n	8028a7e <__ieee754_pow+0x15a>
 8028a6a:	9b04      	ldr	r3, [sp, #16]
 8028a6c:	9c05      	ldr	r4, [sp, #20]
 8028a6e:	9300      	str	r3, [sp, #0]
 8028a70:	9401      	str	r4, [sp, #4]
 8028a72:	2f00      	cmp	r7, #0
 8028a74:	da0d      	bge.n	8028a92 <__ieee754_pow+0x16e>
 8028a76:	2300      	movs	r3, #0
 8028a78:	2400      	movs	r4, #0
 8028a7a:	f000 fc3e 	bl	80292fa <__ieee754_pow+0x9d6>
 8028a7e:	2f00      	cmp	r7, #0
 8028a80:	daf9      	bge.n	8028a76 <__ieee754_pow+0x152>
 8028a82:	2280      	movs	r2, #128	@ 0x80
 8028a84:	0612      	lsls	r2, r2, #24
 8028a86:	4694      	mov	ip, r2
 8028a88:	9b04      	ldr	r3, [sp, #16]
 8028a8a:	9300      	str	r3, [sp, #0]
 8028a8c:	9b05      	ldr	r3, [sp, #20]
 8028a8e:	4463      	add	r3, ip
 8028a90:	9301      	str	r3, [sp, #4]
 8028a92:	9800      	ldr	r0, [sp, #0]
 8028a94:	9901      	ldr	r1, [sp, #4]
 8028a96:	b015      	add	sp, #84	@ 0x54
 8028a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8028bc4 <__ieee754_pow+0x2a0>)
 8028a9c:	429f      	cmp	r7, r3
 8028a9e:	d107      	bne.n	8028ab0 <__ieee754_pow+0x18c>
 8028aa0:	9b06      	ldr	r3, [sp, #24]
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	db04      	blt.n	8028ab0 <__ieee754_pow+0x18c>
 8028aa6:	9802      	ldr	r0, [sp, #8]
 8028aa8:	9903      	ldr	r1, [sp, #12]
 8028aaa:	f000 fe03 	bl	80296b4 <__ieee754_sqrt>
 8028aae:	e75e      	b.n	802896e <__ieee754_pow+0x4a>
 8028ab0:	9802      	ldr	r0, [sp, #8]
 8028ab2:	9903      	ldr	r1, [sp, #12]
 8028ab4:	f000 fc4e 	bl	8029354 <fabs>
 8028ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028aba:	9000      	str	r0, [sp, #0]
 8028abc:	9101      	str	r1, [sp, #4]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d12c      	bne.n	8028b1c <__ieee754_pow+0x1f8>
 8028ac2:	9b03      	ldr	r3, [sp, #12]
 8028ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028ac6:	009b      	lsls	r3, r3, #2
 8028ac8:	089b      	lsrs	r3, r3, #2
 8028aca:	4293      	cmp	r3, r2
 8028acc:	d001      	beq.n	8028ad2 <__ieee754_pow+0x1ae>
 8028ace:	2c00      	cmp	r4, #0
 8028ad0:	d124      	bne.n	8028b1c <__ieee754_pow+0x1f8>
 8028ad2:	2f00      	cmp	r7, #0
 8028ad4:	da07      	bge.n	8028ae6 <__ieee754_pow+0x1c2>
 8028ad6:	9a00      	ldr	r2, [sp, #0]
 8028ad8:	9b01      	ldr	r3, [sp, #4]
 8028ada:	2000      	movs	r0, #0
 8028adc:	4938      	ldr	r1, [pc, #224]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028ade:	f7d9 faff 	bl	80020e0 <__aeabi_ddiv>
 8028ae2:	9000      	str	r0, [sp, #0]
 8028ae4:	9101      	str	r1, [sp, #4]
 8028ae6:	9b06      	ldr	r3, [sp, #24]
 8028ae8:	2b00      	cmp	r3, #0
 8028aea:	dad2      	bge.n	8028a92 <__ieee754_pow+0x16e>
 8028aec:	4b30      	ldr	r3, [pc, #192]	@ (8028bb0 <__ieee754_pow+0x28c>)
 8028aee:	18e4      	adds	r4, r4, r3
 8028af0:	4334      	orrs	r4, r6
 8028af2:	d108      	bne.n	8028b06 <__ieee754_pow+0x1e2>
 8028af4:	9a00      	ldr	r2, [sp, #0]
 8028af6:	9b01      	ldr	r3, [sp, #4]
 8028af8:	0010      	movs	r0, r2
 8028afa:	0019      	movs	r1, r3
 8028afc:	f7da fa10 	bl	8002f20 <__aeabi_dsub>
 8028b00:	0002      	movs	r2, r0
 8028b02:	000b      	movs	r3, r1
 8028b04:	e79e      	b.n	8028a44 <__ieee754_pow+0x120>
 8028b06:	2e01      	cmp	r6, #1
 8028b08:	d1c3      	bne.n	8028a92 <__ieee754_pow+0x16e>
 8028b0a:	9800      	ldr	r0, [sp, #0]
 8028b0c:	2180      	movs	r1, #128	@ 0x80
 8028b0e:	0002      	movs	r2, r0
 8028b10:	9801      	ldr	r0, [sp, #4]
 8028b12:	0609      	lsls	r1, r1, #24
 8028b14:	1843      	adds	r3, r0, r1
 8028b16:	9200      	str	r2, [sp, #0]
 8028b18:	9301      	str	r3, [sp, #4]
 8028b1a:	e7ba      	b.n	8028a92 <__ieee754_pow+0x16e>
 8028b1c:	9b03      	ldr	r3, [sp, #12]
 8028b1e:	0fdb      	lsrs	r3, r3, #31
 8028b20:	3b01      	subs	r3, #1
 8028b22:	001a      	movs	r2, r3
 8028b24:	4332      	orrs	r2, r6
 8028b26:	d102      	bne.n	8028b2e <__ieee754_pow+0x20a>
 8028b28:	9a02      	ldr	r2, [sp, #8]
 8028b2a:	9b03      	ldr	r3, [sp, #12]
 8028b2c:	e7e4      	b.n	8028af8 <__ieee754_pow+0x1d4>
 8028b2e:	3e01      	subs	r6, #1
 8028b30:	2200      	movs	r2, #0
 8028b32:	431e      	orrs	r6, r3
 8028b34:	d013      	beq.n	8028b5e <__ieee754_pow+0x23a>
 8028b36:	4b22      	ldr	r3, [pc, #136]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028b38:	9206      	str	r2, [sp, #24]
 8028b3a:	9307      	str	r3, [sp, #28]
 8028b3c:	2384      	movs	r3, #132	@ 0x84
 8028b3e:	05db      	lsls	r3, r3, #23
 8028b40:	429d      	cmp	r5, r3
 8028b42:	d800      	bhi.n	8028b46 <__ieee754_pow+0x222>
 8028b44:	e0fa      	b.n	8028d3c <__ieee754_pow+0x418>
 8028b46:	4b20      	ldr	r3, [pc, #128]	@ (8028bc8 <__ieee754_pow+0x2a4>)
 8028b48:	429d      	cmp	r5, r3
 8028b4a:	d910      	bls.n	8028b6e <__ieee754_pow+0x24a>
 8028b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8028bb8 <__ieee754_pow+0x294>)
 8028b4e:	429c      	cmp	r4, r3
 8028b50:	d807      	bhi.n	8028b62 <__ieee754_pow+0x23e>
 8028b52:	2f00      	cmp	r7, #0
 8028b54:	da07      	bge.n	8028b66 <__ieee754_pow+0x242>
 8028b56:	2000      	movs	r0, #0
 8028b58:	f000 fd82 	bl	8029660 <__math_oflow>
 8028b5c:	e707      	b.n	802896e <__ieee754_pow+0x4a>
 8028b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8028bcc <__ieee754_pow+0x2a8>)
 8028b60:	e7ea      	b.n	8028b38 <__ieee754_pow+0x214>
 8028b62:	2f00      	cmp	r7, #0
 8028b64:	dcf7      	bgt.n	8028b56 <__ieee754_pow+0x232>
 8028b66:	2000      	movs	r0, #0
 8028b68:	f000 fd73 	bl	8029652 <__math_uflow>
 8028b6c:	e6ff      	b.n	802896e <__ieee754_pow+0x4a>
 8028b6e:	4b18      	ldr	r3, [pc, #96]	@ (8028bd0 <__ieee754_pow+0x2ac>)
 8028b70:	429c      	cmp	r4, r3
 8028b72:	d80a      	bhi.n	8028b8a <__ieee754_pow+0x266>
 8028b74:	9806      	ldr	r0, [sp, #24]
 8028b76:	9907      	ldr	r1, [sp, #28]
 8028b78:	2300      	movs	r3, #0
 8028b7a:	2200      	movs	r2, #0
 8028b7c:	f7d7 fc9e 	bl	80004bc <__aeabi_dcmplt>
 8028b80:	1e43      	subs	r3, r0, #1
 8028b82:	4198      	sbcs	r0, r3
 8028b84:	2f00      	cmp	r7, #0
 8028b86:	daef      	bge.n	8028b68 <__ieee754_pow+0x244>
 8028b88:	e7e6      	b.n	8028b58 <__ieee754_pow+0x234>
 8028b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8028bc0 <__ieee754_pow+0x29c>)
 8028b8c:	2200      	movs	r2, #0
 8028b8e:	429c      	cmp	r4, r3
 8028b90:	d920      	bls.n	8028bd4 <__ieee754_pow+0x2b0>
 8028b92:	9806      	ldr	r0, [sp, #24]
 8028b94:	9907      	ldr	r1, [sp, #28]
 8028b96:	2300      	movs	r3, #0
 8028b98:	f7d7 fc90 	bl	80004bc <__aeabi_dcmplt>
 8028b9c:	1e43      	subs	r3, r0, #1
 8028b9e:	4198      	sbcs	r0, r3
 8028ba0:	2f00      	cmp	r7, #0
 8028ba2:	dcd9      	bgt.n	8028b58 <__ieee754_pow+0x234>
 8028ba4:	e7e0      	b.n	8028b68 <__ieee754_pow+0x244>
 8028ba6:	46c0      	nop			@ (mov r8, r8)
 8028ba8:	fff00000 	.word	0xfff00000
 8028bac:	7ff00000 	.word	0x7ff00000
 8028bb0:	c0100000 	.word	0xc0100000
 8028bb4:	433fffff 	.word	0x433fffff
 8028bb8:	3fefffff 	.word	0x3fefffff
 8028bbc:	fffffc01 	.word	0xfffffc01
 8028bc0:	3ff00000 	.word	0x3ff00000
 8028bc4:	3fe00000 	.word	0x3fe00000
 8028bc8:	43f00000 	.word	0x43f00000
 8028bcc:	bff00000 	.word	0xbff00000
 8028bd0:	3feffffe 	.word	0x3feffffe
 8028bd4:	9800      	ldr	r0, [sp, #0]
 8028bd6:	9901      	ldr	r1, [sp, #4]
 8028bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8028d10 <__ieee754_pow+0x3ec>)
 8028bda:	f7da f9a1 	bl	8002f20 <__aeabi_dsub>
 8028bde:	22c0      	movs	r2, #192	@ 0xc0
 8028be0:	4b4c      	ldr	r3, [pc, #304]	@ (8028d14 <__ieee754_pow+0x3f0>)
 8028be2:	05d2      	lsls	r2, r2, #23
 8028be4:	0006      	movs	r6, r0
 8028be6:	000f      	movs	r7, r1
 8028be8:	f7d9 feb4 	bl	8002954 <__aeabi_dmul>
 8028bec:	4a4a      	ldr	r2, [pc, #296]	@ (8028d18 <__ieee754_pow+0x3f4>)
 8028bee:	9002      	str	r0, [sp, #8]
 8028bf0:	9103      	str	r1, [sp, #12]
 8028bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8028d1c <__ieee754_pow+0x3f8>)
 8028bf4:	0030      	movs	r0, r6
 8028bf6:	0039      	movs	r1, r7
 8028bf8:	f7d9 feac 	bl	8002954 <__aeabi_dmul>
 8028bfc:	2200      	movs	r2, #0
 8028bfe:	9000      	str	r0, [sp, #0]
 8028c00:	9101      	str	r1, [sp, #4]
 8028c02:	4b47      	ldr	r3, [pc, #284]	@ (8028d20 <__ieee754_pow+0x3fc>)
 8028c04:	0030      	movs	r0, r6
 8028c06:	0039      	movs	r1, r7
 8028c08:	f7d9 fea4 	bl	8002954 <__aeabi_dmul>
 8028c0c:	0002      	movs	r2, r0
 8028c0e:	000b      	movs	r3, r1
 8028c10:	4844      	ldr	r0, [pc, #272]	@ (8028d24 <__ieee754_pow+0x400>)
 8028c12:	4945      	ldr	r1, [pc, #276]	@ (8028d28 <__ieee754_pow+0x404>)
 8028c14:	f7da f984 	bl	8002f20 <__aeabi_dsub>
 8028c18:	0032      	movs	r2, r6
 8028c1a:	003b      	movs	r3, r7
 8028c1c:	f7d9 fe9a 	bl	8002954 <__aeabi_dmul>
 8028c20:	0002      	movs	r2, r0
 8028c22:	000b      	movs	r3, r1
 8028c24:	2000      	movs	r0, #0
 8028c26:	4941      	ldr	r1, [pc, #260]	@ (8028d2c <__ieee754_pow+0x408>)
 8028c28:	f7da f97a 	bl	8002f20 <__aeabi_dsub>
 8028c2c:	0032      	movs	r2, r6
 8028c2e:	0004      	movs	r4, r0
 8028c30:	000d      	movs	r5, r1
 8028c32:	003b      	movs	r3, r7
 8028c34:	0030      	movs	r0, r6
 8028c36:	0039      	movs	r1, r7
 8028c38:	f7d9 fe8c 	bl	8002954 <__aeabi_dmul>
 8028c3c:	0002      	movs	r2, r0
 8028c3e:	000b      	movs	r3, r1
 8028c40:	0020      	movs	r0, r4
 8028c42:	0029      	movs	r1, r5
 8028c44:	f7d9 fe86 	bl	8002954 <__aeabi_dmul>
 8028c48:	4a39      	ldr	r2, [pc, #228]	@ (8028d30 <__ieee754_pow+0x40c>)
 8028c4a:	4b32      	ldr	r3, [pc, #200]	@ (8028d14 <__ieee754_pow+0x3f0>)
 8028c4c:	f7d9 fe82 	bl	8002954 <__aeabi_dmul>
 8028c50:	0002      	movs	r2, r0
 8028c52:	000b      	movs	r3, r1
 8028c54:	9800      	ldr	r0, [sp, #0]
 8028c56:	9901      	ldr	r1, [sp, #4]
 8028c58:	f7da f962 	bl	8002f20 <__aeabi_dsub>
 8028c5c:	0002      	movs	r2, r0
 8028c5e:	000b      	movs	r3, r1
 8028c60:	0004      	movs	r4, r0
 8028c62:	000d      	movs	r5, r1
 8028c64:	9802      	ldr	r0, [sp, #8]
 8028c66:	9903      	ldr	r1, [sp, #12]
 8028c68:	f7d8 fe74 	bl	8001954 <__aeabi_dadd>
 8028c6c:	9a02      	ldr	r2, [sp, #8]
 8028c6e:	9b03      	ldr	r3, [sp, #12]
 8028c70:	2000      	movs	r0, #0
 8028c72:	9000      	str	r0, [sp, #0]
 8028c74:	9101      	str	r1, [sp, #4]
 8028c76:	f7da f953 	bl	8002f20 <__aeabi_dsub>
 8028c7a:	0002      	movs	r2, r0
 8028c7c:	000b      	movs	r3, r1
 8028c7e:	0020      	movs	r0, r4
 8028c80:	0029      	movs	r1, r5
 8028c82:	f7da f94d 	bl	8002f20 <__aeabi_dsub>
 8028c86:	9c04      	ldr	r4, [sp, #16]
 8028c88:	9d05      	ldr	r5, [sp, #20]
 8028c8a:	2400      	movs	r4, #0
 8028c8c:	0006      	movs	r6, r0
 8028c8e:	000f      	movs	r7, r1
 8028c90:	9804      	ldr	r0, [sp, #16]
 8028c92:	9905      	ldr	r1, [sp, #20]
 8028c94:	0022      	movs	r2, r4
 8028c96:	002b      	movs	r3, r5
 8028c98:	9402      	str	r4, [sp, #8]
 8028c9a:	9503      	str	r5, [sp, #12]
 8028c9c:	f7da f940 	bl	8002f20 <__aeabi_dsub>
 8028ca0:	9a00      	ldr	r2, [sp, #0]
 8028ca2:	9b01      	ldr	r3, [sp, #4]
 8028ca4:	f7d9 fe56 	bl	8002954 <__aeabi_dmul>
 8028ca8:	9a04      	ldr	r2, [sp, #16]
 8028caa:	9b05      	ldr	r3, [sp, #20]
 8028cac:	9008      	str	r0, [sp, #32]
 8028cae:	9109      	str	r1, [sp, #36]	@ 0x24
 8028cb0:	0030      	movs	r0, r6
 8028cb2:	0039      	movs	r1, r7
 8028cb4:	f7d9 fe4e 	bl	8002954 <__aeabi_dmul>
 8028cb8:	0002      	movs	r2, r0
 8028cba:	000b      	movs	r3, r1
 8028cbc:	9808      	ldr	r0, [sp, #32]
 8028cbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028cc0:	f7d8 fe48 	bl	8001954 <__aeabi_dadd>
 8028cc4:	0022      	movs	r2, r4
 8028cc6:	002b      	movs	r3, r5
 8028cc8:	9004      	str	r0, [sp, #16]
 8028cca:	9105      	str	r1, [sp, #20]
 8028ccc:	9800      	ldr	r0, [sp, #0]
 8028cce:	9901      	ldr	r1, [sp, #4]
 8028cd0:	f7d9 fe40 	bl	8002954 <__aeabi_dmul>
 8028cd4:	000b      	movs	r3, r1
 8028cd6:	0002      	movs	r2, r0
 8028cd8:	9000      	str	r0, [sp, #0]
 8028cda:	9101      	str	r1, [sp, #4]
 8028cdc:	9804      	ldr	r0, [sp, #16]
 8028cde:	9905      	ldr	r1, [sp, #20]
 8028ce0:	f7d8 fe38 	bl	8001954 <__aeabi_dadd>
 8028ce4:	4b13      	ldr	r3, [pc, #76]	@ (8028d34 <__ieee754_pow+0x410>)
 8028ce6:	0006      	movs	r6, r0
 8028ce8:	000f      	movs	r7, r1
 8028cea:	9108      	str	r1, [sp, #32]
 8028cec:	4299      	cmp	r1, r3
 8028cee:	dc00      	bgt.n	8028cf2 <__ieee754_pow+0x3ce>
 8028cf0:	e1c0      	b.n	8029074 <__ieee754_pow+0x750>
 8028cf2:	4b11      	ldr	r3, [pc, #68]	@ (8028d38 <__ieee754_pow+0x414>)
 8028cf4:	18cb      	adds	r3, r1, r3
 8028cf6:	4303      	orrs	r3, r0
 8028cf8:	42a3      	cmp	r3, r4
 8028cfa:	d100      	bne.n	8028cfe <__ieee754_pow+0x3da>
 8028cfc:	e1a1      	b.n	8029042 <__ieee754_pow+0x71e>
 8028cfe:	9806      	ldr	r0, [sp, #24]
 8028d00:	9907      	ldr	r1, [sp, #28]
 8028d02:	2300      	movs	r3, #0
 8028d04:	2200      	movs	r2, #0
 8028d06:	f7d7 fbd9 	bl	80004bc <__aeabi_dcmplt>
 8028d0a:	1e43      	subs	r3, r0, #1
 8028d0c:	4198      	sbcs	r0, r3
 8028d0e:	e723      	b.n	8028b58 <__ieee754_pow+0x234>
 8028d10:	3ff00000 	.word	0x3ff00000
 8028d14:	3ff71547 	.word	0x3ff71547
 8028d18:	f85ddf44 	.word	0xf85ddf44
 8028d1c:	3e54ae0b 	.word	0x3e54ae0b
 8028d20:	3fd00000 	.word	0x3fd00000
 8028d24:	55555555 	.word	0x55555555
 8028d28:	3fd55555 	.word	0x3fd55555
 8028d2c:	3fe00000 	.word	0x3fe00000
 8028d30:	652b82fe 	.word	0x652b82fe
 8028d34:	408fffff 	.word	0x408fffff
 8028d38:	bf700000 	.word	0xbf700000
 8028d3c:	4bdc      	ldr	r3, [pc, #880]	@ (80290b0 <__ieee754_pow+0x78c>)
 8028d3e:	9903      	ldr	r1, [sp, #12]
 8028d40:	2200      	movs	r2, #0
 8028d42:	420b      	tst	r3, r1
 8028d44:	d10b      	bne.n	8028d5e <__ieee754_pow+0x43a>
 8028d46:	9800      	ldr	r0, [sp, #0]
 8028d48:	9901      	ldr	r1, [sp, #4]
 8028d4a:	2200      	movs	r2, #0
 8028d4c:	4bd9      	ldr	r3, [pc, #868]	@ (80290b4 <__ieee754_pow+0x790>)
 8028d4e:	f7d9 fe01 	bl	8002954 <__aeabi_dmul>
 8028d52:	2235      	movs	r2, #53	@ 0x35
 8028d54:	9000      	str	r0, [sp, #0]
 8028d56:	9101      	str	r1, [sp, #4]
 8028d58:	9b01      	ldr	r3, [sp, #4]
 8028d5a:	4252      	negs	r2, r2
 8028d5c:	9308      	str	r3, [sp, #32]
 8028d5e:	9b08      	ldr	r3, [sp, #32]
 8028d60:	49d5      	ldr	r1, [pc, #852]	@ (80290b8 <__ieee754_pow+0x794>)
 8028d62:	151b      	asrs	r3, r3, #20
 8028d64:	185b      	adds	r3, r3, r1
 8028d66:	189b      	adds	r3, r3, r2
 8028d68:	930e      	str	r3, [sp, #56]	@ 0x38
 8028d6a:	9b08      	ldr	r3, [sp, #32]
 8028d6c:	4dd3      	ldr	r5, [pc, #844]	@ (80290bc <__ieee754_pow+0x798>)
 8028d6e:	031b      	lsls	r3, r3, #12
 8028d70:	4ad3      	ldr	r2, [pc, #844]	@ (80290c0 <__ieee754_pow+0x79c>)
 8028d72:	0b1b      	lsrs	r3, r3, #12
 8028d74:	2600      	movs	r6, #0
 8028d76:	431d      	orrs	r5, r3
 8028d78:	4293      	cmp	r3, r2
 8028d7a:	dd09      	ble.n	8028d90 <__ieee754_pow+0x46c>
 8028d7c:	4ad1      	ldr	r2, [pc, #836]	@ (80290c4 <__ieee754_pow+0x7a0>)
 8028d7e:	3601      	adds	r6, #1
 8028d80:	4293      	cmp	r3, r2
 8028d82:	dd05      	ble.n	8028d90 <__ieee754_pow+0x46c>
 8028d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028d86:	199b      	adds	r3, r3, r6
 8028d88:	2600      	movs	r6, #0
 8028d8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8028d8c:	4bce      	ldr	r3, [pc, #824]	@ (80290c8 <__ieee754_pow+0x7a4>)
 8028d8e:	18ed      	adds	r5, r5, r3
 8028d90:	9800      	ldr	r0, [sp, #0]
 8028d92:	9901      	ldr	r1, [sp, #4]
 8028d94:	0029      	movs	r1, r5
 8028d96:	4bcd      	ldr	r3, [pc, #820]	@ (80290cc <__ieee754_pow+0x7a8>)
 8028d98:	00f2      	lsls	r2, r6, #3
 8028d9a:	189b      	adds	r3, r3, r2
 8028d9c:	685c      	ldr	r4, [r3, #4]
 8028d9e:	681b      	ldr	r3, [r3, #0]
 8028da0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8028da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8028da4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028da6:	001a      	movs	r2, r3
 8028da8:	0023      	movs	r3, r4
 8028daa:	900c      	str	r0, [sp, #48]	@ 0x30
 8028dac:	910d      	str	r1, [sp, #52]	@ 0x34
 8028dae:	f7da f8b7 	bl	8002f20 <__aeabi_dsub>
 8028db2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028db4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028db6:	9010      	str	r0, [sp, #64]	@ 0x40
 8028db8:	9111      	str	r1, [sp, #68]	@ 0x44
 8028dba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028dbe:	f7d8 fdc9 	bl	8001954 <__aeabi_dadd>
 8028dc2:	0002      	movs	r2, r0
 8028dc4:	000b      	movs	r3, r1
 8028dc6:	2000      	movs	r0, #0
 8028dc8:	49bc      	ldr	r1, [pc, #752]	@ (80290bc <__ieee754_pow+0x798>)
 8028dca:	f7d9 f989 	bl	80020e0 <__aeabi_ddiv>
 8028dce:	0002      	movs	r2, r0
 8028dd0:	000b      	movs	r3, r1
 8028dd2:	9012      	str	r0, [sp, #72]	@ 0x48
 8028dd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8028dd6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028dd8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028dda:	f7d9 fdbb 	bl	8002954 <__aeabi_dmul>
 8028dde:	9008      	str	r0, [sp, #32]
 8028de0:	9109      	str	r1, [sp, #36]	@ 0x24
 8028de2:	9b08      	ldr	r3, [sp, #32]
 8028de4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028de6:	2180      	movs	r1, #128	@ 0x80
 8028de8:	9302      	str	r3, [sp, #8]
 8028dea:	9403      	str	r4, [sp, #12]
 8028dec:	2080      	movs	r0, #128	@ 0x80
 8028dee:	2300      	movs	r3, #0
 8028df0:	2200      	movs	r2, #0
 8028df2:	106d      	asrs	r5, r5, #1
 8028df4:	0589      	lsls	r1, r1, #22
 8028df6:	9302      	str	r3, [sp, #8]
 8028df8:	4329      	orrs	r1, r5
 8028dfa:	0300      	lsls	r0, r0, #12
 8028dfc:	9b02      	ldr	r3, [sp, #8]
 8028dfe:	9c03      	ldr	r4, [sp, #12]
 8028e00:	1809      	adds	r1, r1, r0
 8028e02:	9300      	str	r3, [sp, #0]
 8028e04:	9401      	str	r4, [sp, #4]
 8028e06:	04b6      	lsls	r6, r6, #18
 8028e08:	198b      	adds	r3, r1, r6
 8028e0a:	9800      	ldr	r0, [sp, #0]
 8028e0c:	9901      	ldr	r1, [sp, #4]
 8028e0e:	0014      	movs	r4, r2
 8028e10:	001d      	movs	r5, r3
 8028e12:	f7d9 fd9f 	bl	8002954 <__aeabi_dmul>
 8028e16:	0002      	movs	r2, r0
 8028e18:	000b      	movs	r3, r1
 8028e1a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028e1c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028e1e:	f7da f87f 	bl	8002f20 <__aeabi_dsub>
 8028e22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e26:	0006      	movs	r6, r0
 8028e28:	000f      	movs	r7, r1
 8028e2a:	0020      	movs	r0, r4
 8028e2c:	0029      	movs	r1, r5
 8028e2e:	f7da f877 	bl	8002f20 <__aeabi_dsub>
 8028e32:	0002      	movs	r2, r0
 8028e34:	000b      	movs	r3, r1
 8028e36:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028e38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028e3a:	f7da f871 	bl	8002f20 <__aeabi_dsub>
 8028e3e:	9a00      	ldr	r2, [sp, #0]
 8028e40:	9b01      	ldr	r3, [sp, #4]
 8028e42:	f7d9 fd87 	bl	8002954 <__aeabi_dmul>
 8028e46:	0002      	movs	r2, r0
 8028e48:	000b      	movs	r3, r1
 8028e4a:	0030      	movs	r0, r6
 8028e4c:	0039      	movs	r1, r7
 8028e4e:	f7da f867 	bl	8002f20 <__aeabi_dsub>
 8028e52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028e56:	f7d9 fd7d 	bl	8002954 <__aeabi_dmul>
 8028e5a:	9a08      	ldr	r2, [sp, #32]
 8028e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028e5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8028e60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028e62:	0010      	movs	r0, r2
 8028e64:	0019      	movs	r1, r3
 8028e66:	f7d9 fd75 	bl	8002954 <__aeabi_dmul>
 8028e6a:	0006      	movs	r6, r0
 8028e6c:	000f      	movs	r7, r1
 8028e6e:	4a98      	ldr	r2, [pc, #608]	@ (80290d0 <__ieee754_pow+0x7ac>)
 8028e70:	4b98      	ldr	r3, [pc, #608]	@ (80290d4 <__ieee754_pow+0x7b0>)
 8028e72:	f7d9 fd6f 	bl	8002954 <__aeabi_dmul>
 8028e76:	4a98      	ldr	r2, [pc, #608]	@ (80290d8 <__ieee754_pow+0x7b4>)
 8028e78:	4b98      	ldr	r3, [pc, #608]	@ (80290dc <__ieee754_pow+0x7b8>)
 8028e7a:	f7d8 fd6b 	bl	8001954 <__aeabi_dadd>
 8028e7e:	0032      	movs	r2, r6
 8028e80:	003b      	movs	r3, r7
 8028e82:	f7d9 fd67 	bl	8002954 <__aeabi_dmul>
 8028e86:	4a96      	ldr	r2, [pc, #600]	@ (80290e0 <__ieee754_pow+0x7bc>)
 8028e88:	4b96      	ldr	r3, [pc, #600]	@ (80290e4 <__ieee754_pow+0x7c0>)
 8028e8a:	f7d8 fd63 	bl	8001954 <__aeabi_dadd>
 8028e8e:	0032      	movs	r2, r6
 8028e90:	003b      	movs	r3, r7
 8028e92:	f7d9 fd5f 	bl	8002954 <__aeabi_dmul>
 8028e96:	4a94      	ldr	r2, [pc, #592]	@ (80290e8 <__ieee754_pow+0x7c4>)
 8028e98:	4b94      	ldr	r3, [pc, #592]	@ (80290ec <__ieee754_pow+0x7c8>)
 8028e9a:	f7d8 fd5b 	bl	8001954 <__aeabi_dadd>
 8028e9e:	0032      	movs	r2, r6
 8028ea0:	003b      	movs	r3, r7
 8028ea2:	f7d9 fd57 	bl	8002954 <__aeabi_dmul>
 8028ea6:	4a92      	ldr	r2, [pc, #584]	@ (80290f0 <__ieee754_pow+0x7cc>)
 8028ea8:	4b92      	ldr	r3, [pc, #584]	@ (80290f4 <__ieee754_pow+0x7d0>)
 8028eaa:	f7d8 fd53 	bl	8001954 <__aeabi_dadd>
 8028eae:	0032      	movs	r2, r6
 8028eb0:	003b      	movs	r3, r7
 8028eb2:	f7d9 fd4f 	bl	8002954 <__aeabi_dmul>
 8028eb6:	4a90      	ldr	r2, [pc, #576]	@ (80290f8 <__ieee754_pow+0x7d4>)
 8028eb8:	4b90      	ldr	r3, [pc, #576]	@ (80290fc <__ieee754_pow+0x7d8>)
 8028eba:	f7d8 fd4b 	bl	8001954 <__aeabi_dadd>
 8028ebe:	0032      	movs	r2, r6
 8028ec0:	0004      	movs	r4, r0
 8028ec2:	000d      	movs	r5, r1
 8028ec4:	003b      	movs	r3, r7
 8028ec6:	0030      	movs	r0, r6
 8028ec8:	0039      	movs	r1, r7
 8028eca:	f7d9 fd43 	bl	8002954 <__aeabi_dmul>
 8028ece:	0002      	movs	r2, r0
 8028ed0:	000b      	movs	r3, r1
 8028ed2:	0020      	movs	r0, r4
 8028ed4:	0029      	movs	r1, r5
 8028ed6:	f7d9 fd3d 	bl	8002954 <__aeabi_dmul>
 8028eda:	9a00      	ldr	r2, [sp, #0]
 8028edc:	9b01      	ldr	r3, [sp, #4]
 8028ede:	0004      	movs	r4, r0
 8028ee0:	000d      	movs	r5, r1
 8028ee2:	9808      	ldr	r0, [sp, #32]
 8028ee4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028ee6:	f7d8 fd35 	bl	8001954 <__aeabi_dadd>
 8028eea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028eee:	f7d9 fd31 	bl	8002954 <__aeabi_dmul>
 8028ef2:	0022      	movs	r2, r4
 8028ef4:	002b      	movs	r3, r5
 8028ef6:	f7d8 fd2d 	bl	8001954 <__aeabi_dadd>
 8028efa:	9a00      	ldr	r2, [sp, #0]
 8028efc:	9b01      	ldr	r3, [sp, #4]
 8028efe:	900c      	str	r0, [sp, #48]	@ 0x30
 8028f00:	910d      	str	r1, [sp, #52]	@ 0x34
 8028f02:	0010      	movs	r0, r2
 8028f04:	0019      	movs	r1, r3
 8028f06:	f7d9 fd25 	bl	8002954 <__aeabi_dmul>
 8028f0a:	2200      	movs	r2, #0
 8028f0c:	4b7c      	ldr	r3, [pc, #496]	@ (8029100 <__ieee754_pow+0x7dc>)
 8028f0e:	0004      	movs	r4, r0
 8028f10:	000d      	movs	r5, r1
 8028f12:	f7d8 fd1f 	bl	8001954 <__aeabi_dadd>
 8028f16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028f18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028f1a:	f7d8 fd1b 	bl	8001954 <__aeabi_dadd>
 8028f1e:	2000      	movs	r0, #0
 8028f20:	000f      	movs	r7, r1
 8028f22:	0006      	movs	r6, r0
 8028f24:	0002      	movs	r2, r0
 8028f26:	000b      	movs	r3, r1
 8028f28:	9800      	ldr	r0, [sp, #0]
 8028f2a:	9901      	ldr	r1, [sp, #4]
 8028f2c:	f7d9 fd12 	bl	8002954 <__aeabi_dmul>
 8028f30:	2200      	movs	r2, #0
 8028f32:	9000      	str	r0, [sp, #0]
 8028f34:	9101      	str	r1, [sp, #4]
 8028f36:	4b72      	ldr	r3, [pc, #456]	@ (8029100 <__ieee754_pow+0x7dc>)
 8028f38:	0030      	movs	r0, r6
 8028f3a:	0039      	movs	r1, r7
 8028f3c:	f7d9 fff0 	bl	8002f20 <__aeabi_dsub>
 8028f40:	0022      	movs	r2, r4
 8028f42:	002b      	movs	r3, r5
 8028f44:	f7d9 ffec 	bl	8002f20 <__aeabi_dsub>
 8028f48:	0002      	movs	r2, r0
 8028f4a:	000b      	movs	r3, r1
 8028f4c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028f4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028f50:	f7d9 ffe6 	bl	8002f20 <__aeabi_dsub>
 8028f54:	9a08      	ldr	r2, [sp, #32]
 8028f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028f58:	f7d9 fcfc 	bl	8002954 <__aeabi_dmul>
 8028f5c:	0032      	movs	r2, r6
 8028f5e:	0004      	movs	r4, r0
 8028f60:	000d      	movs	r5, r1
 8028f62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028f64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028f66:	003b      	movs	r3, r7
 8028f68:	f7d9 fcf4 	bl	8002954 <__aeabi_dmul>
 8028f6c:	0002      	movs	r2, r0
 8028f6e:	000b      	movs	r3, r1
 8028f70:	0020      	movs	r0, r4
 8028f72:	0029      	movs	r1, r5
 8028f74:	f7d8 fcee 	bl	8001954 <__aeabi_dadd>
 8028f78:	0004      	movs	r4, r0
 8028f7a:	000d      	movs	r5, r1
 8028f7c:	0002      	movs	r2, r0
 8028f7e:	000b      	movs	r3, r1
 8028f80:	9800      	ldr	r0, [sp, #0]
 8028f82:	9901      	ldr	r1, [sp, #4]
 8028f84:	f7d8 fce6 	bl	8001954 <__aeabi_dadd>
 8028f88:	22e0      	movs	r2, #224	@ 0xe0
 8028f8a:	2000      	movs	r0, #0
 8028f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8029104 <__ieee754_pow+0x7e0>)
 8028f8e:	0612      	lsls	r2, r2, #24
 8028f90:	0006      	movs	r6, r0
 8028f92:	000f      	movs	r7, r1
 8028f94:	f7d9 fcde 	bl	8002954 <__aeabi_dmul>
 8028f98:	9008      	str	r0, [sp, #32]
 8028f9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8028f9c:	9a00      	ldr	r2, [sp, #0]
 8028f9e:	9b01      	ldr	r3, [sp, #4]
 8028fa0:	0030      	movs	r0, r6
 8028fa2:	0039      	movs	r1, r7
 8028fa4:	f7d9 ffbc 	bl	8002f20 <__aeabi_dsub>
 8028fa8:	0002      	movs	r2, r0
 8028faa:	000b      	movs	r3, r1
 8028fac:	0020      	movs	r0, r4
 8028fae:	0029      	movs	r1, r5
 8028fb0:	f7d9 ffb6 	bl	8002f20 <__aeabi_dsub>
 8028fb4:	4a54      	ldr	r2, [pc, #336]	@ (8029108 <__ieee754_pow+0x7e4>)
 8028fb6:	4b53      	ldr	r3, [pc, #332]	@ (8029104 <__ieee754_pow+0x7e0>)
 8028fb8:	f7d9 fccc 	bl	8002954 <__aeabi_dmul>
 8028fbc:	4a53      	ldr	r2, [pc, #332]	@ (802910c <__ieee754_pow+0x7e8>)
 8028fbe:	0004      	movs	r4, r0
 8028fc0:	000d      	movs	r5, r1
 8028fc2:	0030      	movs	r0, r6
 8028fc4:	0039      	movs	r1, r7
 8028fc6:	4b52      	ldr	r3, [pc, #328]	@ (8029110 <__ieee754_pow+0x7ec>)
 8028fc8:	f7d9 fcc4 	bl	8002954 <__aeabi_dmul>
 8028fcc:	0002      	movs	r2, r0
 8028fce:	000b      	movs	r3, r1
 8028fd0:	0020      	movs	r0, r4
 8028fd2:	0029      	movs	r1, r5
 8028fd4:	f7d8 fcbe 	bl	8001954 <__aeabi_dadd>
 8028fd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028fda:	4b4e      	ldr	r3, [pc, #312]	@ (8029114 <__ieee754_pow+0x7f0>)
 8028fdc:	189b      	adds	r3, r3, r2
 8028fde:	681a      	ldr	r2, [r3, #0]
 8028fe0:	685b      	ldr	r3, [r3, #4]
 8028fe2:	f7d8 fcb7 	bl	8001954 <__aeabi_dadd>
 8028fe6:	900a      	str	r0, [sp, #40]	@ 0x28
 8028fe8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028fea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028fec:	f7da fc00 	bl	80037f0 <__aeabi_i2d>
 8028ff0:	0004      	movs	r4, r0
 8028ff2:	000d      	movs	r5, r1
 8028ff4:	9808      	ldr	r0, [sp, #32]
 8028ff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028ff8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028ffa:	4b47      	ldr	r3, [pc, #284]	@ (8029118 <__ieee754_pow+0x7f4>)
 8028ffc:	189b      	adds	r3, r3, r2
 8028ffe:	681e      	ldr	r6, [r3, #0]
 8029000:	685f      	ldr	r7, [r3, #4]
 8029002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029006:	f7d8 fca5 	bl	8001954 <__aeabi_dadd>
 802900a:	0032      	movs	r2, r6
 802900c:	003b      	movs	r3, r7
 802900e:	f7d8 fca1 	bl	8001954 <__aeabi_dadd>
 8029012:	0022      	movs	r2, r4
 8029014:	002b      	movs	r3, r5
 8029016:	f7d8 fc9d 	bl	8001954 <__aeabi_dadd>
 802901a:	2000      	movs	r0, #0
 802901c:	0022      	movs	r2, r4
 802901e:	002b      	movs	r3, r5
 8029020:	9000      	str	r0, [sp, #0]
 8029022:	9101      	str	r1, [sp, #4]
 8029024:	f7d9 ff7c 	bl	8002f20 <__aeabi_dsub>
 8029028:	0032      	movs	r2, r6
 802902a:	003b      	movs	r3, r7
 802902c:	f7d9 ff78 	bl	8002f20 <__aeabi_dsub>
 8029030:	9a08      	ldr	r2, [sp, #32]
 8029032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029034:	f7d9 ff74 	bl	8002f20 <__aeabi_dsub>
 8029038:	0002      	movs	r2, r0
 802903a:	000b      	movs	r3, r1
 802903c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802903e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029040:	e61f      	b.n	8028c82 <__ieee754_pow+0x35e>
 8029042:	4a36      	ldr	r2, [pc, #216]	@ (802911c <__ieee754_pow+0x7f8>)
 8029044:	4b36      	ldr	r3, [pc, #216]	@ (8029120 <__ieee754_pow+0x7fc>)
 8029046:	9804      	ldr	r0, [sp, #16]
 8029048:	9905      	ldr	r1, [sp, #20]
 802904a:	f7d8 fc83 	bl	8001954 <__aeabi_dadd>
 802904e:	9a00      	ldr	r2, [sp, #0]
 8029050:	9b01      	ldr	r3, [sp, #4]
 8029052:	0004      	movs	r4, r0
 8029054:	000d      	movs	r5, r1
 8029056:	0030      	movs	r0, r6
 8029058:	0039      	movs	r1, r7
 802905a:	f7d9 ff61 	bl	8002f20 <__aeabi_dsub>
 802905e:	0002      	movs	r2, r0
 8029060:	000b      	movs	r3, r1
 8029062:	0020      	movs	r0, r4
 8029064:	0029      	movs	r1, r5
 8029066:	f7d7 fa3d 	bl	80004e4 <__aeabi_dcmpgt>
 802906a:	2800      	cmp	r0, #0
 802906c:	d000      	beq.n	8029070 <__ieee754_pow+0x74c>
 802906e:	e646      	b.n	8028cfe <__ieee754_pow+0x3da>
 8029070:	4b2c      	ldr	r3, [pc, #176]	@ (8029124 <__ieee754_pow+0x800>)
 8029072:	e063      	b.n	802913c <__ieee754_pow+0x818>
 8029074:	4a2c      	ldr	r2, [pc, #176]	@ (8029128 <__ieee754_pow+0x804>)
 8029076:	004b      	lsls	r3, r1, #1
 8029078:	085b      	lsrs	r3, r3, #1
 802907a:	4293      	cmp	r3, r2
 802907c:	d95a      	bls.n	8029134 <__ieee754_pow+0x810>
 802907e:	4b2b      	ldr	r3, [pc, #172]	@ (802912c <__ieee754_pow+0x808>)
 8029080:	18cb      	adds	r3, r1, r3
 8029082:	4303      	orrs	r3, r0
 8029084:	d008      	beq.n	8029098 <__ieee754_pow+0x774>
 8029086:	9806      	ldr	r0, [sp, #24]
 8029088:	9907      	ldr	r1, [sp, #28]
 802908a:	2300      	movs	r3, #0
 802908c:	2200      	movs	r2, #0
 802908e:	f7d7 fa15 	bl	80004bc <__aeabi_dcmplt>
 8029092:	1e43      	subs	r3, r0, #1
 8029094:	4198      	sbcs	r0, r3
 8029096:	e567      	b.n	8028b68 <__ieee754_pow+0x244>
 8029098:	9a00      	ldr	r2, [sp, #0]
 802909a:	9b01      	ldr	r3, [sp, #4]
 802909c:	f7d9 ff40 	bl	8002f20 <__aeabi_dsub>
 80290a0:	9a04      	ldr	r2, [sp, #16]
 80290a2:	9b05      	ldr	r3, [sp, #20]
 80290a4:	f7d7 fa28 	bl	80004f8 <__aeabi_dcmpge>
 80290a8:	2800      	cmp	r0, #0
 80290aa:	d1ec      	bne.n	8029086 <__ieee754_pow+0x762>
 80290ac:	4b20      	ldr	r3, [pc, #128]	@ (8029130 <__ieee754_pow+0x80c>)
 80290ae:	e045      	b.n	802913c <__ieee754_pow+0x818>
 80290b0:	7ff00000 	.word	0x7ff00000
 80290b4:	43400000 	.word	0x43400000
 80290b8:	fffffc01 	.word	0xfffffc01
 80290bc:	3ff00000 	.word	0x3ff00000
 80290c0:	0003988e 	.word	0x0003988e
 80290c4:	000bb679 	.word	0x000bb679
 80290c8:	fff00000 	.word	0xfff00000
 80290cc:	0802e5e0 	.word	0x0802e5e0
 80290d0:	4a454eef 	.word	0x4a454eef
 80290d4:	3fca7e28 	.word	0x3fca7e28
 80290d8:	93c9db65 	.word	0x93c9db65
 80290dc:	3fcd864a 	.word	0x3fcd864a
 80290e0:	a91d4101 	.word	0xa91d4101
 80290e4:	3fd17460 	.word	0x3fd17460
 80290e8:	518f264d 	.word	0x518f264d
 80290ec:	3fd55555 	.word	0x3fd55555
 80290f0:	db6fabff 	.word	0xdb6fabff
 80290f4:	3fdb6db6 	.word	0x3fdb6db6
 80290f8:	33333303 	.word	0x33333303
 80290fc:	3fe33333 	.word	0x3fe33333
 8029100:	40080000 	.word	0x40080000
 8029104:	3feec709 	.word	0x3feec709
 8029108:	dc3a03fd 	.word	0xdc3a03fd
 802910c:	145b01f5 	.word	0x145b01f5
 8029110:	be3e2fe0 	.word	0xbe3e2fe0
 8029114:	0802e5c0 	.word	0x0802e5c0
 8029118:	0802e5d0 	.word	0x0802e5d0
 802911c:	652b82fe 	.word	0x652b82fe
 8029120:	3c971547 	.word	0x3c971547
 8029124:	40900000 	.word	0x40900000
 8029128:	4090cbff 	.word	0x4090cbff
 802912c:	3f6f3400 	.word	0x3f6f3400
 8029130:	4090cc00 	.word	0x4090cc00
 8029134:	4a73      	ldr	r2, [pc, #460]	@ (8029304 <__ieee754_pow+0x9e0>)
 8029136:	9402      	str	r4, [sp, #8]
 8029138:	4293      	cmp	r3, r2
 802913a:	d925      	bls.n	8029188 <__ieee754_pow+0x864>
 802913c:	4a72      	ldr	r2, [pc, #456]	@ (8029308 <__ieee754_pow+0x9e4>)
 802913e:	151b      	asrs	r3, r3, #20
 8029140:	189b      	adds	r3, r3, r2
 8029142:	2280      	movs	r2, #128	@ 0x80
 8029144:	0352      	lsls	r2, r2, #13
 8029146:	0011      	movs	r1, r2
 8029148:	4119      	asrs	r1, r3
 802914a:	19cb      	adds	r3, r1, r7
 802914c:	005c      	lsls	r4, r3, #1
 802914e:	496f      	ldr	r1, [pc, #444]	@ (802930c <__ieee754_pow+0x9e8>)
 8029150:	4d6f      	ldr	r5, [pc, #444]	@ (8029310 <__ieee754_pow+0x9ec>)
 8029152:	0d64      	lsrs	r4, r4, #21
 8029154:	1864      	adds	r4, r4, r1
 8029156:	4125      	asrs	r5, r4
 8029158:	401d      	ands	r5, r3
 802915a:	031b      	lsls	r3, r3, #12
 802915c:	0b1b      	lsrs	r3, r3, #12
 802915e:	4313      	orrs	r3, r2
 8029160:	2214      	movs	r2, #20
 8029162:	1b12      	subs	r2, r2, r4
 8029164:	4113      	asrs	r3, r2
 8029166:	9302      	str	r3, [sp, #8]
 8029168:	9b08      	ldr	r3, [sp, #32]
 802916a:	2000      	movs	r0, #0
 802916c:	0029      	movs	r1, r5
 802916e:	2b00      	cmp	r3, #0
 8029170:	da02      	bge.n	8029178 <__ieee754_pow+0x854>
 8029172:	9b02      	ldr	r3, [sp, #8]
 8029174:	425b      	negs	r3, r3
 8029176:	9302      	str	r3, [sp, #8]
 8029178:	0002      	movs	r2, r0
 802917a:	000b      	movs	r3, r1
 802917c:	9800      	ldr	r0, [sp, #0]
 802917e:	9901      	ldr	r1, [sp, #4]
 8029180:	f7d9 fece 	bl	8002f20 <__aeabi_dsub>
 8029184:	9000      	str	r0, [sp, #0]
 8029186:	9101      	str	r1, [sp, #4]
 8029188:	9a04      	ldr	r2, [sp, #16]
 802918a:	9b05      	ldr	r3, [sp, #20]
 802918c:	9800      	ldr	r0, [sp, #0]
 802918e:	9901      	ldr	r1, [sp, #4]
 8029190:	f7d8 fbe0 	bl	8001954 <__aeabi_dadd>
 8029194:	2000      	movs	r0, #0
 8029196:	2200      	movs	r2, #0
 8029198:	4b5e      	ldr	r3, [pc, #376]	@ (8029314 <__ieee754_pow+0x9f0>)
 802919a:	0006      	movs	r6, r0
 802919c:	000f      	movs	r7, r1
 802919e:	f7d9 fbd9 	bl	8002954 <__aeabi_dmul>
 80291a2:	9a00      	ldr	r2, [sp, #0]
 80291a4:	9b01      	ldr	r3, [sp, #4]
 80291a6:	9008      	str	r0, [sp, #32]
 80291a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80291aa:	0030      	movs	r0, r6
 80291ac:	0039      	movs	r1, r7
 80291ae:	f7d9 feb7 	bl	8002f20 <__aeabi_dsub>
 80291b2:	0002      	movs	r2, r0
 80291b4:	000b      	movs	r3, r1
 80291b6:	9804      	ldr	r0, [sp, #16]
 80291b8:	9905      	ldr	r1, [sp, #20]
 80291ba:	f7d9 feb1 	bl	8002f20 <__aeabi_dsub>
 80291be:	4a56      	ldr	r2, [pc, #344]	@ (8029318 <__ieee754_pow+0x9f4>)
 80291c0:	4b56      	ldr	r3, [pc, #344]	@ (802931c <__ieee754_pow+0x9f8>)
 80291c2:	f7d9 fbc7 	bl	8002954 <__aeabi_dmul>
 80291c6:	4a56      	ldr	r2, [pc, #344]	@ (8029320 <__ieee754_pow+0x9fc>)
 80291c8:	0004      	movs	r4, r0
 80291ca:	000d      	movs	r5, r1
 80291cc:	0030      	movs	r0, r6
 80291ce:	0039      	movs	r1, r7
 80291d0:	4b54      	ldr	r3, [pc, #336]	@ (8029324 <__ieee754_pow+0xa00>)
 80291d2:	f7d9 fbbf 	bl	8002954 <__aeabi_dmul>
 80291d6:	0002      	movs	r2, r0
 80291d8:	000b      	movs	r3, r1
 80291da:	0020      	movs	r0, r4
 80291dc:	0029      	movs	r1, r5
 80291de:	f7d8 fbb9 	bl	8001954 <__aeabi_dadd>
 80291e2:	0004      	movs	r4, r0
 80291e4:	000d      	movs	r5, r1
 80291e6:	0002      	movs	r2, r0
 80291e8:	000b      	movs	r3, r1
 80291ea:	9808      	ldr	r0, [sp, #32]
 80291ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80291ee:	f7d8 fbb1 	bl	8001954 <__aeabi_dadd>
 80291f2:	9a08      	ldr	r2, [sp, #32]
 80291f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80291f6:	0006      	movs	r6, r0
 80291f8:	000f      	movs	r7, r1
 80291fa:	f7d9 fe91 	bl	8002f20 <__aeabi_dsub>
 80291fe:	0002      	movs	r2, r0
 8029200:	000b      	movs	r3, r1
 8029202:	0020      	movs	r0, r4
 8029204:	0029      	movs	r1, r5
 8029206:	f7d9 fe8b 	bl	8002f20 <__aeabi_dsub>
 802920a:	0032      	movs	r2, r6
 802920c:	9000      	str	r0, [sp, #0]
 802920e:	9101      	str	r1, [sp, #4]
 8029210:	003b      	movs	r3, r7
 8029212:	0030      	movs	r0, r6
 8029214:	0039      	movs	r1, r7
 8029216:	f7d9 fb9d 	bl	8002954 <__aeabi_dmul>
 802921a:	0004      	movs	r4, r0
 802921c:	000d      	movs	r5, r1
 802921e:	4a42      	ldr	r2, [pc, #264]	@ (8029328 <__ieee754_pow+0xa04>)
 8029220:	4b42      	ldr	r3, [pc, #264]	@ (802932c <__ieee754_pow+0xa08>)
 8029222:	f7d9 fb97 	bl	8002954 <__aeabi_dmul>
 8029226:	4a42      	ldr	r2, [pc, #264]	@ (8029330 <__ieee754_pow+0xa0c>)
 8029228:	4b42      	ldr	r3, [pc, #264]	@ (8029334 <__ieee754_pow+0xa10>)
 802922a:	f7d9 fe79 	bl	8002f20 <__aeabi_dsub>
 802922e:	0022      	movs	r2, r4
 8029230:	002b      	movs	r3, r5
 8029232:	f7d9 fb8f 	bl	8002954 <__aeabi_dmul>
 8029236:	4a40      	ldr	r2, [pc, #256]	@ (8029338 <__ieee754_pow+0xa14>)
 8029238:	4b40      	ldr	r3, [pc, #256]	@ (802933c <__ieee754_pow+0xa18>)
 802923a:	f7d8 fb8b 	bl	8001954 <__aeabi_dadd>
 802923e:	0022      	movs	r2, r4
 8029240:	002b      	movs	r3, r5
 8029242:	f7d9 fb87 	bl	8002954 <__aeabi_dmul>
 8029246:	4a3e      	ldr	r2, [pc, #248]	@ (8029340 <__ieee754_pow+0xa1c>)
 8029248:	4b3e      	ldr	r3, [pc, #248]	@ (8029344 <__ieee754_pow+0xa20>)
 802924a:	f7d9 fe69 	bl	8002f20 <__aeabi_dsub>
 802924e:	0022      	movs	r2, r4
 8029250:	002b      	movs	r3, r5
 8029252:	f7d9 fb7f 	bl	8002954 <__aeabi_dmul>
 8029256:	4a3c      	ldr	r2, [pc, #240]	@ (8029348 <__ieee754_pow+0xa24>)
 8029258:	4b3c      	ldr	r3, [pc, #240]	@ (802934c <__ieee754_pow+0xa28>)
 802925a:	f7d8 fb7b 	bl	8001954 <__aeabi_dadd>
 802925e:	0022      	movs	r2, r4
 8029260:	002b      	movs	r3, r5
 8029262:	f7d9 fb77 	bl	8002954 <__aeabi_dmul>
 8029266:	0002      	movs	r2, r0
 8029268:	000b      	movs	r3, r1
 802926a:	0030      	movs	r0, r6
 802926c:	0039      	movs	r1, r7
 802926e:	f7d9 fe57 	bl	8002f20 <__aeabi_dsub>
 8029272:	0004      	movs	r4, r0
 8029274:	000d      	movs	r5, r1
 8029276:	0002      	movs	r2, r0
 8029278:	000b      	movs	r3, r1
 802927a:	0030      	movs	r0, r6
 802927c:	0039      	movs	r1, r7
 802927e:	f7d9 fb69 	bl	8002954 <__aeabi_dmul>
 8029282:	2380      	movs	r3, #128	@ 0x80
 8029284:	9004      	str	r0, [sp, #16]
 8029286:	9105      	str	r1, [sp, #20]
 8029288:	2200      	movs	r2, #0
 802928a:	0020      	movs	r0, r4
 802928c:	0029      	movs	r1, r5
 802928e:	05db      	lsls	r3, r3, #23
 8029290:	f7d9 fe46 	bl	8002f20 <__aeabi_dsub>
 8029294:	0002      	movs	r2, r0
 8029296:	000b      	movs	r3, r1
 8029298:	9804      	ldr	r0, [sp, #16]
 802929a:	9905      	ldr	r1, [sp, #20]
 802929c:	f7d8 ff20 	bl	80020e0 <__aeabi_ddiv>
 80292a0:	9a00      	ldr	r2, [sp, #0]
 80292a2:	9b01      	ldr	r3, [sp, #4]
 80292a4:	0004      	movs	r4, r0
 80292a6:	000d      	movs	r5, r1
 80292a8:	0030      	movs	r0, r6
 80292aa:	0039      	movs	r1, r7
 80292ac:	f7d9 fb52 	bl	8002954 <__aeabi_dmul>
 80292b0:	9a00      	ldr	r2, [sp, #0]
 80292b2:	9b01      	ldr	r3, [sp, #4]
 80292b4:	f7d8 fb4e 	bl	8001954 <__aeabi_dadd>
 80292b8:	0002      	movs	r2, r0
 80292ba:	000b      	movs	r3, r1
 80292bc:	0020      	movs	r0, r4
 80292be:	0029      	movs	r1, r5
 80292c0:	f7d9 fe2e 	bl	8002f20 <__aeabi_dsub>
 80292c4:	0032      	movs	r2, r6
 80292c6:	003b      	movs	r3, r7
 80292c8:	f7d9 fe2a 	bl	8002f20 <__aeabi_dsub>
 80292cc:	0002      	movs	r2, r0
 80292ce:	000b      	movs	r3, r1
 80292d0:	2000      	movs	r0, #0
 80292d2:	491f      	ldr	r1, [pc, #124]	@ (8029350 <__ieee754_pow+0xa2c>)
 80292d4:	f7d9 fe24 	bl	8002f20 <__aeabi_dsub>
 80292d8:	9b02      	ldr	r3, [sp, #8]
 80292da:	051b      	lsls	r3, r3, #20
 80292dc:	185b      	adds	r3, r3, r1
 80292de:	151a      	asrs	r2, r3, #20
 80292e0:	2a00      	cmp	r2, #0
 80292e2:	dc06      	bgt.n	80292f2 <__ieee754_pow+0x9ce>
 80292e4:	9a02      	ldr	r2, [sp, #8]
 80292e6:	f000 f929 	bl	802953c <scalbn>
 80292ea:	9a06      	ldr	r2, [sp, #24]
 80292ec:	9b07      	ldr	r3, [sp, #28]
 80292ee:	f7ff fb8b 	bl	8028a08 <__ieee754_pow+0xe4>
 80292f2:	0019      	movs	r1, r3
 80292f4:	e7f9      	b.n	80292ea <__ieee754_pow+0x9c6>
 80292f6:	2300      	movs	r3, #0
 80292f8:	4c15      	ldr	r4, [pc, #84]	@ (8029350 <__ieee754_pow+0xa2c>)
 80292fa:	9300      	str	r3, [sp, #0]
 80292fc:	9401      	str	r4, [sp, #4]
 80292fe:	f7ff fbc8 	bl	8028a92 <__ieee754_pow+0x16e>
 8029302:	46c0      	nop			@ (mov r8, r8)
 8029304:	3fe00000 	.word	0x3fe00000
 8029308:	fffffc02 	.word	0xfffffc02
 802930c:	fffffc01 	.word	0xfffffc01
 8029310:	fff00000 	.word	0xfff00000
 8029314:	3fe62e43 	.word	0x3fe62e43
 8029318:	fefa39ef 	.word	0xfefa39ef
 802931c:	3fe62e42 	.word	0x3fe62e42
 8029320:	0ca86c39 	.word	0x0ca86c39
 8029324:	be205c61 	.word	0xbe205c61
 8029328:	72bea4d0 	.word	0x72bea4d0
 802932c:	3e663769 	.word	0x3e663769
 8029330:	c5d26bf1 	.word	0xc5d26bf1
 8029334:	3ebbbd41 	.word	0x3ebbbd41
 8029338:	af25de2c 	.word	0xaf25de2c
 802933c:	3f11566a 	.word	0x3f11566a
 8029340:	16bebd93 	.word	0x16bebd93
 8029344:	3f66c16c 	.word	0x3f66c16c
 8029348:	5555553e 	.word	0x5555553e
 802934c:	3fc55555 	.word	0x3fc55555
 8029350:	3ff00000 	.word	0x3ff00000

08029354 <fabs>:
 8029354:	0049      	lsls	r1, r1, #1
 8029356:	084b      	lsrs	r3, r1, #1
 8029358:	0019      	movs	r1, r3
 802935a:	4770      	bx	lr

0802935c <__ieee754_expf>:
 802935c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802935e:	21ff      	movs	r1, #255	@ 0xff
 8029360:	0043      	lsls	r3, r0, #1
 8029362:	1c04      	adds	r4, r0, #0
 8029364:	085b      	lsrs	r3, r3, #1
 8029366:	05c9      	lsls	r1, r1, #23
 8029368:	428b      	cmp	r3, r1
 802936a:	d904      	bls.n	8029376 <__ieee754_expf+0x1a>
 802936c:	1c01      	adds	r1, r0, #0
 802936e:	1c20      	adds	r0, r4, #0
 8029370:	f7d7 faa6 	bl	80008c0 <__aeabi_fadd>
 8029374:	e00d      	b.n	8029392 <__ieee754_expf+0x36>
 8029376:	0fc6      	lsrs	r6, r0, #31
 8029378:	428b      	cmp	r3, r1
 802937a:	d104      	bne.n	8029386 <__ieee754_expf+0x2a>
 802937c:	2e00      	cmp	r6, #0
 802937e:	d000      	beq.n	8029382 <__ieee754_expf+0x26>
 8029380:	e0ba      	b.n	80294f8 <__ieee754_expf+0x19c>
 8029382:	1c20      	adds	r0, r4, #0
 8029384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8029386:	495d      	ldr	r1, [pc, #372]	@ (80294fc <__ieee754_expf+0x1a0>)
 8029388:	4288      	cmp	r0, r1
 802938a:	dd04      	ble.n	8029396 <__ieee754_expf+0x3a>
 802938c:	2000      	movs	r0, #0
 802938e:	f000 f98a 	bl	80296a6 <__math_oflowf>
 8029392:	1c04      	adds	r4, r0, #0
 8029394:	e7f5      	b.n	8029382 <__ieee754_expf+0x26>
 8029396:	2800      	cmp	r0, #0
 8029398:	da06      	bge.n	80293a8 <__ieee754_expf+0x4c>
 802939a:	4a59      	ldr	r2, [pc, #356]	@ (8029500 <__ieee754_expf+0x1a4>)
 802939c:	4293      	cmp	r3, r2
 802939e:	d903      	bls.n	80293a8 <__ieee754_expf+0x4c>
 80293a0:	2000      	movs	r0, #0
 80293a2:	f000 f97a 	bl	802969a <__math_uflowf>
 80293a6:	e7f4      	b.n	8029392 <__ieee754_expf+0x36>
 80293a8:	4a56      	ldr	r2, [pc, #344]	@ (8029504 <__ieee754_expf+0x1a8>)
 80293aa:	4293      	cmp	r3, r2
 80293ac:	d96e      	bls.n	802948c <__ieee754_expf+0x130>
 80293ae:	4a56      	ldr	r2, [pc, #344]	@ (8029508 <__ieee754_expf+0x1ac>)
 80293b0:	00b5      	lsls	r5, r6, #2
 80293b2:	4293      	cmp	r3, r2
 80293b4:	d84e      	bhi.n	8029454 <__ieee754_expf+0xf8>
 80293b6:	4b55      	ldr	r3, [pc, #340]	@ (802950c <__ieee754_expf+0x1b0>)
 80293b8:	1c20      	adds	r0, r4, #0
 80293ba:	5959      	ldr	r1, [r3, r5]
 80293bc:	f7d7 ff9a 	bl	80012f4 <__aeabi_fsub>
 80293c0:	4b53      	ldr	r3, [pc, #332]	@ (8029510 <__ieee754_expf+0x1b4>)
 80293c2:	1c07      	adds	r7, r0, #0
 80293c4:	595b      	ldr	r3, [r3, r5]
 80293c6:	2501      	movs	r5, #1
 80293c8:	4075      	eors	r5, r6
 80293ca:	9300      	str	r3, [sp, #0]
 80293cc:	1bad      	subs	r5, r5, r6
 80293ce:	9900      	ldr	r1, [sp, #0]
 80293d0:	1c38      	adds	r0, r7, #0
 80293d2:	f7d7 ff8f 	bl	80012f4 <__aeabi_fsub>
 80293d6:	1c04      	adds	r4, r0, #0
 80293d8:	1c21      	adds	r1, r4, #0
 80293da:	1c20      	adds	r0, r4, #0
 80293dc:	f7d7 fe30 	bl	8001040 <__aeabi_fmul>
 80293e0:	494c      	ldr	r1, [pc, #304]	@ (8029514 <__ieee754_expf+0x1b8>)
 80293e2:	1c06      	adds	r6, r0, #0
 80293e4:	f7d7 fe2c 	bl	8001040 <__aeabi_fmul>
 80293e8:	494b      	ldr	r1, [pc, #300]	@ (8029518 <__ieee754_expf+0x1bc>)
 80293ea:	f7d7 ff83 	bl	80012f4 <__aeabi_fsub>
 80293ee:	1c31      	adds	r1, r6, #0
 80293f0:	f7d7 fe26 	bl	8001040 <__aeabi_fmul>
 80293f4:	4949      	ldr	r1, [pc, #292]	@ (802951c <__ieee754_expf+0x1c0>)
 80293f6:	f7d7 fa63 	bl	80008c0 <__aeabi_fadd>
 80293fa:	1c31      	adds	r1, r6, #0
 80293fc:	f7d7 fe20 	bl	8001040 <__aeabi_fmul>
 8029400:	4947      	ldr	r1, [pc, #284]	@ (8029520 <__ieee754_expf+0x1c4>)
 8029402:	f7d7 ff77 	bl	80012f4 <__aeabi_fsub>
 8029406:	1c31      	adds	r1, r6, #0
 8029408:	f7d7 fe1a 	bl	8001040 <__aeabi_fmul>
 802940c:	4945      	ldr	r1, [pc, #276]	@ (8029524 <__ieee754_expf+0x1c8>)
 802940e:	f7d7 fa57 	bl	80008c0 <__aeabi_fadd>
 8029412:	1c31      	adds	r1, r6, #0
 8029414:	f7d7 fe14 	bl	8001040 <__aeabi_fmul>
 8029418:	1c01      	adds	r1, r0, #0
 802941a:	1c20      	adds	r0, r4, #0
 802941c:	f7d7 ff6a 	bl	80012f4 <__aeabi_fsub>
 8029420:	1c01      	adds	r1, r0, #0
 8029422:	1c06      	adds	r6, r0, #0
 8029424:	1c20      	adds	r0, r4, #0
 8029426:	f7d7 fe0b 	bl	8001040 <__aeabi_fmul>
 802942a:	9001      	str	r0, [sp, #4]
 802942c:	2d00      	cmp	r5, #0
 802942e:	d140      	bne.n	80294b2 <__ieee754_expf+0x156>
 8029430:	2180      	movs	r1, #128	@ 0x80
 8029432:	1c30      	adds	r0, r6, #0
 8029434:	05c9      	lsls	r1, r1, #23
 8029436:	f7d7 ff5d 	bl	80012f4 <__aeabi_fsub>
 802943a:	1c01      	adds	r1, r0, #0
 802943c:	9801      	ldr	r0, [sp, #4]
 802943e:	f7d7 fc31 	bl	8000ca4 <__aeabi_fdiv>
 8029442:	1c21      	adds	r1, r4, #0
 8029444:	f7d7 ff56 	bl	80012f4 <__aeabi_fsub>
 8029448:	1c01      	adds	r1, r0, #0
 802944a:	20fe      	movs	r0, #254	@ 0xfe
 802944c:	0580      	lsls	r0, r0, #22
 802944e:	f7d7 ff51 	bl	80012f4 <__aeabi_fsub>
 8029452:	e79e      	b.n	8029392 <__ieee754_expf+0x36>
 8029454:	4934      	ldr	r1, [pc, #208]	@ (8029528 <__ieee754_expf+0x1cc>)
 8029456:	1c20      	adds	r0, r4, #0
 8029458:	f7d7 fdf2 	bl	8001040 <__aeabi_fmul>
 802945c:	4b33      	ldr	r3, [pc, #204]	@ (802952c <__ieee754_expf+0x1d0>)
 802945e:	5959      	ldr	r1, [r3, r5]
 8029460:	f7d7 fa2e 	bl	80008c0 <__aeabi_fadd>
 8029464:	f7d8 f9c0 	bl	80017e8 <__aeabi_f2iz>
 8029468:	0005      	movs	r5, r0
 802946a:	f7d8 f9dd 	bl	8001828 <__aeabi_i2f>
 802946e:	4930      	ldr	r1, [pc, #192]	@ (8029530 <__ieee754_expf+0x1d4>)
 8029470:	1c06      	adds	r6, r0, #0
 8029472:	f7d7 fde5 	bl	8001040 <__aeabi_fmul>
 8029476:	1c01      	adds	r1, r0, #0
 8029478:	1c20      	adds	r0, r4, #0
 802947a:	f7d7 ff3b 	bl	80012f4 <__aeabi_fsub>
 802947e:	492d      	ldr	r1, [pc, #180]	@ (8029534 <__ieee754_expf+0x1d8>)
 8029480:	1c07      	adds	r7, r0, #0
 8029482:	1c30      	adds	r0, r6, #0
 8029484:	f7d7 fddc 	bl	8001040 <__aeabi_fmul>
 8029488:	9000      	str	r0, [sp, #0]
 802948a:	e7a0      	b.n	80293ce <__ieee754_expf+0x72>
 802948c:	22d0      	movs	r2, #208	@ 0xd0
 802948e:	0592      	lsls	r2, r2, #22
 8029490:	4293      	cmp	r3, r2
 8029492:	d20c      	bcs.n	80294ae <__ieee754_expf+0x152>
 8029494:	4928      	ldr	r1, [pc, #160]	@ (8029538 <__ieee754_expf+0x1dc>)
 8029496:	1c20      	adds	r0, r4, #0
 8029498:	f7d7 fa12 	bl	80008c0 <__aeabi_fadd>
 802949c:	21fe      	movs	r1, #254	@ 0xfe
 802949e:	0589      	lsls	r1, r1, #22
 80294a0:	f7d7 f85a 	bl	8000558 <__aeabi_fcmpgt>
 80294a4:	1e05      	subs	r5, r0, #0
 80294a6:	d097      	beq.n	80293d8 <__ieee754_expf+0x7c>
 80294a8:	21fe      	movs	r1, #254	@ 0xfe
 80294aa:	0589      	lsls	r1, r1, #22
 80294ac:	e75f      	b.n	802936e <__ieee754_expf+0x12>
 80294ae:	2500      	movs	r5, #0
 80294b0:	e792      	b.n	80293d8 <__ieee754_expf+0x7c>
 80294b2:	2080      	movs	r0, #128	@ 0x80
 80294b4:	1c31      	adds	r1, r6, #0
 80294b6:	05c0      	lsls	r0, r0, #23
 80294b8:	f7d7 ff1c 	bl	80012f4 <__aeabi_fsub>
 80294bc:	1c01      	adds	r1, r0, #0
 80294be:	9801      	ldr	r0, [sp, #4]
 80294c0:	f7d7 fbf0 	bl	8000ca4 <__aeabi_fdiv>
 80294c4:	1c01      	adds	r1, r0, #0
 80294c6:	9800      	ldr	r0, [sp, #0]
 80294c8:	f7d7 ff14 	bl	80012f4 <__aeabi_fsub>
 80294cc:	1c39      	adds	r1, r7, #0
 80294ce:	f7d7 ff11 	bl	80012f4 <__aeabi_fsub>
 80294d2:	1c01      	adds	r1, r0, #0
 80294d4:	20fe      	movs	r0, #254	@ 0xfe
 80294d6:	0580      	lsls	r0, r0, #22
 80294d8:	f7d7 ff0c 	bl	80012f4 <__aeabi_fsub>
 80294dc:	002b      	movs	r3, r5
 80294de:	337d      	adds	r3, #125	@ 0x7d
 80294e0:	db02      	blt.n	80294e8 <__ieee754_expf+0x18c>
 80294e2:	05ec      	lsls	r4, r5, #23
 80294e4:	1824      	adds	r4, r4, r0
 80294e6:	e74c      	b.n	8029382 <__ieee754_expf+0x26>
 80294e8:	21d8      	movs	r1, #216	@ 0xd8
 80294ea:	3564      	adds	r5, #100	@ 0x64
 80294ec:	05ed      	lsls	r5, r5, #23
 80294ee:	1828      	adds	r0, r5, r0
 80294f0:	0509      	lsls	r1, r1, #20
 80294f2:	f7d7 fda5 	bl	8001040 <__aeabi_fmul>
 80294f6:	e74c      	b.n	8029392 <__ieee754_expf+0x36>
 80294f8:	2400      	movs	r4, #0
 80294fa:	e742      	b.n	8029382 <__ieee754_expf+0x26>
 80294fc:	42b17217 	.word	0x42b17217
 8029500:	42cff1b5 	.word	0x42cff1b5
 8029504:	3eb17218 	.word	0x3eb17218
 8029508:	3f851591 	.word	0x3f851591
 802950c:	0802e5f8 	.word	0x0802e5f8
 8029510:	0802e5f0 	.word	0x0802e5f0
 8029514:	3331bb4c 	.word	0x3331bb4c
 8029518:	35ddea0e 	.word	0x35ddea0e
 802951c:	388ab355 	.word	0x388ab355
 8029520:	3b360b61 	.word	0x3b360b61
 8029524:	3e2aaaab 	.word	0x3e2aaaab
 8029528:	3fb8aa3b 	.word	0x3fb8aa3b
 802952c:	0802e600 	.word	0x0802e600
 8029530:	3f317180 	.word	0x3f317180
 8029534:	3717f7d1 	.word	0x3717f7d1
 8029538:	7149f2ca 	.word	0x7149f2ca

0802953c <scalbn>:
 802953c:	004b      	lsls	r3, r1, #1
 802953e:	b570      	push	{r4, r5, r6, lr}
 8029540:	0d5b      	lsrs	r3, r3, #21
 8029542:	0014      	movs	r4, r2
 8029544:	000d      	movs	r5, r1
 8029546:	2b00      	cmp	r3, #0
 8029548:	d10f      	bne.n	802956a <scalbn+0x2e>
 802954a:	004b      	lsls	r3, r1, #1
 802954c:	085b      	lsrs	r3, r3, #1
 802954e:	4303      	orrs	r3, r0
 8029550:	d012      	beq.n	8029578 <scalbn+0x3c>
 8029552:	4b23      	ldr	r3, [pc, #140]	@ (80295e0 <scalbn+0xa4>)
 8029554:	2200      	movs	r2, #0
 8029556:	f7d9 f9fd 	bl	8002954 <__aeabi_dmul>
 802955a:	4b22      	ldr	r3, [pc, #136]	@ (80295e4 <scalbn+0xa8>)
 802955c:	429c      	cmp	r4, r3
 802955e:	da0c      	bge.n	802957a <scalbn+0x3e>
 8029560:	4a21      	ldr	r2, [pc, #132]	@ (80295e8 <scalbn+0xac>)
 8029562:	4b22      	ldr	r3, [pc, #136]	@ (80295ec <scalbn+0xb0>)
 8029564:	f7d9 f9f6 	bl	8002954 <__aeabi_dmul>
 8029568:	e006      	b.n	8029578 <scalbn+0x3c>
 802956a:	4a21      	ldr	r2, [pc, #132]	@ (80295f0 <scalbn+0xb4>)
 802956c:	4293      	cmp	r3, r2
 802956e:	d108      	bne.n	8029582 <scalbn+0x46>
 8029570:	0002      	movs	r2, r0
 8029572:	000b      	movs	r3, r1
 8029574:	f7d8 f9ee 	bl	8001954 <__aeabi_dadd>
 8029578:	bd70      	pop	{r4, r5, r6, pc}
 802957a:	000d      	movs	r5, r1
 802957c:	004b      	lsls	r3, r1, #1
 802957e:	0d5b      	lsrs	r3, r3, #21
 8029580:	3b36      	subs	r3, #54	@ 0x36
 8029582:	4a1c      	ldr	r2, [pc, #112]	@ (80295f4 <scalbn+0xb8>)
 8029584:	4294      	cmp	r4, r2
 8029586:	dd0a      	ble.n	802959e <scalbn+0x62>
 8029588:	4c1b      	ldr	r4, [pc, #108]	@ (80295f8 <scalbn+0xbc>)
 802958a:	4d1c      	ldr	r5, [pc, #112]	@ (80295fc <scalbn+0xc0>)
 802958c:	2900      	cmp	r1, #0
 802958e:	da01      	bge.n	8029594 <scalbn+0x58>
 8029590:	4c19      	ldr	r4, [pc, #100]	@ (80295f8 <scalbn+0xbc>)
 8029592:	4d1b      	ldr	r5, [pc, #108]	@ (8029600 <scalbn+0xc4>)
 8029594:	4a18      	ldr	r2, [pc, #96]	@ (80295f8 <scalbn+0xbc>)
 8029596:	4b19      	ldr	r3, [pc, #100]	@ (80295fc <scalbn+0xc0>)
 8029598:	0020      	movs	r0, r4
 802959a:	0029      	movs	r1, r5
 802959c:	e7e2      	b.n	8029564 <scalbn+0x28>
 802959e:	18e2      	adds	r2, r4, r3
 80295a0:	4b18      	ldr	r3, [pc, #96]	@ (8029604 <scalbn+0xc8>)
 80295a2:	429a      	cmp	r2, r3
 80295a4:	dcf0      	bgt.n	8029588 <scalbn+0x4c>
 80295a6:	2a00      	cmp	r2, #0
 80295a8:	dd05      	ble.n	80295b6 <scalbn+0x7a>
 80295aa:	4b17      	ldr	r3, [pc, #92]	@ (8029608 <scalbn+0xcc>)
 80295ac:	0512      	lsls	r2, r2, #20
 80295ae:	402b      	ands	r3, r5
 80295b0:	4313      	orrs	r3, r2
 80295b2:	0019      	movs	r1, r3
 80295b4:	e7e0      	b.n	8029578 <scalbn+0x3c>
 80295b6:	0013      	movs	r3, r2
 80295b8:	3335      	adds	r3, #53	@ 0x35
 80295ba:	da08      	bge.n	80295ce <scalbn+0x92>
 80295bc:	4c0a      	ldr	r4, [pc, #40]	@ (80295e8 <scalbn+0xac>)
 80295be:	4d0b      	ldr	r5, [pc, #44]	@ (80295ec <scalbn+0xb0>)
 80295c0:	2900      	cmp	r1, #0
 80295c2:	da01      	bge.n	80295c8 <scalbn+0x8c>
 80295c4:	4c08      	ldr	r4, [pc, #32]	@ (80295e8 <scalbn+0xac>)
 80295c6:	4d11      	ldr	r5, [pc, #68]	@ (802960c <scalbn+0xd0>)
 80295c8:	4a07      	ldr	r2, [pc, #28]	@ (80295e8 <scalbn+0xac>)
 80295ca:	4b08      	ldr	r3, [pc, #32]	@ (80295ec <scalbn+0xb0>)
 80295cc:	e7e4      	b.n	8029598 <scalbn+0x5c>
 80295ce:	4b0e      	ldr	r3, [pc, #56]	@ (8029608 <scalbn+0xcc>)
 80295d0:	3236      	adds	r2, #54	@ 0x36
 80295d2:	401d      	ands	r5, r3
 80295d4:	0512      	lsls	r2, r2, #20
 80295d6:	432a      	orrs	r2, r5
 80295d8:	0011      	movs	r1, r2
 80295da:	4b0d      	ldr	r3, [pc, #52]	@ (8029610 <scalbn+0xd4>)
 80295dc:	2200      	movs	r2, #0
 80295de:	e7c1      	b.n	8029564 <scalbn+0x28>
 80295e0:	43500000 	.word	0x43500000
 80295e4:	ffff3cb0 	.word	0xffff3cb0
 80295e8:	c2f8f359 	.word	0xc2f8f359
 80295ec:	01a56e1f 	.word	0x01a56e1f
 80295f0:	000007ff 	.word	0x000007ff
 80295f4:	0000c350 	.word	0x0000c350
 80295f8:	8800759c 	.word	0x8800759c
 80295fc:	7e37e43c 	.word	0x7e37e43c
 8029600:	fe37e43c 	.word	0xfe37e43c
 8029604:	000007fe 	.word	0x000007fe
 8029608:	800fffff 	.word	0x800fffff
 802960c:	81a56e1f 	.word	0x81a56e1f
 8029610:	3c900000 	.word	0x3c900000

08029614 <with_errno>:
 8029614:	b570      	push	{r4, r5, r6, lr}
 8029616:	000d      	movs	r5, r1
 8029618:	0016      	movs	r6, r2
 802961a:	0004      	movs	r4, r0
 802961c:	f7fc f952 	bl	80258c4 <__errno>
 8029620:	0029      	movs	r1, r5
 8029622:	6006      	str	r6, [r0, #0]
 8029624:	0020      	movs	r0, r4
 8029626:	bd70      	pop	{r4, r5, r6, pc}

08029628 <xflow>:
 8029628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802962a:	0014      	movs	r4, r2
 802962c:	001d      	movs	r5, r3
 802962e:	2800      	cmp	r0, #0
 8029630:	d002      	beq.n	8029638 <xflow+0x10>
 8029632:	2180      	movs	r1, #128	@ 0x80
 8029634:	0609      	lsls	r1, r1, #24
 8029636:	185b      	adds	r3, r3, r1
 8029638:	9200      	str	r2, [sp, #0]
 802963a:	9301      	str	r3, [sp, #4]
 802963c:	9a00      	ldr	r2, [sp, #0]
 802963e:	9b01      	ldr	r3, [sp, #4]
 8029640:	0020      	movs	r0, r4
 8029642:	0029      	movs	r1, r5
 8029644:	f7d9 f986 	bl	8002954 <__aeabi_dmul>
 8029648:	2222      	movs	r2, #34	@ 0x22
 802964a:	f7ff ffe3 	bl	8029614 <with_errno>
 802964e:	b003      	add	sp, #12
 8029650:	bd30      	pop	{r4, r5, pc}

08029652 <__math_uflow>:
 8029652:	2380      	movs	r3, #128	@ 0x80
 8029654:	b510      	push	{r4, lr}
 8029656:	2200      	movs	r2, #0
 8029658:	055b      	lsls	r3, r3, #21
 802965a:	f7ff ffe5 	bl	8029628 <xflow>
 802965e:	bd10      	pop	{r4, pc}

08029660 <__math_oflow>:
 8029660:	23e0      	movs	r3, #224	@ 0xe0
 8029662:	b510      	push	{r4, lr}
 8029664:	2200      	movs	r2, #0
 8029666:	05db      	lsls	r3, r3, #23
 8029668:	f7ff ffde 	bl	8029628 <xflow>
 802966c:	bd10      	pop	{r4, pc}

0802966e <with_errnof>:
 802966e:	b570      	push	{r4, r5, r6, lr}
 8029670:	000d      	movs	r5, r1
 8029672:	1c04      	adds	r4, r0, #0
 8029674:	f7fc f926 	bl	80258c4 <__errno>
 8029678:	6005      	str	r5, [r0, #0]
 802967a:	1c20      	adds	r0, r4, #0
 802967c:	bd70      	pop	{r4, r5, r6, pc}

0802967e <xflowf>:
 802967e:	b510      	push	{r4, lr}
 8029680:	1c0b      	adds	r3, r1, #0
 8029682:	2800      	cmp	r0, #0
 8029684:	d002      	beq.n	802968c <xflowf+0xe>
 8029686:	2380      	movs	r3, #128	@ 0x80
 8029688:	061b      	lsls	r3, r3, #24
 802968a:	18cb      	adds	r3, r1, r3
 802968c:	1c18      	adds	r0, r3, #0
 802968e:	f7d7 fcd7 	bl	8001040 <__aeabi_fmul>
 8029692:	2122      	movs	r1, #34	@ 0x22
 8029694:	f7ff ffeb 	bl	802966e <with_errnof>
 8029698:	bd10      	pop	{r4, pc}

0802969a <__math_uflowf>:
 802969a:	2180      	movs	r1, #128	@ 0x80
 802969c:	b510      	push	{r4, lr}
 802969e:	0549      	lsls	r1, r1, #21
 80296a0:	f7ff ffed 	bl	802967e <xflowf>
 80296a4:	bd10      	pop	{r4, pc}

080296a6 <__math_oflowf>:
 80296a6:	21e0      	movs	r1, #224	@ 0xe0
 80296a8:	b510      	push	{r4, lr}
 80296aa:	05c9      	lsls	r1, r1, #23
 80296ac:	f7ff ffe7 	bl	802967e <xflowf>
 80296b0:	bd10      	pop	{r4, pc}
	...

080296b4 <__ieee754_sqrt>:
 80296b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80296b6:	000a      	movs	r2, r1
 80296b8:	000d      	movs	r5, r1
 80296ba:	496b      	ldr	r1, [pc, #428]	@ (8029868 <__ieee754_sqrt+0x1b4>)
 80296bc:	0004      	movs	r4, r0
 80296be:	0003      	movs	r3, r0
 80296c0:	0008      	movs	r0, r1
 80296c2:	b087      	sub	sp, #28
 80296c4:	4028      	ands	r0, r5
 80296c6:	4288      	cmp	r0, r1
 80296c8:	d111      	bne.n	80296ee <__ieee754_sqrt+0x3a>
 80296ca:	0022      	movs	r2, r4
 80296cc:	002b      	movs	r3, r5
 80296ce:	0020      	movs	r0, r4
 80296d0:	0029      	movs	r1, r5
 80296d2:	f7d9 f93f 	bl	8002954 <__aeabi_dmul>
 80296d6:	0002      	movs	r2, r0
 80296d8:	000b      	movs	r3, r1
 80296da:	0020      	movs	r0, r4
 80296dc:	0029      	movs	r1, r5
 80296de:	f7d8 f939 	bl	8001954 <__aeabi_dadd>
 80296e2:	0004      	movs	r4, r0
 80296e4:	000d      	movs	r5, r1
 80296e6:	0020      	movs	r0, r4
 80296e8:	0029      	movs	r1, r5
 80296ea:	b007      	add	sp, #28
 80296ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80296ee:	2d00      	cmp	r5, #0
 80296f0:	dc11      	bgt.n	8029716 <__ieee754_sqrt+0x62>
 80296f2:	0069      	lsls	r1, r5, #1
 80296f4:	0849      	lsrs	r1, r1, #1
 80296f6:	4321      	orrs	r1, r4
 80296f8:	d0f5      	beq.n	80296e6 <__ieee754_sqrt+0x32>
 80296fa:	2000      	movs	r0, #0
 80296fc:	4285      	cmp	r5, r0
 80296fe:	d010      	beq.n	8029722 <__ieee754_sqrt+0x6e>
 8029700:	0022      	movs	r2, r4
 8029702:	002b      	movs	r3, r5
 8029704:	0020      	movs	r0, r4
 8029706:	0029      	movs	r1, r5
 8029708:	f7d9 fc0a 	bl	8002f20 <__aeabi_dsub>
 802970c:	0002      	movs	r2, r0
 802970e:	000b      	movs	r3, r1
 8029710:	f7d8 fce6 	bl	80020e0 <__aeabi_ddiv>
 8029714:	e7e5      	b.n	80296e2 <__ieee754_sqrt+0x2e>
 8029716:	1528      	asrs	r0, r5, #20
 8029718:	d115      	bne.n	8029746 <__ieee754_sqrt+0x92>
 802971a:	2480      	movs	r4, #128	@ 0x80
 802971c:	2100      	movs	r1, #0
 802971e:	0364      	lsls	r4, r4, #13
 8029720:	e007      	b.n	8029732 <__ieee754_sqrt+0x7e>
 8029722:	0ada      	lsrs	r2, r3, #11
 8029724:	3815      	subs	r0, #21
 8029726:	055b      	lsls	r3, r3, #21
 8029728:	2a00      	cmp	r2, #0
 802972a:	d0fa      	beq.n	8029722 <__ieee754_sqrt+0x6e>
 802972c:	e7f5      	b.n	802971a <__ieee754_sqrt+0x66>
 802972e:	0052      	lsls	r2, r2, #1
 8029730:	3101      	adds	r1, #1
 8029732:	4222      	tst	r2, r4
 8029734:	d0fb      	beq.n	802972e <__ieee754_sqrt+0x7a>
 8029736:	1e4c      	subs	r4, r1, #1
 8029738:	1b00      	subs	r0, r0, r4
 802973a:	2420      	movs	r4, #32
 802973c:	001d      	movs	r5, r3
 802973e:	1a64      	subs	r4, r4, r1
 8029740:	40e5      	lsrs	r5, r4
 8029742:	408b      	lsls	r3, r1
 8029744:	432a      	orrs	r2, r5
 8029746:	4949      	ldr	r1, [pc, #292]	@ (802986c <__ieee754_sqrt+0x1b8>)
 8029748:	0312      	lsls	r2, r2, #12
 802974a:	1844      	adds	r4, r0, r1
 802974c:	2180      	movs	r1, #128	@ 0x80
 802974e:	0b12      	lsrs	r2, r2, #12
 8029750:	0349      	lsls	r1, r1, #13
 8029752:	4311      	orrs	r1, r2
 8029754:	07c0      	lsls	r0, r0, #31
 8029756:	d403      	bmi.n	8029760 <__ieee754_sqrt+0xac>
 8029758:	0fda      	lsrs	r2, r3, #31
 802975a:	0049      	lsls	r1, r1, #1
 802975c:	1851      	adds	r1, r2, r1
 802975e:	005b      	lsls	r3, r3, #1
 8029760:	2500      	movs	r5, #0
 8029762:	1062      	asrs	r2, r4, #1
 8029764:	0049      	lsls	r1, r1, #1
 8029766:	2480      	movs	r4, #128	@ 0x80
 8029768:	9205      	str	r2, [sp, #20]
 802976a:	0fda      	lsrs	r2, r3, #31
 802976c:	1852      	adds	r2, r2, r1
 802976e:	2016      	movs	r0, #22
 8029770:	0029      	movs	r1, r5
 8029772:	005b      	lsls	r3, r3, #1
 8029774:	03a4      	lsls	r4, r4, #14
 8029776:	190e      	adds	r6, r1, r4
 8029778:	4296      	cmp	r6, r2
 802977a:	dc02      	bgt.n	8029782 <__ieee754_sqrt+0xce>
 802977c:	1931      	adds	r1, r6, r4
 802977e:	1b92      	subs	r2, r2, r6
 8029780:	192d      	adds	r5, r5, r4
 8029782:	0fde      	lsrs	r6, r3, #31
 8029784:	0052      	lsls	r2, r2, #1
 8029786:	3801      	subs	r0, #1
 8029788:	1992      	adds	r2, r2, r6
 802978a:	005b      	lsls	r3, r3, #1
 802978c:	0864      	lsrs	r4, r4, #1
 802978e:	2800      	cmp	r0, #0
 8029790:	d1f1      	bne.n	8029776 <__ieee754_sqrt+0xc2>
 8029792:	2620      	movs	r6, #32
 8029794:	2780      	movs	r7, #128	@ 0x80
 8029796:	0004      	movs	r4, r0
 8029798:	9604      	str	r6, [sp, #16]
 802979a:	063f      	lsls	r7, r7, #24
 802979c:	183e      	adds	r6, r7, r0
 802979e:	46b4      	mov	ip, r6
 80297a0:	428a      	cmp	r2, r1
 80297a2:	dc02      	bgt.n	80297aa <__ieee754_sqrt+0xf6>
 80297a4:	d114      	bne.n	80297d0 <__ieee754_sqrt+0x11c>
 80297a6:	429e      	cmp	r6, r3
 80297a8:	d812      	bhi.n	80297d0 <__ieee754_sqrt+0x11c>
 80297aa:	4660      	mov	r0, ip
 80297ac:	4666      	mov	r6, ip
 80297ae:	19c0      	adds	r0, r0, r7
 80297b0:	9100      	str	r1, [sp, #0]
 80297b2:	2e00      	cmp	r6, #0
 80297b4:	da03      	bge.n	80297be <__ieee754_sqrt+0x10a>
 80297b6:	43c6      	mvns	r6, r0
 80297b8:	0ff6      	lsrs	r6, r6, #31
 80297ba:	198e      	adds	r6, r1, r6
 80297bc:	9600      	str	r6, [sp, #0]
 80297be:	1a52      	subs	r2, r2, r1
 80297c0:	4563      	cmp	r3, ip
 80297c2:	4189      	sbcs	r1, r1
 80297c4:	4249      	negs	r1, r1
 80297c6:	1a52      	subs	r2, r2, r1
 80297c8:	4661      	mov	r1, ip
 80297ca:	1a5b      	subs	r3, r3, r1
 80297cc:	9900      	ldr	r1, [sp, #0]
 80297ce:	19e4      	adds	r4, r4, r7
 80297d0:	0fde      	lsrs	r6, r3, #31
 80297d2:	0052      	lsls	r2, r2, #1
 80297d4:	1992      	adds	r2, r2, r6
 80297d6:	9e04      	ldr	r6, [sp, #16]
 80297d8:	005b      	lsls	r3, r3, #1
 80297da:	3e01      	subs	r6, #1
 80297dc:	087f      	lsrs	r7, r7, #1
 80297de:	9604      	str	r6, [sp, #16]
 80297e0:	2e00      	cmp	r6, #0
 80297e2:	d1db      	bne.n	802979c <__ieee754_sqrt+0xe8>
 80297e4:	431a      	orrs	r2, r3
 80297e6:	d01f      	beq.n	8029828 <__ieee754_sqrt+0x174>
 80297e8:	4e21      	ldr	r6, [pc, #132]	@ (8029870 <__ieee754_sqrt+0x1bc>)
 80297ea:	4f22      	ldr	r7, [pc, #136]	@ (8029874 <__ieee754_sqrt+0x1c0>)
 80297ec:	6830      	ldr	r0, [r6, #0]
 80297ee:	6871      	ldr	r1, [r6, #4]
 80297f0:	683a      	ldr	r2, [r7, #0]
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	9200      	str	r2, [sp, #0]
 80297f6:	9301      	str	r3, [sp, #4]
 80297f8:	6832      	ldr	r2, [r6, #0]
 80297fa:	6873      	ldr	r3, [r6, #4]
 80297fc:	9202      	str	r2, [sp, #8]
 80297fe:	9303      	str	r3, [sp, #12]
 8029800:	9a00      	ldr	r2, [sp, #0]
 8029802:	9b01      	ldr	r3, [sp, #4]
 8029804:	f7d9 fb8c 	bl	8002f20 <__aeabi_dsub>
 8029808:	0002      	movs	r2, r0
 802980a:	000b      	movs	r3, r1
 802980c:	9802      	ldr	r0, [sp, #8]
 802980e:	9903      	ldr	r1, [sp, #12]
 8029810:	f7d6 fe5e 	bl	80004d0 <__aeabi_dcmple>
 8029814:	2800      	cmp	r0, #0
 8029816:	d007      	beq.n	8029828 <__ieee754_sqrt+0x174>
 8029818:	6830      	ldr	r0, [r6, #0]
 802981a:	6871      	ldr	r1, [r6, #4]
 802981c:	683a      	ldr	r2, [r7, #0]
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	1c67      	adds	r7, r4, #1
 8029822:	d10c      	bne.n	802983e <__ieee754_sqrt+0x18a>
 8029824:	9c04      	ldr	r4, [sp, #16]
 8029826:	3501      	adds	r5, #1
 8029828:	4a13      	ldr	r2, [pc, #76]	@ (8029878 <__ieee754_sqrt+0x1c4>)
 802982a:	106b      	asrs	r3, r5, #1
 802982c:	189b      	adds	r3, r3, r2
 802982e:	9a05      	ldr	r2, [sp, #20]
 8029830:	07ed      	lsls	r5, r5, #31
 8029832:	0864      	lsrs	r4, r4, #1
 8029834:	0512      	lsls	r2, r2, #20
 8029836:	4325      	orrs	r5, r4
 8029838:	0028      	movs	r0, r5
 802983a:	18d1      	adds	r1, r2, r3
 802983c:	e751      	b.n	80296e2 <__ieee754_sqrt+0x2e>
 802983e:	f7d8 f889 	bl	8001954 <__aeabi_dadd>
 8029842:	6877      	ldr	r7, [r6, #4]
 8029844:	6836      	ldr	r6, [r6, #0]
 8029846:	0002      	movs	r2, r0
 8029848:	000b      	movs	r3, r1
 802984a:	0030      	movs	r0, r6
 802984c:	0039      	movs	r1, r7
 802984e:	f7d6 fe35 	bl	80004bc <__aeabi_dcmplt>
 8029852:	2800      	cmp	r0, #0
 8029854:	d004      	beq.n	8029860 <__ieee754_sqrt+0x1ac>
 8029856:	3402      	adds	r4, #2
 8029858:	4263      	negs	r3, r4
 802985a:	4163      	adcs	r3, r4
 802985c:	18ed      	adds	r5, r5, r3
 802985e:	e7e3      	b.n	8029828 <__ieee754_sqrt+0x174>
 8029860:	2301      	movs	r3, #1
 8029862:	3401      	adds	r4, #1
 8029864:	439c      	bics	r4, r3
 8029866:	e7df      	b.n	8029828 <__ieee754_sqrt+0x174>
 8029868:	7ff00000 	.word	0x7ff00000
 802986c:	fffffc01 	.word	0xfffffc01
 8029870:	0802e610 	.word	0x0802e610
 8029874:	0802e608 	.word	0x0802e608
 8029878:	3fe00000 	.word	0x3fe00000

0802987c <_init>:
 802987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802987e:	46c0      	nop			@ (mov r8, r8)
 8029880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029882:	bc08      	pop	{r3}
 8029884:	469e      	mov	lr, r3
 8029886:	4770      	bx	lr

08029888 <_fini>:
 8029888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802988a:	46c0      	nop			@ (mov r8, r8)
 802988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802988e:	bc08      	pop	{r3}
 8029890:	469e      	mov	lr, r3
 8029892:	4770      	bx	lr
